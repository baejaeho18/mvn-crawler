Compiled from "V3ReplicationProtocol.java"
public class org.postgresql.core.v3.replication.V3ReplicationProtocol implements org.postgresql.core.ReplicationProtocol {
  private static final java.util.logging.Logger LOGGER;

  private final org.postgresql.core.QueryExecutor queryExecutor;

  private final org.postgresql.core.PGStream pgStream;

  public org.postgresql.core.v3.replication.V3ReplicationProtocol(org.postgresql.core.QueryExecutor, org.postgresql.core.PGStream);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field queryExecutor:Lorg/postgresql/core/QueryExecutor;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field pgStream:Lorg/postgresql/core/PGStream;
      14: return

  public org.postgresql.replication.PGReplicationStream startLogical(org.postgresql.replication.fluent.logical.LogicalReplicationOptions) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method createStartLogicalQuery:(Lorg/postgresql/replication/fluent/logical/LogicalReplicationOptions;)Ljava/lang/String;
       5: astore_2
       6: aload_0
       7: aload_2
       8: aload_1
       9: getstatic     #5                  // Field org/postgresql/replication/ReplicationType.LOGICAL:Lorg/postgresql/replication/ReplicationType;
      12: invokespecial #6                  // Method initializeReplication:(Ljava/lang/String;Lorg/postgresql/replication/fluent/CommonOptions;Lorg/postgresql/replication/ReplicationType;)Lorg/postgresql/replication/PGReplicationStream;
      15: areturn

  public org.postgresql.replication.PGReplicationStream startPhysical(org.postgresql.replication.fluent.physical.PhysicalReplicationOptions) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method createStartPhysicalQuery:(Lorg/postgresql/replication/fluent/physical/PhysicalReplicationOptions;)Ljava/lang/String;
       5: astore_2
       6: aload_0
       7: aload_2
       8: aload_1
       9: getstatic     #8                  // Field org/postgresql/replication/ReplicationType.PHYSICAL:Lorg/postgresql/replication/ReplicationType;
      12: invokespecial #6                  // Method initializeReplication:(Ljava/lang/String;Lorg/postgresql/replication/fluent/CommonOptions;Lorg/postgresql/replication/ReplicationType;)Lorg/postgresql/replication/PGReplicationStream;
      15: areturn

  private org.postgresql.replication.PGReplicationStream initializeReplication(java.lang.String, org.postgresql.replication.fluent.CommonOptions, org.postgresql.replication.ReplicationType) throws java.sql.SQLException;
    Code:
       0: getstatic     #9                  // Field LOGGER:Ljava/util/logging/Logger;
       3: getstatic     #10                 // Field java/util/logging/Level.FINEST:Ljava/util/logging/Level;
       6: ldc           #11                 // String  FE=> StartReplication(query: {0})
       8: aload_1
       9: invokevirtual #12                 // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Object;)V
      12: aload_0
      13: aload_2
      14: invokespecial #13                 // Method configureSocketTimeout:(Lorg/postgresql/replication/fluent/CommonOptions;)V
      17: aload_0
      18: getfield      #2                  // Field queryExecutor:Lorg/postgresql/core/QueryExecutor;
      21: aload_1
      22: iconst_1
      23: invokeinterface #14,  3           // InterfaceMethod org/postgresql/core/QueryExecutor.startCopy:(Ljava/lang/String;Z)Lorg/postgresql/copy/CopyOperation;
      28: checkcast     #15                 // class org/postgresql/copy/CopyDual
      31: astore        4
      33: new           #16                 // class org/postgresql/core/v3/replication/V3PGReplicationStream
      36: dup
      37: aload         4
      39: aload_2
      40: invokeinterface #17,  1           // InterfaceMethod org/postgresql/replication/fluent/CommonOptions.getStartLSNPosition:()Lorg/postgresql/replication/LogSequenceNumber;
      45: aload_2
      46: invokeinterface #18,  1           // InterfaceMethod org/postgresql/replication/fluent/CommonOptions.getStatusInterval:()I
      51: i2l
      52: aload_3
      53: invokespecial #19                 // Method org/postgresql/core/v3/replication/V3PGReplicationStream."<init>":(Lorg/postgresql/copy/CopyDual;Lorg/postgresql/replication/LogSequenceNumber;JLorg/postgresql/replication/ReplicationType;)V
      56: areturn

  private java.lang.String createStartPhysicalQuery(org.postgresql.replication.fluent.physical.PhysicalReplicationOptions);
    Code:
       0: new           #20                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_2
       8: aload_2
       9: ldc           #22                 // String START_REPLICATION
      11: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: pop
      15: aload_1
      16: invokeinterface #24,  1           // InterfaceMethod org/postgresql/replication/fluent/physical/PhysicalReplicationOptions.getSlotName:()Ljava/lang/String;
      21: ifnull        40
      24: aload_2
      25: ldc           #25                 // String  SLOT
      27: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_1
      31: invokeinterface #24,  1           // InterfaceMethod org/postgresql/replication/fluent/physical/PhysicalReplicationOptions.getSlotName:()Ljava/lang/String;
      36: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: pop
      40: aload_2
      41: ldc           #26                 // String  PHYSICAL
      43: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_1
      47: invokeinterface #27,  1           // InterfaceMethod org/postgresql/replication/fluent/physical/PhysicalReplicationOptions.getStartLSNPosition:()Lorg/postgresql/replication/LogSequenceNumber;
      52: invokevirtual #28                 // Method org/postgresql/replication/LogSequenceNumber.asString:()Ljava/lang/String;
      55: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: pop
      59: aload_2
      60: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      63: areturn

  private java.lang.String createStartLogicalQuery(org.postgresql.replication.fluent.logical.LogicalReplicationOptions);
    Code:
       0: new           #20                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_2
       8: aload_2
       9: ldc           #30                 // String START_REPLICATION SLOT
      11: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: aload_1
      15: invokeinterface #31,  1           // InterfaceMethod org/postgresql/replication/fluent/logical/LogicalReplicationOptions.getSlotName:()Ljava/lang/String;
      20: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: ldc           #32                 // String  LOGICAL
      25: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: aload_1
      29: invokeinterface #33,  1           // InterfaceMethod org/postgresql/replication/fluent/logical/LogicalReplicationOptions.getStartLSNPosition:()Lorg/postgresql/replication/LogSequenceNumber;
      34: invokevirtual #28                 // Method org/postgresql/replication/LogSequenceNumber.asString:()Ljava/lang/String;
      37: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: pop
      41: aload_1
      42: invokeinterface #34,  1           // InterfaceMethod org/postgresql/replication/fluent/logical/LogicalReplicationOptions.getSlotOptions:()Ljava/util/Properties;
      47: astore_3
      48: aload_3
      49: invokevirtual #35                 // Method java/util/Properties.isEmpty:()Z
      52: ifeq          60
      55: aload_2
      56: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: areturn
      60: aload_2
      61: ldc           #36                 // String  (
      63: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      66: pop
      67: iconst_1
      68: istore        4
      70: aload_3
      71: invokevirtual #37                 // Method java/util/Properties.stringPropertyNames:()Ljava/util/Set;
      74: invokeinterface #38,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      79: astore        5
      81: aload         5
      83: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      88: ifeq          165
      91: aload         5
      93: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      98: checkcast     #41                 // class java/lang/String
     101: astore        6
     103: iload         4
     105: ifeq          114
     108: iconst_0
     109: istore        4
     111: goto          121
     114: aload_2
     115: ldc           #42                 // String ,
     117: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     120: pop
     121: aload_2
     122: bipush        34
     124: invokevirtual #43                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     127: aload         6
     129: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     132: bipush        34
     134: invokevirtual #43                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     137: ldc           #44                 // String
     139: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     142: bipush        39
     144: invokevirtual #43                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     147: aload_3
     148: aload         6
     150: invokevirtual #45                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     153: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     156: bipush        39
     158: invokevirtual #43                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     161: pop
     162: goto          81
     165: aload_2
     166: ldc           #46                 // String )
     168: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     171: pop
     172: aload_2
     173: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     176: areturn

  private void configureSocketTimeout(org.postgresql.replication.fluent.CommonOptions) throws org.postgresql.util.PSQLException;
    Code:
       0: aload_1
       1: invokeinterface #18,  1           // InterfaceMethod org/postgresql/replication/fluent/CommonOptions.getStatusInterval:()I
       6: ifne          10
       9: return
      10: aload_0
      11: getfield      #3                  // Field pgStream:Lorg/postgresql/core/PGStream;
      14: invokevirtual #47                 // Method org/postgresql/core/PGStream.getSocket:()Ljava/net/Socket;
      17: invokevirtual #48                 // Method java/net/Socket.getSoTimeout:()I
      20: istore_2
      21: iload_2
      22: ifle          39
      25: iload_2
      26: aload_1
      27: invokeinterface #18,  1           // InterfaceMethod org/postgresql/replication/fluent/CommonOptions.getStatusInterval:()I
      32: invokestatic  #49                 // Method java/lang/Math.min:(II)I
      35: istore_3
      36: goto          46
      39: aload_1
      40: invokeinterface #18,  1           // InterfaceMethod org/postgresql/replication/fluent/CommonOptions.getStatusInterval:()I
      45: istore_3
      46: aload_0
      47: getfield      #3                  // Field pgStream:Lorg/postgresql/core/PGStream;
      50: invokevirtual #47                 // Method org/postgresql/core/PGStream.getSocket:()Ljava/net/Socket;
      53: iload_3
      54: invokevirtual #50                 // Method java/net/Socket.setSoTimeout:(I)V
      57: goto          82
      60: astore_2
      61: new           #52                 // class org/postgresql/util/PSQLException
      64: dup
      65: ldc           #53                 // String The connection attempt failed.
      67: iconst_0
      68: anewarray     #54                 // class java/lang/Object
      71: invokestatic  #55                 // Method org/postgresql/util/GT.tr:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      74: getstatic     #56                 // Field org/postgresql/util/PSQLState.CONNECTION_UNABLE_TO_CONNECT:Lorg/postgresql/util/PSQLState;
      77: aload_2
      78: invokespecial #57                 // Method org/postgresql/util/PSQLException."<init>":(Ljava/lang/String;Lorg/postgresql/util/PSQLState;Ljava/lang/Throwable;)V
      81: athrow
      82: return
    Exception table:
       from    to  target type
          10    57    60   Class java/io/IOException

  static {};
    Code:
       0: ldc           #58                 // class org/postgresql/core/v3/replication/V3ReplicationProtocol
       2: invokevirtual #59                 // Method java/lang/Class.getName:()Ljava/lang/String;
       5: invokestatic  #60                 // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       8: putstatic     #9                  // Field LOGGER:Ljava/util/logging/Logger;
      11: return
}
