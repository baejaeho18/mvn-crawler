Compiled from "PGProperty.java"
public final class org.postgresql.PGProperty extends java.lang.Enum<org.postgresql.PGProperty> {
  public static final org.postgresql.PGProperty PG_DBNAME;

  public static final org.postgresql.PGProperty PG_HOST;

  public static final org.postgresql.PGProperty PG_PORT;

  public static final org.postgresql.PGProperty USER;

  public static final org.postgresql.PGProperty PASSWORD;

  public static final org.postgresql.PGProperty PROTOCOL_VERSION;

  public static final org.postgresql.PGProperty LOGGER_LEVEL;

  public static final org.postgresql.PGProperty LOGGER_FILE;

  public static final org.postgresql.PGProperty PREPARE_THRESHOLD;

  public static final org.postgresql.PGProperty PREPARED_STATEMENT_CACHE_QUERIES;

  public static final org.postgresql.PGProperty PREPARED_STATEMENT_CACHE_SIZE_MIB;

  public static final org.postgresql.PGProperty DATABASE_METADATA_CACHE_FIELDS;

  public static final org.postgresql.PGProperty DATABASE_METADATA_CACHE_FIELDS_MIB;

  public static final org.postgresql.PGProperty DEFAULT_ROW_FETCH_SIZE;

  public static final org.postgresql.PGProperty BINARY_TRANSFER;

  public static final org.postgresql.PGProperty READ_ONLY;

  public static final org.postgresql.PGProperty BINARY_TRANSFER_ENABLE;

  public static final org.postgresql.PGProperty BINARY_TRANSFER_DISABLE;

  public static final org.postgresql.PGProperty STRING_TYPE;

  public static final org.postgresql.PGProperty UNKNOWN_LENGTH;

  public static final org.postgresql.PGProperty LOG_UNCLOSED_CONNECTIONS;

  public static final org.postgresql.PGProperty DISABLE_COLUMN_SANITISER;

  public static final org.postgresql.PGProperty SSL;

  public static final org.postgresql.PGProperty SSL_MODE;

  public static final org.postgresql.PGProperty SSL_FACTORY;

  public static final org.postgresql.PGProperty SSL_FACTORY_ARG;

  public static final org.postgresql.PGProperty SSL_HOSTNAME_VERIFIER;

  public static final org.postgresql.PGProperty SSL_CERT;

  public static final org.postgresql.PGProperty SSL_KEY;

  public static final org.postgresql.PGProperty SSL_ROOT_CERT;

  public static final org.postgresql.PGProperty SSL_PASSWORD;

  public static final org.postgresql.PGProperty SSL_PASSWORD_CALLBACK;

  public static final org.postgresql.PGProperty TCP_KEEP_ALIVE;

  public static final org.postgresql.PGProperty LOGIN_TIMEOUT;

  public static final org.postgresql.PGProperty CONNECT_TIMEOUT;

  public static final org.postgresql.PGProperty SOCKET_TIMEOUT;

  public static final org.postgresql.PGProperty CANCEL_SIGNAL_TIMEOUT;

  public static final org.postgresql.PGProperty SOCKET_FACTORY;

  public static final org.postgresql.PGProperty SOCKET_FACTORY_ARG;

  public static final org.postgresql.PGProperty RECEIVE_BUFFER_SIZE;

  public static final org.postgresql.PGProperty SEND_BUFFER_SIZE;

  public static final org.postgresql.PGProperty ASSUME_MIN_SERVER_VERSION;

  public static final org.postgresql.PGProperty APPLICATION_NAME;

  public static final org.postgresql.PGProperty JAAS_APPLICATION_NAME;

  public static final org.postgresql.PGProperty KERBEROS_SERVER_NAME;

  public static final org.postgresql.PGProperty USE_SPNEGO;

  public static final org.postgresql.PGProperty GSS_LIB;

  public static final org.postgresql.PGProperty SSPI_SERVICE_CLASS;

  public static final org.postgresql.PGProperty ALLOW_ENCODING_CHANGES;

  public static final org.postgresql.PGProperty CURRENT_SCHEMA;

  public static final org.postgresql.PGProperty TARGET_SERVER_TYPE;

  public static final org.postgresql.PGProperty LOAD_BALANCE_HOSTS;

  public static final org.postgresql.PGProperty HOST_RECHECK_SECONDS;

  public static final org.postgresql.PGProperty PREFER_QUERY_MODE;

  public static final org.postgresql.PGProperty AUTOSAVE;

  public static final org.postgresql.PGProperty REWRITE_BATCHED_INSERTS;

  public static final org.postgresql.PGProperty REPLICATION;

  private java.lang.String _name;

  private java.lang.String _defaultValue;

  private boolean _required;

  private java.lang.String _description;

  private java.lang.String[] _choices;

  private static final org.postgresql.PGProperty[] $VALUES;

  public static org.postgresql.PGProperty[] values();
    Code:
       0: getstatic     #1                  // Field $VALUES:[Lorg/postgresql/PGProperty;
       3: invokevirtual #2                  // Method "[Lorg/postgresql/PGProperty;".clone:()Ljava/lang/Object;
       6: checkcast     #3                  // class "[Lorg/postgresql/PGProperty;"
       9: areturn

  public static org.postgresql.PGProperty valueOf(java.lang.String);
    Code:
       0: ldc           #4                  // class org/postgresql/PGProperty
       2: aload_0
       3: invokestatic  #5                  // Method java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
       6: checkcast     #4                  // class org/postgresql/PGProperty
       9: areturn

  private org.postgresql.PGProperty(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: iconst_0
       9: invokespecial #6                  // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
      12: return

  private org.postgresql.PGProperty(java.lang.String, java.lang.String, java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: iload         6
      10: aconst_null
      11: checkcast     #7                  // class "[Ljava/lang/String;"
      14: invokespecial #8                  // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z[Ljava/lang/String;)V
      17: return

  private org.postgresql.PGProperty(java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #9                  // Method java/lang/Enum."<init>":(Ljava/lang/String;I)V
       6: aload_0
       7: aload_3
       8: putfield      #10                 // Field _name:Ljava/lang/String;
      11: aload_0
      12: aload         4
      14: putfield      #11                 // Field _defaultValue:Ljava/lang/String;
      17: aload_0
      18: iload         6
      20: putfield      #12                 // Field _required:Z
      23: aload_0
      24: aload         5
      26: putfield      #13                 // Field _description:Ljava/lang/String;
      29: aload_0
      30: aload         7
      32: putfield      #14                 // Field _choices:[Ljava/lang/String;
      35: return

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #10                 // Field _name:Ljava/lang/String;
       4: areturn

  public java.lang.String getDefaultValue();
    Code:
       0: aload_0
       1: getfield      #11                 // Field _defaultValue:Ljava/lang/String;
       4: areturn

  public java.lang.String[] getChoices();
    Code:
       0: aload_0
       1: getfield      #14                 // Field _choices:[Ljava/lang/String;
       4: areturn

  public java.lang.String get(java.util.Properties);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #10                 // Field _name:Ljava/lang/String;
       5: aload_0
       6: getfield      #11                 // Field _defaultValue:Ljava/lang/String;
       9: invokevirtual #15                 // Method java/util/Properties.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      12: areturn

  public void set(java.util.Properties, java.lang.String);
    Code:
       0: aload_2
       1: ifnonnull     16
       4: aload_1
       5: aload_0
       6: getfield      #10                 // Field _name:Ljava/lang/String;
       9: invokevirtual #16                 // Method java/util/Properties.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      12: pop
      13: goto          26
      16: aload_1
      17: aload_0
      18: getfield      #10                 // Field _name:Ljava/lang/String;
      21: aload_2
      22: invokevirtual #17                 // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
      25: pop
      26: return

  public boolean getBoolean(java.util.Properties);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #18                 // Method get:(Ljava/util/Properties;)Ljava/lang/String;
       5: invokestatic  #19                 // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
       8: invokevirtual #20                 // Method java/lang/Boolean.booleanValue:()Z
      11: ireturn

  public int getIntNoCheck(java.util.Properties);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #18                 // Method get:(Ljava/util/Properties;)Ljava/lang/String;
       5: astore_2
       6: aload_2
       7: invokestatic  #21                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      10: ireturn

  public int getInt(java.util.Properties) throws org.postgresql.util.PSQLException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #18                 // Method get:(Ljava/util/Properties;)Ljava/lang/String;
       5: astore_2
       6: aload_2
       7: invokestatic  #21                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      10: ireturn
      11: astore_3
      12: new           #23                 // class org/postgresql/util/PSQLException
      15: dup
      16: ldc           #24                 // String {0} parameter value must be an integer but was: {1}
      18: iconst_2
      19: anewarray     #25                 // class java/lang/Object
      22: dup
      23: iconst_0
      24: aload_0
      25: invokevirtual #26                 // Method getName:()Ljava/lang/String;
      28: aastore
      29: dup
      30: iconst_1
      31: aload_2
      32: aastore
      33: invokestatic  #27                 // Method org/postgresql/util/GT.tr:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      36: getstatic     #28                 // Field org/postgresql/util/PSQLState.INVALID_PARAMETER_VALUE:Lorg/postgresql/util/PSQLState;
      39: aload_3
      40: invokespecial #29                 // Method org/postgresql/util/PSQLException."<init>":(Ljava/lang/String;Lorg/postgresql/util/PSQLState;Ljava/lang/Throwable;)V
      43: athrow
    Exception table:
       from    to  target type
           6    10    11   Class java/lang/NumberFormatException

  public java.lang.Integer getInteger(java.util.Properties) throws org.postgresql.util.PSQLException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #18                 // Method get:(Ljava/util/Properties;)Ljava/lang/String;
       5: astore_2
       6: aload_2
       7: ifnonnull     12
      10: aconst_null
      11: areturn
      12: aload_2
      13: invokestatic  #21                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      16: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      19: areturn
      20: astore_3
      21: new           #23                 // class org/postgresql/util/PSQLException
      24: dup
      25: ldc           #24                 // String {0} parameter value must be an integer but was: {1}
      27: iconst_2
      28: anewarray     #25                 // class java/lang/Object
      31: dup
      32: iconst_0
      33: aload_0
      34: invokevirtual #26                 // Method getName:()Ljava/lang/String;
      37: aastore
      38: dup
      39: iconst_1
      40: aload_2
      41: aastore
      42: invokestatic  #27                 // Method org/postgresql/util/GT.tr:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      45: getstatic     #28                 // Field org/postgresql/util/PSQLState.INVALID_PARAMETER_VALUE:Lorg/postgresql/util/PSQLState;
      48: aload_3
      49: invokespecial #29                 // Method org/postgresql/util/PSQLException."<init>":(Ljava/lang/String;Lorg/postgresql/util/PSQLState;Ljava/lang/Throwable;)V
      52: athrow
    Exception table:
       from    to  target type
          12    19    20   Class java/lang/NumberFormatException

  public void set(java.util.Properties, boolean);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #10                 // Field _name:Ljava/lang/String;
       5: iload_2
       6: invokestatic  #31                 // Method java/lang/Boolean.toString:(Z)Ljava/lang/String;
       9: invokevirtual #17                 // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
      12: pop
      13: return

  public void set(java.util.Properties, int);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #10                 // Field _name:Ljava/lang/String;
       5: iload_2
       6: invokestatic  #32                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
       9: invokevirtual #17                 // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
      12: pop
      13: return

  public boolean isPresent(java.util.Properties);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #33                 // Method getSetString:(Ljava/util/Properties;)Ljava/lang/String;
       5: ifnull        12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public java.sql.DriverPropertyInfo toDriverPropertyInfo(java.util.Properties);
    Code:
       0: new           #34                 // class java/sql/DriverPropertyInfo
       3: dup
       4: aload_0
       5: getfield      #10                 // Field _name:Ljava/lang/String;
       8: aload_0
       9: aload_1
      10: invokevirtual #18                 // Method get:(Ljava/util/Properties;)Ljava/lang/String;
      13: invokespecial #35                 // Method java/sql/DriverPropertyInfo."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      16: astore_2
      17: aload_2
      18: aload_0
      19: getfield      #12                 // Field _required:Z
      22: putfield      #36                 // Field java/sql/DriverPropertyInfo.required:Z
      25: aload_2
      26: aload_0
      27: getfield      #13                 // Field _description:Ljava/lang/String;
      30: putfield      #37                 // Field java/sql/DriverPropertyInfo.description:Ljava/lang/String;
      33: aload_2
      34: aload_0
      35: getfield      #14                 // Field _choices:[Ljava/lang/String;
      38: putfield      #38                 // Field java/sql/DriverPropertyInfo.choices:[Ljava/lang/String;
      41: aload_2
      42: areturn

  public static org.postgresql.PGProperty forName(java.lang.String);
    Code:
       0: invokestatic  #39                 // Method values:()[Lorg/postgresql/PGProperty;
       3: astore_1
       4: aload_1
       5: arraylength
       6: istore_2
       7: iconst_0
       8: istore_3
       9: iload_3
      10: iload_2
      11: if_icmpge     40
      14: aload_1
      15: iload_3
      16: aaload
      17: astore        4
      19: aload         4
      21: invokevirtual #26                 // Method getName:()Ljava/lang/String;
      24: aload_0
      25: invokevirtual #40                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      28: ifeq          34
      31: aload         4
      33: areturn
      34: iinc          3, 1
      37: goto          9
      40: aconst_null
      41: areturn

  public java.lang.String getSetString(java.util.Properties);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #10                 // Field _name:Ljava/lang/String;
       5: invokevirtual #41                 // Method java/util/Properties.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: astore_2
       9: aload_2
      10: instanceof    #42                 // class java/lang/String
      13: ifeq          21
      16: aload_2
      17: checkcast     #42                 // class java/lang/String
      20: areturn
      21: aconst_null
      22: areturn

  static {};
    Code:
       0: new           #4                  // class org/postgresql/PGProperty
       3: dup
       4: ldc           #43                 // String PG_DBNAME
       6: iconst_0
       7: ldc           #44                 // String PGDBNAME
       9: aconst_null
      10: ldc           #45                 // String Database name to connect to (may be specified directly in the JDBC URL)
      12: iconst_1
      13: invokespecial #6                  // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
      16: putstatic     #46                 // Field PG_DBNAME:Lorg/postgresql/PGProperty;
      19: new           #4                  // class org/postgresql/PGProperty
      22: dup
      23: ldc           #47                 // String PG_HOST
      25: iconst_1
      26: ldc           #48                 // String PGHOST
      28: aconst_null
      29: ldc           #49                 // String Hostname of the PostgreSQL server (may be specified directly in the JDBC URL)
      31: iconst_0
      32: invokespecial #6                  // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
      35: putstatic     #50                 // Field PG_HOST:Lorg/postgresql/PGProperty;
      38: new           #4                  // class org/postgresql/PGProperty
      41: dup
      42: ldc           #51                 // String PG_PORT
      44: iconst_2
      45: ldc           #52                 // String PGPORT
      47: aconst_null
      48: ldc           #53                 // String Port of the PostgreSQL server (may be specified directly in the JDBC URL)
      50: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      53: putstatic     #55                 // Field PG_PORT:Lorg/postgresql/PGProperty;
      56: new           #4                  // class org/postgresql/PGProperty
      59: dup
      60: ldc           #56                 // String USER
      62: iconst_3
      63: ldc           #57                 // String user
      65: aconst_null
      66: ldc           #58                 // String Username to connect to the database as.
      68: iconst_1
      69: invokespecial #6                  // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
      72: putstatic     #59                 // Field USER:Lorg/postgresql/PGProperty;
      75: new           #4                  // class org/postgresql/PGProperty
      78: dup
      79: ldc           #60                 // String PASSWORD
      81: iconst_4
      82: ldc           #61                 // String password
      84: aconst_null
      85: ldc           #62                 // String Password to use when authenticating.
      87: iconst_0
      88: invokespecial #6                  // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
      91: putstatic     #63                 // Field PASSWORD:Lorg/postgresql/PGProperty;
      94: new           #4                  // class org/postgresql/PGProperty
      97: dup
      98: ldc           #64                 // String PROTOCOL_VERSION
     100: iconst_5
     101: ldc           #65                 // String protocolVersion
     103: aconst_null
     104: ldc           #66                 // String Force use of a particular protocol version when connecting, currently only version 3 is supported.
     106: iconst_0
     107: iconst_1
     108: anewarray     #42                 // class java/lang/String
     111: dup
     112: iconst_0
     113: ldc           #67                 // String 3
     115: aastore
     116: invokespecial #8                  // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z[Ljava/lang/String;)V
     119: putstatic     #68                 // Field PROTOCOL_VERSION:Lorg/postgresql/PGProperty;
     122: new           #4                  // class org/postgresql/PGProperty
     125: dup
     126: ldc           #69                 // String LOGGER_LEVEL
     128: bipush        6
     130: ldc           #70                 // String loggerLevel
     132: aconst_null
     133: ldc           #71                 // String Logger level of the driver
     135: iconst_0
     136: iconst_3
     137: anewarray     #42                 // class java/lang/String
     140: dup
     141: iconst_0
     142: ldc           #72                 // String OFF
     144: aastore
     145: dup
     146: iconst_1
     147: ldc           #73                 // String DEBUG
     149: aastore
     150: dup
     151: iconst_2
     152: ldc           #74                 // String TRACE
     154: aastore
     155: invokespecial #8                  // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z[Ljava/lang/String;)V
     158: putstatic     #75                 // Field LOGGER_LEVEL:Lorg/postgresql/PGProperty;
     161: new           #4                  // class org/postgresql/PGProperty
     164: dup
     165: ldc           #76                 // String LOGGER_FILE
     167: bipush        7
     169: ldc           #77                 // String loggerFile
     171: aconst_null
     172: ldc           #78                 // String File name output of the Logger
     174: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     177: putstatic     #79                 // Field LOGGER_FILE:Lorg/postgresql/PGProperty;
     180: new           #4                  // class org/postgresql/PGProperty
     183: dup
     184: ldc           #80                 // String PREPARE_THRESHOLD
     186: bipush        8
     188: ldc           #81                 // String prepareThreshold
     190: ldc           #82                 // String 5
     192: ldc           #83                 // String Statement prepare threshold. A value of {@code -1} stands for forceBinary
     194: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     197: putstatic     #84                 // Field PREPARE_THRESHOLD:Lorg/postgresql/PGProperty;
     200: new           #4                  // class org/postgresql/PGProperty
     203: dup
     204: ldc           #85                 // String PREPARED_STATEMENT_CACHE_QUERIES
     206: bipush        9
     208: ldc           #86                 // String preparedStatementCacheQueries
     210: ldc           #87                 // String 256
     212: ldc           #88                 // String Specifies the maximum number of entries in per-connection cache of prepared statements. A value of {@code 0} disables the cache.
     214: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     217: putstatic     #89                 // Field PREPARED_STATEMENT_CACHE_QUERIES:Lorg/postgresql/PGProperty;
     220: new           #4                  // class org/postgresql/PGProperty
     223: dup
     224: ldc           #90                 // String PREPARED_STATEMENT_CACHE_SIZE_MIB
     226: bipush        10
     228: ldc           #91                 // String preparedStatementCacheSizeMiB
     230: ldc           #82                 // String 5
     232: ldc           #92                 // String Specifies the maximum size (in megabytes) of a per-connection prepared statement cache. A value of {@code 0} disables the cache.
     234: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     237: putstatic     #93                 // Field PREPARED_STATEMENT_CACHE_SIZE_MIB:Lorg/postgresql/PGProperty;
     240: new           #4                  // class org/postgresql/PGProperty
     243: dup
     244: ldc           #94                 // String DATABASE_METADATA_CACHE_FIELDS
     246: bipush        11
     248: ldc           #95                 // String databaseMetadataCacheFields
     250: ldc           #96                 // String 65536
     252: ldc           #97                 // String Specifies the maximum number of fields to be cached per connection. A value of {@code 0} disables the cache.
     254: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     257: putstatic     #98                 // Field DATABASE_METADATA_CACHE_FIELDS:Lorg/postgresql/PGProperty;
     260: new           #4                  // class org/postgresql/PGProperty
     263: dup
     264: ldc           #99                 // String DATABASE_METADATA_CACHE_FIELDS_MIB
     266: bipush        12
     268: ldc           #100                // String databaseMetadataCacheFieldsMiB
     270: ldc           #82                 // String 5
     272: ldc           #101                // String Specifies the maximum size (in megabytes) of fields to be cached per connection. A value of {@code 0} disables the cache.
     274: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     277: putstatic     #102                // Field DATABASE_METADATA_CACHE_FIELDS_MIB:Lorg/postgresql/PGProperty;
     280: new           #4                  // class org/postgresql/PGProperty
     283: dup
     284: ldc           #103                // String DEFAULT_ROW_FETCH_SIZE
     286: bipush        13
     288: ldc           #104                // String defaultRowFetchSize
     290: ldc           #105                // String 0
     292: ldc           #106                // String Positive number of rows that should be fetched from the database when more rows are needed for ResultSet by each fetch iteration
     294: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     297: putstatic     #107                // Field DEFAULT_ROW_FETCH_SIZE:Lorg/postgresql/PGProperty;
     300: new           #4                  // class org/postgresql/PGProperty
     303: dup
     304: ldc           #108                // String BINARY_TRANSFER
     306: bipush        14
     308: ldc           #109                // String binaryTransfer
     310: ldc           #110                // String true
     312: ldc           #111                // String Use binary format for sending and receiving data if possible
     314: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     317: putstatic     #112                // Field BINARY_TRANSFER:Lorg/postgresql/PGProperty;
     320: new           #4                  // class org/postgresql/PGProperty
     323: dup
     324: ldc           #113                // String READ_ONLY
     326: bipush        15
     328: ldc           #114                // String readOnly
     330: ldc           #115                // String false
     332: ldc           #116                // String Puts this connection in read-only mode
     334: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     337: putstatic     #117                // Field READ_ONLY:Lorg/postgresql/PGProperty;
     340: new           #4                  // class org/postgresql/PGProperty
     343: dup
     344: ldc           #118                // String BINARY_TRANSFER_ENABLE
     346: bipush        16
     348: ldc           #119                // String binaryTransferEnable
     350: ldc           #120                // String
     352: ldc           #121                // String Comma separated list of types to enable binary transfer. Either OID numbers or names
     354: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     357: putstatic     #122                // Field BINARY_TRANSFER_ENABLE:Lorg/postgresql/PGProperty;
     360: new           #4                  // class org/postgresql/PGProperty
     363: dup
     364: ldc           #123                // String BINARY_TRANSFER_DISABLE
     366: bipush        17
     368: ldc           #124                // String binaryTransferDisable
     370: ldc           #120                // String
     372: ldc           #125                // String Comma separated list of types to disable binary transfer. Either OID numbers or names. Overrides values in the driver default set and values set with binaryTransferEnable.
     374: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     377: putstatic     #126                // Field BINARY_TRANSFER_DISABLE:Lorg/postgresql/PGProperty;
     380: new           #4                  // class org/postgresql/PGProperty
     383: dup
     384: ldc           #127                // String STRING_TYPE
     386: bipush        18
     388: ldc           #128                // String stringtype
     390: aconst_null
     391: ldc           #129                // String The type to bind String parameters as (usually \'varchar\', \'unspecified\' allows implicit casting to other types)
     393: iconst_0
     394: iconst_2
     395: anewarray     #42                 // class java/lang/String
     398: dup
     399: iconst_0
     400: ldc           #130                // String unspecified
     402: aastore
     403: dup
     404: iconst_1
     405: ldc           #131                // String varchar
     407: aastore
     408: invokespecial #8                  // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z[Ljava/lang/String;)V
     411: putstatic     #132                // Field STRING_TYPE:Lorg/postgresql/PGProperty;
     414: new           #4                  // class org/postgresql/PGProperty
     417: dup
     418: ldc           #133                // String UNKNOWN_LENGTH
     420: bipush        19
     422: ldc           #134                // String unknownLength
     424: ldc           #136                // int 2147483647
     426: invokestatic  #32                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
     429: ldc           #137                // String Specifies the length to return for types of unknown length
     431: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     434: putstatic     #138                // Field UNKNOWN_LENGTH:Lorg/postgresql/PGProperty;
     437: new           #4                  // class org/postgresql/PGProperty
     440: dup
     441: ldc           #139                // String LOG_UNCLOSED_CONNECTIONS
     443: bipush        20
     445: ldc           #140                // String logUnclosedConnections
     447: ldc           #115                // String false
     449: ldc           #141                // String When connections that are not explicitly closed are garbage collected, log the stacktrace from the opening of the connection to trace the leak source
     451: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     454: putstatic     #142                // Field LOG_UNCLOSED_CONNECTIONS:Lorg/postgresql/PGProperty;
     457: new           #4                  // class org/postgresql/PGProperty
     460: dup
     461: ldc           #143                // String DISABLE_COLUMN_SANITISER
     463: bipush        21
     465: ldc           #144                // String disableColumnSanitiser
     467: ldc           #115                // String false
     469: ldc           #145                // String Enable optimization that disables column name sanitiser
     471: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     474: putstatic     #146                // Field DISABLE_COLUMN_SANITISER:Lorg/postgresql/PGProperty;
     477: new           #4                  // class org/postgresql/PGProperty
     480: dup
     481: ldc           #147                // String SSL
     483: bipush        22
     485: ldc           #148                // String ssl
     487: aconst_null
     488: ldc           #149                // String Control use of SSL (any non-null value causes SSL to be required)
     490: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     493: putstatic     #150                // Field SSL:Lorg/postgresql/PGProperty;
     496: new           #4                  // class org/postgresql/PGProperty
     499: dup
     500: ldc           #151                // String SSL_MODE
     502: bipush        23
     504: ldc           #152                // String sslmode
     506: aconst_null
     507: ldc           #153                // String Parameter governing the use of SSL
     509: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     512: putstatic     #154                // Field SSL_MODE:Lorg/postgresql/PGProperty;
     515: new           #4                  // class org/postgresql/PGProperty
     518: dup
     519: ldc           #155                // String SSL_FACTORY
     521: bipush        24
     523: ldc           #156                // String sslfactory
     525: aconst_null
     526: ldc           #157                // String Provide a SSLSocketFactory class when using SSL.
     528: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     531: putstatic     #158                // Field SSL_FACTORY:Lorg/postgresql/PGProperty;
     534: new           #4                  // class org/postgresql/PGProperty
     537: dup
     538: ldc           #159                // String SSL_FACTORY_ARG
     540: bipush        25
     542: ldc           #160                // String sslfactoryarg
     544: aconst_null
     545: ldc           #161                // String Argument forwarded to constructor of SSLSocketFactory class.
     547: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     550: putstatic     #162                // Field SSL_FACTORY_ARG:Lorg/postgresql/PGProperty;
     553: new           #4                  // class org/postgresql/PGProperty
     556: dup
     557: ldc           #163                // String SSL_HOSTNAME_VERIFIER
     559: bipush        26
     561: ldc           #164                // String sslhostnameverifier
     563: aconst_null
     564: ldc           #165                // String A class, implementing javax.net.ssl.HostnameVerifier that can verify the server
     566: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     569: putstatic     #166                // Field SSL_HOSTNAME_VERIFIER:Lorg/postgresql/PGProperty;
     572: new           #4                  // class org/postgresql/PGProperty
     575: dup
     576: ldc           #167                // String SSL_CERT
     578: bipush        27
     580: ldc           #168                // String sslcert
     582: aconst_null
     583: ldc           #169                // String The location of the client\'s SSL certificate
     585: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     588: putstatic     #170                // Field SSL_CERT:Lorg/postgresql/PGProperty;
     591: new           #4                  // class org/postgresql/PGProperty
     594: dup
     595: ldc           #171                // String SSL_KEY
     597: bipush        28
     599: ldc           #172                // String sslkey
     601: aconst_null
     602: ldc           #173                // String The location of the client\'s PKCS#8 SSL key
     604: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     607: putstatic     #174                // Field SSL_KEY:Lorg/postgresql/PGProperty;
     610: new           #4                  // class org/postgresql/PGProperty
     613: dup
     614: ldc           #175                // String SSL_ROOT_CERT
     616: bipush        29
     618: ldc           #176                // String sslrootcert
     620: aconst_null
     621: ldc           #177                // String The location of the root certificate for authenticating the server.
     623: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     626: putstatic     #178                // Field SSL_ROOT_CERT:Lorg/postgresql/PGProperty;
     629: new           #4                  // class org/postgresql/PGProperty
     632: dup
     633: ldc           #179                // String SSL_PASSWORD
     635: bipush        30
     637: ldc           #180                // String sslpassword
     639: aconst_null
     640: ldc           #181                // String The password for the client\'s ssl key (ignored if sslpasswordcallback is set)
     642: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     645: putstatic     #182                // Field SSL_PASSWORD:Lorg/postgresql/PGProperty;
     648: new           #4                  // class org/postgresql/PGProperty
     651: dup
     652: ldc           #183                // String SSL_PASSWORD_CALLBACK
     654: bipush        31
     656: ldc           #184                // String sslpasswordcallback
     658: aconst_null
     659: ldc           #185                // String A class, implementing javax.security.auth.callback.CallbackHandler that can handle PassworCallback for the ssl password.
     661: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     664: putstatic     #186                // Field SSL_PASSWORD_CALLBACK:Lorg/postgresql/PGProperty;
     667: new           #4                  // class org/postgresql/PGProperty
     670: dup
     671: ldc           #187                // String TCP_KEEP_ALIVE
     673: bipush        32
     675: ldc           #188                // String tcpKeepAlive
     677: ldc           #115                // String false
     679: ldc           #189                // String Enable or disable TCP keep-alive. The default is {@code false}.
     681: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     684: putstatic     #190                // Field TCP_KEEP_ALIVE:Lorg/postgresql/PGProperty;
     687: new           #4                  // class org/postgresql/PGProperty
     690: dup
     691: ldc           #191                // String LOGIN_TIMEOUT
     693: bipush        33
     695: ldc           #192                // String loginTimeout
     697: ldc           #105                // String 0
     699: ldc           #193                // String Specify how long to wait for establishment of a database connection.
     701: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     704: putstatic     #194                // Field LOGIN_TIMEOUT:Lorg/postgresql/PGProperty;
     707: new           #4                  // class org/postgresql/PGProperty
     710: dup
     711: ldc           #195                // String CONNECT_TIMEOUT
     713: bipush        34
     715: ldc           #196                // String connectTimeout
     717: ldc           #197                // String 10
     719: ldc           #198                // String The timeout value used for socket connect operations.
     721: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     724: putstatic     #199                // Field CONNECT_TIMEOUT:Lorg/postgresql/PGProperty;
     727: new           #4                  // class org/postgresql/PGProperty
     730: dup
     731: ldc           #200                // String SOCKET_TIMEOUT
     733: bipush        35
     735: ldc           #201                // String socketTimeout
     737: ldc           #105                // String 0
     739: ldc           #202                // String The timeout value used for socket read operations.
     741: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     744: putstatic     #203                // Field SOCKET_TIMEOUT:Lorg/postgresql/PGProperty;
     747: new           #4                  // class org/postgresql/PGProperty
     750: dup
     751: ldc           #204                // String CANCEL_SIGNAL_TIMEOUT
     753: bipush        36
     755: ldc           #205                // String cancelSignalTimeout
     757: ldc           #197                // String 10
     759: ldc           #206                // String The timeout that is used for sending cancel command.
     761: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     764: putstatic     #207                // Field CANCEL_SIGNAL_TIMEOUT:Lorg/postgresql/PGProperty;
     767: new           #4                  // class org/postgresql/PGProperty
     770: dup
     771: ldc           #208                // String SOCKET_FACTORY
     773: bipush        37
     775: ldc           #209                // String socketFactory
     777: aconst_null
     778: ldc           #210                // String Specify a socket factory for socket creation
     780: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     783: putstatic     #211                // Field SOCKET_FACTORY:Lorg/postgresql/PGProperty;
     786: new           #4                  // class org/postgresql/PGProperty
     789: dup
     790: ldc           #212                // String SOCKET_FACTORY_ARG
     792: bipush        38
     794: ldc           #213                // String socketFactoryArg
     796: aconst_null
     797: ldc           #214                // String Argument forwarded to constructor of SocketFactory class.
     799: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     802: putstatic     #215                // Field SOCKET_FACTORY_ARG:Lorg/postgresql/PGProperty;
     805: new           #4                  // class org/postgresql/PGProperty
     808: dup
     809: ldc           #216                // String RECEIVE_BUFFER_SIZE
     811: bipush        39
     813: ldc           #217                // String receiveBufferSize
     815: ldc           #218                // String -1
     817: ldc           #219                // String Socket read buffer size
     819: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     822: putstatic     #220                // Field RECEIVE_BUFFER_SIZE:Lorg/postgresql/PGProperty;
     825: new           #4                  // class org/postgresql/PGProperty
     828: dup
     829: ldc           #221                // String SEND_BUFFER_SIZE
     831: bipush        40
     833: ldc           #222                // String sendBufferSize
     835: ldc           #218                // String -1
     837: ldc           #223                // String Socket write buffer size
     839: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     842: putstatic     #224                // Field SEND_BUFFER_SIZE:Lorg/postgresql/PGProperty;
     845: new           #4                  // class org/postgresql/PGProperty
     848: dup
     849: ldc           #225                // String ASSUME_MIN_SERVER_VERSION
     851: bipush        41
     853: ldc           #226                // String assumeMinServerVersion
     855: aconst_null
     856: ldc           #227                // String Assume the server is at least that version
     858: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     861: putstatic     #228                // Field ASSUME_MIN_SERVER_VERSION:Lorg/postgresql/PGProperty;
     864: new           #4                  // class org/postgresql/PGProperty
     867: dup
     868: ldc           #229                // String APPLICATION_NAME
     870: bipush        42
     872: ldc           #230                // String ApplicationName
     874: ldc           #232                // String PostgreSQL JDBC Driver
     876: ldc           #233                // String Name of the Application (backend >= 9.0)
     878: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     881: putstatic     #234                // Field APPLICATION_NAME:Lorg/postgresql/PGProperty;
     884: new           #4                  // class org/postgresql/PGProperty
     887: dup
     888: ldc           #235                // String JAAS_APPLICATION_NAME
     890: bipush        43
     892: ldc           #236                // String jaasApplicationName
     894: aconst_null
     895: ldc           #237                // String Specifies the name of the JAAS system or application login configuration.
     897: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     900: putstatic     #238                // Field JAAS_APPLICATION_NAME:Lorg/postgresql/PGProperty;
     903: new           #4                  // class org/postgresql/PGProperty
     906: dup
     907: ldc           #239                // String KERBEROS_SERVER_NAME
     909: bipush        44
     911: ldc           #240                // String kerberosServerName
     913: aconst_null
     914: ldc           #241                // String The Kerberos service name to use when authenticating with GSSAPI.
     916: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     919: putstatic     #242                // Field KERBEROS_SERVER_NAME:Lorg/postgresql/PGProperty;
     922: new           #4                  // class org/postgresql/PGProperty
     925: dup
     926: ldc           #243                // String USE_SPNEGO
     928: bipush        45
     930: ldc           #244                // String useSpnego
     932: ldc           #115                // String false
     934: ldc           #245                // String Use SPNEGO in SSPI authentication requests
     936: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     939: putstatic     #246                // Field USE_SPNEGO:Lorg/postgresql/PGProperty;
     942: new           #4                  // class org/postgresql/PGProperty
     945: dup
     946: ldc           #247                // String GSS_LIB
     948: bipush        46
     950: ldc           #248                // String gsslib
     952: ldc           #249                // String auto
     954: ldc           #250                // String Force SSSPI or GSSAPI
     956: iconst_0
     957: iconst_3
     958: anewarray     #42                 // class java/lang/String
     961: dup
     962: iconst_0
     963: ldc           #249                // String auto
     965: aastore
     966: dup
     967: iconst_1
     968: ldc           #251                // String sspi
     970: aastore
     971: dup
     972: iconst_2
     973: ldc           #252                // String gssapi
     975: aastore
     976: invokespecial #8                  // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z[Ljava/lang/String;)V
     979: putstatic     #253                // Field GSS_LIB:Lorg/postgresql/PGProperty;
     982: new           #4                  // class org/postgresql/PGProperty
     985: dup
     986: ldc           #254                // String SSPI_SERVICE_CLASS
     988: bipush        47
     990: ldc           #255                // String sspiServiceClass
     992: ldc_w         #256                // String POSTGRES
     995: ldc_w         #257                // String The Windows SSPI service class for SPN
     998: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    1001: putstatic     #258                // Field SSPI_SERVICE_CLASS:Lorg/postgresql/PGProperty;
    1004: new           #4                  // class org/postgresql/PGProperty
    1007: dup
    1008: ldc_w         #259                // String ALLOW_ENCODING_CHANGES
    1011: bipush        48
    1013: ldc_w         #260                // String allowEncodingChanges
    1016: ldc           #115                // String false
    1018: ldc_w         #261                // String Allow for changes in client_encoding
    1021: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    1024: putstatic     #262                // Field ALLOW_ENCODING_CHANGES:Lorg/postgresql/PGProperty;
    1027: new           #4                  // class org/postgresql/PGProperty
    1030: dup
    1031: ldc_w         #263                // String CURRENT_SCHEMA
    1034: bipush        49
    1036: ldc_w         #264                // String currentSchema
    1039: aconst_null
    1040: ldc_w         #265                // String Specify the schema to be set in the search-path
    1043: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    1046: putstatic     #266                // Field CURRENT_SCHEMA:Lorg/postgresql/PGProperty;
    1049: new           #4                  // class org/postgresql/PGProperty
    1052: dup
    1053: ldc_w         #267                // String TARGET_SERVER_TYPE
    1056: bipush        50
    1058: ldc_w         #268                // String targetServerType
    1061: ldc_w         #269                // String any
    1064: ldc_w         #270                // String Specifies what kind of server to connect
    1067: iconst_0
    1068: iconst_4
    1069: anewarray     #42                 // class java/lang/String
    1072: dup
    1073: iconst_0
    1074: ldc_w         #269                // String any
    1077: aastore
    1078: dup
    1079: iconst_1
    1080: ldc_w         #271                // String master
    1083: aastore
    1084: dup
    1085: iconst_2
    1086: ldc_w         #272                // String slave
    1089: aastore
    1090: dup
    1091: iconst_3
    1092: ldc_w         #273                // String preferSlave
    1095: aastore
    1096: invokespecial #8                  // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z[Ljava/lang/String;)V
    1099: putstatic     #274                // Field TARGET_SERVER_TYPE:Lorg/postgresql/PGProperty;
    1102: new           #4                  // class org/postgresql/PGProperty
    1105: dup
    1106: ldc_w         #275                // String LOAD_BALANCE_HOSTS
    1109: bipush        51
    1111: ldc_w         #276                // String loadBalanceHosts
    1114: ldc           #115                // String false
    1116: ldc_w         #277                // String If disabled hosts are connected in the given order. If enabled hosts are chosen randomly from the set of suitable candidates
    1119: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    1122: putstatic     #278                // Field LOAD_BALANCE_HOSTS:Lorg/postgresql/PGProperty;
    1125: new           #4                  // class org/postgresql/PGProperty
    1128: dup
    1129: ldc_w         #279                // String HOST_RECHECK_SECONDS
    1132: bipush        52
    1134: ldc_w         #280                // String hostRecheckSeconds
    1137: ldc           #197                // String 10
    1139: ldc_w         #281                // String Specifies period (seconds) after host statuses are checked again in case they have changed
    1142: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    1145: putstatic     #282                // Field HOST_RECHECK_SECONDS:Lorg/postgresql/PGProperty;
    1148: new           #4                  // class org/postgresql/PGProperty
    1151: dup
    1152: ldc_w         #283                // String PREFER_QUERY_MODE
    1155: bipush        53
    1157: ldc_w         #284                // String preferQueryMode
    1160: ldc_w         #285                // String extended
    1163: ldc_w         #286                // String Specifies which mode is used to execute queries to database: simple means (\'Q\' execute, no parse, no bind, text mode only), extended means always use bind/execute messages, extendedForPrepared means extended for prepared statements only, extendedCacheEveryting means use extended protocol and try cache every statement (including Statement.execute(String sql)) in a query cache.
    1166: iconst_0
    1167: iconst_4
    1168: anewarray     #42                 // class java/lang/String
    1171: dup
    1172: iconst_0
    1173: ldc_w         #285                // String extended
    1176: aastore
    1177: dup
    1178: iconst_1
    1179: ldc_w         #287                // String extendedForPrepared
    1182: aastore
    1183: dup
    1184: iconst_2
    1185: ldc_w         #288                // String extendedCacheEveryting
    1188: aastore
    1189: dup
    1190: iconst_3
    1191: ldc_w         #289                // String simple
    1194: aastore
    1195: invokespecial #8                  // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z[Ljava/lang/String;)V
    1198: putstatic     #290                // Field PREFER_QUERY_MODE:Lorg/postgresql/PGProperty;
    1201: new           #4                  // class org/postgresql/PGProperty
    1204: dup
    1205: ldc_w         #291                // String AUTOSAVE
    1208: bipush        54
    1210: ldc_w         #292                // String autosave
    1213: ldc_w         #293                // String never
    1216: ldc_w         #294                // String Specifies what the driver should do if a query fails. In autosave=always mode, JDBC driver sets a safepoint before each query, and rolls back to that safepoint in case of failure. In autosave=never mode (default), no safepoint dance is made ever. In autosave=conservative mode, safepoint is set for each query, however the rollback is done only for rare cases like \'cached statement cannot change return type\' or \'statement XXX is not valid\' so JDBC driver rollsback and retries
    1219: iconst_0
    1220: iconst_3
    1221: anewarray     #42                 // class java/lang/String
    1224: dup
    1225: iconst_0
    1226: ldc_w         #295                // String always
    1229: aastore
    1230: dup
    1231: iconst_1
    1232: ldc_w         #293                // String never
    1235: aastore
    1236: dup
    1237: iconst_2
    1238: ldc_w         #296                // String conservative
    1241: aastore
    1242: invokespecial #8                  // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z[Ljava/lang/String;)V
    1245: putstatic     #297                // Field AUTOSAVE:Lorg/postgresql/PGProperty;
    1248: new           #4                  // class org/postgresql/PGProperty
    1251: dup
    1252: ldc_w         #298                // String REWRITE_BATCHED_INSERTS
    1255: bipush        55
    1257: ldc_w         #299                // String reWriteBatchedInserts
    1260: ldc           #115                // String false
    1262: ldc_w         #300                // String Enable optimization to rewrite and collapse compatible INSERT statements that are batched.
    1265: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    1268: putstatic     #301                // Field REWRITE_BATCHED_INSERTS:Lorg/postgresql/PGProperty;
    1271: new           #4                  // class org/postgresql/PGProperty
    1274: dup
    1275: ldc_w         #302                // String REPLICATION
    1278: bipush        56
    1280: ldc_w         #303                // String replication
    1283: aconst_null
    1284: ldc_w         #304                // String Connection parameter for startup message Available value(true, database). A Boolean value of true tells the backend to go into walsender mode, wherein a small set of replication commands can be issued instead of SQL statements. Only the simple query protocol can be used in walsender mode. Passing database as the value instructs walsender to connect to the database specified in the dbname parameter, which will allow the connection to be used for logical replication from that database. (backend >= 9.4)
    1287: invokespecial #54                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    1290: putstatic     #305                // Field REPLICATION:Lorg/postgresql/PGProperty;
    1293: bipush        57
    1295: anewarray     #4                  // class org/postgresql/PGProperty
    1298: dup
    1299: iconst_0
    1300: getstatic     #46                 // Field PG_DBNAME:Lorg/postgresql/PGProperty;
    1303: aastore
    1304: dup
    1305: iconst_1
    1306: getstatic     #50                 // Field PG_HOST:Lorg/postgresql/PGProperty;
    1309: aastore
    1310: dup
    1311: iconst_2
    1312: getstatic     #55                 // Field PG_PORT:Lorg/postgresql/PGProperty;
    1315: aastore
    1316: dup
    1317: iconst_3
    1318: getstatic     #59                 // Field USER:Lorg/postgresql/PGProperty;
    1321: aastore
    1322: dup
    1323: iconst_4
    1324: getstatic     #63                 // Field PASSWORD:Lorg/postgresql/PGProperty;
    1327: aastore
    1328: dup
    1329: iconst_5
    1330: getstatic     #68                 // Field PROTOCOL_VERSION:Lorg/postgresql/PGProperty;
    1333: aastore
    1334: dup
    1335: bipush        6
    1337: getstatic     #75                 // Field LOGGER_LEVEL:Lorg/postgresql/PGProperty;
    1340: aastore
    1341: dup
    1342: bipush        7
    1344: getstatic     #79                 // Field LOGGER_FILE:Lorg/postgresql/PGProperty;
    1347: aastore
    1348: dup
    1349: bipush        8
    1351: getstatic     #84                 // Field PREPARE_THRESHOLD:Lorg/postgresql/PGProperty;
    1354: aastore
    1355: dup
    1356: bipush        9
    1358: getstatic     #89                 // Field PREPARED_STATEMENT_CACHE_QUERIES:Lorg/postgresql/PGProperty;
    1361: aastore
    1362: dup
    1363: bipush        10
    1365: getstatic     #93                 // Field PREPARED_STATEMENT_CACHE_SIZE_MIB:Lorg/postgresql/PGProperty;
    1368: aastore
    1369: dup
    1370: bipush        11
    1372: getstatic     #98                 // Field DATABASE_METADATA_CACHE_FIELDS:Lorg/postgresql/PGProperty;
    1375: aastore
    1376: dup
    1377: bipush        12
    1379: getstatic     #102                // Field DATABASE_METADATA_CACHE_FIELDS_MIB:Lorg/postgresql/PGProperty;
    1382: aastore
    1383: dup
    1384: bipush        13
    1386: getstatic     #107                // Field DEFAULT_ROW_FETCH_SIZE:Lorg/postgresql/PGProperty;
    1389: aastore
    1390: dup
    1391: bipush        14
    1393: getstatic     #112                // Field BINARY_TRANSFER:Lorg/postgresql/PGProperty;
    1396: aastore
    1397: dup
    1398: bipush        15
    1400: getstatic     #117                // Field READ_ONLY:Lorg/postgresql/PGProperty;
    1403: aastore
    1404: dup
    1405: bipush        16
    1407: getstatic     #122                // Field BINARY_TRANSFER_ENABLE:Lorg/postgresql/PGProperty;
    1410: aastore
    1411: dup
    1412: bipush        17
    1414: getstatic     #126                // Field BINARY_TRANSFER_DISABLE:Lorg/postgresql/PGProperty;
    1417: aastore
    1418: dup
    1419: bipush        18
    1421: getstatic     #132                // Field STRING_TYPE:Lorg/postgresql/PGProperty;
    1424: aastore
    1425: dup
    1426: bipush        19
    1428: getstatic     #138                // Field UNKNOWN_LENGTH:Lorg/postgresql/PGProperty;
    1431: aastore
    1432: dup
    1433: bipush        20
    1435: getstatic     #142                // Field LOG_UNCLOSED_CONNECTIONS:Lorg/postgresql/PGProperty;
    1438: aastore
    1439: dup
    1440: bipush        21
    1442: getstatic     #146                // Field DISABLE_COLUMN_SANITISER:Lorg/postgresql/PGProperty;
    1445: aastore
    1446: dup
    1447: bipush        22
    1449: getstatic     #150                // Field SSL:Lorg/postgresql/PGProperty;
    1452: aastore
    1453: dup
    1454: bipush        23
    1456: getstatic     #154                // Field SSL_MODE:Lorg/postgresql/PGProperty;
    1459: aastore
    1460: dup
    1461: bipush        24
    1463: getstatic     #158                // Field SSL_FACTORY:Lorg/postgresql/PGProperty;
    1466: aastore
    1467: dup
    1468: bipush        25
    1470: getstatic     #162                // Field SSL_FACTORY_ARG:Lorg/postgresql/PGProperty;
    1473: aastore
    1474: dup
    1475: bipush        26
    1477: getstatic     #166                // Field SSL_HOSTNAME_VERIFIER:Lorg/postgresql/PGProperty;
    1480: aastore
    1481: dup
    1482: bipush        27
    1484: getstatic     #170                // Field SSL_CERT:Lorg/postgresql/PGProperty;
    1487: aastore
    1488: dup
    1489: bipush        28
    1491: getstatic     #174                // Field SSL_KEY:Lorg/postgresql/PGProperty;
    1494: aastore
    1495: dup
    1496: bipush        29
    1498: getstatic     #178                // Field SSL_ROOT_CERT:Lorg/postgresql/PGProperty;
    1501: aastore
    1502: dup
    1503: bipush        30
    1505: getstatic     #182                // Field SSL_PASSWORD:Lorg/postgresql/PGProperty;
    1508: aastore
    1509: dup
    1510: bipush        31
    1512: getstatic     #186                // Field SSL_PASSWORD_CALLBACK:Lorg/postgresql/PGProperty;
    1515: aastore
    1516: dup
    1517: bipush        32
    1519: getstatic     #190                // Field TCP_KEEP_ALIVE:Lorg/postgresql/PGProperty;
    1522: aastore
    1523: dup
    1524: bipush        33
    1526: getstatic     #194                // Field LOGIN_TIMEOUT:Lorg/postgresql/PGProperty;
    1529: aastore
    1530: dup
    1531: bipush        34
    1533: getstatic     #199                // Field CONNECT_TIMEOUT:Lorg/postgresql/PGProperty;
    1536: aastore
    1537: dup
    1538: bipush        35
    1540: getstatic     #203                // Field SOCKET_TIMEOUT:Lorg/postgresql/PGProperty;
    1543: aastore
    1544: dup
    1545: bipush        36
    1547: getstatic     #207                // Field CANCEL_SIGNAL_TIMEOUT:Lorg/postgresql/PGProperty;
    1550: aastore
    1551: dup
    1552: bipush        37
    1554: getstatic     #211                // Field SOCKET_FACTORY:Lorg/postgresql/PGProperty;
    1557: aastore
    1558: dup
    1559: bipush        38
    1561: getstatic     #215                // Field SOCKET_FACTORY_ARG:Lorg/postgresql/PGProperty;
    1564: aastore
    1565: dup
    1566: bipush        39
    1568: getstatic     #220                // Field RECEIVE_BUFFER_SIZE:Lorg/postgresql/PGProperty;
    1571: aastore
    1572: dup
    1573: bipush        40
    1575: getstatic     #224                // Field SEND_BUFFER_SIZE:Lorg/postgresql/PGProperty;
    1578: aastore
    1579: dup
    1580: bipush        41
    1582: getstatic     #228                // Field ASSUME_MIN_SERVER_VERSION:Lorg/postgresql/PGProperty;
    1585: aastore
    1586: dup
    1587: bipush        42
    1589: getstatic     #234                // Field APPLICATION_NAME:Lorg/postgresql/PGProperty;
    1592: aastore
    1593: dup
    1594: bipush        43
    1596: getstatic     #238                // Field JAAS_APPLICATION_NAME:Lorg/postgresql/PGProperty;
    1599: aastore
    1600: dup
    1601: bipush        44
    1603: getstatic     #242                // Field KERBEROS_SERVER_NAME:Lorg/postgresql/PGProperty;
    1606: aastore
    1607: dup
    1608: bipush        45
    1610: getstatic     #246                // Field USE_SPNEGO:Lorg/postgresql/PGProperty;
    1613: aastore
    1614: dup
    1615: bipush        46
    1617: getstatic     #253                // Field GSS_LIB:Lorg/postgresql/PGProperty;
    1620: aastore
    1621: dup
    1622: bipush        47
    1624: getstatic     #258                // Field SSPI_SERVICE_CLASS:Lorg/postgresql/PGProperty;
    1627: aastore
    1628: dup
    1629: bipush        48
    1631: getstatic     #262                // Field ALLOW_ENCODING_CHANGES:Lorg/postgresql/PGProperty;
    1634: aastore
    1635: dup
    1636: bipush        49
    1638: getstatic     #266                // Field CURRENT_SCHEMA:Lorg/postgresql/PGProperty;
    1641: aastore
    1642: dup
    1643: bipush        50
    1645: getstatic     #274                // Field TARGET_SERVER_TYPE:Lorg/postgresql/PGProperty;
    1648: aastore
    1649: dup
    1650: bipush        51
    1652: getstatic     #278                // Field LOAD_BALANCE_HOSTS:Lorg/postgresql/PGProperty;
    1655: aastore
    1656: dup
    1657: bipush        52
    1659: getstatic     #282                // Field HOST_RECHECK_SECONDS:Lorg/postgresql/PGProperty;
    1662: aastore
    1663: dup
    1664: bipush        53
    1666: getstatic     #290                // Field PREFER_QUERY_MODE:Lorg/postgresql/PGProperty;
    1669: aastore
    1670: dup
    1671: bipush        54
    1673: getstatic     #297                // Field AUTOSAVE:Lorg/postgresql/PGProperty;
    1676: aastore
    1677: dup
    1678: bipush        55
    1680: getstatic     #301                // Field REWRITE_BATCHED_INSERTS:Lorg/postgresql/PGProperty;
    1683: aastore
    1684: dup
    1685: bipush        56
    1687: getstatic     #305                // Field REPLICATION:Lorg/postgresql/PGProperty;
    1690: aastore
    1691: putstatic     #1                  // Field $VALUES:[Lorg/postgresql/PGProperty;
    1694: return
}
