Compiled from "PGPoolingDataSource.java"
public class org.postgresql.ds.PGPoolingDataSource extends org.postgresql.ds.common.BaseDataSource implements javax.sql.DataSource {
  protected static java.util.concurrent.ConcurrentMap<java.lang.String, org.postgresql.ds.PGPoolingDataSource> dataSources;

  protected java.lang.String dataSourceName;

  private int initialConnections;

  private int maxConnections;

  private boolean initialized;

  private java.util.Stack<javax.sql.PooledConnection> available;

  private java.util.Stack<javax.sql.PooledConnection> used;

  private java.lang.Object lock;

  private org.postgresql.ds.PGConnectionPoolDataSource source;

  private javax.sql.ConnectionEventListener connectionEventListener;

  public org.postgresql.ds.PGPoolingDataSource();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method org/postgresql/ds/common/BaseDataSource."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #5                  // Field initialConnections:I
       9: aload_0
      10: iconst_0
      11: putfield      #6                  // Field maxConnections:I
      14: aload_0
      15: iconst_0
      16: putfield      #7                  // Field initialized:Z
      19: aload_0
      20: new           #8                  // class java/util/Stack
      23: dup
      24: invokespecial #9                  // Method java/util/Stack."<init>":()V
      27: putfield      #2                  // Field available:Ljava/util/Stack;
      30: aload_0
      31: new           #8                  // class java/util/Stack
      34: dup
      35: invokespecial #9                  // Method java/util/Stack."<init>":()V
      38: putfield      #1                  // Field used:Ljava/util/Stack;
      41: aload_0
      42: new           #10                 // class java/lang/Object
      45: dup
      46: invokespecial #11                 // Method java/lang/Object."<init>":()V
      49: putfield      #3                  // Field lock:Ljava/lang/Object;
      52: aload_0
      53: new           #12                 // class org/postgresql/ds/PGPoolingDataSource$1
      56: dup
      57: aload_0
      58: invokespecial #13                 // Method org/postgresql/ds/PGPoolingDataSource$1."<init>":(Lorg/postgresql/ds/PGPoolingDataSource;)V
      61: putfield      #14                 // Field connectionEventListener:Ljavax/sql/ConnectionEventListener;
      64: return

  public static org.postgresql.ds.PGPoolingDataSource getDataSource(java.lang.String);
    Code:
       0: getstatic     #15                 // Field dataSources:Ljava/util/concurrent/ConcurrentMap;
       3: aload_0
       4: invokeinterface #16,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #17                 // class org/postgresql/ds/PGPoolingDataSource
      12: areturn

  public java.lang.String getDescription();
    Code:
       0: new           #18                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #20                 // String Pooling DataSource \'
       9: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
      16: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: ldc           #23                 // String  from
      21: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: ldc           #25                 // String PostgreSQL JDBC Driver 42.1.1
      26: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: areturn

  public void setServerName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #27                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #28                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #29                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: invokespecial #30                 // Method org/postgresql/ds/common/BaseDataSource.setServerName:(Ljava/lang/String;)V
      22: return

  public void setDatabaseName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #27                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #28                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #29                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: invokespecial #31                 // Method org/postgresql/ds/common/BaseDataSource.setDatabaseName:(Ljava/lang/String;)V
      22: return

  public void setUser(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #27                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #28                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #29                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: invokespecial #32                 // Method org/postgresql/ds/common/BaseDataSource.setUser:(Ljava/lang/String;)V
      22: return

  public void setPassword(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #27                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #28                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #29                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: invokespecial #33                 // Method org/postgresql/ds/common/BaseDataSource.setPassword:(Ljava/lang/String;)V
      22: return

  public void setPortNumber(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #27                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #28                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #29                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iload_1
      19: invokespecial #34                 // Method org/postgresql/ds/common/BaseDataSource.setPortNumber:(I)V
      22: return

  public int getInitialConnections();
    Code:
       0: aload_0
       1: getfield      #5                  // Field initialConnections:I
       4: ireturn

  public void setInitialConnections(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #27                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #28                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #29                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iload_1
      19: putfield      #5                  // Field initialConnections:I
      22: return

  public int getMaxConnections();
    Code:
       0: aload_0
       1: getfield      #6                  // Field maxConnections:I
       4: ireturn

  public void setMaxConnections(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #27                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #28                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #29                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iload_1
      19: putfield      #6                  // Field maxConnections:I
      22: return

  public java.lang.String getDataSourceName();
    Code:
       0: aload_0
       1: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
       4: areturn

  public void setDataSourceName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #27                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #28                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #29                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
      21: ifnull        40
      24: aload_1
      25: ifnull        40
      28: aload_1
      29: aload_0
      30: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
      33: invokevirtual #35                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      36: ifeq          40
      39: return
      40: getstatic     #15                 // Field dataSources:Ljava/util/concurrent/ConcurrentMap;
      43: aload_1
      44: aload_0
      45: invokeinterface #36,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      50: checkcast     #17                 // class org/postgresql/ds/PGPoolingDataSource
      53: astore_2
      54: aload_2
      55: ifnull        90
      58: new           #37                 // class java/lang/IllegalArgumentException
      61: dup
      62: new           #18                 // class java/lang/StringBuilder
      65: dup
      66: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      69: ldc           #38                 // String DataSource with name \'
      71: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: aload_1
      75: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      78: ldc           #39                 // String \' already exists!
      80: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      86: invokespecial #40                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      89: athrow
      90: aload_0
      91: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
      94: ifnull        110
      97: getstatic     #15                 // Field dataSources:Ljava/util/concurrent/ConcurrentMap;
     100: aload_0
     101: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
     104: invokeinterface #41,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     109: pop
     110: aload_0
     111: aload_1
     112: putfield      #22                 // Field dataSourceName:Ljava/lang/String;
     115: return

  public void initialize() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field lock:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: aload_0
       9: invokevirtual #42                 // Method createConnectionPool:()Lorg/postgresql/ds/PGConnectionPoolDataSource;
      12: putfield      #43                 // Field source:Lorg/postgresql/ds/PGConnectionPoolDataSource;
      15: aload_0
      16: getfield      #43                 // Field source:Lorg/postgresql/ds/PGConnectionPoolDataSource;
      19: aload_0
      20: invokevirtual #44                 // Method org/postgresql/ds/PGConnectionPoolDataSource.initializeFrom:(Lorg/postgresql/ds/common/BaseDataSource;)V
      23: goto          48
      26: astore_2
      27: new           #46                 // class org/postgresql/util/PSQLException
      30: dup
      31: ldc           #47                 // String Failed to setup DataSource.
      33: iconst_0
      34: anewarray     #10                 // class java/lang/Object
      37: invokestatic  #48                 // Method org/postgresql/util/GT.tr:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      40: getstatic     #49                 // Field org/postgresql/util/PSQLState.UNEXPECTED_ERROR:Lorg/postgresql/util/PSQLState;
      43: aload_2
      44: invokespecial #50                 // Method org/postgresql/util/PSQLException."<init>":(Ljava/lang/String;Lorg/postgresql/util/PSQLState;Ljava/lang/Throwable;)V
      47: athrow
      48: aload_0
      49: getfield      #2                  // Field available:Ljava/util/Stack;
      52: invokevirtual #51                 // Method java/util/Stack.size:()I
      55: aload_0
      56: getfield      #5                  // Field initialConnections:I
      59: if_icmpge     80
      62: aload_0
      63: getfield      #2                  // Field available:Ljava/util/Stack;
      66: aload_0
      67: getfield      #43                 // Field source:Lorg/postgresql/ds/PGConnectionPoolDataSource;
      70: invokevirtual #52                 // Method org/postgresql/ds/PGConnectionPoolDataSource.getPooledConnection:()Ljavax/sql/PooledConnection;
      73: invokevirtual #53                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      76: pop
      77: goto          48
      80: aload_0
      81: iconst_1
      82: putfield      #7                  // Field initialized:Z
      85: aload_1
      86: monitorexit
      87: goto          95
      90: astore_3
      91: aload_1
      92: monitorexit
      93: aload_3
      94: athrow
      95: return
    Exception table:
       from    to  target type
          15    23    26   Class java/lang/Exception
           7    87    90   any
          90    93    90   any

  protected boolean isInitialized();
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ireturn

  protected org.postgresql.ds.PGConnectionPoolDataSource createConnectionPool();
    Code:
       0: new           #54                 // class org/postgresql/ds/PGConnectionPoolDataSource
       3: dup
       4: invokespecial #55                 // Method org/postgresql/ds/PGConnectionPoolDataSource."<init>":()V
       7: areturn

  public java.sql.Connection getConnection(java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: ifnull        41
       4: aload_1
       5: aload_0
       6: invokevirtual #56                 // Method getUser:()Ljava/lang/String;
       9: invokevirtual #35                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      12: ifeq          46
      15: aload_2
      16: ifnonnull     26
      19: aload_0
      20: invokevirtual #57                 // Method getPassword:()Ljava/lang/String;
      23: ifnull        41
      26: aload_2
      27: ifnull        46
      30: aload_2
      31: aload_0
      32: invokevirtual #57                 // Method getPassword:()Ljava/lang/String;
      35: invokevirtual #35                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      38: ifeq          46
      41: aload_0
      42: invokevirtual #58                 // Method getConnection:()Ljava/sql/Connection;
      45: areturn
      46: aload_0
      47: getfield      #7                  // Field initialized:Z
      50: ifne          57
      53: aload_0
      54: invokevirtual #59                 // Method initialize:()V
      57: aload_0
      58: aload_1
      59: aload_2
      60: invokespecial #60                 // Method org/postgresql/ds/common/BaseDataSource.getConnection:(Ljava/lang/String;Ljava/lang/String;)Ljava/sql/Connection;
      63: areturn

  public java.sql.Connection getConnection() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifne          11
       7: aload_0
       8: invokevirtual #59                 // Method initialize:()V
      11: aload_0
      12: invokespecial #61                 // Method getPooledConnection:()Ljava/sql/Connection;
      15: areturn

  public void close();
    Code:
       0: aload_0
       1: getfield      #3                  // Field lock:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #2                  // Field available:Ljava/util/Stack;
      11: invokevirtual #62                 // Method java/util/Stack.isEmpty:()Z
      14: ifne          41
      17: aload_0
      18: getfield      #2                  // Field available:Ljava/util/Stack;
      21: invokevirtual #63                 // Method java/util/Stack.pop:()Ljava/lang/Object;
      24: checkcast     #64                 // class javax/sql/PooledConnection
      27: astore_2
      28: aload_2
      29: invokeinterface #65,  1           // InterfaceMethod javax/sql/PooledConnection.close:()V
      34: goto          38
      37: astore_3
      38: goto          7
      41: aload_0
      42: aconst_null
      43: putfield      #2                  // Field available:Ljava/util/Stack;
      46: aload_0
      47: getfield      #1                  // Field used:Ljava/util/Stack;
      50: invokevirtual #62                 // Method java/util/Stack.isEmpty:()Z
      53: ifne          90
      56: aload_0
      57: getfield      #1                  // Field used:Ljava/util/Stack;
      60: invokevirtual #63                 // Method java/util/Stack.pop:()Ljava/lang/Object;
      63: checkcast     #64                 // class javax/sql/PooledConnection
      66: astore_2
      67: aload_2
      68: aload_0
      69: getfield      #14                 // Field connectionEventListener:Ljavax/sql/ConnectionEventListener;
      72: invokeinterface #67,  2           // InterfaceMethod javax/sql/PooledConnection.removeConnectionEventListener:(Ljavax/sql/ConnectionEventListener;)V
      77: aload_2
      78: invokeinterface #65,  1           // InterfaceMethod javax/sql/PooledConnection.close:()V
      83: goto          87
      86: astore_3
      87: goto          46
      90: aload_0
      91: aconst_null
      92: putfield      #1                  // Field used:Ljava/util/Stack;
      95: aload_1
      96: monitorexit
      97: goto          107
     100: astore        4
     102: aload_1
     103: monitorexit
     104: aload         4
     106: athrow
     107: aload_0
     108: invokevirtual #68                 // Method removeStoredDataSource:()V
     111: return
    Exception table:
       from    to  target type
          28    34    37   Class java/sql/SQLException
          77    83    86   Class java/sql/SQLException
           7    97   100   any
         100   104   100   any

  protected void removeStoredDataSource();
    Code:
       0: getstatic     #15                 // Field dataSources:Ljava/util/concurrent/ConcurrentMap;
       3: aload_0
       4: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
       7: invokeinterface #41,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      12: pop
      13: return

  protected void addDataSource(java.lang.String);
    Code:
       0: getstatic     #15                 // Field dataSources:Ljava/util/concurrent/ConcurrentMap;
       3: aload_1
       4: aload_0
       5: invokeinterface #69,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: return

  private java.sql.Connection getPooledConnection() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #3                  // Field lock:Ljava/lang/Object;
       6: dup
       7: astore_2
       8: monitorenter
       9: aload_0
      10: getfield      #2                  // Field available:Ljava/util/Stack;
      13: ifnonnull     36
      16: new           #46                 // class org/postgresql/util/PSQLException
      19: dup
      20: ldc           #70                 // String DataSource has been closed.
      22: iconst_0
      23: anewarray     #10                 // class java/lang/Object
      26: invokestatic  #48                 // Method org/postgresql/util/GT.tr:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      29: getstatic     #71                 // Field org/postgresql/util/PSQLState.CONNECTION_DOES_NOT_EXIST:Lorg/postgresql/util/PSQLState;
      32: invokespecial #72                 // Method org/postgresql/util/PSQLException."<init>":(Ljava/lang/String;Lorg/postgresql/util/PSQLState;)V
      35: athrow
      36: aload_0
      37: getfield      #2                  // Field available:Ljava/util/Stack;
      40: invokevirtual #62                 // Method java/util/Stack.isEmpty:()Z
      43: ifne          69
      46: aload_0
      47: getfield      #2                  // Field available:Ljava/util/Stack;
      50: invokevirtual #63                 // Method java/util/Stack.pop:()Ljava/lang/Object;
      53: checkcast     #64                 // class javax/sql/PooledConnection
      56: astore_1
      57: aload_0
      58: getfield      #1                  // Field used:Ljava/util/Stack;
      61: aload_1
      62: invokevirtual #53                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      65: pop
      66: goto          127
      69: aload_0
      70: getfield      #6                  // Field maxConnections:I
      73: ifeq          90
      76: aload_0
      77: getfield      #1                  // Field used:Ljava/util/Stack;
      80: invokevirtual #51                 // Method java/util/Stack.size:()I
      83: aload_0
      84: getfield      #6                  // Field maxConnections:I
      87: if_icmpge     110
      90: aload_0
      91: getfield      #43                 // Field source:Lorg/postgresql/ds/PGConnectionPoolDataSource;
      94: invokevirtual #52                 // Method org/postgresql/ds/PGConnectionPoolDataSource.getPooledConnection:()Ljavax/sql/PooledConnection;
      97: astore_1
      98: aload_0
      99: getfield      #1                  // Field used:Ljava/util/Stack;
     102: aload_1
     103: invokevirtual #53                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
     106: pop
     107: goto          127
     110: aload_0
     111: getfield      #3                  // Field lock:Ljava/lang/Object;
     114: ldc2_w        #73                 // long 1000l
     117: invokevirtual #75                 // Method java/lang/Object.wait:(J)V
     120: goto          36
     123: astore_3
     124: goto          36
     127: aload_2
     128: monitorexit
     129: goto          139
     132: astore        4
     134: aload_2
     135: monitorexit
     136: aload         4
     138: athrow
     139: aload_1
     140: aload_0
     141: getfield      #14                 // Field connectionEventListener:Ljavax/sql/ConnectionEventListener;
     144: invokeinterface #77,  2           // InterfaceMethod javax/sql/PooledConnection.addConnectionEventListener:(Ljavax/sql/ConnectionEventListener;)V
     149: aload_1
     150: invokeinterface #78,  1           // InterfaceMethod javax/sql/PooledConnection.getConnection:()Ljava/sql/Connection;
     155: areturn
    Exception table:
       from    to  target type
         110   120   123   Class java/lang/InterruptedException
           9   129   132   any
         132   136   132   any

  public javax.naming.Reference getReference() throws javax.naming.NamingException;
    Code:
       0: aload_0
       1: invokespecial #79                 // Method org/postgresql/ds/common/BaseDataSource.getReference:()Ljavax/naming/Reference;
       4: astore_1
       5: aload_1
       6: new           #80                 // class javax/naming/StringRefAddr
       9: dup
      10: ldc           #81                 // String dataSourceName
      12: aload_0
      13: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
      16: invokespecial #82                 // Method javax/naming/StringRefAddr."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      19: invokevirtual #83                 // Method javax/naming/Reference.add:(Ljavax/naming/RefAddr;)V
      22: aload_0
      23: getfield      #5                  // Field initialConnections:I
      26: ifle          49
      29: aload_1
      30: new           #80                 // class javax/naming/StringRefAddr
      33: dup
      34: ldc           #84                 // String initialConnections
      36: aload_0
      37: getfield      #5                  // Field initialConnections:I
      40: invokestatic  #85                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      43: invokespecial #82                 // Method javax/naming/StringRefAddr."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      46: invokevirtual #83                 // Method javax/naming/Reference.add:(Ljavax/naming/RefAddr;)V
      49: aload_0
      50: getfield      #6                  // Field maxConnections:I
      53: ifle          76
      56: aload_1
      57: new           #80                 // class javax/naming/StringRefAddr
      60: dup
      61: ldc           #86                 // String maxConnections
      63: aload_0
      64: getfield      #6                  // Field maxConnections:I
      67: invokestatic  #85                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      70: invokespecial #82                 // Method javax/naming/StringRefAddr."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      73: invokevirtual #83                 // Method javax/naming/Reference.add:(Ljavax/naming/RefAddr;)V
      76: aload_1
      77: areturn

  public boolean isWrapperFor(java.lang.Class<?>) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #87                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       5: invokevirtual #88                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
       8: ireturn

  public <T> T unwrap(java.lang.Class<T>) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #87                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       5: invokevirtual #88                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
       8: ifeq          17
      11: aload_1
      12: aload_0
      13: invokevirtual #89                 // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      16: areturn
      17: new           #66                 // class java/sql/SQLException
      20: dup
      21: new           #18                 // class java/lang/StringBuilder
      24: dup
      25: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      28: ldc           #90                 // String Cannot unwrap to
      30: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: aload_1
      34: invokevirtual #91                 // Method java/lang/Class.getName:()Ljava/lang/String;
      37: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      43: invokespecial #92                 // Method java/sql/SQLException."<init>":(Ljava/lang/String;)V
      46: athrow

  static java.lang.Object access$000(org.postgresql.ds.PGPoolingDataSource);
    Code:
       0: aload_0
       1: getfield      #3                  // Field lock:Ljava/lang/Object;
       4: areturn

  static java.util.Stack access$100(org.postgresql.ds.PGPoolingDataSource);
    Code:
       0: aload_0
       1: getfield      #2                  // Field available:Ljava/util/Stack;
       4: areturn

  static java.util.Stack access$200(org.postgresql.ds.PGPoolingDataSource);
    Code:
       0: aload_0
       1: getfield      #1                  // Field used:Ljava/util/Stack;
       4: areturn

  static {};
    Code:
       0: new           #93                 // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #94                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: putstatic     #15                 // Field dataSources:Ljava/util/concurrent/ConcurrentMap;
      10: return
}
