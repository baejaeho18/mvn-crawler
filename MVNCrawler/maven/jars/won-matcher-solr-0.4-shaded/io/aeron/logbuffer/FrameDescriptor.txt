Compiled from "FrameDescriptor.java"
public class io.aeron.logbuffer.FrameDescriptor {
  public static final int FRAME_ALIGNMENT;

  public static final byte BEGIN_FRAG_FLAG;

  public static final byte END_FRAG_FLAG;

  public static final byte UNFRAGMENTED;

  public static final int VERSION_OFFSET;

  public static final int FLAGS_OFFSET;

  public static final int TYPE_OFFSET;

  public static final int TERM_OFFSET;

  public static final int TERM_ID_OFFSET;

  public static final int PADDING_FRAME_TYPE;

  public io.aeron.logbuffer.FrameDescriptor();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: return

  public static int computeMaxMessageLength(int);
    Code:
       0: iload_0
       1: bipush        8
       3: idiv
       4: ireturn

  public static int lengthOffset(int);
    Code:
       0: iload_0
       1: ireturn

  public static int versionOffset(int);
    Code:
       0: iload_0
       1: iconst_4
       2: iadd
       3: ireturn

  public static int flagsOffset(int);
    Code:
       0: iload_0
       1: iconst_5
       2: iadd
       3: ireturn

  public static int typeOffset(int);
    Code:
       0: iload_0
       1: bipush        6
       3: iadd
       4: ireturn

  public static int termOffsetOffset(int);
    Code:
       0: iload_0
       1: bipush        8
       3: iadd
       4: ireturn

  public static int termIdOffset(int);
    Code:
       0: iload_0
       1: bipush        20
       3: iadd
       4: ireturn

  public static int frameVersion(org.agrona.concurrent.UnsafeBuffer, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #5                  // Method versionOffset:(I)I
       5: invokevirtual #6                  // Method org/agrona/concurrent/UnsafeBuffer.getByte:(I)B
       8: ireturn

  public static int frameType(org.agrona.concurrent.UnsafeBuffer, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #7                  // Method typeOffset:(I)I
       5: getstatic     #8                  // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
       8: invokevirtual #9                  // Method org/agrona/concurrent/UnsafeBuffer.getShort:(ILjava/nio/ByteOrder;)S
      11: ldc           #10                 // int 65535
      13: iand
      14: ireturn

  public static boolean isPaddingFrame(org.agrona.concurrent.UnsafeBuffer, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #7                  // Method typeOffset:(I)I
       5: invokevirtual #11                 // Method org/agrona/concurrent/UnsafeBuffer.getShort:(I)S
       8: ifne          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public static int frameLength(org.agrona.concurrent.UnsafeBuffer, int);
    Code:
       0: aload_0
       1: iload_1
       2: getstatic     #8                  // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
       5: invokevirtual #12                 // Method org/agrona/concurrent/UnsafeBuffer.getInt:(ILjava/nio/ByteOrder;)I
       8: ireturn

  public static int frameLengthVolatile(org.agrona.concurrent.UnsafeBuffer, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #13                 // Method org/agrona/concurrent/UnsafeBuffer.getIntVolatile:(I)I
       5: istore_2
       6: invokestatic  #14                 // Method java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;
       9: getstatic     #8                  // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
      12: if_acmpeq     20
      15: iload_2
      16: invokestatic  #15                 // Method java/lang/Integer.reverseBytes:(I)I
      19: istore_2
      20: iload_2
      21: ireturn

  public static void frameLengthOrdered(org.agrona.concurrent.UnsafeBuffer, int, int);
    Code:
       0: invokestatic  #14                 // Method java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;
       3: getstatic     #8                  // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
       6: if_acmpeq     14
       9: iload_2
      10: invokestatic  #15                 // Method java/lang/Integer.reverseBytes:(I)I
      13: istore_2
      14: aload_0
      15: iload_1
      16: iload_2
      17: invokevirtual #16                 // Method org/agrona/concurrent/UnsafeBuffer.putIntOrdered:(II)V
      20: return

  public static void frameType(org.agrona.concurrent.UnsafeBuffer, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #7                  // Method typeOffset:(I)I
       5: iload_2
       6: i2s
       7: getstatic     #8                  // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
      10: invokevirtual #17                 // Method org/agrona/concurrent/UnsafeBuffer.putShort:(ISLjava/nio/ByteOrder;)V
      13: return

  public static void frameFlags(org.agrona.concurrent.UnsafeBuffer, int, byte);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #18                 // Method flagsOffset:(I)I
       5: iload_2
       6: invokevirtual #19                 // Method org/agrona/concurrent/UnsafeBuffer.putByte:(IB)V
       9: return

  public static void frameTermOffset(org.agrona.concurrent.UnsafeBuffer, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #20                 // Method termOffsetOffset:(I)I
       5: iload_1
       6: getstatic     #8                  // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
       9: invokevirtual #21                 // Method org/agrona/concurrent/UnsafeBuffer.putInt:(IILjava/nio/ByteOrder;)V
      12: return

  public static void frameTermId(org.agrona.concurrent.UnsafeBuffer, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #22                 // Method termIdOffset:(I)I
       5: iload_2
       6: getstatic     #8                  // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
       9: invokevirtual #21                 // Method org/agrona/concurrent/UnsafeBuffer.putInt:(IILjava/nio/ByteOrder;)V
      12: return
}
