Compiled from "ReceiverProxy.java"
public class io.aeron.driver.ReceiverProxy {
  private final io.aeron.driver.ThreadingMode threadingMode;

  private final java.util.Queue<io.aeron.driver.cmd.ReceiverCmd> commandQueue;

  private final org.agrona.concurrent.status.AtomicCounter failCount;

  private io.aeron.driver.Receiver receiver;

  public io.aeron.driver.ReceiverProxy(io.aeron.driver.ThreadingMode, java.util.Queue<io.aeron.driver.cmd.ReceiverCmd>, org.agrona.concurrent.status.AtomicCounter);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field threadingMode:Lio/aeron/driver/ThreadingMode;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field commandQueue:Ljava/util/Queue;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field failCount:Lorg/agrona/concurrent/status/AtomicCounter;
      19: return

  public void receiver(io.aeron.driver.Receiver);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field receiver:Lio/aeron/driver/Receiver;
       5: return

  public io.aeron.driver.Receiver receiver();
    Code:
       0: aload_0
       1: getfield      #5                  // Field receiver:Lio/aeron/driver/Receiver;
       4: areturn

  public void addSubscription(io.aeron.driver.media.ReceiveChannelEndpoint, int);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method isSharedThread:()Z
       4: ifeq          19
       7: aload_0
       8: getfield      #5                  // Field receiver:Lio/aeron/driver/Receiver;
      11: aload_1
      12: iload_2
      13: invokevirtual #7                  // Method io/aeron/driver/Receiver.onAddSubscription:(Lio/aeron/driver/media/ReceiveChannelEndpoint;I)V
      16: goto          32
      19: aload_0
      20: new           #8                  // class io/aeron/driver/cmd/AddSubscriptionCmd
      23: dup
      24: aload_1
      25: iload_2
      26: invokespecial #9                  // Method io/aeron/driver/cmd/AddSubscriptionCmd."<init>":(Lio/aeron/driver/media/ReceiveChannelEndpoint;I)V
      29: invokespecial #10                 // Method offer:(Lio/aeron/driver/cmd/ReceiverCmd;)V
      32: return

  public void removeSubscription(io.aeron.driver.media.ReceiveChannelEndpoint, int);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method isSharedThread:()Z
       4: ifeq          19
       7: aload_0
       8: getfield      #5                  // Field receiver:Lio/aeron/driver/Receiver;
      11: aload_1
      12: iload_2
      13: invokevirtual #11                 // Method io/aeron/driver/Receiver.onRemoveSubscription:(Lio/aeron/driver/media/ReceiveChannelEndpoint;I)V
      16: goto          32
      19: aload_0
      20: new           #12                 // class io/aeron/driver/cmd/RemoveSubscriptionCmd
      23: dup
      24: aload_1
      25: iload_2
      26: invokespecial #13                 // Method io/aeron/driver/cmd/RemoveSubscriptionCmd."<init>":(Lio/aeron/driver/media/ReceiveChannelEndpoint;I)V
      29: invokespecial #10                 // Method offer:(Lio/aeron/driver/cmd/ReceiverCmd;)V
      32: return

  public void newPublicationImage(io.aeron.driver.media.ReceiveChannelEndpoint, io.aeron.driver.PublicationImage);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method isSharedThread:()Z
       4: ifeq          19
       7: aload_0
       8: getfield      #5                  // Field receiver:Lio/aeron/driver/Receiver;
      11: aload_1
      12: aload_2
      13: invokevirtual #14                 // Method io/aeron/driver/Receiver.onNewPublicationImage:(Lio/aeron/driver/media/ReceiveChannelEndpoint;Lio/aeron/driver/PublicationImage;)V
      16: goto          32
      19: aload_0
      20: new           #15                 // class io/aeron/driver/cmd/NewPublicationImageCmd
      23: dup
      24: aload_1
      25: aload_2
      26: invokespecial #16                 // Method io/aeron/driver/cmd/NewPublicationImageCmd."<init>":(Lio/aeron/driver/media/ReceiveChannelEndpoint;Lio/aeron/driver/PublicationImage;)V
      29: invokespecial #10                 // Method offer:(Lio/aeron/driver/cmd/ReceiverCmd;)V
      32: return

  public void registerReceiveChannelEndpoint(io.aeron.driver.media.ReceiveChannelEndpoint);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method isSharedThread:()Z
       4: ifeq          18
       7: aload_0
       8: getfield      #5                  // Field receiver:Lio/aeron/driver/Receiver;
      11: aload_1
      12: invokevirtual #17                 // Method io/aeron/driver/Receiver.onRegisterReceiveChannelEndpoint:(Lio/aeron/driver/media/ReceiveChannelEndpoint;)V
      15: goto          30
      18: aload_0
      19: new           #18                 // class io/aeron/driver/cmd/RegisterReceiveChannelEndpointCmd
      22: dup
      23: aload_1
      24: invokespecial #19                 // Method io/aeron/driver/cmd/RegisterReceiveChannelEndpointCmd."<init>":(Lio/aeron/driver/media/ReceiveChannelEndpoint;)V
      27: invokespecial #10                 // Method offer:(Lio/aeron/driver/cmd/ReceiverCmd;)V
      30: return

  public void closeReceiveChannelEndpoint(io.aeron.driver.media.ReceiveChannelEndpoint);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method isSharedThread:()Z
       4: ifeq          18
       7: aload_0
       8: getfield      #5                  // Field receiver:Lio/aeron/driver/Receiver;
      11: aload_1
      12: invokevirtual #20                 // Method io/aeron/driver/Receiver.onCloseReceiveChannelEndpoint:(Lio/aeron/driver/media/ReceiveChannelEndpoint;)V
      15: goto          30
      18: aload_0
      19: new           #21                 // class io/aeron/driver/cmd/CloseReceiveChannelEndpointCmd
      22: dup
      23: aload_1
      24: invokespecial #22                 // Method io/aeron/driver/cmd/CloseReceiveChannelEndpointCmd."<init>":(Lio/aeron/driver/media/ReceiveChannelEndpoint;)V
      27: invokespecial #10                 // Method offer:(Lio/aeron/driver/cmd/ReceiverCmd;)V
      30: return

  public void removeCoolDown(io.aeron.driver.media.ReceiveChannelEndpoint, int, int);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method isSharedThread:()Z
       4: ifeq          20
       7: aload_0
       8: getfield      #5                  // Field receiver:Lio/aeron/driver/Receiver;
      11: aload_1
      12: iload_2
      13: iload_3
      14: invokevirtual #23                 // Method io/aeron/driver/Receiver.onRemoveCoolDown:(Lio/aeron/driver/media/ReceiveChannelEndpoint;II)V
      17: goto          34
      20: aload_0
      21: new           #24                 // class io/aeron/driver/cmd/RemoveCoolDownCmd
      24: dup
      25: aload_1
      26: iload_2
      27: iload_3
      28: invokespecial #25                 // Method io/aeron/driver/cmd/RemoveCoolDownCmd."<init>":(Lio/aeron/driver/media/ReceiveChannelEndpoint;II)V
      31: invokespecial #10                 // Method offer:(Lio/aeron/driver/cmd/ReceiverCmd;)V
      34: return

  private boolean isSharedThread();
    Code:
       0: aload_0
       1: getfield      #2                  // Field threadingMode:Lio/aeron/driver/ThreadingMode;
       4: getstatic     #26                 // Field io/aeron/driver/ThreadingMode.SHARED:Lio/aeron/driver/ThreadingMode;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  private void offer(io.aeron.driver.cmd.ReceiverCmd);
    Code:
       0: aload_0
       1: getfield      #3                  // Field commandQueue:Ljava/util/Queue;
       4: aload_1
       5: invokeinterface #27,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      10: ifne          27
      13: aload_0
      14: getfield      #4                  // Field failCount:Lorg/agrona/concurrent/status/AtomicCounter;
      17: invokevirtual #28                 // Method org/agrona/concurrent/status/AtomicCounter.orderedIncrement:()J
      20: pop2
      21: invokestatic  #29                 // Method java/lang/Thread.yield:()V
      24: goto          0
      27: return
}
