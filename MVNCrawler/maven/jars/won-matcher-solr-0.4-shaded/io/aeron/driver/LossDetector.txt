Compiled from "LossDetector.java"
public class io.aeron.driver.LossDetector implements io.aeron.logbuffer.TermGapScanner$GapHandler {
  private static final long TIMER_INACTIVE;

  private final io.aeron.driver.FeedbackDelayGenerator delayGenerator;

  private final io.aeron.driver.NakMessageSender nakMessageSender;

  private final io.aeron.driver.LossDetector$Gap scannedGap;

  private final io.aeron.driver.LossDetector$Gap activeGap;

  private long expire;

  private int rebuildOffset;

  public io.aeron.driver.LossDetector(io.aeron.driver.FeedbackDelayGenerator, io.aeron.driver.NakMessageSender);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class io/aeron/driver/LossDetector$Gap
       8: dup
       9: invokespecial #3                  // Method io/aeron/driver/LossDetector$Gap."<init>":()V
      12: putfield      #4                  // Field scannedGap:Lio/aeron/driver/LossDetector$Gap;
      15: aload_0
      16: new           #2                  // class io/aeron/driver/LossDetector$Gap
      19: dup
      20: invokespecial #3                  // Method io/aeron/driver/LossDetector$Gap."<init>":()V
      23: putfield      #5                  // Field activeGap:Lio/aeron/driver/LossDetector$Gap;
      26: aload_0
      27: ldc2_w        #7                  // long -1l
      30: putfield      #9                  // Field expire:J
      33: aload_0
      34: iconst_0
      35: putfield      #10                 // Field rebuildOffset:I
      38: aload_0
      39: aload_1
      40: putfield      #11                 // Field delayGenerator:Lio/aeron/driver/FeedbackDelayGenerator;
      43: aload_0
      44: aload_2
      45: putfield      #12                 // Field nakMessageSender:Lio/aeron/driver/NakMessageSender;
      48: return

  public int rebuildOffset();
    Code:
       0: aload_0
       1: getfield      #10                 // Field rebuildOffset:I
       4: ireturn

  public int scan(org.agrona.concurrent.UnsafeBuffer, long, long, long, int, int, int);
    Code:
       0: iconst_0
       1: istore        11
       3: lload_2
       4: l2i
       5: iload         8
       7: iand
       8: istore        12
      10: lload         4
      12: l2i
      13: iload         8
      15: iand
      16: istore        13
      18: lload_2
      19: lload         4
      21: lcmp
      22: ifge          170
      25: lload_2
      26: iload         9
      28: lushr
      29: l2i
      30: istore        14
      32: lload         4
      34: iload         9
      36: lushr
      37: l2i
      38: istore        15
      40: iload         10
      42: iload         14
      44: iadd
      45: istore        16
      47: iload         14
      49: iload         15
      51: if_icmpne     59
      54: iload         13
      56: goto          63
      59: aload_1
      60: invokevirtual #13                 // Method org/agrona/concurrent/UnsafeBuffer.capacity:()I
      63: istore        17
      65: aload_0
      66: iload         17
      68: putfield      #10                 // Field rebuildOffset:I
      71: aload_0
      72: aload_1
      73: iload         16
      75: iload         12
      77: iload         17
      79: aload_0
      80: invokestatic  #14                 // Method io/aeron/logbuffer/TermGapScanner.scanForGap:(Lorg/agrona/concurrent/UnsafeBuffer;IIILio/aeron/logbuffer/TermGapScanner$GapHandler;)I
      83: putfield      #10                 // Field rebuildOffset:I
      86: aload_0
      87: getfield      #10                 // Field rebuildOffset:I
      90: iload         17
      92: if_icmpge     167
      95: aload_0
      96: getfield      #4                  // Field scannedGap:Lio/aeron/driver/LossDetector$Gap;
      99: astore        18
     101: ldc2_w        #7                  // long -1l
     104: aload_0
     105: getfield      #9                  // Field expire:J
     108: lcmp
     109: ifeq          134
     112: aload         18
     114: aload_0
     115: getfield      #5                  // Field activeGap:Lio/aeron/driver/LossDetector$Gap;
     118: getfield      #15                 // Field io/aeron/driver/LossDetector$Gap.termId:I
     121: aload_0
     122: getfield      #5                  // Field activeGap:Lio/aeron/driver/LossDetector$Gap;
     125: getfield      #16                 // Field io/aeron/driver/LossDetector$Gap.termOffset:I
     128: invokevirtual #17                 // Method io/aeron/driver/LossDetector$Gap.matches:(II)Z
     131: ifne          158
     134: aload_0
     135: lload         6
     137: aload         18
     139: getfield      #15                 // Field io/aeron/driver/LossDetector$Gap.termId:I
     142: aload         18
     144: getfield      #16                 // Field io/aeron/driver/LossDetector$Gap.termOffset:I
     147: aload         18
     149: getfield      #18                 // Field io/aeron/driver/LossDetector$Gap.length:I
     152: invokespecial #19                 // Method activateGap:(JIII)V
     155: iconst_1
     156: istore        11
     158: aload_0
     159: aload         18
     161: getfield      #16                 // Field io/aeron/driver/LossDetector$Gap.termOffset:I
     164: putfield      #10                 // Field rebuildOffset:I
     167: goto          183
     170: aload_0
     171: ldc2_w        #7                  // long -1l
     174: putfield      #9                  // Field expire:J
     177: aload_0
     178: iload         12
     180: putfield      #10                 // Field rebuildOffset:I
     183: iload         11
     185: aload_0
     186: lload         6
     188: invokespecial #20                 // Method checkTimerExpire:(J)I
     191: iadd
     192: istore        11
     194: iload         11
     196: ireturn

  public void onNak(long, int, int);
    Code:
       0: ldc2_w        #7                  // long -1l
       3: aload_0
       4: getfield      #9                  // Field expire:J
       7: lcmp
       8: ifeq          34
      11: aload_0
      12: getfield      #5                  // Field activeGap:Lio/aeron/driver/LossDetector$Gap;
      15: iload_3
      16: iload         4
      18: invokevirtual #17                 // Method io/aeron/driver/LossDetector$Gap.matches:(II)Z
      21: ifeq          34
      24: aload_0
      25: lload_1
      26: aload_0
      27: invokespecial #21                 // Method determineNakDelay:()J
      30: ladd
      31: putfield      #9                  // Field expire:J
      34: return

  public void onGap(int, org.agrona.concurrent.UnsafeBuffer, int, int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field scannedGap:Lio/aeron/driver/LossDetector$Gap;
       4: iload_1
       5: iload_3
       6: iload         4
       8: invokevirtual #22                 // Method io/aeron/driver/LossDetector$Gap.reset:(III)V
      11: return

  private void activateGap(long, int, int, int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field activeGap:Lio/aeron/driver/LossDetector$Gap;
       4: iload_3
       5: iload         4
       7: iload         5
       9: invokevirtual #22                 // Method io/aeron/driver/LossDetector$Gap.reset:(III)V
      12: aload_0
      13: invokespecial #21                 // Method determineNakDelay:()J
      16: ldc2_w        #7                  // long -1l
      19: lcmp
      20: ifne          24
      23: return
      24: aload_0
      25: lload_1
      26: aload_0
      27: invokespecial #21                 // Method determineNakDelay:()J
      30: ladd
      31: putfield      #9                  // Field expire:J
      34: aload_0
      35: getfield      #11                 // Field delayGenerator:Lio/aeron/driver/FeedbackDelayGenerator;
      38: invokeinterface #23,  1           // InterfaceMethod io/aeron/driver/FeedbackDelayGenerator.shouldFeedbackImmediately:()Z
      43: ifeq          50
      46: aload_0
      47: invokespecial #24                 // Method sendNakMessage:()V
      50: return

  private int checkTimerExpire(long);
    Code:
       0: iconst_0
       1: istore_3
       2: ldc2_w        #7                  // long -1l
       5: aload_0
       6: getfield      #9                  // Field expire:J
       9: lcmp
      10: ifeq          38
      13: lload_1
      14: aload_0
      15: getfield      #9                  // Field expire:J
      18: lcmp
      19: ifle          38
      22: aload_0
      23: invokespecial #24                 // Method sendNakMessage:()V
      26: aload_0
      27: lload_1
      28: aload_0
      29: invokespecial #21                 // Method determineNakDelay:()J
      32: ladd
      33: putfield      #9                  // Field expire:J
      36: iconst_1
      37: istore_3
      38: iload_3
      39: ireturn

  private void sendNakMessage();
    Code:
       0: aload_0
       1: getfield      #12                 // Field nakMessageSender:Lio/aeron/driver/NakMessageSender;
       4: aload_0
       5: getfield      #5                  // Field activeGap:Lio/aeron/driver/LossDetector$Gap;
       8: getfield      #15                 // Field io/aeron/driver/LossDetector$Gap.termId:I
      11: aload_0
      12: getfield      #5                  // Field activeGap:Lio/aeron/driver/LossDetector$Gap;
      15: getfield      #16                 // Field io/aeron/driver/LossDetector$Gap.termOffset:I
      18: aload_0
      19: getfield      #5                  // Field activeGap:Lio/aeron/driver/LossDetector$Gap;
      22: getfield      #18                 // Field io/aeron/driver/LossDetector$Gap.length:I
      25: invokeinterface #25,  4           // InterfaceMethod io/aeron/driver/NakMessageSender.onLossDetected:(III)V
      30: return

  private long determineNakDelay();
    Code:
       0: aload_0
       1: getfield      #11                 // Field delayGenerator:Lio/aeron/driver/FeedbackDelayGenerator;
       4: invokeinterface #26,  1           // InterfaceMethod io/aeron/driver/FeedbackDelayGenerator.generateDelay:()J
       9: lreturn
}
