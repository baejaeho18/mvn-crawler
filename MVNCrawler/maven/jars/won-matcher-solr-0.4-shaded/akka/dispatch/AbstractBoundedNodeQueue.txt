Compiled from "AbstractBoundedNodeQueue.java"
public abstract class akka.dispatch.AbstractBoundedNodeQueue<T> {
  private final int capacity;

  private volatile akka.dispatch.AbstractBoundedNodeQueue$Node<T> _enqDoNotCallMeDirectly;

  private volatile akka.dispatch.AbstractBoundedNodeQueue$Node<T> _deqDoNotCallMeDirectly;

  private static final long enqOffset;

  private static final long deqOffset;

  protected akka.dispatch.AbstractBoundedNodeQueue(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: iload_1
       5: ifge          18
       8: new           #2                  // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #3                  // String AbstractBoundedNodeQueue.capacity must be >= 0
      14: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: iload_1
      20: putfield      #5                  // Field capacity:I
      23: new           #6                  // class akka/dispatch/AbstractBoundedNodeQueue$Node
      26: dup
      27: invokespecial #7                  // Method akka/dispatch/AbstractBoundedNodeQueue$Node."<init>":()V
      30: astore_2
      31: aload_0
      32: aload_2
      33: invokespecial #8                  // Method setDeq:(Lakka/dispatch/AbstractBoundedNodeQueue$Node;)V
      36: aload_0
      37: aload_2
      38: invokespecial #9                  // Method setEnq:(Lakka/dispatch/AbstractBoundedNodeQueue$Node;)V
      41: return

  private final void setEnq(akka.dispatch.AbstractBoundedNodeQueue$Node<T>);
    Code:
       0: getstatic     #10                 // Field akka/util/Unsafe.instance:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #11                 // Field enqOffset:J
       7: aload_1
       8: invokevirtual #12                 // Method sun/misc/Unsafe.putObjectVolatile:(Ljava/lang/Object;JLjava/lang/Object;)V
      11: return

  private final akka.dispatch.AbstractBoundedNodeQueue$Node<T> getEnq();
    Code:
       0: getstatic     #10                 // Field akka/util/Unsafe.instance:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #11                 // Field enqOffset:J
       7: invokevirtual #13                 // Method sun/misc/Unsafe.getObjectVolatile:(Ljava/lang/Object;J)Ljava/lang/Object;
      10: checkcast     #6                  // class akka/dispatch/AbstractBoundedNodeQueue$Node
      13: areturn

  private final boolean casEnq(akka.dispatch.AbstractBoundedNodeQueue$Node<T>, akka.dispatch.AbstractBoundedNodeQueue$Node<T>);
    Code:
       0: getstatic     #10                 // Field akka/util/Unsafe.instance:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #11                 // Field enqOffset:J
       7: aload_1
       8: aload_2
       9: invokevirtual #14                 // Method sun/misc/Unsafe.compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
      12: ireturn

  private final void setDeq(akka.dispatch.AbstractBoundedNodeQueue$Node<T>);
    Code:
       0: getstatic     #10                 // Field akka/util/Unsafe.instance:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #15                 // Field deqOffset:J
       7: aload_1
       8: invokevirtual #12                 // Method sun/misc/Unsafe.putObjectVolatile:(Ljava/lang/Object;JLjava/lang/Object;)V
      11: return

  private final akka.dispatch.AbstractBoundedNodeQueue$Node<T> getDeq();
    Code:
       0: getstatic     #10                 // Field akka/util/Unsafe.instance:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #15                 // Field deqOffset:J
       7: invokevirtual #13                 // Method sun/misc/Unsafe.getObjectVolatile:(Ljava/lang/Object;J)Ljava/lang/Object;
      10: checkcast     #6                  // class akka/dispatch/AbstractBoundedNodeQueue$Node
      13: areturn

  private final boolean casDeq(akka.dispatch.AbstractBoundedNodeQueue$Node<T>, akka.dispatch.AbstractBoundedNodeQueue$Node<T>);
    Code:
       0: getstatic     #10                 // Field akka/util/Unsafe.instance:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #15                 // Field deqOffset:J
       7: aload_1
       8: aload_2
       9: invokevirtual #14                 // Method sun/misc/Unsafe.compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
      12: ireturn

  protected final akka.dispatch.AbstractBoundedNodeQueue$Node<T> peekNode();
    Code:
       0: aload_0
       1: invokespecial #16                 // Method getDeq:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
       4: astore_1
       5: aload_1
       6: invokevirtual #17                 // Method akka/dispatch/AbstractBoundedNodeQueue$Node.next:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
       9: astore_2
      10: aload_2
      11: ifnonnull     22
      14: aload_0
      15: invokespecial #18                 // Method getEnq:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
      18: aload_1
      19: if_acmpne     24
      22: aload_2
      23: areturn
      24: goto          0

  public final T peek();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method peekNode:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
       4: astore_1
       5: aload_1
       6: ifnull        16
       9: aload_1
      10: getfield      #20                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.value:Ljava/lang/Object;
      13: goto          17
      16: aconst_null
      17: areturn

  public final int capacity();
    Code:
       0: aload_0
       1: getfield      #5                  // Field capacity:I
       4: ireturn

  public final boolean add(T);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: invokespecial #18                 // Method getEnq:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
       6: astore_3
       7: aload_3
       8: getfield      #21                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.count:I
      11: istore        4
      13: iload         4
      15: aload_0
      16: invokespecial #16                 // Method getDeq:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
      19: getfield      #21                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.count:I
      22: isub
      23: aload_0
      24: getfield      #5                  // Field capacity:I
      27: if_icmpge     71
      30: aload_2
      31: ifnonnull     47
      34: new           #6                  // class akka/dispatch/AbstractBoundedNodeQueue$Node
      37: dup
      38: invokespecial #7                  // Method akka/dispatch/AbstractBoundedNodeQueue$Node."<init>":()V
      41: astore_2
      42: aload_2
      43: aload_1
      44: putfield      #20                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.value:Ljava/lang/Object;
      47: aload_2
      48: iload         4
      50: iconst_1
      51: iadd
      52: putfield      #21                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.count:I
      55: aload_0
      56: aload_3
      57: aload_2
      58: invokespecial #22                 // Method casEnq:(Lakka/dispatch/AbstractBoundedNodeQueue$Node;Lakka/dispatch/AbstractBoundedNodeQueue$Node;)Z
      61: ifeq          73
      64: aload_3
      65: aload_2
      66: invokevirtual #23                 // Method akka/dispatch/AbstractBoundedNodeQueue$Node.setNext:(Lakka/dispatch/AbstractBoundedNodeQueue$Node;)V
      69: iconst_1
      70: ireturn
      71: iconst_0
      72: ireturn
      73: goto          2

  public final boolean addNode(akka.dispatch.AbstractBoundedNodeQueue$Node<T>);
    Code:
       0: aload_1
       1: aconst_null
       2: invokevirtual #23                 // Method akka/dispatch/AbstractBoundedNodeQueue$Node.setNext:(Lakka/dispatch/AbstractBoundedNodeQueue$Node;)V
       5: aload_0
       6: invokespecial #18                 // Method getEnq:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
       9: astore_2
      10: aload_2
      11: getfield      #21                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.count:I
      14: istore_3
      15: iload_3
      16: aload_0
      17: invokespecial #16                 // Method getDeq:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
      20: getfield      #21                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.count:I
      23: isub
      24: aload_0
      25: getfield      #5                  // Field capacity:I
      28: if_icmpge     54
      31: aload_1
      32: iload_3
      33: iconst_1
      34: iadd
      35: putfield      #21                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.count:I
      38: aload_0
      39: aload_2
      40: aload_1
      41: invokespecial #22                 // Method casEnq:(Lakka/dispatch/AbstractBoundedNodeQueue$Node;Lakka/dispatch/AbstractBoundedNodeQueue$Node;)Z
      44: ifeq          56
      47: aload_2
      48: aload_1
      49: invokevirtual #23                 // Method akka/dispatch/AbstractBoundedNodeQueue$Node.setNext:(Lakka/dispatch/AbstractBoundedNodeQueue$Node;)V
      52: iconst_1
      53: ireturn
      54: iconst_0
      55: ireturn
      56: goto          5

  public final boolean isEmpty();
    Code:
       0: aload_0
       1: invokespecial #18                 // Method getEnq:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
       4: aload_0
       5: invokespecial #16                 // Method getDeq:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
       8: if_acmpne     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public final int size();
    Code:
       0: aload_0
       1: invokespecial #16                 // Method getDeq:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
       4: getfield      #21                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.count:I
       7: istore_1
       8: aload_0
       9: invokespecial #18                 // Method getEnq:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
      12: getfield      #21                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.count:I
      15: istore_2
      16: aload_0
      17: invokespecial #16                 // Method getDeq:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
      20: getfield      #21                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.count:I
      23: istore_3
      24: iload_3
      25: iload_1
      26: if_icmpne     33
      29: iload_2
      30: iload_3
      31: isub
      32: ireturn
      33: goto          0

  public final T poll();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method pollNode:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
       4: astore_1
       5: aload_1
       6: ifnull        16
       9: aload_1
      10: getfield      #20                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.value:Ljava/lang/Object;
      13: goto          17
      16: aconst_null
      17: areturn

  public final akka.dispatch.AbstractBoundedNodeQueue$Node<T> pollNode();
    Code:
       0: aload_0
       1: invokespecial #16                 // Method getDeq:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
       4: astore_1
       5: aload_1
       6: invokevirtual #17                 // Method akka/dispatch/AbstractBoundedNodeQueue$Node.next:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
       9: astore_2
      10: aload_2
      11: ifnull        43
      14: aload_0
      15: aload_1
      16: aload_2
      17: invokespecial #25                 // Method casDeq:(Lakka/dispatch/AbstractBoundedNodeQueue$Node;Lakka/dispatch/AbstractBoundedNodeQueue$Node;)Z
      20: ifeq          53
      23: aload_1
      24: aload_2
      25: getfield      #20                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.value:Ljava/lang/Object;
      28: putfield      #20                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.value:Ljava/lang/Object;
      31: aload_1
      32: aconst_null
      33: invokevirtual #23                 // Method akka/dispatch/AbstractBoundedNodeQueue$Node.setNext:(Lakka/dispatch/AbstractBoundedNodeQueue$Node;)V
      36: aload_2
      37: aconst_null
      38: putfield      #20                 // Field akka/dispatch/AbstractBoundedNodeQueue$Node.value:Ljava/lang/Object;
      41: aload_1
      42: areturn
      43: aload_0
      44: invokespecial #18                 // Method getEnq:()Lakka/dispatch/AbstractBoundedNodeQueue$Node;
      47: aload_1
      48: if_acmpne     53
      51: aconst_null
      52: areturn
      53: goto          0

  static {};
    Code:
       0: getstatic     #10                 // Field akka/util/Unsafe.instance:Lsun/misc/Unsafe;
       3: ldc           #26                 // class akka/dispatch/AbstractBoundedNodeQueue
       5: ldc           #27                 // String _enqDoNotCallMeDirectly
       7: invokevirtual #28                 // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
      10: invokevirtual #29                 // Method sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
      13: putstatic     #11                 // Field enqOffset:J
      16: getstatic     #10                 // Field akka/util/Unsafe.instance:Lsun/misc/Unsafe;
      19: ldc           #26                 // class akka/dispatch/AbstractBoundedNodeQueue
      21: ldc           #30                 // String _deqDoNotCallMeDirectly
      23: invokevirtual #28                 // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
      26: invokevirtual #29                 // Method sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
      29: putstatic     #15                 // Field deqOffset:J
      32: goto          45
      35: astore_0
      36: new           #32                 // class java/lang/ExceptionInInitializerError
      39: dup
      40: aload_0
      41: invokespecial #33                 // Method java/lang/ExceptionInInitializerError."<init>":(Ljava/lang/Throwable;)V
      44: athrow
      45: return
    Exception table:
       from    to  target type
           0    32    35   Class java/lang/Throwable
}
