Compiled from "ThreadPoolBuilder.scala"
public class akka.dispatch.MonitorableThreadFactory$AkkaForkJoinWorkerThread extends scala.concurrent.forkjoin.ForkJoinWorkerThread implements scala.concurrent.BlockContext {
  public <T> T blockOn(scala.Function0<T>, scala.concurrent.CanAwait);
    Code:
       0: new           #11                 // class java/util/concurrent/atomic/AtomicReference
       3: dup
       4: getstatic     #17                 // Field scala/None$.MODULE$:Lscala/None$;
       7: invokespecial #21                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      10: astore_3
      11: new           #23                 // class akka/dispatch/MonitorableThreadFactory$AkkaForkJoinWorkerThread$$anon$3
      14: dup
      15: aload_0
      16: aload_1
      17: aload_3
      18: invokespecial #26                 // Method akka/dispatch/MonitorableThreadFactory$AkkaForkJoinWorkerThread$$anon$3."<init>":(Lakka/dispatch/MonitorableThreadFactory$AkkaForkJoinWorkerThread;Lscala/Function0;Ljava/util/concurrent/atomic/AtomicReference;)V
      21: invokestatic  #32                 // Method scala/concurrent/forkjoin/ForkJoinPool.managedBlock:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;)V
      24: aload_3
      25: invokevirtual #36                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      28: checkcast     #38                 // class scala/Option
      31: invokevirtual #39                 // Method scala/Option.get:()Ljava/lang/Object;
      34: areturn

  public akka.dispatch.MonitorableThreadFactory$AkkaForkJoinWorkerThread(scala.concurrent.forkjoin.ForkJoinPool);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #50                 // Method scala/concurrent/forkjoin/ForkJoinWorkerThread."<init>":(Lscala/concurrent/forkjoin/ForkJoinPool;)V
       5: return
}
