Compiled from "ThreadPoolBuilder.scala"
public final class akka.dispatch.ThreadPoolConfig implements akka.dispatch.ExecutorServiceFactoryProvider,scala.Product,scala.Serializable {
  private final boolean allowCorePoolTimeout;

  private final int corePoolSize;

  private final int maxPoolSize;

  private final scala.concurrent.duration.Duration threadTimeout;

  private final scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>> queueFactory;

  private final java.util.concurrent.RejectedExecutionHandler rejectionPolicy;

  public static java.util.concurrent.RejectedExecutionHandler $lessinit$greater$default$6();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #24                 // Method akka/dispatch/ThreadPoolConfig$.$lessinit$greater$default$6:()Ljava/util/concurrent/RejectedExecutionHandler;
       6: areturn

  public static scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>> $lessinit$greater$default$5();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #28                 // Method akka/dispatch/ThreadPoolConfig$.$lessinit$greater$default$5:()Lscala/Function0;
       6: areturn

  public static scala.concurrent.duration.Duration $lessinit$greater$default$4();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #32                 // Method akka/dispatch/ThreadPoolConfig$.$lessinit$greater$default$4:()Lscala/concurrent/duration/Duration;
       6: areturn

  public static int $lessinit$greater$default$3();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #36                 // Method akka/dispatch/ThreadPoolConfig$.$lessinit$greater$default$3:()I
       6: ireturn

  public static int $lessinit$greater$default$2();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #39                 // Method akka/dispatch/ThreadPoolConfig$.$lessinit$greater$default$2:()I
       6: ireturn

  public static boolean $lessinit$greater$default$1();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #43                 // Method akka/dispatch/ThreadPoolConfig$.$lessinit$greater$default$1:()Z
       6: ireturn

  public static java.util.concurrent.RejectedExecutionHandler apply$default$6();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #46                 // Method akka/dispatch/ThreadPoolConfig$.apply$default$6:()Ljava/util/concurrent/RejectedExecutionHandler;
       6: areturn

  public static scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>> apply$default$5();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #49                 // Method akka/dispatch/ThreadPoolConfig$.apply$default$5:()Lscala/Function0;
       6: areturn

  public static scala.concurrent.duration.Duration apply$default$4();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #52                 // Method akka/dispatch/ThreadPoolConfig$.apply$default$4:()Lscala/concurrent/duration/Duration;
       6: areturn

  public static int apply$default$3();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #55                 // Method akka/dispatch/ThreadPoolConfig$.apply$default$3:()I
       6: ireturn

  public static int apply$default$2();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #58                 // Method akka/dispatch/ThreadPoolConfig$.apply$default$2:()I
       6: ireturn

  public static boolean apply$default$1();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #61                 // Method akka/dispatch/ThreadPoolConfig$.apply$default$1:()Z
       6: ireturn

  public static scala.Option<scala.Tuple6<java.lang.Object, java.lang.Object, java.lang.Object, scala.concurrent.duration.Duration, scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>>, java.util.concurrent.RejectedExecutionHandler>> unapply(akka.dispatch.ThreadPoolConfig);
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: aload_0
       4: invokevirtual #65                 // Method akka/dispatch/ThreadPoolConfig$.unapply:(Lakka/dispatch/ThreadPoolConfig;)Lscala/Option;
       7: areturn

  public static akka.dispatch.ThreadPoolConfig apply(boolean, int, int, scala.concurrent.duration.Duration, scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>>, java.util.concurrent.RejectedExecutionHandler);
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: iload_0
       4: iload_1
       5: iload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: invokevirtual #69                 // Method akka/dispatch/ThreadPoolConfig$.apply:(ZIILscala/concurrent/duration/Duration;Lscala/Function0;Ljava/util/concurrent/RejectedExecutionHandler;)Lakka/dispatch/ThreadPoolConfig;
      14: areturn

  public static scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>> reusableQueue(scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>>);
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: aload_0
       4: invokevirtual #73                 // Method akka/dispatch/ThreadPoolConfig$.reusableQueue:(Lscala/Function0;)Lscala/Function0;
       7: areturn

  public static scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>> reusableQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>);
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: aload_0
       4: invokevirtual #76                 // Method akka/dispatch/ThreadPoolConfig$.reusableQueue:(Ljava/util/concurrent/BlockingQueue;)Lscala/Function0;
       7: areturn

  public static scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>> linkedBlockingQueue(int);
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: iload_0
       4: invokevirtual #80                 // Method akka/dispatch/ThreadPoolConfig$.linkedBlockingQueue:(I)Lscala/Function0;
       7: areturn

  public static scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>> linkedBlockingQueue();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #82                 // Method akka/dispatch/ThreadPoolConfig$.linkedBlockingQueue:()Lscala/Function0;
       6: areturn

  public static scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>> synchronousQueue(boolean);
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: iload_0
       4: invokevirtual #86                 // Method akka/dispatch/ThreadPoolConfig$.synchronousQueue:(Z)Lscala/Function0;
       7: areturn

  public static scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>> arrayBlockingQueue(int, boolean);
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: iload_0
       4: iload_1
       5: invokevirtual #90                 // Method akka/dispatch/ThreadPoolConfig$.arrayBlockingQueue:(IZ)Lscala/Function0;
       8: areturn

  public static int scaledPoolSize(int, double, int);
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: iload_0
       4: dload_1
       5: iload_3
       6: invokevirtual #94                 // Method akka/dispatch/ThreadPoolConfig$.scaledPoolSize:(IDI)I
       9: ireturn

  public static java.util.concurrent.RejectedExecutionHandler defaultRejectionPolicy();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #97                 // Method akka/dispatch/ThreadPoolConfig$.defaultRejectionPolicy:()Ljava/util/concurrent/RejectedExecutionHandler;
       6: areturn

  public static scala.concurrent.duration.Duration defaultTimeout();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #100                // Method akka/dispatch/ThreadPoolConfig$.defaultTimeout:()Lscala/concurrent/duration/Duration;
       6: areturn

  public static int defaultMaxPoolSize();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #103                // Method akka/dispatch/ThreadPoolConfig$.defaultMaxPoolSize:()I
       6: ireturn

  public static int defaultCorePoolSize();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #106                // Method akka/dispatch/ThreadPoolConfig$.defaultCorePoolSize:()I
       6: ireturn

  public static boolean defaultAllowCoreThreadTimeout();
    Code:
       0: getstatic     #22                 // Field akka/dispatch/ThreadPoolConfig$.MODULE$:Lakka/dispatch/ThreadPoolConfig$;
       3: invokevirtual #109                // Method akka/dispatch/ThreadPoolConfig$.defaultAllowCoreThreadTimeout:()Z
       6: ireturn

  public boolean allowCorePoolTimeout();
    Code:
       0: aload_0
       1: getfield      #123                // Field allowCorePoolTimeout:Z
       4: ireturn

  public int corePoolSize();
    Code:
       0: aload_0
       1: getfield      #127                // Field corePoolSize:I
       4: ireturn

  public int maxPoolSize();
    Code:
       0: aload_0
       1: getfield      #129                // Field maxPoolSize:I
       4: ireturn

  public scala.concurrent.duration.Duration threadTimeout();
    Code:
       0: aload_0
       1: getfield      #131                // Field threadTimeout:Lscala/concurrent/duration/Duration;
       4: areturn

  public scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>> queueFactory();
    Code:
       0: aload_0
       1: getfield      #133                // Field queueFactory:Lscala/Function0;
       4: areturn

  public java.util.concurrent.RejectedExecutionHandler rejectionPolicy();
    Code:
       0: aload_0
       1: getfield      #135                // Field rejectionPolicy:Ljava/util/concurrent/RejectedExecutionHandler;
       4: areturn

  public final akka.dispatch.ExecutorServiceFactory createExecutorServiceFactory(java.lang.String, java.util.concurrent.ThreadFactory);
    Code:
       0: aload_2
       1: astore        4
       3: aload         4
       5: instanceof    #139                // class akka/dispatch/MonitorableThreadFactory
       8: ifeq          55
      11: aload         4
      13: checkcast     #139                // class akka/dispatch/MonitorableThreadFactory
      16: astore        5
      18: aload         5
      20: new           #141                // class scala/collection/mutable/StringBuilder
      23: dup
      24: invokespecial #145                // Method scala/collection/mutable/StringBuilder."<init>":()V
      27: aload         5
      29: invokevirtual #149                // Method akka/dispatch/MonitorableThreadFactory.name:()Ljava/lang/String;
      32: invokevirtual #153                // Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
      35: ldc           #155                // String -
      37: invokevirtual #153                // Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
      40: aload_1
      41: invokevirtual #153                // Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
      44: invokevirtual #158                // Method scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
      47: invokevirtual #162                // Method akka/dispatch/MonitorableThreadFactory.withName:(Ljava/lang/String;)Lakka/dispatch/MonitorableThreadFactory;
      50: astore        6
      52: goto          59
      55: aload         4
      57: astore        6
      59: aload         6
      61: astore_3
      62: new           #164                // class akka/dispatch/ThreadPoolConfig$ThreadPoolExecutorServiceFactory
      65: dup
      66: aload_0
      67: aload_3
      68: invokespecial #167                // Method akka/dispatch/ThreadPoolConfig$ThreadPoolExecutorServiceFactory."<init>":(Lakka/dispatch/ThreadPoolConfig;Ljava/util/concurrent/ThreadFactory;)V
      71: areturn

  public akka.dispatch.ThreadPoolConfig copy(boolean, int, int, scala.concurrent.duration.Duration, scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>>, java.util.concurrent.RejectedExecutionHandler);
    Code:
       0: new           #2                  // class akka/dispatch/ThreadPoolConfig
       3: dup
       4: iload_1
       5: iload_2
       6: iload_3
       7: aload         4
       9: aload         5
      11: aload         6
      13: invokespecial #178                // Method "<init>":(ZIILscala/concurrent/duration/Duration;Lscala/Function0;Ljava/util/concurrent/RejectedExecutionHandler;)V
      16: areturn

  public boolean copy$default$1();
    Code:
       0: aload_0
       1: invokevirtual #181                // Method allowCorePoolTimeout:()Z
       4: ireturn

  public int copy$default$2();
    Code:
       0: aload_0
       1: invokevirtual #184                // Method corePoolSize:()I
       4: ireturn

  public int copy$default$3();
    Code:
       0: aload_0
       1: invokevirtual #187                // Method maxPoolSize:()I
       4: ireturn

  public scala.concurrent.duration.Duration copy$default$4();
    Code:
       0: aload_0
       1: invokevirtual #190                // Method threadTimeout:()Lscala/concurrent/duration/Duration;
       4: areturn

  public scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>> copy$default$5();
    Code:
       0: aload_0
       1: invokevirtual #193                // Method queueFactory:()Lscala/Function0;
       4: areturn

  public java.util.concurrent.RejectedExecutionHandler copy$default$6();
    Code:
       0: aload_0
       1: invokevirtual #196                // Method rejectionPolicy:()Ljava/util/concurrent/RejectedExecutionHandler;
       4: areturn

  public java.lang.String productPrefix();
    Code:
       0: ldc           #199                // String ThreadPoolConfig
       2: areturn

  public int productArity();
    Code:
       0: bipush        6
       2: ireturn

  public java.lang.Object productElement(int);
    Code:
       0: iload_1
       1: istore_2
       2: iload_2
       3: tableswitch   { // 0 to 5
                     0: 96
                     1: 86
                     2: 76
                     3: 69
                     4: 62
                     5: 55
               default: 40
          }
      40: new           #204                // class java/lang/IndexOutOfBoundsException
      43: dup
      44: iload_1
      45: invokestatic  #210                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      48: invokevirtual #211                // Method java/lang/Object.toString:()Ljava/lang/String;
      51: invokespecial #214                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      54: athrow
      55: aload_0
      56: invokevirtual #196                // Method rejectionPolicy:()Ljava/util/concurrent/RejectedExecutionHandler;
      59: goto          103
      62: aload_0
      63: invokevirtual #193                // Method queueFactory:()Lscala/Function0;
      66: goto          103
      69: aload_0
      70: invokevirtual #190                // Method threadTimeout:()Lscala/concurrent/duration/Duration;
      73: goto          103
      76: aload_0
      77: invokevirtual #187                // Method maxPoolSize:()I
      80: invokestatic  #210                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      83: goto          103
      86: aload_0
      87: invokevirtual #184                // Method corePoolSize:()I
      90: invokestatic  #210                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      93: goto          103
      96: aload_0
      97: invokevirtual #181                // Method allowCorePoolTimeout:()Z
     100: invokestatic  #218                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
     103: areturn

  public scala.collection.Iterator<java.lang.Object> productIterator();
    Code:
       0: getstatic     #226                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #230                // Method scala/runtime/ScalaRunTime$.typedProductIterator:(Lscala/Product;)Lscala/collection/Iterator;
       7: areturn

  public boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class akka/dispatch/ThreadPoolConfig
       4: ireturn

  public int hashCode();
    Code:
       0: ldc           #235                // int -889275714
       2: istore_1
       3: iload_1
       4: aload_0
       5: invokevirtual #181                // Method allowCorePoolTimeout:()Z
       8: ifeq          17
      11: sipush        1231
      14: goto          20
      17: sipush        1237
      20: invokestatic  #241                // Method scala/runtime/Statics.mix:(II)I
      23: istore_1
      24: iload_1
      25: aload_0
      26: invokevirtual #184                // Method corePoolSize:()I
      29: invokestatic  #241                // Method scala/runtime/Statics.mix:(II)I
      32: istore_1
      33: iload_1
      34: aload_0
      35: invokevirtual #187                // Method maxPoolSize:()I
      38: invokestatic  #241                // Method scala/runtime/Statics.mix:(II)I
      41: istore_1
      42: iload_1
      43: aload_0
      44: invokevirtual #190                // Method threadTimeout:()Lscala/concurrent/duration/Duration;
      47: invokestatic  #245                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
      50: invokestatic  #241                // Method scala/runtime/Statics.mix:(II)I
      53: istore_1
      54: iload_1
      55: aload_0
      56: invokevirtual #193                // Method queueFactory:()Lscala/Function0;
      59: invokestatic  #245                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
      62: invokestatic  #241                // Method scala/runtime/Statics.mix:(II)I
      65: istore_1
      66: iload_1
      67: aload_0
      68: invokevirtual #196                // Method rejectionPolicy:()Ljava/util/concurrent/RejectedExecutionHandler;
      71: invokestatic  #245                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
      74: invokestatic  #241                // Method scala/runtime/Statics.mix:(II)I
      77: istore_1
      78: iload_1
      79: bipush        6
      81: invokestatic  #248                // Method scala/runtime/Statics.finalizeHash:(II)I
      84: ireturn

  public java.lang.String toString();
    Code:
       0: getstatic     #226                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #252                // Method scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
       7: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     171
       5: aload_1
       6: astore_2
       7: aload_2
       8: instanceof    #2                  // class akka/dispatch/ThreadPoolConfig
      11: ifeq          19
      14: iconst_1
      15: istore_3
      16: goto          21
      19: iconst_0
      20: istore_3
      21: iload_3
      22: ifeq          175
      25: aload_1
      26: checkcast     #2                  // class akka/dispatch/ThreadPoolConfig
      29: astore        4
      31: aload_0
      32: invokevirtual #181                // Method allowCorePoolTimeout:()Z
      35: aload         4
      37: invokevirtual #181                // Method allowCorePoolTimeout:()Z
      40: if_icmpne     167
      43: aload_0
      44: invokevirtual #184                // Method corePoolSize:()I
      47: aload         4
      49: invokevirtual #184                // Method corePoolSize:()I
      52: if_icmpne     167
      55: aload_0
      56: invokevirtual #187                // Method maxPoolSize:()I
      59: aload         4
      61: invokevirtual #187                // Method maxPoolSize:()I
      64: if_icmpne     167
      67: aload_0
      68: invokevirtual #190                // Method threadTimeout:()Lscala/concurrent/duration/Duration;
      71: aload         4
      73: invokevirtual #190                // Method threadTimeout:()Lscala/concurrent/duration/Duration;
      76: astore        5
      78: dup
      79: ifnonnull     91
      82: pop
      83: aload         5
      85: ifnull        99
      88: goto          167
      91: aload         5
      93: invokevirtual #255                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      96: ifeq          167
      99: aload_0
     100: invokevirtual #193                // Method queueFactory:()Lscala/Function0;
     103: aload         4
     105: invokevirtual #193                // Method queueFactory:()Lscala/Function0;
     108: astore        6
     110: dup
     111: ifnonnull     123
     114: pop
     115: aload         6
     117: ifnull        131
     120: goto          167
     123: aload         6
     125: invokevirtual #255                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     128: ifeq          167
     131: aload_0
     132: invokevirtual #196                // Method rejectionPolicy:()Ljava/util/concurrent/RejectedExecutionHandler;
     135: aload         4
     137: invokevirtual #196                // Method rejectionPolicy:()Ljava/util/concurrent/RejectedExecutionHandler;
     140: astore        7
     142: dup
     143: ifnonnull     155
     146: pop
     147: aload         7
     149: ifnull        163
     152: goto          167
     155: aload         7
     157: invokevirtual #255                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     160: ifeq          167
     163: iconst_1
     164: goto          168
     167: iconst_0
     168: ifeq          175
     171: iconst_1
     172: goto          176
     175: iconst_0
     176: ireturn

  public akka.dispatch.ThreadPoolConfig(boolean, int, int, scala.concurrent.duration.Duration, scala.Function0<java.util.concurrent.BlockingQueue<java.lang.Runnable>>, java.util.concurrent.RejectedExecutionHandler);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #123                // Field allowCorePoolTimeout:Z
       5: aload_0
       6: iload_2
       7: putfield      #127                // Field corePoolSize:I
      10: aload_0
      11: iload_3
      12: putfield      #129                // Field maxPoolSize:I
      15: aload_0
      16: aload         4
      18: putfield      #131                // Field threadTimeout:Lscala/concurrent/duration/Duration;
      21: aload_0
      22: aload         5
      24: putfield      #133                // Field queueFactory:Lscala/Function0;
      27: aload_0
      28: aload         6
      30: putfield      #135                // Field rejectionPolicy:Ljava/util/concurrent/RejectedExecutionHandler;
      33: aload_0
      34: invokespecial #262                // Method java/lang/Object."<init>":()V
      37: aload_0
      38: invokestatic  #268                // Method scala/Product$class.$init$:(Lscala/Product;)V
      41: return
}
