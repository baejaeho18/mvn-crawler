Compiled from "CircuitBreaker.scala"
public class akka.pattern.CircuitBreaker$Open$ extends java.util.concurrent.atomic.AtomicLong implements akka.pattern.CircuitBreaker$State {
  private final akka.pattern.CircuitBreaker $outer;

  private final java.util.concurrent.CopyOnWriteArrayList<java.lang.Runnable> akka$pattern$CircuitBreaker$State$$listeners;

  public java.util.concurrent.CopyOnWriteArrayList<java.lang.Runnable> akka$pattern$CircuitBreaker$State$$listeners();
    Code:
       0: aload_0
       1: getfield      #15                 // Field akka$pattern$CircuitBreaker$State$$listeners:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: areturn

  public void akka$pattern$CircuitBreaker$State$_setter_$akka$pattern$CircuitBreaker$State$$listeners_$eq(java.util.concurrent.CopyOnWriteArrayList);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field akka$pattern$CircuitBreaker$State$$listeners:Ljava/util/concurrent/CopyOnWriteArrayList;
       5: return

  public void addListener(java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #27                 // Method akka/pattern/CircuitBreaker$State$class.addListener:(Lakka/pattern/CircuitBreaker$State;Ljava/lang/Runnable;)V
       5: return

  public void notifyTransitionListeners();
    Code:
       0: aload_0
       1: invokestatic  #34                 // Method akka/pattern/CircuitBreaker$State$class.notifyTransitionListeners:(Lakka/pattern/CircuitBreaker$State;)V
       4: return

  public <T> scala.concurrent.Future<T> callThrough(scala.Function0<scala.concurrent.Future<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #39                 // Method akka/pattern/CircuitBreaker$State$class.callThrough:(Lakka/pattern/CircuitBreaker$State;Lscala/Function0;)Lscala/concurrent/Future;
       5: areturn

  public final void enter();
    Code:
       0: aload_0
       1: invokestatic  #44                 // Method akka/pattern/CircuitBreaker$State$class.enter:(Lakka/pattern/CircuitBreaker$State;)V
       4: return

  public <T> scala.concurrent.Future<T> invoke(scala.Function0<scala.concurrent.Future<T>>);
    Code:
       0: getstatic     #51                 // Field scala/concurrent/Promise$.MODULE$:Lscala/concurrent/Promise$;
       3: new           #53                 // class akka/pattern/CircuitBreakerOpenException
       6: dup
       7: aload_0
       8: invokespecial #57                 // Method remainingDuration:()Lscala/concurrent/duration/FiniteDuration;
      11: getstatic     #62                 // Field akka/pattern/CircuitBreakerOpenException$.MODULE$:Lakka/pattern/CircuitBreakerOpenException$;
      14: invokevirtual #66                 // Method akka/pattern/CircuitBreakerOpenException$.$lessinit$greater$default$2:()Ljava/lang/String;
      17: invokespecial #70                 // Method akka/pattern/CircuitBreakerOpenException."<init>":(Lscala/concurrent/duration/FiniteDuration;Ljava/lang/String;)V
      20: invokevirtual #74                 // Method scala/concurrent/Promise$.failed:(Ljava/lang/Throwable;)Lscala/concurrent/Promise;
      23: invokeinterface #80,  1           // InterfaceMethod scala/concurrent/Promise.future:()Lscala/concurrent/Future;
      28: areturn

  private scala.concurrent.duration.FiniteDuration remainingDuration();
    Code:
       0: invokestatic  #86                 // Method java/lang/System.nanoTime:()J
       3: aload_0
       4: invokevirtual #89                 // Method get:()J
       7: lsub
       8: lstore_1
       9: aload_0
      10: getfield      #91                 // Field $outer:Lakka/pattern/CircuitBreaker;
      13: invokevirtual #96                 // Method akka/pattern/CircuitBreaker.akka$pattern$CircuitBreaker$$currentResetTimeout:()Lscala/concurrent/duration/FiniteDuration;
      16: invokevirtual #101                // Method scala/concurrent/duration/FiniteDuration.toNanos:()J
      19: lload_1
      20: lsub
      21: lstore_3
      22: lload_3
      23: lconst_0
      24: lcmp
      25: ifgt          37
      28: getstatic     #106                // Field scala/concurrent/duration/Duration$.MODULE$:Lscala/concurrent/duration/Duration$;
      31: invokevirtual #109                // Method scala/concurrent/duration/Duration$.Zero:()Lscala/concurrent/duration/FiniteDuration;
      34: goto          54
      37: new           #111                // class scala/concurrent/duration/package$DurationLong
      40: dup
      41: getstatic     #116                // Field scala/concurrent/duration/package$.MODULE$:Lscala/concurrent/duration/package$;
      44: lload_3
      45: invokevirtual #120                // Method scala/concurrent/duration/package$.DurationLong:(J)J
      48: invokespecial #123                // Method scala/concurrent/duration/package$DurationLong."<init>":(J)V
      51: invokevirtual #126                // Method scala/concurrent/duration/package$DurationLong.nanos:()Lscala/concurrent/duration/FiniteDuration;
      54: areturn

  public void callSucceeds();
    Code:
       0: return

  public void callFails();
    Code:
       0: return

  public void _enter();
    Code:
       0: aload_0
       1: invokestatic  #86                 // Method java/lang/System.nanoTime:()J
       4: invokevirtual #135                // Method set:(J)V
       7: aload_0
       8: getfield      #91                 // Field $outer:Lakka/pattern/CircuitBreaker;
      11: getfield      #139                // Field akka/pattern/CircuitBreaker.akka$pattern$CircuitBreaker$$scheduler:Lakka/actor/Scheduler;
      14: aload_0
      15: getfield      #91                 // Field $outer:Lakka/pattern/CircuitBreaker;
      18: invokevirtual #96                 // Method akka/pattern/CircuitBreaker.akka$pattern$CircuitBreaker$$currentResetTimeout:()Lscala/concurrent/duration/FiniteDuration;
      21: new           #141                // class akka/pattern/CircuitBreaker$Open$$anonfun$_enter$1
      24: dup
      25: aload_0
      26: invokespecial #144                // Method akka/pattern/CircuitBreaker$Open$$anonfun$_enter$1."<init>":(Lakka/pattern/CircuitBreaker$Open$;)V
      29: aload_0
      30: getfield      #91                 // Field $outer:Lakka/pattern/CircuitBreaker;
      33: getfield      #148                // Field akka/pattern/CircuitBreaker.akka$pattern$CircuitBreaker$$executor:Lscala/concurrent/ExecutionContext;
      36: invokeinterface #154,  4          // InterfaceMethod akka/actor/Scheduler.scheduleOnce:(Lscala/concurrent/duration/FiniteDuration;Lscala/Function0;Lscala/concurrent/ExecutionContext;)Lakka/actor/Cancellable;
      41: pop
      42: aload_0
      43: getfield      #91                 // Field $outer:Lakka/pattern/CircuitBreaker;
      46: invokevirtual #96                 // Method akka/pattern/CircuitBreaker.akka$pattern$CircuitBreaker$$currentResetTimeout:()Lscala/concurrent/duration/FiniteDuration;
      49: aload_0
      50: getfield      #91                 // Field $outer:Lakka/pattern/CircuitBreaker;
      53: getfield      #158                // Field akka/pattern/CircuitBreaker.akka$pattern$CircuitBreaker$$exponentialBackoffFactor:D
      56: invokevirtual #162                // Method scala/concurrent/duration/FiniteDuration.$times:(D)Lscala/concurrent/duration/Duration;
      59: astore_2
      60: aload_2
      61: instanceof    #98                 // class scala/concurrent/duration/FiniteDuration
      64: ifeq          78
      67: aload_2
      68: checkcast     #98                 // class scala/concurrent/duration/FiniteDuration
      71: astore_3
      72: aload_3
      73: astore        4
      75: goto          87
      78: aload_0
      79: getfield      #91                 // Field $outer:Lakka/pattern/CircuitBreaker;
      82: invokevirtual #96                 // Method akka/pattern/CircuitBreaker.akka$pattern$CircuitBreaker$$currentResetTimeout:()Lscala/concurrent/duration/FiniteDuration;
      85: astore        4
      87: aload         4
      89: astore_1
      90: aload_1
      91: aload_0
      92: getfield      #91                 // Field $outer:Lakka/pattern/CircuitBreaker;
      95: getfield      #166                // Field akka/pattern/CircuitBreaker.akka$pattern$CircuitBreaker$$maxResetTimeout:Lscala/concurrent/duration/FiniteDuration;
      98: invokevirtual #170                // Method scala/concurrent/duration/FiniteDuration.$less:(Ljava/lang/Object;)Z
     101: ifeq          120
     104: aload_0
     105: getfield      #91                 // Field $outer:Lakka/pattern/CircuitBreaker;
     108: aload_0
     109: getfield      #91                 // Field $outer:Lakka/pattern/CircuitBreaker;
     112: invokevirtual #96                 // Method akka/pattern/CircuitBreaker.akka$pattern$CircuitBreaker$$currentResetTimeout:()Lscala/concurrent/duration/FiniteDuration;
     115: aload_1
     116: invokevirtual #174                // Method akka/pattern/CircuitBreaker.akka$pattern$CircuitBreaker$$swapResetTimeout:(Lscala/concurrent/duration/FiniteDuration;Lscala/concurrent/duration/FiniteDuration;)Z
     119: pop
     120: return

  public java.lang.String toString();
    Code:
       0: ldc           #180                // String Open
       2: areturn

  public akka.pattern.CircuitBreaker akka$pattern$CircuitBreaker$Open$$$outer();
    Code:
       0: aload_0
       1: getfield      #91                 // Field $outer:Lakka/pattern/CircuitBreaker;
       4: areturn

  public akka.pattern.CircuitBreaker akka$pattern$CircuitBreaker$State$$$outer();
    Code:
       0: aload_0
       1: getfield      #91                 // Field $outer:Lakka/pattern/CircuitBreaker;
       4: areturn

  public akka.pattern.CircuitBreaker$Open$(akka.pattern.CircuitBreaker);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #91                 // Field $outer:Lakka/pattern/CircuitBreaker;
      11: aload_0
      12: invokespecial #186                // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      15: aload_0
      16: invokestatic  #189                // Method akka/pattern/CircuitBreaker$State$class.$init$:(Lakka/pattern/CircuitBreaker$State;)V
      19: return
}
