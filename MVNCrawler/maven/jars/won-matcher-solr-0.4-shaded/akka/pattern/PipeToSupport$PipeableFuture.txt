Compiled from "PipeToSupport.scala"
public final class akka.pattern.PipeToSupport$PipeableFuture<T> {
  private final scala.concurrent.Future<T> future;

  private final scala.concurrent.ExecutionContext executionContext;

  public scala.concurrent.Future<T> future();
    Code:
       0: aload_0
       1: getfield      #14                 // Field future:Lscala/concurrent/Future;
       4: areturn

  public scala.concurrent.Future<T> pipeTo(akka.actor.ActorRef, akka.actor.ActorRef);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method future:()Lscala/concurrent/Future;
       4: new           #22                 // class akka/pattern/PipeToSupport$PipeableFuture$$anonfun$pipeTo$1
       7: dup
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokespecial #26                 // Method akka/pattern/PipeToSupport$PipeableFuture$$anonfun$pipeTo$1."<init>":(Lakka/pattern/PipeToSupport$PipeableFuture;Lakka/actor/ActorRef;Lakka/actor/ActorRef;)V
      14: aload_0
      15: getfield      #28                 // Field executionContext:Lscala/concurrent/ExecutionContext;
      18: invokeinterface #34,  3           // InterfaceMethod scala/concurrent/Future.andThen:(Lscala/PartialFunction;Lscala/concurrent/ExecutionContext;)Lscala/concurrent/Future;
      23: areturn

  public akka.actor.ActorRef pipeTo$default$2(akka.actor.ActorRef);
    Code:
       0: getstatic     #45                 // Field akka/actor/Actor$.MODULE$:Lakka/actor/Actor$;
       3: invokevirtual #49                 // Method akka/actor/Actor$.noSender:()Lakka/actor/ActorRef;
       6: areturn

  public scala.concurrent.Future<T> pipeToSelection(akka.actor.ActorSelection, akka.actor.ActorRef);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method future:()Lscala/concurrent/Future;
       4: new           #53                 // class akka/pattern/PipeToSupport$PipeableFuture$$anonfun$pipeToSelection$1
       7: dup
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokespecial #56                 // Method akka/pattern/PipeToSupport$PipeableFuture$$anonfun$pipeToSelection$1."<init>":(Lakka/pattern/PipeToSupport$PipeableFuture;Lakka/actor/ActorSelection;Lakka/actor/ActorRef;)V
      14: aload_0
      15: getfield      #28                 // Field executionContext:Lscala/concurrent/ExecutionContext;
      18: invokeinterface #34,  3           // InterfaceMethod scala/concurrent/Future.andThen:(Lscala/PartialFunction;Lscala/concurrent/ExecutionContext;)Lscala/concurrent/Future;
      23: areturn

  public akka.actor.ActorRef pipeToSelection$default$2(akka.actor.ActorSelection);
    Code:
       0: getstatic     #45                 // Field akka/actor/Actor$.MODULE$:Lakka/actor/Actor$;
       3: invokevirtual #49                 // Method akka/actor/Actor$.noSender:()Lakka/actor/ActorRef;
       6: areturn

  public akka.pattern.PipeToSupport$PipeableFuture<T> to(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #45                 // Field akka/actor/Actor$.MODULE$:Lakka/actor/Actor$;
       5: invokevirtual #49                 // Method akka/actor/Actor$.noSender:()Lakka/actor/ActorRef;
       8: invokevirtual #64                 // Method to:(Lakka/actor/ActorRef;Lakka/actor/ActorRef;)Lakka/pattern/PipeToSupport$PipeableFuture;
      11: areturn

  public akka.pattern.PipeToSupport$PipeableFuture<T> to(akka.actor.ActorRef, akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #66                 // Method pipeTo:(Lakka/actor/ActorRef;Lakka/actor/ActorRef;)Lscala/concurrent/Future;
       6: pop
       7: aload_0
       8: areturn

  public akka.pattern.PipeToSupport$PipeableFuture<T> to(akka.actor.ActorSelection);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #45                 // Field akka/actor/Actor$.MODULE$:Lakka/actor/Actor$;
       5: invokevirtual #49                 // Method akka/actor/Actor$.noSender:()Lakka/actor/ActorRef;
       8: invokevirtual #70                 // Method to:(Lakka/actor/ActorSelection;Lakka/actor/ActorRef;)Lakka/pattern/PipeToSupport$PipeableFuture;
      11: areturn

  public akka.pattern.PipeToSupport$PipeableFuture<T> to(akka.actor.ActorSelection, akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #72                 // Method pipeToSelection:(Lakka/actor/ActorSelection;Lakka/actor/ActorRef;)Lscala/concurrent/Future;
       6: pop
       7: aload_0
       8: areturn

  public akka.pattern.PipeToSupport$PipeableFuture(akka.pattern.PipeToSupport, scala.concurrent.Future<T>, scala.concurrent.ExecutionContext);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #14                 // Field future:Lscala/concurrent/Future;
       5: aload_0
       6: aload_3
       7: putfield      #28                 // Field executionContext:Lscala/concurrent/ExecutionContext;
      10: aload_0
      11: invokespecial #76                 // Method java/lang/Object."<init>":()V
      14: return
}
