Compiled from "CircuitBreaker.scala"
public abstract class akka.pattern.CircuitBreaker$State$class {
  public static void addListener(akka.pattern.CircuitBreaker$State, java.lang.Runnable);
    Code:
       0: aload_0
       1: invokeinterface #13,  1           // InterfaceMethod akka/pattern/CircuitBreaker$State.akka$pattern$CircuitBreaker$State$$listeners:()Ljava/util/concurrent/CopyOnWriteArrayList;
       6: aload_1
       7: invokevirtual #19                 // Method java/util/concurrent/CopyOnWriteArrayList.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  private static boolean hasListeners(akka.pattern.CircuitBreaker$State);
    Code:
       0: aload_0
       1: invokeinterface #13,  1           // InterfaceMethod akka/pattern/CircuitBreaker$State.akka$pattern$CircuitBreaker$State$$listeners:()Ljava/util/concurrent/CopyOnWriteArrayList;
       6: invokevirtual #29                 // Method java/util/concurrent/CopyOnWriteArrayList.isEmpty:()Z
       9: ifeq          16
      12: iconst_0
      13: goto          17
      16: iconst_1
      17: ireturn

  public static void notifyTransitionListeners(akka.pattern.CircuitBreaker$State);
    Code:
       0: aload_0
       1: invokestatic  #33                 // Method hasListeners:(Lakka/pattern/CircuitBreaker$State;)Z
       4: ifeq          54
       7: aload_0
       8: invokeinterface #13,  1           // InterfaceMethod akka/pattern/CircuitBreaker$State.akka$pattern$CircuitBreaker$State$$listeners:()Ljava/util/concurrent/CopyOnWriteArrayList;
      13: invokevirtual #37                 // Method java/util/concurrent/CopyOnWriteArrayList.iterator:()Ljava/util/Iterator;
      16: astore_1
      17: aload_1
      18: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          54
      26: aload_1
      27: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #48                 // class java/lang/Runnable
      35: astore_2
      36: aload_0
      37: invokeinterface #52,  1           // InterfaceMethod akka/pattern/CircuitBreaker$State.akka$pattern$CircuitBreaker$State$$$outer:()Lakka/pattern/CircuitBreaker;
      42: getfield      #58                 // Field akka/pattern/CircuitBreaker.akka$pattern$CircuitBreaker$$executor:Lscala/concurrent/ExecutionContext;
      45: aload_2
      46: invokeinterface #64,  2           // InterfaceMethod scala/concurrent/ExecutionContext.execute:(Ljava/lang/Runnable;)V
      51: goto          17
      54: return

  public static scala.concurrent.Future callThrough(akka.pattern.CircuitBreaker$State, scala.Function0);
    Code:
       0: aload_0
       1: invokeinterface #52,  1           // InterfaceMethod akka/pattern/CircuitBreaker$State.akka$pattern$CircuitBreaker$State$$$outer:()Lakka/pattern/CircuitBreaker;
       6: getfield      #71                 // Field akka/pattern/CircuitBreaker.akka$pattern$CircuitBreaker$$callTimeout:Lscala/concurrent/duration/FiniteDuration;
       9: getstatic     #77                 // Field scala/concurrent/duration/Duration$.MODULE$:Lscala/concurrent/duration/Duration$;
      12: invokevirtual #81                 // Method scala/concurrent/duration/Duration$.Zero:()Lscala/concurrent/duration/FiniteDuration;
      15: astore_2
      16: dup
      17: ifnonnull     28
      20: pop
      21: aload_2
      22: ifnull        35
      25: goto          43
      28: aload_2
      29: invokevirtual #84                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      32: ifeq          43
      35: aload_0
      36: aload_1
      37: invokestatic  #87                 // Method materialize$1:(Lakka/pattern/CircuitBreaker$State;Lscala/Function0;)Lscala/concurrent/Future;
      40: goto          141
      43: getstatic     #92                 // Field scala/concurrent/Promise$.MODULE$:Lscala/concurrent/Promise$;
      46: invokevirtual #96                 // Method scala/concurrent/Promise$.apply:()Lscala/concurrent/Promise;
      49: astore_3
      50: getstatic     #101                // Field akka/dispatch/ExecutionContexts$sameThreadExecutionContext$.MODULE$:Lakka/dispatch/ExecutionContexts$sameThreadExecutionContext$;
      53: astore        4
      55: aload_3
      56: invokeinterface #107,  1          // InterfaceMethod scala/concurrent/Promise.future:()Lscala/concurrent/Future;
      61: new           #109                // class akka/pattern/CircuitBreaker$State$$anonfun$callThrough$1
      64: dup
      65: aload_0
      66: invokespecial #112                // Method akka/pattern/CircuitBreaker$State$$anonfun$callThrough$1."<init>":(Lakka/pattern/CircuitBreaker$State;)V
      69: aload         4
      71: invokeinterface #118,  3          // InterfaceMethod scala/concurrent/Future.onComplete:(Lscala/Function1;Lscala/concurrent/ExecutionContext;)V
      76: aload_0
      77: invokeinterface #52,  1           // InterfaceMethod akka/pattern/CircuitBreaker$State.akka$pattern$CircuitBreaker$State$$$outer:()Lakka/pattern/CircuitBreaker;
      82: getfield      #122                // Field akka/pattern/CircuitBreaker.akka$pattern$CircuitBreaker$$scheduler:Lakka/actor/Scheduler;
      85: aload_0
      86: invokeinterface #52,  1           // InterfaceMethod akka/pattern/CircuitBreaker$State.akka$pattern$CircuitBreaker$State$$$outer:()Lakka/pattern/CircuitBreaker;
      91: getfield      #71                 // Field akka/pattern/CircuitBreaker.akka$pattern$CircuitBreaker$$callTimeout:Lscala/concurrent/duration/FiniteDuration;
      94: new           #124                // class akka/pattern/CircuitBreaker$State$$anonfun$1
      97: dup
      98: aload_0
      99: aload_3
     100: invokespecial #127                // Method akka/pattern/CircuitBreaker$State$$anonfun$1."<init>":(Lakka/pattern/CircuitBreaker$State;Lscala/concurrent/Promise;)V
     103: aload         4
     105: invokeinterface #133,  4          // InterfaceMethod akka/actor/Scheduler.scheduleOnce:(Lscala/concurrent/duration/FiniteDuration;Lscala/Function0;Lscala/concurrent/ExecutionContext;)Lakka/actor/Cancellable;
     110: astore        5
     112: aload_0
     113: aload_1
     114: invokestatic  #87                 // Method materialize$1:(Lakka/pattern/CircuitBreaker$State;Lscala/Function0;)Lscala/concurrent/Future;
     117: new           #135                // class akka/pattern/CircuitBreaker$State$$anonfun$callThrough$2
     120: dup
     121: aload_0
     122: aload_3
     123: aload         5
     125: invokespecial #138                // Method akka/pattern/CircuitBreaker$State$$anonfun$callThrough$2."<init>":(Lakka/pattern/CircuitBreaker$State;Lscala/concurrent/Promise;Lakka/actor/Cancellable;)V
     128: aload         4
     130: invokeinterface #118,  3          // InterfaceMethod scala/concurrent/Future.onComplete:(Lscala/Function1;Lscala/concurrent/ExecutionContext;)V
     135: aload_3
     136: invokeinterface #107,  1          // InterfaceMethod scala/concurrent/Promise.future:()Lscala/concurrent/Future;
     141: areturn

  public static final void enter(akka.pattern.CircuitBreaker$State);
    Code:
       0: aload_0
       1: invokeinterface #154,  1          // InterfaceMethod akka/pattern/CircuitBreaker$State._enter:()V
       6: aload_0
       7: invokeinterface #156,  1          // InterfaceMethod akka/pattern/CircuitBreaker$State.notifyTransitionListeners:()V
      12: return

  private static final scala.concurrent.Future materialize$1(akka.pattern.CircuitBreaker$State, scala.Function0);
    Code:
       0: aload_1
       1: invokeinterface #158,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #114                // class scala/concurrent/Future
       9: goto          56
      12: astore_2
      13: aload_2
      14: astore_3
      15: getstatic     #163                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      18: aload_3
      19: invokevirtual #167                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      22: astore        4
      24: aload         4
      26: invokevirtual #170                // Method scala/Option.isEmpty:()Z
      29: ifeq          34
      32: aload_2
      33: athrow
      34: aload         4
      36: invokevirtual #173                // Method scala/Option.get:()Ljava/lang/Object;
      39: checkcast     #175                // class java/lang/Throwable
      42: astore        5
      44: getstatic     #180                // Field scala/concurrent/Future$.MODULE$:Lscala/concurrent/Future$;
      47: aload         5
      49: invokevirtual #184                // Method scala/concurrent/Future$.failed:(Ljava/lang/Throwable;)Lscala/concurrent/Future;
      52: astore        6
      54: aload         6
      56: areturn
    Exception table:
       from    to  target type
           0    12    12   any

  public static void $init$(akka.pattern.CircuitBreaker$State);
    Code:
       0: aload_0
       1: new           #15                 // class java/util/concurrent/CopyOnWriteArrayList
       4: dup
       5: invokespecial #190                // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
       8: invokeinterface #194,  2          // InterfaceMethod akka/pattern/CircuitBreaker$State.akka$pattern$CircuitBreaker$State$_setter_$akka$pattern$CircuitBreaker$State$$listeners_$eq:(Ljava/util/concurrent/CopyOnWriteArrayList;)V
      13: return
}
