Compiled from "BackoffOnRestartSupervisor.scala"
public class akka.pattern.BackoffOnRestartSupervisor implements akka.actor.Actor,akka.pattern.HandleBackoff,akka.actor.ActorLogging {
  private final akka.actor.Props childProps;

  private final java.lang.String childName;

  public final scala.concurrent.duration.FiniteDuration akka$pattern$BackoffOnRestartSupervisor$$minBackoff;

  public final scala.concurrent.duration.FiniteDuration akka$pattern$BackoffOnRestartSupervisor$$maxBackoff;

  private final akka.pattern.BackoffReset reset;

  public final double akka$pattern$BackoffOnRestartSupervisor$$randomFactor;

  public final akka.actor.OneForOneStrategy akka$pattern$BackoffOnRestartSupervisor$$strategy;

  private final akka.actor.OneForOneStrategy supervisorStrategy;

  private akka.event.LoggingAdapter akka$actor$ActorLogging$$_log;

  private scala.Option<akka.actor.ActorRef> child;

  private int restartCount;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public akka.event.LoggingAdapter akka$actor$ActorLogging$$_log();
    Code:
       0: aload_0
       1: getfield      #42                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$actor$ActorLogging$$_log_$eq(akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #42                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       5: return

  public akka.event.LoggingAdapter log();
    Code:
       0: aload_0
       1: invokestatic  #54                 // Method akka/actor/ActorLogging$class.log:(Lakka/actor/ActorLogging;)Lakka/event/LoggingAdapter;
       4: areturn

  public scala.Option<akka.actor.ActorRef> child();
    Code:
       0: aload_0
       1: getfield      #57                 // Field child:Lscala/Option;
       4: areturn

  public void child_$eq(scala.Option<akka.actor.ActorRef>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #57                 // Field child:Lscala/Option;
       5: return

  public int restartCount();
    Code:
       0: aload_0
       1: getfield      #62                 // Field restartCount:I
       4: ireturn

  public void restartCount_$eq(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #62                 // Field restartCount:I
       5: return

  public void preStart();
    Code:
       0: aload_0
       1: invokestatic  #71                 // Method akka/pattern/HandleBackoff$class.preStart:(Lakka/pattern/HandleBackoff;)V
       4: return

  public void startChild();
    Code:
       0: aload_0
       1: invokestatic  #74                 // Method akka/pattern/HandleBackoff$class.startChild:(Lakka/pattern/HandleBackoff;)V
       4: return

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> handleBackoff();
    Code:
       0: aload_0
       1: invokestatic  #79                 // Method akka/pattern/HandleBackoff$class.handleBackoff:(Lakka/pattern/HandleBackoff;)Lscala/PartialFunction;
       4: areturn

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #82                 // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #85                 // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #82                 // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #85                 // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #95                 // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #100                // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #108                // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #111                // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #116                // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #124                // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void postStop() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #129                // Method akka/actor/Actor$class.postStop:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #132                // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void postRestart(java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #135                // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #140                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public akka.actor.SupervisorStrategy akka$pattern$BackoffOnRestartSupervisor$$super$supervisorStrategy();
    Code:
       0: aload_0
       1: invokestatic  #145                // Method akka/actor/Actor$class.supervisorStrategy:(Lakka/actor/Actor;)Lakka/actor/SupervisorStrategy;
       4: areturn

  public akka.actor.Props childProps();
    Code:
       0: aload_0
       1: getfield      #148                // Field childProps:Lakka/actor/Props;
       4: areturn

  public java.lang.String childName();
    Code:
       0: aload_0
       1: getfield      #151                // Field childName:Ljava/lang/String;
       4: areturn

  public akka.pattern.BackoffReset reset();
    Code:
       0: aload_0
       1: getfield      #154                // Field reset:Lakka/pattern/BackoffReset;
       4: areturn

  public akka.actor.OneForOneStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: getfield      #157                // Field supervisorStrategy:Lakka/actor/OneForOneStrategy;
       4: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> waitChildTerminatedBeforeBackoff(akka.actor.ActorRef);
    Code:
       0: new           #161                // class akka/pattern/BackoffOnRestartSupervisor$$anonfun$waitChildTerminatedBeforeBackoff$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #165                // Method akka/pattern/BackoffOnRestartSupervisor$$anonfun$waitChildTerminatedBeforeBackoff$1."<init>":(Lakka/pattern/BackoffOnRestartSupervisor;Lakka/actor/ActorRef;)V
       9: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> onTerminated();
    Code:
       0: new           #169                // class akka/pattern/BackoffOnRestartSupervisor$$anonfun$onTerminated$1
       3: dup
       4: aload_0
       5: invokespecial #172                // Method akka/pattern/BackoffOnRestartSupervisor$$anonfun$onTerminated$1."<init>":(Lakka/pattern/BackoffOnRestartSupervisor;)V
       8: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: aload_0
       1: invokevirtual #174                // Method onTerminated:()Lscala/PartialFunction;
       4: aload_0
       5: invokevirtual #176                // Method handleBackoff:()Lscala/PartialFunction;
       8: invokeinterface #182,  2          // InterfaceMethod scala/PartialFunction.orElse:(Lscala/PartialFunction;)Lscala/PartialFunction;
      13: areturn

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokevirtual #184                // Method supervisorStrategy:()Lakka/actor/OneForOneStrategy;
       4: areturn

  public akka.pattern.BackoffOnRestartSupervisor(akka.actor.Props, java.lang.String, scala.concurrent.duration.FiniteDuration, scala.concurrent.duration.FiniteDuration, akka.pattern.BackoffReset, double, akka.actor.OneForOneStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #148                // Field childProps:Lakka/actor/Props;
       5: aload_0
       6: aload_2
       7: putfield      #151                // Field childName:Ljava/lang/String;
      10: aload_0
      11: aload_3
      12: putfield      #187                // Field akka$pattern$BackoffOnRestartSupervisor$$minBackoff:Lscala/concurrent/duration/FiniteDuration;
      15: aload_0
      16: aload         4
      18: putfield      #189                // Field akka$pattern$BackoffOnRestartSupervisor$$maxBackoff:Lscala/concurrent/duration/FiniteDuration;
      21: aload_0
      22: aload         5
      24: putfield      #154                // Field reset:Lakka/pattern/BackoffReset;
      27: aload_0
      28: dload         6
      30: putfield      #191                // Field akka$pattern$BackoffOnRestartSupervisor$$randomFactor:D
      33: aload_0
      34: aload         8
      36: putfield      #193                // Field akka$pattern$BackoffOnRestartSupervisor$$strategy:Lakka/actor/OneForOneStrategy;
      39: aload_0
      40: invokespecial #195                // Method java/lang/Object."<init>":()V
      43: aload_0
      44: invokestatic  #198                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      47: aload_0
      48: invokestatic  #200                // Method akka/pattern/HandleBackoff$class.$init$:(Lakka/pattern/HandleBackoff;)V
      51: aload_0
      52: invokestatic  #203                // Method akka/actor/ActorLogging$class.$init$:(Lakka/actor/ActorLogging;)V
      55: aload_0
      56: new           #205                // class akka/actor/OneForOneStrategy
      59: dup
      60: aload         8
      62: invokevirtual #208                // Method akka/actor/OneForOneStrategy.maxNrOfRetries:()I
      65: aload         8
      67: invokevirtual #212                // Method akka/actor/OneForOneStrategy.withinTimeRange:()Lscala/concurrent/duration/Duration;
      70: aload         8
      72: invokevirtual #216                // Method akka/actor/OneForOneStrategy.loggingEnabled:()Z
      75: new           #218                // class akka/pattern/BackoffOnRestartSupervisor$$anonfun$1
      78: dup
      79: aload_0
      80: invokespecial #219                // Method akka/pattern/BackoffOnRestartSupervisor$$anonfun$1."<init>":(Lakka/pattern/BackoffOnRestartSupervisor;)V
      83: invokespecial #222                // Method akka/actor/OneForOneStrategy."<init>":(ILscala/concurrent/duration/Duration;ZLscala/PartialFunction;)V
      86: putfield      #157                // Field supervisorStrategy:Lakka/actor/OneForOneStrategy;
      89: return
}
