Compiled from "PipeToSupport.scala"
public final class akka.pattern.PipeToSupport$PipeableCompletionStage<T> {
  private final java.util.concurrent.CompletionStage<T> future;

  public java.util.concurrent.CompletionStage<T> future();
    Code:
       0: aload_0
       1: getfield      #12                 // Field future:Ljava/util/concurrent/CompletionStage;
       4: areturn

  public java.util.concurrent.CompletionStage<T> pipeTo(akka.actor.ActorRef, akka.actor.ActorRef);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method future:()Ljava/util/concurrent/CompletionStage;
       4: new           #20                 // class akka/pattern/PipeToSupport$PipeableCompletionStage$$anon$1
       7: dup
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokespecial #24                 // Method akka/pattern/PipeToSupport$PipeableCompletionStage$$anon$1."<init>":(Lakka/pattern/PipeToSupport$PipeableCompletionStage;Lakka/actor/ActorRef;Lakka/actor/ActorRef;)V
      14: invokeinterface #30,  2           // InterfaceMethod java/util/concurrent/CompletionStage.whenComplete:(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;
      19: areturn

  public akka.actor.ActorRef pipeTo$default$2(akka.actor.ActorRef);
    Code:
       0: getstatic     #41                 // Field akka/actor/Actor$.MODULE$:Lakka/actor/Actor$;
       3: invokevirtual #45                 // Method akka/actor/Actor$.noSender:()Lakka/actor/ActorRef;
       6: areturn

  public java.util.concurrent.CompletionStage<T> pipeToSelection(akka.actor.ActorSelection, akka.actor.ActorRef);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method future:()Ljava/util/concurrent/CompletionStage;
       4: new           #49                 // class akka/pattern/PipeToSupport$PipeableCompletionStage$$anon$2
       7: dup
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokespecial #52                 // Method akka/pattern/PipeToSupport$PipeableCompletionStage$$anon$2."<init>":(Lakka/pattern/PipeToSupport$PipeableCompletionStage;Lakka/actor/ActorSelection;Lakka/actor/ActorRef;)V
      14: invokeinterface #30,  2           // InterfaceMethod java/util/concurrent/CompletionStage.whenComplete:(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletionStage;
      19: areturn

  public akka.actor.ActorRef pipeToSelection$default$2(akka.actor.ActorSelection);
    Code:
       0: getstatic     #41                 // Field akka/actor/Actor$.MODULE$:Lakka/actor/Actor$;
       3: invokevirtual #45                 // Method akka/actor/Actor$.noSender:()Lakka/actor/ActorRef;
       6: areturn

  public akka.pattern.PipeToSupport$PipeableCompletionStage<T> to(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #41                 // Field akka/actor/Actor$.MODULE$:Lakka/actor/Actor$;
       5: invokevirtual #45                 // Method akka/actor/Actor$.noSender:()Lakka/actor/ActorRef;
       8: invokevirtual #60                 // Method to:(Lakka/actor/ActorRef;Lakka/actor/ActorRef;)Lakka/pattern/PipeToSupport$PipeableCompletionStage;
      11: areturn

  public akka.pattern.PipeToSupport$PipeableCompletionStage<T> to(akka.actor.ActorRef, akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #62                 // Method pipeTo:(Lakka/actor/ActorRef;Lakka/actor/ActorRef;)Ljava/util/concurrent/CompletionStage;
       6: pop
       7: aload_0
       8: areturn

  public akka.pattern.PipeToSupport$PipeableCompletionStage<T> to(akka.actor.ActorSelection);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #41                 // Field akka/actor/Actor$.MODULE$:Lakka/actor/Actor$;
       5: invokevirtual #45                 // Method akka/actor/Actor$.noSender:()Lakka/actor/ActorRef;
       8: invokevirtual #66                 // Method to:(Lakka/actor/ActorSelection;Lakka/actor/ActorRef;)Lakka/pattern/PipeToSupport$PipeableCompletionStage;
      11: areturn

  public akka.pattern.PipeToSupport$PipeableCompletionStage<T> to(akka.actor.ActorSelection, akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #68                 // Method pipeToSelection:(Lakka/actor/ActorSelection;Lakka/actor/ActorRef;)Ljava/util/concurrent/CompletionStage;
       6: pop
       7: aload_0
       8: areturn

  public akka.pattern.PipeToSupport$PipeableCompletionStage(akka.pattern.PipeToSupport, java.util.concurrent.CompletionStage<T>, scala.concurrent.ExecutionContext);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #12                 // Field future:Ljava/util/concurrent/CompletionStage;
       5: aload_0
       6: invokespecial #72                 // Method java/lang/Object."<init>":()V
       9: return
}
