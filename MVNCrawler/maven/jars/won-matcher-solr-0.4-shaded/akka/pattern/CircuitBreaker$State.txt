Compiled from "CircuitBreaker.scala"
public interface akka.pattern.CircuitBreaker$State {
  public abstract void akka$pattern$CircuitBreaker$State$_setter_$akka$pattern$CircuitBreaker$State$$listeners_$eq(java.util.concurrent.CopyOnWriteArrayList);

  public abstract java.util.concurrent.CopyOnWriteArrayList<java.lang.Runnable> akka$pattern$CircuitBreaker$State$$listeners();

  public abstract void addListener(java.lang.Runnable);

  public abstract void notifyTransitionListeners();

  public abstract <T> scala.concurrent.Future<T> callThrough(scala.Function0<scala.concurrent.Future<T>>);

  public abstract <T> scala.concurrent.Future<T> invoke(scala.Function0<scala.concurrent.Future<T>>);

  public abstract void callSucceeds();

  public abstract void callFails();

  public abstract void enter();

  public abstract void _enter();

  public abstract akka.pattern.CircuitBreaker akka$pattern$CircuitBreaker$State$$$outer();
}
