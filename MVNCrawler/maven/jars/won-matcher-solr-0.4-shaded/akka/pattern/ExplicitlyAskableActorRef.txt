Compiled from "AskSupport.scala"
public final class akka.pattern.ExplicitlyAskableActorRef {
  private final akka.actor.ActorRef actorRef;

  public static boolean equals$extension(akka.actor.ActorRef, java.lang.Object);
    Code:
       0: getstatic     #16                 // Field akka/pattern/ExplicitlyAskableActorRef$.MODULE$:Lakka/pattern/ExplicitlyAskableActorRef$;
       3: aload_0
       4: aload_1
       5: invokevirtual #18                 // Method akka/pattern/ExplicitlyAskableActorRef$.equals$extension:(Lakka/actor/ActorRef;Ljava/lang/Object;)Z
       8: ireturn

  public static int hashCode$extension(akka.actor.ActorRef);
    Code:
       0: getstatic     #16                 // Field akka/pattern/ExplicitlyAskableActorRef$.MODULE$:Lakka/pattern/ExplicitlyAskableActorRef$;
       3: aload_0
       4: invokevirtual #22                 // Method akka/pattern/ExplicitlyAskableActorRef$.hashCode$extension:(Lakka/actor/ActorRef;)I
       7: ireturn

  public static scala.concurrent.Future<java.lang.Object> internalAsk$extension(akka.actor.ActorRef, scala.Function1<akka.actor.ActorRef, java.lang.Object>, akka.util.Timeout, akka.actor.ActorRef);
    Code:
       0: getstatic     #16                 // Field akka/pattern/ExplicitlyAskableActorRef$.MODULE$:Lakka/pattern/ExplicitlyAskableActorRef$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #26                 // Method akka/pattern/ExplicitlyAskableActorRef$.internalAsk$extension:(Lakka/actor/ActorRef;Lscala/Function1;Lakka/util/Timeout;Lakka/actor/ActorRef;)Lscala/concurrent/Future;
      10: areturn

  public static akka.actor.ActorRef $qmark$default$3$extension(akka.actor.ActorRef, scala.Function1<akka.actor.ActorRef, java.lang.Object>);
    Code:
       0: getstatic     #16                 // Field akka/pattern/ExplicitlyAskableActorRef$.MODULE$:Lakka/pattern/ExplicitlyAskableActorRef$;
       3: aload_0
       4: aload_1
       5: invokevirtual #30                 // Method akka/pattern/ExplicitlyAskableActorRef$.$qmark$default$3$extension:(Lakka/actor/ActorRef;Lscala/Function1;)Lakka/actor/ActorRef;
       8: areturn

  public static scala.concurrent.Future<java.lang.Object> $qmark$extension(akka.actor.ActorRef, scala.Function1<akka.actor.ActorRef, java.lang.Object>, akka.util.Timeout, akka.actor.ActorRef);
    Code:
       0: getstatic     #16                 // Field akka/pattern/ExplicitlyAskableActorRef$.MODULE$:Lakka/pattern/ExplicitlyAskableActorRef$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #33                 // Method akka/pattern/ExplicitlyAskableActorRef$.$qmark$extension:(Lakka/actor/ActorRef;Lscala/Function1;Lakka/util/Timeout;Lakka/actor/ActorRef;)Lscala/concurrent/Future;
      10: areturn

  public static akka.actor.ActorRef ask$default$3$extension(akka.actor.ActorRef, scala.Function1<akka.actor.ActorRef, java.lang.Object>);
    Code:
       0: getstatic     #16                 // Field akka/pattern/ExplicitlyAskableActorRef$.MODULE$:Lakka/pattern/ExplicitlyAskableActorRef$;
       3: aload_0
       4: aload_1
       5: invokevirtual #36                 // Method akka/pattern/ExplicitlyAskableActorRef$.ask$default$3$extension:(Lakka/actor/ActorRef;Lscala/Function1;)Lakka/actor/ActorRef;
       8: areturn

  public static scala.concurrent.Future<java.lang.Object> ask$extension(akka.actor.ActorRef, scala.Function1<akka.actor.ActorRef, java.lang.Object>, akka.util.Timeout, akka.actor.ActorRef);
    Code:
       0: getstatic     #16                 // Field akka/pattern/ExplicitlyAskableActorRef$.MODULE$:Lakka/pattern/ExplicitlyAskableActorRef$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #39                 // Method akka/pattern/ExplicitlyAskableActorRef$.ask$extension:(Lakka/actor/ActorRef;Lscala/Function1;Lakka/util/Timeout;Lakka/actor/ActorRef;)Lscala/concurrent/Future;
      10: areturn

  public akka.actor.ActorRef actorRef();
    Code:
       0: aload_0
       1: getfield      #44                 // Field actorRef:Lakka/actor/ActorRef;
       4: areturn

  public scala.concurrent.Future<java.lang.Object> ask(scala.Function1<akka.actor.ActorRef, java.lang.Object>, akka.util.Timeout, akka.actor.ActorRef);
    Code:
       0: getstatic     #16                 // Field akka/pattern/ExplicitlyAskableActorRef$.MODULE$:Lakka/pattern/ExplicitlyAskableActorRef$;
       3: aload_0
       4: invokevirtual #50                 // Method actorRef:()Lakka/actor/ActorRef;
       7: aload_1
       8: aload_2
       9: aload_3
      10: invokevirtual #39                 // Method akka/pattern/ExplicitlyAskableActorRef$.ask$extension:(Lakka/actor/ActorRef;Lscala/Function1;Lakka/util/Timeout;Lakka/actor/ActorRef;)Lscala/concurrent/Future;
      13: areturn

  public akka.actor.ActorRef ask$default$3(scala.Function1<akka.actor.ActorRef, java.lang.Object>);
    Code:
       0: getstatic     #16                 // Field akka/pattern/ExplicitlyAskableActorRef$.MODULE$:Lakka/pattern/ExplicitlyAskableActorRef$;
       3: aload_0
       4: invokevirtual #50                 // Method actorRef:()Lakka/actor/ActorRef;
       7: aload_1
       8: invokevirtual #36                 // Method akka/pattern/ExplicitlyAskableActorRef$.ask$default$3$extension:(Lakka/actor/ActorRef;Lscala/Function1;)Lakka/actor/ActorRef;
      11: areturn

  public scala.concurrent.Future<java.lang.Object> $qmark(scala.Function1<akka.actor.ActorRef, java.lang.Object>, akka.util.Timeout, akka.actor.ActorRef);
    Code:
       0: getstatic     #16                 // Field akka/pattern/ExplicitlyAskableActorRef$.MODULE$:Lakka/pattern/ExplicitlyAskableActorRef$;
       3: aload_0
       4: invokevirtual #50                 // Method actorRef:()Lakka/actor/ActorRef;
       7: aload_1
       8: aload_2
       9: aload_3
      10: invokevirtual #33                 // Method akka/pattern/ExplicitlyAskableActorRef$.$qmark$extension:(Lakka/actor/ActorRef;Lscala/Function1;Lakka/util/Timeout;Lakka/actor/ActorRef;)Lscala/concurrent/Future;
      13: areturn

  public akka.actor.ActorRef $qmark$default$3(scala.Function1<akka.actor.ActorRef, java.lang.Object>);
    Code:
       0: getstatic     #16                 // Field akka/pattern/ExplicitlyAskableActorRef$.MODULE$:Lakka/pattern/ExplicitlyAskableActorRef$;
       3: aload_0
       4: invokevirtual #50                 // Method actorRef:()Lakka/actor/ActorRef;
       7: aload_1
       8: invokevirtual #30                 // Method akka/pattern/ExplicitlyAskableActorRef$.$qmark$default$3$extension:(Lakka/actor/ActorRef;Lscala/Function1;)Lakka/actor/ActorRef;
      11: areturn

  public scala.concurrent.Future<java.lang.Object> internalAsk(scala.Function1<akka.actor.ActorRef, java.lang.Object>, akka.util.Timeout, akka.actor.ActorRef);
    Code:
       0: getstatic     #16                 // Field akka/pattern/ExplicitlyAskableActorRef$.MODULE$:Lakka/pattern/ExplicitlyAskableActorRef$;
       3: aload_0
       4: invokevirtual #50                 // Method actorRef:()Lakka/actor/ActorRef;
       7: aload_1
       8: aload_2
       9: aload_3
      10: invokevirtual #26                 // Method akka/pattern/ExplicitlyAskableActorRef$.internalAsk$extension:(Lakka/actor/ActorRef;Lscala/Function1;Lakka/util/Timeout;Lakka/actor/ActorRef;)Lscala/concurrent/Future;
      13: areturn

  public int hashCode();
    Code:
       0: getstatic     #16                 // Field akka/pattern/ExplicitlyAskableActorRef$.MODULE$:Lakka/pattern/ExplicitlyAskableActorRef$;
       3: aload_0
       4: invokevirtual #50                 // Method actorRef:()Lakka/actor/ActorRef;
       7: invokevirtual #22                 // Method akka/pattern/ExplicitlyAskableActorRef$.hashCode$extension:(Lakka/actor/ActorRef;)I
      10: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: getstatic     #16                 // Field akka/pattern/ExplicitlyAskableActorRef$.MODULE$:Lakka/pattern/ExplicitlyAskableActorRef$;
       3: aload_0
       4: invokevirtual #50                 // Method actorRef:()Lakka/actor/ActorRef;
       7: aload_1
       8: invokevirtual #18                 // Method akka/pattern/ExplicitlyAskableActorRef$.equals$extension:(Lakka/actor/ActorRef;Ljava/lang/Object;)Z
      11: ireturn

  public akka.pattern.ExplicitlyAskableActorRef(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #44                 // Field actorRef:Lakka/actor/ActorRef;
       5: aload_0
       6: invokespecial #72                 // Method java/lang/Object."<init>":()V
       9: return
}
