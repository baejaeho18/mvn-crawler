Compiled from "ArteryTransport.scala"
public final class akka.remote.artery.ArteryTransport$$anonfun$streamsCompleted$2 extends scala.runtime.AbstractFunction1<scala.collection.immutable.Set<akka.Done>, scala.concurrent.Future<akka.Done$>> implements scala.Serializable {
  public static final long serialVersionUID;

  private final akka.remote.artery.ArteryTransport $outer;

  private final scala.concurrent.ExecutionContextExecutor ec$1;

  public final scala.concurrent.Future<akka.Done$> apply(scala.collection.immutable.Set<akka.Done>);
    Code:
       0: getstatic     #29                 // Field scala/concurrent/Future$.MODULE$:Lscala/concurrent/Future$;
       3: aload_0
       4: getfield      #31                 // Field $outer:Lakka/remote/artery/ArteryTransport;
       7: getfield      #35                 // Field akka/remote/artery/ArteryTransport.akka$remote$artery$ArteryTransport$$streamMatValues:Ljava/util/concurrent/atomic/AtomicReference;
      10: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      13: checkcast     #43                 // class scala/collection/MapLike
      16: invokeinterface #47,  1           // InterfaceMethod scala/collection/MapLike.valuesIterator:()Lscala/collection/Iterator;
      21: new           #49                 // class akka/remote/artery/ArteryTransport$$anonfun$streamsCompleted$2$$anonfun$apply$7
      24: dup
      25: aload_0
      26: invokespecial #53                 // Method akka/remote/artery/ArteryTransport$$anonfun$streamsCompleted$2$$anonfun$apply$7."<init>":(Lakka/remote/artery/ArteryTransport$$anonfun$streamsCompleted$2;)V
      29: invokeinterface #59,  2           // InterfaceMethod scala/collection/Iterator.map:(Lscala/Function1;)Lscala/collection/Iterator;
      34: getstatic     #64                 // Field scala/collection/Iterator$.MODULE$:Lscala/collection/Iterator$;
      37: invokevirtual #68                 // Method scala/collection/Iterator$.IteratorCanBuildFrom:()Lscala/collection/TraversableOnce$BufferedCanBuildFrom;
      40: aload_0
      41: getfield      #70                 // Field ec$1:Lscala/concurrent/ExecutionContextExecutor;
      44: invokevirtual #74                 // Method scala/concurrent/Future$.sequence:(Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;Lscala/concurrent/ExecutionContext;)Lscala/concurrent/Future;
      47: new           #76                 // class akka/remote/artery/ArteryTransport$$anonfun$streamsCompleted$2$$anonfun$apply$8
      50: dup
      51: aload_0
      52: invokespecial #77                 // Method akka/remote/artery/ArteryTransport$$anonfun$streamsCompleted$2$$anonfun$apply$8."<init>":(Lakka/remote/artery/ArteryTransport$$anonfun$streamsCompleted$2;)V
      55: aload_0
      56: getfield      #70                 // Field ec$1:Lscala/concurrent/ExecutionContextExecutor;
      59: invokeinterface #82,  3           // InterfaceMethod scala/concurrent/Future.map:(Lscala/Function1;Lscala/concurrent/ExecutionContext;)Lscala/concurrent/Future;
      64: areturn

  public final java.lang.Object apply(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #89                 // class scala/collection/immutable/Set
       5: invokevirtual #91                 // Method apply:(Lscala/collection/immutable/Set;)Lscala/concurrent/Future;
       8: areturn

  public akka.remote.artery.ArteryTransport$$anonfun$streamsCompleted$2(akka.remote.artery.ArteryTransport, scala.concurrent.ExecutionContextExecutor);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #31                 // Field $outer:Lakka/remote/artery/ArteryTransport;
      11: aload_0
      12: aload_2
      13: putfield      #70                 // Field ec$1:Lscala/concurrent/ExecutionContextExecutor;
      16: aload_0
      17: invokespecial #97                 // Method scala/runtime/AbstractFunction1."<init>":()V
      20: return
}
