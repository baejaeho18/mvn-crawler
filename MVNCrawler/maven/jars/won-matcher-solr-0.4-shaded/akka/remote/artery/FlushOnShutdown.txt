Compiled from "ArteryTransport.scala"
public class akka.remote.artery.FlushOnShutdown implements akka.actor.Actor {
  private final scala.concurrent.Promise<akka.Done> done;

  private final scala.collection.immutable.Set<akka.remote.artery.Association> associations;

  private scala.collection.immutable.Map<akka.remote.UniqueAddress, java.lang.Object> remaining;

  private final akka.actor.Cancellable timeoutTask;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public static akka.actor.Props props(scala.concurrent.Promise<akka.Done>, scala.concurrent.duration.FiniteDuration, akka.remote.artery.InboundContext, scala.collection.immutable.Set<akka.remote.artery.Association>);
    Code:
       0: getstatic     #18                 // Field akka/remote/artery/FlushOnShutdown$.MODULE$:Lakka/remote/artery/FlushOnShutdown$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #20                 // Method akka/remote/artery/FlushOnShutdown$.props:(Lscala/concurrent/Promise;Lscala/concurrent/duration/FiniteDuration;Lakka/remote/artery/InboundContext;Lscala/collection/immutable/Set;)Lakka/actor/Props;
      10: areturn

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #38                 // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #43                 // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #38                 // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #43                 // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #54                 // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #59                 // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #68                 // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #71                 // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #76                 // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #85                 // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokestatic  #90                 // Method akka/actor/Actor$class.supervisorStrategy:(Lakka/actor/Actor;)Lakka/actor/SupervisorStrategy;
       4: areturn

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #95                 // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void postRestart(java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #98                 // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #103                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public scala.collection.immutable.Map<akka.remote.UniqueAddress, java.lang.Object> remaining();
    Code:
       0: aload_0
       1: getfield      #106                // Field remaining:Lscala/collection/immutable/Map;
       4: areturn

  public void remaining_$eq(scala.collection.immutable.Map<akka.remote.UniqueAddress, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #106                // Field remaining:Lscala/collection/immutable/Map;
       5: return

  public akka.actor.Cancellable timeoutTask();
    Code:
       0: aload_0
       1: getfield      #111                // Field timeoutTask:Lakka/actor/Cancellable;
       4: areturn

  public void preStart();
    Code:
       0: aload_0
       1: getfield      #114                // Field associations:Lscala/collection/immutable/Set;
       4: new           #116                // class akka/remote/artery/FlushOnShutdown$$anonfun$preStart$1
       7: dup
       8: aload_0
       9: invokespecial #120                // Method akka/remote/artery/FlushOnShutdown$$anonfun$preStart$1."<init>":(Lakka/remote/artery/FlushOnShutdown;)V
      12: invokeinterface #126,  2          // InterfaceMethod scala/collection/immutable/Set.foreach:(Lscala/Function1;)V
      17: aload_0
      18: invokevirtual #128                // Method remaining:()Lscala/collection/immutable/Map;
      21: invokeinterface #134,  1          // InterfaceMethod scala/collection/immutable/Map.valuesIterator:()Lscala/collection/Iterator;
      26: getstatic     #139                // Field scala/math/Numeric$IntIsIntegral$.MODULE$:Lscala/math/Numeric$IntIsIntegral$;
      29: invokeinterface #145,  2          // InterfaceMethod scala/collection/Iterator.sum:(Lscala/math/Numeric;)Ljava/lang/Object;
      34: invokestatic  #151                // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
      37: iconst_0
      38: if_icmpne     67
      41: aload_0
      42: getfield      #153                // Field done:Lscala/concurrent/Promise;
      45: getstatic     #158                // Field akka/Done$.MODULE$:Lakka/Done$;
      48: invokeinterface #164,  2          // InterfaceMethod scala/concurrent/Promise.trySuccess:(Ljava/lang/Object;)Z
      53: pop
      54: aload_0
      55: invokevirtual #166                // Method context:()Lakka/actor/ActorContext;
      58: aload_0
      59: invokevirtual #168                // Method self:()Lakka/actor/ActorRef;
      62: invokeinterface #173,  2          // InterfaceMethod akka/actor/ActorContext.stop:(Lakka/actor/ActorRef;)V
      67: return
      68: astore_1
      69: aload_1
      70: astore_2
      71: getstatic     #178                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      74: aload_2
      75: invokevirtual #182                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      78: astore_3
      79: aload_3
      80: invokevirtual #188                // Method scala/Option.isEmpty:()Z
      83: ifeq          88
      86: aload_1
      87: athrow
      88: aload_3
      89: invokevirtual #192                // Method scala/Option.get:()Ljava/lang/Object;
      92: checkcast     #194                // class java/lang/Throwable
      95: astore        4
      97: aload_0
      98: getfield      #153                // Field done:Lscala/concurrent/Promise;
     101: aload         4
     103: invokeinterface #198,  2          // InterfaceMethod scala/concurrent/Promise.tryFailure:(Ljava/lang/Throwable;)Z
     108: pop
     109: aload         4
     111: athrow
    Exception table:
       from    to  target type
           0    67    68   any

  public void postStop();
    Code:
       0: aload_0
       1: invokevirtual #202                // Method timeoutTask:()Lakka/actor/Cancellable;
       4: invokeinterface #207,  1          // InterfaceMethod akka/actor/Cancellable.cancel:()Z
       9: pop
      10: aload_0
      11: getfield      #153                // Field done:Lscala/concurrent/Promise;
      14: getstatic     #158                // Field akka/Done$.MODULE$:Lakka/Done$;
      17: invokeinterface #164,  2          // InterfaceMethod scala/concurrent/Promise.trySuccess:(Ljava/lang/Object;)Z
      22: pop
      23: return

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: new           #210                // class akka/remote/artery/FlushOnShutdown$$anonfun$receive$1
       3: dup
       4: aload_0
       5: invokespecial #211                // Method akka/remote/artery/FlushOnShutdown$$anonfun$receive$1."<init>":(Lakka/remote/artery/FlushOnShutdown;)V
       8: areturn

  public akka.remote.artery.FlushOnShutdown(scala.concurrent.Promise<akka.Done>, scala.concurrent.duration.FiniteDuration, akka.remote.artery.InboundContext, scala.collection.immutable.Set<akka.remote.artery.Association>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #153                // Field done:Lscala/concurrent/Promise;
       5: aload_0
       6: aload         4
       8: putfield      #114                // Field associations:Lscala/collection/immutable/Set;
      11: aload_0
      12: invokespecial #214                // Method java/lang/Object."<init>":()V
      15: aload_0
      16: invokestatic  #217                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      19: aload_0
      20: getstatic     #222                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      23: invokevirtual #226                // Method scala/Predef$.Map:()Lscala/collection/immutable/Map$;
      26: invokevirtual #231                // Method scala/collection/immutable/Map$.empty:()Lscala/collection/immutable/Map;
      29: putfield      #106                // Field remaining:Lscala/collection/immutable/Map;
      32: aload_0
      33: aload_0
      34: invokevirtual #166                // Method context:()Lakka/actor/ActorContext;
      37: invokeinterface #235,  1          // InterfaceMethod akka/actor/ActorContext.system:()Lakka/actor/ActorSystem;
      42: invokevirtual #241                // Method akka/actor/ActorSystem.scheduler:()Lakka/actor/Scheduler;
      45: astore        5
      47: aload_2
      48: astore        6
      50: aload_0
      51: invokevirtual #168                // Method self:()Lakka/actor/ActorRef;
      54: astore        7
      56: getstatic     #246                // Field akka/remote/artery/FlushOnShutdown$Timeout$.MODULE$:Lakka/remote/artery/FlushOnShutdown$Timeout$;
      59: astore        8
      61: aload_0
      62: invokevirtual #166                // Method context:()Lakka/actor/ActorContext;
      65: invokeinterface #250,  1          // InterfaceMethod akka/actor/ActorContext.dispatcher:()Lscala/concurrent/ExecutionContextExecutor;
      70: astore        9
      72: aload         5
      74: aload         6
      76: aload         7
      78: aload         8
      80: invokeinterface #256,  4          // InterfaceMethod akka/actor/Scheduler.scheduleOnce$default$5:(Lscala/concurrent/duration/FiniteDuration;Lakka/actor/ActorRef;Ljava/lang/Object;)Lakka/actor/ActorRef;
      85: astore        10
      87: aload         5
      89: aload         6
      91: aload         7
      93: aload         8
      95: aload         9
      97: aload         10
      99: invokeinterface #260,  6          // InterfaceMethod akka/actor/Scheduler.scheduleOnce:(Lscala/concurrent/duration/FiniteDuration;Lakka/actor/ActorRef;Ljava/lang/Object;Lscala/concurrent/ExecutionContext;Lakka/actor/ActorRef;)Lakka/actor/Cancellable;
     104: putfield      #111                // Field timeoutTask:Lakka/actor/Cancellable;
     107: return
}
