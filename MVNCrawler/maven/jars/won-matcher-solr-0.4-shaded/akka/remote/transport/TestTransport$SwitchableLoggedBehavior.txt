Compiled from "TestTransport.scala"
public class akka.remote.transport.TestTransport$SwitchableLoggedBehavior<A, B> implements scala.Function1<A, scala.concurrent.Future<B>> {
  private final scala.Function1<A, scala.runtime.BoxedUnit> logCallback;

  private final java.util.concurrent.CopyOnWriteArrayList<scala.Function1<A, scala.concurrent.Future<B>>> behaviorStack;

  public boolean apply$mcZD$sp(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #21                 // Method scala/Function1$class.apply$mcZD$sp:(Lscala/Function1;D)Z
       5: ireturn

  public double apply$mcDD$sp(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #30                 // Method scala/Function1$class.apply$mcDD$sp:(Lscala/Function1;D)D
       5: dreturn

  public float apply$mcFD$sp(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #35                 // Method scala/Function1$class.apply$mcFD$sp:(Lscala/Function1;D)F
       5: freturn

  public int apply$mcID$sp(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #40                 // Method scala/Function1$class.apply$mcID$sp:(Lscala/Function1;D)I
       5: ireturn

  public long apply$mcJD$sp(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #45                 // Method scala/Function1$class.apply$mcJD$sp:(Lscala/Function1;D)J
       5: lreturn

  public void apply$mcVD$sp(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #50                 // Method scala/Function1$class.apply$mcVD$sp:(Lscala/Function1;D)V
       5: return

  public boolean apply$mcZF$sp(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #55                 // Method scala/Function1$class.apply$mcZF$sp:(Lscala/Function1;F)Z
       5: ireturn

  public double apply$mcDF$sp(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #61                 // Method scala/Function1$class.apply$mcDF$sp:(Lscala/Function1;F)D
       5: dreturn

  public float apply$mcFF$sp(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #66                 // Method scala/Function1$class.apply$mcFF$sp:(Lscala/Function1;F)F
       5: freturn

  public int apply$mcIF$sp(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #71                 // Method scala/Function1$class.apply$mcIF$sp:(Lscala/Function1;F)I
       5: ireturn

  public long apply$mcJF$sp(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #76                 // Method scala/Function1$class.apply$mcJF$sp:(Lscala/Function1;F)J
       5: lreturn

  public void apply$mcVF$sp(float);
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #81                 // Method scala/Function1$class.apply$mcVF$sp:(Lscala/Function1;F)V
       5: return

  public boolean apply$mcZI$sp(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #86                 // Method scala/Function1$class.apply$mcZI$sp:(Lscala/Function1;I)Z
       5: ireturn

  public double apply$mcDI$sp(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #92                 // Method scala/Function1$class.apply$mcDI$sp:(Lscala/Function1;I)D
       5: dreturn

  public float apply$mcFI$sp(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #97                 // Method scala/Function1$class.apply$mcFI$sp:(Lscala/Function1;I)F
       5: freturn

  public int apply$mcII$sp(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #102                // Method scala/Function1$class.apply$mcII$sp:(Lscala/Function1;I)I
       5: ireturn

  public long apply$mcJI$sp(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #107                // Method scala/Function1$class.apply$mcJI$sp:(Lscala/Function1;I)J
       5: lreturn

  public void apply$mcVI$sp(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #112                // Method scala/Function1$class.apply$mcVI$sp:(Lscala/Function1;I)V
       5: return

  public boolean apply$mcZJ$sp(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #117                // Method scala/Function1$class.apply$mcZJ$sp:(Lscala/Function1;J)Z
       5: ireturn

  public double apply$mcDJ$sp(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #123                // Method scala/Function1$class.apply$mcDJ$sp:(Lscala/Function1;J)D
       5: dreturn

  public float apply$mcFJ$sp(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #128                // Method scala/Function1$class.apply$mcFJ$sp:(Lscala/Function1;J)F
       5: freturn

  public int apply$mcIJ$sp(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #133                // Method scala/Function1$class.apply$mcIJ$sp:(Lscala/Function1;J)I
       5: ireturn

  public long apply$mcJJ$sp(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #138                // Method scala/Function1$class.apply$mcJJ$sp:(Lscala/Function1;J)J
       5: lreturn

  public void apply$mcVJ$sp(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #143                // Method scala/Function1$class.apply$mcVJ$sp:(Lscala/Function1;J)V
       5: return

  public <A> scala.Function1<A, scala.concurrent.Future<B>> compose(scala.Function1<A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #148                // Method scala/Function1$class.compose:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
       5: areturn

  public <A> scala.Function1<A, A> andThen(scala.Function1<scala.concurrent.Future<B>, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #152                // Method scala/Function1$class.andThen:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
       5: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #157                // Method scala/Function1$class.toString:(Lscala/Function1;)Ljava/lang/String;
       4: areturn

  private java.util.concurrent.CopyOnWriteArrayList<scala.Function1<A, scala.concurrent.Future<B>>> behaviorStack();
    Code:
       0: aload_0
       1: getfield      #160                // Field behaviorStack:Ljava/util/concurrent/CopyOnWriteArrayList;
       4: areturn

  public void push(scala.Function1<A, scala.concurrent.Future<B>>);
    Code:
       0: aload_0
       1: invokespecial #164                // Method behaviorStack:()Ljava/util/concurrent/CopyOnWriteArrayList;
       4: iconst_0
       5: aload_1
       6: invokevirtual #170                // Method java/util/concurrent/CopyOnWriteArrayList.add:(ILjava/lang/Object;)V
       9: return

  public void pushConstant(B);
    Code:
       0: aload_0
       1: new           #175                // class akka/remote/transport/TestTransport$SwitchableLoggedBehavior$$anonfun$pushConstant$1
       4: dup
       5: aload_0
       6: aload_1
       7: invokespecial #179                // Method akka/remote/transport/TestTransport$SwitchableLoggedBehavior$$anonfun$pushConstant$1."<init>":(Lakka/remote/transport/TestTransport$SwitchableLoggedBehavior;Ljava/lang/Object;)V
      10: invokevirtual #181                // Method push:(Lscala/Function1;)V
      13: return

  public void pushError(java.lang.Throwable);
    Code:
       0: aload_0
       1: new           #187                // class akka/remote/transport/TestTransport$SwitchableLoggedBehavior$$anonfun$pushError$1
       4: dup
       5: aload_0
       6: aload_1
       7: invokespecial #190                // Method akka/remote/transport/TestTransport$SwitchableLoggedBehavior$$anonfun$pushError$1."<init>":(Lakka/remote/transport/TestTransport$SwitchableLoggedBehavior;Ljava/lang/Throwable;)V
      10: invokevirtual #181                // Method push:(Lscala/Function1;)V
      13: return

  public scala.concurrent.Promise<scala.runtime.BoxedUnit> pushDelayed();
    Code:
       0: getstatic     #200                // Field scala/concurrent/Promise$.MODULE$:Lscala/concurrent/Promise$;
       3: invokevirtual #203                // Method scala/concurrent/Promise$.apply:()Lscala/concurrent/Promise;
       6: astore_1
       7: aload_0
       8: invokespecial #207                // Method currentBehavior:()Lscala/Function1;
      11: astore_2
      12: aload_0
      13: new           #209                // class akka/remote/transport/TestTransport$SwitchableLoggedBehavior$$anonfun$pushDelayed$1
      16: dup
      17: aload_0
      18: aload_1
      19: aload_2
      20: invokespecial #212                // Method akka/remote/transport/TestTransport$SwitchableLoggedBehavior$$anonfun$pushDelayed$1."<init>":(Lakka/remote/transport/TestTransport$SwitchableLoggedBehavior;Lscala/concurrent/Promise;Lscala/Function1;)V
      23: invokevirtual #181                // Method push:(Lscala/Function1;)V
      26: aload_1
      27: areturn

  public void pop();
    Code:
       0: aload_0
       1: invokespecial #164                // Method behaviorStack:()Ljava/util/concurrent/CopyOnWriteArrayList;
       4: invokevirtual #221                // Method java/util/concurrent/CopyOnWriteArrayList.size:()I
       7: iconst_1
       8: if_icmple     20
      11: aload_0
      12: invokespecial #164                // Method behaviorStack:()Ljava/util/concurrent/CopyOnWriteArrayList;
      15: iconst_0
      16: invokevirtual #225                // Method java/util/concurrent/CopyOnWriteArrayList.remove:(I)Ljava/lang/Object;
      19: pop
      20: return

  private scala.Function1<A, scala.concurrent.Future<B>> currentBehavior();
    Code:
       0: aload_0
       1: invokespecial #164                // Method behaviorStack:()Ljava/util/concurrent/CopyOnWriteArrayList;
       4: iconst_0
       5: invokevirtual #228                // Method java/util/concurrent/CopyOnWriteArrayList.get:(I)Ljava/lang/Object;
       8: checkcast     #7                  // class scala/Function1
      11: areturn

  public scala.concurrent.Future<B> apply(A);
    Code:
       0: aload_0
       1: getfield      #231                // Field logCallback:Lscala/Function1;
       4: aload_1
       5: invokeinterface #234,  2          // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: aload_0
      12: invokespecial #207                // Method currentBehavior:()Lscala/Function1;
      15: aload_1
      16: invokeinterface #234,  2          // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      21: checkcast     #236                // class scala/concurrent/Future
      24: areturn

  public java.lang.Object apply(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #239                // Method apply:(Ljava/lang/Object;)Lscala/concurrent/Future;
       5: areturn

  public akka.remote.transport.TestTransport$SwitchableLoggedBehavior(scala.Function1<A, scala.concurrent.Future<B>>, scala.Function1<A, scala.runtime.BoxedUnit>);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #231                // Field logCallback:Lscala/Function1;
       5: aload_0
       6: invokespecial #242                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #245                // Method scala/Function1$class.$init$:(Lscala/Function1;)V
      13: aload_0
      14: new           #166                // class java/util/concurrent/CopyOnWriteArrayList
      17: dup
      18: invokespecial #246                // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      21: putfield      #160                // Field behaviorStack:Ljava/util/concurrent/CopyOnWriteArrayList;
      24: aload_0
      25: invokespecial #164                // Method behaviorStack:()Ljava/util/concurrent/CopyOnWriteArrayList;
      28: iconst_0
      29: aload_1
      30: invokevirtual #170                // Method java/util/concurrent/CopyOnWriteArrayList.add:(ILjava/lang/Object;)V
      33: return
}
