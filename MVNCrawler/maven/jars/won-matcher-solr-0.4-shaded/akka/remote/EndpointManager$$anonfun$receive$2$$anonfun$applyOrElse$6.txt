Compiled from "Remoting.scala"
public final class akka.remote.EndpointManager$$anonfun$receive$2$$anonfun$applyOrElse$6 extends scala.runtime.AbstractFunction1<scala.collection.immutable.Seq<scala.Tuple3<akka.remote.transport.AkkaProtocolTransport, akka.actor.Address, scala.concurrent.Promise<akka.remote.transport.Transport$AssociationEventListener>>>, akka.remote.EndpointManager$ListensResult> implements scala.Serializable {
  public static final long serialVersionUID;

  private final scala.concurrent.Promise addressesPromise$1;

  public final akka.remote.EndpointManager$ListensResult apply(scala.collection.immutable.Seq<scala.Tuple3<akka.remote.transport.AkkaProtocolTransport, akka.actor.Address, scala.concurrent.Promise<akka.remote.transport.Transport$AssociationEventListener>>>);
    Code:
       0: new           #23                 // class akka/remote/EndpointManager$ListensResult
       3: dup
       4: aload_0
       5: getfield      #25                 // Field addressesPromise$1:Lscala/concurrent/Promise;
       8: aload_1
       9: invokespecial #29                 // Method akka/remote/EndpointManager$ListensResult."<init>":(Lscala/concurrent/Promise;Lscala/collection/immutable/Seq;)V
      12: areturn

  public final java.lang.Object apply(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #36                 // class scala/collection/immutable/Seq
       5: invokevirtual #38                 // Method apply:(Lscala/collection/immutable/Seq;)Lakka/remote/EndpointManager$ListensResult;
       8: areturn

  public akka.remote.EndpointManager$$anonfun$receive$2$$anonfun$applyOrElse$6(akka.remote.EndpointManager$$anonfun$receive$2, scala.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #25                 // Field addressesPromise$1:Lscala/concurrent/Promise;
       5: aload_0
       6: invokespecial #44                 // Method scala/runtime/AbstractFunction1."<init>":()V
       9: return
}
