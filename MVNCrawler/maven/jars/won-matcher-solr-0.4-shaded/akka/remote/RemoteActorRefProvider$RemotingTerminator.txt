Compiled from "RemoteActorRefProvider.scala"
public class akka.remote.RemoteActorRefProvider$RemotingTerminator implements akka.actor.FSM<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>, akka.dispatch.RequiresMessageQueue<akka.dispatch.UnboundedMessageQueueSemantics> {
  public final akka.actor.ActorRef akka$remote$RemoteActorRefProvider$RemotingTerminator$$systemGuardian;

  private final akka.actor.FSM$Event$ Event;

  private final akka.actor.FSM$StopEvent$ StopEvent;

  private final akka.actor.FSM$$minus$greater$ $minus$greater;

  private final akka.actor.FSM$StateTimeout$ StateTimeout;

  private akka.actor.FSM$State<java.lang.Object, java.lang.Object> akka$actor$FSM$$currentState;

  private scala.Option<akka.actor.Cancellable> akka$actor$FSM$$timeoutFuture;

  private akka.actor.FSM$State<java.lang.Object, java.lang.Object> akka$actor$FSM$$nextState;

  private long akka$actor$FSM$$generation;

  private final scala.collection.mutable.Map<java.lang.String, akka.actor.FSM$Timer> akka$actor$FSM$$timers;

  private final scala.collection.Iterator<java.lang.Object> akka$actor$FSM$$timerGen;

  private final scala.collection.mutable.Map<java.lang.Object, scala.PartialFunction<akka.actor.FSM$Event<java.lang.Object>, akka.actor.FSM$State<java.lang.Object, java.lang.Object>>> akka$actor$FSM$$stateFunctions;

  private final scala.collection.mutable.Map<java.lang.Object, scala.Option<scala.concurrent.duration.FiniteDuration>> akka$actor$FSM$$stateTimeouts;

  private final scala.PartialFunction<akka.actor.FSM$Event<java.lang.Object>, akka.actor.FSM$State<java.lang.Object, java.lang.Object>> akka$actor$FSM$$handleEventDefault;

  private scala.PartialFunction<akka.actor.FSM$Event<java.lang.Object>, akka.actor.FSM$State<java.lang.Object, java.lang.Object>> akka$actor$FSM$$handleEvent;

  private scala.PartialFunction<akka.actor.FSM$StopEvent<java.lang.Object, java.lang.Object>, scala.runtime.BoxedUnit> akka$actor$FSM$$terminateEvent;

  private scala.collection.immutable.List<scala.PartialFunction<scala.Tuple2<java.lang.Object, java.lang.Object>, scala.runtime.BoxedUnit>> akka$actor$FSM$$transitionEvent;

  private akka.event.LoggingAdapter akka$actor$ActorLogging$$_log;

  private final java.util.Set<akka.actor.ActorRef> listeners;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public akka.actor.FSM$Event$ Event();
    Code:
       0: aload_0
       1: getfield      #59                 // Field Event:Lakka/actor/FSM$Event$;
       4: areturn

  public akka.actor.FSM$StopEvent$ StopEvent();
    Code:
       0: aload_0
       1: getfield      #64                 // Field StopEvent:Lakka/actor/FSM$StopEvent$;
       4: areturn

  public akka.actor.FSM$$minus$greater$ $minus$greater();
    Code:
       0: aload_0
       1: getfield      #67                 // Field $minus$greater:Lakka/actor/FSM$$minus$greater$;
       4: areturn

  public akka.actor.FSM$StateTimeout$ StateTimeout();
    Code:
       0: aload_0
       1: getfield      #70                 // Field StateTimeout:Lakka/actor/FSM$StateTimeout$;
       4: areturn

  public akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>> akka$actor$FSM$$currentState();
    Code:
       0: aload_0
       1: getfield      #73                 // Field akka$actor$FSM$$currentState:Lakka/actor/FSM$State;
       4: areturn

  public void akka$actor$FSM$$currentState_$eq(akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #73                 // Field akka$actor$FSM$$currentState:Lakka/actor/FSM$State;
       5: return

  public scala.Option<akka.actor.Cancellable> akka$actor$FSM$$timeoutFuture();
    Code:
       0: aload_0
       1: getfield      #79                 // Field akka$actor$FSM$$timeoutFuture:Lscala/Option;
       4: areturn

  public void akka$actor$FSM$$timeoutFuture_$eq(scala.Option<akka.actor.Cancellable>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #79                 // Field akka$actor$FSM$$timeoutFuture:Lscala/Option;
       5: return

  public akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>> akka$actor$FSM$$nextState();
    Code:
       0: aload_0
       1: getfield      #83                 // Field akka$actor$FSM$$nextState:Lakka/actor/FSM$State;
       4: areturn

  public void akka$actor$FSM$$nextState_$eq(akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #83                 // Field akka$actor$FSM$$nextState:Lakka/actor/FSM$State;
       5: return

  public long akka$actor$FSM$$generation();
    Code:
       0: aload_0
       1: getfield      #87                 // Field akka$actor$FSM$$generation:J
       4: lreturn

  public void akka$actor$FSM$$generation_$eq(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #87                 // Field akka$actor$FSM$$generation:J
       5: return

  public scala.collection.mutable.Map<java.lang.String, akka.actor.FSM$Timer> akka$actor$FSM$$timers();
    Code:
       0: aload_0
       1: getfield      #92                 // Field akka$actor$FSM$$timers:Lscala/collection/mutable/Map;
       4: areturn

  public scala.collection.Iterator<java.lang.Object> akka$actor$FSM$$timerGen();
    Code:
       0: aload_0
       1: getfield      #95                 // Field akka$actor$FSM$$timerGen:Lscala/collection/Iterator;
       4: areturn

  public scala.collection.mutable.Map<akka.remote.RemoteActorRefProvider$TerminatorState, scala.PartialFunction<akka.actor.FSM$Event<scala.Option<akka.remote.RemoteActorRefProvider$Internals>>, akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>>> akka$actor$FSM$$stateFunctions();
    Code:
       0: aload_0
       1: getfield      #97                 // Field akka$actor$FSM$$stateFunctions:Lscala/collection/mutable/Map;
       4: areturn

  public scala.collection.mutable.Map<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<scala.concurrent.duration.FiniteDuration>> akka$actor$FSM$$stateTimeouts();
    Code:
       0: aload_0
       1: getfield      #99                 // Field akka$actor$FSM$$stateTimeouts:Lscala/collection/mutable/Map;
       4: areturn

  public scala.PartialFunction<akka.actor.FSM$Event<scala.Option<akka.remote.RemoteActorRefProvider$Internals>>, akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>> akka$actor$FSM$$handleEventDefault();
    Code:
       0: aload_0
       1: getfield      #102                // Field akka$actor$FSM$$handleEventDefault:Lscala/PartialFunction;
       4: areturn

  public scala.PartialFunction<akka.actor.FSM$Event<scala.Option<akka.remote.RemoteActorRefProvider$Internals>>, akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>> akka$actor$FSM$$handleEvent();
    Code:
       0: aload_0
       1: getfield      #104                // Field akka$actor$FSM$$handleEvent:Lscala/PartialFunction;
       4: areturn

  public void akka$actor$FSM$$handleEvent_$eq(scala.PartialFunction<akka.actor.FSM$Event<scala.Option<akka.remote.RemoteActorRefProvider$Internals>>, akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #104                // Field akka$actor$FSM$$handleEvent:Lscala/PartialFunction;
       5: return

  public scala.PartialFunction<akka.actor.FSM$StopEvent<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>, scala.runtime.BoxedUnit> akka$actor$FSM$$terminateEvent();
    Code:
       0: aload_0
       1: getfield      #108                // Field akka$actor$FSM$$terminateEvent:Lscala/PartialFunction;
       4: areturn

  public void akka$actor$FSM$$terminateEvent_$eq(scala.PartialFunction<akka.actor.FSM$StopEvent<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>, scala.runtime.BoxedUnit>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #108                // Field akka$actor$FSM$$terminateEvent:Lscala/PartialFunction;
       5: return

  public scala.collection.immutable.List<scala.PartialFunction<scala.Tuple2<akka.remote.RemoteActorRefProvider$TerminatorState, akka.remote.RemoteActorRefProvider$TerminatorState>, scala.runtime.BoxedUnit>> akka$actor$FSM$$transitionEvent();
    Code:
       0: aload_0
       1: getfield      #112                // Field akka$actor$FSM$$transitionEvent:Lscala/collection/immutable/List;
       4: areturn

  public void akka$actor$FSM$$transitionEvent_$eq(scala.collection.immutable.List<scala.PartialFunction<scala.Tuple2<akka.remote.RemoteActorRefProvider$TerminatorState, akka.remote.RemoteActorRefProvider$TerminatorState>, scala.runtime.BoxedUnit>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #112                // Field akka$actor$FSM$$transitionEvent:Lscala/collection/immutable/List;
       5: return

  public void akka$actor$FSM$$super$postStop();
    Code:
       0: aload_0
       1: invokestatic  #122                // Method akka/actor/Actor$class.postStop:(Lakka/actor/Actor;)V
       4: return

  public void akka$actor$FSM$_setter_$Event_$eq(akka.actor.FSM$Event$);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #59                 // Field Event:Lakka/actor/FSM$Event$;
       5: return

  public void akka$actor$FSM$_setter_$StopEvent_$eq(akka.actor.FSM$StopEvent$);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #64                 // Field StopEvent:Lakka/actor/FSM$StopEvent$;
       5: return

  public void akka$actor$FSM$_setter_$$minus$greater_$eq(akka.actor.FSM$$minus$greater$);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #67                 // Field $minus$greater:Lakka/actor/FSM$$minus$greater$;
       5: return

  public void akka$actor$FSM$_setter_$StateTimeout_$eq(akka.actor.FSM$StateTimeout$);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #70                 // Field StateTimeout:Lakka/actor/FSM$StateTimeout$;
       5: return

  public void akka$actor$FSM$_setter_$akka$actor$FSM$$timers_$eq(scala.collection.mutable.Map);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #92                 // Field akka$actor$FSM$$timers:Lscala/collection/mutable/Map;
       5: return

  public void akka$actor$FSM$_setter_$akka$actor$FSM$$timerGen_$eq(scala.collection.Iterator);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #95                 // Field akka$actor$FSM$$timerGen:Lscala/collection/Iterator;
       5: return

  public void akka$actor$FSM$_setter_$akka$actor$FSM$$stateFunctions_$eq(scala.collection.mutable.Map);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #97                 // Field akka$actor$FSM$$stateFunctions:Lscala/collection/mutable/Map;
       5: return

  public void akka$actor$FSM$_setter_$akka$actor$FSM$$stateTimeouts_$eq(scala.collection.mutable.Map);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #99                 // Field akka$actor$FSM$$stateTimeouts:Lscala/collection/mutable/Map;
       5: return

  public void akka$actor$FSM$_setter_$akka$actor$FSM$$handleEventDefault_$eq(scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #102                // Field akka$actor$FSM$$handleEventDefault:Lscala/PartialFunction;
       5: return

  public final void when(java.lang.Object, scala.concurrent.duration.FiniteDuration, scala.PartialFunction);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #144                // Method akka/actor/FSM$class.when:(Lakka/actor/FSM;Ljava/lang/Object;Lscala/concurrent/duration/FiniteDuration;Lscala/PartialFunction;)V
       7: return

  public final void startWith(java.lang.Object, java.lang.Object, scala.Option);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #154                // Method akka/actor/FSM$class.startWith:(Lakka/actor/FSM;Ljava/lang/Object;Ljava/lang/Object;Lscala/Option;)V
       7: return

  public final akka.actor.FSM$State goto(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #161                // Method akka/actor/FSM$class.goto:(Lakka/actor/FSM;Ljava/lang/Object;)Lakka/actor/FSM$State;
       5: areturn

  public final akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>> stay();
    Code:
       0: aload_0
       1: invokestatic  #166                // Method akka/actor/FSM$class.stay:(Lakka/actor/FSM;)Lakka/actor/FSM$State;
       4: areturn

  public final akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>> stop();
    Code:
       0: aload_0
       1: invokestatic  #169                // Method akka/actor/FSM$class.stop:(Lakka/actor/FSM;)Lakka/actor/FSM$State;
       4: areturn

  public final akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>> stop(akka.actor.FSM$Reason);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #173                // Method akka/actor/FSM$class.stop:(Lakka/actor/FSM;Lakka/actor/FSM$Reason;)Lakka/actor/FSM$State;
       5: areturn

  public final akka.actor.FSM$State stop(akka.actor.FSM$Reason, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #179                // Method akka/actor/FSM$class.stop:(Lakka/actor/FSM;Lakka/actor/FSM$Reason;Ljava/lang/Object;)Lakka/actor/FSM$State;
       6: areturn

  public final akka.actor.FSM<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>.TransformHelper transform(scala.PartialFunction<akka.actor.FSM$Event<scala.Option<akka.remote.RemoteActorRefProvider$Internals>>, akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #184                // Method akka/actor/FSM$class.transform:(Lakka/actor/FSM;Lscala/PartialFunction;)Lakka/actor/FSM$TransformHelper;
       5: areturn

  public final void setTimer(java.lang.String, java.lang.Object, scala.concurrent.duration.FiniteDuration, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: invokestatic  #190                // Method akka/actor/FSM$class.setTimer:(Lakka/actor/FSM;Ljava/lang/String;Ljava/lang/Object;Lscala/concurrent/duration/FiniteDuration;Z)V
       9: return

  public final void cancelTimer(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #200                // Method akka/actor/FSM$class.cancelTimer:(Lakka/actor/FSM;Ljava/lang/String;)V
       5: return

  public final boolean isTimerActive(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #205                // Method akka/actor/FSM$class.isTimerActive:(Lakka/actor/FSM;Ljava/lang/String;)Z
       5: ireturn

  public final void setStateTimeout(java.lang.Object, scala.Option);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #210                // Method akka/actor/FSM$class.setStateTimeout:(Lakka/actor/FSM;Ljava/lang/Object;Lscala/Option;)V
       6: return

  public final boolean isStateTimerActive();
    Code:
       0: aload_0
       1: invokestatic  #216                // Method akka/actor/FSM$class.isStateTimerActive:(Lakka/actor/FSM;)Z
       4: ireturn

  public final void onTransition(scala.PartialFunction<scala.Tuple2<akka.remote.RemoteActorRefProvider$TerminatorState, akka.remote.RemoteActorRefProvider$TerminatorState>, scala.runtime.BoxedUnit>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #220                // Method akka/actor/FSM$class.onTransition:(Lakka/actor/FSM;Lscala/PartialFunction;)V
       5: return

  public final scala.PartialFunction<scala.Tuple2<akka.remote.RemoteActorRefProvider$TerminatorState, akka.remote.RemoteActorRefProvider$TerminatorState>, scala.runtime.BoxedUnit> total2pf(scala.Function2<akka.remote.RemoteActorRefProvider$TerminatorState, akka.remote.RemoteActorRefProvider$TerminatorState, scala.runtime.BoxedUnit>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #226                // Method akka/actor/FSM$class.total2pf:(Lakka/actor/FSM;Lscala/Function2;)Lscala/PartialFunction;
       5: areturn

  public final void onTermination(scala.PartialFunction<akka.actor.FSM$StopEvent<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>, scala.runtime.BoxedUnit>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #230                // Method akka/actor/FSM$class.onTermination:(Lakka/actor/FSM;Lscala/PartialFunction;)V
       5: return

  public final void whenUnhandled(scala.PartialFunction<akka.actor.FSM$Event<scala.Option<akka.remote.RemoteActorRefProvider$Internals>>, akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #234                // Method akka/actor/FSM$class.whenUnhandled:(Lakka/actor/FSM;Lscala/PartialFunction;)V
       5: return

  public final void initialize();
    Code:
       0: aload_0
       1: invokestatic  #238                // Method akka/actor/FSM$class.initialize:(Lakka/actor/FSM;)V
       4: return

  public final java.lang.Object stateName();
    Code:
       0: aload_0
       1: invokestatic  #242                // Method akka/actor/FSM$class.stateName:(Lakka/actor/FSM;)Ljava/lang/Object;
       4: areturn

  public final java.lang.Object stateData();
    Code:
       0: aload_0
       1: invokestatic  #244                // Method akka/actor/FSM$class.stateData:(Lakka/actor/FSM;)Ljava/lang/Object;
       4: areturn

  public final java.lang.Object nextStateData();
    Code:
       0: aload_0
       1: invokestatic  #247                // Method akka/actor/FSM$class.nextStateData:(Lakka/actor/FSM;)Ljava/lang/Object;
       4: areturn

  public boolean debugEvent();
    Code:
       0: aload_0
       1: invokestatic  #250                // Method akka/actor/FSM$class.debugEvent:(Lakka/actor/FSM;)Z
       4: ireturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: aload_0
       1: invokestatic  #254                // Method akka/actor/FSM$class.receive:(Lakka/actor/FSM;)Lscala/PartialFunction;
       4: areturn

  public void processEvent(akka.actor.FSM$Event<scala.Option<akka.remote.RemoteActorRefProvider$Internals>>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #259                // Method akka/actor/FSM$class.processEvent:(Lakka/actor/FSM;Lakka/actor/FSM$Event;Ljava/lang/Object;)V
       6: return

  public void applyState(akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #266                // Method akka/actor/FSM$class.applyState:(Lakka/actor/FSM;Lakka/actor/FSM$State;)V
       5: return

  public void makeTransition(akka.actor.FSM$State<akka.remote.RemoteActorRefProvider$TerminatorState, scala.Option<akka.remote.RemoteActorRefProvider$Internals>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #270                // Method akka/actor/FSM$class.makeTransition:(Lakka/actor/FSM;Lakka/actor/FSM$State;)V
       5: return

  public void postStop();
    Code:
       0: aload_0
       1: invokestatic  #272                // Method akka/actor/FSM$class.postStop:(Lakka/actor/FSM;)V
       4: return

  public void logTermination(akka.actor.FSM$Reason);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #277                // Method akka/actor/FSM$class.logTermination:(Lakka/actor/FSM;Lakka/actor/FSM$Reason;)V
       5: return

  public final scala.concurrent.duration.FiniteDuration when$default$2();
    Code:
       0: aload_0
       1: invokestatic  #282                // Method akka/actor/FSM$class.when$default$2:(Lakka/actor/FSM;)Lscala/concurrent/duration/FiniteDuration;
       4: areturn

  public final scala.Option<scala.concurrent.duration.FiniteDuration> startWith$default$3();
    Code:
       0: aload_0
       1: invokestatic  #286                // Method akka/actor/FSM$class.startWith$default$3:(Lakka/actor/FSM;)Lscala/Option;
       4: areturn

  public final boolean setTimer$default$4();
    Code:
       0: aload_0
       1: invokestatic  #289                // Method akka/actor/FSM$class.setTimer$default$4:(Lakka/actor/FSM;)Z
       4: ireturn

  public akka.event.LoggingAdapter akka$actor$ActorLogging$$_log();
    Code:
       0: aload_0
       1: getfield      #292                // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$actor$ActorLogging$$_log_$eq(akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #292                // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       5: return

  public akka.event.LoggingAdapter log();
    Code:
       0: aload_0
       1: invokestatic  #300                // Method akka/actor/ActorLogging$class.log:(Lakka/actor/ActorLogging;)Lakka/event/LoggingAdapter;
       4: areturn

  public java.util.Set<akka.actor.ActorRef> listeners();
    Code:
       0: aload_0
       1: getfield      #303                // Field listeners:Ljava/util/Set;
       4: areturn

  public void akka$routing$Listeners$_setter_$listeners_$eq(java.util.Set);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #303                // Field listeners:Ljava/util/Set;
       5: return

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> listenerManagement();
    Code:
       0: aload_0
       1: invokestatic  #311                // Method akka/routing/Listeners$class.listenerManagement:(Lakka/routing/Listeners;)Lscala/PartialFunction;
       4: areturn

  public void gossip(java.lang.Object, akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #316                // Method akka/routing/Listeners$class.gossip:(Lakka/routing/Listeners;Ljava/lang/Object;Lakka/actor/ActorRef;)V
       6: return

  public akka.actor.ActorRef gossip$default$2(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #322                // Method akka/routing/Listeners$class.gossip$default$2:(Lakka/routing/Listeners;Ljava/lang/Object;)Lakka/actor/ActorRef;
       5: areturn

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #325                // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #328                // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #325                // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #328                // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #335                // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #340                // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #343                // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #346                // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #351                // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #358                // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokestatic  #363                // Method akka/actor/Actor$class.supervisorStrategy:(Lakka/actor/Actor;)Lakka/actor/SupervisorStrategy;
       4: areturn

  public void preStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #368                // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #371                // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void postRestart(java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #374                // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #379                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public akka.remote.RemoteActorRefProvider$RemotingTerminator(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #382                // Field akka$remote$RemoteActorRefProvider$RemotingTerminator$$systemGuardian:Lakka/actor/ActorRef;
       5: aload_0
       6: invokespecial #384                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #387                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      13: aload_0
      14: invokestatic  #390                // Method akka/routing/Listeners$class.$init$:(Lakka/routing/Listeners;)V
      17: aload_0
      18: invokestatic  #393                // Method akka/actor/ActorLogging$class.$init$:(Lakka/actor/ActorLogging;)V
      21: aload_0
      22: invokestatic  #395                // Method akka/actor/FSM$class.$init$:(Lakka/actor/FSM;)V
      25: aload_0
      26: getstatic     #401                // Field akka/remote/RemoteActorRefProvider$Uninitialized$.MODULE$:Lakka/remote/RemoteActorRefProvider$Uninitialized$;
      29: getstatic     #406                // Field scala/None$.MODULE$:Lscala/None$;
      32: aload_0
      33: invokevirtual #408                // Method startWith$default$3:()Lscala/Option;
      36: invokevirtual #410                // Method startWith:(Ljava/lang/Object;Ljava/lang/Object;Lscala/Option;)V
      39: aload_0
      40: getstatic     #401                // Field akka/remote/RemoteActorRefProvider$Uninitialized$.MODULE$:Lakka/remote/RemoteActorRefProvider$Uninitialized$;
      43: aload_0
      44: invokevirtual #412                // Method when$default$2:()Lscala/concurrent/duration/FiniteDuration;
      47: new           #414                // class akka/remote/RemoteActorRefProvider$RemotingTerminator$$anonfun$1
      50: dup
      51: aload_0
      52: invokespecial #417                // Method akka/remote/RemoteActorRefProvider$RemotingTerminator$$anonfun$1."<init>":(Lakka/remote/RemoteActorRefProvider$RemotingTerminator;)V
      55: invokevirtual #419                // Method when:(Ljava/lang/Object;Lscala/concurrent/duration/FiniteDuration;Lscala/PartialFunction;)V
      58: aload_0
      59: getstatic     #424                // Field akka/remote/RemoteActorRefProvider$Idle$.MODULE$:Lakka/remote/RemoteActorRefProvider$Idle$;
      62: aload_0
      63: invokevirtual #412                // Method when$default$2:()Lscala/concurrent/duration/FiniteDuration;
      66: new           #426                // class akka/remote/RemoteActorRefProvider$RemotingTerminator$$anonfun$2
      69: dup
      70: aload_0
      71: invokespecial #427                // Method akka/remote/RemoteActorRefProvider$RemotingTerminator$$anonfun$2."<init>":(Lakka/remote/RemoteActorRefProvider$RemotingTerminator;)V
      74: invokevirtual #419                // Method when:(Ljava/lang/Object;Lscala/concurrent/duration/FiniteDuration;Lscala/PartialFunction;)V
      77: aload_0
      78: getstatic     #432                // Field akka/remote/RemoteActorRefProvider$WaitDaemonShutdown$.MODULE$:Lakka/remote/RemoteActorRefProvider$WaitDaemonShutdown$;
      81: aload_0
      82: invokevirtual #412                // Method when$default$2:()Lscala/concurrent/duration/FiniteDuration;
      85: new           #434                // class akka/remote/RemoteActorRefProvider$RemotingTerminator$$anonfun$3
      88: dup
      89: aload_0
      90: invokespecial #435                // Method akka/remote/RemoteActorRefProvider$RemotingTerminator$$anonfun$3."<init>":(Lakka/remote/RemoteActorRefProvider$RemotingTerminator;)V
      93: invokevirtual #419                // Method when:(Ljava/lang/Object;Lscala/concurrent/duration/FiniteDuration;Lscala/PartialFunction;)V
      96: aload_0
      97: getstatic     #440                // Field akka/remote/RemoteActorRefProvider$WaitTransportShutdown$.MODULE$:Lakka/remote/RemoteActorRefProvider$WaitTransportShutdown$;
     100: aload_0
     101: invokevirtual #412                // Method when$default$2:()Lscala/concurrent/duration/FiniteDuration;
     104: new           #442                // class akka/remote/RemoteActorRefProvider$RemotingTerminator$$anonfun$4
     107: dup
     108: aload_0
     109: invokespecial #443                // Method akka/remote/RemoteActorRefProvider$RemotingTerminator$$anonfun$4."<init>":(Lakka/remote/RemoteActorRefProvider$RemotingTerminator;)V
     112: invokevirtual #419                // Method when:(Ljava/lang/Object;Lscala/concurrent/duration/FiniteDuration;Lscala/PartialFunction;)V
     115: return
}
