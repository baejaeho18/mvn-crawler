Compiled from "CodedOutputStream.java"
public final class akka.protobuf.CodedOutputStream {
  private final byte[] buffer;

  private final int limit;

  private int position;

  private final java.io.OutputStream output;

  public static final int DEFAULT_BUFFER_SIZE;

  public static final int LITTLE_ENDIAN_32_SIZE;

  public static final int LITTLE_ENDIAN_64_SIZE;

  static int computePreferredBufferSize(int);
    Code:
       0: iload_0
       1: sipush        4096
       4: if_icmple     11
       7: sipush        4096
      10: ireturn
      11: iload_0
      12: ireturn

  private akka.protobuf.CodedOutputStream(byte[], int, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #3                  // Field output:Ljava/io/OutputStream;
       9: aload_0
      10: aload_1
      11: putfield      #4                  // Field buffer:[B
      14: aload_0
      15: iload_2
      16: putfield      #5                  // Field position:I
      19: aload_0
      20: iload_2
      21: iload_3
      22: iadd
      23: putfield      #6                  // Field limit:I
      26: return

  private akka.protobuf.CodedOutputStream(java.io.OutputStream, byte[]);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field output:Ljava/io/OutputStream;
       9: aload_0
      10: aload_2
      11: putfield      #4                  // Field buffer:[B
      14: aload_0
      15: iconst_0
      16: putfield      #5                  // Field position:I
      19: aload_0
      20: aload_2
      21: arraylength
      22: putfield      #6                  // Field limit:I
      25: return

  public static akka.protobuf.CodedOutputStream newInstance(java.io.OutputStream);
    Code:
       0: aload_0
       1: sipush        4096
       4: invokestatic  #7                  // Method newInstance:(Ljava/io/OutputStream;I)Lakka/protobuf/CodedOutputStream;
       7: areturn

  public static akka.protobuf.CodedOutputStream newInstance(java.io.OutputStream, int);
    Code:
       0: new           #1                  // class akka/protobuf/CodedOutputStream
       3: dup
       4: aload_0
       5: iload_1
       6: newarray       byte
       8: invokespecial #8                  // Method "<init>":(Ljava/io/OutputStream;[B)V
      11: areturn

  public static akka.protobuf.CodedOutputStream newInstance(byte[]);
    Code:
       0: aload_0
       1: iconst_0
       2: aload_0
       3: arraylength
       4: invokestatic  #9                  // Method newInstance:([BII)Lakka/protobuf/CodedOutputStream;
       7: areturn

  public static akka.protobuf.CodedOutputStream newInstance(byte[], int, int);
    Code:
       0: new           #1                  // class akka/protobuf/CodedOutputStream
       3: dup
       4: aload_0
       5: iload_1
       6: iload_2
       7: invokespecial #10                 // Method "<init>":([BII)V
      10: areturn

  public void writeDouble(int, double) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_1
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: dload_2
       8: invokevirtual #13                 // Method writeDoubleNoTag:(D)V
      11: return

  public void writeFloat(int, float) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_5
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: fload_2
       8: invokevirtual #14                 // Method writeFloatNoTag:(F)V
      11: return

  public void writeUInt64(int, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: lload_2
       8: invokevirtual #15                 // Method writeUInt64NoTag:(J)V
      11: return

  public void writeInt64(int, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: lload_2
       8: invokevirtual #16                 // Method writeInt64NoTag:(J)V
      11: return

  public void writeInt32(int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: iload_2
       8: invokevirtual #17                 // Method writeInt32NoTag:(I)V
      11: return

  public void writeFixed64(int, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_1
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: lload_2
       8: invokevirtual #18                 // Method writeFixed64NoTag:(J)V
      11: return

  public void writeFixed32(int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_5
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: iload_2
       8: invokevirtual #19                 // Method writeFixed32NoTag:(I)V
      11: return

  public void writeBool(int, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: iload_2
       8: invokevirtual #20                 // Method writeBoolNoTag:(Z)V
      11: return

  public void writeString(int, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_2
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: aload_2
       8: invokevirtual #21                 // Method writeStringNoTag:(Ljava/lang/String;)V
      11: return

  public void writeGroup(int, akka.protobuf.MessageLite) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_3
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: aload_2
       8: invokevirtual #22                 // Method writeGroupNoTag:(Lakka/protobuf/MessageLite;)V
      11: aload_0
      12: iload_1
      13: iconst_4
      14: invokevirtual #12                 // Method writeTag:(II)V
      17: return

  public void writeUnknownGroup(int, akka.protobuf.MessageLite) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokevirtual #23                 // Method writeGroup:(ILakka/protobuf/MessageLite;)V
       6: return

  public void writeMessage(int, akka.protobuf.MessageLite) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_2
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: aload_2
       8: invokevirtual #24                 // Method writeMessageNoTag:(Lakka/protobuf/MessageLite;)V
      11: return

  public void writeBytes(int, akka.protobuf.ByteString) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_2
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: aload_2
       8: invokevirtual #25                 // Method writeBytesNoTag:(Lakka/protobuf/ByteString;)V
      11: return

  public void writeUInt32(int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: iload_2
       8: invokevirtual #26                 // Method writeUInt32NoTag:(I)V
      11: return

  public void writeEnum(int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: iload_2
       8: invokevirtual #27                 // Method writeEnumNoTag:(I)V
      11: return

  public void writeSFixed32(int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_5
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: iload_2
       8: invokevirtual #28                 // Method writeSFixed32NoTag:(I)V
      11: return

  public void writeSFixed64(int, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_1
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: lload_2
       8: invokevirtual #29                 // Method writeSFixed64NoTag:(J)V
      11: return

  public void writeSInt32(int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: iload_2
       8: invokevirtual #30                 // Method writeSInt32NoTag:(I)V
      11: return

  public void writeSInt64(int, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: lload_2
       8: invokevirtual #31                 // Method writeSInt64NoTag:(J)V
      11: return

  public void writeMessageSetExtension(int, akka.protobuf.MessageLite) throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_1
       2: iconst_3
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: iconst_2
       8: iload_1
       9: invokevirtual #32                 // Method writeUInt32:(II)V
      12: aload_0
      13: iconst_3
      14: aload_2
      15: invokevirtual #33                 // Method writeMessage:(ILakka/protobuf/MessageLite;)V
      18: aload_0
      19: iconst_1
      20: iconst_4
      21: invokevirtual #12                 // Method writeTag:(II)V
      24: return

  public void writeRawMessageSetExtension(int, akka.protobuf.ByteString) throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_1
       2: iconst_3
       3: invokevirtual #12                 // Method writeTag:(II)V
       6: aload_0
       7: iconst_2
       8: iload_1
       9: invokevirtual #32                 // Method writeUInt32:(II)V
      12: aload_0
      13: iconst_3
      14: aload_2
      15: invokevirtual #34                 // Method writeBytes:(ILakka/protobuf/ByteString;)V
      18: aload_0
      19: iconst_1
      20: iconst_4
      21: invokevirtual #12                 // Method writeTag:(II)V
      24: return

  public void writeDoubleNoTag(double) throws java.io.IOException;
    Code:
       0: aload_0
       1: dload_1
       2: invokestatic  #35                 // Method java/lang/Double.doubleToRawLongBits:(D)J
       5: invokevirtual #36                 // Method writeRawLittleEndian64:(J)V
       8: return

  public void writeFloatNoTag(float) throws java.io.IOException;
    Code:
       0: aload_0
       1: fload_1
       2: invokestatic  #37                 // Method java/lang/Float.floatToRawIntBits:(F)I
       5: invokevirtual #38                 // Method writeRawLittleEndian32:(I)V
       8: return

  public void writeUInt64NoTag(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #39                 // Method writeRawVarint64:(J)V
       5: return

  public void writeInt64NoTag(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #39                 // Method writeRawVarint64:(J)V
       5: return

  public void writeInt32NoTag(int) throws java.io.IOException;
    Code:
       0: iload_1
       1: iflt          12
       4: aload_0
       5: iload_1
       6: invokevirtual #40                 // Method writeRawVarint32:(I)V
       9: goto          18
      12: aload_0
      13: iload_1
      14: i2l
      15: invokevirtual #39                 // Method writeRawVarint64:(J)V
      18: return

  public void writeFixed64NoTag(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #36                 // Method writeRawLittleEndian64:(J)V
       5: return

  public void writeFixed32NoTag(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #38                 // Method writeRawLittleEndian32:(I)V
       5: return

  public void writeBoolNoTag(boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: ifeq          9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: invokevirtual #41                 // Method writeRawByte:(I)V
      13: return

  public void writeStringNoTag(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_1
       1: ldc           #42                 // String UTF-8
       3: invokevirtual #43                 // Method java/lang/String.getBytes:(Ljava/lang/String;)[B
       6: astore_2
       7: aload_0
       8: aload_2
       9: arraylength
      10: invokevirtual #40                 // Method writeRawVarint32:(I)V
      13: aload_0
      14: aload_2
      15: invokevirtual #44                 // Method writeRawBytes:([B)V
      18: return

  public void writeGroupNoTag(akka.protobuf.MessageLite) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #45,  2           // InterfaceMethod akka/protobuf/MessageLite.writeTo:(Lakka/protobuf/CodedOutputStream;)V
       7: return

  public void writeUnknownGroupNoTag(akka.protobuf.MessageLite) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #22                 // Method writeGroupNoTag:(Lakka/protobuf/MessageLite;)V
       5: return

  public void writeMessageNoTag(akka.protobuf.MessageLite) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #46,  1           // InterfaceMethod akka/protobuf/MessageLite.getSerializedSize:()I
       7: invokevirtual #40                 // Method writeRawVarint32:(I)V
      10: aload_1
      11: aload_0
      12: invokeinterface #45,  2           // InterfaceMethod akka/protobuf/MessageLite.writeTo:(Lakka/protobuf/CodedOutputStream;)V
      17: return

  public void writeBytesNoTag(akka.protobuf.ByteString) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #47                 // Method akka/protobuf/ByteString.size:()I
       5: invokevirtual #40                 // Method writeRawVarint32:(I)V
       8: aload_0
       9: aload_1
      10: invokevirtual #48                 // Method writeRawBytes:(Lakka/protobuf/ByteString;)V
      13: return

  public void writeUInt32NoTag(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #40                 // Method writeRawVarint32:(I)V
       5: return

  public void writeEnumNoTag(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #17                 // Method writeInt32NoTag:(I)V
       5: return

  public void writeSFixed32NoTag(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #38                 // Method writeRawLittleEndian32:(I)V
       5: return

  public void writeSFixed64NoTag(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #36                 // Method writeRawLittleEndian64:(J)V
       5: return

  public void writeSInt32NoTag(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #49                 // Method encodeZigZag32:(I)I
       5: invokevirtual #40                 // Method writeRawVarint32:(I)V
       8: return

  public void writeSInt64NoTag(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #50                 // Method encodeZigZag64:(J)J
       5: invokevirtual #39                 // Method writeRawVarint64:(J)V
       8: return

  public static int computeDoubleSize(int, double);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: dload_1
       5: invokestatic  #52                 // Method computeDoubleSizeNoTag:(D)I
       8: iadd
       9: ireturn

  public static int computeFloatSize(int, float);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: fload_1
       5: invokestatic  #53                 // Method computeFloatSizeNoTag:(F)I
       8: iadd
       9: ireturn

  public static int computeUInt64Size(int, long);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: lload_1
       5: invokestatic  #54                 // Method computeUInt64SizeNoTag:(J)I
       8: iadd
       9: ireturn

  public static int computeInt64Size(int, long);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: lload_1
       5: invokestatic  #55                 // Method computeInt64SizeNoTag:(J)I
       8: iadd
       9: ireturn

  public static int computeInt32Size(int, int);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: iload_1
       5: invokestatic  #56                 // Method computeInt32SizeNoTag:(I)I
       8: iadd
       9: ireturn

  public static int computeFixed64Size(int, long);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: lload_1
       5: invokestatic  #57                 // Method computeFixed64SizeNoTag:(J)I
       8: iadd
       9: ireturn

  public static int computeFixed32Size(int, int);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: iload_1
       5: invokestatic  #58                 // Method computeFixed32SizeNoTag:(I)I
       8: iadd
       9: ireturn

  public static int computeBoolSize(int, boolean);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: iload_1
       5: invokestatic  #59                 // Method computeBoolSizeNoTag:(Z)I
       8: iadd
       9: ireturn

  public static int computeStringSize(int, java.lang.String);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: aload_1
       5: invokestatic  #60                 // Method computeStringSizeNoTag:(Ljava/lang/String;)I
       8: iadd
       9: ireturn

  public static int computeGroupSize(int, akka.protobuf.MessageLite);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: iconst_2
       5: imul
       6: aload_1
       7: invokestatic  #61                 // Method computeGroupSizeNoTag:(Lakka/protobuf/MessageLite;)I
      10: iadd
      11: ireturn

  public static int computeUnknownGroupSize(int, akka.protobuf.MessageLite);
    Code:
       0: iload_0
       1: aload_1
       2: invokestatic  #62                 // Method computeGroupSize:(ILakka/protobuf/MessageLite;)I
       5: ireturn

  public static int computeMessageSize(int, akka.protobuf.MessageLite);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: aload_1
       5: invokestatic  #63                 // Method computeMessageSizeNoTag:(Lakka/protobuf/MessageLite;)I
       8: iadd
       9: ireturn

  public static int computeBytesSize(int, akka.protobuf.ByteString);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: aload_1
       5: invokestatic  #64                 // Method computeBytesSizeNoTag:(Lakka/protobuf/ByteString;)I
       8: iadd
       9: ireturn

  public static int computeLazyFieldSize(int, akka.protobuf.LazyField);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: aload_1
       5: invokestatic  #65                 // Method computeLazyFieldSizeNoTag:(Lakka/protobuf/LazyField;)I
       8: iadd
       9: ireturn

  public static int computeUInt32Size(int, int);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: iload_1
       5: invokestatic  #66                 // Method computeUInt32SizeNoTag:(I)I
       8: iadd
       9: ireturn

  public static int computeEnumSize(int, int);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: iload_1
       5: invokestatic  #67                 // Method computeEnumSizeNoTag:(I)I
       8: iadd
       9: ireturn

  public static int computeSFixed32Size(int, int);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: iload_1
       5: invokestatic  #68                 // Method computeSFixed32SizeNoTag:(I)I
       8: iadd
       9: ireturn

  public static int computeSFixed64Size(int, long);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: lload_1
       5: invokestatic  #69                 // Method computeSFixed64SizeNoTag:(J)I
       8: iadd
       9: ireturn

  public static int computeSInt32Size(int, int);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: iload_1
       5: invokestatic  #70                 // Method computeSInt32SizeNoTag:(I)I
       8: iadd
       9: ireturn

  public static int computeSInt64Size(int, long);
    Code:
       0: iload_0
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: lload_1
       5: invokestatic  #71                 // Method computeSInt64SizeNoTag:(J)I
       8: iadd
       9: ireturn

  public static int computeMessageSetExtensionSize(int, akka.protobuf.MessageLite);
    Code:
       0: iconst_1
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: iconst_2
       5: imul
       6: iconst_2
       7: iload_0
       8: invokestatic  #72                 // Method computeUInt32Size:(II)I
      11: iadd
      12: iconst_3
      13: aload_1
      14: invokestatic  #73                 // Method computeMessageSize:(ILakka/protobuf/MessageLite;)I
      17: iadd
      18: ireturn

  public static int computeRawMessageSetExtensionSize(int, akka.protobuf.ByteString);
    Code:
       0: iconst_1
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: iconst_2
       5: imul
       6: iconst_2
       7: iload_0
       8: invokestatic  #72                 // Method computeUInt32Size:(II)I
      11: iadd
      12: iconst_3
      13: aload_1
      14: invokestatic  #74                 // Method computeBytesSize:(ILakka/protobuf/ByteString;)I
      17: iadd
      18: ireturn

  public static int computeLazyFieldMessageSetExtensionSize(int, akka.protobuf.LazyField);
    Code:
       0: iconst_1
       1: invokestatic  #51                 // Method computeTagSize:(I)I
       4: iconst_2
       5: imul
       6: iconst_2
       7: iload_0
       8: invokestatic  #72                 // Method computeUInt32Size:(II)I
      11: iadd
      12: iconst_3
      13: aload_1
      14: invokestatic  #75                 // Method computeLazyFieldSize:(ILakka/protobuf/LazyField;)I
      17: iadd
      18: ireturn

  public static int computeDoubleSizeNoTag(double);
    Code:
       0: bipush        8
       2: ireturn

  public static int computeFloatSizeNoTag(float);
    Code:
       0: iconst_4
       1: ireturn

  public static int computeUInt64SizeNoTag(long);
    Code:
       0: lload_0
       1: invokestatic  #76                 // Method computeRawVarint64Size:(J)I
       4: ireturn

  public static int computeInt64SizeNoTag(long);
    Code:
       0: lload_0
       1: invokestatic  #76                 // Method computeRawVarint64Size:(J)I
       4: ireturn

  public static int computeInt32SizeNoTag(int);
    Code:
       0: iload_0
       1: iflt          9
       4: iload_0
       5: invokestatic  #77                 // Method computeRawVarint32Size:(I)I
       8: ireturn
       9: bipush        10
      11: ireturn

  public static int computeFixed64SizeNoTag(long);
    Code:
       0: bipush        8
       2: ireturn

  public static int computeFixed32SizeNoTag(int);
    Code:
       0: iconst_4
       1: ireturn

  public static int computeBoolSizeNoTag(boolean);
    Code:
       0: iconst_1
       1: ireturn

  public static int computeStringSizeNoTag(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #42                 // String UTF-8
       3: invokevirtual #43                 // Method java/lang/String.getBytes:(Ljava/lang/String;)[B
       6: astore_1
       7: aload_1
       8: arraylength
       9: invokestatic  #77                 // Method computeRawVarint32Size:(I)I
      12: aload_1
      13: arraylength
      14: iadd
      15: ireturn
      16: astore_1
      17: new           #79                 // class java/lang/RuntimeException
      20: dup
      21: ldc           #80                 // String UTF-8 not supported.
      23: aload_1
      24: invokespecial #81                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      27: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/UnsupportedEncodingException

  public static int computeGroupSizeNoTag(akka.protobuf.MessageLite);
    Code:
       0: aload_0
       1: invokeinterface #46,  1           // InterfaceMethod akka/protobuf/MessageLite.getSerializedSize:()I
       6: ireturn

  public static int computeUnknownGroupSizeNoTag(akka.protobuf.MessageLite);
    Code:
       0: aload_0
       1: invokestatic  #61                 // Method computeGroupSizeNoTag:(Lakka/protobuf/MessageLite;)I
       4: ireturn

  public static int computeMessageSizeNoTag(akka.protobuf.MessageLite);
    Code:
       0: aload_0
       1: invokeinterface #46,  1           // InterfaceMethod akka/protobuf/MessageLite.getSerializedSize:()I
       6: istore_1
       7: iload_1
       8: invokestatic  #77                 // Method computeRawVarint32Size:(I)I
      11: iload_1
      12: iadd
      13: ireturn

  public static int computeLazyFieldSizeNoTag(akka.protobuf.LazyField);
    Code:
       0: aload_0
       1: invokevirtual #82                 // Method akka/protobuf/LazyField.getSerializedSize:()I
       4: istore_1
       5: iload_1
       6: invokestatic  #77                 // Method computeRawVarint32Size:(I)I
       9: iload_1
      10: iadd
      11: ireturn

  public static int computeBytesSizeNoTag(akka.protobuf.ByteString);
    Code:
       0: aload_0
       1: invokevirtual #47                 // Method akka/protobuf/ByteString.size:()I
       4: invokestatic  #77                 // Method computeRawVarint32Size:(I)I
       7: aload_0
       8: invokevirtual #47                 // Method akka/protobuf/ByteString.size:()I
      11: iadd
      12: ireturn

  public static int computeUInt32SizeNoTag(int);
    Code:
       0: iload_0
       1: invokestatic  #77                 // Method computeRawVarint32Size:(I)I
       4: ireturn

  public static int computeEnumSizeNoTag(int);
    Code:
       0: iload_0
       1: invokestatic  #56                 // Method computeInt32SizeNoTag:(I)I
       4: ireturn

  public static int computeSFixed32SizeNoTag(int);
    Code:
       0: iconst_4
       1: ireturn

  public static int computeSFixed64SizeNoTag(long);
    Code:
       0: bipush        8
       2: ireturn

  public static int computeSInt32SizeNoTag(int);
    Code:
       0: iload_0
       1: invokestatic  #49                 // Method encodeZigZag32:(I)I
       4: invokestatic  #77                 // Method computeRawVarint32Size:(I)I
       7: ireturn

  public static int computeSInt64SizeNoTag(long);
    Code:
       0: lload_0
       1: invokestatic  #50                 // Method encodeZigZag64:(J)J
       4: invokestatic  #76                 // Method computeRawVarint64Size:(J)I
       7: ireturn

  private void refreshBuffer() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field output:Ljava/io/OutputStream;
       4: ifnonnull     15
       7: new           #83                 // class akka/protobuf/CodedOutputStream$OutOfSpaceException
      10: dup
      11: invokespecial #84                 // Method akka/protobuf/CodedOutputStream$OutOfSpaceException."<init>":()V
      14: athrow
      15: aload_0
      16: getfield      #3                  // Field output:Ljava/io/OutputStream;
      19: aload_0
      20: getfield      #4                  // Field buffer:[B
      23: iconst_0
      24: aload_0
      25: getfield      #5                  // Field position:I
      28: invokevirtual #85                 // Method java/io/OutputStream.write:([BII)V
      31: aload_0
      32: iconst_0
      33: putfield      #5                  // Field position:I
      36: return

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field output:Ljava/io/OutputStream;
       4: ifnull        11
       7: aload_0
       8: invokespecial #86                 // Method refreshBuffer:()V
      11: return

  public int spaceLeft();
    Code:
       0: aload_0
       1: getfield      #3                  // Field output:Ljava/io/OutputStream;
       4: ifnonnull     17
       7: aload_0
       8: getfield      #6                  // Field limit:I
      11: aload_0
      12: getfield      #5                  // Field position:I
      15: isub
      16: ireturn
      17: new           #87                 // class java/lang/UnsupportedOperationException
      20: dup
      21: ldc           #88                 // String spaceLeft() can only be called on CodedOutputStreams that are writing to a flat array.
      23: invokespecial #89                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      26: athrow

  public void checkNoSpaceLeft();
    Code:
       0: aload_0
       1: invokevirtual #90                 // Method spaceLeft:()I
       4: ifeq          17
       7: new           #91                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #92                 // String Did not write as much data as expected.
      13: invokespecial #93                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return

  public void writeRawByte(byte) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field position:I
       4: aload_0
       5: getfield      #6                  // Field limit:I
       8: if_icmpne     15
      11: aload_0
      12: invokespecial #86                 // Method refreshBuffer:()V
      15: aload_0
      16: getfield      #4                  // Field buffer:[B
      19: aload_0
      20: dup
      21: getfield      #5                  // Field position:I
      24: dup_x1
      25: iconst_1
      26: iadd
      27: putfield      #5                  // Field position:I
      30: iload_1
      31: bastore
      32: return

  public void writeRawByte(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: i2b
       3: invokevirtual #94                 // Method writeRawByte:(B)V
       6: return

  public void writeRawBytes(akka.protobuf.ByteString) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: invokevirtual #47                 // Method akka/protobuf/ByteString.size:()I
       7: invokevirtual #95                 // Method writeRawBytes:(Lakka/protobuf/ByteString;II)V
      10: return

  public void writeRawBytes(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #96                 // Method writeRawBytes:([BII)V
       8: return

  public void writeRawBytes(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field limit:I
       4: aload_0
       5: getfield      #5                  // Field position:I
       8: isub
       9: iload_3
      10: if_icmplt     40
      13: aload_1
      14: iload_2
      15: aload_0
      16: getfield      #4                  // Field buffer:[B
      19: aload_0
      20: getfield      #5                  // Field position:I
      23: iload_3
      24: invokestatic  #97                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      27: aload_0
      28: dup
      29: getfield      #5                  // Field position:I
      32: iload_3
      33: iadd
      34: putfield      #5                  // Field position:I
      37: goto          125
      40: aload_0
      41: getfield      #6                  // Field limit:I
      44: aload_0
      45: getfield      #5                  // Field position:I
      48: isub
      49: istore        4
      51: aload_1
      52: iload_2
      53: aload_0
      54: getfield      #4                  // Field buffer:[B
      57: aload_0
      58: getfield      #5                  // Field position:I
      61: iload         4
      63: invokestatic  #97                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      66: iload_2
      67: iload         4
      69: iadd
      70: istore_2
      71: iload_3
      72: iload         4
      74: isub
      75: istore_3
      76: aload_0
      77: aload_0
      78: getfield      #6                  // Field limit:I
      81: putfield      #5                  // Field position:I
      84: aload_0
      85: invokespecial #86                 // Method refreshBuffer:()V
      88: iload_3
      89: aload_0
      90: getfield      #6                  // Field limit:I
      93: if_icmpgt     115
      96: aload_1
      97: iload_2
      98: aload_0
      99: getfield      #4                  // Field buffer:[B
     102: iconst_0
     103: iload_3
     104: invokestatic  #97                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     107: aload_0
     108: iload_3
     109: putfield      #5                  // Field position:I
     112: goto          125
     115: aload_0
     116: getfield      #3                  // Field output:Ljava/io/OutputStream;
     119: aload_1
     120: iload_2
     121: iload_3
     122: invokevirtual #85                 // Method java/io/OutputStream.write:([BII)V
     125: return

  public void writeRawBytes(akka.protobuf.ByteString, int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field limit:I
       4: aload_0
       5: getfield      #5                  // Field position:I
       8: isub
       9: iload_3
      10: if_icmplt     40
      13: aload_1
      14: aload_0
      15: getfield      #4                  // Field buffer:[B
      18: iload_2
      19: aload_0
      20: getfield      #5                  // Field position:I
      23: iload_3
      24: invokevirtual #98                 // Method akka/protobuf/ByteString.copyTo:([BIII)V
      27: aload_0
      28: dup
      29: getfield      #5                  // Field position:I
      32: iload_3
      33: iadd
      34: putfield      #5                  // Field position:I
      37: goto          211
      40: aload_0
      41: getfield      #6                  // Field limit:I
      44: aload_0
      45: getfield      #5                  // Field position:I
      48: isub
      49: istore        4
      51: aload_1
      52: aload_0
      53: getfield      #4                  // Field buffer:[B
      56: iload_2
      57: aload_0
      58: getfield      #5                  // Field position:I
      61: iload         4
      63: invokevirtual #98                 // Method akka/protobuf/ByteString.copyTo:([BIII)V
      66: iload_2
      67: iload         4
      69: iadd
      70: istore_2
      71: iload_3
      72: iload         4
      74: isub
      75: istore_3
      76: aload_0
      77: aload_0
      78: getfield      #6                  // Field limit:I
      81: putfield      #5                  // Field position:I
      84: aload_0
      85: invokespecial #86                 // Method refreshBuffer:()V
      88: iload_3
      89: aload_0
      90: getfield      #6                  // Field limit:I
      93: if_icmpgt     115
      96: aload_1
      97: aload_0
      98: getfield      #4                  // Field buffer:[B
     101: iload_2
     102: iconst_0
     103: iload_3
     104: invokevirtual #98                 // Method akka/protobuf/ByteString.copyTo:([BIII)V
     107: aload_0
     108: iload_3
     109: putfield      #5                  // Field position:I
     112: goto          211
     115: aload_1
     116: invokevirtual #99                 // Method akka/protobuf/ByteString.newInput:()Ljava/io/InputStream;
     119: astore        5
     121: iload_2
     122: i2l
     123: aload         5
     125: iload_2
     126: i2l
     127: invokevirtual #100                // Method java/io/InputStream.skip:(J)J
     130: lcmp
     131: ifeq          144
     134: new           #91                 // class java/lang/IllegalStateException
     137: dup
     138: ldc           #101                // String Skip failed? Should never happen.
     140: invokespecial #93                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     143: athrow
     144: iload_3
     145: ifle          211
     148: iload_3
     149: aload_0
     150: getfield      #6                  // Field limit:I
     153: invokestatic  #102                // Method java/lang/Math.min:(II)I
     156: istore        6
     158: aload         5
     160: aload_0
     161: getfield      #4                  // Field buffer:[B
     164: iconst_0
     165: iload         6
     167: invokevirtual #103                // Method java/io/InputStream.read:([BII)I
     170: istore        7
     172: iload         7
     174: iload         6
     176: if_icmpeq     189
     179: new           #91                 // class java/lang/IllegalStateException
     182: dup
     183: ldc           #104                // String Read failed? Should never happen
     185: invokespecial #93                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     188: athrow
     189: aload_0
     190: getfield      #3                  // Field output:Ljava/io/OutputStream;
     193: aload_0
     194: getfield      #4                  // Field buffer:[B
     197: iconst_0
     198: iload         7
     200: invokevirtual #85                 // Method java/io/OutputStream.write:([BII)V
     203: iload_3
     204: iload         7
     206: isub
     207: istore_3
     208: goto          144
     211: return

  public void writeTag(int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #105                // Method akka/protobuf/WireFormat.makeTag:(II)I
       6: invokevirtual #40                 // Method writeRawVarint32:(I)V
       9: return

  public static int computeTagSize(int);
    Code:
       0: iload_0
       1: iconst_0
       2: invokestatic  #105                // Method akka/protobuf/WireFormat.makeTag:(II)I
       5: invokestatic  #77                 // Method computeRawVarint32Size:(I)I
       8: ireturn

  public void writeRawVarint32(int) throws java.io.IOException;
    Code:
       0: iload_1
       1: bipush        -128
       3: iand
       4: ifne          13
       7: aload_0
       8: iload_1
       9: invokevirtual #41                 // Method writeRawByte:(I)V
      12: return
      13: aload_0
      14: iload_1
      15: bipush        127
      17: iand
      18: sipush        128
      21: ior
      22: invokevirtual #41                 // Method writeRawByte:(I)V
      25: iload_1
      26: bipush        7
      28: iushr
      29: istore_1
      30: goto          0

  public static int computeRawVarint32Size(int);
    Code:
       0: iload_0
       1: bipush        -128
       3: iand
       4: ifne          9
       7: iconst_1
       8: ireturn
       9: iload_0
      10: sipush        -16384
      13: iand
      14: ifne          19
      17: iconst_2
      18: ireturn
      19: iload_0
      20: ldc           #106                // int -2097152
      22: iand
      23: ifne          28
      26: iconst_3
      27: ireturn
      28: iload_0
      29: ldc           #107                // int -268435456
      31: iand
      32: ifne          37
      35: iconst_4
      36: ireturn
      37: iconst_5
      38: ireturn

  public void writeRawVarint64(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: ldc2_w        #108                // long -128l
       4: land
       5: lconst_0
       6: lcmp
       7: ifne          17
      10: aload_0
      11: lload_1
      12: l2i
      13: invokevirtual #41                 // Method writeRawByte:(I)V
      16: return
      17: aload_0
      18: lload_1
      19: l2i
      20: bipush        127
      22: iand
      23: sipush        128
      26: ior
      27: invokevirtual #41                 // Method writeRawByte:(I)V
      30: lload_1
      31: bipush        7
      33: lushr
      34: lstore_1
      35: goto          0

  public static int computeRawVarint64Size(long);
    Code:
       0: lload_0
       1: ldc2_w        #108                // long -128l
       4: land
       5: lconst_0
       6: lcmp
       7: ifne          12
      10: iconst_1
      11: ireturn
      12: lload_0
      13: ldc2_w        #110                // long -16384l
      16: land
      17: lconst_0
      18: lcmp
      19: ifne          24
      22: iconst_2
      23: ireturn
      24: lload_0
      25: ldc2_w        #112                // long -2097152l
      28: land
      29: lconst_0
      30: lcmp
      31: ifne          36
      34: iconst_3
      35: ireturn
      36: lload_0
      37: ldc2_w        #114                // long -268435456l
      40: land
      41: lconst_0
      42: lcmp
      43: ifne          48
      46: iconst_4
      47: ireturn
      48: lload_0
      49: ldc2_w        #116                // long -34359738368l
      52: land
      53: lconst_0
      54: lcmp
      55: ifne          60
      58: iconst_5
      59: ireturn
      60: lload_0
      61: ldc2_w        #118                // long -4398046511104l
      64: land
      65: lconst_0
      66: lcmp
      67: ifne          73
      70: bipush        6
      72: ireturn
      73: lload_0
      74: ldc2_w        #120                // long -562949953421312l
      77: land
      78: lconst_0
      79: lcmp
      80: ifne          86
      83: bipush        7
      85: ireturn
      86: lload_0
      87: ldc2_w        #122                // long -72057594037927936l
      90: land
      91: lconst_0
      92: lcmp
      93: ifne          99
      96: bipush        8
      98: ireturn
      99: lload_0
     100: ldc2_w        #124                // long -9223372036854775808l
     103: land
     104: lconst_0
     105: lcmp
     106: ifne          112
     109: bipush        9
     111: ireturn
     112: bipush        10
     114: ireturn

  public void writeRawLittleEndian32(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: sipush        255
       5: iand
       6: invokevirtual #41                 // Method writeRawByte:(I)V
       9: aload_0
      10: iload_1
      11: bipush        8
      13: ishr
      14: sipush        255
      17: iand
      18: invokevirtual #41                 // Method writeRawByte:(I)V
      21: aload_0
      22: iload_1
      23: bipush        16
      25: ishr
      26: sipush        255
      29: iand
      30: invokevirtual #41                 // Method writeRawByte:(I)V
      33: aload_0
      34: iload_1
      35: bipush        24
      37: ishr
      38: sipush        255
      41: iand
      42: invokevirtual #41                 // Method writeRawByte:(I)V
      45: return

  public void writeRawLittleEndian64(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: l2i
       3: sipush        255
       6: iand
       7: invokevirtual #41                 // Method writeRawByte:(I)V
      10: aload_0
      11: lload_1
      12: bipush        8
      14: lshr
      15: l2i
      16: sipush        255
      19: iand
      20: invokevirtual #41                 // Method writeRawByte:(I)V
      23: aload_0
      24: lload_1
      25: bipush        16
      27: lshr
      28: l2i
      29: sipush        255
      32: iand
      33: invokevirtual #41                 // Method writeRawByte:(I)V
      36: aload_0
      37: lload_1
      38: bipush        24
      40: lshr
      41: l2i
      42: sipush        255
      45: iand
      46: invokevirtual #41                 // Method writeRawByte:(I)V
      49: aload_0
      50: lload_1
      51: bipush        32
      53: lshr
      54: l2i
      55: sipush        255
      58: iand
      59: invokevirtual #41                 // Method writeRawByte:(I)V
      62: aload_0
      63: lload_1
      64: bipush        40
      66: lshr
      67: l2i
      68: sipush        255
      71: iand
      72: invokevirtual #41                 // Method writeRawByte:(I)V
      75: aload_0
      76: lload_1
      77: bipush        48
      79: lshr
      80: l2i
      81: sipush        255
      84: iand
      85: invokevirtual #41                 // Method writeRawByte:(I)V
      88: aload_0
      89: lload_1
      90: bipush        56
      92: lshr
      93: l2i
      94: sipush        255
      97: iand
      98: invokevirtual #41                 // Method writeRawByte:(I)V
     101: return

  public static int encodeZigZag32(int);
    Code:
       0: iload_0
       1: iconst_1
       2: ishl
       3: iload_0
       4: bipush        31
       6: ishr
       7: ixor
       8: ireturn

  public static long encodeZigZag64(long);
    Code:
       0: lload_0
       1: iconst_1
       2: lshl
       3: lload_0
       4: bipush        63
       6: lshr
       7: lxor
       8: lreturn
}
