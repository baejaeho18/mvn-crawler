Compiled from "Source.scala"
public final class akka.stream.javadsl.Source<Out, Mat> implements akka.stream.Graph<akka.stream.SourceShape<Out>, Mat> {
  private final akka.stream.scaladsl.Source<Out, Mat> delegate;

  public static <T, S> akka.stream.javadsl.Source<T, akka.NotUsed> unfoldResourceAsync(akka.japi.function.Creator<java.util.concurrent.CompletionStage<S>>, akka.japi.function.Function<S, java.util.concurrent.CompletionStage<java.util.Optional<T>>>, akka.japi.function.Function<S, java.util.concurrent.CompletionStage<akka.Done>>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #21                 // Method akka/stream/javadsl/Source$.unfoldResourceAsync:(Lakka/japi/function/Creator;Lakka/japi/function/Function;Lakka/japi/function/Function;)Lakka/stream/javadsl/Source;
       9: areturn

  public static <T, S> akka.stream.javadsl.Source<T, akka.NotUsed> unfoldResource(akka.japi.function.Creator<S>, akka.japi.function.Function<S, java.util.Optional<T>>, akka.japi.function.Procedure<S>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #25                 // Method akka/stream/javadsl/Source$.unfoldResource:(Lakka/japi/function/Creator;Lakka/japi/function/Function;Lakka/japi/function/Procedure;)Lakka/stream/javadsl/Source;
       9: areturn

  public static <T> akka.stream.javadsl.Source<T, akka.stream.javadsl.SourceQueueWithComplete<T>> queue(int, akka.stream.OverflowStrategy);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: iload_0
       4: aload_1
       5: invokevirtual #29                 // Method akka/stream/javadsl/Source$.queue:(ILakka/stream/OverflowStrategy;)Lakka/stream/javadsl/Source;
       8: areturn

  public static <T, O> akka.stream.javadsl.Source<O, akka.NotUsed> zipWithN(akka.japi.function.Function<java.util.List<T>, O>, java.util.List<akka.stream.javadsl.Source<T, ?>>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: aload_1
       5: invokevirtual #33                 // Method akka/stream/javadsl/Source$.zipWithN:(Lakka/japi/function/Function;Ljava/util/List;)Lakka/stream/javadsl/Source;
       8: areturn

  public static <T> akka.stream.javadsl.Source<java.util.List<T>, akka.NotUsed> zipN(java.util.List<akka.stream.javadsl.Source<T, ?>>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: invokevirtual #37                 // Method akka/stream/javadsl/Source$.zipN:(Ljava/util/List;)Lakka/stream/javadsl/Source;
       7: areturn

  public static <T, U> akka.stream.javadsl.Source<U, akka.NotUsed> combine(akka.stream.javadsl.Source<T, ?>, akka.stream.javadsl.Source<T, ?>, java.util.List<akka.stream.javadsl.Source<T, ?>>, akka.japi.function.Function<java.lang.Integer, ? extends akka.stream.Graph<akka.stream.UniformFanInShape<T, U>, akka.NotUsed>>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #41                 // Method akka/stream/javadsl/Source$.combine:(Lakka/stream/javadsl/Source;Lakka/stream/javadsl/Source;Ljava/util/List;Lakka/japi/function/Function;)Lakka/stream/javadsl/Source;
      10: areturn

  public static <T, M> akka.stream.javadsl.Source<T, M> fromGraph(akka.stream.Graph<akka.stream.SourceShape<T>, M>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: invokevirtual #45                 // Method akka/stream/javadsl/Source$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/javadsl/Source;
       7: areturn

  public static <T> akka.stream.javadsl.Source<T, akka.actor.ActorRef> actorRef(int, akka.stream.OverflowStrategy);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: iload_0
       4: aload_1
       5: invokevirtual #48                 // Method akka/stream/javadsl/Source$.actorRef:(ILakka/stream/OverflowStrategy;)Lakka/stream/javadsl/Source;
       8: areturn

  public static <T> akka.stream.javadsl.Source<T, akka.actor.ActorRef> actorPublisher(akka.actor.Props);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: invokevirtual #52                 // Method akka/stream/javadsl/Source$.actorPublisher:(Lakka/actor/Props;)Lakka/stream/javadsl/Source;
       7: areturn

  public static <T> akka.stream.javadsl.Source<T, org.reactivestreams.Subscriber<T>> asSubscriber();
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: invokevirtual #56                 // Method akka/stream/javadsl/Source$.asSubscriber:()Lakka/stream/javadsl/Source;
       6: areturn

  public static <T> akka.stream.javadsl.Source<T, akka.NotUsed> failed(java.lang.Throwable);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: invokevirtual #60                 // Method akka/stream/javadsl/Source$.failed:(Ljava/lang/Throwable;)Lakka/stream/javadsl/Source;
       7: areturn

  public static <S, E> akka.stream.javadsl.Source<E, akka.NotUsed> unfoldAsync(S, akka.japi.function.Function<S, java.util.concurrent.CompletionStage<java.util.Optional<akka.japi.Pair<S, E>>>>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: aload_1
       5: invokevirtual #64                 // Method akka/stream/javadsl/Source$.unfoldAsync:(Ljava/lang/Object;Lakka/japi/function/Function;)Lakka/stream/javadsl/Source;
       8: areturn

  public static <S, E> akka.stream.javadsl.Source<E, akka.NotUsed> unfold(S, akka.japi.function.Function<S, java.util.Optional<akka.japi.Pair<S, E>>>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: aload_1
       5: invokevirtual #67                 // Method akka/stream/javadsl/Source$.unfold:(Ljava/lang/Object;Lakka/japi/function/Function;)Lakka/stream/javadsl/Source;
       8: areturn

  public static <T> akka.stream.javadsl.Source<T, akka.NotUsed> repeat(T);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: invokevirtual #71                 // Method akka/stream/javadsl/Source$.repeat:(Ljava/lang/Object;)Lakka/stream/javadsl/Source;
       7: areturn

  public static <T> akka.stream.javadsl.Source<T, akka.NotUsed> single(T);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: invokevirtual #74                 // Method akka/stream/javadsl/Source$.single:(Ljava/lang/Object;)Lakka/stream/javadsl/Source;
       7: areturn

  public static <O> akka.stream.javadsl.Source<O, akka.actor.Cancellable> tick(scala.concurrent.duration.FiniteDuration, scala.concurrent.duration.FiniteDuration, O);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #78                 // Method akka/stream/javadsl/Source$.tick:(Lscala/concurrent/duration/FiniteDuration;Lscala/concurrent/duration/FiniteDuration;Ljava/lang/Object;)Lakka/stream/javadsl/Source;
       9: areturn

  public static <O> akka.stream.javadsl.Source<O, akka.NotUsed> fromCompletionStage(java.util.concurrent.CompletionStage<O>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: invokevirtual #82                 // Method akka/stream/javadsl/Source$.fromCompletionStage:(Ljava/util/concurrent/CompletionStage;)Lakka/stream/javadsl/Source;
       7: areturn

  public static <O> akka.stream.javadsl.Source<O, akka.NotUsed> fromFuture(scala.concurrent.Future<O>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: invokevirtual #86                 // Method akka/stream/javadsl/Source$.fromFuture:(Lscala/concurrent/Future;)Lakka/stream/javadsl/Source;
       7: areturn

  public static akka.stream.javadsl.Source<java.lang.Integer, akka.NotUsed> range(int, int, int);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: iload_0
       4: iload_1
       5: iload_2
       6: invokevirtual #90                 // Method akka/stream/javadsl/Source$.range:(III)Lakka/stream/javadsl/Source;
       9: areturn

  public static akka.stream.javadsl.Source<java.lang.Integer, akka.NotUsed> range(int, int);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: iload_0
       4: iload_1
       5: invokevirtual #93                 // Method akka/stream/javadsl/Source$.range:(II)Lakka/stream/javadsl/Source;
       8: areturn

  public static <O> akka.stream.javadsl.Source<O, akka.NotUsed> from(java.lang.Iterable<O>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: invokevirtual #97                 // Method akka/stream/javadsl/Source$.from:(Ljava/lang/Iterable;)Lakka/stream/javadsl/Source;
       7: areturn

  public static <O> akka.stream.javadsl.Source<O, akka.NotUsed> cycle(akka.japi.function.Creator<java.util.Iterator<O>>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: invokevirtual #101                // Method akka/stream/javadsl/Source$.cycle:(Lakka/japi/function/Creator;)Lakka/stream/javadsl/Source;
       7: areturn

  public static <O> akka.stream.javadsl.Source<O, akka.NotUsed> fromIterator(akka.japi.function.Creator<java.util.Iterator<O>>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: invokevirtual #104                // Method akka/stream/javadsl/Source$.fromIterator:(Lakka/japi/function/Creator;)Lakka/stream/javadsl/Source;
       7: areturn

  public static <O> akka.stream.javadsl.Source<O, akka.NotUsed> fromPublisher(org.reactivestreams.Publisher<O>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: aload_0
       4: invokevirtual #108                // Method akka/stream/javadsl/Source$.fromPublisher:(Lorg/reactivestreams/Publisher;)Lakka/stream/javadsl/Source;
       7: areturn

  public static <T> akka.stream.javadsl.Source<T, java.util.concurrent.CompletableFuture<java.util.Optional<T>>> maybe();
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: invokevirtual #111                // Method akka/stream/javadsl/Source$.maybe:()Lakka/stream/javadsl/Source;
       6: areturn

  public static <O> akka.stream.javadsl.Source<O, akka.NotUsed> empty();
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Source$.MODULE$:Lakka/stream/javadsl/Source$;
       3: invokevirtual #114                // Method akka/stream/javadsl/Source$.empty:()Lakka/stream/javadsl/Source;
       6: areturn

  public akka.stream.SourceShape<Out> shape();
    Code:
       0: aload_0
       1: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       4: invokevirtual #125                // Method akka/stream/scaladsl/Source.shape:()Lakka/stream/SourceShape;
       7: areturn

  public akka.stream.impl.StreamLayout$Module module();
    Code:
       0: aload_0
       1: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       4: invokevirtual #131                // Method akka/stream/scaladsl/Source.module:()Lakka/stream/impl/StreamLayout$Module;
       7: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       4: invokevirtual #135                // Method akka/stream/scaladsl/Source.toString:()Ljava/lang/String;
       7: areturn

  public akka.stream.scaladsl.Source<Out, Mat> asScala();
    Code:
       0: aload_0
       1: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       4: areturn

  public <Mat2> akka.stream.javadsl.Source<Out, Mat2> mapMaterializedValue(akka.japi.function.Function<Mat, Mat2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #141                // class akka/stream/javadsl/Source$$anonfun$mapMaterializedValue$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #145                // Method akka/stream/javadsl/Source$$anonfun$mapMaterializedValue$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      17: invokevirtual #148                // Method akka/stream/scaladsl/Source.mapMaterializedValue:(Lscala/Function1;)Lakka/stream/scaladsl/Source;
      20: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      23: areturn

  public <T, M> akka.stream.javadsl.Source<T, Mat> via(akka.stream.Graph<akka.stream.FlowShape<Out, T>, M>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #157                // Method akka/stream/scaladsl/Source.via:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Source;
      12: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      15: areturn

  public <T, M, M2> akka.stream.javadsl.Source<T, M2> viaMat(akka.stream.Graph<akka.stream.FlowShape<Out, T>, M>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: getstatic     #166                // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #170                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #173                // Method akka/stream/scaladsl/Source.viaMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/Source;
      19: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      22: areturn

  public <M> akka.stream.javadsl.RunnableGraph<Mat> to(akka.stream.Graph<akka.stream.SinkShape<Out>, M>);
    Code:
       0: getstatic     #181                // Field akka/stream/javadsl/RunnableGraph$.MODULE$:Lakka/stream/javadsl/RunnableGraph$;
       3: aload_0
       4: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       7: aload_1
       8: invokevirtual #184                // Method akka/stream/scaladsl/Source.to:(Lakka/stream/Graph;)Lakka/stream/scaladsl/RunnableGraph;
      11: invokevirtual #186                // Method akka/stream/javadsl/RunnableGraph$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/javadsl/RunnableGraph;
      14: areturn

  public <M, M2> akka.stream.javadsl.RunnableGraph<M2> toMat(akka.stream.Graph<akka.stream.SinkShape<Out>, M>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: getstatic     #181                // Field akka/stream/javadsl/RunnableGraph$.MODULE$:Lakka/stream/javadsl/RunnableGraph$;
       3: aload_0
       4: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       7: aload_1
       8: getstatic     #166                // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      11: aload_2
      12: invokevirtual #170                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      15: invokevirtual #192                // Method akka/stream/scaladsl/Source.toMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/RunnableGraph;
      18: invokevirtual #186                // Method akka/stream/javadsl/RunnableGraph$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/javadsl/RunnableGraph;
      21: areturn

  public <M> M runWith(akka.stream.Graph<akka.stream.SinkShape<Out>, M>, akka.stream.Materializer);
    Code:
       0: aload_0
       1: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       4: aload_1
       5: aload_2
       6: invokevirtual #196                // Method akka/stream/scaladsl/Source.runWith:(Lakka/stream/Graph;Lakka/stream/Materializer;)Ljava/lang/Object;
       9: areturn

  public <U> java.util.concurrent.CompletionStage<U> runFold(U, akka.japi.function.Function2<U, Out, U>, akka.stream.Materializer);
    Code:
       0: aload_0
       1: getstatic     #205                // Field akka/stream/javadsl/Sink$.MODULE$:Lakka/stream/javadsl/Sink$;
       4: aload_1
       5: aload_2
       6: invokevirtual #209                // Method akka/stream/javadsl/Sink$.fold:(Ljava/lang/Object;Lakka/japi/function/Function2;)Lakka/stream/javadsl/Sink;
       9: aload_3
      10: invokevirtual #210                // Method runWith:(Lakka/stream/Graph;Lakka/stream/Materializer;)Ljava/lang/Object;
      13: checkcast     #212                // class java/util/concurrent/CompletionStage
      16: areturn

  public <U> java.util.concurrent.CompletionStage<U> runFoldAsync(U, akka.japi.function.Function2<U, Out, java.util.concurrent.CompletionStage<U>>, akka.stream.Materializer);
    Code:
       0: aload_0
       1: getstatic     #205                // Field akka/stream/javadsl/Sink$.MODULE$:Lakka/stream/javadsl/Sink$;
       4: aload_1
       5: aload_2
       6: invokevirtual #218                // Method akka/stream/javadsl/Sink$.foldAsync:(Ljava/lang/Object;Lakka/japi/function/Function2;)Lakka/stream/javadsl/Sink;
       9: aload_3
      10: invokevirtual #210                // Method runWith:(Lakka/stream/Graph;Lakka/stream/Materializer;)Ljava/lang/Object;
      13: checkcast     #212                // class java/util/concurrent/CompletionStage
      16: areturn

  public <U> java.util.concurrent.CompletionStage<U> runReduce(akka.japi.function.Function2<U, U, U>, akka.stream.Materializer);
    Code:
       0: aload_0
       1: getstatic     #205                // Field akka/stream/javadsl/Sink$.MODULE$:Lakka/stream/javadsl/Sink$;
       4: aload_1
       5: invokevirtual #224                // Method akka/stream/javadsl/Sink$.reduce:(Lakka/japi/function/Function2;)Lakka/stream/javadsl/Sink;
       8: aload_2
       9: invokevirtual #210                // Method runWith:(Lakka/stream/Graph;Lakka/stream/Materializer;)Ljava/lang/Object;
      12: checkcast     #212                // class java/util/concurrent/CompletionStage
      15: areturn

  public <T, M> akka.stream.javadsl.Source<T, Mat> concat(akka.stream.Graph<akka.stream.SourceShape<T>, M>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #228                // Method akka/stream/scaladsl/Source.concat:(Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public <T, M, M2> akka.stream.javadsl.Source<T, M2> concatMat(akka.stream.Graph<akka.stream.SourceShape<T>, M>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: getstatic     #166                // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #170                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #233                // Method akka/stream/scaladsl/Source.concatMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      19: checkcast     #123                // class akka/stream/scaladsl/Source
      22: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      25: areturn

  public <T, M> akka.stream.javadsl.Source<T, Mat> prepend(akka.stream.Graph<akka.stream.SourceShape<T>, M>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #237                // Method akka/stream/scaladsl/Source.prepend:(Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public <T, M, M2> akka.stream.javadsl.Source<T, M2> prependMat(akka.stream.Graph<akka.stream.SourceShape<T>, M>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: getstatic     #166                // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #170                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #240                // Method akka/stream/scaladsl/Source.prependMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      19: checkcast     #123                // class akka/stream/scaladsl/Source
      22: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      25: areturn

  public <T, M> akka.stream.javadsl.Source<T, Mat> orElse(akka.stream.Graph<akka.stream.SourceShape<T>, M>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #243                // Method akka/stream/scaladsl/Source.orElse:(Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public <T, M, M2> akka.stream.javadsl.Source<T, M2> orElseMat(akka.stream.Graph<akka.stream.SourceShape<T>, M>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: getstatic     #166                // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #170                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #247                // Method akka/stream/scaladsl/Source.orElseMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      19: checkcast     #123                // class akka/stream/scaladsl/Source
      22: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      25: areturn

  public akka.stream.javadsl.Source<Out, Mat> alsoTo(akka.stream.Graph<akka.stream.SinkShape<Out>, ?>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #250                // Method akka/stream/scaladsl/Source.alsoTo:(Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public <M2, M3> akka.stream.javadsl.Source<Out, M3> alsoToMat(akka.stream.Graph<akka.stream.SinkShape<Out>, M2>, akka.japi.function.Function2<Mat, M2, M3>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: getstatic     #166                // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #170                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #253                // Method akka/stream/scaladsl/Source.alsoToMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      19: checkcast     #123                // class akka/stream/scaladsl/Source
      22: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      25: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> interleave(akka.stream.Graph<akka.stream.SourceShape<T>, ?>, int);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: iload_2
      10: invokevirtual #258                // Method akka/stream/scaladsl/Source.interleave:(Lakka/stream/Graph;I)Lakka/stream/scaladsl/FlowOps;
      13: checkcast     #123                // class akka/stream/scaladsl/Source
      16: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      19: areturn

  public <T, M, M2> akka.stream.javadsl.Source<T, M2> interleaveMat(akka.stream.Graph<akka.stream.SourceShape<T>, M>, int, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: iload_2
      10: getstatic     #166                // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      13: aload_3
      14: invokevirtual #170                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      17: invokevirtual #265                // Method akka/stream/scaladsl/Source.interleaveMat:(Lakka/stream/Graph;ILscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      20: checkcast     #123                // class akka/stream/scaladsl/Source
      23: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      26: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> merge(akka.stream.Graph<akka.stream.SourceShape<T>, ?>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: aload_0
      10: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
      13: invokevirtual #270                // Method akka/stream/scaladsl/Source.merge$default$2:()Z
      16: invokevirtual #273                // Method akka/stream/scaladsl/Source.merge:(Lakka/stream/Graph;Z)Lakka/stream/scaladsl/FlowOps;
      19: checkcast     #123                // class akka/stream/scaladsl/Source
      22: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      25: areturn

  public <T, M, M2> akka.stream.javadsl.Source<T, M2> mergeMat(akka.stream.Graph<akka.stream.SourceShape<T>, M>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: aload_0
      10: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
      13: invokevirtual #277                // Method akka/stream/scaladsl/Source.mergeMat$default$2:()Z
      16: getstatic     #166                // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      19: aload_2
      20: invokevirtual #170                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      23: invokevirtual #280                // Method akka/stream/scaladsl/Source.mergeMat:(Lakka/stream/Graph;ZLscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      26: checkcast     #123                // class akka/stream/scaladsl/Source
      29: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      32: areturn

  public <U, M> akka.stream.javadsl.Source<U, Mat> mergeSorted(akka.stream.Graph<akka.stream.SourceShape<U>, M>, java.util.Comparator<U>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: getstatic     #287                // Field scala/package$.MODULE$:Lscala/package$;
      12: invokevirtual #291                // Method scala/package$.Ordering:()Lscala/math/Ordering$;
      15: aload_2
      16: invokevirtual #297                // Method scala/math/Ordering$.comparatorToOrdering:(Ljava/util/Comparator;)Lscala/math/Ordering;
      19: invokevirtual #300                // Method akka/stream/scaladsl/Source.mergeSorted:(Lakka/stream/Graph;Lscala/math/Ordering;)Lakka/stream/scaladsl/FlowOps;
      22: checkcast     #123                // class akka/stream/scaladsl/Source
      25: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      28: areturn

  public <U, Mat2, Mat3> akka.stream.javadsl.Source<U, Mat3> mergeSortedMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, java.util.Comparator<U>, akka.japi.function.Function2<Mat, Mat2, Mat3>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: getstatic     #166                // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_3
      13: invokevirtual #170                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: getstatic     #287                // Field scala/package$.MODULE$:Lscala/package$;
      19: invokevirtual #291                // Method scala/package$.Ordering:()Lscala/math/Ordering$;
      22: aload_2
      23: invokevirtual #297                // Method scala/math/Ordering$.comparatorToOrdering:(Ljava/util/Comparator;)Lscala/math/Ordering;
      26: invokevirtual #307                // Method akka/stream/scaladsl/Source.mergeSortedMat:(Lakka/stream/Graph;Lscala/Function2;Lscala/math/Ordering;)Lakka/stream/scaladsl/FlowOpsMat;
      29: checkcast     #123                // class akka/stream/scaladsl/Source
      32: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      35: areturn

  public <T> akka.stream.javadsl.Source<akka.japi.Pair<Out, T>, Mat> zip(akka.stream.Graph<akka.stream.SourceShape<T>, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #313                // Field akka/stream/javadsl/Keep$.MODULE$:Lakka/stream/javadsl/Keep$;
       5: invokevirtual #317                // Method akka/stream/javadsl/Keep$.left:()Lakka/japi/function/Function2;
       8: invokevirtual #320                // Method zipMat:(Lakka/stream/Graph;Lakka/japi/function/Function2;)Lakka/stream/javadsl/Source;
      11: areturn

  public <T, M, M2> akka.stream.javadsl.Source<akka.japi.Pair<Out, T>, M2> zipMat(akka.stream.Graph<akka.stream.SourceShape<T>, M>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: aload_0
       1: getstatic     #325                // Field akka/stream/javadsl/Flow$.MODULE$:Lakka/stream/javadsl/Flow$;
       4: invokevirtual #329                // Method akka/stream/javadsl/Flow$.create:()Lakka/stream/javadsl/Flow;
       7: aload_1
       8: getstatic     #313                // Field akka/stream/javadsl/Keep$.MODULE$:Lakka/stream/javadsl/Keep$;
      11: invokevirtual #332                // Method akka/stream/javadsl/Keep$.right:()Lakka/japi/function/Function2;
      14: invokevirtual #337                // Method akka/stream/javadsl/Flow.zipMat:(Lakka/stream/Graph;Lakka/japi/function/Function2;)Lakka/stream/javadsl/Flow;
      17: aload_2
      18: invokevirtual #339                // Method viaMat:(Lakka/stream/Graph;Lakka/japi/function/Function2;)Lakka/stream/javadsl/Source;
      21: areturn

  public <Out2, Out3> akka.stream.javadsl.Source<Out3, Mat> zipWith(akka.stream.Graph<akka.stream.SourceShape<Out2>, ?>, akka.japi.function.Function2<Out, Out2, Out3>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: getstatic     #166                // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #170                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #343                // Method akka/stream/scaladsl/Source.zipWith:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      19: checkcast     #123                // class akka/stream/scaladsl/Source
      22: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      25: areturn

  public <Out2, Out3, M, M2> akka.stream.javadsl.Source<Out3, M2> zipWithMat(akka.stream.Graph<akka.stream.SourceShape<Out2>, M>, akka.japi.function.Function2<Out, Out2, Out3>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: getstatic     #166                // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #170                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: getstatic     #166                // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      19: aload_3
      20: invokevirtual #170                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      23: invokevirtual #348                // Method akka/stream/scaladsl/Source.zipWithMat:(Lakka/stream/Graph;Lscala/Function2;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      26: checkcast     #123                // class akka/stream/scaladsl/Source
      29: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      32: areturn

  public akka.stream.javadsl.Source<akka.japi.Pair<Out, java.lang.Object>, Mat> zipWithIndex();
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: invokevirtual #352                // Method akka/stream/scaladsl/Source.zipWithIndex:()Lakka/stream/scaladsl/FlowOps;
      11: new           #354                // class akka/stream/javadsl/Source$$anonfun$zipWithIndex$1
      14: dup
      15: aload_0
      16: invokespecial #357                // Method akka/stream/javadsl/Source$$anonfun$zipWithIndex$1."<init>":(Lakka/stream/javadsl/Source;)V
      19: invokeinterface #363,  2          // InterfaceMethod akka/stream/scaladsl/FlowOps.map:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      24: checkcast     #123                // class akka/stream/scaladsl/Source
      27: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      30: areturn

  public java.util.concurrent.CompletionStage<akka.Done> runForeach(akka.japi.function.Procedure<Out>, akka.stream.Materializer);
    Code:
       0: aload_0
       1: getstatic     #205                // Field akka/stream/javadsl/Sink$.MODULE$:Lakka/stream/javadsl/Sink$;
       4: aload_1
       5: invokevirtual #369                // Method akka/stream/javadsl/Sink$.foreach:(Lakka/japi/function/Procedure;)Lakka/stream/javadsl/Sink;
       8: aload_2
       9: invokevirtual #210                // Method runWith:(Lakka/stream/Graph;Lakka/stream/Materializer;)Ljava/lang/Object;
      12: checkcast     #212                // class java/util/concurrent/CompletionStage
      15: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> map(akka.japi.function.Function<Out, T>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #372                // class akka/stream/javadsl/Source$$anonfun$map$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #373                // Method akka/stream/javadsl/Source$$anonfun$map$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      17: invokevirtual #374                // Method akka/stream/scaladsl/Source.map:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #123                // class akka/stream/scaladsl/Source
      23: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      26: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> recover(scala.PartialFunction<java.lang.Throwable, T>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #379                // Method akka/stream/scaladsl/Source.recover:(Lscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> recoverWith(scala.PartialFunction<java.lang.Throwable, ? extends akka.stream.Graph<akka.stream.SourceShape<T>, akka.NotUsed>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #384                // Method akka/stream/scaladsl/Source.recoverWith:(Lscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> recoverWithRetries(int, scala.PartialFunction<java.lang.Throwable, ? extends akka.stream.Graph<akka.stream.SourceShape<T>, akka.NotUsed>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: iload_1
       9: aload_2
      10: invokevirtual #389                // Method akka/stream/scaladsl/Source.recoverWithRetries:(ILscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
      13: checkcast     #123                // class akka/stream/scaladsl/Source
      16: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      19: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> mapConcat(akka.japi.function.Function<Out, ? extends java.lang.Iterable<T>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #393                // class akka/stream/javadsl/Source$$anonfun$mapConcat$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #394                // Method akka/stream/javadsl/Source$$anonfun$mapConcat$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      17: invokevirtual #396                // Method akka/stream/scaladsl/Source.mapConcat:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #123                // class akka/stream/scaladsl/Source
      23: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      26: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> statefulMapConcat(akka.japi.function.Creator<akka.japi.function.Function<Out, java.lang.Iterable<T>>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #399                // class akka/stream/javadsl/Source$$anonfun$statefulMapConcat$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #402                // Method akka/stream/javadsl/Source$$anonfun$statefulMapConcat$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Creator;)V
      17: invokevirtual #405                // Method akka/stream/scaladsl/Source.statefulMapConcat:(Lscala/Function0;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #123                // class akka/stream/scaladsl/Source
      23: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      26: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> mapAsync(int, akka.japi.function.Function<Out, java.util.concurrent.CompletionStage<T>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: iload_1
       9: new           #410                // class akka/stream/javadsl/Source$$anonfun$mapAsync$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #411                // Method akka/stream/javadsl/Source$$anonfun$mapAsync$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      18: invokevirtual #414                // Method akka/stream/scaladsl/Source.mapAsync:(ILscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #123                // class akka/stream/scaladsl/Source
      24: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      27: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> mapAsyncUnordered(int, akka.japi.function.Function<Out, java.util.concurrent.CompletionStage<T>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: iload_1
       9: new           #418                // class akka/stream/javadsl/Source$$anonfun$mapAsyncUnordered$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #419                // Method akka/stream/javadsl/Source$$anonfun$mapAsyncUnordered$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      18: invokevirtual #421                // Method akka/stream/scaladsl/Source.mapAsyncUnordered:(ILscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #123                // class akka/stream/scaladsl/Source
      24: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      27: areturn

  public akka.stream.javadsl.Source<Out, Mat> filter(akka.japi.function.Predicate<Out>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #425                // class akka/stream/javadsl/Source$$anonfun$filter$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #428                // Method akka/stream/javadsl/Source$$anonfun$filter$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Predicate;)V
      17: invokevirtual #430                // Method akka/stream/scaladsl/Source.filter:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #123                // class akka/stream/scaladsl/Source
      23: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      26: areturn

  public akka.stream.javadsl.Source<Out, Mat> filterNot(akka.japi.function.Predicate<Out>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #435                // class akka/stream/javadsl/Source$$anonfun$filterNot$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #436                // Method akka/stream/javadsl/Source$$anonfun$filterNot$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Predicate;)V
      17: invokevirtual #438                // Method akka/stream/scaladsl/Source.filterNot:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #123                // class akka/stream/scaladsl/Source
      23: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      26: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> collect(scala.PartialFunction<Out, T>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #441                // Method akka/stream/scaladsl/Source.collect:(Lscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public akka.stream.javadsl.Source<java.util.List<Out>, Mat> grouped(int);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: iload_1
       9: invokevirtual #446                // Method akka/stream/scaladsl/Source.grouped:(I)Lakka/stream/scaladsl/FlowOps;
      12: new           #448                // class akka/stream/javadsl/Source$$anonfun$grouped$1
      15: dup
      16: aload_0
      17: invokespecial #449                // Method akka/stream/javadsl/Source$$anonfun$grouped$1."<init>":(Lakka/stream/javadsl/Source;)V
      20: invokeinterface #363,  2          // InterfaceMethod akka/stream/scaladsl/FlowOps.map:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      25: checkcast     #123                // class akka/stream/scaladsl/Source
      28: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      31: areturn

  public akka.stream.javadsl.Source<Out, Mat> limit(int);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: iload_1
       9: i2l
      10: invokevirtual #454                // Method akka/stream/scaladsl/Source.limit:(J)Lakka/stream/scaladsl/FlowOps;
      13: checkcast     #123                // class akka/stream/scaladsl/Source
      16: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      19: areturn

  public akka.stream.javadsl.Source<Out, Mat> limitWeighted(long, akka.japi.function.Function<Out, java.lang.Object>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: lload_1
       9: new           #458                // class akka/stream/javadsl/Source$$anonfun$limitWeighted$1
      12: dup
      13: aload_0
      14: aload_3
      15: invokespecial #459                // Method akka/stream/javadsl/Source$$anonfun$limitWeighted$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      18: invokevirtual #462                // Method akka/stream/scaladsl/Source.limitWeighted:(JLscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #123                // class akka/stream/scaladsl/Source
      24: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      27: areturn

  public akka.stream.javadsl.Source<java.util.List<Out>, Mat> sliding(int, int);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: iload_1
       9: iload_2
      10: invokevirtual #468                // Method akka/stream/scaladsl/Source.sliding:(II)Lakka/stream/scaladsl/FlowOps;
      13: new           #470                // class akka/stream/javadsl/Source$$anonfun$sliding$1
      16: dup
      17: aload_0
      18: invokespecial #471                // Method akka/stream/javadsl/Source$$anonfun$sliding$1."<init>":(Lakka/stream/javadsl/Source;)V
      21: invokeinterface #363,  2          // InterfaceMethod akka/stream/scaladsl/FlowOps.map:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      26: checkcast     #123                // class akka/stream/scaladsl/Source
      29: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      32: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> scan(T, akka.japi.function.Function2<T, Out, T>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: new           #476                // class akka/stream/javadsl/Source$$anonfun$scan$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #479                // Method akka/stream/javadsl/Source$$anonfun$scan$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function2;)V
      18: invokevirtual #482                // Method akka/stream/scaladsl/Source.scan:(Ljava/lang/Object;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #123                // class akka/stream/scaladsl/Source
      24: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      27: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> fold(T, akka.japi.function.Function2<T, Out, T>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: new           #484                // class akka/stream/javadsl/Source$$anonfun$fold$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #485                // Method akka/stream/javadsl/Source$$anonfun$fold$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function2;)V
      18: invokevirtual #487                // Method akka/stream/scaladsl/Source.fold:(Ljava/lang/Object;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #123                // class akka/stream/scaladsl/Source
      24: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      27: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> foldAsync(T, akka.japi.function.Function2<T, Out, java.util.concurrent.CompletionStage<T>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: new           #489                // class akka/stream/javadsl/Source$$anonfun$foldAsync$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #490                // Method akka/stream/javadsl/Source$$anonfun$foldAsync$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function2;)V
      18: invokevirtual #492                // Method akka/stream/scaladsl/Source.foldAsync:(Ljava/lang/Object;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #123                // class akka/stream/scaladsl/Source
      24: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      27: areturn

  public akka.stream.javadsl.Source<Out, Mat> reduce(akka.japi.function.Function2<Out, Out, Out>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #495                // class akka/stream/javadsl/Source$$anonfun$reduce$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #496                // Method akka/stream/javadsl/Source$$anonfun$reduce$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function2;)V
      17: invokevirtual #499                // Method akka/stream/scaladsl/Source.reduce:(Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #123                // class akka/stream/scaladsl/Source
      23: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      26: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> intersperse(T, T, T);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: aload_2
      10: aload_3
      11: invokevirtual #504                // Method akka/stream/scaladsl/Source.intersperse:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lakka/stream/scaladsl/FlowOps;
      14: checkcast     #123                // class akka/stream/scaladsl/Source
      17: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      20: areturn

  public <T> akka.stream.javadsl.Source<T, Mat> intersperse(T);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #510                // Method akka/stream/scaladsl/Source.intersperse:(Ljava/lang/Object;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public akka.stream.javadsl.Source<java.util.List<Out>, Mat> groupedWithin(int, scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: iload_1
       9: aload_2
      10: invokevirtual #515                // Method akka/stream/scaladsl/Source.groupedWithin:(ILscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      13: new           #517                // class akka/stream/javadsl/Source$$anonfun$groupedWithin$1
      16: dup
      17: aload_0
      18: invokespecial #518                // Method akka/stream/javadsl/Source$$anonfun$groupedWithin$1."<init>":(Lakka/stream/javadsl/Source;)V
      21: invokeinterface #363,  2          // InterfaceMethod akka/stream/scaladsl/FlowOps.map:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      26: checkcast     #123                // class akka/stream/scaladsl/Source
      29: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      32: areturn

  public akka.stream.javadsl.Source<Out, Mat> delay(scala.concurrent.duration.FiniteDuration, akka.stream.DelayOverflowStrategy);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: aload_2
      10: invokevirtual #525                // Method akka/stream/scaladsl/Source.delay:(Lscala/concurrent/duration/FiniteDuration;Lakka/stream/DelayOverflowStrategy;)Lakka/stream/scaladsl/FlowOps;
      13: checkcast     #123                // class akka/stream/scaladsl/Source
      16: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      19: areturn

  public akka.stream.javadsl.Source<Out, Mat> drop(long);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: lload_1
       9: invokevirtual #532                // Method akka/stream/scaladsl/Source.drop:(J)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public akka.stream.javadsl.Source<Out, Mat> dropWithin(scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #537                // Method akka/stream/scaladsl/Source.dropWithin:(Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public akka.stream.javadsl.Source<Out, Mat> takeWhile(akka.japi.function.Predicate<Out>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #540                // class akka/stream/javadsl/Source$$anonfun$takeWhile$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #541                // Method akka/stream/javadsl/Source$$anonfun$takeWhile$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Predicate;)V
      17: invokevirtual #543                // Method akka/stream/scaladsl/Source.takeWhile:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #123                // class akka/stream/scaladsl/Source
      23: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      26: areturn

  public akka.stream.javadsl.Source<Out, Mat> dropWhile(akka.japi.function.Predicate<Out>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #546                // class akka/stream/javadsl/Source$$anonfun$dropWhile$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #547                // Method akka/stream/javadsl/Source$$anonfun$dropWhile$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Predicate;)V
      17: invokevirtual #549                // Method akka/stream/scaladsl/Source.dropWhile:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #123                // class akka/stream/scaladsl/Source
      23: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      26: areturn

  public akka.stream.javadsl.Source<Out, Mat> take(long);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: lload_1
       9: invokevirtual #552                // Method akka/stream/scaladsl/Source.take:(J)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public akka.stream.javadsl.Source<Out, Mat> takeWithin(scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #555                // Method akka/stream/scaladsl/Source.takeWithin:(Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public <S> akka.stream.javadsl.Source<S, Mat> conflateWithSeed(akka.japi.function.Function<Out, S>, akka.japi.function.Function2<S, Out, S>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #559                // class akka/stream/javadsl/Source$$anonfun$conflateWithSeed$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #560                // Method akka/stream/javadsl/Source$$anonfun$conflateWithSeed$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      17: new           #562                // class akka/stream/javadsl/Source$$anonfun$conflateWithSeed$2
      20: dup
      21: aload_0
      22: aload_2
      23: invokespecial #563                // Method akka/stream/javadsl/Source$$anonfun$conflateWithSeed$2."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function2;)V
      26: invokevirtual #566                // Method akka/stream/scaladsl/Source.conflateWithSeed:(Lscala/Function1;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      29: checkcast     #123                // class akka/stream/scaladsl/Source
      32: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      35: areturn

  public <O2> akka.stream.javadsl.Source<O2, Mat> conflate(akka.japi.function.Function2<O2, O2, O2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #571                // class akka/stream/javadsl/Source$$anonfun$conflate$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #572                // Method akka/stream/javadsl/Source$$anonfun$conflate$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function2;)V
      17: invokevirtual #574                // Method akka/stream/scaladsl/Source.conflate:(Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #123                // class akka/stream/scaladsl/Source
      23: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      26: areturn

  public <S> akka.stream.javadsl.Source<S, Mat> batch(long, akka.japi.function.Function<Out, S>, akka.japi.function.Function2<S, Out, S>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: lload_1
       9: new           #578                // class akka/stream/javadsl/Source$$anonfun$batch$1
      12: dup
      13: aload_0
      14: aload_3
      15: invokespecial #579                // Method akka/stream/javadsl/Source$$anonfun$batch$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      18: new           #581                // class akka/stream/javadsl/Source$$anonfun$batch$2
      21: dup
      22: aload_0
      23: aload         4
      25: invokespecial #582                // Method akka/stream/javadsl/Source$$anonfun$batch$2."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function2;)V
      28: invokevirtual #585                // Method akka/stream/scaladsl/Source.batch:(JLscala/Function1;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      31: checkcast     #123                // class akka/stream/scaladsl/Source
      34: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      37: areturn

  public <S> akka.stream.javadsl.Source<S, Mat> batchWeighted(long, akka.japi.function.Function<Out, java.lang.Object>, akka.japi.function.Function<Out, S>, akka.japi.function.Function2<S, Out, S>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: lload_1
       9: new           #590                // class akka/stream/javadsl/Source$$anonfun$batchWeighted$1
      12: dup
      13: aload_0
      14: aload_3
      15: invokespecial #591                // Method akka/stream/javadsl/Source$$anonfun$batchWeighted$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      18: new           #593                // class akka/stream/javadsl/Source$$anonfun$batchWeighted$2
      21: dup
      22: aload_0
      23: aload         4
      25: invokespecial #594                // Method akka/stream/javadsl/Source$$anonfun$batchWeighted$2."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      28: new           #596                // class akka/stream/javadsl/Source$$anonfun$batchWeighted$3
      31: dup
      32: aload_0
      33: aload         5
      35: invokespecial #597                // Method akka/stream/javadsl/Source$$anonfun$batchWeighted$3."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function2;)V
      38: invokevirtual #600                // Method akka/stream/scaladsl/Source.batchWeighted:(JLscala/Function1;Lscala/Function1;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      41: checkcast     #123                // class akka/stream/scaladsl/Source
      44: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      47: areturn

  public <U> akka.stream.javadsl.Source<U, Mat> expand(akka.japi.function.Function<Out, java.util.Iterator<U>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #603                // class akka/stream/javadsl/Source$$anonfun$expand$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #604                // Method akka/stream/javadsl/Source$$anonfun$expand$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      17: invokevirtual #606                // Method akka/stream/scaladsl/Source.expand:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #123                // class akka/stream/scaladsl/Source
      23: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      26: areturn

  public akka.stream.javadsl.Source<Out, Mat> buffer(int, akka.stream.OverflowStrategy);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: iload_1
       9: aload_2
      10: invokevirtual #611                // Method akka/stream/scaladsl/Source.buffer:(ILakka/stream/OverflowStrategy;)Lakka/stream/scaladsl/FlowOps;
      13: checkcast     #123                // class akka/stream/scaladsl/Source
      16: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      19: areturn

  public <U> akka.stream.javadsl.Source<U, Mat> transform(akka.japi.function.Creator<akka.stream.stage.Stage<Out, U>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #617                // class akka/stream/javadsl/Source$$anonfun$transform$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #618                // Method akka/stream/javadsl/Source$$anonfun$transform$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Creator;)V
      17: invokevirtual #620                // Method akka/stream/scaladsl/Source.transform:(Lscala/Function0;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #123                // class akka/stream/scaladsl/Source
      23: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      26: areturn

  public akka.stream.javadsl.Source<akka.japi.Pair<java.util.List<Out>, akka.stream.javadsl.Source<Out, akka.NotUsed>>, Mat> prefixAndTail(int);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: iload_1
       9: invokevirtual #624                // Method akka/stream/scaladsl/Source.prefixAndTail:(I)Lakka/stream/scaladsl/FlowOps;
      12: new           #626                // class akka/stream/javadsl/Source$$anonfun$prefixAndTail$1
      15: dup
      16: aload_0
      17: invokespecial #627                // Method akka/stream/javadsl/Source$$anonfun$prefixAndTail$1."<init>":(Lakka/stream/javadsl/Source;)V
      20: invokeinterface #363,  2          // InterfaceMethod akka/stream/scaladsl/FlowOps.map:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      25: checkcast     #123                // class akka/stream/scaladsl/Source
      28: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      31: areturn

  public <K> akka.stream.javadsl.SubSource<Out, Mat> groupBy(int, akka.japi.function.Function<Out, K>);
    Code:
       0: new           #631                // class akka/stream/javadsl/SubSource
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: iload_1
       9: new           #633                // class akka/stream/javadsl/Source$$anonfun$groupBy$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #634                // Method akka/stream/javadsl/Source$$anonfun$groupBy$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      18: invokevirtual #637                // Method akka/stream/scaladsl/Source.groupBy:(ILscala/Function1;)Lakka/stream/scaladsl/SubFlow;
      21: invokespecial #640                // Method akka/stream/javadsl/SubSource."<init>":(Lakka/stream/scaladsl/SubFlow;)V
      24: areturn

  public akka.stream.javadsl.SubSource<Out, Mat> splitWhen(akka.japi.function.Predicate<Out>);
    Code:
       0: new           #631                // class akka/stream/javadsl/SubSource
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #645                // class akka/stream/javadsl/Source$$anonfun$splitWhen$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #646                // Method akka/stream/javadsl/Source$$anonfun$splitWhen$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Predicate;)V
      17: invokevirtual #649                // Method akka/stream/scaladsl/Source.splitWhen:(Lscala/Function1;)Lakka/stream/scaladsl/SubFlow;
      20: invokespecial #640                // Method akka/stream/javadsl/SubSource."<init>":(Lakka/stream/scaladsl/SubFlow;)V
      23: areturn

  public <U> akka.stream.javadsl.SubSource<Out, Mat> splitAfter(akka.japi.function.Predicate<Out>);
    Code:
       0: new           #631                // class akka/stream/javadsl/SubSource
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #652                // class akka/stream/javadsl/Source$$anonfun$splitAfter$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #653                // Method akka/stream/javadsl/Source$$anonfun$splitAfter$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Predicate;)V
      17: invokevirtual #655                // Method akka/stream/scaladsl/Source.splitAfter:(Lscala/Function1;)Lakka/stream/scaladsl/SubFlow;
      20: invokespecial #640                // Method akka/stream/javadsl/SubSource."<init>":(Lakka/stream/scaladsl/SubFlow;)V
      23: areturn

  public <T, M> akka.stream.javadsl.Source<T, Mat> flatMapConcat(akka.japi.function.Function<Out, ? extends akka.stream.Graph<akka.stream.SourceShape<T>, M>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #658                // class akka/stream/javadsl/Source$$anonfun$flatMapConcat$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #659                // Method akka/stream/javadsl/Source$$anonfun$flatMapConcat$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      17: invokevirtual #661                // Method akka/stream/scaladsl/Source.flatMapConcat:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #123                // class akka/stream/scaladsl/Source
      23: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      26: areturn

  public <T, M> akka.stream.javadsl.Source<T, Mat> flatMapMerge(int, akka.japi.function.Function<Out, ? extends akka.stream.Graph<akka.stream.SourceShape<T>, M>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: iload_1
       9: new           #664                // class akka/stream/javadsl/Source$$anonfun$flatMapMerge$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #665                // Method akka/stream/javadsl/Source$$anonfun$flatMapMerge$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      18: invokevirtual #667                // Method akka/stream/scaladsl/Source.flatMapMerge:(ILscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #123                // class akka/stream/scaladsl/Source
      24: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      27: areturn

  public akka.stream.javadsl.Source<Out, Mat> initialTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #671                // Method akka/stream/scaladsl/Source.initialTimeout:(Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public akka.stream.javadsl.Source<Out, Mat> completionTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #675                // Method akka/stream/scaladsl/Source.completionTimeout:(Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public akka.stream.javadsl.Source<Out, Mat> idleTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #678                // Method akka/stream/scaladsl/Source.idleTimeout:(Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public akka.stream.javadsl.Source<Out, Mat> backpressureTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #681                // Method akka/stream/scaladsl/Source.backpressureTimeout:(Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public <U> akka.stream.javadsl.Source<U, Mat> keepAlive(scala.concurrent.duration.FiniteDuration, akka.japi.function.Creator<U>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: new           #685                // class akka/stream/javadsl/Source$$anonfun$keepAlive$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #686                // Method akka/stream/javadsl/Source$$anonfun$keepAlive$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Creator;)V
      18: invokevirtual #689                // Method akka/stream/scaladsl/Source.keepAlive:(Lscala/concurrent/duration/FiniteDuration;Lscala/Function0;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #123                // class akka/stream/scaladsl/Source
      24: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      27: areturn

  public akka.stream.javadsl.Source<Out, Mat> throttle(int, scala.concurrent.duration.FiniteDuration, int, akka.stream.ThrottleMode);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: iload_1
       9: aload_2
      10: iload_3
      11: aload         4
      13: invokevirtual #696                // Method akka/stream/scaladsl/Source.throttle:(ILscala/concurrent/duration/FiniteDuration;ILakka/stream/ThrottleMode;)Lakka/stream/scaladsl/FlowOps;
      16: checkcast     #123                // class akka/stream/scaladsl/Source
      19: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      22: areturn

  public akka.stream.javadsl.Source<Out, Mat> throttle(int, scala.concurrent.duration.FiniteDuration, int, akka.japi.function.Function<Out, java.lang.Integer>, akka.stream.ThrottleMode);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: iload_1
       9: aload_2
      10: iload_3
      11: new           #704                // class akka/stream/javadsl/Source$$anonfun$throttle$1
      14: dup
      15: aload_0
      16: aload         4
      18: invokespecial #705                // Method akka/stream/javadsl/Source$$anonfun$throttle$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      21: aload         5
      23: invokevirtual #708                // Method akka/stream/scaladsl/Source.throttle:(ILscala/concurrent/duration/FiniteDuration;ILscala/Function1;Lakka/stream/ThrottleMode;)Lakka/stream/scaladsl/FlowOps;
      26: checkcast     #123                // class akka/stream/scaladsl/Source
      29: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      32: areturn

  public akka.stream.javadsl.Source<Out, Mat> detach();
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: invokevirtual #713                // Method akka/stream/scaladsl/Source.detach:()Lakka/stream/scaladsl/FlowOps;
      11: checkcast     #123                // class akka/stream/scaladsl/Source
      14: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      17: areturn

  public <M> akka.stream.javadsl.Source<Out, M> watchTermination(akka.japi.function.Function2<Mat, java.util.concurrent.CompletionStage<akka.Done>, M>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: new           #716                // class akka/stream/javadsl/Source$$anonfun$watchTermination$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #717                // Method akka/stream/javadsl/Source$$anonfun$watchTermination$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function2;)V
      17: invokevirtual #720                // Method akka/stream/scaladsl/Source.watchTermination:(Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      20: checkcast     #123                // class akka/stream/scaladsl/Source
      23: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      26: areturn

  public <M> akka.stream.javadsl.Source<Out, M> monitor(akka.japi.function.Function2<Mat, akka.stream.FlowMonitor<Out>, M>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: getstatic     #166                // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      11: aload_1
      12: invokevirtual #170                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      15: invokevirtual #723                // Method akka/stream/scaladsl/Source.monitor:(Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      18: checkcast     #123                // class akka/stream/scaladsl/Source
      21: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      24: areturn

  public akka.stream.javadsl.Source<Out, Mat> initialDelay(scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #726                // Method akka/stream/scaladsl/Source.initialDelay:(Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #123                // class akka/stream/scaladsl/Source
      15: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      18: areturn

  public akka.stream.javadsl.Source<Out, Mat> withAttributes(akka.stream.Attributes);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #731                // Method akka/stream/scaladsl/Source.withAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Source;
      12: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      15: areturn

  public akka.stream.javadsl.Source<Out, Mat> addAttributes(akka.stream.Attributes);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #736                // Method akka/stream/scaladsl/Source.addAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Source;
      12: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      15: areturn

  public akka.stream.javadsl.Source<Out, Mat> named(java.lang.String);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: invokevirtual #741                // Method akka/stream/scaladsl/Source.named:(Ljava/lang/String;)Lakka/stream/scaladsl/Source;
      12: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      15: areturn

  public akka.stream.javadsl.Source<Out, Mat> async();
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: invokevirtual #746                // Method akka/stream/scaladsl/Source.async:()Lakka/stream/scaladsl/Source;
      11: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      14: areturn

  public akka.stream.javadsl.Source<Out, Mat> log(java.lang.String, akka.japi.function.Function<Out, java.lang.Object>, akka.event.LoggingAdapter);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: getfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       8: aload_1
       9: new           #750                // class akka/stream/javadsl/Source$$anonfun$log$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #751                // Method akka/stream/javadsl/Source$$anonfun$log$1."<init>":(Lakka/stream/javadsl/Source;Lakka/japi/function/Function;)V
      18: aload_3
      19: invokevirtual #754                // Method akka/stream/scaladsl/Source.log:(Ljava/lang/String;Lscala/Function1;Lakka/event/LoggingAdapter;)Lakka/stream/scaladsl/FlowOps;
      22: checkcast     #123                // class akka/stream/scaladsl/Source
      25: invokespecial #151                // Method "<init>":(Lakka/stream/scaladsl/Source;)V
      28: areturn

  public akka.stream.javadsl.Source<Out, Mat> log(java.lang.String, akka.japi.function.Function<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: invokevirtual #759                // Method log:(Ljava/lang/String;Lakka/japi/function/Function;Lakka/event/LoggingAdapter;)Lakka/stream/javadsl/Source;
       7: areturn

  public akka.stream.javadsl.Source<Out, Mat> log(java.lang.String, akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #765                // Field akka/stream/impl/ConstantFun$.MODULE$:Lakka/stream/impl/ConstantFun$;
       5: invokevirtual #769                // Method akka/stream/impl/ConstantFun$.javaIdentityFunction:()Lakka/japi/function/Function;
       8: aload_2
       9: invokevirtual #759                // Method log:(Ljava/lang/String;Lakka/japi/function/Function;Lakka/event/LoggingAdapter;)Lakka/stream/javadsl/Source;
      12: areturn

  public akka.stream.javadsl.Source<Out, Mat> log(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #765                // Field akka/stream/impl/ConstantFun$.MODULE$:Lakka/stream/impl/ConstantFun$;
       5: invokevirtual #769                // Method akka/stream/impl/ConstantFun$.javaIdentityFunction:()Lakka/japi/function/Function;
       8: aconst_null
       9: invokevirtual #759                // Method log:(Ljava/lang/String;Lakka/japi/function/Function;Lakka/event/LoggingAdapter;)Lakka/stream/javadsl/Source;
      12: areturn

  public akka.stream.Graph async();
    Code:
       0: aload_0
       1: invokevirtual #772                // Method async:()Lakka/stream/javadsl/Source;
       4: areturn

  public akka.stream.Graph named(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #775                // Method named:(Ljava/lang/String;)Lakka/stream/javadsl/Source;
       5: areturn

  public akka.stream.Graph addAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #778                // Method addAttributes:(Lakka/stream/Attributes;)Lakka/stream/javadsl/Source;
       5: areturn

  public akka.stream.Graph withAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #780                // Method withAttributes:(Lakka/stream/Attributes;)Lakka/stream/javadsl/Source;
       5: areturn

  public akka.stream.Shape shape();
    Code:
       0: aload_0
       1: invokevirtual #782                // Method shape:()Lakka/stream/SourceShape;
       4: areturn

  public akka.stream.javadsl.Source(akka.stream.scaladsl.Source<Out, Mat>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #121                // Field delegate:Lakka/stream/scaladsl/Source;
       5: aload_0
       6: invokespecial #785                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #791                // Method akka/stream/Graph$class.$init$:(Lakka/stream/Graph;)V
      13: return
}
