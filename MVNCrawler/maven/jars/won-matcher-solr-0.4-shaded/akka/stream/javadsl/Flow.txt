Compiled from "Flow.scala"
public final class akka.stream.javadsl.Flow<In, Out, Mat> implements akka.stream.Graph<akka.stream.FlowShape<In, Out>, Mat> {
  private final akka.stream.scaladsl.Flow<In, Out, Mat> delegate;

  public static <I, O, M1, M2, M> akka.stream.javadsl.Flow<I, O, M> fromSinkAndSourceMat(akka.stream.Graph<akka.stream.SinkShape<I>, M1>, akka.stream.Graph<akka.stream.SourceShape<O>, M2>, akka.japi.function.Function2<M1, M2, M>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Flow$.MODULE$:Lakka/stream/javadsl/Flow$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #21                 // Method akka/stream/javadsl/Flow$.fromSinkAndSourceMat:(Lakka/stream/Graph;Lakka/stream/Graph;Lakka/japi/function/Function2;)Lakka/stream/javadsl/Flow;
       9: areturn

  public static <I, O> akka.stream.javadsl.Flow<I, O, akka.NotUsed> fromSinkAndSource(akka.stream.Graph<akka.stream.SinkShape<I>, ?>, akka.stream.Graph<akka.stream.SourceShape<O>, ?>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Flow$.MODULE$:Lakka/stream/javadsl/Flow$;
       3: aload_0
       4: aload_1
       5: invokevirtual #25                 // Method akka/stream/javadsl/Flow$.fromSinkAndSource:(Lakka/stream/Graph;Lakka/stream/Graph;)Lakka/stream/javadsl/Flow;
       8: areturn

  public static <I, O, M> akka.stream.javadsl.Flow<I, O, M> fromGraph(akka.stream.Graph<akka.stream.FlowShape<I, O>, M>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Flow$.MODULE$:Lakka/stream/javadsl/Flow$;
       3: aload_0
       4: invokevirtual #29                 // Method akka/stream/javadsl/Flow$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/javadsl/Flow;
       7: areturn

  public static <T> akka.stream.javadsl.Flow<T, T, akka.NotUsed> of(java.lang.Class<T>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Flow$.MODULE$:Lakka/stream/javadsl/Flow$;
       3: aload_0
       4: invokevirtual #33                 // Method akka/stream/javadsl/Flow$.of:(Ljava/lang/Class;)Lakka/stream/javadsl/Flow;
       7: areturn

  public static <I, O> akka.stream.javadsl.Flow<I, O, akka.NotUsed> fromFunction(akka.japi.function.Function<I, O>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Flow$.MODULE$:Lakka/stream/javadsl/Flow$;
       3: aload_0
       4: invokevirtual #37                 // Method akka/stream/javadsl/Flow$.fromFunction:(Lakka/japi/function/Function;)Lakka/stream/javadsl/Flow;
       7: areturn

  public static <I, O, Mat> akka.stream.javadsl.Flow<I, O, Mat> fromProcessorMat(akka.japi.function.Creator<akka.japi.Pair<org.reactivestreams.Processor<I, O>, Mat>>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Flow$.MODULE$:Lakka/stream/javadsl/Flow$;
       3: aload_0
       4: invokevirtual #41                 // Method akka/stream/javadsl/Flow$.fromProcessorMat:(Lakka/japi/function/Creator;)Lakka/stream/javadsl/Flow;
       7: areturn

  public static <I, O> akka.stream.javadsl.Flow<I, O, akka.NotUsed> fromProcessor(akka.japi.function.Creator<org.reactivestreams.Processor<I, O>>);
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Flow$.MODULE$:Lakka/stream/javadsl/Flow$;
       3: aload_0
       4: invokevirtual #44                 // Method akka/stream/javadsl/Flow$.fromProcessor:(Lakka/japi/function/Creator;)Lakka/stream/javadsl/Flow;
       7: areturn

  public static <T> akka.stream.javadsl.Flow<T, T, akka.NotUsed> create();
    Code:
       0: getstatic     #19                 // Field akka/stream/javadsl/Flow$.MODULE$:Lakka/stream/javadsl/Flow$;
       3: invokevirtual #48                 // Method akka/stream/javadsl/Flow$.create:()Lakka/stream/javadsl/Flow;
       6: areturn

  public akka.stream.FlowShape<In, Out> shape();
    Code:
       0: aload_0
       1: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       4: invokevirtual #59                 // Method akka/stream/scaladsl/Flow.shape:()Lakka/stream/FlowShape;
       7: areturn

  public akka.stream.impl.StreamLayout$Module module();
    Code:
       0: aload_0
       1: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       4: invokevirtual #65                 // Method akka/stream/scaladsl/Flow.module:()Lakka/stream/impl/StreamLayout$Module;
       7: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       4: invokevirtual #69                 // Method akka/stream/scaladsl/Flow.toString:()Ljava/lang/String;
       7: areturn

  public akka.stream.scaladsl.Flow<In, Out, Mat> asScala();
    Code:
       0: aload_0
       1: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       4: areturn

  public <Mat2> akka.stream.javadsl.Flow<In, Out, Mat2> mapMaterializedValue(akka.japi.function.Function<Mat, Mat2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #74                 // class akka/stream/javadsl/Flow$$anonfun$mapMaterializedValue$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #78                 // Method akka/stream/javadsl/Flow$$anonfun$mapMaterializedValue$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      17: invokevirtual #81                 // Method akka/stream/scaladsl/Flow.mapMaterializedValue:(Lscala/Function1;)Lakka/stream/scaladsl/Flow;
      20: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      23: areturn

  public <T, M> akka.stream.javadsl.Flow<In, T, Mat> via(akka.stream.Graph<akka.stream.FlowShape<Out, T>, M>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #90                 // Method akka/stream/scaladsl/Flow.via:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Flow;
      12: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      15: areturn

  public <T, M, M2> akka.stream.javadsl.Flow<In, T, M2> viaMat(akka.stream.Graph<akka.stream.FlowShape<Out, T>, M>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #106                // Method akka/stream/scaladsl/Flow.viaMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/Flow;
      19: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      22: areturn

  public akka.stream.javadsl.Sink<In, Mat> to(akka.stream.Graph<akka.stream.SinkShape<Out>, ?>);
    Code:
       0: new           #112                // class akka/stream/javadsl/Sink
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #115                // Method akka/stream/scaladsl/Flow.to:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Sink;
      12: invokespecial #118                // Method akka/stream/javadsl/Sink."<init>":(Lakka/stream/scaladsl/Sink;)V
      15: areturn

  public <M, M2> akka.stream.javadsl.Sink<In, M2> toMat(akka.stream.Graph<akka.stream.SinkShape<Out>, M>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: new           #112                // class akka/stream/javadsl/Sink
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #124                // Method akka/stream/scaladsl/Flow.toMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/Sink;
      19: invokespecial #118                // Method akka/stream/javadsl/Sink."<init>":(Lakka/stream/scaladsl/Sink;)V
      22: areturn

  public <M> akka.stream.javadsl.RunnableGraph<Mat> join(akka.stream.Graph<akka.stream.FlowShape<Out, In>, M>);
    Code:
       0: getstatic     #131                // Field akka/stream/javadsl/RunnableGraph$.MODULE$:Lakka/stream/javadsl/RunnableGraph$;
       3: aload_0
       4: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       7: aload_1
       8: invokevirtual #134                // Method akka/stream/scaladsl/Flow.join:(Lakka/stream/Graph;)Lakka/stream/scaladsl/RunnableGraph;
      11: invokevirtual #136                // Method akka/stream/javadsl/RunnableGraph$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/javadsl/RunnableGraph;
      14: areturn

  public <M, M2> akka.stream.javadsl.RunnableGraph<M2> joinMat(akka.stream.Graph<akka.stream.FlowShape<Out, In>, M>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: getstatic     #131                // Field akka/stream/javadsl/RunnableGraph$.MODULE$:Lakka/stream/javadsl/RunnableGraph$;
       3: aload_0
       4: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       7: aload_1
       8: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      11: aload_2
      12: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      15: invokevirtual #141                // Method akka/stream/scaladsl/Flow.joinMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/RunnableGraph;
      18: invokevirtual #136                // Method akka/stream/javadsl/RunnableGraph$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/javadsl/RunnableGraph;
      21: areturn

  public <I2, O2, Mat2> akka.stream.javadsl.Flow<I2, O2, Mat> join(akka.stream.Graph<akka.stream.BidiShape<Out, O2, I2, In>, Mat2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #143                // Method akka/stream/scaladsl/Flow.join:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Flow;
      12: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      15: areturn

  public <I2, O2, Mat2, M> akka.stream.javadsl.Flow<I2, O2, M> joinMat(akka.stream.Graph<akka.stream.BidiShape<Out, O2, I2, In>, Mat2>, akka.japi.function.Function2<Mat, Mat2, M>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #146                // Method akka/stream/scaladsl/Flow.joinMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/Flow;
      19: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      22: areturn

  public <T, U> akka.japi.Pair<T, U> runWith(akka.stream.Graph<akka.stream.SourceShape<In>, T>, akka.stream.Graph<akka.stream.SinkShape<Out>, U>, akka.stream.Materializer);
    Code:
       0: aload_0
       1: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #151                // Method akka/stream/scaladsl/Flow.runWith:(Lakka/stream/Graph;Lakka/stream/Graph;Lakka/stream/Materializer;)Lscala/Tuple2;
      10: astore        5
      12: aload         5
      14: ifnull        74
      17: aload         5
      19: invokevirtual #157                // Method scala/Tuple2._1:()Ljava/lang/Object;
      22: astore        6
      24: aload         5
      26: invokevirtual #160                // Method scala/Tuple2._2:()Ljava/lang/Object;
      29: astore        7
      31: new           #153                // class scala/Tuple2
      34: dup
      35: aload         6
      37: aload         7
      39: invokespecial #163                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      42: astore        8
      44: aload         8
      46: astore        4
      48: aload         4
      50: invokevirtual #157                // Method scala/Tuple2._1:()Ljava/lang/Object;
      53: astore        9
      55: aload         4
      57: invokevirtual #160                // Method scala/Tuple2._2:()Ljava/lang/Object;
      60: astore        10
      62: new           #165                // class akka/japi/Pair
      65: dup
      66: aload         9
      68: aload         10
      70: invokespecial #166                // Method akka/japi/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      73: areturn
      74: new           #168                // class scala/MatchError
      77: dup
      78: aload         5
      80: invokespecial #171                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      83: athrow

  public <T> akka.stream.javadsl.Flow<In, T, Mat> map(akka.japi.function.Function<Out, T>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #180                // class akka/stream/javadsl/Flow$$anonfun$map$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #181                // Method akka/stream/javadsl/Flow$$anonfun$map$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      17: invokevirtual #184                // Method akka/stream/scaladsl/Flow.map:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #57                 // class akka/stream/scaladsl/Flow
      23: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      26: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> mapConcat(akka.japi.function.Function<Out, java.lang.Iterable<T>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #187                // class akka/stream/javadsl/Flow$$anonfun$mapConcat$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #188                // Method akka/stream/javadsl/Flow$$anonfun$mapConcat$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      17: invokevirtual #190                // Method akka/stream/scaladsl/Flow.mapConcat:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #57                 // class akka/stream/scaladsl/Flow
      23: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      26: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> statefulMapConcat(akka.japi.function.Creator<akka.japi.function.Function<Out, java.lang.Iterable<T>>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #193                // class akka/stream/javadsl/Flow$$anonfun$statefulMapConcat$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #196                // Method akka/stream/javadsl/Flow$$anonfun$statefulMapConcat$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Creator;)V
      17: invokevirtual #199                // Method akka/stream/scaladsl/Flow.statefulMapConcat:(Lscala/Function0;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #57                 // class akka/stream/scaladsl/Flow
      23: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      26: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> mapAsync(int, akka.japi.function.Function<Out, java.util.concurrent.CompletionStage<T>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: iload_1
       9: new           #204                // class akka/stream/javadsl/Flow$$anonfun$mapAsync$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #205                // Method akka/stream/javadsl/Flow$$anonfun$mapAsync$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      18: invokevirtual #208                // Method akka/stream/scaladsl/Flow.mapAsync:(ILscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #57                 // class akka/stream/scaladsl/Flow
      24: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      27: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> mapAsyncUnordered(int, akka.japi.function.Function<Out, java.util.concurrent.CompletionStage<T>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: iload_1
       9: new           #213                // class akka/stream/javadsl/Flow$$anonfun$mapAsyncUnordered$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #214                // Method akka/stream/javadsl/Flow$$anonfun$mapAsyncUnordered$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      18: invokevirtual #216                // Method akka/stream/scaladsl/Flow.mapAsyncUnordered:(ILscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #57                 // class akka/stream/scaladsl/Flow
      24: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      27: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> filter(akka.japi.function.Predicate<Out>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #220                // class akka/stream/javadsl/Flow$$anonfun$filter$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #223                // Method akka/stream/javadsl/Flow$$anonfun$filter$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Predicate;)V
      17: invokevirtual #225                // Method akka/stream/scaladsl/Flow.filter:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #57                 // class akka/stream/scaladsl/Flow
      23: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      26: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> filterNot(akka.japi.function.Predicate<Out>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #230                // class akka/stream/javadsl/Flow$$anonfun$filterNot$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #231                // Method akka/stream/javadsl/Flow$$anonfun$filterNot$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Predicate;)V
      17: invokevirtual #233                // Method akka/stream/scaladsl/Flow.filterNot:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #57                 // class akka/stream/scaladsl/Flow
      23: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      26: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> collect(scala.PartialFunction<Out, T>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #238                // Method akka/stream/scaladsl/Flow.collect:(Lscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public akka.stream.javadsl.Flow<In, java.util.List<Out>, Mat> grouped(int);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: iload_1
       9: invokevirtual #245                // Method akka/stream/scaladsl/Flow.grouped:(I)Lakka/stream/scaladsl/FlowOps;
      12: new           #247                // class akka/stream/javadsl/Flow$$anonfun$grouped$1
      15: dup
      16: aload_0
      17: invokespecial #250                // Method akka/stream/javadsl/Flow$$anonfun$grouped$1."<init>":(Lakka/stream/javadsl/Flow;)V
      20: invokeinterface #253,  2          // InterfaceMethod akka/stream/scaladsl/FlowOps.map:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      25: checkcast     #57                 // class akka/stream/scaladsl/Flow
      28: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      31: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> limit(long);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: lload_1
       9: invokevirtual #259                // Method akka/stream/scaladsl/Flow.limit:(J)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> limitWeighted(long, akka.japi.function.Function<Out, java.lang.Object>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: lload_1
       9: new           #264                // class akka/stream/javadsl/Flow$$anonfun$limitWeighted$1
      12: dup
      13: aload_0
      14: aload_3
      15: invokespecial #265                // Method akka/stream/javadsl/Flow$$anonfun$limitWeighted$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      18: invokevirtual #268                // Method akka/stream/scaladsl/Flow.limitWeighted:(JLscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #57                 // class akka/stream/scaladsl/Flow
      24: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      27: areturn

  public akka.stream.javadsl.Flow<In, java.util.List<Out>, Mat> sliding(int, int);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: iload_1
       9: iload_2
      10: invokevirtual #274                // Method akka/stream/scaladsl/Flow.sliding:(II)Lakka/stream/scaladsl/FlowOps;
      13: new           #276                // class akka/stream/javadsl/Flow$$anonfun$sliding$1
      16: dup
      17: aload_0
      18: invokespecial #277                // Method akka/stream/javadsl/Flow$$anonfun$sliding$1."<init>":(Lakka/stream/javadsl/Flow;)V
      21: invokeinterface #253,  2          // InterfaceMethod akka/stream/scaladsl/FlowOps.map:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      26: checkcast     #57                 // class akka/stream/scaladsl/Flow
      29: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      32: areturn

  public int sliding$default$2();
    Code:
       0: iconst_1
       1: ireturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> scan(T, akka.japi.function.Function2<T, Out, T>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: new           #284                // class akka/stream/javadsl/Flow$$anonfun$scan$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #287                // Method akka/stream/javadsl/Flow$$anonfun$scan$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function2;)V
      18: invokevirtual #290                // Method akka/stream/scaladsl/Flow.scan:(Ljava/lang/Object;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #57                 // class akka/stream/scaladsl/Flow
      24: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      27: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> fold(T, akka.japi.function.Function2<T, Out, T>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: new           #294                // class akka/stream/javadsl/Flow$$anonfun$fold$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #295                // Method akka/stream/javadsl/Flow$$anonfun$fold$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function2;)V
      18: invokevirtual #297                // Method akka/stream/scaladsl/Flow.fold:(Ljava/lang/Object;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #57                 // class akka/stream/scaladsl/Flow
      24: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      27: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> foldAsync(T, akka.japi.function.Function2<T, Out, java.util.concurrent.CompletionStage<T>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: new           #300                // class akka/stream/javadsl/Flow$$anonfun$foldAsync$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #301                // Method akka/stream/javadsl/Flow$$anonfun$foldAsync$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function2;)V
      18: invokevirtual #303                // Method akka/stream/scaladsl/Flow.foldAsync:(Ljava/lang/Object;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #57                 // class akka/stream/scaladsl/Flow
      24: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      27: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> reduce(akka.japi.function.Function2<Out, Out, Out>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #307                // class akka/stream/javadsl/Flow$$anonfun$reduce$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #308                // Method akka/stream/javadsl/Flow$$anonfun$reduce$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function2;)V
      17: invokevirtual #311                // Method akka/stream/scaladsl/Flow.reduce:(Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #57                 // class akka/stream/scaladsl/Flow
      23: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      26: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> intersperse(T, T, T);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: aload_2
      10: aload_3
      11: invokevirtual #316                // Method akka/stream/scaladsl/Flow.intersperse:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lakka/stream/scaladsl/FlowOps;
      14: checkcast     #57                 // class akka/stream/scaladsl/Flow
      17: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      20: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> intersperse(T);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #323                // Method akka/stream/scaladsl/Flow.intersperse:(Ljava/lang/Object;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public akka.stream.javadsl.Flow<In, java.util.List<Out>, Mat> groupedWithin(int, scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: iload_1
       9: aload_2
      10: invokevirtual #328                // Method akka/stream/scaladsl/Flow.groupedWithin:(ILscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      13: new           #330                // class akka/stream/javadsl/Flow$$anonfun$groupedWithin$1
      16: dup
      17: aload_0
      18: invokespecial #331                // Method akka/stream/javadsl/Flow$$anonfun$groupedWithin$1."<init>":(Lakka/stream/javadsl/Flow;)V
      21: invokeinterface #253,  2          // InterfaceMethod akka/stream/scaladsl/FlowOps.map:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      26: checkcast     #57                 // class akka/stream/scaladsl/Flow
      29: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      32: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> delay(scala.concurrent.duration.FiniteDuration, akka.stream.DelayOverflowStrategy);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: aload_2
      10: invokevirtual #338                // Method akka/stream/scaladsl/Flow.delay:(Lscala/concurrent/duration/FiniteDuration;Lakka/stream/DelayOverflowStrategy;)Lakka/stream/scaladsl/FlowOps;
      13: checkcast     #57                 // class akka/stream/scaladsl/Flow
      16: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      19: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> drop(long);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: lload_1
       9: invokevirtual #343                // Method akka/stream/scaladsl/Flow.drop:(J)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> dropWithin(scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #348                // Method akka/stream/scaladsl/Flow.dropWithin:(Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> takeWhile(akka.japi.function.Predicate<Out>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #351                // class akka/stream/javadsl/Flow$$anonfun$takeWhile$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #352                // Method akka/stream/javadsl/Flow$$anonfun$takeWhile$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Predicate;)V
      17: invokevirtual #354                // Method akka/stream/scaladsl/Flow.takeWhile:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #57                 // class akka/stream/scaladsl/Flow
      23: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      26: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> dropWhile(akka.japi.function.Predicate<Out>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #357                // class akka/stream/javadsl/Flow$$anonfun$dropWhile$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #358                // Method akka/stream/javadsl/Flow$$anonfun$dropWhile$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Predicate;)V
      17: invokevirtual #360                // Method akka/stream/scaladsl/Flow.dropWhile:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #57                 // class akka/stream/scaladsl/Flow
      23: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      26: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> recover(scala.PartialFunction<java.lang.Throwable, T>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #363                // Method akka/stream/scaladsl/Flow.recover:(Lscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> recoverWith(scala.PartialFunction<java.lang.Throwable, ? extends akka.stream.Graph<akka.stream.SourceShape<T>, akka.NotUsed>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #366                // Method akka/stream/scaladsl/Flow.recoverWith:(Lscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> recoverWithRetries(int, scala.PartialFunction<java.lang.Throwable, ? extends akka.stream.Graph<akka.stream.SourceShape<T>, akka.NotUsed>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: iload_1
       9: aload_2
      10: invokevirtual #371                // Method akka/stream/scaladsl/Flow.recoverWithRetries:(ILscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
      13: checkcast     #57                 // class akka/stream/scaladsl/Flow
      16: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      19: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> take(long);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: lload_1
       9: invokevirtual #375                // Method akka/stream/scaladsl/Flow.take:(J)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> takeWithin(scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #378                // Method akka/stream/scaladsl/Flow.takeWithin:(Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public <S> akka.stream.javadsl.Flow<In, S, Mat> conflateWithSeed(akka.japi.function.Function<Out, S>, akka.japi.function.Function2<S, Out, S>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #382                // class akka/stream/javadsl/Flow$$anonfun$conflateWithSeed$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #383                // Method akka/stream/javadsl/Flow$$anonfun$conflateWithSeed$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      17: new           #385                // class akka/stream/javadsl/Flow$$anonfun$conflateWithSeed$2
      20: dup
      21: aload_0
      22: aload_2
      23: invokespecial #386                // Method akka/stream/javadsl/Flow$$anonfun$conflateWithSeed$2."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function2;)V
      26: invokevirtual #389                // Method akka/stream/scaladsl/Flow.conflateWithSeed:(Lscala/Function1;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      29: checkcast     #57                 // class akka/stream/scaladsl/Flow
      32: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      35: areturn

  public <O2> akka.stream.javadsl.Flow<In, O2, Mat> conflate(akka.japi.function.Function2<O2, O2, O2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #394                // class akka/stream/javadsl/Flow$$anonfun$conflate$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #395                // Method akka/stream/javadsl/Flow$$anonfun$conflate$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function2;)V
      17: invokevirtual #397                // Method akka/stream/scaladsl/Flow.conflate:(Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #57                 // class akka/stream/scaladsl/Flow
      23: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      26: areturn

  public <S> akka.stream.javadsl.Flow<In, S, Mat> batch(long, akka.japi.function.Function<Out, S>, akka.japi.function.Function2<S, Out, S>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: lload_1
       9: new           #401                // class akka/stream/javadsl/Flow$$anonfun$batch$1
      12: dup
      13: aload_0
      14: aload_3
      15: invokespecial #402                // Method akka/stream/javadsl/Flow$$anonfun$batch$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      18: new           #404                // class akka/stream/javadsl/Flow$$anonfun$batch$2
      21: dup
      22: aload_0
      23: aload         4
      25: invokespecial #405                // Method akka/stream/javadsl/Flow$$anonfun$batch$2."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function2;)V
      28: invokevirtual #408                // Method akka/stream/scaladsl/Flow.batch:(JLscala/Function1;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      31: checkcast     #57                 // class akka/stream/scaladsl/Flow
      34: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      37: areturn

  public <S> akka.stream.javadsl.Flow<In, S, Mat> batchWeighted(long, akka.japi.function.Function<Out, java.lang.Object>, akka.japi.function.Function<Out, S>, akka.japi.function.Function2<S, Out, S>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: lload_1
       9: new           #413                // class akka/stream/javadsl/Flow$$anonfun$batchWeighted$1
      12: dup
      13: aload_0
      14: aload_3
      15: invokespecial #414                // Method akka/stream/javadsl/Flow$$anonfun$batchWeighted$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      18: new           #416                // class akka/stream/javadsl/Flow$$anonfun$batchWeighted$2
      21: dup
      22: aload_0
      23: aload         4
      25: invokespecial #417                // Method akka/stream/javadsl/Flow$$anonfun$batchWeighted$2."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      28: new           #419                // class akka/stream/javadsl/Flow$$anonfun$batchWeighted$3
      31: dup
      32: aload_0
      33: aload         5
      35: invokespecial #420                // Method akka/stream/javadsl/Flow$$anonfun$batchWeighted$3."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function2;)V
      38: invokevirtual #423                // Method akka/stream/scaladsl/Flow.batchWeighted:(JLscala/Function1;Lscala/Function1;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      41: checkcast     #57                 // class akka/stream/scaladsl/Flow
      44: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      47: areturn

  public <U> akka.stream.javadsl.Flow<In, U, Mat> expand(akka.japi.function.Function<Out, java.util.Iterator<U>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #426                // class akka/stream/javadsl/Flow$$anonfun$expand$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #427                // Method akka/stream/javadsl/Flow$$anonfun$expand$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      17: invokevirtual #429                // Method akka/stream/scaladsl/Flow.expand:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #57                 // class akka/stream/scaladsl/Flow
      23: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      26: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> buffer(int, akka.stream.OverflowStrategy);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: iload_1
       9: aload_2
      10: invokevirtual #435                // Method akka/stream/scaladsl/Flow.buffer:(ILakka/stream/OverflowStrategy;)Lakka/stream/scaladsl/FlowOps;
      13: checkcast     #57                 // class akka/stream/scaladsl/Flow
      16: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      19: areturn

  public <U> akka.stream.javadsl.Flow<In, U, Mat> transform(akka.japi.function.Creator<akka.stream.stage.Stage<Out, U>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #441                // class akka/stream/javadsl/Flow$$anonfun$transform$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #442                // Method akka/stream/javadsl/Flow$$anonfun$transform$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Creator;)V
      17: invokevirtual #444                // Method akka/stream/scaladsl/Flow.transform:(Lscala/Function0;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #57                 // class akka/stream/scaladsl/Flow
      23: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      26: areturn

  public akka.stream.javadsl.Flow<In, akka.japi.Pair<java.util.List<Out>, akka.stream.javadsl.Source<Out, akka.NotUsed>>, Mat> prefixAndTail(int);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: iload_1
       9: invokevirtual #448                // Method akka/stream/scaladsl/Flow.prefixAndTail:(I)Lakka/stream/scaladsl/FlowOps;
      12: new           #450                // class akka/stream/javadsl/Flow$$anonfun$prefixAndTail$1
      15: dup
      16: aload_0
      17: invokespecial #451                // Method akka/stream/javadsl/Flow$$anonfun$prefixAndTail$1."<init>":(Lakka/stream/javadsl/Flow;)V
      20: invokeinterface #253,  2          // InterfaceMethod akka/stream/scaladsl/FlowOps.map:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      25: checkcast     #57                 // class akka/stream/scaladsl/Flow
      28: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      31: areturn

  public <K> akka.stream.javadsl.SubFlow<In, Out, Mat> groupBy(int, akka.japi.function.Function<Out, K>);
    Code:
       0: new           #455                // class akka/stream/javadsl/SubFlow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: iload_1
       9: new           #457                // class akka/stream/javadsl/Flow$$anonfun$groupBy$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #458                // Method akka/stream/javadsl/Flow$$anonfun$groupBy$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      18: invokevirtual #461                // Method akka/stream/scaladsl/Flow.groupBy:(ILscala/Function1;)Lakka/stream/scaladsl/SubFlow;
      21: invokespecial #464                // Method akka/stream/javadsl/SubFlow."<init>":(Lakka/stream/scaladsl/SubFlow;)V
      24: areturn

  public akka.stream.javadsl.SubFlow<In, Out, Mat> splitWhen(akka.japi.function.Predicate<Out>);
    Code:
       0: new           #455                // class akka/stream/javadsl/SubFlow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #469                // class akka/stream/javadsl/Flow$$anonfun$splitWhen$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #470                // Method akka/stream/javadsl/Flow$$anonfun$splitWhen$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Predicate;)V
      17: invokevirtual #473                // Method akka/stream/scaladsl/Flow.splitWhen:(Lscala/Function1;)Lakka/stream/scaladsl/SubFlow;
      20: invokespecial #464                // Method akka/stream/javadsl/SubFlow."<init>":(Lakka/stream/scaladsl/SubFlow;)V
      23: areturn

  public akka.stream.javadsl.SubFlow<In, Out, Mat> splitWhen(akka.stream.SubstreamCancelStrategy, akka.japi.function.Predicate<Out>);
    Code:
       0: new           #455                // class akka/stream/javadsl/SubFlow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: new           #476                // class akka/stream/javadsl/Flow$$anonfun$splitWhen$2
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #477                // Method akka/stream/javadsl/Flow$$anonfun$splitWhen$2."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Predicate;)V
      18: invokevirtual #480                // Method akka/stream/scaladsl/Flow.splitWhen:(Lakka/stream/SubstreamCancelStrategy;Lscala/Function1;)Lakka/stream/scaladsl/SubFlow;
      21: invokespecial #464                // Method akka/stream/javadsl/SubFlow."<init>":(Lakka/stream/scaladsl/SubFlow;)V
      24: areturn

  public <U> akka.stream.javadsl.SubFlow<In, Out, Mat> splitAfter(akka.japi.function.Predicate<Out>);
    Code:
       0: new           #455                // class akka/stream/javadsl/SubFlow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #485                // class akka/stream/javadsl/Flow$$anonfun$splitAfter$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #486                // Method akka/stream/javadsl/Flow$$anonfun$splitAfter$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Predicate;)V
      17: invokevirtual #488                // Method akka/stream/scaladsl/Flow.splitAfter:(Lscala/Function1;)Lakka/stream/scaladsl/SubFlow;
      20: invokespecial #464                // Method akka/stream/javadsl/SubFlow."<init>":(Lakka/stream/scaladsl/SubFlow;)V
      23: areturn

  public akka.stream.javadsl.SubFlow<In, Out, Mat> splitAfter(akka.stream.SubstreamCancelStrategy, akka.japi.function.Predicate<Out>);
    Code:
       0: new           #455                // class akka/stream/javadsl/SubFlow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: new           #490                // class akka/stream/javadsl/Flow$$anonfun$splitAfter$2
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #491                // Method akka/stream/javadsl/Flow$$anonfun$splitAfter$2."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Predicate;)V
      18: invokevirtual #493                // Method akka/stream/scaladsl/Flow.splitAfter:(Lakka/stream/SubstreamCancelStrategy;Lscala/Function1;)Lakka/stream/scaladsl/SubFlow;
      21: invokespecial #464                // Method akka/stream/javadsl/SubFlow."<init>":(Lakka/stream/scaladsl/SubFlow;)V
      24: areturn

  public <T, M> akka.stream.javadsl.Flow<In, T, Mat> flatMapConcat(akka.japi.function.Function<Out, ? extends akka.stream.Graph<akka.stream.SourceShape<T>, M>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #496                // class akka/stream/javadsl/Flow$$anonfun$flatMapConcat$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #497                // Method akka/stream/javadsl/Flow$$anonfun$flatMapConcat$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      17: invokevirtual #499                // Method akka/stream/scaladsl/Flow.flatMapConcat:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      20: checkcast     #57                 // class akka/stream/scaladsl/Flow
      23: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      26: areturn

  public <T, M> akka.stream.javadsl.Flow<In, T, Mat> flatMapMerge(int, akka.japi.function.Function<Out, ? extends akka.stream.Graph<akka.stream.SourceShape<T>, M>>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: iload_1
       9: new           #502                // class akka/stream/javadsl/Flow$$anonfun$flatMapMerge$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #503                // Method akka/stream/javadsl/Flow$$anonfun$flatMapMerge$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      18: invokevirtual #505                // Method akka/stream/scaladsl/Flow.flatMapMerge:(ILscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #57                 // class akka/stream/scaladsl/Flow
      24: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      27: areturn

  public <T, M> akka.stream.javadsl.Flow<In, T, Mat> concat(akka.stream.Graph<akka.stream.SourceShape<T>, M>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #510                // Method akka/stream/scaladsl/Flow.concat:(Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public <T, M, M2> akka.stream.javadsl.Flow<In, T, M2> concatMat(akka.stream.Graph<akka.stream.SourceShape<T>, M>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #515                // Method akka/stream/scaladsl/Flow.concatMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      19: checkcast     #57                 // class akka/stream/scaladsl/Flow
      22: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      25: areturn

  public <T, M> akka.stream.javadsl.Flow<In, T, Mat> prepend(akka.stream.Graph<akka.stream.SourceShape<T>, M>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #519                // Method akka/stream/scaladsl/Flow.prepend:(Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public <T, M, M2> akka.stream.javadsl.Flow<In, T, M2> prependMat(akka.stream.Graph<akka.stream.SourceShape<T>, M>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #522                // Method akka/stream/scaladsl/Flow.prependMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      19: checkcast     #57                 // class akka/stream/scaladsl/Flow
      22: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      25: areturn

  public <T, M> akka.stream.javadsl.Flow<In, T, Mat> orElse(akka.stream.Graph<akka.stream.SourceShape<T>, M>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #525                // Method akka/stream/scaladsl/Flow.orElse:(Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public <T, M2, M3> akka.stream.javadsl.Flow<In, T, M3> orElseMat(akka.stream.Graph<akka.stream.SourceShape<T>, M2>, akka.japi.function.Function2<Mat, M2, M3>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #529                // Method akka/stream/scaladsl/Flow.orElseMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      19: checkcast     #57                 // class akka/stream/scaladsl/Flow
      22: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      25: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> alsoTo(akka.stream.Graph<akka.stream.SinkShape<Out>, ?>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #532                // Method akka/stream/scaladsl/Flow.alsoTo:(Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public <M2, M3> akka.stream.javadsl.Flow<In, Out, M3> alsoToMat(akka.stream.Graph<akka.stream.SinkShape<Out>, M2>, akka.japi.function.Function2<Mat, M2, M3>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #535                // Method akka/stream/scaladsl/Flow.alsoToMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      19: checkcast     #57                 // class akka/stream/scaladsl/Flow
      22: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      25: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> interleave(akka.stream.Graph<akka.stream.SourceShape<T>, ?>, int);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: iload_2
      10: invokevirtual #540                // Method akka/stream/scaladsl/Flow.interleave:(Lakka/stream/Graph;I)Lakka/stream/scaladsl/FlowOps;
      13: checkcast     #57                 // class akka/stream/scaladsl/Flow
      16: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      19: areturn

  public <T, M, M2> akka.stream.javadsl.Flow<In, T, M2> interleaveMat(akka.stream.Graph<akka.stream.SourceShape<T>, M>, int, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: iload_2
      10: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      13: aload_3
      14: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      17: invokevirtual #546                // Method akka/stream/scaladsl/Flow.interleaveMat:(Lakka/stream/Graph;ILscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      20: checkcast     #57                 // class akka/stream/scaladsl/Flow
      23: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      26: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> merge(akka.stream.Graph<akka.stream.SourceShape<T>, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #550                // Method merge:(Lakka/stream/Graph;Z)Lakka/stream/javadsl/Flow;
       6: areturn

  public <T> akka.stream.javadsl.Flow<In, T, Mat> merge(akka.stream.Graph<akka.stream.SourceShape<T>, ?>, boolean);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: iload_2
      10: invokevirtual #553                // Method akka/stream/scaladsl/Flow.merge:(Lakka/stream/Graph;Z)Lakka/stream/scaladsl/FlowOps;
      13: checkcast     #57                 // class akka/stream/scaladsl/Flow
      16: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      19: areturn

  public <T, M, M2> akka.stream.javadsl.Flow<In, T, M2> mergeMat(akka.stream.Graph<akka.stream.SourceShape<T>, M>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: invokevirtual #559                // Method mergeMat:(Lakka/stream/Graph;Lakka/japi/function/Function2;Z)Lakka/stream/javadsl/Flow;
       7: areturn

  public <T, M, M2> akka.stream.javadsl.Flow<In, T, M2> mergeMat(akka.stream.Graph<akka.stream.SourceShape<T>, M>, akka.japi.function.Function2<Mat, M, M2>, boolean);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: aload_0
      10: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
      13: invokevirtual #563                // Method akka/stream/scaladsl/Flow.mergeMat$default$2:()Z
      16: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      19: aload_2
      20: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      23: invokevirtual #566                // Method akka/stream/scaladsl/Flow.mergeMat:(Lakka/stream/Graph;ZLscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      26: checkcast     #57                 // class akka/stream/scaladsl/Flow
      29: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      32: areturn

  public <U, M> akka.stream.javadsl.Flow<In, U, Mat> mergeSorted(akka.stream.Graph<akka.stream.SourceShape<U>, M>, java.util.Comparator<U>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: getstatic     #573                // Field scala/package$.MODULE$:Lscala/package$;
      12: invokevirtual #577                // Method scala/package$.Ordering:()Lscala/math/Ordering$;
      15: aload_2
      16: invokevirtual #583                // Method scala/math/Ordering$.comparatorToOrdering:(Ljava/util/Comparator;)Lscala/math/Ordering;
      19: invokevirtual #586                // Method akka/stream/scaladsl/Flow.mergeSorted:(Lakka/stream/Graph;Lscala/math/Ordering;)Lakka/stream/scaladsl/FlowOps;
      22: checkcast     #57                 // class akka/stream/scaladsl/Flow
      25: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      28: areturn

  public <U, Mat2, Mat3> akka.stream.javadsl.Flow<In, U, Mat3> mergeSortedMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, java.util.Comparator<U>, akka.japi.function.Function2<Mat, Mat2, Mat3>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_3
      13: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: getstatic     #573                // Field scala/package$.MODULE$:Lscala/package$;
      19: invokevirtual #577                // Method scala/package$.Ordering:()Lscala/math/Ordering$;
      22: aload_2
      23: invokevirtual #583                // Method scala/math/Ordering$.comparatorToOrdering:(Ljava/util/Comparator;)Lscala/math/Ordering;
      26: invokevirtual #593                // Method akka/stream/scaladsl/Flow.mergeSortedMat:(Lakka/stream/Graph;Lscala/Function2;Lscala/math/Ordering;)Lakka/stream/scaladsl/FlowOpsMat;
      29: checkcast     #57                 // class akka/stream/scaladsl/Flow
      32: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      35: areturn

  public <T> akka.stream.javadsl.Flow<In, akka.japi.Pair<Out, T>, Mat> zip(akka.stream.Graph<akka.stream.SourceShape<T>, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #599                // Field akka/stream/javadsl/Keep$.MODULE$:Lakka/stream/javadsl/Keep$;
       5: invokevirtual #603                // Method akka/stream/javadsl/Keep$.left:()Lakka/japi/function/Function2;
       8: invokevirtual #606                // Method zipMat:(Lakka/stream/Graph;Lakka/japi/function/Function2;)Lakka/stream/javadsl/Flow;
      11: areturn

  public <T, M, M2> akka.stream.javadsl.Flow<In, akka.japi.Pair<Out, T>, M2> zipMat(akka.stream.Graph<akka.stream.SourceShape<T>, M>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: aload_0
       1: getstatic     #19                 // Field akka/stream/javadsl/Flow$.MODULE$:Lakka/stream/javadsl/Flow$;
       4: getstatic     #611                // Field akka/stream/javadsl/GraphDSL$.MODULE$:Lakka/stream/javadsl/GraphDSL$;
       7: aload_1
       8: new           #613                // class akka/stream/javadsl/Flow$$anon$1
      11: dup
      12: aload_0
      13: invokespecial #614                // Method akka/stream/javadsl/Flow$$anon$1."<init>":(Lakka/stream/javadsl/Flow;)V
      16: invokevirtual #617                // Method akka/stream/javadsl/GraphDSL$.create:(Lakka/stream/Graph;Lakka/japi/function/Function2;)Lakka/stream/Graph;
      19: invokevirtual #29                 // Method akka/stream/javadsl/Flow$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/javadsl/Flow;
      22: aload_2
      23: invokevirtual #619                // Method viaMat:(Lakka/stream/Graph;Lakka/japi/function/Function2;)Lakka/stream/javadsl/Flow;
      26: areturn

  public <Out2, Out3> akka.stream.javadsl.Flow<In, Out3, Mat> zipWith(akka.stream.Graph<akka.stream.SourceShape<Out2>, ?>, akka.japi.function.Function2<Out, Out2, Out3>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #623                // Method akka/stream/scaladsl/Flow.zipWith:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      19: checkcast     #57                 // class akka/stream/scaladsl/Flow
      22: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      25: areturn

  public <Out2, Out3, M, M2> akka.stream.javadsl.Flow<In, Out3, M2> zipWithMat(akka.stream.Graph<akka.stream.SourceShape<Out2>, M>, akka.japi.function.Function2<Out, Out2, Out3>, akka.japi.function.Function2<Mat, M, M2>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_2
      13: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      19: aload_3
      20: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      23: invokevirtual #628                // Method akka/stream/scaladsl/Flow.zipWithMat:(Lakka/stream/Graph;Lscala/Function2;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      26: checkcast     #57                 // class akka/stream/scaladsl/Flow
      29: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      32: areturn

  public akka.stream.javadsl.Flow<In, akka.japi.Pair<Out, java.lang.Object>, Mat> zipWithIndex();
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: invokevirtual #632                // Method akka/stream/scaladsl/Flow.zipWithIndex:()Lakka/stream/scaladsl/FlowOps;
      11: new           #634                // class akka/stream/javadsl/Flow$$anonfun$zipWithIndex$1
      14: dup
      15: aload_0
      16: invokespecial #635                // Method akka/stream/javadsl/Flow$$anonfun$zipWithIndex$1."<init>":(Lakka/stream/javadsl/Flow;)V
      19: invokeinterface #253,  2          // InterfaceMethod akka/stream/scaladsl/FlowOps.map:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      24: checkcast     #57                 // class akka/stream/scaladsl/Flow
      27: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      30: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> initialTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #638                // Method akka/stream/scaladsl/Flow.initialTimeout:(Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> completionTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #642                // Method akka/stream/scaladsl/Flow.completionTimeout:(Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> idleTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #645                // Method akka/stream/scaladsl/Flow.idleTimeout:(Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> backpressureTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #648                // Method akka/stream/scaladsl/Flow.backpressureTimeout:(Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public <U> akka.stream.javadsl.Flow<In, U, Mat> keepAlive(scala.concurrent.duration.FiniteDuration, akka.japi.function.Creator<U>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: new           #652                // class akka/stream/javadsl/Flow$$anonfun$keepAlive$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #653                // Method akka/stream/javadsl/Flow$$anonfun$keepAlive$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Creator;)V
      18: invokevirtual #656                // Method akka/stream/scaladsl/Flow.keepAlive:(Lscala/concurrent/duration/FiniteDuration;Lscala/Function0;)Lakka/stream/scaladsl/FlowOps;
      21: checkcast     #57                 // class akka/stream/scaladsl/Flow
      24: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      27: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> throttle(int, scala.concurrent.duration.FiniteDuration, int, akka.stream.ThrottleMode);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: iload_1
       9: aload_2
      10: iload_3
      11: aload         4
      13: invokevirtual #663                // Method akka/stream/scaladsl/Flow.throttle:(ILscala/concurrent/duration/FiniteDuration;ILakka/stream/ThrottleMode;)Lakka/stream/scaladsl/FlowOps;
      16: checkcast     #57                 // class akka/stream/scaladsl/Flow
      19: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      22: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> throttle(int, scala.concurrent.duration.FiniteDuration, int, akka.japi.function.Function<Out, java.lang.Integer>, akka.stream.ThrottleMode);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: iload_1
       9: aload_2
      10: iload_3
      11: new           #671                // class akka/stream/javadsl/Flow$$anonfun$throttle$1
      14: dup
      15: aload_0
      16: aload         4
      18: invokespecial #672                // Method akka/stream/javadsl/Flow$$anonfun$throttle$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      21: aload         5
      23: invokevirtual #675                // Method akka/stream/scaladsl/Flow.throttle:(ILscala/concurrent/duration/FiniteDuration;ILscala/Function1;Lakka/stream/ThrottleMode;)Lakka/stream/scaladsl/FlowOps;
      26: checkcast     #57                 // class akka/stream/scaladsl/Flow
      29: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      32: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> detach();
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: invokevirtual #680                // Method akka/stream/scaladsl/Flow.detach:()Lakka/stream/scaladsl/FlowOps;
      11: checkcast     #57                 // class akka/stream/scaladsl/Flow
      14: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      17: areturn

  public <M> akka.stream.javadsl.Flow<In, Out, M> watchTermination(akka.japi.function.Function2<Mat, java.util.concurrent.CompletionStage<akka.Done>, M>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: new           #683                // class akka/stream/javadsl/Flow$$anonfun$watchTermination$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #684                // Method akka/stream/javadsl/Flow$$anonfun$watchTermination$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function2;)V
      17: invokevirtual #687                // Method akka/stream/scaladsl/Flow.watchTermination:(Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      20: checkcast     #57                 // class akka/stream/scaladsl/Flow
      23: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      26: areturn

  public <M> akka.stream.javadsl.Flow<In, Out, M> monitor(akka.japi.function.Function2<Mat, akka.stream.FlowMonitor<Out>, M>);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: getstatic     #99                 // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      11: aload_1
      12: invokevirtual #103                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      15: invokevirtual #690                // Method akka/stream/scaladsl/Flow.monitor:(Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
      18: checkcast     #57                 // class akka/stream/scaladsl/Flow
      21: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      24: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> initialDelay(scala.concurrent.duration.FiniteDuration);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #693                // Method akka/stream/scaladsl/Flow.initialDelay:(Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
      12: checkcast     #57                 // class akka/stream/scaladsl/Flow
      15: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      18: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> withAttributes(akka.stream.Attributes);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #698                // Method akka/stream/scaladsl/Flow.withAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Flow;
      12: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      15: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> addAttributes(akka.stream.Attributes);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #703                // Method akka/stream/scaladsl/Flow.addAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Flow;
      12: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      15: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> named(java.lang.String);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: invokevirtual #708                // Method akka/stream/scaladsl/Flow.named:(Ljava/lang/String;)Lakka/stream/scaladsl/Flow;
      12: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      15: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> async();
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: invokevirtual #713                // Method akka/stream/scaladsl/Flow.async:()Lakka/stream/scaladsl/Flow;
      11: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      14: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> log(java.lang.String, akka.japi.function.Function<Out, java.lang.Object>, akka.event.LoggingAdapter);
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       8: aload_1
       9: new           #717                // class akka/stream/javadsl/Flow$$anonfun$log$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #718                // Method akka/stream/javadsl/Flow$$anonfun$log$1."<init>":(Lakka/stream/javadsl/Flow;Lakka/japi/function/Function;)V
      18: aload_3
      19: invokevirtual #721                // Method akka/stream/scaladsl/Flow.log:(Ljava/lang/String;Lscala/Function1;Lakka/event/LoggingAdapter;)Lakka/stream/scaladsl/FlowOps;
      22: checkcast     #57                 // class akka/stream/scaladsl/Flow
      25: invokespecial #84                 // Method "<init>":(Lakka/stream/scaladsl/Flow;)V
      28: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> log(java.lang.String, akka.japi.function.Function<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: invokevirtual #726                // Method log:(Ljava/lang/String;Lakka/japi/function/Function;Lakka/event/LoggingAdapter;)Lakka/stream/javadsl/Flow;
       7: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> log(java.lang.String, akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #732                // Field akka/stream/impl/ConstantFun$.MODULE$:Lakka/stream/impl/ConstantFun$;
       5: invokevirtual #736                // Method akka/stream/impl/ConstantFun$.javaIdentityFunction:()Lakka/japi/function/Function;
       8: aload_2
       9: invokevirtual #726                // Method log:(Ljava/lang/String;Lakka/japi/function/Function;Lakka/event/LoggingAdapter;)Lakka/stream/javadsl/Flow;
      12: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> log(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #732                // Field akka/stream/impl/ConstantFun$.MODULE$:Lakka/stream/impl/ConstantFun$;
       5: invokevirtual #736                // Method akka/stream/impl/ConstantFun$.javaIdentityFunction:()Lakka/japi/function/Function;
       8: aconst_null
       9: invokevirtual #726                // Method log:(Ljava/lang/String;Lakka/japi/function/Function;Lakka/event/LoggingAdapter;)Lakka/stream/javadsl/Flow;
      12: areturn

  public akka.stream.javadsl.RunnableGraph<org.reactivestreams.Processor<In, Out>> toProcessor();
    Code:
       0: getstatic     #131                // Field akka/stream/javadsl/RunnableGraph$.MODULE$:Lakka/stream/javadsl/RunnableGraph$;
       3: aload_0
       4: getfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       7: invokevirtual #741                // Method akka/stream/scaladsl/Flow.toProcessor:()Lakka/stream/scaladsl/RunnableGraph;
      10: invokevirtual #136                // Method akka/stream/javadsl/RunnableGraph$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/javadsl/RunnableGraph;
      13: areturn

  public akka.stream.Graph async();
    Code:
       0: aload_0
       1: invokevirtual #744                // Method async:()Lakka/stream/javadsl/Flow;
       4: areturn

  public akka.stream.Graph named(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #747                // Method named:(Ljava/lang/String;)Lakka/stream/javadsl/Flow;
       5: areturn

  public akka.stream.Graph addAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #750                // Method addAttributes:(Lakka/stream/Attributes;)Lakka/stream/javadsl/Flow;
       5: areturn

  public akka.stream.Graph withAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #752                // Method withAttributes:(Lakka/stream/Attributes;)Lakka/stream/javadsl/Flow;
       5: areturn

  public akka.stream.Shape shape();
    Code:
       0: aload_0
       1: invokevirtual #754                // Method shape:()Lakka/stream/FlowShape;
       4: areturn

  public akka.stream.javadsl.Flow(akka.stream.scaladsl.Flow<In, Out, Mat>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #55                 // Field delegate:Lakka/stream/scaladsl/Flow;
       5: aload_0
       6: invokespecial #757                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #763                // Method akka/stream/Graph$class.$init$:(Lakka/stream/Graph;)V
      13: return
}
