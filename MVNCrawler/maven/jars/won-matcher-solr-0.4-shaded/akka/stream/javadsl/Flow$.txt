Compiled from "Flow.scala"
public final class akka.stream.javadsl.Flow$ {
  public static final akka.stream.javadsl.Flow$ MODULE$;

  private final akka.stream.javadsl.Flow<java.lang.Object, java.lang.Object, akka.NotUsed> _identity;

  public static {};
    Code:
       0: new           #2                  // class akka/stream/javadsl/Flow$
       3: invokespecial #12                 // Method "<init>":()V
       6: return

  public <T> akka.stream.javadsl.Flow<T, T, akka.NotUsed> create();
    Code:
       0: aload_0
       1: getstatic     #22                 // Field akka/stream/scaladsl/Flow$.MODULE$:Lakka/stream/scaladsl/Flow$;
       4: invokevirtual #26                 // Method akka/stream/scaladsl/Flow$.apply:()Lakka/stream/scaladsl/Flow;
       7: invokevirtual #30                 // Method fromGraph:(Lakka/stream/Graph;)Lakka/stream/javadsl/Flow;
      10: areturn

  public <I, O> akka.stream.javadsl.Flow<I, O, akka.NotUsed> fromProcessor(akka.japi.function.Creator<org.reactivestreams.Processor<I, O>>);
    Code:
       0: new           #35                 // class akka/stream/javadsl/Flow
       3: dup
       4: getstatic     #22                 // Field akka/stream/scaladsl/Flow$.MODULE$:Lakka/stream/scaladsl/Flow$;
       7: new           #37                 // class akka/stream/javadsl/Flow$$anonfun$fromProcessor$1
      10: dup
      11: aload_1
      12: invokespecial #40                 // Method akka/stream/javadsl/Flow$$anonfun$fromProcessor$1."<init>":(Lakka/japi/function/Creator;)V
      15: invokevirtual #43                 // Method akka/stream/scaladsl/Flow$.fromProcessor:(Lscala/Function0;)Lakka/stream/scaladsl/Flow;
      18: invokespecial #46                 // Method akka/stream/javadsl/Flow."<init>":(Lakka/stream/scaladsl/Flow;)V
      21: areturn

  public <I, O, Mat> akka.stream.javadsl.Flow<I, O, Mat> fromProcessorMat(akka.japi.function.Creator<akka.japi.Pair<org.reactivestreams.Processor<I, O>, Mat>>);
    Code:
       0: new           #35                 // class akka/stream/javadsl/Flow
       3: dup
       4: getstatic     #22                 // Field akka/stream/scaladsl/Flow$.MODULE$:Lakka/stream/scaladsl/Flow$;
       7: new           #51                 // class akka/stream/javadsl/Flow$$anonfun$fromProcessorMat$1
      10: dup
      11: aload_1
      12: invokespecial #52                 // Method akka/stream/javadsl/Flow$$anonfun$fromProcessorMat$1."<init>":(Lakka/japi/function/Creator;)V
      15: invokevirtual #54                 // Method akka/stream/scaladsl/Flow$.fromProcessorMat:(Lscala/Function0;)Lakka/stream/scaladsl/Flow;
      18: invokespecial #46                 // Method akka/stream/javadsl/Flow."<init>":(Lakka/stream/scaladsl/Flow;)V
      21: areturn

  public <I, O> akka.stream.javadsl.Flow<I, O, akka.NotUsed> fromFunction(akka.japi.function.Function<I, O>);
    Code:
       0: aload_0
       1: invokevirtual #58                 // Method create:()Lakka/stream/javadsl/Flow;
       4: aload_1
       5: invokevirtual #61                 // Method akka/stream/javadsl/Flow.map:(Lakka/japi/function/Function;)Lakka/stream/javadsl/Flow;
       8: areturn

  public <T> akka.stream.javadsl.Flow<T, T, akka.NotUsed> of(java.lang.Class<T>);
    Code:
       0: aload_0
       1: invokevirtual #58                 // Method create:()Lakka/stream/javadsl/Flow;
       4: areturn

  public <I, O, M> akka.stream.javadsl.Flow<I, O, M> fromGraph(akka.stream.Graph<akka.stream.FlowShape<I, O>, M>);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: instanceof    #35                 // class akka/stream/javadsl/Flow
       6: ifeq          20
       9: aload_2
      10: checkcast     #35                 // class akka/stream/javadsl/Flow
      13: astore_3
      14: aload_3
      15: astore        4
      17: goto          66
      20: aload_2
      21: instanceof    #69                 // class akka/stream/scaladsl/Flow
      24: ifeq          50
      27: aload_2
      28: checkcast     #69                 // class akka/stream/scaladsl/Flow
      31: astore        5
      33: aload         5
      35: invokevirtual #73                 // Method akka/stream/scaladsl/Flow.isIdentity:()Z
      38: ifeq          50
      41: aload_0
      42: getfield      #75                 // Field _identity:Lakka/stream/javadsl/Flow;
      45: astore        4
      47: goto          66
      50: new           #35                 // class akka/stream/javadsl/Flow
      53: dup
      54: getstatic     #22                 // Field akka/stream/scaladsl/Flow$.MODULE$:Lakka/stream/scaladsl/Flow$;
      57: aload_2
      58: invokevirtual #78                 // Method akka/stream/scaladsl/Flow$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Flow;
      61: invokespecial #46                 // Method akka/stream/javadsl/Flow."<init>":(Lakka/stream/scaladsl/Flow;)V
      64: astore        4
      66: aload         4
      68: areturn

  public <I, O> akka.stream.javadsl.Flow<I, O, akka.NotUsed> fromSinkAndSource(akka.stream.Graph<akka.stream.SinkShape<I>, ?>, akka.stream.Graph<akka.stream.SourceShape<O>, ?>);
    Code:
       0: new           #35                 // class akka/stream/javadsl/Flow
       3: dup
       4: getstatic     #22                 // Field akka/stream/scaladsl/Flow$.MODULE$:Lakka/stream/scaladsl/Flow$;
       7: aload_1
       8: aload_2
       9: getstatic     #89                 // Field akka/stream/scaladsl/Keep$.MODULE$:Lakka/stream/scaladsl/Keep$;
      12: invokevirtual #93                 // Method akka/stream/scaladsl/Keep$.none:()Lscala/Function2;
      15: invokevirtual #97                 // Method akka/stream/scaladsl/Flow$.fromSinkAndSourceMat:(Lakka/stream/Graph;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/Flow;
      18: invokespecial #46                 // Method akka/stream/javadsl/Flow."<init>":(Lakka/stream/scaladsl/Flow;)V
      21: areturn

  public <I, O, M1, M2, M> akka.stream.javadsl.Flow<I, O, M> fromSinkAndSourceMat(akka.stream.Graph<akka.stream.SinkShape<I>, M1>, akka.stream.Graph<akka.stream.SourceShape<O>, M2>, akka.japi.function.Function2<M1, M2, M>);
    Code:
       0: new           #35                 // class akka/stream/javadsl/Flow
       3: dup
       4: getstatic     #22                 // Field akka/stream/scaladsl/Flow$.MODULE$:Lakka/stream/scaladsl/Flow$;
       7: aload_1
       8: aload_2
       9: getstatic     #105                // Field akka/stream/javadsl/package$.MODULE$:Lakka/stream/javadsl/package$;
      12: aload_3
      13: invokevirtual #109                // Method akka/stream/javadsl/package$.combinerToScala:(Lakka/japi/function/Function2;)Lscala/Function2;
      16: invokevirtual #97                 // Method akka/stream/scaladsl/Flow$.fromSinkAndSourceMat:(Lakka/stream/Graph;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/Flow;
      19: invokespecial #46                 // Method akka/stream/javadsl/Flow."<init>":(Lakka/stream/scaladsl/Flow;)V
      22: areturn

  private akka.stream.javadsl.Flow$();
    Code:
       0: aload_0
       1: invokespecial #112                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: putstatic     #114                // Field MODULE$:Lakka/stream/javadsl/Flow$;
       8: aload_0
       9: new           #35                 // class akka/stream/javadsl/Flow
      12: dup
      13: getstatic     #22                 // Field akka/stream/scaladsl/Flow$.MODULE$:Lakka/stream/scaladsl/Flow$;
      16: invokevirtual #26                 // Method akka/stream/scaladsl/Flow$.apply:()Lakka/stream/scaladsl/Flow;
      19: invokespecial #46                 // Method akka/stream/javadsl/Flow."<init>":(Lakka/stream/scaladsl/Flow;)V
      22: putfield      #75                 // Field _identity:Lakka/stream/javadsl/Flow;
      25: return
}
