Compiled from "Source.scala"
public final class akka.stream.javadsl.Source$ {
  public static final akka.stream.javadsl.Source$ MODULE$;

  private final akka.stream.javadsl.Source<java.lang.Object, akka.NotUsed> _empty;

  public static {};
    Code:
       0: new           #2                  // class akka/stream/javadsl/Source$
       3: invokespecial #12                 // Method "<init>":()V
       6: return

  public <O> akka.stream.javadsl.Source<O, akka.NotUsed> empty();
    Code:
       0: aload_0
       1: getfield      #19                 // Field _empty:Lakka/stream/javadsl/Source;
       4: areturn

  public <T> akka.stream.javadsl.Source<T, java.util.concurrent.CompletableFuture<java.util.Optional<T>>> maybe();
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: invokevirtual #31                 // Method akka/stream/scaladsl/Source$.maybe:()Lakka/stream/scaladsl/Source;
      10: new           #33                 // class akka/stream/javadsl/Source$$anonfun$maybe$1
      13: dup
      14: invokespecial #34                 // Method akka/stream/javadsl/Source$$anonfun$maybe$1."<init>":()V
      17: invokevirtual #40                 // Method akka/stream/scaladsl/Source.mapMaterializedValue:(Lscala/Function1;)Lakka/stream/scaladsl/Source;
      20: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      23: areturn

  public <O> akka.stream.javadsl.Source<O, akka.NotUsed> fromPublisher(org.reactivestreams.Publisher<O>);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: aload_1
       8: invokevirtual #48                 // Method akka/stream/scaladsl/Source$.fromPublisher:(Lorg/reactivestreams/Publisher;)Lakka/stream/scaladsl/Source;
      11: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      14: areturn

  public <O> akka.stream.javadsl.Source<O, akka.NotUsed> fromIterator(akka.japi.function.Creator<java.util.Iterator<O>>);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: new           #54                 // class akka/stream/javadsl/Source$$anonfun$fromIterator$1
      10: dup
      11: aload_1
      12: invokespecial #57                 // Method akka/stream/javadsl/Source$$anonfun$fromIterator$1."<init>":(Lakka/japi/function/Creator;)V
      15: invokevirtual #60                 // Method akka/stream/scaladsl/Source$.fromIterator:(Lscala/Function0;)Lakka/stream/scaladsl/Source;
      18: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      21: areturn

  public <O> akka.stream.javadsl.Source<O, akka.NotUsed> cycle(akka.japi.function.Creator<java.util.Iterator<O>>);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: new           #65                 // class akka/stream/javadsl/Source$$anonfun$cycle$1
      10: dup
      11: aload_1
      12: invokespecial #66                 // Method akka/stream/javadsl/Source$$anonfun$cycle$1."<init>":(Lakka/japi/function/Creator;)V
      15: invokevirtual #68                 // Method akka/stream/scaladsl/Source$.cycle:(Lscala/Function0;)Lakka/stream/scaladsl/Source;
      18: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      21: areturn

  public <O> akka.stream.javadsl.Source<O, akka.NotUsed> from(java.lang.Iterable<O>);
    Code:
       0: new           #72                 // class akka/stream/javadsl/Source$$anon$1
       3: dup
       4: aload_1
       5: invokespecial #75                 // Method akka/stream/javadsl/Source$$anon$1."<init>":(Ljava/lang/Iterable;)V
       8: astore_2
       9: new           #23                 // class akka/stream/javadsl/Source
      12: dup
      13: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
      16: aload_2
      17: invokevirtual #79                 // Method akka/stream/scaladsl/Source$.apply:(Lscala/collection/immutable/Iterable;)Lakka/stream/scaladsl/Source;
      20: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      23: areturn

  public akka.stream.javadsl.Source<java.lang.Integer, akka.NotUsed> range(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iconst_1
       4: invokevirtual #88                 // Method range:(III)Lakka/stream/javadsl/Source;
       7: areturn

  public akka.stream.javadsl.Source<java.lang.Integer, akka.NotUsed> range(int, int, int);
    Code:
       0: aload_0
       1: new           #93                 // class akka/stream/javadsl/Source$$anon$2
       4: dup
       5: iload_1
       6: iload_2
       7: iload_3
       8: invokespecial #96                 // Method akka/stream/javadsl/Source$$anon$2."<init>":(III)V
      11: invokevirtual #98                 // Method fromIterator:(Lakka/japi/function/Creator;)Lakka/stream/javadsl/Source;
      14: areturn

  public <O> akka.stream.javadsl.Source<O, akka.NotUsed> fromFuture(scala.concurrent.Future<O>);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: aload_1
       8: invokevirtual #104                // Method akka/stream/scaladsl/Source$.fromFuture:(Lscala/concurrent/Future;)Lakka/stream/scaladsl/Source;
      11: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      14: areturn

  public <O> akka.stream.javadsl.Source<O, akka.NotUsed> fromCompletionStage(java.util.concurrent.CompletionStage<O>);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: aload_1
       8: invokevirtual #111                // Method akka/stream/scaladsl/Source$.fromCompletionStage:(Ljava/util/concurrent/CompletionStage;)Lakka/stream/scaladsl/Source;
      11: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      14: areturn

  public <O> akka.stream.javadsl.Source<O, akka.actor.Cancellable> tick(scala.concurrent.duration.FiniteDuration, scala.concurrent.duration.FiniteDuration, O);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: aload_1
       8: aload_2
       9: aload_3
      10: invokevirtual #117                // Method akka/stream/scaladsl/Source$.tick:(Lscala/concurrent/duration/FiniteDuration;Lscala/concurrent/duration/FiniteDuration;Ljava/lang/Object;)Lakka/stream/scaladsl/Source;
      13: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      16: areturn

  public <T> akka.stream.javadsl.Source<T, akka.NotUsed> single(T);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: aload_1
       8: invokevirtual #126                // Method akka/stream/scaladsl/Source$.single:(Ljava/lang/Object;)Lakka/stream/scaladsl/Source;
      11: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      14: areturn

  public <T> akka.stream.javadsl.Source<T, akka.NotUsed> repeat(T);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: aload_1
       8: invokevirtual #130                // Method akka/stream/scaladsl/Source$.repeat:(Ljava/lang/Object;)Lakka/stream/scaladsl/Source;
      11: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      14: areturn

  public <S, E> akka.stream.javadsl.Source<E, akka.NotUsed> unfold(S, akka.japi.function.Function<S, java.util.Optional<akka.japi.Pair<S, E>>>);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: aload_1
       8: new           #134                // class akka/stream/javadsl/Source$$anonfun$unfold$1
      11: dup
      12: aload_2
      13: invokespecial #137                // Method akka/stream/javadsl/Source$$anonfun$unfold$1."<init>":(Lakka/japi/function/Function;)V
      16: invokevirtual #140                // Method akka/stream/scaladsl/Source$.unfold:(Ljava/lang/Object;Lscala/Function1;)Lakka/stream/scaladsl/Source;
      19: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      22: areturn

  public <S, E> akka.stream.javadsl.Source<E, akka.NotUsed> unfoldAsync(S, akka.japi.function.Function<S, java.util.concurrent.CompletionStage<java.util.Optional<akka.japi.Pair<S, E>>>>);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: aload_1
       8: new           #145                // class akka/stream/javadsl/Source$$anonfun$unfoldAsync$1
      11: dup
      12: aload_2
      13: invokespecial #146                // Method akka/stream/javadsl/Source$$anonfun$unfoldAsync$1."<init>":(Lakka/japi/function/Function;)V
      16: invokevirtual #148                // Method akka/stream/scaladsl/Source$.unfoldAsync:(Ljava/lang/Object;Lscala/Function1;)Lakka/stream/scaladsl/Source;
      19: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      22: areturn

  public <T> akka.stream.javadsl.Source<T, akka.NotUsed> failed(java.lang.Throwable);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: aload_1
       8: invokevirtual #153                // Method akka/stream/scaladsl/Source$.failed:(Ljava/lang/Throwable;)Lakka/stream/scaladsl/Source;
      11: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      14: areturn

  public <T> akka.stream.javadsl.Source<T, org.reactivestreams.Subscriber<T>> asSubscriber();
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: invokevirtual #158                // Method akka/stream/scaladsl/Source$.asSubscriber:()Lakka/stream/scaladsl/Source;
      10: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      13: areturn

  public <T> akka.stream.javadsl.Source<T, akka.actor.ActorRef> actorPublisher(akka.actor.Props);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: aload_1
       8: invokevirtual #163                // Method akka/stream/scaladsl/Source$.actorPublisher:(Lakka/actor/Props;)Lakka/stream/scaladsl/Source;
      11: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      14: areturn

  public <T> akka.stream.javadsl.Source<T, akka.actor.ActorRef> actorRef(int, akka.stream.OverflowStrategy);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: iload_1
       8: aload_2
       9: invokevirtual #170                // Method akka/stream/scaladsl/Source$.actorRef:(ILakka/stream/OverflowStrategy;)Lakka/stream/scaladsl/Source;
      12: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      15: areturn

  public <T, M> akka.stream.javadsl.Source<T, M> fromGraph(akka.stream.Graph<akka.stream.SourceShape<T>, M>);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: instanceof    #23                 // class akka/stream/javadsl/Source
       6: ifeq          20
       9: aload_2
      10: checkcast     #23                 // class akka/stream/javadsl/Source
      13: astore_3
      14: aload_3
      15: astore        4
      17: goto          55
      20: aload_2
      21: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
      24: invokevirtual #177                // Method akka/stream/scaladsl/Source$.empty:()Lakka/stream/scaladsl/Source;
      27: if_acmpne     39
      30: aload_0
      31: invokevirtual #179                // Method empty:()Lakka/stream/javadsl/Source;
      34: astore        4
      36: goto          55
      39: new           #23                 // class akka/stream/javadsl/Source
      42: dup
      43: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
      46: aload_2
      47: invokevirtual #182                // Method akka/stream/scaladsl/Source$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Source;
      50: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      53: astore        4
      55: aload         4
      57: areturn

  public <T, U> akka.stream.javadsl.Source<U, akka.NotUsed> combine(akka.stream.javadsl.Source<T, ?>, akka.stream.javadsl.Source<T, ?>, java.util.List<akka.stream.javadsl.Source<T, ?>>, akka.japi.function.Function<java.lang.Integer, ? extends akka.stream.Graph<akka.stream.UniformFanInShape<T, U>, akka.NotUsed>>);
    Code:
       0: aload_3
       1: ifnonnull     19
       4: getstatic     #193                // Field scala/collection/immutable/Seq$.MODULE$:Lscala/collection/immutable/Seq$;
       7: getstatic     #198                // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
      10: invokevirtual #201                // Method scala/collection/immutable/Seq$.apply:(Lscala/collection/Seq;)Lscala/collection/GenTraversable;
      13: checkcast     #203                // class scala/collection/immutable/Seq
      16: goto          47
      19: getstatic     #208                // Field akka/japi/Util$.MODULE$:Lakka/japi/Util$;
      22: aload_3
      23: invokevirtual #212                // Method akka/japi/Util$.immutableSeq:(Ljava/lang/Iterable;)Lscala/collection/immutable/Seq;
      26: new           #214                // class akka/stream/javadsl/Source$$anonfun$1
      29: dup
      30: invokespecial #215                // Method akka/stream/javadsl/Source$$anonfun$1."<init>":()V
      33: getstatic     #193                // Field scala/collection/immutable/Seq$.MODULE$:Lscala/collection/immutable/Seq$;
      36: invokevirtual #219                // Method scala/collection/immutable/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      39: invokeinterface #223,  3          // InterfaceMethod scala/collection/immutable/Seq.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      44: checkcast     #203                // class scala/collection/immutable/Seq
      47: astore        5
      49: new           #23                 // class akka/stream/javadsl/Source
      52: dup
      53: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
      56: aload_1
      57: invokevirtual #226                // Method akka/stream/javadsl/Source.asScala:()Lakka/stream/scaladsl/Source;
      60: aload_2
      61: invokevirtual #226                // Method akka/stream/javadsl/Source.asScala:()Lakka/stream/scaladsl/Source;
      64: aload         5
      66: new           #228                // class akka/stream/javadsl/Source$$anonfun$combine$1
      69: dup
      70: aload         4
      72: invokespecial #229                // Method akka/stream/javadsl/Source$$anonfun$combine$1."<init>":(Lakka/japi/function/Function;)V
      75: invokevirtual #232                // Method akka/stream/scaladsl/Source$.combine:(Lakka/stream/scaladsl/Source;Lakka/stream/scaladsl/Source;Lscala/collection/Seq;Lscala/Function1;)Lakka/stream/scaladsl/Source;
      78: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      81: areturn

  public <T> akka.stream.javadsl.Source<java.util.List<T>, akka.NotUsed> zipN(java.util.List<akka.stream.javadsl.Source<T, ?>>);
    Code:
       0: aload_1
       1: ifnonnull     19
       4: getstatic     #193                // Field scala/collection/immutable/Seq$.MODULE$:Lscala/collection/immutable/Seq$;
       7: getstatic     #198                // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
      10: invokevirtual #201                // Method scala/collection/immutable/Seq$.apply:(Lscala/collection/Seq;)Lscala/collection/GenTraversable;
      13: checkcast     #203                // class scala/collection/immutable/Seq
      16: goto          47
      19: getstatic     #208                // Field akka/japi/Util$.MODULE$:Lakka/japi/Util$;
      22: aload_1
      23: invokevirtual #212                // Method akka/japi/Util$.immutableSeq:(Ljava/lang/Iterable;)Lscala/collection/immutable/Seq;
      26: new           #243                // class akka/stream/javadsl/Source$$anonfun$2
      29: dup
      30: invokespecial #244                // Method akka/stream/javadsl/Source$$anonfun$2."<init>":()V
      33: getstatic     #193                // Field scala/collection/immutable/Seq$.MODULE$:Lscala/collection/immutable/Seq$;
      36: invokevirtual #219                // Method scala/collection/immutable/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      39: invokeinterface #223,  3          // InterfaceMethod scala/collection/immutable/Seq.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      44: checkcast     #203                // class scala/collection/immutable/Seq
      47: astore_2
      48: new           #23                 // class akka/stream/javadsl/Source
      51: dup
      52: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
      55: aload_2
      56: invokevirtual #247                // Method akka/stream/scaladsl/Source$.zipN:(Lscala/collection/immutable/Seq;)Lakka/stream/scaladsl/Source;
      59: new           #249                // class akka/stream/javadsl/Source$$anonfun$zipN$1
      62: dup
      63: invokespecial #250                // Method akka/stream/javadsl/Source$$anonfun$zipN$1."<init>":()V
      66: invokevirtual #253                // Method akka/stream/scaladsl/Source.map:(Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
      69: checkcast     #36                 // class akka/stream/scaladsl/Source
      72: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      75: areturn

  public <T, O> akka.stream.javadsl.Source<O, akka.NotUsed> zipWithN(akka.japi.function.Function<java.util.List<T>, O>, java.util.List<akka.stream.javadsl.Source<T, ?>>);
    Code:
       0: aload_2
       1: ifnonnull     19
       4: getstatic     #193                // Field scala/collection/immutable/Seq$.MODULE$:Lscala/collection/immutable/Seq$;
       7: getstatic     #198                // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
      10: invokevirtual #201                // Method scala/collection/immutable/Seq$.apply:(Lscala/collection/Seq;)Lscala/collection/GenTraversable;
      13: checkcast     #203                // class scala/collection/immutable/Seq
      16: goto          47
      19: getstatic     #208                // Field akka/japi/Util$.MODULE$:Lakka/japi/Util$;
      22: aload_2
      23: invokevirtual #212                // Method akka/japi/Util$.immutableSeq:(Ljava/lang/Iterable;)Lscala/collection/immutable/Seq;
      26: new           #258                // class akka/stream/javadsl/Source$$anonfun$3
      29: dup
      30: invokespecial #259                // Method akka/stream/javadsl/Source$$anonfun$3."<init>":()V
      33: getstatic     #193                // Field scala/collection/immutable/Seq$.MODULE$:Lscala/collection/immutable/Seq$;
      36: invokevirtual #219                // Method scala/collection/immutable/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      39: invokeinterface #223,  3          // InterfaceMethod scala/collection/immutable/Seq.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      44: checkcast     #203                // class scala/collection/immutable/Seq
      47: astore_3
      48: new           #23                 // class akka/stream/javadsl/Source
      51: dup
      52: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
      55: new           #261                // class akka/stream/javadsl/Source$$anonfun$zipWithN$1
      58: dup
      59: aload_1
      60: invokespecial #262                // Method akka/stream/javadsl/Source$$anonfun$zipWithN$1."<init>":(Lakka/japi/function/Function;)V
      63: aload_3
      64: invokevirtual #265                // Method akka/stream/scaladsl/Source$.zipWithN:(Lscala/Function1;Lscala/collection/immutable/Seq;)Lakka/stream/scaladsl/Source;
      67: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      70: areturn

  public <T> akka.stream.javadsl.Source<T, akka.stream.javadsl.SourceQueueWithComplete<T>> queue(int, akka.stream.OverflowStrategy);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: iload_1
       8: aload_2
       9: invokevirtual #269                // Method akka/stream/scaladsl/Source$.queue:(ILakka/stream/OverflowStrategy;)Lakka/stream/scaladsl/Source;
      12: new           #271                // class akka/stream/javadsl/Source$$anonfun$queue$1
      15: dup
      16: invokespecial #272                // Method akka/stream/javadsl/Source$$anonfun$queue$1."<init>":()V
      19: invokevirtual #40                 // Method akka/stream/scaladsl/Source.mapMaterializedValue:(Lscala/Function1;)Lakka/stream/scaladsl/Source;
      22: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      25: areturn

  public <T, S> akka.stream.javadsl.Source<T, akka.NotUsed> unfoldResource(akka.japi.function.Creator<S>, akka.japi.function.Function<S, java.util.Optional<T>>, akka.japi.function.Procedure<S>);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: new           #276                // class akka/stream/javadsl/Source$$anonfun$unfoldResource$1
      10: dup
      11: aload_1
      12: invokespecial #277                // Method akka/stream/javadsl/Source$$anonfun$unfoldResource$1."<init>":(Lakka/japi/function/Creator;)V
      15: new           #279                // class akka/stream/javadsl/Source$$anonfun$unfoldResource$2
      18: dup
      19: aload_2
      20: invokespecial #280                // Method akka/stream/javadsl/Source$$anonfun$unfoldResource$2."<init>":(Lakka/japi/function/Function;)V
      23: new           #282                // class akka/stream/javadsl/Source$$anonfun$unfoldResource$3
      26: dup
      27: aload_3
      28: invokespecial #285                // Method akka/stream/javadsl/Source$$anonfun$unfoldResource$3."<init>":(Lakka/japi/function/Procedure;)V
      31: invokevirtual #288                // Method akka/stream/scaladsl/Source$.unfoldResource:(Lscala/Function0;Lscala/Function1;Lscala/Function1;)Lakka/stream/scaladsl/Source;
      34: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      37: areturn

  public <T, S> akka.stream.javadsl.Source<T, akka.NotUsed> unfoldResourceAsync(akka.japi.function.Creator<java.util.concurrent.CompletionStage<S>>, akka.japi.function.Function<S, java.util.concurrent.CompletionStage<java.util.Optional<T>>>, akka.japi.function.Function<S, java.util.concurrent.CompletionStage<akka.Done>>);
    Code:
       0: new           #23                 // class akka/stream/javadsl/Source
       3: dup
       4: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       7: new           #296                // class akka/stream/javadsl/Source$$anonfun$unfoldResourceAsync$1
      10: dup
      11: aload_1
      12: invokespecial #297                // Method akka/stream/javadsl/Source$$anonfun$unfoldResourceAsync$1."<init>":(Lakka/japi/function/Creator;)V
      15: new           #299                // class akka/stream/javadsl/Source$$anonfun$unfoldResourceAsync$2
      18: dup
      19: aload_2
      20: invokespecial #300                // Method akka/stream/javadsl/Source$$anonfun$unfoldResourceAsync$2."<init>":(Lakka/japi/function/Function;)V
      23: new           #302                // class akka/stream/javadsl/Source$$anonfun$unfoldResourceAsync$3
      26: dup
      27: aload_3
      28: invokespecial #303                // Method akka/stream/javadsl/Source$$anonfun$unfoldResourceAsync$3."<init>":(Lakka/japi/function/Function;)V
      31: invokevirtual #305                // Method akka/stream/scaladsl/Source$.unfoldResourceAsync:(Lscala/Function0;Lscala/Function1;Lscala/Function1;)Lakka/stream/scaladsl/Source;
      34: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      37: areturn

  private akka.stream.javadsl.Source$();
    Code:
       0: aload_0
       1: invokespecial #306                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: putstatic     #308                // Field MODULE$:Lakka/stream/javadsl/Source$;
       8: aload_0
       9: new           #23                 // class akka/stream/javadsl/Source
      12: dup
      13: getstatic     #28                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
      16: invokevirtual #177                // Method akka/stream/scaladsl/Source$.empty:()Lakka/stream/scaladsl/Source;
      19: invokespecial #43                 // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
      22: putfield      #19                 // Field _empty:Lakka/stream/javadsl/Source;
      25: return
}
