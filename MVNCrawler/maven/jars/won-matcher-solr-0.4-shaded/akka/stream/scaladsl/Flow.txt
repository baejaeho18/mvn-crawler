Compiled from "Flow.scala"
public final class akka.stream.scaladsl.Flow<In, Out, Mat> implements akka.stream.scaladsl.FlowOpsMat<Out, Mat>, akka.stream.Graph<akka.stream.FlowShape<In, Out>, Mat> {
  private final akka.stream.impl.StreamLayout$Module module;

  private final akka.stream.FlowShape<In, Out> shape;

  public static <I, O, M1, M2, M> akka.stream.scaladsl.Flow<I, O, M> fromSinkAndSourceMat(akka.stream.Graph<akka.stream.SinkShape<I>, M1>, akka.stream.Graph<akka.stream.SourceShape<O>, M2>, scala.Function2<M1, M2, M>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Flow$.MODULE$:Lakka/stream/scaladsl/Flow$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #23                 // Method akka/stream/scaladsl/Flow$.fromSinkAndSourceMat:(Lakka/stream/Graph;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/Flow;
       9: areturn

  public static <I, O> akka.stream.scaladsl.Flow<I, O, akka.NotUsed> fromSinkAndSource(akka.stream.Graph<akka.stream.SinkShape<I>, ?>, akka.stream.Graph<akka.stream.SourceShape<O>, ?>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Flow$.MODULE$:Lakka/stream/scaladsl/Flow$;
       3: aload_0
       4: aload_1
       5: invokevirtual #27                 // Method akka/stream/scaladsl/Flow$.fromSinkAndSource:(Lakka/stream/Graph;Lakka/stream/Graph;)Lakka/stream/scaladsl/Flow;
       8: areturn

  public static <I, O, M> akka.stream.scaladsl.Flow<I, O, M> fromGraph(akka.stream.Graph<akka.stream.FlowShape<I, O>, M>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Flow$.MODULE$:Lakka/stream/scaladsl/Flow$;
       3: aload_0
       4: invokevirtual #31                 // Method akka/stream/scaladsl/Flow$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Flow;
       7: areturn

  public static <A, B> akka.stream.scaladsl.Flow<A, B, akka.NotUsed> fromFunction(scala.Function1<A, B>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Flow$.MODULE$:Lakka/stream/scaladsl/Flow$;
       3: aload_0
       4: invokevirtual #35                 // Method akka/stream/scaladsl/Flow$.fromFunction:(Lscala/Function1;)Lakka/stream/scaladsl/Flow;
       7: areturn

  public static <T> akka.stream.scaladsl.Flow<T, T, akka.NotUsed> apply();
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Flow$.MODULE$:Lakka/stream/scaladsl/Flow$;
       3: invokevirtual #39                 // Method akka/stream/scaladsl/Flow$.apply:()Lakka/stream/scaladsl/Flow;
       6: areturn

  public static <I, O, M> akka.stream.scaladsl.Flow<I, O, M> fromProcessorMat(scala.Function0<scala.Tuple2<org.reactivestreams.Processor<I, O>, M>>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Flow$.MODULE$:Lakka/stream/scaladsl/Flow$;
       3: aload_0
       4: invokevirtual #43                 // Method akka/stream/scaladsl/Flow$.fromProcessorMat:(Lscala/Function0;)Lakka/stream/scaladsl/Flow;
       7: areturn

  public static <I, O> akka.stream.scaladsl.Flow<I, O, akka.NotUsed> fromProcessor(scala.Function0<org.reactivestreams.Processor<I, O>>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Flow$.MODULE$:Lakka/stream/scaladsl/Flow$;
       3: aload_0
       4: invokevirtual #46                 // Method akka/stream/scaladsl/Flow$.fromProcessor:(Lscala/Function0;)Lakka/stream/scaladsl/Flow;
       7: areturn

  public <U, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat zipMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #58                 // Method akka/stream/scaladsl/FlowOpsMat$class.zipMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       6: areturn

  public <Out2, Out3, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat zipWithMat(akka.stream.Graph<akka.stream.SourceShape<Out2>, Mat2>, scala.Function2<Out, Out2, Out3>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #69                 // Method akka/stream/scaladsl/FlowOpsMat$class.zipWithMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;Lscala/Function2;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       7: areturn

  public <U, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat mergeMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, boolean, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: invokestatic  #75                 // Method akka/stream/scaladsl/FlowOpsMat$class.mergeMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;ZLscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       7: areturn

  public <U, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat interleaveMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, int, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: invokestatic  #82                 // Method akka/stream/scaladsl/FlowOpsMat$class.interleaveMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;ILscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       7: areturn

  public <U, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat mergeSortedMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, scala.Function2<Mat, Mat2, Mat3>, scala.math.Ordering<U>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #89                 // Method akka/stream/scaladsl/FlowOpsMat$class.mergeSortedMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;Lscala/Function2;Lscala/math/Ordering;)Lakka/stream/scaladsl/FlowOpsMat;
       7: areturn

  public <U, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat concatMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #94                 // Method akka/stream/scaladsl/FlowOpsMat$class.concatMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       6: areturn

  public <U, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat prependMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #97                 // Method akka/stream/scaladsl/FlowOpsMat$class.prependMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       6: areturn

  public <U, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat orElseMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #100                // Method akka/stream/scaladsl/FlowOpsMat$class.orElseMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       6: areturn

  public <Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat alsoToMat(akka.stream.Graph<akka.stream.SinkShape<Out>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #104                // Method akka/stream/scaladsl/FlowOpsMat$class.alsoToMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       6: areturn

  public <Mat2> akka.stream.scaladsl.FlowOpsMat watchTermination(scala.Function2<Mat, scala.concurrent.Future<akka.Done>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #109                // Method akka/stream/scaladsl/FlowOpsMat$class.watchTermination:(Lakka/stream/scaladsl/FlowOpsMat;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       5: areturn

  public <Mat2> akka.stream.scaladsl.FlowOpsMat monitor(scala.Function2<Mat, akka.stream.FlowMonitor<Out>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #112                // Method akka/stream/scaladsl/FlowOpsMat$class.monitor:(Lakka/stream/scaladsl/FlowOpsMat;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       5: areturn

  public <T, M> akka.stream.scaladsl.FlowOpsMat transformMaterializing(scala.Function0<scala.Tuple2<akka.stream.stage.Stage<Out, T>, M>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #117                // Method akka/stream/scaladsl/FlowOpsMat$class.transformMaterializing:(Lakka/stream/scaladsl/FlowOpsMat;Lscala/Function0;)Lakka/stream/scaladsl/FlowOpsMat;
       5: areturn

  public <U, Mat2, Mat3> boolean mergeMat$default$2();
    Code:
       0: aload_0
       1: invokestatic  #124                // Method akka/stream/scaladsl/FlowOpsMat$class.mergeMat$default$2:(Lakka/stream/scaladsl/FlowOpsMat;)Z
       4: ireturn

  public <T> akka.stream.scaladsl.FlowOps recover(scala.PartialFunction<java.lang.Throwable, T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #131                // Method akka/stream/scaladsl/FlowOps$class.recover:(Lakka/stream/scaladsl/FlowOps;Lscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps recoverWith(scala.PartialFunction<java.lang.Throwable, akka.stream.Graph<akka.stream.SourceShape<T>, akka.NotUsed>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #136                // Method akka/stream/scaladsl/FlowOps$class.recoverWith:(Lakka/stream/scaladsl/FlowOps;Lscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps recoverWithRetries(int, scala.PartialFunction<java.lang.Throwable, akka.stream.Graph<akka.stream.SourceShape<T>, akka.NotUsed>>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #141                // Method akka/stream/scaladsl/FlowOps$class.recoverWithRetries:(Lakka/stream/scaladsl/FlowOps;ILscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <T> akka.stream.scaladsl.FlowOps map(scala.Function1<Out, T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #147                // Method akka/stream/scaladsl/FlowOps$class.map:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps mapConcat(scala.Function1<Out, scala.collection.immutable.Iterable<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #152                // Method akka/stream/scaladsl/FlowOps$class.mapConcat:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps statefulMapConcat(scala.Function0<scala.Function1<Out, scala.collection.immutable.Iterable<T>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #157                // Method akka/stream/scaladsl/FlowOps$class.statefulMapConcat:(Lakka/stream/scaladsl/FlowOps;Lscala/Function0;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps mapAsync(int, scala.Function1<Out, scala.concurrent.Future<T>>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #162                // Method akka/stream/scaladsl/FlowOps$class.mapAsync:(Lakka/stream/scaladsl/FlowOps;ILscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <T> akka.stream.scaladsl.FlowOps mapAsyncUnordered(int, scala.Function1<Out, scala.concurrent.Future<T>>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #166                // Method akka/stream/scaladsl/FlowOps$class.mapAsyncUnordered:(Lakka/stream/scaladsl/FlowOps;ILscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public akka.stream.scaladsl.FlowOps filter(scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #169                // Method akka/stream/scaladsl/FlowOps$class.filter:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps filterNot(scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #173                // Method akka/stream/scaladsl/FlowOps$class.filterNot:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps takeWhile(scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #176                // Method akka/stream/scaladsl/FlowOps$class.takeWhile:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps dropWhile(scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #179                // Method akka/stream/scaladsl/FlowOps$class.dropWhile:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps collect(scala.PartialFunction<Out, T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #182                // Method akka/stream/scaladsl/FlowOps$class.collect:(Lakka/stream/scaladsl/FlowOps;Lscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps grouped(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #187                // Method akka/stream/scaladsl/FlowOps$class.grouped:(Lakka/stream/scaladsl/FlowOps;I)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps limit(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #193                // Method akka/stream/scaladsl/FlowOps$class.limit:(Lakka/stream/scaladsl/FlowOps;J)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps limitWeighted(long, scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: invokestatic  #200                // Method akka/stream/scaladsl/FlowOps$class.limitWeighted:(Lakka/stream/scaladsl/FlowOps;JLscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public akka.stream.scaladsl.FlowOps sliding(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #206                // Method akka/stream/scaladsl/FlowOps$class.sliding:(Lakka/stream/scaladsl/FlowOps;II)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <T> akka.stream.scaladsl.FlowOps scan(T, scala.Function2<T, Out, T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #212                // Method akka/stream/scaladsl/FlowOps$class.scan:(Lakka/stream/scaladsl/FlowOps;Ljava/lang/Object;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <T> akka.stream.scaladsl.FlowOps fold(T, scala.Function2<T, Out, T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #217                // Method akka/stream/scaladsl/FlowOps$class.fold:(Lakka/stream/scaladsl/FlowOps;Ljava/lang/Object;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <T> akka.stream.scaladsl.FlowOps foldAsync(T, scala.Function2<T, Out, scala.concurrent.Future<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #220                // Method akka/stream/scaladsl/FlowOps$class.foldAsync:(Lakka/stream/scaladsl/FlowOps;Ljava/lang/Object;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <T> akka.stream.scaladsl.FlowOps reduce(scala.Function2<T, T, T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #225                // Method akka/stream/scaladsl/FlowOps$class.reduce:(Lakka/stream/scaladsl/FlowOps;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps intersperse(T, T, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #230                // Method akka/stream/scaladsl/FlowOps$class.intersperse:(Lakka/stream/scaladsl/FlowOps;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lakka/stream/scaladsl/FlowOps;
       7: areturn

  public <T> akka.stream.scaladsl.FlowOps intersperse(T);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #237                // Method akka/stream/scaladsl/FlowOps$class.intersperse:(Lakka/stream/scaladsl/FlowOps;Ljava/lang/Object;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps groupedWithin(int, scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #242                // Method akka/stream/scaladsl/FlowOps$class.groupedWithin:(Lakka/stream/scaladsl/FlowOps;ILscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public akka.stream.scaladsl.FlowOps delay(scala.concurrent.duration.FiniteDuration, akka.stream.DelayOverflowStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #249                // Method akka/stream/scaladsl/FlowOps$class.delay:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;Lakka/stream/DelayOverflowStrategy;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public akka.stream.scaladsl.FlowOps drop(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #255                // Method akka/stream/scaladsl/FlowOps$class.drop:(Lakka/stream/scaladsl/FlowOps;J)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps dropWithin(scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #260                // Method akka/stream/scaladsl/FlowOps$class.dropWithin:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps take(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #263                // Method akka/stream/scaladsl/FlowOps$class.take:(Lakka/stream/scaladsl/FlowOps;J)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps takeWithin(scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #266                // Method akka/stream/scaladsl/FlowOps$class.takeWithin:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <S> akka.stream.scaladsl.FlowOps conflateWithSeed(scala.Function1<Out, S>, scala.Function2<S, Out, S>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #271                // Method akka/stream/scaladsl/FlowOps$class.conflateWithSeed:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <O2> akka.stream.scaladsl.FlowOps conflate(scala.Function2<O2, O2, O2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #276                // Method akka/stream/scaladsl/FlowOps$class.conflate:(Lakka/stream/scaladsl/FlowOps;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <S> akka.stream.scaladsl.FlowOps batch(long, scala.Function1<Out, S>, scala.Function2<S, Out, S>);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: aload         4
       5: invokestatic  #281                // Method akka/stream/scaladsl/FlowOps$class.batch:(Lakka/stream/scaladsl/FlowOps;JLscala/Function1;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       8: areturn

  public <S> akka.stream.scaladsl.FlowOps batchWeighted(long, scala.Function1<Out, java.lang.Object>, scala.Function1<Out, S>, scala.Function2<S, Out, S>);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: aload         4
       5: aload         5
       7: invokestatic  #286                // Method akka/stream/scaladsl/FlowOps$class.batchWeighted:(Lakka/stream/scaladsl/FlowOps;JLscala/Function1;Lscala/Function1;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      10: areturn

  public <U> akka.stream.scaladsl.FlowOps expand(scala.Function1<Out, scala.collection.Iterator<U>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #289                // Method akka/stream/scaladsl/FlowOps$class.expand:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps buffer(int, akka.stream.OverflowStrategy);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #295                // Method akka/stream/scaladsl/FlowOps$class.buffer:(Lakka/stream/scaladsl/FlowOps;ILakka/stream/OverflowStrategy;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <T> akka.stream.scaladsl.FlowOps transform(scala.Function0<akka.stream.stage.Stage<Out, T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #301                // Method akka/stream/scaladsl/FlowOps$class.transform:(Lakka/stream/scaladsl/FlowOps;Lscala/Function0;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <U> akka.stream.scaladsl.FlowOps prefixAndTail(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #305                // Method akka/stream/scaladsl/FlowOps$class.prefixAndTail:(Lakka/stream/scaladsl/FlowOps;I)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <K> akka.stream.scaladsl.SubFlow<Out, Mat, akka.stream.scaladsl.FlowOps, java.lang.Object> groupBy(int, scala.Function1<Out, K>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #310                // Method akka/stream/scaladsl/FlowOps$class.groupBy:(Lakka/stream/scaladsl/FlowOps;ILscala/Function1;)Lakka/stream/scaladsl/SubFlow;
       6: areturn

  public akka.stream.scaladsl.SubFlow<Out, Mat, akka.stream.scaladsl.FlowOps, java.lang.Object> splitWhen(akka.stream.SubstreamCancelStrategy, scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #316                // Method akka/stream/scaladsl/FlowOps$class.splitWhen:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/SubstreamCancelStrategy;Lscala/Function1;)Lakka/stream/scaladsl/SubFlow;
       6: areturn

  public akka.stream.scaladsl.SubFlow<Out, Mat, akka.stream.scaladsl.FlowOps, java.lang.Object> splitWhen(scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #322                // Method akka/stream/scaladsl/FlowOps$class.splitWhen:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/SubFlow;
       5: areturn

  public akka.stream.scaladsl.SubFlow<Out, Mat, akka.stream.scaladsl.FlowOps, java.lang.Object> splitAfter(akka.stream.SubstreamCancelStrategy, scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #325                // Method akka/stream/scaladsl/FlowOps$class.splitAfter:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/SubstreamCancelStrategy;Lscala/Function1;)Lakka/stream/scaladsl/SubFlow;
       6: areturn

  public akka.stream.scaladsl.SubFlow<Out, Mat, akka.stream.scaladsl.FlowOps, java.lang.Object> splitAfter(scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #327                // Method akka/stream/scaladsl/FlowOps$class.splitAfter:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/SubFlow;
       5: areturn

  public <T, M> akka.stream.scaladsl.FlowOps flatMapConcat(scala.Function1<Out, akka.stream.Graph<akka.stream.SourceShape<T>, M>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #330                // Method akka/stream/scaladsl/FlowOps$class.flatMapConcat:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T, M> akka.stream.scaladsl.FlowOps flatMapMerge(int, scala.Function1<Out, akka.stream.Graph<akka.stream.SourceShape<T>, M>>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #333                // Method akka/stream/scaladsl/FlowOps$class.flatMapMerge:(Lakka/stream/scaladsl/FlowOps;ILscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public akka.stream.scaladsl.FlowOps initialTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #337                // Method akka/stream/scaladsl/FlowOps$class.initialTimeout:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps completionTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #341                // Method akka/stream/scaladsl/FlowOps$class.completionTimeout:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps idleTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #344                // Method akka/stream/scaladsl/FlowOps$class.idleTimeout:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps backpressureTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #347                // Method akka/stream/scaladsl/FlowOps$class.backpressureTimeout:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <U> akka.stream.scaladsl.FlowOps keepAlive(scala.concurrent.duration.FiniteDuration, scala.Function0<U>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #352                // Method akka/stream/scaladsl/FlowOps$class.keepAlive:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;Lscala/Function0;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public akka.stream.scaladsl.FlowOps throttle(int, scala.concurrent.duration.FiniteDuration, int, akka.stream.ThrottleMode);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: aload         4
       6: invokestatic  #359                // Method akka/stream/scaladsl/FlowOps$class.throttle:(Lakka/stream/scaladsl/FlowOps;ILscala/concurrent/duration/FiniteDuration;ILakka/stream/ThrottleMode;)Lakka/stream/scaladsl/FlowOps;
       9: areturn

  public akka.stream.scaladsl.FlowOps throttle(int, scala.concurrent.duration.FiniteDuration, int, scala.Function1<Out, java.lang.Object>, akka.stream.ThrottleMode);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #368                // Method akka/stream/scaladsl/FlowOps$class.throttle:(Lakka/stream/scaladsl/FlowOps;ILscala/concurrent/duration/FiniteDuration;ILscala/Function1;Lakka/stream/ThrottleMode;)Lakka/stream/scaladsl/FlowOps;
      11: areturn

  public akka.stream.scaladsl.FlowOps detach();
    Code:
       0: aload_0
       1: invokestatic  #375                // Method akka/stream/scaladsl/FlowOps$class.detach:(Lakka/stream/scaladsl/FlowOps;)Lakka/stream/scaladsl/FlowOps;
       4: areturn

  public akka.stream.scaladsl.FlowOps initialDelay(scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #378                // Method akka/stream/scaladsl/FlowOps$class.initialDelay:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps log(java.lang.String, scala.Function1<Out, java.lang.Object>, akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #383                // Method akka/stream/scaladsl/FlowOps$class.log:(Lakka/stream/scaladsl/FlowOps;Ljava/lang/String;Lscala/Function1;Lakka/event/LoggingAdapter;)Lakka/stream/scaladsl/FlowOps;
       7: areturn

  public <U> akka.stream.scaladsl.FlowOps zip(akka.stream.Graph<akka.stream.SourceShape<U>, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #392                // Method akka/stream/scaladsl/FlowOps$class.zip:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <U, M> akka.stream.Graph<akka.stream.FlowShape<Out, scala.Tuple2<Out, U>>, M> zipGraph(akka.stream.Graph<akka.stream.SourceShape<U>, M>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #397                // Method akka/stream/scaladsl/FlowOps$class.zipGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/Graph;
       5: areturn

  public <Out2, Out3> akka.stream.scaladsl.FlowOps zipWith(akka.stream.Graph<akka.stream.SourceShape<Out2>, ?>, scala.Function2<Out, Out2, Out3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #402                // Method akka/stream/scaladsl/FlowOps$class.zipWith:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <Out2, Out3, M> akka.stream.Graph<akka.stream.FlowShape<Out, Out3>, M> zipWithGraph(akka.stream.Graph<akka.stream.SourceShape<Out2>, M>, scala.Function2<Out, Out2, Out3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #407                // Method akka/stream/scaladsl/FlowOps$class.zipWithGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/Graph;
       6: areturn

  public akka.stream.scaladsl.FlowOps zipWithIndex();
    Code:
       0: aload_0
       1: invokestatic  #410                // Method akka/stream/scaladsl/FlowOps$class.zipWithIndex:(Lakka/stream/scaladsl/FlowOps;)Lakka/stream/scaladsl/FlowOps;
       4: areturn

  public <U> akka.stream.scaladsl.FlowOps interleave(akka.stream.Graph<akka.stream.SourceShape<U>, ?>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #415                // Method akka/stream/scaladsl/FlowOps$class.interleave:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;I)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <U, M> akka.stream.Graph<akka.stream.FlowShape<Out, U>, M> interleaveGraph(akka.stream.Graph<akka.stream.SourceShape<U>, M>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #421                // Method akka/stream/scaladsl/FlowOps$class.interleaveGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;I)Lakka/stream/Graph;
       6: areturn

  public <U, M> akka.stream.scaladsl.FlowOps merge(akka.stream.Graph<akka.stream.SourceShape<U>, M>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #426                // Method akka/stream/scaladsl/FlowOps$class.merge:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;Z)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <U, M> akka.stream.Graph<akka.stream.FlowShape<Out, U>, M> mergeGraph(akka.stream.Graph<akka.stream.SourceShape<U>, M>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #431                // Method akka/stream/scaladsl/FlowOps$class.mergeGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;Z)Lakka/stream/Graph;
       6: areturn

  public <U, M> akka.stream.scaladsl.FlowOps mergeSorted(akka.stream.Graph<akka.stream.SourceShape<U>, M>, scala.math.Ordering<U>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #436                // Method akka/stream/scaladsl/FlowOps$class.mergeSorted:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;Lscala/math/Ordering;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <U, M> akka.stream.Graph<akka.stream.FlowShape<Out, U>, M> mergeSortedGraph(akka.stream.Graph<akka.stream.SourceShape<U>, M>, scala.math.Ordering<U>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #441                // Method akka/stream/scaladsl/FlowOps$class.mergeSortedGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;Lscala/math/Ordering;)Lakka/stream/Graph;
       6: areturn

  public <U, Mat2> akka.stream.scaladsl.FlowOps concat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #444                // Method akka/stream/scaladsl/FlowOps$class.concat:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <U, Mat2> akka.stream.Graph<akka.stream.FlowShape<Out, U>, Mat2> concatGraph(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #447                // Method akka/stream/scaladsl/FlowOps$class.concatGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/Graph;
       5: areturn

  public <U, Mat2> akka.stream.scaladsl.FlowOps prepend(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #450                // Method akka/stream/scaladsl/FlowOps$class.prepend:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <U, Mat2> akka.stream.Graph<akka.stream.FlowShape<Out, U>, Mat2> prependGraph(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #453                // Method akka/stream/scaladsl/FlowOps$class.prependGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/Graph;
       5: areturn

  public <U, Mat2> akka.stream.scaladsl.FlowOps orElse(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #456                // Method akka/stream/scaladsl/FlowOps$class.orElse:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <U, Mat2> akka.stream.Graph<akka.stream.FlowShape<Out, U>, Mat2> orElseGraph(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #459                // Method akka/stream/scaladsl/FlowOps$class.orElseGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/Graph;
       5: areturn

  public <U, M> akka.stream.scaladsl.FlowOps $plus$plus(akka.stream.Graph<akka.stream.SourceShape<U>, M>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #462                // Method akka/stream/scaladsl/FlowOps$class.$plus$plus:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps alsoTo(akka.stream.Graph<akka.stream.SinkShape<Out>, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #465                // Method akka/stream/scaladsl/FlowOps$class.alsoTo:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <M> akka.stream.Graph<akka.stream.FlowShape<Out, Out>, M> alsoToGraph(akka.stream.Graph<akka.stream.SinkShape<Out>, M>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #468                // Method akka/stream/scaladsl/FlowOps$class.alsoToGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/Graph;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps andThen(akka.stream.impl.Stages$SymbolicStage<Out, T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #473                // Method akka/stream/scaladsl/FlowOps$class.andThen:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/impl/Stages$SymbolicStage;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public int sliding$default$2();
    Code:
       0: aload_0
       1: invokestatic  #480                // Method akka/stream/scaladsl/FlowOps$class.sliding$default$2:(Lakka/stream/scaladsl/FlowOps;)I
       4: ireturn

  public akka.stream.DelayOverflowStrategy delay$default$2();
    Code:
       0: aload_0
       1: invokestatic  #485                // Method akka/stream/scaladsl/FlowOps$class.delay$default$2:(Lakka/stream/scaladsl/FlowOps;)Lakka/stream/DelayOverflowStrategy;
       4: areturn

  public <U, M> boolean merge$default$2();
    Code:
       0: aload_0
       1: invokestatic  #489                // Method akka/stream/scaladsl/FlowOps$class.merge$default$2:(Lakka/stream/scaladsl/FlowOps;)Z
       4: ireturn

  public scala.Function1<Out, java.lang.Object> log$default$2();
    Code:
       0: aload_0
       1: invokestatic  #494                // Method akka/stream/scaladsl/FlowOps$class.log$default$2:(Lakka/stream/scaladsl/FlowOps;)Lscala/Function1;
       4: areturn

  public akka.event.LoggingAdapter log$default$3(java.lang.String, scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #499                // Method akka/stream/scaladsl/FlowOps$class.log$default$3:(Lakka/stream/scaladsl/FlowOps;Ljava/lang/String;Lscala/Function1;)Lakka/event/LoggingAdapter;
       6: areturn

  public akka.stream.impl.StreamLayout$Module module();
    Code:
       0: aload_0
       1: getfield      #502                // Field module:Lakka/stream/impl/StreamLayout$Module;
       4: areturn

  public akka.stream.FlowShape<In, Out> shape();
    Code:
       0: aload_0
       1: getfield      #505                // Field shape:Lakka/stream/FlowShape;
       4: areturn

  public java.lang.String toString();
    Code:
       0: new           #509                // class scala/StringContext
       3: dup
       4: getstatic     #514                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       7: iconst_3
       8: anewarray     #516                // class java/lang/String
      11: dup
      12: iconst_0
      13: ldc_w         #518                // String Flow(
      16: aastore
      17: dup
      18: iconst_1
      19: ldc_w         #520                // String ,
      22: aastore
      23: dup
      24: iconst_2
      25: ldc_w         #522                // String )
      28: aastore
      29: checkcast     #524                // class "[Ljava/lang/Object;"
      32: invokevirtual #528                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      35: invokespecial #532                // Method scala/StringContext."<init>":(Lscala/collection/Seq;)V
      38: getstatic     #514                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      41: iconst_2
      42: anewarray     #5                  // class java/lang/Object
      45: dup
      46: iconst_0
      47: aload_0
      48: invokevirtual #534                // Method shape:()Lakka/stream/FlowShape;
      51: aastore
      52: dup
      53: iconst_1
      54: aload_0
      55: invokevirtual #536                // Method module:()Lakka/stream/impl/StreamLayout$Module;
      58: aastore
      59: invokevirtual #540                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      62: invokevirtual #544                // Method scala/StringContext.s:(Lscala/collection/Seq;)Ljava/lang/String;
      65: areturn

  public boolean isIdentity();
    Code:
       0: aload_0
       1: invokevirtual #536                // Method module:()Lakka/stream/impl/StreamLayout$Module;
       4: getstatic     #550                // Field akka/stream/impl/fusing/GraphStages$Identity$.MODULE$:Lakka/stream/impl/fusing/GraphStages$Identity$;
       7: invokevirtual #551                // Method akka/stream/impl/fusing/GraphStages$Identity$.module:()Lakka/stream/impl/StreamLayout$Module;
      10: if_acmpne     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public <T, Mat2> akka.stream.scaladsl.Flow<In, T, Mat> via(akka.stream.Graph<akka.stream.FlowShape<Out, T>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #557                // Field akka/stream/scaladsl/Keep$.MODULE$:Lakka/stream/scaladsl/Keep$;
       5: invokevirtual #561                // Method akka/stream/scaladsl/Keep$.left:()Lscala/Function2;
       8: invokevirtual #565                // Method viaMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/Flow;
      11: areturn

  public <T, Mat2, Mat3> akka.stream.scaladsl.Flow<In, T, Mat3> viaMat(akka.stream.Graph<akka.stream.FlowShape<Out, T>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: invokevirtual #568                // Method isIdentity:()Z
       4: ifeq          188
       7: aload_1
       8: invokeinterface #569,  1          // InterfaceMethod akka/stream/Graph.module:()Lakka/stream/impl/StreamLayout$Module;
      13: astore_3
      14: aload_2
      15: getstatic     #557                // Field akka/stream/scaladsl/Keep$.MODULE$:Lakka/stream/scaladsl/Keep$;
      18: invokevirtual #561                // Method akka/stream/scaladsl/Keep$.left:()Lscala/Function2;
      21: astore        5
      23: dup
      24: ifnonnull     36
      27: pop
      28: aload         5
      30: ifnull        44
      33: goto          86
      36: aload         5
      38: invokevirtual #573                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      41: ifeq          86
      44: getstatic     #578                // Field akka/stream/impl/StreamLayout$IgnorableMatValComp$.MODULE$:Lakka/stream/impl/StreamLayout$IgnorableMatValComp$;
      47: aload_3
      48: invokevirtual #581                // Method akka/stream/impl/StreamLayout$IgnorableMatValComp$.apply:(Lakka/stream/impl/StreamLayout$Module;)Z
      51: ifeq          60
      54: getstatic     #586                // Field akka/stream/impl/StreamLayout$Ignore$.MODULE$:Lakka/stream/impl/StreamLayout$Ignore$;
      57: goto          105
      60: new           #588                // class akka/stream/impl/StreamLayout$Transform
      63: dup
      64: new           #590                // class akka/stream/scaladsl/Flow$$anonfun$1
      67: dup
      68: aload_0
      69: invokespecial #593                // Method akka/stream/scaladsl/Flow$$anonfun$1."<init>":(Lakka/stream/scaladsl/Flow;)V
      72: new           #595                // class akka/stream/impl/StreamLayout$Atomic
      75: dup
      76: aload_3
      77: invokespecial #598                // Method akka/stream/impl/StreamLayout$Atomic."<init>":(Lakka/stream/impl/StreamLayout$Module;)V
      80: invokespecial #601                // Method akka/stream/impl/StreamLayout$Transform."<init>":(Lscala/Function1;Lakka/stream/impl/StreamLayout$MaterializedValueNode;)V
      83: goto          105
      86: new           #603                // class akka/stream/impl/StreamLayout$Combine
      89: dup
      90: aload_2
      91: getstatic     #586                // Field akka/stream/impl/StreamLayout$Ignore$.MODULE$:Lakka/stream/impl/StreamLayout$Ignore$;
      94: new           #595                // class akka/stream/impl/StreamLayout$Atomic
      97: dup
      98: aload_3
      99: invokespecial #598                // Method akka/stream/impl/StreamLayout$Atomic."<init>":(Lakka/stream/impl/StreamLayout$Module;)V
     102: invokespecial #606                // Method akka/stream/impl/StreamLayout$Combine."<init>":(Lscala/Function2;Lakka/stream/impl/StreamLayout$MaterializedValueNode;Lakka/stream/impl/StreamLayout$MaterializedValueNode;)V
     105: astore        4
     107: new           #2                  // class akka/stream/scaladsl/Flow
     110: dup
     111: new           #608                // class akka/stream/impl/StreamLayout$CompositeModule
     114: dup
     115: getstatic     #514                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     118: invokevirtual #612                // Method scala/Predef$.Set:()Lscala/collection/immutable/Set$;
     121: getstatic     #514                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     124: iconst_1
     125: anewarray     #614                // class akka/stream/impl/StreamLayout$Module
     128: dup
     129: iconst_0
     130: aload_3
     131: aastore
     132: checkcast     #524                // class "[Ljava/lang/Object;"
     135: invokevirtual #528                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
     138: invokevirtual #619                // Method scala/collection/immutable/Set$.apply:(Lscala/collection/Seq;)Lscala/collection/GenTraversable;
     141: checkcast     #621                // class scala/collection/immutable/Set
     144: aload_3
     145: invokeinterface #624,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.shape:()Lakka/stream/Shape;
     150: getstatic     #514                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     153: invokevirtual #628                // Method scala/Predef$.Map:()Lscala/collection/immutable/Map$;
     156: invokevirtual #634                // Method scala/collection/immutable/Map$.empty:()Lscala/collection/immutable/Map;
     159: getstatic     #514                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     162: invokevirtual #628                // Method scala/Predef$.Map:()Lscala/collection/immutable/Map$;
     165: invokevirtual #634                // Method scala/collection/immutable/Map$.empty:()Lscala/collection/immutable/Map;
     168: aload         4
     170: checkcast     #636                // class akka/stream/impl/StreamLayout$MaterializedValueNode
     173: getstatic     #641                // Field akka/stream/Attributes$.MODULE$:Lakka/stream/Attributes$;
     176: invokevirtual #645                // Method akka/stream/Attributes$.none:()Lakka/stream/Attributes;
     179: invokespecial #648                // Method akka/stream/impl/StreamLayout$CompositeModule."<init>":(Lscala/collection/immutable/Set;Lakka/stream/Shape;Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lakka/stream/impl/StreamLayout$MaterializedValueNode;Lakka/stream/Attributes;)V
     182: invokespecial #649                // Method "<init>":(Lakka/stream/impl/StreamLayout$Module;)V
     185: goto          282
     188: aload_1
     189: invokeinterface #569,  1          // InterfaceMethod akka/stream/Graph.module:()Lakka/stream/impl/StreamLayout$Module;
     194: invokeinterface #652,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.carbonCopy:()Lakka/stream/impl/StreamLayout$Module;
     199: astore        6
     201: new           #2                  // class akka/stream/scaladsl/Flow
     204: dup
     205: aload_0
     206: invokevirtual #536                // Method module:()Lakka/stream/impl/StreamLayout$Module;
     209: aload         6
     211: aload_0
     212: invokevirtual #534                // Method shape:()Lakka/stream/FlowShape;
     215: invokevirtual #658                // Method akka/stream/FlowShape.out:()Lakka/stream/Outlet;
     218: aload         6
     220: invokeinterface #624,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.shape:()Lakka/stream/Shape;
     225: invokevirtual #664                // Method akka/stream/Shape.inlets:()Lscala/collection/immutable/Seq;
     228: invokeinterface #670,  1          // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
     233: checkcast     #672                // class akka/stream/InPort
     236: aload_2
     237: invokeinterface #676,  5          // InterfaceMethod akka/stream/impl/StreamLayout$Module.fuse:(Lakka/stream/impl/StreamLayout$Module;Lakka/stream/OutPort;Lakka/stream/InPort;Lscala/Function2;)Lakka/stream/impl/StreamLayout$Module;
     242: new           #654                // class akka/stream/FlowShape
     245: dup
     246: aload_0
     247: invokevirtual #534                // Method shape:()Lakka/stream/FlowShape;
     250: invokevirtual #680                // Method akka/stream/FlowShape.in:()Lakka/stream/Inlet;
     253: aload         6
     255: invokeinterface #624,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.shape:()Lakka/stream/Shape;
     260: invokevirtual #683                // Method akka/stream/Shape.outlets:()Lscala/collection/immutable/Seq;
     263: invokeinterface #670,  1          // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
     268: checkcast     #685                // class akka/stream/Outlet
     271: invokespecial #688                // Method akka/stream/FlowShape."<init>":(Lakka/stream/Inlet;Lakka/stream/Outlet;)V
     274: invokeinterface #692,  2          // InterfaceMethod akka/stream/impl/StreamLayout$Module.replaceShape:(Lakka/stream/Shape;)Lakka/stream/impl/StreamLayout$Module;
     279: invokespecial #649                // Method "<init>":(Lakka/stream/impl/StreamLayout$Module;)V
     282: areturn

  public <Mat2> akka.stream.scaladsl.Sink<In, Mat> to(akka.stream.Graph<akka.stream.SinkShape<Out>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #557                // Field akka/stream/scaladsl/Keep$.MODULE$:Lakka/stream/scaladsl/Keep$;
       5: invokevirtual #561                // Method akka/stream/scaladsl/Keep$.left:()Lscala/Function2;
       8: invokevirtual #704                // Method toMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/Sink;
      11: areturn

  public <Mat2, Mat3> akka.stream.scaladsl.Sink<In, Mat3> toMat(akka.stream.Graph<akka.stream.SinkShape<Out>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: invokevirtual #568                // Method isIdentity:()Z
       4: ifeq          29
       7: getstatic     #710                // Field akka/stream/scaladsl/Sink$.MODULE$:Lakka/stream/scaladsl/Sink$;
      10: aload_1
      11: invokevirtual #712                // Method akka/stream/scaladsl/Sink$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Sink;
      14: new           #714                // class akka/stream/scaladsl/Flow$$anonfun$toMat$1
      17: dup
      18: aload_0
      19: aload_2
      20: invokespecial #717                // Method akka/stream/scaladsl/Flow$$anonfun$toMat$1."<init>":(Lakka/stream/scaladsl/Flow;Lscala/Function2;)V
      23: invokevirtual #723                // Method akka/stream/scaladsl/Sink.mapMaterializedValue:(Lscala/Function1;)Lakka/stream/scaladsl/Sink;
      26: goto          102
      29: aload_1
      30: invokeinterface #569,  1          // InterfaceMethod akka/stream/Graph.module:()Lakka/stream/impl/StreamLayout$Module;
      35: invokeinterface #652,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.carbonCopy:()Lakka/stream/impl/StreamLayout$Module;
      40: astore_3
      41: new           #719                // class akka/stream/scaladsl/Sink
      44: dup
      45: aload_0
      46: invokevirtual #536                // Method module:()Lakka/stream/impl/StreamLayout$Module;
      49: aload_3
      50: aload_0
      51: invokevirtual #534                // Method shape:()Lakka/stream/FlowShape;
      54: invokevirtual #658                // Method akka/stream/FlowShape.out:()Lakka/stream/Outlet;
      57: aload_3
      58: invokeinterface #624,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.shape:()Lakka/stream/Shape;
      63: invokevirtual #664                // Method akka/stream/Shape.inlets:()Lscala/collection/immutable/Seq;
      66: invokeinterface #670,  1          // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
      71: checkcast     #672                // class akka/stream/InPort
      74: aload_2
      75: invokeinterface #676,  5          // InterfaceMethod akka/stream/impl/StreamLayout$Module.fuse:(Lakka/stream/impl/StreamLayout$Module;Lakka/stream/OutPort;Lakka/stream/InPort;Lscala/Function2;)Lakka/stream/impl/StreamLayout$Module;
      80: new           #725                // class akka/stream/SinkShape
      83: dup
      84: aload_0
      85: invokevirtual #534                // Method shape:()Lakka/stream/FlowShape;
      88: invokevirtual #680                // Method akka/stream/FlowShape.in:()Lakka/stream/Inlet;
      91: invokespecial #728                // Method akka/stream/SinkShape."<init>":(Lakka/stream/Inlet;)V
      94: invokeinterface #692,  2          // InterfaceMethod akka/stream/impl/StreamLayout$Module.replaceShape:(Lakka/stream/Shape;)Lakka/stream/impl/StreamLayout$Module;
      99: invokespecial #729                // Method akka/stream/scaladsl/Sink."<init>":(Lakka/stream/impl/StreamLayout$Module;)V
     102: areturn

  public <Mat2> akka.stream.scaladsl.Flow<In, Out, Mat2> mapMaterializedValue(scala.Function1<Mat, Mat2>);
    Code:
       0: new           #2                  // class akka/stream/scaladsl/Flow
       3: dup
       4: aload_0
       5: invokevirtual #536                // Method module:()Lakka/stream/impl/StreamLayout$Module;
       8: aload_1
       9: invokeinterface #734,  2          // InterfaceMethod akka/stream/impl/StreamLayout$Module.transformMaterializedValue:(Lscala/Function1;)Lakka/stream/impl/StreamLayout$Module;
      14: invokespecial #649                // Method "<init>":(Lakka/stream/impl/StreamLayout$Module;)V
      17: areturn

  public <Mat2> akka.stream.scaladsl.RunnableGraph<Mat> join(akka.stream.Graph<akka.stream.FlowShape<Out, In>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #557                // Field akka/stream/scaladsl/Keep$.MODULE$:Lakka/stream/scaladsl/Keep$;
       5: invokevirtual #561                // Method akka/stream/scaladsl/Keep$.left:()Lscala/Function2;
       8: invokevirtual #740                // Method joinMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/RunnableGraph;
      11: areturn

  public <Mat2, Mat3> akka.stream.scaladsl.RunnableGraph<Mat3> joinMat(akka.stream.Graph<akka.stream.FlowShape<Out, In>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_1
       1: invokeinterface #569,  1          // InterfaceMethod akka/stream/Graph.module:()Lakka/stream/impl/StreamLayout$Module;
       6: invokeinterface #652,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.carbonCopy:()Lakka/stream/impl/StreamLayout$Module;
      11: astore_3
      12: new           #742                // class akka/stream/scaladsl/RunnableGraph
      15: dup
      16: aload_0
      17: invokevirtual #536                // Method module:()Lakka/stream/impl/StreamLayout$Module;
      20: aload_3
      21: aload_2
      22: invokeinterface #746,  3          // InterfaceMethod akka/stream/impl/StreamLayout$Module.compose:(Lakka/stream/impl/StreamLayout$Module;Lscala/Function2;)Lakka/stream/impl/StreamLayout$Module;
      27: aload_0
      28: invokevirtual #534                // Method shape:()Lakka/stream/FlowShape;
      31: invokevirtual #658                // Method akka/stream/FlowShape.out:()Lakka/stream/Outlet;
      34: aload_3
      35: invokeinterface #624,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.shape:()Lakka/stream/Shape;
      40: invokevirtual #664                // Method akka/stream/Shape.inlets:()Lscala/collection/immutable/Seq;
      43: invokeinterface #670,  1          // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
      48: checkcast     #672                // class akka/stream/InPort
      51: invokeinterface #750,  3          // InterfaceMethod akka/stream/impl/StreamLayout$Module.wire:(Lakka/stream/OutPort;Lakka/stream/InPort;)Lakka/stream/impl/StreamLayout$Module;
      56: aload_3
      57: invokeinterface #624,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.shape:()Lakka/stream/Shape;
      62: invokevirtual #683                // Method akka/stream/Shape.outlets:()Lscala/collection/immutable/Seq;
      65: invokeinterface #670,  1          // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
      70: checkcast     #752                // class akka/stream/OutPort
      73: aload_0
      74: invokevirtual #534                // Method shape:()Lakka/stream/FlowShape;
      77: invokevirtual #680                // Method akka/stream/FlowShape.in:()Lakka/stream/Inlet;
      80: invokeinterface #750,  3          // InterfaceMethod akka/stream/impl/StreamLayout$Module.wire:(Lakka/stream/OutPort;Lakka/stream/InPort;)Lakka/stream/impl/StreamLayout$Module;
      85: invokespecial #753                // Method akka/stream/scaladsl/RunnableGraph."<init>":(Lakka/stream/impl/StreamLayout$Module;)V
      88: areturn

  public <I2, O2, Mat2> akka.stream.scaladsl.Flow<I2, O2, Mat> join(akka.stream.Graph<akka.stream.BidiShape<Out, O2, I2, In>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #557                // Field akka/stream/scaladsl/Keep$.MODULE$:Lakka/stream/scaladsl/Keep$;
       5: invokevirtual #561                // Method akka/stream/scaladsl/Keep$.left:()Lscala/Function2;
       8: invokevirtual #755                // Method joinMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/Flow;
      11: areturn

  public <I2, O2, Mat2, M> akka.stream.scaladsl.Flow<I2, O2, M> joinMat(akka.stream.Graph<akka.stream.BidiShape<Out, O2, I2, In>, Mat2>, scala.Function2<Mat, Mat2, M>);
    Code:
       0: aload_1
       1: invokeinterface #569,  1          // InterfaceMethod akka/stream/Graph.module:()Lakka/stream/impl/StreamLayout$Module;
       6: invokeinterface #652,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.carbonCopy:()Lakka/stream/impl/StreamLayout$Module;
      11: astore_3
      12: aload_3
      13: invokeinterface #624,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.shape:()Lakka/stream/Shape;
      18: invokevirtual #664                // Method akka/stream/Shape.inlets:()Lscala/collection/immutable/Seq;
      21: astore        4
      23: aload_3
      24: invokeinterface #624,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.shape:()Lakka/stream/Shape;
      29: invokevirtual #683                // Method akka/stream/Shape.outlets:()Lscala/collection/immutable/Seq;
      32: astore        5
      34: new           #2                  // class akka/stream/scaladsl/Flow
      37: dup
      38: aload_0
      39: invokevirtual #536                // Method module:()Lakka/stream/impl/StreamLayout$Module;
      42: aload_3
      43: aload_2
      44: invokeinterface #746,  3          // InterfaceMethod akka/stream/impl/StreamLayout$Module.compose:(Lakka/stream/impl/StreamLayout$Module;Lscala/Function2;)Lakka/stream/impl/StreamLayout$Module;
      49: aload_0
      50: invokevirtual #534                // Method shape:()Lakka/stream/FlowShape;
      53: invokevirtual #658                // Method akka/stream/FlowShape.out:()Lakka/stream/Outlet;
      56: aload         4
      58: invokeinterface #670,  1          // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
      63: checkcast     #672                // class akka/stream/InPort
      66: invokeinterface #750,  3          // InterfaceMethod akka/stream/impl/StreamLayout$Module.wire:(Lakka/stream/OutPort;Lakka/stream/InPort;)Lakka/stream/impl/StreamLayout$Module;
      71: aload         5
      73: iconst_1
      74: invokeinterface #759,  2          // InterfaceMethod scala/collection/immutable/Seq.apply:(I)Ljava/lang/Object;
      79: checkcast     #752                // class akka/stream/OutPort
      82: aload_0
      83: invokevirtual #534                // Method shape:()Lakka/stream/FlowShape;
      86: invokevirtual #680                // Method akka/stream/FlowShape.in:()Lakka/stream/Inlet;
      89: invokeinterface #750,  3          // InterfaceMethod akka/stream/impl/StreamLayout$Module.wire:(Lakka/stream/OutPort;Lakka/stream/InPort;)Lakka/stream/impl/StreamLayout$Module;
      94: new           #654                // class akka/stream/FlowShape
      97: dup
      98: aload         4
     100: iconst_1
     101: invokeinterface #759,  2          // InterfaceMethod scala/collection/immutable/Seq.apply:(I)Ljava/lang/Object;
     106: checkcast     #761                // class akka/stream/Inlet
     109: aload         5
     111: invokeinterface #670,  1          // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
     116: checkcast     #685                // class akka/stream/Outlet
     119: invokespecial #688                // Method akka/stream/FlowShape."<init>":(Lakka/stream/Inlet;Lakka/stream/Outlet;)V
     122: invokeinterface #692,  2          // InterfaceMethod akka/stream/impl/StreamLayout$Module.replaceShape:(Lakka/stream/Shape;)Lakka/stream/impl/StreamLayout$Module;
     127: invokespecial #649                // Method "<init>":(Lakka/stream/impl/StreamLayout$Module;)V
     130: areturn

  public akka.stream.scaladsl.Flow<In, Out, Mat> withAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: invokevirtual #568                // Method isIdentity:()Z
       4: ifeq          11
       7: aload_0
       8: goto          28
      11: new           #2                  // class akka/stream/scaladsl/Flow
      14: dup
      15: aload_0
      16: invokevirtual #536                // Method module:()Lakka/stream/impl/StreamLayout$Module;
      19: aload_1
      20: invokeinterface #770,  2          // InterfaceMethod akka/stream/impl/StreamLayout$Module.withAttributes:(Lakka/stream/Attributes;)Lakka/stream/impl/StreamLayout$Module;
      25: invokespecial #649                // Method "<init>":(Lakka/stream/impl/StreamLayout$Module;)V
      28: areturn

  public akka.stream.scaladsl.Flow<In, Out, Mat> addAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #536                // Method module:()Lakka/stream/impl/StreamLayout$Module;
       5: invokeinterface #776,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.attributes:()Lakka/stream/Attributes;
      10: aload_1
      11: invokevirtual #782                // Method akka/stream/Attributes.and:(Lakka/stream/Attributes;)Lakka/stream/Attributes;
      14: invokevirtual #784                // Method withAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Flow;
      17: areturn

  public akka.stream.scaladsl.Flow<In, Out, Mat> named(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #641                // Field akka/stream/Attributes$.MODULE$:Lakka/stream/Attributes$;
       4: aload_1
       5: invokevirtual #789                // Method akka/stream/Attributes$.name:(Ljava/lang/String;)Lakka/stream/Attributes;
       8: invokevirtual #791                // Method addAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Flow;
      11: areturn

  public akka.stream.scaladsl.Flow<In, Out, Mat> async();
    Code:
       0: aload_0
       1: getstatic     #641                // Field akka/stream/Attributes$.MODULE$:Lakka/stream/Attributes$;
       4: invokevirtual #795                // Method akka/stream/Attributes$.asyncBoundary:()Lakka/stream/Attributes;
       7: invokevirtual #791                // Method addAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Flow;
      10: areturn

  public <Mat1, Mat2> scala.Tuple2<Mat1, Mat2> runWith(akka.stream.Graph<akka.stream.SourceShape<In>, Mat1>, akka.stream.Graph<akka.stream.SinkShape<Out>, Mat2>, akka.stream.Materializer);
    Code:
       0: getstatic     #802                // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_1
       4: invokevirtual #805                // Method akka/stream/scaladsl/Source$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Source;
       7: aload_0
       8: invokevirtual #809                // Method akka/stream/scaladsl/Source.via:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Source;
      11: aload_2
      12: getstatic     #557                // Field akka/stream/scaladsl/Keep$.MODULE$:Lakka/stream/scaladsl/Keep$;
      15: invokevirtual #812                // Method akka/stream/scaladsl/Keep$.both:()Lscala/Function2;
      18: invokevirtual #814                // Method akka/stream/scaladsl/Source.toMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/RunnableGraph;
      21: aload_3
      22: invokevirtual #818                // Method akka/stream/scaladsl/RunnableGraph.run:(Lakka/stream/Materializer;)Ljava/lang/Object;
      25: checkcast     #820                // class scala/Tuple2
      28: areturn

  public akka.stream.scaladsl.RunnableGraph<org.reactivestreams.Processor<In, Out>> toProcessor();
    Code:
       0: getstatic     #802                // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: invokevirtual #829                // Method akka/stream/scaladsl/Source$.asSubscriber:()Lakka/stream/scaladsl/Source;
       6: aload_0
       7: invokevirtual #809                // Method akka/stream/scaladsl/Source.via:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Source;
      10: getstatic     #710                // Field akka/stream/scaladsl/Sink$.MODULE$:Lakka/stream/scaladsl/Sink$;
      13: iconst_0
      14: invokevirtual #833                // Method akka/stream/scaladsl/Sink$.asPublisher:(Z)Lakka/stream/scaladsl/Sink;
      17: getstatic     #557                // Field akka/stream/scaladsl/Keep$.MODULE$:Lakka/stream/scaladsl/Keep$;
      20: invokevirtual #812                // Method akka/stream/scaladsl/Keep$.both:()Lscala/Function2;
      23: invokevirtual #814                // Method akka/stream/scaladsl/Source.toMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/RunnableGraph;
      26: new           #835                // class akka/stream/scaladsl/Flow$$anonfun$toProcessor$1
      29: dup
      30: aload_0
      31: invokespecial #836                // Method akka/stream/scaladsl/Flow$$anonfun$toProcessor$1."<init>":(Lakka/stream/scaladsl/Flow;)V
      34: invokevirtual #839                // Method akka/stream/scaladsl/RunnableGraph.mapMaterializedValue:(Lscala/Function1;)Lakka/stream/scaladsl/RunnableGraph;
      37: areturn

  public akka.stream.javadsl.Flow<In, Out, Mat> asJava();
    Code:
       0: new           #843                // class akka/stream/javadsl/Flow
       3: dup
       4: aload_0
       5: invokespecial #844                // Method akka/stream/javadsl/Flow."<init>":(Lakka/stream/scaladsl/Flow;)V
       8: areturn

  public akka.stream.scaladsl.FlowOps async();
    Code:
       0: aload_0
       1: invokevirtual #846                // Method async:()Lakka/stream/scaladsl/Flow;
       4: areturn

  public akka.stream.Graph async();
    Code:
       0: aload_0
       1: invokevirtual #846                // Method async:()Lakka/stream/scaladsl/Flow;
       4: areturn

  public akka.stream.scaladsl.FlowOps named(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #850                // Method named:(Ljava/lang/String;)Lakka/stream/scaladsl/Flow;
       5: areturn

  public akka.stream.Graph named(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #850                // Method named:(Ljava/lang/String;)Lakka/stream/scaladsl/Flow;
       5: areturn

  public akka.stream.scaladsl.FlowOps addAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #791                // Method addAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Flow;
       5: areturn

  public akka.stream.Graph addAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #791                // Method addAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Flow;
       5: areturn

  public akka.stream.scaladsl.FlowOps withAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #784                // Method withAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Flow;
       5: areturn

  public akka.stream.Graph withAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #784                // Method withAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Flow;
       5: areturn

  public akka.stream.scaladsl.FlowOpsMat mapMaterializedValue(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #856                // Method mapMaterializedValue:(Lscala/Function1;)Lakka/stream/scaladsl/Flow;
       5: areturn

  public akka.stream.Graph toMat(akka.stream.Graph, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #704                // Method toMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/Sink;
       6: areturn

  public java.lang.Object to(akka.stream.Graph);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #859                // Method to:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Sink;
       5: areturn

  public akka.stream.scaladsl.FlowOpsMat viaMat(akka.stream.Graph, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #565                // Method viaMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/Flow;
       6: areturn

  public akka.stream.scaladsl.FlowOps via(akka.stream.Graph);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #861                // Method via:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Flow;
       5: areturn

  public akka.stream.Shape shape();
    Code:
       0: aload_0
       1: invokevirtual #534                // Method shape:()Lakka/stream/FlowShape;
       4: areturn

  public akka.stream.scaladsl.Flow(akka.stream.impl.StreamLayout$Module);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #502                // Field module:Lakka/stream/impl/StreamLayout$Module;
       5: aload_0
       6: invokespecial #864                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #868                // Method akka/stream/scaladsl/FlowOps$class.$init$:(Lakka/stream/scaladsl/FlowOps;)V
      13: aload_0
      14: invokestatic  #871                // Method akka/stream/scaladsl/FlowOpsMat$class.$init$:(Lakka/stream/scaladsl/FlowOpsMat;)V
      17: aload_0
      18: invokestatic  #876                // Method akka/stream/Graph$class.$init$:(Lakka/stream/Graph;)V
      21: aload_0
      22: aload_1
      23: invokeinterface #624,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.shape:()Lakka/stream/Shape;
      28: checkcast     #654                // class akka/stream/FlowShape
      31: putfield      #505                // Field shape:Lakka/stream/FlowShape;
      34: return
}
