Compiled from "Source.scala"
public final class akka.stream.scaladsl.Source<Out, Mat> implements akka.stream.scaladsl.FlowOpsMat<Out, Mat>, akka.stream.Graph<akka.stream.SourceShape<Out>, Mat> {
  private final akka.stream.impl.StreamLayout$Module module;

  private final akka.stream.SourceShape<Out> shape;

  public static <T, S> akka.stream.scaladsl.Source<T, akka.NotUsed> unfoldResourceAsync(scala.Function0<scala.concurrent.Future<S>>, scala.Function1<S, scala.concurrent.Future<scala.Option<T>>>, scala.Function1<S, scala.concurrent.Future<akka.Done>>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #23                 // Method akka/stream/scaladsl/Source$.unfoldResourceAsync:(Lscala/Function0;Lscala/Function1;Lscala/Function1;)Lakka/stream/scaladsl/Source;
       9: areturn

  public static <T, S> akka.stream.scaladsl.Source<T, akka.NotUsed> unfoldResource(scala.Function0<S>, scala.Function1<S, scala.Option<T>>, scala.Function1<S, scala.runtime.BoxedUnit>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #26                 // Method akka/stream/scaladsl/Source$.unfoldResource:(Lscala/Function0;Lscala/Function1;Lscala/Function1;)Lakka/stream/scaladsl/Source;
       9: areturn

  public static <T> akka.stream.scaladsl.Source<T, akka.stream.scaladsl.SourceQueueWithComplete<T>> queue(int, akka.stream.OverflowStrategy);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: iload_0
       4: aload_1
       5: invokevirtual #30                 // Method akka/stream/scaladsl/Source$.queue:(ILakka/stream/OverflowStrategy;)Lakka/stream/scaladsl/Source;
       8: areturn

  public static <T, O> akka.stream.scaladsl.Source<O, akka.NotUsed> zipWithN(scala.Function1<scala.collection.immutable.Seq<T>, O>, scala.collection.immutable.Seq<akka.stream.scaladsl.Source<T, ?>>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: aload_1
       5: invokevirtual #34                 // Method akka/stream/scaladsl/Source$.zipWithN:(Lscala/Function1;Lscala/collection/immutable/Seq;)Lakka/stream/scaladsl/Source;
       8: areturn

  public static <T> akka.stream.scaladsl.Source<scala.collection.immutable.Seq<T>, akka.NotUsed> zipN(scala.collection.immutable.Seq<akka.stream.scaladsl.Source<T, ?>>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: invokevirtual #38                 // Method akka/stream/scaladsl/Source$.zipN:(Lscala/collection/immutable/Seq;)Lakka/stream/scaladsl/Source;
       7: areturn

  public static <T> akka.stream.scaladsl.Source<T, akka.actor.ActorRef> actorRef(int, akka.stream.OverflowStrategy);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: iload_0
       4: aload_1
       5: invokevirtual #41                 // Method akka/stream/scaladsl/Source$.actorRef:(ILakka/stream/OverflowStrategy;)Lakka/stream/scaladsl/Source;
       8: areturn

  public static <T> akka.stream.scaladsl.Source<T, akka.actor.ActorRef> actorPublisher(akka.actor.Props);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: invokevirtual #45                 // Method akka/stream/scaladsl/Source$.actorPublisher:(Lakka/actor/Props;)Lakka/stream/scaladsl/Source;
       7: areturn

  public static <T> akka.stream.scaladsl.Source<T, org.reactivestreams.Subscriber<T>> asSubscriber();
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: invokevirtual #49                 // Method akka/stream/scaladsl/Source$.asSubscriber:()Lakka/stream/scaladsl/Source;
       6: areturn

  public static <T> akka.stream.scaladsl.Source<T, akka.NotUsed> failed(java.lang.Throwable);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: invokevirtual #53                 // Method akka/stream/scaladsl/Source$.failed:(Ljava/lang/Throwable;)Lakka/stream/scaladsl/Source;
       7: areturn

  public static <T> akka.stream.scaladsl.Source<T, scala.concurrent.Promise<scala.Option<T>>> maybe();
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: invokevirtual #56                 // Method akka/stream/scaladsl/Source$.maybe:()Lakka/stream/scaladsl/Source;
       6: areturn

  public static <T> akka.stream.scaladsl.Source<T, akka.NotUsed> empty();
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: invokevirtual #59                 // Method akka/stream/scaladsl/Source$.empty:()Lakka/stream/scaladsl/Source;
       6: areturn

  public static <S, E> akka.stream.scaladsl.Source<E, akka.NotUsed> unfoldAsync(S, scala.Function1<S, scala.concurrent.Future<scala.Option<scala.Tuple2<S, E>>>>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: aload_1
       5: invokevirtual #63                 // Method akka/stream/scaladsl/Source$.unfoldAsync:(Ljava/lang/Object;Lscala/Function1;)Lakka/stream/scaladsl/Source;
       8: areturn

  public static <S, E> akka.stream.scaladsl.Source<E, akka.NotUsed> unfold(S, scala.Function1<S, scala.Option<scala.Tuple2<S, E>>>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: aload_1
       5: invokevirtual #66                 // Method akka/stream/scaladsl/Source$.unfold:(Ljava/lang/Object;Lscala/Function1;)Lakka/stream/scaladsl/Source;
       8: areturn

  public static <T> akka.stream.scaladsl.Source<T, akka.NotUsed> repeat(T);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: invokevirtual #70                 // Method akka/stream/scaladsl/Source$.repeat:(Ljava/lang/Object;)Lakka/stream/scaladsl/Source;
       7: areturn

  public static <T> akka.stream.scaladsl.Source<T, akka.NotUsed> single(T);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: invokevirtual #73                 // Method akka/stream/scaladsl/Source$.single:(Ljava/lang/Object;)Lakka/stream/scaladsl/Source;
       7: areturn

  public static <T> akka.stream.scaladsl.Source<T, akka.actor.Cancellable> tick(scala.concurrent.duration.FiniteDuration, scala.concurrent.duration.FiniteDuration, T);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #77                 // Method akka/stream/scaladsl/Source$.tick:(Lscala/concurrent/duration/FiniteDuration;Lscala/concurrent/duration/FiniteDuration;Ljava/lang/Object;)Lakka/stream/scaladsl/Source;
       9: areturn

  public static <T> akka.stream.scaladsl.Source<T, akka.NotUsed> fromCompletionStage(java.util.concurrent.CompletionStage<T>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: invokevirtual #81                 // Method akka/stream/scaladsl/Source$.fromCompletionStage:(Ljava/util/concurrent/CompletionStage;)Lakka/stream/scaladsl/Source;
       7: areturn

  public static <T> akka.stream.scaladsl.Source<T, akka.NotUsed> fromFuture(scala.concurrent.Future<T>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: invokevirtual #85                 // Method akka/stream/scaladsl/Source$.fromFuture:(Lscala/concurrent/Future;)Lakka/stream/scaladsl/Source;
       7: areturn

  public static <T> akka.stream.scaladsl.Source<T, akka.NotUsed> apply(scala.collection.immutable.Iterable<T>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: invokevirtual #89                 // Method akka/stream/scaladsl/Source$.apply:(Lscala/collection/immutable/Iterable;)Lakka/stream/scaladsl/Source;
       7: areturn

  public static <T, M> akka.stream.scaladsl.Source<T, M> fromGraph(akka.stream.Graph<akka.stream.SourceShape<T>, M>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: invokevirtual #93                 // Method akka/stream/scaladsl/Source$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Source;
       7: areturn

  public static <T> akka.stream.scaladsl.Source<T, akka.NotUsed> cycle(scala.Function0<scala.collection.Iterator<T>>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: invokevirtual #97                 // Method akka/stream/scaladsl/Source$.cycle:(Lscala/Function0;)Lakka/stream/scaladsl/Source;
       7: areturn

  public static <T> akka.stream.scaladsl.Source<T, akka.NotUsed> fromIterator(scala.Function0<scala.collection.Iterator<T>>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: invokevirtual #100                // Method akka/stream/scaladsl/Source$.fromIterator:(Lscala/Function0;)Lakka/stream/scaladsl/Source;
       7: areturn

  public static <T> akka.stream.scaladsl.Source<T, akka.NotUsed> fromPublisher(org.reactivestreams.Publisher<T>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: aload_0
       4: invokevirtual #104                // Method akka/stream/scaladsl/Source$.fromPublisher:(Lorg/reactivestreams/Publisher;)Lakka/stream/scaladsl/Source;
       7: areturn

  public <U, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat zipMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #116                // Method akka/stream/scaladsl/FlowOpsMat$class.zipMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       6: areturn

  public <Out2, Out3, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat zipWithMat(akka.stream.Graph<akka.stream.SourceShape<Out2>, Mat2>, scala.Function2<Out, Out2, Out3>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #127                // Method akka/stream/scaladsl/FlowOpsMat$class.zipWithMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;Lscala/Function2;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       7: areturn

  public <U, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat mergeMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, boolean, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: invokestatic  #133                // Method akka/stream/scaladsl/FlowOpsMat$class.mergeMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;ZLscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       7: areturn

  public <U, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat interleaveMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, int, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: invokestatic  #140                // Method akka/stream/scaladsl/FlowOpsMat$class.interleaveMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;ILscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       7: areturn

  public <U, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat mergeSortedMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, scala.Function2<Mat, Mat2, Mat3>, scala.math.Ordering<U>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #147                // Method akka/stream/scaladsl/FlowOpsMat$class.mergeSortedMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;Lscala/Function2;Lscala/math/Ordering;)Lakka/stream/scaladsl/FlowOpsMat;
       7: areturn

  public <U, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat concatMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #152                // Method akka/stream/scaladsl/FlowOpsMat$class.concatMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       6: areturn

  public <U, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat prependMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #155                // Method akka/stream/scaladsl/FlowOpsMat$class.prependMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       6: areturn

  public <U, Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat orElseMat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #158                // Method akka/stream/scaladsl/FlowOpsMat$class.orElseMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       6: areturn

  public <Mat2, Mat3> akka.stream.scaladsl.FlowOpsMat alsoToMat(akka.stream.Graph<akka.stream.SinkShape<Out>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #162                // Method akka/stream/scaladsl/FlowOpsMat$class.alsoToMat:(Lakka/stream/scaladsl/FlowOpsMat;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       6: areturn

  public <Mat2> akka.stream.scaladsl.FlowOpsMat watchTermination(scala.Function2<Mat, scala.concurrent.Future<akka.Done>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #167                // Method akka/stream/scaladsl/FlowOpsMat$class.watchTermination:(Lakka/stream/scaladsl/FlowOpsMat;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       5: areturn

  public <Mat2> akka.stream.scaladsl.FlowOpsMat monitor(scala.Function2<Mat, akka.stream.FlowMonitor<Out>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #170                // Method akka/stream/scaladsl/FlowOpsMat$class.monitor:(Lakka/stream/scaladsl/FlowOpsMat;Lscala/Function2;)Lakka/stream/scaladsl/FlowOpsMat;
       5: areturn

  public <T, M> akka.stream.scaladsl.FlowOpsMat transformMaterializing(scala.Function0<scala.Tuple2<akka.stream.stage.Stage<Out, T>, M>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #175                // Method akka/stream/scaladsl/FlowOpsMat$class.transformMaterializing:(Lakka/stream/scaladsl/FlowOpsMat;Lscala/Function0;)Lakka/stream/scaladsl/FlowOpsMat;
       5: areturn

  public <U, Mat2, Mat3> boolean mergeMat$default$2();
    Code:
       0: aload_0
       1: invokestatic  #182                // Method akka/stream/scaladsl/FlowOpsMat$class.mergeMat$default$2:(Lakka/stream/scaladsl/FlowOpsMat;)Z
       4: ireturn

  public <T> akka.stream.scaladsl.FlowOps recover(scala.PartialFunction<java.lang.Throwable, T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #189                // Method akka/stream/scaladsl/FlowOps$class.recover:(Lakka/stream/scaladsl/FlowOps;Lscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps recoverWith(scala.PartialFunction<java.lang.Throwable, akka.stream.Graph<akka.stream.SourceShape<T>, akka.NotUsed>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #194                // Method akka/stream/scaladsl/FlowOps$class.recoverWith:(Lakka/stream/scaladsl/FlowOps;Lscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps recoverWithRetries(int, scala.PartialFunction<java.lang.Throwable, akka.stream.Graph<akka.stream.SourceShape<T>, akka.NotUsed>>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #199                // Method akka/stream/scaladsl/FlowOps$class.recoverWithRetries:(Lakka/stream/scaladsl/FlowOps;ILscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <T> akka.stream.scaladsl.FlowOps map(scala.Function1<Out, T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #205                // Method akka/stream/scaladsl/FlowOps$class.map:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps mapConcat(scala.Function1<Out, scala.collection.immutable.Iterable<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #210                // Method akka/stream/scaladsl/FlowOps$class.mapConcat:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps statefulMapConcat(scala.Function0<scala.Function1<Out, scala.collection.immutable.Iterable<T>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #215                // Method akka/stream/scaladsl/FlowOps$class.statefulMapConcat:(Lakka/stream/scaladsl/FlowOps;Lscala/Function0;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps mapAsync(int, scala.Function1<Out, scala.concurrent.Future<T>>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #220                // Method akka/stream/scaladsl/FlowOps$class.mapAsync:(Lakka/stream/scaladsl/FlowOps;ILscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <T> akka.stream.scaladsl.FlowOps mapAsyncUnordered(int, scala.Function1<Out, scala.concurrent.Future<T>>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #224                // Method akka/stream/scaladsl/FlowOps$class.mapAsyncUnordered:(Lakka/stream/scaladsl/FlowOps;ILscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public akka.stream.scaladsl.FlowOps filter(scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #227                // Method akka/stream/scaladsl/FlowOps$class.filter:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps filterNot(scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #231                // Method akka/stream/scaladsl/FlowOps$class.filterNot:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps takeWhile(scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #234                // Method akka/stream/scaladsl/FlowOps$class.takeWhile:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps dropWhile(scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #237                // Method akka/stream/scaladsl/FlowOps$class.dropWhile:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps collect(scala.PartialFunction<Out, T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #240                // Method akka/stream/scaladsl/FlowOps$class.collect:(Lakka/stream/scaladsl/FlowOps;Lscala/PartialFunction;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps grouped(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #245                // Method akka/stream/scaladsl/FlowOps$class.grouped:(Lakka/stream/scaladsl/FlowOps;I)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps limit(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #251                // Method akka/stream/scaladsl/FlowOps$class.limit:(Lakka/stream/scaladsl/FlowOps;J)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps limitWeighted(long, scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: invokestatic  #258                // Method akka/stream/scaladsl/FlowOps$class.limitWeighted:(Lakka/stream/scaladsl/FlowOps;JLscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public akka.stream.scaladsl.FlowOps sliding(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #264                // Method akka/stream/scaladsl/FlowOps$class.sliding:(Lakka/stream/scaladsl/FlowOps;II)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <T> akka.stream.scaladsl.FlowOps scan(T, scala.Function2<T, Out, T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #270                // Method akka/stream/scaladsl/FlowOps$class.scan:(Lakka/stream/scaladsl/FlowOps;Ljava/lang/Object;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <T> akka.stream.scaladsl.FlowOps fold(T, scala.Function2<T, Out, T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #275                // Method akka/stream/scaladsl/FlowOps$class.fold:(Lakka/stream/scaladsl/FlowOps;Ljava/lang/Object;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <T> akka.stream.scaladsl.FlowOps foldAsync(T, scala.Function2<T, Out, scala.concurrent.Future<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #278                // Method akka/stream/scaladsl/FlowOps$class.foldAsync:(Lakka/stream/scaladsl/FlowOps;Ljava/lang/Object;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <T> akka.stream.scaladsl.FlowOps reduce(scala.Function2<T, T, T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #283                // Method akka/stream/scaladsl/FlowOps$class.reduce:(Lakka/stream/scaladsl/FlowOps;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps intersperse(T, T, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #288                // Method akka/stream/scaladsl/FlowOps$class.intersperse:(Lakka/stream/scaladsl/FlowOps;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lakka/stream/scaladsl/FlowOps;
       7: areturn

  public <T> akka.stream.scaladsl.FlowOps intersperse(T);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #295                // Method akka/stream/scaladsl/FlowOps$class.intersperse:(Lakka/stream/scaladsl/FlowOps;Ljava/lang/Object;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps groupedWithin(int, scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #300                // Method akka/stream/scaladsl/FlowOps$class.groupedWithin:(Lakka/stream/scaladsl/FlowOps;ILscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public akka.stream.scaladsl.FlowOps delay(scala.concurrent.duration.FiniteDuration, akka.stream.DelayOverflowStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #307                // Method akka/stream/scaladsl/FlowOps$class.delay:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;Lakka/stream/DelayOverflowStrategy;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public akka.stream.scaladsl.FlowOps drop(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #313                // Method akka/stream/scaladsl/FlowOps$class.drop:(Lakka/stream/scaladsl/FlowOps;J)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps dropWithin(scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #318                // Method akka/stream/scaladsl/FlowOps$class.dropWithin:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps take(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #321                // Method akka/stream/scaladsl/FlowOps$class.take:(Lakka/stream/scaladsl/FlowOps;J)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps takeWithin(scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #324                // Method akka/stream/scaladsl/FlowOps$class.takeWithin:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <S> akka.stream.scaladsl.FlowOps conflateWithSeed(scala.Function1<Out, S>, scala.Function2<S, Out, S>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #329                // Method akka/stream/scaladsl/FlowOps$class.conflateWithSeed:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <O2> akka.stream.scaladsl.FlowOps conflate(scala.Function2<O2, O2, O2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #334                // Method akka/stream/scaladsl/FlowOps$class.conflate:(Lakka/stream/scaladsl/FlowOps;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <S> akka.stream.scaladsl.FlowOps batch(long, scala.Function1<Out, S>, scala.Function2<S, Out, S>);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: aload         4
       5: invokestatic  #339                // Method akka/stream/scaladsl/FlowOps$class.batch:(Lakka/stream/scaladsl/FlowOps;JLscala/Function1;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       8: areturn

  public <S> akka.stream.scaladsl.FlowOps batchWeighted(long, scala.Function1<Out, java.lang.Object>, scala.Function1<Out, S>, scala.Function2<S, Out, S>);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: aload         4
       5: aload         5
       7: invokestatic  #344                // Method akka/stream/scaladsl/FlowOps$class.batchWeighted:(Lakka/stream/scaladsl/FlowOps;JLscala/Function1;Lscala/Function1;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
      10: areturn

  public <U> akka.stream.scaladsl.FlowOps expand(scala.Function1<Out, scala.collection.Iterator<U>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #347                // Method akka/stream/scaladsl/FlowOps$class.expand:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps buffer(int, akka.stream.OverflowStrategy);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #353                // Method akka/stream/scaladsl/FlowOps$class.buffer:(Lakka/stream/scaladsl/FlowOps;ILakka/stream/OverflowStrategy;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <T> akka.stream.scaladsl.FlowOps transform(scala.Function0<akka.stream.stage.Stage<Out, T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #359                // Method akka/stream/scaladsl/FlowOps$class.transform:(Lakka/stream/scaladsl/FlowOps;Lscala/Function0;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <U> akka.stream.scaladsl.FlowOps prefixAndTail(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #363                // Method akka/stream/scaladsl/FlowOps$class.prefixAndTail:(Lakka/stream/scaladsl/FlowOps;I)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <K> akka.stream.scaladsl.SubFlow<Out, Mat, akka.stream.scaladsl.FlowOps, java.lang.Object> groupBy(int, scala.Function1<Out, K>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #368                // Method akka/stream/scaladsl/FlowOps$class.groupBy:(Lakka/stream/scaladsl/FlowOps;ILscala/Function1;)Lakka/stream/scaladsl/SubFlow;
       6: areturn

  public akka.stream.scaladsl.SubFlow<Out, Mat, akka.stream.scaladsl.FlowOps, java.lang.Object> splitWhen(akka.stream.SubstreamCancelStrategy, scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #374                // Method akka/stream/scaladsl/FlowOps$class.splitWhen:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/SubstreamCancelStrategy;Lscala/Function1;)Lakka/stream/scaladsl/SubFlow;
       6: areturn

  public akka.stream.scaladsl.SubFlow<Out, Mat, akka.stream.scaladsl.FlowOps, java.lang.Object> splitWhen(scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #380                // Method akka/stream/scaladsl/FlowOps$class.splitWhen:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/SubFlow;
       5: areturn

  public akka.stream.scaladsl.SubFlow<Out, Mat, akka.stream.scaladsl.FlowOps, java.lang.Object> splitAfter(akka.stream.SubstreamCancelStrategy, scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #383                // Method akka/stream/scaladsl/FlowOps$class.splitAfter:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/SubstreamCancelStrategy;Lscala/Function1;)Lakka/stream/scaladsl/SubFlow;
       6: areturn

  public akka.stream.scaladsl.SubFlow<Out, Mat, akka.stream.scaladsl.FlowOps, java.lang.Object> splitAfter(scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #385                // Method akka/stream/scaladsl/FlowOps$class.splitAfter:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/SubFlow;
       5: areturn

  public <T, M> akka.stream.scaladsl.FlowOps flatMapConcat(scala.Function1<Out, akka.stream.Graph<akka.stream.SourceShape<T>, M>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #388                // Method akka/stream/scaladsl/FlowOps$class.flatMapConcat:(Lakka/stream/scaladsl/FlowOps;Lscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <T, M> akka.stream.scaladsl.FlowOps flatMapMerge(int, scala.Function1<Out, akka.stream.Graph<akka.stream.SourceShape<T>, M>>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #391                // Method akka/stream/scaladsl/FlowOps$class.flatMapMerge:(Lakka/stream/scaladsl/FlowOps;ILscala/Function1;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public akka.stream.scaladsl.FlowOps initialTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #395                // Method akka/stream/scaladsl/FlowOps$class.initialTimeout:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps completionTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #399                // Method akka/stream/scaladsl/FlowOps$class.completionTimeout:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps idleTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #402                // Method akka/stream/scaladsl/FlowOps$class.idleTimeout:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps backpressureTimeout(scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #405                // Method akka/stream/scaladsl/FlowOps$class.backpressureTimeout:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <U> akka.stream.scaladsl.FlowOps keepAlive(scala.concurrent.duration.FiniteDuration, scala.Function0<U>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #410                // Method akka/stream/scaladsl/FlowOps$class.keepAlive:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;Lscala/Function0;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public akka.stream.scaladsl.FlowOps throttle(int, scala.concurrent.duration.FiniteDuration, int, akka.stream.ThrottleMode);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: aload         4
       6: invokestatic  #417                // Method akka/stream/scaladsl/FlowOps$class.throttle:(Lakka/stream/scaladsl/FlowOps;ILscala/concurrent/duration/FiniteDuration;ILakka/stream/ThrottleMode;)Lakka/stream/scaladsl/FlowOps;
       9: areturn

  public akka.stream.scaladsl.FlowOps throttle(int, scala.concurrent.duration.FiniteDuration, int, scala.Function1<Out, java.lang.Object>, akka.stream.ThrottleMode);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #426                // Method akka/stream/scaladsl/FlowOps$class.throttle:(Lakka/stream/scaladsl/FlowOps;ILscala/concurrent/duration/FiniteDuration;ILscala/Function1;Lakka/stream/ThrottleMode;)Lakka/stream/scaladsl/FlowOps;
      11: areturn

  public akka.stream.scaladsl.FlowOps detach();
    Code:
       0: aload_0
       1: invokestatic  #433                // Method akka/stream/scaladsl/FlowOps$class.detach:(Lakka/stream/scaladsl/FlowOps;)Lakka/stream/scaladsl/FlowOps;
       4: areturn

  public akka.stream.scaladsl.FlowOps initialDelay(scala.concurrent.duration.FiniteDuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #436                // Method akka/stream/scaladsl/FlowOps$class.initialDelay:(Lakka/stream/scaladsl/FlowOps;Lscala/concurrent/duration/FiniteDuration;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps log(java.lang.String, scala.Function1<Out, java.lang.Object>, akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #441                // Method akka/stream/scaladsl/FlowOps$class.log:(Lakka/stream/scaladsl/FlowOps;Ljava/lang/String;Lscala/Function1;Lakka/event/LoggingAdapter;)Lakka/stream/scaladsl/FlowOps;
       7: areturn

  public <U> akka.stream.scaladsl.FlowOps zip(akka.stream.Graph<akka.stream.SourceShape<U>, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #450                // Method akka/stream/scaladsl/FlowOps$class.zip:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <U, M> akka.stream.Graph<akka.stream.FlowShape<Out, scala.Tuple2<Out, U>>, M> zipGraph(akka.stream.Graph<akka.stream.SourceShape<U>, M>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #455                // Method akka/stream/scaladsl/FlowOps$class.zipGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/Graph;
       5: areturn

  public <Out2, Out3> akka.stream.scaladsl.FlowOps zipWith(akka.stream.Graph<akka.stream.SourceShape<Out2>, ?>, scala.Function2<Out, Out2, Out3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #460                // Method akka/stream/scaladsl/FlowOps$class.zipWith:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <Out2, Out3, M> akka.stream.Graph<akka.stream.FlowShape<Out, Out3>, M> zipWithGraph(akka.stream.Graph<akka.stream.SourceShape<Out2>, M>, scala.Function2<Out, Out2, Out3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #465                // Method akka/stream/scaladsl/FlowOps$class.zipWithGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/Graph;
       6: areturn

  public akka.stream.scaladsl.FlowOps zipWithIndex();
    Code:
       0: aload_0
       1: invokestatic  #468                // Method akka/stream/scaladsl/FlowOps$class.zipWithIndex:(Lakka/stream/scaladsl/FlowOps;)Lakka/stream/scaladsl/FlowOps;
       4: areturn

  public <U> akka.stream.scaladsl.FlowOps interleave(akka.stream.Graph<akka.stream.SourceShape<U>, ?>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #473                // Method akka/stream/scaladsl/FlowOps$class.interleave:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;I)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <U, M> akka.stream.Graph<akka.stream.FlowShape<Out, U>, M> interleaveGraph(akka.stream.Graph<akka.stream.SourceShape<U>, M>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #479                // Method akka/stream/scaladsl/FlowOps$class.interleaveGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;I)Lakka/stream/Graph;
       6: areturn

  public <U, M> akka.stream.scaladsl.FlowOps merge(akka.stream.Graph<akka.stream.SourceShape<U>, M>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #484                // Method akka/stream/scaladsl/FlowOps$class.merge:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;Z)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <U, M> akka.stream.Graph<akka.stream.FlowShape<Out, U>, M> mergeGraph(akka.stream.Graph<akka.stream.SourceShape<U>, M>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #489                // Method akka/stream/scaladsl/FlowOps$class.mergeGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;Z)Lakka/stream/Graph;
       6: areturn

  public <U, M> akka.stream.scaladsl.FlowOps mergeSorted(akka.stream.Graph<akka.stream.SourceShape<U>, M>, scala.math.Ordering<U>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #494                // Method akka/stream/scaladsl/FlowOps$class.mergeSorted:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;Lscala/math/Ordering;)Lakka/stream/scaladsl/FlowOps;
       6: areturn

  public <U, M> akka.stream.Graph<akka.stream.FlowShape<Out, U>, M> mergeSortedGraph(akka.stream.Graph<akka.stream.SourceShape<U>, M>, scala.math.Ordering<U>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #499                // Method akka/stream/scaladsl/FlowOps$class.mergeSortedGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;Lscala/math/Ordering;)Lakka/stream/Graph;
       6: areturn

  public <U, Mat2> akka.stream.scaladsl.FlowOps concat(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #502                // Method akka/stream/scaladsl/FlowOps$class.concat:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <U, Mat2> akka.stream.Graph<akka.stream.FlowShape<Out, U>, Mat2> concatGraph(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #505                // Method akka/stream/scaladsl/FlowOps$class.concatGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/Graph;
       5: areturn

  public <U, Mat2> akka.stream.scaladsl.FlowOps prepend(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #508                // Method akka/stream/scaladsl/FlowOps$class.prepend:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <U, Mat2> akka.stream.Graph<akka.stream.FlowShape<Out, U>, Mat2> prependGraph(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #511                // Method akka/stream/scaladsl/FlowOps$class.prependGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/Graph;
       5: areturn

  public <U, Mat2> akka.stream.scaladsl.FlowOps orElse(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #514                // Method akka/stream/scaladsl/FlowOps$class.orElse:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <U, Mat2> akka.stream.Graph<akka.stream.FlowShape<Out, U>, Mat2> orElseGraph(akka.stream.Graph<akka.stream.SourceShape<U>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #517                // Method akka/stream/scaladsl/FlowOps$class.orElseGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/Graph;
       5: areturn

  public <U, M> akka.stream.scaladsl.FlowOps $plus$plus(akka.stream.Graph<akka.stream.SourceShape<U>, M>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #520                // Method akka/stream/scaladsl/FlowOps$class.$plus$plus:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public akka.stream.scaladsl.FlowOps alsoTo(akka.stream.Graph<akka.stream.SinkShape<Out>, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #523                // Method akka/stream/scaladsl/FlowOps$class.alsoTo:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public <M> akka.stream.Graph<akka.stream.FlowShape<Out, Out>, M> alsoToGraph(akka.stream.Graph<akka.stream.SinkShape<Out>, M>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #526                // Method akka/stream/scaladsl/FlowOps$class.alsoToGraph:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/Graph;)Lakka/stream/Graph;
       5: areturn

  public <T> akka.stream.scaladsl.FlowOps andThen(akka.stream.impl.Stages$SymbolicStage<Out, T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #531                // Method akka/stream/scaladsl/FlowOps$class.andThen:(Lakka/stream/scaladsl/FlowOps;Lakka/stream/impl/Stages$SymbolicStage;)Lakka/stream/scaladsl/FlowOps;
       5: areturn

  public int sliding$default$2();
    Code:
       0: aload_0
       1: invokestatic  #538                // Method akka/stream/scaladsl/FlowOps$class.sliding$default$2:(Lakka/stream/scaladsl/FlowOps;)I
       4: ireturn

  public akka.stream.DelayOverflowStrategy delay$default$2();
    Code:
       0: aload_0
       1: invokestatic  #543                // Method akka/stream/scaladsl/FlowOps$class.delay$default$2:(Lakka/stream/scaladsl/FlowOps;)Lakka/stream/DelayOverflowStrategy;
       4: areturn

  public <U, M> boolean merge$default$2();
    Code:
       0: aload_0
       1: invokestatic  #547                // Method akka/stream/scaladsl/FlowOps$class.merge$default$2:(Lakka/stream/scaladsl/FlowOps;)Z
       4: ireturn

  public scala.Function1<Out, java.lang.Object> log$default$2();
    Code:
       0: aload_0
       1: invokestatic  #552                // Method akka/stream/scaladsl/FlowOps$class.log$default$2:(Lakka/stream/scaladsl/FlowOps;)Lscala/Function1;
       4: areturn

  public akka.event.LoggingAdapter log$default$3(java.lang.String, scala.Function1<Out, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #557                // Method akka/stream/scaladsl/FlowOps$class.log$default$3:(Lakka/stream/scaladsl/FlowOps;Ljava/lang/String;Lscala/Function1;)Lakka/event/LoggingAdapter;
       6: areturn

  public akka.stream.impl.StreamLayout$Module module();
    Code:
       0: aload_0
       1: getfield      #560                // Field module:Lakka/stream/impl/StreamLayout$Module;
       4: areturn

  public akka.stream.SourceShape<Out> shape();
    Code:
       0: aload_0
       1: getfield      #563                // Field shape:Lakka/stream/SourceShape;
       4: areturn

  public java.lang.String toString();
    Code:
       0: new           #567                // class scala/StringContext
       3: dup
       4: getstatic     #572                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       7: iconst_3
       8: anewarray     #574                // class java/lang/String
      11: dup
      12: iconst_0
      13: ldc_w         #576                // String Source(
      16: aastore
      17: dup
      18: iconst_1
      19: ldc_w         #578                // String ,
      22: aastore
      23: dup
      24: iconst_2
      25: ldc_w         #580                // String )
      28: aastore
      29: checkcast     #582                // class "[Ljava/lang/Object;"
      32: invokevirtual #586                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      35: invokespecial #590                // Method scala/StringContext."<init>":(Lscala/collection/Seq;)V
      38: getstatic     #572                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      41: iconst_2
      42: anewarray     #5                  // class java/lang/Object
      45: dup
      46: iconst_0
      47: aload_0
      48: invokevirtual #592                // Method shape:()Lakka/stream/SourceShape;
      51: aastore
      52: dup
      53: iconst_1
      54: aload_0
      55: invokevirtual #594                // Method module:()Lakka/stream/impl/StreamLayout$Module;
      58: aastore
      59: invokevirtual #598                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      62: invokevirtual #602                // Method scala/StringContext.s:(Lscala/collection/Seq;)Ljava/lang/String;
      65: areturn

  public <T, Mat2> akka.stream.scaladsl.Source<T, Mat> via(akka.stream.Graph<akka.stream.FlowShape<Out, T>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #608                // Field akka/stream/scaladsl/Keep$.MODULE$:Lakka/stream/scaladsl/Keep$;
       5: invokevirtual #612                // Method akka/stream/scaladsl/Keep$.left:()Lscala/Function2;
       8: invokevirtual #616                // Method viaMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/Source;
      11: areturn

  public <T, Mat2, Mat3> akka.stream.scaladsl.Source<T, Mat3> viaMat(akka.stream.Graph<akka.stream.FlowShape<Out, T>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_1
       1: invokeinterface #618,  1          // InterfaceMethod akka/stream/Graph.module:()Lakka/stream/impl/StreamLayout$Module;
       6: getstatic     #623                // Field akka/stream/impl/fusing/GraphStages$Identity$.MODULE$:Lakka/stream/impl/fusing/GraphStages$Identity$;
       9: invokevirtual #624                // Method akka/stream/impl/fusing/GraphStages$Identity$.module:()Lakka/stream/impl/StreamLayout$Module;
      12: if_acmpne     19
      15: aload_0
      16: goto          102
      19: aload_1
      20: invokeinterface #618,  1          // InterfaceMethod akka/stream/Graph.module:()Lakka/stream/impl/StreamLayout$Module;
      25: invokeinterface #629,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.carbonCopy:()Lakka/stream/impl/StreamLayout$Module;
      30: astore_3
      31: new           #2                  // class akka/stream/scaladsl/Source
      34: dup
      35: aload_0
      36: invokevirtual #594                // Method module:()Lakka/stream/impl/StreamLayout$Module;
      39: aload_3
      40: aload_0
      41: invokevirtual #592                // Method shape:()Lakka/stream/SourceShape;
      44: invokevirtual #635                // Method akka/stream/SourceShape.out:()Lakka/stream/Outlet;
      47: aload_3
      48: invokeinterface #638,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.shape:()Lakka/stream/Shape;
      53: invokevirtual #644                // Method akka/stream/Shape.inlets:()Lscala/collection/immutable/Seq;
      56: invokeinterface #650,  1          // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
      61: checkcast     #652                // class akka/stream/InPort
      64: aload_2
      65: invokeinterface #656,  5          // InterfaceMethod akka/stream/impl/StreamLayout$Module.fuse:(Lakka/stream/impl/StreamLayout$Module;Lakka/stream/OutPort;Lakka/stream/InPort;Lscala/Function2;)Lakka/stream/impl/StreamLayout$Module;
      70: new           #631                // class akka/stream/SourceShape
      73: dup
      74: aload_3
      75: invokeinterface #638,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.shape:()Lakka/stream/Shape;
      80: invokevirtual #659                // Method akka/stream/Shape.outlets:()Lscala/collection/immutable/Seq;
      83: invokeinterface #650,  1          // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
      88: checkcast     #661                // class akka/stream/Outlet
      91: invokespecial #664                // Method akka/stream/SourceShape."<init>":(Lakka/stream/Outlet;)V
      94: invokeinterface #668,  2          // InterfaceMethod akka/stream/impl/StreamLayout$Module.replaceShape:(Lakka/stream/Shape;)Lakka/stream/impl/StreamLayout$Module;
      99: invokespecial #671                // Method "<init>":(Lakka/stream/impl/StreamLayout$Module;)V
     102: areturn

  public <Mat2> akka.stream.scaladsl.RunnableGraph<Mat> to(akka.stream.Graph<akka.stream.SinkShape<Out>, Mat2>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #608                // Field akka/stream/scaladsl/Keep$.MODULE$:Lakka/stream/scaladsl/Keep$;
       5: invokevirtual #612                // Method akka/stream/scaladsl/Keep$.left:()Lscala/Function2;
       8: invokevirtual #678                // Method toMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/RunnableGraph;
      11: areturn

  public <Mat2, Mat3> akka.stream.scaladsl.RunnableGraph<Mat3> toMat(akka.stream.Graph<akka.stream.SinkShape<Out>, Mat2>, scala.Function2<Mat, Mat2, Mat3>);
    Code:
       0: aload_1
       1: invokeinterface #618,  1          // InterfaceMethod akka/stream/Graph.module:()Lakka/stream/impl/StreamLayout$Module;
       6: invokeinterface #629,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.carbonCopy:()Lakka/stream/impl/StreamLayout$Module;
      11: astore_3
      12: new           #681                // class akka/stream/scaladsl/RunnableGraph
      15: dup
      16: aload_0
      17: invokevirtual #594                // Method module:()Lakka/stream/impl/StreamLayout$Module;
      20: aload_3
      21: aload_0
      22: invokevirtual #592                // Method shape:()Lakka/stream/SourceShape;
      25: invokevirtual #635                // Method akka/stream/SourceShape.out:()Lakka/stream/Outlet;
      28: aload_3
      29: invokeinterface #638,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.shape:()Lakka/stream/Shape;
      34: invokevirtual #644                // Method akka/stream/Shape.inlets:()Lscala/collection/immutable/Seq;
      37: invokeinterface #650,  1          // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
      42: checkcast     #652                // class akka/stream/InPort
      45: aload_2
      46: invokeinterface #656,  5          // InterfaceMethod akka/stream/impl/StreamLayout$Module.fuse:(Lakka/stream/impl/StreamLayout$Module;Lakka/stream/OutPort;Lakka/stream/InPort;Lscala/Function2;)Lakka/stream/impl/StreamLayout$Module;
      51: invokespecial #682                // Method akka/stream/scaladsl/RunnableGraph."<init>":(Lakka/stream/impl/StreamLayout$Module;)V
      54: areturn

  public <Mat2> akka.stream.scaladsl.Source<Out, Mat2> mapMaterializedValue(scala.Function1<Mat, Mat2>);
    Code:
       0: new           #2                  // class akka/stream/scaladsl/Source
       3: dup
       4: aload_0
       5: invokevirtual #594                // Method module:()Lakka/stream/impl/StreamLayout$Module;
       8: aload_1
       9: invokeinterface #689,  2          // InterfaceMethod akka/stream/impl/StreamLayout$Module.transformMaterializedValue:(Lscala/Function1;)Lakka/stream/impl/StreamLayout$Module;
      14: invokespecial #671                // Method "<init>":(Lakka/stream/impl/StreamLayout$Module;)V
      17: areturn

  public <Mat2> Mat2 runWith(akka.stream.Graph<akka.stream.SinkShape<Out>, Mat2>, akka.stream.Materializer);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #608                // Field akka/stream/scaladsl/Keep$.MODULE$:Lakka/stream/scaladsl/Keep$;
       5: invokevirtual #694                // Method akka/stream/scaladsl/Keep$.right:()Lscala/Function2;
       8: invokevirtual #678                // Method toMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/RunnableGraph;
      11: aload_2
      12: invokevirtual #698                // Method akka/stream/scaladsl/RunnableGraph.run:(Lakka/stream/Materializer;)Ljava/lang/Object;
      15: areturn

  public <U> scala.concurrent.Future<U> runFold(U, scala.Function2<U, Out, U>, akka.stream.Materializer);
    Code:
       0: aload_0
       1: getstatic     #707                // Field akka/stream/scaladsl/Sink$.MODULE$:Lakka/stream/scaladsl/Sink$;
       4: aload_1
       5: aload_2
       6: invokevirtual #710                // Method akka/stream/scaladsl/Sink$.fold:(Ljava/lang/Object;Lscala/Function2;)Lakka/stream/scaladsl/Sink;
       9: aload_3
      10: invokevirtual #712                // Method runWith:(Lakka/stream/Graph;Lakka/stream/Materializer;)Ljava/lang/Object;
      13: checkcast     #714                // class scala/concurrent/Future
      16: areturn

  public <U> scala.concurrent.Future<U> runFoldAsync(U, scala.Function2<U, Out, scala.concurrent.Future<U>>, akka.stream.Materializer);
    Code:
       0: aload_0
       1: getstatic     #707                // Field akka/stream/scaladsl/Sink$.MODULE$:Lakka/stream/scaladsl/Sink$;
       4: aload_1
       5: aload_2
       6: invokevirtual #717                // Method akka/stream/scaladsl/Sink$.foldAsync:(Ljava/lang/Object;Lscala/Function2;)Lakka/stream/scaladsl/Sink;
       9: aload_3
      10: invokevirtual #712                // Method runWith:(Lakka/stream/Graph;Lakka/stream/Materializer;)Ljava/lang/Object;
      13: checkcast     #714                // class scala/concurrent/Future
      16: areturn

  public <U> scala.concurrent.Future<U> runReduce(scala.Function2<U, U, U>, akka.stream.Materializer);
    Code:
       0: aload_0
       1: getstatic     #707                // Field akka/stream/scaladsl/Sink$.MODULE$:Lakka/stream/scaladsl/Sink$;
       4: aload_1
       5: invokevirtual #722                // Method akka/stream/scaladsl/Sink$.reduce:(Lscala/Function2;)Lakka/stream/scaladsl/Sink;
       8: aload_2
       9: invokevirtual #712                // Method runWith:(Lakka/stream/Graph;Lakka/stream/Materializer;)Ljava/lang/Object;
      12: checkcast     #714                // class scala/concurrent/Future
      15: areturn

  public scala.concurrent.Future<akka.Done> runForeach(scala.Function1<Out, scala.runtime.BoxedUnit>, akka.stream.Materializer);
    Code:
       0: aload_0
       1: getstatic     #707                // Field akka/stream/scaladsl/Sink$.MODULE$:Lakka/stream/scaladsl/Sink$;
       4: aload_1
       5: invokevirtual #728                // Method akka/stream/scaladsl/Sink$.foreach:(Lscala/Function1;)Lakka/stream/scaladsl/Sink;
       8: aload_2
       9: invokevirtual #712                // Method runWith:(Lakka/stream/Graph;Lakka/stream/Materializer;)Ljava/lang/Object;
      12: checkcast     #714                // class scala/concurrent/Future
      15: areturn

  public akka.stream.scaladsl.Source<Out, Mat> withAttributes(akka.stream.Attributes);
    Code:
       0: new           #2                  // class akka/stream/scaladsl/Source
       3: dup
       4: aload_0
       5: invokevirtual #594                // Method module:()Lakka/stream/impl/StreamLayout$Module;
       8: aload_1
       9: invokeinterface #733,  2          // InterfaceMethod akka/stream/impl/StreamLayout$Module.withAttributes:(Lakka/stream/Attributes;)Lakka/stream/impl/StreamLayout$Module;
      14: invokespecial #671                // Method "<init>":(Lakka/stream/impl/StreamLayout$Module;)V
      17: areturn

  public akka.stream.scaladsl.Source<Out, Mat> addAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #594                // Method module:()Lakka/stream/impl/StreamLayout$Module;
       5: invokeinterface #740,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.attributes:()Lakka/stream/Attributes;
      10: aload_1
      11: invokevirtual #746                // Method akka/stream/Attributes.and:(Lakka/stream/Attributes;)Lakka/stream/Attributes;
      14: invokevirtual #748                // Method withAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Source;
      17: areturn

  public akka.stream.scaladsl.Source<Out, Mat> named(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #755                // Field akka/stream/Attributes$.MODULE$:Lakka/stream/Attributes$;
       4: aload_1
       5: invokevirtual #758                // Method akka/stream/Attributes$.name:(Ljava/lang/String;)Lakka/stream/Attributes;
       8: invokevirtual #760                // Method addAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Source;
      11: areturn

  public akka.stream.scaladsl.Source<Out, Mat> async();
    Code:
       0: aload_0
       1: getstatic     #755                // Field akka/stream/Attributes$.MODULE$:Lakka/stream/Attributes$;
       4: invokevirtual #764                // Method akka/stream/Attributes$.asyncBoundary:()Lakka/stream/Attributes;
       7: invokevirtual #760                // Method addAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Source;
      10: areturn

  public akka.stream.javadsl.Source<Out, Mat> asJava();
    Code:
       0: new           #768                // class akka/stream/javadsl/Source
       3: dup
       4: aload_0
       5: invokespecial #771                // Method akka/stream/javadsl/Source."<init>":(Lakka/stream/scaladsl/Source;)V
       8: areturn

  public <T, U> akka.stream.scaladsl.Source<U, akka.NotUsed> combine(akka.stream.scaladsl.Source<T, ?>, akka.stream.scaladsl.Source<T, ?>, scala.collection.Seq<akka.stream.scaladsl.Source<T, ?>>, scala.Function1<java.lang.Object, akka.stream.Graph<akka.stream.UniformFanInShape<T, U>, akka.NotUsed>>);
    Code:
       0: getstatic     #21                 // Field akka/stream/scaladsl/Source$.MODULE$:Lakka/stream/scaladsl/Source$;
       3: getstatic     #777                // Field akka/stream/scaladsl/GraphDSL$.MODULE$:Lakka/stream/scaladsl/GraphDSL$;
       6: new           #779                // class akka/stream/scaladsl/Source$$anonfun$combine$1
       9: dup
      10: aload_0
      11: aload_1
      12: aload_2
      13: aload_3
      14: aload         4
      16: invokespecial #782                // Method akka/stream/scaladsl/Source$$anonfun$combine$1."<init>":(Lakka/stream/scaladsl/Source;Lakka/stream/scaladsl/Source;Lakka/stream/scaladsl/Source;Lscala/collection/Seq;Lscala/Function1;)V
      19: invokevirtual #786                // Method akka/stream/scaladsl/GraphDSL$.create:(Lscala/Function1;)Lakka/stream/Graph;
      22: invokevirtual #93                 // Method akka/stream/scaladsl/Source$.fromGraph:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Source;
      25: areturn

  public akka.stream.scaladsl.FlowOps async();
    Code:
       0: aload_0
       1: invokevirtual #792                // Method async:()Lakka/stream/scaladsl/Source;
       4: areturn

  public akka.stream.Graph async();
    Code:
       0: aload_0
       1: invokevirtual #792                // Method async:()Lakka/stream/scaladsl/Source;
       4: areturn

  public akka.stream.scaladsl.FlowOps named(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #796                // Method named:(Ljava/lang/String;)Lakka/stream/scaladsl/Source;
       5: areturn

  public akka.stream.Graph named(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #796                // Method named:(Ljava/lang/String;)Lakka/stream/scaladsl/Source;
       5: areturn

  public akka.stream.scaladsl.FlowOps addAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #760                // Method addAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Source;
       5: areturn

  public akka.stream.Graph addAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #760                // Method addAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Source;
       5: areturn

  public akka.stream.scaladsl.FlowOps withAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #748                // Method withAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Source;
       5: areturn

  public akka.stream.Graph withAttributes(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #748                // Method withAttributes:(Lakka/stream/Attributes;)Lakka/stream/scaladsl/Source;
       5: areturn

  public akka.stream.scaladsl.FlowOpsMat mapMaterializedValue(scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #802                // Method mapMaterializedValue:(Lscala/Function1;)Lakka/stream/scaladsl/Source;
       5: areturn

  public akka.stream.Graph toMat(akka.stream.Graph, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #678                // Method toMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/RunnableGraph;
       6: areturn

  public java.lang.Object to(akka.stream.Graph);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #805                // Method to:(Lakka/stream/Graph;)Lakka/stream/scaladsl/RunnableGraph;
       5: areturn

  public akka.stream.scaladsl.FlowOpsMat viaMat(akka.stream.Graph, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #616                // Method viaMat:(Lakka/stream/Graph;Lscala/Function2;)Lakka/stream/scaladsl/Source;
       6: areturn

  public akka.stream.scaladsl.FlowOps via(akka.stream.Graph);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #807                // Method via:(Lakka/stream/Graph;)Lakka/stream/scaladsl/Source;
       5: areturn

  public akka.stream.Shape shape();
    Code:
       0: aload_0
       1: invokevirtual #592                // Method shape:()Lakka/stream/SourceShape;
       4: areturn

  public akka.stream.scaladsl.Source(akka.stream.impl.StreamLayout$Module);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #560                // Field module:Lakka/stream/impl/StreamLayout$Module;
       5: aload_0
       6: invokespecial #810                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #814                // Method akka/stream/scaladsl/FlowOps$class.$init$:(Lakka/stream/scaladsl/FlowOps;)V
      13: aload_0
      14: invokestatic  #817                // Method akka/stream/scaladsl/FlowOpsMat$class.$init$:(Lakka/stream/scaladsl/FlowOpsMat;)V
      17: aload_0
      18: invokestatic  #822                // Method akka/stream/Graph$class.$init$:(Lakka/stream/Graph;)V
      21: aload_0
      22: aload_1
      23: invokeinterface #638,  1          // InterfaceMethod akka/stream/impl/StreamLayout$Module.shape:()Lakka/stream/Shape;
      28: checkcast     #631                // class akka/stream/SourceShape
      31: putfield      #563                // Field shape:Lakka/stream/SourceShape;
      34: return
}
