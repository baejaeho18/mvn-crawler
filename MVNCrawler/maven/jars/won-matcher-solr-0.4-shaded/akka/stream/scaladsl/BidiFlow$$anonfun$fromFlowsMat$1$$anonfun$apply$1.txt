Compiled from "BidiFlow.scala"
public final class akka.stream.scaladsl.BidiFlow$$anonfun$fromFlowsMat$1$$anonfun$apply$1 extends scala.runtime.AbstractFunction2<akka.stream.FlowShape<I1, O1>, akka.stream.FlowShape<I2, O2>, akka.stream.BidiShape<I1, O1, I2, O2>> implements scala.Serializable {
  public static final long serialVersionUID;

  public final akka.stream.BidiShape<I1, O1, I2, O2> apply(akka.stream.FlowShape<I1, O1>, akka.stream.FlowShape<I2, O2>);
    Code:
       0: new           #18                 // class akka/stream/BidiShape
       3: dup
       4: aload_1
       5: invokevirtual #24                 // Method akka/stream/FlowShape.in:()Lakka/stream/Inlet;
       8: aload_1
       9: invokevirtual #28                 // Method akka/stream/FlowShape.out:()Lakka/stream/Outlet;
      12: aload_2
      13: invokevirtual #24                 // Method akka/stream/FlowShape.in:()Lakka/stream/Inlet;
      16: aload_2
      17: invokevirtual #28                 // Method akka/stream/FlowShape.out:()Lakka/stream/Outlet;
      20: invokespecial #32                 // Method akka/stream/BidiShape."<init>":(Lakka/stream/Inlet;Lakka/stream/Outlet;Lakka/stream/Inlet;Lakka/stream/Outlet;)V
      23: areturn

  public final java.lang.Object apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #20                 // class akka/stream/FlowShape
       5: aload_2
       6: checkcast     #20                 // class akka/stream/FlowShape
       9: invokevirtual #40                 // Method apply:(Lakka/stream/FlowShape;Lakka/stream/FlowShape;)Lakka/stream/BidiShape;
      12: areturn

  public akka.stream.scaladsl.BidiFlow$$anonfun$fromFlowsMat$1$$anonfun$apply$1(akka.stream.scaladsl.BidiFlow$$anonfun$fromFlowsMat$1);
    Code:
       0: aload_0
       1: invokespecial #47                 // Method scala/runtime/AbstractFunction2."<init>":()V
       4: return
}
