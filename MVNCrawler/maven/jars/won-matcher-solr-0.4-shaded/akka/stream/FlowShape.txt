Compiled from "Shape.scala"
public final class akka.stream.FlowShape<I, O> extends akka.stream.Shape implements scala.Product, scala.Serializable {
  private final akka.stream.Inlet<I> in;

  private final akka.stream.Outlet<O> out;

  private final scala.collection.immutable.Seq<akka.stream.Inlet<?>> inlets;

  private final scala.collection.immutable.Seq<akka.stream.Outlet<?>> outlets;

  public static <I, O> scala.Option<scala.Tuple2<akka.stream.Inlet<I>, akka.stream.Outlet<O>>> unapply(akka.stream.FlowShape<I, O>);
    Code:
       0: getstatic     #21                 // Field akka/stream/FlowShape$.MODULE$:Lakka/stream/FlowShape$;
       3: aload_0
       4: invokevirtual #23                 // Method akka/stream/FlowShape$.unapply:(Lakka/stream/FlowShape;)Lscala/Option;
       7: areturn

  public static <I, O> akka.stream.FlowShape<I, O> apply(akka.stream.Inlet<I>, akka.stream.Outlet<O>);
    Code:
       0: getstatic     #21                 // Field akka/stream/FlowShape$.MODULE$:Lakka/stream/FlowShape$;
       3: aload_0
       4: aload_1
       5: invokevirtual #27                 // Method akka/stream/FlowShape$.apply:(Lakka/stream/Inlet;Lakka/stream/Outlet;)Lakka/stream/FlowShape;
       8: areturn

  public static <I, O> akka.stream.FlowShape<I, O> of(akka.stream.Inlet<I>, akka.stream.Outlet<O>);
    Code:
       0: getstatic     #21                 // Field akka/stream/FlowShape$.MODULE$:Lakka/stream/FlowShape$;
       3: aload_0
       4: aload_1
       5: invokevirtual #30                 // Method akka/stream/FlowShape$.of:(Lakka/stream/Inlet;Lakka/stream/Outlet;)Lakka/stream/FlowShape;
       8: areturn

  public akka.stream.Inlet<I> in();
    Code:
       0: aload_0
       1: getfield      #44                 // Field in:Lakka/stream/Inlet;
       4: areturn

  public akka.stream.Outlet<O> out();
    Code:
       0: aload_0
       1: getfield      #49                 // Field out:Lakka/stream/Outlet;
       4: areturn

  public scala.collection.immutable.Seq<akka.stream.Inlet<?>> inlets();
    Code:
       0: aload_0
       1: getfield      #52                 // Field inlets:Lscala/collection/immutable/Seq;
       4: areturn

  public scala.collection.immutable.Seq<akka.stream.Outlet<?>> outlets();
    Code:
       0: aload_0
       1: getfield      #54                 // Field outlets:Lscala/collection/immutable/Seq;
       4: areturn

  public akka.stream.FlowShape<I, O> deepCopy();
    Code:
       0: new           #2                  // class akka/stream/FlowShape
       3: dup
       4: aload_0
       5: invokevirtual #58                 // Method in:()Lakka/stream/Inlet;
       8: invokevirtual #63                 // Method akka/stream/Inlet.carbonCopy:()Lakka/stream/Inlet;
      11: aload_0
      12: invokevirtual #65                 // Method out:()Lakka/stream/Outlet;
      15: invokevirtual #69                 // Method akka/stream/Outlet.carbonCopy:()Lakka/stream/Outlet;
      18: invokespecial #73                 // Method "<init>":(Lakka/stream/Inlet;Lakka/stream/Outlet;)V
      21: areturn

  public akka.stream.Shape copyFromPorts(scala.collection.immutable.Seq<akka.stream.Inlet<?>>, scala.collection.immutable.Seq<akka.stream.Outlet<?>>);
    Code:
       0: getstatic     #80                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_1
       4: invokeinterface #86,  1           // InterfaceMethod scala/collection/immutable/Seq.size:()I
       9: iconst_1
      10: if_icmpne     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: new           #88                 // class akka/stream/FlowShape$$anonfun$copyFromPorts$5
      21: dup
      22: aload_0
      23: aload_1
      24: invokespecial #91                 // Method akka/stream/FlowShape$$anonfun$copyFromPorts$5."<init>":(Lakka/stream/FlowShape;Lscala/collection/immutable/Seq;)V
      27: invokevirtual #95                 // Method scala/Predef$.require:(ZLscala/Function0;)V
      30: getstatic     #80                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      33: aload_2
      34: invokeinterface #86,  1           // InterfaceMethod scala/collection/immutable/Seq.size:()I
      39: iconst_1
      40: if_icmpne     47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: new           #97                 // class akka/stream/FlowShape$$anonfun$copyFromPorts$6
      51: dup
      52: aload_0
      53: aload_2
      54: invokespecial #98                 // Method akka/stream/FlowShape$$anonfun$copyFromPorts$6."<init>":(Lakka/stream/FlowShape;Lscala/collection/immutable/Seq;)V
      57: invokevirtual #95                 // Method scala/Predef$.require:(ZLscala/Function0;)V
      60: new           #2                  // class akka/stream/FlowShape
      63: dup
      64: aload_1
      65: invokeinterface #102,  1          // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
      70: checkcast     #60                 // class akka/stream/Inlet
      73: aload_2
      74: invokeinterface #102,  1          // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
      79: checkcast     #67                 // class akka/stream/Outlet
      82: invokespecial #73                 // Method "<init>":(Lakka/stream/Inlet;Lakka/stream/Outlet;)V
      85: areturn

  public <I, O> akka.stream.FlowShape<I, O> copy(akka.stream.Inlet<I>, akka.stream.Outlet<O>);
    Code:
       0: new           #2                  // class akka/stream/FlowShape
       3: dup
       4: aload_1
       5: aload_2
       6: invokespecial #73                 // Method "<init>":(Lakka/stream/Inlet;Lakka/stream/Outlet;)V
       9: areturn

  public <I, O> akka.stream.Inlet<I> copy$default$1();
    Code:
       0: aload_0
       1: invokevirtual #58                 // Method in:()Lakka/stream/Inlet;
       4: areturn

  public <I, O> akka.stream.Outlet<O> copy$default$2();
    Code:
       0: aload_0
       1: invokevirtual #65                 // Method out:()Lakka/stream/Outlet;
       4: areturn

  public java.lang.String productPrefix();
    Code:
       0: ldc           #109                // String FlowShape
       2: areturn

  public int productArity();
    Code:
       0: iconst_2
       1: ireturn

  public java.lang.Object productElement(int);
    Code:
       0: iload_1
       1: istore_2
       2: iload_2
       3: tableswitch   { // 0 to 1
                     0: 46
                     1: 39
               default: 24
          }
      24: new           #114                // class java/lang/IndexOutOfBoundsException
      27: dup
      28: iload_1
      29: invokestatic  #120                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      32: invokevirtual #125                // Method java/lang/Object.toString:()Ljava/lang/String;
      35: invokespecial #128                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_0
      40: invokevirtual #65                 // Method out:()Lakka/stream/Outlet;
      43: goto          50
      46: aload_0
      47: invokevirtual #58                 // Method in:()Lakka/stream/Inlet;
      50: areturn

  public scala.collection.Iterator<java.lang.Object> productIterator();
    Code:
       0: getstatic     #137                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #141                // Method scala/runtime/ScalaRunTime$.typedProductIterator:(Lscala/Product;)Lscala/collection/Iterator;
       7: areturn

  public boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class akka/stream/FlowShape
       4: ireturn

  public int hashCode();
    Code:
       0: getstatic     #137                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #149                // Method scala/runtime/ScalaRunTime$._hashCode:(Lscala/Product;)I
       7: ireturn

  public java.lang.String toString();
    Code:
       0: getstatic     #137                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #153                // Method scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
       7: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     103
       5: aload_1
       6: astore_2
       7: aload_2
       8: instanceof    #2                  // class akka/stream/FlowShape
      11: ifeq          19
      14: iconst_1
      15: istore_3
      16: goto          21
      19: iconst_0
      20: istore_3
      21: iload_3
      22: ifeq          107
      25: aload_1
      26: checkcast     #2                  // class akka/stream/FlowShape
      29: astore        4
      31: aload_0
      32: invokevirtual #58                 // Method in:()Lakka/stream/Inlet;
      35: aload         4
      37: invokevirtual #58                 // Method in:()Lakka/stream/Inlet;
      40: astore        5
      42: dup
      43: ifnonnull     55
      46: pop
      47: aload         5
      49: ifnull        63
      52: goto          99
      55: aload         5
      57: invokevirtual #156                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      60: ifeq          99
      63: aload_0
      64: invokevirtual #65                 // Method out:()Lakka/stream/Outlet;
      67: aload         4
      69: invokevirtual #65                 // Method out:()Lakka/stream/Outlet;
      72: astore        6
      74: dup
      75: ifnonnull     87
      78: pop
      79: aload         6
      81: ifnull        95
      84: goto          99
      87: aload         6
      89: invokevirtual #156                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      92: ifeq          99
      95: iconst_1
      96: goto          100
      99: iconst_0
     100: ifeq          107
     103: iconst_1
     104: goto          108
     107: iconst_0
     108: ireturn

  public akka.stream.Shape deepCopy();
    Code:
       0: aload_0
       1: invokevirtual #159                // Method deepCopy:()Lakka/stream/FlowShape;
       4: areturn

  public akka.stream.FlowShape(akka.stream.Inlet<I>, akka.stream.Outlet<O>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #44                 // Field in:Lakka/stream/Inlet;
       5: aload_0
       6: aload_2
       7: putfield      #49                 // Field out:Lakka/stream/Outlet;
      10: aload_0
      11: invokespecial #162                // Method akka/stream/Shape."<init>":()V
      14: aload_0
      15: invokestatic  #168                // Method scala/Product$class.$init$:(Lscala/Product;)V
      18: aload_0
      19: getstatic     #173                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
      22: getstatic     #80                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      25: iconst_1
      26: anewarray     #60                 // class akka/stream/Inlet
      29: dup
      30: iconst_0
      31: aload_1
      32: aastore
      33: checkcast     #175                // class "[Ljava/lang/Object;"
      36: invokevirtual #179                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      39: invokevirtual #182                // Method scala/collection/immutable/List$.apply:(Lscala/collection/Seq;)Lscala/collection/immutable/List;
      42: putfield      #52                 // Field inlets:Lscala/collection/immutable/Seq;
      45: aload_0
      46: getstatic     #173                // Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
      49: getstatic     #80                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      52: iconst_1
      53: anewarray     #67                 // class akka/stream/Outlet
      56: dup
      57: iconst_0
      58: aload_2
      59: aastore
      60: checkcast     #175                // class "[Ljava/lang/Object;"
      63: invokevirtual #179                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      66: invokevirtual #182                // Method scala/collection/immutable/List$.apply:(Lscala/collection/Seq;)Lscala/collection/immutable/List;
      69: putfield      #54                 // Field outlets:Lscala/collection/immutable/Seq;
      72: return
}
