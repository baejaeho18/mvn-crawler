Compiled from "FanoutProcessor.scala"
public abstract class akka.stream.impl.FanoutOutputs implements akka.stream.impl.DefaultOutputTransferStates, akka.stream.impl.SubscriberManagement<java.lang.Object> {
  private final int maxBufferSize;

  private final int initialBufferSize;

  private final akka.actor.ActorRef self;

  private final akka.stream.impl.Pump pump;

  private akka.stream.impl.ActorPublisher<java.lang.Object> exposedPublisher;

  private long downstreamBufferSpace;

  private boolean downstreamCompleted;

  private final akka.stream.impl.SubReceive subreceive;

  private final akka.stream.impl.ResizableMultiReaderRingBuffer akka$stream$impl$SubscriberManagement$$buffer;

  private scala.collection.immutable.List akka$stream$impl$SubscriberManagement$$subscriptions;

  private long akka$stream$impl$SubscriberManagement$$pendingFromUpstream;

  private akka.stream.impl.SubscriberManagement$EndOfStream akka$stream$impl$SubscriberManagement$$endOfStream;

  private final akka.stream.impl.TransferState NeedsDemand;

  public akka.stream.impl.ResizableMultiReaderRingBuffer akka$stream$impl$SubscriberManagement$$buffer();
    Code:
       0: aload_0
       1: getfield      #41                 // Field akka$stream$impl$SubscriberManagement$$buffer:Lakka/stream/impl/ResizableMultiReaderRingBuffer;
       4: areturn

  public void akka$stream$impl$SubscriberManagement$_setter_$akka$stream$impl$SubscriberManagement$$buffer_$eq(akka.stream.impl.ResizableMultiReaderRingBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #41                 // Field akka$stream$impl$SubscriberManagement$$buffer:Lakka/stream/impl/ResizableMultiReaderRingBuffer;
       5: return

  public scala.collection.immutable.List akka$stream$impl$SubscriberManagement$$subscriptions();
    Code:
       0: aload_0
       1: getfield      #49                 // Field akka$stream$impl$SubscriberManagement$$subscriptions:Lscala/collection/immutable/List;
       4: areturn

  public void akka$stream$impl$SubscriberManagement$$subscriptions_$eq(scala.collection.immutable.List);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #49                 // Field akka$stream$impl$SubscriberManagement$$subscriptions:Lscala/collection/immutable/List;
       5: return

  public long akka$stream$impl$SubscriberManagement$$pendingFromUpstream();
    Code:
       0: aload_0
       1: getfield      #54                 // Field akka$stream$impl$SubscriberManagement$$pendingFromUpstream:J
       4: lreturn

  public void akka$stream$impl$SubscriberManagement$$pendingFromUpstream_$eq(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #54                 // Field akka$stream$impl$SubscriberManagement$$pendingFromUpstream:J
       5: return

  public akka.stream.impl.SubscriberManagement$EndOfStream akka$stream$impl$SubscriberManagement$$endOfStream();
    Code:
       0: aload_0
       1: getfield      #59                 // Field akka$stream$impl$SubscriberManagement$$endOfStream:Lakka/stream/impl/SubscriberManagement$EndOfStream;
       4: areturn

  public void akka$stream$impl$SubscriberManagement$$endOfStream_$eq(akka.stream.impl.SubscriberManagement$EndOfStream);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #59                 // Field akka$stream$impl$SubscriberManagement$$endOfStream:Lakka/stream/impl/SubscriberManagement$EndOfStream;
       5: return

  public java.lang.String bufferDebug();
    Code:
       0: aload_0
       1: invokestatic  #68                 // Method akka/stream/impl/SubscriberManagement$class.bufferDebug:(Lakka/stream/impl/SubscriberManagement;)Ljava/lang/String;
       4: areturn

  public scala.collection.immutable.List<akka.stream.impl.SubscriptionWithCursor> cursors();
    Code:
       0: aload_0
       1: invokestatic  #72                 // Method akka/stream/impl/SubscriberManagement$class.cursors:(Lakka/stream/impl/SubscriberManagement;)Lscala/collection/immutable/List;
       4: areturn

  public void moreRequested(akka.stream.impl.SubscriptionWithCursor, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: invokestatic  #77                 // Method akka/stream/impl/SubscriberManagement$class.moreRequested:(Lakka/stream/impl/SubscriberManagement;Lakka/stream/impl/SubscriptionWithCursor;J)V
       6: return

  public void pushToDownstream(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #85                 // Method akka/stream/impl/SubscriberManagement$class.pushToDownstream:(Lakka/stream/impl/SubscriberManagement;Ljava/lang/Object;)V
       5: return

  public void completeDownstream();
    Code:
       0: aload_0
       1: invokestatic  #92                 // Method akka/stream/impl/SubscriberManagement$class.completeDownstream:(Lakka/stream/impl/SubscriberManagement;)V
       4: return

  public void abortDownstream(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #97                 // Method akka/stream/impl/SubscriberManagement$class.abortDownstream:(Lakka/stream/impl/SubscriberManagement;Ljava/lang/Throwable;)V
       5: return

  public void registerSubscriber(org.reactivestreams.Subscriber<? super java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #104                // Method akka/stream/impl/SubscriberManagement$class.registerSubscriber:(Lakka/stream/impl/SubscriberManagement;Lorg/reactivestreams/Subscriber;)V
       5: return

  public void unregisterSubscription(akka.stream.impl.SubscriptionWithCursor);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #111                // Method akka/stream/impl/SubscriberManagement$class.unregisterSubscription:(Lakka/stream/impl/SubscriberManagement;Lakka/stream/impl/SubscriptionWithCursor;)V
       5: return

  public akka.stream.impl.TransferState NeedsDemand();
    Code:
       0: aload_0
       1: getfield      #114                // Field NeedsDemand:Lakka/stream/impl/TransferState;
       4: areturn

  public void akka$stream$impl$DefaultOutputTransferStates$_setter_$NeedsDemand_$eq(akka.stream.impl.TransferState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #114                // Field NeedsDemand:Lakka/stream/impl/TransferState;
       5: return

  public akka.stream.impl.TransferState NeedsDemandOrCancel();
    Code:
       0: aload_0
       1: invokestatic  #122                // Method akka/stream/impl/DefaultOutputTransferStates$class.NeedsDemandOrCancel:(Lakka/stream/impl/DefaultOutputTransferStates;)Lakka/stream/impl/TransferState;
       4: areturn

  public boolean isOpen();
    Code:
       0: aload_0
       1: invokestatic  #129                // Method akka/stream/impl/Outputs$class.isOpen:(Lakka/stream/impl/Outputs;)Z
       4: ireturn

  public int maxBufferSize();
    Code:
       0: aload_0
       1: getfield      #132                // Field maxBufferSize:I
       4: ireturn

  public int initialBufferSize();
    Code:
       0: aload_0
       1: getfield      #134                // Field initialBufferSize:I
       4: ireturn

  public akka.stream.impl.Pump pump();
    Code:
       0: aload_0
       1: getfield      #137                // Field pump:Lakka/stream/impl/Pump;
       4: areturn

  public akka.stream.impl.ActorSubscriptionWithCursor<? super java.lang.Object> createSubscription(org.reactivestreams.Subscriber<? super java.lang.Object>);
    Code:
       0: new           #141                // class akka/stream/impl/ActorSubscriptionWithCursor
       3: dup
       4: aload_0
       5: getfield      #143                // Field self:Lakka/actor/ActorRef;
       8: aload_1
       9: invokespecial #147                // Method akka/stream/impl/ActorSubscriptionWithCursor."<init>":(Lakka/actor/ActorRef;Lorg/reactivestreams/Subscriber;)V
      12: areturn

  public akka.stream.impl.ActorPublisher<java.lang.Object> exposedPublisher();
    Code:
       0: aload_0
       1: getfield      #150                // Field exposedPublisher:Lakka/stream/impl/ActorPublisher;
       4: areturn

  public void exposedPublisher_$eq(akka.stream.impl.ActorPublisher<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #150                // Field exposedPublisher:Lakka/stream/impl/ActorPublisher;
       5: return

  private long downstreamBufferSpace();
    Code:
       0: aload_0
       1: getfield      #154                // Field downstreamBufferSpace:J
       4: lreturn

  private void downstreamBufferSpace_$eq(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #154                // Field downstreamBufferSpace:J
       5: return

  private boolean downstreamCompleted();
    Code:
       0: aload_0
       1: getfield      #157                // Field downstreamCompleted:Z
       4: ireturn

  private void downstreamCompleted_$eq(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #157                // Field downstreamCompleted:Z
       5: return

  public boolean demandAvailable();
    Code:
       0: aload_0
       1: invokespecial #162                // Method downstreamBufferSpace:()J
       4: lconst_0
       5: lcmp
       6: ifle          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public long demandCount();
    Code:
       0: aload_0
       1: invokespecial #162                // Method downstreamBufferSpace:()J
       4: lreturn

  public akka.stream.impl.SubReceive subreceive();
    Code:
       0: aload_0
       1: getfield      #166                // Field subreceive:Lakka/stream/impl/SubReceive;
       4: areturn

  public void enqueueOutputElement(java.lang.Object);
    Code:
       0: getstatic     #173                // Field akka/stream/impl/ReactiveStreamsCompliance$.MODULE$:Lakka/stream/impl/ReactiveStreamsCompliance$;
       3: aload_1
       4: invokevirtual #176                // Method akka/stream/impl/ReactiveStreamsCompliance$.requireNonNullElement:(Ljava/lang/Object;)V
       7: aload_0
       8: aload_0
       9: invokespecial #162                // Method downstreamBufferSpace:()J
      12: lconst_1
      13: lsub
      14: invokespecial #178                // Method downstreamBufferSpace_$eq:(J)V
      17: aload_0
      18: aload_1
      19: invokevirtual #180                // Method pushToDownstream:(Ljava/lang/Object;)V
      22: return

  public void complete();
    Code:
       0: aload_0
       1: invokespecial #184                // Method downstreamCompleted:()Z
       4: ifne          16
       7: aload_0
       8: iconst_1
       9: invokespecial #186                // Method downstreamCompleted_$eq:(Z)V
      12: aload_0
      13: invokevirtual #188                // Method completeDownstream:()V
      16: return

  public void cancel();
    Code:
       0: aload_0
       1: invokevirtual #191                // Method complete:()V
       4: return

  public void error(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokespecial #184                // Method downstreamCompleted:()Z
       4: ifne          39
       7: aload_0
       8: iconst_1
       9: invokespecial #186                // Method downstreamCompleted_$eq:(Z)V
      12: aload_0
      13: aload_1
      14: invokevirtual #194                // Method abortDownstream:(Ljava/lang/Throwable;)V
      17: aload_0
      18: invokevirtual #196                // Method exposedPublisher:()Lakka/stream/impl/ActorPublisher;
      21: ifnull        39
      24: aload_0
      25: invokevirtual #196                // Method exposedPublisher:()Lakka/stream/impl/ActorPublisher;
      28: new           #198                // class scala/Some
      31: dup
      32: aload_1
      33: invokespecial #200                // Method scala/Some."<init>":(Ljava/lang/Object;)V
      36: invokevirtual #206                // Method akka/stream/impl/ActorPublisher.shutdown:(Lscala/Option;)V
      39: return

  public boolean isClosed();
    Code:
       0: aload_0
       1: invokespecial #184                // Method downstreamCompleted:()Z
       4: ireturn

  public abstract void afterShutdown();

  public void requestFromUpstream(long);
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #162                // Method downstreamBufferSpace:()J
       5: lload_1
       6: ladd
       7: invokespecial #178                // Method downstreamBufferSpace_$eq:(J)V
      10: return

  public void akka$stream$impl$FanoutOutputs$$subscribePending();
    Code:
       0: aload_0
       1: invokevirtual #196                // Method exposedPublisher:()Lakka/stream/impl/ActorPublisher;
       4: invokevirtual #215                // Method akka/stream/impl/ActorPublisher.takePendingSubscribers:()Lscala/collection/immutable/Seq;
       7: new           #217                // class akka/stream/impl/FanoutOutputs$$anonfun$akka$stream$impl$FanoutOutputs$$subscribePending$1
      10: dup
      11: aload_0
      12: invokespecial #220                // Method akka/stream/impl/FanoutOutputs$$anonfun$akka$stream$impl$FanoutOutputs$$subscribePending$1."<init>":(Lakka/stream/impl/FanoutOutputs;)V
      15: invokeinterface #226,  2          // InterfaceMethod scala/collection/immutable/Seq.foreach:(Lscala/Function1;)V
      20: return

  public void shutdown(boolean);
    Code:
       0: aload_0
       1: invokevirtual #196                // Method exposedPublisher:()Lakka/stream/impl/ActorPublisher;
       4: ifnull        37
       7: iload_1
       8: ifeq          24
      11: aload_0
      12: invokevirtual #196                // Method exposedPublisher:()Lakka/stream/impl/ActorPublisher;
      15: getstatic     #231                // Field scala/None$.MODULE$:Lscala/None$;
      18: invokevirtual #206                // Method akka/stream/impl/ActorPublisher.shutdown:(Lscala/Option;)V
      21: goto          37
      24: aload_0
      25: invokevirtual #196                // Method exposedPublisher:()Lakka/stream/impl/ActorPublisher;
      28: getstatic     #236                // Field akka/stream/impl/ActorPublisher$.MODULE$:Lakka/stream/impl/ActorPublisher$;
      31: invokevirtual #240                // Method akka/stream/impl/ActorPublisher$.SomeNormalShutdownReason:()Lscala/Some;
      34: invokevirtual #206                // Method akka/stream/impl/ActorPublisher.shutdown:(Lscala/Option;)V
      37: aload_0
      38: invokevirtual #242                // Method afterShutdown:()V
      41: return

  public void cancelUpstream();
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #186                // Method downstreamCompleted_$eq:(Z)V
       5: return

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> waitingExposedPublisher();
    Code:
       0: new           #248                // class akka/stream/impl/FanoutOutputs$$anonfun$waitingExposedPublisher$1
       3: dup
       4: aload_0
       5: invokespecial #249                // Method akka/stream/impl/FanoutOutputs$$anonfun$waitingExposedPublisher$1."<init>":(Lakka/stream/impl/FanoutOutputs;)V
       8: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> downstreamRunning();
    Code:
       0: new           #252                // class akka/stream/impl/FanoutOutputs$$anonfun$downstreamRunning$1
       3: dup
       4: aload_0
       5: invokespecial #253                // Method akka/stream/impl/FanoutOutputs$$anonfun$downstreamRunning$1."<init>":(Lakka/stream/impl/FanoutOutputs;)V
       8: areturn

  public akka.stream.impl.SubscriptionWithCursor createSubscription(org.reactivestreams.Subscriber);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #256                // Method createSubscription:(Lorg/reactivestreams/Subscriber;)Lakka/stream/impl/ActorSubscriptionWithCursor;
       5: areturn

  public akka.stream.impl.FanoutOutputs(int, int, akka.actor.ActorRef, akka.stream.impl.Pump);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #132                // Field maxBufferSize:I
       5: aload_0
       6: iload_2
       7: putfield      #134                // Field initialBufferSize:I
      10: aload_0
      11: aload_3
      12: putfield      #143                // Field self:Lakka/actor/ActorRef;
      15: aload_0
      16: aload         4
      18: putfield      #137                // Field pump:Lakka/stream/impl/Pump;
      21: aload_0
      22: invokespecial #259                // Method java/lang/Object."<init>":()V
      25: aload_0
      26: invokestatic  #263                // Method akka/stream/impl/Outputs$class.$init$:(Lakka/stream/impl/Outputs;)V
      29: aload_0
      30: invokestatic  #266                // Method akka/stream/impl/DefaultOutputTransferStates$class.$init$:(Lakka/stream/impl/DefaultOutputTransferStates;)V
      33: aload_0
      34: invokestatic  #268                // Method akka/stream/impl/SubscriberManagement$class.$init$:(Lakka/stream/impl/SubscriberManagement;)V
      37: aload_0
      38: lconst_0
      39: putfield      #154                // Field downstreamBufferSpace:J
      42: aload_0
      43: iconst_0
      44: putfield      #157                // Field downstreamCompleted:Z
      47: aload_0
      48: new           #270                // class akka/stream/impl/SubReceive
      51: dup
      52: aload_0
      53: invokevirtual #272                // Method waitingExposedPublisher:()Lscala/PartialFunction;
      56: invokespecial #275                // Method akka/stream/impl/SubReceive."<init>":(Lscala/PartialFunction;)V
      59: putfield      #166                // Field subreceive:Lakka/stream/impl/SubReceive;
      62: return
}
