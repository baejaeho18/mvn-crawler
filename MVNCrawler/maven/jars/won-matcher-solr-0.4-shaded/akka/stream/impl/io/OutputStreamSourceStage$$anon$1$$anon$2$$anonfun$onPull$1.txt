Compiled from "OutputStreamSourceStage.scala"
public final class akka.stream.impl.io.OutputStreamSourceStage$$anon$1$$anon$2$$anonfun$onPull$1 extends scala.runtime.AbstractFunction0<akka.util.ByteString> implements scala.Serializable {
  public static final long serialVersionUID;

  private final akka.stream.impl.io.OutputStreamSourceStage$$anon$1$$anon$2 $outer;

  public final akka.util.ByteString apply();
    Code:
       0: aload_0
       1: getfield      #25                 // Field $outer:Lakka/stream/impl/io/OutputStreamSourceStage$$anon$1$$anon$2;
       4: invokevirtual #29                 // Method akka/stream/impl/io/OutputStreamSourceStage$$anon$1$$anon$2.akka$stream$impl$io$OutputStreamSourceStage$$anon$$anon$$$outer:()Lakka/stream/impl/io/OutputStreamSourceStage$$anon$1;
       7: invokestatic  #35                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      10: invokevirtual #41                 // Method akka/stream/impl/io/OutputStreamSourceStage$$anon$1.akka$stream$impl$io$OutputStreamSourceStage$$anon$$blockingThread_$eq:(Ljava/lang/Thread;)V
      13: aload_0
      14: getfield      #25                 // Field $outer:Lakka/stream/impl/io/OutputStreamSourceStage$$anon$1$$anon$2;
      17: getfield      #45                 // Field akka/stream/impl/io/OutputStreamSourceStage$$anon$1$$anon$2.dataQueue$1:Ljava/util/concurrent/LinkedBlockingQueue;
      20: invokevirtual #51                 // Method java/util/concurrent/LinkedBlockingQueue.take:()Ljava/lang/Object;
      23: checkcast     #53                 // class akka/util/ByteString
      26: goto          57
      29: pop
      30: invokestatic  #57                 // Method java/lang/Thread.interrupted:()Z
      33: pop
      34: getstatic     #63                 // Field akka/util/ByteString$.MODULE$:Lakka/util/ByteString$;
      37: invokevirtual #66                 // Method akka/util/ByteString$.empty:()Lakka/util/ByteString;
      40: goto          57
      43: astore_1
      44: aload_0
      45: getfield      #25                 // Field $outer:Lakka/stream/impl/io/OutputStreamSourceStage$$anon$1$$anon$2;
      48: invokevirtual #29                 // Method akka/stream/impl/io/OutputStreamSourceStage$$anon$1$$anon$2.akka$stream$impl$io$OutputStreamSourceStage$$anon$$anon$$$outer:()Lakka/stream/impl/io/OutputStreamSourceStage$$anon$1;
      51: aconst_null
      52: invokevirtual #41                 // Method akka/stream/impl/io/OutputStreamSourceStage$$anon$1.akka$stream$impl$io$OutputStreamSourceStage$$anon$$blockingThread_$eq:(Ljava/lang/Thread;)V
      55: aload_1
      56: athrow
      57: aload_0
      58: getfield      #25                 // Field $outer:Lakka/stream/impl/io/OutputStreamSourceStage$$anon$1$$anon$2;
      61: invokevirtual #29                 // Method akka/stream/impl/io/OutputStreamSourceStage$$anon$1$$anon$2.akka$stream$impl$io$OutputStreamSourceStage$$anon$$anon$$$outer:()Lakka/stream/impl/io/OutputStreamSourceStage$$anon$1;
      64: aconst_null
      65: invokevirtual #41                 // Method akka/stream/impl/io/OutputStreamSourceStage$$anon$1.akka$stream$impl$io$OutputStreamSourceStage$$anon$$blockingThread_$eq:(Ljava/lang/Thread;)V
      68: areturn
    Exception table:
       from    to  target type
          13    29    29   Class java/lang/InterruptedException
          13    43    43   any

  public final java.lang.Object apply();
    Code:
       0: aload_0
       1: invokevirtual #72                 // Method apply:()Lakka/util/ByteString;
       4: areturn

  public akka.stream.impl.io.OutputStreamSourceStage$$anon$1$$anon$2$$anonfun$onPull$1(akka.stream.impl.io.OutputStreamSourceStage$$anon$1$$anon$2);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #25                 // Field $outer:Lakka/stream/impl/io/OutputStreamSourceStage$$anon$1$$anon$2;
      11: aload_0
      12: invokespecial #76                 // Method scala/runtime/AbstractFunction0."<init>":()V
      15: return
}
