Compiled from "TLSActor.scala"
public final class akka.stream.impl.io.TLSActor$$anon$4 implements akka.stream.impl.TransferState {
  private final akka.stream.impl.io.TLSActor $outer;

  public boolean isExecutable();
    Code:
       0: aload_0
       1: invokestatic  #18                 // Method akka/stream/impl/TransferState$class.isExecutable:(Lakka/stream/impl/TransferState;)Z
       4: ireturn

  public akka.stream.impl.TransferState $bar$bar(akka.stream.impl.TransferState);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #25                 // Method akka/stream/impl/TransferState$class.$bar$bar:(Lakka/stream/impl/TransferState;Lakka/stream/impl/TransferState;)Lakka/stream/impl/TransferState;
       5: areturn

  public akka.stream.impl.TransferState $amp$amp(akka.stream.impl.TransferState);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #30                 // Method akka/stream/impl/TransferState$class.$amp$amp:(Lakka/stream/impl/TransferState;Lakka/stream/impl/TransferState;)Lakka/stream/impl/TransferState;
       5: areturn

  public boolean isReady();
    Code:
       0: aload_0
       1: getfield      #33                 // Field $outer:Lakka/stream/impl/io/TLSActor;
       4: invokevirtual #36                 // Method akka/stream/impl/io/TLSActor.corkUser:()Z
       7: ifne          57
      10: aload_0
      11: getfield      #33                 // Field $outer:Lakka/stream/impl/io/TLSActor;
      14: invokevirtual #40                 // Method akka/stream/impl/io/TLSActor.akka$stream$impl$io$TLSActor$$userInChoppingBlock:()Lakka/stream/impl/io/TLSActor$ChoppingBlock;
      17: invokevirtual #44                 // Method akka/stream/impl/io/TLSActor$ChoppingBlock.isReady:()Z
      20: ifeq          57
      23: aload_0
      24: getfield      #33                 // Field $outer:Lakka/stream/impl/io/TLSActor;
      27: invokevirtual #48                 // Method akka/stream/impl/io/TLSActor.lastHandshakeStatus:()Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
      30: getstatic     #54                 // Field javax/net/ssl/SSLEngineResult$HandshakeStatus.NEED_UNWRAP:Ljavax/net/ssl/SSLEngineResult$HandshakeStatus;
      33: astore_1
      34: dup
      35: ifnonnull     46
      38: pop
      39: aload_1
      40: ifnull        57
      43: goto          53
      46: aload_1
      47: invokevirtual #58                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      50: ifne          57
      53: iconst_1
      54: goto          58
      57: iconst_0
      58: ireturn

  public boolean isCompleted();
    Code:
       0: aload_0
       1: getfield      #33                 // Field $outer:Lakka/stream/impl/io/TLSActor;
       4: invokevirtual #63                 // Method akka/stream/impl/io/TLSActor.inputBunch:()Lakka/stream/impl/FanIn$InputBunch;
       7: iconst_1
       8: invokevirtual #69                 // Method akka/stream/impl/FanIn$InputBunch.isCancelled:(I)Z
      11: ifne          28
      14: aload_0
      15: getfield      #33                 // Field $outer:Lakka/stream/impl/io/TLSActor;
      18: invokevirtual #63                 // Method akka/stream/impl/io/TLSActor.inputBunch:()Lakka/stream/impl/FanIn$InputBunch;
      21: iconst_1
      22: invokevirtual #72                 // Method akka/stream/impl/FanIn$InputBunch.isDepleted:(I)Z
      25: ifeq          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public akka.stream.impl.io.TLSActor$$anon$4(akka.stream.impl.io.TLSActor);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #33                 // Field $outer:Lakka/stream/impl/io/TLSActor;
      11: aload_0
      12: invokespecial #77                 // Method java/lang/Object."<init>":()V
      15: aload_0
      16: invokestatic  #81                 // Method akka/stream/impl/TransferState$class.$init$:(Lakka/stream/impl/TransferState;)V
      19: return
}
