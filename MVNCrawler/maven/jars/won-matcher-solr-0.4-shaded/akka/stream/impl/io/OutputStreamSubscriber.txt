Compiled from "OutputStreamSubscriber.scala"
public class akka.stream.impl.io.OutputStreamSubscriber implements akka.stream.actor.ActorSubscriber,akka.actor.ActorLogging {
  public final java.io.OutputStream akka$stream$impl$io$OutputStreamSubscriber$$os;

  public final scala.concurrent.Promise<akka.stream.IOResult> akka$stream$impl$io$OutputStreamSubscriber$$completionPromise;

  public final boolean akka$stream$impl$io$OutputStreamSubscriber$$autoFlush;

  private final akka.stream.actor.WatermarkRequestStrategy requestStrategy;

  private long akka$stream$impl$io$OutputStreamSubscriber$$bytesWritten;

  private akka.event.LoggingAdapter akka$actor$ActorLogging$$_log;

  private final akka.stream.actor.ActorSubscriberState akka$stream$actor$ActorSubscriber$$state;

  private scala.Option akka$stream$actor$ActorSubscriber$$subscription;

  private long akka$stream$actor$ActorSubscriber$$requested;

  private boolean akka$stream$actor$ActorSubscriber$$_canceled;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public static akka.actor.Props props(java.io.OutputStream, scala.concurrent.Promise<akka.stream.IOResult>, int, boolean);
    Code:
       0: getstatic     #20                 // Field akka/stream/impl/io/OutputStreamSubscriber$.MODULE$:Lakka/stream/impl/io/OutputStreamSubscriber$;
       3: aload_0
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokevirtual #22                 // Method akka/stream/impl/io/OutputStreamSubscriber$.props:(Ljava/io/OutputStream;Lscala/concurrent/Promise;IZ)Lakka/actor/Props;
      10: areturn

  public akka.event.LoggingAdapter akka$actor$ActorLogging$$_log();
    Code:
       0: aload_0
       1: getfield      #48                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$actor$ActorLogging$$_log_$eq(akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #48                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       5: return

  public akka.event.LoggingAdapter log();
    Code:
       0: aload_0
       1: invokestatic  #59                 // Method akka/actor/ActorLogging$class.log:(Lakka/actor/ActorLogging;)Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$stream$actor$ActorSubscriber$$super$aroundReceive(scala.PartialFunction, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #67                 // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void akka$stream$actor$ActorSubscriber$$super$aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #77                 // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void akka$stream$actor$ActorSubscriber$$super$aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #83                 // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void akka$stream$actor$ActorSubscriber$$super$aroundPreRestart(java.lang.Throwable, scala.Option);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #91                 // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void akka$stream$actor$ActorSubscriber$$super$aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #96                 // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public akka.stream.actor.ActorSubscriberState akka$stream$actor$ActorSubscriber$$state();
    Code:
       0: aload_0
       1: getfield      #99                 // Field akka$stream$actor$ActorSubscriber$$state:Lakka/stream/actor/ActorSubscriberState;
       4: areturn

  public void akka$stream$actor$ActorSubscriber$_setter_$akka$stream$actor$ActorSubscriber$$state_$eq(akka.stream.actor.ActorSubscriberState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #99                 // Field akka$stream$actor$ActorSubscriber$$state:Lakka/stream/actor/ActorSubscriberState;
       5: return

  public scala.Option akka$stream$actor$ActorSubscriber$$subscription();
    Code:
       0: aload_0
       1: getfield      #104                // Field akka$stream$actor$ActorSubscriber$$subscription:Lscala/Option;
       4: areturn

  public void akka$stream$actor$ActorSubscriber$$subscription_$eq(scala.Option);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #104                // Field akka$stream$actor$ActorSubscriber$$subscription:Lscala/Option;
       5: return

  public long akka$stream$actor$ActorSubscriber$$requested();
    Code:
       0: aload_0
       1: getfield      #109                // Field akka$stream$actor$ActorSubscriber$$requested:J
       4: lreturn

  public void akka$stream$actor$ActorSubscriber$$requested_$eq(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #109                // Field akka$stream$actor$ActorSubscriber$$requested:J
       5: return

  public boolean akka$stream$actor$ActorSubscriber$$_canceled();
    Code:
       0: aload_0
       1: getfield      #114                // Field akka$stream$actor$ActorSubscriber$$_canceled:Z
       4: ireturn

  public void akka$stream$actor$ActorSubscriber$$_canceled_$eq(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #114                // Field akka$stream$actor$ActorSubscriber$$_canceled:Z
       5: return

  public final boolean canceled();
    Code:
       0: aload_0
       1: invokestatic  #122                // Method akka/stream/actor/ActorSubscriber$class.canceled:(Lakka/stream/actor/ActorSubscriber;)Z
       4: ireturn

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #125                // Method akka/stream/actor/ActorSubscriber$class.aroundReceive:(Lakka/stream/actor/ActorSubscriber;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #128                // Method akka/stream/actor/ActorSubscriber$class.aroundPreStart:(Lakka/stream/actor/ActorSubscriber;)V
       4: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #131                // Method akka/stream/actor/ActorSubscriber$class.aroundPostRestart:(Lakka/stream/actor/ActorSubscriber;Ljava/lang/Throwable;)V
       5: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #134                // Method akka/stream/actor/ActorSubscriber$class.aroundPreRestart:(Lakka/stream/actor/ActorSubscriber;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #136                // Method akka/stream/actor/ActorSubscriber$class.aroundPostStop:(Lakka/stream/actor/ActorSubscriber;)V
       4: return

  public void request(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #140                // Method akka/stream/actor/ActorSubscriber$class.request:(Lakka/stream/actor/ActorSubscriber;J)V
       5: return

  public void cancel();
    Code:
       0: aload_0
       1: invokestatic  #144                // Method akka/stream/actor/ActorSubscriber$class.cancel:(Lakka/stream/actor/ActorSubscriber;)V
       4: return

  public int remainingRequested();
    Code:
       0: aload_0
       1: invokestatic  #149                // Method akka/stream/actor/ActorSubscriber$class.remainingRequested:(Lakka/stream/actor/ActorSubscriber;)I
       4: ireturn

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #152                // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #155                // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #152                // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #155                // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #163                // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokestatic  #168                // Method akka/actor/Actor$class.supervisorStrategy:(Lakka/actor/Actor;)Lakka/actor/SupervisorStrategy;
       4: areturn

  public void preStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #173                // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #176                // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void postRestart(java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #179                // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #184                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public akka.stream.actor.WatermarkRequestStrategy requestStrategy();
    Code:
       0: aload_0
       1: getfield      #187                // Field requestStrategy:Lakka/stream/actor/WatermarkRequestStrategy;
       4: areturn

  public long akka$stream$impl$io$OutputStreamSubscriber$$bytesWritten();
    Code:
       0: aload_0
       1: getfield      #189                // Field akka$stream$impl$io$OutputStreamSubscriber$$bytesWritten:J
       4: lreturn

  public void akka$stream$impl$io$OutputStreamSubscriber$$bytesWritten_$eq(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #189                // Field akka$stream$impl$io$OutputStreamSubscriber$$bytesWritten:J
       5: return

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: new           #193                // class akka/stream/impl/io/OutputStreamSubscriber$$anonfun$receive$1
       3: dup
       4: aload_0
       5: invokespecial #197                // Method akka/stream/impl/io/OutputStreamSubscriber$$anonfun$receive$1."<init>":(Lakka/stream/impl/io/OutputStreamSubscriber;)V
       8: areturn

  public void postStop();
    Code:
       0: aload_0
       1: getfield      #200                // Field akka$stream$impl$io$OutputStreamSubscriber$$os:Ljava/io/OutputStream;
       4: ifnull        14
       7: aload_0
       8: getfield      #200                // Field akka$stream$impl$io$OutputStreamSubscriber$$os:Ljava/io/OutputStream;
      11: invokevirtual #205                // Method java/io/OutputStream.close:()V
      14: getstatic     #211                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      17: goto          48
      20: astore_1
      21: aload_0
      22: getfield      #213                // Field akka$stream$impl$io$OutputStreamSubscriber$$completionPromise:Lscala/concurrent/Promise;
      25: getstatic     #218                // Field akka/stream/IOResult$.MODULE$:Lakka/stream/IOResult$;
      28: aload_0
      29: invokevirtual #220                // Method akka$stream$impl$io$OutputStreamSubscriber$$bytesWritten:()J
      32: new           #222                // class scala/util/Failure
      35: dup
      36: aload_1
      37: invokespecial #224                // Method scala/util/Failure."<init>":(Ljava/lang/Throwable;)V
      40: invokevirtual #228                // Method akka/stream/IOResult$.apply:(JLscala/util/Try;)Lakka/stream/IOResult;
      43: invokeinterface #234,  2          // InterfaceMethod scala/concurrent/Promise.success:(Ljava/lang/Object;)Lscala/concurrent/Promise;
      48: pop
      49: aload_0
      50: getfield      #213                // Field akka$stream$impl$io$OutputStreamSubscriber$$completionPromise:Lscala/concurrent/Promise;
      53: getstatic     #218                // Field akka/stream/IOResult$.MODULE$:Lakka/stream/IOResult$;
      56: aload_0
      57: invokevirtual #220                // Method akka$stream$impl$io$OutputStreamSubscriber$$bytesWritten:()J
      60: new           #236                // class scala/util/Success
      63: dup
      64: getstatic     #241                // Field akka/Done$.MODULE$:Lakka/Done$;
      67: invokespecial #243                // Method scala/util/Success."<init>":(Ljava/lang/Object;)V
      70: invokevirtual #228                // Method akka/stream/IOResult$.apply:(JLscala/util/Try;)Lakka/stream/IOResult;
      73: invokeinterface #247,  2          // InterfaceMethod scala/concurrent/Promise.trySuccess:(Ljava/lang/Object;)Z
      78: pop
      79: aload_0
      80: invokestatic  #249                // Method akka/actor/Actor$class.postStop:(Lakka/actor/Actor;)V
      83: return
    Exception table:
       from    to  target type
           0    20    20   Class java/lang/Exception

  public akka.stream.actor.RequestStrategy requestStrategy();
    Code:
       0: aload_0
       1: invokevirtual #252                // Method requestStrategy:()Lakka/stream/actor/WatermarkRequestStrategy;
       4: areturn

  public akka.stream.impl.io.OutputStreamSubscriber(java.io.OutputStream, scala.concurrent.Promise<akka.stream.IOResult>, int, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #200                // Field akka$stream$impl$io$OutputStreamSubscriber$$os:Ljava/io/OutputStream;
       5: aload_0
       6: aload_2
       7: putfield      #213                // Field akka$stream$impl$io$OutputStreamSubscriber$$completionPromise:Lscala/concurrent/Promise;
      10: aload_0
      11: iload         4
      13: putfield      #255                // Field akka$stream$impl$io$OutputStreamSubscriber$$autoFlush:Z
      16: aload_0
      17: invokespecial #257                // Method java/lang/Object."<init>":()V
      20: aload_0
      21: invokestatic  #260                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      24: aload_0
      25: invokestatic  #262                // Method akka/stream/actor/ActorSubscriber$class.$init$:(Lakka/stream/actor/ActorSubscriber;)V
      28: aload_0
      29: invokestatic  #265                // Method akka/actor/ActorLogging$class.$init$:(Lakka/actor/ActorLogging;)V
      32: aload_0
      33: getstatic     #270                // Field akka/stream/actor/WatermarkRequestStrategy$.MODULE$:Lakka/stream/actor/WatermarkRequestStrategy$;
      36: iload_3
      37: invokevirtual #273                // Method akka/stream/actor/WatermarkRequestStrategy$.apply:(I)Lakka/stream/actor/WatermarkRequestStrategy;
      40: putfield      #187                // Field requestStrategy:Lakka/stream/actor/WatermarkRequestStrategy;
      43: aload_0
      44: lconst_0
      45: putfield      #189                // Field akka$stream$impl$io$OutputStreamSubscriber$$bytesWritten:J
      48: return
}
