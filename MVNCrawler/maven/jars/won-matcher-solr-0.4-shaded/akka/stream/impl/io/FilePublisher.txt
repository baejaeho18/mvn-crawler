Compiled from "FilePublisher.scala"
public final class akka.stream.impl.io.FilePublisher implements akka.stream.actor.ActorPublisher<akka.util.ByteString>, akka.actor.ActorLogging {
  private final java.nio.file.Path f;

  private final scala.concurrent.Promise<akka.stream.IOResult> completionPromise;

  public final int akka$stream$impl$io$FilePublisher$$maxBuffer;

  private long eofReachedAtOffset;

  private final java.nio.ByteBuffer buf;

  private long readBytesTotal;

  private scala.collection.immutable.Vector<akka.util.ByteString> availableChunks;

  private java.nio.channels.FileChannel chan;

  private akka.event.LoggingAdapter akka$actor$ActorLogging$$_log;

  private final akka.stream.actor.ActorPublisherState akka$stream$actor$ActorPublisher$$state;

  private org.reactivestreams.Subscriber<java.lang.Object> akka$stream$actor$ActorPublisher$$subscriber;

  private long akka$stream$actor$ActorPublisher$$demand;

  private akka.stream.actor.ActorPublisher$Internal$LifecycleState akka$stream$actor$ActorPublisher$$lifecycleState;

  private akka.actor.Cancellable akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public static java.util.Set<java.nio.file.StandardOpenOption> Read();
    Code:
       0: getstatic     #21                 // Field akka/stream/impl/io/FilePublisher$.MODULE$:Lakka/stream/impl/io/FilePublisher$;
       3: invokevirtual #23                 // Method akka/stream/impl/io/FilePublisher$.Read:()Ljava/util/Set;
       6: areturn

  public static akka.actor.Props props(java.nio.file.Path, scala.concurrent.Promise<akka.stream.IOResult>, int, int, int);
    Code:
       0: getstatic     #21                 // Field akka/stream/impl/io/FilePublisher$.MODULE$:Lakka/stream/impl/io/FilePublisher$;
       3: aload_0
       4: aload_1
       5: iload_2
       6: iload_3
       7: iload         4
       9: invokevirtual #27                 // Method akka/stream/impl/io/FilePublisher$.props:(Ljava/nio/file/Path;Lscala/concurrent/Promise;III)Lakka/actor/Props;
      12: areturn

  public akka.event.LoggingAdapter akka$actor$ActorLogging$$_log();
    Code:
       0: aload_0
       1: getfield      #63                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$actor$ActorLogging$$_log_$eq(akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #63                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       5: return

  public akka.event.LoggingAdapter log();
    Code:
       0: aload_0
       1: invokestatic  #74                 // Method akka/actor/ActorLogging$class.log:(Lakka/actor/ActorLogging;)Lakka/event/LoggingAdapter;
       4: areturn

  public akka.stream.actor.ActorPublisherState akka$stream$actor$ActorPublisher$$state();
    Code:
       0: aload_0
       1: getfield      #77                 // Field akka$stream$actor$ActorPublisher$$state:Lakka/stream/actor/ActorPublisherState;
       4: areturn

  public org.reactivestreams.Subscriber<java.lang.Object> akka$stream$actor$ActorPublisher$$subscriber();
    Code:
       0: aload_0
       1: getfield      #80                 // Field akka$stream$actor$ActorPublisher$$subscriber:Lorg/reactivestreams/Subscriber;
       4: areturn

  public void akka$stream$actor$ActorPublisher$$subscriber_$eq(org.reactivestreams.Subscriber<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #80                 // Field akka$stream$actor$ActorPublisher$$subscriber:Lorg/reactivestreams/Subscriber;
       5: return

  public long akka$stream$actor$ActorPublisher$$demand();
    Code:
       0: aload_0
       1: getfield      #86                 // Field akka$stream$actor$ActorPublisher$$demand:J
       4: lreturn

  public void akka$stream$actor$ActorPublisher$$demand_$eq(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #86                 // Field akka$stream$actor$ActorPublisher$$demand:J
       5: return

  public akka.stream.actor.ActorPublisher$Internal$LifecycleState akka$stream$actor$ActorPublisher$$lifecycleState();
    Code:
       0: aload_0
       1: getfield      #91                 // Field akka$stream$actor$ActorPublisher$$lifecycleState:Lakka/stream/actor/ActorPublisher$Internal$LifecycleState;
       4: areturn

  public void akka$stream$actor$ActorPublisher$$lifecycleState_$eq(akka.stream.actor.ActorPublisher$Internal$LifecycleState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #91                 // Field akka$stream$actor$ActorPublisher$$lifecycleState:Lakka/stream/actor/ActorPublisher$Internal$LifecycleState;
       5: return

  public akka.actor.Cancellable akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout();
    Code:
       0: aload_0
       1: getfield      #96                 // Field akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout:Lakka/actor/Cancellable;
       4: areturn

  public void akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout_$eq(akka.actor.Cancellable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #96                 // Field akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout:Lakka/actor/Cancellable;
       5: return

  public void akka$stream$actor$ActorPublisher$$super$aroundReceive(scala.PartialFunction, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #106                // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void akka$stream$actor$ActorPublisher$$super$aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #116                // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void akka$stream$actor$ActorPublisher$$super$aroundPreRestart(java.lang.Throwable, scala.Option);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #122                // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void akka$stream$actor$ActorPublisher$$super$aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #132                // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void akka$stream$actor$ActorPublisher$$super$aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #136                // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void akka$stream$actor$ActorPublisher$_setter_$akka$stream$actor$ActorPublisher$$state_$eq(akka.stream.actor.ActorPublisherState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #77                 // Field akka$stream$actor$ActorPublisher$$state:Lakka/stream/actor/ActorPublisherState;
       5: return

  public scala.concurrent.duration.Duration subscriptionTimeout();
    Code:
       0: aload_0
       1: invokestatic  #145                // Method akka/stream/actor/ActorPublisher$class.subscriptionTimeout:(Lakka/stream/actor/ActorPublisher;)Lscala/concurrent/duration/Duration;
       4: areturn

  public final boolean isActive();
    Code:
       0: aload_0
       1: invokestatic  #150                // Method akka/stream/actor/ActorPublisher$class.isActive:(Lakka/stream/actor/ActorPublisher;)Z
       4: ireturn

  public final long totalDemand();
    Code:
       0: aload_0
       1: invokestatic  #154                // Method akka/stream/actor/ActorPublisher$class.totalDemand:(Lakka/stream/actor/ActorPublisher;)J
       4: lreturn

  public final boolean isCompleted();
    Code:
       0: aload_0
       1: invokestatic  #157                // Method akka/stream/actor/ActorPublisher$class.isCompleted:(Lakka/stream/actor/ActorPublisher;)Z
       4: ireturn

  public final boolean isErrorEmitted();
    Code:
       0: aload_0
       1: invokestatic  #160                // Method akka/stream/actor/ActorPublisher$class.isErrorEmitted:(Lakka/stream/actor/ActorPublisher;)Z
       4: ireturn

  public final boolean isCanceled();
    Code:
       0: aload_0
       1: invokestatic  #163                // Method akka/stream/actor/ActorPublisher$class.isCanceled:(Lakka/stream/actor/ActorPublisher;)Z
       4: ireturn

  public void onNext(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #168                // Method akka/stream/actor/ActorPublisher$class.onNext:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Object;)V
       5: return

  public void onComplete();
    Code:
       0: aload_0
       1: invokestatic  #173                // Method akka/stream/actor/ActorPublisher$class.onComplete:(Lakka/stream/actor/ActorPublisher;)V
       4: return

  public void onCompleteThenStop();
    Code:
       0: aload_0
       1: invokestatic  #176                // Method akka/stream/actor/ActorPublisher$class.onCompleteThenStop:(Lakka/stream/actor/ActorPublisher;)V
       4: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #180                // Method akka/stream/actor/ActorPublisher$class.onError:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Throwable;)V
       5: return

  public void onErrorThenStop(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #184                // Method akka/stream/actor/ActorPublisher$class.onErrorThenStop:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Throwable;)V
       5: return

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #187                // Method akka/stream/actor/ActorPublisher$class.aroundReceive:(Lakka/stream/actor/ActorPublisher;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #189                // Method akka/stream/actor/ActorPublisher$class.aroundPreStart:(Lakka/stream/actor/ActorPublisher;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #192                // Method akka/stream/actor/ActorPublisher$class.aroundPreRestart:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #194                // Method akka/stream/actor/ActorPublisher$class.aroundPostRestart:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Throwable;)V
       5: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #196                // Method akka/stream/actor/ActorPublisher$class.aroundPostStop:(Lakka/stream/actor/ActorPublisher;)V
       4: return

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #199                // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #202                // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #199                // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #202                // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #210                // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokestatic  #215                // Method akka/actor/Actor$class.supervisorStrategy:(Lakka/actor/Actor;)Lakka/actor/SupervisorStrategy;
       4: areturn

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #220                // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void postRestart(java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #223                // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #227                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public long eofReachedAtOffset();
    Code:
       0: aload_0
       1: getfield      #229                // Field eofReachedAtOffset:J
       4: lreturn

  public void eofReachedAtOffset_$eq(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #229                // Field eofReachedAtOffset:J
       5: return

  public java.nio.ByteBuffer buf();
    Code:
       0: aload_0
       1: getfield      #233                // Field buf:Ljava/nio/ByteBuffer;
       4: areturn

  public long readBytesTotal();
    Code:
       0: aload_0
       1: getfield      #235                // Field readBytesTotal:J
       4: lreturn

  public void readBytesTotal_$eq(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #235                // Field readBytesTotal:J
       5: return

  public scala.collection.immutable.Vector<akka.util.ByteString> availableChunks();
    Code:
       0: aload_0
       1: getfield      #239                // Field availableChunks:Lscala/collection/immutable/Vector;
       4: areturn

  public void availableChunks_$eq(scala.collection.immutable.Vector<akka.util.ByteString>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #239                // Field availableChunks:Lscala/collection/immutable/Vector;
       5: return

  private java.nio.channels.FileChannel chan();
    Code:
       0: aload_0
       1: getfield      #244                // Field chan:Ljava/nio/channels/FileChannel;
       4: areturn

  private void chan_$eq(java.nio.channels.FileChannel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #244                // Field chan:Ljava/nio/channels/FileChannel;
       5: return

  public void preStart();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #249                // Field f:Ljava/nio/file/Path;
       5: getstatic     #21                 // Field akka/stream/impl/io/FilePublisher$.MODULE$:Lakka/stream/impl/io/FilePublisher$;
       8: invokevirtual #23                 // Method akka/stream/impl/io/FilePublisher$.Read:()Ljava/util/Set;
      11: iconst_0
      12: anewarray     #251                // class java/nio/file/attribute/FileAttribute
      15: invokestatic  #257                // Method java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/FileChannel;
      18: invokespecial #259                // Method chan_$eq:(Ljava/nio/channels/FileChannel;)V
      21: goto          90
      24: astore_1
      25: aload_1
      26: astore_2
      27: getstatic     #264                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      30: aload_2
      31: invokevirtual #268                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      34: astore_3
      35: aload_3
      36: invokevirtual #273                // Method scala/Option.isEmpty:()Z
      39: ifeq          44
      42: aload_1
      43: athrow
      44: aload_3
      45: invokevirtual #277                // Method scala/Option.get:()Ljava/lang/Object;
      48: checkcast     #279                // class java/lang/Throwable
      51: astore        4
      53: aload_0
      54: getfield      #281                // Field completionPromise:Lscala/concurrent/Promise;
      57: getstatic     #286                // Field akka/stream/IOResult$.MODULE$:Lakka/stream/IOResult$;
      60: lconst_0
      61: new           #288                // class scala/util/Failure
      64: dup
      65: aload         4
      67: invokespecial #291                // Method scala/util/Failure."<init>":(Ljava/lang/Throwable;)V
      70: invokevirtual #295                // Method akka/stream/IOResult$.apply:(JLscala/util/Try;)Lakka/stream/IOResult;
      73: invokeinterface #301,  2          // InterfaceMethod scala/concurrent/Promise.trySuccess:(Ljava/lang/Object;)Z
      78: pop
      79: aload_0
      80: aload         4
      82: invokevirtual #303                // Method onErrorThenStop:(Ljava/lang/Throwable;)V
      85: getstatic     #309                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      88: astore        5
      90: aload_0
      91: invokestatic  #311                // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
      94: return
    Exception table:
       from    to  target type
           0    24    24   any

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: new           #315                // class akka/stream/impl/io/FilePublisher$$anonfun$receive$1
       3: dup
       4: aload_0
       5: invokespecial #318                // Method akka/stream/impl/io/FilePublisher$$anonfun$receive$1."<init>":(Lakka/stream/impl/io/FilePublisher;)V
       8: areturn

  public void readAndSignal(int);
    Code:
       0: aload_0
       1: invokevirtual #322                // Method isActive:()Z
       4: ifeq          62
       7: aload_0
       8: aload_0
       9: iload_1
      10: aload_0
      11: aload_0
      12: invokevirtual #324                // Method availableChunks:()Lscala/collection/immutable/Vector;
      15: invokespecial #328                // Method signalOnNexts:(Lscala/collection/immutable/Vector;)Lscala/collection/immutable/Vector;
      18: invokevirtual #332                // Method readAhead:(ILscala/collection/immutable/Vector;)Lscala/collection/immutable/Vector;
      21: invokevirtual #334                // Method availableChunks_$eq:(Lscala/collection/immutable/Vector;)V
      24: aload_0
      25: invokevirtual #336                // Method totalDemand:()J
      28: lconst_0
      29: lcmp
      30: ifle          62
      33: aload_0
      34: invokevirtual #322                // Method isActive:()Z
      37: ifeq          62
      40: getstatic     #341                // Field akka/actor/package$.MODULE$:Lakka/actor/package$;
      43: aload_0
      44: invokevirtual #343                // Method self:()Lakka/actor/ActorRef;
      47: invokevirtual #347                // Method akka/actor/package$.actorRef2Scala:(Lakka/actor/ActorRef;)Lakka/actor/ScalaActorRef;
      50: getstatic     #352                // Field akka/stream/impl/io/FilePublisher$Continue$.MODULE$:Lakka/stream/impl/io/FilePublisher$Continue$;
      53: aload_0
      54: invokevirtual #343                // Method self:()Lakka/actor/ActorRef;
      57: invokeinterface #358,  3          // InterfaceMethod akka/actor/ScalaActorRef.$bang:(Ljava/lang/Object;Lakka/actor/ActorRef;)V
      62: return

  private scala.collection.immutable.Vector<akka.util.ByteString> signalOnNexts(scala.collection.immutable.Vector<akka.util.ByteString>);
    Code:
       0: aload_1
       1: invokevirtual #364                // Method scala/collection/immutable/Vector.nonEmpty:()Z
       4: ifeq          32
       7: aload_0
       8: invokevirtual #336                // Method totalDemand:()J
      11: lconst_0
      12: lcmp
      13: ifle          32
      16: aload_0
      17: aload_1
      18: invokevirtual #367                // Method scala/collection/immutable/Vector.head:()Ljava/lang/Object;
      21: invokevirtual #369                // Method onNext:(Ljava/lang/Object;)V
      24: aload_1
      25: invokevirtual #372                // Method scala/collection/immutable/Vector.tail:()Lscala/collection/immutable/Vector;
      28: astore_1
      29: goto          0
      32: aload_1
      33: invokevirtual #373                // Method scala/collection/immutable/Vector.isEmpty:()Z
      36: ifeq          50
      39: aload_0
      40: invokespecial #376                // Method eofEncountered:()Z
      43: ifeq          50
      46: aload_0
      47: invokevirtual #378                // Method onCompleteThenStop:()V
      50: aload_1
      51: areturn

  public scala.collection.immutable.Vector<akka.util.ByteString> readAhead(int, scala.collection.immutable.Vector<akka.util.ByteString>);
    Code:
       0: aload_2
       1: invokevirtual #383                // Method scala/collection/immutable/Vector.size:()I
       4: iload_1
       5: if_icmple     180
       8: goto          208
      11: astore        5
      13: aload         5
      15: astore        6
      17: getstatic     #264                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      20: aload         6
      22: invokevirtual #268                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      25: astore        7
      27: aload         7
      29: invokevirtual #273                // Method scala/Option.isEmpty:()Z
      32: ifeq          38
      35: aload         5
      37: athrow
      38: aload         7
      40: invokevirtual #277                // Method scala/Option.get:()Ljava/lang/Object;
      43: checkcast     #279                // class java/lang/Throwable
      46: astore        8
      48: aload_0
      49: aload         8
      51: invokevirtual #303                // Method onErrorThenStop:(Ljava/lang/Throwable;)V
      54: ldc_w         #384                // int -2147483648
      57: istore        9
      59: iload         9
      61: istore        4
      63: iload         4
      65: lookupswitch  { // 3
           -2147483648: 161
                    -1: 212
                     0: 173
               default: 100
          }
     100: aload_0
     101: invokevirtual #386                // Method buf:()Ljava/nio/ByteBuffer;
     104: invokevirtual #392                // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
     107: pop
     108: aload_0
     109: aload_0
     110: invokevirtual #394                // Method readBytesTotal:()J
     113: iload         4
     115: i2l
     116: ladd
     117: invokevirtual #396                // Method readBytesTotal_$eq:(J)V
     120: aload_2
     121: getstatic     #401                // Field akka/util/ByteString$.MODULE$:Lakka/util/ByteString$;
     124: aload_0
     125: invokevirtual #386                // Method buf:()Ljava/nio/ByteBuffer;
     128: invokevirtual #405                // Method akka/util/ByteString$.fromByteBuffer:(Ljava/nio/ByteBuffer;)Lakka/util/ByteString;
     131: getstatic     #410                // Field scala/collection/immutable/Vector$.MODULE$:Lscala/collection/immutable/Vector$;
     134: invokevirtual #414                // Method scala/collection/immutable/Vector$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
     137: invokevirtual #418                // Method scala/collection/immutable/Vector.$colon$plus:(Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
     140: checkcast     #361                // class scala/collection/immutable/Vector
     143: astore        10
     145: aload_0
     146: invokevirtual #386                // Method buf:()Ljava/nio/ByteBuffer;
     149: invokevirtual #421                // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
     152: pop
     153: iload_1
     154: aload         10
     156: astore_2
     157: istore_1
     158: goto          0
     161: getstatic     #426                // Field scala/package$.MODULE$:Lscala/package$;
     164: invokevirtual #430                // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
     167: invokevirtual #433                // Method scala/collection/immutable/Vector$.empty:()Lscala/collection/immutable/Vector;
     170: goto          259
     173: iload_1
     174: aload_2
     175: astore_2
     176: istore_1
     177: goto          0
     180: aload_0
     181: invokevirtual #322                // Method isActive:()Z
     184: ifeq          208
     187: aload_0
     188: invokespecial #376                // Method eofEncountered:()Z
     191: ifne          208
     194: aload_0
     195: invokespecial #435                // Method chan:()Ljava/nio/channels/FileChannel;
     198: aload_0
     199: invokevirtual #386                // Method buf:()Ljava/nio/ByteBuffer;
     202: invokevirtual #439                // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;)I
     205: goto          61
     208: aload_2
     209: goto          259
     212: aload_0
     213: aload_0
     214: invokespecial #435                // Method chan:()Ljava/nio/channels/FileChannel;
     217: invokevirtual #442                // Method java/nio/channels/FileChannel.position:()J
     220: invokevirtual #444                // Method eofReachedAtOffset_$eq:(J)V
     223: aload_0
     224: invokevirtual #446                // Method log:()Lakka/event/LoggingAdapter;
     227: new           #448                // class scala/collection/mutable/StringBuilder
     230: dup
     231: invokespecial #450                // Method scala/collection/mutable/StringBuilder."<init>":()V
     234: ldc_w         #452                // String No more bytes available to read (got `-1` from `read`), marking final bytes of file @
     237: invokevirtual #456                // Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
     240: aload_0
     241: invokevirtual #458                // Method eofReachedAtOffset:()J
     244: invokestatic  #464                // Method scala/runtime/BoxesRunTime.boxToLong:(J)Ljava/lang/Long;
     247: invokevirtual #456                // Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
     250: invokevirtual #468                // Method scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
     253: invokeinterface #474,  2          // InterfaceMethod akka/event/LoggingAdapter.debug:(Ljava/lang/String;)V
     258: aload_2
     259: areturn
    Exception table:
       from    to  target type
         194   208    11   any

  private boolean eofEncountered();
    Code:
       0: aload_0
       1: invokevirtual #458                // Method eofReachedAtOffset:()J
       4: ldc2_w        #477                // long -9223372036854775808l
       7: lcmp
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public void postStop();
    Code:
       0: aload_0
       1: invokestatic  #481                // Method akka/actor/Actor$class.postStop:(Lakka/actor/Actor;)V
       4: aload_0
       5: invokespecial #435                // Method chan:()Ljava/nio/channels/FileChannel;
       8: ifnull        18
      11: aload_0
      12: invokespecial #435                // Method chan:()Ljava/nio/channels/FileChannel;
      15: invokevirtual #484                // Method java/nio/channels/FileChannel.close:()V
      18: getstatic     #309                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      21: goto          88
      24: astore_1
      25: aload_1
      26: astore_2
      27: getstatic     #264                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      30: aload_2
      31: invokevirtual #268                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      34: astore_3
      35: aload_3
      36: invokevirtual #273                // Method scala/Option.isEmpty:()Z
      39: ifeq          44
      42: aload_1
      43: athrow
      44: aload_3
      45: invokevirtual #277                // Method scala/Option.get:()Ljava/lang/Object;
      48: checkcast     #279                // class java/lang/Throwable
      51: astore        4
      53: aload_0
      54: getfield      #281                // Field completionPromise:Lscala/concurrent/Promise;
      57: getstatic     #286                // Field akka/stream/IOResult$.MODULE$:Lakka/stream/IOResult$;
      60: aload_0
      61: invokevirtual #394                // Method readBytesTotal:()J
      64: new           #288                // class scala/util/Failure
      67: dup
      68: aload         4
      70: invokespecial #291                // Method scala/util/Failure."<init>":(Ljava/lang/Throwable;)V
      73: invokevirtual #295                // Method akka/stream/IOResult$.apply:(JLscala/util/Try;)Lakka/stream/IOResult;
      76: invokeinterface #301,  2          // InterfaceMethod scala/concurrent/Promise.trySuccess:(Ljava/lang/Object;)Z
      81: invokestatic  #488                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
      84: astore        5
      86: aload         5
      88: pop
      89: aload_0
      90: getfield      #281                // Field completionPromise:Lscala/concurrent/Promise;
      93: getstatic     #286                // Field akka/stream/IOResult$.MODULE$:Lakka/stream/IOResult$;
      96: aload_0
      97: invokevirtual #394                // Method readBytesTotal:()J
     100: new           #490                // class scala/util/Success
     103: dup
     104: getstatic     #495                // Field akka/Done$.MODULE$:Lakka/Done$;
     107: invokespecial #497                // Method scala/util/Success."<init>":(Ljava/lang/Object;)V
     110: invokevirtual #295                // Method akka/stream/IOResult$.apply:(JLscala/util/Try;)Lakka/stream/IOResult;
     113: invokeinterface #301,  2          // InterfaceMethod scala/concurrent/Promise.trySuccess:(Ljava/lang/Object;)Z
     118: pop
     119: return
    Exception table:
       from    to  target type
           4    24    24   any

  public akka.stream.impl.io.FilePublisher(java.nio.file.Path, scala.concurrent.Promise<akka.stream.IOResult>, int, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #249                // Field f:Ljava/nio/file/Path;
       5: aload_0
       6: aload_2
       7: putfield      #281                // Field completionPromise:Lscala/concurrent/Promise;
      10: aload_0
      11: iload         5
      13: putfield      #500                // Field akka$stream$impl$io$FilePublisher$$maxBuffer:I
      16: aload_0
      17: invokespecial #501                // Method java/lang/Object."<init>":()V
      20: aload_0
      21: invokestatic  #504                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      24: aload_0
      25: invokestatic  #506                // Method akka/stream/actor/ActorPublisher$class.$init$:(Lakka/stream/actor/ActorPublisher;)V
      28: aload_0
      29: invokestatic  #509                // Method akka/actor/ActorLogging$class.$init$:(Lakka/actor/ActorLogging;)V
      32: aload_0
      33: ldc2_w        #477                // long -9223372036854775808l
      36: putfield      #229                // Field eofReachedAtOffset:J
      39: aload_0
      40: iload_3
      41: invokestatic  #513                // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      44: putfield      #233                // Field buf:Ljava/nio/ByteBuffer;
      47: aload_0
      48: lconst_0
      49: putfield      #235                // Field readBytesTotal:J
      52: aload_0
      53: getstatic     #426                // Field scala/package$.MODULE$:Lscala/package$;
      56: invokevirtual #430                // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
      59: invokevirtual #433                // Method scala/collection/immutable/Vector$.empty:()Lscala/collection/immutable/Vector;
      62: putfield      #239                // Field availableChunks:Lscala/collection/immutable/Vector;
      65: return
}
