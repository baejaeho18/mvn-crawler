Compiled from "InputStreamPublisher.scala"
public class akka.stream.impl.io.InputStreamPublisher implements akka.stream.actor.ActorPublisher<akka.util.ByteString>, akka.actor.ActorLogging {
  private final java.io.InputStream is;

  private final scala.concurrent.Promise<akka.stream.IOResult> completionPromise;

  private final byte[] arr;

  private long readBytesTotal;

  private akka.event.LoggingAdapter akka$actor$ActorLogging$$_log;

  private final akka.stream.actor.ActorPublisherState akka$stream$actor$ActorPublisher$$state;

  private org.reactivestreams.Subscriber<java.lang.Object> akka$stream$actor$ActorPublisher$$subscriber;

  private long akka$stream$actor$ActorPublisher$$demand;

  private akka.stream.actor.ActorPublisher$Internal$LifecycleState akka$stream$actor$ActorPublisher$$lifecycleState;

  private akka.actor.Cancellable akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public static akka.actor.Props props(java.io.InputStream, scala.concurrent.Promise<akka.stream.IOResult>, int);
    Code:
       0: getstatic     #21                 // Field akka/stream/impl/io/InputStreamPublisher$.MODULE$:Lakka/stream/impl/io/InputStreamPublisher$;
       3: aload_0
       4: aload_1
       5: iload_2
       6: invokevirtual #23                 // Method akka/stream/impl/io/InputStreamPublisher$.props:(Ljava/io/InputStream;Lscala/concurrent/Promise;I)Lakka/actor/Props;
       9: areturn

  public akka.event.LoggingAdapter akka$actor$ActorLogging$$_log();
    Code:
       0: aload_0
       1: getfield      #51                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$actor$ActorLogging$$_log_$eq(akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #51                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       5: return

  public akka.event.LoggingAdapter log();
    Code:
       0: aload_0
       1: invokestatic  #62                 // Method akka/actor/ActorLogging$class.log:(Lakka/actor/ActorLogging;)Lakka/event/LoggingAdapter;
       4: areturn

  public akka.stream.actor.ActorPublisherState akka$stream$actor$ActorPublisher$$state();
    Code:
       0: aload_0
       1: getfield      #65                 // Field akka$stream$actor$ActorPublisher$$state:Lakka/stream/actor/ActorPublisherState;
       4: areturn

  public org.reactivestreams.Subscriber<java.lang.Object> akka$stream$actor$ActorPublisher$$subscriber();
    Code:
       0: aload_0
       1: getfield      #68                 // Field akka$stream$actor$ActorPublisher$$subscriber:Lorg/reactivestreams/Subscriber;
       4: areturn

  public void akka$stream$actor$ActorPublisher$$subscriber_$eq(org.reactivestreams.Subscriber<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #68                 // Field akka$stream$actor$ActorPublisher$$subscriber:Lorg/reactivestreams/Subscriber;
       5: return

  public long akka$stream$actor$ActorPublisher$$demand();
    Code:
       0: aload_0
       1: getfield      #74                 // Field akka$stream$actor$ActorPublisher$$demand:J
       4: lreturn

  public void akka$stream$actor$ActorPublisher$$demand_$eq(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #74                 // Field akka$stream$actor$ActorPublisher$$demand:J
       5: return

  public akka.stream.actor.ActorPublisher$Internal$LifecycleState akka$stream$actor$ActorPublisher$$lifecycleState();
    Code:
       0: aload_0
       1: getfield      #79                 // Field akka$stream$actor$ActorPublisher$$lifecycleState:Lakka/stream/actor/ActorPublisher$Internal$LifecycleState;
       4: areturn

  public void akka$stream$actor$ActorPublisher$$lifecycleState_$eq(akka.stream.actor.ActorPublisher$Internal$LifecycleState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #79                 // Field akka$stream$actor$ActorPublisher$$lifecycleState:Lakka/stream/actor/ActorPublisher$Internal$LifecycleState;
       5: return

  public akka.actor.Cancellable akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout();
    Code:
       0: aload_0
       1: getfield      #84                 // Field akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout:Lakka/actor/Cancellable;
       4: areturn

  public void akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout_$eq(akka.actor.Cancellable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #84                 // Field akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout:Lakka/actor/Cancellable;
       5: return

  public void akka$stream$actor$ActorPublisher$$super$aroundReceive(scala.PartialFunction, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #94                 // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void akka$stream$actor$ActorPublisher$$super$aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #104                // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void akka$stream$actor$ActorPublisher$$super$aroundPreRestart(java.lang.Throwable, scala.Option);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #110                // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void akka$stream$actor$ActorPublisher$$super$aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #120                // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void akka$stream$actor$ActorPublisher$$super$aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #124                // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void akka$stream$actor$ActorPublisher$_setter_$akka$stream$actor$ActorPublisher$$state_$eq(akka.stream.actor.ActorPublisherState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #65                 // Field akka$stream$actor$ActorPublisher$$state:Lakka/stream/actor/ActorPublisherState;
       5: return

  public scala.concurrent.duration.Duration subscriptionTimeout();
    Code:
       0: aload_0
       1: invokestatic  #133                // Method akka/stream/actor/ActorPublisher$class.subscriptionTimeout:(Lakka/stream/actor/ActorPublisher;)Lscala/concurrent/duration/Duration;
       4: areturn

  public final boolean isActive();
    Code:
       0: aload_0
       1: invokestatic  #138                // Method akka/stream/actor/ActorPublisher$class.isActive:(Lakka/stream/actor/ActorPublisher;)Z
       4: ireturn

  public final long totalDemand();
    Code:
       0: aload_0
       1: invokestatic  #142                // Method akka/stream/actor/ActorPublisher$class.totalDemand:(Lakka/stream/actor/ActorPublisher;)J
       4: lreturn

  public final boolean isCompleted();
    Code:
       0: aload_0
       1: invokestatic  #145                // Method akka/stream/actor/ActorPublisher$class.isCompleted:(Lakka/stream/actor/ActorPublisher;)Z
       4: ireturn

  public final boolean isErrorEmitted();
    Code:
       0: aload_0
       1: invokestatic  #148                // Method akka/stream/actor/ActorPublisher$class.isErrorEmitted:(Lakka/stream/actor/ActorPublisher;)Z
       4: ireturn

  public final boolean isCanceled();
    Code:
       0: aload_0
       1: invokestatic  #151                // Method akka/stream/actor/ActorPublisher$class.isCanceled:(Lakka/stream/actor/ActorPublisher;)Z
       4: ireturn

  public void onNext(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #156                // Method akka/stream/actor/ActorPublisher$class.onNext:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Object;)V
       5: return

  public void onComplete();
    Code:
       0: aload_0
       1: invokestatic  #161                // Method akka/stream/actor/ActorPublisher$class.onComplete:(Lakka/stream/actor/ActorPublisher;)V
       4: return

  public void onCompleteThenStop();
    Code:
       0: aload_0
       1: invokestatic  #164                // Method akka/stream/actor/ActorPublisher$class.onCompleteThenStop:(Lakka/stream/actor/ActorPublisher;)V
       4: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #168                // Method akka/stream/actor/ActorPublisher$class.onError:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Throwable;)V
       5: return

  public void onErrorThenStop(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #172                // Method akka/stream/actor/ActorPublisher$class.onErrorThenStop:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Throwable;)V
       5: return

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #175                // Method akka/stream/actor/ActorPublisher$class.aroundReceive:(Lakka/stream/actor/ActorPublisher;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #177                // Method akka/stream/actor/ActorPublisher$class.aroundPreStart:(Lakka/stream/actor/ActorPublisher;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #180                // Method akka/stream/actor/ActorPublisher$class.aroundPreRestart:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #182                // Method akka/stream/actor/ActorPublisher$class.aroundPostRestart:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Throwable;)V
       5: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #184                // Method akka/stream/actor/ActorPublisher$class.aroundPostStop:(Lakka/stream/actor/ActorPublisher;)V
       4: return

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #187                // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #190                // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #187                // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #190                // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #198                // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokestatic  #203                // Method akka/actor/Actor$class.supervisorStrategy:(Lakka/actor/Actor;)Lakka/actor/SupervisorStrategy;
       4: areturn

  public void preStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #208                // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #211                // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void postRestart(java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #214                // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #218                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public byte[] arr();
    Code:
       0: aload_0
       1: getfield      #221                // Field arr:[B
       4: areturn

  public long readBytesTotal();
    Code:
       0: aload_0
       1: getfield      #223                // Field readBytesTotal:J
       4: lreturn

  public void readBytesTotal_$eq(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #223                // Field readBytesTotal:J
       5: return

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: new           #227                // class akka/stream/impl/io/InputStreamPublisher$$anonfun$receive$1
       3: dup
       4: aload_0
       5: invokespecial #231                // Method akka/stream/impl/io/InputStreamPublisher$$anonfun$receive$1."<init>":(Lakka/stream/impl/io/InputStreamPublisher;)V
       8: areturn

  public void readAndSignal();
    Code:
       0: aload_0
       1: invokevirtual #234                // Method isActive:()Z
       4: ifeq          49
       7: aload_0
       8: invokevirtual #237                // Method readAndEmit:()V
      11: aload_0
      12: invokevirtual #239                // Method totalDemand:()J
      15: lconst_0
      16: lcmp
      17: ifle          49
      20: aload_0
      21: invokevirtual #234                // Method isActive:()Z
      24: ifeq          49
      27: getstatic     #244                // Field akka/actor/package$.MODULE$:Lakka/actor/package$;
      30: aload_0
      31: invokevirtual #246                // Method self:()Lakka/actor/ActorRef;
      34: invokevirtual #250                // Method akka/actor/package$.actorRef2Scala:(Lakka/actor/ActorRef;)Lakka/actor/ScalaActorRef;
      37: getstatic     #255                // Field akka/stream/impl/io/InputStreamPublisher$Continue$.MODULE$:Lakka/stream/impl/io/InputStreamPublisher$Continue$;
      40: aload_0
      41: invokevirtual #246                // Method self:()Lakka/actor/ActorRef;
      44: invokeinterface #261,  3          // InterfaceMethod akka/actor/ScalaActorRef.$bang:(Ljava/lang/Object;Lakka/actor/ActorRef;)V
      49: return

  public void readAndEmit();
    Code:
       0: aload_0
       1: invokevirtual #239                // Method totalDemand:()J
       4: lconst_0
       5: lcmp
       6: ifle          99
       9: aload_0
      10: getfield      #263                // Field is:Ljava/io/InputStream;
      13: aload_0
      14: invokevirtual #265                // Method arr:()[B
      17: invokevirtual #271                // Method java/io/InputStream.read:([B)I
      20: istore_2
      21: iload_2
      22: istore_3
      23: iload_3
      24: tableswitch   { // -1 to -1
                    -1: 74
               default: 44
          }
      44: aload_0
      45: aload_0
      46: invokevirtual #273                // Method readBytesTotal:()J
      49: iload_2
      50: i2l
      51: ladd
      52: invokevirtual #275                // Method readBytesTotal_$eq:(J)V
      55: aload_0
      56: getstatic     #280                // Field akka/util/ByteString$.MODULE$:Lakka/util/ByteString$;
      59: aload_0
      60: invokevirtual #265                // Method arr:()[B
      63: iconst_0
      64: iload_2
      65: invokevirtual #284                // Method akka/util/ByteString$.fromArray:([BII)Lakka/util/ByteString;
      68: invokevirtual #286                // Method onNext:(Ljava/lang/Object;)V
      71: goto          99
      74: aload_0
      75: invokevirtual #288                // Method log:()Lakka/event/LoggingAdapter;
      78: ldc_w         #290                // String No more bytes available to read (got `-1` from `read`)
      81: invokeinterface #296,  2          // InterfaceMethod akka/event/LoggingAdapter.debug:(Ljava/lang/String;)V
      86: aload_0
      87: invokevirtual #298                // Method onCompleteThenStop:()V
      90: goto          99
      93: astore_1
      94: aload_0
      95: aload_1
      96: invokevirtual #300                // Method onErrorThenStop:(Ljava/lang/Throwable;)V
      99: return
    Exception table:
       from    to  target type
           9    93    93   Class java/lang/Exception

  public void postStop();
    Code:
       0: aload_0
       1: invokestatic  #305                // Method akka/actor/Actor$class.postStop:(Lakka/actor/Actor;)V
       4: aload_0
       5: getfield      #263                // Field is:Ljava/io/InputStream;
       8: ifnull        18
      11: aload_0
      12: getfield      #263                // Field is:Ljava/io/InputStream;
      15: invokevirtual #308                // Method java/io/InputStream.close:()V
      18: getstatic     #314                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      21: goto          52
      24: astore_1
      25: aload_0
      26: getfield      #316                // Field completionPromise:Lscala/concurrent/Promise;
      29: getstatic     #321                // Field akka/stream/IOResult$.MODULE$:Lakka/stream/IOResult$;
      32: aload_0
      33: invokevirtual #273                // Method readBytesTotal:()J
      36: new           #323                // class scala/util/Failure
      39: dup
      40: aload_1
      41: invokespecial #325                // Method scala/util/Failure."<init>":(Ljava/lang/Throwable;)V
      44: invokevirtual #329                // Method akka/stream/IOResult$.apply:(JLscala/util/Try;)Lakka/stream/IOResult;
      47: invokeinterface #335,  2          // InterfaceMethod scala/concurrent/Promise.success:(Ljava/lang/Object;)Lscala/concurrent/Promise;
      52: pop
      53: aload_0
      54: getfield      #316                // Field completionPromise:Lscala/concurrent/Promise;
      57: getstatic     #321                // Field akka/stream/IOResult$.MODULE$:Lakka/stream/IOResult$;
      60: aload_0
      61: invokevirtual #273                // Method readBytesTotal:()J
      64: new           #337                // class scala/util/Success
      67: dup
      68: getstatic     #342                // Field akka/Done$.MODULE$:Lakka/Done$;
      71: invokespecial #344                // Method scala/util/Success."<init>":(Ljava/lang/Object;)V
      74: invokevirtual #329                // Method akka/stream/IOResult$.apply:(JLscala/util/Try;)Lakka/stream/IOResult;
      77: invokeinterface #348,  2          // InterfaceMethod scala/concurrent/Promise.trySuccess:(Ljava/lang/Object;)Z
      82: pop
      83: return
    Exception table:
       from    to  target type
           4    24    24   Class java/lang/Exception

  public akka.stream.impl.io.InputStreamPublisher(java.io.InputStream, scala.concurrent.Promise<akka.stream.IOResult>, int);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #263                // Field is:Ljava/io/InputStream;
       5: aload_0
       6: aload_2
       7: putfield      #316                // Field completionPromise:Lscala/concurrent/Promise;
      10: aload_0
      11: invokespecial #351                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #354                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      18: aload_0
      19: invokestatic  #356                // Method akka/stream/actor/ActorPublisher$class.$init$:(Lakka/stream/actor/ActorPublisher;)V
      22: aload_0
      23: invokestatic  #359                // Method akka/actor/ActorLogging$class.$init$:(Lakka/actor/ActorLogging;)V
      26: aload_0
      27: getstatic     #364                // Field scala/Array$.MODULE$:Lscala/Array$;
      30: iload_3
      31: getstatic     #369                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
      34: invokevirtual #373                // Method scala/reflect/ClassTag$.Byte:()Lscala/reflect/ClassTag;
      37: invokevirtual #377                // Method scala/Array$.ofDim:(ILscala/reflect/ClassTag;)Ljava/lang/Object;
      40: checkcast     #378                // class "[B"
      43: putfield      #221                // Field arr:[B
      46: aload_0
      47: lconst_0
      48: putfield      #223                // Field readBytesTotal:J
      51: return
}
