Compiled from "ActorRefSourceActor.scala"
public class akka.stream.impl.ActorRefSourceActor implements akka.stream.actor.ActorPublisher<java.lang.Object>, akka.actor.ActorLogging {
  public final int akka$stream$impl$ActorRefSourceActor$$bufferSize;

  public final akka.stream.OverflowStrategy akka$stream$impl$ActorRefSourceActor$$overflowStrategy;

  private final akka.stream.impl.Buffer<java.lang.Object> buffer;

  private akka.event.LoggingAdapter akka$actor$ActorLogging$$_log;

  private final akka.stream.actor.ActorPublisherState akka$stream$actor$ActorPublisher$$state;

  private org.reactivestreams.Subscriber<java.lang.Object> akka$stream$actor$ActorPublisher$$subscriber;

  private long akka$stream$actor$ActorPublisher$$demand;

  private akka.stream.actor.ActorPublisher$Internal$LifecycleState akka$stream$actor$ActorPublisher$$lifecycleState;

  private akka.actor.Cancellable akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public static akka.actor.Props props(int, akka.stream.OverflowStrategy, akka.stream.ActorMaterializerSettings);
    Code:
       0: getstatic     #21                 // Field akka/stream/impl/ActorRefSourceActor$.MODULE$:Lakka/stream/impl/ActorRefSourceActor$;
       3: iload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #23                 // Method akka/stream/impl/ActorRefSourceActor$.props:(ILakka/stream/OverflowStrategy;Lakka/stream/ActorMaterializerSettings;)Lakka/actor/Props;
       9: areturn

  public akka.event.LoggingAdapter akka$actor$ActorLogging$$_log();
    Code:
       0: aload_0
       1: getfield      #50                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$actor$ActorLogging$$_log_$eq(akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #50                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       5: return

  public akka.event.LoggingAdapter log();
    Code:
       0: aload_0
       1: invokestatic  #61                 // Method akka/actor/ActorLogging$class.log:(Lakka/actor/ActorLogging;)Lakka/event/LoggingAdapter;
       4: areturn

  public akka.stream.actor.ActorPublisherState akka$stream$actor$ActorPublisher$$state();
    Code:
       0: aload_0
       1: getfield      #64                 // Field akka$stream$actor$ActorPublisher$$state:Lakka/stream/actor/ActorPublisherState;
       4: areturn

  public org.reactivestreams.Subscriber<java.lang.Object> akka$stream$actor$ActorPublisher$$subscriber();
    Code:
       0: aload_0
       1: getfield      #67                 // Field akka$stream$actor$ActorPublisher$$subscriber:Lorg/reactivestreams/Subscriber;
       4: areturn

  public void akka$stream$actor$ActorPublisher$$subscriber_$eq(org.reactivestreams.Subscriber<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #67                 // Field akka$stream$actor$ActorPublisher$$subscriber:Lorg/reactivestreams/Subscriber;
       5: return

  public long akka$stream$actor$ActorPublisher$$demand();
    Code:
       0: aload_0
       1: getfield      #73                 // Field akka$stream$actor$ActorPublisher$$demand:J
       4: lreturn

  public void akka$stream$actor$ActorPublisher$$demand_$eq(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #73                 // Field akka$stream$actor$ActorPublisher$$demand:J
       5: return

  public akka.stream.actor.ActorPublisher$Internal$LifecycleState akka$stream$actor$ActorPublisher$$lifecycleState();
    Code:
       0: aload_0
       1: getfield      #78                 // Field akka$stream$actor$ActorPublisher$$lifecycleState:Lakka/stream/actor/ActorPublisher$Internal$LifecycleState;
       4: areturn

  public void akka$stream$actor$ActorPublisher$$lifecycleState_$eq(akka.stream.actor.ActorPublisher$Internal$LifecycleState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #78                 // Field akka$stream$actor$ActorPublisher$$lifecycleState:Lakka/stream/actor/ActorPublisher$Internal$LifecycleState;
       5: return

  public akka.actor.Cancellable akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout();
    Code:
       0: aload_0
       1: getfield      #83                 // Field akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout:Lakka/actor/Cancellable;
       4: areturn

  public void akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout_$eq(akka.actor.Cancellable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #83                 // Field akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout:Lakka/actor/Cancellable;
       5: return

  public void akka$stream$actor$ActorPublisher$$super$aroundReceive(scala.PartialFunction, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #93                 // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void akka$stream$actor$ActorPublisher$$super$aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #103                // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void akka$stream$actor$ActorPublisher$$super$aroundPreRestart(java.lang.Throwable, scala.Option);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #109                // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void akka$stream$actor$ActorPublisher$$super$aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #119                // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void akka$stream$actor$ActorPublisher$$super$aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #123                // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void akka$stream$actor$ActorPublisher$_setter_$akka$stream$actor$ActorPublisher$$state_$eq(akka.stream.actor.ActorPublisherState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #64                 // Field akka$stream$actor$ActorPublisher$$state:Lakka/stream/actor/ActorPublisherState;
       5: return

  public scala.concurrent.duration.Duration subscriptionTimeout();
    Code:
       0: aload_0
       1: invokestatic  #132                // Method akka/stream/actor/ActorPublisher$class.subscriptionTimeout:(Lakka/stream/actor/ActorPublisher;)Lscala/concurrent/duration/Duration;
       4: areturn

  public final boolean isActive();
    Code:
       0: aload_0
       1: invokestatic  #137                // Method akka/stream/actor/ActorPublisher$class.isActive:(Lakka/stream/actor/ActorPublisher;)Z
       4: ireturn

  public final long totalDemand();
    Code:
       0: aload_0
       1: invokestatic  #141                // Method akka/stream/actor/ActorPublisher$class.totalDemand:(Lakka/stream/actor/ActorPublisher;)J
       4: lreturn

  public final boolean isCompleted();
    Code:
       0: aload_0
       1: invokestatic  #144                // Method akka/stream/actor/ActorPublisher$class.isCompleted:(Lakka/stream/actor/ActorPublisher;)Z
       4: ireturn

  public final boolean isErrorEmitted();
    Code:
       0: aload_0
       1: invokestatic  #147                // Method akka/stream/actor/ActorPublisher$class.isErrorEmitted:(Lakka/stream/actor/ActorPublisher;)Z
       4: ireturn

  public final boolean isCanceled();
    Code:
       0: aload_0
       1: invokestatic  #150                // Method akka/stream/actor/ActorPublisher$class.isCanceled:(Lakka/stream/actor/ActorPublisher;)Z
       4: ireturn

  public void onNext(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #155                // Method akka/stream/actor/ActorPublisher$class.onNext:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Object;)V
       5: return

  public void onComplete();
    Code:
       0: aload_0
       1: invokestatic  #160                // Method akka/stream/actor/ActorPublisher$class.onComplete:(Lakka/stream/actor/ActorPublisher;)V
       4: return

  public void onCompleteThenStop();
    Code:
       0: aload_0
       1: invokestatic  #163                // Method akka/stream/actor/ActorPublisher$class.onCompleteThenStop:(Lakka/stream/actor/ActorPublisher;)V
       4: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #167                // Method akka/stream/actor/ActorPublisher$class.onError:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Throwable;)V
       5: return

  public void onErrorThenStop(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #171                // Method akka/stream/actor/ActorPublisher$class.onErrorThenStop:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Throwable;)V
       5: return

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #174                // Method akka/stream/actor/ActorPublisher$class.aroundReceive:(Lakka/stream/actor/ActorPublisher;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #176                // Method akka/stream/actor/ActorPublisher$class.aroundPreStart:(Lakka/stream/actor/ActorPublisher;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #179                // Method akka/stream/actor/ActorPublisher$class.aroundPreRestart:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #181                // Method akka/stream/actor/ActorPublisher$class.aroundPostRestart:(Lakka/stream/actor/ActorPublisher;Ljava/lang/Throwable;)V
       5: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #183                // Method akka/stream/actor/ActorPublisher$class.aroundPostStop:(Lakka/stream/actor/ActorPublisher;)V
       4: return

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #186                // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #189                // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #186                // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #189                // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #197                // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokestatic  #202                // Method akka/actor/Actor$class.supervisorStrategy:(Lakka/actor/Actor;)Lakka/actor/SupervisorStrategy;
       4: areturn

  public void preStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #207                // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
       4: return

  public void postStop() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #210                // Method akka/actor/Actor$class.postStop:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #213                // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void postRestart(java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #216                // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #220                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public akka.stream.impl.Buffer<java.lang.Object> buffer();
    Code:
       0: aload_0
       1: getfield      #223                // Field buffer:Lakka/stream/impl/Buffer;
       4: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: new           #226                // class akka/stream/impl/ActorRefSourceActor$$anonfun$receive$1
       3: dup
       4: aload_0
       5: invokespecial #230                // Method akka/stream/impl/ActorRefSourceActor$$anonfun$receive$1."<init>":(Lakka/stream/impl/ActorRefSourceActor;)V
       8: aload_0
       9: invokevirtual #233                // Method requestElem:()Lscala/PartialFunction;
      12: invokeinterface #239,  2          // InterfaceMethod scala/PartialFunction.orElse:(Lscala/PartialFunction;)Lscala/PartialFunction;
      17: aload_0
      18: invokevirtual #242                // Method receiveElem:()Lscala/PartialFunction;
      21: invokeinterface #239,  2          // InterfaceMethod scala/PartialFunction.orElse:(Lscala/PartialFunction;)Lscala/PartialFunction;
      26: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> requestElem();
    Code:
       0: new           #244                // class akka/stream/impl/ActorRefSourceActor$$anonfun$requestElem$1
       3: dup
       4: aload_0
       5: invokespecial #245                // Method akka/stream/impl/ActorRefSourceActor$$anonfun$requestElem$1."<init>":(Lakka/stream/impl/ActorRefSourceActor;)V
       8: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receiveElem();
    Code:
       0: new           #247                // class akka/stream/impl/ActorRefSourceActor$$anonfun$receiveElem$1
       3: dup
       4: aload_0
       5: invokespecial #248                // Method akka/stream/impl/ActorRefSourceActor$$anonfun$receiveElem$1."<init>":(Lakka/stream/impl/ActorRefSourceActor;)V
       8: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> drainBufferThenComplete();
    Code:
       0: new           #251                // class akka/stream/impl/ActorRefSourceActor$$anonfun$drainBufferThenComplete$1
       3: dup
       4: aload_0
       5: invokespecial #252                // Method akka/stream/impl/ActorRefSourceActor$$anonfun$drainBufferThenComplete$1."<init>":(Lakka/stream/impl/ActorRefSourceActor;)V
       8: areturn

  public akka.stream.impl.ActorRefSourceActor(int, akka.stream.OverflowStrategy, int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #255                // Field akka$stream$impl$ActorRefSourceActor$$bufferSize:I
       5: aload_0
       6: aload_2
       7: putfield      #257                // Field akka$stream$impl$ActorRefSourceActor$$overflowStrategy:Lakka/stream/OverflowStrategy;
      10: aload_0
      11: invokespecial #259                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #262                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      18: aload_0
      19: invokestatic  #264                // Method akka/stream/actor/ActorPublisher$class.$init$:(Lakka/stream/actor/ActorPublisher;)V
      22: aload_0
      23: invokestatic  #267                // Method akka/actor/ActorLogging$class.$init$:(Lakka/actor/ActorLogging;)V
      26: aload_0
      27: iload_1
      28: iconst_0
      29: if_icmpne     36
      32: aconst_null
      33: goto          44
      36: getstatic     #272                // Field akka/stream/impl/Buffer$.MODULE$:Lakka/stream/impl/Buffer$;
      39: iload_1
      40: iload_3
      41: invokevirtual #276                // Method akka/stream/impl/Buffer$.apply:(II)Lakka/stream/impl/Buffer;
      44: putfield      #223                // Field buffer:Lakka/stream/impl/Buffer;
      47: return
}
