Compiled from "FanOut.scala"
public abstract class akka.stream.impl.FanOut implements akka.actor.Actor,akka.actor.ActorLogging,akka.stream.impl.Pump {
  private final akka.stream.ActorMaterializerSettings settings;

  private final int outputCount;

  private final akka.stream.impl.FanOut$OutputBunch outputBunch;

  private final akka.stream.impl.Inputs primaryInputs;

  private akka.stream.impl.TransferState akka$stream$impl$Pump$$transferState;

  private scala.Function0<scala.runtime.BoxedUnit> akka$stream$impl$Pump$$currentAction;

  private final akka.stream.impl.TransferPhase completedPhase;

  private akka.event.LoggingAdapter akka$actor$ActorLogging$$_log;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public akka.stream.impl.TransferState akka$stream$impl$Pump$$transferState();
    Code:
       0: aload_0
       1: getfield      #38                 // Field akka$stream$impl$Pump$$transferState:Lakka/stream/impl/TransferState;
       4: areturn

  public void akka$stream$impl$Pump$$transferState_$eq(akka.stream.impl.TransferState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #38                 // Field akka$stream$impl$Pump$$transferState:Lakka/stream/impl/TransferState;
       5: return

  public scala.Function0<scala.runtime.BoxedUnit> akka$stream$impl$Pump$$currentAction();
    Code:
       0: aload_0
       1: getfield      #46                 // Field akka$stream$impl$Pump$$currentAction:Lscala/Function0;
       4: areturn

  public void akka$stream$impl$Pump$$currentAction_$eq(scala.Function0<scala.runtime.BoxedUnit>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #46                 // Field akka$stream$impl$Pump$$currentAction:Lscala/Function0;
       5: return

  public final akka.stream.impl.TransferPhase completedPhase();
    Code:
       0: aload_0
       1: getfield      #51                 // Field completedPhase:Lakka/stream/impl/TransferPhase;
       4: areturn

  public final void akka$stream$impl$Pump$_setter_$completedPhase_$eq(akka.stream.impl.TransferPhase);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #51                 // Field completedPhase:Lakka/stream/impl/TransferPhase;
       5: return

  public final void initialPhase(int, akka.stream.impl.TransferPhase);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #60                 // Method akka/stream/impl/Pump$class.initialPhase:(Lakka/stream/impl/Pump;ILakka/stream/impl/TransferPhase;)V
       6: return

  public final void waitForUpstreams(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #67                 // Method akka/stream/impl/Pump$class.waitForUpstreams:(Lakka/stream/impl/Pump;I)V
       5: return

  public void gotUpstreamSubscription();
    Code:
       0: aload_0
       1: invokestatic  #72                 // Method akka/stream/impl/Pump$class.gotUpstreamSubscription:(Lakka/stream/impl/Pump;)V
       4: return

  public final void nextPhase(akka.stream.impl.TransferPhase);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #76                 // Method akka/stream/impl/Pump$class.nextPhase:(Lakka/stream/impl/Pump;Lakka/stream/impl/TransferPhase;)V
       5: return

  public final boolean isPumpFinished();
    Code:
       0: aload_0
       1: invokestatic  #82                 // Method akka/stream/impl/Pump$class.isPumpFinished:(Lakka/stream/impl/Pump;)Z
       4: ireturn

  public final void pump();
    Code:
       0: aload_0
       1: invokestatic  #85                 // Method akka/stream/impl/Pump$class.pump:(Lakka/stream/impl/Pump;)V
       4: return

  public akka.event.LoggingAdapter akka$actor$ActorLogging$$_log();
    Code:
       0: aload_0
       1: getfield      #88                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$actor$ActorLogging$$_log_$eq(akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #88                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       5: return

  public akka.event.LoggingAdapter log();
    Code:
       0: aload_0
       1: invokestatic  #96                 // Method akka/actor/ActorLogging$class.log:(Lakka/actor/ActorLogging;)Lakka/event/LoggingAdapter;
       4: areturn

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #99                 // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #102                // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #99                 // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #102                // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #112                // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #117                // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #125                // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #128                // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #133                // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #142                // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokestatic  #147                // Method akka/actor/Actor$class.supervisorStrategy:(Lakka/actor/Actor;)Lakka/actor/SupervisorStrategy;
       4: areturn

  public void preStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #152                // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #155                // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #160                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public akka.stream.ActorMaterializerSettings settings();
    Code:
       0: aload_0
       1: getfield      #163                // Field settings:Lakka/stream/ActorMaterializerSettings;
       4: areturn

  public int outputCount();
    Code:
       0: aload_0
       1: getfield      #166                // Field outputCount:I
       4: ireturn

  public akka.stream.impl.FanOut$OutputBunch outputBunch();
    Code:
       0: aload_0
       1: getfield      #169                // Field outputBunch:Lakka/stream/impl/FanOut$OutputBunch;
       4: areturn

  public akka.stream.impl.Inputs primaryInputs();
    Code:
       0: aload_0
       1: getfield      #172                // Field primaryInputs:Lakka/stream/impl/Inputs;
       4: areturn

  public void pumpFinished();
    Code:
       0: aload_0
       1: invokevirtual #175                // Method primaryInputs:()Lakka/stream/impl/Inputs;
       4: invokeinterface #180,  1          // InterfaceMethod akka/stream/impl/Inputs.cancel:()V
       9: aload_0
      10: invokevirtual #182                // Method outputBunch:()Lakka/stream/impl/FanOut$OutputBunch;
      13: invokevirtual #187                // Method akka/stream/impl/FanOut$OutputBunch.complete:()V
      16: aload_0
      17: invokevirtual #189                // Method context:()Lakka/actor/ActorContext;
      20: aload_0
      21: invokevirtual #191                // Method self:()Lakka/actor/ActorRef;
      24: invokeinterface #196,  2          // InterfaceMethod akka/actor/ActorContext.stop:(Lakka/actor/ActorRef;)V
      29: return

  public void pumpFailed(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #200                // Method fail:(Ljava/lang/Throwable;)V
       5: return

  public void fail(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #203                // Method settings:()Lakka/stream/ActorMaterializerSettings;
       4: invokevirtual #208                // Method akka/stream/ActorMaterializerSettings.debugLogging:()Z
       7: ifeq          25
      10: aload_0
      11: invokevirtual #210                // Method log:()Lakka/event/LoggingAdapter;
      14: ldc           #212                // String fail due to: {}
      16: aload_1
      17: invokevirtual #218                // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      20: invokeinterface #224,  3          // InterfaceMethod akka/event/LoggingAdapter.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      25: aload_0
      26: invokevirtual #175                // Method primaryInputs:()Lakka/stream/impl/Inputs;
      29: invokeinterface #180,  1          // InterfaceMethod akka/stream/impl/Inputs.cancel:()V
      34: aload_0
      35: invokevirtual #182                // Method outputBunch:()Lakka/stream/impl/FanOut$OutputBunch;
      38: aload_1
      39: invokevirtual #226                // Method akka/stream/impl/FanOut$OutputBunch.cancel:(Ljava/lang/Throwable;)V
      42: aload_0
      43: invokevirtual #228                // Method pump:()V
      46: return

  public void postStop();
    Code:
       0: aload_0
       1: invokevirtual #175                // Method primaryInputs:()Lakka/stream/impl/Inputs;
       4: invokeinterface #180,  1          // InterfaceMethod akka/stream/impl/Inputs.cancel:()V
       9: aload_0
      10: invokevirtual #182                // Method outputBunch:()Lakka/stream/impl/FanOut$OutputBunch;
      13: new           #231                // class akka/stream/AbruptTerminationException
      16: dup
      17: aload_0
      18: invokevirtual #191                // Method self:()Lakka/actor/ActorRef;
      21: invokespecial #234                // Method akka/stream/AbruptTerminationException."<init>":(Lakka/actor/ActorRef;)V
      24: invokevirtual #226                // Method akka/stream/impl/FanOut$OutputBunch.cancel:(Ljava/lang/Throwable;)V
      27: return

  public void postRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #237                // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: new           #239                // class java/lang/IllegalStateException
       8: dup
       9: ldc           #241                // String This actor cannot be restarted
      11: invokespecial #244                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      14: athrow

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: aload_0
       1: invokevirtual #175                // Method primaryInputs:()Lakka/stream/impl/Inputs;
       4: invokeinterface #249,  1          // InterfaceMethod akka/stream/impl/Inputs.subreceive:()Lakka/stream/impl/SubReceive;
       9: aload_0
      10: invokevirtual #182                // Method outputBunch:()Lakka/stream/impl/FanOut$OutputBunch;
      13: invokevirtual #250                // Method akka/stream/impl/FanOut$OutputBunch.subreceive:()Lakka/stream/impl/SubReceive;
      16: invokevirtual #256                // Method akka/stream/impl/SubReceive.orElse:(Lscala/PartialFunction;)Lscala/PartialFunction;
      19: areturn

  public akka.stream.impl.FanOut(akka.stream.ActorMaterializerSettings, int);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #163                // Field settings:Lakka/stream/ActorMaterializerSettings;
       5: aload_0
       6: iload_2
       7: putfield      #166                // Field outputCount:I
      10: aload_0
      11: invokespecial #259                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #262                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      18: aload_0
      19: invokestatic  #265                // Method akka/actor/ActorLogging$class.$init$:(Lakka/actor/ActorLogging;)V
      22: aload_0
      23: invokestatic  #267                // Method akka/stream/impl/Pump$class.$init$:(Lakka/stream/impl/Pump;)V
      26: aload_0
      27: new           #184                // class akka/stream/impl/FanOut$OutputBunch
      30: dup
      31: iload_2
      32: aload_0
      33: invokevirtual #191                // Method self:()Lakka/actor/ActorRef;
      36: aload_0
      37: invokespecial #270                // Method akka/stream/impl/FanOut$OutputBunch."<init>":(ILakka/actor/ActorRef;Lakka/stream/impl/Pump;)V
      40: putfield      #169                // Field outputBunch:Lakka/stream/impl/FanOut$OutputBunch;
      43: aload_0
      44: new           #272                // class akka/stream/impl/FanOut$$anon$1
      47: dup
      48: aload_0
      49: invokespecial #275                // Method akka/stream/impl/FanOut$$anon$1."<init>":(Lakka/stream/impl/FanOut;)V
      52: putfield      #172                // Field primaryInputs:Lakka/stream/impl/Inputs;
      55: return
}
