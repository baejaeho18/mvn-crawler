Compiled from "ActorMaterializerImpl.scala"
public class akka.stream.impl.ActorMaterializerImpl extends akka.stream.impl.ExtendedActorMaterializer implements scala.Product,scala.Serializable {
  private final akka.actor.ActorSystem system;

  private final akka.stream.ActorMaterializerSettings settings;

  private final akka.dispatch.Dispatchers dispatchers;

  private final akka.actor.ActorRef supervisor;

  private final java.util.concurrent.atomic.AtomicBoolean haveShutDown;

  private final akka.stream.impl.SeqActorName flowNames;

  private final akka.event.LoggingAdapter _logger;

  private final akka.stream.Attributes akka$stream$impl$ActorMaterializerImpl$$initialAttributes;

  private scala.concurrent.ExecutionContextExecutor executionContext;

  private volatile boolean bitmap$0;

  public static scala.Option<scala.Tuple6<akka.actor.ActorSystem, akka.stream.ActorMaterializerSettings, akka.dispatch.Dispatchers, akka.actor.ActorRef, java.util.concurrent.atomic.AtomicBoolean, akka.stream.impl.SeqActorName>> unapply(akka.stream.impl.ActorMaterializerImpl);
    Code:
       0: getstatic     #20                 // Field akka/stream/impl/ActorMaterializerImpl$.MODULE$:Lakka/stream/impl/ActorMaterializerImpl$;
       3: aload_0
       4: invokevirtual #22                 // Method akka/stream/impl/ActorMaterializerImpl$.unapply:(Lakka/stream/impl/ActorMaterializerImpl;)Lscala/Option;
       7: areturn

  public static akka.stream.impl.ActorMaterializerImpl apply(akka.actor.ActorSystem, akka.stream.ActorMaterializerSettings, akka.dispatch.Dispatchers, akka.actor.ActorRef, java.util.concurrent.atomic.AtomicBoolean, akka.stream.impl.SeqActorName);
    Code:
       0: getstatic     #20                 // Field akka/stream/impl/ActorMaterializerImpl$.MODULE$:Lakka/stream/impl/ActorMaterializerImpl$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: invokevirtual #26                 // Method akka/stream/impl/ActorMaterializerImpl$.apply:(Lakka/actor/ActorSystem;Lakka/stream/ActorMaterializerSettings;Lakka/dispatch/Dispatchers;Lakka/actor/ActorRef;Ljava/util/concurrent/atomic/AtomicBoolean;Lakka/stream/impl/SeqActorName;)Lakka/stream/impl/ActorMaterializerImpl;
      14: areturn

  public static scala.Function1<scala.Tuple6<akka.actor.ActorSystem, akka.stream.ActorMaterializerSettings, akka.dispatch.Dispatchers, akka.actor.ActorRef, java.util.concurrent.atomic.AtomicBoolean, akka.stream.impl.SeqActorName>, akka.stream.impl.ActorMaterializerImpl> tupled();
    Code:
       0: getstatic     #20                 // Field akka/stream/impl/ActorMaterializerImpl$.MODULE$:Lakka/stream/impl/ActorMaterializerImpl$;
       3: invokevirtual #30                 // Method akka/stream/impl/ActorMaterializerImpl$.tupled:()Lscala/Function1;
       6: areturn

  public static scala.Function1<akka.actor.ActorSystem, scala.Function1<akka.stream.ActorMaterializerSettings, scala.Function1<akka.dispatch.Dispatchers, scala.Function1<akka.actor.ActorRef, scala.Function1<java.util.concurrent.atomic.AtomicBoolean, scala.Function1<akka.stream.impl.SeqActorName, akka.stream.impl.ActorMaterializerImpl>>>>>> curried();
    Code:
       0: getstatic     #20                 // Field akka/stream/impl/ActorMaterializerImpl$.MODULE$:Lakka/stream/impl/ActorMaterializerImpl$;
       3: invokevirtual #33                 // Method akka/stream/impl/ActorMaterializerImpl$.curried:()Lscala/Function1;
       6: areturn

  private scala.concurrent.ExecutionContextExecutor executionContext$lzycompute();
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #57                 // Field bitmap$0:Z
       8: ifne          53
      11: aload_0
      12: aload_0
      13: invokevirtual #60                 // Method dispatchers:()Lakka/dispatch/Dispatchers;
      16: aload_0
      17: invokevirtual #63                 // Method settings:()Lakka/stream/ActorMaterializerSettings;
      20: invokevirtual #69                 // Method akka/stream/ActorMaterializerSettings.dispatcher:()Ljava/lang/String;
      23: astore_2
      24: ldc           #71                 // String
      26: aload_2
      27: invokevirtual #77                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      30: ifeq          39
      33: ldc           #79                 // String akka.actor.default-dispatcher
      35: astore_3
      36: goto          41
      39: aload_2
      40: astore_3
      41: aload_3
      42: invokevirtual #85                 // Method akka/dispatch/Dispatchers.lookup:(Ljava/lang/String;)Lakka/dispatch/MessageDispatcher;
      45: putfield      #87                 // Field executionContext:Lscala/concurrent/ExecutionContextExecutor;
      48: aload_0
      49: iconst_1
      50: putfield      #57                 // Field bitmap$0:Z
      53: getstatic     #93                 // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      56: pop
      57: aload_1
      58: monitorexit
      59: aload_0
      60: getfield      #87                 // Field executionContext:Lscala/concurrent/ExecutionContextExecutor;
      63: areturn
      64: aload_1
      65: monitorexit
      66: athrow
    Exception table:
       from    to  target type
           4    59    64   any

  public akka.actor.ActorSystem system();
    Code:
       0: aload_0
       1: getfield      #102                // Field system:Lakka/actor/ActorSystem;
       4: areturn

  public akka.stream.ActorMaterializerSettings settings();
    Code:
       0: aload_0
       1: getfield      #104                // Field settings:Lakka/stream/ActorMaterializerSettings;
       4: areturn

  public akka.dispatch.Dispatchers dispatchers();
    Code:
       0: aload_0
       1: getfield      #106                // Field dispatchers:Lakka/dispatch/Dispatchers;
       4: areturn

  public akka.actor.ActorRef supervisor();
    Code:
       0: aload_0
       1: getfield      #109                // Field supervisor:Lakka/actor/ActorRef;
       4: areturn

  public java.util.concurrent.atomic.AtomicBoolean haveShutDown();
    Code:
       0: aload_0
       1: getfield      #112                // Field haveShutDown:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: areturn

  public akka.stream.impl.SeqActorName flowNames();
    Code:
       0: aload_0
       1: getfield      #115                // Field flowNames:Lakka/stream/impl/SeqActorName;
       4: areturn

  private akka.event.LoggingAdapter _logger();
    Code:
       0: aload_0
       1: getfield      #118                // Field _logger:Lakka/event/LoggingAdapter;
       4: areturn

  public akka.event.LoggingAdapter logger();
    Code:
       0: aload_0
       1: invokespecial #121                // Method _logger:()Lakka/event/LoggingAdapter;
       4: areturn

  public void shutdown();
    Code:
       0: aload_0
       1: invokevirtual #125                // Method haveShutDown:()Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #131                // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          43
      12: getstatic     #136                // Field akka/actor/package$.MODULE$:Lakka/actor/package$;
      15: aload_0
      16: invokevirtual #138                // Method supervisor:()Lakka/actor/ActorRef;
      19: invokevirtual #142                // Method akka/actor/package$.actorRef2Scala:(Lakka/actor/ActorRef;)Lakka/actor/ScalaActorRef;
      22: astore_1
      23: getstatic     #147                // Field akka/actor/PoisonPill$.MODULE$:Lakka/actor/PoisonPill$;
      26: astore_2
      27: aload_1
      28: aload_2
      29: invokeinterface #153,  2          // InterfaceMethod akka/actor/ScalaActorRef.$bang$default$2:(Ljava/lang/Object;)Lakka/actor/ActorRef;
      34: astore_3
      35: aload_1
      36: aload_2
      37: aload_3
      38: invokeinterface #157,  3          // InterfaceMethod akka/actor/ScalaActorRef.$bang:(Ljava/lang/Object;Lakka/actor/ActorRef;)V
      43: return

  public boolean isShutdown();
    Code:
       0: aload_0
       1: invokevirtual #125                // Method haveShutDown:()Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #166                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  public akka.stream.impl.ActorMaterializerImpl withNamePrefix(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #170                // Method flowNames:()Lakka/stream/impl/SeqActorName;
       4: aload_1
       5: invokevirtual #176                // Method akka/stream/impl/SeqActorName.copy:(Ljava/lang/String;)Lakka/stream/impl/SeqActorName;
       8: astore_2
       9: aload_0
      10: invokevirtual #179                // Method copy$default$1:()Lakka/actor/ActorSystem;
      13: astore_3
      14: aload_0
      15: invokevirtual #182                // Method copy$default$2:()Lakka/stream/ActorMaterializerSettings;
      18: astore        4
      20: aload_0
      21: invokevirtual #185                // Method copy$default$3:()Lakka/dispatch/Dispatchers;
      24: astore        5
      26: aload_0
      27: invokevirtual #188                // Method copy$default$4:()Lakka/actor/ActorRef;
      30: astore        6
      32: aload_0
      33: invokevirtual #191                // Method copy$default$5:()Ljava/util/concurrent/atomic/AtomicBoolean;
      36: astore        7
      38: aload_0
      39: aload_3
      40: aload         4
      42: aload         5
      44: aload         6
      46: aload         7
      48: aload_2
      49: invokevirtual #193                // Method copy:(Lakka/actor/ActorSystem;Lakka/stream/ActorMaterializerSettings;Lakka/dispatch/Dispatchers;Lakka/actor/ActorRef;Ljava/util/concurrent/atomic/AtomicBoolean;Lakka/stream/impl/SeqActorName;)Lakka/stream/impl/ActorMaterializerImpl;
      52: areturn

  public java.lang.String akka$stream$impl$ActorMaterializerImpl$$createFlowName();
    Code:
       0: aload_0
       1: invokevirtual #170                // Method flowNames:()Lakka/stream/impl/SeqActorName;
       4: invokevirtual #205                // Method akka/stream/impl/SeqActorName.next:()Ljava/lang/String;
       7: areturn

  public akka.stream.Attributes akka$stream$impl$ActorMaterializerImpl$$initialAttributes();
    Code:
       0: aload_0
       1: getfield      #208                // Field akka$stream$impl$ActorMaterializerImpl$$initialAttributes:Lakka/stream/Attributes;
       4: areturn

  public akka.stream.ActorMaterializerSettings effectiveSettings(akka.stream.Attributes);
    Code:
       0: aload_1
       1: invokevirtual #216                // Method akka/stream/Attributes.attributeList:()Lscala/collection/immutable/List;
       4: aload_0
       5: invokevirtual #63                 // Method settings:()Lakka/stream/ActorMaterializerSettings;
       8: new           #218                // class akka/stream/impl/ActorMaterializerImpl$$anonfun$effectiveSettings$1
      11: dup
      12: aload_0
      13: invokespecial #222                // Method akka/stream/impl/ActorMaterializerImpl$$anonfun$effectiveSettings$1."<init>":(Lakka/stream/impl/ActorMaterializerImpl;)V
      16: invokevirtual #228                // Method scala/collection/immutable/List.foldLeft:(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
      19: checkcast     #65                 // class akka/stream/ActorMaterializerSettings
      22: areturn

  public akka.actor.Cancellable schedulePeriodically(scala.concurrent.duration.FiniteDuration, scala.concurrent.duration.FiniteDuration, java.lang.Runnable);
    Code:
       0: aload_0
       1: invokevirtual #233                // Method system:()Lakka/actor/ActorSystem;
       4: invokevirtual #239                // Method akka/actor/ActorSystem.scheduler:()Lakka/actor/Scheduler;
       7: aload_1
       8: aload_2
       9: aload_3
      10: aload_0
      11: invokevirtual #241                // Method executionContext:()Lscala/concurrent/ExecutionContextExecutor;
      14: invokeinterface #247,  5          // InterfaceMethod akka/actor/Scheduler.schedule:(Lscala/concurrent/duration/FiniteDuration;Lscala/concurrent/duration/FiniteDuration;Ljava/lang/Runnable;Lscala/concurrent/ExecutionContext;)Lakka/actor/Cancellable;
      19: areturn

  public akka.actor.Cancellable scheduleOnce(scala.concurrent.duration.FiniteDuration, java.lang.Runnable);
    Code:
       0: aload_0
       1: invokevirtual #233                // Method system:()Lakka/actor/ActorSystem;
       4: invokevirtual #239                // Method akka/actor/ActorSystem.scheduler:()Lakka/actor/Scheduler;
       7: aload_1
       8: aload_2
       9: aload_0
      10: invokevirtual #241                // Method executionContext:()Lscala/concurrent/ExecutionContextExecutor;
      13: invokeinterface #257,  4          // InterfaceMethod akka/actor/Scheduler.scheduleOnce:(Lscala/concurrent/duration/FiniteDuration;Ljava/lang/Runnable;Lscala/concurrent/ExecutionContext;)Lakka/actor/Cancellable;
      18: areturn

  public <Mat> Mat materialize(akka.stream.Graph<akka.stream.ClosedShape, Mat>);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #263                // Method materialize:(Lakka/stream/Graph;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <Mat> Mat materialize(akka.stream.Graph<akka.stream.ClosedShape, Mat>, scala.Function1<akka.stream.impl.fusing.GraphInterpreterShell, akka.actor.ActorRef>);
    Code:
       0: aload_0
       1: invokevirtual #63                 // Method settings:()Lakka/stream/ActorMaterializerSettings;
       4: invokevirtual #268                // Method akka/stream/ActorMaterializerSettings.autoFusing:()Z
       7: ifeq          20
      10: getstatic     #273                // Field akka/stream/impl/fusing/Fusing$.MODULE$:Lakka/stream/impl/fusing/Fusing$;
      13: aload_1
      14: invokevirtual #277                // Method akka/stream/impl/fusing/Fusing$.aggressive:(Lakka/stream/Graph;)Lakka/stream/Fusing$FusedGraph;
      17: goto          21
      20: aload_1
      21: astore_3
      22: aload_0
      23: invokevirtual #125                // Method haveShutDown:()Ljava/util/concurrent/atomic/AtomicBoolean;
      26: invokevirtual #166                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      29: ifeq          43
      32: new           #279                // class java/lang/IllegalStateException
      35: dup
      36: ldc_w         #281                // String Attempted to call materialize() after the ActorMaterializer has been shut down.
      39: invokespecial #284                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: new           #286                // class akka/stream/impl/ActorMaterializerImpl$$anon$2
      46: dup
      47: aload_0
      48: aload_2
      49: aload_3
      50: invokespecial #289                // Method akka/stream/impl/ActorMaterializerImpl$$anon$2."<init>":(Lakka/stream/impl/ActorMaterializerImpl;Lscala/Function1;Lakka/stream/Graph;)V
      53: astore        4
      55: aload         4
      57: invokevirtual #294                // Method akka/stream/impl/MaterializerSession.materialize:()Ljava/lang/Object;
      60: areturn

  public scala.concurrent.ExecutionContextExecutor executionContext();
    Code:
       0: aload_0
       1: getfield      #57                 // Field bitmap$0:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #87                 // Field executionContext:Lscala/concurrent/ExecutionContextExecutor;
      11: goto          18
      14: aload_0
      15: invokespecial #303                // Method executionContext$lzycompute:()Lscala/concurrent/ExecutionContextExecutor;
      18: areturn

  public akka.stream.impl.ActorMaterializerImpl copy(akka.actor.ActorSystem, akka.stream.ActorMaterializerSettings, akka.dispatch.Dispatchers, akka.actor.ActorRef, java.util.concurrent.atomic.AtomicBoolean, akka.stream.impl.SeqActorName);
    Code:
       0: new           #2                  // class akka/stream/impl/ActorMaterializerImpl
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: aload         6
      13: invokespecial #308                // Method "<init>":(Lakka/actor/ActorSystem;Lakka/stream/ActorMaterializerSettings;Lakka/dispatch/Dispatchers;Lakka/actor/ActorRef;Ljava/util/concurrent/atomic/AtomicBoolean;Lakka/stream/impl/SeqActorName;)V
      16: areturn

  public akka.actor.ActorSystem copy$default$1();
    Code:
       0: aload_0
       1: invokevirtual #233                // Method system:()Lakka/actor/ActorSystem;
       4: areturn

  public akka.stream.ActorMaterializerSettings copy$default$2();
    Code:
       0: aload_0
       1: invokevirtual #63                 // Method settings:()Lakka/stream/ActorMaterializerSettings;
       4: areturn

  public akka.dispatch.Dispatchers copy$default$3();
    Code:
       0: aload_0
       1: invokevirtual #60                 // Method dispatchers:()Lakka/dispatch/Dispatchers;
       4: areturn

  public akka.actor.ActorRef copy$default$4();
    Code:
       0: aload_0
       1: invokevirtual #138                // Method supervisor:()Lakka/actor/ActorRef;
       4: areturn

  public java.util.concurrent.atomic.AtomicBoolean copy$default$5();
    Code:
       0: aload_0
       1: invokevirtual #125                // Method haveShutDown:()Ljava/util/concurrent/atomic/AtomicBoolean;
       4: areturn

  public akka.stream.impl.SeqActorName copy$default$6();
    Code:
       0: aload_0
       1: invokevirtual #170                // Method flowNames:()Lakka/stream/impl/SeqActorName;
       4: areturn

  public java.lang.String productPrefix();
    Code:
       0: ldc_w         #312                // String ActorMaterializerImpl
       3: areturn

  public int productArity();
    Code:
       0: bipush        6
       2: ireturn

  public java.lang.Object productElement(int);
    Code:
       0: iload_1
       1: istore_2
       2: iload_2
       3: tableswitch   { // 0 to 5
                     0: 90
                     1: 83
                     2: 76
                     3: 69
                     4: 62
                     5: 55
               default: 40
          }
      40: new           #318                // class java/lang/IndexOutOfBoundsException
      43: dup
      44: iload_1
      45: invokestatic  #324                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      48: invokevirtual #327                // Method java/lang/Object.toString:()Ljava/lang/String;
      51: invokespecial #328                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      54: athrow
      55: aload_0
      56: invokevirtual #170                // Method flowNames:()Lakka/stream/impl/SeqActorName;
      59: goto          94
      62: aload_0
      63: invokevirtual #125                // Method haveShutDown:()Ljava/util/concurrent/atomic/AtomicBoolean;
      66: goto          94
      69: aload_0
      70: invokevirtual #138                // Method supervisor:()Lakka/actor/ActorRef;
      73: goto          94
      76: aload_0
      77: invokevirtual #60                 // Method dispatchers:()Lakka/dispatch/Dispatchers;
      80: goto          94
      83: aload_0
      84: invokevirtual #63                 // Method settings:()Lakka/stream/ActorMaterializerSettings;
      87: goto          94
      90: aload_0
      91: invokevirtual #233                // Method system:()Lakka/actor/ActorSystem;
      94: areturn

  public scala.collection.Iterator<java.lang.Object> productIterator();
    Code:
       0: getstatic     #337                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #341                // Method scala/runtime/ScalaRunTime$.typedProductIterator:(Lscala/Product;)Lscala/collection/Iterator;
       7: areturn

  public boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class akka/stream/impl/ActorMaterializerImpl
       4: ireturn

  public int hashCode();
    Code:
       0: getstatic     #337                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #348                // Method scala/runtime/ScalaRunTime$._hashCode:(Lscala/Product;)I
       7: ireturn

  public java.lang.String toString();
    Code:
       0: getstatic     #337                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #352                // Method scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
       7: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     240
       5: aload_1
       6: astore_2
       7: aload_2
       8: instanceof    #2                  // class akka/stream/impl/ActorMaterializerImpl
      11: ifeq          19
      14: iconst_1
      15: istore_3
      16: goto          21
      19: iconst_0
      20: istore_3
      21: iload_3
      22: ifeq          244
      25: aload_1
      26: checkcast     #2                  // class akka/stream/impl/ActorMaterializerImpl
      29: astore        4
      31: aload_0
      32: invokevirtual #233                // Method system:()Lakka/actor/ActorSystem;
      35: aload         4
      37: invokevirtual #233                // Method system:()Lakka/actor/ActorSystem;
      40: astore        5
      42: dup
      43: ifnonnull     55
      46: pop
      47: aload         5
      49: ifnull        63
      52: goto          236
      55: aload         5
      57: invokevirtual #77                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      60: ifeq          236
      63: aload_0
      64: invokevirtual #63                 // Method settings:()Lakka/stream/ActorMaterializerSettings;
      67: aload         4
      69: invokevirtual #63                 // Method settings:()Lakka/stream/ActorMaterializerSettings;
      72: astore        6
      74: dup
      75: ifnonnull     87
      78: pop
      79: aload         6
      81: ifnull        95
      84: goto          236
      87: aload         6
      89: invokevirtual #77                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      92: ifeq          236
      95: aload_0
      96: invokevirtual #60                 // Method dispatchers:()Lakka/dispatch/Dispatchers;
      99: aload         4
     101: invokevirtual #60                 // Method dispatchers:()Lakka/dispatch/Dispatchers;
     104: astore        7
     106: dup
     107: ifnonnull     119
     110: pop
     111: aload         7
     113: ifnull        127
     116: goto          236
     119: aload         7
     121: invokevirtual #77                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     124: ifeq          236
     127: aload_0
     128: invokevirtual #138                // Method supervisor:()Lakka/actor/ActorRef;
     131: aload         4
     133: invokevirtual #138                // Method supervisor:()Lakka/actor/ActorRef;
     136: astore        8
     138: dup
     139: ifnonnull     151
     142: pop
     143: aload         8
     145: ifnull        159
     148: goto          236
     151: aload         8
     153: invokevirtual #77                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     156: ifeq          236
     159: aload_0
     160: invokevirtual #125                // Method haveShutDown:()Ljava/util/concurrent/atomic/AtomicBoolean;
     163: aload         4
     165: invokevirtual #125                // Method haveShutDown:()Ljava/util/concurrent/atomic/AtomicBoolean;
     168: astore        9
     170: dup
     171: ifnonnull     183
     174: pop
     175: aload         9
     177: ifnull        191
     180: goto          236
     183: aload         9
     185: invokevirtual #77                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     188: ifeq          236
     191: aload_0
     192: invokevirtual #170                // Method flowNames:()Lakka/stream/impl/SeqActorName;
     195: aload         4
     197: invokevirtual #170                // Method flowNames:()Lakka/stream/impl/SeqActorName;
     200: astore        10
     202: dup
     203: ifnonnull     215
     206: pop
     207: aload         10
     209: ifnull        223
     212: goto          236
     215: aload         10
     217: invokevirtual #77                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     220: ifeq          236
     223: aload         4
     225: aload_0
     226: invokevirtual #354                // Method canEqual:(Ljava/lang/Object;)Z
     229: ifeq          236
     232: iconst_1
     233: goto          237
     236: iconst_0
     237: ifeq          244
     240: iconst_1
     241: goto          245
     244: iconst_0
     245: ireturn

  public akka.stream.Materializer withNamePrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #359                // Method withNamePrefix:(Ljava/lang/String;)Lakka/stream/impl/ActorMaterializerImpl;
       5: areturn

  public akka.stream.impl.ExtendedActorMaterializer withNamePrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #359                // Method withNamePrefix:(Ljava/lang/String;)Lakka/stream/impl/ActorMaterializerImpl;
       5: areturn

  public akka.stream.impl.ActorMaterializerImpl(akka.actor.ActorSystem, akka.stream.ActorMaterializerSettings, akka.dispatch.Dispatchers, akka.actor.ActorRef, java.util.concurrent.atomic.AtomicBoolean, akka.stream.impl.SeqActorName);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #102                // Field system:Lakka/actor/ActorSystem;
       5: aload_0
       6: aload_2
       7: putfield      #104                // Field settings:Lakka/stream/ActorMaterializerSettings;
      10: aload_0
      11: aload_3
      12: putfield      #106                // Field dispatchers:Lakka/dispatch/Dispatchers;
      15: aload_0
      16: aload         4
      18: putfield      #109                // Field supervisor:Lakka/actor/ActorRef;
      21: aload_0
      22: aload         5
      24: putfield      #112                // Field haveShutDown:Ljava/util/concurrent/atomic/AtomicBoolean;
      27: aload_0
      28: aload         6
      30: putfield      #115                // Field flowNames:Lakka/stream/impl/SeqActorName;
      33: aload_0
      34: invokespecial #362                // Method akka/stream/impl/ExtendedActorMaterializer."<init>":()V
      37: aload_0
      38: invokestatic  #368                // Method scala/Product$class.$init$:(Lscala/Product;)V
      41: aload_0
      42: getstatic     #373                // Field akka/event/Logging$.MODULE$:Lakka/event/Logging$;
      45: aload_1
      46: aload_0
      47: invokevirtual #377                // Method akka/event/Logging$.getLogger:(Lakka/actor/ActorSystem;Ljava/lang/Object;)Lakka/event/LoggingAdapter;
      50: putfield      #118                // Field _logger:Lakka/event/LoggingAdapter;
      53: aload_2
      54: invokevirtual #380                // Method akka/stream/ActorMaterializerSettings.fuzzingMode:()Z
      57: ifeq          90
      60: aload_1
      61: invokevirtual #383                // Method akka/actor/ActorSystem.settings:()Lakka/actor/ActorSystem$Settings;
      64: invokevirtual #389                // Method akka/actor/ActorSystem$Settings.config:()Lcom/typesafe/config/Config;
      67: ldc_w         #391                // String akka.stream.secret-test-fuzzing-warning-disable
      70: invokeinterface #397,  2          // InterfaceMethod com/typesafe/config/Config.hasPath:(Ljava/lang/String;)Z
      75: ifne          90
      78: aload_0
      79: invokespecial #121                // Method _logger:()Lakka/event/LoggingAdapter;
      82: ldc_w         #399                // String Fuzzing mode is enabled on this system. If you see this warning on your production system then set akka.stream.materializer.debug.fuzzing-mode to off.
      85: invokeinterface #404,  2          // InterfaceMethod akka/event/LoggingAdapter.warning:(Ljava/lang/String;)V
      90: aload_0
      91: new           #212                // class akka/stream/Attributes
      94: dup
      95: new           #406                // class akka/stream/Attributes$InputBuffer
      98: dup
      99: aload_2
     100: invokevirtual #409                // Method akka/stream/ActorMaterializerSettings.initialInputBufferSize:()I
     103: aload_2
     104: invokevirtual #412                // Method akka/stream/ActorMaterializerSettings.maxInputBufferSize:()I
     107: invokespecial #415                // Method akka/stream/Attributes$InputBuffer."<init>":(II)V
     110: astore        7
     112: new           #417                // class akka/stream/ActorAttributes$Dispatcher
     115: dup
     116: aload_2
     117: invokevirtual #69                 // Method akka/stream/ActorMaterializerSettings.dispatcher:()Ljava/lang/String;
     120: invokespecial #418                // Method akka/stream/ActorAttributes$Dispatcher."<init>":(Ljava/lang/String;)V
     123: astore        8
     125: new           #420                // class akka/stream/ActorAttributes$SupervisionStrategy
     128: dup
     129: aload_2
     130: invokevirtual #423                // Method akka/stream/ActorMaterializerSettings.supervisionDecider:()Lscala/Function1;
     133: invokespecial #426                // Method akka/stream/ActorAttributes$SupervisionStrategy."<init>":(Lscala/Function1;)V
     136: astore        9
     138: getstatic     #431                // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
     141: aload         9
     143: invokevirtual #435                // Method scala/collection/immutable/Nil$.$colon$colon:(Ljava/lang/Object;)Lscala/collection/immutable/List;
     146: aload         8
     148: invokevirtual #436                // Method scala/collection/immutable/List.$colon$colon:(Ljava/lang/Object;)Lscala/collection/immutable/List;
     151: aload         7
     153: invokevirtual #436                // Method scala/collection/immutable/List.$colon$colon:(Ljava/lang/Object;)Lscala/collection/immutable/List;
     156: invokespecial #439                // Method akka/stream/Attributes."<init>":(Lscala/collection/immutable/List;)V
     159: putfield      #208                // Field akka$stream$impl$ActorMaterializerImpl$$initialAttributes:Lakka/stream/Attributes;
     162: return
}
