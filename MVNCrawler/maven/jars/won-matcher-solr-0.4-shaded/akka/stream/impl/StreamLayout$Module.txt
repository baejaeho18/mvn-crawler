Compiled from "StreamLayout.scala"
public interface akka.stream.impl.StreamLayout$Module {
  public abstract int akka$stream$impl$StreamLayout$Module$$super$hashCode();

  public abstract boolean akka$stream$impl$StreamLayout$Module$$super$equals(java.lang.Object);

  public abstract akka.stream.Shape shape();

  public abstract akka.stream.impl.StreamLayout$Module replaceShape(akka.stream.Shape);

  public abstract scala.collection.immutable.Set<akka.stream.InPort> inPorts();

  public abstract scala.collection.immutable.Set<akka.stream.OutPort> outPorts();

  public abstract boolean isRunnable();

  public abstract boolean isSink();

  public abstract boolean isSource();

  public abstract boolean isFlow();

  public abstract boolean isBidiFlow();

  public abstract boolean isAtomic();

  public abstract boolean isCopied();

  public abstract boolean isFused();

  public abstract akka.stream.impl.StreamLayout$Module fuse(akka.stream.impl.StreamLayout$Module, akka.stream.OutPort, akka.stream.InPort);

  public abstract <A, B, C> akka.stream.impl.StreamLayout$Module fuse(akka.stream.impl.StreamLayout$Module, akka.stream.OutPort, akka.stream.InPort, scala.Function2<A, B, C>);

  public abstract akka.stream.impl.StreamLayout$Module wire(akka.stream.OutPort, akka.stream.InPort);

  public abstract akka.stream.impl.StreamLayout$Module transformMaterializedValue(scala.Function1<java.lang.Object, java.lang.Object>);

  public abstract akka.stream.impl.StreamLayout$Module compose(akka.stream.impl.StreamLayout$Module);

  public abstract <A, B, C> akka.stream.impl.StreamLayout$Module compose(akka.stream.impl.StreamLayout$Module, scala.Function2<A, B, C>);

  public abstract akka.stream.impl.StreamLayout$Module composeNoMat(akka.stream.impl.StreamLayout$Module);

  public abstract scala.collection.immutable.Set<akka.stream.impl.StreamLayout$Module> subModules();

  public abstract boolean isSealed();

  public abstract scala.collection.immutable.Map<akka.stream.OutPort, akka.stream.InPort> downstreams();

  public abstract scala.collection.immutable.Map<akka.stream.InPort, akka.stream.OutPort> upstreams();

  public abstract akka.stream.impl.StreamLayout$MaterializedValueNode materializedValueComputation();

  public abstract akka.stream.impl.StreamLayout$Module carbonCopy();

  public abstract akka.stream.Attributes attributes();

  public abstract akka.stream.impl.StreamLayout$Module withAttributes(akka.stream.Attributes);

  public abstract int hashCode();

  public abstract boolean equals(java.lang.Object);
}
