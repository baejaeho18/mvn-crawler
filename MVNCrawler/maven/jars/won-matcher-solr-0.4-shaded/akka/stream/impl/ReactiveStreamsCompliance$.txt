Compiled from "ReactiveStreamsCompliance.scala"
public final class akka.stream.impl.ReactiveStreamsCompliance$ {
  public static final akka.stream.impl.ReactiveStreamsCompliance$ MODULE$;

  private final java.lang.String CanNotSubscribeTheSameSubscriberMultipleTimes;

  private final java.lang.String SupportsOnlyASingleSubscriber;

  private final java.lang.String NumberOfElementsInRequestMustBePositiveMsg;

  private final java.lang.String SubscriberMustNotBeNullMsg;

  private final java.lang.String ExceptionMustNotBeNullMsg;

  private final java.lang.String ElementMustNotBeNullMsg;

  private final java.lang.String SubscriptionMustNotBeNullMsg;

  public static {};
    Code:
       0: new           #2                  // class akka/stream/impl/ReactiveStreamsCompliance$
       3: invokespecial #12                 // Method "<init>":()V
       6: return

  public final java.lang.String CanNotSubscribeTheSameSubscriberMultipleTimes();
    Code:
       0: ldc           #23                 // String can not subscribe the same subscriber multiple times (see reactive-streams specification, rules 1.10 and 2.12)
       2: areturn

  public final java.lang.String SupportsOnlyASingleSubscriber();
    Code:
       0: ldc           #26                 // String only supports one subscriber (which is allowed, see reactive-streams specification, rule 1.12)
       2: areturn

  public final java.lang.String NumberOfElementsInRequestMustBePositiveMsg();
    Code:
       0: ldc           #28                 // String The number of requested elements must be > 0 (see reactive-streams specification, rule 3.9)
       2: areturn

  public final java.lang.String SubscriberMustNotBeNullMsg();
    Code:
       0: ldc           #30                 // String Subscriber must not be null, rule 1.9
       2: areturn

  public final java.lang.String ExceptionMustNotBeNullMsg();
    Code:
       0: ldc           #32                 // String Exception must not be null, rule 2.13
       2: areturn

  public final java.lang.String ElementMustNotBeNullMsg();
    Code:
       0: ldc           #34                 // String Element must not be null, rule 2.13
       2: areturn

  public final java.lang.String SubscriptionMustNotBeNullMsg();
    Code:
       0: ldc           #36                 // String Subscription must not be null, rule 2.13
       2: areturn

  public final java.lang.Throwable numberOfElementsInRequestMustBePositiveException();
    Code:
       0: new           #40                 // class java/lang/IllegalArgumentException
       3: dup
       4: ldc           #28                 // String The number of requested elements must be > 0 (see reactive-streams specification, rule 3.9)
       6: invokespecial #43                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
       9: areturn

  public final java.lang.Throwable canNotSubscribeTheSameSubscriberMultipleTimesException();
    Code:
       0: new           #46                 // class java/lang/IllegalStateException
       3: dup
       4: ldc           #23                 // String can not subscribe the same subscriber multiple times (see reactive-streams specification, rules 1.10 and 2.12)
       6: invokespecial #47                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: areturn

  public final java.lang.Throwable subscriberMustNotBeNullException();
    Code:
       0: new           #50                 // class java/lang/NullPointerException
       3: dup
       4: ldc           #30                 // String Subscriber must not be null, rule 1.9
       6: invokespecial #51                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
       9: areturn

  public final java.lang.Throwable exceptionMustNotBeNullException();
    Code:
       0: new           #50                 // class java/lang/NullPointerException
       3: dup
       4: ldc           #32                 // String Exception must not be null, rule 2.13
       6: invokespecial #51                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
       9: areturn

  public final java.lang.Throwable elementMustNotBeNullException();
    Code:
       0: new           #50                 // class java/lang/NullPointerException
       3: dup
       4: ldc           #34                 // String Element must not be null, rule 2.13
       6: invokespecial #51                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
       9: areturn

  public final java.lang.Throwable subscriptionMustNotBeNullException();
    Code:
       0: new           #50                 // class java/lang/NullPointerException
       3: dup
       4: ldc           #36                 // String Subscription must not be null, rule 2.13
       6: invokespecial #51                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
       9: areturn

  public final <T> void rejectDuplicateSubscriber(org.reactivestreams.Subscriber<T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: invokevirtual #58                 // Method canNotSubscribeTheSameSubscriberMultipleTimesException:()Ljava/lang/Throwable;
       6: invokevirtual #62                 // Method tryOnError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
       9: return

  public final <T> void rejectAdditionalSubscriber(org.reactivestreams.Subscriber<T>, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #71                 // Field akka/stream/impl/CancelledSubscription$.MODULE$:Lakka/stream/impl/CancelledSubscription$;
       5: invokevirtual #75                 // Method tryOnSubscribe:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Subscription;)V
       8: aload_0
       9: aload_1
      10: new           #46                 // class java/lang/IllegalStateException
      13: dup
      14: new           #77                 // class scala/StringContext
      17: dup
      18: getstatic     #82                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      21: iconst_3
      22: anewarray     #84                 // class java/lang/String
      25: dup
      26: iconst_0
      27: ldc           #86                 // String
      29: aastore
      30: dup
      31: iconst_1
      32: ldc           #88                 // String
      34: aastore
      35: dup
      36: iconst_2
      37: ldc           #86                 // String
      39: aastore
      40: checkcast     #90                 // class "[Ljava/lang/Object;"
      43: invokevirtual #94                 // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      46: invokespecial #97                 // Method scala/StringContext."<init>":(Lscala/collection/Seq;)V
      49: getstatic     #82                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      52: iconst_2
      53: anewarray     #4                  // class java/lang/Object
      56: dup
      57: iconst_0
      58: aload_2
      59: aastore
      60: dup
      61: iconst_1
      62: ldc           #26                 // String only supports one subscriber (which is allowed, see reactive-streams specification, rule 1.12)
      64: aastore
      65: invokevirtual #101                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      68: invokevirtual #105                // Method scala/StringContext.s:(Lscala/collection/Seq;)Ljava/lang/String;
      71: invokespecial #47                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      74: invokevirtual #62                 // Method tryOnError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      77: return

  public final <T> void rejectDueToNonPositiveDemand(org.reactivestreams.Subscriber<T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: invokevirtual #109                // Method numberOfElementsInRequestMustBePositiveException:()Ljava/lang/Throwable;
       6: invokevirtual #62                 // Method tryOnError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
       9: return

  public final <T> void requireNonNullSubscriber(org.reactivestreams.Subscriber<T>);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: invokevirtual #112                // Method subscriberMustNotBeNullException:()Ljava/lang/Throwable;
       8: athrow
       9: return

  public final void requireNonNullException(java.lang.Throwable);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: invokevirtual #116                // Method exceptionMustNotBeNullException:()Ljava/lang/Throwable;
       8: athrow
       9: return

  public final <T> void requireNonNullElement(T);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: invokevirtual #122                // Method elementMustNotBeNullException:()Ljava/lang/Throwable;
       8: athrow
       9: return

  public final void requireNonNullSubscription(org.reactivestreams.Subscription);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: invokevirtual #128                // Method subscriptionMustNotBeNullException:()Ljava/lang/Throwable;
       8: athrow
       9: return

  public final <T> void tryOnError(org.reactivestreams.Subscriber<T>, java.lang.Throwable);
    Code:
       0: aload_2
       1: astore_3
       2: aload_3
       3: instanceof    #132                // class akka/stream/impl/ReactiveStreamsCompliance$SpecViolation
       6: ifeq          30
       9: aload_3
      10: checkcast     #132                // class akka/stream/impl/ReactiveStreamsCompliance$SpecViolation
      13: astore        4
      15: new           #46                 // class java/lang/IllegalStateException
      18: dup
      19: ldc           #134                // String It is not legal to try to signal onError with a SpecViolation
      21: aload         4
      23: checkcast     #136                // class java/lang/Throwable
      26: invokespecial #139                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      29: athrow
      30: aload_1
      31: aload_3
      32: invokeinterface #144,  2          // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      37: getstatic     #150                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      40: astore        5
      42: return
      43: astore        6
      45: aload         6
      47: astore        7
      49: getstatic     #155                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      52: aload         7
      54: invokevirtual #159                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      57: astore        8
      59: aload         8
      61: invokevirtual #165                // Method scala/Option.isEmpty:()Z
      64: ifeq          70
      67: aload         6
      69: athrow
      70: aload         8
      72: invokevirtual #169                // Method scala/Option.get:()Ljava/lang/Object;
      75: checkcast     #136                // class java/lang/Throwable
      78: astore        9
      80: new           #171                // class akka/stream/impl/ReactiveStreamsCompliance$SignalThrewException
      83: dup
      84: getstatic     #176                // Field scala/Predef$any2stringadd$.MODULE$:Lscala/Predef$any2stringadd$;
      87: getstatic     #82                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      90: aload_1
      91: invokevirtual #180                // Method scala/Predef$.any2stringadd:(Ljava/lang/Object;)Ljava/lang/Object;
      94: ldc           #182                // String .onError
      96: invokevirtual #186                // Method scala/Predef$any2stringadd$.$plus$extension:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;
      99: aload         9
     101: invokespecial #187                // Method akka/stream/impl/ReactiveStreamsCompliance$SignalThrewException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     104: athrow
    Exception table:
       from    to  target type
          30    40    43   any

  public final <T> void tryOnNext(org.reactivestreams.Subscriber<T>, T);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #193                // Method requireNonNullElement:(Ljava/lang/Object;)V
       5: aload_1
       6: aload_2
       7: invokeinterface #196,  2          // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      12: return
      13: astore_3
      14: aload_3
      15: astore        4
      17: getstatic     #155                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      20: aload         4
      22: invokevirtual #159                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      25: astore        5
      27: aload         5
      29: invokevirtual #165                // Method scala/Option.isEmpty:()Z
      32: ifeq          37
      35: aload_3
      36: athrow
      37: aload         5
      39: invokevirtual #169                // Method scala/Option.get:()Ljava/lang/Object;
      42: checkcast     #136                // class java/lang/Throwable
      45: astore        6
      47: new           #171                // class akka/stream/impl/ReactiveStreamsCompliance$SignalThrewException
      50: dup
      51: getstatic     #176                // Field scala/Predef$any2stringadd$.MODULE$:Lscala/Predef$any2stringadd$;
      54: getstatic     #82                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      57: aload_1
      58: invokevirtual #180                // Method scala/Predef$.any2stringadd:(Ljava/lang/Object;)Ljava/lang/Object;
      61: ldc           #198                // String .onNext
      63: invokevirtual #186                // Method scala/Predef$any2stringadd$.$plus$extension:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;
      66: aload         6
      68: invokespecial #187                // Method akka/stream/impl/ReactiveStreamsCompliance$SignalThrewException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      71: athrow
    Exception table:
       from    to  target type
           5    12    13   any

  public final <T> void tryOnSubscribe(org.reactivestreams.Subscriber<T>, org.reactivestreams.Subscription);
    Code:
       0: aload_1
       1: aload_2
       2: invokeinterface #201,  2          // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
       7: return
       8: astore_3
       9: aload_3
      10: astore        4
      12: getstatic     #155                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      15: aload         4
      17: invokevirtual #159                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      20: astore        5
      22: aload         5
      24: invokevirtual #165                // Method scala/Option.isEmpty:()Z
      27: ifeq          32
      30: aload_3
      31: athrow
      32: aload         5
      34: invokevirtual #169                // Method scala/Option.get:()Ljava/lang/Object;
      37: checkcast     #136                // class java/lang/Throwable
      40: astore        6
      42: new           #171                // class akka/stream/impl/ReactiveStreamsCompliance$SignalThrewException
      45: dup
      46: getstatic     #176                // Field scala/Predef$any2stringadd$.MODULE$:Lscala/Predef$any2stringadd$;
      49: getstatic     #82                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      52: aload_1
      53: invokevirtual #180                // Method scala/Predef$.any2stringadd:(Ljava/lang/Object;)Ljava/lang/Object;
      56: ldc           #203                // String .onSubscribe
      58: invokevirtual #186                // Method scala/Predef$any2stringadd$.$plus$extension:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;
      61: aload         6
      63: invokespecial #187                // Method akka/stream/impl/ReactiveStreamsCompliance$SignalThrewException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      66: athrow
    Exception table:
       from    to  target type
           0     7     8   any

  public final <T> void tryOnComplete(org.reactivestreams.Subscriber<T>);
    Code:
       0: aload_1
       1: invokeinterface #207,  1          // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
       6: return
       7: astore_2
       8: aload_2
       9: astore_3
      10: getstatic     #155                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      13: aload_3
      14: invokevirtual #159                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      17: astore        4
      19: aload         4
      21: invokevirtual #165                // Method scala/Option.isEmpty:()Z
      24: ifeq          29
      27: aload_2
      28: athrow
      29: aload         4
      31: invokevirtual #169                // Method scala/Option.get:()Ljava/lang/Object;
      34: checkcast     #136                // class java/lang/Throwable
      37: astore        5
      39: new           #171                // class akka/stream/impl/ReactiveStreamsCompliance$SignalThrewException
      42: dup
      43: getstatic     #176                // Field scala/Predef$any2stringadd$.MODULE$:Lscala/Predef$any2stringadd$;
      46: getstatic     #82                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      49: aload_1
      50: invokevirtual #180                // Method scala/Predef$.any2stringadd:(Ljava/lang/Object;)Ljava/lang/Object;
      53: ldc           #209                // String .onComplete
      55: invokevirtual #186                // Method scala/Predef$any2stringadd$.$plus$extension:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;
      58: aload         5
      60: invokespecial #187                // Method akka/stream/impl/ReactiveStreamsCompliance$SignalThrewException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      63: athrow
    Exception table:
       from    to  target type
           0     6     7   any

  public final void tryRequest(org.reactivestreams.Subscription, long);
    Code:
       0: aload_1
       1: lload_2
       2: invokeinterface #217,  3          // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
       7: return
       8: astore        4
      10: aload         4
      12: astore        5
      14: getstatic     #155                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      17: aload         5
      19: invokevirtual #159                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      22: astore        6
      24: aload         6
      26: invokevirtual #165                // Method scala/Option.isEmpty:()Z
      29: ifeq          35
      32: aload         4
      34: athrow
      35: aload         6
      37: invokevirtual #169                // Method scala/Option.get:()Ljava/lang/Object;
      40: checkcast     #136                // class java/lang/Throwable
      43: astore        7
      45: new           #171                // class akka/stream/impl/ReactiveStreamsCompliance$SignalThrewException
      48: dup
      49: ldc           #219                // String It is illegal to throw exceptions from request(), rule 3.16
      51: aload         7
      53: invokespecial #187                // Method akka/stream/impl/ReactiveStreamsCompliance$SignalThrewException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      56: athrow
    Exception table:
       from    to  target type
           0     7     8   any

  public final void tryCancel(org.reactivestreams.Subscription);
    Code:
       0: aload_1
       1: invokeinterface #225,  1          // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
       6: return
       7: astore_2
       8: aload_2
       9: astore_3
      10: getstatic     #155                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      13: aload_3
      14: invokevirtual #159                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      17: astore        4
      19: aload         4
      21: invokevirtual #165                // Method scala/Option.isEmpty:()Z
      24: ifeq          29
      27: aload_2
      28: athrow
      29: aload         4
      31: invokevirtual #169                // Method scala/Option.get:()Ljava/lang/Object;
      34: checkcast     #136                // class java/lang/Throwable
      37: astore        5
      39: new           #171                // class akka/stream/impl/ReactiveStreamsCompliance$SignalThrewException
      42: dup
      43: ldc           #227                // String It is illegal to throw exceptions from cancel(), rule 3.15
      45: aload         5
      47: invokespecial #187                // Method akka/stream/impl/ReactiveStreamsCompliance$SignalThrewException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      50: athrow
    Exception table:
       from    to  target type
           0     6     7   any

  private akka.stream.impl.ReactiveStreamsCompliance$();
    Code:
       0: aload_0
       1: invokespecial #228                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: putstatic     #230                // Field MODULE$:Lakka/stream/impl/ReactiveStreamsCompliance$;
       8: return
}
