Compiled from "SubscriberManagement.scala"
public interface akka.stream.impl.SubscriberManagement<T> extends akka.stream.impl.ResizableMultiReaderRingBuffer$Cursors {
  public abstract akka.stream.impl.ResizableMultiReaderRingBuffer akka$stream$impl$SubscriberManagement$$buffer();

  public abstract void akka$stream$impl$SubscriberManagement$_setter_$akka$stream$impl$SubscriberManagement$$buffer_$eq(akka.stream.impl.ResizableMultiReaderRingBuffer);

  public abstract scala.collection.immutable.List akka$stream$impl$SubscriberManagement$$subscriptions();

  public abstract void akka$stream$impl$SubscriberManagement$$subscriptions_$eq(scala.collection.immutable.List);

  public abstract long akka$stream$impl$SubscriberManagement$$pendingFromUpstream();

  public abstract void akka$stream$impl$SubscriberManagement$$pendingFromUpstream_$eq(long);

  public abstract akka.stream.impl.SubscriberManagement$EndOfStream akka$stream$impl$SubscriberManagement$$endOfStream();

  public abstract void akka$stream$impl$SubscriberManagement$$endOfStream_$eq(akka.stream.impl.SubscriberManagement$EndOfStream);

  public abstract int initialBufferSize();

  public abstract int maxBufferSize();

  public abstract void requestFromUpstream(long);

  public abstract void cancelUpstream();

  public abstract void shutdown(boolean);

  public abstract akka.stream.impl.SubscriptionWithCursor createSubscription(org.reactivestreams.Subscriber<? super T>);

  public abstract java.lang.String bufferDebug();

  public abstract scala.collection.immutable.List<akka.stream.impl.SubscriptionWithCursor> cursors();

  public abstract void moreRequested(akka.stream.impl.SubscriptionWithCursor, long);

  public abstract void pushToDownstream(T);

  public abstract void completeDownstream();

  public abstract void abortDownstream(java.lang.Throwable);

  public abstract void registerSubscriber(org.reactivestreams.Subscriber<? super T>);

  public abstract void unregisterSubscription(akka.stream.impl.SubscriptionWithCursor);
}
