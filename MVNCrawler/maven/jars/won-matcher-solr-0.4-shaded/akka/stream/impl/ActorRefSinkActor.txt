Compiled from "ActorRefSinkActor.scala"
public class akka.stream.impl.ActorRefSinkActor implements akka.stream.actor.ActorSubscriber {
  public final akka.actor.ActorRef akka$stream$impl$ActorRefSinkActor$$ref;

  public final java.lang.Object akka$stream$impl$ActorRefSinkActor$$onCompleteMessage;

  private final akka.stream.actor.WatermarkRequestStrategy requestStrategy;

  private final akka.stream.actor.ActorSubscriberState akka$stream$actor$ActorSubscriber$$state;

  private scala.Option akka$stream$actor$ActorSubscriber$$subscription;

  private long akka$stream$actor$ActorSubscriber$$requested;

  private boolean akka$stream$actor$ActorSubscriber$$_canceled;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public static akka.actor.Props props(akka.actor.ActorRef, int, java.lang.Object);
    Code:
       0: getstatic     #18                 // Field akka/stream/impl/ActorRefSinkActor$.MODULE$:Lakka/stream/impl/ActorRefSinkActor$;
       3: aload_0
       4: iload_1
       5: aload_2
       6: invokevirtual #20                 // Method akka/stream/impl/ActorRefSinkActor$.props:(Lakka/actor/ActorRef;ILjava/lang/Object;)Lakka/actor/Props;
       9: areturn

  public void akka$stream$actor$ActorSubscriber$$super$aroundReceive(scala.PartialFunction, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #45                 // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void akka$stream$actor$ActorSubscriber$$super$aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #56                 // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void akka$stream$actor$ActorSubscriber$$super$aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #62                 // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void akka$stream$actor$ActorSubscriber$$super$aroundPreRestart(java.lang.Throwable, scala.Option);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #70                 // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void akka$stream$actor$ActorSubscriber$$super$aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #75                 // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public akka.stream.actor.ActorSubscriberState akka$stream$actor$ActorSubscriber$$state();
    Code:
       0: aload_0
       1: getfield      #78                 // Field akka$stream$actor$ActorSubscriber$$state:Lakka/stream/actor/ActorSubscriberState;
       4: areturn

  public void akka$stream$actor$ActorSubscriber$_setter_$akka$stream$actor$ActorSubscriber$$state_$eq(akka.stream.actor.ActorSubscriberState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #78                 // Field akka$stream$actor$ActorSubscriber$$state:Lakka/stream/actor/ActorSubscriberState;
       5: return

  public scala.Option akka$stream$actor$ActorSubscriber$$subscription();
    Code:
       0: aload_0
       1: getfield      #84                 // Field akka$stream$actor$ActorSubscriber$$subscription:Lscala/Option;
       4: areturn

  public void akka$stream$actor$ActorSubscriber$$subscription_$eq(scala.Option);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #84                 // Field akka$stream$actor$ActorSubscriber$$subscription:Lscala/Option;
       5: return

  public long akka$stream$actor$ActorSubscriber$$requested();
    Code:
       0: aload_0
       1: getfield      #89                 // Field akka$stream$actor$ActorSubscriber$$requested:J
       4: lreturn

  public void akka$stream$actor$ActorSubscriber$$requested_$eq(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #89                 // Field akka$stream$actor$ActorSubscriber$$requested:J
       5: return

  public boolean akka$stream$actor$ActorSubscriber$$_canceled();
    Code:
       0: aload_0
       1: getfield      #94                 // Field akka$stream$actor$ActorSubscriber$$_canceled:Z
       4: ireturn

  public void akka$stream$actor$ActorSubscriber$$_canceled_$eq(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #94                 // Field akka$stream$actor$ActorSubscriber$$_canceled:Z
       5: return

  public final boolean canceled();
    Code:
       0: aload_0
       1: invokestatic  #102                // Method akka/stream/actor/ActorSubscriber$class.canceled:(Lakka/stream/actor/ActorSubscriber;)Z
       4: ireturn

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #105                // Method akka/stream/actor/ActorSubscriber$class.aroundReceive:(Lakka/stream/actor/ActorSubscriber;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #108                // Method akka/stream/actor/ActorSubscriber$class.aroundPreStart:(Lakka/stream/actor/ActorSubscriber;)V
       4: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #111                // Method akka/stream/actor/ActorSubscriber$class.aroundPostRestart:(Lakka/stream/actor/ActorSubscriber;Ljava/lang/Throwable;)V
       5: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #114                // Method akka/stream/actor/ActorSubscriber$class.aroundPreRestart:(Lakka/stream/actor/ActorSubscriber;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #116                // Method akka/stream/actor/ActorSubscriber$class.aroundPostStop:(Lakka/stream/actor/ActorSubscriber;)V
       4: return

  public void request(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #120                // Method akka/stream/actor/ActorSubscriber$class.request:(Lakka/stream/actor/ActorSubscriber;J)V
       5: return

  public void cancel();
    Code:
       0: aload_0
       1: invokestatic  #124                // Method akka/stream/actor/ActorSubscriber$class.cancel:(Lakka/stream/actor/ActorSubscriber;)V
       4: return

  public int remainingRequested();
    Code:
       0: aload_0
       1: invokestatic  #129                // Method akka/stream/actor/ActorSubscriber$class.remainingRequested:(Lakka/stream/actor/ActorSubscriber;)I
       4: ireturn

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #132                // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #135                // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #132                // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #135                // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #143                // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokestatic  #148                // Method akka/actor/Actor$class.supervisorStrategy:(Lakka/actor/Actor;)Lakka/actor/SupervisorStrategy;
       4: areturn

  public void preStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #153                // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
       4: return

  public void postStop() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #156                // Method akka/actor/Actor$class.postStop:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #159                // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void postRestart(java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #162                // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #167                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public akka.stream.actor.WatermarkRequestStrategy requestStrategy();
    Code:
       0: aload_0
       1: getfield      #170                // Field requestStrategy:Lakka/stream/actor/WatermarkRequestStrategy;
       4: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: new           #173                // class akka/stream/impl/ActorRefSinkActor$$anonfun$receive$1
       3: dup
       4: aload_0
       5: invokespecial #177                // Method akka/stream/impl/ActorRefSinkActor$$anonfun$receive$1."<init>":(Lakka/stream/impl/ActorRefSinkActor;)V
       8: areturn

  public akka.stream.actor.RequestStrategy requestStrategy();
    Code:
       0: aload_0
       1: invokevirtual #180                // Method requestStrategy:()Lakka/stream/actor/WatermarkRequestStrategy;
       4: areturn

  public akka.stream.impl.ActorRefSinkActor(akka.actor.ActorRef, int, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #183                // Field akka$stream$impl$ActorRefSinkActor$$ref:Lakka/actor/ActorRef;
       5: aload_0
       6: aload_3
       7: putfield      #185                // Field akka$stream$impl$ActorRefSinkActor$$onCompleteMessage:Ljava/lang/Object;
      10: aload_0
      11: invokespecial #187                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #190                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      18: aload_0
      19: invokestatic  #192                // Method akka/stream/actor/ActorSubscriber$class.$init$:(Lakka/stream/actor/ActorSubscriber;)V
      22: aload_0
      23: getstatic     #197                // Field akka/stream/actor/WatermarkRequestStrategy$.MODULE$:Lakka/stream/actor/WatermarkRequestStrategy$;
      26: iload_2
      27: invokevirtual #201                // Method akka/stream/actor/WatermarkRequestStrategy$.apply:(I)Lakka/stream/actor/WatermarkRequestStrategy;
      30: putfield      #170                // Field requestStrategy:Lakka/stream/actor/WatermarkRequestStrategy;
      33: aload_0
      34: invokevirtual #203                // Method context:()Lakka/actor/ActorContext;
      37: aload_1
      38: invokeinterface #209,  2          // InterfaceMethod akka/actor/ActorContext.watch:(Lakka/actor/ActorRef;)Lakka/actor/ActorRef;
      43: pop
      44: return
}
