Compiled from "FanIn.scala"
public abstract class akka.stream.impl.FanIn implements akka.actor.Actor,akka.actor.ActorLogging,akka.stream.impl.Pump {
  private final akka.stream.ActorMaterializerSettings settings;

  private final int inputCount;

  private final akka.stream.impl.Outputs primaryOutputs;

  private final akka.stream.impl.FanIn$InputBunch inputBunch;

  private akka.stream.impl.TransferState akka$stream$impl$Pump$$transferState;

  private scala.Function0<scala.runtime.BoxedUnit> akka$stream$impl$Pump$$currentAction;

  private final akka.stream.impl.TransferPhase completedPhase;

  private akka.event.LoggingAdapter akka$actor$ActorLogging$$_log;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public static int Cancelled();
    Code:
       0: getstatic     #22                 // Field akka/stream/impl/FanIn$.MODULE$:Lakka/stream/impl/FanIn$;
       3: invokevirtual #24                 // Method akka/stream/impl/FanIn$.Cancelled:()I
       6: ireturn

  public static int Completed();
    Code:
       0: getstatic     #22                 // Field akka/stream/impl/FanIn$.MODULE$:Lakka/stream/impl/FanIn$;
       3: invokevirtual #27                 // Method akka/stream/impl/FanIn$.Completed:()I
       6: ireturn

  public static int Depleted();
    Code:
       0: getstatic     #22                 // Field akka/stream/impl/FanIn$.MODULE$:Lakka/stream/impl/FanIn$;
       3: invokevirtual #30                 // Method akka/stream/impl/FanIn$.Depleted:()I
       6: ireturn

  public static int Pending();
    Code:
       0: getstatic     #22                 // Field akka/stream/impl/FanIn$.MODULE$:Lakka/stream/impl/FanIn$;
       3: invokevirtual #33                 // Method akka/stream/impl/FanIn$.Pending:()I
       6: ireturn

  public static int Marked();
    Code:
       0: getstatic     #22                 // Field akka/stream/impl/FanIn$.MODULE$:Lakka/stream/impl/FanIn$;
       3: invokevirtual #36                 // Method akka/stream/impl/FanIn$.Marked:()I
       6: ireturn

  public akka.stream.impl.TransferState akka$stream$impl$Pump$$transferState();
    Code:
       0: aload_0
       1: getfield      #60                 // Field akka$stream$impl$Pump$$transferState:Lakka/stream/impl/TransferState;
       4: areturn

  public void akka$stream$impl$Pump$$transferState_$eq(akka.stream.impl.TransferState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #60                 // Field akka$stream$impl$Pump$$transferState:Lakka/stream/impl/TransferState;
       5: return

  public scala.Function0<scala.runtime.BoxedUnit> akka$stream$impl$Pump$$currentAction();
    Code:
       0: aload_0
       1: getfield      #68                 // Field akka$stream$impl$Pump$$currentAction:Lscala/Function0;
       4: areturn

  public void akka$stream$impl$Pump$$currentAction_$eq(scala.Function0<scala.runtime.BoxedUnit>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #68                 // Field akka$stream$impl$Pump$$currentAction:Lscala/Function0;
       5: return

  public final akka.stream.impl.TransferPhase completedPhase();
    Code:
       0: aload_0
       1: getfield      #73                 // Field completedPhase:Lakka/stream/impl/TransferPhase;
       4: areturn

  public final void akka$stream$impl$Pump$_setter_$completedPhase_$eq(akka.stream.impl.TransferPhase);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #73                 // Field completedPhase:Lakka/stream/impl/TransferPhase;
       5: return

  public final void initialPhase(int, akka.stream.impl.TransferPhase);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #82                 // Method akka/stream/impl/Pump$class.initialPhase:(Lakka/stream/impl/Pump;ILakka/stream/impl/TransferPhase;)V
       6: return

  public final void waitForUpstreams(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #89                 // Method akka/stream/impl/Pump$class.waitForUpstreams:(Lakka/stream/impl/Pump;I)V
       5: return

  public void gotUpstreamSubscription();
    Code:
       0: aload_0
       1: invokestatic  #94                 // Method akka/stream/impl/Pump$class.gotUpstreamSubscription:(Lakka/stream/impl/Pump;)V
       4: return

  public final void nextPhase(akka.stream.impl.TransferPhase);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #98                 // Method akka/stream/impl/Pump$class.nextPhase:(Lakka/stream/impl/Pump;Lakka/stream/impl/TransferPhase;)V
       5: return

  public final boolean isPumpFinished();
    Code:
       0: aload_0
       1: invokestatic  #104                // Method akka/stream/impl/Pump$class.isPumpFinished:(Lakka/stream/impl/Pump;)Z
       4: ireturn

  public final void pump();
    Code:
       0: aload_0
       1: invokestatic  #107                // Method akka/stream/impl/Pump$class.pump:(Lakka/stream/impl/Pump;)V
       4: return

  public akka.event.LoggingAdapter akka$actor$ActorLogging$$_log();
    Code:
       0: aload_0
       1: getfield      #110                // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$actor$ActorLogging$$_log_$eq(akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #110                // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       5: return

  public akka.event.LoggingAdapter log();
    Code:
       0: aload_0
       1: invokestatic  #118                // Method akka/actor/ActorLogging$class.log:(Lakka/actor/ActorLogging;)Lakka/event/LoggingAdapter;
       4: areturn

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #121                // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #124                // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #121                // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #124                // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #134                // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #139                // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #147                // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #150                // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #155                // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #164                // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokestatic  #169                // Method akka/actor/Actor$class.supervisorStrategy:(Lakka/actor/Actor;)Lakka/actor/SupervisorStrategy;
       4: areturn

  public void preStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #174                // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #177                // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #182                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public akka.stream.ActorMaterializerSettings settings();
    Code:
       0: aload_0
       1: getfield      #185                // Field settings:Lakka/stream/ActorMaterializerSettings;
       4: areturn

  public int inputCount();
    Code:
       0: aload_0
       1: getfield      #187                // Field inputCount:I
       4: ireturn

  public akka.stream.impl.Outputs primaryOutputs();
    Code:
       0: aload_0
       1: getfield      #190                // Field primaryOutputs:Lakka/stream/impl/Outputs;
       4: areturn

  public akka.stream.impl.FanIn$InputBunch inputBunch();
    Code:
       0: aload_0
       1: getfield      #193                // Field inputBunch:Lakka/stream/impl/FanIn$InputBunch;
       4: areturn

  public void pumpFinished();
    Code:
       0: aload_0
       1: invokevirtual #196                // Method inputBunch:()Lakka/stream/impl/FanIn$InputBunch;
       4: invokevirtual #201                // Method akka/stream/impl/FanIn$InputBunch.cancel:()V
       7: aload_0
       8: invokevirtual #203                // Method primaryOutputs:()Lakka/stream/impl/Outputs;
      11: invokeinterface #208,  1          // InterfaceMethod akka/stream/impl/Outputs.complete:()V
      16: aload_0
      17: invokevirtual #210                // Method context:()Lakka/actor/ActorContext;
      20: aload_0
      21: invokevirtual #212                // Method self:()Lakka/actor/ActorRef;
      24: invokeinterface #217,  2          // InterfaceMethod akka/actor/ActorContext.stop:(Lakka/actor/ActorRef;)V
      29: return

  public void pumpFailed(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #221                // Method fail:(Ljava/lang/Throwable;)V
       5: return

  public void fail(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #224                // Method settings:()Lakka/stream/ActorMaterializerSettings;
       4: invokevirtual #229                // Method akka/stream/ActorMaterializerSettings.debugLogging:()Z
       7: ifeq          25
      10: aload_0
      11: invokevirtual #231                // Method log:()Lakka/event/LoggingAdapter;
      14: ldc           #233                // String fail due to: {}
      16: aload_1
      17: invokevirtual #239                // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      20: invokeinterface #245,  3          // InterfaceMethod akka/event/LoggingAdapter.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      25: aload_0
      26: aload_0
      27: invokevirtual #247                // Method completedPhase:()Lakka/stream/impl/TransferPhase;
      30: invokevirtual #249                // Method nextPhase:(Lakka/stream/impl/TransferPhase;)V
      33: aload_0
      34: invokevirtual #203                // Method primaryOutputs:()Lakka/stream/impl/Outputs;
      37: aload_1
      38: invokeinterface #252,  2          // InterfaceMethod akka/stream/impl/Outputs.error:(Ljava/lang/Throwable;)V
      43: aload_0
      44: invokevirtual #254                // Method pump:()V
      47: return

  public void postStop();
    Code:
       0: aload_0
       1: invokevirtual #196                // Method inputBunch:()Lakka/stream/impl/FanIn$InputBunch;
       4: invokevirtual #201                // Method akka/stream/impl/FanIn$InputBunch.cancel:()V
       7: aload_0
       8: invokevirtual #203                // Method primaryOutputs:()Lakka/stream/impl/Outputs;
      11: new           #257                // class akka/stream/AbruptTerminationException
      14: dup
      15: aload_0
      16: invokevirtual #212                // Method self:()Lakka/actor/ActorRef;
      19: invokespecial #260                // Method akka/stream/AbruptTerminationException."<init>":(Lakka/actor/ActorRef;)V
      22: invokeinterface #252,  2          // InterfaceMethod akka/stream/impl/Outputs.error:(Ljava/lang/Throwable;)V
      27: return

  public void postRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #263                // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: new           #265                // class java/lang/IllegalStateException
       8: dup
       9: ldc_w         #267                // String This actor cannot be restarted
      12: invokespecial #270                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      15: athrow

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: aload_0
       1: invokevirtual #196                // Method inputBunch:()Lakka/stream/impl/FanIn$InputBunch;
       4: invokevirtual #275                // Method akka/stream/impl/FanIn$InputBunch.subreceive:()Lakka/stream/impl/SubReceive;
       7: aload_0
       8: invokevirtual #203                // Method primaryOutputs:()Lakka/stream/impl/Outputs;
      11: invokeinterface #276,  1          // InterfaceMethod akka/stream/impl/Outputs.subreceive:()Lakka/stream/impl/SubReceive;
      16: invokevirtual #282                // Method akka/stream/impl/SubReceive.orElse:(Lscala/PartialFunction;)Lscala/PartialFunction;
      19: areturn

  public akka.stream.impl.FanIn(akka.stream.ActorMaterializerSettings, int);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #185                // Field settings:Lakka/stream/ActorMaterializerSettings;
       5: aload_0
       6: iload_2
       7: putfield      #187                // Field inputCount:I
      10: aload_0
      11: invokespecial #285                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #288                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      18: aload_0
      19: invokestatic  #291                // Method akka/actor/ActorLogging$class.$init$:(Lakka/actor/ActorLogging;)V
      22: aload_0
      23: invokestatic  #293                // Method akka/stream/impl/Pump$class.$init$:(Lakka/stream/impl/Pump;)V
      26: aload_0
      27: new           #295                // class akka/stream/impl/SimpleOutputs
      30: dup
      31: aload_0
      32: invokevirtual #212                // Method self:()Lakka/actor/ActorRef;
      35: aload_0
      36: invokespecial #298                // Method akka/stream/impl/SimpleOutputs."<init>":(Lakka/actor/ActorRef;Lakka/stream/impl/Pump;)V
      39: putfield      #190                // Field primaryOutputs:Lakka/stream/impl/Outputs;
      42: aload_0
      43: new           #300                // class akka/stream/impl/FanIn$$anon$6
      46: dup
      47: aload_0
      48: invokespecial #303                // Method akka/stream/impl/FanIn$$anon$6."<init>":(Lakka/stream/impl/FanIn;)V
      51: putfield      #193                // Field inputBunch:Lakka/stream/impl/FanIn$InputBunch;
      54: return
}
