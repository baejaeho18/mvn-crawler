Compiled from "ActorProcessor.scala"
public abstract class akka.stream.impl.BatchingInputBuffer implements akka.stream.impl.DefaultInputTransferStates {
  private final int size;

  private final akka.stream.impl.Pump pump;

  private org.reactivestreams.Subscription upstream;

  private final java.lang.Object[] inputBuffer;

  private int inputBufferElements;

  private int nextInputElementCursor;

  private boolean upstreamCompleted;

  private final int IndexMask;

  private int batchRemaining;

  private final akka.stream.impl.SubReceive subreceive;

  private final akka.stream.impl.TransferState NeedsInput;

  private final akka.stream.impl.TransferState NeedsInputOrComplete;

  public akka.stream.impl.TransferState NeedsInput();
    Code:
       0: aload_0
       1: getfield      #32                 // Field NeedsInput:Lakka/stream/impl/TransferState;
       4: areturn

  public akka.stream.impl.TransferState NeedsInputOrComplete();
    Code:
       0: aload_0
       1: getfield      #36                 // Field NeedsInputOrComplete:Lakka/stream/impl/TransferState;
       4: areturn

  public void akka$stream$impl$DefaultInputTransferStates$_setter_$NeedsInput_$eq(akka.stream.impl.TransferState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #32                 // Field NeedsInput:Lakka/stream/impl/TransferState;
       5: return

  public void akka$stream$impl$DefaultInputTransferStates$_setter_$NeedsInputOrComplete_$eq(akka.stream.impl.TransferState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #36                 // Field NeedsInputOrComplete:Lakka/stream/impl/TransferState;
       5: return

  public boolean isOpen();
    Code:
       0: aload_0
       1: invokestatic  #47                 // Method akka/stream/impl/Inputs$class.isOpen:(Lakka/stream/impl/Inputs;)Z
       4: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #50                 // Field size:I
       4: ireturn

  public akka.stream.impl.Pump pump();
    Code:
       0: aload_0
       1: getfield      #53                 // Field pump:Lakka/stream/impl/Pump;
       4: areturn

  private org.reactivestreams.Subscription upstream();
    Code:
       0: aload_0
       1: getfield      #56                 // Field upstream:Lorg/reactivestreams/Subscription;
       4: areturn

  private void upstream_$eq(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #56                 // Field upstream:Lorg/reactivestreams/Subscription;
       5: return

  private java.lang.Object[] inputBuffer();
    Code:
       0: aload_0
       1: getfield      #61                 // Field inputBuffer:[Ljava/lang/Object;
       4: areturn

  private int inputBufferElements();
    Code:
       0: aload_0
       1: getfield      #63                 // Field inputBufferElements:I
       4: ireturn

  private void inputBufferElements_$eq(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #63                 // Field inputBufferElements:I
       5: return

  private int nextInputElementCursor();
    Code:
       0: aload_0
       1: getfield      #67                 // Field nextInputElementCursor:I
       4: ireturn

  private void nextInputElementCursor_$eq(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #67                 // Field nextInputElementCursor:I
       5: return

  private boolean upstreamCompleted();
    Code:
       0: aload_0
       1: getfield      #70                 // Field upstreamCompleted:Z
       4: ireturn

  private void upstreamCompleted_$eq(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #70                 // Field upstreamCompleted:Z
       5: return

  private int IndexMask();
    Code:
       0: aload_0
       1: getfield      #74                 // Field IndexMask:I
       4: ireturn

  private int requestBatchSize();
    Code:
       0: getstatic     #81                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: iconst_1
       4: aload_0
       5: invokespecial #83                 // Method inputBuffer:()[Ljava/lang/Object;
       8: arraylength
       9: iconst_2
      10: idiv
      11: invokevirtual #87                 // Method scala/math/package$.max:(II)I
      14: ireturn

  private int batchRemaining();
    Code:
       0: aload_0
       1: getfield      #89                 // Field batchRemaining:I
       4: ireturn

  private void batchRemaining_$eq(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #89                 // Field batchRemaining:I
       5: return

  public java.lang.String toString();
    Code:
       0: new           #94                 // class scala/StringContext
       3: dup
       4: getstatic     #99                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       7: iconst_5
       8: anewarray     #101                // class java/lang/String
      11: dup
      12: iconst_0
      13: ldc           #103                // String BatchingInputBuffer(size=
      15: aastore
      16: dup
      17: iconst_1
      18: ldc           #105                // String , elems=
      20: aastore
      21: dup
      22: iconst_2
      23: ldc           #107                // String , completed=
      25: aastore
      26: dup
      27: iconst_3
      28: ldc           #109                // String , remaining=
      30: aastore
      31: dup
      32: iconst_4
      33: ldc           #111                // String )
      35: aastore
      36: checkcast     #112                // class "[Ljava/lang/Object;"
      39: invokevirtual #116                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      42: invokespecial #120                // Method scala/StringContext."<init>":(Lscala/collection/Seq;)V
      45: getstatic     #99                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      48: iconst_4
      49: anewarray     #4                  // class java/lang/Object
      52: dup
      53: iconst_0
      54: aload_0
      55: invokevirtual #122                // Method size:()I
      58: invokestatic  #128                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      61: aastore
      62: dup
      63: iconst_1
      64: aload_0
      65: invokespecial #130                // Method inputBufferElements:()I
      68: invokestatic  #128                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      71: aastore
      72: dup
      73: iconst_2
      74: aload_0
      75: invokespecial #132                // Method upstreamCompleted:()Z
      78: invokestatic  #136                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
      81: aastore
      82: dup
      83: iconst_3
      84: aload_0
      85: invokespecial #138                // Method batchRemaining:()I
      88: invokestatic  #128                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      91: aastore
      92: invokevirtual #142                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      95: invokevirtual #146                // Method scala/StringContext.s:(Lscala/collection/Seq;)Ljava/lang/String;
      98: areturn

  public akka.stream.impl.SubReceive subreceive();
    Code:
       0: aload_0
       1: getfield      #149                // Field subreceive:Lakka/stream/impl/SubReceive;
       4: areturn

  public java.lang.Object dequeueInputElement();
    Code:
       0: aload_0
       1: invokespecial #83                 // Method inputBuffer:()[Ljava/lang/Object;
       4: aload_0
       5: invokespecial #153                // Method nextInputElementCursor:()I
       8: aaload
       9: astore_1
      10: aload_0
      11: invokespecial #83                 // Method inputBuffer:()[Ljava/lang/Object;
      14: aload_0
      15: invokespecial #153                // Method nextInputElementCursor:()I
      18: aconst_null
      19: aastore
      20: aload_0
      21: aload_0
      22: invokespecial #138                // Method batchRemaining:()I
      25: iconst_1
      26: isub
      27: invokespecial #155                // Method batchRemaining_$eq:(I)V
      30: aload_0
      31: invokespecial #138                // Method batchRemaining:()I
      34: iconst_0
      35: if_icmpne     67
      38: aload_0
      39: invokespecial #132                // Method upstreamCompleted:()Z
      42: ifne          67
      45: aload_0
      46: invokespecial #157                // Method upstream:()Lorg/reactivestreams/Subscription;
      49: aload_0
      50: invokespecial #159                // Method requestBatchSize:()I
      53: i2l
      54: invokeinterface #165,  3          // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      59: aload_0
      60: aload_0
      61: invokespecial #159                // Method requestBatchSize:()I
      64: invokespecial #155                // Method batchRemaining_$eq:(I)V
      67: aload_0
      68: aload_0
      69: invokespecial #130                // Method inputBufferElements:()I
      72: iconst_1
      73: isub
      74: invokespecial #167                // Method inputBufferElements_$eq:(I)V
      77: aload_0
      78: aload_0
      79: invokespecial #153                // Method nextInputElementCursor:()I
      82: iconst_1
      83: iadd
      84: invokespecial #169                // Method nextInputElementCursor_$eq:(I)V
      87: aload_0
      88: aload_0
      89: invokespecial #153                // Method nextInputElementCursor:()I
      92: aload_0
      93: invokespecial #171                // Method IndexMask:()I
      96: iand
      97: invokespecial #169                // Method nextInputElementCursor_$eq:(I)V
     100: aload_1
     101: areturn

  public final void enqueueInputElement(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #177                // Method isOpen:()Z
       4: ifeq          58
       7: aload_0
       8: invokespecial #130                // Method inputBufferElements:()I
      11: aload_0
      12: invokevirtual #122                // Method size:()I
      15: if_icmpne     28
      18: new           #179                // class java/lang/IllegalStateException
      21: dup
      22: ldc           #181                // String Input buffer overrun
      24: invokespecial #184                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_0
      29: invokespecial #83                 // Method inputBuffer:()[Ljava/lang/Object;
      32: aload_0
      33: invokespecial #153                // Method nextInputElementCursor:()I
      36: aload_0
      37: invokespecial #130                // Method inputBufferElements:()I
      40: iadd
      41: aload_0
      42: invokespecial #171                // Method IndexMask:()I
      45: iand
      46: aload_1
      47: aastore
      48: aload_0
      49: aload_0
      50: invokespecial #130                // Method inputBufferElements:()I
      53: iconst_1
      54: iadd
      55: invokespecial #167                // Method inputBufferElements_$eq:(I)V
      58: aload_0
      59: invokevirtual #186                // Method pump:()Lakka/stream/impl/Pump;
      62: invokeinterface #191,  1          // InterfaceMethod akka/stream/impl/Pump.pump:()V
      67: return

  public void cancel();
    Code:
       0: aload_0
       1: invokespecial #132                // Method upstreamCompleted:()Z
       4: ifne          32
       7: aload_0
       8: iconst_1
       9: invokespecial #194                // Method upstreamCompleted_$eq:(Z)V
      12: aload_0
      13: invokespecial #157                // Method upstream:()Lorg/reactivestreams/Subscription;
      16: ifnull        28
      19: aload_0
      20: invokespecial #157                // Method upstream:()Lorg/reactivestreams/Subscription;
      23: invokeinterface #196,  1          // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      28: aload_0
      29: invokespecial #199                // Method clear:()V
      32: return

  public boolean isClosed();
    Code:
       0: aload_0
       1: invokespecial #132                // Method upstreamCompleted:()Z
       4: ireturn

  private void clear();
    Code:
       0: aload_0
       1: invokespecial #83                 // Method inputBuffer:()[Ljava/lang/Object;
       4: iconst_0
       5: aload_0
       6: invokespecial #83                 // Method inputBuffer:()[Ljava/lang/Object;
       9: arraylength
      10: aconst_null
      11: invokestatic  #206                // Method java/util/Arrays.fill:([Ljava/lang/Object;IILjava/lang/Object;)V
      14: aload_0
      15: iconst_0
      16: invokespecial #167                // Method inputBufferElements_$eq:(I)V
      19: return

  public boolean inputsDepleted();
    Code:
       0: aload_0
       1: invokespecial #132                // Method upstreamCompleted:()Z
       4: ifeq          19
       7: aload_0
       8: invokespecial #130                // Method inputBufferElements:()I
      11: iconst_0
      12: if_icmpne     19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  public boolean inputsAvailable();
    Code:
       0: aload_0
       1: invokespecial #130                // Method inputBufferElements:()I
       4: iconst_0
       5: if_icmple     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #194                // Method upstreamCompleted_$eq:(Z)V
       5: aload_0
       6: invokevirtual #211                // Method subreceive:()Lakka/stream/impl/SubReceive;
       9: aload_0
      10: invokevirtual #215                // Method completed:()Lscala/PartialFunction;
      13: invokevirtual #221                // Method akka/stream/impl/SubReceive.become:(Lscala/PartialFunction;)V
      16: aload_0
      17: invokevirtual #186                // Method pump:()Lakka/stream/impl/Pump;
      20: invokeinterface #191,  1          // InterfaceMethod akka/stream/impl/Pump.pump:()V
      25: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #99                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_1
       4: ifnonnull     11
       7: iconst_0
       8: goto          12
      11: iconst_1
      12: invokevirtual #225                // Method scala/Predef$.require:(Z)V
      15: aload_0
      16: invokespecial #132                // Method upstreamCompleted:()Z
      19: ifeq          31
      22: aload_1
      23: invokeinterface #196,  1          // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      28: goto          62
      31: aload_0
      32: aload_1
      33: invokespecial #227                // Method upstream_$eq:(Lorg/reactivestreams/Subscription;)V
      36: aload_0
      37: invokespecial #157                // Method upstream:()Lorg/reactivestreams/Subscription;
      40: aload_0
      41: invokespecial #83                 // Method inputBuffer:()[Ljava/lang/Object;
      44: arraylength
      45: i2l
      46: invokeinterface #165,  3          // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      51: aload_0
      52: invokevirtual #211                // Method subreceive:()Lakka/stream/impl/SubReceive;
      55: aload_0
      56: invokevirtual #230                // Method upstreamRunning:()Lscala/PartialFunction;
      59: invokevirtual #221                // Method akka/stream/impl/SubReceive.become:(Lscala/PartialFunction;)V
      62: aload_0
      63: invokevirtual #186                // Method pump:()Lakka/stream/impl/Pump;
      66: invokeinterface #233,  1          // InterfaceMethod akka/stream/impl/Pump.gotUpstreamSubscription:()V
      71: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #194                // Method upstreamCompleted_$eq:(Z)V
       5: aload_0
       6: invokevirtual #211                // Method subreceive:()Lakka/stream/impl/SubReceive;
       9: aload_0
      10: invokevirtual #215                // Method completed:()Lscala/PartialFunction;
      13: invokevirtual #221                // Method akka/stream/impl/SubReceive.become:(Lscala/PartialFunction;)V
      16: aload_0
      17: aload_1
      18: invokevirtual #239                // Method inputOnError:(Ljava/lang/Throwable;)V
      21: return

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> waitingForUpstream();
    Code:
       0: new           #244                // class akka/stream/impl/BatchingInputBuffer$$anonfun$waitingForUpstream$1
       3: dup
       4: aload_0
       5: invokespecial #247                // Method akka/stream/impl/BatchingInputBuffer$$anonfun$waitingForUpstream$1."<init>":(Lakka/stream/impl/BatchingInputBuffer;)V
       8: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> upstreamRunning();
    Code:
       0: new           #249                // class akka/stream/impl/BatchingInputBuffer$$anonfun$upstreamRunning$1
       3: dup
       4: aload_0
       5: invokespecial #250                // Method akka/stream/impl/BatchingInputBuffer$$anonfun$upstreamRunning$1."<init>":(Lakka/stream/impl/BatchingInputBuffer;)V
       8: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> completed();
    Code:
       0: new           #252                // class akka/stream/impl/BatchingInputBuffer$$anonfun$completed$1
       3: dup
       4: aload_0
       5: invokespecial #253                // Method akka/stream/impl/BatchingInputBuffer$$anonfun$completed$1."<init>":(Lakka/stream/impl/BatchingInputBuffer;)V
       8: areturn

  public void inputOnError(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokespecial #199                // Method clear:()V
       4: return

  public akka.stream.impl.BatchingInputBuffer(int, akka.stream.impl.Pump);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #50                 // Field size:I
       5: aload_0
       6: aload_2
       7: putfield      #53                 // Field pump:Lakka/stream/impl/Pump;
      10: aload_0
      11: invokespecial #256                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #260                // Method akka/stream/impl/Inputs$class.$init$:(Lakka/stream/impl/Inputs;)V
      18: aload_0
      19: invokestatic  #265                // Method akka/stream/impl/DefaultInputTransferStates$class.$init$:(Lakka/stream/impl/DefaultInputTransferStates;)V
      22: getstatic     #99                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      25: iload_1
      26: iconst_0
      27: if_icmple     34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: new           #267                // class akka/stream/impl/BatchingInputBuffer$$anonfun$1
      38: dup
      39: aload_0
      40: invokespecial #268                // Method akka/stream/impl/BatchingInputBuffer$$anonfun$1."<init>":(Lakka/stream/impl/BatchingInputBuffer;)V
      43: invokevirtual #271                // Method scala/Predef$.require:(ZLscala/Function0;)V
      46: getstatic     #99                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      49: iload_1
      50: iload_1
      51: iconst_1
      52: isub
      53: iand
      54: iconst_0
      55: if_icmpne     62
      58: iconst_1
      59: goto          63
      62: iconst_0
      63: new           #273                // class akka/stream/impl/BatchingInputBuffer$$anonfun$2
      66: dup
      67: aload_0
      68: invokespecial #274                // Method akka/stream/impl/BatchingInputBuffer$$anonfun$2."<init>":(Lakka/stream/impl/BatchingInputBuffer;)V
      71: invokevirtual #271                // Method scala/Predef$.require:(ZLscala/Function0;)V
      74: aload_0
      75: getstatic     #279                // Field scala/Array$.MODULE$:Lscala/Array$;
      78: iload_1
      79: getstatic     #284                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
      82: invokevirtual #288                // Method scala/reflect/ClassTag$.AnyRef:()Lscala/reflect/ClassTag;
      85: invokevirtual #292                // Method scala/Array$.ofDim:(ILscala/reflect/ClassTag;)Ljava/lang/Object;
      88: checkcast     #112                // class "[Ljava/lang/Object;"
      91: putfield      #61                 // Field inputBuffer:[Ljava/lang/Object;
      94: aload_0
      95: iconst_0
      96: putfield      #63                 // Field inputBufferElements:I
      99: aload_0
     100: iconst_0
     101: putfield      #67                 // Field nextInputElementCursor:I
     104: aload_0
     105: iconst_0
     106: putfield      #70                 // Field upstreamCompleted:Z
     109: aload_0
     110: iload_1
     111: iconst_1
     112: isub
     113: putfield      #74                 // Field IndexMask:I
     116: aload_0
     117: aload_0
     118: invokespecial #159                // Method requestBatchSize:()I
     121: putfield      #89                 // Field batchRemaining:I
     124: aload_0
     125: new           #217                // class akka/stream/impl/SubReceive
     128: dup
     129: aload_0
     130: invokevirtual #294                // Method waitingForUpstream:()Lscala/PartialFunction;
     133: invokespecial #296                // Method akka/stream/impl/SubReceive."<init>":(Lscala/PartialFunction;)V
     136: putfield      #149                // Field subreceive:Lakka/stream/impl/SubReceive;
     139: return
}
