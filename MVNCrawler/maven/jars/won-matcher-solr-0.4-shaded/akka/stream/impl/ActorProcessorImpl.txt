Compiled from "ActorProcessor.scala"
public abstract class akka.stream.impl.ActorProcessorImpl implements akka.actor.Actor,akka.actor.ActorLogging,akka.stream.impl.Pump {
  private final akka.stream.ActorMaterializerSettings settings;

  private final akka.stream.impl.Inputs primaryInputs;

  private final akka.stream.impl.Outputs primaryOutputs;

  private akka.stream.impl.TransferState akka$stream$impl$Pump$$transferState;

  private scala.Function0<scala.runtime.BoxedUnit> akka$stream$impl$Pump$$currentAction;

  private final akka.stream.impl.TransferPhase completedPhase;

  private akka.event.LoggingAdapter akka$actor$ActorLogging$$_log;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public akka.stream.impl.TransferState akka$stream$impl$Pump$$transferState();
    Code:
       0: aload_0
       1: getfield      #36                 // Field akka$stream$impl$Pump$$transferState:Lakka/stream/impl/TransferState;
       4: areturn

  public void akka$stream$impl$Pump$$transferState_$eq(akka.stream.impl.TransferState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #36                 // Field akka$stream$impl$Pump$$transferState:Lakka/stream/impl/TransferState;
       5: return

  public scala.Function0<scala.runtime.BoxedUnit> akka$stream$impl$Pump$$currentAction();
    Code:
       0: aload_0
       1: getfield      #44                 // Field akka$stream$impl$Pump$$currentAction:Lscala/Function0;
       4: areturn

  public void akka$stream$impl$Pump$$currentAction_$eq(scala.Function0<scala.runtime.BoxedUnit>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #44                 // Field akka$stream$impl$Pump$$currentAction:Lscala/Function0;
       5: return

  public final akka.stream.impl.TransferPhase completedPhase();
    Code:
       0: aload_0
       1: getfield      #49                 // Field completedPhase:Lakka/stream/impl/TransferPhase;
       4: areturn

  public final void akka$stream$impl$Pump$_setter_$completedPhase_$eq(akka.stream.impl.TransferPhase);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #49                 // Field completedPhase:Lakka/stream/impl/TransferPhase;
       5: return

  public final void initialPhase(int, akka.stream.impl.TransferPhase);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #58                 // Method akka/stream/impl/Pump$class.initialPhase:(Lakka/stream/impl/Pump;ILakka/stream/impl/TransferPhase;)V
       6: return

  public final void waitForUpstreams(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #66                 // Method akka/stream/impl/Pump$class.waitForUpstreams:(Lakka/stream/impl/Pump;I)V
       5: return

  public void gotUpstreamSubscription();
    Code:
       0: aload_0
       1: invokestatic  #71                 // Method akka/stream/impl/Pump$class.gotUpstreamSubscription:(Lakka/stream/impl/Pump;)V
       4: return

  public final void nextPhase(akka.stream.impl.TransferPhase);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #75                 // Method akka/stream/impl/Pump$class.nextPhase:(Lakka/stream/impl/Pump;Lakka/stream/impl/TransferPhase;)V
       5: return

  public final boolean isPumpFinished();
    Code:
       0: aload_0
       1: invokestatic  #81                 // Method akka/stream/impl/Pump$class.isPumpFinished:(Lakka/stream/impl/Pump;)Z
       4: ireturn

  public final void pump();
    Code:
       0: aload_0
       1: invokestatic  #84                 // Method akka/stream/impl/Pump$class.pump:(Lakka/stream/impl/Pump;)V
       4: return

  public akka.event.LoggingAdapter akka$actor$ActorLogging$$_log();
    Code:
       0: aload_0
       1: getfield      #87                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$actor$ActorLogging$$_log_$eq(akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #87                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       5: return

  public akka.event.LoggingAdapter log();
    Code:
       0: aload_0
       1: invokestatic  #95                 // Method akka/actor/ActorLogging$class.log:(Lakka/actor/ActorLogging;)Lakka/event/LoggingAdapter;
       4: areturn

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #98                 // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #101                // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #98                 // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #101                // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #111                // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #116                // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #124                // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #127                // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #132                // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #141                // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokestatic  #146                // Method akka/actor/Actor$class.supervisorStrategy:(Lakka/actor/Actor;)Lakka/actor/SupervisorStrategy;
       4: areturn

  public void preStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #151                // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #154                // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #159                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public akka.stream.ActorMaterializerSettings settings();
    Code:
       0: aload_0
       1: getfield      #162                // Field settings:Lakka/stream/ActorMaterializerSettings;
       4: areturn

  public akka.stream.impl.Inputs primaryInputs();
    Code:
       0: aload_0
       1: getfield      #165                // Field primaryInputs:Lakka/stream/impl/Inputs;
       4: areturn

  public akka.stream.impl.Outputs primaryOutputs();
    Code:
       0: aload_0
       1: getfield      #168                // Field primaryOutputs:Lakka/stream/impl/Outputs;
       4: areturn

  public final akka.stream.impl.ExposedPublisherReceive receive();
    Code:
       0: new           #171                // class akka/stream/impl/ActorProcessorImpl$$anon$2
       3: dup
       4: aload_0
       5: invokespecial #175                // Method akka/stream/impl/ActorProcessorImpl$$anon$2."<init>":(Lakka/stream/impl/ActorProcessorImpl;)V
       8: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> activeReceive();
    Code:
       0: aload_0
       1: invokevirtual #179                // Method primaryInputs:()Lakka/stream/impl/Inputs;
       4: invokeinterface #185,  1          // InterfaceMethod akka/stream/impl/Inputs.subreceive:()Lakka/stream/impl/SubReceive;
       9: aload_0
      10: invokevirtual #187                // Method primaryOutputs:()Lakka/stream/impl/Outputs;
      13: invokeinterface #190,  1          // InterfaceMethod akka/stream/impl/Outputs.subreceive:()Lakka/stream/impl/SubReceive;
      18: invokevirtual #196                // Method akka/stream/impl/SubReceive.orElse:(Lscala/PartialFunction;)Lscala/PartialFunction;
      21: areturn

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #200                // Method fail:(Ljava/lang/Throwable;)V
       5: return

  public void fail(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #203                // Method settings:()Lakka/stream/ActorMaterializerSettings;
       4: invokevirtual #208                // Method akka/stream/ActorMaterializerSettings.debugLogging:()Z
       7: ifeq          25
      10: aload_0
      11: invokevirtual #210                // Method log:()Lakka/event/LoggingAdapter;
      14: ldc           #212                // String fail due to: {}
      16: aload_1
      17: invokevirtual #218                // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      20: invokeinterface #224,  3          // InterfaceMethod akka/event/LoggingAdapter.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      25: aload_0
      26: invokevirtual #179                // Method primaryInputs:()Lakka/stream/impl/Inputs;
      29: invokeinterface #227,  1          // InterfaceMethod akka/stream/impl/Inputs.cancel:()V
      34: aload_0
      35: invokevirtual #187                // Method primaryOutputs:()Lakka/stream/impl/Outputs;
      38: aload_1
      39: invokeinterface #230,  2          // InterfaceMethod akka/stream/impl/Outputs.error:(Ljava/lang/Throwable;)V
      44: aload_0
      45: invokevirtual #232                // Method context:()Lakka/actor/ActorContext;
      48: aload_0
      49: invokevirtual #234                // Method self:()Lakka/actor/ActorRef;
      52: invokeinterface #239,  2          // InterfaceMethod akka/actor/ActorContext.stop:(Lakka/actor/ActorRef;)V
      57: return

  public void pumpFinished();
    Code:
       0: aload_0
       1: invokevirtual #179                // Method primaryInputs:()Lakka/stream/impl/Inputs;
       4: invokeinterface #227,  1          // InterfaceMethod akka/stream/impl/Inputs.cancel:()V
       9: aload_0
      10: invokevirtual #187                // Method primaryOutputs:()Lakka/stream/impl/Outputs;
      13: invokeinterface #243,  1          // InterfaceMethod akka/stream/impl/Outputs.complete:()V
      18: aload_0
      19: invokevirtual #232                // Method context:()Lakka/actor/ActorContext;
      22: aload_0
      23: invokevirtual #234                // Method self:()Lakka/actor/ActorRef;
      26: invokeinterface #239,  2          // InterfaceMethod akka/actor/ActorContext.stop:(Lakka/actor/ActorRef;)V
      31: return

  public void pumpFailed(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #200                // Method fail:(Ljava/lang/Throwable;)V
       5: return

  public void postStop();
    Code:
       0: aload_0
       1: invokevirtual #179                // Method primaryInputs:()Lakka/stream/impl/Inputs;
       4: invokeinterface #227,  1          // InterfaceMethod akka/stream/impl/Inputs.cancel:()V
       9: aload_0
      10: invokevirtual #187                // Method primaryOutputs:()Lakka/stream/impl/Outputs;
      13: new           #247                // class akka/stream/AbruptTerminationException
      16: dup
      17: aload_0
      18: invokevirtual #234                // Method self:()Lakka/actor/ActorRef;
      21: invokespecial #249                // Method akka/stream/AbruptTerminationException."<init>":(Lakka/actor/ActorRef;)V
      24: invokeinterface #230,  2          // InterfaceMethod akka/stream/impl/Outputs.error:(Ljava/lang/Throwable;)V
      29: return

  public void postRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #252                // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: new           #254                // class java/lang/IllegalStateException
       8: dup
       9: ldc_w         #256                // String This actor cannot be restarted
      12: aload_1
      13: invokespecial #259                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      16: athrow

  public final scala.PartialFunction receive();
    Code:
       0: aload_0
       1: invokevirtual #261                // Method receive:()Lakka/stream/impl/ExposedPublisherReceive;
       4: areturn

  public akka.stream.impl.ActorProcessorImpl(akka.stream.ActorMaterializerSettings);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #162                // Field settings:Lakka/stream/ActorMaterializerSettings;
       5: aload_0
       6: invokespecial #264                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #267                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      13: aload_0
      14: invokestatic  #270                // Method akka/actor/ActorLogging$class.$init$:(Lakka/actor/ActorLogging;)V
      17: aload_0
      18: invokestatic  #272                // Method akka/stream/impl/Pump$class.$init$:(Lakka/stream/impl/Pump;)V
      21: aload_0
      22: new           #274                // class akka/stream/impl/ActorProcessorImpl$$anon$1
      25: dup
      26: aload_0
      27: invokespecial #275                // Method akka/stream/impl/ActorProcessorImpl$$anon$1."<init>":(Lakka/stream/impl/ActorProcessorImpl;)V
      30: putfield      #165                // Field primaryInputs:Lakka/stream/impl/Inputs;
      33: aload_0
      34: new           #277                // class akka/stream/impl/SimpleOutputs
      37: dup
      38: aload_0
      39: invokevirtual #234                // Method self:()Lakka/actor/ActorRef;
      42: aload_0
      43: invokespecial #280                // Method akka/stream/impl/SimpleOutputs."<init>":(Lakka/actor/ActorRef;Lakka/stream/impl/Pump;)V
      46: putfield      #168                // Field primaryOutputs:Lakka/stream/impl/Outputs;
      49: return
}
