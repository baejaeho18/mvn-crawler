Compiled from "ActorProcessor.scala"
public class akka.stream.impl.SimpleOutputs implements akka.stream.impl.DefaultOutputTransferStates {
  private final akka.actor.ActorRef actor;

  private final akka.stream.impl.Pump pump;

  private akka.stream.impl.ActorPublisher<java.lang.Object> exposedPublisher;

  private org.reactivestreams.Subscriber<java.lang.Object> subscriber;

  private long downstreamDemand;

  private boolean downstreamCompleted;

  private final akka.stream.impl.SubReceive _subreceive;

  private final akka.stream.impl.TransferState NeedsDemand;

  public akka.stream.impl.TransferState NeedsDemand();
    Code:
       0: aload_0
       1: getfield      #31                 // Field NeedsDemand:Lakka/stream/impl/TransferState;
       4: areturn

  public void akka$stream$impl$DefaultOutputTransferStates$_setter_$NeedsDemand_$eq(akka.stream.impl.TransferState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #31                 // Field NeedsDemand:Lakka/stream/impl/TransferState;
       5: return

  public akka.stream.impl.TransferState NeedsDemandOrCancel();
    Code:
       0: aload_0
       1: invokestatic  #42                 // Method akka/stream/impl/DefaultOutputTransferStates$class.NeedsDemandOrCancel:(Lakka/stream/impl/DefaultOutputTransferStates;)Lakka/stream/impl/TransferState;
       4: areturn

  public boolean isOpen();
    Code:
       0: aload_0
       1: invokestatic  #49                 // Method akka/stream/impl/Outputs$class.isOpen:(Lakka/stream/impl/Outputs;)Z
       4: ireturn

  public akka.actor.ActorRef actor();
    Code:
       0: aload_0
       1: getfield      #52                 // Field actor:Lakka/actor/ActorRef;
       4: areturn

  public akka.stream.impl.Pump pump();
    Code:
       0: aload_0
       1: getfield      #55                 // Field pump:Lakka/stream/impl/Pump;
       4: areturn

  public akka.stream.impl.ActorPublisher<java.lang.Object> exposedPublisher();
    Code:
       0: aload_0
       1: getfield      #58                 // Field exposedPublisher:Lakka/stream/impl/ActorPublisher;
       4: areturn

  public void exposedPublisher_$eq(akka.stream.impl.ActorPublisher<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #58                 // Field exposedPublisher:Lakka/stream/impl/ActorPublisher;
       5: return

  public org.reactivestreams.Subscriber<java.lang.Object> subscriber();
    Code:
       0: aload_0
       1: getfield      #63                 // Field subscriber:Lorg/reactivestreams/Subscriber;
       4: areturn

  public void subscriber_$eq(org.reactivestreams.Subscriber<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #63                 // Field subscriber:Lorg/reactivestreams/Subscriber;
       5: return

  public long downstreamDemand();
    Code:
       0: aload_0
       1: getfield      #68                 // Field downstreamDemand:J
       4: lreturn

  public void downstreamDemand_$eq(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #68                 // Field downstreamDemand:J
       5: return

  public boolean downstreamCompleted();
    Code:
       0: aload_0
       1: getfield      #72                 // Field downstreamCompleted:Z
       4: ireturn

  public void downstreamCompleted_$eq(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #72                 // Field downstreamCompleted:Z
       5: return

  public boolean demandAvailable();
    Code:
       0: aload_0
       1: invokevirtual #77                 // Method downstreamDemand:()J
       4: lconst_0
       5: lcmp
       6: ifle          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public long demandCount();
    Code:
       0: aload_0
       1: invokevirtual #77                 // Method downstreamDemand:()J
       4: lreturn

  public akka.stream.impl.SubReceive subreceive();
    Code:
       0: aload_0
       1: invokespecial #82                 // Method _subreceive:()Lakka/stream/impl/SubReceive;
       4: areturn

  private akka.stream.impl.SubReceive _subreceive();
    Code:
       0: aload_0
       1: getfield      #84                 // Field _subreceive:Lakka/stream/impl/SubReceive;
       4: areturn

  public boolean isSubscribed();
    Code:
       0: aload_0
       1: invokevirtual #87                 // Method subscriber:()Lorg/reactivestreams/Subscriber;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void enqueueOutputElement(java.lang.Object);
    Code:
       0: getstatic     #95                 // Field akka/stream/impl/ReactiveStreamsCompliance$.MODULE$:Lakka/stream/impl/ReactiveStreamsCompliance$;
       3: aload_1
       4: invokevirtual #98                 // Method akka/stream/impl/ReactiveStreamsCompliance$.requireNonNullElement:(Ljava/lang/Object;)V
       7: aload_0
       8: aload_0
       9: invokevirtual #77                 // Method downstreamDemand:()J
      12: lconst_1
      13: lsub
      14: invokevirtual #100                // Method downstreamDemand_$eq:(J)V
      17: getstatic     #95                 // Field akka/stream/impl/ReactiveStreamsCompliance$.MODULE$:Lakka/stream/impl/ReactiveStreamsCompliance$;
      20: aload_0
      21: invokevirtual #87                 // Method subscriber:()Lorg/reactivestreams/Subscriber;
      24: aload_1
      25: invokevirtual #104                // Method akka/stream/impl/ReactiveStreamsCompliance$.tryOnNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)V
      28: return

  public void complete();
    Code:
       0: aload_0
       1: invokevirtual #110                // Method downstreamCompleted:()Z
       4: ifne          46
       7: aload_0
       8: iconst_1
       9: invokevirtual #112                // Method downstreamCompleted_$eq:(Z)V
      12: aload_0
      13: invokevirtual #114                // Method exposedPublisher:()Lakka/stream/impl/ActorPublisher;
      16: ifnull        29
      19: aload_0
      20: invokevirtual #114                // Method exposedPublisher:()Lakka/stream/impl/ActorPublisher;
      23: getstatic     #119                // Field scala/None$.MODULE$:Lscala/None$;
      26: invokevirtual #125                // Method akka/stream/impl/ActorPublisher.shutdown:(Lscala/Option;)V
      29: aload_0
      30: invokevirtual #87                 // Method subscriber:()Lorg/reactivestreams/Subscriber;
      33: ifnull        46
      36: getstatic     #95                 // Field akka/stream/impl/ReactiveStreamsCompliance$.MODULE$:Lakka/stream/impl/ReactiveStreamsCompliance$;
      39: aload_0
      40: invokevirtual #87                 // Method subscriber:()Lorg/reactivestreams/Subscriber;
      43: invokevirtual #128                // Method akka/stream/impl/ReactiveStreamsCompliance$.tryOnComplete:(Lorg/reactivestreams/Subscriber;)V
      46: return

  public void cancel();
    Code:
       0: aload_0
       1: invokevirtual #110                // Method downstreamCompleted:()Z
       4: ifne          29
       7: aload_0
       8: iconst_1
       9: invokevirtual #112                // Method downstreamCompleted_$eq:(Z)V
      12: aload_0
      13: invokevirtual #114                // Method exposedPublisher:()Lakka/stream/impl/ActorPublisher;
      16: ifnull        29
      19: aload_0
      20: invokevirtual #114                // Method exposedPublisher:()Lakka/stream/impl/ActorPublisher;
      23: getstatic     #119                // Field scala/None$.MODULE$:Lscala/None$;
      26: invokevirtual #125                // Method akka/stream/impl/ActorPublisher.shutdown:(Lscala/Option;)V
      29: return

  public void error(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #110                // Method downstreamCompleted:()Z
       4: ifne          59
       7: aload_0
       8: iconst_1
       9: invokevirtual #112                // Method downstreamCompleted_$eq:(Z)V
      12: aload_0
      13: invokevirtual #114                // Method exposedPublisher:()Lakka/stream/impl/ActorPublisher;
      16: ifnull        34
      19: aload_0
      20: invokevirtual #114                // Method exposedPublisher:()Lakka/stream/impl/ActorPublisher;
      23: new           #133                // class scala/Some
      26: dup
      27: aload_1
      28: invokespecial #136                // Method scala/Some."<init>":(Ljava/lang/Object;)V
      31: invokevirtual #125                // Method akka/stream/impl/ActorPublisher.shutdown:(Lscala/Option;)V
      34: aload_0
      35: invokevirtual #87                 // Method subscriber:()Lorg/reactivestreams/Subscriber;
      38: ifnull        59
      41: aload_1
      42: instanceof    #138                // class akka/stream/impl/ReactiveStreamsCompliance$SpecViolation
      45: ifne          59
      48: getstatic     #95                 // Field akka/stream/impl/ReactiveStreamsCompliance$.MODULE$:Lakka/stream/impl/ReactiveStreamsCompliance$;
      51: aload_0
      52: invokevirtual #87                 // Method subscriber:()Lorg/reactivestreams/Subscriber;
      55: aload_1
      56: invokevirtual #142                // Method akka/stream/impl/ReactiveStreamsCompliance$.tryOnError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      59: return

  public boolean isClosed();
    Code:
       0: aload_0
       1: invokevirtual #110                // Method downstreamCompleted:()Z
       4: ifeq          18
       7: aload_0
       8: invokevirtual #87                 // Method subscriber:()Lorg/reactivestreams/Subscriber;
      11: ifnull        18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public org.reactivestreams.Subscription createSubscription();
    Code:
       0: new           #149                // class akka/stream/impl/ActorSubscription
       3: dup
       4: aload_0
       5: invokevirtual #151                // Method actor:()Lakka/actor/ActorRef;
       8: aload_0
       9: invokevirtual #87                 // Method subscriber:()Lorg/reactivestreams/Subscriber;
      12: invokespecial #154                // Method akka/stream/impl/ActorSubscription."<init>":(Lakka/actor/ActorRef;Lorg/reactivestreams/Subscriber;)V
      15: areturn

  public void akka$stream$impl$SimpleOutputs$$subscribePending(scala.collection.Seq<org.reactivestreams.Subscriber<java.lang.Object>>);
    Code:
       0: aload_1
       1: new           #158                // class akka/stream/impl/SimpleOutputs$$anonfun$akka$stream$impl$SimpleOutputs$$subscribePending$1
       4: dup
       5: aload_0
       6: invokespecial #161                // Method akka/stream/impl/SimpleOutputs$$anonfun$akka$stream$impl$SimpleOutputs$$subscribePending$1."<init>":(Lakka/stream/impl/SimpleOutputs;)V
       9: invokeinterface #167,  2          // InterfaceMethod scala/collection/Seq.foreach:(Lscala/Function1;)V
      14: return

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> waitingExposedPublisher();
    Code:
       0: new           #173                // class akka/stream/impl/SimpleOutputs$$anonfun$waitingExposedPublisher$1
       3: dup
       4: aload_0
       5: invokespecial #174                // Method akka/stream/impl/SimpleOutputs$$anonfun$waitingExposedPublisher$1."<init>":(Lakka/stream/impl/SimpleOutputs;)V
       8: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> downstreamRunning();
    Code:
       0: new           #177                // class akka/stream/impl/SimpleOutputs$$anonfun$downstreamRunning$1
       3: dup
       4: aload_0
       5: invokespecial #178                // Method akka/stream/impl/SimpleOutputs$$anonfun$downstreamRunning$1."<init>":(Lakka/stream/impl/SimpleOutputs;)V
       8: areturn

  public akka.stream.impl.SimpleOutputs(akka.actor.ActorRef, akka.stream.impl.Pump);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #52                 // Field actor:Lakka/actor/ActorRef;
       5: aload_0
       6: aload_2
       7: putfield      #55                 // Field pump:Lakka/stream/impl/Pump;
      10: aload_0
      11: invokespecial #181                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #185                // Method akka/stream/impl/Outputs$class.$init$:(Lakka/stream/impl/Outputs;)V
      18: aload_0
      19: invokestatic  #188                // Method akka/stream/impl/DefaultOutputTransferStates$class.$init$:(Lakka/stream/impl/DefaultOutputTransferStates;)V
      22: aload_0
      23: lconst_0
      24: putfield      #68                 // Field downstreamDemand:J
      27: aload_0
      28: iconst_0
      29: putfield      #72                 // Field downstreamCompleted:Z
      32: aload_0
      33: new           #190                // class akka/stream/impl/SubReceive
      36: dup
      37: aload_0
      38: invokevirtual #192                // Method waitingExposedPublisher:()Lscala/PartialFunction;
      41: invokespecial #195                // Method akka/stream/impl/SubReceive."<init>":(Lscala/PartialFunction;)V
      44: putfield      #84                 // Field _subreceive:Lakka/stream/impl/SubReceive;
      47: return
}
