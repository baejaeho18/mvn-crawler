Compiled from "CompletedPublishers.scala"
public class akka.stream.impl.MaybePublisher$MaybeSubscription implements org.reactivestreams.Subscription {
  public final org.reactivestreams.Subscriber<? super T> akka$stream$impl$MaybePublisher$MaybeSubscription$$subscriber;

  private boolean done;

  public final akka.stream.impl.MaybePublisher $outer;

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #18                 // Field done:Z
       5: aload_0
       6: invokevirtual #22                 // Method akka$stream$impl$MaybePublisher$MaybeSubscription$$$outer:()Lakka/stream/impl/MaybePublisher;
       9: invokevirtual #28                 // Method akka/stream/impl/MaybePublisher.promise:()Lscala/concurrent/Promise;
      12: getstatic     #34                 // Field scala/None$.MODULE$:Lscala/None$;
      15: invokeinterface #40,  2           // InterfaceMethod scala/concurrent/Promise.trySuccess:(Ljava/lang/Object;)Z
      20: pop
      21: return

  public void request(long);
    Code:
       0: lload_1
       1: lconst_1
       2: lcmp
       3: ifge          16
       6: getstatic     #49                 // Field akka/stream/impl/ReactiveStreamsCompliance$.MODULE$:Lakka/stream/impl/ReactiveStreamsCompliance$;
       9: aload_0
      10: getfield      #51                 // Field akka$stream$impl$MaybePublisher$MaybeSubscription$$subscriber:Lorg/reactivestreams/Subscriber;
      13: invokevirtual #55                 // Method akka/stream/impl/ReactiveStreamsCompliance$.rejectDueToNonPositiveDemand:(Lorg/reactivestreams/Subscriber;)V
      16: aload_0
      17: getfield      #18                 // Field done:Z
      20: ifne          60
      23: aload_0
      24: iconst_1
      25: putfield      #18                 // Field done:Z
      28: aload_0
      29: invokevirtual #22                 // Method akka$stream$impl$MaybePublisher$MaybeSubscription$$$outer:()Lakka/stream/impl/MaybePublisher;
      32: invokevirtual #28                 // Method akka/stream/impl/MaybePublisher.promise:()Lscala/concurrent/Promise;
      35: invokeinterface #59,  1           // InterfaceMethod scala/concurrent/Promise.future:()Lscala/concurrent/Future;
      40: new           #61                 // class akka/stream/impl/MaybePublisher$MaybeSubscription$$anonfun$request$1
      43: dup
      44: aload_0
      45: invokespecial #65                 // Method akka/stream/impl/MaybePublisher$MaybeSubscription$$anonfun$request$1."<init>":(Lakka/stream/impl/MaybePublisher$MaybeSubscription;)V
      48: aload_0
      49: invokevirtual #22                 // Method akka$stream$impl$MaybePublisher$MaybeSubscription$$$outer:()Lakka/stream/impl/MaybePublisher;
      52: getfield      #69                 // Field akka/stream/impl/MaybePublisher.akka$stream$impl$MaybePublisher$$ec:Lscala/concurrent/ExecutionContext;
      55: invokeinterface #75,  3           // InterfaceMethod scala/concurrent/Future.foreach:(Lscala/Function1;Lscala/concurrent/ExecutionContext;)V
      60: return

  public akka.stream.impl.MaybePublisher akka$stream$impl$MaybePublisher$MaybeSubscription$$$outer();
    Code:
       0: aload_0
       1: getfield      #79                 // Field $outer:Lakka/stream/impl/MaybePublisher;
       4: areturn

  public akka.stream.impl.MaybePublisher$MaybeSubscription(akka.stream.impl.MaybePublisher<T>, org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #51                 // Field akka$stream$impl$MaybePublisher$MaybeSubscription$$subscriber:Lorg/reactivestreams/Subscriber;
       5: aload_1
       6: ifnonnull     11
       9: aconst_null
      10: athrow
      11: aload_0
      12: aload_1
      13: putfield      #79                 // Field $outer:Lakka/stream/impl/MaybePublisher;
      16: aload_0
      17: invokespecial #82                 // Method java/lang/Object."<init>":()V
      20: aload_0
      21: iconst_0
      22: putfield      #18                 // Field done:Z
      25: return
}
