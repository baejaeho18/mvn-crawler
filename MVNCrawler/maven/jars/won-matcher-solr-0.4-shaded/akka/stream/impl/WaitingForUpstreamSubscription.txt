Compiled from "Transfer.scala"
public class akka.stream.impl.WaitingForUpstreamSubscription implements akka.stream.impl.TransferState,scala.Product,scala.Serializable {
  private final int remaining;

  private final akka.stream.impl.TransferPhase andThen;

  public static scala.Option<scala.Tuple2<java.lang.Object, akka.stream.impl.TransferPhase>> unapply(akka.stream.impl.WaitingForUpstreamSubscription);
    Code:
       0: getstatic     #22                 // Field akka/stream/impl/WaitingForUpstreamSubscription$.MODULE$:Lakka/stream/impl/WaitingForUpstreamSubscription$;
       3: aload_0
       4: invokevirtual #24                 // Method akka/stream/impl/WaitingForUpstreamSubscription$.unapply:(Lakka/stream/impl/WaitingForUpstreamSubscription;)Lscala/Option;
       7: areturn

  public static akka.stream.impl.WaitingForUpstreamSubscription apply(int, akka.stream.impl.TransferPhase);
    Code:
       0: getstatic     #22                 // Field akka/stream/impl/WaitingForUpstreamSubscription$.MODULE$:Lakka/stream/impl/WaitingForUpstreamSubscription$;
       3: iload_0
       4: aload_1
       5: invokevirtual #28                 // Method akka/stream/impl/WaitingForUpstreamSubscription$.apply:(ILakka/stream/impl/TransferPhase;)Lakka/stream/impl/WaitingForUpstreamSubscription;
       8: areturn

  public static scala.Function1<scala.Tuple2<java.lang.Object, akka.stream.impl.TransferPhase>, akka.stream.impl.WaitingForUpstreamSubscription> tupled();
    Code:
       0: getstatic     #22                 // Field akka/stream/impl/WaitingForUpstreamSubscription$.MODULE$:Lakka/stream/impl/WaitingForUpstreamSubscription$;
       3: invokevirtual #32                 // Method akka/stream/impl/WaitingForUpstreamSubscription$.tupled:()Lscala/Function1;
       6: areturn

  public static scala.Function1<java.lang.Object, scala.Function1<akka.stream.impl.TransferPhase, akka.stream.impl.WaitingForUpstreamSubscription>> curried();
    Code:
       0: getstatic     #22                 // Field akka/stream/impl/WaitingForUpstreamSubscription$.MODULE$:Lakka/stream/impl/WaitingForUpstreamSubscription$;
       3: invokevirtual #35                 // Method akka/stream/impl/WaitingForUpstreamSubscription$.curried:()Lscala/Function1;
       6: areturn

  public boolean isExecutable();
    Code:
       0: aload_0
       1: invokestatic  #46                 // Method akka/stream/impl/TransferState$class.isExecutable:(Lakka/stream/impl/TransferState;)Z
       4: ireturn

  public akka.stream.impl.TransferState $bar$bar(akka.stream.impl.TransferState);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #53                 // Method akka/stream/impl/TransferState$class.$bar$bar:(Lakka/stream/impl/TransferState;Lakka/stream/impl/TransferState;)Lakka/stream/impl/TransferState;
       5: areturn

  public akka.stream.impl.TransferState $amp$amp(akka.stream.impl.TransferState);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #58                 // Method akka/stream/impl/TransferState$class.$amp$amp:(Lakka/stream/impl/TransferState;Lakka/stream/impl/TransferState;)Lakka/stream/impl/TransferState;
       5: areturn

  public int remaining();
    Code:
       0: aload_0
       1: getfield      #61                 // Field remaining:I
       4: ireturn

  public akka.stream.impl.TransferPhase andThen();
    Code:
       0: aload_0
       1: getfield      #64                 // Field andThen:Lakka/stream/impl/TransferPhase;
       4: areturn

  public boolean isReady();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isCompleted();
    Code:
       0: iconst_0
       1: ireturn

  public akka.stream.impl.WaitingForUpstreamSubscription copy(int, akka.stream.impl.TransferPhase);
    Code:
       0: new           #2                  // class akka/stream/impl/WaitingForUpstreamSubscription
       3: dup
       4: iload_1
       5: aload_2
       6: invokespecial #71                 // Method "<init>":(ILakka/stream/impl/TransferPhase;)V
       9: areturn

  public int copy$default$1();
    Code:
       0: aload_0
       1: invokevirtual #74                 // Method remaining:()I
       4: ireturn

  public akka.stream.impl.TransferPhase copy$default$2();
    Code:
       0: aload_0
       1: invokevirtual #77                 // Method andThen:()Lakka/stream/impl/TransferPhase;
       4: areturn

  public java.lang.String productPrefix();
    Code:
       0: ldc           #81                 // String WaitingForUpstreamSubscription
       2: areturn

  public int productArity();
    Code:
       0: iconst_2
       1: ireturn

  public java.lang.Object productElement(int);
    Code:
       0: iload_1
       1: istore_2
       2: iload_2
       3: tableswitch   { // 0 to 1
                     0: 46
                     1: 39
               default: 24
          }
      24: new           #86                 // class java/lang/IndexOutOfBoundsException
      27: dup
      28: iload_1
      29: invokestatic  #92                 // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      32: invokevirtual #95                 // Method java/lang/Object.toString:()Ljava/lang/String;
      35: invokespecial #98                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_0
      40: invokevirtual #77                 // Method andThen:()Lakka/stream/impl/TransferPhase;
      43: goto          53
      46: aload_0
      47: invokevirtual #74                 // Method remaining:()I
      50: invokestatic  #92                 // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      53: areturn

  public scala.collection.Iterator<java.lang.Object> productIterator();
    Code:
       0: getstatic     #106                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #110                // Method scala/runtime/ScalaRunTime$.typedProductIterator:(Lscala/Product;)Lscala/collection/Iterator;
       7: areturn

  public boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class akka/stream/impl/WaitingForUpstreamSubscription
       4: ireturn

  public int hashCode();
    Code:
       0: ldc           #115                // int -889275714
       2: istore_1
       3: iload_1
       4: aload_0
       5: invokevirtual #74                 // Method remaining:()I
       8: invokestatic  #121                // Method scala/runtime/Statics.mix:(II)I
      11: istore_1
      12: iload_1
      13: aload_0
      14: invokevirtual #77                 // Method andThen:()Lakka/stream/impl/TransferPhase;
      17: invokestatic  #125                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
      20: invokestatic  #121                // Method scala/runtime/Statics.mix:(II)I
      23: istore_1
      24: iload_1
      25: iconst_2
      26: invokestatic  #128                // Method scala/runtime/Statics.finalizeHash:(II)I
      29: ireturn

  public java.lang.String toString();
    Code:
       0: getstatic     #106                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #132                // Method scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
       7: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     92
       5: aload_1
       6: astore_2
       7: aload_2
       8: instanceof    #2                  // class akka/stream/impl/WaitingForUpstreamSubscription
      11: ifeq          19
      14: iconst_1
      15: istore_3
      16: goto          21
      19: iconst_0
      20: istore_3
      21: iload_3
      22: ifeq          96
      25: aload_1
      26: checkcast     #2                  // class akka/stream/impl/WaitingForUpstreamSubscription
      29: astore        4
      31: aload_0
      32: invokevirtual #74                 // Method remaining:()I
      35: aload         4
      37: invokevirtual #74                 // Method remaining:()I
      40: if_icmpne     88
      43: aload_0
      44: invokevirtual #77                 // Method andThen:()Lakka/stream/impl/TransferPhase;
      47: aload         4
      49: invokevirtual #77                 // Method andThen:()Lakka/stream/impl/TransferPhase;
      52: astore        5
      54: dup
      55: ifnonnull     67
      58: pop
      59: aload         5
      61: ifnull        75
      64: goto          88
      67: aload         5
      69: invokevirtual #135                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      72: ifeq          88
      75: aload         4
      77: aload_0
      78: invokevirtual #137                // Method canEqual:(Ljava/lang/Object;)Z
      81: ifeq          88
      84: iconst_1
      85: goto          89
      88: iconst_0
      89: ifeq          96
      92: iconst_1
      93: goto          97
      96: iconst_0
      97: ireturn

  public akka.stream.impl.WaitingForUpstreamSubscription(int, akka.stream.impl.TransferPhase);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #61                 // Field remaining:I
       5: aload_0
       6: aload_2
       7: putfield      #64                 // Field andThen:Lakka/stream/impl/TransferPhase;
      10: aload_0
      11: invokespecial #142                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #146                // Method akka/stream/impl/TransferState$class.$init$:(Lakka/stream/impl/TransferState;)V
      18: aload_0
      19: invokestatic  #151                // Method scala/Product$class.$init$:(Lscala/Product;)V
      22: return
}
