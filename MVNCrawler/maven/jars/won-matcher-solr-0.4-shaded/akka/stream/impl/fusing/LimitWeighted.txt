Compiled from "Ops.scala"
public final class akka.stream.impl.fusing.LimitWeighted<T> extends akka.stream.stage.GraphStage<akka.stream.FlowShape<T, T>> implements scala.Product, scala.Serializable {
  private final long n;

  private final scala.Function1<T, java.lang.Object> costFn;

  private final akka.stream.Inlet<T> in;

  private final akka.stream.Outlet<T> out;

  private final akka.stream.FlowShape<T, T> shape;

  public static <T> scala.Option<scala.Tuple2<java.lang.Object, scala.Function1<T, java.lang.Object>>> unapply(akka.stream.impl.fusing.LimitWeighted<T>);
    Code:
       0: getstatic     #21                 // Field akka/stream/impl/fusing/LimitWeighted$.MODULE$:Lakka/stream/impl/fusing/LimitWeighted$;
       3: aload_0
       4: invokevirtual #23                 // Method akka/stream/impl/fusing/LimitWeighted$.unapply:(Lakka/stream/impl/fusing/LimitWeighted;)Lscala/Option;
       7: areturn

  public static <T> akka.stream.impl.fusing.LimitWeighted<T> apply(long, scala.Function1<T, java.lang.Object>);
    Code:
       0: getstatic     #21                 // Field akka/stream/impl/fusing/LimitWeighted$.MODULE$:Lakka/stream/impl/fusing/LimitWeighted$;
       3: lload_0
       4: aload_2
       5: invokevirtual #27                 // Method akka/stream/impl/fusing/LimitWeighted$.apply:(JLscala/Function1;)Lakka/stream/impl/fusing/LimitWeighted;
       8: areturn

  public long n();
    Code:
       0: aload_0
       1: getfield      #44                 // Field n:J
       4: lreturn

  public scala.Function1<T, java.lang.Object> costFn();
    Code:
       0: aload_0
       1: getfield      #49                 // Field costFn:Lscala/Function1;
       4: areturn

  public akka.stream.Inlet<T> in();
    Code:
       0: aload_0
       1: getfield      #52                 // Field in:Lakka/stream/Inlet;
       4: areturn

  public akka.stream.Outlet<T> out();
    Code:
       0: aload_0
       1: getfield      #55                 // Field out:Lakka/stream/Outlet;
       4: areturn

  public akka.stream.FlowShape<T, T> shape();
    Code:
       0: aload_0
       1: getfield      #58                 // Field shape:Lakka/stream/FlowShape;
       4: areturn

  public akka.stream.Attributes initialAttributes();
    Code:
       0: getstatic     #65                 // Field akka/stream/impl/Stages$DefaultAttributes$.MODULE$:Lakka/stream/impl/Stages$DefaultAttributes$;
       3: invokevirtual #68                 // Method akka/stream/impl/Stages$DefaultAttributes$.limitWeighted:()Lakka/stream/Attributes;
       6: areturn

  public akka.stream.impl.fusing.SupervisedGraphStageLogic createLogic(akka.stream.Attributes);
    Code:
       0: new           #72                 // class akka/stream/impl/fusing/LimitWeighted$$anon$3
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #76                 // Method akka/stream/impl/fusing/LimitWeighted$$anon$3."<init>":(Lakka/stream/impl/fusing/LimitWeighted;Lakka/stream/Attributes;)V
       9: areturn

  public java.lang.String toString();
    Code:
       0: ldc           #82                 // String LimitWeighted
       2: areturn

  public <T> akka.stream.impl.fusing.LimitWeighted<T> copy(long, scala.Function1<T, java.lang.Object>);
    Code:
       0: new           #2                  // class akka/stream/impl/fusing/LimitWeighted
       3: dup
       4: lload_1
       5: aload_3
       6: invokespecial #86                 // Method "<init>":(JLscala/Function1;)V
       9: areturn

  public <T> long copy$default$1();
    Code:
       0: aload_0
       1: invokevirtual #89                 // Method n:()J
       4: lreturn

  public <T> scala.Function1<T, java.lang.Object> copy$default$2();
    Code:
       0: aload_0
       1: invokevirtual #92                 // Method costFn:()Lscala/Function1;
       4: areturn

  public java.lang.String productPrefix();
    Code:
       0: ldc           #82                 // String LimitWeighted
       2: areturn

  public int productArity();
    Code:
       0: iconst_2
       1: ireturn

  public java.lang.Object productElement(int);
    Code:
       0: iload_1
       1: istore_2
       2: iload_2
       3: tableswitch   { // 0 to 1
                     0: 46
                     1: 39
               default: 24
          }
      24: new           #99                 // class java/lang/IndexOutOfBoundsException
      27: dup
      28: iload_1
      29: invokestatic  #105                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      32: invokevirtual #109                // Method java/lang/Object.toString:()Ljava/lang/String;
      35: invokespecial #112                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_0
      40: invokevirtual #92                 // Method costFn:()Lscala/Function1;
      43: goto          53
      46: aload_0
      47: invokevirtual #89                 // Method n:()J
      50: invokestatic  #116                // Method scala/runtime/BoxesRunTime.boxToLong:(J)Ljava/lang/Long;
      53: areturn

  public scala.collection.Iterator<java.lang.Object> productIterator();
    Code:
       0: getstatic     #125                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #129                // Method scala/runtime/ScalaRunTime$.typedProductIterator:(Lscala/Product;)Lscala/collection/Iterator;
       7: areturn

  public boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class akka/stream/impl/fusing/LimitWeighted
       4: ireturn

  public int hashCode();
    Code:
       0: ldc           #134                // int -889275714
       2: istore_1
       3: iload_1
       4: aload_0
       5: invokevirtual #89                 // Method n:()J
       8: invokestatic  #140                // Method scala/runtime/Statics.longHash:(J)I
      11: invokestatic  #144                // Method scala/runtime/Statics.mix:(II)I
      14: istore_1
      15: iload_1
      16: aload_0
      17: invokevirtual #92                 // Method costFn:()Lscala/Function1;
      20: invokestatic  #148                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
      23: invokestatic  #144                // Method scala/runtime/Statics.mix:(II)I
      26: istore_1
      27: iload_1
      28: iconst_2
      29: invokestatic  #151                // Method scala/runtime/Statics.finalizeHash:(II)I
      32: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     84
       5: aload_1
       6: astore_2
       7: aload_2
       8: instanceof    #2                  // class akka/stream/impl/fusing/LimitWeighted
      11: ifeq          19
      14: iconst_1
      15: istore_3
      16: goto          21
      19: iconst_0
      20: istore_3
      21: iload_3
      22: ifeq          88
      25: aload_1
      26: checkcast     #2                  // class akka/stream/impl/fusing/LimitWeighted
      29: astore        4
      31: aload_0
      32: invokevirtual #89                 // Method n:()J
      35: aload         4
      37: invokevirtual #89                 // Method n:()J
      40: lcmp
      41: ifne          80
      44: aload_0
      45: invokevirtual #92                 // Method costFn:()Lscala/Function1;
      48: aload         4
      50: invokevirtual #92                 // Method costFn:()Lscala/Function1;
      53: astore        5
      55: dup
      56: ifnonnull     68
      59: pop
      60: aload         5
      62: ifnull        76
      65: goto          80
      68: aload         5
      70: invokevirtual #154                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      73: ifeq          80
      76: iconst_1
      77: goto          81
      80: iconst_0
      81: ifeq          88
      84: iconst_1
      85: goto          89
      88: iconst_0
      89: ireturn

  public akka.stream.stage.GraphStageLogic createLogic(akka.stream.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #159                // Method createLogic:(Lakka/stream/Attributes;)Lakka/stream/impl/fusing/SupervisedGraphStageLogic;
       5: areturn

  public akka.stream.Shape shape();
    Code:
       0: aload_0
       1: invokevirtual #162                // Method shape:()Lakka/stream/FlowShape;
       4: areturn

  public akka.stream.impl.fusing.LimitWeighted(long, scala.Function1<T, java.lang.Object>);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #44                 // Field n:J
       5: aload_0
       6: aload_3
       7: putfield      #49                 // Field costFn:Lscala/Function1;
      10: aload_0
      11: invokespecial #165                // Method akka/stream/stage/GraphStage."<init>":()V
      14: aload_0
      15: invokestatic  #171                // Method scala/Product$class.$init$:(Lscala/Product;)V
      18: aload_0
      19: getstatic     #176                // Field akka/stream/Inlet$.MODULE$:Lakka/stream/Inlet$;
      22: ldc           #178                // String LimitWeighted.in
      24: invokevirtual #181                // Method akka/stream/Inlet$.apply:(Ljava/lang/String;)Lakka/stream/Inlet;
      27: putfield      #52                 // Field in:Lakka/stream/Inlet;
      30: aload_0
      31: getstatic     #186                // Field akka/stream/Outlet$.MODULE$:Lakka/stream/Outlet$;
      34: ldc           #188                // String LimitWeighted.out
      36: invokevirtual #191                // Method akka/stream/Outlet$.apply:(Ljava/lang/String;)Lakka/stream/Outlet;
      39: putfield      #55                 // Field out:Lakka/stream/Outlet;
      42: aload_0
      43: new           #193                // class akka/stream/FlowShape
      46: dup
      47: aload_0
      48: invokevirtual #195                // Method in:()Lakka/stream/Inlet;
      51: aload_0
      52: invokevirtual #197                // Method out:()Lakka/stream/Outlet;
      55: invokespecial #200                // Method akka/stream/FlowShape."<init>":(Lakka/stream/Inlet;Lakka/stream/Outlet;)V
      58: putfield      #58                 // Field shape:Lakka/stream/FlowShape;
      61: return
}
