Compiled from "Ops.scala"
public final class akka.stream.impl.fusing.MapAsync<In, Out> extends akka.stream.stage.GraphStage<akka.stream.FlowShape<In, Out>> implements scala.Product, scala.Serializable {
  private final int parallelism;

  private final scala.Function1<In, scala.concurrent.Future<Out>> f;

  private final akka.stream.Inlet<In> akka$stream$impl$fusing$MapAsync$$in;

  private final akka.stream.Outlet<Out> akka$stream$impl$fusing$MapAsync$$out;

  private final akka.stream.FlowShape<In, Out> shape;

  public static <In, Out> scala.Option<scala.Tuple2<java.lang.Object, scala.Function1<In, scala.concurrent.Future<Out>>>> unapply(akka.stream.impl.fusing.MapAsync<In, Out>);
    Code:
       0: getstatic     #21                 // Field akka/stream/impl/fusing/MapAsync$.MODULE$:Lakka/stream/impl/fusing/MapAsync$;
       3: aload_0
       4: invokevirtual #23                 // Method akka/stream/impl/fusing/MapAsync$.unapply:(Lakka/stream/impl/fusing/MapAsync;)Lscala/Option;
       7: areturn

  public static <In, Out> akka.stream.impl.fusing.MapAsync<In, Out> apply(int, scala.Function1<In, scala.concurrent.Future<Out>>);
    Code:
       0: getstatic     #21                 // Field akka/stream/impl/fusing/MapAsync$.MODULE$:Lakka/stream/impl/fusing/MapAsync$;
       3: iload_0
       4: aload_1
       5: invokevirtual #27                 // Method akka/stream/impl/fusing/MapAsync$.apply:(ILscala/Function1;)Lakka/stream/impl/fusing/MapAsync;
       8: areturn

  public static scala.util.Failure<scala.runtime.Nothing$> NotYetThere();
    Code:
       0: getstatic     #21                 // Field akka/stream/impl/fusing/MapAsync$.MODULE$:Lakka/stream/impl/fusing/MapAsync$;
       3: invokevirtual #31                 // Method akka/stream/impl/fusing/MapAsync$.NotYetThere:()Lscala/util/Failure;
       6: areturn

  public int parallelism();
    Code:
       0: aload_0
       1: getfield      #48                 // Field parallelism:I
       4: ireturn

  public scala.Function1<In, scala.concurrent.Future<Out>> f();
    Code:
       0: aload_0
       1: getfield      #53                 // Field f:Lscala/Function1;
       4: areturn

  public akka.stream.Inlet<In> akka$stream$impl$fusing$MapAsync$$in();
    Code:
       0: aload_0
       1: getfield      #56                 // Field akka$stream$impl$fusing$MapAsync$$in:Lakka/stream/Inlet;
       4: areturn

  public akka.stream.Outlet<Out> akka$stream$impl$fusing$MapAsync$$out();
    Code:
       0: aload_0
       1: getfield      #59                 // Field akka$stream$impl$fusing$MapAsync$$out:Lakka/stream/Outlet;
       4: areturn

  public akka.stream.Attributes initialAttributes();
    Code:
       0: getstatic     #66                 // Field akka/stream/impl/Stages$DefaultAttributes$.MODULE$:Lakka/stream/impl/Stages$DefaultAttributes$;
       3: invokevirtual #69                 // Method akka/stream/impl/Stages$DefaultAttributes$.mapAsync:()Lakka/stream/Attributes;
       6: areturn

  public akka.stream.FlowShape<In, Out> shape();
    Code:
       0: aload_0
       1: getfield      #72                 // Field shape:Lakka/stream/FlowShape;
       4: areturn

  public akka.stream.stage.GraphStageLogic createLogic(akka.stream.Attributes);
    Code:
       0: new           #76                 // class akka/stream/impl/fusing/MapAsync$$anon$21
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #80                 // Method akka/stream/impl/fusing/MapAsync$$anon$21."<init>":(Lakka/stream/impl/fusing/MapAsync;Lakka/stream/Attributes;)V
       9: areturn

  public <In, Out> akka.stream.impl.fusing.MapAsync<In, Out> copy(int, scala.Function1<In, scala.concurrent.Future<Out>>);
    Code:
       0: new           #2                  // class akka/stream/impl/fusing/MapAsync
       3: dup
       4: iload_1
       5: aload_2
       6: invokespecial #86                 // Method "<init>":(ILscala/Function1;)V
       9: areturn

  public <In, Out> int copy$default$1();
    Code:
       0: aload_0
       1: invokevirtual #89                 // Method parallelism:()I
       4: ireturn

  public <In, Out> scala.Function1<In, scala.concurrent.Future<Out>> copy$default$2();
    Code:
       0: aload_0
       1: invokevirtual #92                 // Method f:()Lscala/Function1;
       4: areturn

  public java.lang.String productPrefix();
    Code:
       0: ldc           #96                 // String MapAsync
       2: areturn

  public int productArity();
    Code:
       0: iconst_2
       1: ireturn

  public java.lang.Object productElement(int);
    Code:
       0: iload_1
       1: istore_2
       2: iload_2
       3: tableswitch   { // 0 to 1
                     0: 46
                     1: 39
               default: 24
          }
      24: new           #101                // class java/lang/IndexOutOfBoundsException
      27: dup
      28: iload_1
      29: invokestatic  #107                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      32: invokevirtual #112                // Method java/lang/Object.toString:()Ljava/lang/String;
      35: invokespecial #115                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_0
      40: invokevirtual #92                 // Method f:()Lscala/Function1;
      43: goto          53
      46: aload_0
      47: invokevirtual #89                 // Method parallelism:()I
      50: invokestatic  #107                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      53: areturn

  public scala.collection.Iterator<java.lang.Object> productIterator();
    Code:
       0: getstatic     #123                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #127                // Method scala/runtime/ScalaRunTime$.typedProductIterator:(Lscala/Product;)Lscala/collection/Iterator;
       7: areturn

  public boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class akka/stream/impl/fusing/MapAsync
       4: ireturn

  public int hashCode();
    Code:
       0: ldc           #132                // int -889275714
       2: istore_1
       3: iload_1
       4: aload_0
       5: invokevirtual #89                 // Method parallelism:()I
       8: invokestatic  #138                // Method scala/runtime/Statics.mix:(II)I
      11: istore_1
      12: iload_1
      13: aload_0
      14: invokevirtual #92                 // Method f:()Lscala/Function1;
      17: invokestatic  #142                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
      20: invokestatic  #138                // Method scala/runtime/Statics.mix:(II)I
      23: istore_1
      24: iload_1
      25: iconst_2
      26: invokestatic  #145                // Method scala/runtime/Statics.finalizeHash:(II)I
      29: ireturn

  public java.lang.String toString();
    Code:
       0: getstatic     #123                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #149                // Method scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
       7: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     83
       5: aload_1
       6: astore_2
       7: aload_2
       8: instanceof    #2                  // class akka/stream/impl/fusing/MapAsync
      11: ifeq          19
      14: iconst_1
      15: istore_3
      16: goto          21
      19: iconst_0
      20: istore_3
      21: iload_3
      22: ifeq          87
      25: aload_1
      26: checkcast     #2                  // class akka/stream/impl/fusing/MapAsync
      29: astore        4
      31: aload_0
      32: invokevirtual #89                 // Method parallelism:()I
      35: aload         4
      37: invokevirtual #89                 // Method parallelism:()I
      40: if_icmpne     79
      43: aload_0
      44: invokevirtual #92                 // Method f:()Lscala/Function1;
      47: aload         4
      49: invokevirtual #92                 // Method f:()Lscala/Function1;
      52: astore        5
      54: dup
      55: ifnonnull     67
      58: pop
      59: aload         5
      61: ifnull        75
      64: goto          79
      67: aload         5
      69: invokevirtual #152                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      72: ifeq          79
      75: iconst_1
      76: goto          80
      79: iconst_0
      80: ifeq          87
      83: iconst_1
      84: goto          88
      87: iconst_0
      88: ireturn

  public akka.stream.Shape shape();
    Code:
       0: aload_0
       1: invokevirtual #157                // Method shape:()Lakka/stream/FlowShape;
       4: areturn

  public akka.stream.impl.fusing.MapAsync(int, scala.Function1<In, scala.concurrent.Future<Out>>);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #48                 // Field parallelism:I
       5: aload_0
       6: aload_2
       7: putfield      #53                 // Field f:Lscala/Function1;
      10: aload_0
      11: invokespecial #160                // Method akka/stream/stage/GraphStage."<init>":()V
      14: aload_0
      15: invokestatic  #166                // Method scala/Product$class.$init$:(Lscala/Product;)V
      18: aload_0
      19: getstatic     #171                // Field akka/stream/Inlet$.MODULE$:Lakka/stream/Inlet$;
      22: ldc           #173                // String MapAsync.in
      24: invokevirtual #176                // Method akka/stream/Inlet$.apply:(Ljava/lang/String;)Lakka/stream/Inlet;
      27: putfield      #56                 // Field akka$stream$impl$fusing$MapAsync$$in:Lakka/stream/Inlet;
      30: aload_0
      31: getstatic     #181                // Field akka/stream/Outlet$.MODULE$:Lakka/stream/Outlet$;
      34: ldc           #183                // String MapAsync.out
      36: invokevirtual #186                // Method akka/stream/Outlet$.apply:(Ljava/lang/String;)Lakka/stream/Outlet;
      39: putfield      #59                 // Field akka$stream$impl$fusing$MapAsync$$out:Lakka/stream/Outlet;
      42: aload_0
      43: new           #188                // class akka/stream/FlowShape
      46: dup
      47: aload_0
      48: invokevirtual #190                // Method akka$stream$impl$fusing$MapAsync$$in:()Lakka/stream/Inlet;
      51: aload_0
      52: invokevirtual #192                // Method akka$stream$impl$fusing$MapAsync$$out:()Lakka/stream/Outlet;
      55: invokespecial #195                // Method akka/stream/FlowShape."<init>":(Lakka/stream/Inlet;Lakka/stream/Outlet;)V
      58: putfield      #72                 // Field shape:Lakka/stream/FlowShape;
      61: return
}
