Compiled from "ActorGraphInterpreter.scala"
public class akka.stream.impl.fusing.ActorGraphInterpreter$BatchingActorInputBoundary extends akka.stream.impl.fusing.GraphInterpreter$UpstreamBoundaryStageLogic<java.lang.Object> {
  private final int size;

  private final int id;

  private org.reactivestreams.Subscription upstream;

  private final java.lang.Object[] inputBuffer;

  private int akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements;

  private int nextInputElementCursor;

  private boolean akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted;

  private boolean downstreamCanceled;

  private final int IndexMask;

  private int batchRemaining;

  private final akka.stream.Outlet<java.lang.Object> out;

  private org.reactivestreams.Subscription upstream();
    Code:
       0: aload_0
       1: getfield      #26                 // Field upstream:Lorg/reactivestreams/Subscription;
       4: areturn

  private void upstream_$eq(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #26                 // Field upstream:Lorg/reactivestreams/Subscription;
       5: return

  private java.lang.Object[] inputBuffer();
    Code:
       0: aload_0
       1: getfield      #34                 // Field inputBuffer:[Ljava/lang/Object;
       4: areturn

  public int akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements();
    Code:
       0: aload_0
       1: getfield      #37                 // Field akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements:I
       4: ireturn

  private void akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements_$eq(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #37                 // Field akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements:I
       5: return

  private int nextInputElementCursor();
    Code:
       0: aload_0
       1: getfield      #41                 // Field nextInputElementCursor:I
       4: ireturn

  private void nextInputElementCursor_$eq(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #41                 // Field nextInputElementCursor:I
       5: return

  public boolean akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted();
    Code:
       0: aload_0
       1: getfield      #45                 // Field akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted:Z
       4: ireturn

  private void akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted_$eq(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #45                 // Field akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted:Z
       5: return

  private boolean downstreamCanceled();
    Code:
       0: aload_0
       1: getfield      #49                 // Field downstreamCanceled:Z
       4: ireturn

  private void downstreamCanceled_$eq(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #49                 // Field downstreamCanceled:Z
       5: return

  private int IndexMask();
    Code:
       0: aload_0
       1: getfield      #52                 // Field IndexMask:I
       4: ireturn

  private int requestBatchSize();
    Code:
       0: getstatic     #59                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
       3: iconst_1
       4: aload_0
       5: invokespecial #61                 // Method inputBuffer:()[Ljava/lang/Object;
       8: arraylength
       9: iconst_2
      10: idiv
      11: invokevirtual #65                 // Method scala/math/package$.max:(II)I
      14: ireturn

  private int batchRemaining();
    Code:
       0: aload_0
       1: getfield      #67                 // Field batchRemaining:I
       4: ireturn

  private void batchRemaining_$eq(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #67                 // Field batchRemaining:I
       5: return

  public akka.stream.Outlet<java.lang.Object> out();
    Code:
       0: aload_0
       1: getfield      #71                 // Field out:Lakka/stream/Outlet;
       4: areturn

  public java.lang.Object akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$dequeue();
    Code:
       0: aload_0
       1: invokespecial #61                 // Method inputBuffer:()[Ljava/lang/Object;
       4: aload_0
       5: invokespecial #75                 // Method nextInputElementCursor:()I
       8: aaload
       9: astore_1
      10: getstatic     #80                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      13: aload_1
      14: ifnull        21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: new           #82                 // class akka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary$$anonfun$akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$dequeue$1
      25: dup
      26: aload_0
      27: invokespecial #86                 // Method akka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary$$anonfun$akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$dequeue$1."<init>":(Lakka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary;)V
      30: invokevirtual #90                 // Method scala/Predef$.require:(ZLscala/Function0;)V
      33: aload_0
      34: invokespecial #61                 // Method inputBuffer:()[Ljava/lang/Object;
      37: aload_0
      38: invokespecial #75                 // Method nextInputElementCursor:()I
      41: aconst_null
      42: aastore
      43: aload_0
      44: aload_0
      45: invokespecial #92                 // Method batchRemaining:()I
      48: iconst_1
      49: isub
      50: invokespecial #94                 // Method batchRemaining_$eq:(I)V
      53: aload_0
      54: invokespecial #92                 // Method batchRemaining:()I
      57: iconst_0
      58: if_icmpne     91
      61: aload_0
      62: invokevirtual #96                 // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted:()Z
      65: ifne          91
      68: getstatic     #101                // Field akka/stream/impl/ReactiveStreamsCompliance$.MODULE$:Lakka/stream/impl/ReactiveStreamsCompliance$;
      71: aload_0
      72: invokespecial #103                // Method upstream:()Lorg/reactivestreams/Subscription;
      75: aload_0
      76: invokespecial #105                // Method requestBatchSize:()I
      79: i2l
      80: invokevirtual #109                // Method akka/stream/impl/ReactiveStreamsCompliance$.tryRequest:(Lorg/reactivestreams/Subscription;J)V
      83: aload_0
      84: aload_0
      85: invokespecial #105                // Method requestBatchSize:()I
      88: invokespecial #94                 // Method batchRemaining_$eq:(I)V
      91: aload_0
      92: aload_0
      93: invokevirtual #111                // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements:()I
      96: iconst_1
      97: isub
      98: invokespecial #113                // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements_$eq:(I)V
     101: aload_0
     102: aload_0
     103: invokespecial #75                 // Method nextInputElementCursor:()I
     106: iconst_1
     107: iadd
     108: aload_0
     109: invokespecial #115                // Method IndexMask:()I
     112: iand
     113: invokespecial #117                // Method nextInputElementCursor_$eq:(I)V
     116: aload_1
     117: areturn

  private void clear();
    Code:
       0: aload_0
       1: invokespecial #61                 // Method inputBuffer:()[Ljava/lang/Object;
       4: iconst_0
       5: aload_0
       6: invokespecial #61                 // Method inputBuffer:()[Ljava/lang/Object;
       9: arraylength
      10: aconst_null
      11: invokestatic  #129                // Method java/util/Arrays.fill:([Ljava/lang/Object;IILjava/lang/Object;)V
      14: aload_0
      15: iconst_0
      16: invokespecial #113                // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements_$eq:(I)V
      19: return

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #132                // Method downstreamCanceled_$eq:(Z)V
       5: aload_0
       6: invokevirtual #96                 // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted:()Z
       9: ifne          38
      12: aload_0
      13: iconst_1
      14: invokespecial #134                // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted_$eq:(Z)V
      17: aload_0
      18: invokespecial #103                // Method upstream:()Lorg/reactivestreams/Subscription;
      21: ifnull        34
      24: getstatic     #101                // Field akka/stream/impl/ReactiveStreamsCompliance$.MODULE$:Lakka/stream/impl/ReactiveStreamsCompliance$;
      27: aload_0
      28: invokespecial #103                // Method upstream:()Lorg/reactivestreams/Subscription;
      31: invokevirtual #137                // Method akka/stream/impl/ReactiveStreamsCompliance$.tryCancel:(Lorg/reactivestreams/Subscription;)V
      34: aload_0
      35: invokespecial #139                // Method clear:()V
      38: return

  public void onNext(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #96                 // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted:()Z
       4: ifne          81
       7: aload_0
       8: invokevirtual #111                // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements:()I
      11: aload_0
      12: getfield      #143                // Field size:I
      15: if_icmpne     28
      18: new           #145                // class java/lang/IllegalStateException
      21: dup
      22: ldc           #147                // String Input buffer overrun
      24: invokespecial #150                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_0
      29: invokespecial #61                 // Method inputBuffer:()[Ljava/lang/Object;
      32: aload_0
      33: invokespecial #75                 // Method nextInputElementCursor:()I
      36: aload_0
      37: invokevirtual #111                // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements:()I
      40: iadd
      41: aload_0
      42: invokespecial #115                // Method IndexMask:()I
      45: iand
      46: aload_1
      47: aastore
      48: aload_0
      49: aload_0
      50: invokevirtual #111                // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements:()I
      53: iconst_1
      54: iadd
      55: invokespecial #113                // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements_$eq:(I)V
      58: aload_0
      59: aload_0
      60: invokevirtual #152                // Method out:()Lakka/stream/Outlet;
      63: invokevirtual #156                // Method isAvailable:(Lakka/stream/Outlet;)Z
      66: ifeq          81
      69: aload_0
      70: aload_0
      71: invokevirtual #152                // Method out:()Lakka/stream/Outlet;
      74: aload_0
      75: invokevirtual #158                // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$dequeue:()Ljava/lang/Object;
      78: invokevirtual #162                // Method push:(Lakka/stream/Outlet;Ljava/lang/Object;)V
      81: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #96                 // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted:()Z
       4: ifeq          14
       7: aload_0
       8: invokespecial #166                // Method downstreamCanceled:()Z
      11: ifne          32
      14: aload_0
      15: iconst_1
      16: invokespecial #134                // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted_$eq:(Z)V
      19: aload_0
      20: invokespecial #139                // Method clear:()V
      23: aload_0
      24: aload_0
      25: invokevirtual #152                // Method out:()Lakka/stream/Outlet;
      28: aload_1
      29: invokevirtual #170                // Method fail:(Lakka/stream/Outlet;Ljava/lang/Throwable;)V
      32: return

  public void onInternalError(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #96                 // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted:()Z
       4: ifne          30
       7: aload_0
       8: invokespecial #166                // Method downstreamCanceled:()Z
      11: ifne          30
      14: aload_0
      15: invokespecial #103                // Method upstream:()Lorg/reactivestreams/Subscription;
      18: ifnull        30
      21: aload_0
      22: invokespecial #103                // Method upstream:()Lorg/reactivestreams/Subscription;
      25: invokeinterface #177,  1          // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      30: aload_0
      31: aload_0
      32: invokevirtual #152                // Method out:()Lakka/stream/Outlet;
      35: invokevirtual #180                // Method isClosed:(Lakka/stream/Outlet;)Z
      38: ifne          46
      41: aload_0
      42: aload_1
      43: invokevirtual #182                // Method onError:(Ljava/lang/Throwable;)V
      46: return

  public void onComplete();
    Code:
       0: aload_0
       1: invokevirtual #96                 // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted:()Z
       4: ifne          28
       7: aload_0
       8: iconst_1
       9: invokespecial #134                // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted_$eq:(Z)V
      12: aload_0
      13: invokevirtual #111                // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements:()I
      16: iconst_0
      17: if_icmpne     28
      20: aload_0
      21: aload_0
      22: invokevirtual #152                // Method out:()Lakka/stream/Outlet;
      25: invokevirtual #187                // Method complete:(Lakka/stream/Outlet;)V
      28: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #80                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_1
       4: ifnonnull     11
       7: iconst_0
       8: goto          12
      11: iconst_1
      12: new           #190                // class akka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary$$anonfun$onSubscribe$1
      15: dup
      16: aload_0
      17: invokespecial #191                // Method akka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary$$anonfun$onSubscribe$1."<init>":(Lakka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary;)V
      20: invokevirtual #90                 // Method scala/Predef$.require:(ZLscala/Function0;)V
      23: aload_0
      24: invokevirtual #96                 // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted:()Z
      27: ifeq          40
      30: getstatic     #101                // Field akka/stream/impl/ReactiveStreamsCompliance$.MODULE$:Lakka/stream/impl/ReactiveStreamsCompliance$;
      33: aload_1
      34: invokevirtual #137                // Method akka/stream/impl/ReactiveStreamsCompliance$.tryCancel:(Lorg/reactivestreams/Subscription;)V
      37: goto          83
      40: aload_0
      41: invokespecial #166                // Method downstreamCanceled:()Z
      44: ifeq          62
      47: aload_0
      48: iconst_1
      49: invokespecial #134                // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted_$eq:(Z)V
      52: getstatic     #101                // Field akka/stream/impl/ReactiveStreamsCompliance$.MODULE$:Lakka/stream/impl/ReactiveStreamsCompliance$;
      55: aload_1
      56: invokevirtual #137                // Method akka/stream/impl/ReactiveStreamsCompliance$.tryCancel:(Lorg/reactivestreams/Subscription;)V
      59: goto          83
      62: aload_0
      63: aload_1
      64: invokespecial #193                // Method upstream_$eq:(Lorg/reactivestreams/Subscription;)V
      67: getstatic     #101                // Field akka/stream/impl/ReactiveStreamsCompliance$.MODULE$:Lakka/stream/impl/ReactiveStreamsCompliance$;
      70: aload_0
      71: invokespecial #103                // Method upstream:()Lorg/reactivestreams/Subscription;
      74: aload_0
      75: invokespecial #61                 // Method inputBuffer:()[Ljava/lang/Object;
      78: arraylength
      79: i2l
      80: invokevirtual #109                // Method akka/stream/impl/ReactiveStreamsCompliance$.tryRequest:(Lorg/reactivestreams/Subscription;J)V
      83: return

  public java.lang.String toString();
    Code:
       0: new           #198                // class scala/StringContext
       3: dup
       4: getstatic     #80                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       7: bipush        6
       9: anewarray     #200                // class java/lang/String
      12: dup
      13: iconst_0
      14: ldc           #202                // String BatchingActorInputBoundary(id=
      16: aastore
      17: dup
      18: iconst_1
      19: ldc           #204                // String , fill=
      21: aastore
      22: dup
      23: iconst_2
      24: ldc           #206                // String /
      26: aastore
      27: dup
      28: iconst_3
      29: ldc           #208                // String , completed=
      31: aastore
      32: dup
      33: iconst_4
      34: ldc           #210                // String , canceled=
      36: aastore
      37: dup
      38: iconst_5
      39: ldc           #212                // String )
      41: aastore
      42: checkcast     #213                // class "[Ljava/lang/Object;"
      45: invokevirtual #217                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      48: invokespecial #220                // Method scala/StringContext."<init>":(Lscala/collection/Seq;)V
      51: getstatic     #80                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      54: iconst_5
      55: anewarray     #121                // class java/lang/Object
      58: dup
      59: iconst_0
      60: aload_0
      61: getfield      #222                // Field id:I
      64: invokestatic  #228                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      67: aastore
      68: dup
      69: iconst_1
      70: aload_0
      71: invokevirtual #111                // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements:()I
      74: invokestatic  #228                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      77: aastore
      78: dup
      79: iconst_2
      80: aload_0
      81: getfield      #143                // Field size:I
      84: invokestatic  #228                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      87: aastore
      88: dup
      89: iconst_3
      90: aload_0
      91: invokevirtual #96                 // Method akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted:()Z
      94: invokestatic  #232                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
      97: aastore
      98: dup
      99: iconst_4
     100: aload_0
     101: invokespecial #166                // Method downstreamCanceled:()Z
     104: invokestatic  #232                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
     107: aastore
     108: invokevirtual #236                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
     111: invokevirtual #240                // Method scala/StringContext.s:(Lscala/collection/Seq;)Ljava/lang/String;
     114: areturn

  public akka.stream.impl.fusing.ActorGraphInterpreter$BatchingActorInputBoundary(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #143                // Field size:I
       5: aload_0
       6: iload_2
       7: putfield      #222                // Field id:I
      10: aload_0
      11: invokespecial #243                // Method akka/stream/impl/fusing/GraphInterpreter$UpstreamBoundaryStageLogic."<init>":()V
      14: getstatic     #80                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      17: iload_1
      18: iconst_0
      19: if_icmple     26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: new           #245                // class akka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary$$anonfun$1
      30: dup
      31: aload_0
      32: invokespecial #246                // Method akka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary$$anonfun$1."<init>":(Lakka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary;)V
      35: invokevirtual #90                 // Method scala/Predef$.require:(ZLscala/Function0;)V
      38: getstatic     #80                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      41: iload_1
      42: iload_1
      43: iconst_1
      44: isub
      45: iand
      46: iconst_0
      47: if_icmpne     54
      50: iconst_1
      51: goto          55
      54: iconst_0
      55: new           #248                // class akka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary$$anonfun$2
      58: dup
      59: aload_0
      60: invokespecial #249                // Method akka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary$$anonfun$2."<init>":(Lakka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary;)V
      63: invokevirtual #90                 // Method scala/Predef$.require:(ZLscala/Function0;)V
      66: aload_0
      67: getstatic     #254                // Field scala/Array$.MODULE$:Lscala/Array$;
      70: iload_1
      71: getstatic     #259                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
      74: invokevirtual #263                // Method scala/reflect/ClassTag$.AnyRef:()Lscala/reflect/ClassTag;
      77: invokevirtual #267                // Method scala/Array$.ofDim:(ILscala/reflect/ClassTag;)Ljava/lang/Object;
      80: checkcast     #213                // class "[Ljava/lang/Object;"
      83: putfield      #34                 // Field inputBuffer:[Ljava/lang/Object;
      86: aload_0
      87: iconst_0
      88: putfield      #37                 // Field akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$inputBufferElements:I
      91: aload_0
      92: iconst_0
      93: putfield      #41                 // Field nextInputElementCursor:I
      96: aload_0
      97: iconst_0
      98: putfield      #45                 // Field akka$stream$impl$fusing$ActorGraphInterpreter$BatchingActorInputBoundary$$upstreamCompleted:Z
     101: aload_0
     102: iconst_0
     103: putfield      #49                 // Field downstreamCanceled:Z
     106: aload_0
     107: iload_1
     108: iconst_1
     109: isub
     110: putfield      #52                 // Field IndexMask:I
     113: aload_0
     114: aload_0
     115: invokespecial #105                // Method requestBatchSize:()I
     118: putfield      #67                 // Field batchRemaining:I
     121: aload_0
     122: getstatic     #272                // Field akka/stream/Outlet$.MODULE$:Lakka/stream/Outlet$;
     125: new           #274                // class scala/collection/mutable/StringBuilder
     128: dup
     129: invokespecial #275                // Method scala/collection/mutable/StringBuilder."<init>":()V
     132: ldc_w         #277                // String UpstreamBoundary
     135: invokevirtual #281                // Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
     138: iload_2
     139: invokestatic  #228                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
     142: invokevirtual #281                // Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
     145: invokevirtual #283                // Method scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
     148: invokevirtual #287                // Method akka/stream/Outlet$.apply:(Ljava/lang/String;)Lakka/stream/Outlet;
     151: putfield      #71                 // Field out:Lakka/stream/Outlet;
     154: aload_0
     155: invokevirtual #152                // Method out:()Lakka/stream/Outlet;
     158: iconst_0
     159: invokevirtual #292                // Method akka/stream/Outlet.id_$eq:(I)V
     162: aload_0
     163: aload_0
     164: invokevirtual #152                // Method out:()Lakka/stream/Outlet;
     167: new           #294                // class akka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary$$anon$1
     170: dup
     171: aload_0
     172: invokespecial #295                // Method akka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary$$anon$1."<init>":(Lakka/stream/impl/fusing/ActorGraphInterpreter$BatchingActorInputBoundary;)V
     175: invokevirtual #299                // Method setHandler:(Lakka/stream/Outlet;Lakka/stream/stage/OutHandler;)V
     178: return
}
