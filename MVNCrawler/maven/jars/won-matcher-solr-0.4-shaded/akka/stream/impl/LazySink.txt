Compiled from "Sinks.scala"
public final class akka.stream.impl.LazySink<T, M> extends akka.stream.stage.GraphStageWithMaterializedValue<akka.stream.SinkShape<T>, scala.concurrent.Future<M>> {
  public final scala.Function1<T, scala.concurrent.Future<akka.stream.scaladsl.Sink<T, M>>> akka$stream$impl$LazySink$$sinkFactory;

  public final scala.Function0<M> akka$stream$impl$LazySink$$zeroMat;

  private final akka.stream.Inlet<T> in;

  private final akka.stream.SinkShape<T> shape;

  public akka.stream.Inlet<T> in();
    Code:
       0: aload_0
       1: getfield      #24                 // Field in:Lakka/stream/Inlet;
       4: areturn

  public akka.stream.Attributes initialAttributes();
    Code:
       0: getstatic     #34                 // Field akka/stream/impl/Stages$DefaultAttributes$.MODULE$:Lakka/stream/impl/Stages$DefaultAttributes$;
       3: invokevirtual #37                 // Method akka/stream/impl/Stages$DefaultAttributes$.lazySink:()Lakka/stream/Attributes;
       6: areturn

  public akka.stream.SinkShape<T> shape();
    Code:
       0: aload_0
       1: getfield      #40                 // Field shape:Lakka/stream/SinkShape;
       4: areturn

  public java.lang.String toString();
    Code:
       0: ldc           #44                 // String LazySink
       2: areturn

  public scala.Tuple2<akka.stream.stage.GraphStageLogic, scala.concurrent.Future<M>> createLogicAndMaterializedValue(akka.stream.Attributes);
    Code:
       0: invokestatic  #52                 // Method scala/runtime/ObjectRef.zero:()Lscala/runtime/ObjectRef;
       3: astore_2
       4: iconst_0
       5: invokestatic  #58                 // Method scala/runtime/VolatileByteRef.create:(B)Lscala/runtime/VolatileByteRef;
       8: astore_3
       9: getstatic     #63                 // Field scala/concurrent/Promise$.MODULE$:Lscala/concurrent/Promise$;
      12: invokevirtual #67                 // Method scala/concurrent/Promise$.apply:()Lscala/concurrent/Promise;
      15: astore        4
      17: new           #69                 // class akka/stream/impl/LazySink$$anon$6
      20: dup
      21: aload_0
      22: aload_1
      23: aload_2
      24: aload         4
      26: aload_3
      27: invokespecial #73                 // Method akka/stream/impl/LazySink$$anon$6."<init>":(Lakka/stream/impl/LazySink;Lakka/stream/Attributes;Lscala/runtime/ObjectRef;Lscala/concurrent/Promise;Lscala/runtime/VolatileByteRef;)V
      30: astore        5
      32: new           #75                 // class scala/Tuple2
      35: dup
      36: aload         5
      38: aload         4
      40: invokeinterface #81,  1           // InterfaceMethod scala/concurrent/Promise.future:()Lscala/concurrent/Future;
      45: invokespecial #84                 // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      48: areturn

  public akka.stream.Shape shape();
    Code:
       0: aload_0
       1: invokevirtual #97                 // Method shape:()Lakka/stream/SinkShape;
       4: areturn

  private final scala.Function1 decider$lzycompute$1(akka.stream.Attributes, scala.runtime.ObjectRef, scala.runtime.VolatileByteRef);
    Code:
       0: aload_0
       1: dup
       2: astore        4
       4: monitorenter
       5: aload_3
       6: getfield      #103                // Field scala/runtime/VolatileByteRef.elem:B
       9: iconst_1
      10: iand
      11: i2b
      12: iconst_0
      13: if_icmpne     68
      16: aload_2
      17: aload_1
      18: getstatic     #108                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
      21: ldc           #110                // class akka/stream/ActorAttributes$SupervisionStrategy
      23: invokevirtual #113                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
      26: invokevirtual #119                // Method akka/stream/Attributes.get:(Lscala/reflect/ClassTag;)Lscala/Option;
      29: new           #121                // class akka/stream/impl/LazySink$$anonfun$decider$lzycompute$1$1
      32: dup
      33: aload_0
      34: invokespecial #124                // Method akka/stream/impl/LazySink$$anonfun$decider$lzycompute$1$1."<init>":(Lakka/stream/impl/LazySink;)V
      37: invokevirtual #130                // Method scala/Option.map:(Lscala/Function1;)Lscala/Option;
      40: new           #132                // class akka/stream/impl/LazySink$$anonfun$decider$lzycompute$1$2
      43: dup
      44: aload_0
      45: invokespecial #133                // Method akka/stream/impl/LazySink$$anonfun$decider$lzycompute$1$2."<init>":(Lakka/stream/impl/LazySink;)V
      48: invokevirtual #137                // Method scala/Option.getOrElse:(Lscala/Function0;)Ljava/lang/Object;
      51: checkcast     #139                // class scala/Function1
      54: putfield      #142                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
      57: aload_3
      58: aload_3
      59: getfield      #103                // Field scala/runtime/VolatileByteRef.elem:B
      62: iconst_1
      63: ior
      64: i2b
      65: putfield      #103                // Field scala/runtime/VolatileByteRef.elem:B
      68: getstatic     #148                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      71: pop
      72: aload         4
      74: monitorexit
      75: aload_2
      76: getfield      #142                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
      79: checkcast     #139                // class scala/Function1
      82: areturn
      83: aload         4
      85: monitorexit
      86: athrow
    Exception table:
       from    to  target type
           5    75    83   any

  public final scala.Function1 akka$stream$impl$LazySink$$decider$1(akka.stream.Attributes, scala.runtime.ObjectRef, scala.runtime.VolatileByteRef);
    Code:
       0: aload_3
       1: getfield      #103                // Field scala/runtime/VolatileByteRef.elem:B
       4: iconst_1
       5: iand
       6: i2b
       7: iconst_0
       8: if_icmpne     21
      11: aload_0
      12: aload_1
      13: aload_2
      14: aload_3
      15: invokespecial #156                // Method decider$lzycompute$1:(Lakka/stream/Attributes;Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;)Lscala/Function1;
      18: goto          28
      21: aload_2
      22: getfield      #142                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
      25: checkcast     #139                // class scala/Function1
      28: areturn

  public akka.stream.impl.LazySink(scala.Function1<T, scala.concurrent.Future<akka.stream.scaladsl.Sink<T, M>>>, scala.Function0<M>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #159                // Field akka$stream$impl$LazySink$$sinkFactory:Lscala/Function1;
       5: aload_0
       6: aload_2
       7: putfield      #161                // Field akka$stream$impl$LazySink$$zeroMat:Lscala/Function0;
      10: aload_0
      11: invokespecial #164                // Method akka/stream/stage/GraphStageWithMaterializedValue."<init>":()V
      14: aload_0
      15: getstatic     #169                // Field akka/stream/Inlet$.MODULE$:Lakka/stream/Inlet$;
      18: ldc           #171                // String lazySink.in
      20: invokevirtual #174                // Method akka/stream/Inlet$.apply:(Ljava/lang/String;)Lakka/stream/Inlet;
      23: putfield      #24                 // Field in:Lakka/stream/Inlet;
      26: aload_0
      27: getstatic     #179                // Field akka/stream/SinkShape$.MODULE$:Lakka/stream/SinkShape$;
      30: aload_0
      31: invokevirtual #181                // Method in:()Lakka/stream/Inlet;
      34: invokevirtual #185                // Method akka/stream/SinkShape$.of:(Lakka/stream/Inlet;)Lakka/stream/SinkShape;
      37: putfield      #40                 // Field shape:Lakka/stream/SinkShape;
      40: return
}
