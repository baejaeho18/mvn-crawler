Compiled from "Stage.scala"
public abstract class akka.stream.stage.AbstractStage<In, Out, PushD extends akka.stream.stage.Directive, PullD extends akka.stream.stage.Directive, Ctx extends akka.stream.stage.Context<Out>, LifeCtx extends akka.stream.stage.LifecycleContext> implements akka.stream.stage.Stage<In, Out> {
  public boolean isDetached();
    Code:
       0: iconst_0
       1: ireturn

  public void preStart(LifeCtx) throws java.lang.Exception;
    Code:
       0: return

  public abstract PushD onPush(In, Ctx);

  public abstract PullD onPull(Ctx);

  public akka.stream.stage.TerminationDirective onUpstreamFinish(Ctx);
    Code:
       0: aload_1
       1: invokeinterface #33,  1           // InterfaceMethod akka/stream/stage/Context.finish:()Lakka/stream/stage/FreeDirective;
       6: areturn

  public akka.stream.stage.TerminationDirective onDownstreamFinish(Ctx);
    Code:
       0: aload_1
       1: invokeinterface #33,  1           // InterfaceMethod akka/stream/stage/Context.finish:()Lakka/stream/stage/FreeDirective;
       6: areturn

  public akka.stream.stage.TerminationDirective onUpstreamFailure(java.lang.Throwable, Ctx);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #41,  2           // InterfaceMethod akka/stream/stage/Context.fail:(Ljava/lang/Throwable;)Lakka/stream/stage/FreeDirective;
       7: areturn

  public void postStop() throws java.lang.Exception;
    Code:
       0: return

  public akka.stream.Supervision$Directive decide(java.lang.Throwable);
    Code:
       0: getstatic     #53                 // Field akka/stream/Supervision$Stop$.MODULE$:Lakka/stream/Supervision$Stop$;
       3: areturn

  public akka.stream.stage.Stage<In, Out> restart();
    Code:
       0: aload_0
       1: areturn

  public akka.stream.stage.AbstractStage();
    Code:
       0: aload_0
       1: invokespecial #59                 // Method java/lang/Object."<init>":()V
       4: return
}
