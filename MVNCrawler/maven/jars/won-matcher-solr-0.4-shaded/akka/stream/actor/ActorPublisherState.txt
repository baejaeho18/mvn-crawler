Compiled from "ActorPublisher.scala"
public class akka.stream.actor.ActorPublisherState implements akka.actor.Extension {
  private final java.util.concurrent.ConcurrentHashMap<akka.actor.ActorRef, akka.stream.actor.ActorPublisherState$State> state;

  public static akka.actor.Extension apply(akka.actor.ActorSystem);
    Code:
       0: getstatic     #18                 // Field akka/stream/actor/ActorPublisherState$.MODULE$:Lakka/stream/actor/ActorPublisherState$;
       3: aload_0
       4: invokevirtual #20                 // Method akka/stream/actor/ActorPublisherState$.apply:(Lakka/actor/ActorSystem;)Lakka/actor/Extension;
       7: areturn

  public static akka.stream.actor.ActorPublisherState createExtension(akka.actor.ExtendedActorSystem);
    Code:
       0: getstatic     #18                 // Field akka/stream/actor/ActorPublisherState$.MODULE$:Lakka/stream/actor/ActorPublisherState$;
       3: aload_0
       4: invokevirtual #24                 // Method akka/stream/actor/ActorPublisherState$.createExtension:(Lakka/actor/ExtendedActorSystem;)Lakka/stream/actor/ActorPublisherState;
       7: areturn

  public static akka.stream.actor.ActorPublisherState$ lookup();
    Code:
       0: getstatic     #18                 // Field akka/stream/actor/ActorPublisherState$.MODULE$:Lakka/stream/actor/ActorPublisherState$;
       3: invokevirtual #28                 // Method akka/stream/actor/ActorPublisherState$.lookup:()Lakka/stream/actor/ActorPublisherState$;
       6: areturn

  private java.util.concurrent.ConcurrentHashMap<akka.actor.ActorRef, akka.stream.actor.ActorPublisherState$State> state();
    Code:
       0: aload_0
       1: getfield      #34                 // Field state:Ljava/util/concurrent/ConcurrentHashMap;
       4: areturn

  public scala.Option<akka.stream.actor.ActorPublisherState$State> get(akka.actor.ActorRef);
    Code:
       0: getstatic     #43                 // Field scala/Option$.MODULE$:Lscala/Option$;
       3: aload_0
       4: invokespecial #45                 // Method state:()Ljava/util/concurrent/ConcurrentHashMap;
       7: aload_1
       8: invokevirtual #50                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      11: invokevirtual #53                 // Method scala/Option$.apply:(Ljava/lang/Object;)Lscala/Option;
      14: areturn

  public void set(akka.actor.ActorRef, akka.stream.actor.ActorPublisherState$State);
    Code:
       0: aload_0
       1: invokespecial #45                 // Method state:()Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: aload_2
       6: invokevirtual #61                 // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: return

  public void remove(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: invokespecial #45                 // Method state:()Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #67                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
       8: pop
       9: return

  public akka.stream.actor.ActorPublisherState();
    Code:
       0: aload_0
       1: invokespecial #71                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #47                 // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #72                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #34                 // Field state:Ljava/util/concurrent/ConcurrentHashMap;
      15: return
}
