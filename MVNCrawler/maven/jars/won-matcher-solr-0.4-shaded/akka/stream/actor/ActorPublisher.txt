Compiled from "ActorPublisher.scala"
public interface akka.stream.actor.ActorPublisher<T> extends akka.actor.Actor {
  public abstract void akka$stream$actor$ActorPublisher$_setter_$akka$stream$actor$ActorPublisher$$state_$eq(akka.stream.actor.ActorPublisherState);

  public abstract void akka$stream$actor$ActorPublisher$$super$aroundReceive(scala.PartialFunction, java.lang.Object);

  public abstract void akka$stream$actor$ActorPublisher$$super$aroundPreStart();

  public abstract void akka$stream$actor$ActorPublisher$$super$aroundPreRestart(java.lang.Throwable, scala.Option);

  public abstract void akka$stream$actor$ActorPublisher$$super$aroundPostRestart(java.lang.Throwable);

  public abstract void akka$stream$actor$ActorPublisher$$super$aroundPostStop();

  public abstract akka.stream.actor.ActorPublisherState akka$stream$actor$ActorPublisher$$state();

  public abstract org.reactivestreams.Subscriber<java.lang.Object> akka$stream$actor$ActorPublisher$$subscriber();

  public abstract void akka$stream$actor$ActorPublisher$$subscriber_$eq(org.reactivestreams.Subscriber<java.lang.Object>);

  public abstract long akka$stream$actor$ActorPublisher$$demand();

  public abstract void akka$stream$actor$ActorPublisher$$demand_$eq(long);

  public abstract akka.stream.actor.ActorPublisher$Internal$LifecycleState akka$stream$actor$ActorPublisher$$lifecycleState();

  public abstract void akka$stream$actor$ActorPublisher$$lifecycleState_$eq(akka.stream.actor.ActorPublisher$Internal$LifecycleState);

  public abstract akka.actor.Cancellable akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout();

  public abstract void akka$stream$actor$ActorPublisher$$scheduledSubscriptionTimeout_$eq(akka.actor.Cancellable);

  public abstract scala.concurrent.duration.Duration subscriptionTimeout();

  public abstract boolean isActive();

  public abstract long totalDemand();

  public abstract boolean isCompleted();

  public abstract boolean isErrorEmitted();

  public abstract boolean isCanceled();

  public abstract void onNext(T);

  public abstract void onComplete();

  public abstract void onCompleteThenStop();

  public abstract void onError(java.lang.Throwable);

  public abstract void onErrorThenStop(java.lang.Throwable);

  public abstract void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);

  public abstract void aroundPreStart();

  public abstract void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);

  public abstract void aroundPostRestart(java.lang.Throwable);

  public abstract void aroundPostStop();
}
