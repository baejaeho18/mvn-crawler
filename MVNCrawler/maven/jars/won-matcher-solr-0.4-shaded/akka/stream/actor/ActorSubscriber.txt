Compiled from "ActorSubscriber.scala"
public interface akka.stream.actor.ActorSubscriber extends akka.actor.Actor {
  public abstract akka.stream.actor.ActorSubscriberState akka$stream$actor$ActorSubscriber$$state();

  public abstract void akka$stream$actor$ActorSubscriber$_setter_$akka$stream$actor$ActorSubscriber$$state_$eq(akka.stream.actor.ActorSubscriberState);

  public abstract scala.Option akka$stream$actor$ActorSubscriber$$subscription();

  public abstract void akka$stream$actor$ActorSubscriber$$subscription_$eq(scala.Option);

  public abstract long akka$stream$actor$ActorSubscriber$$requested();

  public abstract void akka$stream$actor$ActorSubscriber$$requested_$eq(long);

  public abstract boolean akka$stream$actor$ActorSubscriber$$_canceled();

  public abstract void akka$stream$actor$ActorSubscriber$$_canceled_$eq(boolean);

  public abstract void akka$stream$actor$ActorSubscriber$$super$aroundReceive(scala.PartialFunction, java.lang.Object);

  public abstract void akka$stream$actor$ActorSubscriber$$super$aroundPreStart();

  public abstract void akka$stream$actor$ActorSubscriber$$super$aroundPostRestart(java.lang.Throwable);

  public abstract void akka$stream$actor$ActorSubscriber$$super$aroundPreRestart(java.lang.Throwable, scala.Option);

  public abstract void akka$stream$actor$ActorSubscriber$$super$aroundPostStop();

  public abstract akka.stream.actor.RequestStrategy requestStrategy();

  public abstract boolean canceled();

  public abstract void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);

  public abstract void aroundPreStart();

  public abstract void aroundPostRestart(java.lang.Throwable);

  public abstract void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);

  public abstract void aroundPostStop();

  public abstract void request(long);

  public abstract void cancel();

  public abstract int remainingRequested();
}
