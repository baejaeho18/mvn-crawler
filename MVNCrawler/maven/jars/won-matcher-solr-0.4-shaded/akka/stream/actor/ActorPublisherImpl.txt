Compiled from "ActorPublisher.scala"
public final class akka.stream.actor.ActorPublisherImpl<T> implements org.reactivestreams.Publisher<T>, scala.Product, scala.Serializable {
  private final akka.actor.ActorRef ref;

  public static <T> scala.Option<akka.actor.ActorRef> unapply(akka.stream.actor.ActorPublisherImpl<T>);
    Code:
       0: getstatic     #23                 // Field akka/stream/actor/ActorPublisherImpl$.MODULE$:Lakka/stream/actor/ActorPublisherImpl$;
       3: aload_0
       4: invokevirtual #25                 // Method akka/stream/actor/ActorPublisherImpl$.unapply:(Lakka/stream/actor/ActorPublisherImpl;)Lscala/Option;
       7: areturn

  public static <T> akka.stream.actor.ActorPublisherImpl<T> apply(akka.actor.ActorRef);
    Code:
       0: getstatic     #23                 // Field akka/stream/actor/ActorPublisherImpl$.MODULE$:Lakka/stream/actor/ActorPublisherImpl$;
       3: aload_0
       4: invokevirtual #29                 // Method akka/stream/actor/ActorPublisherImpl$.apply:(Lakka/actor/ActorRef;)Lakka/stream/actor/ActorPublisherImpl;
       7: areturn

  public akka.actor.ActorRef ref();
    Code:
       0: aload_0
       1: getfield      #34                 // Field ref:Lakka/actor/ActorRef;
       4: areturn

  public void subscribe(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: getstatic     #43                 // Field akka/stream/impl/ReactiveStreamsCompliance$.MODULE$:Lakka/stream/impl/ReactiveStreamsCompliance$;
       3: aload_1
       4: invokevirtual #46                 // Method akka/stream/impl/ReactiveStreamsCompliance$.requireNonNullSubscriber:(Lorg/reactivestreams/Subscriber;)V
       7: getstatic     #51                 // Field akka/actor/package$.MODULE$:Lakka/actor/package$;
      10: aload_0
      11: invokevirtual #53                 // Method ref:()Lakka/actor/ActorRef;
      14: invokevirtual #57                 // Method akka/actor/package$.actorRef2Scala:(Lakka/actor/ActorRef;)Lakka/actor/ScalaActorRef;
      17: astore_2
      18: new           #59                 // class akka/stream/actor/ActorPublisher$Internal$Subscribe
      21: dup
      22: aload_1
      23: invokespecial #62                 // Method akka/stream/actor/ActorPublisher$Internal$Subscribe."<init>":(Lorg/reactivestreams/Subscriber;)V
      26: astore_3
      27: aload_2
      28: aload_3
      29: invokeinterface #68,  2           // InterfaceMethod akka/actor/ScalaActorRef.$bang$default$2:(Ljava/lang/Object;)Lakka/actor/ActorRef;
      34: astore        4
      36: aload_2
      37: aload_3
      38: aload         4
      40: invokeinterface #72,  3           // InterfaceMethod akka/actor/ScalaActorRef.$bang:(Ljava/lang/Object;Lakka/actor/ActorRef;)V
      45: return

  public <T> akka.stream.actor.ActorPublisherImpl<T> copy(akka.actor.ActorRef);
    Code:
       0: new           #2                  // class akka/stream/actor/ActorPublisherImpl
       3: dup
       4: aload_1
       5: invokespecial #83                 // Method "<init>":(Lakka/actor/ActorRef;)V
       8: areturn

  public <T> akka.actor.ActorRef copy$default$1();
    Code:
       0: aload_0
       1: invokevirtual #53                 // Method ref:()Lakka/actor/ActorRef;
       4: areturn

  public java.lang.String productPrefix();
    Code:
       0: ldc           #88                 // String ActorPublisherImpl
       2: areturn

  public int productArity();
    Code:
       0: iconst_1
       1: ireturn

  public java.lang.Object productElement(int);
    Code:
       0: iload_1
       1: istore_2
       2: iload_2
       3: tableswitch   { // 0 to 0
                     0: 35
               default: 20
          }
      20: new           #94                 // class java/lang/IndexOutOfBoundsException
      23: dup
      24: iload_1
      25: invokestatic  #100                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      28: invokevirtual #103                // Method java/lang/Object.toString:()Ljava/lang/String;
      31: invokespecial #106                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: invokevirtual #53                 // Method ref:()Lakka/actor/ActorRef;
      39: areturn

  public scala.collection.Iterator<java.lang.Object> productIterator();
    Code:
       0: getstatic     #114                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #118                // Method scala/runtime/ScalaRunTime$.typedProductIterator:(Lscala/Product;)Lscala/collection/Iterator;
       7: areturn

  public boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class akka/stream/actor/ActorPublisherImpl
       4: ireturn

  public int hashCode();
    Code:
       0: getstatic     #114                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #126                // Method scala/runtime/ScalaRunTime$._hashCode:(Lscala/Product;)I
       7: ireturn

  public java.lang.String toString();
    Code:
       0: getstatic     #114                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #130                // Method scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
       7: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     71
       5: aload_1
       6: astore_2
       7: aload_2
       8: instanceof    #2                  // class akka/stream/actor/ActorPublisherImpl
      11: ifeq          19
      14: iconst_1
      15: istore_3
      16: goto          21
      19: iconst_0
      20: istore_3
      21: iload_3
      22: ifeq          75
      25: aload_1
      26: checkcast     #2                  // class akka/stream/actor/ActorPublisherImpl
      29: astore        4
      31: aload_0
      32: invokevirtual #53                 // Method ref:()Lakka/actor/ActorRef;
      35: aload         4
      37: invokevirtual #53                 // Method ref:()Lakka/actor/ActorRef;
      40: astore        5
      42: dup
      43: ifnonnull     55
      46: pop
      47: aload         5
      49: ifnull        63
      52: goto          67
      55: aload         5
      57: invokevirtual #133                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      60: ifeq          67
      63: iconst_1
      64: goto          68
      67: iconst_0
      68: ifeq          75
      71: iconst_1
      72: goto          76
      75: iconst_0
      76: ireturn

  public akka.stream.actor.ActorPublisherImpl(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #34                 // Field ref:Lakka/actor/ActorRef;
       5: aload_0
       6: invokespecial #138                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #144                // Method scala/Product$class.$init$:(Lscala/Product;)V
      13: return
}
