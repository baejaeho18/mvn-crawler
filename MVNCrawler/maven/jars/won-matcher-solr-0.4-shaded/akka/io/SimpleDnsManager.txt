Compiled from "SimpleDnsManager.scala"
public class akka.io.SimpleDnsManager implements akka.actor.Actor, akka.dispatch.RequiresMessageQueue<akka.dispatch.UnboundedMessageQueueSemantics>, akka.actor.ActorLogging {
  private final akka.io.DnsExt ext;

  private final akka.actor.ActorRef akka$io$SimpleDnsManager$$resolver;

  private final scala.Option<akka.io.Dns> akka$io$SimpleDnsManager$$cacheCleanup;

  private final scala.Option<akka.actor.Cancellable> cleanupTimer;

  private akka.event.LoggingAdapter akka$actor$ActorLogging$$_log;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public akka.event.LoggingAdapter akka$actor$ActorLogging$$_log();
    Code:
       0: aload_0
       1: getfield      #32                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$actor$ActorLogging$$_log_$eq(akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #32                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       5: return

  public akka.event.LoggingAdapter log();
    Code:
       0: aload_0
       1: invokestatic  #44                 // Method akka/actor/ActorLogging$class.log:(Lakka/actor/ActorLogging;)Lakka/event/LoggingAdapter;
       4: areturn

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #47                 // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #50                 // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #47                 // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #50                 // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #60                 // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #65                 // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #74                 // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #77                 // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #82                 // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #90                 // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokestatic  #95                 // Method akka/actor/Actor$class.supervisorStrategy:(Lakka/actor/Actor;)Lakka/actor/SupervisorStrategy;
       4: areturn

  public void preStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #100                // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #103                // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void postRestart(java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #106                // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #111                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public akka.io.DnsExt ext();
    Code:
       0: aload_0
       1: getfield      #114                // Field ext:Lakka/io/DnsExt;
       4: areturn

  public akka.actor.ActorRef akka$io$SimpleDnsManager$$resolver();
    Code:
       0: aload_0
       1: getfield      #116                // Field akka$io$SimpleDnsManager$$resolver:Lakka/actor/ActorRef;
       4: areturn

  public scala.Option<akka.io.Dns> akka$io$SimpleDnsManager$$cacheCleanup();
    Code:
       0: aload_0
       1: getfield      #119                // Field akka$io$SimpleDnsManager$$cacheCleanup:Lscala/Option;
       4: areturn

  private scala.Option<akka.actor.Cancellable> cleanupTimer();
    Code:
       0: aload_0
       1: getfield      #121                // Field cleanupTimer:Lscala/Option;
       4: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: new           #124                // class akka/io/SimpleDnsManager$$anonfun$receive$1
       3: dup
       4: aload_0
       5: invokespecial #128                // Method akka/io/SimpleDnsManager$$anonfun$receive$1."<init>":(Lakka/io/SimpleDnsManager;)V
       8: areturn

  public void postStop();
    Code:
       0: aload_0
       1: invokespecial #131                // Method cleanupTimer:()Lscala/Option;
       4: new           #133                // class akka/io/SimpleDnsManager$$anonfun$postStop$1
       7: dup
       8: aload_0
       9: invokespecial #134                // Method akka/io/SimpleDnsManager$$anonfun$postStop$1."<init>":(Lakka/io/SimpleDnsManager;)V
      12: invokevirtual #140                // Method scala/Option.foreach:(Lscala/Function1;)V
      15: return

  public akka.io.SimpleDnsManager(akka.io.DnsExt);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #114                // Field ext:Lakka/io/DnsExt;
       5: aload_0
       6: invokespecial #143                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #146                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      13: aload_0
      14: invokestatic  #149                // Method akka/actor/ActorLogging$class.$init$:(Lakka/actor/ActorLogging;)V
      17: aload_0
      18: aload_0
      19: invokevirtual #151                // Method context:()Lakka/actor/ActorContext;
      22: getstatic     #157                // Field akka/routing/FromConfig$.MODULE$:Lakka/routing/FromConfig$;
      25: getstatic     #162                // Field akka/actor/Props$.MODULE$:Lakka/actor/Props$;
      28: aload_1
      29: invokevirtual #168                // Method akka/io/DnsExt.provider:()Lakka/io/DnsProvider;
      32: invokeinterface #174,  1          // InterfaceMethod akka/io/DnsProvider.actorClass:()Ljava/lang/Class;
      37: getstatic     #179                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      40: iconst_2
      41: anewarray     #5                  // class java/lang/Object
      44: dup
      45: iconst_0
      46: aload_1
      47: invokevirtual #183                // Method akka/io/DnsExt.cache:()Lakka/io/Dns;
      50: aastore
      51: dup
      52: iconst_1
      53: aload_1
      54: invokevirtual #187                // Method akka/io/DnsExt.Settings:()Lakka/io/DnsExt$Settings;
      57: invokevirtual #193                // Method akka/io/DnsExt$Settings.ResolverConfig:()Lcom/typesafe/config/Config;
      60: aastore
      61: invokevirtual #197                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      64: invokevirtual #201                // Method akka/actor/Props$.apply:(Ljava/lang/Class;Lscala/collection/Seq;)Lakka/actor/Props;
      67: getstatic     #206                // Field akka/actor/Deploy$.MODULE$:Lakka/actor/Deploy$;
      70: invokevirtual #210                // Method akka/actor/Deploy$.local:()Lakka/actor/Deploy;
      73: invokevirtual #216                // Method akka/actor/Props.withDeploy:(Lakka/actor/Deploy;)Lakka/actor/Props;
      76: aload_1
      77: invokevirtual #187                // Method akka/io/DnsExt.Settings:()Lakka/io/DnsExt$Settings;
      80: invokevirtual #220                // Method akka/io/DnsExt$Settings.Dispatcher:()Ljava/lang/String;
      83: invokevirtual #224                // Method akka/actor/Props.withDispatcher:(Ljava/lang/String;)Lakka/actor/Props;
      86: invokevirtual #228                // Method akka/routing/FromConfig$.props:(Lakka/actor/Props;)Lakka/actor/Props;
      89: aload_1
      90: invokevirtual #187                // Method akka/io/DnsExt.Settings:()Lakka/io/DnsExt$Settings;
      93: invokevirtual #231                // Method akka/io/DnsExt$Settings.Resolver:()Ljava/lang/String;
      96: invokeinterface #237,  3          // InterfaceMethod akka/actor/ActorContext.actorOf:(Lakka/actor/Props;Ljava/lang/String;)Lakka/actor/ActorRef;
     101: putfield      #116                // Field akka$io$SimpleDnsManager$$resolver:Lakka/actor/ActorRef;
     104: aload_0
     105: aload_1
     106: invokevirtual #183                // Method akka/io/DnsExt.cache:()Lakka/io/Dns;
     109: astore_2
     110: aload_2
     111: instanceof    #239                // class akka/io/PeriodicCacheCleanup
     114: ifeq          132
     117: aload_2
     118: astore_3
     119: new           #241                // class scala/Some
     122: dup
     123: aload_3
     124: invokespecial #243                // Method scala/Some."<init>":(Ljava/lang/Object;)V
     127: astore        4
     129: goto          137
     132: getstatic     #248                // Field scala/None$.MODULE$:Lscala/None$;
     135: astore        4
     137: aload         4
     139: putfield      #119                // Field akka$io$SimpleDnsManager$$cacheCleanup:Lscala/Option;
     142: aload_0
     143: aload_0
     144: invokevirtual #250                // Method akka$io$SimpleDnsManager$$cacheCleanup:()Lscala/Option;
     147: new           #252                // class akka/io/SimpleDnsManager$$anonfun$1
     150: dup
     151: aload_0
     152: invokespecial #253                // Method akka/io/SimpleDnsManager$$anonfun$1."<init>":(Lakka/io/SimpleDnsManager;)V
     155: invokevirtual #257                // Method scala/Option.map:(Lscala/Function1;)Lscala/Option;
     158: putfield      #121                // Field cleanupTimer:Lscala/Option;
     161: return
}
