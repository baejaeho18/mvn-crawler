Compiled from "TcpListener.scala"
public class akka.io.TcpListener implements akka.actor.Actor, akka.actor.ActorLogging, akka.dispatch.RequiresMessageQueue<akka.dispatch.UnboundedMessageQueueSemantics> {
  private final akka.actor.ActorRef selectorRouter;

  private final akka.io.TcpExt tcp;

  private final akka.io.ChannelRegistry channelRegistry;

  public final akka.actor.ActorRef akka$io$TcpListener$$bindCommander;

  private final akka.io.Tcp$Bind bind;

  private final java.nio.channels.ServerSocketChannel channel;

  private int acceptLimit;

  private final java.lang.Object localAddress;

  private akka.event.LoggingAdapter akka$actor$ActorLogging$$_log;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public akka.event.LoggingAdapter akka$actor$ActorLogging$$_log();
    Code:
       0: aload_0
       1: getfield      #38                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$actor$ActorLogging$$_log_$eq(akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #38                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       5: return

  public akka.event.LoggingAdapter log();
    Code:
       0: aload_0
       1: invokestatic  #50                 // Method akka/actor/ActorLogging$class.log:(Lakka/actor/ActorLogging;)Lakka/event/LoggingAdapter;
       4: areturn

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #53                 // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #56                 // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #53                 // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #56                 // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #66                 // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #71                 // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #79                 // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #82                 // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #87                 // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #96                 // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void preStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #101                // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #104                // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void postRestart(java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #107                // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #112                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public java.nio.channels.ServerSocketChannel channel();
    Code:
       0: aload_0
       1: getfield      #115                // Field channel:Ljava/nio/channels/ServerSocketChannel;
       4: areturn

  public int acceptLimit();
    Code:
       0: aload_0
       1: getfield      #118                // Field acceptLimit:I
       4: ireturn

  public void acceptLimit_$eq(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #118                // Field acceptLimit:I
       5: return

  public java.lang.Object localAddress();
    Code:
       0: aload_0
       1: getfield      #123                // Field localAddress:Ljava/lang/Object;
       4: areturn

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: getstatic     #131                // Field akka/io/SelectionHandler$.MODULE$:Lakka/io/SelectionHandler$;
       3: invokevirtual #134                // Method akka/io/SelectionHandler$.connectionSupervisorStrategy:()Lakka/actor/SupervisorStrategy;
       6: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: new           #137                // class akka/io/TcpListener$$anonfun$receive$1
       3: dup
       4: aload_0
       5: invokespecial #141                // Method akka/io/TcpListener$$anonfun$receive$1."<init>":(Lakka/io/TcpListener;)V
       8: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> bound(akka.io.ChannelRegistration);
    Code:
       0: new           #145                // class akka/io/TcpListener$$anonfun$bound$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #148                // Method akka/io/TcpListener$$anonfun$bound$1."<init>":(Lakka/io/TcpListener;Lakka/io/ChannelRegistration;)V
       9: areturn

  public final int acceptAllPending(akka.io.ChannelRegistration, int);
    Code:
       0: iload_2
       1: iconst_0
       2: if_icmpgt     171
       5: goto          181
       8: astore        5
      10: aload         5
      12: astore        6
      14: getstatic     #157                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      17: aload         6
      19: invokevirtual #161                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      22: astore        7
      24: aload         7
      26: invokevirtual #167                // Method scala/Option.isEmpty:()Z
      29: ifeq          35
      32: aload         5
      34: athrow
      35: aload         7
      37: invokevirtual #170                // Method scala/Option.get:()Ljava/lang/Object;
      40: checkcast     #172                // class java/lang/Throwable
      43: astore        8
      45: aload_0
      46: invokevirtual #174                // Method log:()Lakka/event/LoggingAdapter;
      49: aload         8
      51: ldc           #176                // String Accept error: could not accept new connection
      53: invokeinterface #182,  3          // InterfaceMethod akka/event/LoggingAdapter.error:(Ljava/lang/Throwable;Ljava/lang/String;)V
      58: aconst_null
      59: astore        9
      61: aload         9
      63: astore        4
      65: aload         4
      67: ifnonnull     95
      70: aload_0
      71: getfield      #184                // Field bind:Lakka/io/Tcp$Bind;
      74: invokevirtual #189                // Method akka/io/Tcp$Bind.pullMode:()Z
      77: ifeq          84
      80: iload_2
      81: goto          94
      84: aload_0
      85: getfield      #191                // Field tcp:Lakka/io/TcpExt;
      88: invokevirtual #197                // Method akka/io/TcpExt.Settings:()Lakka/io/TcpExt$Settings;
      91: invokevirtual #202                // Method akka/io/TcpExt$Settings.BatchAcceptLimit:()I
      94: ireturn
      95: aload_0
      96: invokevirtual #174                // Method log:()Lakka/event/LoggingAdapter;
      99: ldc           #204                // String New connection accepted
     101: invokeinterface #208,  2          // InterfaceMethod akka/event/LoggingAdapter.debug:(Ljava/lang/String;)V
     106: aload         4
     108: iconst_0
     109: invokevirtual #214                // Method java/nio/channels/SocketChannel.configureBlocking:(Z)Ljava/nio/channels/SelectableChannel;
     112: pop
     113: getstatic     #219                // Field akka/actor/package$.MODULE$:Lakka/actor/package$;
     116: aload_0
     117: getfield      #221                // Field selectorRouter:Lakka/actor/ActorRef;
     120: invokevirtual #225                // Method akka/actor/package$.actorRef2Scala:(Lakka/actor/ActorRef;)Lakka/actor/ScalaActorRef;
     123: new           #227                // class akka/io/SelectionHandler$WorkerForCommand
     126: dup
     127: new           #229                // class akka/io/TcpListener$RegisterIncoming
     130: dup
     131: aload         4
     133: invokespecial #232                // Method akka/io/TcpListener$RegisterIncoming."<init>":(Ljava/nio/channels/SocketChannel;)V
     136: aload_0
     137: invokevirtual #234                // Method self:()Lakka/actor/ActorRef;
     140: new           #236                // class akka/io/TcpListener$$anonfun$acceptAllPending$1
     143: dup
     144: aload_0
     145: aload         4
     147: invokespecial #239                // Method akka/io/TcpListener$$anonfun$acceptAllPending$1."<init>":(Lakka/io/TcpListener;Ljava/nio/channels/SocketChannel;)V
     150: invokespecial #242                // Method akka/io/SelectionHandler$WorkerForCommand."<init>":(Lakka/io/SelectionHandler$HasFailureMessage;Lakka/actor/ActorRef;Lscala/Function1;)V
     153: aload_0
     154: invokevirtual #234                // Method self:()Lakka/actor/ActorRef;
     157: invokeinterface #248,  3          // InterfaceMethod akka/actor/ScalaActorRef.$bang:(Ljava/lang/Object;Lakka/actor/ActorRef;)V
     162: aload_1
     163: iload_2
     164: iconst_1
     165: isub
     166: istore_2
     167: astore_1
     168: goto          0
     171: aload_0
     172: invokevirtual #250                // Method channel:()Ljava/nio/channels/ServerSocketChannel;
     175: invokevirtual #256                // Method java/nio/channels/ServerSocketChannel.accept:()Ljava/nio/channels/SocketChannel;
     178: goto          63
     181: aconst_null
     182: goto          63
    Exception table:
       from    to  target type
         171   181     8   any

  public void postStop();
    Code:
       0: aload_0
       1: invokevirtual #250                // Method channel:()Ljava/nio/channels/ServerSocketChannel;
       4: invokevirtual #266                // Method java/nio/channels/ServerSocketChannel.isOpen:()Z
       7: ifeq          80
      10: aload_0
      11: invokevirtual #174                // Method log:()Lakka/event/LoggingAdapter;
      14: ldc_w         #268                // String Closing serverSocketChannel after being stopped
      17: invokeinterface #208,  2          // InterfaceMethod akka/event/LoggingAdapter.debug:(Ljava/lang/String;)V
      22: aload_0
      23: invokevirtual #250                // Method channel:()Ljava/nio/channels/ServerSocketChannel;
      26: invokevirtual #271                // Method java/nio/channels/ServerSocketChannel.close:()V
      29: goto          80
      32: astore_1
      33: aload_1
      34: astore_2
      35: getstatic     #157                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      38: aload_2
      39: invokevirtual #161                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      42: astore_3
      43: aload_3
      44: invokevirtual #167                // Method scala/Option.isEmpty:()Z
      47: ifeq          52
      50: aload_1
      51: athrow
      52: aload_3
      53: invokevirtual #170                // Method scala/Option.get:()Ljava/lang/Object;
      56: checkcast     #172                // class java/lang/Throwable
      59: astore        4
      61: aload_0
      62: invokevirtual #174                // Method log:()Lakka/event/LoggingAdapter;
      65: ldc_w         #273                // String Error closing ServerSocketChannel: {}
      68: aload         4
      70: invokeinterface #276,  3          // InterfaceMethod akka/event/LoggingAdapter.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      75: getstatic     #282                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      78: astore        5
      80: return
    Exception table:
       from    to  target type
           0    32    32   any

  private final java.lang.Object liftedTree1$1();
    Code:
       0: aload_0
       1: invokevirtual #250                // Method channel:()Ljava/nio/channels/ServerSocketChannel;
       4: invokevirtual #287                // Method java/nio/channels/ServerSocketChannel.socket:()Ljava/net/ServerSocket;
       7: astore        6
       9: aload_0
      10: getfield      #184                // Field bind:Lakka/io/Tcp$Bind;
      13: invokevirtual #291                // Method akka/io/Tcp$Bind.options:()Lscala/collection/immutable/Traversable;
      16: new           #293                // class akka/io/TcpListener$$anonfun$liftedTree1$1$1
      19: dup
      20: aload_0
      21: aload         6
      23: invokespecial #296                // Method akka/io/TcpListener$$anonfun$liftedTree1$1$1."<init>":(Lakka/io/TcpListener;Ljava/net/ServerSocket;)V
      26: invokeinterface #302,  2          // InterfaceMethod scala/collection/immutable/Traversable.foreach:(Lscala/Function1;)V
      31: aload         6
      33: aload_0
      34: getfield      #184                // Field bind:Lakka/io/Tcp$Bind;
      37: invokevirtual #305                // Method akka/io/Tcp$Bind.localAddress:()Ljava/net/InetSocketAddress;
      40: aload_0
      41: getfield      #184                // Field bind:Lakka/io/Tcp$Bind;
      44: invokevirtual #308                // Method akka/io/Tcp$Bind.backlog:()I
      47: invokevirtual #313                // Method java/net/ServerSocket.bind:(Ljava/net/SocketAddress;I)V
      50: aload         6
      52: invokevirtual #317                // Method java/net/ServerSocket.getLocalSocketAddress:()Ljava/net/SocketAddress;
      55: astore        8
      57: aload         8
      59: instanceof    #319                // class java/net/InetSocketAddress
      62: ifeq          152
      65: aload         8
      67: checkcast     #319                // class java/net/InetSocketAddress
      70: astore        9
      72: aload         9
      74: astore        10
      76: aload         10
      78: astore        7
      80: aload_0
      81: getfield      #321                // Field channelRegistry:Lakka/io/ChannelRegistry;
      84: aload_0
      85: invokevirtual #250                // Method channel:()Ljava/nio/channels/ServerSocketChannel;
      88: aload_0
      89: getfield      #184                // Field bind:Lakka/io/Tcp$Bind;
      92: invokevirtual #189                // Method akka/io/Tcp$Bind.pullMode:()Z
      95: ifeq          102
      98: iconst_0
      99: goto          104
     102: bipush        16
     104: aload_0
     105: invokevirtual #234                // Method self:()Lakka/actor/ActorRef;
     108: invokeinterface #327,  4          // InterfaceMethod akka/io/ChannelRegistry.register:(Ljava/nio/channels/SelectableChannel;ILakka/actor/ActorRef;)V
     113: aload_0
     114: invokevirtual #174                // Method log:()Lakka/event/LoggingAdapter;
     117: ldc_w         #329                // String Successfully bound to {}
     120: aload         7
     122: invokeinterface #276,  3          // InterfaceMethod akka/event/LoggingAdapter.debug:(Ljava/lang/String;Ljava/lang/Object;)V
     127: aload_0
     128: getfield      #184                // Field bind:Lakka/io/Tcp$Bind;
     131: invokevirtual #291                // Method akka/io/Tcp$Bind.options:()Lscala/collection/immutable/Traversable;
     134: new           #331                // class akka/io/TcpListener$$anonfun$liftedTree1$1$2
     137: dup
     138: aload_0
     139: invokespecial #332                // Method akka/io/TcpListener$$anonfun$liftedTree1$1$2."<init>":(Lakka/io/TcpListener;)V
     142: invokeinterface #302,  2          // InterfaceMethod scala/collection/immutable/Traversable.foreach:(Lscala/Function1;)V
     147: aload         7
     149: goto          306
     152: new           #334                // class java/lang/IllegalArgumentException
     155: dup
     156: new           #336                // class scala/StringContext
     159: dup
     160: getstatic     #341                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     163: iconst_2
     164: anewarray     #343                // class java/lang/String
     167: dup
     168: iconst_0
     169: ldc_w         #345                // String bound to unknown SocketAddress [
     172: aastore
     173: dup
     174: iconst_1
     175: ldc_w         #347                // String ]
     178: aastore
     179: checkcast     #349                // class "[Ljava/lang/Object;"
     182: invokevirtual #353                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
     185: invokespecial #356                // Method scala/StringContext."<init>":(Lscala/collection/Seq;)V
     188: getstatic     #341                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     191: iconst_1
     192: anewarray     #5                  // class java/lang/Object
     195: dup
     196: iconst_0
     197: aload         8
     199: aastore
     200: invokevirtual #360                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
     203: invokevirtual #364                // Method scala/StringContext.s:(Lscala/collection/Seq;)Ljava/lang/String;
     206: invokespecial #366                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     209: athrow
     210: astore_1
     211: aload_1
     212: astore_2
     213: getstatic     #157                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
     216: aload_2
     217: invokevirtual #161                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
     220: astore_3
     221: aload_3
     222: invokevirtual #167                // Method scala/Option.isEmpty:()Z
     225: ifeq          230
     228: aload_1
     229: athrow
     230: aload_3
     231: invokevirtual #170                // Method scala/Option.get:()Ljava/lang/Object;
     234: checkcast     #172                // class java/lang/Throwable
     237: astore        4
     239: getstatic     #219                // Field akka/actor/package$.MODULE$:Lakka/actor/package$;
     242: aload_0
     243: getfield      #368                // Field akka$io$TcpListener$$bindCommander:Lakka/actor/ActorRef;
     246: invokevirtual #225                // Method akka/actor/package$.actorRef2Scala:(Lakka/actor/ActorRef;)Lakka/actor/ScalaActorRef;
     249: aload_0
     250: getfield      #184                // Field bind:Lakka/io/Tcp$Bind;
     253: invokevirtual #372                // Method akka/io/Tcp$Bind.failureMessage:()Lakka/io/Tcp$CommandFailed;
     256: aload_0
     257: invokevirtual #234                // Method self:()Lakka/actor/ActorRef;
     260: invokeinterface #248,  3          // InterfaceMethod akka/actor/ScalaActorRef.$bang:(Ljava/lang/Object;Lakka/actor/ActorRef;)V
     265: aload_0
     266: invokevirtual #174                // Method log:()Lakka/event/LoggingAdapter;
     269: aload         4
     271: ldc_w         #374                // String Bind failed for TCP channel on endpoint [{}]
     274: aload_0
     275: getfield      #184                // Field bind:Lakka/io/Tcp$Bind;
     278: invokevirtual #305                // Method akka/io/Tcp$Bind.localAddress:()Ljava/net/InetSocketAddress;
     281: invokeinterface #377,  4          // InterfaceMethod akka/event/LoggingAdapter.error:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;)V
     286: aload_0
     287: invokevirtual #379                // Method context:()Lakka/actor/ActorContext;
     290: aload_0
     291: invokevirtual #234                // Method self:()Lakka/actor/ActorRef;
     294: invokeinterface #384,  2          // InterfaceMethod akka/actor/ActorContext.stop:(Lakka/actor/ActorRef;)V
     299: getstatic     #282                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
     302: astore        5
     304: aload         5
     306: areturn
    Exception table:
       from    to  target type
           0   210   210   any

  public final akka.actor.Props akka$io$TcpListener$$props$1(akka.io.ChannelRegistry, java.nio.channels.SocketChannel);
    Code:
       0: getstatic     #396                // Field akka/actor/Props$.MODULE$:Lakka/actor/Props$;
       3: ldc_w         #398                // class akka/io/TcpIncomingConnection
       6: getstatic     #341                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       9: bipush        6
      11: anewarray     #5                  // class java/lang/Object
      14: dup
      15: iconst_0
      16: aload_0
      17: getfield      #191                // Field tcp:Lakka/io/TcpExt;
      20: aastore
      21: dup
      22: iconst_1
      23: aload_2
      24: aastore
      25: dup
      26: iconst_2
      27: aload_1
      28: aastore
      29: dup
      30: iconst_3
      31: aload_0
      32: getfield      #184                // Field bind:Lakka/io/Tcp$Bind;
      35: invokevirtual #401                // Method akka/io/Tcp$Bind.handler:()Lakka/actor/ActorRef;
      38: aastore
      39: dup
      40: iconst_4
      41: aload_0
      42: getfield      #184                // Field bind:Lakka/io/Tcp$Bind;
      45: invokevirtual #291                // Method akka/io/Tcp$Bind.options:()Lscala/collection/immutable/Traversable;
      48: aastore
      49: dup
      50: iconst_5
      51: aload_0
      52: getfield      #184                // Field bind:Lakka/io/Tcp$Bind;
      55: invokevirtual #189                // Method akka/io/Tcp$Bind.pullMode:()Z
      58: invokestatic  #407                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
      61: aastore
      62: invokevirtual #360                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      65: invokevirtual #411                // Method akka/actor/Props$.apply:(Ljava/lang/Class;Lscala/collection/Seq;)Lakka/actor/Props;
      68: areturn

  public akka.io.TcpListener(akka.actor.ActorRef, akka.io.TcpExt, akka.io.ChannelRegistry, akka.actor.ActorRef, akka.io.Tcp$Bind);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #221                // Field selectorRouter:Lakka/actor/ActorRef;
       5: aload_0
       6: aload_2
       7: putfield      #191                // Field tcp:Lakka/io/TcpExt;
      10: aload_0
      11: aload_3
      12: putfield      #321                // Field channelRegistry:Lakka/io/ChannelRegistry;
      15: aload_0
      16: aload         4
      18: putfield      #368                // Field akka$io$TcpListener$$bindCommander:Lakka/actor/ActorRef;
      21: aload_0
      22: aload         5
      24: putfield      #184                // Field bind:Lakka/io/Tcp$Bind;
      27: aload_0
      28: invokespecial #416                // Method java/lang/Object."<init>":()V
      31: aload_0
      32: invokestatic  #419                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      35: aload_0
      36: invokestatic  #422                // Method akka/actor/ActorLogging$class.$init$:(Lakka/actor/ActorLogging;)V
      39: aload_0
      40: invokevirtual #379                // Method context:()Lakka/actor/ActorContext;
      43: aload         5
      45: invokevirtual #401                // Method akka/io/Tcp$Bind.handler:()Lakka/actor/ActorRef;
      48: invokeinterface #426,  2          // InterfaceMethod akka/actor/ActorContext.watch:(Lakka/actor/ActorRef;)Lakka/actor/ActorRef;
      53: pop
      54: aload_0
      55: invokestatic  #429                // Method java/nio/channels/ServerSocketChannel.open:()Ljava/nio/channels/ServerSocketChannel;
      58: putfield      #115                // Field channel:Ljava/nio/channels/ServerSocketChannel;
      61: aload_0
      62: invokevirtual #250                // Method channel:()Ljava/nio/channels/ServerSocketChannel;
      65: iconst_0
      66: invokevirtual #430                // Method java/nio/channels/ServerSocketChannel.configureBlocking:(Z)Ljava/nio/channels/SelectableChannel;
      69: pop
      70: aload_0
      71: aload         5
      73: invokevirtual #189                // Method akka/io/Tcp$Bind.pullMode:()Z
      76: ifeq          83
      79: iconst_0
      80: goto          90
      83: aload_2
      84: invokevirtual #197                // Method akka/io/TcpExt.Settings:()Lakka/io/TcpExt$Settings;
      87: invokevirtual #202                // Method akka/io/TcpExt$Settings.BatchAcceptLimit:()I
      90: putfield      #118                // Field acceptLimit:I
      93: aload_0
      94: aload_0
      95: invokespecial #432                // Method liftedTree1$1:()Ljava/lang/Object;
      98: putfield      #123                // Field localAddress:Ljava/lang/Object;
     101: return
}
