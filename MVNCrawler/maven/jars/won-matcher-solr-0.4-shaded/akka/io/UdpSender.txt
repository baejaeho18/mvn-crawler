Compiled from "UdpSender.scala"
public class akka.io.UdpSender implements akka.actor.Actor, akka.actor.ActorLogging, akka.io.WithUdpSend, akka.dispatch.RequiresMessageQueue<akka.dispatch.UnboundedMessageQueueSemantics> {
  private final akka.io.UdpExt udp;

  public final akka.actor.ActorRef akka$io$UdpSender$$commander;

  public final scala.collection.immutable.Traversable<akka.io.Inet$SocketOption> akka$io$UdpSender$$options;

  private final java.nio.channels.DatagramChannel channel;

  private akka.io.Udp$Send akka$io$WithUdpSend$$pendingSend;

  private akka.actor.ActorRef akka$io$WithUdpSend$$pendingCommander;

  private boolean akka$io$WithUdpSend$$retriedSend;

  private final akka.io.Udp$UdpSettings settings;

  private akka.event.LoggingAdapter akka$actor$ActorLogging$$_log;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public akka.io.Udp$Send akka$io$WithUdpSend$$pendingSend();
    Code:
       0: aload_0
       1: getfield      #41                 // Field akka$io$WithUdpSend$$pendingSend:Lakka/io/Udp$Send;
       4: areturn

  public void akka$io$WithUdpSend$$pendingSend_$eq(akka.io.Udp$Send);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #41                 // Field akka$io$WithUdpSend$$pendingSend:Lakka/io/Udp$Send;
       5: return

  public akka.actor.ActorRef akka$io$WithUdpSend$$pendingCommander();
    Code:
       0: aload_0
       1: getfield      #49                 // Field akka$io$WithUdpSend$$pendingCommander:Lakka/actor/ActorRef;
       4: areturn

  public void akka$io$WithUdpSend$$pendingCommander_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #49                 // Field akka$io$WithUdpSend$$pendingCommander:Lakka/actor/ActorRef;
       5: return

  public boolean akka$io$WithUdpSend$$retriedSend();
    Code:
       0: aload_0
       1: getfield      #54                 // Field akka$io$WithUdpSend$$retriedSend:Z
       4: ireturn

  public void akka$io$WithUdpSend$$retriedSend_$eq(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #54                 // Field akka$io$WithUdpSend$$retriedSend:Z
       5: return

  public akka.io.Udp$UdpSettings settings();
    Code:
       0: aload_0
       1: getfield      #59                 // Field settings:Lakka/io/Udp$UdpSettings;
       4: areturn

  public void akka$io$WithUdpSend$_setter_$settings_$eq(akka.io.Udp$UdpSettings);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #59                 // Field settings:Lakka/io/Udp$UdpSettings;
       5: return

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> sendHandlers(akka.io.ChannelRegistration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #68                 // Method akka/io/WithUdpSend$class.sendHandlers:(Lakka/io/WithUdpSend;Lakka/io/ChannelRegistration;)Lscala/PartialFunction;
       5: areturn

  public akka.event.LoggingAdapter akka$actor$ActorLogging$$_log();
    Code:
       0: aload_0
       1: getfield      #73                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$actor$ActorLogging$$_log_$eq(akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #73                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       5: return

  public akka.event.LoggingAdapter log();
    Code:
       0: aload_0
       1: invokestatic  #82                 // Method akka/actor/ActorLogging$class.log:(Lakka/actor/ActorLogging;)Lakka/event/LoggingAdapter;
       4: areturn

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #85                 // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #87                 // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #85                 // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #87                 // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #96                 // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #101                // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #110                // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #113                // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #118                // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #127                // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokestatic  #132                // Method akka/actor/Actor$class.supervisorStrategy:(Lakka/actor/Actor;)Lakka/actor/SupervisorStrategy;
       4: areturn

  public void preStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #137                // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #140                // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void postRestart(java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #143                // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #148                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public akka.io.UdpExt udp();
    Code:
       0: aload_0
       1: getfield      #151                // Field udp:Lakka/io/UdpExt;
       4: areturn

  public java.nio.channels.DatagramChannel channel();
    Code:
       0: aload_0
       1: getfield      #154                // Field channel:Ljava/nio/channels/DatagramChannel;
       4: areturn

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: new           #157                // class akka/io/UdpSender$$anonfun$receive$1
       3: dup
       4: aload_0
       5: invokespecial #161                // Method akka/io/UdpSender$$anonfun$receive$1."<init>":(Lakka/io/UdpSender;)V
       8: areturn

  public void postStop();
    Code:
       0: aload_0
       1: invokevirtual #164                // Method channel:()Ljava/nio/channels/DatagramChannel;
       4: invokevirtual #169                // Method java/nio/channels/DatagramChannel.isOpen:()Z
       7: ifeq          78
      10: aload_0
      11: invokevirtual #171                // Method log:()Lakka/event/LoggingAdapter;
      14: ldc           #173                // String Closing DatagramChannel after being stopped
      16: invokeinterface #179,  2          // InterfaceMethod akka/event/LoggingAdapter.debug:(Ljava/lang/String;)V
      21: aload_0
      22: invokevirtual #164                // Method channel:()Ljava/nio/channels/DatagramChannel;
      25: invokevirtual #182                // Method java/nio/channels/DatagramChannel.close:()V
      28: goto          78
      31: astore_1
      32: aload_1
      33: astore_2
      34: getstatic     #188                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
      37: aload_2
      38: invokevirtual #192                // Method scala/util/control/NonFatal$.unapply:(Ljava/lang/Throwable;)Lscala/Option;
      41: astore_3
      42: aload_3
      43: invokevirtual #197                // Method scala/Option.isEmpty:()Z
      46: ifeq          51
      49: aload_1
      50: athrow
      51: aload_3
      52: invokevirtual #201                // Method scala/Option.get:()Ljava/lang/Object;
      55: checkcast     #203                // class java/lang/Throwable
      58: astore        4
      60: aload_0
      61: invokevirtual #171                // Method log:()Lakka/event/LoggingAdapter;
      64: ldc           #205                // String Error closing DatagramChannel: {}
      66: aload         4
      68: invokeinterface #208,  3          // InterfaceMethod akka/event/LoggingAdapter.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      73: getstatic     #214                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      76: astore        5
      78: return
    Exception table:
       from    to  target type
          21    31    31   any

  public akka.io.UdpSender(akka.io.UdpExt, akka.io.ChannelRegistry, akka.actor.ActorRef, scala.collection.immutable.Traversable<akka.io.Inet$SocketOption>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #151                // Field udp:Lakka/io/UdpExt;
       5: aload_0
       6: aload_3
       7: putfield      #218                // Field akka$io$UdpSender$$commander:Lakka/actor/ActorRef;
      10: aload_0
      11: aload         4
      13: putfield      #220                // Field akka$io$UdpSender$$options:Lscala/collection/immutable/Traversable;
      16: aload_0
      17: invokespecial #222                // Method java/lang/Object."<init>":()V
      20: aload_0
      21: invokestatic  #225                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      24: aload_0
      25: invokestatic  #228                // Method akka/actor/ActorLogging$class.$init$:(Lakka/actor/ActorLogging;)V
      28: aload_0
      29: invokestatic  #231                // Method akka/io/WithUdpSend$class.$init$:(Lakka/io/WithUdpSend;)V
      32: aload_0
      33: invokestatic  #234                // Method java/nio/channels/DatagramChannel.open:()Ljava/nio/channels/DatagramChannel;
      36: astore        5
      38: aload         5
      40: iconst_0
      41: invokevirtual #238                // Method java/nio/channels/DatagramChannel.configureBlocking:(Z)Ljava/nio/channels/SelectableChannel;
      44: pop
      45: aload         5
      47: invokevirtual #242                // Method java/nio/channels/DatagramChannel.socket:()Ljava/net/DatagramSocket;
      50: astore        6
      52: aload         4
      54: new           #244                // class akka/io/UdpSender$$anonfun$1
      57: dup
      58: aload_0
      59: aload         6
      61: invokespecial #247                // Method akka/io/UdpSender$$anonfun$1."<init>":(Lakka/io/UdpSender;Ljava/net/DatagramSocket;)V
      64: invokeinterface #253,  2          // InterfaceMethod scala/collection/immutable/Traversable.foreach:(Lscala/Function1;)V
      69: aload         5
      71: putfield      #154                // Field channel:Ljava/nio/channels/DatagramChannel;
      74: aload_2
      75: aload_0
      76: invokevirtual #164                // Method channel:()Ljava/nio/channels/DatagramChannel;
      79: iconst_0
      80: aload_0
      81: invokevirtual #255                // Method self:()Lakka/actor/ActorRef;
      84: invokeinterface #261,  4          // InterfaceMethod akka/io/ChannelRegistry.register:(Ljava/nio/channels/SelectableChannel;ILakka/actor/ActorRef;)V
      89: return
}
