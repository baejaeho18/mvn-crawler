Compiled from "SelectionHandler.scala"
public abstract class akka.io.SelectionHandler$SelectorBasedManager implements akka.actor.Actor {
  private final akka.actor.ActorRef selectorPool;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #15                 // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #20                 // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #31                 // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #36                 // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #45                 // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #48                 // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #53                 // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #62                 // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void preStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #67                 // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
       4: return

  public void postStop() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #70                 // Method akka/actor/Actor$class.postStop:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #73                 // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void postRestart(java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #76                 // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #81                 // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: getstatic     #89                 // Field akka/io/SelectionHandler$.MODULE$:Lakka/io/SelectionHandler$;
       3: invokevirtual #92                 // Method akka/io/SelectionHandler$.connectionSupervisorStrategy:()Lakka/actor/SupervisorStrategy;
       6: areturn

  public akka.actor.ActorRef selectorPool();
    Code:
       0: aload_0
       1: getfield      #94                 // Field selectorPool:Lakka/actor/ActorRef;
       4: areturn

  public final scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> workerForCommandHandler(scala.PartialFunction<akka.io.SelectionHandler$HasFailureMessage, scala.Function1<akka.io.ChannelRegistry, akka.actor.Props>>);
    Code:
       0: new           #98                 // class akka/io/SelectionHandler$SelectorBasedManager$$anonfun$workerForCommandHandler$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #102                // Method akka/io/SelectionHandler$SelectorBasedManager$$anonfun$workerForCommandHandler$1."<init>":(Lakka/io/SelectionHandler$SelectorBasedManager;Lscala/PartialFunction;)V
       9: areturn

  public akka.io.SelectionHandler$SelectorBasedManager(akka.io.SelectionHandlerSettings, int);
    Code:
       0: aload_0
       1: invokespecial #106                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #109                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
       8: aload_0
       9: aload_0
      10: invokevirtual #111                // Method context:()Lakka/actor/ActorContext;
      13: new           #113                // class akka/routing/RandomPool
      16: dup
      17: iload_2
      18: getstatic     #118                // Field akka/routing/RandomPool$.MODULE$:Lakka/routing/RandomPool$;
      21: invokevirtual #122                // Method akka/routing/RandomPool$.apply$default$2:()Lscala/Option;
      24: getstatic     #118                // Field akka/routing/RandomPool$.MODULE$:Lakka/routing/RandomPool$;
      27: invokevirtual #125                // Method akka/routing/RandomPool$.apply$default$3:()Lakka/actor/SupervisorStrategy;
      30: getstatic     #118                // Field akka/routing/RandomPool$.MODULE$:Lakka/routing/RandomPool$;
      33: invokevirtual #129                // Method akka/routing/RandomPool$.apply$default$4:()Ljava/lang/String;
      36: getstatic     #118                // Field akka/routing/RandomPool$.MODULE$:Lakka/routing/RandomPool$;
      39: invokevirtual #133                // Method akka/routing/RandomPool$.apply$default$5:()Z
      42: invokespecial #136                // Method akka/routing/RandomPool."<init>":(ILscala/Option;Lakka/actor/SupervisorStrategy;Ljava/lang/String;Z)V
      45: getstatic     #141                // Field akka/actor/Props$.MODULE$:Lakka/actor/Props$;
      48: ldc           #143                // class akka/io/SelectionHandler
      50: getstatic     #148                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      53: iconst_1
      54: anewarray     #4                  // class java/lang/Object
      57: dup
      58: iconst_0
      59: aload_1
      60: aastore
      61: invokevirtual #152                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      64: invokevirtual #156                // Method akka/actor/Props$.apply:(Ljava/lang/Class;Lscala/collection/Seq;)Lakka/actor/Props;
      67: invokevirtual #160                // Method akka/routing/RandomPool.props:(Lakka/actor/Props;)Lakka/actor/Props;
      70: getstatic     #165                // Field akka/actor/Deploy$.MODULE$:Lakka/actor/Deploy$;
      73: invokevirtual #169                // Method akka/actor/Deploy$.local:()Lakka/actor/Deploy;
      76: invokevirtual #175                // Method akka/actor/Props.withDeploy:(Lakka/actor/Deploy;)Lakka/actor/Props;
      79: ldc           #177                // String selectors
      81: invokeinterface #183,  3          // InterfaceMethod akka/actor/ActorContext.actorOf:(Lakka/actor/Props;Ljava/lang/String;)Lakka/actor/ActorRef;
      86: putfield      #94                 // Field selectorPool:Lakka/actor/ActorRef;
      89: return
}
