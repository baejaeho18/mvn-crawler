Compiled from "ClusterDaemon.scala"
public final class akka.cluster.ClusterDaemon implements akka.actor.Actor, akka.actor.ActorLogging, akka.dispatch.RequiresMessageQueue<akka.dispatch.UnboundedMessageQueueSemantics> {
  public final akka.cluster.ClusterSettings akka$cluster$ClusterDaemon$$settings;

  private scala.Option<akka.actor.ActorRef> coreSupervisor;

  private akka.event.LoggingAdapter akka$actor$ActorLogging$$_log;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public akka.event.LoggingAdapter akka$actor$ActorLogging$$_log();
    Code:
       0: aload_0
       1: getfield      #29                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$actor$ActorLogging$$_log_$eq(akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       5: return

  public akka.event.LoggingAdapter log();
    Code:
       0: aload_0
       1: invokestatic  #40                 // Method akka/actor/ActorLogging$class.log:(Lakka/actor/ActorLogging;)Lakka/event/LoggingAdapter;
       4: areturn

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #43                 // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #46                 // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #43                 // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #46                 // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #56                 // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #61                 // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #70                 // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #73                 // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #78                 // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #86                 // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokestatic  #91                 // Method akka/actor/Actor$class.supervisorStrategy:(Lakka/actor/Actor;)Lakka/actor/SupervisorStrategy;
       4: areturn

  public void preStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #96                 // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
       4: return

  public void postStop() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #99                 // Method akka/actor/Actor$class.postStop:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #102                // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void postRestart(java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #105                // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #110                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public scala.Option<akka.actor.ActorRef> coreSupervisor();
    Code:
       0: aload_0
       1: getfield      #113                // Field coreSupervisor:Lscala/Option;
       4: areturn

  public void coreSupervisor_$eq(scala.Option<akka.actor.ActorRef>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #113                // Field coreSupervisor:Lscala/Option;
       5: return

  public void createChildren();
    Code:
       0: aload_0
       1: new           #118                // class scala/Some
       4: dup
       5: aload_0
       6: invokevirtual #120                // Method context:()Lakka/actor/ActorContext;
       9: getstatic     #126                // Field akka/actor/Props$.MODULE$:Lakka/actor/Props$;
      12: getstatic     #131                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
      15: ldc           #133                // class akka/cluster/ClusterCoreSupervisor
      17: invokevirtual #137                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
      20: invokevirtual #140                // Method akka/actor/Props$.apply:(Lscala/reflect/ClassTag;)Lakka/actor/Props;
      23: aload_0
      24: invokevirtual #120                // Method context:()Lakka/actor/ActorContext;
      27: invokeinterface #146,  1          // InterfaceMethod akka/actor/ActorContext.props:()Lakka/actor/Props;
      32: invokevirtual #152                // Method akka/actor/Props.dispatcher:()Ljava/lang/String;
      35: invokevirtual #156                // Method akka/actor/Props.withDispatcher:(Ljava/lang/String;)Lakka/actor/Props;
      38: ldc           #158                // String core
      40: invokeinterface #162,  3          // InterfaceMethod akka/actor/ActorContext.actorOf:(Lakka/actor/Props;Ljava/lang/String;)Lakka/actor/ActorRef;
      45: invokespecial #165                // Method scala/Some."<init>":(Ljava/lang/Object;)V
      48: invokevirtual #167                // Method coreSupervisor_$eq:(Lscala/Option;)V
      51: aload_0
      52: invokevirtual #120                // Method context:()Lakka/actor/ActorContext;
      55: getstatic     #126                // Field akka/actor/Props$.MODULE$:Lakka/actor/Props$;
      58: getstatic     #131                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
      61: ldc           #169                // class akka/cluster/ClusterHeartbeatReceiver
      63: invokevirtual #137                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
      66: invokevirtual #140                // Method akka/actor/Props$.apply:(Lscala/reflect/ClassTag;)Lakka/actor/Props;
      69: aload_0
      70: invokevirtual #120                // Method context:()Lakka/actor/ActorContext;
      73: invokeinterface #146,  1          // InterfaceMethod akka/actor/ActorContext.props:()Lakka/actor/Props;
      78: invokevirtual #152                // Method akka/actor/Props.dispatcher:()Ljava/lang/String;
      81: invokevirtual #156                // Method akka/actor/Props.withDispatcher:(Ljava/lang/String;)Lakka/actor/Props;
      84: ldc           #171                // String heartbeatReceiver
      86: invokeinterface #162,  3          // InterfaceMethod akka/actor/ActorContext.actorOf:(Lakka/actor/Props;Ljava/lang/String;)Lakka/actor/ActorRef;
      91: pop
      92: return

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: new           #174                // class akka/cluster/ClusterDaemon$$anonfun$receive$1
       3: dup
       4: aload_0
       5: invokespecial #177                // Method akka/cluster/ClusterDaemon$$anonfun$receive$1."<init>":(Lakka/cluster/ClusterDaemon;)V
       8: areturn

  public akka.cluster.ClusterDaemon(akka.cluster.ClusterSettings);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #180                // Field akka$cluster$ClusterDaemon$$settings:Lakka/cluster/ClusterSettings;
       5: aload_0
       6: invokespecial #182                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #185                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
      13: aload_0
      14: invokestatic  #188                // Method akka/actor/ActorLogging$class.$init$:(Lakka/actor/ActorLogging;)V
      17: aload_0
      18: getstatic     #193                // Field scala/None$.MODULE$:Lscala/None$;
      21: putfield      #113                // Field coreSupervisor:Lscala/Option;
      24: return
}
