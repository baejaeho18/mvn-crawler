Compiled from "ClusterDaemon.scala"
public final class akka.cluster.ClusterCoreSupervisor implements akka.actor.Actor, akka.actor.ActorLogging, akka.dispatch.RequiresMessageQueue<akka.dispatch.UnboundedMessageQueueSemantics> {
  private scala.Option<akka.actor.ActorRef> coreDaemon;

  private final akka.actor.OneForOneStrategy supervisorStrategy;

  private akka.event.LoggingAdapter akka$actor$ActorLogging$$_log;

  private final akka.actor.ActorContext context;

  private final akka.actor.ActorRef self;

  public akka.event.LoggingAdapter akka$actor$ActorLogging$$_log();
    Code:
       0: aload_0
       1: getfield      #29                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       4: areturn

  public void akka$actor$ActorLogging$$_log_$eq(akka.event.LoggingAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field akka$actor$ActorLogging$$_log:Lakka/event/LoggingAdapter;
       5: return

  public akka.event.LoggingAdapter log();
    Code:
       0: aload_0
       1: invokestatic  #40                 // Method akka/actor/ActorLogging$class.log:(Lakka/actor/ActorLogging;)Lakka/event/LoggingAdapter;
       4: areturn

  public akka.actor.ActorContext context();
    Code:
       0: aload_0
       1: getfield      #43                 // Field context:Lakka/actor/ActorContext;
       4: areturn

  public final akka.actor.ActorRef self();
    Code:
       0: aload_0
       1: getfield      #46                 // Field self:Lakka/actor/ActorRef;
       4: areturn

  public void akka$actor$Actor$_setter_$context_$eq(akka.actor.ActorContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #43                 // Field context:Lakka/actor/ActorContext;
       5: return

  public final void akka$actor$Actor$_setter_$self_$eq(akka.actor.ActorRef);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #46                 // Field self:Lakka/actor/ActorRef;
       5: return

  public final akka.actor.ActorRef sender();
    Code:
       0: aload_0
       1: invokestatic  #56                 // Method akka/actor/Actor$class.sender:(Lakka/actor/Actor;)Lakka/actor/ActorRef;
       4: areturn

  public void aroundReceive(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #61                 // Method akka/actor/Actor$class.aroundReceive:(Lakka/actor/Actor;Lscala/PartialFunction;Ljava/lang/Object;)V
       6: return

  public void aroundPreStart();
    Code:
       0: aload_0
       1: invokestatic  #70                 // Method akka/actor/Actor$class.aroundPreStart:(Lakka/actor/Actor;)V
       4: return

  public void aroundPostStop();
    Code:
       0: aload_0
       1: invokestatic  #73                 // Method akka/actor/Actor$class.aroundPostStop:(Lakka/actor/Actor;)V
       4: return

  public void aroundPreRestart(java.lang.Throwable, scala.Option<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #78                 // Method akka/actor/Actor$class.aroundPreRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void aroundPostRestart(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #86                 // Method akka/actor/Actor$class.aroundPostRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void preStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokestatic  #91                 // Method akka/actor/Actor$class.preStart:(Lakka/actor/Actor;)V
       4: return

  public void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #94                 // Method akka/actor/Actor$class.preRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;Lscala/Option;)V
       6: return

  public void postRestart(java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #97                 // Method akka/actor/Actor$class.postRestart:(Lakka/actor/Actor;Ljava/lang/Throwable;)V
       5: return

  public void unhandled(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #102                // Method akka/actor/Actor$class.unhandled:(Lakka/actor/Actor;Ljava/lang/Object;)V
       5: return

  public scala.Option<akka.actor.ActorRef> coreDaemon();
    Code:
       0: aload_0
       1: getfield      #105                // Field coreDaemon:Lscala/Option;
       4: areturn

  public void coreDaemon_$eq(scala.Option<akka.actor.ActorRef>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #105                // Field coreDaemon:Lscala/Option;
       5: return

  public void createChildren();
    Code:
       0: aload_0
       1: invokevirtual #110                // Method context:()Lakka/actor/ActorContext;
       4: getstatic     #116                // Field akka/actor/Props$.MODULE$:Lakka/actor/Props$;
       7: getstatic     #121                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
      10: ldc           #123                // class akka/cluster/ClusterDomainEventPublisher
      12: invokevirtual #127                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
      15: invokevirtual #130                // Method akka/actor/Props$.apply:(Lscala/reflect/ClassTag;)Lakka/actor/Props;
      18: aload_0
      19: invokevirtual #110                // Method context:()Lakka/actor/ActorContext;
      22: invokeinterface #136,  1          // InterfaceMethod akka/actor/ActorContext.props:()Lakka/actor/Props;
      27: invokevirtual #142                // Method akka/actor/Props.dispatcher:()Ljava/lang/String;
      30: invokevirtual #146                // Method akka/actor/Props.withDispatcher:(Ljava/lang/String;)Lakka/actor/Props;
      33: ldc           #148                // String publisher
      35: invokeinterface #152,  3          // InterfaceMethod akka/actor/ActorContext.actorOf:(Lakka/actor/Props;Ljava/lang/String;)Lakka/actor/ActorRef;
      40: astore_1
      41: aload_0
      42: new           #154                // class scala/Some
      45: dup
      46: aload_0
      47: invokevirtual #110                // Method context:()Lakka/actor/ActorContext;
      50: aload_0
      51: invokevirtual #110                // Method context:()Lakka/actor/ActorContext;
      54: getstatic     #116                // Field akka/actor/Props$.MODULE$:Lakka/actor/Props$;
      57: ldc           #156                // class akka/cluster/ClusterCoreDaemon
      59: getstatic     #161                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      62: iconst_1
      63: anewarray     #5                  // class java/lang/Object
      66: dup
      67: iconst_0
      68: aload_1
      69: aastore
      70: invokevirtual #165                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      73: invokevirtual #168                // Method akka/actor/Props$.apply:(Ljava/lang/Class;Lscala/collection/Seq;)Lakka/actor/Props;
      76: aload_0
      77: invokevirtual #110                // Method context:()Lakka/actor/ActorContext;
      80: invokeinterface #136,  1          // InterfaceMethod akka/actor/ActorContext.props:()Lakka/actor/Props;
      85: invokevirtual #142                // Method akka/actor/Props.dispatcher:()Ljava/lang/String;
      88: invokevirtual #146                // Method akka/actor/Props.withDispatcher:(Ljava/lang/String;)Lakka/actor/Props;
      91: ldc           #170                // String daemon
      93: invokeinterface #152,  3          // InterfaceMethod akka/actor/ActorContext.actorOf:(Lakka/actor/Props;Ljava/lang/String;)Lakka/actor/ActorRef;
      98: invokeinterface #174,  2          // InterfaceMethod akka/actor/ActorContext.watch:(Lakka/actor/ActorRef;)Lakka/actor/ActorRef;
     103: invokespecial #177                // Method scala/Some."<init>":(Ljava/lang/Object;)V
     106: invokevirtual #179                // Method coreDaemon_$eq:(Lscala/Option;)V
     109: getstatic     #184                // Field akka/actor/package$.MODULE$:Lakka/actor/package$;
     112: aload_0
     113: invokevirtual #110                // Method context:()Lakka/actor/ActorContext;
     116: invokeinterface #187,  1          // InterfaceMethod akka/actor/ActorContext.parent:()Lakka/actor/ActorRef;
     121: invokevirtual #191                // Method akka/actor/package$.actorRef2Scala:(Lakka/actor/ActorRef;)Lakka/actor/ScalaActorRef;
     124: new           #193                // class akka/cluster/InternalClusterAction$PublisherCreated
     127: dup
     128: aload_1
     129: invokespecial #195                // Method akka/cluster/InternalClusterAction$PublisherCreated."<init>":(Lakka/actor/ActorRef;)V
     132: aload_0
     133: invokevirtual #197                // Method self:()Lakka/actor/ActorRef;
     136: invokeinterface #203,  3          // InterfaceMethod akka/actor/ScalaActorRef.$bang:(Ljava/lang/Object;Lakka/actor/ActorRef;)V
     141: return

  public akka.actor.OneForOneStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: getfield      #206                // Field supervisorStrategy:Lakka/actor/OneForOneStrategy;
       4: areturn

  public void postStop();
    Code:
       0: getstatic     #212                // Field akka/cluster/Cluster$.MODULE$:Lakka/cluster/Cluster$;
       3: aload_0
       4: invokevirtual #110                // Method context:()Lakka/actor/ActorContext;
       7: invokeinterface #216,  1          // InterfaceMethod akka/actor/ActorContext.system:()Lakka/actor/ActorSystem;
      12: invokevirtual #219                // Method akka/cluster/Cluster$.apply:(Lakka/actor/ActorSystem;)Lakka/actor/Extension;
      15: checkcast     #221                // class akka/cluster/Cluster
      18: invokevirtual #224                // Method akka/cluster/Cluster.shutdown:()V
      21: return

  public scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();
    Code:
       0: new           #227                // class akka/cluster/ClusterCoreSupervisor$$anonfun$receive$2
       3: dup
       4: aload_0
       5: invokespecial #230                // Method akka/cluster/ClusterCoreSupervisor$$anonfun$receive$2."<init>":(Lakka/cluster/ClusterCoreSupervisor;)V
       8: areturn

  public akka.actor.SupervisorStrategy supervisorStrategy();
    Code:
       0: aload_0
       1: invokevirtual #233                // Method supervisorStrategy:()Lakka/actor/OneForOneStrategy;
       4: areturn

  public akka.cluster.ClusterCoreSupervisor();
    Code:
       0: aload_0
       1: invokespecial #235                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #238                // Method akka/actor/Actor$class.$init$:(Lakka/actor/Actor;)V
       8: aload_0
       9: invokestatic  #241                // Method akka/actor/ActorLogging$class.$init$:(Lakka/actor/ActorLogging;)V
      12: aload_0
      13: getstatic     #246                // Field scala/None$.MODULE$:Lscala/None$;
      16: putfield      #105                // Field coreDaemon:Lscala/Option;
      19: aload_0
      20: new           #248                // class akka/actor/OneForOneStrategy
      23: dup
      24: getstatic     #253                // Field akka/actor/OneForOneStrategy$.MODULE$:Lakka/actor/OneForOneStrategy$;
      27: invokevirtual #257                // Method akka/actor/OneForOneStrategy$.apply$default$1:()I
      30: getstatic     #253                // Field akka/actor/OneForOneStrategy$.MODULE$:Lakka/actor/OneForOneStrategy$;
      33: invokevirtual #261                // Method akka/actor/OneForOneStrategy$.apply$default$2:()Lscala/concurrent/duration/Duration;
      36: getstatic     #253                // Field akka/actor/OneForOneStrategy$.MODULE$:Lakka/actor/OneForOneStrategy$;
      39: invokevirtual #265                // Method akka/actor/OneForOneStrategy$.apply$default$3:()Z
      42: new           #267                // class akka/cluster/ClusterCoreSupervisor$$anonfun$1
      45: dup
      46: aload_0
      47: invokespecial #268                // Method akka/cluster/ClusterCoreSupervisor$$anonfun$1."<init>":(Lakka/cluster/ClusterCoreSupervisor;)V
      50: invokespecial #271                // Method akka/actor/OneForOneStrategy."<init>":(ILscala/concurrent/duration/Duration;ZLscala/PartialFunction;)V
      53: putfield      #206                // Field supervisorStrategy:Lakka/actor/OneForOneStrategy;
      56: return
}
