Compiled from "DistributedPubSubMediator.scala"
public interface akka.cluster.pubsub.DistributedPubSubMediator$Internal$TopicLike extends akka.actor.Actor {
  public abstract void akka$cluster$pubsub$DistributedPubSubMediator$Internal$TopicLike$_setter_$pruneInterval_$eq(scala.concurrent.duration.FiniteDuration);

  public abstract void akka$cluster$pubsub$DistributedPubSubMediator$Internal$TopicLike$_setter_$pruneTask_$eq(akka.actor.Cancellable);

  public abstract void akka$cluster$pubsub$DistributedPubSubMediator$Internal$TopicLike$$super$postStop();

  public abstract scala.concurrent.duration.FiniteDuration pruneInterval();

  public abstract akka.actor.Cancellable pruneTask();

  public abstract scala.Option<scala.concurrent.duration.Deadline> pruneDeadline();

  public abstract void pruneDeadline_$eq(scala.Option<scala.concurrent.duration.Deadline>);

  public abstract scala.collection.immutable.Set<akka.actor.ActorRef> subscribers();

  public abstract void subscribers_$eq(scala.collection.immutable.Set<akka.actor.ActorRef>);

  public abstract scala.concurrent.duration.FiniteDuration emptyTimeToLive();

  public abstract void postStop();

  public abstract scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> defaultReceive();

  public abstract scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> business();

  public abstract scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();

  public abstract void remove(akka.actor.ActorRef);
}
