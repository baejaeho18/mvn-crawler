Compiled from "AbstractPFBuilder.java"
abstract class akka.japi.pf.AbstractPFBuilder<F, T> {
  protected scala.PartialFunction<F, T> statements;

  akka.japi.pf.AbstractPFBuilder();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field statements:Lscala/PartialFunction;
       9: return

  protected void addStatement(scala.PartialFunction<F, T>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field statements:Lscala/PartialFunction;
       4: ifnonnull     15
       7: aload_0
       8: aload_1
       9: putfield      #2                  // Field statements:Lscala/PartialFunction;
      12: goto          29
      15: aload_0
      16: aload_0
      17: getfield      #2                  // Field statements:Lscala/PartialFunction;
      20: aload_1
      21: invokeinterface #3,  2            // InterfaceMethod scala/PartialFunction.orElse:(Lscala/PartialFunction;)Lscala/PartialFunction;
      26: putfield      #2                  // Field statements:Lscala/PartialFunction;
      29: return

  public scala.PartialFunction<F, T> build();
    Code:
       0: invokestatic  #4                  // Method akka/japi/pf/CaseStatement.empty:()Lscala/PartialFunction;
       3: astore_1
       4: aload_0
       5: getfield      #2                  // Field statements:Lscala/PartialFunction;
       8: astore_2
       9: aload_0
      10: aconst_null
      11: putfield      #2                  // Field statements:Lscala/PartialFunction;
      14: aload_2
      15: ifnonnull     20
      18: aload_1
      19: areturn
      20: aload_2
      21: aload_1
      22: invokeinterface #3,  2            // InterfaceMethod scala/PartialFunction.orElse:(Lscala/PartialFunction;)Lscala/PartialFunction;
      27: areturn
}
