Compiled from "FSM.scala"
public interface akka.actor.FSM<S, D> extends akka.actor.Actor, akka.routing.Listeners, akka.actor.ActorLogging {
  public abstract void akka$actor$FSM$_setter_$Event_$eq(akka.actor.FSM$Event$);

  public abstract void akka$actor$FSM$_setter_$StopEvent_$eq(akka.actor.FSM$StopEvent$);

  public abstract void akka$actor$FSM$_setter_$$minus$greater_$eq(akka.actor.FSM$$minus$greater$);

  public abstract void akka$actor$FSM$_setter_$StateTimeout_$eq(akka.actor.FSM$StateTimeout$);

  public abstract void akka$actor$FSM$_setter_$akka$actor$FSM$$timers_$eq(scala.collection.mutable.Map);

  public abstract void akka$actor$FSM$_setter_$akka$actor$FSM$$timerGen_$eq(scala.collection.Iterator);

  public abstract void akka$actor$FSM$_setter_$akka$actor$FSM$$stateFunctions_$eq(scala.collection.mutable.Map);

  public abstract void akka$actor$FSM$_setter_$akka$actor$FSM$$stateTimeouts_$eq(scala.collection.mutable.Map);

  public abstract void akka$actor$FSM$_setter_$akka$actor$FSM$$handleEventDefault_$eq(scala.PartialFunction);

  public abstract void akka$actor$FSM$$super$postStop();

  public abstract akka.actor.FSM$Event$ Event();

  public abstract akka.actor.FSM$StopEvent$ StopEvent();

  public abstract akka.actor.FSM$$minus$greater$ $minus$greater();

  public abstract akka.actor.FSM$StateTimeout$ StateTimeout();

  public abstract void when(S, scala.concurrent.duration.FiniteDuration, scala.PartialFunction<akka.actor.FSM$Event<D>, akka.actor.FSM$State<S, D>>);

  public abstract scala.concurrent.duration.FiniteDuration when$default$2();

  public abstract void startWith(S, D, scala.Option<scala.concurrent.duration.FiniteDuration>);

  public abstract scala.Option<scala.concurrent.duration.FiniteDuration> startWith$default$3();

  public abstract akka.actor.FSM$State<S, D> goto(S);

  public abstract akka.actor.FSM$State<S, D> stay();

  public abstract akka.actor.FSM$State<S, D> stop();

  public abstract akka.actor.FSM$State<S, D> stop(akka.actor.FSM$Reason);

  public abstract akka.actor.FSM$State<S, D> stop(akka.actor.FSM$Reason, D);

  public abstract akka.actor.FSM<S, D>.TransformHelper transform(scala.PartialFunction<akka.actor.FSM$Event<D>, akka.actor.FSM$State<S, D>>);

  public abstract void setTimer(java.lang.String, java.lang.Object, scala.concurrent.duration.FiniteDuration, boolean);

  public abstract boolean setTimer$default$4();

  public abstract void cancelTimer(java.lang.String);

  public abstract boolean isTimerActive(java.lang.String);

  public abstract void setStateTimeout(S, scala.Option<scala.concurrent.duration.FiniteDuration>);

  public abstract boolean isStateTimerActive();

  public abstract void onTransition(scala.PartialFunction<scala.Tuple2<S, S>, scala.runtime.BoxedUnit>);

  public abstract scala.PartialFunction<scala.Tuple2<S, S>, scala.runtime.BoxedUnit> total2pf(scala.Function2<S, S, scala.runtime.BoxedUnit>);

  public abstract void onTermination(scala.PartialFunction<akka.actor.FSM$StopEvent<S, D>, scala.runtime.BoxedUnit>);

  public abstract void whenUnhandled(scala.PartialFunction<akka.actor.FSM$Event<D>, akka.actor.FSM$State<S, D>>);

  public abstract void initialize();

  public abstract S stateName();

  public abstract D stateData();

  public abstract D nextStateData();

  public abstract boolean debugEvent();

  public abstract akka.actor.FSM$State<S, D> akka$actor$FSM$$currentState();

  public abstract void akka$actor$FSM$$currentState_$eq(akka.actor.FSM$State<S, D>);

  public abstract scala.Option<akka.actor.Cancellable> akka$actor$FSM$$timeoutFuture();

  public abstract void akka$actor$FSM$$timeoutFuture_$eq(scala.Option<akka.actor.Cancellable>);

  public abstract akka.actor.FSM$State<S, D> akka$actor$FSM$$nextState();

  public abstract void akka$actor$FSM$$nextState_$eq(akka.actor.FSM$State<S, D>);

  public abstract long akka$actor$FSM$$generation();

  public abstract void akka$actor$FSM$$generation_$eq(long);

  public abstract scala.collection.mutable.Map<java.lang.String, akka.actor.FSM$Timer> akka$actor$FSM$$timers();

  public abstract scala.collection.Iterator<java.lang.Object> akka$actor$FSM$$timerGen();

  public abstract scala.collection.mutable.Map<S, scala.PartialFunction<akka.actor.FSM$Event<D>, akka.actor.FSM$State<S, D>>> akka$actor$FSM$$stateFunctions();

  public abstract scala.collection.mutable.Map<S, scala.Option<scala.concurrent.duration.FiniteDuration>> akka$actor$FSM$$stateTimeouts();

  public abstract scala.PartialFunction<akka.actor.FSM$Event<D>, akka.actor.FSM$State<S, D>> akka$actor$FSM$$handleEventDefault();

  public abstract scala.PartialFunction<akka.actor.FSM$Event<D>, akka.actor.FSM$State<S, D>> akka$actor$FSM$$handleEvent();

  public abstract void akka$actor$FSM$$handleEvent_$eq(scala.PartialFunction<akka.actor.FSM$Event<D>, akka.actor.FSM$State<S, D>>);

  public abstract scala.PartialFunction<akka.actor.FSM$StopEvent<S, D>, scala.runtime.BoxedUnit> akka$actor$FSM$$terminateEvent();

  public abstract void akka$actor$FSM$$terminateEvent_$eq(scala.PartialFunction<akka.actor.FSM$StopEvent<S, D>, scala.runtime.BoxedUnit>);

  public abstract scala.collection.immutable.List<scala.PartialFunction<scala.Tuple2<S, S>, scala.runtime.BoxedUnit>> akka$actor$FSM$$transitionEvent();

  public abstract void akka$actor$FSM$$transitionEvent_$eq(scala.collection.immutable.List<scala.PartialFunction<scala.Tuple2<S, S>, scala.runtime.BoxedUnit>>);

  public abstract scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();

  public abstract void processEvent(akka.actor.FSM$Event<D>, java.lang.Object);

  public abstract void applyState(akka.actor.FSM$State<S, D>);

  public abstract void makeTransition(akka.actor.FSM$State<S, D>);

  public abstract void postStop();

  public abstract void logTermination(akka.actor.FSM$Reason);
}
