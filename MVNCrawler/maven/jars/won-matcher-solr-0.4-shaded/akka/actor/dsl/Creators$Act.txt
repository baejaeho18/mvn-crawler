Compiled from "Creators.scala"
public interface akka.actor.dsl.Creators$Act extends akka.actor.Actor {
  public abstract scala.Function0 akka$actor$dsl$Creators$Act$$preStartFun();

  public abstract void akka$actor$dsl$Creators$Act$$preStartFun_$eq(scala.Function0);

  public abstract scala.Function0 akka$actor$dsl$Creators$Act$$postStopFun();

  public abstract void akka$actor$dsl$Creators$Act$$postStopFun_$eq(scala.Function0);

  public abstract scala.Function2 akka$actor$dsl$Creators$Act$$preRestartFun();

  public abstract void akka$actor$dsl$Creators$Act$$preRestartFun_$eq(scala.Function2);

  public abstract scala.Function1 akka$actor$dsl$Creators$Act$$postRestartFun();

  public abstract void akka$actor$dsl$Creators$Act$$postRestartFun_$eq(scala.Function1);

  public abstract akka.actor.SupervisorStrategy akka$actor$dsl$Creators$Act$$strategy();

  public abstract void akka$actor$dsl$Creators$Act$$strategy_$eq(akka.actor.SupervisorStrategy);

  public abstract void akka$actor$dsl$Creators$Act$$super$preStart();

  public abstract void akka$actor$dsl$Creators$Act$$super$preRestart(java.lang.Throwable, scala.Option);

  public abstract void akka$actor$dsl$Creators$Act$$super$postRestart(java.lang.Throwable);

  public abstract void akka$actor$dsl$Creators$Act$$super$postStop();

  public abstract akka.actor.SupervisorStrategy akka$actor$dsl$Creators$Act$$super$supervisorStrategy();

  public abstract akka.actor.OneForOneStrategy$ OneForOneStrategy();

  public abstract akka.actor.AllForOneStrategy$ AllForOneStrategy();

  public abstract akka.actor.SupervisorStrategy$Stop$ Stop();

  public abstract akka.actor.SupervisorStrategy$Restart$ Restart();

  public abstract akka.actor.SupervisorStrategy$Resume$ Resume();

  public abstract akka.actor.SupervisorStrategy$Escalate$ Escalate();

  public abstract void becomeStacked(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>);

  public abstract void become(scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit>);

  public abstract void unbecome();

  public abstract void superviseWith(akka.actor.SupervisorStrategy);

  public abstract void whenStarting(scala.Function0<scala.runtime.BoxedUnit>);

  public abstract void whenFailing(scala.Function2<java.lang.Throwable, scala.Option<java.lang.Object>, scala.runtime.BoxedUnit>);

  public abstract void whenRestarted(scala.Function1<java.lang.Throwable, scala.runtime.BoxedUnit>);

  public abstract void whenStopping(scala.Function0<scala.runtime.BoxedUnit>);

  public abstract void preStart();

  public abstract void preRestart(java.lang.Throwable, scala.Option<java.lang.Object>);

  public abstract void postRestart(java.lang.Throwable);

  public abstract void postStop();

  public abstract akka.actor.SupervisorStrategy supervisorStrategy();

  public abstract scala.PartialFunction<java.lang.Object, scala.runtime.BoxedUnit> receive();

  public abstract akka.actor.dsl.Creators akka$actor$dsl$Creators$Act$$$outer();
}
