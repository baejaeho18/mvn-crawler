Compiled from "DeathWatch.scala"
public interface akka.actor.dungeon.DeathWatch {
  public abstract scala.collection.immutable.Set<akka.actor.ActorRef> akka$actor$dungeon$DeathWatch$$watching();

  public abstract void akka$actor$dungeon$DeathWatch$$watching_$eq(scala.collection.immutable.Set<akka.actor.ActorRef>);

  public abstract scala.collection.immutable.Set<akka.actor.ActorRef> akka$actor$dungeon$DeathWatch$$watchedBy();

  public abstract void akka$actor$dungeon$DeathWatch$$watchedBy_$eq(scala.collection.immutable.Set<akka.actor.ActorRef>);

  public abstract scala.collection.immutable.Set<akka.actor.ActorRef> akka$actor$dungeon$DeathWatch$$terminatedQueued();

  public abstract void akka$actor$dungeon$DeathWatch$$terminatedQueued_$eq(scala.collection.immutable.Set<akka.actor.ActorRef>);

  public abstract boolean isWatching(akka.actor.ActorRef);

  public abstract akka.actor.ActorRef watch(akka.actor.ActorRef);

  public abstract akka.actor.ActorRef unwatch(akka.actor.ActorRef);

  public abstract void receivedTerminated(akka.actor.Terminated);

  public abstract void watchedActorTerminated(akka.actor.ActorRef, boolean, boolean);

  public abstract void terminatedQueuedFor(akka.actor.ActorRef);

  public abstract void tellWatchersWeDied();

  public abstract void unwatchWatchedActors(akka.actor.Actor);

  public abstract void addWatcher(akka.actor.ActorRef, akka.actor.ActorRef);

  public abstract void remWatcher(akka.actor.ActorRef, akka.actor.ActorRef);

  public abstract void addressTerminated(akka.actor.Address);
}
