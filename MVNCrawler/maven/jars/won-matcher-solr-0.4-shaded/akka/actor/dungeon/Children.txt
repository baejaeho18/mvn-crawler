Compiled from "Children.scala"
public interface akka.actor.dungeon.Children {
  public abstract akka.actor.dungeon.ChildrenContainer akka$actor$dungeon$Children$$_childrenRefsDoNotCallMeDirectly();

  public abstract void akka$actor$dungeon$Children$$_childrenRefsDoNotCallMeDirectly_$eq(akka.actor.dungeon.ChildrenContainer);

  public abstract akka.actor.dungeon.ChildrenContainer childrenRefs();

  public abstract scala.collection.immutable.Iterable<akka.actor.ActorRef> children();

  public abstract java.lang.Iterable<akka.actor.ActorRef> getChildren();

  public abstract scala.Option<akka.actor.ActorRef> child(java.lang.String);

  public abstract akka.actor.ActorRef getChild(java.lang.String);

  public abstract akka.actor.ActorRef actorOf(akka.actor.Props);

  public abstract akka.actor.ActorRef actorOf(akka.actor.Props, java.lang.String);

  public abstract akka.actor.ActorRef attachChild(akka.actor.Props, boolean);

  public abstract akka.actor.ActorRef attachChild(akka.actor.Props, java.lang.String, boolean);

  public abstract scala.collection.immutable.Map<java.lang.String, akka.actor.FunctionRef> akka$actor$dungeon$Children$$_functionRefsDoNotCallMeDirectly();

  public abstract void akka$actor$dungeon$Children$$_functionRefsDoNotCallMeDirectly_$eq(scala.collection.immutable.Map<java.lang.String, akka.actor.FunctionRef>);

  public abstract akka.actor.InternalActorRef getFunctionRefOrNobody(java.lang.String, int);

  public abstract int getFunctionRefOrNobody$default$2();

  public abstract akka.actor.FunctionRef addFunctionRef(scala.Function2<akka.actor.ActorRef, java.lang.Object, scala.runtime.BoxedUnit>);

  public abstract boolean removeFunctionRef(akka.actor.FunctionRef);

  public abstract void stopFunctionRefs();

  public abstract long akka$actor$dungeon$Children$$_nextNameDoNotCallMeDirectly();

  public abstract void akka$actor$dungeon$Children$$_nextNameDoNotCallMeDirectly_$eq(long);

  public abstract java.lang.String randomName(java.lang.StringBuilder);

  public abstract java.lang.String randomName();

  public abstract void stop(akka.actor.ActorRef);

  public abstract boolean reserveChild(java.lang.String);

  public abstract boolean unreserveChild(java.lang.String);

  public abstract scala.Option<akka.actor.ChildRestartStats> initChild(akka.actor.ActorRef);

  public abstract boolean setChildrenTerminationReason(akka.actor.dungeon.ChildrenContainer$SuspendReason);

  public abstract void setTerminated();

  public abstract boolean isNormal();

  public abstract boolean isTerminating();

  public abstract akka.actor.dungeon.ChildrenContainer$SuspendReason waitingForChildrenOrNull();

  public abstract void suspendChildren(scala.collection.immutable.Set<akka.actor.ActorRef>);

  public abstract scala.collection.immutable.Set<akka.actor.ActorRef> suspendChildren$default$1();

  public abstract void resumeChildren(java.lang.Throwable, akka.actor.ActorRef);

  public abstract scala.Option<akka.actor.ChildStats> getChildByName(java.lang.String);

  public abstract scala.Option<akka.actor.ChildRestartStats> getChildByRef(akka.actor.ActorRef);

  public abstract scala.collection.immutable.Iterable<akka.actor.ChildRestartStats> getAllChildStats();

  public abstract akka.actor.InternalActorRef getSingleChild(java.lang.String);

  public abstract scala.Option<akka.actor.dungeon.ChildrenContainer$SuspendReason> removeChildAndGetStateChange(akka.actor.ActorRef);
}
