Compiled from "RawNetFlowV9Packet.java"
public abstract class org.graylog.plugins.netflow.v9.RawNetFlowV9Packet {
  public org.graylog.plugins.netflow.v9.RawNetFlowV9Packet();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public abstract org.graylog.plugins.netflow.v9.NetFlowV9Header header();

  public abstract int dataLength();

  public abstract java.util.Map<java.lang.Integer, byte[]> templates();

  public abstract java.util.Map$Entry<java.lang.Integer, byte[]> optionTemplate();

  public abstract java.util.Set<java.lang.Integer> usedTemplates();

  public static org.graylog.plugins.netflow.v9.RawNetFlowV9Packet create(org.graylog.plugins.netflow.v9.NetFlowV9Header, int, java.util.Map<java.lang.Integer, byte[]>, java.util.Map$Entry<java.lang.Integer, byte[]>, java.util.Set<java.lang.Integer>);
    Code:
       0: new           #2                  // class org/graylog/plugins/netflow/v9/AutoValue_RawNetFlowV9Packet
       3: dup
       4: aload_0
       5: iload_1
       6: aload_2
       7: aload_3
       8: aload         4
      10: invokespecial #3                  // Method org/graylog/plugins/netflow/v9/AutoValue_RawNetFlowV9Packet."<init>":(Lorg/graylog/plugins/netflow/v9/NetFlowV9Header;ILjava/util/Map;Ljava/util/Map$Entry;Ljava/util/Set;)V
      13: areturn

  public java.lang.String toString();
    Code:
       0: new           #4                  // class java/lang/StringBuilder
       3: dup
       4: ldc           #5                  // String \n
       6: invokespecial #6                  // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
       9: astore_1
      10: aload_1
      11: aload_0
      12: invokevirtual #7                  // Method header:()Lorg/graylog/plugins/netflow/v9/NetFlowV9Header;
      15: invokevirtual #8                  // Method org/graylog/plugins/netflow/v9/NetFlowV9Header.prettyHexDump:()Ljava/lang/String;
      18: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: ldc           #5                  // String \n
      23: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: pop
      27: aload_1
      28: ldc           #10                 // String \nTemplates:\n
      30: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: pop
      34: aload_0
      35: invokevirtual #11                 // Method templates:()Ljava/util/Map;
      38: aload_1
      39: invokedynamic #12,  0             // InvokeDynamic #0:accept:(Ljava/lang/StringBuilder;)Ljava/util/function/BiConsumer;
      44: invokeinterface #13,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      49: aload_0
      50: invokevirtual #14                 // Method optionTemplate:()Ljava/util/Map$Entry;
      53: astore_2
      54: aload_2
      55: ifnull        83
      58: aload_1
      59: ldc           #15                 // String \nOption Template:\n
      61: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: aload_2
      65: invokeinterface #16,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      70: checkcast     #17                 // class "[B"
      73: invokestatic  #18                 // Method io/netty/buffer/Unpooled.wrappedBuffer:([B)Lio/netty/buffer/ByteBuf;
      76: invokestatic  #19                 // Method io/netty/buffer/ByteBufUtil.prettyHexDump:(Lio/netty/buffer/ByteBuf;)Ljava/lang/String;
      79: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: pop
      83: aload_1
      84: ldc           #20                 // String \nData flows using these templates:\n
      86: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      89: pop
      90: aload_0
      91: invokevirtual #21                 // Method usedTemplates:()Ljava/util/Set;
      94: aload_1
      95: invokedynamic #22,  0             // InvokeDynamic #1:accept:(Ljava/lang/StringBuilder;)Ljava/util/function/Consumer;
     100: invokeinterface #23,  2           // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
     105: aload_1
     106: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     109: areturn

  private static void lambda$toString$1(java.lang.StringBuilder, java.lang.Integer);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
       5: ldc           #26                 // String
       7: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      10: pop
      11: return

  private static void lambda$toString$0(java.lang.StringBuilder, java.lang.Integer, byte[]);
    Code:
       0: aload_0
       1: ldc           #5                  // String \n
       3: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       6: aload_1
       7: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      10: ldc           #27                 // String :\n
      12: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      15: aload_2
      16: invokestatic  #18                 // Method io/netty/buffer/Unpooled.wrappedBuffer:([B)Lio/netty/buffer/ByteBuf;
      19: invokestatic  #19                 // Method io/netty/buffer/ByteBufUtil.prettyHexDump:(Lio/netty/buffer/ByteBuf;)Ljava/lang/String;
      22: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: pop
      26: return
}
