Compiled from "RuleAstBaseListener.java"
public class org.graylog.plugins.pipelineprocessor.ast.RuleAstBaseListener implements org.graylog.plugins.pipelineprocessor.ast.RuleAstListener {
  public org.graylog.plugins.pipelineprocessor.ast.RuleAstBaseListener();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public void enterRule(org.graylog.plugins.pipelineprocessor.ast.Rule);
    Code:
       0: return

  public void exitRule(org.graylog.plugins.pipelineprocessor.ast.Rule);
    Code:
       0: return

  public void enterWhen(org.graylog.plugins.pipelineprocessor.ast.Rule);
    Code:
       0: return

  public void exitWhen(org.graylog.plugins.pipelineprocessor.ast.Rule);
    Code:
       0: return

  public void enterThen(org.graylog.plugins.pipelineprocessor.ast.Rule);
    Code:
       0: return

  public void exitThen(org.graylog.plugins.pipelineprocessor.ast.Rule);
    Code:
       0: return

  public void enterStatement(org.graylog.plugins.pipelineprocessor.ast.statements.Statement);
    Code:
       0: return

  public void exitStatement(org.graylog.plugins.pipelineprocessor.ast.statements.Statement);
    Code:
       0: return

  public void enterFunctionCallStatement(org.graylog.plugins.pipelineprocessor.ast.statements.FunctionStatement);
    Code:
       0: return

  public void exitFunctionCallStatement(org.graylog.plugins.pipelineprocessor.ast.statements.FunctionStatement);
    Code:
       0: return

  public void enterVariableAssignStatement(org.graylog.plugins.pipelineprocessor.ast.statements.VarAssignStatement);
    Code:
       0: return

  public void exitVariableAssignStatement(org.graylog.plugins.pipelineprocessor.ast.statements.VarAssignStatement);
    Code:
       0: return

  public void enterAddition(org.graylog.plugins.pipelineprocessor.ast.expressions.AdditionExpression);
    Code:
       0: return

  public void exitAddition(org.graylog.plugins.pipelineprocessor.ast.expressions.AdditionExpression);
    Code:
       0: return

  public void enterAnd(org.graylog.plugins.pipelineprocessor.ast.expressions.AndExpression);
    Code:
       0: return

  public void exitAnd(org.graylog.plugins.pipelineprocessor.ast.expressions.AndExpression);
    Code:
       0: return

  public void enterArrayLiteral(org.graylog.plugins.pipelineprocessor.ast.expressions.ArrayLiteralExpression);
    Code:
       0: return

  public void exitArrayLiteral(org.graylog.plugins.pipelineprocessor.ast.expressions.ArrayLiteralExpression);
    Code:
       0: return

  public void enterBinary(org.graylog.plugins.pipelineprocessor.ast.expressions.BinaryExpression);
    Code:
       0: return

  public void exitBinary(org.graylog.plugins.pipelineprocessor.ast.expressions.BinaryExpression);
    Code:
       0: return

  public void enterBoolean(org.graylog.plugins.pipelineprocessor.ast.expressions.BooleanExpression);
    Code:
       0: return

  public void exitBoolean(org.graylog.plugins.pipelineprocessor.ast.expressions.BooleanExpression);
    Code:
       0: return

  public void enterBooleanFuncWrapper(org.graylog.plugins.pipelineprocessor.ast.expressions.BooleanValuedFunctionWrapper);
    Code:
       0: return

  public void exitBooleanFuncWrapper(org.graylog.plugins.pipelineprocessor.ast.expressions.BooleanValuedFunctionWrapper);
    Code:
       0: return

  public void enterComparison(org.graylog.plugins.pipelineprocessor.ast.expressions.ComparisonExpression);
    Code:
       0: return

  public void exitComparison(org.graylog.plugins.pipelineprocessor.ast.expressions.ComparisonExpression);
    Code:
       0: return

  public void enterConstant(org.graylog.plugins.pipelineprocessor.ast.expressions.ConstantExpression);
    Code:
       0: return

  public void exitConstant(org.graylog.plugins.pipelineprocessor.ast.expressions.ConstantExpression);
    Code:
       0: return

  public void enterDouble(org.graylog.plugins.pipelineprocessor.ast.expressions.DoubleExpression);
    Code:
       0: return

  public void exitDouble(org.graylog.plugins.pipelineprocessor.ast.expressions.DoubleExpression);
    Code:
       0: return

  public void enterEquality(org.graylog.plugins.pipelineprocessor.ast.expressions.EqualityExpression);
    Code:
       0: return

  public void exitEquality(org.graylog.plugins.pipelineprocessor.ast.expressions.EqualityExpression);
    Code:
       0: return

  public void enterFieldAccess(org.graylog.plugins.pipelineprocessor.ast.expressions.FieldAccessExpression);
    Code:
       0: return

  public void exitFieldAccess(org.graylog.plugins.pipelineprocessor.ast.expressions.FieldAccessExpression);
    Code:
       0: return

  public void enterFieldRef(org.graylog.plugins.pipelineprocessor.ast.expressions.FieldRefExpression);
    Code:
       0: return

  public void exitFieldRef(org.graylog.plugins.pipelineprocessor.ast.expressions.FieldRefExpression);
    Code:
       0: return

  public void enterFunctionCall(org.graylog.plugins.pipelineprocessor.ast.expressions.FunctionExpression);
    Code:
       0: return

  public void exitFunctionCall(org.graylog.plugins.pipelineprocessor.ast.expressions.FunctionExpression);
    Code:
       0: return

  public void enterIndexedAccess(org.graylog.plugins.pipelineprocessor.ast.expressions.IndexedAccessExpression);
    Code:
       0: return

  public void exitIndexedAccess(org.graylog.plugins.pipelineprocessor.ast.expressions.IndexedAccessExpression);
    Code:
       0: return

  public void enterLogical(org.graylog.plugins.pipelineprocessor.ast.expressions.LogicalExpression);
    Code:
       0: return

  public void exitLogical(org.graylog.plugins.pipelineprocessor.ast.expressions.LogicalExpression);
    Code:
       0: return

  public void enterLong(org.graylog.plugins.pipelineprocessor.ast.expressions.LongExpression);
    Code:
       0: return

  public void exitLong(org.graylog.plugins.pipelineprocessor.ast.expressions.LongExpression);
    Code:
       0: return

  public void enterMapLiteral(org.graylog.plugins.pipelineprocessor.ast.expressions.MapLiteralExpression);
    Code:
       0: return

  public void exitMapLiteral(org.graylog.plugins.pipelineprocessor.ast.expressions.MapLiteralExpression);
    Code:
       0: return

  public void enterMessageRef(org.graylog.plugins.pipelineprocessor.ast.expressions.MessageRefExpression);
    Code:
       0: return

  public void exitMessageRef(org.graylog.plugins.pipelineprocessor.ast.expressions.MessageRefExpression);
    Code:
       0: return

  public void enterMultiplication(org.graylog.plugins.pipelineprocessor.ast.expressions.MultiplicationExpression);
    Code:
       0: return

  public void exitMultiplication(org.graylog.plugins.pipelineprocessor.ast.expressions.MultiplicationExpression);
    Code:
       0: return

  public void enterNot(org.graylog.plugins.pipelineprocessor.ast.expressions.NotExpression);
    Code:
       0: return

  public void exitNot(org.graylog.plugins.pipelineprocessor.ast.expressions.NotExpression);
    Code:
       0: return

  public void enterNumeric(org.graylog.plugins.pipelineprocessor.ast.expressions.NumericExpression);
    Code:
       0: return

  public void exitNumeric(org.graylog.plugins.pipelineprocessor.ast.expressions.NumericExpression);
    Code:
       0: return

  public void enterOr(org.graylog.plugins.pipelineprocessor.ast.expressions.OrExpression);
    Code:
       0: return

  public void exitOr(org.graylog.plugins.pipelineprocessor.ast.expressions.OrExpression);
    Code:
       0: return

  public void enterSigned(org.graylog.plugins.pipelineprocessor.ast.expressions.SignedExpression);
    Code:
       0: return

  public void exitSigned(org.graylog.plugins.pipelineprocessor.ast.expressions.SignedExpression);
    Code:
       0: return

  public void enterString(org.graylog.plugins.pipelineprocessor.ast.expressions.StringExpression);
    Code:
       0: return

  public void exitString(org.graylog.plugins.pipelineprocessor.ast.expressions.StringExpression);
    Code:
       0: return

  public void enterUnary(org.graylog.plugins.pipelineprocessor.ast.expressions.UnaryExpression);
    Code:
       0: return

  public void exitUnary(org.graylog.plugins.pipelineprocessor.ast.expressions.UnaryExpression);
    Code:
       0: return

  public void enterVariableReference(org.graylog.plugins.pipelineprocessor.ast.expressions.VarRefExpression);
    Code:
       0: return

  public void exitVariableReference(org.graylog.plugins.pipelineprocessor.ast.expressions.VarRefExpression);
    Code:
       0: return

  public void enterEveryExpression(org.graylog.plugins.pipelineprocessor.ast.expressions.Expression);
    Code:
       0: return

  public void exitEveryExpression(org.graylog.plugins.pipelineprocessor.ast.expressions.Expression);
    Code:
       0: return

  public void enterFunctionArg(org.graylog.plugins.pipelineprocessor.ast.expressions.FunctionExpression, org.graylog.plugins.pipelineprocessor.ast.expressions.Expression);
    Code:
       0: return

  public void exitFunctionArg(org.graylog.plugins.pipelineprocessor.ast.expressions.Expression);
    Code:
       0: return
}
