Compiled from "RuleAstListener.java"
public interface org.graylog.plugins.pipelineprocessor.ast.RuleAstListener {
  public abstract void enterRule(org.graylog.plugins.pipelineprocessor.ast.Rule);

  public abstract void exitRule(org.graylog.plugins.pipelineprocessor.ast.Rule);

  public abstract void enterWhen(org.graylog.plugins.pipelineprocessor.ast.Rule);

  public abstract void exitWhen(org.graylog.plugins.pipelineprocessor.ast.Rule);

  public abstract void enterThen(org.graylog.plugins.pipelineprocessor.ast.Rule);

  public abstract void exitThen(org.graylog.plugins.pipelineprocessor.ast.Rule);

  public abstract void enterStatement(org.graylog.plugins.pipelineprocessor.ast.statements.Statement);

  public abstract void exitStatement(org.graylog.plugins.pipelineprocessor.ast.statements.Statement);

  public abstract void enterFunctionCallStatement(org.graylog.plugins.pipelineprocessor.ast.statements.FunctionStatement);

  public abstract void exitFunctionCallStatement(org.graylog.plugins.pipelineprocessor.ast.statements.FunctionStatement);

  public abstract void enterVariableAssignStatement(org.graylog.plugins.pipelineprocessor.ast.statements.VarAssignStatement);

  public abstract void exitVariableAssignStatement(org.graylog.plugins.pipelineprocessor.ast.statements.VarAssignStatement);

  public abstract void enterAddition(org.graylog.plugins.pipelineprocessor.ast.expressions.AdditionExpression);

  public abstract void exitAddition(org.graylog.plugins.pipelineprocessor.ast.expressions.AdditionExpression);

  public abstract void enterAnd(org.graylog.plugins.pipelineprocessor.ast.expressions.AndExpression);

  public abstract void exitAnd(org.graylog.plugins.pipelineprocessor.ast.expressions.AndExpression);

  public abstract void enterArrayLiteral(org.graylog.plugins.pipelineprocessor.ast.expressions.ArrayLiteralExpression);

  public abstract void exitArrayLiteral(org.graylog.plugins.pipelineprocessor.ast.expressions.ArrayLiteralExpression);

  public abstract void enterBinary(org.graylog.plugins.pipelineprocessor.ast.expressions.BinaryExpression);

  public abstract void exitBinary(org.graylog.plugins.pipelineprocessor.ast.expressions.BinaryExpression);

  public abstract void enterBoolean(org.graylog.plugins.pipelineprocessor.ast.expressions.BooleanExpression);

  public abstract void exitBoolean(org.graylog.plugins.pipelineprocessor.ast.expressions.BooleanExpression);

  public abstract void enterBooleanFuncWrapper(org.graylog.plugins.pipelineprocessor.ast.expressions.BooleanValuedFunctionWrapper);

  public abstract void exitBooleanFuncWrapper(org.graylog.plugins.pipelineprocessor.ast.expressions.BooleanValuedFunctionWrapper);

  public abstract void enterComparison(org.graylog.plugins.pipelineprocessor.ast.expressions.ComparisonExpression);

  public abstract void exitComparison(org.graylog.plugins.pipelineprocessor.ast.expressions.ComparisonExpression);

  public abstract void enterConstant(org.graylog.plugins.pipelineprocessor.ast.expressions.ConstantExpression);

  public abstract void exitConstant(org.graylog.plugins.pipelineprocessor.ast.expressions.ConstantExpression);

  public abstract void enterDouble(org.graylog.plugins.pipelineprocessor.ast.expressions.DoubleExpression);

  public abstract void exitDouble(org.graylog.plugins.pipelineprocessor.ast.expressions.DoubleExpression);

  public abstract void enterEquality(org.graylog.plugins.pipelineprocessor.ast.expressions.EqualityExpression);

  public abstract void exitEquality(org.graylog.plugins.pipelineprocessor.ast.expressions.EqualityExpression);

  public abstract void enterFieldAccess(org.graylog.plugins.pipelineprocessor.ast.expressions.FieldAccessExpression);

  public abstract void exitFieldAccess(org.graylog.plugins.pipelineprocessor.ast.expressions.FieldAccessExpression);

  public abstract void enterFieldRef(org.graylog.plugins.pipelineprocessor.ast.expressions.FieldRefExpression);

  public abstract void exitFieldRef(org.graylog.plugins.pipelineprocessor.ast.expressions.FieldRefExpression);

  public abstract void enterFunctionCall(org.graylog.plugins.pipelineprocessor.ast.expressions.FunctionExpression);

  public abstract void exitFunctionCall(org.graylog.plugins.pipelineprocessor.ast.expressions.FunctionExpression);

  public abstract void enterIndexedAccess(org.graylog.plugins.pipelineprocessor.ast.expressions.IndexedAccessExpression);

  public abstract void exitIndexedAccess(org.graylog.plugins.pipelineprocessor.ast.expressions.IndexedAccessExpression);

  public abstract void enterLogical(org.graylog.plugins.pipelineprocessor.ast.expressions.LogicalExpression);

  public abstract void exitLogical(org.graylog.plugins.pipelineprocessor.ast.expressions.LogicalExpression);

  public abstract void enterLong(org.graylog.plugins.pipelineprocessor.ast.expressions.LongExpression);

  public abstract void exitLong(org.graylog.plugins.pipelineprocessor.ast.expressions.LongExpression);

  public abstract void enterMapLiteral(org.graylog.plugins.pipelineprocessor.ast.expressions.MapLiteralExpression);

  public abstract void exitMapLiteral(org.graylog.plugins.pipelineprocessor.ast.expressions.MapLiteralExpression);

  public abstract void enterMessageRef(org.graylog.plugins.pipelineprocessor.ast.expressions.MessageRefExpression);

  public abstract void exitMessageRef(org.graylog.plugins.pipelineprocessor.ast.expressions.MessageRefExpression);

  public abstract void enterMultiplication(org.graylog.plugins.pipelineprocessor.ast.expressions.MultiplicationExpression);

  public abstract void exitMultiplication(org.graylog.plugins.pipelineprocessor.ast.expressions.MultiplicationExpression);

  public abstract void enterNot(org.graylog.plugins.pipelineprocessor.ast.expressions.NotExpression);

  public abstract void exitNot(org.graylog.plugins.pipelineprocessor.ast.expressions.NotExpression);

  public abstract void enterNumeric(org.graylog.plugins.pipelineprocessor.ast.expressions.NumericExpression);

  public abstract void exitNumeric(org.graylog.plugins.pipelineprocessor.ast.expressions.NumericExpression);

  public abstract void enterOr(org.graylog.plugins.pipelineprocessor.ast.expressions.OrExpression);

  public abstract void exitOr(org.graylog.plugins.pipelineprocessor.ast.expressions.OrExpression);

  public abstract void enterSigned(org.graylog.plugins.pipelineprocessor.ast.expressions.SignedExpression);

  public abstract void exitSigned(org.graylog.plugins.pipelineprocessor.ast.expressions.SignedExpression);

  public abstract void enterString(org.graylog.plugins.pipelineprocessor.ast.expressions.StringExpression);

  public abstract void exitString(org.graylog.plugins.pipelineprocessor.ast.expressions.StringExpression);

  public abstract void enterUnary(org.graylog.plugins.pipelineprocessor.ast.expressions.UnaryExpression);

  public abstract void exitUnary(org.graylog.plugins.pipelineprocessor.ast.expressions.UnaryExpression);

  public abstract void enterVariableReference(org.graylog.plugins.pipelineprocessor.ast.expressions.VarRefExpression);

  public abstract void exitVariableReference(org.graylog.plugins.pipelineprocessor.ast.expressions.VarRefExpression);

  public abstract void enterEveryExpression(org.graylog.plugins.pipelineprocessor.ast.expressions.Expression);

  public abstract void exitEveryExpression(org.graylog.plugins.pipelineprocessor.ast.expressions.Expression);

  public abstract void enterFunctionArg(org.graylog.plugins.pipelineprocessor.ast.expressions.FunctionExpression, org.graylog.plugins.pipelineprocessor.ast.expressions.Expression);

  public abstract void exitFunctionArg(org.graylog.plugins.pipelineprocessor.ast.expressions.Expression);
}
