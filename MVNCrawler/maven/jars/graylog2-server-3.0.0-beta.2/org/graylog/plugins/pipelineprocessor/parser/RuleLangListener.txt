Compiled from "RuleLangListener.java"
public interface org.graylog.plugins.pipelineprocessor.parser.RuleLangListener extends org.antlr.v4.runtime.tree.ParseTreeListener {
  public abstract void enterFile(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$FileContext);

  public abstract void exitFile(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$FileContext);

  public abstract void enterPipelineDecls(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$PipelineDeclsContext);

  public abstract void exitPipelineDecls(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$PipelineDeclsContext);

  public abstract void enterPipeline(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$PipelineContext);

  public abstract void exitPipeline(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$PipelineContext);

  public abstract void enterPipelineDeclaration(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$PipelineDeclarationContext);

  public abstract void exitPipelineDeclaration(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$PipelineDeclarationContext);

  public abstract void enterStageDeclaration(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$StageDeclarationContext);

  public abstract void exitStageDeclaration(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$StageDeclarationContext);

  public abstract void enterRuleRef(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$RuleRefContext);

  public abstract void exitRuleRef(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$RuleRefContext);

  public abstract void enterRuleDecls(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$RuleDeclsContext);

  public abstract void exitRuleDecls(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$RuleDeclsContext);

  public abstract void enterRuleDeclaration(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$RuleDeclarationContext);

  public abstract void exitRuleDeclaration(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$RuleDeclarationContext);

  public abstract void enterMultiplication(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$MultiplicationContext);

  public abstract void exitMultiplication(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$MultiplicationContext);

  public abstract void enterAddition(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$AdditionContext);

  public abstract void exitAddition(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$AdditionContext);

  public abstract void enterOr(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$OrContext);

  public abstract void exitOr(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$OrContext);

  public abstract void enterFunc(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$FuncContext);

  public abstract void exitFunc(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$FuncContext);

  public abstract void enterMessageRef(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$MessageRefContext);

  public abstract void exitMessageRef(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$MessageRefContext);

  public abstract void enterNested(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$NestedContext);

  public abstract void exitNested(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$NestedContext);

  public abstract void enterNot(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$NotContext);

  public abstract void exitNot(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$NotContext);

  public abstract void enterIndexedAccess(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$IndexedAccessContext);

  public abstract void exitIndexedAccess(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$IndexedAccessContext);

  public abstract void enterIdentifier(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$IdentifierContext);

  public abstract void exitIdentifier(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$IdentifierContext);

  public abstract void enterComparison(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$ComparisonContext);

  public abstract void exitComparison(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$ComparisonContext);

  public abstract void enterLiteralPrimary(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$LiteralPrimaryContext);

  public abstract void exitLiteralPrimary(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$LiteralPrimaryContext);

  public abstract void enterAnd(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$AndContext);

  public abstract void exitAnd(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$AndContext);

  public abstract void enterArrayLiteralExpr(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$ArrayLiteralExprContext);

  public abstract void exitArrayLiteralExpr(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$ArrayLiteralExprContext);

  public abstract void enterMapLiteralExpr(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$MapLiteralExprContext);

  public abstract void exitMapLiteralExpr(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$MapLiteralExprContext);

  public abstract void enterEquality(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$EqualityContext);

  public abstract void exitEquality(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$EqualityContext);

  public abstract void enterParenExpr(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$ParenExprContext);

  public abstract void exitParenExpr(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$ParenExprContext);

  public abstract void enterSignedExpression(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$SignedExpressionContext);

  public abstract void exitSignedExpression(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$SignedExpressionContext);

  public abstract void enterPropAssignment(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$PropAssignmentContext);

  public abstract void exitPropAssignment(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$PropAssignmentContext);

  public abstract void enterFuncStmt(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$FuncStmtContext);

  public abstract void exitFuncStmt(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$FuncStmtContext);

  public abstract void enterVarAssignStmt(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$VarAssignStmtContext);

  public abstract void exitVarAssignStmt(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$VarAssignStmtContext);

  public abstract void enterEmptyStmt(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$EmptyStmtContext);

  public abstract void exitEmptyStmt(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$EmptyStmtContext);

  public abstract void enterFunctionCall(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$FunctionCallContext);

  public abstract void exitFunctionCall(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$FunctionCallContext);

  public abstract void enterNamedArgs(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$NamedArgsContext);

  public abstract void exitNamedArgs(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$NamedArgsContext);

  public abstract void enterPositionalArgs(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$PositionalArgsContext);

  public abstract void exitPositionalArgs(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$PositionalArgsContext);

  public abstract void enterInteger(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$IntegerContext);

  public abstract void exitInteger(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$IntegerContext);

  public abstract void enterFloat(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$FloatContext);

  public abstract void exitFloat(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$FloatContext);

  public abstract void enterChar(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$CharContext);

  public abstract void exitChar(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$CharContext);

  public abstract void enterString(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$StringContext);

  public abstract void exitString(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$StringContext);

  public abstract void enterBoolean(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$BooleanContext);

  public abstract void exitBoolean(org.graylog.plugins.pipelineprocessor.parser.RuleLangParser$BooleanContext);
}
