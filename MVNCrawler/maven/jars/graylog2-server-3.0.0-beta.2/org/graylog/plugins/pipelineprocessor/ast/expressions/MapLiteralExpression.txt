Compiled from "MapLiteralExpression.java"
public class org.graylog.plugins.pipelineprocessor.ast.expressions.MapLiteralExpression extends org.graylog.plugins.pipelineprocessor.ast.expressions.BaseExpression {
  private final java.util.HashMap<java.lang.String, org.graylog.plugins.pipelineprocessor.ast.expressions.Expression> map;

  public org.graylog.plugins.pipelineprocessor.ast.expressions.MapLiteralExpression(org.antlr.v4.runtime.Token, java.util.HashMap<java.lang.String, org.graylog.plugins.pipelineprocessor.ast.expressions.Expression>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/graylog/plugins/pipelineprocessor/ast/expressions/BaseExpression."<init>":(Lorg/antlr/v4/runtime/Token;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field map:Ljava/util/HashMap;
      10: return

  public boolean isConstant();
    Code:
       0: aload_0
       1: getfield      #2                  // Field map:Ljava/util/HashMap;
       4: invokevirtual #3                  // Method java/util/HashMap.values:()Ljava/util/Collection;
       7: invokeinterface #4,  1            // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      12: invokedynamic #5,  0              // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      17: invokeinterface #6,  2            // InterfaceMethod java/util/stream/Stream.allMatch:(Ljava/util/function/Predicate;)Z
      22: ireturn

  public java.util.Map evaluateUnsafe(org.graylog.plugins.pipelineprocessor.EvaluationContext);
    Code:
       0: aload_0
       1: getfield      #2                  // Field map:Ljava/util/HashMap;
       4: invokestatic  #7                  // InterfaceMethod org/jooq/lambda/Seq.seq:(Ljava/util/Map;)Lorg/jooq/lambda/Seq;
       7: aload_1
       8: invokedynamic #8,  0              // InvokeDynamic #1:apply:(Lorg/graylog/plugins/pipelineprocessor/EvaluationContext;)Ljava/util/function/Function;
      13: invokeinterface #9,  2            // InterfaceMethod org/jooq/lambda/Seq.map:(Ljava/util/function/Function;)Lorg/jooq/lambda/Seq;
      18: invokedynamic #10,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      23: invokedynamic #11,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      28: invokeinterface #12,  3           // InterfaceMethod org/jooq/lambda/Seq.toMap:(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/Map;
      33: areturn

  public java.lang.Class getType();
    Code:
       0: ldc           #13                 // class java/util/Map
       2: areturn

  public java.lang.String toString();
    Code:
       0: new           #14                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #16                 // String {
       9: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: ldc           #18                 // String ,
      14: invokestatic  #19                 // Method com/google/common/base/Joiner.on:(Ljava/lang/String;)Lcom/google/common/base/Joiner;
      17: ldc           #20                 // String :
      19: invokevirtual #21                 // Method com/google/common/base/Joiner.withKeyValueSeparator:(Ljava/lang/String;)Lcom/google/common/base/Joiner$MapJoiner;
      22: aload_0
      23: getfield      #2                  // Field map:Ljava/util/HashMap;
      26: invokevirtual #22                 // Method com/google/common/base/Joiner$MapJoiner.join:(Ljava/util/Map;)Ljava/lang/String;
      29: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: ldc           #23                 // String }
      34: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      40: areturn

  public java.lang.Iterable<java.util.Map$Entry<java.lang.String, org.graylog.plugins.pipelineprocessor.ast.expressions.Expression>> entries();
    Code:
       0: aload_0
       1: getfield      #2                  // Field map:Ljava/util/HashMap;
       4: invokevirtual #25                 // Method java/util/HashMap.entrySet:()Ljava/util/Set;
       7: invokestatic  #26                 // Method com/google/common/collect/ImmutableSet.copyOf:(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableSet;
      10: areturn

  public java.lang.Iterable<org.graylog.plugins.pipelineprocessor.ast.expressions.Expression> children();
    Code:
       0: aload_0
       1: getfield      #2                  // Field map:Ljava/util/HashMap;
       4: invokevirtual #3                  // Method java/util/HashMap.values:()Ljava/util/Collection;
       7: invokestatic  #27                 // Method com/google/common/collect/ImmutableList.copyOf:(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableList;
      10: areturn

  public java.lang.Object evaluateUnsafe(org.graylog.plugins.pipelineprocessor.EvaluationContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #28                 // Method evaluateUnsafe:(Lorg/graylog/plugins/pipelineprocessor/EvaluationContext;)Ljava/util/Map;
       5: areturn

  private static org.jooq.lambda.tuple.Tuple2 lambda$evaluateUnsafe$1(org.graylog.plugins.pipelineprocessor.EvaluationContext, org.jooq.lambda.tuple.Tuple2);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #29,  0             // InvokeDynamic #4:apply:(Lorg/graylog/plugins/pipelineprocessor/EvaluationContext;)Ljava/util/function/Function;
       7: invokevirtual #30                 // Method org/jooq/lambda/tuple/Tuple2.map2:(Ljava/util/function/Function;)Lorg/jooq/lambda/tuple/Tuple2;
      10: areturn

  private static java.lang.Object lambda$evaluateUnsafe$0(org.graylog.plugins.pipelineprocessor.EvaluationContext, org.graylog.plugins.pipelineprocessor.ast.expressions.Expression);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #31,  2           // InterfaceMethod org/graylog/plugins/pipelineprocessor/ast/expressions/Expression.evaluateUnsafe:(Lorg/graylog/plugins/pipelineprocessor/EvaluationContext;)Ljava/lang/Object;
       7: areturn
}
