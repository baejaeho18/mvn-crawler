Compiled from "ThrottleableTransport.java"
public class org.graylog2.plugin.inputs.transports.ThrottleableTransport$Config implements org.graylog2.plugin.inputs.transports.Transport$Config {
  public org.graylog2.plugin.inputs.transports.ThrottleableTransport$Config();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: return

  public org.graylog2.plugin.configuration.ConfigurationRequest getRequestedConfiguration();
    Code:
       0: new           #3                  // class org/graylog2/plugin/configuration/ConfigurationRequest
       3: dup
       4: invokespecial #4                  // Method org/graylog2/plugin/configuration/ConfigurationRequest."<init>":()V
       7: astore_1
       8: aload_1
       9: new           #5                  // class org/graylog2/plugin/configuration/fields/BooleanField
      12: dup
      13: ldc           #6                  // String throttling_allowed
      15: ldc           #7                  // String Allow throttling this input.
      17: iconst_0
      18: ldc           #8                  // String If enabled, no new messages will be read from this input until Graylog catches up with its message load. This is typically useful for inputs reading from files or message queue systems like AMQP or Kafka. If you regularly poll an external system, e.g. via HTTP, you normally want to leave this disabled.
      20: invokespecial #9                  // Method org/graylog2/plugin/configuration/fields/BooleanField."<init>":(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V
      23: invokevirtual #10                 // Method org/graylog2/plugin/configuration/ConfigurationRequest.addField:(Lorg/graylog2/plugin/configuration/fields/ConfigurationField;)V
      26: aload_1
      27: areturn
}
