Compiled from "OpenSSHConfig.java"
public class com.jcraft.jsch.OpenSSHConfig implements com.jcraft.jsch.ConfigRepository {
  private final java.util.Hashtable config;

  private final java.util.Vector hosts;

  private static final java.util.Hashtable keymap;

  public static com.jcraft.jsch.OpenSSHConfig parse(java.lang.String) throws java.io.IOException;
    Code:
       0: new           #4                  // class java/io/StringReader
       3: dup
       4: aload_0
       5: invokespecial #5                  // Method java/io/StringReader."<init>":(Ljava/lang/String;)V
       8: astore_1
       9: new           #6                  // class com/jcraft/jsch/OpenSSHConfig
      12: dup
      13: aload_1
      14: invokespecial #7                  // Method "<init>":(Ljava/io/Reader;)V
      17: astore_2
      18: aload_1
      19: invokevirtual #8                  // Method java/io/Reader.close:()V
      22: aload_2
      23: areturn
      24: astore_3
      25: aload_1
      26: invokevirtual #8                  // Method java/io/Reader.close:()V
      29: aload_3
      30: athrow
    Exception table:
       from    to  target type
           9    18    24   any
          24    25    24   any

  public static com.jcraft.jsch.OpenSSHConfig parseFile(java.lang.String) throws java.io.IOException;
    Code:
       0: new           #9                  // class java/io/FileReader
       3: dup
       4: aload_0
       5: invokestatic  #10                 // Method com/jcraft/jsch/Util.checkTilde:(Ljava/lang/String;)Ljava/lang/String;
       8: invokespecial #11                 // Method java/io/FileReader."<init>":(Ljava/lang/String;)V
      11: astore_1
      12: new           #6                  // class com/jcraft/jsch/OpenSSHConfig
      15: dup
      16: aload_1
      17: invokespecial #7                  // Method "<init>":(Ljava/io/Reader;)V
      20: astore_2
      21: aload_1
      22: invokevirtual #8                  // Method java/io/Reader.close:()V
      25: aload_2
      26: areturn
      27: astore_3
      28: aload_1
      29: invokevirtual #8                  // Method java/io/Reader.close:()V
      32: aload_3
      33: athrow
    Exception table:
       from    to  target type
          12    21    27   any
          27    28    27   any

  com.jcraft.jsch.OpenSSHConfig(java.io.Reader) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #12                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #13                 // class java/util/Hashtable
       8: dup
       9: invokespecial #14                 // Method java/util/Hashtable."<init>":()V
      12: putfield      #3                  // Field config:Ljava/util/Hashtable;
      15: aload_0
      16: new           #15                 // class java/util/Vector
      19: dup
      20: invokespecial #16                 // Method java/util/Vector."<init>":()V
      23: putfield      #2                  // Field hosts:Ljava/util/Vector;
      26: aload_0
      27: aload_1
      28: invokespecial #17                 // Method _parse:(Ljava/io/Reader;)V
      31: return

  private void _parse(java.io.Reader) throws java.io.IOException;
    Code:
       0: new           #18                 // class java/io/BufferedReader
       3: dup
       4: aload_1
       5: invokespecial #19                 // Method java/io/BufferedReader."<init>":(Ljava/io/Reader;)V
       8: astore_2
       9: ldc           #20                 // String
      11: astore_3
      12: new           #15                 // class java/util/Vector
      15: dup
      16: invokespecial #16                 // Method java/util/Vector."<init>":()V
      19: astore        4
      21: aconst_null
      22: astore        5
      24: aload_2
      25: invokevirtual #21                 // Method java/io/BufferedReader.readLine:()Ljava/lang/String;
      28: dup
      29: astore        5
      31: ifnull        170
      34: aload         5
      36: invokevirtual #22                 // Method java/lang/String.trim:()Ljava/lang/String;
      39: astore        5
      41: aload         5
      43: invokevirtual #23                 // Method java/lang/String.length:()I
      46: ifeq          24
      49: aload         5
      51: ldc           #24                 // String #
      53: invokevirtual #25                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      56: ifeq          62
      59: goto          24
      62: aload         5
      64: ldc           #26                 // String [= \t]
      66: iconst_2
      67: invokevirtual #27                 // Method java/lang/String.split:(Ljava/lang/String;I)[Ljava/lang/String;
      70: astore        6
      72: iconst_0
      73: istore        7
      75: iload         7
      77: aload         6
      79: arraylength
      80: if_icmpge     102
      83: aload         6
      85: iload         7
      87: aload         6
      89: iload         7
      91: aaload
      92: invokevirtual #22                 // Method java/lang/String.trim:()Ljava/lang/String;
      95: aastore
      96: iinc          7, 1
      99: goto          75
     102: aload         6
     104: arraylength
     105: iconst_1
     106: if_icmpgt     112
     109: goto          24
     112: aload         6
     114: iconst_0
     115: aaload
     116: ldc           #28                 // String Host
     118: invokevirtual #29                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     121: ifeq          160
     124: aload_0
     125: getfield      #3                  // Field config:Ljava/util/Hashtable;
     128: aload_3
     129: aload         4
     131: invokevirtual #30                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     134: pop
     135: aload_0
     136: getfield      #2                  // Field hosts:Ljava/util/Vector;
     139: aload_3
     140: invokevirtual #31                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
     143: aload         6
     145: iconst_1
     146: aaload
     147: astore_3
     148: new           #15                 // class java/util/Vector
     151: dup
     152: invokespecial #16                 // Method java/util/Vector."<init>":()V
     155: astore        4
     157: goto          167
     160: aload         4
     162: aload         6
     164: invokevirtual #31                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
     167: goto          24
     170: aload_0
     171: getfield      #3                  // Field config:Ljava/util/Hashtable;
     174: aload_3
     175: aload         4
     177: invokevirtual #30                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     180: pop
     181: aload_0
     182: getfield      #2                  // Field hosts:Ljava/util/Vector;
     185: aload_3
     186: invokevirtual #31                 // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
     189: return

  public com.jcraft.jsch.ConfigRepository$Config getConfig(java.lang.String);
    Code:
       0: new           #32                 // class com/jcraft/jsch/OpenSSHConfig$MyConfig
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #33                 // Method com/jcraft/jsch/OpenSSHConfig$MyConfig."<init>":(Lcom/jcraft/jsch/OpenSSHConfig;Ljava/lang/String;)V
       9: areturn

  static java.util.Hashtable access$000(com.jcraft.jsch.OpenSSHConfig);
    Code:
       0: aload_0
       1: getfield      #3                  // Field config:Ljava/util/Hashtable;
       4: areturn

  static java.util.Vector access$100(com.jcraft.jsch.OpenSSHConfig);
    Code:
       0: aload_0
       1: getfield      #2                  // Field hosts:Ljava/util/Vector;
       4: areturn

  static java.util.Hashtable access$200();
    Code:
       0: getstatic     #1                  // Field keymap:Ljava/util/Hashtable;
       3: areturn

  static {};
    Code:
       0: new           #13                 // class java/util/Hashtable
       3: dup
       4: invokespecial #14                 // Method java/util/Hashtable."<init>":()V
       7: putstatic     #1                  // Field keymap:Ljava/util/Hashtable;
      10: getstatic     #1                  // Field keymap:Ljava/util/Hashtable;
      13: ldc           #34                 // String kex
      15: ldc           #35                 // String KexAlgorithms
      17: invokevirtual #30                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      20: pop
      21: getstatic     #1                  // Field keymap:Ljava/util/Hashtable;
      24: ldc           #36                 // String server_host_key
      26: ldc           #37                 // String HostKeyAlgorithms
      28: invokevirtual #30                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      31: pop
      32: getstatic     #1                  // Field keymap:Ljava/util/Hashtable;
      35: ldc           #38                 // String cipher.c2s
      37: ldc           #39                 // String Ciphers
      39: invokevirtual #30                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      42: pop
      43: getstatic     #1                  // Field keymap:Ljava/util/Hashtable;
      46: ldc           #40                 // String cipher.s2c
      48: ldc           #39                 // String Ciphers
      50: invokevirtual #30                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      53: pop
      54: getstatic     #1                  // Field keymap:Ljava/util/Hashtable;
      57: ldc           #41                 // String mac.c2s
      59: ldc           #42                 // String Macs
      61: invokevirtual #30                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      64: pop
      65: getstatic     #1                  // Field keymap:Ljava/util/Hashtable;
      68: ldc           #43                 // String mac.s2c
      70: ldc           #42                 // String Macs
      72: invokevirtual #30                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      75: pop
      76: getstatic     #1                  // Field keymap:Ljava/util/Hashtable;
      79: ldc           #44                 // String compression.s2c
      81: ldc           #45                 // String Compression
      83: invokevirtual #30                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      86: pop
      87: getstatic     #1                  // Field keymap:Ljava/util/Hashtable;
      90: ldc           #46                 // String compression.c2s
      92: ldc           #45                 // String Compression
      94: invokevirtual #30                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      97: pop
      98: getstatic     #1                  // Field keymap:Ljava/util/Hashtable;
     101: ldc           #47                 // String compression_level
     103: ldc           #48                 // String CompressionLevel
     105: invokevirtual #30                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     108: pop
     109: getstatic     #1                  // Field keymap:Ljava/util/Hashtable;
     112: ldc           #49                 // String MaxAuthTries
     114: ldc           #50                 // String NumberOfPasswordPrompts
     116: invokevirtual #30                 // Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     119: pop
     120: return
}
