Compiled from "BaseConstructor.java"
public abstract class org.yaml.snakeyaml.constructor.BaseConstructor {
  protected final java.util.Map<org.yaml.snakeyaml.nodes.NodeId, org.yaml.snakeyaml.constructor.Construct> yamlClassConstructors;

  protected final java.util.Map<org.yaml.snakeyaml.nodes.Tag, org.yaml.snakeyaml.constructor.Construct> yamlConstructors;

  protected final java.util.Map<java.lang.String, org.yaml.snakeyaml.constructor.Construct> yamlMultiConstructors;

  protected org.yaml.snakeyaml.composer.Composer composer;

  private final java.util.Map<org.yaml.snakeyaml.nodes.Node, java.lang.Object> constructedObjects;

  private final java.util.Set<org.yaml.snakeyaml.nodes.Node> recursiveObjects;

  private final java.util.ArrayList<org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple<java.util.Map<java.lang.Object, java.lang.Object>, org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple<java.lang.Object, java.lang.Object>>> maps2fill;

  private final java.util.ArrayList<org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple<java.util.Set<java.lang.Object>, java.lang.Object>> sets2fill;

  protected org.yaml.snakeyaml.nodes.Tag rootTag;

  private org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils;

  private boolean explicitPropertyUtils;

  private boolean allowDuplicateKeys;

  public org.yaml.snakeyaml.constructor.BaseConstructor();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/EnumMap
       8: dup
       9: ldc_w         #3                  // class org/yaml/snakeyaml/nodes/NodeId
      12: invokespecial #4                  // Method java/util/EnumMap."<init>":(Ljava/lang/Class;)V
      15: putfield      #5                  // Field yamlClassConstructors:Ljava/util/Map;
      18: aload_0
      19: new           #6                  // class java/util/HashMap
      22: dup
      23: invokespecial #7                  // Method java/util/HashMap."<init>":()V
      26: putfield      #8                  // Field yamlConstructors:Ljava/util/Map;
      29: aload_0
      30: new           #6                  // class java/util/HashMap
      33: dup
      34: invokespecial #7                  // Method java/util/HashMap."<init>":()V
      37: putfield      #9                  // Field yamlMultiConstructors:Ljava/util/Map;
      40: aload_0
      41: iconst_1
      42: putfield      #10                 // Field allowDuplicateKeys:Z
      45: aload_0
      46: new           #6                  // class java/util/HashMap
      49: dup
      50: invokespecial #7                  // Method java/util/HashMap."<init>":()V
      53: putfield      #11                 // Field constructedObjects:Ljava/util/Map;
      56: aload_0
      57: new           #12                 // class java/util/HashSet
      60: dup
      61: invokespecial #13                 // Method java/util/HashSet."<init>":()V
      64: putfield      #14                 // Field recursiveObjects:Ljava/util/Set;
      67: aload_0
      68: new           #15                 // class java/util/ArrayList
      71: dup
      72: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
      75: putfield      #17                 // Field maps2fill:Ljava/util/ArrayList;
      78: aload_0
      79: new           #15                 // class java/util/ArrayList
      82: dup
      83: invokespecial #16                 // Method java/util/ArrayList."<init>":()V
      86: putfield      #18                 // Field sets2fill:Ljava/util/ArrayList;
      89: aload_0
      90: aconst_null
      91: putfield      #19                 // Field rootTag:Lorg/yaml/snakeyaml/nodes/Tag;
      94: aload_0
      95: iconst_0
      96: putfield      #20                 // Field explicitPropertyUtils:Z
      99: return

  public void setComposer(org.yaml.snakeyaml.composer.Composer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #21                 // Field composer:Lorg/yaml/snakeyaml/composer/Composer;
       5: return

  public boolean checkData();
    Code:
       0: aload_0
       1: getfield      #21                 // Field composer:Lorg/yaml/snakeyaml/composer/Composer;
       4: invokevirtual #22                 // Method org/yaml/snakeyaml/composer/Composer.checkNode:()Z
       7: ireturn

  public java.lang.Object getData();
    Code:
       0: aload_0
       1: getfield      #21                 // Field composer:Lorg/yaml/snakeyaml/composer/Composer;
       4: invokevirtual #22                 // Method org/yaml/snakeyaml/composer/Composer.checkNode:()Z
       7: pop
       8: aload_0
       9: getfield      #21                 // Field composer:Lorg/yaml/snakeyaml/composer/Composer;
      12: invokevirtual #23                 // Method org/yaml/snakeyaml/composer/Composer.getNode:()Lorg/yaml/snakeyaml/nodes/Node;
      15: astore_1
      16: aload_0
      17: getfield      #19                 // Field rootTag:Lorg/yaml/snakeyaml/nodes/Tag;
      20: ifnull        31
      23: aload_1
      24: aload_0
      25: getfield      #19                 // Field rootTag:Lorg/yaml/snakeyaml/nodes/Tag;
      28: invokevirtual #24                 // Method org/yaml/snakeyaml/nodes/Node.setTag:(Lorg/yaml/snakeyaml/nodes/Tag;)V
      31: aload_0
      32: aload_1
      33: invokevirtual #25                 // Method constructDocument:(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
      36: areturn

  public java.lang.Object getSingleData(java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #21                 // Field composer:Lorg/yaml/snakeyaml/composer/Composer;
       4: invokevirtual #26                 // Method org/yaml/snakeyaml/composer/Composer.getSingleNode:()Lorg/yaml/snakeyaml/nodes/Node;
       7: astore_2
       8: aload_2
       9: ifnull        55
      12: ldc_w         #27                 // class java/lang/Object
      15: aload_1
      16: if_acmpeq     34
      19: aload_2
      20: new           #28                 // class org/yaml/snakeyaml/nodes/Tag
      23: dup
      24: aload_1
      25: invokespecial #29                 // Method org/yaml/snakeyaml/nodes/Tag."<init>":(Ljava/lang/Class;)V
      28: invokevirtual #24                 // Method org/yaml/snakeyaml/nodes/Node.setTag:(Lorg/yaml/snakeyaml/nodes/Tag;)V
      31: goto          49
      34: aload_0
      35: getfield      #19                 // Field rootTag:Lorg/yaml/snakeyaml/nodes/Tag;
      38: ifnull        49
      41: aload_2
      42: aload_0
      43: getfield      #19                 // Field rootTag:Lorg/yaml/snakeyaml/nodes/Tag;
      46: invokevirtual #24                 // Method org/yaml/snakeyaml/nodes/Node.setTag:(Lorg/yaml/snakeyaml/nodes/Tag;)V
      49: aload_0
      50: aload_2
      51: invokevirtual #25                 // Method constructDocument:(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
      54: areturn
      55: aconst_null
      56: areturn

  protected final java.lang.Object constructDocument(org.yaml.snakeyaml.nodes.Node);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #30                 // Method constructObject:(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
       5: astore_2
       6: aload_0
       7: invokespecial #31                 // Method fillRecursive:()V
      10: aload_0
      11: getfield      #11                 // Field constructedObjects:Ljava/util/Map;
      14: invokeinterface #32,  1           // InterfaceMethod java/util/Map.clear:()V
      19: aload_0
      20: getfield      #14                 // Field recursiveObjects:Ljava/util/Set;
      23: invokeinterface #33,  1           // InterfaceMethod java/util/Set.clear:()V
      28: aload_2
      29: areturn

  private void fillRecursive();
    Code:
       0: aload_0
       1: getfield      #17                 // Field maps2fill:Ljava/util/ArrayList;
       4: invokevirtual #34                 // Method java/util/ArrayList.isEmpty:()Z
       7: ifne          76
      10: aload_0
      11: getfield      #17                 // Field maps2fill:Ljava/util/ArrayList;
      14: invokevirtual #35                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      17: astore_1
      18: aload_1
      19: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          69
      27: aload_1
      28: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #38                 // class org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple
      36: astore_2
      37: aload_2
      38: invokevirtual #39                 // Method org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple._2:()Ljava/lang/Object;
      41: checkcast     #38                 // class org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple
      44: astore_3
      45: aload_2
      46: invokevirtual #40                 // Method org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple._1:()Ljava/lang/Object;
      49: checkcast     #41                 // class java/util/Map
      52: aload_3
      53: invokevirtual #40                 // Method org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple._1:()Ljava/lang/Object;
      56: aload_3
      57: invokevirtual #39                 // Method org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple._2:()Ljava/lang/Object;
      60: invokeinterface #42,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      65: pop
      66: goto          18
      69: aload_0
      70: getfield      #17                 // Field maps2fill:Ljava/util/ArrayList;
      73: invokevirtual #43                 // Method java/util/ArrayList.clear:()V
      76: aload_0
      77: getfield      #18                 // Field sets2fill:Ljava/util/ArrayList;
      80: invokevirtual #34                 // Method java/util/ArrayList.isEmpty:()Z
      83: ifne          140
      86: aload_0
      87: getfield      #18                 // Field sets2fill:Ljava/util/ArrayList;
      90: invokevirtual #35                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      93: astore_1
      94: aload_1
      95: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     100: ifeq          133
     103: aload_1
     104: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     109: checkcast     #38                 // class org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple
     112: astore_2
     113: aload_2
     114: invokevirtual #40                 // Method org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple._1:()Ljava/lang/Object;
     117: checkcast     #44                 // class java/util/Set
     120: aload_2
     121: invokevirtual #39                 // Method org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple._2:()Ljava/lang/Object;
     124: invokeinterface #45,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     129: pop
     130: goto          94
     133: aload_0
     134: getfield      #18                 // Field sets2fill:Ljava/util/ArrayList;
     137: invokevirtual #43                 // Method java/util/ArrayList.clear:()V
     140: return

  protected java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node);
    Code:
       0: aload_0
       1: getfield      #11                 // Field constructedObjects:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #46,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      10: ifeq          24
      13: aload_0
      14: getfield      #11                 // Field constructedObjects:Ljava/util/Map;
      17: aload_1
      18: invokeinterface #47,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      23: areturn
      24: aload_0
      25: getfield      #14                 // Field recursiveObjects:Ljava/util/Set;
      28: aload_1
      29: invokeinterface #48,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      34: ifeq          53
      37: new           #49                 // class org/yaml/snakeyaml/constructor/ConstructorException
      40: dup
      41: aconst_null
      42: aconst_null
      43: ldc           #50                 // String found unconstructable recursive node
      45: aload_1
      46: invokevirtual #51                 // Method org/yaml/snakeyaml/nodes/Node.getStartMark:()Lorg/yaml/snakeyaml/error/Mark;
      49: invokespecial #52                 // Method org/yaml/snakeyaml/constructor/ConstructorException."<init>":(Ljava/lang/String;Lorg/yaml/snakeyaml/error/Mark;Ljava/lang/String;Lorg/yaml/snakeyaml/error/Mark;)V
      52: athrow
      53: aload_0
      54: getfield      #14                 // Field recursiveObjects:Ljava/util/Set;
      57: aload_1
      58: invokeinterface #45,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      63: pop
      64: aload_0
      65: aload_1
      66: invokevirtual #53                 // Method getConstructor:(Lorg/yaml/snakeyaml/nodes/Node;)Lorg/yaml/snakeyaml/constructor/Construct;
      69: astore_2
      70: aload_2
      71: aload_1
      72: invokeinterface #54,  2           // InterfaceMethod org/yaml/snakeyaml/constructor/Construct.construct:(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
      77: astore_3
      78: aload_0
      79: getfield      #11                 // Field constructedObjects:Ljava/util/Map;
      82: aload_1
      83: aload_3
      84: invokeinterface #42,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      89: pop
      90: aload_0
      91: getfield      #14                 // Field recursiveObjects:Ljava/util/Set;
      94: aload_1
      95: invokeinterface #55,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
     100: pop
     101: aload_1
     102: invokevirtual #56                 // Method org/yaml/snakeyaml/nodes/Node.isTwoStepsConstruction:()Z
     105: ifeq          116
     108: aload_2
     109: aload_1
     110: aload_3
     111: invokeinterface #57,  3           // InterfaceMethod org/yaml/snakeyaml/constructor/Construct.construct2ndStep:(Lorg/yaml/snakeyaml/nodes/Node;Ljava/lang/Object;)V
     116: aload_3
     117: areturn

  protected org.yaml.snakeyaml.constructor.Construct getConstructor(org.yaml.snakeyaml.nodes.Node);
    Code:
       0: aload_1
       1: invokevirtual #58                 // Method org/yaml/snakeyaml/nodes/Node.useClassConstructor:()Z
       4: ifeq          24
       7: aload_0
       8: getfield      #5                  // Field yamlClassConstructors:Ljava/util/Map;
      11: aload_1
      12: invokevirtual #59                 // Method org/yaml/snakeyaml/nodes/Node.getNodeId:()Lorg/yaml/snakeyaml/nodes/NodeId;
      15: invokeinterface #47,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      20: checkcast     #60                 // class org/yaml/snakeyaml/constructor/Construct
      23: areturn
      24: aload_0
      25: getfield      #8                  // Field yamlConstructors:Ljava/util/Map;
      28: aload_1
      29: invokevirtual #61                 // Method org/yaml/snakeyaml/nodes/Node.getTag:()Lorg/yaml/snakeyaml/nodes/Tag;
      32: invokeinterface #47,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      37: checkcast     #60                 // class org/yaml/snakeyaml/constructor/Construct
      40: astore_2
      41: aload_2
      42: ifnonnull     124
      45: aload_0
      46: getfield      #9                  // Field yamlMultiConstructors:Ljava/util/Map;
      49: invokeinterface #62,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      54: invokeinterface #63,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      59: astore_3
      60: aload_3
      61: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      66: ifeq          110
      69: aload_3
      70: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      75: checkcast     #64                 // class java/lang/String
      78: astore        4
      80: aload_1
      81: invokevirtual #61                 // Method org/yaml/snakeyaml/nodes/Node.getTag:()Lorg/yaml/snakeyaml/nodes/Tag;
      84: aload         4
      86: invokevirtual #65                 // Method org/yaml/snakeyaml/nodes/Tag.startsWith:(Ljava/lang/String;)Z
      89: ifeq          107
      92: aload_0
      93: getfield      #9                  // Field yamlMultiConstructors:Ljava/util/Map;
      96: aload         4
      98: invokeinterface #47,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     103: checkcast     #60                 // class org/yaml/snakeyaml/constructor/Construct
     106: areturn
     107: goto          60
     110: aload_0
     111: getfield      #8                  // Field yamlConstructors:Ljava/util/Map;
     114: aconst_null
     115: invokeinterface #47,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     120: checkcast     #60                 // class org/yaml/snakeyaml/constructor/Construct
     123: areturn
     124: aload_2
     125: areturn

  protected java.lang.Object constructScalar(org.yaml.snakeyaml.nodes.ScalarNode);
    Code:
       0: aload_1
       1: invokevirtual #66                 // Method org/yaml/snakeyaml/nodes/ScalarNode.getValue:()Ljava/lang/String;
       4: areturn

  protected java.util.List<java.lang.Object> createDefaultList(int);
    Code:
       0: new           #15                 // class java/util/ArrayList
       3: dup
       4: iload_1
       5: invokespecial #67                 // Method java/util/ArrayList."<init>":(I)V
       8: areturn

  protected java.util.Set<java.lang.Object> createDefaultSet(int);
    Code:
       0: new           #68                 // class java/util/LinkedHashSet
       3: dup
       4: iload_1
       5: invokespecial #69                 // Method java/util/LinkedHashSet."<init>":(I)V
       8: areturn

  protected java.lang.Object createArray(java.lang.Class<?>, int);
    Code:
       0: aload_1
       1: invokevirtual #70                 // Method java/lang/Class.getComponentType:()Ljava/lang/Class;
       4: iload_2
       5: invokestatic  #71                 // Method java/lang/reflect/Array.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;
       8: areturn

  protected java.util.List<? extends java.lang.Object> constructSequence(org.yaml.snakeyaml.nodes.SequenceNode);
    Code:
       0: ldc_w         #72                 // class java/util/List
       3: aload_1
       4: invokevirtual #73                 // Method org/yaml/snakeyaml/nodes/SequenceNode.getType:()Ljava/lang/Class;
       7: invokevirtual #74                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      10: ifeq          47
      13: aload_1
      14: invokevirtual #73                 // Method org/yaml/snakeyaml/nodes/SequenceNode.getType:()Ljava/lang/Class;
      17: invokevirtual #75                 // Method java/lang/Class.isInterface:()Z
      20: ifne          47
      23: aload_1
      24: invokevirtual #73                 // Method org/yaml/snakeyaml/nodes/SequenceNode.getType:()Ljava/lang/Class;
      27: invokevirtual #76                 // Method java/lang/Class.newInstance:()Ljava/lang/Object;
      30: checkcast     #72                 // class java/util/List
      33: astore_2
      34: goto          61
      37: astore_3
      38: new           #78                 // class org/yaml/snakeyaml/error/YAMLException
      41: dup
      42: aload_3
      43: invokespecial #79                 // Method org/yaml/snakeyaml/error/YAMLException."<init>":(Ljava/lang/Throwable;)V
      46: athrow
      47: aload_0
      48: aload_1
      49: invokevirtual #80                 // Method org/yaml/snakeyaml/nodes/SequenceNode.getValue:()Ljava/util/List;
      52: invokeinterface #81,  1           // InterfaceMethod java/util/List.size:()I
      57: invokevirtual #82                 // Method createDefaultList:(I)Ljava/util/List;
      60: astore_2
      61: aload_0
      62: aload_1
      63: aload_2
      64: invokevirtual #83                 // Method constructSequenceStep2:(Lorg/yaml/snakeyaml/nodes/SequenceNode;Ljava/util/Collection;)V
      67: aload_2
      68: areturn
    Exception table:
       from    to  target type
          23    34    37   Class java/lang/Exception

  protected java.util.Set<? extends java.lang.Object> constructSet(org.yaml.snakeyaml.nodes.SequenceNode);
    Code:
       0: aload_1
       1: invokevirtual #73                 // Method org/yaml/snakeyaml/nodes/SequenceNode.getType:()Ljava/lang/Class;
       4: invokevirtual #75                 // Method java/lang/Class.isInterface:()Z
       7: ifne          34
      10: aload_1
      11: invokevirtual #73                 // Method org/yaml/snakeyaml/nodes/SequenceNode.getType:()Ljava/lang/Class;
      14: invokevirtual #76                 // Method java/lang/Class.newInstance:()Ljava/lang/Object;
      17: checkcast     #44                 // class java/util/Set
      20: astore_2
      21: goto          48
      24: astore_3
      25: new           #78                 // class org/yaml/snakeyaml/error/YAMLException
      28: dup
      29: aload_3
      30: invokespecial #79                 // Method org/yaml/snakeyaml/error/YAMLException."<init>":(Ljava/lang/Throwable;)V
      33: athrow
      34: aload_0
      35: aload_1
      36: invokevirtual #80                 // Method org/yaml/snakeyaml/nodes/SequenceNode.getValue:()Ljava/util/List;
      39: invokeinterface #81,  1           // InterfaceMethod java/util/List.size:()I
      44: invokevirtual #84                 // Method createDefaultSet:(I)Ljava/util/Set;
      47: astore_2
      48: aload_0
      49: aload_1
      50: aload_2
      51: invokevirtual #83                 // Method constructSequenceStep2:(Lorg/yaml/snakeyaml/nodes/SequenceNode;Ljava/util/Collection;)V
      54: aload_2
      55: areturn
    Exception table:
       from    to  target type
          10    21    24   Class java/lang/Exception

  protected java.lang.Object constructArray(org.yaml.snakeyaml.nodes.SequenceNode);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: aload_1
       4: invokevirtual #73                 // Method org/yaml/snakeyaml/nodes/SequenceNode.getType:()Ljava/lang/Class;
       7: aload_1
       8: invokevirtual #80                 // Method org/yaml/snakeyaml/nodes/SequenceNode.getValue:()Ljava/util/List;
      11: invokeinterface #81,  1           // InterfaceMethod java/util/List.size:()I
      16: invokevirtual #85                 // Method createArray:(Ljava/lang/Class;I)Ljava/lang/Object;
      19: invokevirtual #86                 // Method constructArrayStep2:(Lorg/yaml/snakeyaml/nodes/SequenceNode;Ljava/lang/Object;)Ljava/lang/Object;
      22: areturn

  protected void constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode, java.util.Collection<java.lang.Object>);
    Code:
       0: aload_1
       1: invokevirtual #80                 // Method org/yaml/snakeyaml/nodes/SequenceNode.getValue:()Ljava/util/List;
       4: invokeinterface #87,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_3
      10: aload_3
      11: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          46
      19: aload_3
      20: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #88                 // class org/yaml/snakeyaml/nodes/Node
      28: astore        4
      30: aload_2
      31: aload_0
      32: aload         4
      34: invokevirtual #30                 // Method constructObject:(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
      37: invokeinterface #89,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      42: pop
      43: goto          10
      46: return

  protected java.lang.Object constructArrayStep2(org.yaml.snakeyaml.nodes.SequenceNode, java.lang.Object);
    Code:
       0: aload_1
       1: invokevirtual #73                 // Method org/yaml/snakeyaml/nodes/SequenceNode.getType:()Ljava/lang/Class;
       4: invokevirtual #70                 // Method java/lang/Class.getComponentType:()Ljava/lang/Class;
       7: astore_3
       8: iconst_0
       9: istore        4
      11: aload_1
      12: invokevirtual #80                 // Method org/yaml/snakeyaml/nodes/SequenceNode.getValue:()Ljava/util/List;
      15: invokeinterface #87,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      20: astore        5
      22: aload         5
      24: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          349
      32: aload         5
      34: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      39: checkcast     #88                 // class org/yaml/snakeyaml/nodes/Node
      42: astore        6
      44: aload         6
      46: invokevirtual #90                 // Method org/yaml/snakeyaml/nodes/Node.getType:()Ljava/lang/Class;
      49: ldc_w         #27                 // class java/lang/Object
      52: if_acmpne     61
      55: aload         6
      57: aload_3
      58: invokevirtual #91                 // Method org/yaml/snakeyaml/nodes/Node.setType:(Ljava/lang/Class;)V
      61: aload_0
      62: aload         6
      64: invokevirtual #30                 // Method constructObject:(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
      67: astore        7
      69: aload_3
      70: invokevirtual #92                 // Method java/lang/Class.isPrimitive:()Z
      73: ifeq          335
      76: aload         7
      78: ifnonnull     109
      81: new           #93                 // class java/lang/NullPointerException
      84: dup
      85: new           #94                 // class java/lang/StringBuilder
      88: dup
      89: invokespecial #95                 // Method java/lang/StringBuilder."<init>":()V
      92: ldc           #96                 // String Unable to construct element value for
      94: invokevirtual #97                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      97: aload         6
      99: invokevirtual #98                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     102: invokevirtual #99                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     105: invokespecial #100                // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
     108: athrow
     109: getstatic     #101                // Field java/lang/Byte.TYPE:Ljava/lang/Class;
     112: aload_3
     113: invokevirtual #102                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     116: ifeq          136
     119: aload_2
     120: iload         4
     122: aload         7
     124: checkcast     #103                // class java/lang/Number
     127: invokevirtual #104                // Method java/lang/Number.byteValue:()B
     130: invokestatic  #105                // Method java/lang/reflect/Array.setByte:(Ljava/lang/Object;IB)V
     133: goto          343
     136: getstatic     #106                // Field java/lang/Short.TYPE:Ljava/lang/Class;
     139: aload_3
     140: invokevirtual #102                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     143: ifeq          163
     146: aload_2
     147: iload         4
     149: aload         7
     151: checkcast     #103                // class java/lang/Number
     154: invokevirtual #107                // Method java/lang/Number.shortValue:()S
     157: invokestatic  #108                // Method java/lang/reflect/Array.setShort:(Ljava/lang/Object;IS)V
     160: goto          343
     163: getstatic     #109                // Field java/lang/Integer.TYPE:Ljava/lang/Class;
     166: aload_3
     167: invokevirtual #102                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     170: ifeq          190
     173: aload_2
     174: iload         4
     176: aload         7
     178: checkcast     #103                // class java/lang/Number
     181: invokevirtual #110                // Method java/lang/Number.intValue:()I
     184: invokestatic  #111                // Method java/lang/reflect/Array.setInt:(Ljava/lang/Object;II)V
     187: goto          343
     190: getstatic     #112                // Field java/lang/Long.TYPE:Ljava/lang/Class;
     193: aload_3
     194: invokevirtual #102                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     197: ifeq          217
     200: aload_2
     201: iload         4
     203: aload         7
     205: checkcast     #103                // class java/lang/Number
     208: invokevirtual #113                // Method java/lang/Number.longValue:()J
     211: invokestatic  #114                // Method java/lang/reflect/Array.setLong:(Ljava/lang/Object;IJ)V
     214: goto          343
     217: getstatic     #115                // Field java/lang/Float.TYPE:Ljava/lang/Class;
     220: aload_3
     221: invokevirtual #102                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     224: ifeq          244
     227: aload_2
     228: iload         4
     230: aload         7
     232: checkcast     #103                // class java/lang/Number
     235: invokevirtual #116                // Method java/lang/Number.floatValue:()F
     238: invokestatic  #117                // Method java/lang/reflect/Array.setFloat:(Ljava/lang/Object;IF)V
     241: goto          343
     244: getstatic     #118                // Field java/lang/Double.TYPE:Ljava/lang/Class;
     247: aload_3
     248: invokevirtual #102                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     251: ifeq          271
     254: aload_2
     255: iload         4
     257: aload         7
     259: checkcast     #103                // class java/lang/Number
     262: invokevirtual #119                // Method java/lang/Number.doubleValue:()D
     265: invokestatic  #120                // Method java/lang/reflect/Array.setDouble:(Ljava/lang/Object;ID)V
     268: goto          343
     271: getstatic     #121                // Field java/lang/Character.TYPE:Ljava/lang/Class;
     274: aload_3
     275: invokevirtual #102                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     278: ifeq          298
     281: aload_2
     282: iload         4
     284: aload         7
     286: checkcast     #122                // class java/lang/Character
     289: invokevirtual #123                // Method java/lang/Character.charValue:()C
     292: invokestatic  #124                // Method java/lang/reflect/Array.setChar:(Ljava/lang/Object;IC)V
     295: goto          343
     298: getstatic     #125                // Field java/lang/Boolean.TYPE:Ljava/lang/Class;
     301: aload_3
     302: invokevirtual #102                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     305: ifeq          325
     308: aload_2
     309: iload         4
     311: aload         7
     313: checkcast     #126                // class java/lang/Boolean
     316: invokevirtual #127                // Method java/lang/Boolean.booleanValue:()Z
     319: invokestatic  #128                // Method java/lang/reflect/Array.setBoolean:(Ljava/lang/Object;IZ)V
     322: goto          343
     325: new           #78                 // class org/yaml/snakeyaml/error/YAMLException
     328: dup
     329: ldc           #129                // String unexpected primitive type
     331: invokespecial #130                // Method org/yaml/snakeyaml/error/YAMLException."<init>":(Ljava/lang/String;)V
     334: athrow
     335: aload_2
     336: iload         4
     338: aload         7
     340: invokestatic  #131                // Method java/lang/reflect/Array.set:(Ljava/lang/Object;ILjava/lang/Object;)V
     343: iinc          4, 1
     346: goto          22
     349: aload_2
     350: areturn

  protected java.util.Map<java.lang.Object, java.lang.Object> createDefaultMap();
    Code:
       0: new           #132                // class java/util/LinkedHashMap
       3: dup
       4: invokespecial #133                // Method java/util/LinkedHashMap."<init>":()V
       7: areturn

  protected java.util.Set<java.lang.Object> createDefaultSet();
    Code:
       0: new           #68                 // class java/util/LinkedHashSet
       3: dup
       4: invokespecial #134                // Method java/util/LinkedHashSet."<init>":()V
       7: areturn

  protected java.util.Set<java.lang.Object> constructSet(org.yaml.snakeyaml.nodes.MappingNode);
    Code:
       0: aload_0
       1: invokevirtual #135                // Method createDefaultSet:()Ljava/util/Set;
       4: astore_2
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokevirtual #136                // Method constructSet2ndStep:(Lorg/yaml/snakeyaml/nodes/MappingNode;Ljava/util/Set;)V
      11: aload_2
      12: areturn

  protected java.util.Map<java.lang.Object, java.lang.Object> constructMapping(org.yaml.snakeyaml.nodes.MappingNode);
    Code:
       0: aload_0
       1: invokevirtual #137                // Method createDefaultMap:()Ljava/util/Map;
       4: astore_2
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokevirtual #138                // Method constructMapping2ndStep:(Lorg/yaml/snakeyaml/nodes/MappingNode;Ljava/util/Map;)V
      11: aload_2
      12: areturn

  protected void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode, java.util.Map<java.lang.Object, java.lang.Object>);
    Code:
       0: aload_1
       1: invokevirtual #139                // Method org/yaml/snakeyaml/nodes/MappingNode.getValue:()Ljava/util/List;
       4: astore_3
       5: aload_3
       6: invokeinterface #87,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      11: astore        4
      13: aload         4
      15: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ifeq          177
      23: aload         4
      25: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #140                // class org/yaml/snakeyaml/nodes/NodeTuple
      33: astore        5
      35: aload         5
      37: invokevirtual #141                // Method org/yaml/snakeyaml/nodes/NodeTuple.getKeyNode:()Lorg/yaml/snakeyaml/nodes/Node;
      40: astore        6
      42: aload         5
      44: invokevirtual #142                // Method org/yaml/snakeyaml/nodes/NodeTuple.getValueNode:()Lorg/yaml/snakeyaml/nodes/Node;
      47: astore        7
      49: aload_0
      50: aload         6
      52: invokevirtual #30                 // Method constructObject:(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
      55: astore        8
      57: aload         8
      59: ifnull        117
      62: aload         8
      64: invokevirtual #143                // Method java/lang/Object.hashCode:()I
      67: pop
      68: goto          117
      71: astore        9
      73: new           #49                 // class org/yaml/snakeyaml/constructor/ConstructorException
      76: dup
      77: ldc           #144                // String while constructing a mapping
      79: aload_1
      80: invokevirtual #145                // Method org/yaml/snakeyaml/nodes/MappingNode.getStartMark:()Lorg/yaml/snakeyaml/error/Mark;
      83: new           #94                 // class java/lang/StringBuilder
      86: dup
      87: invokespecial #95                 // Method java/lang/StringBuilder."<init>":()V
      90: ldc           #146                // String found unacceptable key
      92: invokevirtual #97                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      95: aload         8
      97: invokevirtual #98                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     100: invokevirtual #99                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     103: aload         5
     105: invokevirtual #141                // Method org/yaml/snakeyaml/nodes/NodeTuple.getKeyNode:()Lorg/yaml/snakeyaml/nodes/Node;
     108: invokevirtual #51                 // Method org/yaml/snakeyaml/nodes/Node.getStartMark:()Lorg/yaml/snakeyaml/error/Mark;
     111: aload         9
     113: invokespecial #147                // Method org/yaml/snakeyaml/constructor/ConstructorException."<init>":(Ljava/lang/String;Lorg/yaml/snakeyaml/error/Mark;Ljava/lang/String;Lorg/yaml/snakeyaml/error/Mark;Ljava/lang/Throwable;)V
     116: athrow
     117: aload_0
     118: aload         7
     120: invokevirtual #30                 // Method constructObject:(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
     123: astore        9
     125: aload         6
     127: invokevirtual #56                 // Method org/yaml/snakeyaml/nodes/Node.isTwoStepsConstruction:()Z
     130: ifeq          163
     133: aload_0
     134: getfield      #17                 // Field maps2fill:Ljava/util/ArrayList;
     137: iconst_0
     138: new           #38                 // class org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple
     141: dup
     142: aload_2
     143: new           #38                 // class org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple
     146: dup
     147: aload         8
     149: aload         9
     151: invokespecial #148                // Method org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     154: invokespecial #148                // Method org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     157: invokevirtual #149                // Method java/util/ArrayList.add:(ILjava/lang/Object;)V
     160: goto          174
     163: aload_2
     164: aload         8
     166: aload         9
     168: invokeinterface #42,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     173: pop
     174: goto          13
     177: return
    Exception table:
       from    to  target type
          62    68    71   Class java/lang/Exception

  protected void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode, java.util.Set<java.lang.Object>);
    Code:
       0: aload_1
       1: invokevirtual #139                // Method org/yaml/snakeyaml/nodes/MappingNode.getValue:()Ljava/util/List;
       4: astore_3
       5: aload_3
       6: invokeinterface #87,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      11: astore        4
      13: aload         4
      15: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ifeq          151
      23: aload         4
      25: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #140                // class org/yaml/snakeyaml/nodes/NodeTuple
      33: astore        5
      35: aload         5
      37: invokevirtual #141                // Method org/yaml/snakeyaml/nodes/NodeTuple.getKeyNode:()Lorg/yaml/snakeyaml/nodes/Node;
      40: astore        6
      42: aload_0
      43: aload         6
      45: invokevirtual #30                 // Method constructObject:(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
      48: astore        7
      50: aload         7
      52: ifnull        110
      55: aload         7
      57: invokevirtual #143                // Method java/lang/Object.hashCode:()I
      60: pop
      61: goto          110
      64: astore        8
      66: new           #49                 // class org/yaml/snakeyaml/constructor/ConstructorException
      69: dup
      70: ldc           #150                // String while constructing a Set
      72: aload_1
      73: invokevirtual #145                // Method org/yaml/snakeyaml/nodes/MappingNode.getStartMark:()Lorg/yaml/snakeyaml/error/Mark;
      76: new           #94                 // class java/lang/StringBuilder
      79: dup
      80: invokespecial #95                 // Method java/lang/StringBuilder."<init>":()V
      83: ldc           #146                // String found unacceptable key
      85: invokevirtual #97                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: aload         7
      90: invokevirtual #98                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      93: invokevirtual #99                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      96: aload         5
      98: invokevirtual #141                // Method org/yaml/snakeyaml/nodes/NodeTuple.getKeyNode:()Lorg/yaml/snakeyaml/nodes/Node;
     101: invokevirtual #51                 // Method org/yaml/snakeyaml/nodes/Node.getStartMark:()Lorg/yaml/snakeyaml/error/Mark;
     104: aload         8
     106: invokespecial #147                // Method org/yaml/snakeyaml/constructor/ConstructorException."<init>":(Ljava/lang/String;Lorg/yaml/snakeyaml/error/Mark;Ljava/lang/String;Lorg/yaml/snakeyaml/error/Mark;Ljava/lang/Throwable;)V
     109: athrow
     110: aload         6
     112: invokevirtual #56                 // Method org/yaml/snakeyaml/nodes/Node.isTwoStepsConstruction:()Z
     115: ifeq          139
     118: aload_0
     119: getfield      #18                 // Field sets2fill:Ljava/util/ArrayList;
     122: iconst_0
     123: new           #38                 // class org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple
     126: dup
     127: aload_2
     128: aload         7
     130: invokespecial #148                // Method org/yaml/snakeyaml/constructor/BaseConstructor$RecursiveTuple."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     133: invokevirtual #149                // Method java/util/ArrayList.add:(ILjava/lang/Object;)V
     136: goto          148
     139: aload_2
     140: aload         7
     142: invokeinterface #45,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     147: pop
     148: goto          13
     151: return
    Exception table:
       from    to  target type
          55    61    64   Class java/lang/Exception

  public void setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #151                // Field propertyUtils:Lorg/yaml/snakeyaml/introspector/PropertyUtils;
       5: aload_0
       6: iconst_1
       7: putfield      #20                 // Field explicitPropertyUtils:Z
      10: return

  public final org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils();
    Code:
       0: aload_0
       1: getfield      #151                // Field propertyUtils:Lorg/yaml/snakeyaml/introspector/PropertyUtils;
       4: ifnonnull     18
       7: aload_0
       8: new           #152                // class org/yaml/snakeyaml/introspector/PropertyUtils
      11: dup
      12: invokespecial #153                // Method org/yaml/snakeyaml/introspector/PropertyUtils."<init>":()V
      15: putfield      #151                // Field propertyUtils:Lorg/yaml/snakeyaml/introspector/PropertyUtils;
      18: aload_0
      19: getfield      #151                // Field propertyUtils:Lorg/yaml/snakeyaml/introspector/PropertyUtils;
      22: areturn

  public final boolean isExplicitPropertyUtils();
    Code:
       0: aload_0
       1: getfield      #20                 // Field explicitPropertyUtils:Z
       4: ireturn

  public boolean isAllowDuplicateKeys();
    Code:
       0: aload_0
       1: getfield      #10                 // Field allowDuplicateKeys:Z
       4: ireturn

  public void setAllowDuplicateKeys(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field allowDuplicateKeys:Z
       5: return
}
