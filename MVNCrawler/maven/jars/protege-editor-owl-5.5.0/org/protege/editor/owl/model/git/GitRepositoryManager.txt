Compiled from "GitRepositoryManager.java"
public class org.protege.editor.owl.model.git.GitRepositoryManager implements org.protege.editor.owl.model.user.UserNameProvider {
  private static final org.slf4j.Logger logger;

  private static final java.lang.String USER_SECTION;

  private static final java.lang.String USER_NAME;

  private final org.protege.editor.owl.model.OWLModelManager modelManager;

  private final org.eclipse.jgit.lib.Repository repository;

  private org.protege.editor.owl.model.git.GitRepositoryManager(org.protege.editor.owl.model.OWLModelManager, org.eclipse.jgit.lib.Repository);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #3                  // class org/protege/editor/owl/model/OWLModelManager
      12: putfield      #4                  // Field modelManager:Lorg/protege/editor/owl/model/OWLModelManager;
      15: aload_0
      16: aload_2
      17: putfield      #5                  // Field repository:Lorg/eclipse/jgit/lib/Repository;
      20: return

  public static org.protege.editor.owl.model.git.GitRepositoryManager get(org.protege.editor.owl.model.OWLModelManager);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: checkcast     #3                  // class org/protege/editor/owl/model/OWLModelManager
       7: invokestatic  #6                  // Method getRepositoryDirectory:(Lorg/protege/editor/owl/model/OWLModelManager;)Ljava/util/Optional;
      10: astore_1
      11: aload_1
      12: invokevirtual #7                  // Method java/util/Optional.isPresent:()Z
      15: ifeq          97
      18: getstatic     #8                  // Field logger:Lorg/slf4j/Logger;
      21: ldc           #9                  // String [GitRepo] Git repository detected: {}
      23: aload_1
      24: invokevirtual #10                 // Method java/util/Optional.get:()Ljava/lang/Object;
      27: invokeinterface #11,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
      32: new           #12                 // class org/eclipse/jgit/storage/file/FileRepositoryBuilder
      35: dup
      36: invokespecial #13                 // Method org/eclipse/jgit/storage/file/FileRepositoryBuilder."<init>":()V
      39: aload_1
      40: invokevirtual #10                 // Method java/util/Optional.get:()Ljava/lang/Object;
      43: checkcast     #14                 // class java/nio/file/Path
      46: invokeinterface #15,  1           // InterfaceMethod java/nio/file/Path.toFile:()Ljava/io/File;
      51: invokevirtual #16                 // Method org/eclipse/jgit/storage/file/FileRepositoryBuilder.setGitDir:(Ljava/io/File;)Lorg/eclipse/jgit/lib/BaseRepositoryBuilder;
      54: checkcast     #12                 // class org/eclipse/jgit/storage/file/FileRepositoryBuilder
      57: invokevirtual #17                 // Method org/eclipse/jgit/storage/file/FileRepositoryBuilder.build:()Lorg/eclipse/jgit/lib/Repository;
      60: astore_2
      61: new           #18                 // class org/protege/editor/owl/model/git/GitRepositoryManager
      64: dup
      65: aload_0
      66: aload_2
      67: invokespecial #19                 // Method "<init>":(Lorg/protege/editor/owl/model/OWLModelManager;Lorg/eclipse/jgit/lib/Repository;)V
      70: areturn
      71: astore_2
      72: getstatic     #8                  // Field logger:Lorg/slf4j/Logger;
      75: ldc           #21                 // String [GitRepo] An error occurred whilst build the Git repository: {}
      77: aload_2
      78: invokevirtual #22                 // Method java/io/IOException.getMessage:()Ljava/lang/String;
      81: aload_2
      82: invokeinterface #23,  4           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      87: new           #18                 // class org/protege/editor/owl/model/git/GitRepositoryManager
      90: dup
      91: aload_0
      92: aconst_null
      93: invokespecial #19                 // Method "<init>":(Lorg/protege/editor/owl/model/OWLModelManager;Lorg/eclipse/jgit/lib/Repository;)V
      96: areturn
      97: new           #18                 // class org/protege/editor/owl/model/git/GitRepositoryManager
     100: dup
     101: aload_0
     102: aconst_null
     103: invokespecial #19                 // Method "<init>":(Lorg/protege/editor/owl/model/OWLModelManager;Lorg/eclipse/jgit/lib/Repository;)V
     106: areturn
    Exception table:
       from    to  target type
          32    70    71   Class java/io/IOException

  public boolean isGitRepositoryPresent();
    Code:
       0: aload_0
       1: getfield      #5                  // Field repository:Lorg/eclipse/jgit/lib/Repository;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.util.Optional<org.eclipse.jgit.lib.Repository> getRepository();
    Code:
       0: aload_0
       1: getfield      #5                  // Field repository:Lorg/eclipse/jgit/lib/Repository;
       4: invokestatic  #24                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
       7: areturn

  public java.util.Optional<java.lang.String> getBranchName();
    Code:
       0: aload_0
       1: getfield      #5                  // Field repository:Lorg/eclipse/jgit/lib/Repository;
       4: ifnonnull     11
       7: invokestatic  #25                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      10: areturn
      11: aload_0
      12: getfield      #5                  // Field repository:Lorg/eclipse/jgit/lib/Repository;
      15: invokevirtual #26                 // Method org/eclipse/jgit/lib/Repository.getBranch:()Ljava/lang/String;
      18: astore_1
      19: aload_1
      20: invokestatic  #27                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      23: areturn
      24: astore_1
      25: getstatic     #8                  // Field logger:Lorg/slf4j/Logger;
      28: ldc           #28                 // String [GitRepo] An error occurred whilst getting the current branch name: {}
      30: aload_1
      31: invokevirtual #22                 // Method java/io/IOException.getMessage:()Ljava/lang/String;
      34: aload_1
      35: invokeinterface #23,  4           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      40: invokestatic  #25                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      43: areturn
    Exception table:
       from    to  target type
          11    23    24   Class java/io/IOException

  public java.util.Optional<java.lang.String> getUserName();
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method getRepository:()Ljava/util/Optional;
       4: invokedynamic #30,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
       9: invokevirtual #31                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      12: areturn

  public boolean isAnyOntologyDocumentModified();
    Code:
       0: aload_0
       1: getfield      #5                  // Field repository:Lorg/eclipse/jgit/lib/Repository;
       4: ifnonnull     9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: invokespecial #32                 // Method getModifiedOntologyDocumentPaths:()Ljava/util/stream/Stream;
      13: astore_1
      14: aload_1
      15: invokeinterface #33,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      20: invokevirtual #7                  // Method java/util/Optional.isPresent:()Z
      23: ireturn

  private java.util.stream.Stream<java.nio.file.Path> getModifiedOntologyDocumentPaths();
    Code:
       0: aload_0
       1: getfield      #5                  // Field repository:Lorg/eclipse/jgit/lib/Repository;
       4: ifnonnull     11
       7: invokestatic  #34                 // InterfaceMethod java/util/stream/Stream.empty:()Ljava/util/stream/Stream;
      10: areturn
      11: new           #35                 // class org/eclipse/jgit/api/Git
      14: dup
      15: aload_0
      16: getfield      #5                  // Field repository:Lorg/eclipse/jgit/lib/Repository;
      19: invokespecial #36                 // Method org/eclipse/jgit/api/Git."<init>":(Lorg/eclipse/jgit/lib/Repository;)V
      22: astore_1
      23: aload_1
      24: invokevirtual #37                 // Method org/eclipse/jgit/api/Git.status:()Lorg/eclipse/jgit/api/StatusCommand;
      27: invokevirtual #38                 // Method org/eclipse/jgit/api/StatusCommand.call:()Lorg/eclipse/jgit/api/Status;
      30: astore_2
      31: aload_0
      32: getfield      #5                  // Field repository:Lorg/eclipse/jgit/lib/Repository;
      35: invokevirtual #39                 // Method org/eclipse/jgit/lib/Repository.getDirectory:()Ljava/io/File;
      38: invokevirtual #40                 // Method java/io/File.toPath:()Ljava/nio/file/Path;
      41: astore_3
      42: aload_3
      43: invokeinterface #41,  1           // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
      48: astore        4
      50: aload_2
      51: invokevirtual #42                 // Method org/eclipse/jgit/api/Status.getModified:()Ljava/util/Set;
      54: invokeinterface #43,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      59: aload_2
      60: invokevirtual #44                 // Method org/eclipse/jgit/api/Status.getChanged:()Ljava/util/Set;
      63: invokeinterface #43,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      68: invokestatic  #45                 // InterfaceMethod java/util/stream/Stream.concat:(Ljava/util/stream/Stream;Ljava/util/stream/Stream;)Ljava/util/stream/Stream;
      71: astore        5
      73: aload_0
      74: invokespecial #46                 // Method getFileBasedOntologyDocumentPaths:()Ljava/util/Set;
      77: astore        6
      79: aload         5
      81: aload         4
      83: dup
      84: invokestatic  #47                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      87: pop
      88: invokedynamic #48,  0             // InvokeDynamic #1:apply:(Ljava/nio/file/Path;)Ljava/util/function/Function;
      93: invokeinterface #49,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      98: aload         6
     100: dup
     101: invokestatic  #47                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
     104: pop
     105: invokedynamic #50,  0             // InvokeDynamic #2:test:(Ljava/util/Set;)Ljava/util/function/Predicate;
     110: invokeinterface #51,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
     115: areturn
     116: astore_1
     117: getstatic     #8                  // Field logger:Lorg/slf4j/Logger;
     120: ldc           #53                 // String [GitRepo] An error occurred whilst getting repository information:
     122: aload_1
     123: invokevirtual #54                 // Method org/eclipse/jgit/api/errors/GitAPIException.getMessage:()Ljava/lang/String;
     126: aload_1
     127: invokeinterface #23,  4           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     132: invokestatic  #34                 // InterfaceMethod java/util/stream/Stream.empty:()Ljava/util/stream/Stream;
     135: areturn
    Exception table:
       from    to  target type
           0    10   116   Class org/eclipse/jgit/api/errors/GitAPIException
          11   115   116   Class org/eclipse/jgit/api/errors/GitAPIException

  private java.util.Set<java.nio.file.Path> getFileBasedOntologyDocumentPaths();
    Code:
       0: aload_0
       1: getfield      #4                  // Field modelManager:Lorg/protege/editor/owl/model/OWLModelManager;
       4: invokeinterface #55,  1           // InterfaceMethod org/protege/editor/owl/model/OWLModelManager.getOntologies:()Ljava/util/Set;
       9: invokeinterface #43,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      14: aload_0
      15: getfield      #4                  // Field modelManager:Lorg/protege/editor/owl/model/OWLModelManager;
      18: dup
      19: invokestatic  #47                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      22: pop
      23: invokedynamic #56,  0             // InvokeDynamic #3:apply:(Lorg/protege/editor/owl/model/OWLModelManager;)Ljava/util/function/Function;
      28: invokeinterface #49,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      33: invokedynamic #57,  0             // InvokeDynamic #4:test:()Ljava/util/function/Predicate;
      38: invokeinterface #51,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      43: invokedynamic #58,  0             // InvokeDynamic #5:apply:()Ljava/util/function/Function;
      48: invokeinterface #49,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      53: invokestatic  #59                 // Method java/util/stream/Collectors.toSet:()Ljava/util/stream/Collector;
      56: invokeinterface #60,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      61: checkcast     #61                 // class java/util/Set
      64: areturn

  public void dispose();
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method getRepository:()Ljava/util/Optional;
       4: invokedynamic #62,  0             // InvokeDynamic #6:accept:()Ljava/util/function/Consumer;
       9: invokevirtual #63                 // Method java/util/Optional.ifPresent:(Ljava/util/function/Consumer;)V
      12: return

  private static java.util.Optional<java.nio.file.Path> getRepositoryDirectory(org.protege.editor.owl.model.OWLModelManager);
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #64,  1           // InterfaceMethod org/protege/editor/owl/model/OWLModelManager.getActiveOntology:()Lorg/semanticweb/owlapi/model/OWLOntology;
       7: invokeinterface #65,  2           // InterfaceMethod org/protege/editor/owl/model/OWLModelManager.getOntologyPhysicalURI:(Lorg/semanticweb/owlapi/model/OWLOntology;)Ljava/net/URI;
      12: astore_1
      13: ldc           #66                 // String file
      15: aload_1
      16: invokevirtual #67                 // Method java/net/URI.getScheme:()Ljava/lang/String;
      19: invokevirtual #68                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      22: ifne          29
      25: invokestatic  #25                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      28: areturn
      29: aload_1
      30: invokestatic  #69                 // Method java/nio/file/Paths.get:(Ljava/net/URI;)Ljava/nio/file/Path;
      33: astore_2
      34: aload_2
      35: invokeinterface #41,  1           // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
      40: astore_3
      41: aload_3
      42: ifnull        83
      45: aload_3
      46: ldc           #70                 // String .git
      48: invokeinterface #71,  2           // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
      53: astore        4
      55: aload         4
      57: iconst_0
      58: anewarray     #72                 // class java/nio/file/LinkOption
      61: invokestatic  #73                 // Method java/nio/file/Files.isDirectory:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      64: ifeq          73
      67: aload         4
      69: invokestatic  #27                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      72: areturn
      73: aload_3
      74: invokeinterface #41,  1           // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
      79: astore_3
      80: goto          41
      83: invokestatic  #25                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      86: areturn

  private static boolean lambda$getFileBasedOntologyDocumentPaths$1(java.net.URI);
    Code:
       0: aload_0
       1: invokevirtual #67                 // Method java/net/URI.getScheme:()Ljava/lang/String;
       4: ldc           #66                 // String file
       6: invokevirtual #68                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       9: ireturn

  private static java.lang.String lambda$getUserName$0(org.eclipse.jgit.lib.Repository);
    Code:
       0: aload_0
       1: invokevirtual #74                 // Method org/eclipse/jgit/lib/Repository.getConfig:()Lorg/eclipse/jgit/lib/StoredConfig;
       4: ldc           #75                 // String user
       6: aconst_null
       7: ldc           #76                 // String name
       9: invokevirtual #77                 // Method org/eclipse/jgit/lib/StoredConfig.getString:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      12: areturn

  static {};
    Code:
       0: ldc           #18                 // class org/protege/editor/owl/model/git/GitRepositoryManager
       2: invokestatic  #78                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #8                  // Field logger:Lorg/slf4j/Logger;
       8: return
}
