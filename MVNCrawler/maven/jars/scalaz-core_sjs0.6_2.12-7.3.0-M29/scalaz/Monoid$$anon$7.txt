Compiled from "Monoid.scala"
public final class scalaz.Monoid$$anon$7 implements scalaz.Monoid$ApplicativeMonoid<F, M> {
  private final F zero;

  private final scalaz.syntax.MonoidSyntax<F> monoidSyntax;

  private final scalaz.syntax.SemigroupSyntax<F> semigroupSyntax;

  private final scalaz.Applicative F0$1;

  private final scalaz.Monoid M0$1;

  public F append(F, scala.Function0<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #49                 // InterfaceMethod scalaz/Semigroup$ApplySemigroup.append$:(Lscalaz/Semigroup$ApplySemigroup;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <S> scalaz.Maybe<F> unfoldrSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<F, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #61                 // InterfaceMethod scalaz/Semigroup$ApplySemigroup.unfoldrSumOpt$:(Lscalaz/Semigroup$ApplySemigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public F multiply(F, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #71                 // InterfaceMethod scalaz/Monoid.multiply$:(Lscalaz/Monoid;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public boolean isMZero(F, scalaz.Equal<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #81                 // InterfaceMethod scalaz/Monoid.isMZero$:(Lscalaz/Monoid;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public final <B> B ifEmpty(F, scala.Function0<B>, scala.Function0<B>, scalaz.Equal<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #90                 // InterfaceMethod scalaz/Monoid.ifEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;Lscalaz/Equal;)Ljava/lang/Object;
       9: areturn

  public final <B> B onNotEmpty(F, scala.Function0<B>, scalaz.Equal<F>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #99                 // InterfaceMethod scalaz/Monoid.onNotEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public final <A, B> B onEmpty(F, scala.Function0<B>, scalaz.Equal<F>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #104                // InterfaceMethod scalaz/Monoid.onEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public <S> F unfoldlSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, F>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #111                // InterfaceMethod scalaz/Monoid.unfoldlSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <S> F unfoldrSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<F, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #116                // InterfaceMethod scalaz/Monoid.unfoldrSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public final scalaz.Category<?> category();
    Code:
       0: aload_0
       1: invokestatic  #123                // InterfaceMethod scalaz/Monoid.category$:(Lscalaz/Monoid;)Lscalaz/Category;
       4: areturn

  public final scalaz.Applicative<?> applicative();
    Code:
       0: aload_0
       1: invokestatic  #130                // InterfaceMethod scalaz/Monoid.applicative$:(Lscalaz/Monoid;)Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid<F>.MonoidLaw monoidLaw();
    Code:
       0: aload_0
       1: invokestatic  #137                // InterfaceMethod scalaz/Monoid.monoidLaw$:(Lscalaz/Monoid;)Lscalaz/Monoid$MonoidLaw;
       4: areturn

  public F multiply1(F, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #142                // InterfaceMethod scalaz/Semigroup.multiply1$:(Lscalaz/Semigroup;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public <S> scalaz.Maybe<F> unfoldlSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, F>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #148                // InterfaceMethod scalaz/Semigroup.unfoldlSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public final scalaz.Compose<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #155                // InterfaceMethod scalaz/Semigroup.compose$:(Lscalaz/Semigroup;)Lscalaz/Compose;
       4: areturn

  public final scalaz.Apply<?> apply();
    Code:
       0: aload_0
       1: invokestatic  #162                // InterfaceMethod scalaz/Semigroup.apply$:(Lscalaz/Semigroup;)Lscalaz/Apply;
       4: areturn

  public scalaz.Semigroup<F>.SemigroupLaw semigroupLaw();
    Code:
       0: aload_0
       1: invokestatic  #169                // InterfaceMethod scalaz/Semigroup.semigroupLaw$:(Lscalaz/Semigroup;)Lscalaz/Semigroup$SemigroupLaw;
       4: areturn

  public F zero();
    Code:
       0: aload_0
       1: getfield      #173                // Field zero:Ljava/lang/Object;
       4: areturn

  public void scalaz$Monoid$ApplicativeMonoid$_setter_$zero_$eq(F);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #173                // Field zero:Ljava/lang/Object;
       5: return

  public scalaz.syntax.MonoidSyntax<F> monoidSyntax();
    Code:
       0: aload_0
       1: getfield      #181                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       4: areturn

  public void scalaz$Monoid$_setter_$monoidSyntax_$eq(scalaz.syntax.MonoidSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #181                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       5: return

  public scalaz.syntax.SemigroupSyntax<F> semigroupSyntax();
    Code:
       0: aload_0
       1: getfield      #188                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       4: areturn

  public void scalaz$Semigroup$_setter_$semigroupSyntax_$eq(scalaz.syntax.SemigroupSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #188                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       5: return

  public scalaz.Applicative<F> F();
    Code:
       0: aload_0
       1: getfield      #195                // Field F0$1:Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid<M> M();
    Code:
       0: aload_0
       1: getfield      #200                // Field M0$1:Lscalaz/Monoid;
       4: areturn

  public scalaz.Semigroup M();
    Code:
       0: aload_0
       1: invokevirtual #203                // Method M:()Lscalaz/Monoid;
       4: areturn

  public scalaz.Apply F();
    Code:
       0: aload_0
       1: invokevirtual #205                // Method F:()Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid$$anon$7(scalaz.Applicative, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #195                // Field F0$1:Lscalaz/Applicative;
       5: aload_0
       6: aload_2
       7: putfield      #200                // Field M0$1:Lscalaz/Monoid;
      10: aload_0
      11: invokespecial #210                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #214                // InterfaceMethod scalaz/Semigroup.$init$:(Lscalaz/Semigroup;)V
      18: aload_0
      19: invokestatic  #217                // InterfaceMethod scalaz/Monoid.$init$:(Lscalaz/Monoid;)V
      22: aload_0
      23: invokestatic  #220                // InterfaceMethod scalaz/Semigroup$ApplySemigroup.$init$:(Lscalaz/Semigroup$ApplySemigroup;)V
      26: aload_0
      27: invokestatic  #223                // InterfaceMethod scalaz/Monoid$ApplicativeMonoid.$init$:(Lscalaz/Monoid$ApplicativeMonoid;)V
      30: return
}
