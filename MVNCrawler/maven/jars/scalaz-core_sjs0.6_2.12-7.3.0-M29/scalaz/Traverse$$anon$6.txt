Compiled from "Traverse.scala"
public final class scalaz.Traverse$$anon$6 implements scalaz.Traverse<F>.TraverseLaw {
  private final scalaz.Traverse $outer;

  public <A, B> boolean identityTraverse(F, scala.Function1<A, B>, scalaz.Equal<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #36                 // InterfaceMethod scalaz/Traverse$TraverseLaw.identityTraverse$:(Lscalaz/Traverse$TraverseLaw;Ljava/lang/Object;Lscala/Function1;Lscalaz/Equal;)Z
       7: ireturn

  public <N, M, A, B, C> boolean sequentialFusion(F, scala.Function1<A, M>, scala.Function1<B, N>, scalaz.Applicative<N>, scalaz.Applicative<M>, scalaz.Equal<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #53                 // InterfaceMethod scalaz/Traverse$TraverseLaw.sequentialFusion$:(Lscalaz/Traverse$TraverseLaw;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Applicative;Lscalaz/Applicative;Lscalaz/Equal;)Z
      13: ireturn

  public <G, A> boolean purity(F, scalaz.Applicative<G>, scalaz.Equal<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #63                 // InterfaceMethod scalaz/Traverse$TraverseLaw.purity$:(Lscalaz/Traverse$TraverseLaw;Ljava/lang/Object;Lscalaz/Applicative;Lscalaz/Equal;)Z
       7: ireturn

  public <N, M, A> boolean naturality(scalaz.NaturalTransformation<M, N>, F, scalaz.Applicative<N>, scalaz.Applicative<M>, scalaz.Equal<N>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #73                 // InterfaceMethod scalaz/Traverse$TraverseLaw.naturality$:(Lscalaz/Traverse$TraverseLaw;Lscalaz/NaturalTransformation;Ljava/lang/Object;Lscalaz/Applicative;Lscalaz/Applicative;Lscalaz/Equal;)Z
      11: ireturn

  public <N, M, A, B> boolean parallelFusion(F, scala.Function1<A, M>, scala.Function1<A, N>, scalaz.Applicative<N>, scalaz.Applicative<M>, scalaz.Equal<scala.Tuple2<M, N>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #80                 // InterfaceMethod scalaz/Traverse$TraverseLaw.parallelFusion$:(Lscalaz/Traverse$TraverseLaw;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Applicative;Lscalaz/Applicative;Lscalaz/Equal;)Z
      13: ireturn

  public <A> boolean identity(java.lang.Object, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #88                 // InterfaceMethod scalaz/Functor$FunctorLaw.identity$:(Lscalaz/Functor$FunctorLaw;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public <A, B, C> boolean composite(java.lang.Object, scala.Function1<A, B>, scala.Function1<B, C>, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #98                 // InterfaceMethod scalaz/Functor$FunctorLaw.composite$:(Lscalaz/Functor$FunctorLaw;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Equal;)Z
       9: ireturn

  public <A> boolean invariantIdentity(java.lang.Object, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #103                // InterfaceMethod scalaz/InvariantFunctor$InvariantFunctorLaw.invariantIdentity$:(Lscalaz/InvariantFunctor$InvariantFunctorLaw;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public <A, B, C> boolean invariantComposite(java.lang.Object, scala.Function1<A, B>, scala.Function1<B, A>, scala.Function1<B, C>, scala.Function1<C, B>, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #112                // InterfaceMethod scalaz/InvariantFunctor$InvariantFunctorLaw.invariantComposite$:(Lscalaz/InvariantFunctor$InvariantFunctorLaw;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscala/Function1;Lscala/Function1;Lscalaz/Equal;)Z
      13: ireturn

  public scalaz.Traverse scalaz$Traverse$TraverseLaw$$$outer();
    Code:
       0: aload_0
       1: getfield      #116                // Field $outer:Lscalaz/Traverse;
       4: areturn

  public scalaz.Functor scalaz$Functor$FunctorLaw$$$outer();
    Code:
       0: aload_0
       1: getfield      #116                // Field $outer:Lscalaz/Traverse;
       4: areturn

  public scalaz.InvariantFunctor scalaz$InvariantFunctor$InvariantFunctorLaw$$$outer();
    Code:
       0: aload_0
       1: getfield      #116                // Field $outer:Lscalaz/Traverse;
       4: areturn

  public scalaz.Traverse$$anon$6(scalaz.Traverse<F>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #116                // Field $outer:Lscalaz/Traverse;
      11: aload_0
      12: invokespecial #126                // Method java/lang/Object."<init>":()V
      15: aload_0
      16: invokestatic  #130                // InterfaceMethod scalaz/InvariantFunctor$InvariantFunctorLaw.$init$:(Lscalaz/InvariantFunctor$InvariantFunctorLaw;)V
      19: aload_0
      20: invokestatic  #133                // InterfaceMethod scalaz/Functor$FunctorLaw.$init$:(Lscalaz/Functor$FunctorLaw;)V
      23: aload_0
      24: invokestatic  #136                // InterfaceMethod scalaz/Traverse$TraverseLaw.$init$:(Lscalaz/Traverse$TraverseLaw;)V
      27: return
}
