Compiled from "Maybe.scala"
public final class scalaz.MaybeInstances$$anon$10 implements scalaz.Monoid<java.lang.Object>, scalaz.Band<java.lang.Object> {
  private final scalaz.syntax.BandSyntax<java.lang.Object> bandSyntax;

  private final scalaz.syntax.MonoidSyntax<java.lang.Object> monoidSyntax;

  private final scalaz.syntax.SemigroupSyntax<java.lang.Object> semigroupSyntax;

  private final scalaz.Order o$2;

  public java.lang.Object multiply1(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #56                 // InterfaceMethod scalaz/Band.multiply1$:(Lscalaz/Band;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public scalaz.Band<java.lang.Object>.BandLaw bandLaw();
    Code:
       0: aload_0
       1: invokestatic  #67                 // InterfaceMethod scalaz/Band.bandLaw$:(Lscalaz/Band;)Lscalaz/Band$BandLaw;
       4: areturn

  public java.lang.Object multiply(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #72                 // InterfaceMethod scalaz/Monoid.multiply$:(Lscalaz/Monoid;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public boolean isMZero(java.lang.Object, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #81                 // InterfaceMethod scalaz/Monoid.isMZero$:(Lscalaz/Monoid;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public final <B> B ifEmpty(java.lang.Object, scala.Function0<B>, scala.Function0<B>, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #91                 // InterfaceMethod scalaz/Monoid.ifEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;Lscalaz/Equal;)Ljava/lang/Object;
       9: areturn

  public final <B> B onNotEmpty(java.lang.Object, scala.Function0<B>, scalaz.Equal<java.lang.Object>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #101                // InterfaceMethod scalaz/Monoid.onNotEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public final <A, B> B onEmpty(java.lang.Object, scala.Function0<B>, scalaz.Equal<java.lang.Object>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #107                // InterfaceMethod scalaz/Monoid.onEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public <S> java.lang.Object unfoldlSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, java.lang.Object>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #115                // InterfaceMethod scalaz/Monoid.unfoldlSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <S> java.lang.Object unfoldrSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<java.lang.Object, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #121                // InterfaceMethod scalaz/Monoid.unfoldrSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public final scalaz.Category<?> category();
    Code:
       0: aload_0
       1: invokestatic  #128                // InterfaceMethod scalaz/Monoid.category$:(Lscalaz/Monoid;)Lscalaz/Category;
       4: areturn

  public final scalaz.Applicative<?> applicative();
    Code:
       0: aload_0
       1: invokestatic  #135                // InterfaceMethod scalaz/Monoid.applicative$:(Lscalaz/Monoid;)Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid<java.lang.Object>.MonoidLaw monoidLaw();
    Code:
       0: aload_0
       1: invokestatic  #142                // InterfaceMethod scalaz/Monoid.monoidLaw$:(Lscalaz/Monoid;)Lscalaz/Monoid$MonoidLaw;
       4: areturn

  public <S> scalaz.Maybe<java.lang.Object> unfoldlSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, java.lang.Object>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #149                // InterfaceMethod scalaz/Semigroup.unfoldlSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S> scalaz.Maybe<java.lang.Object> unfoldrSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<java.lang.Object, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #154                // InterfaceMethod scalaz/Semigroup.unfoldrSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public final scalaz.Compose<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #161                // InterfaceMethod scalaz/Semigroup.compose$:(Lscalaz/Semigroup;)Lscalaz/Compose;
       4: areturn

  public final scalaz.Apply<?> apply();
    Code:
       0: aload_0
       1: invokestatic  #168                // InterfaceMethod scalaz/Semigroup.apply$:(Lscalaz/Semigroup;)Lscalaz/Apply;
       4: areturn

  public scalaz.Semigroup<java.lang.Object>.SemigroupLaw semigroupLaw();
    Code:
       0: aload_0
       1: invokestatic  #175                // InterfaceMethod scalaz/Semigroup.semigroupLaw$:(Lscalaz/Semigroup;)Lscalaz/Semigroup$SemigroupLaw;
       4: areturn

  public scalaz.syntax.BandSyntax<java.lang.Object> bandSyntax();
    Code:
       0: aload_0
       1: getfield      #179                // Field bandSyntax:Lscalaz/syntax/BandSyntax;
       4: areturn

  public void scalaz$Band$_setter_$bandSyntax_$eq(scalaz.syntax.BandSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #179                // Field bandSyntax:Lscalaz/syntax/BandSyntax;
       5: return

  public scalaz.syntax.MonoidSyntax<java.lang.Object> monoidSyntax();
    Code:
       0: aload_0
       1: getfield      #187                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       4: areturn

  public void scalaz$Monoid$_setter_$monoidSyntax_$eq(scalaz.syntax.MonoidSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #187                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       5: return

  public scalaz.syntax.SemigroupSyntax<java.lang.Object> semigroupSyntax();
    Code:
       0: aload_0
       1: getfield      #194                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       4: areturn

  public void scalaz$Semigroup$_setter_$semigroupSyntax_$eq(scalaz.syntax.SemigroupSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #194                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       5: return

  public java.lang.Object zero();
    Code:
       0: getstatic     #205                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: getstatic     #210                // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       6: invokevirtual #214                // Method scalaz/Maybe$.empty:()Lscalaz/Maybe;
       9: astore_1
      10: dup
      11: ifnonnull     16
      14: aconst_null
      15: athrow
      16: invokevirtual #218                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      19: aload_1
      20: invokevirtual #223                // Method scalaz/TagKind.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      23: areturn

  public java.lang.Object append(java.lang.Object, scala.Function0<java.lang.Object>);
    Code:
       0: getstatic     #205                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: new           #231                // class scala/Tuple2
       6: dup
       7: getstatic     #205                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      10: dup
      11: ifnonnull     16
      14: aconst_null
      15: athrow
      16: invokevirtual #218                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      19: aload_1
      20: invokevirtual #234                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      23: astore        16
      25: getstatic     #205                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      28: aload_2
      29: invokeinterface #238,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      34: astore        17
      36: dup
      37: ifnonnull     42
      40: aconst_null
      41: athrow
      42: invokevirtual #218                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      45: aload         17
      47: invokevirtual #234                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      50: astore        18
      52: aload         16
      54: aload         18
      56: invokespecial #242                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      59: astore        4
      61: aload         16
      63: checkcast     #22                 // class scalaz/Maybe
      66: astore        5
      68: aload         18
      70: checkcast     #22                 // class scalaz/Maybe
      73: astore        6
      75: aload         5
      77: instanceof    #28                 // class scalaz/Maybe$Just
      80: ifeq          147
      83: aload         5
      85: checkcast     #28                 // class scalaz/Maybe$Just
      88: invokevirtual #245                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      91: astore        7
      93: aload         6
      95: instanceof    #28                 // class scalaz/Maybe$Just
      98: ifeq          147
     101: aload         6
     103: checkcast     #28                 // class scalaz/Maybe$Just
     106: invokevirtual #245                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
     109: astore        8
     111: new           #28                 // class scalaz/Maybe$Just
     114: dup
     115: getstatic     #250                // Field scalaz/Order$.MODULE$:Lscalaz/Order$;
     118: aload_0
     119: getfield      #252                // Field o$2:Lscalaz/Order;
     122: astore        19
     124: ifnonnull     129
     127: aconst_null
     128: athrow
     129: aload         19
     131: aload         7
     133: aload         8
     135: invokeinterface #258,  3          // InterfaceMethod scalaz/Order.max:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     140: invokespecial #261                // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
     143: astore_3
     144: goto          279
     147: aload         16
     149: checkcast     #22                 // class scalaz/Maybe
     152: astore        9
     154: aload         18
     156: checkcast     #22                 // class scalaz/Maybe
     159: astore        10
     161: aload         9
     163: instanceof    #28                 // class scalaz/Maybe$Just
     166: ifeq          190
     169: aload         9
     171: checkcast     #28                 // class scalaz/Maybe$Just
     174: astore        11
     176: aload         10
     178: instanceof    #20                 // class scalaz/Maybe$Empty
     181: ifeq          190
     184: aload         11
     186: astore_3
     187: goto          279
     190: aload         16
     192: checkcast     #22                 // class scalaz/Maybe
     195: astore        12
     197: aload         18
     199: checkcast     #22                 // class scalaz/Maybe
     202: astore        13
     204: aload         12
     206: instanceof    #20                 // class scalaz/Maybe$Empty
     209: ifeq          229
     212: aload         13
     214: instanceof    #28                 // class scalaz/Maybe$Just
     217: ifeq          229
     220: aload         13
     222: checkcast     #28                 // class scalaz/Maybe$Just
     225: astore_3
     226: goto          279
     229: aload         16
     231: checkcast     #22                 // class scalaz/Maybe
     234: astore        14
     236: aload         18
     238: checkcast     #22                 // class scalaz/Maybe
     241: astore        15
     243: aload         14
     245: instanceof    #20                 // class scalaz/Maybe$Empty
     248: ifeq          269
     251: aload         15
     253: instanceof    #20                 // class scalaz/Maybe$Empty
     256: ifeq          269
     259: getstatic     #264                // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
     262: invokevirtual #266                // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
     265: astore_3
     266: goto          279
     269: new           #268                // class scala/MatchError
     272: dup
     273: aload         4
     275: invokespecial #269                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     278: athrow
     279: dup
     280: ifnonnull     285
     283: aconst_null
     284: athrow
     285: invokevirtual #218                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
     288: aload_3
     289: invokevirtual #223                // Method scalaz/TagKind.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     292: areturn

  public scalaz.MaybeInstances$$anon$10(scalaz.MaybeInstances, scalaz.Order);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #252                // Field o$2:Lscalaz/Order;
       5: aload_0
       6: invokespecial #280                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #284                // InterfaceMethod scalaz/Semigroup.$init$:(Lscalaz/Semigroup;)V
      13: aload_0
      14: invokestatic  #287                // InterfaceMethod scalaz/Monoid.$init$:(Lscalaz/Monoid;)V
      17: aload_0
      18: invokestatic  #290                // InterfaceMethod scalaz/Band.$init$:(Lscalaz/Band;)V
      21: return
}
