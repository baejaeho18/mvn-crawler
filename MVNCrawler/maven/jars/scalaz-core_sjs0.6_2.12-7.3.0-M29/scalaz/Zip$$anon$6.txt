Compiled from "Zip.scala"
public final class scalaz.Zip$$anon$6 implements scalaz.IsomorphismZip<F, G> {
  private final scalaz.syntax.ZipSyntax<F> zipSyntax;

  private final scalaz.Zip E$1;

  private final scalaz.Isomorphisms$Iso2 D$1;

  public <A, B> F zip(scala.Function0<F>, scala.Function0<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #39                 // InterfaceMethod scalaz/IsomorphismZip.zip$:(Lscalaz/IsomorphismZip;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.Zip<?> compose(scalaz.Functor<F>, scalaz.Zip<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #51                 // InterfaceMethod scalaz/Zip.compose$:(Lscalaz/Zip;Lscalaz/Functor;Lscalaz/Zip;)Lscalaz/Zip;
       6: areturn

  public <G> scalaz.Zip<?> product(scalaz.Zip<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #59                 // InterfaceMethod scalaz/Zip.product$:(Lscalaz/Zip;Lscalaz/Zip;)Lscalaz/Zip;
       5: areturn

  public <A, B, C> F zipWith(scala.Function0<F>, scala.Function0<F>, scala.Function2<A, B, C>, scalaz.Functor<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #70                 // InterfaceMethod scalaz/Zip.zipWith$:(Lscalaz/Zip;Lscala/Function0;Lscala/Function0;Lscala/Function2;Lscalaz/Functor;)Ljava/lang/Object;
       9: areturn

  public <A, B> F apzip(scala.Function0<scala.Function1<F, F>>, scala.Function0<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #77                 // InterfaceMethod scalaz/Zip.apzip$:(Lscalaz/Zip;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <A, B> F apzipPL(scala.Function0<scalaz.PLensFamily<F, F, F, F>>, scala.Function0<F>, scalaz.Monoid<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #85                 // InterfaceMethod scalaz/Zip.apzipPL$:(Lscalaz/Zip;Lscala/Function0;Lscala/Function0;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public scalaz.Apply<F> ap(scalaz.Functor<F>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #93                 // InterfaceMethod scalaz/Zip.ap$:(Lscalaz/Zip;Lscalaz/Functor;)Lscalaz/Apply;
       5: areturn

  public scalaz.Zip<F>.ZipLaw zipLaw();
    Code:
       0: aload_0
       1: invokestatic  #100                // InterfaceMethod scalaz/Zip.zipLaw$:(Lscalaz/Zip;)Lscalaz/Zip$ZipLaw;
       4: areturn

  public scalaz.syntax.ZipSyntax<F> zipSyntax();
    Code:
       0: aload_0
       1: getfield      #104                // Field zipSyntax:Lscalaz/syntax/ZipSyntax;
       4: areturn

  public void scalaz$Zip$_setter_$zipSyntax_$eq(scalaz.syntax.ZipSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #104                // Field zipSyntax:Lscalaz/syntax/ZipSyntax;
       5: return

  public scalaz.Zip<G> G();
    Code:
       0: aload_0
       1: getfield      #113                // Field E$1:Lscalaz/Zip;
       4: areturn

  public scalaz.Isomorphisms$Iso2<scalaz.NaturalTransformation, F, G> iso();
    Code:
       0: aload_0
       1: getfield      #118                // Field D$1:Lscalaz/Isomorphisms$Iso2;
       4: areturn

  public scalaz.Zip$$anon$6(scalaz.Zip, scalaz.Isomorphisms$Iso2);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #113                // Field E$1:Lscalaz/Zip;
       5: aload_0
       6: aload_2
       7: putfield      #118                // Field D$1:Lscalaz/Isomorphisms$Iso2;
      10: aload_0
      11: invokespecial #123                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #127                // InterfaceMethod scalaz/Zip.$init$:(Lscalaz/Zip;)V
      18: aload_0
      19: invokestatic  #130                // InterfaceMethod scalaz/IsomorphismZip.$init$:(Lscalaz/IsomorphismZip;)V
      22: return
}
