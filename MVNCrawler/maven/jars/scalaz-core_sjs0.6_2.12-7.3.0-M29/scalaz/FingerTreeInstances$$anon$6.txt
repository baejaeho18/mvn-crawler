Compiled from "FingerTree.scala"
public final class scalaz.FingerTreeInstances$$anon$6 implements scalaz.Monoid<scalaz.FingerTree<V, A>> {
  private final scalaz.syntax.MonoidSyntax<scalaz.FingerTree<V, A>> monoidSyntax;

  private final scalaz.syntax.SemigroupSyntax<scalaz.FingerTree<V, A>> semigroupSyntax;

  private final scalaz.Reducer evidence$8$1;

  public java.lang.Object multiply(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #47                 // InterfaceMethod scalaz/Monoid.multiply$:(Lscalaz/Monoid;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public boolean isMZero(java.lang.Object, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #59                 // InterfaceMethod scalaz/Monoid.isMZero$:(Lscalaz/Monoid;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public final java.lang.Object ifEmpty(java.lang.Object, scala.Function0, scala.Function0, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #68                 // InterfaceMethod scalaz/Monoid.ifEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;Lscalaz/Equal;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object onNotEmpty(java.lang.Object, scala.Function0, scalaz.Equal, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #77                 // InterfaceMethod scalaz/Monoid.onNotEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object onEmpty(java.lang.Object, scala.Function0, scalaz.Equal, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #82                 // InterfaceMethod scalaz/Monoid.onEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object unfoldlSum(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #89                 // InterfaceMethod scalaz/Monoid.unfoldlSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object unfoldrSum(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #94                 // InterfaceMethod scalaz/Monoid.unfoldrSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public final scalaz.Category<?> category();
    Code:
       0: aload_0
       1: invokestatic  #101                // InterfaceMethod scalaz/Monoid.category$:(Lscalaz/Monoid;)Lscalaz/Category;
       4: areturn

  public final scalaz.Applicative<?> applicative();
    Code:
       0: aload_0
       1: invokestatic  #108                // InterfaceMethod scalaz/Monoid.applicative$:(Lscalaz/Monoid;)Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid<scalaz.FingerTree<V, A>>.MonoidLaw monoidLaw();
    Code:
       0: aload_0
       1: invokestatic  #115                // InterfaceMethod scalaz/Monoid.monoidLaw$:(Lscalaz/Monoid;)Lscalaz/Monoid$MonoidLaw;
       4: areturn

  public java.lang.Object multiply1(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #120                // InterfaceMethod scalaz/Semigroup.multiply1$:(Lscalaz/Semigroup;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public <S> scalaz.Maybe<scalaz.FingerTree<V, A>> unfoldlSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, scalaz.FingerTree<V, A>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #127                // InterfaceMethod scalaz/Semigroup.unfoldlSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S> scalaz.Maybe<scalaz.FingerTree<V, A>> unfoldrSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<scalaz.FingerTree<V, A>, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #132                // InterfaceMethod scalaz/Semigroup.unfoldrSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public final scalaz.Compose<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #139                // InterfaceMethod scalaz/Semigroup.compose$:(Lscalaz/Semigroup;)Lscalaz/Compose;
       4: areturn

  public final scalaz.Apply<?> apply();
    Code:
       0: aload_0
       1: invokestatic  #146                // InterfaceMethod scalaz/Semigroup.apply$:(Lscalaz/Semigroup;)Lscalaz/Apply;
       4: areturn

  public scalaz.Semigroup<scalaz.FingerTree<V, A>>.SemigroupLaw semigroupLaw();
    Code:
       0: aload_0
       1: invokestatic  #153                // InterfaceMethod scalaz/Semigroup.semigroupLaw$:(Lscalaz/Semigroup;)Lscalaz/Semigroup$SemigroupLaw;
       4: areturn

  public scalaz.syntax.MonoidSyntax<scalaz.FingerTree<V, A>> monoidSyntax();
    Code:
       0: aload_0
       1: getfield      #157                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       4: areturn

  public void scalaz$Monoid$_setter_$monoidSyntax_$eq(scalaz.syntax.MonoidSyntax<scalaz.FingerTree<V, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #157                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       5: return

  public scalaz.syntax.SemigroupSyntax<scalaz.FingerTree<V, A>> semigroupSyntax();
    Code:
       0: aload_0
       1: getfield      #165                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       4: areturn

  public void scalaz$Semigroup$_setter_$semigroupSyntax_$eq(scalaz.syntax.SemigroupSyntax<scalaz.FingerTree<V, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #165                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       5: return

  public scalaz.FingerTree<V, A> append(scalaz.FingerTree<V, A>, scala.Function0<scalaz.FingerTree<V, A>>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: getstatic     #179                // Field scalaz/Need$.MODULE$:Lscalaz/Need$;
       9: ifnonnull     14
      12: aconst_null
      13: athrow
      14: new           #181                // class scalaz/Need
      17: dup
      18: aload_2
      19: invokespecial #185                // Method scalaz/Need."<init>":(Lscala/Function0;)V
      22: astore_3
      23: aload_1
      24: aload_3
      25: invokedynamic #208,  0            // InvokeDynamic #0:apply:(Lscalaz/Need;)Lscala/Function0;
      30: aload_3
      31: invokedynamic #220,  0            // InvokeDynamic #1:apply:(Lscalaz/Need;)Lscala/Function2;
      36: aload_1
      37: aload_3
      38: invokedynamic #232,  0            // InvokeDynamic #2:apply:(Lscalaz/FingerTree;Lscalaz/Need;)Lscala/Function4;
      43: invokevirtual #236                // Method scalaz/FingerTree.fold:(Lscala/Function0;Lscala/Function2;Lscala/Function4;)Ljava/lang/Object;
      46: checkcast     #22                 // class scalaz/FingerTree
      49: areturn

  public scalaz.FingerTree<V, A> zero();
    Code:
       0: getstatic     #244                // Field scalaz/FingerTree$.MODULE$:Lscalaz/FingerTree$;
       3: aload_0
       4: getfield      #246                // Field evidence$8$1:Lscalaz/Reducer;
       7: invokevirtual #250                // Method scalaz/FingerTree$.empty:(Lscalaz/Reducer;)Lscalaz/FingerTree;
      10: areturn

  public java.lang.Object zero();
    Code:
       0: aload_0
       1: invokevirtual #252                // Method zero:()Lscalaz/FingerTree;
       4: areturn

  public java.lang.Object append(java.lang.Object, scala.Function0);
    Code:
       0: aload_1
       1: checkcast     #22                 // class scalaz/FingerTree
       4: astore_3
       5: aload_3
       6: ifnonnull     11
       9: aconst_null
      10: athrow
      11: getstatic     #179                // Field scalaz/Need$.MODULE$:Lscalaz/Need$;
      14: ifnonnull     19
      17: aconst_null
      18: athrow
      19: new           #181                // class scalaz/Need
      22: dup
      23: aload_2
      24: invokespecial #185                // Method scalaz/Need."<init>":(Lscala/Function0;)V
      27: astore        4
      29: aload_3
      30: aload         4
      32: invokedynamic #208,  0            // InvokeDynamic #0:apply:(Lscalaz/Need;)Lscala/Function0;
      37: aload         4
      39: invokedynamic #220,  0            // InvokeDynamic #1:apply:(Lscalaz/Need;)Lscala/Function2;
      44: aload_3
      45: aload         4
      47: invokedynamic #232,  0            // InvokeDynamic #2:apply:(Lscalaz/FingerTree;Lscalaz/Need;)Lscala/Function4;
      52: invokevirtual #236                // Method scalaz/FingerTree.fold:(Lscala/Function0;Lscala/Function2;Lscala/Function4;)Ljava/lang/Object;
      55: checkcast     #22                 // class scalaz/FingerTree
      58: areturn

  public scalaz.FingerTreeInstances$$anon$6(scalaz.FingerTreeInstances, scalaz.Reducer);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #246                // Field evidence$8$1:Lscalaz/Reducer;
       5: aload_0
       6: invokespecial #259                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #263                // InterfaceMethod scalaz/Semigroup.$init$:(Lscalaz/Semigroup;)V
      13: aload_0
      14: invokestatic  #266                // InterfaceMethod scalaz/Monoid.$init$:(Lscalaz/Monoid;)V
      17: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #279,  0            // InvokeDynamic #3:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
