Compiled from "Split.scala"
public interface scalaz.Split<$eq$greater$colon> extends scalaz.Compose<$eq$greater$colon> {
  public static <F, G> scalaz.Split<F> fromIso(scalaz.Isomorphisms$Iso3<scalaz.BiNaturalTransformation, F, G>, scalaz.Split<G>);
    Code:
       0: getstatic     #29                 // Field scalaz/Split$.MODULE$:Lscalaz/Split$;
       3: aload_0
       4: aload_1
       5: invokevirtual #31                 // Method scalaz/Split$.fromIso:(Lscalaz/Isomorphisms$Iso3;Lscalaz/Split;)Lscalaz/Split;
       8: areturn

  public static <F> scalaz.Split<F> apply(scalaz.Split<F>);
    Code:
       0: getstatic     #29                 // Field scalaz/Split$.MODULE$:Lscalaz/Split$;
       3: ifnonnull     8
       6: aconst_null
       7: athrow
       8: aload_0
       9: areturn

  public abstract void scalaz$Split$_setter_$splitSyntax_$eq(scalaz.syntax.SplitSyntax<$eq$greater$colon>);

  public abstract <A, B, C, D> $eq$greater$colon split($eq$greater$colon, $eq$greater$colon);

  public abstract scalaz.syntax.SplitSyntax<$eq$greater$colon> splitSyntax();

  public static void $init$(scalaz.Split);
    Code:
       0: aload_0
       1: new           #18                 // class scalaz/Split$$anon$1
       4: dup
       5: aload_0
       6: invokespecial #53                 // Method scalaz/Split$$anon$1."<init>":(Lscalaz/Split;)V
       9: invokeinterface #55,  2           // InterfaceMethod scalaz$Split$_setter_$splitSyntax_$eq:(Lscalaz/syntax/SplitSyntax;)V
      14: return
}
