Compiled from "Bifoldable.scala"
public interface scalaz.Bifoldable$BifoldableLaw {
  public static boolean leftFMConsistent$(scalaz.Bifoldable$BifoldableLaw, java.lang.Object, scalaz.Equal, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #28                 // InterfaceMethod leftFMConsistent:(Ljava/lang/Object;Lscalaz/Equal;Lscalaz/Equal;)Z
       7: ireturn

  public default <A, B> boolean leftFMConsistent(F, scalaz.Equal<A>, scalaz.Equal<B>);
    Code:
       0: getstatic     #38                 // Field scalaz/Equal$.MODULE$:Lscalaz/Equal$;
       3: getstatic     #43                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       6: getstatic     #48                 // Field scalaz/$bslash$div$.MODULE$:Lscalaz/$bslash$div$;
       9: aload_3
      10: aload_2
      11: invokevirtual #52                 // Method scalaz/$bslash$div$.DisjunctionEqual:(Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
      14: invokevirtual #56                 // Method scalaz/std/vector$.vectorEqual:(Lscalaz/Equal;)Lscalaz/Equal;
      17: astore        4
      19: ifnonnull     24
      22: aconst_null
      23: athrow
      24: aload         4
      26: aload_0
      27: invokeinterface #60,  1           // InterfaceMethod scalaz$Bifoldable$BifoldableLaw$$$outer:()Lscalaz/Bifoldable;
      32: aload_1
      33: invokedynamic #83,  0             // InvokeDynamic #0:apply:()Lscala/Function1;
      38: invokedynamic #88,  0             // InvokeDynamic #1:apply:()Lscala/Function1;
      43: getstatic     #43                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
      46: invokevirtual #92                 // Method scalaz/std/vector$.vectorMonoid:()Lscalaz/Monoid;
      49: invokeinterface #96,  5           // InterfaceMethod scalaz/Bifoldable.bifoldMap:(Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
      54: aload_0
      55: invokeinterface #60,  1           // InterfaceMethod scalaz$Bifoldable$BifoldableLaw$$$outer:()Lscalaz/Bifoldable;
      60: aload_1
      61: getstatic     #101                // Field scala/package$.MODULE$:Lscala/package$;
      64: invokevirtual #105                // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
      67: invokevirtual #111                // Method scala/collection/immutable/Vector$.empty:()Lscala/collection/immutable/Vector;
      70: invokedynamic #122,  0            // InvokeDynamic #2:apply:()Lscala/Function2;
      75: invokedynamic #127,  0            // InvokeDynamic #3:apply:()Lscala/Function2;
      80: invokeinterface #131,  5          // InterfaceMethod scalaz/Bifoldable.bifoldLeft:(Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;
      85: invokeinterface #137,  3          // InterfaceMethod scalaz/Equal.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
      90: ireturn

  public static boolean rightFMConsistent$(scalaz.Bifoldable$BifoldableLaw, java.lang.Object, scalaz.Equal, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #144                // InterfaceMethod rightFMConsistent:(Ljava/lang/Object;Lscalaz/Equal;Lscalaz/Equal;)Z
       7: ireturn

  public default <A, B> boolean rightFMConsistent(F, scalaz.Equal<A>, scalaz.Equal<B>);
    Code:
       0: getstatic     #38                 // Field scalaz/Equal$.MODULE$:Lscalaz/Equal$;
       3: getstatic     #43                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       6: getstatic     #48                 // Field scalaz/$bslash$div$.MODULE$:Lscalaz/$bslash$div$;
       9: aload_3
      10: aload_2
      11: invokevirtual #52                 // Method scalaz/$bslash$div$.DisjunctionEqual:(Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
      14: invokevirtual #56                 // Method scalaz/std/vector$.vectorEqual:(Lscalaz/Equal;)Lscalaz/Equal;
      17: astore        4
      19: ifnonnull     24
      22: aconst_null
      23: athrow
      24: aload         4
      26: aload_0
      27: invokeinterface #60,  1           // InterfaceMethod scalaz$Bifoldable$BifoldableLaw$$$outer:()Lscalaz/Bifoldable;
      32: aload_1
      33: invokedynamic #149,  0            // InvokeDynamic #4:apply:()Lscala/Function1;
      38: invokedynamic #154,  0            // InvokeDynamic #5:apply:()Lscala/Function1;
      43: getstatic     #43                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
      46: invokevirtual #92                 // Method scalaz/std/vector$.vectorMonoid:()Lscalaz/Monoid;
      49: invokeinterface #96,  5           // InterfaceMethod scalaz/Bifoldable.bifoldMap:(Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
      54: aload_0
      55: invokeinterface #60,  1           // InterfaceMethod scalaz$Bifoldable$BifoldableLaw$$$outer:()Lscalaz/Bifoldable;
      60: aload_1
      61: invokedynamic #164,  0            // InvokeDynamic #6:apply:()Lscala/Function0;
      66: invokedynamic #171,  0            // InvokeDynamic #7:apply:()Lscala/Function2;
      71: invokedynamic #176,  0            // InvokeDynamic #8:apply:()Lscala/Function2;
      76: invokeinterface #180,  5          // InterfaceMethod scalaz/Bifoldable.bifoldRight:(Ljava/lang/Object;Lscala/Function0;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;
      81: invokeinterface #137,  3          // InterfaceMethod scalaz/Equal.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
      86: ireturn

  public abstract scalaz.Bifoldable scalaz$Bifoldable$BifoldableLaw$$$outer();

  public static scala.collection.immutable.Vector $anonfun$leftFMConsistent$1(java.lang.Object);
    Code:
       0: getstatic     #101                // Field scala/package$.MODULE$:Lscala/package$;
       3: invokevirtual #105                // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
       6: getstatic     #186                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       9: iconst_1
      10: anewarray     #188                // class scalaz/$bslash$div
      13: dup
      14: iconst_0
      15: getstatic     #193                // Field scalaz/$bslash$div$minus$.MODULE$:Lscalaz/$bslash$div$minus$;
      18: aload_0
      19: invokevirtual #196                // Method scalaz/$bslash$div$minus$.apply:(Ljava/lang/Object;)Lscalaz/$bslash$div;
      22: aastore
      23: checkcast     #198                // class "[Ljava/lang/Object;"
      26: invokevirtual #202                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      29: invokevirtual #205                // Method scala/collection/immutable/Vector$.apply:(Lscala/collection/Seq;)Lscala/collection/GenTraversable;
      32: checkcast     #207                // class scala/collection/immutable/Vector
      35: areturn

  public static scala.collection.immutable.Vector $anonfun$leftFMConsistent$2(java.lang.Object);
    Code:
       0: getstatic     #101                // Field scala/package$.MODULE$:Lscala/package$;
       3: invokevirtual #105                // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
       6: getstatic     #186                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       9: iconst_1
      10: anewarray     #188                // class scalaz/$bslash$div
      13: dup
      14: iconst_0
      15: getstatic     #213                // Field scalaz/$minus$bslash$div$.MODULE$:Lscalaz/$minus$bslash$div$;
      18: aload_0
      19: invokevirtual #214                // Method scalaz/$minus$bslash$div$.apply:(Ljava/lang/Object;)Lscalaz/$bslash$div;
      22: aastore
      23: checkcast     #198                // class "[Ljava/lang/Object;"
      26: invokevirtual #202                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      29: invokevirtual #205                // Method scala/collection/immutable/Vector$.apply:(Lscala/collection/Seq;)Lscala/collection/GenTraversable;
      32: checkcast     #207                // class scala/collection/immutable/Vector
      35: areturn

  public static scala.collection.immutable.Vector $anonfun$leftFMConsistent$3(scala.collection.immutable.Vector, java.lang.Object);
    Code:
       0: aload_0
       1: getstatic     #193                // Field scalaz/$bslash$div$minus$.MODULE$:Lscalaz/$bslash$div$minus$;
       4: aload_1
       5: invokevirtual #196                // Method scalaz/$bslash$div$minus$.apply:(Ljava/lang/Object;)Lscalaz/$bslash$div;
       8: getstatic     #219                // Field scala/collection/immutable/Vector$.MODULE$:Lscala/collection/immutable/Vector$;
      11: invokevirtual #223                // Method scala/collection/immutable/Vector$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      14: invokevirtual #227                // Method scala/collection/immutable/Vector.$colon$plus:(Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      17: checkcast     #207                // class scala/collection/immutable/Vector
      20: areturn

  public static scala.collection.immutable.Vector $anonfun$leftFMConsistent$4(scala.collection.immutable.Vector, java.lang.Object);
    Code:
       0: aload_0
       1: getstatic     #213                // Field scalaz/$minus$bslash$div$.MODULE$:Lscalaz/$minus$bslash$div$;
       4: aload_1
       5: invokevirtual #214                // Method scalaz/$minus$bslash$div$.apply:(Ljava/lang/Object;)Lscalaz/$bslash$div;
       8: getstatic     #219                // Field scala/collection/immutable/Vector$.MODULE$:Lscala/collection/immutable/Vector$;
      11: invokevirtual #223                // Method scala/collection/immutable/Vector$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      14: invokevirtual #227                // Method scala/collection/immutable/Vector.$colon$plus:(Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      17: checkcast     #207                // class scala/collection/immutable/Vector
      20: areturn

  public static scala.collection.immutable.Vector $anonfun$rightFMConsistent$1(java.lang.Object);
    Code:
       0: getstatic     #101                // Field scala/package$.MODULE$:Lscala/package$;
       3: invokevirtual #105                // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
       6: getstatic     #186                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       9: iconst_1
      10: anewarray     #188                // class scalaz/$bslash$div
      13: dup
      14: iconst_0
      15: getstatic     #193                // Field scalaz/$bslash$div$minus$.MODULE$:Lscalaz/$bslash$div$minus$;
      18: aload_0
      19: invokevirtual #196                // Method scalaz/$bslash$div$minus$.apply:(Ljava/lang/Object;)Lscalaz/$bslash$div;
      22: aastore
      23: checkcast     #198                // class "[Ljava/lang/Object;"
      26: invokevirtual #202                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      29: invokevirtual #205                // Method scala/collection/immutable/Vector$.apply:(Lscala/collection/Seq;)Lscala/collection/GenTraversable;
      32: checkcast     #207                // class scala/collection/immutable/Vector
      35: areturn

  public static scala.collection.immutable.Vector $anonfun$rightFMConsistent$2(java.lang.Object);
    Code:
       0: getstatic     #101                // Field scala/package$.MODULE$:Lscala/package$;
       3: invokevirtual #105                // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
       6: getstatic     #186                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       9: iconst_1
      10: anewarray     #188                // class scalaz/$bslash$div
      13: dup
      14: iconst_0
      15: getstatic     #213                // Field scalaz/$minus$bslash$div$.MODULE$:Lscalaz/$minus$bslash$div$;
      18: aload_0
      19: invokevirtual #214                // Method scalaz/$minus$bslash$div$.apply:(Ljava/lang/Object;)Lscalaz/$bslash$div;
      22: aastore
      23: checkcast     #198                // class "[Ljava/lang/Object;"
      26: invokevirtual #202                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      29: invokevirtual #205                // Method scala/collection/immutable/Vector$.apply:(Lscala/collection/Seq;)Lscala/collection/GenTraversable;
      32: checkcast     #207                // class scala/collection/immutable/Vector
      35: areturn

  public static scala.collection.immutable.Vector $anonfun$rightFMConsistent$3();
    Code:
       0: getstatic     #101                // Field scala/package$.MODULE$:Lscala/package$;
       3: invokevirtual #105                // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
       6: invokevirtual #111                // Method scala/collection/immutable/Vector$.empty:()Lscala/collection/immutable/Vector;
       9: areturn

  public static scala.collection.immutable.Vector $anonfun$rightFMConsistent$4(java.lang.Object, scala.Function0);
    Code:
       0: getstatic     #237                // Field scalaz/syntax/EitherOps$.MODULE$:Lscalaz/syntax/EitherOps$;
       3: getstatic     #242                // Field scalaz/syntax/package$.MODULE$:Lscalaz/syntax/package$;
       6: invokevirtual #246                // Method scalaz/syntax/package$.either:()Lscalaz/syntax/Syntaxes$either$;
       9: aload_0
      10: invokevirtual #249                // Method scalaz/syntax/Syntaxes$either$.ToEitherOps:(Ljava/lang/Object;)Ljava/lang/Object;
      13: invokevirtual #252                // Method scalaz/syntax/EitherOps$.right$extension:(Ljava/lang/Object;)Lscalaz/$bslash$div;
      16: astore_2
      17: aload_1
      18: invokeinterface #256,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      23: checkcast     #207                // class scala/collection/immutable/Vector
      26: aload_2
      27: getstatic     #219                // Field scala/collection/immutable/Vector$.MODULE$:Lscala/collection/immutable/Vector$;
      30: invokevirtual #223                // Method scala/collection/immutable/Vector$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      33: invokevirtual #259                // Method scala/collection/immutable/Vector.$plus$colon:(Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      36: checkcast     #207                // class scala/collection/immutable/Vector
      39: areturn

  public static scala.collection.immutable.Vector $anonfun$rightFMConsistent$5(java.lang.Object, scala.Function0);
    Code:
       0: getstatic     #237                // Field scalaz/syntax/EitherOps$.MODULE$:Lscalaz/syntax/EitherOps$;
       3: getstatic     #242                // Field scalaz/syntax/package$.MODULE$:Lscalaz/syntax/package$;
       6: invokevirtual #246                // Method scalaz/syntax/package$.either:()Lscalaz/syntax/Syntaxes$either$;
       9: aload_0
      10: invokevirtual #249                // Method scalaz/syntax/Syntaxes$either$.ToEitherOps:(Ljava/lang/Object;)Ljava/lang/Object;
      13: invokevirtual #265                // Method scalaz/syntax/EitherOps$.left$extension:(Ljava/lang/Object;)Lscalaz/$bslash$div;
      16: astore_2
      17: aload_1
      18: invokeinterface #256,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      23: checkcast     #207                // class scala/collection/immutable/Vector
      26: aload_2
      27: getstatic     #219                // Field scala/collection/immutable/Vector$.MODULE$:Lscala/collection/immutable/Vector$;
      30: invokevirtual #223                // Method scala/collection/immutable/Vector$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      33: invokevirtual #259                // Method scala/collection/immutable/Vector.$plus$colon:(Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      36: checkcast     #207                // class scala/collection/immutable/Vector
      39: areturn

  public static void $init$(scalaz.Bifoldable<F>.BifoldableLaw);
    Code:
       0: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #280,  0            // InvokeDynamic #9:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
