Compiled from "Monoid.scala"
public final class scalaz.Monoid$$anon$8 implements scalaz.PlusEmpty<?> {
  private final scalaz.syntax.PlusEmptySyntax<?> plusEmptySyntax;

  private final scalaz.syntax.PlusSyntax<?> plusSyntax;

  private final scalaz.Monoid M0$2;

  public <S, A> A unfoldlPsum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, A>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #38                 // InterfaceMethod scalaz/PlusEmpty.unfoldlPsum$:(Lscalaz/PlusEmpty;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <S, A> A unfoldrPsum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<A, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #47                 // InterfaceMethod scalaz/PlusEmpty.unfoldrPsum$:(Lscalaz/PlusEmpty;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.PlusEmpty<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #54                 // InterfaceMethod scalaz/PlusEmpty.compose$:(Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty;
       4: areturn

  public <G> scalaz.PlusEmpty<?> product(scalaz.PlusEmpty<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #61                 // InterfaceMethod scalaz/PlusEmpty.product$:(Lscalaz/PlusEmpty;Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty;
       5: areturn

  public <A> scalaz.Monoid<A> monoid();
    Code:
       0: aload_0
       1: invokestatic  #69                 // InterfaceMethod scalaz/PlusEmpty.monoid$:(Lscalaz/PlusEmpty;)Lscalaz/Monoid;
       4: areturn

  public scalaz.PlusEmpty<?>.EmptyLaw plusEmptyLaw();
    Code:
       0: aload_0
       1: invokestatic  #76                 // InterfaceMethod scalaz/PlusEmpty.plusEmptyLaw$:(Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty$EmptyLaw;
       4: areturn

  public <S, A> scalaz.Maybe<A> unfoldlPsumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, A>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #83                 // InterfaceMethod scalaz/Plus.unfoldlPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S, A> scalaz.Maybe<A> unfoldrPsumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<A, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #88                 // InterfaceMethod scalaz/Plus.unfoldrPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <G> scalaz.Plus<?> product(scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #93                 // InterfaceMethod scalaz/Plus.product$:(Lscalaz/Plus;Lscalaz/Plus;)Lscalaz/Plus;
       5: areturn

  public <A> scalaz.Semigroup<A> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #101                // InterfaceMethod scalaz/Plus.semigroup$:(Lscalaz/Plus;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Plus<?>.PlusLaw plusLaw();
    Code:
       0: aload_0
       1: invokestatic  #108                // InterfaceMethod scalaz/Plus.plusLaw$:(Lscalaz/Plus;)Lscalaz/Plus$PlusLaw;
       4: areturn

  public scalaz.syntax.PlusEmptySyntax<?> plusEmptySyntax();
    Code:
       0: aload_0
       1: getfield      #112                // Field plusEmptySyntax:Lscalaz/syntax/PlusEmptySyntax;
       4: areturn

  public void scalaz$PlusEmpty$_setter_$plusEmptySyntax_$eq(scalaz.syntax.PlusEmptySyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #112                // Field plusEmptySyntax:Lscalaz/syntax/PlusEmptySyntax;
       5: return

  public scalaz.syntax.PlusSyntax<?> plusSyntax();
    Code:
       0: aload_0
       1: getfield      #120                // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       4: areturn

  public void scalaz$Plus$_setter_$plusSyntax_$eq(scalaz.syntax.PlusSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #120                // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       5: return

  public <A> A empty();
    Code:
       0: aload_0
       1: getfield      #128                // Field M0$2:Lscalaz/Monoid;
       4: invokeinterface #133,  1          // InterfaceMethod scalaz/Monoid.zero:()Ljava/lang/Object;
       9: areturn

  public <A> A plus(A, scala.Function0<A>);
    Code:
       0: aload_0
       1: getfield      #128                // Field M0$2:Lscalaz/Monoid;
       4: aload_1
       5: aload_2
       6: invokeinterface #141,  3          // InterfaceMethod scalaz/Monoid.append:(Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
      11: areturn

  public scalaz.Plus compose();
    Code:
       0: aload_0
       1: invokevirtual #145                // Method compose:()Lscalaz/PlusEmpty;
       4: areturn

  public scalaz.Monoid$$anon$8(scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #128                // Field M0$2:Lscalaz/Monoid;
       5: aload_0
       6: invokespecial #150                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #154                // InterfaceMethod scalaz/Plus.$init$:(Lscalaz/Plus;)V
      13: aload_0
      14: invokestatic  #157                // InterfaceMethod scalaz/PlusEmpty.$init$:(Lscalaz/PlusEmpty;)V
      17: return
}
