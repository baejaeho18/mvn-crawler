Compiled from "OneAnd.scala"
public final class scalaz.OneAndInstances$$anon$12 implements scalaz.OneAndPlus<F> {
  private final scalaz.syntax.PlusSyntax<?> plusSyntax;

  private final scalaz.Applicative evidence$15$1;

  private final scalaz.Plus evidence$16$1;

  public <A> scalaz.OneAnd<F, A> plus(scalaz.OneAnd<F, A>, scala.Function0<scalaz.OneAnd<F, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #39                 // InterfaceMethod scalaz/OneAndPlus.plus$:(Lscalaz/OneAndPlus;Lscalaz/OneAnd;Lscala/Function0;)Lscalaz/OneAnd;
       6: areturn

  public <S, A> scalaz.Maybe<scalaz.OneAnd<F, A>> unfoldlPsumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, scalaz.OneAnd<F, A>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #52                 // InterfaceMethod scalaz/Plus.unfoldlPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S, A> scalaz.Maybe<scalaz.OneAnd<F, A>> unfoldrPsumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<scalaz.OneAnd<F, A>, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #59                 // InterfaceMethod scalaz/Plus.unfoldrPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <G> scalaz.Plus<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #66                 // InterfaceMethod scalaz/Plus.compose$:(Lscalaz/Plus;)Lscalaz/Plus;
       4: areturn

  public <G> scalaz.Plus<?> product(scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #73                 // InterfaceMethod scalaz/Plus.product$:(Lscalaz/Plus;Lscalaz/Plus;)Lscalaz/Plus;
       5: areturn

  public <A> scalaz.Semigroup<scalaz.OneAnd<F, A>> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #80                 // InterfaceMethod scalaz/Plus.semigroup$:(Lscalaz/Plus;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Plus<?>.PlusLaw plusLaw();
    Code:
       0: aload_0
       1: invokestatic  #87                 // InterfaceMethod scalaz/Plus.plusLaw$:(Lscalaz/Plus;)Lscalaz/Plus$PlusLaw;
       4: areturn

  public scalaz.syntax.PlusSyntax<?> plusSyntax();
    Code:
       0: aload_0
       1: getfield      #91                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       4: areturn

  public void scalaz$Plus$_setter_$plusSyntax_$eq(scalaz.syntax.PlusSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #91                 // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       5: return

  public scalaz.Applicative<F> F();
    Code:
       0: getstatic     #104                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #106                // Field evidence$15$1:Lscalaz/Applicative;
       7: invokevirtual #110                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #112                // class scalaz/Applicative
      13: areturn

  public scalaz.Plus<F> G();
    Code:
       0: getstatic     #104                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #116                // Field evidence$16$1:Lscalaz/Plus;
       7: invokevirtual #110                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #22                 // class scalaz/Plus
      13: areturn

  public java.lang.Object plus(java.lang.Object, scala.Function0);
    Code:
       0: aload_1
       1: checkcast     #119                // class scalaz/OneAnd
       4: astore_3
       5: getstatic     #124                // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       8: aload_3
       9: invokevirtual #128                // Method scalaz/OneAnd.head:()Ljava/lang/Object;
      12: aload_0
      13: invokeinterface #130,  1          // InterfaceMethod scalaz/OneAndPlus.G:()Lscalaz/Plus;
      18: aload_0
      19: invokeinterface #130,  1          // InterfaceMethod scalaz/OneAndPlus.G:()Lscalaz/Plus;
      24: aload_3
      25: invokevirtual #133                // Method scalaz/OneAnd.tail:()Ljava/lang/Object;
      28: aload_0
      29: aload_2
      30: invokedynamic #154,  0            // InvokeDynamic #0:apply:(Lscalaz/OneAndPlus;Lscala/Function0;)Lscala/Function0;
      35: invokeinterface #156,  3          // InterfaceMethod scalaz/Plus.plus:(Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
      40: aload_2
      41: invokedynamic #164,  0            // InvokeDynamic #1:apply:(Lscala/Function0;)Lscala/Function0;
      46: invokeinterface #156,  3          // InterfaceMethod scalaz/Plus.plus:(Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
      51: invokevirtual #167                // Method scalaz/OneAnd$.apply:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/OneAnd;
      54: areturn

  public scalaz.OneAndInstances$$anon$12(scalaz.OneAndInstances, scalaz.Applicative, scalaz.Plus);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #106                // Field evidence$15$1:Lscalaz/Applicative;
       5: aload_0
       6: aload_3
       7: putfield      #116                // Field evidence$16$1:Lscalaz/Plus;
      10: aload_0
      11: invokespecial #174                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #178                // InterfaceMethod scalaz/Plus.$init$:(Lscalaz/Plus;)V
      18: aload_0
      19: invokestatic  #181                // InterfaceMethod scalaz/OneAndPlus.$init$:(Lscalaz/OneAndPlus;)V
      22: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #194,  0            // InvokeDynamic #2:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
