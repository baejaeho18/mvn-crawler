Compiled from "OneAnd.scala"
public final class scalaz.OneAndInstances0$$anon$11 implements scalaz.OneAndTraverse<F> {
  private final scalaz.syntax.Traverse1Syntax<?> traverse1Syntax;

  private final scalaz.syntax.Foldable1Syntax<?> foldable1Syntax;

  private final scalaz.syntax.TraverseSyntax<?> traverseSyntax;

  private final scalaz.syntax.FoldableSyntax<?> foldableSyntax;

  private final scalaz.syntax.FunctorSyntax<?> functorSyntax;

  private final scalaz.syntax.InvariantFunctorSyntax<?> invariantFunctorSyntax;

  private final scalaz.Traverse evidence$14$1;

  public <G, A, B> G traverse1Impl(scalaz.OneAnd<F, A>, scala.Function1<A, G>, scalaz.Apply<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #104                // InterfaceMethod scalaz/OneAndTraverse.traverse1Impl$:(Lscalaz/OneAndTraverse;Lscalaz/OneAnd;Lscala/Function1;Lscalaz/Apply;)Ljava/lang/Object;
       7: areturn

  public <G, A, B> G traverseImpl(scalaz.OneAnd<F, A>, scala.Function1<A, G>, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #116                // InterfaceMethod scalaz/OneAndTraverse.traverseImpl$:(Lscalaz/OneAndTraverse;Lscalaz/OneAnd;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public <S, A, B> scalaz.IndexedStateT<S, S, java.lang.Object, scalaz.OneAnd<F, B>> traverseS(scalaz.OneAnd<F, A>, scala.Function1<A, scalaz.IndexedStateT<S, S, ?, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #124                // InterfaceMethod scalaz/OneAndTraverse.traverseS$:(Lscalaz/OneAndTraverse;Lscalaz/OneAnd;Lscala/Function1;)Lscalaz/IndexedStateT;
       6: areturn

  public <A> scala.Option<A> findLeft(scalaz.OneAnd<F, A>, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #133                // InterfaceMethod scalaz/OneAndFoldable.findLeft$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;Lscala/Function1;)Lscala/Option;
       6: areturn

  public <A> scala.Option<A> findRight(scalaz.OneAnd<F, A>, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #137                // InterfaceMethod scalaz/OneAndFoldable.findRight$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;Lscala/Function1;)Lscala/Option;
       6: areturn

  public <A, B> B foldMap1(scalaz.OneAnd<F, A>, scala.Function1<A, B>, scalaz.Semigroup<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #145                // InterfaceMethod scalaz/OneAndFoldable.foldMap1$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;Lscala/Function1;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public <A, B> B foldMapRight1(scalaz.OneAnd<F, A>, scala.Function1<A, B>, scala.Function2<A, scala.Function0<B>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #154                // InterfaceMethod scalaz/OneAndFoldable.foldMapRight1$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;Lscala/Function1;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <A, B> B foldMapLeft1(scalaz.OneAnd<F, A>, scala.Function1<A, B>, scala.Function2<B, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #160                // InterfaceMethod scalaz/OneAndFoldable.foldMapLeft1$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;Lscala/Function1;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <A, B> B foldMap(scalaz.OneAnd<F, A>, scala.Function1<A, B>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #168                // InterfaceMethod scalaz/OneAndFoldable.foldMap$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public <A, B> B foldRight(scalaz.OneAnd<F, A>, scala.Function0<B>, scala.Function2<A, scala.Function0<B>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #176                // InterfaceMethod scalaz/OneAndFoldable.foldRight$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;Lscala/Function0;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <A, B> B foldLeft(scalaz.OneAnd<F, A>, B, scala.Function2<B, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #184                // InterfaceMethod scalaz/OneAndFoldable.foldLeft$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <S, A, B> scalaz.IndexedStateT<S, S, java.lang.Object, scala.runtime.BoxedUnit> traverseS_(scalaz.OneAnd<F, A>, scala.Function1<A, scalaz.IndexedStateT<S, S, ?, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #191                // InterfaceMethod scalaz/OneAndFoldable.traverseS_$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;Lscala/Function1;)Lscalaz/IndexedStateT;
       6: areturn

  public <A> int length(scalaz.OneAnd<F, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #198                // InterfaceMethod scalaz/OneAndFoldable.length$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;)I
       5: ireturn

  public <A> scala.Option<A> index(scalaz.OneAnd<F, A>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #206                // InterfaceMethod scalaz/OneAndFoldable.index$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;I)Lscala/Option;
       6: areturn

  public <A> scala.collection.immutable.Vector<A> toVector(scalaz.OneAnd<F, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #214                // InterfaceMethod scalaz/OneAndFoldable.toVector$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;)Lscala/collection/immutable/Vector;
       5: areturn

  public <A> scala.collection.immutable.List<A> toList(scalaz.OneAnd<F, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #221                // InterfaceMethod scalaz/OneAndFoldable.toList$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;)Lscala/collection/immutable/List;
       5: areturn

  public <A> scalaz.IList<A> toIList(scalaz.OneAnd<F, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #228                // InterfaceMethod scalaz/OneAndFoldable.toIList$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;)Lscalaz/IList;
       5: areturn

  public <A> scala.collection.immutable.Set<A> toSet(scalaz.OneAnd<F, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #235                // InterfaceMethod scalaz/OneAndFoldable.toSet$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;)Lscala/collection/immutable/Set;
       5: areturn

  public <A> scala.collection.immutable.Stream<A> toStream(scalaz.OneAnd<F, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #242                // InterfaceMethod scalaz/OneAndFoldable.toStream$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;)Lscala/collection/immutable/Stream;
       5: areturn

  public <A> scalaz.EphemeralStream<A> toEphemeralStream(scalaz.OneAnd<F, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #249                // InterfaceMethod scalaz/OneAndFoldable.toEphemeralStream$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;)Lscalaz/EphemeralStream;
       5: areturn

  public <A> boolean all(scalaz.OneAnd<F, A>, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #256                // InterfaceMethod scalaz/OneAndFoldable.all$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;Lscala/Function1;)Z
       6: ireturn

  public <A> boolean any(scalaz.OneAnd<F, A>, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #260                // InterfaceMethod scalaz/OneAndFoldable.any$:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;Lscala/Function1;)Z
       6: ireturn

  public <A, B> scalaz.OneAnd<F, B> map(scalaz.OneAnd<F, A>, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #269                // InterfaceMethod scalaz/OneAndFunctor.map$:(Lscalaz/OneAndFunctor;Lscalaz/OneAnd;Lscala/Function1;)Lscalaz/OneAnd;
       6: areturn

  public <G> scalaz.Traverse1<?> product(scalaz.Traverse1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #277                // InterfaceMethod scalaz/Traverse1.product$:(Lscalaz/Traverse1;Lscalaz/Traverse1;)Lscalaz/Traverse1;
       5: areturn

  public <G> scalaz.Traverse1<?> product0(scalaz.Traverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #284                // InterfaceMethod scalaz/Traverse1.product0$:(Lscalaz/Traverse1;Lscalaz/Traverse;)Lscalaz/Traverse1;
       5: areturn

  public <G> scalaz.Traverse1<?> compose(scalaz.Traverse1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #288                // InterfaceMethod scalaz/Traverse1.compose$:(Lscalaz/Traverse1;Lscalaz/Traverse1;)Lscalaz/Traverse1;
       5: areturn

  public java.lang.Object traverse1(java.lang.Object, scala.Function1, scalaz.Apply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #295                // InterfaceMethod scalaz/Traverse1.traverse1$:(Lscalaz/Traverse1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Apply;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object traverse1U(java.lang.Object, scala.Function1, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #301                // InterfaceMethod scalaz/Traverse1.traverse1U$:(Lscalaz/Traverse1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Unapply;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object sequence1(java.lang.Object, scalaz.Apply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #310                // InterfaceMethod scalaz/Traverse1.sequence1$:(Lscalaz/Traverse1;Ljava/lang/Object;Lscalaz/Apply;)Ljava/lang/Object;
       6: areturn

  public final java.lang.Object sequence1U(java.lang.Object, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #316                // InterfaceMethod scalaz/Traverse1.sequence1U$:(Lscalaz/Traverse1;Ljava/lang/Object;Lscalaz/Unapply;)Ljava/lang/Object;
       6: areturn

  public scalaz.Traverse1<?>.Traverse1Law traverse1Law();
    Code:
       0: aload_0
       1: invokestatic  #323                // InterfaceMethod scalaz/Traverse1.traverse1Law$:(Lscalaz/Traverse1;)Lscalaz/Traverse1$Traverse1Law;
       4: areturn

  public <G> scalaz.Foldable1<?> product(scalaz.Foldable1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #328                // InterfaceMethod scalaz/Foldable1.product$:(Lscalaz/Foldable1;Lscalaz/Foldable1;)Lscalaz/Foldable1;
       5: areturn

  public <G> scalaz.Foldable1<?> compose(scalaz.Foldable1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #331                // InterfaceMethod scalaz/Foldable1.compose$:(Lscalaz/Foldable1;Lscalaz/Foldable1;)Lscalaz/Foldable1;
       5: areturn

  public scala.Option foldMap1Opt(java.lang.Object, scala.Function1, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #338                // InterfaceMethod scalaz/Foldable1.foldMap1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Semigroup;)Lscala/Option;
       7: areturn

  public java.lang.Object foldRight1(java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #344                // InterfaceMethod scalaz/Foldable1.foldRight1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object foldLeft1(java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #348                // InterfaceMethod scalaz/Foldable1.foldLeft1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public final java.lang.Object foldr1(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #354                // InterfaceMethod scalaz/Foldable1.foldr1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public scala.Option foldMapRight1Opt(java.lang.Object, scala.Function1, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #360                // InterfaceMethod scalaz/Foldable1.foldMapRight1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Lscala/Option;
       7: areturn

  public scala.Option foldr1Opt(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #366                // InterfaceMethod scalaz/Foldable1.foldr1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public final java.lang.Object foldl1(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #370                // InterfaceMethod scalaz/Foldable1.foldl1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public scala.Option foldMapLeft1Opt(java.lang.Object, scala.Function1, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #374                // InterfaceMethod scalaz/Foldable1.foldMapLeft1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Lscala/Option;
       7: areturn

  public scala.Option foldl1Opt(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #378                // InterfaceMethod scalaz/Foldable1.foldl1Opt$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public java.lang.Object fold1(java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #386                // InterfaceMethod scalaz/Foldable1.fold1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object maximum1(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #393                // InterfaceMethod scalaz/Foldable1.maximum1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object maximumOf1(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #400                // InterfaceMethod scalaz/Foldable1.maximumOf1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object maximumBy1(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #405                // InterfaceMethod scalaz/Foldable1.maximumBy1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object minimum1(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #410                // InterfaceMethod scalaz/Foldable1.minimum1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object minimumOf1(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #415                // InterfaceMethod scalaz/Foldable1.minimumOf1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object minimumBy1(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #420                // InterfaceMethod scalaz/Foldable1.minimumBy1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Ljava/lang/Object;
       7: areturn

  public scala.Option maximum(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #427                // InterfaceMethod scalaz/Foldable1.maximum$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public scala.Option maximumOf(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #434                // InterfaceMethod scalaz/Foldable1.maximumOf$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scala.Option maximumBy(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #439                // InterfaceMethod scalaz/Foldable1.maximumBy$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scala.Option minimum(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #444                // InterfaceMethod scalaz/Foldable1.minimum$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public scala.Option minimumOf(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #449                // InterfaceMethod scalaz/Foldable1.minimumOf$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scala.Option minimumBy(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #454                // InterfaceMethod scalaz/Foldable1.minimumBy$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scalaz.NonEmptyList distinct1(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #461                // InterfaceMethod scalaz/Foldable1.distinct1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Order;)Lscalaz/NonEmptyList;
       6: areturn

  public scalaz.NonEmptyList distinctE1(java.lang.Object, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #467                // InterfaceMethod scalaz/Foldable1.distinctE1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Equal;)Lscalaz/NonEmptyList;
       6: areturn

  public java.lang.Object sumr1(java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #472                // InterfaceMethod scalaz/Foldable1.sumr1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object suml1(java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #476                // InterfaceMethod scalaz/Foldable1.suml1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object psum1(java.lang.Object, scalaz.Plus);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #482                // InterfaceMethod scalaz/Foldable1.psum1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Plus;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object psumMap1(java.lang.Object, scala.Function1, scalaz.Plus);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #489                // InterfaceMethod scalaz/Foldable1.psumMap1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Plus;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object msuml1(java.lang.Object, scalaz.Plus);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #493                // InterfaceMethod scalaz/Foldable1.msuml1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Plus;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object intercalate1(java.lang.Object, java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #499                // InterfaceMethod scalaz/Foldable1.intercalate1$:(Lscalaz/Foldable1;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object intercalate(java.lang.Object, java.lang.Object, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #506                // InterfaceMethod scalaz/Foldable1.intercalate$:(Lscalaz/Foldable1;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object traverse1_(java.lang.Object, scala.Function1, scalaz.Apply, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #513                // InterfaceMethod scalaz/Foldable1.traverse1_$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function1;Lscalaz/Apply;Lscalaz/Semigroup;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object sequence1_(java.lang.Object, scalaz.Apply, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #519                // InterfaceMethod scalaz/Foldable1.sequence1_$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscalaz/Apply;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public final boolean empty(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #525                // InterfaceMethod scalaz/Foldable1.empty$:(Lscalaz/Foldable1;Ljava/lang/Object;)Z
       5: ireturn

  public <G> scalaz.Foldable1<?> product0(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #530                // InterfaceMethod scalaz/Foldable1.product0$:(Lscalaz/Foldable1;Lscalaz/Foldable;)Lscalaz/Foldable1;
       5: areturn

  public scalaz.NonEmptyList toNel(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #537                // InterfaceMethod scalaz/Foldable1.toNel$:(Lscalaz/Foldable1;Ljava/lang/Object;)Lscalaz/NonEmptyList;
       5: areturn

  public scalaz.NonEmptyList scanLeft1(java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #543                // InterfaceMethod scalaz/Foldable1.scanLeft1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function2;)Lscalaz/NonEmptyList;
       6: areturn

  public scalaz.NonEmptyList scanRight1(java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #547                // InterfaceMethod scalaz/Foldable1.scanRight1$:(Lscalaz/Foldable1;Ljava/lang/Object;Lscala/Function2;)Lscalaz/NonEmptyList;
       6: areturn

  public scalaz.Foldable1<?>.Foldable1Law foldable1Law();
    Code:
       0: aload_0
       1: invokestatic  #554                // InterfaceMethod scalaz/Foldable1.foldable1Law$:(Lscalaz/Foldable1;)Lscalaz/Foldable1$Foldable1Law;
       4: areturn

  public <G> scalaz.Traverse<?> compose(scalaz.Traverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #559                // InterfaceMethod scalaz/Traverse.compose$:(Lscalaz/Traverse;Lscalaz/Traverse;)Lscalaz/Traverse;
       5: areturn

  public <G> scalaz.Bitraverse<?> bicompose(scalaz.Bitraverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #566                // InterfaceMethod scalaz/Traverse.bicompose$:(Lscalaz/Traverse;Lscalaz/Bitraverse;)Lscalaz/Bitraverse;
       5: areturn

  public <G> scalaz.Traverse<?> product(scalaz.Traverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #569                // InterfaceMethod scalaz/Traverse.product$:(Lscalaz/Traverse;Lscalaz/Traverse;)Lscalaz/Traverse;
       5: areturn

  public <G> scalaz.Traverse1<?> product0(scalaz.Traverse1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #572                // InterfaceMethod scalaz/Traverse.product0$:(Lscalaz/Traverse;Lscalaz/Traverse1;)Lscalaz/Traverse1;
       5: areturn

  public <G> scalaz.Traverse<?>.Traversal<G> traversal(scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #579                // InterfaceMethod scalaz/Traverse.traversal$:(Lscalaz/Traverse;Lscalaz/Applicative;)Lscalaz/Traverse$Traversal;
       5: areturn

  public <S> scalaz.Traverse<?>.Traversal<?> traversalS();
    Code:
       0: aload_0
       1: invokestatic  #586                // InterfaceMethod scalaz/Traverse.traversalS$:(Lscalaz/Traverse;)Lscalaz/Traverse$Traversal;
       4: areturn

  public java.lang.Object traverse(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #592                // InterfaceMethod scalaz/Traverse.traverse$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object traverseU(java.lang.Object, scala.Function1, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #597                // InterfaceMethod scalaz/Traverse.traverseU$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Unapply;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object traverseM(java.lang.Object, scala.Function1, scalaz.Applicative, scalaz.Bind);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #603                // InterfaceMethod scalaz/Traverse.traverseM$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;Lscalaz/Bind;)Ljava/lang/Object;
       9: areturn

  public scala.Tuple2 runTraverseS(java.lang.Object, java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #611                // InterfaceMethod scalaz/Traverse.runTraverseS$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)Lscala/Tuple2;
       7: areturn

  public scalaz.IndexedStateT traverseSTrampoline(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #617                // InterfaceMethod scalaz/Traverse.traverseSTrampoline$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Lscalaz/IndexedStateT;
       7: areturn

  public scalaz.Kleisli traverseKTrampoline(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #623                // InterfaceMethod scalaz/Traverse.traverseKTrampoline$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Lscalaz/Kleisli;
       7: areturn

  public java.lang.Object sequence(java.lang.Object, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #629                // InterfaceMethod scalaz/Traverse.sequence$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Applicative;)Ljava/lang/Object;
       6: areturn

  public scalaz.IndexedStateT sequenceS(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #635                // InterfaceMethod scalaz/Traverse.sequenceS$:(Lscalaz/Traverse;Ljava/lang/Object;)Lscalaz/IndexedStateT;
       5: areturn

  public final java.lang.Object sequenceU(java.lang.Object, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #641                // InterfaceMethod scalaz/Traverse.sequenceU$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Unapply;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object sequenceM(java.lang.Object, scalaz.Applicative, scalaz.Bind);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #648                // InterfaceMethod scalaz/Traverse.sequenceM$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Applicative;Lscalaz/Bind;)Ljava/lang/Object;
       7: areturn

  public scala.Tuple2 foldLShape(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #654                // InterfaceMethod scalaz/Traverse.foldLShape$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public java.lang.Object reverse(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #660                // InterfaceMethod scalaz/Traverse.reverse$:(Lscalaz/Traverse;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public scala.Tuple2 zipWith(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #665                // InterfaceMethod scalaz/Traverse.zipWith$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public java.lang.Object zipWithL(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #671                // InterfaceMethod scalaz/Traverse.zipWithL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object zipWithR(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #675                // InterfaceMethod scalaz/Traverse.zipWithR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object indexed(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #679                // InterfaceMethod scalaz/Traverse.indexed$:(Lscalaz/Traverse;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object zipL(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #685                // InterfaceMethod scalaz/Traverse.zipL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object zipR(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #689                // InterfaceMethod scalaz/Traverse.zipR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 mapAccumL(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #693                // InterfaceMethod scalaz/Traverse.mapAccumL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public scala.Tuple2 mapAccumR(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #697                // InterfaceMethod scalaz/Traverse.mapAccumR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public scalaz.Traverse<?>.TraverseLaw traverseLaw();
    Code:
       0: aload_0
       1: invokestatic  #704                // InterfaceMethod scalaz/Traverse.traverseLaw$:(Lscalaz/Traverse;)Lscalaz/Traverse$TraverseLaw;
       4: areturn

  public <G> scalaz.Foldable<?> compose(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #709                // InterfaceMethod scalaz/Foldable.compose$:(Lscalaz/Foldable;Lscalaz/Foldable;)Lscalaz/Foldable;
       5: areturn

  public <G> scalaz.Bifoldable<?> bicompose(scalaz.Bifoldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #714                // InterfaceMethod scalaz/Foldable.bicompose$:(Lscalaz/Foldable;Lscalaz/Bifoldable;)Lscalaz/Bifoldable;
       5: areturn

  public <G> scalaz.Foldable<?> product(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #717                // InterfaceMethod scalaz/Foldable.product$:(Lscalaz/Foldable;Lscalaz/Foldable;)Lscalaz/Foldable;
       5: areturn

  public <G> scalaz.Foldable1<?> product0(scalaz.Foldable1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #720                // InterfaceMethod scalaz/Foldable.product0$:(Lscalaz/Foldable;Lscalaz/Foldable1;)Lscalaz/Foldable1;
       5: areturn

  public java.lang.Object foldRightM(java.lang.Object, scala.Function0, scala.Function2, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #726                // InterfaceMethod scalaz/Foldable.foldRightM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object foldLeftM(java.lang.Object, java.lang.Object, scala.Function2, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #733                // InterfaceMethod scalaz/Foldable.foldLeftM$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object foldMapM(java.lang.Object, scala.Function1, scalaz.Monoid, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #740                // InterfaceMethod scalaz/Foldable.foldMapM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monoid;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object fold(java.lang.Object, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #746                // InterfaceMethod scalaz/Foldable.fold$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public scala.Option fold1Opt(java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #752                // InterfaceMethod scalaz/Foldable.fold1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public java.lang.Object traverse_(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #757                // InterfaceMethod scalaz/Foldable.traverse_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object traverseU_(java.lang.Object, scala.Function1, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #762                // InterfaceMethod scalaz/Foldable.traverseU_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Unapply;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object sequence_(java.lang.Object, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #767                // InterfaceMethod scalaz/Foldable.sequence_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Applicative;)Ljava/lang/Object;
       6: areturn

  public scalaz.IndexedStateT sequenceS_(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #772                // InterfaceMethod scalaz/Foldable.sequenceS_$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/IndexedStateT;
       5: areturn

  public scalaz.Free sequenceF_(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #779                // InterfaceMethod scalaz/Foldable.sequenceF_$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/Free;
       5: areturn

  public final java.lang.Object foldr(java.lang.Object, scala.Function0, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #785                // InterfaceMethod scalaz/Foldable.foldr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public scala.Option foldRight1Opt(java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #791                // InterfaceMethod scalaz/Foldable.foldRight1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscala/Option;
       6: areturn

  public final java.lang.Object foldl(java.lang.Object, java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #797                // InterfaceMethod scalaz/Foldable.foldl$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public scala.Option foldLeft1Opt(java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #801                // InterfaceMethod scalaz/Foldable.foldLeft1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscala/Option;
       6: areturn

  public final java.lang.Object foldrM(java.lang.Object, scala.Function0, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #807                // InterfaceMethod scalaz/Foldable.foldrM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object foldlM(java.lang.Object, scala.Function0, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #811                // InterfaceMethod scalaz/Foldable.foldlM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object findMapM(java.lang.Object, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #817                // InterfaceMethod scalaz/Foldable.findMapM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public final int count(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #823                // InterfaceMethod scalaz/Foldable.count$:(Lscalaz/Foldable;Ljava/lang/Object;)I
       5: ireturn

  public java.lang.Object indexOr(java.lang.Object, scala.Function0, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokestatic  #830                // InterfaceMethod scalaz/Foldable.indexOr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;I)Ljava/lang/Object;
       7: areturn

  public java.lang.Object allM(java.lang.Object, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #835                // InterfaceMethod scalaz/Foldable.allM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object anyM(java.lang.Object, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #839                // InterfaceMethod scalaz/Foldable.anyM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public int filterLength(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #845                // InterfaceMethod scalaz/Foldable.filterLength$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)I
       6: ireturn

  public scala.Option extrema(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #850                // InterfaceMethod scalaz/Foldable.extrema$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public scala.Option extremaOf(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #855                // InterfaceMethod scalaz/Foldable.extremaOf$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scala.Option extremaBy(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #859                // InterfaceMethod scalaz/Foldable.extremaBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public java.lang.Object sumr(java.lang.Object, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #863                // InterfaceMethod scalaz/Foldable.sumr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public scala.Option sumr1Opt(java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #867                // InterfaceMethod scalaz/Foldable.sumr1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public java.lang.Object suml(java.lang.Object, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #871                // InterfaceMethod scalaz/Foldable.suml$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public scala.Option suml1Opt(java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #875                // InterfaceMethod scalaz/Foldable.suml1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public java.lang.Object psumMap(java.lang.Object, scala.Function1, scalaz.PlusEmpty);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #881                // InterfaceMethod scalaz/Foldable.psumMap$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object psum(java.lang.Object, scalaz.PlusEmpty);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #888                // InterfaceMethod scalaz/Foldable.psum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       6: areturn

  public final java.lang.Object asum(java.lang.Object, scalaz.PlusEmpty);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #892                // InterfaceMethod scalaz/Foldable.asum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object msuml(java.lang.Object, scalaz.PlusEmpty);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #896                // InterfaceMethod scalaz/Foldable.msuml$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object msumlU(java.lang.Object, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #901                // InterfaceMethod scalaz/Foldable.msumlU$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Unapply;)Ljava/lang/Object;
       6: areturn

  public long longDigits(java.lang.Object, scala.Predef$$less$colon$less);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #908                // InterfaceMethod scalaz/Foldable.longDigits$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Predef$$less$colon$less;)J
       6: lreturn

  public boolean element(java.lang.Object, java.lang.Object, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #915                // InterfaceMethod scalaz/Foldable.element$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Equal;)Z
       7: ireturn

  public scala.collection.immutable.List splitWith(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #921                // InterfaceMethod scalaz/Foldable.splitWith$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/List;
       6: areturn

  public scalaz.IList splitBy(java.lang.Object, scala.Function1, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #927                // InterfaceMethod scalaz/Foldable.splitBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Equal;)Lscalaz/IList;
       7: areturn

  public scalaz.IList splitByRelation(java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #934                // InterfaceMethod scalaz/Foldable.splitByRelation$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscalaz/IList;
       6: areturn

  public scala.collection.immutable.List selectSplit(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #938                // InterfaceMethod scalaz/Foldable.selectSplit$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/List;
       6: areturn

  public scalaz.IList distinct(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #944                // InterfaceMethod scalaz/Foldable.distinct$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscalaz/IList;
       6: areturn

  public scalaz.IList distinctE(java.lang.Object, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #950                // InterfaceMethod scalaz/Foldable.distinctE$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Equal;)Lscalaz/IList;
       6: areturn

  public scalaz.IList distinctBy(java.lang.Object, scala.Function1, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #955                // InterfaceMethod scalaz/Foldable.distinctBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Equal;)Lscalaz/IList;
       7: areturn

  public java.lang.Object collapse(java.lang.Object, scalaz.ApplicativePlus);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #961                // InterfaceMethod scalaz/Foldable.collapse$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/ApplicativePlus;)Ljava/lang/Object;
       6: areturn

  public scalaz.Foldable<?>.FoldableLaw foldableLaw();
    Code:
       0: aload_0
       1: invokestatic  #969                // InterfaceMethod scalaz/Foldable.foldableLaw$:(Lscalaz/Foldable;)Lscalaz/Foldable$FoldableLaw;
       4: areturn

  public java.lang.Object xmap(java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #976                // InterfaceMethod scalaz/Functor.xmap$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object apply(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #981                // InterfaceMethod scalaz/Functor.apply$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Function1<scalaz.OneAnd<F, A>, scalaz.OneAnd<F, B>> lift(scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #988                // InterfaceMethod scalaz/Functor.lift$:(Lscalaz/Functor;Lscala/Function1;)Lscala/Function1;
       5: areturn

  public java.lang.Object strengthL(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #993                // InterfaceMethod scalaz/Functor.strengthL$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object strengthR(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #998                // InterfaceMethod scalaz/Functor.strengthR$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object mapply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1002               // InterfaceMethod scalaz/Functor.mapply$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object fpair(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1007               // InterfaceMethod scalaz/Functor.fpair$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object fproduct(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1011               // InterfaceMethod scalaz/Functor.fproduct$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object void(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1015               // InterfaceMethod scalaz/Functor.void$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object counzip(scalaz.$bslash$div);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1021               // InterfaceMethod scalaz/Functor.counzip$:(Lscalaz/Functor;Lscalaz/$bslash$div;)Ljava/lang/Object;
       5: areturn

  public <G> scalaz.Functor<?> compose(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1027               // InterfaceMethod scalaz/Functor.compose$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public <G> scalaz.Contravariant<?> icompose(scalaz.Contravariant<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1035               // InterfaceMethod scalaz/Functor.icompose$:(Lscalaz/Functor;Lscalaz/Contravariant;)Lscalaz/Contravariant;
       5: areturn

  public <G> scalaz.Bifunctor<?> bicompose(scalaz.Bifunctor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1041               // InterfaceMethod scalaz/Functor.bicompose$:(Lscalaz/Functor;Lscalaz/Bifunctor;)Lscalaz/Bifunctor;
       5: areturn

  public <G> scalaz.Functor<?> product(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1044               // InterfaceMethod scalaz/Functor.product$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public java.lang.Object widen(java.lang.Object, scalaz.Liskov);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1051               // InterfaceMethod scalaz/Functor.widen$:(Lscalaz/Functor;Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public scalaz.Functor<?>.FunctorLaw functorLaw();
    Code:
       0: aload_0
       1: invokestatic  #1059               // InterfaceMethod scalaz/Functor.functorLaw$:(Lscalaz/Functor;)Lscalaz/Functor$FunctorLaw;
       4: areturn

  public java.lang.Object xmapb(java.lang.Object, scalaz.BijectionT);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1066               // InterfaceMethod scalaz/InvariantFunctor.xmapb$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/BijectionT;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object xmapi(java.lang.Object, scalaz.Isomorphisms$Iso);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1074               // InterfaceMethod scalaz/InvariantFunctor.xmapi$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/Isomorphisms$Iso;)Ljava/lang/Object;
       6: areturn

  public scalaz.InvariantFunctor<?>.InvariantFunctorLaw invariantFunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #1082               // InterfaceMethod scalaz/InvariantFunctor.invariantFunctorLaw$:(Lscalaz/InvariantFunctor;)Lscalaz/InvariantFunctor$InvariantFunctorLaw;
       4: areturn

  public scalaz.syntax.Traverse1Syntax<?> traverse1Syntax();
    Code:
       0: aload_0
       1: getfield      #1086               // Field traverse1Syntax:Lscalaz/syntax/Traverse1Syntax;
       4: areturn

  public void scalaz$Traverse1$_setter_$traverse1Syntax_$eq(scalaz.syntax.Traverse1Syntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1086               // Field traverse1Syntax:Lscalaz/syntax/Traverse1Syntax;
       5: return

  public scalaz.syntax.Foldable1Syntax<?> foldable1Syntax();
    Code:
       0: aload_0
       1: getfield      #1094               // Field foldable1Syntax:Lscalaz/syntax/Foldable1Syntax;
       4: areturn

  public void scalaz$Foldable1$_setter_$foldable1Syntax_$eq(scalaz.syntax.Foldable1Syntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1094               // Field foldable1Syntax:Lscalaz/syntax/Foldable1Syntax;
       5: return

  public scalaz.syntax.TraverseSyntax<?> traverseSyntax();
    Code:
       0: aload_0
       1: getfield      #1101               // Field traverseSyntax:Lscalaz/syntax/TraverseSyntax;
       4: areturn

  public void scalaz$Traverse$_setter_$traverseSyntax_$eq(scalaz.syntax.TraverseSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1101               // Field traverseSyntax:Lscalaz/syntax/TraverseSyntax;
       5: return

  public scalaz.syntax.FoldableSyntax<?> foldableSyntax();
    Code:
       0: aload_0
       1: getfield      #1108               // Field foldableSyntax:Lscalaz/syntax/FoldableSyntax;
       4: areturn

  public void scalaz$Foldable$_setter_$foldableSyntax_$eq(scalaz.syntax.FoldableSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1108               // Field foldableSyntax:Lscalaz/syntax/FoldableSyntax;
       5: return

  public scalaz.syntax.FunctorSyntax<?> functorSyntax();
    Code:
       0: aload_0
       1: getfield      #1115               // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       4: areturn

  public void scalaz$Functor$_setter_$functorSyntax_$eq(scalaz.syntax.FunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1115               // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       5: return

  public scalaz.syntax.InvariantFunctorSyntax<?> invariantFunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #1122               // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       4: areturn

  public void scalaz$InvariantFunctor$_setter_$invariantFunctorSyntax_$eq(scalaz.syntax.InvariantFunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1122               // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       5: return

  public scalaz.Traverse<F> F();
    Code:
       0: getstatic     #1133               // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #1135               // Field evidence$14$1:Lscalaz/Traverse;
       7: invokevirtual #1138               // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #57                 // class scalaz/Traverse
      13: areturn

  public java.lang.Object map(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore_3
       5: getstatic     #1145               // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       8: aload_2
       9: aload_3
      10: invokevirtual #1149               // Method scalaz/OneAnd.head:()Ljava/lang/Object;
      13: invokeinterface #1153,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      18: aload_0
      19: invokeinterface #1156,  1         // InterfaceMethod scalaz/OneAndFunctor.F:()Lscalaz/Functor;
      24: aload_3
      25: invokevirtual #1159               // Method scalaz/OneAnd.tail:()Ljava/lang/Object;
      28: aload_2
      29: invokeinterface #1161,  3         // InterfaceMethod scalaz/Functor.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      34: invokevirtual #1164               // Method scalaz/OneAnd$.apply:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/OneAnd;
      37: areturn

  public boolean any(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore_3
       5: aload_2
       6: aload_3
       7: invokevirtual #1149               // Method scalaz/OneAnd.head:()Ljava/lang/Object;
      10: invokeinterface #1153,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      15: invokestatic  #1171               // Method scala/runtime/BoxesRunTime.unboxToBoolean:(Ljava/lang/Object;)Z
      18: ifne          40
      21: aload_0
      22: invokeinterface #1174,  1         // InterfaceMethod scalaz/OneAndFoldable.F:()Lscalaz/Foldable;
      27: aload_3
      28: invokevirtual #1159               // Method scalaz/OneAnd.tail:()Ljava/lang/Object;
      31: aload_2
      32: invokeinterface #1176,  3         // InterfaceMethod scalaz/Foldable.any:(Ljava/lang/Object;Lscala/Function1;)Z
      37: ifeq          42
      40: iconst_1
      41: ireturn
      42: iconst_0
      43: ireturn

  public boolean all(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore_3
       5: aload_2
       6: aload_3
       7: invokevirtual #1149               // Method scalaz/OneAnd.head:()Ljava/lang/Object;
      10: invokeinterface #1153,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      15: invokestatic  #1171               // Method scala/runtime/BoxesRunTime.unboxToBoolean:(Ljava/lang/Object;)Z
      18: ifeq          42
      21: aload_0
      22: invokeinterface #1174,  1         // InterfaceMethod scalaz/OneAndFoldable.F:()Lscalaz/Foldable;
      27: aload_3
      28: invokevirtual #1159               // Method scalaz/OneAnd.tail:()Ljava/lang/Object;
      31: aload_2
      32: invokeinterface #1179,  3         // InterfaceMethod scalaz/Foldable.all:(Ljava/lang/Object;Lscala/Function1;)Z
      37: ifeq          42
      40: iconst_1
      41: ireturn
      42: iconst_0
      43: ireturn

  public scalaz.EphemeralStream toEphemeralStream(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1140               // class scalaz/OneAnd
       5: invokevirtual #1183               // Method toEphemeralStream:(Lscalaz/OneAnd;)Lscalaz/EphemeralStream;
       8: areturn

  public scala.collection.immutable.Stream toStream(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1140               // class scalaz/OneAnd
       5: invokevirtual #1186               // Method toStream:(Lscalaz/OneAnd;)Lscala/collection/immutable/Stream;
       8: areturn

  public scala.collection.immutable.Set toSet(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1140               // class scalaz/OneAnd
       5: invokevirtual #1189               // Method toSet:(Lscalaz/OneAnd;)Lscala/collection/immutable/Set;
       8: areturn

  public scalaz.IList toIList(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1140               // class scalaz/OneAnd
       5: invokevirtual #1192               // Method toIList:(Lscalaz/OneAnd;)Lscalaz/IList;
       8: areturn

  public scala.collection.immutable.List toList(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1140               // class scalaz/OneAnd
       5: invokevirtual #1195               // Method toList:(Lscalaz/OneAnd;)Lscala/collection/immutable/List;
       8: areturn

  public scala.collection.immutable.Vector toVector(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1140               // class scalaz/OneAnd
       5: invokevirtual #1198               // Method toVector:(Lscalaz/OneAnd;)Lscala/collection/immutable/Vector;
       8: areturn

  public scala.Option index(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1140               // class scalaz/OneAnd
       5: iload_2
       6: invokevirtual #1201               // Method index:(Lscalaz/OneAnd;I)Lscala/Option;
       9: areturn

  public int length(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1140               // class scalaz/OneAnd
       5: invokevirtual #1203               // Method length:(Lscalaz/OneAnd;)I
       8: ireturn

  public scalaz.IndexedStateT traverseS_(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore_3
       5: getstatic     #1207               // Field scalaz/package$State$.MODULE$:Lscalaz/package$State$;
       8: aload_0
       9: aload_3
      10: aload_2
      11: invokedynamic #1229,  0           // InvokeDynamic #0:apply:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;Lscala/Function1;)Lscala/Function1;
      16: astore        4
      18: ifnonnull     23
      21: aconst_null
      22: athrow
      23: getstatic     #1232               // Field scalaz/package$StateT$.MODULE$:Lscalaz/package$StateT$;
      26: ifnonnull     31
      29: aconst_null
      30: athrow
      31: getstatic     #1237               // Field scalaz/IndexedStateT$.MODULE$:Lscalaz/IndexedStateT$;
      34: ifnonnull     39
      37: aconst_null
      38: athrow
      39: new           #40                 // class scalaz/IndexedStateT$Wrap
      42: dup
      43: aload         4
      45: invokespecial #1241               // Method scalaz/IndexedStateT$Wrap."<init>":(Lscala/Function1;)V
      48: areturn

  public java.lang.Object foldLeft(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore        4
       6: aload_0
       7: invokeinterface #1174,  1         // InterfaceMethod scalaz/OneAndFoldable.F:()Lscalaz/Foldable;
      12: aload         4
      14: invokevirtual #1159               // Method scalaz/OneAnd.tail:()Ljava/lang/Object;
      17: aload_3
      18: aload_2
      19: aload         4
      21: invokevirtual #1149               // Method scalaz/OneAnd.head:()Ljava/lang/Object;
      24: invokeinterface #1247,  3         // InterfaceMethod scala/Function2.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      29: aload_3
      30: invokeinterface #1249,  4         // InterfaceMethod scalaz/Foldable.foldLeft:(Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
      35: areturn

  public java.lang.Object foldRight(java.lang.Object, scala.Function0, scala.Function2);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore        4
       6: aload_3
       7: aload         4
       9: invokevirtual #1149               // Method scalaz/OneAnd.head:()Ljava/lang/Object;
      12: aload_0
      13: aload         4
      15: aload_2
      16: aload_3
      17: invokedynamic #1260,  0           // InvokeDynamic #1:apply:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;Lscala/Function0;Lscala/Function2;)Lscala/Function0;
      22: invokeinterface #1247,  3         // InterfaceMethod scala/Function2.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      27: areturn

  public java.lang.Object foldMap(java.lang.Object, scala.Function1, scalaz.Monoid);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore        4
       6: aload_3
       7: aload_2
       8: aload         4
      10: invokevirtual #1149               // Method scalaz/OneAnd.head:()Ljava/lang/Object;
      13: invokeinterface #1153,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      18: aload_0
      19: aload         4
      21: aload_2
      22: aload_3
      23: invokedynamic #1269,  0           // InvokeDynamic #2:apply:(Lscalaz/OneAndFoldable;Lscalaz/OneAnd;Lscala/Function1;Lscalaz/Monoid;)Lscala/Function0;
      28: invokeinterface #1275,  3         // InterfaceMethod scalaz/Monoid.append:(Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
      33: areturn

  public java.lang.Object foldMapLeft1(java.lang.Object, scala.Function1, scala.Function2);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore        4
       6: aload_0
       7: invokeinterface #1174,  1         // InterfaceMethod scalaz/OneAndFoldable.F:()Lscalaz/Foldable;
      12: aload         4
      14: invokevirtual #1159               // Method scalaz/OneAnd.tail:()Ljava/lang/Object;
      17: aload_2
      18: aload         4
      20: invokevirtual #1149               // Method scalaz/OneAnd.head:()Ljava/lang/Object;
      23: invokeinterface #1153,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      28: aload_3
      29: invokeinterface #1249,  4         // InterfaceMethod scalaz/Foldable.foldLeft:(Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
      34: areturn

  public java.lang.Object foldMapRight1(java.lang.Object, scala.Function1, scala.Function2);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore        4
       6: aload_0
       7: invokeinterface #1174,  1         // InterfaceMethod scalaz/OneAndFoldable.F:()Lscalaz/Foldable;
      12: aload         4
      14: invokevirtual #1159               // Method scalaz/OneAnd.tail:()Ljava/lang/Object;
      17: invokedynamic #1287,  0           // InvokeDynamic #3:apply:()Lscala/Function0;
      22: aload_3
      23: aload_2
      24: invokedynamic #1298,  0           // InvokeDynamic #4:apply:(Lscala/Function2;Lscala/Function1;)Lscala/Function2;
      29: invokeinterface #1300,  4         // InterfaceMethod scalaz/Foldable.foldRight:(Ljava/lang/Object;Lscala/Function0;Lscala/Function2;)Ljava/lang/Object;
      34: checkcast     #1302               // class scala/Option
      37: aload_3
      38: aload         4
      40: invokedynamic #1310,  0           // InvokeDynamic #5:apply:(Lscala/Function2;Lscalaz/OneAnd;)Lscala/Function1;
      45: invokevirtual #1313               // Method scala/Option.map:(Lscala/Function1;)Lscala/Option;
      48: aload_2
      49: aload         4
      51: invokedynamic #1321,  0           // InvokeDynamic #6:apply:(Lscala/Function1;Lscalaz/OneAnd;)Lscala/Function0;
      56: invokevirtual #1325               // Method scala/Option.getOrElse:(Lscala/Function0;)Ljava/lang/Object;
      59: areturn

  public java.lang.Object foldMap1(java.lang.Object, scala.Function1, scalaz.Semigroup);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore        4
       6: aload_0
       7: aload         4
       9: aload_2
      10: invokedynamic #1336,  0           // InvokeDynamic #7:apply:(Lscala/Function1;)Lscala/Function1;
      15: getstatic     #1341               // Field scalaz/std/option$.MODULE$:Lscalaz/std/option$;
      18: aload_3
      19: invokevirtual #1345               // Method scalaz/std/option$.optionMonoid:(Lscalaz/Semigroup;)Lscalaz/Monoid;
      22: invokeinterface #1347,  4         // InterfaceMethod scalaz/OneAndFoldable.foldMap:(Lscalaz/OneAnd;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
      27: checkcast     #1302               // class scala/Option
      30: aload_2
      31: aload         4
      33: invokedynamic #1352,  0           // InvokeDynamic #8:apply:(Lscala/Function1;Lscalaz/OneAnd;)Lscala/Function0;
      38: invokevirtual #1325               // Method scala/Option.getOrElse:(Lscala/Function0;)Ljava/lang/Object;
      41: areturn

  public scala.Option findRight(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore_3
       5: aload_0
       6: invokeinterface #1174,  1         // InterfaceMethod scalaz/OneAndFoldable.F:()Lscalaz/Foldable;
      11: aload_3
      12: invokevirtual #1159               // Method scalaz/OneAnd.tail:()Ljava/lang/Object;
      15: aload_2
      16: invokeinterface #1355,  3         // InterfaceMethod scalaz/Foldable.findRight:(Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
      21: astore        5
      23: aload         5
      25: instanceof    #1357               // class scala/Some
      28: ifeq          41
      31: aload         5
      33: checkcast     #1357               // class scala/Some
      36: astore        4
      38: goto          100
      41: getstatic     #1362               // Field scala/None$.MODULE$:Lscala/None$;
      44: aload         5
      46: invokevirtual #1365               // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      49: ifeq          90
      52: aload_2
      53: aload_3
      54: invokevirtual #1149               // Method scalaz/OneAnd.head:()Ljava/lang/Object;
      57: invokeinterface #1153,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      62: invokestatic  #1171               // Method scala/runtime/BoxesRunTime.unboxToBoolean:(Ljava/lang/Object;)Z
      65: ifeq          82
      68: new           #1357               // class scala/Some
      71: dup
      72: aload_3
      73: invokevirtual #1149               // Method scalaz/OneAnd.head:()Ljava/lang/Object;
      76: invokespecial #1368               // Method scala/Some."<init>":(Ljava/lang/Object;)V
      79: goto          85
      82: getstatic     #1362               // Field scala/None$.MODULE$:Lscala/None$;
      85: astore        4
      87: goto          100
      90: new           #1370               // class scala/MatchError
      93: dup
      94: aload         5
      96: invokespecial #1371               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      99: athrow
     100: aload         4
     102: areturn

  public scala.Option findLeft(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore_3
       5: aload_2
       6: aload_3
       7: invokevirtual #1149               // Method scalaz/OneAnd.head:()Ljava/lang/Object;
      10: invokeinterface #1153,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      15: invokestatic  #1171               // Method scala/runtime/BoxesRunTime.unboxToBoolean:(Ljava/lang/Object;)Z
      18: ifeq          33
      21: new           #1357               // class scala/Some
      24: dup
      25: aload_3
      26: invokevirtual #1149               // Method scalaz/OneAnd.head:()Ljava/lang/Object;
      29: invokespecial #1368               // Method scala/Some."<init>":(Ljava/lang/Object;)V
      32: areturn
      33: aload_0
      34: invokeinterface #1174,  1         // InterfaceMethod scalaz/OneAndFoldable.F:()Lscalaz/Foldable;
      39: aload_3
      40: invokevirtual #1159               // Method scalaz/OneAnd.tail:()Ljava/lang/Object;
      43: aload_2
      44: invokeinterface #1374,  3         // InterfaceMethod scalaz/Foldable.findLeft:(Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
      49: areturn

  public scalaz.IndexedStateT traverseS(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore_3
       5: getstatic     #1207               // Field scalaz/package$State$.MODULE$:Lscalaz/package$State$;
       8: aload_0
       9: aload_2
      10: aload_3
      11: invokedynamic #1383,  0           // InvokeDynamic #9:apply:(Lscalaz/OneAndTraverse;Lscala/Function1;Lscalaz/OneAnd;)Lscala/Function1;
      16: astore        4
      18: ifnonnull     23
      21: aconst_null
      22: athrow
      23: getstatic     #1232               // Field scalaz/package$StateT$.MODULE$:Lscalaz/package$StateT$;
      26: ifnonnull     31
      29: aconst_null
      30: athrow
      31: getstatic     #1237               // Field scalaz/IndexedStateT$.MODULE$:Lscalaz/IndexedStateT$;
      34: ifnonnull     39
      37: aconst_null
      38: athrow
      39: new           #40                 // class scalaz/IndexedStateT$Wrap
      42: dup
      43: aload         4
      45: invokespecial #1241               // Method scalaz/IndexedStateT$Wrap."<init>":(Lscala/Function1;)V
      48: areturn

  public java.lang.Object traverseImpl(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore        4
       6: aload_3
       7: aload_2
       8: aload         4
      10: invokedynamic #1390,  0           // InvokeDynamic #10:apply:(Lscala/Function1;Lscalaz/OneAnd;)Lscala/Function0;
      15: aload_0
      16: aload         4
      18: aload_2
      19: aload_3
      20: invokedynamic #1397,  0           // InvokeDynamic #11:apply:(Lscalaz/OneAndTraverse;Lscalaz/OneAnd;Lscala/Function1;Lscalaz/Applicative;)Lscala/Function0;
      25: invokedynamic #1405,  0           // InvokeDynamic #12:apply:()Lscala/Function2;
      30: invokeinterface #1411,  4         // InterfaceMethod scalaz/Applicative.apply2:(Lscala/Function0;Lscala/Function0;Lscala/Function2;)Ljava/lang/Object;
      35: areturn

  public java.lang.Object traverse1Impl(java.lang.Object, scala.Function1, scalaz.Apply);
    Code:
       0: aload_1
       1: checkcast     #1140               // class scalaz/OneAnd
       4: astore        4
       6: aload_3
       7: invokeinterface #1418,  1         // InterfaceMethod scalaz/Apply.applyApplicative:()Lscalaz/Applicative;
      12: aload         4
      14: invokevirtual #1159               // Method scalaz/OneAnd.tail:()Ljava/lang/Object;
      17: aload_2
      18: getstatic     #1423               // Field scalaz/$bslash$div$.MODULE$:Lscalaz/$bslash$div$;
      21: invokevirtual #1427               // Method scalaz/$bslash$div$.left:()Lscala/Function1;
      24: invokeinterface #1430,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      29: aload_0
      30: invokeinterface #1432,  1         // InterfaceMethod scalaz/OneAndTraverse.F:()Lscalaz/Traverse;
      35: invokeinterface #1435,  4         // InterfaceMethod scalaz/Applicative.traverse:(Ljava/lang/Object;Lscala/Function1;Lscalaz/Traverse;)Ljava/lang/Object;
      40: checkcast     #1437               // class scalaz/$bslash$div
      43: dup
      44: ifnonnull     49
      47: aconst_null
      48: athrow
      49: astore        5
      51: aload         5
      53: instanceof    #1439               // class scalaz/$minus$bslash$div
      56: ifeq          83
      59: aload         5
      61: checkcast     #1439               // class scalaz/$minus$bslash$div
      64: invokevirtual #1441               // Method scalaz/$minus$bslash$div.a:()Ljava/lang/Object;
      67: astore        7
      69: aload_3
      70: aload_2
      71: aload         4
      73: aload         7
      75: invokestatic  #1445               // InterfaceMethod scalaz/OneAndTraverse.$anonfun$traverse1Impl$1:(Lscalaz/Apply;Lscala/Function1;Lscalaz/OneAnd;Ljava/lang/Object;)Ljava/lang/Object;
      78: astore        6
      80: goto          125
      83: aload         5
      85: instanceof    #1447               // class scalaz/$bslash$div$minus
      88: ifeq          115
      91: aload         5
      93: checkcast     #1447               // class scalaz/$bslash$div$minus
      96: invokevirtual #1449               // Method scalaz/$bslash$div$minus.b:()Ljava/lang/Object;
      99: astore        8
     101: aload_3
     102: aload_2
     103: aload         4
     105: aload         8
     107: invokestatic  #1452               // InterfaceMethod scalaz/OneAndTraverse.$anonfun$traverse1Impl$5:(Lscalaz/Apply;Lscala/Function1;Lscalaz/OneAnd;Ljava/lang/Object;)Ljava/lang/Object;
     110: astore        6
     112: goto          125
     115: new           #1370               // class scala/MatchError
     118: dup
     119: aload         5
     121: invokespecial #1371               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     124: athrow
     125: aload         6
     127: areturn

  public scalaz.Functor F();
    Code:
       0: aload_0
       1: invokevirtual #1457               // Method F:()Lscalaz/Traverse;
       4: areturn

  public scalaz.Foldable F();
    Code:
       0: aload_0
       1: invokevirtual #1457               // Method F:()Lscalaz/Traverse;
       4: areturn

  public scalaz.OneAndInstances0$$anon$11(scalaz.OneAndInstances0, scalaz.Traverse);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #1135               // Field evidence$14$1:Lscalaz/Traverse;
       5: aload_0
       6: invokespecial #1462               // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #1466               // InterfaceMethod scalaz/InvariantFunctor.$init$:(Lscalaz/InvariantFunctor;)V
      13: aload_0
      14: invokestatic  #1469               // InterfaceMethod scalaz/Functor.$init$:(Lscalaz/Functor;)V
      17: aload_0
      18: invokestatic  #1472               // InterfaceMethod scalaz/Foldable.$init$:(Lscalaz/Foldable;)V
      21: aload_0
      22: invokestatic  #1475               // InterfaceMethod scalaz/Traverse.$init$:(Lscalaz/Traverse;)V
      25: aload_0
      26: invokestatic  #1478               // InterfaceMethod scalaz/Foldable1.$init$:(Lscalaz/Foldable1;)V
      29: aload_0
      30: invokestatic  #1481               // InterfaceMethod scalaz/Traverse1.$init$:(Lscalaz/Traverse1;)V
      33: aload_0
      34: invokestatic  #1484               // InterfaceMethod scalaz/OneAndFunctor.$init$:(Lscalaz/OneAndFunctor;)V
      37: aload_0
      38: invokestatic  #1487               // InterfaceMethod scalaz/OneAndFoldable.$init$:(Lscalaz/OneAndFoldable;)V
      41: aload_0
      42: invokestatic  #1490               // InterfaceMethod scalaz/OneAndTraverse.$init$:(Lscalaz/OneAndTraverse;)V
      45: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #1505,  0           // InvokeDynamic #13:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
