Compiled from "Leibniz.scala"
public final class scalaz.Leibniz$ extends scalaz.LeibnizInstances {
  public static scalaz.Leibniz$ MODULE$;

  public static {};
    Code:
       0: new           #2                  // class scalaz/Leibniz$
       3: invokespecial #21                 // Method "<init>":()V
       6: return

  public <A> scalaz.Leibniz<A, A, A, A> refl();
    Code:
       0: new           #12                 // class scalaz/Leibniz$$anon$2
       3: dup
       4: invokespecial #25                 // Method scalaz/Leibniz$$anon$2."<init>":()V
       7: areturn

  public <A, B> scala.Function1<A, B> witness(scalaz.Leibniz<scala.runtime.Nothing$, java.lang.Object, A, B>);
    Code:
       0: aload_1
       1: invokedynamic #51,  0             // InvokeDynamic #0:apply:()Lscala/Function1;
       6: invokevirtual #56                 // Method scalaz/Leibniz.subst:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #58                 // class scala/Function1
      12: areturn

  public <A, B> B subst(A, scalaz.Leibniz<scala.runtime.Nothing$, java.lang.Object, A, B>);
    Code:
       0: aload_2
       1: aload_1
       2: invokevirtual #56                 // Method scalaz/Leibniz.subst:(Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <L, H, A extends H, B extends H, C extends H> scalaz.Leibniz<L, H, A, C> trans(scalaz.Leibniz<L, H, B, C>, scalaz.Leibniz<L, H, A, B>);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #56                 // Method scalaz/Leibniz.subst:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #53                 // class scalaz/Leibniz
       8: areturn

  public <L, H, A extends H, B extends H> scalaz.Leibniz<L, H, B, A> symm(scalaz.Leibniz<L, H, A, B>);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #72                 // Method refl:()Lscalaz/Leibniz;
       5: invokevirtual #56                 // Method scalaz/Leibniz.subst:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #53                 // class scalaz/Leibniz
      11: areturn

  public <LA, LT, HA, HT, T extends HT, A extends HA, A2 extends HA> scalaz.Leibniz<LT, HT, T, T> lift(scalaz.Leibniz<LA, HA, A, A2>);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #72                 // Method refl:()Lscalaz/Leibniz;
       5: invokevirtual #56                 // Method scalaz/Leibniz.subst:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #53                 // class scalaz/Leibniz
      11: areturn

  public <LA, LB, LT, HA, HB, HT, T extends HT, A extends HA, A2 extends HA, B extends HB, B2 extends HB> scalaz.Leibniz<LT, HT, T, T> lift2(scalaz.Leibniz<LA, HA, A, A2>, scalaz.Leibniz<LB, HB, B, B2>);
    Code:
       0: aload_2
       1: aload_1
       2: aload_0
       3: invokevirtual #72                 // Method refl:()Lscalaz/Leibniz;
       6: invokevirtual #56                 // Method scalaz/Leibniz.subst:(Ljava/lang/Object;)Ljava/lang/Object;
       9: invokevirtual #56                 // Method scalaz/Leibniz.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      12: checkcast     #53                 // class scalaz/Leibniz
      15: areturn

  public <LA, LB, LC, LT, HA, HB, HC, HT, T extends HT, A extends HA, A2 extends HA, B extends HB, B2 extends HB, C extends HC, C2 extends HC> scalaz.Leibniz<LT, HT, T, T> lift3(scalaz.Leibniz<LA, HA, A, A2>, scalaz.Leibniz<LB, HB, B, B2>, scalaz.Leibniz<LC, HC, C, C2>);
    Code:
       0: aload_3
       1: aload_2
       2: aload_1
       3: aload_0
       4: invokevirtual #72                 // Method refl:()Lscalaz/Leibniz;
       7: invokevirtual #56                 // Method scalaz/Leibniz.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      10: invokevirtual #56                 // Method scalaz/Leibniz.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      13: invokevirtual #56                 // Method scalaz/Leibniz.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #53                 // class scalaz/Leibniz
      19: areturn

  public <L, H, A extends H, B extends H> scalaz.Leibniz<L, H, A, B> force();
    Code:
       0: new           #14                 // class scalaz/Leibniz$$anon$3
       3: dup
       4: invokespecial #84                 // Method scalaz/Leibniz$$anon$3."<init>":()V
       7: areturn

  public <LA, HA, T, A extends HA, A2 extends HA> scalaz.Leibniz<LA, HA, A, A2> lower(scalaz.Leibniz<scala.runtime.Nothing$, java.lang.Object, T, T>);
    Code:
       0: aload_0
       1: invokevirtual #89                 // Method force:()Lscalaz/Leibniz;
       4: areturn

  public <LA, HA, LB, HB, T, A extends HA, A2 extends HA, B extends HB, B2 extends HB> scala.Tuple2<scalaz.Leibniz<LA, HA, A, A2>, scalaz.Leibniz<LB, HB, B, B2>> lower2(scalaz.Leibniz<scala.runtime.Nothing$, java.lang.Object, T, T>);
    Code:
       0: new           #94                 // class scala/Tuple2
       3: dup
       4: aload_0
       5: invokevirtual #89                 // Method force:()Lscalaz/Leibniz;
       8: aload_0
       9: invokevirtual #89                 // Method force:()Lscalaz/Leibniz;
      12: invokespecial #97                 // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      15: areturn

  public static final java.lang.Object $anonfun$witness$1(java.lang.Object);
    Code:
       0: getstatic     #103                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: invokevirtual #106                // Method scala/Predef$.identity:(Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  private scalaz.Leibniz$();
    Code:
       0: aload_0
       1: invokespecial #107                // Method scalaz/LeibnizInstances."<init>":()V
       4: aload_0
       5: putstatic     #109                // Field MODULE$:Lscalaz/Leibniz$;
       8: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #121,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
