Compiled from "OneAnd.scala"
public interface scalaz.OneAndFunctor<F> extends scalaz.Functor<?> {
  public abstract scalaz.Functor<F> F();

  public static scalaz.OneAnd map$(scalaz.OneAndFunctor, scalaz.OneAnd, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #23                 // InterfaceMethod map:(Lscalaz/OneAnd;Lscala/Function1;)Lscalaz/OneAnd;
       6: areturn

  public default <A, B> scalaz.OneAnd<F, B> map(scalaz.OneAnd<F, A>, scala.Function1<A, B>);
    Code:
       0: getstatic     #33                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_2
       4: aload_1
       5: invokevirtual #39                 // Method scalaz/OneAnd.head:()Ljava/lang/Object;
       8: invokeinterface #45,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      13: aload_0
      14: invokeinterface #47,  1           // InterfaceMethod F:()Lscalaz/Functor;
      19: aload_1
      20: invokevirtual #50                 // Method scalaz/OneAnd.tail:()Ljava/lang/Object;
      23: aload_2
      24: invokeinterface #53,  3           // InterfaceMethod scalaz/Functor.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      29: invokevirtual #56                 // Method scalaz/OneAnd$.apply:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/OneAnd;
      32: areturn

  public static void $init$(scalaz.OneAndFunctor);
    Code:
       0: return
}
