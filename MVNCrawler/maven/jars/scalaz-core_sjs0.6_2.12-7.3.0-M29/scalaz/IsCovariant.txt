Compiled from "IsCovariant.scala"
public interface scalaz.IsCovariant<F> {
  public static <F> scalaz.IsCovariant<F> force();
    Code:
       0: getstatic     #20                 // Field scalaz/IsCovariant$.MODULE$:Lscalaz/IsCovariant$;
       3: invokevirtual #22                 // Method scalaz/IsCovariant$.force:()Lscalaz/IsCovariant;
       6: areturn

  public static <F> scalaz.IsCovariant<F> scalaCovariant();
    Code:
       0: getstatic     #20                 // Field scalaz/IsCovariant$.MODULE$:Lscalaz/IsCovariant$;
       3: invokevirtual #25                 // Method scalaz/IsCovariant$.scalaCovariant:()Lscalaz/IsCovariant;
       6: areturn

  public static <F> scalaz.IsCovariant<F> apply(scalaz.IsCovariant<F>);
    Code:
       0: getstatic     #20                 // Field scalaz/IsCovariant$.MODULE$:Lscalaz/IsCovariant$;
       3: ifnonnull     8
       6: aconst_null
       7: athrow
       8: aload_0
       9: areturn

  public abstract void scalaz$IsCovariant$_setter_$isCovariantSyntax_$eq(scalaz.syntax.IsCovariantSyntax<F>);

  public abstract <A, B> scalaz.Liskov<F, F> liftLiskovCo(scalaz.Liskov<A, B>);

  public static java.lang.Object substCo$(scalaz.IsCovariant, java.lang.Object, scalaz.Liskov);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #45                 // InterfaceMethod substCo:(Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public default <G, A, B> G substCo(G, scalaz.Liskov<A, B>);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #51,  2           // InterfaceMethod liftLiskovCo:(Lscalaz/Liskov;)Lscalaz/Liskov;
       7: aload_1
       8: invokevirtual #56                 // Method scalaz/Liskov.substCo:(Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public static java.lang.Object substCt$(scalaz.IsCovariant, java.lang.Object, scalaz.Liskov);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #61                 // InterfaceMethod substCt:(Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public default <G, A, B> G substCt(G, scalaz.Liskov<A, B>);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #51,  2           // InterfaceMethod liftLiskovCo:(Lscalaz/Liskov;)Lscalaz/Liskov;
       7: aload_1
       8: invokevirtual #63                 // Method scalaz/Liskov.substCt:(Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public static java.lang.Object widen$(scalaz.IsCovariant, java.lang.Object, scalaz.Liskov);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #68                 // InterfaceMethod widen:(Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public default <A, B> F widen(F, scalaz.Liskov<A, B>);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #51,  2           // InterfaceMethod liftLiskovCo:(Lscalaz/Liskov;)Lscalaz/Liskov;
       7: aload_1
       8: invokevirtual #71                 // Method scalaz/Liskov.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public abstract scalaz.syntax.IsCovariantSyntax<F> isCovariantSyntax();

  public static void $init$(scalaz.IsCovariant);
    Code:
       0: aload_0
       1: new           #11                 // class scalaz/IsCovariant$$anon$1
       4: dup
       5: aload_0
       6: invokespecial #79                 // Method scalaz/IsCovariant$$anon$1."<init>":(Lscalaz/IsCovariant;)V
       9: invokeinterface #81,  2           // InterfaceMethod scalaz$IsCovariant$_setter_$isCovariantSyntax_$eq:(Lscalaz/syntax/IsCovariantSyntax;)V
      14: return
}
