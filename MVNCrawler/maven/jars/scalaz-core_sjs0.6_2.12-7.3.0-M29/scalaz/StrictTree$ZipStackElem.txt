Compiled from "StrictTree.scala"
public class scalaz.StrictTree$ZipStackElem<A, B> implements scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>>, scala.Product, scala.Serializable {
  private final scala.Option<scalaz.StrictTree$ZipStackElem<A, B>> parent;

  private final scalaz.StrictTree<A> a;

  private final scalaz.StrictTree<B> b;

  private final scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> zippedSubIterator;

  private final scala.collection.mutable.Buffer<scalaz.StrictTree<scala.Tuple2<A, B>>> mappedSubForest;

  public scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> seq();
    Code:
       0: aload_0
       1: invokestatic  #44                 // InterfaceMethod scala/collection/Iterator.seq$:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokestatic  #52                 // InterfaceMethod scala/collection/Iterator.isEmpty$:(Lscala/collection/Iterator;)Z
       4: ireturn

  public boolean isTraversableAgain();
    Code:
       0: aload_0
       1: invokestatic  #56                 // InterfaceMethod scala/collection/Iterator.isTraversableAgain$:(Lscala/collection/Iterator;)Z
       4: ireturn

  public boolean hasDefiniteSize();
    Code:
       0: aload_0
       1: invokestatic  #60                 // InterfaceMethod scala/collection/Iterator.hasDefiniteSize$:(Lscala/collection/Iterator;)Z
       4: ireturn

  public scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> take(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #68                 // InterfaceMethod scala/collection/Iterator.take$:(Lscala/collection/Iterator;I)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> drop(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #73                 // InterfaceMethod scala/collection/Iterator.drop$:(Lscala/collection/Iterator;I)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> slice(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #82                 // InterfaceMethod scala/collection/Iterator.slice$:(Lscala/collection/Iterator;II)Lscala/collection/Iterator;
       6: areturn

  public scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> sliceIterator(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #86                 // InterfaceMethod scala/collection/Iterator.sliceIterator$:(Lscala/collection/Iterator;II)Lscala/collection/Iterator;
       6: areturn

  public <B> scala.collection.Iterator<B> map(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #94                 // InterfaceMethod scala/collection/Iterator.map$:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> $plus$plus(scala.Function0<scala.collection.GenTraversableOnce<B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #103                // InterfaceMethod scala/collection/Iterator.$plus$plus$:(Lscala/collection/Iterator;Lscala/Function0;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> flatMap(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, scala.collection.GenTraversableOnce<B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #109                // InterfaceMethod scala/collection/Iterator.flatMap$:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> filter(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #115                // InterfaceMethod scala/collection/Iterator.filter$:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> boolean corresponds(scala.collection.GenTraversableOnce<B>, scala.Function2<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #122                // InterfaceMethod scala/collection/Iterator.corresponds$:(Lscala/collection/Iterator;Lscala/collection/GenTraversableOnce;Lscala/Function2;)Z
       6: ireturn

  public scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> withFilter(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #128                // InterfaceMethod scala/collection/Iterator.withFilter$:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> filterNot(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #132                // InterfaceMethod scala/collection/Iterator.filterNot$:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> collect(scala.PartialFunction<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #140                // InterfaceMethod scala/collection/Iterator.collect$:(Lscala/collection/Iterator;Lscala/PartialFunction;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<B> scanLeft(B, scala.Function2<B, scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #150                // InterfaceMethod scala/collection/Iterator.scanLeft$:(Lscala/collection/Iterator;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/Iterator;
       6: areturn

  public <B> scala.collection.Iterator<B> scanRight(B, scala.Function2<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #156                // InterfaceMethod scala/collection/Iterator.scanRight$:(Lscala/collection/Iterator;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/Iterator;
       6: areturn

  public scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> takeWhile(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #160                // InterfaceMethod scala/collection/Iterator.takeWhile$:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public scala.Tuple2<scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>>, scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>>> partition(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #167                // InterfaceMethod scala/collection/Iterator.partition$:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Tuple2;
       5: areturn

  public scala.Tuple2<scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>>, scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>>> span(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #171                // InterfaceMethod scala/collection/Iterator.span$:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Tuple2;
       5: areturn

  public scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> dropWhile(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #175                // InterfaceMethod scala/collection/Iterator.dropWhile$:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/collection/Iterator;
       5: areturn

  public <B> scala.collection.Iterator<scala.Tuple2<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B>> zip(scala.collection.Iterator<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #181                // InterfaceMethod scala/collection/Iterator.zip$:(Lscala/collection/Iterator;Lscala/collection/Iterator;)Lscala/collection/Iterator;
       5: areturn

  public <A1> scala.collection.Iterator<A1> padTo(int, A1);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #190                // InterfaceMethod scala/collection/Iterator.padTo$:(Lscala/collection/Iterator;ILjava/lang/Object;)Lscala/collection/Iterator;
       6: areturn

  public scala.collection.Iterator<scala.Tuple2<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, java.lang.Object>> zipWithIndex();
    Code:
       0: aload_0
       1: invokestatic  #195                // InterfaceMethod scala/collection/Iterator.zipWithIndex$:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public <B, A1, B1> scala.collection.Iterator<scala.Tuple2<A1, B1>> zipAll(scala.collection.Iterator<B>, A1, B1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #204                // InterfaceMethod scala/collection/Iterator.zipAll$:(Lscala/collection/Iterator;Lscala/collection/Iterator;Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/Iterator;
       7: areturn

  public <U> void foreach(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #211                // InterfaceMethod scala/collection/Iterator.foreach$:(Lscala/collection/Iterator;Lscala/Function1;)V
       5: return

  public boolean forall(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #218                // InterfaceMethod scala/collection/Iterator.forall$:(Lscala/collection/Iterator;Lscala/Function1;)Z
       5: ireturn

  public boolean exists(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #222                // InterfaceMethod scala/collection/Iterator.exists$:(Lscala/collection/Iterator;Lscala/Function1;)Z
       5: ireturn

  public boolean contains(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #228                // InterfaceMethod scala/collection/Iterator.contains$:(Lscala/collection/Iterator;Ljava/lang/Object;)Z
       5: ireturn

  public scala.Option<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> find(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #235                // InterfaceMethod scala/collection/Iterator.find$:(Lscala/collection/Iterator;Lscala/Function1;)Lscala/Option;
       5: areturn

  public int indexWhere(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #242                // InterfaceMethod scala/collection/Iterator.indexWhere$:(Lscala/collection/Iterator;Lscala/Function1;)I
       5: ireturn

  public int indexWhere(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, java.lang.Object>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #247                // InterfaceMethod scala/collection/Iterator.indexWhere$:(Lscala/collection/Iterator;Lscala/Function1;I)I
       6: ireturn

  public <B> int indexOf(B);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #254                // InterfaceMethod scala/collection/Iterator.indexOf$:(Lscala/collection/Iterator;Ljava/lang/Object;)I
       5: ireturn

  public <B> int indexOf(B, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #259                // InterfaceMethod scala/collection/Iterator.indexOf$:(Lscala/collection/Iterator;Ljava/lang/Object;I)I
       6: ireturn

  public scala.collection.BufferedIterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> buffered();
    Code:
       0: aload_0
       1: invokestatic  #266                // InterfaceMethod scala/collection/Iterator.buffered$:(Lscala/collection/Iterator;)Lscala/collection/BufferedIterator;
       4: areturn

  public <B> scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>>.GroupedIterator<B> grouped(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #274                // InterfaceMethod scala/collection/Iterator.grouped$:(Lscala/collection/Iterator;I)Lscala/collection/Iterator$GroupedIterator;
       5: areturn

  public <B> scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>>.GroupedIterator<B> sliding(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #282                // InterfaceMethod scala/collection/Iterator.sliding$:(Lscala/collection/Iterator;II)Lscala/collection/Iterator$GroupedIterator;
       6: areturn

  public <B> int sliding$default$2();
    Code:
       0: aload_0
       1: invokestatic  #289                // InterfaceMethod scala/collection/Iterator.sliding$default$2$:(Lscala/collection/Iterator;)I
       4: ireturn

  public int length();
    Code:
       0: aload_0
       1: invokestatic  #293                // InterfaceMethod scala/collection/Iterator.length$:(Lscala/collection/Iterator;)I
       4: ireturn

  public scala.Tuple2<scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>>, scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>>> duplicate();
    Code:
       0: aload_0
       1: invokestatic  #300                // InterfaceMethod scala/collection/Iterator.duplicate$:(Lscala/collection/Iterator;)Lscala/Tuple2;
       4: areturn

  public <B> scala.collection.Iterator<B> patch(int, scala.collection.Iterator<B>, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: invokestatic  #309                // InterfaceMethod scala/collection/Iterator.patch$:(Lscala/collection/Iterator;ILscala/collection/Iterator;I)Lscala/collection/Iterator;
       7: areturn

  public <B> void copyToArray(java.lang.Object, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokestatic  #318                // InterfaceMethod scala/collection/Iterator.copyToArray$:(Lscala/collection/Iterator;Ljava/lang/Object;II)V
       7: return

  public boolean sameElements(scala.collection.Iterator<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #324                // InterfaceMethod scala/collection/Iterator.sameElements$:(Lscala/collection/Iterator;Lscala/collection/Iterator;)Z
       5: ireturn

  public scala.collection.Traversable<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> toTraversable();
    Code:
       0: aload_0
       1: invokestatic  #331                // InterfaceMethod scala/collection/Iterator.toTraversable$:(Lscala/collection/Iterator;)Lscala/collection/Traversable;
       4: areturn

  public scala.collection.Iterator<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> toIterator();
    Code:
       0: aload_0
       1: invokestatic  #335                // InterfaceMethod scala/collection/Iterator.toIterator$:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
       4: areturn

  public scala.collection.immutable.Stream<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> toStream();
    Code:
       0: aload_0
       1: invokestatic  #342                // InterfaceMethod scala/collection/Iterator.toStream$:(Lscala/collection/Iterator;)Lscala/collection/immutable/Stream;
       4: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #348                // InterfaceMethod scala/collection/Iterator.toString$:(Lscala/collection/Iterator;)Ljava/lang/String;
       4: areturn

  public scala.collection.immutable.List<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> reversed();
    Code:
       0: aload_0
       1: invokestatic  #357                // InterfaceMethod scala/collection/TraversableOnce.reversed$:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;
       4: areturn

  public int size();
    Code:
       0: aload_0
       1: invokestatic  #361                // InterfaceMethod scala/collection/TraversableOnce.size$:(Lscala/collection/TraversableOnce;)I
       4: ireturn

  public boolean nonEmpty();
    Code:
       0: aload_0
       1: invokestatic  #366                // InterfaceMethod scala/collection/TraversableOnce.nonEmpty$:(Lscala/collection/TraversableOnce;)Z
       4: ireturn

  public int count(scala.Function1<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #371                // InterfaceMethod scala/collection/TraversableOnce.count$:(Lscala/collection/TraversableOnce;Lscala/Function1;)I
       5: ireturn

  public <B> scala.Option<B> collectFirst(scala.PartialFunction<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #378                // InterfaceMethod scala/collection/TraversableOnce.collectFirst$:(Lscala/collection/TraversableOnce;Lscala/PartialFunction;)Lscala/Option;
       5: areturn

  public <B> B $div$colon(B, scala.Function2<B, scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #385                // InterfaceMethod scala/collection/TraversableOnce.$div$colon$:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B $colon$bslash(B, scala.Function2<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #390                // InterfaceMethod scala/collection/TraversableOnce.$colon$bslash$:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B foldLeft(B, scala.Function2<B, scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #394                // InterfaceMethod scala/collection/TraversableOnce.foldLeft$:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B foldRight(B, scala.Function2<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #398                // InterfaceMethod scala/collection/TraversableOnce.foldRight$:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B reduceLeft(scala.Function2<B, scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #405                // InterfaceMethod scala/collection/TraversableOnce.reduceLeft$:(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <B> B reduceRight(scala.Function2<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #410                // InterfaceMethod scala/collection/TraversableOnce.reduceRight$:(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <B> scala.Option<B> reduceLeftOption(scala.Function2<B, scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #417                // InterfaceMethod scala/collection/TraversableOnce.reduceLeftOption$:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <B> scala.Option<B> reduceRightOption(scala.Function2<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #422                // InterfaceMethod scala/collection/TraversableOnce.reduceRightOption$:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <A1> A1 reduce(scala.Function2<A1, A1, A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #427                // InterfaceMethod scala/collection/TraversableOnce.reduce$:(Lscala/collection/TraversableOnce;Lscala/Function2;)Ljava/lang/Object;
       5: areturn

  public <A1> scala.Option<A1> reduceOption(scala.Function2<A1, A1, A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #432                // InterfaceMethod scala/collection/TraversableOnce.reduceOption$:(Lscala/collection/TraversableOnce;Lscala/Function2;)Lscala/Option;
       5: areturn

  public <A1> A1 fold(A1, scala.Function2<A1, A1, A1>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #437                // InterfaceMethod scala/collection/TraversableOnce.fold$:(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       6: areturn

  public <B> B aggregate(scala.Function0<B>, scala.Function2<B, scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, B>, scala.Function2<B, B, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #446                // InterfaceMethod scala/collection/TraversableOnce.aggregate$:(Lscala/collection/TraversableOnce;Lscala/Function0;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public <B> B sum(scala.math.Numeric<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #454                // InterfaceMethod scala/collection/TraversableOnce.sum$:(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;
       5: areturn

  public <B> B product(scala.math.Numeric<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #459                // InterfaceMethod scala/collection/TraversableOnce.product$:(Lscala/collection/TraversableOnce;Lscala/math/Numeric;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object min(scala.math.Ordering);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #466                // InterfaceMethod scala/collection/TraversableOnce.min$:(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object max(scala.math.Ordering);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #471                // InterfaceMethod scala/collection/TraversableOnce.max$:(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object maxBy(scala.Function1, scala.math.Ordering);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #477                // InterfaceMethod scala/collection/TraversableOnce.maxBy$:(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object minBy(scala.Function1, scala.math.Ordering);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #481                // InterfaceMethod scala/collection/TraversableOnce.minBy$:(Lscala/collection/TraversableOnce;Lscala/Function1;Lscala/math/Ordering;)Ljava/lang/Object;
       6: areturn

  public <B> void copyToBuffer(scala.collection.mutable.Buffer<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #489                // InterfaceMethod scala/collection/TraversableOnce.copyToBuffer$:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)V
       5: return

  public <B> void copyToArray(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #494                // InterfaceMethod scala/collection/TraversableOnce.copyToArray$:(Lscala/collection/TraversableOnce;Ljava/lang/Object;I)V
       6: return

  public <B> void copyToArray(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #499                // InterfaceMethod scala/collection/TraversableOnce.copyToArray$:(Lscala/collection/TraversableOnce;Ljava/lang/Object;)V
       5: return

  public <B> java.lang.Object toArray(scala.reflect.ClassTag<B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #507                // InterfaceMethod scala/collection/TraversableOnce.toArray$:(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;)Ljava/lang/Object;
       5: areturn

  public scala.collection.immutable.List<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> toList();
    Code:
       0: aload_0
       1: invokestatic  #512                // InterfaceMethod scala/collection/TraversableOnce.toList$:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/List;
       4: areturn

  public scala.collection.Iterable<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> toIterable();
    Code:
       0: aload_0
       1: invokestatic  #519                // InterfaceMethod scala/collection/TraversableOnce.toIterable$:(Lscala/collection/TraversableOnce;)Lscala/collection/Iterable;
       4: areturn

  public scala.collection.Seq<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> toSeq();
    Code:
       0: aload_0
       1: invokestatic  #526                // InterfaceMethod scala/collection/TraversableOnce.toSeq$:(Lscala/collection/TraversableOnce;)Lscala/collection/Seq;
       4: areturn

  public scala.collection.immutable.IndexedSeq<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> toIndexedSeq();
    Code:
       0: aload_0
       1: invokestatic  #533                // InterfaceMethod scala/collection/TraversableOnce.toIndexedSeq$:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/IndexedSeq;
       4: areturn

  public <B> scala.collection.mutable.Buffer<B> toBuffer();
    Code:
       0: aload_0
       1: invokestatic  #540                // InterfaceMethod scala/collection/TraversableOnce.toBuffer$:(Lscala/collection/TraversableOnce;)Lscala/collection/mutable/Buffer;
       4: areturn

  public <B> scala.collection.immutable.Set<B> toSet();
    Code:
       0: aload_0
       1: invokestatic  #547                // InterfaceMethod scala/collection/TraversableOnce.toSet$:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Set;
       4: areturn

  public scala.collection.immutable.Vector<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>> toVector();
    Code:
       0: aload_0
       1: invokestatic  #554                // InterfaceMethod scala/collection/TraversableOnce.toVector$:(Lscala/collection/TraversableOnce;)Lscala/collection/immutable/Vector;
       4: areturn

  public <Col> Col to(scala.collection.generic.CanBuildFrom<scala.runtime.Nothing$, scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, Col>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #562                // InterfaceMethod scala/collection/TraversableOnce.to$:(Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
       5: areturn

  public <T, U> scala.collection.immutable.Map<T, U> toMap(scala.Predef$$less$colon$less<scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>>, scala.Tuple2<T, U>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #571                // InterfaceMethod scala/collection/TraversableOnce.toMap$:(Lscala/collection/TraversableOnce;Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;
       5: areturn

  public java.lang.String mkString(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #580                // InterfaceMethod scala/collection/TraversableOnce.mkString$:(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: areturn

  public java.lang.String mkString(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #585                // InterfaceMethod scala/collection/TraversableOnce.mkString$:(Lscala/collection/TraversableOnce;Ljava/lang/String;)Ljava/lang/String;
       5: areturn

  public java.lang.String mkString();
    Code:
       0: aload_0
       1: invokestatic  #588                // InterfaceMethod scala/collection/TraversableOnce.mkString$:(Lscala/collection/TraversableOnce;)Ljava/lang/String;
       4: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder, java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #594                // InterfaceMethod scala/collection/TraversableOnce.addString$:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;
       9: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #599                // InterfaceMethod scala/collection/TraversableOnce.addString$:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;)Lscala/collection/mutable/StringBuilder;
       6: areturn

  public scala.collection.mutable.StringBuilder addString(scala.collection.mutable.StringBuilder);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #603                // InterfaceMethod scala/collection/TraversableOnce.addString$:(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;)Lscala/collection/mutable/StringBuilder;
       5: areturn

  public int sizeHintIfCheap();
    Code:
       0: aload_0
       1: invokestatic  #610                // InterfaceMethod scala/collection/GenTraversableOnce.sizeHintIfCheap$:(Lscala/collection/GenTraversableOnce;)I
       4: ireturn

  public scala.Option<scalaz.StrictTree$ZipStackElem<A, B>> parent();
    Code:
       0: aload_0
       1: getfield      #614                // Field parent:Lscala/Option;
       4: areturn

  public scalaz.StrictTree<A> a();
    Code:
       0: aload_0
       1: getfield      #618                // Field a:Lscalaz/StrictTree;
       4: areturn

  public scalaz.StrictTree<B> b();
    Code:
       0: aload_0
       1: getfield      #621                // Field b:Lscalaz/StrictTree;
       4: areturn

  public scala.collection.mutable.Buffer<scalaz.StrictTree<scala.Tuple2<A, B>>> mappedSubForest();
    Code:
       0: aload_0
       1: getfield      #624                // Field mappedSubForest:Lscala/collection/mutable/Buffer;
       4: areturn

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #627                // Field zippedSubIterator:Lscala/collection/Iterator;
       4: invokeinterface #629,  1          // InterfaceMethod scala/collection/Iterator.hasNext:()Z
       9: ireturn

  public scala.Tuple2<scalaz.StrictTree<A>, scalaz.StrictTree<B>> next();
    Code:
       0: aload_0
       1: getfield      #627                // Field zippedSubIterator:Lscala/collection/Iterator;
       4: invokeinterface #634,  1          // InterfaceMethod scala/collection/Iterator.next:()Ljava/lang/Object;
       9: checkcast     #636                // class scala/Tuple2
      12: areturn

  public <A, B> scalaz.StrictTree$ZipStackElem<A, B> copy(scala.Option<scalaz.StrictTree$ZipStackElem<A, B>>, scalaz.StrictTree<A>, scalaz.StrictTree<B>);
    Code:
       0: new           #2                  // class scalaz/StrictTree$ZipStackElem
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokespecial #643                // Method "<init>":(Lscala/Option;Lscalaz/StrictTree;Lscalaz/StrictTree;)V
      10: areturn

  public <A, B> scala.Option<scalaz.StrictTree$ZipStackElem<A, B>> copy$default$1();
    Code:
       0: aload_0
       1: invokevirtual #647                // Method parent:()Lscala/Option;
       4: areturn

  public <A, B> scalaz.StrictTree<A> copy$default$2();
    Code:
       0: aload_0
       1: invokevirtual #651                // Method a:()Lscalaz/StrictTree;
       4: areturn

  public <A, B> scalaz.StrictTree<B> copy$default$3();
    Code:
       0: aload_0
       1: invokevirtual #655                // Method b:()Lscalaz/StrictTree;
       4: areturn

  public java.lang.String productPrefix();
    Code:
       0: ldc_w         #657                // String ZipStackElem
       3: areturn

  public int productArity();
    Code:
       0: iconst_3
       1: ireturn

  public java.lang.Object productElement(int);
    Code:
       0: iload_1
       1: tableswitch   { // 0 to 2
                     0: 28
                     1: 33
                     2: 38
               default: 43
          }
      28: aload_0
      29: invokevirtual #647                // Method parent:()Lscala/Option;
      32: areturn
      33: aload_0
      34: invokevirtual #651                // Method a:()Lscalaz/StrictTree;
      37: areturn
      38: aload_0
      39: invokevirtual #655                // Method b:()Lscalaz/StrictTree;
      42: areturn
      43: new           #663                // class java/lang/IndexOutOfBoundsException
      46: dup
      47: iload_1
      48: invokestatic  #669                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      51: invokevirtual #671                // Method java/lang/Object.toString:()Ljava/lang/String;
      54: invokespecial #674                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      57: athrow

  public scala.collection.Iterator<java.lang.Object> productIterator();
    Code:
       0: getstatic     #682                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #686                // Method scala/runtime/ScalaRunTime$.typedProductIterator:(Lscala/Product;)Lscala/collection/Iterator;
       7: areturn

  public boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class scalaz/StrictTree$ZipStackElem
       4: ireturn

  public int hashCode();
    Code:
       0: getstatic     #682                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #692                // Method scala/runtime/ScalaRunTime$._hashCode:(Lscala/Product;)I
       7: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     137
       5: aload_1
       6: instanceof    #2                  // class scalaz/StrictTree$ZipStackElem
       9: ifeq          17
      12: iconst_1
      13: istore_2
      14: goto          19
      17: iconst_0
      18: istore_2
      19: iload_2
      20: ifeq          139
      23: aload_1
      24: checkcast     #2                  // class scalaz/StrictTree$ZipStackElem
      27: astore_3
      28: aload_0
      29: invokevirtual #647                // Method parent:()Lscala/Option;
      32: aload_3
      33: invokevirtual #647                // Method parent:()Lscala/Option;
      36: astore        4
      38: dup
      39: ifnonnull     51
      42: pop
      43: aload         4
      45: ifnull        59
      48: goto          133
      51: aload         4
      53: invokevirtual #695                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      56: ifeq          133
      59: aload_0
      60: invokevirtual #651                // Method a:()Lscalaz/StrictTree;
      63: aload_3
      64: invokevirtual #651                // Method a:()Lscalaz/StrictTree;
      67: astore        5
      69: dup
      70: ifnonnull     82
      73: pop
      74: aload         5
      76: ifnull        90
      79: goto          133
      82: aload         5
      84: invokevirtual #695                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      87: ifeq          133
      90: aload_0
      91: invokevirtual #655                // Method b:()Lscalaz/StrictTree;
      94: aload_3
      95: invokevirtual #655                // Method b:()Lscalaz/StrictTree;
      98: astore        6
     100: dup
     101: ifnonnull     113
     104: pop
     105: aload         6
     107: ifnull        121
     110: goto          133
     113: aload         6
     115: invokevirtual #695                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     118: ifeq          133
     121: aload_3
     122: aload_0
     123: invokevirtual #697                // Method canEqual:(Ljava/lang/Object;)Z
     126: ifeq          133
     129: iconst_1
     130: goto          134
     133: iconst_0
     134: ifeq          139
     137: iconst_1
     138: ireturn
     139: iconst_0
     140: ireturn

  public scala.collection.GenMap toMap(scala.Predef$$less$colon$less);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #702                // Method toMap:(Lscala/Predef$$less$colon$less;)Lscala/collection/immutable/Map;
       5: areturn

  public scala.collection.GenSet toSet();
    Code:
       0: aload_0
       1: invokevirtual #705                // Method toSet:()Lscala/collection/immutable/Set;
       4: areturn

  public scala.collection.GenSeq toSeq();
    Code:
       0: aload_0
       1: invokevirtual #708                // Method toSeq:()Lscala/collection/Seq;
       4: areturn

  public scala.collection.GenIterable toIterable();
    Code:
       0: aload_0
       1: invokevirtual #711                // Method toIterable:()Lscala/collection/Iterable;
       4: areturn

  public scala.collection.GenTraversable toTraversable();
    Code:
       0: aload_0
       1: invokevirtual #714                // Method toTraversable:()Lscala/collection/Traversable;
       4: areturn

  public scala.collection.TraversableOnce seq();
    Code:
       0: aload_0
       1: invokevirtual #717                // Method seq:()Lscala/collection/Iterator;
       4: areturn

  public java.lang.Object next();
    Code:
       0: aload_0
       1: invokevirtual #719                // Method next:()Lscala/Tuple2;
       4: areturn

  public scalaz.StrictTree$ZipStackElem(scala.Option<scalaz.StrictTree$ZipStackElem<A, B>>, scalaz.StrictTree<A>, scalaz.StrictTree<B>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #614                // Field parent:Lscala/Option;
       5: aload_0
       6: aload_2
       7: putfield      #618                // Field a:Lscalaz/StrictTree;
      10: aload_0
      11: aload_3
      12: putfield      #621                // Field b:Lscalaz/StrictTree;
      15: aload_0
      16: invokespecial #723                // Method java/lang/Object."<init>":()V
      19: aload_0
      20: invokestatic  #727                // InterfaceMethod scala/collection/GenTraversableOnce.$init$:(Lscala/collection/GenTraversableOnce;)V
      23: aload_0
      24: invokestatic  #730                // InterfaceMethod scala/collection/TraversableOnce.$init$:(Lscala/collection/TraversableOnce;)V
      27: aload_0
      28: invokestatic  #733                // InterfaceMethod scala/collection/Iterator.$init$:(Lscala/collection/Iterator;)V
      31: aload_0
      32: invokestatic  #736                // InterfaceMethod scala/Product.$init$:(Lscala/Product;)V
      35: aload_0
      36: aload_2
      37: invokevirtual #739                // Method scalaz/StrictTree.subForest:()Lscala/collection/immutable/Vector;
      40: invokevirtual #745                // Method scala/collection/immutable/Vector.iterator:()Lscala/collection/immutable/VectorIterator;
      43: aload_3
      44: invokevirtual #739                // Method scalaz/StrictTree.subForest:()Lscala/collection/immutable/Vector;
      47: invokevirtual #745                // Method scala/collection/immutable/Vector.iterator:()Lscala/collection/immutable/VectorIterator;
      50: invokevirtual #749                // Method scala/collection/immutable/VectorIterator.zip:(Lscala/collection/Iterator;)Lscala/collection/Iterator;
      53: putfield      #627                // Field zippedSubIterator:Lscala/collection/Iterator;
      56: aload_0
      57: getstatic     #754                // Field scala/collection/mutable/Buffer$.MODULE$:Lscala/collection/mutable/Buffer$;
      60: invokevirtual #757                // Method scala/collection/mutable/Buffer$.empty:()Lscala/collection/GenTraversable;
      63: checkcast     #759                // class scala/collection/mutable/Buffer
      66: putfield      #624                // Field mappedSubForest:Lscala/collection/mutable/Buffer;
      69: return
}
