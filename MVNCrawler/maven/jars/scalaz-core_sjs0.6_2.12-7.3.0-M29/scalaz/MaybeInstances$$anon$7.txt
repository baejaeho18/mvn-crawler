Compiled from "Maybe.scala"
public final class scalaz.MaybeInstances$$anon$7 implements scalaz.Monoid<java.lang.Object>, scalaz.Band<java.lang.Object> {
  private final java.lang.Object zero;

  private final scalaz.syntax.BandSyntax<java.lang.Object> bandSyntax;

  private final scalaz.syntax.MonoidSyntax<java.lang.Object> monoidSyntax;

  private final scalaz.syntax.SemigroupSyntax<java.lang.Object> semigroupSyntax;

  public java.lang.Object multiply1(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #58                 // InterfaceMethod scalaz/Band.multiply1$:(Lscalaz/Band;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public scalaz.Band<java.lang.Object>.BandLaw bandLaw();
    Code:
       0: aload_0
       1: invokestatic  #68                 // InterfaceMethod scalaz/Band.bandLaw$:(Lscalaz/Band;)Lscalaz/Band$BandLaw;
       4: areturn

  public java.lang.Object multiply(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #73                 // InterfaceMethod scalaz/Monoid.multiply$:(Lscalaz/Monoid;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public boolean isMZero(java.lang.Object, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #82                 // InterfaceMethod scalaz/Monoid.isMZero$:(Lscalaz/Monoid;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public final <B> B ifEmpty(java.lang.Object, scala.Function0<B>, scala.Function0<B>, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #92                 // InterfaceMethod scalaz/Monoid.ifEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;Lscalaz/Equal;)Ljava/lang/Object;
       9: areturn

  public final <B> B onNotEmpty(java.lang.Object, scala.Function0<B>, scalaz.Equal<java.lang.Object>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #102                // InterfaceMethod scalaz/Monoid.onNotEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public final <A, B> B onEmpty(java.lang.Object, scala.Function0<B>, scalaz.Equal<java.lang.Object>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #108                // InterfaceMethod scalaz/Monoid.onEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public <S> java.lang.Object unfoldlSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, java.lang.Object>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #116                // InterfaceMethod scalaz/Monoid.unfoldlSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <S> java.lang.Object unfoldrSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<java.lang.Object, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #122                // InterfaceMethod scalaz/Monoid.unfoldrSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public final scalaz.Category<?> category();
    Code:
       0: aload_0
       1: invokestatic  #129                // InterfaceMethod scalaz/Monoid.category$:(Lscalaz/Monoid;)Lscalaz/Category;
       4: areturn

  public final scalaz.Applicative<?> applicative();
    Code:
       0: aload_0
       1: invokestatic  #136                // InterfaceMethod scalaz/Monoid.applicative$:(Lscalaz/Monoid;)Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid<java.lang.Object>.MonoidLaw monoidLaw();
    Code:
       0: aload_0
       1: invokestatic  #143                // InterfaceMethod scalaz/Monoid.monoidLaw$:(Lscalaz/Monoid;)Lscalaz/Monoid$MonoidLaw;
       4: areturn

  public <S> scalaz.Maybe<java.lang.Object> unfoldlSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, java.lang.Object>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #150                // InterfaceMethod scalaz/Semigroup.unfoldlSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S> scalaz.Maybe<java.lang.Object> unfoldrSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<java.lang.Object, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #155                // InterfaceMethod scalaz/Semigroup.unfoldrSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public final scalaz.Compose<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #162                // InterfaceMethod scalaz/Semigroup.compose$:(Lscalaz/Semigroup;)Lscalaz/Compose;
       4: areturn

  public final scalaz.Apply<?> apply();
    Code:
       0: aload_0
       1: invokestatic  #169                // InterfaceMethod scalaz/Semigroup.apply$:(Lscalaz/Semigroup;)Lscalaz/Apply;
       4: areturn

  public scalaz.Semigroup<java.lang.Object>.SemigroupLaw semigroupLaw();
    Code:
       0: aload_0
       1: invokestatic  #176                // InterfaceMethod scalaz/Semigroup.semigroupLaw$:(Lscalaz/Semigroup;)Lscalaz/Semigroup$SemigroupLaw;
       4: areturn

  public scalaz.syntax.BandSyntax<java.lang.Object> bandSyntax();
    Code:
       0: aload_0
       1: getfield      #180                // Field bandSyntax:Lscalaz/syntax/BandSyntax;
       4: areturn

  public void scalaz$Band$_setter_$bandSyntax_$eq(scalaz.syntax.BandSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #180                // Field bandSyntax:Lscalaz/syntax/BandSyntax;
       5: return

  public scalaz.syntax.MonoidSyntax<java.lang.Object> monoidSyntax();
    Code:
       0: aload_0
       1: getfield      #188                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       4: areturn

  public void scalaz$Monoid$_setter_$monoidSyntax_$eq(scalaz.syntax.MonoidSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #188                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       5: return

  public scalaz.syntax.SemigroupSyntax<java.lang.Object> semigroupSyntax();
    Code:
       0: aload_0
       1: getfield      #195                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       4: areturn

  public void scalaz$Semigroup$_setter_$semigroupSyntax_$eq(scalaz.syntax.SemigroupSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #195                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       5: return

  public java.lang.Object zero();
    Code:
       0: aload_0
       1: getfield      #201                // Field zero:Ljava/lang/Object;
       4: areturn

  public java.lang.Object append(java.lang.Object, scala.Function0<java.lang.Object>);
    Code:
       0: getstatic     #212                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: getstatic     #212                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       6: dup
       7: ifnonnull     12
      10: aconst_null
      11: athrow
      12: invokevirtual #216                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      15: aload_1
      16: invokevirtual #222                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      19: checkcast     #27                 // class scalaz/Maybe
      22: dup
      23: ifnonnull     28
      26: aconst_null
      27: athrow
      28: astore_3
      29: aload_3
      30: instanceof    #30                 // class scalaz/Maybe$Just
      33: ifeq          56
      36: aload_3
      37: checkcast     #30                 // class scalaz/Maybe$Just
      40: invokevirtual #225                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      43: astore        5
      45: aload_3
      46: aload         5
      48: invokestatic  #229                // Method scalaz/Maybe.$anonfun$orElse$1:(Lscalaz/Maybe;Ljava/lang/Object;)Lscalaz/Maybe;
      51: astore        4
      53: goto          81
      56: aload_3
      57: instanceof    #25                 // class scalaz/Maybe$Empty
      60: ifeq          72
      63: aload_2
      64: invokestatic  #233                // Method $anonfun$append$8:(Lscala/Function0;)Lscalaz/Maybe;
      67: astore        4
      69: goto          81
      72: new           #235                // class scala/MatchError
      75: dup
      76: aload_3
      77: invokespecial #239                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      80: athrow
      81: aload         4
      83: astore        6
      85: dup
      86: ifnonnull     91
      89: aconst_null
      90: athrow
      91: invokevirtual #216                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      94: aload         6
      96: invokevirtual #241                // Method scalaz/TagKind.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      99: areturn

  public static final scalaz.Maybe $anonfun$append$8(scala.Function0);
    Code:
       0: getstatic     #212                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: aload_0
       4: invokeinterface #249,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       9: astore_1
      10: dup
      11: ifnonnull     16
      14: aconst_null
      15: athrow
      16: invokevirtual #216                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      19: aload_1
      20: invokevirtual #222                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #27                 // class scalaz/Maybe
      26: areturn

  public scalaz.MaybeInstances$$anon$7(scalaz.MaybeInstances);
    Code:
       0: aload_0
       1: invokespecial #255                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #259                // InterfaceMethod scalaz/Semigroup.$init$:(Lscalaz/Semigroup;)V
       8: aload_0
       9: invokestatic  #262                // InterfaceMethod scalaz/Monoid.$init$:(Lscalaz/Monoid;)V
      12: aload_0
      13: invokestatic  #265                // InterfaceMethod scalaz/Band.$init$:(Lscalaz/Band;)V
      16: aload_0
      17: getstatic     #212                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      20: getstatic     #270                // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      23: invokevirtual #274                // Method scalaz/Maybe$.empty:()Lscalaz/Maybe;
      26: astore_2
      27: dup
      28: ifnonnull     33
      31: aconst_null
      32: athrow
      33: invokevirtual #216                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      36: aload_2
      37: invokevirtual #241                // Method scalaz/TagKind.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      40: putfield      #201                // Field zero:Ljava/lang/Object;
      43: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #290,  0            // InvokeDynamic #0:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
