Compiled from "Kleisli.scala"
public final class scalaz.KleisliInstances$$anon$21 implements scalaz.KleisliArrow<F> {
  private final scalaz.syntax.ProChoiceSyntax<?> proChoiceSyntax;

  private final scalaz.syntax.ChoiceSyntax<?> choiceSyntax;

  private final scalaz.syntax.ArrowSyntax<?> arrowSyntax;

  private final scalaz.syntax.CategorySyntax<?> categorySyntax;

  private final scalaz.syntax.StrongSyntax<?> strongSyntax;

  private final scalaz.syntax.ProfunctorSyntax<?> profunctorSyntax;

  private final scalaz.syntax.SplitSyntax<?> splitSyntax;

  private final scalaz.syntax.ComposeSyntax<?> composeSyntax;

  private final scalaz.Monad F0$17;

  public <A, B, C> scalaz.Kleisli<F, scala.Tuple2<C, A>, scala.Tuple2<C, B>> second(scalaz.Kleisli<F, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #72                 // InterfaceMethod scalaz/KleisliArrow.second$:(Lscalaz/KleisliArrow;Lscalaz/Kleisli;)Lscalaz/Kleisli;
       5: areturn

  public <A> scalaz.Kleisli<F, A, A> id();
    Code:
       0: aload_0
       1: invokestatic  #82                 // InterfaceMethod scalaz/KleisliArrow.id$:(Lscalaz/KleisliArrow;)Lscalaz/Kleisli;
       4: areturn

  public <A, B> scalaz.Kleisli<F, A, B> arr(scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #89                 // InterfaceMethod scalaz/KleisliArrow.arr$:(Lscalaz/KleisliArrow;Lscala/Function1;)Lscalaz/Kleisli;
       5: areturn

  public <A, B, C> scalaz.Kleisli<F, scalaz.$bslash$div<A, B>, C> choice(scala.Function0<scalaz.Kleisli<F, A, C>>, scala.Function0<scalaz.Kleisli<F, B, C>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #98                 // InterfaceMethod scalaz/KleisliArrow.choice$:(Lscalaz/KleisliArrow;Lscala/Function0;Lscala/Function0;)Lscalaz/Kleisli;
       6: areturn

  public <A, B, C, D> scalaz.Kleisli<F, scala.Tuple2<A, C>, scala.Tuple2<B, D>> split(scalaz.Kleisli<F, A, B>, scalaz.Kleisli<F, C, D>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #106                // InterfaceMethod scalaz/KleisliArrow.split$:(Lscalaz/KleisliArrow;Lscalaz/Kleisli;Lscalaz/Kleisli;)Lscalaz/Kleisli;
       6: areturn

  public <A, B, C> scalaz.Kleisli<F, scalaz.$bslash$div<A, C>, scalaz.$bslash$div<B, C>> left(scalaz.Kleisli<F, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #115                // InterfaceMethod scalaz/KleisliProChoice.left$:(Lscalaz/KleisliProChoice;Lscalaz/Kleisli;)Lscalaz/Kleisli;
       5: areturn

  public <A, B, C> scalaz.Kleisli<F, scalaz.$bslash$div<C, A>, scalaz.$bslash$div<C, B>> right(scalaz.Kleisli<F, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #120                // InterfaceMethod scalaz/KleisliProChoice.right$:(Lscalaz/KleisliProChoice;Lscalaz/Kleisli;)Lscalaz/Kleisli;
       5: areturn

  public <A, B, C> scalaz.Kleisli<F, scala.Tuple2<A, C>, scala.Tuple2<B, C>> first(scalaz.Kleisli<F, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #128                // InterfaceMethod scalaz/KleisliStrong.first$:(Lscalaz/KleisliStrong;Lscalaz/Kleisli;)Lscalaz/Kleisli;
       5: areturn

  public <A, B, C> scalaz.Kleisli<F, C, B> mapfst(scalaz.Kleisli<F, A, B>, scala.Function1<C, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #135                // InterfaceMethod scalaz/KleisliStrong.mapfst$:(Lscalaz/KleisliStrong;Lscalaz/Kleisli;Lscala/Function1;)Lscalaz/Kleisli;
       6: areturn

  public <A, B, C> scalaz.Kleisli<F, A, C> mapsnd(scalaz.Kleisli<F, A, B>, scala.Function1<B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #140                // InterfaceMethod scalaz/KleisliStrong.mapsnd$:(Lscalaz/KleisliStrong;Lscalaz/Kleisli;Lscala/Function1;)Lscalaz/Kleisli;
       6: areturn

  public <A, B, C> scalaz.Kleisli<F, A, C> compose(scalaz.Kleisli<F, B, C>, scalaz.Kleisli<F, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #150                // InterfaceMethod scalaz/KleisliCompose.compose$:(Lscalaz/KleisliCompose;Lscalaz/Kleisli;Lscalaz/Kleisli;)Lscalaz/Kleisli;
       6: areturn

  public java.lang.Object codiagonal();
    Code:
       0: aload_0
       1: invokestatic  #158                // InterfaceMethod scalaz/Choice.codiagonal$:(Lscalaz/Choice;)Ljava/lang/Object;
       4: areturn

  public <C> scalaz.Applicative<?> covariantInstance();
    Code:
       0: aload_0
       1: invokestatic  #167                // InterfaceMethod scalaz/Arrow.covariantInstance$:(Lscalaz/Arrow;)Lscalaz/Applicative;
       4: areturn

  public final java.lang.Object $less$less$less(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #175                // InterfaceMethod scalaz/Arrow.$less$less$less$:(Lscalaz/Arrow;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object $greater$greater$greater(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #180                // InterfaceMethod scalaz/Arrow.$greater$greater$greater$:(Lscalaz/Arrow;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object swap();
    Code:
       0: aload_0
       1: invokestatic  #185                // InterfaceMethod scalaz/Arrow.swap$:(Lscalaz/Arrow;)Ljava/lang/Object;
       4: areturn

  public final java.lang.Object splitA(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #190                // InterfaceMethod scalaz/Arrow.splitA$:(Lscalaz/Arrow;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object product(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #196                // InterfaceMethod scalaz/Arrow.product$:(Lscalaz/Arrow;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object combine(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #201                // InterfaceMethod scalaz/Arrow.combine$:(Lscalaz/Arrow;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scalaz.PlusEmpty<?> empty();
    Code:
       0: aload_0
       1: invokestatic  #208                // InterfaceMethod scalaz/Category.empty$:(Lscalaz/Category;)Lscalaz/PlusEmpty;
       4: areturn

  public <A> scalaz.Monoid<scalaz.Kleisli<F, A, A>> monoid();
    Code:
       0: aload_0
       1: invokestatic  #215                // InterfaceMethod scalaz/Category.monoid$:(Lscalaz/Category;)Lscalaz/Monoid;
       4: areturn

  public scalaz.Category<?>.CategoryLaw categoryLaw();
    Code:
       0: aload_0
       1: invokestatic  #222                // InterfaceMethod scalaz/Category.categoryLaw$:(Lscalaz/Category;)Lscalaz/Category$CategoryLaw;
       4: areturn

  public scalaz.Strong<?>.StrongLaws strongLaw();
    Code:
       0: aload_0
       1: invokestatic  #229                // InterfaceMethod scalaz/Strong.strongLaw$:(Lscalaz/Strong;)Lscalaz/Strong$StrongLaws;
       4: areturn

  public java.lang.Object dimap(java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #235                // InterfaceMethod scalaz/Profunctor.dimap$:(Lscalaz/Profunctor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public scalaz.InvariantFunctor<?> invariantFunctor();
    Code:
       0: aload_0
       1: invokestatic  #242                // InterfaceMethod scalaz/Profunctor.invariantFunctor$:(Lscalaz/Profunctor;)Lscalaz/InvariantFunctor;
       4: areturn

  public <C> scalaz.Contravariant<?> contravariantInstance();
    Code:
       0: aload_0
       1: invokestatic  #249                // InterfaceMethod scalaz/Profunctor.contravariantInstance$:(Lscalaz/Profunctor;)Lscalaz/Contravariant;
       4: areturn

  public scalaz.Profunctor<?>.ProfunctorLaw profunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #256                // InterfaceMethod scalaz/Profunctor.profunctorLaw$:(Lscalaz/Profunctor;)Lscalaz/Profunctor$ProfunctorLaw;
       4: areturn

  public scalaz.Plus<?> plus();
    Code:
       0: aload_0
       1: invokestatic  #263                // InterfaceMethod scalaz/Compose.plus$:(Lscalaz/Compose;)Lscalaz/Plus;
       4: areturn

  public <A> scalaz.Semigroup<scalaz.Kleisli<F, A, A>> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #270                // InterfaceMethod scalaz/Compose.semigroup$:(Lscalaz/Compose;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Compose<?>.ComposeLaw composeLaw();
    Code:
       0: aload_0
       1: invokestatic  #277                // InterfaceMethod scalaz/Compose.composeLaw$:(Lscalaz/Compose;)Lscalaz/Compose$ComposeLaw;
       4: areturn

  public scalaz.syntax.ProChoiceSyntax<?> proChoiceSyntax();
    Code:
       0: aload_0
       1: getfield      #281                // Field proChoiceSyntax:Lscalaz/syntax/ProChoiceSyntax;
       4: areturn

  public void scalaz$ProChoice$_setter_$proChoiceSyntax_$eq(scalaz.syntax.ProChoiceSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #281                // Field proChoiceSyntax:Lscalaz/syntax/ProChoiceSyntax;
       5: return

  public scalaz.syntax.ChoiceSyntax<?> choiceSyntax();
    Code:
       0: aload_0
       1: getfield      #289                // Field choiceSyntax:Lscalaz/syntax/ChoiceSyntax;
       4: areturn

  public void scalaz$Choice$_setter_$choiceSyntax_$eq(scalaz.syntax.ChoiceSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #289                // Field choiceSyntax:Lscalaz/syntax/ChoiceSyntax;
       5: return

  public scalaz.syntax.ArrowSyntax<?> arrowSyntax();
    Code:
       0: aload_0
       1: getfield      #296                // Field arrowSyntax:Lscalaz/syntax/ArrowSyntax;
       4: areturn

  public void scalaz$Arrow$_setter_$arrowSyntax_$eq(scalaz.syntax.ArrowSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #296                // Field arrowSyntax:Lscalaz/syntax/ArrowSyntax;
       5: return

  public scalaz.syntax.CategorySyntax<?> categorySyntax();
    Code:
       0: aload_0
       1: getfield      #303                // Field categorySyntax:Lscalaz/syntax/CategorySyntax;
       4: areturn

  public void scalaz$Category$_setter_$categorySyntax_$eq(scalaz.syntax.CategorySyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #303                // Field categorySyntax:Lscalaz/syntax/CategorySyntax;
       5: return

  public scalaz.syntax.StrongSyntax<?> strongSyntax();
    Code:
       0: aload_0
       1: getfield      #310                // Field strongSyntax:Lscalaz/syntax/StrongSyntax;
       4: areturn

  public void scalaz$Strong$_setter_$strongSyntax_$eq(scalaz.syntax.StrongSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #310                // Field strongSyntax:Lscalaz/syntax/StrongSyntax;
       5: return

  public scalaz.syntax.ProfunctorSyntax<?> profunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #317                // Field profunctorSyntax:Lscalaz/syntax/ProfunctorSyntax;
       4: areturn

  public void scalaz$Profunctor$_setter_$profunctorSyntax_$eq(scalaz.syntax.ProfunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #317                // Field profunctorSyntax:Lscalaz/syntax/ProfunctorSyntax;
       5: return

  public scalaz.syntax.SplitSyntax<?> splitSyntax();
    Code:
       0: aload_0
       1: getfield      #324                // Field splitSyntax:Lscalaz/syntax/SplitSyntax;
       4: areturn

  public void scalaz$Split$_setter_$splitSyntax_$eq(scalaz.syntax.SplitSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #324                // Field splitSyntax:Lscalaz/syntax/SplitSyntax;
       5: return

  public scalaz.syntax.ComposeSyntax<?> composeSyntax();
    Code:
       0: aload_0
       1: getfield      #331                // Field composeSyntax:Lscalaz/syntax/ComposeSyntax;
       4: areturn

  public void scalaz$Compose$_setter_$composeSyntax_$eq(scalaz.syntax.ComposeSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #331                // Field composeSyntax:Lscalaz/syntax/ComposeSyntax;
       5: return

  public scalaz.Monad<F> F();
    Code:
       0: aload_0
       1: getfield      #339                // Field F0$17:Lscalaz/Monad;
       4: areturn

  public scalaz.Functor covariantInstance();
    Code:
       0: aload_0
       1: invokevirtual #342                // Method covariantInstance:()Lscalaz/Applicative;
       4: areturn

  public java.lang.Object compose(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #344                // class scalaz/Kleisli
       5: aload_2
       6: checkcast     #344                // class scalaz/Kleisli
       9: invokevirtual #346                // Method compose:(Lscalaz/Kleisli;Lscalaz/Kleisli;)Lscalaz/Kleisli;
      12: areturn

  public java.lang.Object mapsnd(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #344                // class scalaz/Kleisli
       4: astore_3
       5: aload_3
       6: aload_0
       7: invokeinterface #349,  1          // InterfaceMethod scalaz/KleisliStrong.F:()Lscalaz/Functor;
      12: astore        4
      14: ifnonnull     19
      17: aconst_null
      18: athrow
      19: getstatic     #355                // Field scalaz/Kleisli$.MODULE$:Lscalaz/Kleisli$;
      22: aload_3
      23: aload         4
      25: aload_2
      26: invokedynamic #376,  0            // InvokeDynamic #0:apply:(Lscalaz/Kleisli;Lscalaz/Functor;Lscala/Function1;)Lscala/Function1;
      31: astore        5
      33: ifnonnull     38
      36: aconst_null
      37: athrow
      38: new           #344                // class scalaz/Kleisli
      41: dup
      42: aload         5
      44: invokespecial #380                // Method scalaz/Kleisli."<init>":(Lscala/Function1;)V
      47: areturn

  public java.lang.Object mapfst(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #344                // class scalaz/Kleisli
       4: astore_3
       5: aload_3
       6: ifnonnull     11
       9: aconst_null
      10: athrow
      11: getstatic     #355                // Field scalaz/Kleisli$.MODULE$:Lscalaz/Kleisli$;
      14: aload_2
      15: aload_3
      16: invokevirtual #392                // Method scalaz/Kleisli.run:()Lscala/Function1;
      19: invokeinterface #396,  2          // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      24: invokevirtual #399                // Method scalaz/Kleisli$.kleisli:(Lscala/Function1;)Lscalaz/Kleisli;
      27: areturn

  public java.lang.Object first(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #344                // class scalaz/Kleisli
       5: invokevirtual #402                // Method first:(Lscalaz/Kleisli;)Lscalaz/Kleisli;
       8: areturn

  public java.lang.Object right(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #344                // class scalaz/Kleisli
       5: invokevirtual #404                // Method right:(Lscalaz/Kleisli;)Lscalaz/Kleisli;
       8: areturn

  public java.lang.Object left(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #344                // class scalaz/Kleisli
       5: invokevirtual #406                // Method left:(Lscalaz/Kleisli;)Lscalaz/Kleisli;
       8: areturn

  public java.lang.Object split(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #344                // class scalaz/Kleisli
       5: aload_2
       6: checkcast     #344                // class scalaz/Kleisli
       9: invokevirtual #408                // Method split:(Lscalaz/Kleisli;Lscalaz/Kleisli;)Lscalaz/Kleisli;
      12: areturn

  public java.lang.Object choice(scala.Function0, scala.Function0);
    Code:
       0: new           #344                // class scalaz/Kleisli
       3: dup
       4: aload_1
       5: aload_2
       6: invokedynamic #420,  0            // InvokeDynamic #1:apply:(Lscala/Function0;Lscala/Function0;)Lscala/Function1;
      11: invokespecial #380                // Method scalaz/Kleisli."<init>":(Lscala/Function1;)V
      14: areturn

  public java.lang.Object arr(scala.Function1);
    Code:
       0: getstatic     #355                // Field scalaz/Kleisli$.MODULE$:Lscalaz/Kleisli$;
       3: aload_0
       4: aload_1
       5: invokedynamic #429,  0            // InvokeDynamic #2:apply:(Lscalaz/KleisliArrow;Lscala/Function1;)Lscala/Function1;
      10: astore_2
      11: ifnonnull     16
      14: aconst_null
      15: athrow
      16: new           #344                // class scalaz/Kleisli
      19: dup
      20: aload_2
      21: invokespecial #380                // Method scalaz/Kleisli."<init>":(Lscala/Function1;)V
      24: areturn

  public java.lang.Object id();
    Code:
       0: aload_0
       1: invokevirtual #432                // Method id:()Lscalaz/Kleisli;
       4: areturn

  public java.lang.Object second(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #344                // class scalaz/Kleisli
       5: invokevirtual #434                // Method second:(Lscalaz/Kleisli;)Lscalaz/Kleisli;
       8: areturn

  public scalaz.Bind F();
    Code:
       0: aload_0
       1: invokevirtual #437                // Method F:()Lscalaz/Monad;
       4: areturn

  public scalaz.Functor F();
    Code:
       0: aload_0
       1: invokevirtual #437                // Method F:()Lscalaz/Monad;
       4: areturn

  public scalaz.Applicative F();
    Code:
       0: aload_0
       1: invokevirtual #437                // Method F:()Lscalaz/Monad;
       4: areturn

  public scalaz.KleisliInstances$$anon$21(scalaz.KleisliInstances, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #339                // Field F0$17:Lscalaz/Monad;
       5: aload_0
       6: invokespecial #442                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #446                // InterfaceMethod scalaz/Compose.$init$:(Lscalaz/Compose;)V
      13: aload_0
      14: invokestatic  #451                // InterfaceMethod scalaz/Split.$init$:(Lscalaz/Split;)V
      17: aload_0
      18: invokestatic  #454                // InterfaceMethod scalaz/Profunctor.$init$:(Lscalaz/Profunctor;)V
      21: aload_0
      22: invokestatic  #457                // InterfaceMethod scalaz/Strong.$init$:(Lscalaz/Strong;)V
      25: aload_0
      26: invokestatic  #460                // InterfaceMethod scalaz/Category.$init$:(Lscalaz/Category;)V
      29: aload_0
      30: invokestatic  #463                // InterfaceMethod scalaz/Arrow.$init$:(Lscalaz/Arrow;)V
      33: aload_0
      34: invokestatic  #466                // InterfaceMethod scalaz/Choice.$init$:(Lscalaz/Choice;)V
      37: aload_0
      38: invokestatic  #469                // InterfaceMethod scalaz/KleisliCompose.$init$:(Lscalaz/KleisliCompose;)V
      41: aload_0
      42: invokestatic  #474                // InterfaceMethod scalaz/ProChoice.$init$:(Lscalaz/ProChoice;)V
      45: aload_0
      46: invokestatic  #477                // InterfaceMethod scalaz/KleisliStrong.$init$:(Lscalaz/KleisliStrong;)V
      49: aload_0
      50: invokestatic  #480                // InterfaceMethod scalaz/KleisliProChoice.$init$:(Lscalaz/KleisliProChoice;)V
      53: aload_0
      54: invokestatic  #483                // InterfaceMethod scalaz/KleisliArrow.$init$:(Lscalaz/KleisliArrow;)V
      57: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #496,  0            // InvokeDynamic #3:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
