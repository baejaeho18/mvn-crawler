Compiled from "Syntax.scala"
public interface scalaz.syntax.Syntaxes {
  public abstract scalaz.syntax.Syntaxes$semigroup$ semigroup();

  public abstract scalaz.syntax.Syntaxes$monoid$ monoid();

  public abstract scalaz.syntax.Syntaxes$band$ band();

  public abstract scalaz.syntax.Syntaxes$equal$ equal();

  public abstract scalaz.syntax.Syntaxes$show$ show();

  public abstract scalaz.syntax.Syntaxes$order$ order();

  public abstract scalaz.syntax.Syntaxes$enum$ enum();

  public abstract scalaz.syntax.Syntaxes$isEmpty0$ isEmpty0();

  public abstract scalaz.syntax.Syntaxes$isEmpty$ isEmpty();

  public abstract scalaz.syntax.Syntaxes$plusEmpty0$ plusEmpty0();

  public abstract scalaz.syntax.Syntaxes$plusEmpty$ plusEmpty();

  public abstract scalaz.syntax.Syntaxes$functor0$ functor0();

  public abstract scalaz.syntax.Syntaxes$functor$ functor();

  public abstract scalaz.syntax.Syntaxes$invariantFunctor0$ invariantFunctor0();

  public abstract scalaz.syntax.Syntaxes$invariantFunctor$ invariantFunctor();

  public abstract scalaz.syntax.Syntaxes$contravariant0$ contravariant0();

  public abstract scalaz.syntax.Syntaxes$contravariant$ contravariant();

  public abstract scalaz.syntax.Syntaxes$align0$ align0();

  public abstract scalaz.syntax.Syntaxes$align$ align();

  public abstract scalaz.syntax.Syntaxes$apply0$ apply0();

  public abstract scalaz.syntax.Syntaxes$apply$ apply();

  public abstract scalaz.syntax.Syntaxes$applicative0$ applicative0();

  public abstract scalaz.syntax.Syntaxes$applicative$ applicative();

  public abstract scalaz.syntax.Syntaxes$bind0$ bind0();

  public abstract scalaz.syntax.Syntaxes$bind$ bind();

  public abstract scalaz.syntax.Syntaxes$monad0$ monad0();

  public abstract scalaz.syntax.Syntaxes$monad$ monad();

  public abstract scalaz.syntax.Syntaxes$cobind0$ cobind0();

  public abstract scalaz.syntax.Syntaxes$cobind$ cobind();

  public abstract scalaz.syntax.Syntaxes$comonad0$ comonad0();

  public abstract scalaz.syntax.Syntaxes$comonad$ comonad();

  public abstract scalaz.syntax.Syntaxes$cozip0$ cozip0();

  public abstract scalaz.syntax.Syntaxes$cozip$ cozip();

  public abstract scalaz.syntax.Syntaxes$plus0$ plus0();

  public abstract scalaz.syntax.Syntaxes$plus$ plus();

  public abstract scalaz.syntax.Syntaxes$applicativePlus0$ applicativePlus0();

  public abstract scalaz.syntax.Syntaxes$applicativePlus$ applicativePlus();

  public abstract scalaz.syntax.Syntaxes$alt0$ alt0();

  public abstract scalaz.syntax.Syntaxes$alt$ alt();

  public abstract scalaz.syntax.Syntaxes$monadPlus0$ monadPlus0();

  public abstract scalaz.syntax.Syntaxes$monadPlus$ monadPlus();

  public abstract scalaz.syntax.Syntaxes$foldable0$ foldable0();

  public abstract scalaz.syntax.Syntaxes$foldable$ foldable();

  public abstract scalaz.syntax.Syntaxes$foldable10$ foldable10();

  public abstract scalaz.syntax.Syntaxes$foldable1$ foldable1();

  public abstract scalaz.syntax.Syntaxes$traverse0$ traverse0();

  public abstract scalaz.syntax.Syntaxes$traverse$ traverse();

  public abstract scalaz.syntax.Syntaxes$traverse10$ traverse10();

  public abstract scalaz.syntax.Syntaxes$traverse1$ traverse1();

  public abstract scalaz.syntax.Syntaxes$zip0$ zip0();

  public abstract scalaz.syntax.Syntaxes$zip$ zip();

  public abstract scalaz.syntax.Syntaxes$unzip0$ unzip0();

  public abstract scalaz.syntax.Syntaxes$unzip$ unzip();

  public abstract scalaz.syntax.Syntaxes$optional0$ optional0();

  public abstract scalaz.syntax.Syntaxes$optional$ optional();

  public abstract scalaz.syntax.Syntaxes$catchable0$ catchable0();

  public abstract scalaz.syntax.Syntaxes$catchable$ catchable();

  public abstract scalaz.syntax.Syntaxes$associative0$ associative0();

  public abstract scalaz.syntax.Syntaxes$associative$ associative();

  public abstract scalaz.syntax.Syntaxes$bifunctor0$ bifunctor0();

  public abstract scalaz.syntax.Syntaxes$bifunctor$ bifunctor();

  public abstract scalaz.syntax.Syntaxes$bifoldable0$ bifoldable0();

  public abstract scalaz.syntax.Syntaxes$bifoldable$ bifoldable();

  public abstract scalaz.syntax.Syntaxes$bitraverse0$ bitraverse0();

  public abstract scalaz.syntax.Syntaxes$bitraverse$ bitraverse();

  public abstract scalaz.syntax.Syntaxes$compose0$ compose0();

  public abstract scalaz.syntax.Syntaxes$compose$ compose();

  public abstract scalaz.syntax.Syntaxes$profunctor0$ profunctor0();

  public abstract scalaz.syntax.Syntaxes$profunctor$ profunctor();

  public abstract scalaz.syntax.Syntaxes$strong0$ strong0();

  public abstract scalaz.syntax.Syntaxes$strong$ strong();

  public abstract scalaz.syntax.Syntaxes$proChoice0$ proChoice0();

  public abstract scalaz.syntax.Syntaxes$proChoice$ proChoice();

  public abstract scalaz.syntax.Syntaxes$category0$ category0();

  public abstract scalaz.syntax.Syntaxes$category$ category();

  public abstract scalaz.syntax.Syntaxes$arrow0$ arrow0();

  public abstract scalaz.syntax.Syntaxes$arrow$ arrow();

  public abstract scalaz.syntax.Syntaxes$choice0$ choice0();

  public abstract scalaz.syntax.Syntaxes$choice$ choice();

  public abstract scalaz.syntax.Syntaxes$split0$ split0();

  public abstract scalaz.syntax.Syntaxes$split$ split();

  public abstract scalaz.syntax.Syntaxes$monadTell0$ monadTell0();

  public abstract scalaz.syntax.Syntaxes$monadTell$ monadTell();

  public abstract scalaz.syntax.Syntaxes$monadListen0$ monadListen0();

  public abstract scalaz.syntax.Syntaxes$monadListen$ monadListen();

  public abstract scalaz.syntax.Syntaxes$monadError0$ monadError0();

  public abstract scalaz.syntax.Syntaxes$monadError$ monadError();

  public abstract scalaz.syntax.Syntaxes$applicativeError0$ applicativeError0();

  public abstract scalaz.syntax.Syntaxes$applicativeError$ applicativeError();

  public abstract scalaz.syntax.Syntaxes$monadTrans$ monadTrans();

  public abstract scalaz.syntax.Syntaxes$id$ id();

  public abstract scalaz.syntax.Syntaxes$tree$ tree();

  public abstract scalaz.syntax.Syntaxes$strictTree$ strictTree();

  public abstract scalaz.syntax.Syntaxes$reducer$ reducer();

  public abstract scalaz.syntax.Syntaxes$writer$ writer();

  public abstract scalaz.syntax.Syntaxes$state$ state();

  public abstract scalaz.syntax.Syntaxes$validation$ validation();

  public abstract scalaz.syntax.Syntaxes$kleisli$ kleisli();

  public abstract scalaz.syntax.Syntaxes$either$ either();

  public abstract scalaz.syntax.Syntaxes$eithert$ eithert();

  public abstract scalaz.syntax.Syntaxes$nel$ nel();

  public abstract scalaz.syntax.Syntaxes$these$ these();

  public abstract scalaz.syntax.Syntaxes$maybe$ maybe();

  public abstract scalaz.syntax.Syntaxes$tag$ tag();

  public abstract scalaz.syntax.Syntaxes$contT$ contT();

  public abstract scalaz.syntax.Syntaxes$const$ const();

  public abstract scalaz.syntax.Syntaxes$all$ all();

  public static void $init$(scalaz.syntax.Syntaxes);
    Code:
       0: return
}
