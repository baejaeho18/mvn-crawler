Compiled from "Maybe.scala"
public final class scalaz.MaybeInstances$$anon$11 implements scalaz.Traverse<scalaz.Maybe>, scalaz.MonadPlus<scalaz.Maybe>, scalaz.Alt<scalaz.Maybe>, scalaz.BindRec<scalaz.Maybe>, scalaz.Cozip<scalaz.Maybe>, scalaz.Zip<scalaz.Maybe>, scalaz.Unzip<scalaz.Maybe>, scalaz.Align<scalaz.Maybe>, scalaz.IsEmpty<scalaz.Maybe>, scalaz.Cobind<scalaz.Maybe>, scalaz.Optional<scalaz.Maybe> {
  private final scalaz.syntax.OptionalSyntax<scalaz.Maybe> optionalSyntax;

  private final scalaz.syntax.CobindSyntax<scalaz.Maybe> cobindSyntax;

  private final scalaz.syntax.IsEmptySyntax<scalaz.Maybe> isEmptySyntax;

  private final scalaz.syntax.AlignSyntax<scalaz.Maybe> alignSyntax;

  private final scalaz.syntax.UnzipSyntax<scalaz.Maybe> unzipSyntax;

  private final scalaz.syntax.ZipSyntax<scalaz.Maybe> zipSyntax;

  private final scalaz.syntax.CozipSyntax<scalaz.Maybe> cozipSyntax;

  private final scalaz.syntax.BindRecSyntax<scalaz.Maybe> bindRecSyntax;

  private final scalaz.syntax.AltSyntax<scalaz.Maybe> altSyntax;

  private final scalaz.syntax.InvariantAltSyntax<scalaz.Maybe> invariantAltSyntax;

  private final scalaz.syntax.MonadPlusSyntax<scalaz.Maybe> monadPlusSyntax;

  private final scalaz.syntax.ApplicativePlusSyntax<scalaz.Maybe> applicativePlusSyntax;

  private final scalaz.syntax.PlusEmptySyntax<scalaz.Maybe> plusEmptySyntax;

  private final scalaz.syntax.PlusSyntax<scalaz.Maybe> plusSyntax;

  private final scalaz.syntax.MonadSyntax<scalaz.Maybe> monadSyntax;

  private final scalaz.syntax.BindSyntax<scalaz.Maybe> bindSyntax;

  private final scalaz.syntax.ApplicativeSyntax<scalaz.Maybe> applicativeSyntax;

  private final scalaz.syntax.InvariantApplicativeSyntax<scalaz.Maybe> invariantApplicativeSyntax;

  private final scalaz.syntax.ApplySyntax<scalaz.Maybe> applySyntax;

  private final scalaz.syntax.TraverseSyntax<scalaz.Maybe> traverseSyntax;

  private final scalaz.syntax.FoldableSyntax<scalaz.Maybe> foldableSyntax;

  private final scalaz.syntax.FunctorSyntax<scalaz.Maybe> functorSyntax;

  private final scalaz.syntax.InvariantFunctorSyntax<scalaz.Maybe> invariantFunctorSyntax;

  public java.lang.Object getOrElse(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #219                // InterfaceMethod scalaz/Optional.getOrElse$:(Lscalaz/Optional;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public final boolean nonEmpty(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #229                // InterfaceMethod scalaz/Optional.nonEmpty$:(Lscalaz/Optional;Ljava/lang/Object;)Z
       5: ireturn

  public final boolean isEmpty(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #233                // InterfaceMethod scalaz/Optional.isEmpty$:(Lscalaz/Optional;Ljava/lang/Object;)Z
       5: ireturn

  public java.lang.Object orElse(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #238                // InterfaceMethod scalaz/Optional.orElse$:(Lscalaz/Optional;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object $qmark(java.lang.Object, scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #246                // InterfaceMethod scalaz/Optional.$qmark$:(Lscalaz/Optional;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object extend(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #253                // InterfaceMethod scalaz/Cobind.extend$:(Lscalaz/Cobind;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public scalaz.Cobind<scalaz.Maybe>.CobindLaws cobindLaw();
    Code:
       0: aload_0
       1: invokestatic  #261                // InterfaceMethod scalaz/Cobind.cobindLaw$:(Lscalaz/Cobind;)Lscalaz/Cobind$CobindLaws;
       4: areturn

  public scalaz.IsEmpty<scalaz.Maybe>.IsEmptyLaw isEmptyLaw();
    Code:
       0: aload_0
       1: invokestatic  #268                // InterfaceMethod scalaz/IsEmpty.isEmptyLaw$:(Lscalaz/IsEmpty;)Lscalaz/IsEmpty$IsEmptyLaw;
       4: areturn

  public <G> scalaz.Align<?> product(scalaz.Align<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #276                // InterfaceMethod scalaz/Align.product$:(Lscalaz/Align;Lscalaz/Align;)Lscalaz/Align;
       5: areturn

  public java.lang.Object align(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #285                // InterfaceMethod scalaz/Align.align$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public <A, B, C> scala.Function2<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>> padWith(scala.Function2<scala.Option<A>, scala.Option<B>, C>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #292                // InterfaceMethod scalaz/Align.padWith$:(Lscalaz/Align;Lscala/Function2;)Lscala/Function2;
       5: areturn

  public <A, B> scala.Function2<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<scala.Tuple2<scala.Option<A>, scala.Option<B>>>> pad();
    Code:
       0: aload_0
       1: invokestatic  #300                // InterfaceMethod scalaz/Align.pad$:(Lscalaz/Align;)Lscala/Function2;
       4: areturn

  public java.lang.Object merge(java.lang.Object, java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #309                // InterfaceMethod scalaz/Align.merge$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object alignSwap(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #314                // InterfaceMethod scalaz/Align.alignSwap$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object alignA(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #318                // InterfaceMethod scalaz/Align.alignA$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object alignB(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #322                // InterfaceMethod scalaz/Align.alignB$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object alignThis(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #326                // InterfaceMethod scalaz/Align.alignThis$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object alignThat(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #330                // InterfaceMethod scalaz/Align.alignThat$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object alignBoth(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #334                // InterfaceMethod scalaz/Align.alignBoth$:(Lscalaz/Align;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scalaz.Align<scalaz.Maybe>.AlignLaw alignLaw();
    Code:
       0: aload_0
       1: invokestatic  #341                // InterfaceMethod scalaz/Align.alignLaw$:(Lscalaz/Align;)Lscalaz/Align$AlignLaw;
       4: areturn

  public java.lang.Object firsts(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #347                // InterfaceMethod scalaz/Unzip.firsts$:(Lscalaz/Unzip;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object seconds(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #351                // InterfaceMethod scalaz/Unzip.seconds$:(Lscalaz/Unzip;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <G> scalaz.Unzip<?> compose(scalaz.Functor<scalaz.Maybe>, scalaz.Unzip<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #359                // InterfaceMethod scalaz/Unzip.compose$:(Lscalaz/Unzip;Lscalaz/Functor;Lscalaz/Unzip;)Lscalaz/Unzip;
       6: areturn

  public <G> scalaz.Unzip<?> product(scalaz.Unzip<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #366                // InterfaceMethod scalaz/Unzip.product$:(Lscalaz/Unzip;Lscalaz/Unzip;)Lscalaz/Unzip;
       5: areturn

  public scala.Tuple3 unzip3(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #373                // InterfaceMethod scalaz/Unzip.unzip3$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple3;
       5: areturn

  public scala.Tuple4 unzip4(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #379                // InterfaceMethod scalaz/Unzip.unzip4$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple4;
       5: areturn

  public scala.Tuple5 unzip5(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #385                // InterfaceMethod scalaz/Unzip.unzip5$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple5;
       5: areturn

  public scala.Tuple6 unzip6(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #391                // InterfaceMethod scalaz/Unzip.unzip6$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple6;
       5: areturn

  public scala.Tuple7 unzip7(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #397                // InterfaceMethod scalaz/Unzip.unzip7$:(Lscalaz/Unzip;Ljava/lang/Object;)Lscala/Tuple7;
       5: areturn

  public <G> scalaz.Zip<?> compose(scalaz.Functor<scalaz.Maybe>, scalaz.Zip<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #402                // InterfaceMethod scalaz/Zip.compose$:(Lscalaz/Zip;Lscalaz/Functor;Lscalaz/Zip;)Lscalaz/Zip;
       6: areturn

  public <G> scalaz.Zip<?> product(scalaz.Zip<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #408                // InterfaceMethod scalaz/Zip.product$:(Lscalaz/Zip;Lscalaz/Zip;)Lscalaz/Zip;
       5: areturn

  public java.lang.Object zipWith(scala.Function0, scala.Function0, scala.Function2, scalaz.Functor);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #416                // InterfaceMethod scalaz/Zip.zipWith$:(Lscalaz/Zip;Lscala/Function0;Lscala/Function0;Lscala/Function2;Lscalaz/Functor;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object apzip(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #422                // InterfaceMethod scalaz/Zip.apzip$:(Lscalaz/Zip;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object apzipPL(scala.Function0, scala.Function0, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #429                // InterfaceMethod scalaz/Zip.apzipPL$:(Lscalaz/Zip;Lscala/Function0;Lscala/Function0;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public scalaz.Apply<scalaz.Maybe> ap(scalaz.Functor<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #437                // InterfaceMethod scalaz/Zip.ap$:(Lscalaz/Zip;Lscalaz/Functor;)Lscalaz/Apply;
       5: areturn

  public scalaz.Zip<scalaz.Maybe>.ZipLaw zipLaw();
    Code:
       0: aload_0
       1: invokestatic  #444                // InterfaceMethod scalaz/Zip.zipLaw$:(Lscalaz/Zip;)Lscalaz/Zip$ZipLaw;
       4: areturn

  public scalaz.$bslash$div cozip3(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #450                // InterfaceMethod scalaz/Cozip.cozip3$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public scalaz.$bslash$div cozip4(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #454                // InterfaceMethod scalaz/Cozip.cozip4$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public scalaz.$bslash$div cozip5(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #458                // InterfaceMethod scalaz/Cozip.cozip5$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public scalaz.$bslash$div cozip6(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #462                // InterfaceMethod scalaz/Cozip.cozip6$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public scalaz.$bslash$div cozip7(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #466                // InterfaceMethod scalaz/Cozip.cozip7$:(Lscalaz/Cozip;Ljava/lang/Object;)Lscalaz/$bslash$div;
       5: areturn

  public java.lang.Object forever(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #471                // InterfaceMethod scalaz/BindRec.forever$:(Lscalaz/BindRec;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public <G> scalaz.BindRec<?> product(scalaz.BindRec<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #476                // InterfaceMethod scalaz/BindRec.product$:(Lscalaz/BindRec;Lscalaz/BindRec;)Lscalaz/BindRec;
       5: areturn

  public scalaz.BindRec<scalaz.Maybe>.BindRecLaw bindRecLaw();
    Code:
       0: aload_0
       1: invokestatic  #484                // InterfaceMethod scalaz/BindRec.bindRecLaw$:(Lscalaz/BindRec;)Lscalaz/BindRec$BindRecLaw;
       4: areturn

  public java.lang.Object optional(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #489                // InterfaceMethod scalaz/Alt.optional$:(Lscalaz/Alt;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object altly1(scala.Function0, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #495                // InterfaceMethod scalaz/Alt.altly1$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object altly3(scala.Function0, scala.Function0, scala.Function0, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #502                // InterfaceMethod scalaz/Alt.altly3$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object altly4(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #509                // InterfaceMethod scalaz/Alt.altly4$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object either2(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #514                // InterfaceMethod scalaz/Alt.either2$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public final java.lang.Object altlying1(scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #520                // InterfaceMethod scalaz/Alt.altlying1$:(Lscalaz/Alt;Lscala/Function1;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public final java.lang.Object altlying2(scala.Function1, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #526                // InterfaceMethod scalaz/Alt.altlying2$:(Lscalaz/Alt;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object altlying3(scala.Function1, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #532                // InterfaceMethod scalaz/Alt.altlying3$:(Lscalaz/Alt;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object altlying4(scala.Function1, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #538                // InterfaceMethod scalaz/Alt.altlying4$:(Lscalaz/Alt;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object xcoproduct1(scala.Function0, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #545                // InterfaceMethod scalaz/Alt.xcoproduct1$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object xcoproduct2(scala.Function0, scala.Function0, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #551                // InterfaceMethod scalaz/Alt.xcoproduct2$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function0;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object xcoproduct3(scala.Function0, scala.Function0, scala.Function0, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #557                // InterfaceMethod scalaz/Alt.xcoproduct3$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object xcoproduct4(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #563                // InterfaceMethod scalaz/Alt.xcoproduct4$:(Lscalaz/Alt;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
      13: areturn

  public scalaz.Alt<scalaz.Maybe>.AltLaw altLaw();
    Code:
       0: aload_0
       1: invokestatic  #570                // InterfaceMethod scalaz/Alt.altLaw$:(Lscalaz/Alt;)Lscalaz/Alt$AltLaw;
       4: areturn

  public final java.lang.Object xcoderiving1(scala.Function1, scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #578                // InterfaceMethod scalaz/InvariantAlt.xcoderiving1$:(Lscalaz/InvariantAlt;Lscala/Function1;Lscala/Function1;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object xcoderiving2(scala.Function1, scala.Function1, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #584                // InterfaceMethod scalaz/InvariantAlt.xcoderiving2$:(Lscalaz/InvariantAlt;Lscala/Function1;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object xcoderiving3(scala.Function1, scala.Function1, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #590                // InterfaceMethod scalaz/InvariantAlt.xcoderiving3$:(Lscalaz/InvariantAlt;Lscala/Function1;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public final java.lang.Object xcoderiving4(scala.Function1, scala.Function1, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #596                // InterfaceMethod scalaz/InvariantAlt.xcoderiving4$:(Lscalaz/InvariantAlt;Lscala/Function1;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: areturn

  public java.lang.Object unite(java.lang.Object, scalaz.Foldable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #604                // InterfaceMethod scalaz/MonadPlus.unite$:(Lscalaz/MonadPlus;Ljava/lang/Object;Lscalaz/Foldable;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object lefts(java.lang.Object, scalaz.Bifoldable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #612                // InterfaceMethod scalaz/MonadPlus.lefts$:(Lscalaz/MonadPlus;Ljava/lang/Object;Lscalaz/Bifoldable;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object rights(java.lang.Object, scalaz.Bifoldable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #617                // InterfaceMethod scalaz/MonadPlus.rights$:(Lscalaz/MonadPlus;Ljava/lang/Object;Lscalaz/Bifoldable;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 separate(java.lang.Object, scalaz.Bifoldable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #623                // InterfaceMethod scalaz/MonadPlus.separate$:(Lscalaz/MonadPlus;Ljava/lang/Object;Lscalaz/Bifoldable;)Lscala/Tuple2;
       6: areturn

  public final java.lang.Object uniteU(java.lang.Object, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #629                // InterfaceMethod scalaz/MonadPlus.uniteU$:(Lscalaz/MonadPlus;Ljava/lang/Object;Lscalaz/Unapply;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.MonadPlus<?> product(scalaz.MonadPlus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #635                // InterfaceMethod scalaz/MonadPlus.product$:(Lscalaz/MonadPlus;Lscalaz/MonadPlus;)Lscalaz/MonadPlus;
       5: areturn

  public scalaz.MonadPlus<scalaz.Maybe>.MonadPlusLaw monadPlusLaw();
    Code:
       0: aload_0
       1: invokestatic  #643                // InterfaceMethod scalaz/MonadPlus.monadPlusLaw$:(Lscalaz/MonadPlus;)Lscalaz/MonadPlus$MonadPlusLaw;
       4: areturn

  public scalaz.MonadPlus<scalaz.Maybe>.StrongMonadPlusLaw strongMonadPlusLaw();
    Code:
       0: aload_0
       1: invokestatic  #650                // InterfaceMethod scalaz/MonadPlus.strongMonadPlusLaw$:(Lscalaz/MonadPlus;)Lscalaz/MonadPlus$StrongMonadPlusLaw;
       4: areturn

  public <G> scalaz.ApplicativePlus<?> compose(scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #657                // InterfaceMethod scalaz/ApplicativePlus.compose$:(Lscalaz/ApplicativePlus;Lscalaz/Applicative;)Lscalaz/ApplicativePlus;
       5: areturn

  public <G> scalaz.ApplicativePlus<?> product(scalaz.ApplicativePlus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #663                // InterfaceMethod scalaz/ApplicativePlus.product$:(Lscalaz/ApplicativePlus;Lscalaz/ApplicativePlus;)Lscalaz/ApplicativePlus;
       5: areturn

  public java.lang.Object unfoldlPsum(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #670                // InterfaceMethod scalaz/PlusEmpty.unfoldlPsum$:(Lscalaz/PlusEmpty;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object unfoldrPsum(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #674                // InterfaceMethod scalaz/PlusEmpty.unfoldrPsum$:(Lscalaz/PlusEmpty;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.PlusEmpty<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #679                // InterfaceMethod scalaz/PlusEmpty.compose$:(Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty;
       4: areturn

  public <G> scalaz.PlusEmpty<?> product(scalaz.PlusEmpty<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #683                // InterfaceMethod scalaz/PlusEmpty.product$:(Lscalaz/PlusEmpty;Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty;
       5: areturn

  public <A> scalaz.Monoid<scalaz.Maybe<A>> monoid();
    Code:
       0: aload_0
       1: invokestatic  #691                // InterfaceMethod scalaz/PlusEmpty.monoid$:(Lscalaz/PlusEmpty;)Lscalaz/Monoid;
       4: areturn

  public scalaz.PlusEmpty<scalaz.Maybe>.EmptyLaw plusEmptyLaw();
    Code:
       0: aload_0
       1: invokestatic  #698                // InterfaceMethod scalaz/PlusEmpty.plusEmptyLaw$:(Lscalaz/PlusEmpty;)Lscalaz/PlusEmpty$EmptyLaw;
       4: areturn

  public <S, A> scalaz.Maybe<scalaz.Maybe<A>> unfoldlPsumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, scalaz.Maybe<A>>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #705                // InterfaceMethod scalaz/Plus.unfoldlPsumOpt$:(Lscalaz/Plus;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <G> scalaz.Plus<?> product(scalaz.Plus<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #710                // InterfaceMethod scalaz/Plus.product$:(Lscalaz/Plus;Lscalaz/Plus;)Lscalaz/Plus;
       5: areturn

  public <A> scalaz.Semigroup<scalaz.Maybe<A>> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #718                // InterfaceMethod scalaz/Plus.semigroup$:(Lscalaz/Plus;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Plus<scalaz.Maybe>.PlusLaw plusLaw();
    Code:
       0: aload_0
       1: invokestatic  #725                // InterfaceMethod scalaz/Plus.plusLaw$:(Lscalaz/Plus;)Lscalaz/Plus$PlusLaw;
       4: areturn

  public java.lang.Object whileM(java.lang.Object, scala.Function0, scalaz.MonadPlus);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #733                // InterfaceMethod scalaz/Monad.whileM$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function0;Lscalaz/MonadPlus;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object whileM_(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #738                // InterfaceMethod scalaz/Monad.whileM_$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object untilM(java.lang.Object, scala.Function0, scalaz.MonadPlus);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #743                // InterfaceMethod scalaz/Monad.untilM$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function0;Lscalaz/MonadPlus;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object untilM_(java.lang.Object, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #747                // InterfaceMethod scalaz/Monad.untilM_$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object iterateWhile(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #752                // InterfaceMethod scalaz/Monad.iterateWhile$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object iterateUntil(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #756                // InterfaceMethod scalaz/Monad.iterateUntil$:(Lscalaz/Monad;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.Monad<?> product(scalaz.Monad<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #761                // InterfaceMethod scalaz/Monad.product$:(Lscalaz/Monad;Lscalaz/Monad;)Lscalaz/Monad;
       5: areturn

  public scalaz.Monad<scalaz.Maybe>.MonadLaw monadLaw();
    Code:
       0: aload_0
       1: invokestatic  #769                // InterfaceMethod scalaz/Monad.monadLaw$:(Lscalaz/Monad;)Lscalaz/Monad$MonadLaw;
       4: areturn

  public java.lang.Object join(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #775                // InterfaceMethod scalaz/Bind.join$:(Lscalaz/Bind;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object ifM(java.lang.Object, scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #782                // InterfaceMethod scalaz/Bind.ifM$:(Lscalaz/Bind;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object mproduct(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #787                // InterfaceMethod scalaz/Bind.mproduct$:(Lscalaz/Bind;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.Bind<?> product(scalaz.Bind<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #792                // InterfaceMethod scalaz/Bind.product$:(Lscalaz/Bind;Lscalaz/Bind;)Lscalaz/Bind;
       5: areturn

  public scalaz.Bind<scalaz.Maybe>.BindLaw bindLaw();
    Code:
       0: aload_0
       1: invokestatic  #800                // InterfaceMethod scalaz/Bind.bindLaw$:(Lscalaz/Bind;)Lscalaz/Bind$BindLaw;
       4: areturn

  public final java.lang.Object pure(scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #806                // InterfaceMethod scalaz/Applicative.pure$:(Lscalaz/Applicative;Lscala/Function0;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object traverse(java.lang.Object, scala.Function1, scalaz.Traverse);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #812                // InterfaceMethod scalaz/Applicative.traverse$:(Lscalaz/Applicative;Ljava/lang/Object;Lscala/Function1;Lscalaz/Traverse;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object sequence(java.lang.Object, scalaz.Traverse);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #821                // InterfaceMethod scalaz/Applicative.sequence$:(Lscalaz/Applicative;Ljava/lang/Object;Lscalaz/Traverse;)Ljava/lang/Object;
       6: areturn

  public scalaz.Applicative<?> par();
    Code:
       0: aload_0
       1: invokestatic  #828                // InterfaceMethod scalaz/Applicative.par$:(Lscalaz/Applicative;)Lscalaz/Applicative;
       4: areturn

  public java.lang.Object xproduct0(scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #833                // InterfaceMethod scalaz/Applicative.xproduct0$:(Lscalaz/Applicative;Lscala/Function0;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object xproduct1(scala.Function0, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #838                // InterfaceMethod scalaz/Applicative.xproduct1$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object xproduct2(scala.Function0, scala.Function0, scala.Function2, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #844                // InterfaceMethod scalaz/Applicative.xproduct2$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function0;Lscala/Function2;Lscala/Function1;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object xproduct3(scala.Function0, scala.Function0, scala.Function0, scala.Function3, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #850                // InterfaceMethod scalaz/Applicative.xproduct3$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function3;Lscala/Function1;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object xproduct4(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function4, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #857                // InterfaceMethod scalaz/Applicative.xproduct4$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function4;Lscala/Function1;)Ljava/lang/Object;
      13: areturn

  public java.lang.Object replicateM(int, java.lang.Object);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #865                // InterfaceMethod scalaz/Applicative.replicateM$:(Lscalaz/Applicative;ILjava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object replicateM_(int, java.lang.Object);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #870                // InterfaceMethod scalaz/Applicative.replicateM_$:(Lscalaz/Applicative;ILjava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object filterM(scala.collection.immutable.List, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #877                // InterfaceMethod scalaz/Applicative.filterM$:(Lscalaz/Applicative;Lscala/collection/immutable/List;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object filterM(scalaz.IList, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #882                // InterfaceMethod scalaz/Applicative.filterM$:(Lscalaz/Applicative;Lscalaz/IList;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object unlessM(boolean, scala.Function0);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #889                // InterfaceMethod scalaz/Applicative.unlessM$:(Lscalaz/Applicative;ZLscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object whenM(boolean, scala.Function0);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #894                // InterfaceMethod scalaz/Applicative.whenM$:(Lscalaz/Applicative;ZLscala/Function0;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.Applicative<?> product(scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #898                // InterfaceMethod scalaz/Applicative.product$:(Lscalaz/Applicative;Lscalaz/Applicative;)Lscalaz/Applicative;
       5: areturn

  public scalaz.Applicative<scalaz.Maybe> flip();
    Code:
       0: aload_0
       1: invokestatic  #903                // InterfaceMethod scalaz/Applicative.flip$:(Lscalaz/Applicative;)Lscalaz/Applicative;
       4: areturn

  public java.lang.Object plusA(scala.Function0, scala.Function0, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #911                // InterfaceMethod scalaz/Applicative.plusA$:(Lscalaz/Applicative;Lscala/Function0;Lscala/Function0;Lscalaz/Semigroup;)Ljava/lang/Object;
       7: areturn

  public scalaz.Applicative<scalaz.Maybe>.ApplicativeLaw applicativeLaw();
    Code:
       0: aload_0
       1: invokestatic  #918                // InterfaceMethod scalaz/Applicative.applicativeLaw$:(Lscalaz/Applicative;)Lscalaz/Applicative$ApplicativeLaw;
       4: areturn

  public final java.lang.Object xderiving0(scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #925                // InterfaceMethod scalaz/InvariantApplicative.xderiving0$:(Lscalaz/InvariantApplicative;Lscala/Function0;)Ljava/lang/Object;
       5: areturn

  public final java.lang.Object xderiving1(scala.Function1, scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #930                // InterfaceMethod scalaz/InvariantApplicative.xderiving1$:(Lscalaz/InvariantApplicative;Lscala/Function1;Lscala/Function1;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object xderiving2(scala.Function2, scala.Function1, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #936                // InterfaceMethod scalaz/InvariantApplicative.xderiving2$:(Lscalaz/InvariantApplicative;Lscala/Function2;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object xderiving3(scala.Function3, scala.Function1, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #942                // InterfaceMethod scalaz/InvariantApplicative.xderiving3$:(Lscalaz/InvariantApplicative;Lscala/Function3;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public final java.lang.Object xderiving4(scala.Function4, scala.Function1, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #948                // InterfaceMethod scalaz/InvariantApplicative.xderiving4$:(Lscalaz/InvariantApplicative;Lscala/Function4;Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: areturn

  public java.lang.Object traverse1(java.lang.Object, scala.Function1, scalaz.Traverse1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #954                // InterfaceMethod scalaz/Apply.traverse1$:(Lscalaz/Apply;Ljava/lang/Object;Lscala/Function1;Lscalaz/Traverse1;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object sequence1(java.lang.Object, scalaz.Traverse1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #961                // InterfaceMethod scalaz/Apply.sequence1$:(Lscalaz/Apply;Ljava/lang/Object;Lscalaz/Traverse1;)Ljava/lang/Object;
       6: areturn

  public <G> scalaz.Apply<?> compose(scalaz.Apply<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #966                // InterfaceMethod scalaz/Apply.compose$:(Lscalaz/Apply;Lscalaz/Apply;)Lscalaz/Apply;
       5: areturn

  public <G> scalaz.Apply<?> product(scalaz.Apply<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #969                // InterfaceMethod scalaz/Apply.product$:(Lscalaz/Apply;Lscalaz/Apply;)Lscalaz/Apply;
       5: areturn

  public <A, B> scala.Function1<scalaz.Maybe<A>, scalaz.Maybe<B>> apF(scala.Function0<scalaz.Maybe<scala.Function1<A, B>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #976                // InterfaceMethod scalaz/Apply.apF$:(Lscalaz/Apply;Lscala/Function0;)Lscala/Function1;
       5: areturn

  public java.lang.Object ap2(scala.Function0, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #982                // InterfaceMethod scalaz/Apply.ap2$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object ap3(scala.Function0, scala.Function0, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #989                // InterfaceMethod scalaz/Apply.ap3$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object ap4(scala.Function0, scala.Function0, scala.Function0, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #996                // InterfaceMethod scalaz/Apply.ap4$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object ap5(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #1003               // InterfaceMethod scalaz/Apply.ap5$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      13: areturn

  public java.lang.Object ap6(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #1010               // InterfaceMethod scalaz/Apply.ap6$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      15: areturn

  public java.lang.Object ap7(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #1017               // InterfaceMethod scalaz/Apply.ap7$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      17: areturn

  public java.lang.Object ap8(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: invokestatic  #1024               // InterfaceMethod scalaz/Apply.ap8$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      19: areturn

  public java.lang.Object apply3(scala.Function0, scala.Function0, scala.Function0, scala.Function3);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1030               // InterfaceMethod scalaz/Apply.apply3$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function3;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object apply4(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function4);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #1036               // InterfaceMethod scalaz/Apply.apply4$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function4;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object apply5(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function5);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #1042               // InterfaceMethod scalaz/Apply.apply5$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function5;)Ljava/lang/Object;
      13: areturn

  public java.lang.Object apply6(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function6);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #1049               // InterfaceMethod scalaz/Apply.apply6$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function6;)Ljava/lang/Object;
      15: areturn

  public java.lang.Object apply7(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function7);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #1056               // InterfaceMethod scalaz/Apply.apply7$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function7;)Ljava/lang/Object;
      17: areturn

  public java.lang.Object apply8(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function8);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: invokestatic  #1063               // InterfaceMethod scalaz/Apply.apply8$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function8;)Ljava/lang/Object;
      19: areturn

  public java.lang.Object apply9(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function9);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: aload         10
      18: invokestatic  #1071               // InterfaceMethod scalaz/Apply.apply9$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function9;)Ljava/lang/Object;
      21: areturn

  public java.lang.Object apply10(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function10);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: aload         10
      18: aload         11
      20: invokestatic  #1079               // InterfaceMethod scalaz/Apply.apply10$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function10;)Ljava/lang/Object;
      23: areturn

  public java.lang.Object apply11(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function11);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: aload         10
      18: aload         11
      20: aload         12
      22: invokestatic  #1087               // InterfaceMethod scalaz/Apply.apply11$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function11;)Ljava/lang/Object;
      25: areturn

  public java.lang.Object apply12(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function12);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: aload         10
      18: aload         11
      20: aload         12
      22: aload         13
      24: invokestatic  #1095               // InterfaceMethod scalaz/Apply.apply12$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function12;)Ljava/lang/Object;
      27: areturn

  public final java.lang.Object applying1(scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1101               // InterfaceMethod scalaz/Apply.applying1$:(Lscalaz/Apply;Lscala/Function1;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public final java.lang.Object applying2(scala.Function2, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1107               // InterfaceMethod scalaz/Apply.applying2$:(Lscalaz/Apply;Lscala/Function2;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object applying3(scala.Function3, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1113               // InterfaceMethod scalaz/Apply.applying3$:(Lscalaz/Apply;Lscala/Function3;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object applying4(scala.Function4, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #1119               // InterfaceMethod scalaz/Apply.applying4$:(Lscalaz/Apply;Lscala/Function4;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object tuple2(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1124               // InterfaceMethod scalaz/Apply.tuple2$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object tuple3(scala.Function0, scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1130               // InterfaceMethod scalaz/Apply.tuple3$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object tuple4(scala.Function0, scala.Function0, scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1136               // InterfaceMethod scalaz/Apply.tuple4$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object tuple5(scala.Function0, scala.Function0, scala.Function0, scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #1142               // InterfaceMethod scalaz/Apply.tuple5$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
      11: areturn

  public <A, B, C> scala.Function2<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>> lift2(scala.Function2<A, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1148               // InterfaceMethod scalaz/Apply.lift2$:(Lscalaz/Apply;Lscala/Function2;)Lscala/Function2;
       5: areturn

  public <A, B, C, D> scala.Function3<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>> lift3(scala.Function3<A, B, C, D>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1155               // InterfaceMethod scalaz/Apply.lift3$:(Lscalaz/Apply;Lscala/Function3;)Lscala/Function3;
       5: areturn

  public <A, B, C, D, E> scala.Function4<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>> lift4(scala.Function4<A, B, C, D, E>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1162               // InterfaceMethod scalaz/Apply.lift4$:(Lscalaz/Apply;Lscala/Function4;)Lscala/Function4;
       5: areturn

  public <A, B, C, D, E, R> scala.Function5<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<R>> lift5(scala.Function5<A, B, C, D, E, R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1169               // InterfaceMethod scalaz/Apply.lift5$:(Lscalaz/Apply;Lscala/Function5;)Lscala/Function5;
       5: areturn

  public <A, B, C, D, E, FF, R> scala.Function6<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<FF>, scalaz.Maybe<R>> lift6(scala.Function6<A, B, C, D, E, FF, R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1176               // InterfaceMethod scalaz/Apply.lift6$:(Lscalaz/Apply;Lscala/Function6;)Lscala/Function6;
       5: areturn

  public <A, B, C, D, E, FF, G, R> scala.Function7<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<FF>, scalaz.Maybe<G>, scalaz.Maybe<R>> lift7(scala.Function7<A, B, C, D, E, FF, G, R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1183               // InterfaceMethod scalaz/Apply.lift7$:(Lscalaz/Apply;Lscala/Function7;)Lscala/Function7;
       5: areturn

  public <A, B, C, D, E, FF, G, H, R> scala.Function8<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<FF>, scalaz.Maybe<G>, scalaz.Maybe<H>, scalaz.Maybe<R>> lift8(scala.Function8<A, B, C, D, E, FF, G, H, R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1190               // InterfaceMethod scalaz/Apply.lift8$:(Lscalaz/Apply;Lscala/Function8;)Lscala/Function8;
       5: areturn

  public <A, B, C, D, E, FF, G, H, I, R> scala.Function9<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<FF>, scalaz.Maybe<G>, scalaz.Maybe<H>, scalaz.Maybe<I>, scalaz.Maybe<R>> lift9(scala.Function9<A, B, C, D, E, FF, G, H, I, R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1197               // InterfaceMethod scalaz/Apply.lift9$:(Lscalaz/Apply;Lscala/Function9;)Lscala/Function9;
       5: areturn

  public <A, B, C, D, E, FF, G, H, I, J, R> scala.Function10<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<FF>, scalaz.Maybe<G>, scalaz.Maybe<H>, scalaz.Maybe<I>, scalaz.Maybe<J>, scalaz.Maybe<R>> lift10(scala.Function10<A, B, C, D, E, FF, G, H, I, J, R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1204               // InterfaceMethod scalaz/Apply.lift10$:(Lscalaz/Apply;Lscala/Function10;)Lscala/Function10;
       5: areturn

  public <A, B, C, D, E, FF, G, H, I, J, K, R> scala.Function11<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<FF>, scalaz.Maybe<G>, scalaz.Maybe<H>, scalaz.Maybe<I>, scalaz.Maybe<J>, scalaz.Maybe<K>, scalaz.Maybe<R>> lift11(scala.Function11<A, B, C, D, E, FF, G, H, I, J, K, R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1211               // InterfaceMethod scalaz/Apply.lift11$:(Lscalaz/Apply;Lscala/Function11;)Lscala/Function11;
       5: areturn

  public <A, B, C, D, E, FF, G, H, I, J, K, L, R> scala.Function12<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>, scalaz.Maybe<D>, scalaz.Maybe<E>, scalaz.Maybe<FF>, scalaz.Maybe<G>, scalaz.Maybe<H>, scalaz.Maybe<I>, scalaz.Maybe<J>, scalaz.Maybe<K>, scalaz.Maybe<L>, scalaz.Maybe<R>> lift12(scala.Function12<A, B, C, D, E, FF, G, H, I, J, K, L, R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1218               // InterfaceMethod scalaz/Apply.lift12$:(Lscalaz/Apply;Lscala/Function12;)Lscala/Function12;
       5: areturn

  public java.lang.Object discardLeft(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1222               // InterfaceMethod scalaz/Apply.discardLeft$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object discardRight(scala.Function0, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1226               // InterfaceMethod scalaz/Apply.discardRight$:(Lscalaz/Apply;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public scalaz.Applicative<?> applyApplicative();
    Code:
       0: aload_0
       1: invokestatic  #1231               // InterfaceMethod scalaz/Apply.applyApplicative$:(Lscalaz/Apply;)Lscalaz/Applicative;
       4: areturn

  public <A, B> scalaz.Reducer<scalaz.Maybe<A>, scalaz.Maybe<B>> liftReducer(scalaz.Reducer<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1239               // InterfaceMethod scalaz/Apply.liftReducer$:(Lscalaz/Apply;Lscalaz/Reducer;)Lscalaz/Reducer;
       5: areturn

  public scalaz.Apply<scalaz.Maybe>.ApplyLaw applyLaw();
    Code:
       0: aload_0
       1: invokestatic  #1247               // InterfaceMethod scalaz/Apply.applyLaw$:(Lscalaz/Apply;)Lscalaz/Apply$ApplyLaw;
       4: areturn

  public <G> scalaz.Traverse<?> compose(scalaz.Traverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1252               // InterfaceMethod scalaz/Traverse.compose$:(Lscalaz/Traverse;Lscalaz/Traverse;)Lscalaz/Traverse;
       5: areturn

  public <G> scalaz.Bitraverse<?> bicompose(scalaz.Bitraverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1260               // InterfaceMethod scalaz/Traverse.bicompose$:(Lscalaz/Traverse;Lscalaz/Bitraverse;)Lscalaz/Bitraverse;
       5: areturn

  public <G> scalaz.Traverse<?> product(scalaz.Traverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1263               // InterfaceMethod scalaz/Traverse.product$:(Lscalaz/Traverse;Lscalaz/Traverse;)Lscalaz/Traverse;
       5: areturn

  public <G> scalaz.Traverse1<?> product0(scalaz.Traverse1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1270               // InterfaceMethod scalaz/Traverse.product0$:(Lscalaz/Traverse;Lscalaz/Traverse1;)Lscalaz/Traverse1;
       5: areturn

  public <G> scalaz.Traverse<scalaz.Maybe>.Traversal<G> traversal(scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1278               // InterfaceMethod scalaz/Traverse.traversal$:(Lscalaz/Traverse;Lscalaz/Applicative;)Lscalaz/Traverse$Traversal;
       5: areturn

  public <S> scalaz.Traverse<scalaz.Maybe>.Traversal<?> traversalS();
    Code:
       0: aload_0
       1: invokestatic  #1285               // InterfaceMethod scalaz/Traverse.traversalS$:(Lscalaz/Traverse;)Lscalaz/Traverse$Traversal;
       4: areturn

  public java.lang.Object traverse(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1290               // InterfaceMethod scalaz/Traverse.traverse$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object traverseU(java.lang.Object, scala.Function1, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1296               // InterfaceMethod scalaz/Traverse.traverseU$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Unapply;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object traverseM(java.lang.Object, scala.Function1, scalaz.Applicative, scalaz.Bind);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1302               // InterfaceMethod scalaz/Traverse.traverseM$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;Lscalaz/Bind;)Ljava/lang/Object;
       9: areturn

  public scalaz.IndexedStateT traverseS(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1308               // InterfaceMethod scalaz/Traverse.traverseS$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;)Lscalaz/IndexedStateT;
       6: areturn

  public scala.Tuple2 runTraverseS(java.lang.Object, java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1315               // InterfaceMethod scalaz/Traverse.runTraverseS$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)Lscala/Tuple2;
       7: areturn

  public scalaz.IndexedStateT traverseSTrampoline(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1322               // InterfaceMethod scalaz/Traverse.traverseSTrampoline$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Lscalaz/IndexedStateT;
       7: areturn

  public scalaz.Kleisli traverseKTrampoline(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1329               // InterfaceMethod scalaz/Traverse.traverseKTrampoline$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Lscalaz/Kleisli;
       7: areturn

  public java.lang.Object sequence(java.lang.Object, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1335               // InterfaceMethod scalaz/Traverse.sequence$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Applicative;)Ljava/lang/Object;
       6: areturn

  public scalaz.IndexedStateT sequenceS(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1341               // InterfaceMethod scalaz/Traverse.sequenceS$:(Lscalaz/Traverse;Ljava/lang/Object;)Lscalaz/IndexedStateT;
       5: areturn

  public final java.lang.Object sequenceU(java.lang.Object, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1347               // InterfaceMethod scalaz/Traverse.sequenceU$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Unapply;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object sequenceM(java.lang.Object, scalaz.Applicative, scalaz.Bind);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1354               // InterfaceMethod scalaz/Traverse.sequenceM$:(Lscalaz/Traverse;Ljava/lang/Object;Lscalaz/Applicative;Lscalaz/Bind;)Ljava/lang/Object;
       7: areturn

  public scala.Tuple2 foldLShape(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1360               // InterfaceMethod scalaz/Traverse.foldLShape$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public java.lang.Object foldLeft(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1366               // InterfaceMethod scalaz/Traverse.foldLeft$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object foldMap(java.lang.Object, scala.Function1, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1372               // InterfaceMethod scalaz/Traverse.foldMap$:(Lscalaz/Traverse;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object reverse(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1377               // InterfaceMethod scalaz/Traverse.reverse$:(Lscalaz/Traverse;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public scala.Tuple2 zipWith(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1379               // InterfaceMethod scalaz/Traverse.zipWith$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public java.lang.Object zipWithL(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1383               // InterfaceMethod scalaz/Traverse.zipWithL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object zipWithR(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1387               // InterfaceMethod scalaz/Traverse.zipWithR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object indexed(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1391               // InterfaceMethod scalaz/Traverse.indexed$:(Lscalaz/Traverse;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object zipL(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1396               // InterfaceMethod scalaz/Traverse.zipL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object zipR(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1400               // InterfaceMethod scalaz/Traverse.zipR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 mapAccumL(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1404               // InterfaceMethod scalaz/Traverse.mapAccumL$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public scala.Tuple2 mapAccumR(java.lang.Object, java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1408               // InterfaceMethod scalaz/Traverse.mapAccumR$:(Lscalaz/Traverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public scalaz.Traverse<scalaz.Maybe>.TraverseLaw traverseLaw();
    Code:
       0: aload_0
       1: invokestatic  #1415               // InterfaceMethod scalaz/Traverse.traverseLaw$:(Lscalaz/Traverse;)Lscalaz/Traverse$TraverseLaw;
       4: areturn

  public scala.Option foldMap1Opt(java.lang.Object, scala.Function1, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1421               // InterfaceMethod scalaz/Foldable.foldMap1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Semigroup;)Lscala/Option;
       7: areturn

  public <G> scalaz.Foldable<?> compose(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1426               // InterfaceMethod scalaz/Foldable.compose$:(Lscalaz/Foldable;Lscalaz/Foldable;)Lscalaz/Foldable;
       5: areturn

  public <G> scalaz.Bifoldable<?> bicompose(scalaz.Bifoldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1431               // InterfaceMethod scalaz/Foldable.bicompose$:(Lscalaz/Foldable;Lscalaz/Bifoldable;)Lscalaz/Bifoldable;
       5: areturn

  public <G> scalaz.Foldable<?> product(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1433               // InterfaceMethod scalaz/Foldable.product$:(Lscalaz/Foldable;Lscalaz/Foldable;)Lscalaz/Foldable;
       5: areturn

  public <G> scalaz.Foldable1<?> product0(scalaz.Foldable1<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1438               // InterfaceMethod scalaz/Foldable.product0$:(Lscalaz/Foldable;Lscalaz/Foldable1;)Lscalaz/Foldable1;
       5: areturn

  public java.lang.Object foldRightM(java.lang.Object, scala.Function0, scala.Function2, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1445               // InterfaceMethod scalaz/Foldable.foldRightM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object foldLeftM(java.lang.Object, java.lang.Object, scala.Function2, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1451               // InterfaceMethod scalaz/Foldable.foldLeftM$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object foldMapM(java.lang.Object, scala.Function1, scalaz.Monoid, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1458               // InterfaceMethod scalaz/Foldable.foldMapM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monoid;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object fold(java.lang.Object, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1465               // InterfaceMethod scalaz/Foldable.fold$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public scala.Option fold1Opt(java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1471               // InterfaceMethod scalaz/Foldable.fold1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public java.lang.Object traverse_(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1476               // InterfaceMethod scalaz/Foldable.traverse_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object traverseU_(java.lang.Object, scala.Function1, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1481               // InterfaceMethod scalaz/Foldable.traverseU_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Unapply;)Ljava/lang/Object;
       7: areturn

  public scalaz.IndexedStateT traverseS_(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1486               // InterfaceMethod scalaz/Foldable.traverseS_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscalaz/IndexedStateT;
       6: areturn

  public java.lang.Object sequence_(java.lang.Object, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1491               // InterfaceMethod scalaz/Foldable.sequence_$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Applicative;)Ljava/lang/Object;
       6: areturn

  public scalaz.IndexedStateT sequenceS_(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1496               // InterfaceMethod scalaz/Foldable.sequenceS_$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/IndexedStateT;
       5: areturn

  public scalaz.Free sequenceF_(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1502               // InterfaceMethod scalaz/Foldable.sequenceF_$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/Free;
       5: areturn

  public final java.lang.Object foldr(java.lang.Object, scala.Function0, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1508               // InterfaceMethod scalaz/Foldable.foldr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public scala.Option foldMapRight1Opt(java.lang.Object, scala.Function1, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1514               // InterfaceMethod scalaz/Foldable.foldMapRight1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Lscala/Option;
       7: areturn

  public scala.Option foldRight1Opt(java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1520               // InterfaceMethod scalaz/Foldable.foldRight1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscala/Option;
       6: areturn

  public scala.Option foldr1Opt(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1526               // InterfaceMethod scalaz/Foldable.foldr1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public final java.lang.Object foldl(java.lang.Object, java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1532               // InterfaceMethod scalaz/Foldable.foldl$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public scala.Option foldMapLeft1Opt(java.lang.Object, scala.Function1, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1536               // InterfaceMethod scalaz/Foldable.foldMapLeft1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscala/Function2;)Lscala/Option;
       7: areturn

  public scala.Option foldLeft1Opt(java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1540               // InterfaceMethod scalaz/Foldable.foldLeft1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscala/Option;
       6: areturn

  public scala.Option foldl1Opt(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1544               // InterfaceMethod scalaz/Foldable.foldl1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public final java.lang.Object foldrM(java.lang.Object, scala.Function0, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1550               // InterfaceMethod scalaz/Foldable.foldrM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object foldlM(java.lang.Object, scala.Function0, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1554               // InterfaceMethod scalaz/Foldable.foldlM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object findMapM(java.lang.Object, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1560               // InterfaceMethod scalaz/Foldable.findMapM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public scala.Option findLeft(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1564               // InterfaceMethod scalaz/Foldable.findLeft$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public scala.Option findRight(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1568               // InterfaceMethod scalaz/Foldable.findRight$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/Option;
       6: areturn

  public final int count(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1574               // InterfaceMethod scalaz/Foldable.count$:(Lscalaz/Foldable;Ljava/lang/Object;)I
       5: ireturn

  public int length(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1578               // InterfaceMethod scalaz/Foldable.length$:(Lscalaz/Foldable;Ljava/lang/Object;)I
       5: ireturn

  public scala.Option index(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #1585               // InterfaceMethod scalaz/Foldable.index$:(Lscalaz/Foldable;Ljava/lang/Object;I)Lscala/Option;
       6: areturn

  public java.lang.Object indexOr(java.lang.Object, scala.Function0, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokestatic  #1591               // InterfaceMethod scalaz/Foldable.indexOr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function0;I)Ljava/lang/Object;
       7: areturn

  public scala.collection.immutable.List toList(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1597               // InterfaceMethod scalaz/Foldable.toList$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/List;
       5: areturn

  public scala.collection.immutable.Vector toVector(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1603               // InterfaceMethod scalaz/Foldable.toVector$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Vector;
       5: areturn

  public scala.collection.immutable.Set toSet(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1609               // InterfaceMethod scalaz/Foldable.toSet$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Set;
       5: areturn

  public scala.collection.immutable.Stream toStream(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1615               // InterfaceMethod scalaz/Foldable.toStream$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscala/collection/immutable/Stream;
       5: areturn

  public scalaz.IList toIList(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1621               // InterfaceMethod scalaz/Foldable.toIList$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/IList;
       5: areturn

  public scalaz.EphemeralStream toEphemeralStream(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1627               // InterfaceMethod scalaz/Foldable.toEphemeralStream$:(Lscalaz/Foldable;Ljava/lang/Object;)Lscalaz/EphemeralStream;
       5: areturn

  public boolean all(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1633               // InterfaceMethod scalaz/Foldable.all$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Z
       6: ireturn

  public java.lang.Object allM(java.lang.Object, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1637               // InterfaceMethod scalaz/Foldable.allM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public boolean any(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1641               // InterfaceMethod scalaz/Foldable.any$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Z
       6: ireturn

  public java.lang.Object anyM(java.lang.Object, scala.Function1, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1645               // InterfaceMethod scalaz/Foldable.anyM$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public int filterLength(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1651               // InterfaceMethod scalaz/Foldable.filterLength$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)I
       6: ireturn

  public scala.Option maximum(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1657               // InterfaceMethod scalaz/Foldable.maximum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public scala.Option maximumOf(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1664               // InterfaceMethod scalaz/Foldable.maximumOf$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scala.Option maximumBy(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1668               // InterfaceMethod scalaz/Foldable.maximumBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scala.Option minimum(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1673               // InterfaceMethod scalaz/Foldable.minimum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public scala.Option minimumOf(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1678               // InterfaceMethod scalaz/Foldable.minimumOf$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scala.Option minimumBy(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1683               // InterfaceMethod scalaz/Foldable.minimumBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scala.Option extrema(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1688               // InterfaceMethod scalaz/Foldable.extrema$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscala/Option;
       6: areturn

  public scala.Option extremaOf(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1693               // InterfaceMethod scalaz/Foldable.extremaOf$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public scala.Option extremaBy(java.lang.Object, scala.Function1, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1698               // InterfaceMethod scalaz/Foldable.extremaBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Order;)Lscala/Option;
       7: areturn

  public java.lang.Object sumr(java.lang.Object, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1703               // InterfaceMethod scalaz/Foldable.sumr$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public scala.Option sumr1Opt(java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1707               // InterfaceMethod scalaz/Foldable.sumr1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public java.lang.Object suml(java.lang.Object, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1711               // InterfaceMethod scalaz/Foldable.suml$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       6: areturn

  public scala.Option suml1Opt(java.lang.Object, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1715               // InterfaceMethod scalaz/Foldable.suml1Opt$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Semigroup;)Lscala/Option;
       6: areturn

  public java.lang.Object psumMap(java.lang.Object, scala.Function1, scalaz.PlusEmpty);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1721               // InterfaceMethod scalaz/Foldable.psumMap$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object psum(java.lang.Object, scalaz.PlusEmpty);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1727               // InterfaceMethod scalaz/Foldable.psum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       6: areturn

  public final java.lang.Object asum(java.lang.Object, scalaz.PlusEmpty);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1731               // InterfaceMethod scalaz/Foldable.asum$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object msuml(java.lang.Object, scalaz.PlusEmpty);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1735               // InterfaceMethod scalaz/Foldable.msuml$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/PlusEmpty;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object msumlU(java.lang.Object, scalaz.Unapply);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1740               // InterfaceMethod scalaz/Foldable.msumlU$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Unapply;)Ljava/lang/Object;
       6: areturn

  public long longDigits(java.lang.Object, scala.Predef$$less$colon$less);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1747               // InterfaceMethod scalaz/Foldable.longDigits$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Predef$$less$colon$less;)J
       6: lreturn

  public boolean empty(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1753               // InterfaceMethod scalaz/Foldable.empty$:(Lscalaz/Foldable;Ljava/lang/Object;)Z
       5: ireturn

  public boolean element(java.lang.Object, java.lang.Object, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1760               // InterfaceMethod scalaz/Foldable.element$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Equal;)Z
       7: ireturn

  public java.lang.Object intercalate(java.lang.Object, java.lang.Object, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1767               // InterfaceMethod scalaz/Foldable.intercalate$:(Lscalaz/Foldable;Ljava/lang/Object;Ljava/lang/Object;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public scala.collection.immutable.List splitWith(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1773               // InterfaceMethod scalaz/Foldable.splitWith$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/List;
       6: areturn

  public scalaz.IList splitBy(java.lang.Object, scala.Function1, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1780               // InterfaceMethod scalaz/Foldable.splitBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Equal;)Lscalaz/IList;
       7: areturn

  public scalaz.IList splitByRelation(java.lang.Object, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1786               // InterfaceMethod scalaz/Foldable.splitByRelation$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function2;)Lscalaz/IList;
       6: areturn

  public scala.collection.immutable.List selectSplit(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1790               // InterfaceMethod scalaz/Foldable.selectSplit$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/List;
       6: areturn

  public scalaz.IList distinct(java.lang.Object, scalaz.Order);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1796               // InterfaceMethod scalaz/Foldable.distinct$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Order;)Lscalaz/IList;
       6: areturn

  public scalaz.IList distinctE(java.lang.Object, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1802               // InterfaceMethod scalaz/Foldable.distinctE$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/Equal;)Lscalaz/IList;
       6: areturn

  public scalaz.IList distinctBy(java.lang.Object, scala.Function1, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1807               // InterfaceMethod scalaz/Foldable.distinctBy$:(Lscalaz/Foldable;Ljava/lang/Object;Lscala/Function1;Lscalaz/Equal;)Lscalaz/IList;
       7: areturn

  public java.lang.Object collapse(java.lang.Object, scalaz.ApplicativePlus);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1813               // InterfaceMethod scalaz/Foldable.collapse$:(Lscalaz/Foldable;Ljava/lang/Object;Lscalaz/ApplicativePlus;)Ljava/lang/Object;
       6: areturn

  public scalaz.Foldable<scalaz.Maybe>.FoldableLaw foldableLaw();
    Code:
       0: aload_0
       1: invokestatic  #1820               // InterfaceMethod scalaz/Foldable.foldableLaw$:(Lscalaz/Foldable;)Lscalaz/Foldable$FoldableLaw;
       4: areturn

  public java.lang.Object xmap(java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1826               // InterfaceMethod scalaz/Functor.xmap$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object apply(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1831               // InterfaceMethod scalaz/Functor.apply$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Function1<scalaz.Maybe<A>, scalaz.Maybe<B>> lift(scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1838               // InterfaceMethod scalaz/Functor.lift$:(Lscalaz/Functor;Lscala/Function1;)Lscala/Function1;
       5: areturn

  public java.lang.Object strengthL(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1843               // InterfaceMethod scalaz/Functor.strengthL$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object strengthR(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1847               // InterfaceMethod scalaz/Functor.strengthR$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object mapply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1851               // InterfaceMethod scalaz/Functor.mapply$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object fpair(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1856               // InterfaceMethod scalaz/Functor.fpair$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object fproduct(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1860               // InterfaceMethod scalaz/Functor.fproduct$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object void(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1864               // InterfaceMethod scalaz/Functor.void$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object counzip(scalaz.$bslash$div);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1870               // InterfaceMethod scalaz/Functor.counzip$:(Lscalaz/Functor;Lscalaz/$bslash$div;)Ljava/lang/Object;
       5: areturn

  public <G> scalaz.Functor<?> compose(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1876               // InterfaceMethod scalaz/Functor.compose$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public <G> scalaz.Contravariant<?> icompose(scalaz.Contravariant<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1883               // InterfaceMethod scalaz/Functor.icompose$:(Lscalaz/Functor;Lscalaz/Contravariant;)Lscalaz/Contravariant;
       5: areturn

  public <G> scalaz.Bifunctor<?> bicompose(scalaz.Bifunctor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1889               // InterfaceMethod scalaz/Functor.bicompose$:(Lscalaz/Functor;Lscalaz/Bifunctor;)Lscalaz/Bifunctor;
       5: areturn

  public <G> scalaz.Functor<?> product(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1892               // InterfaceMethod scalaz/Functor.product$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public java.lang.Object widen(java.lang.Object, scalaz.Liskov);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1899               // InterfaceMethod scalaz/Functor.widen$:(Lscalaz/Functor;Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public scalaz.Functor<scalaz.Maybe>.FunctorLaw functorLaw();
    Code:
       0: aload_0
       1: invokestatic  #1907               // InterfaceMethod scalaz/Functor.functorLaw$:(Lscalaz/Functor;)Lscalaz/Functor$FunctorLaw;
       4: areturn

  public java.lang.Object xmapb(java.lang.Object, scalaz.BijectionT);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1914               // InterfaceMethod scalaz/InvariantFunctor.xmapb$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/BijectionT;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object xmapi(java.lang.Object, scalaz.Isomorphisms$Iso);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1922               // InterfaceMethod scalaz/InvariantFunctor.xmapi$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/Isomorphisms$Iso;)Ljava/lang/Object;
       6: areturn

  public scalaz.InvariantFunctor<scalaz.Maybe>.InvariantFunctorLaw invariantFunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #1930               // InterfaceMethod scalaz/InvariantFunctor.invariantFunctorLaw$:(Lscalaz/InvariantFunctor;)Lscalaz/InvariantFunctor$InvariantFunctorLaw;
       4: areturn

  public scalaz.syntax.OptionalSyntax<scalaz.Maybe> optionalSyntax();
    Code:
       0: aload_0
       1: getfield      #1934               // Field optionalSyntax:Lscalaz/syntax/OptionalSyntax;
       4: areturn

  public void scalaz$Optional$_setter_$optionalSyntax_$eq(scalaz.syntax.OptionalSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1934               // Field optionalSyntax:Lscalaz/syntax/OptionalSyntax;
       5: return

  public scalaz.syntax.CobindSyntax<scalaz.Maybe> cobindSyntax();
    Code:
       0: aload_0
       1: getfield      #1942               // Field cobindSyntax:Lscalaz/syntax/CobindSyntax;
       4: areturn

  public void scalaz$Cobind$_setter_$cobindSyntax_$eq(scalaz.syntax.CobindSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1942               // Field cobindSyntax:Lscalaz/syntax/CobindSyntax;
       5: return

  public scalaz.syntax.IsEmptySyntax<scalaz.Maybe> isEmptySyntax();
    Code:
       0: aload_0
       1: getfield      #1949               // Field isEmptySyntax:Lscalaz/syntax/IsEmptySyntax;
       4: areturn

  public void scalaz$IsEmpty$_setter_$isEmptySyntax_$eq(scalaz.syntax.IsEmptySyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1949               // Field isEmptySyntax:Lscalaz/syntax/IsEmptySyntax;
       5: return

  public scalaz.syntax.AlignSyntax<scalaz.Maybe> alignSyntax();
    Code:
       0: aload_0
       1: getfield      #1956               // Field alignSyntax:Lscalaz/syntax/AlignSyntax;
       4: areturn

  public void scalaz$Align$_setter_$alignSyntax_$eq(scalaz.syntax.AlignSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1956               // Field alignSyntax:Lscalaz/syntax/AlignSyntax;
       5: return

  public scalaz.syntax.UnzipSyntax<scalaz.Maybe> unzipSyntax();
    Code:
       0: aload_0
       1: getfield      #1963               // Field unzipSyntax:Lscalaz/syntax/UnzipSyntax;
       4: areturn

  public void scalaz$Unzip$_setter_$unzipSyntax_$eq(scalaz.syntax.UnzipSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1963               // Field unzipSyntax:Lscalaz/syntax/UnzipSyntax;
       5: return

  public scalaz.syntax.ZipSyntax<scalaz.Maybe> zipSyntax();
    Code:
       0: aload_0
       1: getfield      #1970               // Field zipSyntax:Lscalaz/syntax/ZipSyntax;
       4: areturn

  public void scalaz$Zip$_setter_$zipSyntax_$eq(scalaz.syntax.ZipSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1970               // Field zipSyntax:Lscalaz/syntax/ZipSyntax;
       5: return

  public scalaz.syntax.CozipSyntax<scalaz.Maybe> cozipSyntax();
    Code:
       0: aload_0
       1: getfield      #1977               // Field cozipSyntax:Lscalaz/syntax/CozipSyntax;
       4: areturn

  public void scalaz$Cozip$_setter_$cozipSyntax_$eq(scalaz.syntax.CozipSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1977               // Field cozipSyntax:Lscalaz/syntax/CozipSyntax;
       5: return

  public scalaz.syntax.BindRecSyntax<scalaz.Maybe> bindRecSyntax();
    Code:
       0: aload_0
       1: getfield      #1984               // Field bindRecSyntax:Lscalaz/syntax/BindRecSyntax;
       4: areturn

  public void scalaz$BindRec$_setter_$bindRecSyntax_$eq(scalaz.syntax.BindRecSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1984               // Field bindRecSyntax:Lscalaz/syntax/BindRecSyntax;
       5: return

  public scalaz.syntax.AltSyntax<scalaz.Maybe> altSyntax();
    Code:
       0: aload_0
       1: getfield      #1991               // Field altSyntax:Lscalaz/syntax/AltSyntax;
       4: areturn

  public void scalaz$Alt$_setter_$altSyntax_$eq(scalaz.syntax.AltSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1991               // Field altSyntax:Lscalaz/syntax/AltSyntax;
       5: return

  public scalaz.syntax.InvariantAltSyntax<scalaz.Maybe> invariantAltSyntax();
    Code:
       0: aload_0
       1: getfield      #1998               // Field invariantAltSyntax:Lscalaz/syntax/InvariantAltSyntax;
       4: areturn

  public void scalaz$InvariantAlt$_setter_$invariantAltSyntax_$eq(scalaz.syntax.InvariantAltSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1998               // Field invariantAltSyntax:Lscalaz/syntax/InvariantAltSyntax;
       5: return

  public scalaz.syntax.MonadPlusSyntax<scalaz.Maybe> monadPlusSyntax();
    Code:
       0: aload_0
       1: getfield      #2005               // Field monadPlusSyntax:Lscalaz/syntax/MonadPlusSyntax;
       4: areturn

  public void scalaz$MonadPlus$_setter_$monadPlusSyntax_$eq(scalaz.syntax.MonadPlusSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2005               // Field monadPlusSyntax:Lscalaz/syntax/MonadPlusSyntax;
       5: return

  public scalaz.syntax.ApplicativePlusSyntax<scalaz.Maybe> applicativePlusSyntax();
    Code:
       0: aload_0
       1: getfield      #2012               // Field applicativePlusSyntax:Lscalaz/syntax/ApplicativePlusSyntax;
       4: areturn

  public void scalaz$ApplicativePlus$_setter_$applicativePlusSyntax_$eq(scalaz.syntax.ApplicativePlusSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2012               // Field applicativePlusSyntax:Lscalaz/syntax/ApplicativePlusSyntax;
       5: return

  public scalaz.syntax.PlusEmptySyntax<scalaz.Maybe> plusEmptySyntax();
    Code:
       0: aload_0
       1: getfield      #2019               // Field plusEmptySyntax:Lscalaz/syntax/PlusEmptySyntax;
       4: areturn

  public void scalaz$PlusEmpty$_setter_$plusEmptySyntax_$eq(scalaz.syntax.PlusEmptySyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2019               // Field plusEmptySyntax:Lscalaz/syntax/PlusEmptySyntax;
       5: return

  public scalaz.syntax.PlusSyntax<scalaz.Maybe> plusSyntax();
    Code:
       0: aload_0
       1: getfield      #2026               // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       4: areturn

  public void scalaz$Plus$_setter_$plusSyntax_$eq(scalaz.syntax.PlusSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2026               // Field plusSyntax:Lscalaz/syntax/PlusSyntax;
       5: return

  public scalaz.syntax.MonadSyntax<scalaz.Maybe> monadSyntax();
    Code:
       0: aload_0
       1: getfield      #2033               // Field monadSyntax:Lscalaz/syntax/MonadSyntax;
       4: areturn

  public void scalaz$Monad$_setter_$monadSyntax_$eq(scalaz.syntax.MonadSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2033               // Field monadSyntax:Lscalaz/syntax/MonadSyntax;
       5: return

  public scalaz.syntax.BindSyntax<scalaz.Maybe> bindSyntax();
    Code:
       0: aload_0
       1: getfield      #2040               // Field bindSyntax:Lscalaz/syntax/BindSyntax;
       4: areturn

  public void scalaz$Bind$_setter_$bindSyntax_$eq(scalaz.syntax.BindSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2040               // Field bindSyntax:Lscalaz/syntax/BindSyntax;
       5: return

  public scalaz.syntax.ApplicativeSyntax<scalaz.Maybe> applicativeSyntax();
    Code:
       0: aload_0
       1: getfield      #2047               // Field applicativeSyntax:Lscalaz/syntax/ApplicativeSyntax;
       4: areturn

  public void scalaz$Applicative$_setter_$applicativeSyntax_$eq(scalaz.syntax.ApplicativeSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2047               // Field applicativeSyntax:Lscalaz/syntax/ApplicativeSyntax;
       5: return

  public scalaz.syntax.InvariantApplicativeSyntax<scalaz.Maybe> invariantApplicativeSyntax();
    Code:
       0: aload_0
       1: getfield      #2054               // Field invariantApplicativeSyntax:Lscalaz/syntax/InvariantApplicativeSyntax;
       4: areturn

  public void scalaz$InvariantApplicative$_setter_$invariantApplicativeSyntax_$eq(scalaz.syntax.InvariantApplicativeSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2054               // Field invariantApplicativeSyntax:Lscalaz/syntax/InvariantApplicativeSyntax;
       5: return

  public scalaz.syntax.ApplySyntax<scalaz.Maybe> applySyntax();
    Code:
       0: aload_0
       1: getfield      #2061               // Field applySyntax:Lscalaz/syntax/ApplySyntax;
       4: areturn

  public void scalaz$Apply$_setter_$applySyntax_$eq(scalaz.syntax.ApplySyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2061               // Field applySyntax:Lscalaz/syntax/ApplySyntax;
       5: return

  public scalaz.syntax.TraverseSyntax<scalaz.Maybe> traverseSyntax();
    Code:
       0: aload_0
       1: getfield      #2068               // Field traverseSyntax:Lscalaz/syntax/TraverseSyntax;
       4: areturn

  public void scalaz$Traverse$_setter_$traverseSyntax_$eq(scalaz.syntax.TraverseSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2068               // Field traverseSyntax:Lscalaz/syntax/TraverseSyntax;
       5: return

  public scalaz.syntax.FoldableSyntax<scalaz.Maybe> foldableSyntax();
    Code:
       0: aload_0
       1: getfield      #2075               // Field foldableSyntax:Lscalaz/syntax/FoldableSyntax;
       4: areturn

  public void scalaz$Foldable$_setter_$foldableSyntax_$eq(scalaz.syntax.FoldableSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2075               // Field foldableSyntax:Lscalaz/syntax/FoldableSyntax;
       5: return

  public scalaz.syntax.FunctorSyntax<scalaz.Maybe> functorSyntax();
    Code:
       0: aload_0
       1: getfield      #2082               // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       4: areturn

  public void scalaz$Functor$_setter_$functorSyntax_$eq(scalaz.syntax.FunctorSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2082               // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       5: return

  public scalaz.syntax.InvariantFunctorSyntax<scalaz.Maybe> invariantFunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #2089               // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       4: areturn

  public void scalaz$InvariantFunctor$_setter_$invariantFunctorSyntax_$eq(scalaz.syntax.InvariantFunctorSyntax<scalaz.Maybe>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2089               // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       5: return

  public <A> scalaz.Maybe<A> point(scala.Function0<A>);
    Code:
       0: getstatic     #2101               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: aload_1
       4: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       9: invokevirtual #2110               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
      12: areturn

  public <A, B> scalaz.Maybe<B> ap(scala.Function0<scalaz.Maybe<A>>, scala.Function0<scalaz.Maybe<scala.Function1<A, B>>>);
    Code:
       0: aload_2
       1: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #105                // class scalaz/Maybe
       9: dup
      10: ifnonnull     15
      13: aconst_null
      14: athrow
      15: astore_3
      16: aload_3
      17: instanceof    #111                // class scalaz/Maybe$Just
      20: ifeq          47
      23: aload_3
      24: checkcast     #111                // class scalaz/Maybe$Just
      27: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      30: checkcast     #2118               // class scala/Function1
      33: astore        5
      35: aload_0
      36: aload_1
      37: aload         5
      39: invokestatic  #2122               // Method $anonfun$ap$1:(Lscalaz/MaybeInstances$$anon$11;Lscala/Function0;Lscala/Function1;)Lscalaz/Maybe;
      42: astore        4
      44: goto          72
      47: aload_3
      48: instanceof    #103                // class scalaz/Maybe$Empty
      51: ifeq          63
      54: aload_0
      55: invokestatic  #2126               // Method $anonfun$ap$4:(Lscalaz/MaybeInstances$$anon$11;)Lscalaz/Maybe;
      58: astore        4
      60: goto          72
      63: new           #2128               // class scala/MatchError
      66: dup
      67: aload_3
      68: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      71: athrow
      72: aload         4
      74: areturn

  public <A, B> scalaz.Maybe<B> bind(scalaz.Maybe<A>, scala.Function1<A, scalaz.Maybe<B>>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #111                // class scalaz/Maybe$Just
      10: ifeq          34
      13: aload_1
      14: checkcast     #111                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore        4
      22: aload_2
      23: aload         4
      25: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      30: astore_3
      31: goto          57
      34: aload_1
      35: instanceof    #103                // class scalaz/Maybe$Empty
      38: ifeq          48
      41: invokestatic  #2143               // Method scalaz/Maybe.$anonfun$flatMap$1:()Lscalaz/Maybe;
      44: astore_3
      45: goto          57
      48: new           #2128               // class scala/MatchError
      51: dup
      52: aload_1
      53: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      56: athrow
      57: aload_3
      58: checkcast     #105                // class scalaz/Maybe
      61: areturn

  public <A, B> scalaz.Maybe<B> tailrecM(A, scala.Function1<A, scalaz.Maybe<scalaz.$bslash$div<A, B>>>);
    Code:
       0: iconst_0
       1: istore        4
       3: aconst_null
       4: astore        5
       6: aload_2
       7: aload_1
       8: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #105                // class scalaz/Maybe
      16: astore        6
      18: aload         6
      20: instanceof    #103                // class scalaz/Maybe$Empty
      23: ifeq          36
      26: getstatic     #2149               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      29: invokevirtual #2151               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      32: astore_3
      33: goto          142
      36: aload         6
      38: instanceof    #111                // class scalaz/Maybe$Just
      41: ifeq          86
      44: iconst_1
      45: istore        4
      47: aload         6
      49: checkcast     #111                // class scalaz/Maybe$Just
      52: astore        5
      54: aload         5
      56: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      59: checkcast     #2153               // class scalaz/$bslash$div
      62: astore        7
      64: aload         7
      66: instanceof    #2155               // class scalaz/$minus$bslash$div
      69: ifeq          86
      72: aload         7
      74: checkcast     #2155               // class scalaz/$minus$bslash$div
      77: invokevirtual #2157               // Method scalaz/$minus$bslash$div.a:()Ljava/lang/Object;
      80: aload_2
      81: astore_2
      82: astore_1
      83: goto          0
      86: iload         4
      88: ifeq          132
      91: aload         5
      93: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      96: checkcast     #2153               // class scalaz/$bslash$div
      99: astore        8
     101: aload         8
     103: instanceof    #2159               // class scalaz/$bslash$div$minus
     106: ifeq          132
     109: aload         8
     111: checkcast     #2159               // class scalaz/$bslash$div$minus
     114: invokevirtual #2161               // Method scalaz/$bslash$div$minus.b:()Ljava/lang/Object;
     117: astore        9
     119: new           #111                // class scalaz/Maybe$Just
     122: dup
     123: aload         9
     125: invokespecial #2162               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
     128: astore_3
     129: goto          142
     132: new           #2128               // class scala/MatchError
     135: dup
     136: aload         6
     138: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     141: athrow
     142: aload_3
     143: areturn

  public <A, B> scalaz.Maybe<B> map(scalaz.Maybe<A>, scala.Function1<A, B>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_2
       7: invokedynamic #2184,  0           // InvokeDynamic #0:apply:()Lscala/Function1;
      12: invokeinterface #2187,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      17: astore_3
      18: aload_1
      19: instanceof    #111                // class scalaz/Maybe$Just
      22: ifeq          47
      25: aload_1
      26: checkcast     #111                // class scalaz/Maybe$Just
      29: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      32: astore        5
      34: aload_3
      35: aload         5
      37: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      42: astore        4
      44: goto          71
      47: aload_1
      48: instanceof    #103                // class scalaz/Maybe$Empty
      51: ifeq          62
      54: invokestatic  #2190               // Method scalaz/Maybe.$anonfun$map$2:()Lscalaz/Maybe;
      57: astore        4
      59: goto          71
      62: new           #2128               // class scala/MatchError
      65: dup
      66: aload_1
      67: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      70: athrow
      71: aload         4
      73: checkcast     #105                // class scalaz/Maybe
      76: areturn

  public <F, A, B> F traverseImpl(scalaz.Maybe<A>, scala.Function1<A, F>, scalaz.Applicative<F>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #111                // class scalaz/Maybe$Just
      10: ifeq          34
      13: aload_1
      14: checkcast     #111                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore        5
      22: aload_3
      23: aload_2
      24: aload         5
      26: invokestatic  #2199               // Method $anonfun$traverseImpl$1:(Lscalaz/Applicative;Lscala/Function1;Ljava/lang/Object;)Ljava/lang/Object;
      29: astore        4
      31: goto          60
      34: aload_1
      35: instanceof    #103                // class scalaz/Maybe$Empty
      38: ifeq          51
      41: aload_0
      42: aload_3
      43: invokestatic  #2203               // Method $anonfun$traverseImpl$3:(Lscalaz/MaybeInstances$$anon$11;Lscalaz/Applicative;)Ljava/lang/Object;
      46: astore        4
      48: goto          60
      51: new           #2128               // class scala/MatchError
      54: dup
      55: aload_1
      56: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      59: athrow
      60: aload         4
      62: areturn

  public <A> scalaz.Maybe<A> empty();
    Code:
       0: getstatic     #2101               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: invokevirtual #2207               // Method scalaz/Maybe$.empty:()Lscalaz/Maybe;
       6: areturn

  public <A> scalaz.Maybe<A> plus(scalaz.Maybe<A>, scala.Function0<scalaz.Maybe<A>>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #111                // class scalaz/Maybe$Just
      10: ifeq          32
      13: aload_1
      14: checkcast     #111                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore        4
      22: aload_1
      23: aload         4
      25: invokestatic  #2214               // Method scalaz/Maybe.$anonfun$orElse$1:(Lscalaz/Maybe;Ljava/lang/Object;)Lscalaz/Maybe;
      28: astore_3
      29: goto          58
      32: aload_1
      33: instanceof    #103                // class scalaz/Maybe$Empty
      36: ifeq          49
      39: aload_2
      40: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      45: astore_3
      46: goto          58
      49: new           #2128               // class scala/MatchError
      52: dup
      53: aload_1
      54: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      57: athrow
      58: aload_3
      59: checkcast     #105                // class scalaz/Maybe
      62: areturn

  public <S, A> scalaz.Maybe<scalaz.Maybe<A>> unfoldrPsumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<scalaz.Maybe<A>, S>>>);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #105                // class scalaz/Maybe
      10: aload_0
      11: aload_2
      12: invokedynamic #2227,  0           // InvokeDynamic #1:apply:(Lscalaz/MaybeInstances$$anon$11;Lscala/Function1;)Lscala/Function1;
      17: astore        4
      19: dup
      20: ifnonnull     25
      23: aconst_null
      24: athrow
      25: astore_3
      26: aload         4
      28: invokedynamic #2184,  0           // InvokeDynamic #0:apply:()Lscala/Function1;
      33: invokeinterface #2187,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      38: astore        5
      40: aload_3
      41: instanceof    #111                // class scalaz/Maybe$Just
      44: ifeq          70
      47: aload_3
      48: checkcast     #111                // class scalaz/Maybe$Just
      51: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      54: astore        7
      56: aload         5
      58: aload         7
      60: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      65: astore        6
      67: goto          94
      70: aload_3
      71: instanceof    #103                // class scalaz/Maybe$Empty
      74: ifeq          85
      77: invokestatic  #2190               // Method scalaz/Maybe.$anonfun$map$2:()Lscalaz/Maybe;
      80: astore        6
      82: goto          94
      85: new           #2128               // class scala/MatchError
      88: dup
      89: aload_3
      90: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      93: athrow
      94: aload         6
      96: checkcast     #105                // class scalaz/Maybe
      99: areturn

  public <S, A, B> scalaz.Maybe<scalaz.Maybe<B>> unfoldrOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<scalaz.Maybe<A>, S>>>, scalaz.Reducer<A, B>);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #105                // class scalaz/Maybe
      10: aload_0
      11: aload_3
      12: aload_2
      13: invokedynamic #2240,  0           // InvokeDynamic #2:apply:(Lscalaz/MaybeInstances$$anon$11;Lscalaz/Reducer;Lscala/Function1;)Lscala/Function1;
      18: astore        5
      20: dup
      21: ifnonnull     26
      24: aconst_null
      25: athrow
      26: astore        4
      28: aload         5
      30: invokedynamic #2184,  0           // InvokeDynamic #0:apply:()Lscala/Function1;
      35: invokeinterface #2187,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      40: astore        6
      42: aload         4
      44: instanceof    #111                // class scalaz/Maybe$Just
      47: ifeq          74
      50: aload         4
      52: checkcast     #111                // class scalaz/Maybe$Just
      55: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      58: astore        8
      60: aload         6
      62: aload         8
      64: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      69: astore        7
      71: goto          100
      74: aload         4
      76: instanceof    #103                // class scalaz/Maybe$Empty
      79: ifeq          90
      82: invokestatic  #2190               // Method scalaz/Maybe.$anonfun$map$2:()Lscalaz/Maybe;
      85: astore        7
      87: goto          100
      90: new           #2128               // class scala/MatchError
      93: dup
      94: aload         4
      96: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      99: athrow
     100: aload         7
     102: checkcast     #105                // class scalaz/Maybe
     105: areturn

  public <A, B> B foldRight(scalaz.Maybe<A>, scala.Function0<B>, scala.Function2<A, scala.Function0<B>, B>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #111                // class scalaz/Maybe$Just
      10: ifeq          34
      13: aload_1
      14: checkcast     #111                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore        5
      22: aload_3
      23: aload_2
      24: aload         5
      26: invokestatic  #2249               // Method $anonfun$foldRight$1:(Lscala/Function2;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      29: astore        4
      31: goto          61
      34: aload_1
      35: instanceof    #103                // class scalaz/Maybe$Empty
      38: ifeq          52
      41: aload_2
      42: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      47: astore        4
      49: goto          61
      52: new           #2128               // class scala/MatchError
      55: dup
      56: aload_1
      57: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      60: athrow
      61: aload         4
      63: areturn

  public <A, B> scalaz.$bslash$div<scalaz.Maybe<A>, scalaz.Maybe<B>> cozip(scalaz.Maybe<scalaz.$bslash$div<A, B>>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #111                // class scalaz/Maybe$Just
      10: ifeq          30
      13: aload_1
      14: checkcast     #111                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: checkcast     #2153               // class scalaz/$bslash$div
      23: invokestatic  #2256               // Method $anonfun$cozip$1:(Lscalaz/$bslash$div;)Lscalaz/$bslash$div;
      26: astore_2
      27: goto          54
      30: aload_1
      31: instanceof    #103                // class scalaz/Maybe$Empty
      34: ifeq          45
      37: aload_0
      38: invokestatic  #2260               // Method $anonfun$cozip$4:(Lscalaz/MaybeInstances$$anon$11;)Lscalaz/$bslash$div;
      41: astore_2
      42: goto          54
      45: new           #2128               // class scala/MatchError
      48: dup
      49: aload_1
      50: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      53: athrow
      54: aload_2
      55: areturn

  public <A, B> scalaz.Maybe<scala.Tuple2<A, B>> zip(scala.Function0<scalaz.Maybe<A>>, scala.Function0<scalaz.Maybe<B>>);
    Code:
       0: aload_1
       1: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #105                // class scalaz/Maybe
       9: aload_2
      10: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      15: checkcast     #105                // class scalaz/Maybe
      18: invokevirtual #2265               // Method scalaz/Maybe.zip:(Lscalaz/Maybe;)Lscalaz/Maybe;
      21: areturn

  public <A, B> scala.Tuple2<scalaz.Maybe<A>, scalaz.Maybe<B>> unzip(scalaz.Maybe<scala.Tuple2<A, B>>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #111                // class scalaz/Maybe$Just
      10: ifeq          30
      13: aload_1
      14: checkcast     #111                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: checkcast     #2270               // class scala/Tuple2
      23: invokestatic  #2274               // Method $anonfun$unzip$1:(Lscala/Tuple2;)Lscala/Tuple2;
      26: astore_2
      27: goto          54
      30: aload_1
      31: instanceof    #103                // class scalaz/Maybe$Empty
      34: ifeq          45
      37: aload_0
      38: invokestatic  #2278               // Method $anonfun$unzip$2:(Lscalaz/MaybeInstances$$anon$11;)Lscala/Tuple2;
      41: astore_2
      42: goto          54
      45: new           #2128               // class scala/MatchError
      48: dup
      49: aload_1
      50: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      53: athrow
      54: aload_2
      55: areturn

  public <A, B, C> scala.Function2<scalaz.Maybe<A>, scalaz.Maybe<B>, scalaz.Maybe<C>> alignWith(scala.Function1<scalaz.$bslash$amp$div<A, B>, C>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #2292,  0           // InvokeDynamic #3:apply:(Lscalaz/MaybeInstances$$anon$11;Lscala/Function1;)Lscala/Function2;
       7: areturn

  public <A, B> scalaz.Maybe<B> cobind(scalaz.Maybe<A>, scala.Function1<scalaz.Maybe<A>, B>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: aload_2
       8: invokedynamic #2303,  0           // InvokeDynamic #4:apply:(Lscalaz/Maybe;Lscala/Function1;)Lscala/Function1;
      13: invokedynamic #2184,  0           // InvokeDynamic #0:apply:()Lscala/Function1;
      18: invokeinterface #2187,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      23: astore_3
      24: aload_1
      25: instanceof    #111                // class scalaz/Maybe$Just
      28: ifeq          53
      31: aload_1
      32: checkcast     #111                // class scalaz/Maybe$Just
      35: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      38: astore        5
      40: aload_3
      41: aload         5
      43: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      48: astore        4
      50: goto          77
      53: aload_1
      54: instanceof    #103                // class scalaz/Maybe$Empty
      57: ifeq          68
      60: invokestatic  #2190               // Method scalaz/Maybe.$anonfun$map$2:()Lscalaz/Maybe;
      63: astore        4
      65: goto          77
      68: new           #2128               // class scala/MatchError
      71: dup
      72: aload_1
      73: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      76: athrow
      77: aload         4
      79: checkcast     #105                // class scalaz/Maybe
      82: areturn

  public <A> scalaz.Maybe<scalaz.Maybe<A>> cojoin(scalaz.Maybe<A>);
    Code:
       0: aload_1
       1: invokevirtual #2309               // Method scalaz/Maybe.cojoin:()Lscalaz/Maybe;
       4: areturn

  public <B, A> scalaz.$bslash$div<scalaz.Maybe<B>, A> pextract(scalaz.Maybe<A>);
    Code:
       0: aload_1
       1: getstatic     #2316               // Field scalaz/$bslash$div$.MODULE$:Lscalaz/$bslash$div$;
       4: invokevirtual #2319               // Method scalaz/$bslash$div$.right:()Lscala/Function1;
       7: astore_2
       8: ifnonnull     13
      11: aconst_null
      12: athrow
      13: aload_1
      14: instanceof    #111                // class scalaz/Maybe$Just
      17: ifeq          41
      20: aload_1
      21: checkcast     #111                // class scalaz/Maybe$Just
      24: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      27: astore        4
      29: aload_2
      30: aload         4
      32: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      37: astore_3
      38: goto          65
      41: aload_1
      42: instanceof    #103                // class scalaz/Maybe$Empty
      45: ifeq          56
      48: aload_0
      49: invokestatic  #2322               // Method $anonfun$pextract$1:(Lscalaz/MaybeInstances$$anon$11;)Lscalaz/$bslash$div;
      52: astore_3
      53: goto          65
      56: new           #2128               // class scala/MatchError
      59: dup
      60: aload_1
      61: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      64: athrow
      65: aload_3
      66: checkcast     #2153               // class scalaz/$bslash$div
      69: areturn

  public <A> boolean isDefined(scalaz.Maybe<A>);
    Code:
       0: aload_1
       1: invokevirtual #2330               // Method scalaz/Maybe.isJust:()Z
       4: ireturn

  public <A> scala.Option<A> toOption(scalaz.Maybe<A>);
    Code:
       0: aload_1
       1: invokevirtual #2336               // Method scalaz/Maybe.toOption:()Lscala/Option;
       4: areturn

  public <A> scalaz.Maybe<A> toMaybe(scalaz.Maybe<A>);
    Code:
       0: aload_1
       1: areturn

  public <A> scalaz.Maybe<A> filter(scalaz.Maybe<A>, scala.Function1<A, java.lang.Object>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #111                // class scalaz/Maybe$Just
      10: ifeq          33
      13: aload_1
      14: checkcast     #111                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore        4
      22: aload_1
      23: aload_2
      24: aload         4
      26: invokestatic  #2344               // Method scalaz/Maybe.$anonfun$filter$1:(Lscalaz/Maybe;Lscala/Function1;Ljava/lang/Object;)Lscalaz/Maybe;
      29: astore_3
      30: goto          56
      33: aload_1
      34: instanceof    #103                // class scalaz/Maybe$Empty
      37: ifeq          47
      40: invokestatic  #2143               // Method scalaz/Maybe.$anonfun$flatMap$1:()Lscalaz/Maybe;
      43: astore_3
      44: goto          56
      47: new           #2128               // class scala/MatchError
      50: dup
      51: aload_1
      52: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      55: athrow
      56: aload_3
      57: areturn

  public <A> scalaz.Maybe<A> alt(scala.Function0<scalaz.Maybe<A>>, scala.Function0<scalaz.Maybe<A>>);
    Code:
       0: aload_1
       1: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #105                // class scalaz/Maybe
       9: dup
      10: ifnonnull     15
      13: aconst_null
      14: athrow
      15: astore_3
      16: aload_3
      17: instanceof    #111                // class scalaz/Maybe$Just
      20: ifeq          43
      23: aload_3
      24: checkcast     #111                // class scalaz/Maybe$Just
      27: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      30: astore        5
      32: aload_3
      33: aload         5
      35: invokestatic  #2214               // Method scalaz/Maybe.$anonfun$orElse$1:(Lscalaz/Maybe;Ljava/lang/Object;)Lscalaz/Maybe;
      38: astore        4
      40: goto          70
      43: aload_3
      44: instanceof    #103                // class scalaz/Maybe$Empty
      47: ifeq          61
      50: aload_2
      51: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      56: astore        4
      58: goto          70
      61: new           #2128               // class scala/MatchError
      64: dup
      65: aload_3
      66: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      69: athrow
      70: aload         4
      72: checkcast     #105                // class scalaz/Maybe
      75: areturn

  public <Z, A1, A2> scalaz.Maybe<Z> altly2(scala.Function0<scalaz.Maybe<A1>>, scala.Function0<scalaz.Maybe<A2>>, scala.Function1<scalaz.$bslash$div<A1, A2>, Z>);
    Code:
       0: aload_1
       1: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #105                // class scalaz/Maybe
       9: astore        6
      11: aload         6
      13: instanceof    #103                // class scalaz/Maybe$Empty
      16: ifeq          150
      19: aload_2
      20: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      25: checkcast     #105                // class scalaz/Maybe
      28: astore        7
      30: aload         7
      32: instanceof    #103                // class scalaz/Maybe$Empty
      35: ifeq          49
      38: getstatic     #2149               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      41: invokevirtual #2151               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      44: astore        5
      46: goto          143
      49: aload         7
      51: aload_3
      52: invokedynamic #2357,  0           // InvokeDynamic #5:apply:(Lscala/Function1;)Lscala/Function1;
      57: astore        8
      59: ifnonnull     64
      62: aconst_null
      63: athrow
      64: aload         8
      66: invokedynamic #2184,  0           // InvokeDynamic #0:apply:()Lscala/Function1;
      71: invokeinterface #2187,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      76: astore        9
      78: aload         7
      80: instanceof    #111                // class scalaz/Maybe$Just
      83: ifeq          110
      86: aload         7
      88: checkcast     #111                // class scalaz/Maybe$Just
      91: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      94: astore        11
      96: aload         9
      98: aload         11
     100: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     105: astore        10
     107: goto          136
     110: aload         7
     112: instanceof    #103                // class scalaz/Maybe$Empty
     115: ifeq          126
     118: invokestatic  #2190               // Method scalaz/Maybe.$anonfun$map$2:()Lscalaz/Maybe;
     121: astore        10
     123: goto          136
     126: new           #2128               // class scala/MatchError
     129: dup
     130: aload         7
     132: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     135: athrow
     136: aload         10
     138: checkcast     #105                // class scalaz/Maybe
     141: astore        5
     143: aload         5
     145: astore        4
     147: goto          244
     150: aload         6
     152: aload_3
     153: invokedynamic #2362,  0           // InvokeDynamic #6:apply:(Lscala/Function1;)Lscala/Function1;
     158: astore        12
     160: ifnonnull     165
     163: aconst_null
     164: athrow
     165: aload         12
     167: invokedynamic #2184,  0           // InvokeDynamic #0:apply:()Lscala/Function1;
     172: invokeinterface #2187,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
     177: astore        13
     179: aload         6
     181: instanceof    #111                // class scalaz/Maybe$Just
     184: ifeq          211
     187: aload         6
     189: checkcast     #111                // class scalaz/Maybe$Just
     192: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
     195: astore        15
     197: aload         13
     199: aload         15
     201: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     206: astore        14
     208: goto          237
     211: aload         6
     213: instanceof    #103                // class scalaz/Maybe$Empty
     216: ifeq          227
     219: invokestatic  #2190               // Method scalaz/Maybe.$anonfun$map$2:()Lscalaz/Maybe;
     222: astore        14
     224: goto          237
     227: new           #2128               // class scala/MatchError
     230: dup
     231: aload         6
     233: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     236: athrow
     237: aload         14
     239: checkcast     #105                // class scalaz/Maybe
     242: astore        4
     244: aload         4
     246: areturn

  public <A, B, C> scalaz.Maybe<C> apply2(scala.Function0<scalaz.Maybe<A>>, scala.Function0<scalaz.Maybe<B>>, scala.Function2<A, B, C>);
    Code:
       0: aload_1
       1: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #105                // class scalaz/Maybe
       9: dup
      10: ifnonnull     15
      13: aconst_null
      14: athrow
      15: astore        4
      17: aload         4
      19: instanceof    #111                // class scalaz/Maybe$Just
      22: ifeq          47
      25: aload         4
      27: checkcast     #111                // class scalaz/Maybe$Just
      30: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      33: astore        6
      35: aload_2
      36: aload_3
      37: aload         6
      39: invokestatic  #2369               // Method $anonfun$apply2$1:(Lscala/Function0;Lscala/Function2;Ljava/lang/Object;)Lscalaz/Maybe;
      42: astore        5
      44: goto          73
      47: aload         4
      49: instanceof    #103                // class scalaz/Maybe$Empty
      52: ifeq          63
      55: invokestatic  #2143               // Method scalaz/Maybe.$anonfun$flatMap$1:()Lscalaz/Maybe;
      58: astore        5
      60: goto          73
      63: new           #2128               // class scala/MatchError
      66: dup
      67: aload         4
      69: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      72: athrow
      73: aload         5
      75: areturn

  public scalaz.Apply flip();
    Code:
       0: aload_0
       1: invokevirtual #2373               // Method flip:()Lscalaz/Applicative;
       4: areturn

  public scalaz.Plus compose();
    Code:
       0: aload_0
       1: invokevirtual #2376               // Method compose:()Lscalaz/PlusEmpty;
       4: areturn

  public scalaz.Applicative compose(scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2378               // Method compose:(Lscalaz/Applicative;)Lscalaz/ApplicativePlus;
       5: areturn

  public java.lang.Object apply2(scala.Function0, scala.Function0, scala.Function2);
    Code:
       0: aload_1
       1: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #105                // class scalaz/Maybe
       9: dup
      10: ifnonnull     15
      13: aconst_null
      14: athrow
      15: astore        4
      17: aload         4
      19: instanceof    #111                // class scalaz/Maybe$Just
      22: ifeq          47
      25: aload         4
      27: checkcast     #111                // class scalaz/Maybe$Just
      30: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      33: astore        6
      35: aload_2
      36: aload_3
      37: aload         6
      39: invokestatic  #2369               // Method $anonfun$apply2$1:(Lscala/Function0;Lscala/Function2;Ljava/lang/Object;)Lscalaz/Maybe;
      42: astore        5
      44: goto          73
      47: aload         4
      49: instanceof    #103                // class scalaz/Maybe$Empty
      52: ifeq          63
      55: invokestatic  #2143               // Method scalaz/Maybe.$anonfun$flatMap$1:()Lscalaz/Maybe;
      58: astore        5
      60: goto          73
      63: new           #2128               // class scala/MatchError
      66: dup
      67: aload         4
      69: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      72: athrow
      73: aload         5
      75: areturn

  public java.lang.Object altly2(scala.Function0, scala.Function0, scala.Function1);
    Code:
       0: aload_1
       1: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #105                // class scalaz/Maybe
       9: astore        6
      11: aload         6
      13: instanceof    #103                // class scalaz/Maybe$Empty
      16: ifeq          150
      19: aload_2
      20: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      25: checkcast     #105                // class scalaz/Maybe
      28: astore        7
      30: aload         7
      32: instanceof    #103                // class scalaz/Maybe$Empty
      35: ifeq          49
      38: getstatic     #2149               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      41: invokevirtual #2151               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      44: astore        5
      46: goto          143
      49: aload         7
      51: aload_3
      52: invokedynamic #2357,  0           // InvokeDynamic #5:apply:(Lscala/Function1;)Lscala/Function1;
      57: astore        8
      59: ifnonnull     64
      62: aconst_null
      63: athrow
      64: aload         8
      66: invokedynamic #2184,  0           // InvokeDynamic #0:apply:()Lscala/Function1;
      71: invokeinterface #2187,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      76: astore        9
      78: aload         7
      80: instanceof    #111                // class scalaz/Maybe$Just
      83: ifeq          110
      86: aload         7
      88: checkcast     #111                // class scalaz/Maybe$Just
      91: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      94: astore        11
      96: aload         9
      98: aload         11
     100: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     105: astore        10
     107: goto          136
     110: aload         7
     112: instanceof    #103                // class scalaz/Maybe$Empty
     115: ifeq          126
     118: invokestatic  #2190               // Method scalaz/Maybe.$anonfun$map$2:()Lscalaz/Maybe;
     121: astore        10
     123: goto          136
     126: new           #2128               // class scala/MatchError
     129: dup
     130: aload         7
     132: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     135: athrow
     136: aload         10
     138: checkcast     #105                // class scalaz/Maybe
     141: astore        5
     143: aload         5
     145: astore        4
     147: goto          244
     150: aload         6
     152: aload_3
     153: invokedynamic #2362,  0           // InvokeDynamic #6:apply:(Lscala/Function1;)Lscala/Function1;
     158: astore        12
     160: ifnonnull     165
     163: aconst_null
     164: athrow
     165: aload         12
     167: invokedynamic #2184,  0           // InvokeDynamic #0:apply:()Lscala/Function1;
     172: invokeinterface #2187,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
     177: astore        13
     179: aload         6
     181: instanceof    #111                // class scalaz/Maybe$Just
     184: ifeq          211
     187: aload         6
     189: checkcast     #111                // class scalaz/Maybe$Just
     192: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
     195: astore        15
     197: aload         13
     199: aload         15
     201: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     206: astore        14
     208: goto          237
     211: aload         6
     213: instanceof    #103                // class scalaz/Maybe$Empty
     216: ifeq          227
     219: invokestatic  #2190               // Method scalaz/Maybe.$anonfun$map$2:()Lscalaz/Maybe;
     222: astore        14
     224: goto          237
     227: new           #2128               // class scala/MatchError
     230: dup
     231: aload         6
     233: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     236: athrow
     237: aload         14
     239: checkcast     #105                // class scalaz/Maybe
     242: astore        4
     244: aload         4
     246: areturn

  public java.lang.Object alt(scala.Function0, scala.Function0);
    Code:
       0: aload_1
       1: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #105                // class scalaz/Maybe
       9: dup
      10: ifnonnull     15
      13: aconst_null
      14: athrow
      15: astore_3
      16: aload_3
      17: instanceof    #111                // class scalaz/Maybe$Just
      20: ifeq          43
      23: aload_3
      24: checkcast     #111                // class scalaz/Maybe$Just
      27: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      30: astore        5
      32: aload_3
      33: aload         5
      35: invokestatic  #2214               // Method scalaz/Maybe.$anonfun$orElse$1:(Lscalaz/Maybe;Ljava/lang/Object;)Lscalaz/Maybe;
      38: astore        4
      40: goto          70
      43: aload_3
      44: instanceof    #103                // class scalaz/Maybe$Empty
      47: ifeq          61
      50: aload_2
      51: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      56: astore        4
      58: goto          70
      61: new           #2128               // class scala/MatchError
      64: dup
      65: aload_3
      66: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      69: athrow
      70: aload         4
      72: checkcast     #105                // class scalaz/Maybe
      75: areturn

  public java.lang.Object filter(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #105                // class scalaz/Maybe
       4: astore_3
       5: aload_3
       6: ifnonnull     11
       9: aconst_null
      10: athrow
      11: aload_3
      12: instanceof    #111                // class scalaz/Maybe$Just
      15: ifeq          39
      18: aload_3
      19: checkcast     #111                // class scalaz/Maybe$Just
      22: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      25: astore        5
      27: aload_3
      28: aload_2
      29: aload         5
      31: invokestatic  #2344               // Method scalaz/Maybe.$anonfun$filter$1:(Lscalaz/Maybe;Lscala/Function1;Ljava/lang/Object;)Lscalaz/Maybe;
      34: astore        4
      36: goto          63
      39: aload_3
      40: instanceof    #103                // class scalaz/Maybe$Empty
      43: ifeq          54
      46: invokestatic  #2143               // Method scalaz/Maybe.$anonfun$flatMap$1:()Lscalaz/Maybe;
      49: astore        4
      51: goto          63
      54: new           #2128               // class scala/MatchError
      57: dup
      58: aload_3
      59: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      62: athrow
      63: aload         4
      65: areturn

  public scalaz.Maybe toMaybe(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #105                // class scalaz/Maybe
       5: invokevirtual #2391               // Method toMaybe:(Lscalaz/Maybe;)Lscalaz/Maybe;
       8: areturn

  public scala.Option toOption(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #105                // class scalaz/Maybe
       5: invokevirtual #2394               // Method toOption:(Lscalaz/Maybe;)Lscala/Option;
       8: areturn

  public boolean isDefined(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #105                // class scalaz/Maybe
       5: invokevirtual #2396               // Method isDefined:(Lscalaz/Maybe;)Z
       8: ireturn

  public scalaz.$bslash$div pextract(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #105                // class scalaz/Maybe
       5: invokevirtual #2398               // Method pextract:(Lscalaz/Maybe;)Lscalaz/$bslash$div;
       8: areturn

  public java.lang.Object cojoin(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #105                // class scalaz/Maybe
       5: invokevirtual #2400               // Method cojoin:(Lscalaz/Maybe;)Lscalaz/Maybe;
       8: areturn

  public java.lang.Object cobind(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #105                // class scalaz/Maybe
       4: astore_3
       5: aload_3
       6: ifnonnull     11
       9: aconst_null
      10: athrow
      11: aload_3
      12: aload_2
      13: invokedynamic #2303,  0           // InvokeDynamic #4:apply:(Lscalaz/Maybe;Lscala/Function1;)Lscala/Function1;
      18: invokedynamic #2184,  0           // InvokeDynamic #0:apply:()Lscala/Function1;
      23: invokeinterface #2187,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      28: astore        4
      30: aload_3
      31: instanceof    #111                // class scalaz/Maybe$Just
      34: ifeq          60
      37: aload_3
      38: checkcast     #111                // class scalaz/Maybe$Just
      41: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      44: astore        6
      46: aload         4
      48: aload         6
      50: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      55: astore        5
      57: goto          84
      60: aload_3
      61: instanceof    #103                // class scalaz/Maybe$Empty
      64: ifeq          75
      67: invokestatic  #2190               // Method scalaz/Maybe.$anonfun$map$2:()Lscalaz/Maybe;
      70: astore        5
      72: goto          84
      75: new           #2128               // class scala/MatchError
      78: dup
      79: aload_3
      80: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      83: athrow
      84: aload         5
      86: checkcast     #105                // class scalaz/Maybe
      89: areturn

  public scala.Tuple2 unzip(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #105                // class scalaz/Maybe
       5: invokevirtual #2406               // Method unzip:(Lscalaz/Maybe;)Lscala/Tuple2;
       8: areturn

  public java.lang.Object zip(scala.Function0, scala.Function0);
    Code:
       0: aload_1
       1: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #105                // class scalaz/Maybe
       9: aload_2
      10: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      15: checkcast     #105                // class scalaz/Maybe
      18: invokevirtual #2265               // Method scalaz/Maybe.zip:(Lscalaz/Maybe;)Lscalaz/Maybe;
      21: areturn

  public scalaz.$bslash$div cozip(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #105                // class scalaz/Maybe
       5: invokevirtual #2408               // Method cozip:(Lscalaz/Maybe;)Lscalaz/$bslash$div;
       8: areturn

  public java.lang.Object foldRight(java.lang.Object, scala.Function0, scala.Function2);
    Code:
       0: aload_1
       1: checkcast     #105                // class scalaz/Maybe
       4: astore        4
       6: aload         4
       8: ifnonnull     13
      11: aconst_null
      12: athrow
      13: aload         4
      15: instanceof    #111                // class scalaz/Maybe$Just
      18: ifeq          43
      21: aload         4
      23: checkcast     #111                // class scalaz/Maybe$Just
      26: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      29: astore        6
      31: aload_3
      32: aload_2
      33: aload         6
      35: invokestatic  #2249               // Method $anonfun$foldRight$1:(Lscala/Function2;Lscala/Function0;Ljava/lang/Object;)Ljava/lang/Object;
      38: astore        5
      40: goto          72
      43: aload         4
      45: instanceof    #103                // class scalaz/Maybe$Empty
      48: ifeq          62
      51: aload_2
      52: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      57: astore        5
      59: goto          72
      62: new           #2128               // class scala/MatchError
      65: dup
      66: aload         4
      68: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      71: athrow
      72: aload         5
      74: areturn

  public java.lang.Object plus(java.lang.Object, scala.Function0);
    Code:
       0: aload_1
       1: checkcast     #105                // class scalaz/Maybe
       4: astore_3
       5: aload_3
       6: ifnonnull     11
       9: aconst_null
      10: athrow
      11: aload_3
      12: instanceof    #111                // class scalaz/Maybe$Just
      15: ifeq          38
      18: aload_3
      19: checkcast     #111                // class scalaz/Maybe$Just
      22: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      25: astore        5
      27: aload_3
      28: aload         5
      30: invokestatic  #2214               // Method scalaz/Maybe.$anonfun$orElse$1:(Lscalaz/Maybe;Ljava/lang/Object;)Lscalaz/Maybe;
      33: astore        4
      35: goto          65
      38: aload_3
      39: instanceof    #103                // class scalaz/Maybe$Empty
      42: ifeq          56
      45: aload_2
      46: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      51: astore        4
      53: goto          65
      56: new           #2128               // class scala/MatchError
      59: dup
      60: aload_3
      61: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      64: athrow
      65: aload         4
      67: checkcast     #105                // class scalaz/Maybe
      70: areturn

  public java.lang.Object empty();
    Code:
       0: aload_0
       1: invokevirtual #2414               // Method empty:()Lscalaz/Maybe;
       4: areturn

  public java.lang.Object traverseImpl(java.lang.Object, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_1
       1: checkcast     #105                // class scalaz/Maybe
       4: astore        4
       6: aload         4
       8: ifnonnull     13
      11: aconst_null
      12: athrow
      13: aload         4
      15: instanceof    #111                // class scalaz/Maybe$Just
      18: ifeq          43
      21: aload         4
      23: checkcast     #111                // class scalaz/Maybe$Just
      26: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      29: astore        6
      31: aload_3
      32: aload_2
      33: aload         6
      35: invokestatic  #2199               // Method $anonfun$traverseImpl$1:(Lscalaz/Applicative;Lscala/Function1;Ljava/lang/Object;)Ljava/lang/Object;
      38: astore        5
      40: goto          71
      43: aload         4
      45: instanceof    #103                // class scalaz/Maybe$Empty
      48: ifeq          61
      51: aload_0
      52: aload_3
      53: invokestatic  #2203               // Method $anonfun$traverseImpl$3:(Lscalaz/MaybeInstances$$anon$11;Lscalaz/Applicative;)Ljava/lang/Object;
      56: astore        5
      58: goto          71
      61: new           #2128               // class scala/MatchError
      64: dup
      65: aload         4
      67: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      70: athrow
      71: aload         5
      73: areturn

  public java.lang.Object map(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #105                // class scalaz/Maybe
       4: astore_3
       5: aload_3
       6: ifnonnull     11
       9: aconst_null
      10: athrow
      11: aload_2
      12: invokedynamic #2184,  0           // InvokeDynamic #0:apply:()Lscala/Function1;
      17: invokeinterface #2187,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      22: astore        4
      24: aload_3
      25: instanceof    #111                // class scalaz/Maybe$Just
      28: ifeq          54
      31: aload_3
      32: checkcast     #111                // class scalaz/Maybe$Just
      35: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      38: astore        6
      40: aload         4
      42: aload         6
      44: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      49: astore        5
      51: goto          78
      54: aload_3
      55: instanceof    #103                // class scalaz/Maybe$Empty
      58: ifeq          69
      61: invokestatic  #2190               // Method scalaz/Maybe.$anonfun$map$2:()Lscalaz/Maybe;
      64: astore        5
      66: goto          78
      69: new           #2128               // class scala/MatchError
      72: dup
      73: aload_3
      74: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      77: athrow
      78: aload         5
      80: checkcast     #105                // class scalaz/Maybe
      83: areturn

  public java.lang.Object tailrecM(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: astore_3
       2: iconst_0
       3: istore        5
       5: aconst_null
       6: astore        6
       8: aload_2
       9: aload_3
      10: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #105                // class scalaz/Maybe
      18: astore        7
      20: aload         7
      22: instanceof    #103                // class scalaz/Maybe$Empty
      25: ifeq          39
      28: getstatic     #2149               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      31: invokevirtual #2151               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      34: astore        4
      36: goto          144
      39: aload         7
      41: instanceof    #111                // class scalaz/Maybe$Just
      44: ifeq          87
      47: iconst_1
      48: istore        5
      50: aload         7
      52: checkcast     #111                // class scalaz/Maybe$Just
      55: astore        6
      57: aload         6
      59: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      62: checkcast     #2153               // class scalaz/$bslash$div
      65: astore        8
      67: aload         8
      69: instanceof    #2155               // class scalaz/$minus$bslash$div
      72: ifeq          87
      75: aload         8
      77: checkcast     #2155               // class scalaz/$minus$bslash$div
      80: invokevirtual #2157               // Method scalaz/$minus$bslash$div.a:()Ljava/lang/Object;
      83: astore_3
      84: goto          2
      87: iload         5
      89: ifeq          134
      92: aload         6
      94: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      97: checkcast     #2153               // class scalaz/$bslash$div
     100: astore        9
     102: aload         9
     104: instanceof    #2159               // class scalaz/$bslash$div$minus
     107: ifeq          134
     110: aload         9
     112: checkcast     #2159               // class scalaz/$bslash$div$minus
     115: invokevirtual #2161               // Method scalaz/$bslash$div$minus.b:()Ljava/lang/Object;
     118: astore        10
     120: new           #111                // class scalaz/Maybe$Just
     123: dup
     124: aload         10
     126: invokespecial #2162               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
     129: astore        4
     131: goto          144
     134: new           #2128               // class scala/MatchError
     137: dup
     138: aload         7
     140: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     143: athrow
     144: aload         4
     146: areturn

  public java.lang.Object bind(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #105                // class scalaz/Maybe
       4: astore_3
       5: aload_3
       6: ifnonnull     11
       9: aconst_null
      10: athrow
      11: aload_3
      12: instanceof    #111                // class scalaz/Maybe$Just
      15: ifeq          40
      18: aload_3
      19: checkcast     #111                // class scalaz/Maybe$Just
      22: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      25: astore        5
      27: aload_2
      28: aload         5
      30: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      35: astore        4
      37: goto          64
      40: aload_3
      41: instanceof    #103                // class scalaz/Maybe$Empty
      44: ifeq          55
      47: invokestatic  #2143               // Method scalaz/Maybe.$anonfun$flatMap$1:()Lscalaz/Maybe;
      50: astore        4
      52: goto          64
      55: new           #2128               // class scala/MatchError
      58: dup
      59: aload_3
      60: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      63: athrow
      64: aload         4
      66: checkcast     #105                // class scalaz/Maybe
      69: areturn

  public java.lang.Object ap(scala.Function0, scala.Function0);
    Code:
       0: aload_2
       1: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #105                // class scalaz/Maybe
       9: dup
      10: ifnonnull     15
      13: aconst_null
      14: athrow
      15: astore_3
      16: aload_3
      17: instanceof    #111                // class scalaz/Maybe$Just
      20: ifeq          47
      23: aload_3
      24: checkcast     #111                // class scalaz/Maybe$Just
      27: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      30: checkcast     #2118               // class scala/Function1
      33: astore        5
      35: aload_0
      36: aload_1
      37: aload         5
      39: invokestatic  #2122               // Method $anonfun$ap$1:(Lscalaz/MaybeInstances$$anon$11;Lscala/Function0;Lscala/Function1;)Lscalaz/Maybe;
      42: astore        4
      44: goto          72
      47: aload_3
      48: instanceof    #103                // class scalaz/Maybe$Empty
      51: ifeq          63
      54: aload_0
      55: invokestatic  #2126               // Method $anonfun$ap$4:(Lscalaz/MaybeInstances$$anon$11;)Lscalaz/Maybe;
      58: astore        4
      60: goto          72
      63: new           #2128               // class scala/MatchError
      66: dup
      67: aload_3
      68: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      71: athrow
      72: aload         4
      74: areturn

  public java.lang.Object point(scala.Function0);
    Code:
       0: getstatic     #2101               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: aload_1
       4: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       9: invokevirtual #2110               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
      12: areturn

  public static final scalaz.Maybe $anonfun$ap$2(java.lang.Object);
    Code:
       0: getstatic     #2101               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: aload_0
       4: invokevirtual #2110               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
       7: areturn

  public static final scalaz.Maybe $anonfun$ap$3(scalaz.MaybeInstances$$anon$11);
    Code:
       0: aload_0
       1: invokevirtual #2414               // Method empty:()Lscalaz/Maybe;
       4: areturn

  public static final scalaz.Maybe $anonfun$ap$1(scalaz.MaybeInstances$$anon$11, scala.Function0, scala.Function1);
    Code:
       0: aload_1
       1: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #105                // class scalaz/Maybe
       9: aload_2
      10: invokedynamic #2432,  0           // InvokeDynamic #7:apply:()Lscala/Function1;
      15: invokeinterface #2187,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      20: astore        4
      22: dup
      23: ifnonnull     28
      26: aconst_null
      27: athrow
      28: astore_3
      29: aload_3
      30: instanceof    #111                // class scalaz/Maybe$Just
      33: ifeq          59
      36: aload_3
      37: checkcast     #111                // class scalaz/Maybe$Just
      40: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      43: astore        6
      45: aload         4
      47: aload         6
      49: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      54: astore        5
      56: goto          84
      59: aload_3
      60: instanceof    #103                // class scalaz/Maybe$Empty
      63: ifeq          75
      66: aload_0
      67: invokestatic  #2434               // Method $anonfun$ap$3:(Lscalaz/MaybeInstances$$anon$11;)Lscalaz/Maybe;
      70: astore        5
      72: goto          84
      75: new           #2128               // class scala/MatchError
      78: dup
      79: aload_3
      80: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      83: athrow
      84: aload         5
      86: checkcast     #105                // class scalaz/Maybe
      89: areturn

  public static final scalaz.Maybe $anonfun$ap$4(scalaz.MaybeInstances$$anon$11);
    Code:
       0: aload_0
       1: invokevirtual #2414               // Method empty:()Lscalaz/Maybe;
       4: areturn

  public static final scalaz.Maybe $anonfun$traverseImpl$2(java.lang.Object);
    Code:
       0: getstatic     #2101               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: aload_0
       4: invokevirtual #2110               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
       7: areturn

  public static final java.lang.Object $anonfun$traverseImpl$1(scalaz.Applicative, scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       8: invokedynamic #2441,  0           // InvokeDynamic #8:apply:()Lscala/Function1;
      13: invokeinterface #2443,  3         // InterfaceMethod scalaz/Applicative.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      18: areturn

  public static final scalaz.Maybe $anonfun$traverseImpl$4(scalaz.MaybeInstances$$anon$11);
    Code:
       0: aload_0
       1: invokevirtual #2414               // Method empty:()Lscalaz/Maybe;
       4: areturn

  public static final java.lang.Object $anonfun$traverseImpl$3(scalaz.MaybeInstances$$anon$11, scalaz.Applicative);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #2452,  0           // InvokeDynamic #9:apply:(Lscalaz/MaybeInstances$$anon$11;)Lscala/Function0;
       7: invokeinterface #2454,  2         // InterfaceMethod scalaz/Applicative.point:(Lscala/Function0;)Ljava/lang/Object;
      12: areturn

  private final scalaz.Maybe go$1(java.lang.Object, scala.Function1);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #105                // class scalaz/Maybe
      10: astore        4
      12: aload         4
      14: instanceof    #111                // class scalaz/Maybe$Just
      17: ifeq          85
      20: aload         4
      22: checkcast     #111                // class scalaz/Maybe$Just
      25: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      28: checkcast     #2270               // class scala/Tuple2
      31: astore        5
      33: aload         5
      35: ifnull        85
      38: aload         5
      40: invokevirtual #2459               // Method scala/Tuple2._1:()Ljava/lang/Object;
      43: checkcast     #105                // class scalaz/Maybe
      46: astore        6
      48: aload         5
      50: invokevirtual #2462               // Method scala/Tuple2._2:()Ljava/lang/Object;
      53: astore        7
      55: aload         6
      57: instanceof    #111                // class scalaz/Maybe$Just
      60: ifeq          73
      63: aload         6
      65: checkcast     #111                // class scalaz/Maybe$Just
      68: astore        8
      70: goto          79
      73: aload         7
      75: astore_1
      76: goto          0
      79: aload         8
      81: astore_3
      82: goto          113
      85: aload         4
      87: instanceof    #103                // class scalaz/Maybe$Empty
      90: ifeq          103
      93: getstatic     #2149               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      96: invokevirtual #2151               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      99: astore_3
     100: goto          113
     103: new           #2128               // class scala/MatchError
     106: dup
     107: aload         4
     109: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     112: athrow
     113: aload_3
     114: areturn

  public static final scalaz.Maybe $anonfun$unfoldrPsumOpt$1(scalaz.MaybeInstances$$anon$11, scala.Function1, scala.Tuple2);
    Code:
       0: aload_2
       1: ifnull        181
       4: aload_2
       5: invokevirtual #2459               // Method scala/Tuple2._1:()Ljava/lang/Object;
       8: checkcast     #105                // class scalaz/Maybe
      11: astore        4
      13: aload_2
      14: invokevirtual #2462               // Method scala/Tuple2._2:()Ljava/lang/Object;
      17: astore        5
      19: aload         4
      21: instanceof    #111                // class scalaz/Maybe$Just
      24: ifeq          36
      27: aload         4
      29: checkcast     #111                // class scalaz/Maybe$Just
      32: astore_3
      33: goto          190
      36: aload         4
      38: instanceof    #103                // class scalaz/Maybe$Empty
      41: ifeq          171
      44: aload         5
      46: astore        6
      48: aload_1
      49: aload         6
      51: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      56: checkcast     #105                // class scalaz/Maybe
      59: astore        8
      61: aload         8
      63: instanceof    #111                // class scalaz/Maybe$Just
      66: ifeq          136
      69: aload         8
      71: checkcast     #111                // class scalaz/Maybe$Just
      74: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      77: checkcast     #2270               // class scala/Tuple2
      80: astore        9
      82: aload         9
      84: ifnull        136
      87: aload         9
      89: invokevirtual #2459               // Method scala/Tuple2._1:()Ljava/lang/Object;
      92: checkcast     #105                // class scalaz/Maybe
      95: astore        10
      97: aload         9
      99: invokevirtual #2462               // Method scala/Tuple2._2:()Ljava/lang/Object;
     102: astore        11
     104: aload         10
     106: instanceof    #111                // class scalaz/Maybe$Just
     109: ifeq          122
     112: aload         10
     114: checkcast     #111                // class scalaz/Maybe$Just
     117: astore        12
     119: goto          129
     122: aload         11
     124: astore        6
     126: goto          48
     129: aload         12
     131: astore        7
     133: goto          165
     136: aload         8
     138: instanceof    #103                // class scalaz/Maybe$Empty
     141: ifeq          155
     144: getstatic     #2149               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
     147: invokevirtual #2151               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
     150: astore        7
     152: goto          165
     155: new           #2128               // class scala/MatchError
     158: dup
     159: aload         8
     161: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     164: athrow
     165: aload         7
     167: astore_3
     168: goto          190
     171: new           #2128               // class scala/MatchError
     174: dup
     175: aload         4
     177: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     180: athrow
     181: new           #2128               // class scala/MatchError
     184: dup
     185: aload_2
     186: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     189: athrow
     190: aload_3
     191: areturn

  private final scalaz.Maybe go$2(java.lang.Object, java.lang.Object, scala.Function1, scalaz.Reducer);
    Code:
       0: aload_3
       1: aload_2
       2: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #105                // class scalaz/Maybe
      10: astore        6
      12: aload         6
      14: instanceof    #111                // class scalaz/Maybe$Just
      17: ifeq          101
      20: aload         6
      22: checkcast     #111                // class scalaz/Maybe$Just
      25: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      28: checkcast     #2270               // class scala/Tuple2
      31: astore        7
      33: aload         7
      35: ifnull        101
      38: aload         7
      40: invokevirtual #2459               // Method scala/Tuple2._1:()Ljava/lang/Object;
      43: checkcast     #105                // class scalaz/Maybe
      46: astore        8
      48: aload         7
      50: invokevirtual #2462               // Method scala/Tuple2._2:()Ljava/lang/Object;
      53: astore        9
      55: aload         8
      57: instanceof    #111                // class scalaz/Maybe$Just
      60: ifeq          90
      63: aload         8
      65: checkcast     #111                // class scalaz/Maybe$Just
      68: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      71: astore        10
      73: aload         4
      75: aload_1
      76: aload         10
      78: invokeinterface #2474,  3         // InterfaceMethod scalaz/Reducer.snoc:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      83: aload         9
      85: astore_2
      86: astore_1
      87: goto          0
      90: getstatic     #2149               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
      93: invokevirtual #2151               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
      96: astore        5
      98: goto          111
     101: new           #111                // class scalaz/Maybe$Just
     104: dup
     105: aload_1
     106: invokespecial #2162               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
     109: astore        5
     111: aload         5
     113: areturn

  public static final scalaz.Maybe $anonfun$unfoldrOpt$1(scalaz.MaybeInstances$$anon$11, scalaz.Reducer, scala.Function1, scala.Tuple2);
    Code:
       0: aload_3
       1: ifnull        184
       4: aload_3
       5: invokevirtual #2459               // Method scala/Tuple2._1:()Ljava/lang/Object;
       8: checkcast     #105                // class scalaz/Maybe
      11: astore        5
      13: aload_3
      14: invokevirtual #2462               // Method scala/Tuple2._2:()Ljava/lang/Object;
      17: astore        6
      19: aload         5
      21: instanceof    #111                // class scalaz/Maybe$Just
      24: ifeq          173
      27: aload         5
      29: checkcast     #111                // class scalaz/Maybe$Just
      32: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      35: astore        7
      37: aload_1
      38: aload         7
      40: invokeinterface #2477,  2         // InterfaceMethod scalaz/Reducer.unit:(Ljava/lang/Object;)Ljava/lang/Object;
      45: aload         6
      47: astore        9
      49: astore        8
      51: aload_2
      52: aload         9
      54: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      59: checkcast     #105                // class scalaz/Maybe
      62: astore        11
      64: aload         11
      66: instanceof    #111                // class scalaz/Maybe$Just
      69: ifeq          155
      72: aload         11
      74: checkcast     #111                // class scalaz/Maybe$Just
      77: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      80: checkcast     #2270               // class scala/Tuple2
      83: astore        12
      85: aload         12
      87: ifnull        155
      90: aload         12
      92: invokevirtual #2459               // Method scala/Tuple2._1:()Ljava/lang/Object;
      95: checkcast     #105                // class scalaz/Maybe
      98: astore        13
     100: aload         12
     102: invokevirtual #2462               // Method scala/Tuple2._2:()Ljava/lang/Object;
     105: astore        14
     107: aload         13
     109: instanceof    #111                // class scalaz/Maybe$Just
     112: ifeq          144
     115: aload         13
     117: checkcast     #111                // class scalaz/Maybe$Just
     120: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
     123: astore        15
     125: aload_1
     126: aload         8
     128: aload         15
     130: invokeinterface #2474,  3         // InterfaceMethod scalaz/Reducer.snoc:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     135: aload         14
     137: astore        9
     139: astore        8
     141: goto          51
     144: getstatic     #2149               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
     147: invokevirtual #2151               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
     150: astore        10
     152: goto          166
     155: new           #111                // class scalaz/Maybe$Just
     158: dup
     159: aload         8
     161: invokespecial #2162               // Method scalaz/Maybe$Just."<init>":(Ljava/lang/Object;)V
     164: astore        10
     166: aload         10
     168: astore        4
     170: goto          193
     173: getstatic     #2149               // Field scalaz/Maybe$Empty$.MODULE$:Lscalaz/Maybe$Empty$;
     176: invokevirtual #2151               // Method scalaz/Maybe$Empty$.apply:()Lscalaz/Maybe;
     179: astore        4
     181: goto          193
     184: new           #2128               // class scala/MatchError
     187: dup
     188: aload_3
     189: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     192: athrow
     193: aload         4
     195: areturn

  public static final java.lang.Object $anonfun$foldRight$1(scala.Function2, scala.Function0, java.lang.Object);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokeinterface #2488,  3         // InterfaceMethod scala/Function2.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public static final scalaz.Maybe $anonfun$cozip$2(java.lang.Object);
    Code:
       0: getstatic     #2101               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: aload_0
       4: invokevirtual #2110               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
       7: areturn

  public static final scalaz.Maybe $anonfun$cozip$3(java.lang.Object);
    Code:
       0: getstatic     #2101               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: aload_0
       4: invokevirtual #2110               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
       7: areturn

  public static final scalaz.$bslash$div $anonfun$cozip$1(scalaz.$bslash$div);
    Code:
       0: aload_0
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: instanceof    #2155               // class scalaz/$minus$bslash$div
      10: ifeq          35
      13: aload_0
      14: checkcast     #2155               // class scalaz/$minus$bslash$div
      17: invokevirtual #2157               // Method scalaz/$minus$bslash$div.a:()Ljava/lang/Object;
      20: astore_2
      21: getstatic     #2496               // Field scalaz/$minus$bslash$div$.MODULE$:Lscalaz/$minus$bslash$div$;
      24: aload_2
      25: invokestatic  #2498               // Method $anonfun$cozip$2:(Ljava/lang/Object;)Lscalaz/Maybe;
      28: invokevirtual #2500               // Method scalaz/$minus$bslash$div$.apply:(Ljava/lang/Object;)Lscalaz/$bslash$div;
      31: astore_1
      32: goto          62
      35: aload_0
      36: instanceof    #2159               // class scalaz/$bslash$div$minus
      39: ifeq          53
      42: aload_0
      43: checkcast     #2159               // class scalaz/$bslash$div$minus
      46: invokevirtual #2504               // Method scalaz/$bslash$div$minus.coerceLeft:()Lscalaz/$bslash$div;
      49: astore_1
      50: goto          62
      53: new           #2128               // class scala/MatchError
      56: dup
      57: aload_0
      58: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      61: athrow
      62: aload_1
      63: ifnonnull     68
      66: aconst_null
      67: athrow
      68: aload_1
      69: instanceof    #2159               // class scalaz/$bslash$div$minus
      72: ifeq          99
      75: aload_1
      76: checkcast     #2159               // class scalaz/$bslash$div$minus
      79: invokevirtual #2161               // Method scalaz/$bslash$div$minus.b:()Ljava/lang/Object;
      82: astore        4
      84: getstatic     #2509               // Field scalaz/$bslash$div$minus$.MODULE$:Lscalaz/$bslash$div$minus$;
      87: aload         4
      89: invokestatic  #2511               // Method $anonfun$cozip$3:(Ljava/lang/Object;)Lscalaz/Maybe;
      92: invokevirtual #2512               // Method scalaz/$bslash$div$minus$.apply:(Ljava/lang/Object;)Lscalaz/$bslash$div;
      95: astore_3
      96: goto          126
      99: aload_1
     100: instanceof    #2155               // class scalaz/$minus$bslash$div
     103: ifeq          117
     106: aload_1
     107: checkcast     #2155               // class scalaz/$minus$bslash$div
     110: invokevirtual #2515               // Method scalaz/$minus$bslash$div.coerceRight:()Lscalaz/$bslash$div;
     113: astore_3
     114: goto          126
     117: new           #2128               // class scala/MatchError
     120: dup
     121: aload_1
     122: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     125: athrow
     126: aload_3
     127: areturn

  public static final scalaz.$bslash$div $anonfun$cozip$4(scalaz.MaybeInstances$$anon$11);
    Code:
       0: getstatic     #2496               // Field scalaz/$minus$bslash$div$.MODULE$:Lscalaz/$minus$bslash$div$;
       3: aload_0
       4: invokevirtual #2414               // Method empty:()Lscalaz/Maybe;
       7: invokevirtual #2500               // Method scalaz/$minus$bslash$div$.apply:(Ljava/lang/Object;)Lscalaz/$bslash$div;
      10: areturn

  public static final scala.Tuple2 $anonfun$unzip$1(scala.Tuple2);
    Code:
       0: new           #2270               // class scala/Tuple2
       3: dup
       4: getstatic     #2101               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       7: aload_0
       8: invokevirtual #2459               // Method scala/Tuple2._1:()Ljava/lang/Object;
      11: invokevirtual #2110               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
      14: getstatic     #2101               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
      17: aload_0
      18: invokevirtual #2462               // Method scala/Tuple2._2:()Ljava/lang/Object;
      21: invokevirtual #2110               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
      24: invokespecial #2521               // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      27: areturn

  public static final scala.Tuple2 $anonfun$unzip$2(scalaz.MaybeInstances$$anon$11);
    Code:
       0: new           #2270               // class scala/Tuple2
       3: dup
       4: aload_0
       5: invokevirtual #2414               // Method empty:()Lscalaz/Maybe;
       8: aload_0
       9: invokevirtual #2414               // Method empty:()Lscalaz/Maybe;
      12: invokespecial #2521               // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      15: areturn

  public static final scalaz.Maybe $anonfun$alignWith$3(scala.Function1, java.lang.Object, java.lang.Object);
    Code:
       0: getstatic     #2101               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: aload_0
       4: new           #42                 // class scalaz/$bslash$amp$div$Both
       7: dup
       8: aload_1
       9: aload_2
      10: invokespecial #2526               // Method scalaz/$bslash$amp$div$Both."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      13: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      18: invokevirtual #2110               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
      21: areturn

  public static final scalaz.Maybe $anonfun$alignWith$4(scala.Function1, java.lang.Object);
    Code:
       0: getstatic     #2101               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: aload_0
       4: new           #50                 // class scalaz/$bslash$amp$div$This
       7: dup
       8: aload_1
       9: invokespecial #2529               // Method scalaz/$bslash$amp$div$This."<init>":(Ljava/lang/Object;)V
      12: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      17: invokevirtual #2110               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
      20: areturn

  public static final scalaz.Maybe $anonfun$alignWith$2(scalaz.Maybe, scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: instanceof    #111                // class scalaz/Maybe$Just
      10: ifeq          33
      13: aload_0
      14: checkcast     #111                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore        4
      22: aload_1
      23: aload_2
      24: aload         4
      26: invokestatic  #2533               // Method $anonfun$alignWith$3:(Lscala/Function1;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Maybe;
      29: astore_3
      30: goto          58
      33: aload_0
      34: instanceof    #103                // class scalaz/Maybe$Empty
      37: ifeq          49
      40: aload_1
      41: aload_2
      42: invokestatic  #2535               // Method $anonfun$alignWith$4:(Lscala/Function1;Ljava/lang/Object;)Lscalaz/Maybe;
      45: astore_3
      46: goto          58
      49: new           #2128               // class scala/MatchError
      52: dup
      53: aload_0
      54: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      57: athrow
      58: aload_3
      59: areturn

  public static final scalaz.Maybe $anonfun$alignWith$6(scala.Function1, java.lang.Object);
    Code:
       0: getstatic     #2101               // Field scalaz/Maybe$.MODULE$:Lscalaz/Maybe$;
       3: aload_0
       4: new           #47                 // class scalaz/$bslash$amp$div$That
       7: dup
       8: aload_1
       9: invokespecial #2537               // Method scalaz/$bslash$amp$div$That."<init>":(Ljava/lang/Object;)V
      12: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      17: invokevirtual #2110               // Method scalaz/Maybe$.just:(Ljava/lang/Object;)Lscalaz/Maybe;
      20: areturn

  public static final scalaz.Maybe $anonfun$alignWith$7(scalaz.MaybeInstances$$anon$11);
    Code:
       0: aload_0
       1: invokevirtual #2414               // Method empty:()Lscalaz/Maybe;
       4: areturn

  public static final scalaz.Maybe $anonfun$alignWith$5(scalaz.MaybeInstances$$anon$11, scalaz.Maybe, scala.Function1);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #111                // class scalaz/Maybe$Just
      10: ifeq          32
      13: aload_1
      14: checkcast     #111                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore        4
      22: aload_2
      23: aload         4
      25: invokestatic  #2542               // Method $anonfun$alignWith$6:(Lscala/Function1;Ljava/lang/Object;)Lscalaz/Maybe;
      28: astore_3
      29: goto          56
      32: aload_1
      33: instanceof    #103                // class scalaz/Maybe$Empty
      36: ifeq          47
      39: aload_0
      40: invokestatic  #2544               // Method $anonfun$alignWith$7:(Lscalaz/MaybeInstances$$anon$11;)Lscalaz/Maybe;
      43: astore_3
      44: goto          56
      47: new           #2128               // class scala/MatchError
      50: dup
      51: aload_1
      52: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      55: athrow
      56: aload_3
      57: areturn

  public static final scalaz.Maybe $anonfun$alignWith$1(scalaz.MaybeInstances$$anon$11, scala.Function1, scalaz.Maybe, scalaz.Maybe);
    Code:
       0: aload_2
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_2
       7: instanceof    #111                // class scalaz/Maybe$Just
      10: ifeq          34
      13: aload_2
      14: checkcast     #111                // class scalaz/Maybe$Just
      17: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore        5
      22: aload_3
      23: aload_1
      24: aload         5
      26: invokestatic  #2546               // Method $anonfun$alignWith$2:(Lscalaz/Maybe;Lscala/Function1;Ljava/lang/Object;)Lscalaz/Maybe;
      29: astore        4
      31: goto          61
      34: aload_2
      35: instanceof    #103                // class scalaz/Maybe$Empty
      38: ifeq          52
      41: aload_0
      42: aload_3
      43: aload_1
      44: invokestatic  #2548               // Method $anonfun$alignWith$5:(Lscalaz/MaybeInstances$$anon$11;Lscalaz/Maybe;Lscala/Function1;)Lscalaz/Maybe;
      47: astore        4
      49: goto          61
      52: new           #2128               // class scala/MatchError
      55: dup
      56: aload_2
      57: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      60: athrow
      61: aload         4
      63: areturn

  public static final scalaz.$bslash$div $anonfun$pextract$1(scalaz.MaybeInstances$$anon$11);
    Code:
       0: getstatic     #2496               // Field scalaz/$minus$bslash$div$.MODULE$:Lscalaz/$minus$bslash$div$;
       3: aload_0
       4: invokevirtual #2414               // Method empty:()Lscalaz/Maybe;
       7: invokevirtual #2500               // Method scalaz/$minus$bslash$div$.apply:(Ljava/lang/Object;)Lscalaz/$bslash$div;
      10: areturn

  public static final java.lang.Object $anonfun$altly2$1(scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: getstatic     #2509               // Field scalaz/$bslash$div$minus$.MODULE$:Lscalaz/$bslash$div$minus$;
       4: aload_1
       5: invokevirtual #2512               // Method scalaz/$bslash$div$minus$.apply:(Ljava/lang/Object;)Lscalaz/$bslash$div;
       8: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      13: areturn

  public static final java.lang.Object $anonfun$altly2$2(scala.Function1, java.lang.Object);
    Code:
       0: aload_0
       1: getstatic     #2496               // Field scalaz/$minus$bslash$div$.MODULE$:Lscalaz/$minus$bslash$div$;
       4: aload_1
       5: invokevirtual #2500               // Method scalaz/$minus$bslash$div$.apply:(Ljava/lang/Object;)Lscalaz/$bslash$div;
       8: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      13: areturn

  public static final java.lang.Object $anonfun$apply2$2(scala.Function2, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #2488,  3         // InterfaceMethod scala/Function2.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public static final scalaz.Maybe $anonfun$apply2$1(scala.Function0, scala.Function2, java.lang.Object);
    Code:
       0: aload_0
       1: invokeinterface #2106,  1         // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #105                // class scalaz/Maybe
       9: aload_1
      10: aload_2
      11: invokedynamic #2559,  0           // InvokeDynamic #10:apply:(Lscala/Function2;Ljava/lang/Object;)Lscala/Function1;
      16: astore        4
      18: dup
      19: ifnonnull     24
      22: aconst_null
      23: athrow
      24: astore_3
      25: aload         4
      27: invokedynamic #2184,  0           // InvokeDynamic #0:apply:()Lscala/Function1;
      32: invokeinterface #2187,  2         // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      37: astore        5
      39: aload_3
      40: instanceof    #111                // class scalaz/Maybe$Just
      43: ifeq          69
      46: aload_3
      47: checkcast     #111                // class scalaz/Maybe$Just
      50: invokevirtual #2116               // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      53: astore        7
      55: aload         5
      57: aload         7
      59: invokeinterface #2139,  2         // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      64: astore        6
      66: goto          93
      69: aload_3
      70: instanceof    #103                // class scalaz/Maybe$Empty
      73: ifeq          84
      76: invokestatic  #2190               // Method scalaz/Maybe.$anonfun$map$2:()Lscalaz/Maybe;
      79: astore        6
      81: goto          93
      84: new           #2128               // class scala/MatchError
      87: dup
      88: aload_3
      89: invokespecial #2132               // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      92: athrow
      93: aload         6
      95: checkcast     #105                // class scalaz/Maybe
      98: areturn

  public scalaz.MaybeInstances$$anon$11(scalaz.MaybeInstances);
    Code:
       0: aload_0
       1: invokespecial #2564               // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #2568               // InterfaceMethod scalaz/InvariantFunctor.$init$:(Lscalaz/InvariantFunctor;)V
       8: aload_0
       9: invokestatic  #2571               // InterfaceMethod scalaz/Functor.$init$:(Lscalaz/Functor;)V
      12: aload_0
      13: invokestatic  #2574               // InterfaceMethod scalaz/Foldable.$init$:(Lscalaz/Foldable;)V
      16: aload_0
      17: invokestatic  #2577               // InterfaceMethod scalaz/Traverse.$init$:(Lscalaz/Traverse;)V
      20: aload_0
      21: invokestatic  #2580               // InterfaceMethod scalaz/Apply.$init$:(Lscalaz/Apply;)V
      24: aload_0
      25: invokestatic  #2583               // InterfaceMethod scalaz/InvariantApplicative.$init$:(Lscalaz/InvariantApplicative;)V
      28: aload_0
      29: invokestatic  #2586               // InterfaceMethod scalaz/Applicative.$init$:(Lscalaz/Applicative;)V
      32: aload_0
      33: invokestatic  #2589               // InterfaceMethod scalaz/Bind.$init$:(Lscalaz/Bind;)V
      36: aload_0
      37: invokestatic  #2592               // InterfaceMethod scalaz/Monad.$init$:(Lscalaz/Monad;)V
      40: aload_0
      41: invokestatic  #2595               // InterfaceMethod scalaz/Plus.$init$:(Lscalaz/Plus;)V
      44: aload_0
      45: invokestatic  #2598               // InterfaceMethod scalaz/PlusEmpty.$init$:(Lscalaz/PlusEmpty;)V
      48: aload_0
      49: invokestatic  #2601               // InterfaceMethod scalaz/ApplicativePlus.$init$:(Lscalaz/ApplicativePlus;)V
      52: aload_0
      53: invokestatic  #2604               // InterfaceMethod scalaz/MonadPlus.$init$:(Lscalaz/MonadPlus;)V
      56: aload_0
      57: invokestatic  #2607               // InterfaceMethod scalaz/InvariantAlt.$init$:(Lscalaz/InvariantAlt;)V
      60: aload_0
      61: invokestatic  #2610               // InterfaceMethod scalaz/Alt.$init$:(Lscalaz/Alt;)V
      64: aload_0
      65: invokestatic  #2613               // InterfaceMethod scalaz/BindRec.$init$:(Lscalaz/BindRec;)V
      68: aload_0
      69: invokestatic  #2616               // InterfaceMethod scalaz/Cozip.$init$:(Lscalaz/Cozip;)V
      72: aload_0
      73: invokestatic  #2619               // InterfaceMethod scalaz/Zip.$init$:(Lscalaz/Zip;)V
      76: aload_0
      77: invokestatic  #2622               // InterfaceMethod scalaz/Unzip.$init$:(Lscalaz/Unzip;)V
      80: aload_0
      81: invokestatic  #2625               // InterfaceMethod scalaz/Align.$init$:(Lscalaz/Align;)V
      84: aload_0
      85: invokestatic  #2628               // InterfaceMethod scalaz/IsEmpty.$init$:(Lscalaz/IsEmpty;)V
      88: aload_0
      89: invokestatic  #2631               // InterfaceMethod scalaz/Cobind.$init$:(Lscalaz/Cobind;)V
      92: aload_0
      93: invokestatic  #2634               // InterfaceMethod scalaz/Optional.$init$:(Lscalaz/Optional;)V
      96: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #2671,  0           // InvokeDynamic #11:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
