Compiled from "List.scala"
public final class scalaz.std.list {
  public static <A> scala.collection.immutable.List<scala.Tuple2<A, A>> adjacentPairs(scala.collection.immutable.List<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: invokevirtual #23                 // Method scalaz/std/list$.adjacentPairs:(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;
       7: areturn

  public static <A> scala.collection.immutable.List<scala.Tuple2<A, A>> allPairs(scala.collection.immutable.List<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: invokevirtual #26                 // Method scalaz/std/list$.allPairs:(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;
       7: areturn

  public static <A> scala.collection.immutable.List<scala.collection.immutable.List<A>> initz(scala.collection.immutable.List<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: invokevirtual #30                 // Method scalaz/std/list$.initz:(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;
       7: areturn

  public static <A> scala.collection.immutable.List<scala.collection.immutable.List<A>> tailz(scala.collection.immutable.List<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: invokevirtual #33                 // Method scalaz/std/list$.tailz:(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;
       7: areturn

  public static <A, B, C> scala.Tuple2<C, scala.collection.immutable.List<B>> mapAccumRight(scala.collection.immutable.List<A>, C, scala.Function2<C, A, scala.Tuple2<C, B>>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #40                 // Method scalaz/std/list$.mapAccumRight:(Lscala/collection/immutable/List;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       9: areturn

  public static <A, B, C> scala.Tuple2<C, scala.collection.immutable.List<B>> mapAccumLeft(scala.collection.immutable.List<A>, C, scala.Function2<C, A, scala.Tuple2<C, B>>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #43                 // Method scalaz/std/list$.mapAccumLeft:(Lscala/collection/immutable/List;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       9: areturn

  public static <A> scala.collection.immutable.List<scalaz.NonEmptyList<A>> groupWhen(scala.collection.immutable.List<A>, scala.Function2<A, A, java.lang.Object>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: aload_1
       5: invokevirtual #49                 // Method scalaz/std/list$.groupWhen:(Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/List;
       8: areturn

  public static <A, B> scala.collection.immutable.Map<B, scalaz.NonEmptyList<A>> groupBy1(scala.collection.immutable.List<A>, scala.Function1<A, B>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: aload_1
       5: invokevirtual #54                 // Method scalaz/std/list$.groupBy1:(Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/Map;
       8: areturn

  public static <A, M> M groupWhenM(scala.collection.immutable.List<A>, scala.Function2<A, A, M>, scalaz.Monad<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #60                 // Method scalaz/std/list$.groupWhenM:(Lscala/collection/immutable/List;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public static <A, M> M breakM(scala.collection.immutable.List<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #66                 // Method scalaz/std/list$.breakM:(Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public static <A, M> M spanM(scala.collection.immutable.List<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #70                 // Method scalaz/std/list$.spanM:(Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public static <A, M> M partitionM(scala.collection.immutable.List<A>, scala.Function1<A, M>, scalaz.Applicative<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #76                 // Method scalaz/std/list$.partitionM:(Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       9: areturn

  public static <A> scala.collection.immutable.List<scala.collection.immutable.List<A>> powerset(scala.collection.immutable.List<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: invokevirtual #79                 // Method scalaz/std/list$.powerset:(Lscala/collection/immutable/List;)Lscala/collection/immutable/List;
       7: areturn

  public static <A, M> M findM(scala.collection.immutable.List<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #83                 // Method scalaz/std/list$.findM:(Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public static <A, M> M filterM(scala.collection.immutable.List<A>, scala.Function1<A, M>, scalaz.Applicative<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #87                 // Method scalaz/std/list$.filterM:(Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       9: areturn

  public static <A, M> M takeUntilM(scala.collection.immutable.List<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #91                 // Method scalaz/std/list$.takeUntilM:(Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public static <A, M> M takeWhileM(scala.collection.immutable.List<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #95                 // Method scalaz/std/list$.takeWhileM:(Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public static <A, B> B $less$up$greater(scala.collection.immutable.List<A>, scala.Function1<scalaz.NonEmptyList<A>, B>, scalaz.Monoid<B>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #101                // Method scalaz/std/list$.$less$up$greater:(Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public static <A> scalaz.Maybe<scalaz.Zipper<A>> zipperEnd(scala.collection.immutable.List<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: invokevirtual #106                // Method scalaz/std/list$.zipperEnd:(Lscala/collection/immutable/List;)Lscalaz/Maybe;
       7: areturn

  public static <A> scalaz.Maybe<scalaz.Zipper<A>> toZipper(scala.collection.immutable.List<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: invokevirtual #109                // Method scalaz/std/list$.toZipper:(Lscala/collection/immutable/List;)Lscalaz/Maybe;
       7: areturn

  public static <A> scalaz.Maybe<scalaz.NonEmptyList<A>> toNel(scala.collection.immutable.List<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: invokevirtual #113                // Method scalaz/std/list$.toNel:(Lscala/collection/immutable/List;)Lscalaz/Maybe;
       7: areturn

  public static <A> scala.collection.immutable.List<A> nil();
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: invokevirtual #118                // Method scalaz/std/list$.nil:()Lscala/collection/immutable/List;
       6: areturn

  public static <A> scala.Option<scala.collection.immutable.List<A>> tailOption(scala.collection.immutable.List<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: invokevirtual #123                // Method scalaz/std/list$.tailOption:(Lscala/collection/immutable/List;)Lscala/Option;
       7: areturn

  public static <A> scala.collection.immutable.List<A> intersperse(scala.collection.immutable.List<A>, A);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: aload_1
       5: invokevirtual #129                // Method scalaz/std/list$.intersperse:(Lscala/collection/immutable/List;Ljava/lang/Object;)Lscala/collection/immutable/List;
       8: areturn

  public static <A> scalaz.Order<scala.collection.immutable.List<A>> listOrder(scalaz.Order<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: invokevirtual #135                // Method scalaz/std/list$.listOrder:(Lscalaz/Order;)Lscalaz/Order;
       7: areturn

  public static <A> scalaz.Show<scala.collection.immutable.List<A>> listShow(scalaz.Show<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: invokevirtual #141                // Method scalaz/std/list$.listShow:(Lscalaz/Show;)Lscalaz/Show;
       7: areturn

  public static <A> scalaz.Monoid<scala.collection.immutable.List<A>> listMonoid();
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: invokevirtual #146                // Method scalaz/std/list$.listMonoid:()Lscalaz/Monoid;
       6: areturn

  public static scalaz.Traverse<scala.collection.immutable.List> listInstance();
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: invokevirtual #151                // Method scalaz/std/list$.listInstance:()Lscalaz/Traverse;
       6: areturn

  public static <A> scalaz.Equal<scala.collection.immutable.List<A>> listEqual(scalaz.Equal<A>);
    Code:
       0: getstatic     #21                 // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       3: aload_0
       4: invokevirtual #156                // Method scalaz/std/list$.listEqual:(Lscalaz/Equal;)Lscalaz/Equal;
       7: areturn
}
