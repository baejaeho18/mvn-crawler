Compiled from "Option.scala"
public final class scalaz.std.OptionInstances$$anon$6 implements scalaz.std.OptionOrder<A> {
  private final scalaz.syntax.OrderSyntax<scala.Option<A>> orderSyntax;

  private final scalaz.syntax.EqualSyntax<scala.Option<A>> equalSyntax;

  private final scalaz.Order A0$2;

  public scalaz.Ordering order(scala.Option<A>, scala.Option<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #42                 // InterfaceMethod scalaz/std/OptionOrder.order$:(Lscalaz/std/OptionOrder;Lscala/Option;Lscala/Option;)Lscalaz/Ordering;
       6: areturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #53                 // InterfaceMethod scalaz/std/OptionEqual.equalIsNatural$:(Lscalaz/std/OptionEqual;)Z
       4: ireturn

  public boolean equal(scala.Option<A>, scala.Option<A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #62                 // InterfaceMethod scalaz/std/OptionEqual.equal$:(Lscalaz/std/OptionEqual;Lscala/Option;Lscala/Option;)Z
       6: ireturn

  public scalaz.Ordering apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #70                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean lessThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #77                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #81                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #85                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #89                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public java.lang.Object max(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #95                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object min(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #99                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 sort(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #105                // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, scala.Option<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #113                // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<scala.Option<A>> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #121                // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<scala.Option<A>> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #127                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<scala.Option<A>>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #134                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public scalaz.Equal<scala.Option<A>>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #141                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.syntax.OrderSyntax<scala.Option<A>> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #145                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<scala.Option<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #145                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<scala.Option<A>> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #153                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<scala.Option<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #153                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.Order<A> A();
    Code:
       0: aload_0
       1: getfield      #160                // Field A0$2:Lscalaz/Order;
       4: areturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: new           #20                 // class scalaz/Order$$anon$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #165                // Method scalaz/Order$$anon$1."<init>":(Lscalaz/Order;Lscala/Function1;)V
       9: areturn

  public boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #167                // class scala/Option
       5: aload_2
       6: checkcast     #167                // class scala/Option
       9: invokevirtual #169                // Method equal:(Lscala/Option;Lscala/Option;)Z
      12: ireturn

  public scalaz.Ordering order(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #167                // class scala/Option
       5: aload_2
       6: checkcast     #167                // class scala/Option
       9: invokevirtual #171                // Method order:(Lscala/Option;Lscala/Option;)Lscalaz/Ordering;
      12: areturn

  public scalaz.Equal A();
    Code:
       0: aload_0
       1: invokevirtual #174                // Method A:()Lscalaz/Order;
       4: areturn

  public scalaz.std.OptionInstances$$anon$6(scalaz.std.OptionInstances, scalaz.Order);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #160                // Field A0$2:Lscalaz/Order;
       5: aload_0
       6: invokespecial #179                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #183                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      13: aload_0
      14: invokestatic  #186                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      17: aload_0
      18: invokestatic  #189                // InterfaceMethod scalaz/std/OptionEqual.$init$:(Lscalaz/std/OptionEqual;)V
      21: aload_0
      22: invokestatic  #192                // InterfaceMethod scalaz/std/OptionOrder.$init$:(Lscalaz/std/OptionOrder;)V
      25: return
}
