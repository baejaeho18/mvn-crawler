Compiled from "SortedMap.scala"
public final class scalaz.std.sortedMap {
  public static <K, V> scalaz.Order<scala.collection.immutable.SortedMap<K, V>> sortedMapOrder(scalaz.Order<K>, scalaz.Order<V>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: aload_0
       4: aload_1
       5: invokevirtual #21                 // Method scalaz/std/sortedMap$.sortedMapOrder:(Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       8: areturn

  public static <K, V> scalaz.Show<scala.collection.immutable.SortedMap<K, V>> sortedMapShow(scalaz.Show<K>, scalaz.Show<V>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: aload_0
       4: aload_1
       5: invokevirtual #28                 // Method scalaz/std/sortedMap$.sortedMapShow:(Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       8: areturn

  public static <K, V> scalaz.Monoid<scala.collection.immutable.SortedMap<K, V>> sortedMapMonoid(scalaz.Semigroup<V>, scala.math.Ordering<K>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: aload_0
       4: aload_1
       5: invokevirtual #34                 // Method scalaz/std/sortedMap$.sortedMapMonoid:(Lscalaz/Semigroup;Lscala/math/Ordering;)Lscalaz/Monoid;
       8: areturn

  public static <K> scalaz.Traverse<?> sortedMapInstance(scala.math.Ordering<K>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: aload_0
       4: invokevirtual #40                 // Method scalaz/std/sortedMap$.sortedMapInstance:(Lscala/math/Ordering;)Lscalaz/Traverse;
       7: areturn

  public static <F, K, A> F getOrAdd(scala.collection.immutable.SortedMap<K, A>, K, scala.Function0<F>, scalaz.Applicative<F>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #49                 // Method scalaz/std/sortedMap$.getOrAdd:(Lscala/collection/immutable/SortedMap;Ljava/lang/Object;Lscala/Function0;Lscalaz/Applicative;)Ljava/lang/Object;
      10: areturn

  public static <K, A> scala.collection.immutable.SortedMap<K, A> insertWith(scala.collection.immutable.SortedMap<K, A>, K, A, scala.Function2<A, A, A>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #57                 // Method scalaz/std/sortedMap$.insertWith:(Lscala/collection/immutable/SortedMap;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/immutable/SortedMap;
      10: areturn

  public static <K, A> scala.collection.immutable.SortedMap<K, A> unionWith(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, A>, scala.Function2<A, A, A>, scala.math.Ordering<K>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #64                 // Method scalaz/std/sortedMap$.unionWith:(Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function2;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
      10: areturn

  public static <K, A> scala.collection.immutable.SortedMap<K, A> unionWithKey(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, A>, scala.Function3<K, A, A, A>, scala.math.Ordering<K>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #70                 // Method scalaz/std/sortedMap$.unionWithKey:(Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function3;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
      10: areturn

  public static <K, K2, A> scala.collection.immutable.SortedMap<K2, A> mapKeys(scala.collection.immutable.SortedMap<K, A>, scala.Function1<K, K2>, scala.math.Ordering<K2>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #76                 // Method scalaz/std/sortedMap$.mapKeys:(Lscala/collection/immutable/SortedMap;Lscala/Function1;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public static <K, A, B, C> scala.collection.immutable.SortedMap<K, C> intersectWith(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, B>, scala.Function2<A, B, C>, scala.math.Ordering<K>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #81                 // Method scalaz/std/sortedMap$.intersectWith:(Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function2;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
      10: areturn

  public static <K, A, B, C> scala.collection.immutable.SortedMap<K, C> intersectWithKey(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, B>, scala.Function3<K, A, B, C>, scala.math.Ordering<K>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #86                 // Method scalaz/std/sortedMap$.intersectWithKey:(Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function3;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
      10: areturn

  public static <K, A> scala.collection.immutable.SortedMap<K, A> alter(scala.collection.immutable.SortedMap<K, A>, K, scala.Function1<scala.Option<A>, scala.Option<A>>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #91                 // Method scalaz/std/sortedMap$.alter:(Lscala/collection/immutable/SortedMap;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public static <K, V> scalaz.Band<scala.collection.immutable.SortedMap<K, V>> sortedMapBand(scalaz.Band<V>, scala.math.Ordering<K>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: aload_0
       4: aload_1
       5: invokevirtual #96                 // Method scalaz/std/sortedMap$.sortedMapBand:(Lscalaz/Band;Lscala/math/Ordering;)Lscalaz/Band;
       8: areturn

  public static <K> scalaz.Foldable<?> sortedMapFoldable();
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: invokevirtual #101                // Method scalaz/std/sortedMap$.sortedMapFoldable:()Lscalaz/Foldable;
       6: areturn

  public static <K, V> scalaz.Equal<scala.collection.immutable.SortedMap<K, V>> sortedMapEqual(scalaz.Order<K>, scalaz.Equal<V>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/sortedMap$.MODULE$:Lscalaz/std/sortedMap$;
       3: aload_0
       4: aload_1
       5: invokevirtual #108                // Method scalaz/std/sortedMap$.sortedMapEqual:(Lscalaz/Order;Lscalaz/Equal;)Lscalaz/Equal;
       8: areturn
}
