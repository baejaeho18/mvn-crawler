Compiled from "BigInteger.scala"
public final class scalaz.std.java.math.BigIntegerInstances$$anon$2 implements scalaz.Monoid<java.lang.Object>, scalaz.Order<java.lang.Object>, scalaz.Show<java.lang.Object> {
  private final scalaz.syntax.ShowSyntax<java.lang.Object> showSyntax;

  private final scalaz.syntax.OrderSyntax<java.lang.Object> orderSyntax;

  private final scalaz.syntax.EqualSyntax<java.lang.Object> equalSyntax;

  private final scalaz.syntax.MonoidSyntax<java.lang.Object> monoidSyntax;

  private final scalaz.syntax.SemigroupSyntax<java.lang.Object> semigroupSyntax;

  public scalaz.Ordering apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #71                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #80                 // InterfaceMethod scalaz/Order.equal$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #84                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #88                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #92                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #96                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public java.lang.Object max(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #102                // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object min(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #106                // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2<java.lang.Object, java.lang.Object> sort(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #113                // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #121                // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<java.lang.Object> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #129                // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<java.lang.Object> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #136                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<java.lang.Object>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #143                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #149                // InterfaceMethod scalaz/Equal.equalIsNatural$:(Lscalaz/Equal;)Z
       4: ireturn

  public scalaz.Equal<java.lang.Object>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #156                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public java.lang.Object multiply(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #164                // InterfaceMethod scalaz/Monoid.multiply$:(Lscalaz/Monoid;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public boolean isMZero(java.lang.Object, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #174                // InterfaceMethod scalaz/Monoid.isMZero$:(Lscalaz/Monoid;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public final <B> B ifEmpty(java.lang.Object, scala.Function0<B>, scala.Function0<B>, scalaz.Equal<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #183                // InterfaceMethod scalaz/Monoid.ifEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;Lscalaz/Equal;)Ljava/lang/Object;
       9: areturn

  public final <B> B onNotEmpty(java.lang.Object, scala.Function0<B>, scalaz.Equal<java.lang.Object>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #193                // InterfaceMethod scalaz/Monoid.onNotEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public final <A, B> B onEmpty(java.lang.Object, scala.Function0<B>, scalaz.Equal<java.lang.Object>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #199                // InterfaceMethod scalaz/Monoid.onEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public <S> java.lang.Object unfoldlSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, java.lang.Object>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #207                // InterfaceMethod scalaz/Monoid.unfoldlSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <S> java.lang.Object unfoldrSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<java.lang.Object, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #212                // InterfaceMethod scalaz/Monoid.unfoldrSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public final scalaz.Category<?> category();
    Code:
       0: aload_0
       1: invokestatic  #219                // InterfaceMethod scalaz/Monoid.category$:(Lscalaz/Monoid;)Lscalaz/Category;
       4: areturn

  public final scalaz.Applicative<?> applicative();
    Code:
       0: aload_0
       1: invokestatic  #226                // InterfaceMethod scalaz/Monoid.applicative$:(Lscalaz/Monoid;)Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid<java.lang.Object>.MonoidLaw monoidLaw();
    Code:
       0: aload_0
       1: invokestatic  #233                // InterfaceMethod scalaz/Monoid.monoidLaw$:(Lscalaz/Monoid;)Lscalaz/Monoid$MonoidLaw;
       4: areturn

  public java.lang.Object multiply1(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #238                // InterfaceMethod scalaz/Semigroup.multiply1$:(Lscalaz/Semigroup;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public <S> scalaz.Maybe<java.lang.Object> unfoldlSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, java.lang.Object>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #245                // InterfaceMethod scalaz/Semigroup.unfoldlSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S> scalaz.Maybe<java.lang.Object> unfoldrSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<java.lang.Object, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #250                // InterfaceMethod scalaz/Semigroup.unfoldrSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public final scalaz.Compose<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #257                // InterfaceMethod scalaz/Semigroup.compose$:(Lscalaz/Semigroup;)Lscalaz/Compose;
       4: areturn

  public final scalaz.Apply<?> apply();
    Code:
       0: aload_0
       1: invokestatic  #262                // InterfaceMethod scalaz/Semigroup.apply$:(Lscalaz/Semigroup;)Lscalaz/Apply;
       4: areturn

  public scalaz.Semigroup<java.lang.Object>.SemigroupLaw semigroupLaw();
    Code:
       0: aload_0
       1: invokestatic  #269                // InterfaceMethod scalaz/Semigroup.semigroupLaw$:(Lscalaz/Semigroup;)Lscalaz/Semigroup$SemigroupLaw;
       4: areturn

  public scalaz.syntax.ShowSyntax<java.lang.Object> showSyntax();
    Code:
       0: aload_0
       1: getfield      #273                // Field showSyntax:Lscalaz/syntax/ShowSyntax;
       4: areturn

  public void scalaz$Show$_setter_$showSyntax_$eq(scalaz.syntax.ShowSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #273                // Field showSyntax:Lscalaz/syntax/ShowSyntax;
       5: return

  public scalaz.syntax.OrderSyntax<java.lang.Object> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #281                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #281                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<java.lang.Object> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #288                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #288                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.syntax.MonoidSyntax<java.lang.Object> monoidSyntax();
    Code:
       0: aload_0
       1: getfield      #295                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       4: areturn

  public void scalaz$Monoid$_setter_$monoidSyntax_$eq(scalaz.syntax.MonoidSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #295                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       5: return

  public scalaz.syntax.SemigroupSyntax<java.lang.Object> semigroupSyntax();
    Code:
       0: aload_0
       1: getfield      #302                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       4: areturn

  public void scalaz$Semigroup$_setter_$semigroupSyntax_$eq(scalaz.syntax.SemigroupSyntax<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #302                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       5: return

  public scalaz.Cord show(java.lang.Object);
    Code:
       0: getstatic     #313                // Field scalaz/Cord$.MODULE$:Lscalaz/Cord$;
       3: aload_0
       4: aload_1
       5: invokevirtual #317                // Method shows:(Ljava/lang/Object;)Ljava/lang/String;
       8: invokevirtual #320                // Method scalaz/Cord$.apply:(Ljava/lang/String;)Lscalaz/Cord;
      11: areturn

  public java.lang.String shows(java.lang.Object);
    Code:
       0: aload_1
       1: invokevirtual #324                // Method java/lang/Object.toString:()Ljava/lang/String;
       4: areturn

  public java.lang.Object append(java.lang.Object, scala.Function0<java.lang.Object>);
    Code:
       0: getstatic     #334                // Field scalaz/Tags$.MODULE$:Lscalaz/Tags$;
       3: invokevirtual #338                // Method scalaz/Tags$.Multiplication:()Lscalaz/Tag$TagOf;
       6: getstatic     #343                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       9: dup
      10: ifnonnull     15
      13: aconst_null
      14: athrow
      15: invokevirtual #347                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      18: aload_1
      19: invokevirtual #353                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #355                // class java/math/BigInteger
      25: getstatic     #343                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      28: aload_2
      29: invokeinterface #360,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      34: astore_3
      35: dup
      36: ifnonnull     41
      39: aconst_null
      40: athrow
      41: invokevirtual #347                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      44: aload_3
      45: invokevirtual #353                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      48: checkcast     #355                // class java/math/BigInteger
      51: invokevirtual #363                // Method java/math/BigInteger.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
      54: invokevirtual #365                // Method scalaz/Tag$TagOf.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      57: areturn

  public java.lang.Object zero();
    Code:
       0: getstatic     #334                // Field scalaz/Tags$.MODULE$:Lscalaz/Tags$;
       3: invokevirtual #338                // Method scalaz/Tags$.Multiplication:()Lscalaz/Tag$TagOf;
       6: getstatic     #371                // Field java/math/BigInteger.ONE:Ljava/math/BigInteger;
       9: invokevirtual #365                // Method scalaz/Tag$TagOf.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      12: areturn

  public scalaz.Ordering order(java.lang.Object, java.lang.Object);
    Code:
       0: getstatic     #343                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: dup
       4: ifnonnull     9
       7: aconst_null
       8: athrow
       9: invokevirtual #347                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      12: aload_1
      13: invokevirtual #353                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #355                // class java/math/BigInteger
      19: getstatic     #343                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
      22: dup
      23: ifnonnull     28
      26: aconst_null
      27: athrow
      28: invokevirtual #347                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      31: aload_2
      32: invokevirtual #353                // Method scalaz/TagKind.unwrap:(Ljava/lang/Object;)Ljava/lang/Object;
      35: checkcast     #355                // class java/math/BigInteger
      38: invokevirtual #376                // Method java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I
      41: istore_3
      42: iload_3
      43: lookupswitch  { // 0
               default: 52
          }
      52: iload_3
      53: iconst_0
      54: if_icmpge     61
      57: getstatic     #379                // Field scalaz/Ordering$LT$.MODULE$:Lscalaz/Ordering$LT$;
      60: areturn
      61: iload_3
      62: iconst_0
      63: if_icmpne     70
      66: getstatic     #382                // Field scalaz/Ordering$EQ$.MODULE$:Lscalaz/Ordering$EQ$;
      69: areturn
      70: iload_3
      71: iconst_0
      72: if_icmple     79
      75: getstatic     #385                // Field scalaz/Ordering$GT$.MODULE$:Lscalaz/Ordering$GT$;
      78: areturn
      79: new           #387                // class scala/MatchError
      82: dup
      83: iload_3
      84: invokestatic  #393                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      87: invokespecial #397                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      90: athrow

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: new           #24                 // class scalaz/Order$$anon$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #401                // Method scalaz/Order$$anon$1."<init>":(Lscalaz/Order;Lscala/Function1;)V
       9: areturn

  public scalaz.std.java.math.BigIntegerInstances$$anon$2(scalaz.std.java.math.BigIntegerInstances);
    Code:
       0: aload_0
       1: invokespecial #406                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #410                // InterfaceMethod scalaz/Semigroup.$init$:(Lscalaz/Semigroup;)V
       8: aload_0
       9: invokestatic  #413                // InterfaceMethod scalaz/Monoid.$init$:(Lscalaz/Monoid;)V
      12: aload_0
      13: invokestatic  #416                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      16: aload_0
      17: invokestatic  #419                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      20: aload_0
      21: invokestatic  #422                // InterfaceMethod scalaz/Show.$init$:(Lscalaz/Show;)V
      24: return
}
