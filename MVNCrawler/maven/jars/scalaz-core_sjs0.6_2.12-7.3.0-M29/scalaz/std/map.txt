Compiled from "Map.scala"
public final class scalaz.std.map {
  public static <K, V> scalaz.Order<scala.collection.immutable.Map<K, V>> mapOrder(scalaz.Order<K>, scalaz.Order<V>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: aload_0
       4: aload_1
       5: invokevirtual #21                 // Method scalaz/std/map$.mapOrder:(Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       8: areturn

  public static <K, V> scalaz.Show<scala.collection.immutable.Map<K, V>> mapShow(scalaz.Show<K>, scalaz.Show<V>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: aload_0
       4: aload_1
       5: invokevirtual #28                 // Method scalaz/std/map$.mapShow:(Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       8: areturn

  public static <K, V> scalaz.Monoid<scala.collection.immutable.Map<K, V>> mapMonoid(scalaz.Semigroup<V>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: aload_0
       4: invokevirtual #34                 // Method scalaz/std/map$.mapMonoid:(Lscalaz/Semigroup;)Lscalaz/Monoid;
       7: areturn

  public static <K> scalaz.Traverse<?> mapInstance();
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: invokevirtual #39                 // Method scalaz/std/map$.mapInstance:()Lscalaz/Traverse;
       6: areturn

  public static <F, K, A> F getOrAdd(scala.collection.immutable.Map<K, A>, K, scala.Function0<F>, scalaz.Applicative<F>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #48                 // Method scalaz/std/map$.getOrAdd:(Lscala/collection/immutable/Map;Ljava/lang/Object;Lscala/Function0;Lscalaz/Applicative;)Ljava/lang/Object;
      10: areturn

  public static <K, A> scala.collection.immutable.Map<K, A> insertWith(scala.collection.immutable.Map<K, A>, K, A, scala.Function2<A, A, A>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #56                 // Method scalaz/std/map$.insertWith:(Lscala/collection/immutable/Map;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/immutable/Map;
      10: areturn

  public static <K, A> scala.collection.immutable.Map<K, A> unionWith(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, A>, scala.Function2<A, A, A>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #62                 // Method scalaz/std/map$.unionWith:(Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function2;)Lscala/collection/immutable/Map;
       9: areturn

  public static <K, A> scala.collection.immutable.Map<K, A> unionWithKey(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, A>, scala.Function3<K, A, A, A>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #67                 // Method scalaz/std/map$.unionWithKey:(Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function3;)Lscala/collection/immutable/Map;
       9: areturn

  public static <K, K2, A> scala.collection.immutable.Map<K2, A> mapKeys(scala.collection.immutable.Map<K, A>, scala.Function1<K, K2>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: aload_0
       4: aload_1
       5: invokevirtual #72                 // Method scalaz/std/map$.mapKeys:(Lscala/collection/immutable/Map;Lscala/Function1;)Lscala/collection/immutable/Map;
       8: areturn

  public static <K, A, B, C> scala.collection.immutable.Map<K, C> intersectWith(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, B>, scala.Function2<A, B, C>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #76                 // Method scalaz/std/map$.intersectWith:(Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function2;)Lscala/collection/immutable/Map;
       9: areturn

  public static <K, A, B, C> scala.collection.immutable.Map<K, C> intersectWithKey(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, B>, scala.Function3<K, A, B, C>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #80                 // Method scalaz/std/map$.intersectWithKey:(Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function3;)Lscala/collection/immutable/Map;
       9: areturn

  public static <K, A> scala.collection.immutable.Map<K, A> alter(scala.collection.immutable.Map<K, A>, K, scala.Function1<scala.Option<A>, scala.Option<A>>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #85                 // Method scalaz/std/map$.alter:(Lscala/collection/immutable/Map;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/Map;
       9: areturn

  public static <K, V> scalaz.Band<scala.collection.immutable.Map<K, V>> mapBand(scalaz.Band<V>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: aload_0
       4: invokevirtual #90                 // Method scalaz/std/map$.mapBand:(Lscalaz/Band;)Lscalaz/Band;
       7: areturn

  public static <K> scalaz.Foldable<?> mapFoldable();
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: invokevirtual #95                 // Method scalaz/std/map$.mapFoldable:()Lscalaz/Foldable;
       6: areturn

  public static <K, V> scalaz.Equal<scala.collection.immutable.Map<K, V>> mapEqual(scalaz.Order<K>, scalaz.Equal<V>);
    Code:
       0: getstatic     #19                 // Field scalaz/std/map$.MODULE$:Lscalaz/std/map$;
       3: aload_0
       4: aload_1
       5: invokevirtual #102                // Method scalaz/std/map$.mapEqual:(Lscalaz/Order;Lscalaz/Equal;)Lscalaz/Equal;
       8: areturn
}
