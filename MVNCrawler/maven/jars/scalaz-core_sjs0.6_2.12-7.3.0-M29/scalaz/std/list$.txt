Compiled from "List.scala"
public final class scalaz.std.list$ implements scalaz.std.ListInstances,scalaz.std.ListFunctions {
  public static scalaz.std.list$ MODULE$;

  private final scalaz.Traverse<scala.collection.immutable.List> listInstance;

  public static {};
    Code:
       0: new           #2                  // class scalaz/std/list$
       3: invokespecial #19                 // Method "<init>":()V
       6: return

  public final <A> scala.collection.immutable.List<A> intersperse(scala.collection.immutable.List<A>, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #28                 // InterfaceMethod scalaz/std/ListFunctions.intersperse$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;Ljava/lang/Object;)Lscala/collection/immutable/List;
       6: areturn

  public final <A> scala.Option<scala.collection.immutable.List<A>> tailOption(scala.collection.immutable.List<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #38                 // InterfaceMethod scalaz/std/ListFunctions.tailOption$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;)Lscala/Option;
       5: areturn

  public final <A> scala.collection.immutable.List<A> nil();
    Code:
       0: aload_0
       1: invokestatic  #45                 // InterfaceMethod scalaz/std/ListFunctions.nil$:(Lscalaz/std/ListFunctions;)Lscala/collection/immutable/List;
       4: areturn

  public final <A> scalaz.Maybe<scalaz.NonEmptyList<A>> toNel(scala.collection.immutable.List<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #52                 // InterfaceMethod scalaz/std/ListFunctions.toNel$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;)Lscalaz/Maybe;
       5: areturn

  public final <A> scalaz.Maybe<scalaz.Zipper<A>> toZipper(scala.collection.immutable.List<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #57                 // InterfaceMethod scalaz/std/ListFunctions.toZipper$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;)Lscalaz/Maybe;
       5: areturn

  public final <A> scalaz.Maybe<scalaz.Zipper<A>> zipperEnd(scala.collection.immutable.List<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #61                 // InterfaceMethod scalaz/std/ListFunctions.zipperEnd$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;)Lscalaz/Maybe;
       5: areturn

  public final <A, B> B $less$up$greater(scala.collection.immutable.List<A>, scala.Function1<scalaz.NonEmptyList<A>, B>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #70                 // InterfaceMethod scalaz/std/ListFunctions.$less$up$greater$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
       7: areturn

  public final <A, M> M takeWhileM(scala.collection.immutable.List<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #81                 // InterfaceMethod scalaz/std/ListFunctions.takeWhileM$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public final <A, M> M takeUntilM(scala.collection.immutable.List<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #87                 // InterfaceMethod scalaz/std/ListFunctions.takeUntilM$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public final <A, M> M filterM(scala.collection.immutable.List<A>, scala.Function1<A, M>, scalaz.Applicative<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #95                 // InterfaceMethod scalaz/std/ListFunctions.filterM$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public final <A, M> M findM(scala.collection.immutable.List<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #101                // InterfaceMethod scalaz/std/ListFunctions.findM$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public final <A> scala.collection.immutable.List<scala.collection.immutable.List<A>> powerset(scala.collection.immutable.List<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #108                // InterfaceMethod scalaz/std/ListFunctions.powerset$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;)Lscala/collection/immutable/List;
       5: areturn

  public final <A, M> M partitionM(scala.collection.immutable.List<A>, scala.Function1<A, M>, scalaz.Applicative<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #113                // InterfaceMethod scalaz/std/ListFunctions.partitionM$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       7: areturn

  public final <A, M> M spanM(scala.collection.immutable.List<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #118                // InterfaceMethod scalaz/std/ListFunctions.spanM$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public final <A, M> M breakM(scala.collection.immutable.List<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #123                // InterfaceMethod scalaz/std/ListFunctions.breakM$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public final <A, M> M groupWhenM(scala.collection.immutable.List<A>, scala.Function2<A, A, M>, scalaz.Monad<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #131                // InterfaceMethod scalaz/std/ListFunctions.groupWhenM$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;Lscala/Function2;Lscalaz/Monad;)Ljava/lang/Object;
       7: areturn

  public final <A, B> scala.collection.immutable.Map<B, scalaz.NonEmptyList<A>> groupBy1(scala.collection.immutable.List<A>, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #139                // InterfaceMethod scalaz/std/ListFunctions.groupBy1$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/Map;
       6: areturn

  public final <A> scala.collection.immutable.List<scalaz.NonEmptyList<A>> groupWhen(scala.collection.immutable.List<A>, scala.Function2<A, A, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #146                // InterfaceMethod scalaz/std/ListFunctions.groupWhen$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/List;
       6: areturn

  public final <A, B, C> scala.Tuple2<C, scala.collection.immutable.List<B>> mapAccumLeft(scala.collection.immutable.List<A>, C, scala.Function2<C, A, scala.Tuple2<C, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #154                // InterfaceMethod scalaz/std/ListFunctions.mapAccumLeft$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public final <A, B, C> scala.Tuple2<C, scala.collection.immutable.List<B>> mapAccumRight(scala.collection.immutable.List<A>, C, scala.Function2<C, A, scala.Tuple2<C, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #158                // InterfaceMethod scalaz/std/ListFunctions.mapAccumRight$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;Ljava/lang/Object;Lscala/Function2;)Lscala/Tuple2;
       7: areturn

  public final <A> scala.collection.immutable.List<scala.collection.immutable.List<A>> tailz(scala.collection.immutable.List<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #162                // InterfaceMethod scalaz/std/ListFunctions.tailz$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;)Lscala/collection/immutable/List;
       5: areturn

  public final <A> scala.collection.immutable.List<scala.collection.immutable.List<A>> initz(scala.collection.immutable.List<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #166                // InterfaceMethod scalaz/std/ListFunctions.initz$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;)Lscala/collection/immutable/List;
       5: areturn

  public final <A> scala.collection.immutable.List<scala.Tuple2<A, A>> allPairs(scala.collection.immutable.List<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #171                // InterfaceMethod scalaz/std/ListFunctions.allPairs$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;)Lscala/collection/immutable/List;
       5: areturn

  public final <A> scala.collection.immutable.List<scala.Tuple2<A, A>> adjacentPairs(scala.collection.immutable.List<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #175                // InterfaceMethod scalaz/std/ListFunctions.adjacentPairs$:(Lscalaz/std/ListFunctions;Lscala/collection/immutable/List;)Lscala/collection/immutable/List;
       5: areturn

  public <A> scalaz.Monoid<scala.collection.immutable.List<A>> listMonoid();
    Code:
       0: aload_0
       1: invokestatic  #182                // InterfaceMethod scalaz/std/ListInstances.listMonoid$:(Lscalaz/std/ListInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Show<scala.collection.immutable.List<A>> listShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #190                // InterfaceMethod scalaz/std/ListInstances.listShow$:(Lscalaz/std/ListInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<scala.collection.immutable.List<A>> listOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #199                // InterfaceMethod scalaz/std/ListInstances.listOrder$:(Lscalaz/std/ListInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A> scalaz.Equal<scala.collection.immutable.List<A>> listEqual(scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #209                // InterfaceMethod scalaz/std/ListInstances0.listEqual$:(Lscalaz/std/ListInstances0;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public scalaz.Traverse<scala.collection.immutable.List> listInstance();
    Code:
       0: aload_0
       1: getfield      #214                // Field listInstance:Lscalaz/Traverse;
       4: areturn

  public void scalaz$std$ListInstances$_setter_$listInstance_$eq(scalaz.Traverse<scala.collection.immutable.List>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #214                // Field listInstance:Lscalaz/Traverse;
       5: return

  private scalaz.std.list$();
    Code:
       0: aload_0
       1: invokespecial #219                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: putstatic     #221                // Field MODULE$:Lscalaz/std/list$;
       8: aload_0
       9: invokestatic  #225                // InterfaceMethod scalaz/std/ListInstances0.$init$:(Lscalaz/std/ListInstances0;)V
      12: aload_0
      13: invokestatic  #228                // InterfaceMethod scalaz/std/ListInstances.$init$:(Lscalaz/std/ListInstances;)V
      16: aload_0
      17: invokestatic  #231                // InterfaceMethod scalaz/std/ListFunctions.$init$:(Lscalaz/std/ListFunctions;)V
      20: return
}
