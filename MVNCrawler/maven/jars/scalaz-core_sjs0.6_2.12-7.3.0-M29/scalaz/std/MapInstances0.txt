Compiled from "Map.scala"
public interface scalaz.std.MapInstances0 {
  public static scalaz.Equal mapEqual$(scalaz.std.MapInstances0, scalaz.Order, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #32                 // InterfaceMethod mapEqual:(Lscalaz/Order;Lscalaz/Equal;)Lscalaz/Equal;
       6: areturn

  public default <K, V> scalaz.Equal<scala.collection.immutable.Map<K, V>> mapEqual(scalaz.Order<K>, scalaz.Equal<V>);
    Code:
       0: new           #10                 // class scalaz/std/MapInstances0$$anon$1
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #40                 // Method scalaz/std/MapInstances0$$anon$1."<init>":(Lscalaz/std/MapInstances0;Lscalaz/Order;Lscalaz/Equal;)V
      10: areturn

  public static scalaz.Foldable mapFoldable$(scalaz.std.MapInstances0);
    Code:
       0: aload_0
       1: invokespecial #47                 // InterfaceMethod mapFoldable:()Lscalaz/Foldable;
       4: areturn

  public default <K> scalaz.Foldable<?> mapFoldable();
    Code:
       0: new           #12                 // class scalaz/std/MapInstances0$$anon$2
       3: dup
       4: aload_0
       5: invokespecial #51                 // Method scalaz/std/MapInstances0$$anon$2."<init>":(Lscalaz/std/MapInstances0;)V
       8: areturn

  public static scalaz.Band mapBand$(scalaz.std.MapInstances0, scalaz.Band);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #58                 // InterfaceMethod mapBand:(Lscalaz/Band;)Lscalaz/Band;
       5: areturn

  public default <K, V> scalaz.Band<scala.collection.immutable.Map<K, V>> mapBand(scalaz.Band<V>);
    Code:
       0: new           #14                 // class scalaz/std/MapInstances0$$anon$3
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #63                 // Method scalaz/std/MapInstances0$$anon$3."<init>":(Lscalaz/std/MapInstances0;Lscalaz/Band;)V
       9: areturn

  public static void $init$(scalaz.std.MapInstances0);
    Code:
       0: return
}
