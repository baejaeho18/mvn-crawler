Compiled from "OrderingInstances.scala"
public final class scalaz.std.math.OrderingInstances$$anon$1$$anon$2 implements scala.math.Ordering<A> {
  private final scala.math.Ordering f1$1;

  private final scala.Function0 f2$1;

  public scala.Some<java.lang.Object> tryCompare(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #29                 // InterfaceMethod scala/math/Ordering.tryCompare$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
       6: areturn

  public boolean lteq(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #39                 // InterfaceMethod scala/math/Ordering.lteq$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean gteq(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #43                 // InterfaceMethod scala/math/Ordering.gteq$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lt(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #47                 // InterfaceMethod scala/math/Ordering.lt$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean gt(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #51                 // InterfaceMethod scala/math/Ordering.gt$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean equiv(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #55                 // InterfaceMethod scala/math/Ordering.equiv$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public A max(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #62                 // InterfaceMethod scala/math/Ordering.max$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public A min(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #66                 // InterfaceMethod scala/math/Ordering.min$:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.math.Ordering<A> reverse();
    Code:
       0: aload_0
       1: invokestatic  #73                 // InterfaceMethod scala/math/Ordering.reverse$:(Lscala/math/Ordering;)Lscala/math/Ordering;
       4: areturn

  public <U> scala.math.Ordering<U> on(scala.Function1<U, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #81                 // InterfaceMethod scala/math/Ordering.on$:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
       5: areturn

  public scala.math.Ordering<A>.Ops mkOrderingOps(A);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #90                 // InterfaceMethod scala/math/Ordering.mkOrderingOps$:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;
       5: areturn

  public int compare(A, A);
    Code:
       0: aload_0
       1: getfield      #95                 // Field f1$1:Lscala/math/Ordering;
       4: aload_1
       5: aload_2
       6: invokeinterface #97,  3           // InterfaceMethod scala/math/Ordering.compare:(Ljava/lang/Object;Ljava/lang/Object;)I
      11: istore_3
      12: iload_3
      13: tableswitch   { // 0 to 0
                     0: 32
               default: 52
          }
      32: aload_0
      33: getfield      #99                 // Field f2$1:Lscala/Function0;
      36: invokeinterface #105,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      41: checkcast     #7                  // class scala/math/Ordering
      44: aload_1
      45: aload_2
      46: invokeinterface #97,  3           // InterfaceMethod scala/math/Ordering.compare:(Ljava/lang/Object;Ljava/lang/Object;)I
      51: ireturn
      52: iload_3
      53: ireturn

  public scala.math.PartialOrdering reverse();
    Code:
       0: aload_0
       1: invokevirtual #108                // Method reverse:()Lscala/math/Ordering;
       4: areturn

  public scala.Option tryCompare(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #111                // Method tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
       6: areturn

  public scalaz.std.math.OrderingInstances$$anon$1$$anon$2(scalaz.std.math.OrderingInstances$$anon$1, scala.math.Ordering, scala.Function0);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #95                 // Field f1$1:Lscala/math/Ordering;
       5: aload_0
       6: aload_3
       7: putfield      #99                 // Field f2$1:Lscala/Function0;
      10: aload_0
      11: invokespecial #117                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #123                // InterfaceMethod scala/math/PartialOrdering.$init$:(Lscala/math/PartialOrdering;)V
      18: aload_0
      19: invokestatic  #126                // InterfaceMethod scala/math/Ordering.$init$:(Lscala/math/Ordering;)V
      22: return
}
