Compiled from "AllInstances.scala"
public final class scalaz.std.AllInstances$ implements scalaz.std.AllInstances {
  public static scalaz.std.AllInstances$ MODULE$;

  private final scalaz.Monad<java.util.concurrent.Callable> callableMonad;

  private final scalaz.Monoid<java.math.BigInteger> bigIntegerInstance;

  private final scalaz.Monoid<java.lang.Object> bigIntegerMultiplication;

  private final scalaz.Show<java.math.BigDecimal> javaBigDecimalInstance;

  private final scalaz.Bitraverse<java.util.Map$Entry> mapEntryBitraverse;

  private final scalaz.Monoid<scala.math.BigInt> bigIntInstance;

  private final scalaz.Monoid<java.lang.Object> bigIntMultiplication;

  private final scalaz.Monoid<scala.math.BigDecimal> bigDecimalInstance;

  private final scalaz.Monoid<java.lang.Object> BigDecimalMultiplicationNewType;

  private final scalaz.Category<scala.Predef$$less$colon$less> $less$colon$less;

  private final scalaz.Category<scala.Predef$$eq$colon$eq> $eq$colon$eq;

  private final scalaz.Arrow<scala.PartialFunction> partialFunctionInstance;

  private final scalaz.Bitraverse<scala.util.Either> eitherInstance;

  private final scalaz.Traverse<scala.collection.immutable.Vector> vectorInstance;

  private final scalaz.Cozip<scala.Tuple1> tuple1Cozip;

  private final scalaz.Bitraverse<scala.Tuple2> tuple2Bitraverse;

  private final scalaz.Associative<scala.Tuple2> tuple2Associative;

  private final scalaz.Traverse<scala.Tuple1> tuple1Instance;

  private final scalaz.Traverse<scala.collection.immutable.Stream> streamInstance;

  private final scalaz.Applicative<?> streamZipApplicative;

  private volatile scalaz.std.StringInstances$stringInstance$ stringInstance$module;

  private final scalaz.Foldable<scala.collection.immutable.Set> setInstance;

  private final scalaz.Traverse<scala.Option> optionInstance;

  private final scalaz.Traverse<scala.collection.immutable.List> listInstance;

  private final scalaz.Traverse<scala.Function0> function0Instance;

  private final scalaz.Arrow<scala.Function1> function1Instance;

  private final scalaz.Monoid<scala.runtime.BoxedUnit> unitInstance;

  private volatile scalaz.std.AnyValInstances$booleanInstance$ booleanInstance$module;

  private final scalaz.Monoid<java.lang.Object> booleanDisjunctionNewTypeInstance;

  private final scalaz.Monoid<java.lang.Object> booleanConjunctionNewTypeInstance;

  private final scalaz.Monoid<java.lang.Object> byteInstance;

  private final scalaz.Monoid<java.lang.Object> byteMultiplicationNewType;

  private final scalaz.Monoid<java.lang.Object> char;

  private final scalaz.Monoid<java.lang.Object> charMultiplicationNewType;

  private final scalaz.Monoid<java.lang.Object> shortInstance;

  private final scalaz.Monoid<java.lang.Object> shortMultiplicationNewType;

  private final scalaz.Monoid<java.lang.Object> intInstance;

  private final scalaz.Monoid<java.lang.Object> intMultiplicationNewType;

  private final scalaz.Monoid<java.lang.Object> longInstance;

  private final scalaz.Monoid<java.lang.Object> longMultiplicationNewType;

  private final scalaz.Order<java.lang.Object> floatInstance;

  private final scalaz.Order<java.lang.Object> doubleInstance;

  public static {};
    Code:
       0: new           #2                  // class scalaz/std/AllInstances$
       3: invokespecial #116                // Method "<init>":()V
       6: return

  public <A> scalaz.Order<java.util.concurrent.Callable<A>> callableOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #126                // InterfaceMethod scalaz/std/java/util/concurrent/CallableInstances.callableOrder$:(Lscalaz/std/java/util/concurrent/CallableInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <E extends java.lang.Enum<E>> scalaz.Equal<E> enumInstance();
    Code:
       0: aload_0
       1: invokestatic  #136                // InterfaceMethod scalaz/std/java/EnumInstances.enumInstance$:(Lscalaz/std/java/EnumInstances;)Lscalaz/Equal;
       4: areturn

  public <A> scalaz.Monoid<scala.math.Ordering<A>> orderingMonoid();
    Code:
       0: aload_0
       1: invokestatic  #145                // InterfaceMethod scalaz/std/math/OrderingInstances.orderingMonoid$:(Lscalaz/std/math/OrderingInstances;)Lscalaz/Monoid;
       4: areturn

  public <L> scalaz.Traverse<?> eitherMonad();
    Code:
       0: aload_0
       1: invokestatic  #154                // InterfaceMethod scalaz/std/EitherInstances.eitherMonad$:(Lscalaz/std/EitherInstances;)Lscalaz/Traverse;
       4: areturn

  public <A, B> scalaz.Order<scala.util.Either<A, B>> eitherOrder(scalaz.Order<A>, scalaz.Order<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #163                // InterfaceMethod scalaz/std/EitherInstances.eitherOrder$:(Lscalaz/std/EitherInstances;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       6: areturn

  public scalaz.Associative<scala.util.Either> eitherAssociative();
    Code:
       0: aload_0
       1: invokestatic  #170                // InterfaceMethod scalaz/std/EitherInstances.eitherAssociative$:(Lscalaz/std/EitherInstances;)Lscalaz/Associative;
       4: areturn

  public <A, B> scalaz.Show<scala.util.Either<A, B>> eitherShow(scalaz.Show<A>, scalaz.Show<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #179                // InterfaceMethod scalaz/std/EitherInstances.eitherShow$:(Lscalaz/std/EitherInstances;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       6: areturn

  public <A, B> scalaz.Equal<scala.util.Either<A, B>> eitherEqual(scalaz.Equal<A>, scalaz.Equal<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #190                // InterfaceMethod scalaz/std/EitherInstances0.eitherEqual$:(Lscalaz/std/EitherInstances0;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
       6: areturn

  public <A> scalaz.Monoid<scala.concurrent.Future<A>> futureMonoid(scalaz.Monoid<A>, scala.concurrent.ExecutionContext);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #202                // InterfaceMethod scalaz/std/FutureInstances.futureMonoid$:(Lscalaz/std/FutureInstances;Lscalaz/Monoid;Lscala/concurrent/ExecutionContext;)Lscalaz/Monoid;
       6: areturn

  public scalaz.Nondeterminism<scala.concurrent.Future> futureInstance(scala.concurrent.ExecutionContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #212                // InterfaceMethod scalaz/std/FutureInstances1.futureInstance$:(Lscalaz/std/FutureInstances1;Lscala/concurrent/ExecutionContext;)Lscalaz/Nondeterminism;
       5: areturn

  public <A> scalaz.Semigroup<scala.concurrent.Future<A>> futureSemigroup(scalaz.Semigroup<A>, scala.concurrent.ExecutionContext);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #220                // InterfaceMethod scalaz/std/FutureInstances1.futureSemigroup$:(Lscalaz/std/FutureInstances1;Lscalaz/Semigroup;Lscala/concurrent/ExecutionContext;)Lscalaz/Semigroup;
       6: areturn

  public <A> scalaz.Monoid<scala.collection.immutable.Vector<A>> vectorMonoid();
    Code:
       0: aload_0
       1: invokestatic  #229                // InterfaceMethod scalaz/std/VectorInstances.vectorMonoid$:(Lscalaz/std/VectorInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Show<scala.collection.immutable.Vector<A>> vectorShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #236                // InterfaceMethod scalaz/std/VectorInstances.vectorShow$:(Lscalaz/std/VectorInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<scala.collection.immutable.Vector<A>> vectorOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #242                // InterfaceMethod scalaz/std/VectorInstances.vectorOrder$:(Lscalaz/std/VectorInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A> scalaz.Equal<scala.collection.immutable.Vector<A>> vectorEqual(scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #251                // InterfaceMethod scalaz/std/VectorInstances0.vectorEqual$:(Lscalaz/std/VectorInstances0;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <A1> scalaz.Show<scala.Tuple1<A1>> tuple1Show(scalaz.Show<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #260                // InterfaceMethod scalaz/std/TupleInstances3.tuple1Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A1, A2> scalaz.Show<scala.Tuple2<A1, A2>> tuple2Show(scalaz.Show<A1>, scalaz.Show<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #267                // InterfaceMethod scalaz/std/TupleInstances3.tuple2Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       6: areturn

  public <A1, A2, A3> scalaz.Show<scala.Tuple3<A1, A2, A3>> tuple3Show(scalaz.Show<A1>, scalaz.Show<A2>, scalaz.Show<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #275                // InterfaceMethod scalaz/std/TupleInstances3.tuple3Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       7: areturn

  public <A1, A2, A3, A4> scalaz.Show<scala.Tuple4<A1, A2, A3, A4>> tuple4Show(scalaz.Show<A1>, scalaz.Show<A2>, scalaz.Show<A3>, scalaz.Show<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #283                // InterfaceMethod scalaz/std/TupleInstances3.tuple4Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.Show<scala.Tuple5<A1, A2, A3, A4, A5>> tuple5Show(scalaz.Show<A1>, scalaz.Show<A2>, scalaz.Show<A3>, scalaz.Show<A4>, scalaz.Show<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #291                // InterfaceMethod scalaz/std/TupleInstances3.tuple5Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Show<scala.Tuple6<A1, A2, A3, A4, A5, A6>> tuple6Show(scalaz.Show<A1>, scalaz.Show<A2>, scalaz.Show<A3>, scalaz.Show<A4>, scalaz.Show<A5>, scalaz.Show<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #299                // InterfaceMethod scalaz/std/TupleInstances3.tuple6Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Show<scala.Tuple7<A1, A2, A3, A4, A5, A6, A7>> tuple7Show(scalaz.Show<A1>, scalaz.Show<A2>, scalaz.Show<A3>, scalaz.Show<A4>, scalaz.Show<A5>, scalaz.Show<A6>, scalaz.Show<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #307                // InterfaceMethod scalaz/std/TupleInstances3.tuple7Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
      15: areturn

  public <A1, A2, A3, A4, A5, A6, A7, A8> scalaz.Show<scala.Tuple8<A1, A2, A3, A4, A5, A6, A7, A8>> tuple8Show(scalaz.Show<A1>, scalaz.Show<A2>, scalaz.Show<A3>, scalaz.Show<A4>, scalaz.Show<A5>, scalaz.Show<A6>, scalaz.Show<A7>, scalaz.Show<A8>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #315                // InterfaceMethod scalaz/std/TupleInstances3.tuple8Show$:(Lscalaz/std/TupleInstances3;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
      17: areturn

  public <A1> scalaz.Order<scala.Tuple1<A1>> tuple1Order(scalaz.Order<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #321                // InterfaceMethod scalaz/std/TupleInstances3.tuple1Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A1, A2> scalaz.Order<scala.Tuple2<A1, A2>> tuple2Order(scalaz.Order<A1>, scalaz.Order<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #327                // InterfaceMethod scalaz/std/TupleInstances3.tuple2Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       6: areturn

  public <A1, A2, A3> scalaz.Order<scala.Tuple3<A1, A2, A3>> tuple3Order(scalaz.Order<A1>, scalaz.Order<A2>, scalaz.Order<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #334                // InterfaceMethod scalaz/std/TupleInstances3.tuple3Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       7: areturn

  public <A1, A2, A3, A4> scalaz.Order<scala.Tuple4<A1, A2, A3, A4>> tuple4Order(scalaz.Order<A1>, scalaz.Order<A2>, scalaz.Order<A3>, scalaz.Order<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #341                // InterfaceMethod scalaz/std/TupleInstances3.tuple4Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.Order<scala.Tuple5<A1, A2, A3, A4, A5>> tuple5Order(scalaz.Order<A1>, scalaz.Order<A2>, scalaz.Order<A3>, scalaz.Order<A4>, scalaz.Order<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #348                // InterfaceMethod scalaz/std/TupleInstances3.tuple5Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Order<scala.Tuple6<A1, A2, A3, A4, A5, A6>> tuple6Order(scalaz.Order<A1>, scalaz.Order<A2>, scalaz.Order<A3>, scalaz.Order<A4>, scalaz.Order<A5>, scalaz.Order<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #355                // InterfaceMethod scalaz/std/TupleInstances3.tuple6Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Order<scala.Tuple7<A1, A2, A3, A4, A5, A6, A7>> tuple7Order(scalaz.Order<A1>, scalaz.Order<A2>, scalaz.Order<A3>, scalaz.Order<A4>, scalaz.Order<A5>, scalaz.Order<A6>, scalaz.Order<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #362                // InterfaceMethod scalaz/std/TupleInstances3.tuple7Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
      15: areturn

  public <A1, A2, A3, A4, A5, A6, A7, A8> scalaz.Order<scala.Tuple8<A1, A2, A3, A4, A5, A6, A7, A8>> tuple8Order(scalaz.Order<A1>, scalaz.Order<A2>, scalaz.Order<A3>, scalaz.Order<A4>, scalaz.Order<A5>, scalaz.Order<A6>, scalaz.Order<A7>, scalaz.Order<A8>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #369                // InterfaceMethod scalaz/std/TupleInstances3.tuple8Order$:(Lscalaz/std/TupleInstances3;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
      17: areturn

  public <A1> scalaz.Cozip<?> tuple2Cozip();
    Code:
       0: aload_0
       1: invokestatic  #376                // InterfaceMethod scalaz/std/TupleInstances3.tuple2Cozip$:(Lscalaz/std/TupleInstances3;)Lscalaz/Cozip;
       4: areturn

  public <A1, A2> scalaz.Cozip<?> tuple3Cozip();
    Code:
       0: aload_0
       1: invokestatic  #381                // InterfaceMethod scalaz/std/TupleInstances3.tuple3Cozip$:(Lscalaz/std/TupleInstances3;)Lscalaz/Cozip;
       4: areturn

  public <A1, A2, A3> scalaz.Cozip<?> tuple4Cozip();
    Code:
       0: aload_0
       1: invokestatic  #386                // InterfaceMethod scalaz/std/TupleInstances3.tuple4Cozip$:(Lscalaz/std/TupleInstances3;)Lscalaz/Cozip;
       4: areturn

  public <A1, A2, A3, A4> scalaz.Cozip<?> tuple5Cozip();
    Code:
       0: aload_0
       1: invokestatic  #391                // InterfaceMethod scalaz/std/TupleInstances3.tuple5Cozip$:(Lscalaz/std/TupleInstances3;)Lscalaz/Cozip;
       4: areturn

  public <A1, A2, A3, A4, A5> scalaz.Cozip<?> tuple6Cozip();
    Code:
       0: aload_0
       1: invokestatic  #396                // InterfaceMethod scalaz/std/TupleInstances3.tuple6Cozip$:(Lscalaz/std/TupleInstances3;)Lscalaz/Cozip;
       4: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Cozip<?> tuple7Cozip();
    Code:
       0: aload_0
       1: invokestatic  #401                // InterfaceMethod scalaz/std/TupleInstances3.tuple7Cozip$:(Lscalaz/std/TupleInstances3;)Lscalaz/Cozip;
       4: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Cozip<?> tuple8Cozip();
    Code:
       0: aload_0
       1: invokestatic  #406                // InterfaceMethod scalaz/std/TupleInstances3.tuple8Cozip$:(Lscalaz/std/TupleInstances3;)Lscalaz/Cozip;
       4: areturn

  public <A1> scalaz.Monad<?> tuple2Monad(scalaz.Monoid<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #413                // InterfaceMethod scalaz/std/TupleInstances3.tuple2Monad$:(Lscalaz/std/TupleInstances3;Lscalaz/Monoid;)Lscalaz/Monad;
       5: areturn

  public <A1, A2> scalaz.Monad<?> tuple3Monad(scalaz.Monoid<A1>, scalaz.Monoid<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #420                // InterfaceMethod scalaz/std/TupleInstances3.tuple3Monad$:(Lscalaz/std/TupleInstances3;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monad;
       6: areturn

  public <A1, A2, A3> scalaz.Monad<?> tuple4Monad(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #427                // InterfaceMethod scalaz/std/TupleInstances3.tuple4Monad$:(Lscalaz/std/TupleInstances3;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monad;
       7: areturn

  public <A1, A2, A3, A4> scalaz.Monad<?> tuple5Monad(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #434                // InterfaceMethod scalaz/std/TupleInstances3.tuple5Monad$:(Lscalaz/std/TupleInstances3;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monad;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.Monad<?> tuple6Monad(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>, scalaz.Monoid<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #441                // InterfaceMethod scalaz/std/TupleInstances3.tuple6Monad$:(Lscalaz/std/TupleInstances3;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monad;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Monad<?> tuple7Monad(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>, scalaz.Monoid<A5>, scalaz.Monoid<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #448                // InterfaceMethod scalaz/std/TupleInstances3.tuple7Monad$:(Lscalaz/std/TupleInstances3;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monad;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Monad<?> tuple8Monad(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>, scalaz.Monoid<A5>, scalaz.Monoid<A6>, scalaz.Monoid<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #455                // InterfaceMethod scalaz/std/TupleInstances3.tuple8Monad$:(Lscalaz/std/TupleInstances3;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monad;
      15: areturn

  public <A1> scalaz.SemiLattice<scala.Tuple1<A1>> tuple1SemiLattice(scalaz.SemiLattice<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #462                // InterfaceMethod scalaz/std/TupleInstances3.tuple1SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
       5: areturn

  public <A1, A2> scalaz.SemiLattice<scala.Tuple2<A1, A2>> tuple2SemiLattice(scalaz.SemiLattice<A1>, scalaz.SemiLattice<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #470                // InterfaceMethod scalaz/std/TupleInstances3.tuple2SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
       6: areturn

  public <A1, A2, A3> scalaz.SemiLattice<scala.Tuple3<A1, A2, A3>> tuple3SemiLattice(scalaz.SemiLattice<A1>, scalaz.SemiLattice<A2>, scalaz.SemiLattice<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #477                // InterfaceMethod scalaz/std/TupleInstances3.tuple3SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
       7: areturn

  public <A1, A2, A3, A4> scalaz.SemiLattice<scala.Tuple4<A1, A2, A3, A4>> tuple4SemiLattice(scalaz.SemiLattice<A1>, scalaz.SemiLattice<A2>, scalaz.SemiLattice<A3>, scalaz.SemiLattice<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #484                // InterfaceMethod scalaz/std/TupleInstances3.tuple4SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.SemiLattice<scala.Tuple5<A1, A2, A3, A4, A5>> tuple5SemiLattice(scalaz.SemiLattice<A1>, scalaz.SemiLattice<A2>, scalaz.SemiLattice<A3>, scalaz.SemiLattice<A4>, scalaz.SemiLattice<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #491                // InterfaceMethod scalaz/std/TupleInstances3.tuple5SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.SemiLattice<scala.Tuple6<A1, A2, A3, A4, A5, A6>> tuple6SemiLattice(scalaz.SemiLattice<A1>, scalaz.SemiLattice<A2>, scalaz.SemiLattice<A3>, scalaz.SemiLattice<A4>, scalaz.SemiLattice<A5>, scalaz.SemiLattice<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #498                // InterfaceMethod scalaz/std/TupleInstances3.tuple6SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.SemiLattice<scala.Tuple7<A1, A2, A3, A4, A5, A6, A7>> tuple7SemiLattice(scalaz.SemiLattice<A1>, scalaz.SemiLattice<A2>, scalaz.SemiLattice<A3>, scalaz.SemiLattice<A4>, scalaz.SemiLattice<A5>, scalaz.SemiLattice<A6>, scalaz.SemiLattice<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #505                // InterfaceMethod scalaz/std/TupleInstances3.tuple7SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
      15: areturn

  public <A1, A2, A3, A4, A5, A6, A7, A8> scalaz.SemiLattice<scala.Tuple8<A1, A2, A3, A4, A5, A6, A7, A8>> tuple8SemiLattice(scalaz.SemiLattice<A1>, scalaz.SemiLattice<A2>, scalaz.SemiLattice<A3>, scalaz.SemiLattice<A4>, scalaz.SemiLattice<A5>, scalaz.SemiLattice<A6>, scalaz.SemiLattice<A7>, scalaz.SemiLattice<A8>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #512                // InterfaceMethod scalaz/std/TupleInstances3.tuple8SemiLattice$:(Lscalaz/std/TupleInstances3;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
      17: areturn

  public <A1> scalaz.Band<scala.Tuple1<A1>> tuple1Band(scalaz.Band<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #521                // InterfaceMethod scalaz/std/TupleInstances2.tuple1Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;)Lscalaz/Band;
       5: areturn

  public <A1, A2> scalaz.Band<scala.Tuple2<A1, A2>> tuple2Band(scalaz.Band<A1>, scalaz.Band<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #529                // InterfaceMethod scalaz/std/TupleInstances2.tuple2Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;Lscalaz/Band;)Lscalaz/Band;
       6: areturn

  public <A1, A2, A3> scalaz.Band<scala.Tuple3<A1, A2, A3>> tuple3Band(scalaz.Band<A1>, scalaz.Band<A2>, scalaz.Band<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #536                // InterfaceMethod scalaz/std/TupleInstances2.tuple3Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;)Lscalaz/Band;
       7: areturn

  public <A1, A2, A3, A4> scalaz.Band<scala.Tuple4<A1, A2, A3, A4>> tuple4Band(scalaz.Band<A1>, scalaz.Band<A2>, scalaz.Band<A3>, scalaz.Band<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #543                // InterfaceMethod scalaz/std/TupleInstances2.tuple4Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;)Lscalaz/Band;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.Band<scala.Tuple5<A1, A2, A3, A4, A5>> tuple5Band(scalaz.Band<A1>, scalaz.Band<A2>, scalaz.Band<A3>, scalaz.Band<A4>, scalaz.Band<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #550                // InterfaceMethod scalaz/std/TupleInstances2.tuple5Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;)Lscalaz/Band;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Band<scala.Tuple6<A1, A2, A3, A4, A5, A6>> tuple6Band(scalaz.Band<A1>, scalaz.Band<A2>, scalaz.Band<A3>, scalaz.Band<A4>, scalaz.Band<A5>, scalaz.Band<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #557                // InterfaceMethod scalaz/std/TupleInstances2.tuple6Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;)Lscalaz/Band;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Band<scala.Tuple7<A1, A2, A3, A4, A5, A6, A7>> tuple7Band(scalaz.Band<A1>, scalaz.Band<A2>, scalaz.Band<A3>, scalaz.Band<A4>, scalaz.Band<A5>, scalaz.Band<A6>, scalaz.Band<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #564                // InterfaceMethod scalaz/std/TupleInstances2.tuple7Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;)Lscalaz/Band;
      15: areturn

  public <A1, A2, A3, A4, A5, A6, A7, A8> scalaz.Band<scala.Tuple8<A1, A2, A3, A4, A5, A6, A7, A8>> tuple8Band(scalaz.Band<A1>, scalaz.Band<A2>, scalaz.Band<A3>, scalaz.Band<A4>, scalaz.Band<A5>, scalaz.Band<A6>, scalaz.Band<A7>, scalaz.Band<A8>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #571                // InterfaceMethod scalaz/std/TupleInstances2.tuple8Band$:(Lscalaz/std/TupleInstances2;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;Lscalaz/Band;)Lscalaz/Band;
      17: areturn

  public <A1> scalaz.BindRec<?> tuple2BindRec(scalaz.Semigroup<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #579                // InterfaceMethod scalaz/std/TupleInstances2.tuple2BindRec$:(Lscalaz/std/TupleInstances2;Lscalaz/Semigroup;)Lscalaz/BindRec;
       5: areturn

  public <A1, A2> scalaz.BindRec<?> tuple3BindRec(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #588                // InterfaceMethod scalaz/std/TupleInstances2.tuple3BindRec$:(Lscalaz/std/TupleInstances2;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/BindRec;
       6: areturn

  public <A1, A2, A3> scalaz.BindRec<?> tuple4BindRec(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #598                // InterfaceMethod scalaz/std/TupleInstances2.tuple4BindRec$:(Lscalaz/std/TupleInstances2;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/BindRec;
       7: areturn

  public <A1, A2, A3, A4> scalaz.BindRec<?> tuple5BindRec(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #609                // InterfaceMethod scalaz/std/TupleInstances2.tuple5BindRec$:(Lscalaz/std/TupleInstances2;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/BindRec;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.BindRec<?> tuple6BindRec(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>, scalaz.Semigroup<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #621                // InterfaceMethod scalaz/std/TupleInstances2.tuple6BindRec$:(Lscalaz/std/TupleInstances2;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/BindRec;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.BindRec<?> tuple7BindRec(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>, scalaz.Semigroup<A5>, scalaz.Semigroup<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #634                // InterfaceMethod scalaz/std/TupleInstances2.tuple7BindRec$:(Lscalaz/std/TupleInstances2;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/BindRec;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.BindRec<?> tuple8BindRec(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>, scalaz.Semigroup<A5>, scalaz.Semigroup<A6>, scalaz.Semigroup<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #648                // InterfaceMethod scalaz/std/TupleInstances2.tuple8BindRec$:(Lscalaz/std/TupleInstances2;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/BindRec;
      15: areturn

  public <A1> scalaz.Equal<scala.Tuple1<A1>> tuple1Equal(scalaz.Equal<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #654                // InterfaceMethod scalaz/std/TupleInstances2.tuple1Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <A1, A2> scalaz.Equal<scala.Tuple2<A1, A2>> tuple2Equal(scalaz.Equal<A1>, scalaz.Equal<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #660                // InterfaceMethod scalaz/std/TupleInstances2.tuple2Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
       6: areturn

  public <A1, A2, A3> scalaz.Equal<scala.Tuple3<A1, A2, A3>> tuple3Equal(scalaz.Equal<A1>, scalaz.Equal<A2>, scalaz.Equal<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #667                // InterfaceMethod scalaz/std/TupleInstances2.tuple3Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
       7: areturn

  public <A1, A2, A3, A4> scalaz.Equal<scala.Tuple4<A1, A2, A3, A4>> tuple4Equal(scalaz.Equal<A1>, scalaz.Equal<A2>, scalaz.Equal<A3>, scalaz.Equal<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #674                // InterfaceMethod scalaz/std/TupleInstances2.tuple4Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.Equal<scala.Tuple5<A1, A2, A3, A4, A5>> tuple5Equal(scalaz.Equal<A1>, scalaz.Equal<A2>, scalaz.Equal<A3>, scalaz.Equal<A4>, scalaz.Equal<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #681                // InterfaceMethod scalaz/std/TupleInstances2.tuple5Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Equal<scala.Tuple6<A1, A2, A3, A4, A5, A6>> tuple6Equal(scalaz.Equal<A1>, scalaz.Equal<A2>, scalaz.Equal<A3>, scalaz.Equal<A4>, scalaz.Equal<A5>, scalaz.Equal<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #688                // InterfaceMethod scalaz/std/TupleInstances2.tuple6Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Equal<scala.Tuple7<A1, A2, A3, A4, A5, A6, A7>> tuple7Equal(scalaz.Equal<A1>, scalaz.Equal<A2>, scalaz.Equal<A3>, scalaz.Equal<A4>, scalaz.Equal<A5>, scalaz.Equal<A6>, scalaz.Equal<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #695                // InterfaceMethod scalaz/std/TupleInstances2.tuple7Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
      15: areturn

  public <A1, A2, A3, A4, A5, A6, A7, A8> scalaz.Equal<scala.Tuple8<A1, A2, A3, A4, A5, A6, A7, A8>> tuple8Equal(scalaz.Equal<A1>, scalaz.Equal<A2>, scalaz.Equal<A3>, scalaz.Equal<A4>, scalaz.Equal<A5>, scalaz.Equal<A6>, scalaz.Equal<A7>, scalaz.Equal<A8>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #702                // InterfaceMethod scalaz/std/TupleInstances2.tuple8Equal$:(Lscalaz/std/TupleInstances2;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
      17: areturn

  public <A1> scalaz.Traverse<?> tuple2Instance();
    Code:
       0: aload_0
       1: invokestatic  #710                // InterfaceMethod scalaz/std/TupleInstances1.tuple2Instance$:(Lscalaz/std/TupleInstances1;)Lscalaz/Traverse;
       4: areturn

  public <A1, A2> scalaz.Traverse<?> tuple3Functor();
    Code:
       0: aload_0
       1: invokestatic  #715                // InterfaceMethod scalaz/std/TupleInstances1.tuple3Functor$:(Lscalaz/std/TupleInstances1;)Lscalaz/Traverse;
       4: areturn

  public <A1, A2, A3> scalaz.Traverse<?> tuple4Functor();
    Code:
       0: aload_0
       1: invokestatic  #720                // InterfaceMethod scalaz/std/TupleInstances1.tuple4Functor$:(Lscalaz/std/TupleInstances1;)Lscalaz/Traverse;
       4: areturn

  public <A1, A2, A3, A4> scalaz.Traverse<?> tuple5Functor();
    Code:
       0: aload_0
       1: invokestatic  #725                // InterfaceMethod scalaz/std/TupleInstances1.tuple5Functor$:(Lscalaz/std/TupleInstances1;)Lscalaz/Traverse;
       4: areturn

  public <A1, A2, A3, A4, A5> scalaz.Traverse<?> tuple6Functor();
    Code:
       0: aload_0
       1: invokestatic  #730                // InterfaceMethod scalaz/std/TupleInstances1.tuple6Functor$:(Lscalaz/std/TupleInstances1;)Lscalaz/Traverse;
       4: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Traverse<?> tuple7Functor();
    Code:
       0: aload_0
       1: invokestatic  #735                // InterfaceMethod scalaz/std/TupleInstances1.tuple7Functor$:(Lscalaz/std/TupleInstances1;)Lscalaz/Traverse;
       4: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Traverse<?> tuple8Functor();
    Code:
       0: aload_0
       1: invokestatic  #740                // InterfaceMethod scalaz/std/TupleInstances1.tuple8Functor$:(Lscalaz/std/TupleInstances1;)Lscalaz/Traverse;
       4: areturn

  public <A1> scalaz.Monoid<scala.Tuple1<A1>> tuple1Monoid(scalaz.Monoid<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #747                // InterfaceMethod scalaz/std/TupleInstances1.tuple1Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;)Lscalaz/Monoid;
       5: areturn

  public <A1, A2> scalaz.Monoid<scala.Tuple2<A1, A2>> tuple2Monoid(scalaz.Monoid<A1>, scalaz.Monoid<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #754                // InterfaceMethod scalaz/std/TupleInstances1.tuple2Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monoid;
       6: areturn

  public <A1, A2, A3> scalaz.Monoid<scala.Tuple3<A1, A2, A3>> tuple3Monoid(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #761                // InterfaceMethod scalaz/std/TupleInstances1.tuple3Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monoid;
       7: areturn

  public <A1, A2, A3, A4> scalaz.Monoid<scala.Tuple4<A1, A2, A3, A4>> tuple4Monoid(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #768                // InterfaceMethod scalaz/std/TupleInstances1.tuple4Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monoid;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.Monoid<scala.Tuple5<A1, A2, A3, A4, A5>> tuple5Monoid(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>, scalaz.Monoid<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #775                // InterfaceMethod scalaz/std/TupleInstances1.tuple5Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monoid;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Monoid<scala.Tuple6<A1, A2, A3, A4, A5, A6>> tuple6Monoid(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>, scalaz.Monoid<A5>, scalaz.Monoid<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #782                // InterfaceMethod scalaz/std/TupleInstances1.tuple6Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monoid;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Monoid<scala.Tuple7<A1, A2, A3, A4, A5, A6, A7>> tuple7Monoid(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>, scalaz.Monoid<A5>, scalaz.Monoid<A6>, scalaz.Monoid<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #789                // InterfaceMethod scalaz/std/TupleInstances1.tuple7Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monoid;
      15: areturn

  public <A1, A2, A3, A4, A5, A6, A7, A8> scalaz.Monoid<scala.Tuple8<A1, A2, A3, A4, A5, A6, A7, A8>> tuple8Monoid(scalaz.Monoid<A1>, scalaz.Monoid<A2>, scalaz.Monoid<A3>, scalaz.Monoid<A4>, scalaz.Monoid<A5>, scalaz.Monoid<A6>, scalaz.Monoid<A7>, scalaz.Monoid<A8>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #796                // InterfaceMethod scalaz/std/TupleInstances1.tuple8Monoid$:(Lscalaz/std/TupleInstances1;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;Lscalaz/Monoid;)Lscalaz/Monoid;
      17: areturn

  public <A1> scalaz.Semigroup<scala.Tuple1<A1>> tuple1Semigroup(scalaz.Semigroup<A1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #805                // InterfaceMethod scalaz/std/TupleInstances0.tuple1Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;)Lscalaz/Semigroup;
       5: areturn

  public <A1, A2> scalaz.Semigroup<scala.Tuple2<A1, A2>> tuple2Semigroup(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #812                // InterfaceMethod scalaz/std/TupleInstances0.tuple2Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/Semigroup;
       6: areturn

  public <A1, A2, A3> scalaz.Semigroup<scala.Tuple3<A1, A2, A3>> tuple3Semigroup(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #819                // InterfaceMethod scalaz/std/TupleInstances0.tuple3Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/Semigroup;
       7: areturn

  public <A1, A2, A3, A4> scalaz.Semigroup<scala.Tuple4<A1, A2, A3, A4>> tuple4Semigroup(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #826                // InterfaceMethod scalaz/std/TupleInstances0.tuple4Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/Semigroup;
       9: areturn

  public <A1, A2, A3, A4, A5> scalaz.Semigroup<scala.Tuple5<A1, A2, A3, A4, A5>> tuple5Semigroup(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>, scalaz.Semigroup<A5>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #833                // InterfaceMethod scalaz/std/TupleInstances0.tuple5Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/Semigroup;
      11: areturn

  public <A1, A2, A3, A4, A5, A6> scalaz.Semigroup<scala.Tuple6<A1, A2, A3, A4, A5, A6>> tuple6Semigroup(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>, scalaz.Semigroup<A5>, scalaz.Semigroup<A6>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokestatic  #840                // InterfaceMethod scalaz/std/TupleInstances0.tuple6Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/Semigroup;
      13: areturn

  public <A1, A2, A3, A4, A5, A6, A7> scalaz.Semigroup<scala.Tuple7<A1, A2, A3, A4, A5, A6, A7>> tuple7Semigroup(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>, scalaz.Semigroup<A5>, scalaz.Semigroup<A6>, scalaz.Semigroup<A7>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: invokestatic  #847                // InterfaceMethod scalaz/std/TupleInstances0.tuple7Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/Semigroup;
      15: areturn

  public <A1, A2, A3, A4, A5, A6, A7, A8> scalaz.Semigroup<scala.Tuple8<A1, A2, A3, A4, A5, A6, A7, A8>> tuple8Semigroup(scalaz.Semigroup<A1>, scalaz.Semigroup<A2>, scalaz.Semigroup<A3>, scalaz.Semigroup<A4>, scalaz.Semigroup<A5>, scalaz.Semigroup<A6>, scalaz.Semigroup<A7>, scalaz.Semigroup<A8>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: invokestatic  #854                // InterfaceMethod scalaz/std/TupleInstances0.tuple8Semigroup$:(Lscalaz/std/TupleInstances0;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;Lscalaz/Semigroup;)Lscalaz/Semigroup;
      17: areturn

  public <A> scalaz.Monoid<scala.collection.immutable.Stream<A>> streamMonoid();
    Code:
       0: aload_0
       1: invokestatic  #862                // InterfaceMethod scalaz/std/StreamInstances.streamMonoid$:(Lscalaz/std/StreamInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Equal<scala.collection.immutable.Stream<A>> streamEqual(scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #868                // InterfaceMethod scalaz/std/StreamInstances.streamEqual$:(Lscalaz/std/StreamInstances;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <A> scalaz.Order<scala.collection.immutable.Stream<A>> streamOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #874                // InterfaceMethod scalaz/std/StreamInstances.streamOrder$:(Lscalaz/std/StreamInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A> scalaz.Show<scala.collection.immutable.Stream<A>> streamShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #880                // InterfaceMethod scalaz/std/StreamInstances.streamShow$:(Lscalaz/std/StreamInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<scala.collection.immutable.Set<A>> setOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #888                // InterfaceMethod scalaz/std/SetInstances.setOrder$:(Lscalaz/std/SetInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A> scalaz.Monoid<scala.collection.immutable.Set<A>> setMonoid();
    Code:
       0: aload_0
       1: invokestatic  #894                // InterfaceMethod scalaz/std/SetInstances.setMonoid$:(Lscalaz/std/SetInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Show<scala.collection.immutable.Set<A>> setShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #901                // InterfaceMethod scalaz/std/SetInstances.setShow$:(Lscalaz/std/SetInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Monoid<scala.Option<A>> optionMonoid(scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #910                // InterfaceMethod scalaz/std/OptionInstances.optionMonoid$:(Lscalaz/std/OptionInstances;Lscalaz/Semigroup;)Lscalaz/Monoid;
       5: areturn

  public <A> scalaz.Order<scala.Option<A>> optionOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #916                // InterfaceMethod scalaz/std/OptionInstances.optionOrder$:(Lscalaz/std/OptionInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A> scalaz.Show<scala.Option<A>> optionShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #922                // InterfaceMethod scalaz/std/OptionInstances.optionShow$:(Lscalaz/std/OptionInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Monoid<java.lang.Object> optionFirst();
    Code:
       0: aload_0
       1: invokestatic  #928                // InterfaceMethod scalaz/std/OptionInstances.optionFirst$:(Lscalaz/std/OptionInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Show<java.lang.Object> optionFirstShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #933                // InterfaceMethod scalaz/std/OptionInstances.optionFirstShow$:(Lscalaz/std/OptionInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<java.lang.Object> optionFirstOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #938                // InterfaceMethod scalaz/std/OptionInstances.optionFirstOrder$:(Lscalaz/std/OptionInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public scalaz.Monad<java.lang.Object> optionFirstMonad();
    Code:
       0: aload_0
       1: invokestatic  #945                // InterfaceMethod scalaz/std/OptionInstances.optionFirstMonad$:(Lscalaz/std/OptionInstances;)Lscalaz/Monad;
       4: areturn

  public <A> scalaz.Monoid<java.lang.Object> optionLast();
    Code:
       0: aload_0
       1: invokestatic  #949                // InterfaceMethod scalaz/std/OptionInstances.optionLast$:(Lscalaz/std/OptionInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Show<java.lang.Object> optionLastShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #953                // InterfaceMethod scalaz/std/OptionInstances.optionLastShow$:(Lscalaz/std/OptionInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<java.lang.Object> optionLastOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #957                // InterfaceMethod scalaz/std/OptionInstances.optionLastOrder$:(Lscalaz/std/OptionInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public scalaz.Monad<java.lang.Object> optionLastMonad();
    Code:
       0: aload_0
       1: invokestatic  #961                // InterfaceMethod scalaz/std/OptionInstances.optionLastMonad$:(Lscalaz/std/OptionInstances;)Lscalaz/Monad;
       4: areturn

  public <A> scalaz.Monoid<java.lang.Object> optionMin(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #969                // InterfaceMethod scalaz/std/OptionInstances.optionMin$:(Lscalaz/std/OptionInstances;Lscalaz/Order;)Lscalaz/Monoid;
       5: areturn

  public <A> scalaz.Show<java.lang.Object> optionMinShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #973                // InterfaceMethod scalaz/std/OptionInstances.optionMinShow$:(Lscalaz/std/OptionInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<java.lang.Object> optionMinOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #977                // InterfaceMethod scalaz/std/OptionInstances.optionMinOrder$:(Lscalaz/std/OptionInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public scalaz.Monad<java.lang.Object> optionMinMonad();
    Code:
       0: aload_0
       1: invokestatic  #981                // InterfaceMethod scalaz/std/OptionInstances.optionMinMonad$:(Lscalaz/std/OptionInstances;)Lscalaz/Monad;
       4: areturn

  public <A> scalaz.Monoid<java.lang.Object> optionMax(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #985                // InterfaceMethod scalaz/std/OptionInstances.optionMax$:(Lscalaz/std/OptionInstances;Lscalaz/Order;)Lscalaz/Monoid;
       5: areturn

  public <A> scalaz.Show<java.lang.Object> optionMaxShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #989                // InterfaceMethod scalaz/std/OptionInstances.optionMaxShow$:(Lscalaz/std/OptionInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<java.lang.Object> optionMaxOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #993                // InterfaceMethod scalaz/std/OptionInstances.optionMaxOrder$:(Lscalaz/std/OptionInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public scalaz.Monad<java.lang.Object> optionMaxMonad();
    Code:
       0: aload_0
       1: invokestatic  #997                // InterfaceMethod scalaz/std/OptionInstances.optionMaxMonad$:(Lscalaz/std/OptionInstances;)Lscalaz/Monad;
       4: areturn

  public <A> scalaz.Equal<scala.Option<A>> optionEqual(scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1005               // InterfaceMethod scalaz/std/OptionInstances0.optionEqual$:(Lscalaz/std/OptionInstances0;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <A> scalaz.SemiLattice<scala.Option<A>> optionSemiLattice(scalaz.SemiLattice<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1011               // InterfaceMethod scalaz/std/OptionInstances0.optionSemiLattice$:(Lscalaz/std/OptionInstances0;Lscalaz/SemiLattice;)Lscalaz/SemiLattice;
       5: areturn

  public <A> scalaz.Band<scala.Option<A>> optionBand(scalaz.Band<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1019               // InterfaceMethod scalaz/std/OptionInstances1.optionBand$:(Lscalaz/std/OptionInstances1;Lscalaz/Band;)Lscalaz/Band;
       5: areturn

  public <K> scalaz.Traverse<?> sortedMapInstance(scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1028               // InterfaceMethod scalaz/std/SortedMapInstances.sortedMapInstance$:(Lscalaz/std/SortedMapInstances;Lscala/math/Ordering;)Lscalaz/Traverse;
       5: areturn

  public <K, V> scalaz.Monoid<scala.collection.immutable.SortedMap<K, V>> sortedMapMonoid(scalaz.Semigroup<V>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1038               // InterfaceMethod scalaz/std/SortedMapInstances.sortedMapMonoid$:(Lscalaz/std/SortedMapInstances;Lscalaz/Semigroup;Lscala/math/Ordering;)Lscalaz/Monoid;
       6: areturn

  public <K, V> scalaz.Show<scala.collection.immutable.SortedMap<K, V>> sortedMapShow(scalaz.Show<K>, scalaz.Show<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1045               // InterfaceMethod scalaz/std/SortedMapInstances.sortedMapShow$:(Lscalaz/std/SortedMapInstances;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       6: areturn

  public <K, V> scalaz.Order<scala.collection.immutable.SortedMap<K, V>> sortedMapOrder(scalaz.Order<K>, scalaz.Order<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1051               // InterfaceMethod scalaz/std/SortedMapInstances.sortedMapOrder$:(Lscalaz/std/SortedMapInstances;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       6: areturn

  public final <K, A> scala.collection.immutable.SortedMap<K, A> alter(scala.collection.immutable.SortedMap<K, A>, K, scala.Function1<scala.Option<A>, scala.Option<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1062               // InterfaceMethod scalaz/std/SortedMapFunctions.alter$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/SortedMap;
       7: areturn

  public final <K, A, B, C> scala.collection.immutable.SortedMap<K, C> intersectWithKey(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, B>, scala.Function3<K, A, B, C>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1074               // InterfaceMethod scalaz/std/SortedMapFunctions.intersectWithKey$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function3;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <K, A, B, C> scala.collection.immutable.SortedMap<K, C> intersectWith(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, B>, scala.Function2<A, B, C>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1082               // InterfaceMethod scalaz/std/SortedMapFunctions.intersectWith$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function2;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <K, K2, A> scala.collection.immutable.SortedMap<K2, A> mapKeys(scala.collection.immutable.SortedMap<K, A>, scala.Function1<K, K2>, scala.math.Ordering<K2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1090               // InterfaceMethod scalaz/std/SortedMapFunctions.mapKeys$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/Function1;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       7: areturn

  public final <K, A> scala.collection.immutable.SortedMap<K, A> unionWithKey(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, A>, scala.Function3<K, A, A, A>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1095               // InterfaceMethod scalaz/std/SortedMapFunctions.unionWithKey$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function3;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <K, A> scala.collection.immutable.SortedMap<K, A> unionWith(scala.collection.immutable.SortedMap<K, A>, scala.collection.immutable.SortedMap<K, A>, scala.Function2<A, A, A>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1100               // InterfaceMethod scalaz/std/SortedMapFunctions.unionWith$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Lscala/collection/immutable/SortedMap;Lscala/Function2;Lscala/math/Ordering;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <K, A> scala.collection.immutable.SortedMap<K, A> insertWith(scala.collection.immutable.SortedMap<K, A>, K, A, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1108               // InterfaceMethod scalaz/std/SortedMapFunctions.insertWith$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/immutable/SortedMap;
       9: areturn

  public final <F, K, A> F getOrAdd(scala.collection.immutable.SortedMap<K, A>, K, scala.Function0<F>, scalaz.Applicative<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1117               // InterfaceMethod scalaz/std/SortedMapFunctions.getOrAdd$:(Lscalaz/std/SortedMapFunctions;Lscala/collection/immutable/SortedMap;Ljava/lang/Object;Lscala/Function0;Lscalaz/Applicative;)Ljava/lang/Object;
       9: areturn

  public <K, V> scalaz.Equal<scala.collection.immutable.SortedMap<K, V>> sortedMapEqual(scalaz.Order<K>, scalaz.Equal<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1127               // InterfaceMethod scalaz/std/SortedMapInstances0.sortedMapEqual$:(Lscalaz/std/SortedMapInstances0;Lscalaz/Order;Lscalaz/Equal;)Lscalaz/Equal;
       6: areturn

  public <K> scalaz.Foldable<?> sortedMapFoldable();
    Code:
       0: aload_0
       1: invokestatic  #1134               // InterfaceMethod scalaz/std/SortedMapInstances0.sortedMapFoldable$:(Lscalaz/std/SortedMapInstances0;)Lscalaz/Foldable;
       4: areturn

  public <K, V> scalaz.Band<scala.collection.immutable.SortedMap<K, V>> sortedMapBand(scalaz.Band<V>, scala.math.Ordering<K>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1141               // InterfaceMethod scalaz/std/SortedMapInstances0.sortedMapBand$:(Lscalaz/std/SortedMapInstances0;Lscalaz/Band;Lscala/math/Ordering;)Lscalaz/Band;
       6: areturn

  public <K> scalaz.Traverse<?> mapInstance();
    Code:
       0: aload_0
       1: invokestatic  #1149               // InterfaceMethod scalaz/std/MapInstances.mapInstance$:(Lscalaz/std/MapInstances;)Lscalaz/Traverse;
       4: areturn

  public <K, V> scalaz.Monoid<scala.collection.immutable.Map<K, V>> mapMonoid(scalaz.Semigroup<V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1155               // InterfaceMethod scalaz/std/MapInstances.mapMonoid$:(Lscalaz/std/MapInstances;Lscalaz/Semigroup;)Lscalaz/Monoid;
       5: areturn

  public <K, V> scalaz.Show<scala.collection.immutable.Map<K, V>> mapShow(scalaz.Show<K>, scalaz.Show<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1161               // InterfaceMethod scalaz/std/MapInstances.mapShow$:(Lscalaz/std/MapInstances;Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       6: areturn

  public <K, V> scalaz.Order<scala.collection.immutable.Map<K, V>> mapOrder(scalaz.Order<K>, scalaz.Order<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1167               // InterfaceMethod scalaz/std/MapInstances.mapOrder$:(Lscalaz/std/MapInstances;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       6: areturn

  public final <K, A> scala.collection.immutable.Map<K, A> alter(scala.collection.immutable.Map<K, A>, K, scala.Function1<scala.Option<A>, scala.Option<A>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1174               // InterfaceMethod scalaz/std/MapFunctions.alter$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, A, B, C> scala.collection.immutable.Map<K, C> intersectWithKey(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, B>, scala.Function3<K, A, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1180               // InterfaceMethod scalaz/std/MapFunctions.intersectWithKey$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function3;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, A, B, C> scala.collection.immutable.Map<K, C> intersectWith(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, B>, scala.Function2<A, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1185               // InterfaceMethod scalaz/std/MapFunctions.intersectWith$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function2;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, K2, A> scala.collection.immutable.Map<K2, A> mapKeys(scala.collection.immutable.Map<K, A>, scala.Function1<K, K2>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1190               // InterfaceMethod scalaz/std/MapFunctions.mapKeys$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/Function1;)Lscala/collection/immutable/Map;
       6: areturn

  public final <K, A> scala.collection.immutable.Map<K, A> unionWithKey(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, A>, scala.Function3<K, A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1193               // InterfaceMethod scalaz/std/MapFunctions.unionWithKey$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function3;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, A> scala.collection.immutable.Map<K, A> unionWith(scala.collection.immutable.Map<K, A>, scala.collection.immutable.Map<K, A>, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #1196               // InterfaceMethod scalaz/std/MapFunctions.unionWith$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Lscala/collection/immutable/Map;Lscala/Function2;)Lscala/collection/immutable/Map;
       7: areturn

  public final <K, A> scala.collection.immutable.Map<K, A> insertWith(scala.collection.immutable.Map<K, A>, K, A, scala.Function2<A, A, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1201               // InterfaceMethod scalaz/std/MapFunctions.insertWith$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Lscala/collection/immutable/Map;
       9: areturn

  public final <F, K, A> F getOrAdd(scala.collection.immutable.Map<K, A>, K, scala.Function0<F>, scalaz.Applicative<F>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1206               // InterfaceMethod scalaz/std/MapFunctions.getOrAdd$:(Lscalaz/std/MapFunctions;Lscala/collection/immutable/Map;Ljava/lang/Object;Lscala/Function0;Lscalaz/Applicative;)Ljava/lang/Object;
       9: areturn

  public <K, V> scalaz.Equal<scala.collection.immutable.Map<K, V>> mapEqual(scalaz.Order<K>, scalaz.Equal<V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1214               // InterfaceMethod scalaz/std/MapInstances0.mapEqual$:(Lscalaz/std/MapInstances0;Lscalaz/Order;Lscalaz/Equal;)Lscalaz/Equal;
       6: areturn

  public <K> scalaz.Foldable<?> mapFoldable();
    Code:
       0: aload_0
       1: invokestatic  #1219               // InterfaceMethod scalaz/std/MapInstances0.mapFoldable$:(Lscalaz/std/MapInstances0;)Lscalaz/Foldable;
       4: areturn

  public <K, V> scalaz.Band<scala.collection.immutable.Map<K, V>> mapBand(scalaz.Band<V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1225               // InterfaceMethod scalaz/std/MapInstances0.mapBand$:(Lscalaz/std/MapInstances0;Lscalaz/Band;)Lscalaz/Band;
       5: areturn

  public <A> scalaz.Monoid<scala.collection.immutable.List<A>> listMonoid();
    Code:
       0: aload_0
       1: invokestatic  #1233               // InterfaceMethod scalaz/std/ListInstances.listMonoid$:(Lscalaz/std/ListInstances;)Lscalaz/Monoid;
       4: areturn

  public <A> scalaz.Show<scala.collection.immutable.List<A>> listShow(scalaz.Show<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1239               // InterfaceMethod scalaz/std/ListInstances.listShow$:(Lscalaz/std/ListInstances;Lscalaz/Show;)Lscalaz/Show;
       5: areturn

  public <A> scalaz.Order<scala.collection.immutable.List<A>> listOrder(scalaz.Order<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1245               // InterfaceMethod scalaz/std/ListInstances.listOrder$:(Lscalaz/std/ListInstances;Lscalaz/Order;)Lscalaz/Order;
       5: areturn

  public <A> scalaz.Equal<scala.collection.immutable.List<A>> listEqual(scalaz.Equal<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1253               // InterfaceMethod scalaz/std/ListInstances0.listEqual$:(Lscalaz/std/ListInstances0;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <R> scalaz.Equal<scala.Function0<R>> function0Equal(scalaz.Equal<R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1261               // InterfaceMethod scalaz/std/FunctionInstances.function0Equal$:(Lscalaz/std/FunctionInstances;Lscalaz/Equal;)Lscalaz/Equal;
       5: areturn

  public <T> scalaz.Monad<?> function1Covariant();
    Code:
       0: aload_0
       1: invokestatic  #1267               // InterfaceMethod scalaz/std/FunctionInstances.function1Covariant$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <R> scalaz.Contravariant<?> function1Contravariant();
    Code:
       0: aload_0
       1: invokestatic  #1274               // InterfaceMethod scalaz/std/FunctionInstances.function1Contravariant$:(Lscalaz/std/FunctionInstances;)Lscalaz/Contravariant;
       4: areturn

  public <T1, T2> scalaz.Monad<?> function2Instance();
    Code:
       0: aload_0
       1: invokestatic  #1279               // InterfaceMethod scalaz/std/FunctionInstances.function2Instance$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <T1, T2, T3> scalaz.Monad<?> function3Instance();
    Code:
       0: aload_0
       1: invokestatic  #1284               // InterfaceMethod scalaz/std/FunctionInstances.function3Instance$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <T1, T2, T3, T4> scalaz.Monad<?> function4Instance();
    Code:
       0: aload_0
       1: invokestatic  #1289               // InterfaceMethod scalaz/std/FunctionInstances.function4Instance$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <T1, T2, T3, T4, T5> scalaz.Monad<?> function5Instance();
    Code:
       0: aload_0
       1: invokestatic  #1294               // InterfaceMethod scalaz/std/FunctionInstances.function5Instance$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <T1, T2, T3, T4, T5, T6> scalaz.Monad<?> function6Instance();
    Code:
       0: aload_0
       1: invokestatic  #1299               // InterfaceMethod scalaz/std/FunctionInstances.function6Instance$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <T1, T2, T3, T4, T5, T6, T7> scalaz.Monad<?> function7Instance();
    Code:
       0: aload_0
       1: invokestatic  #1304               // InterfaceMethod scalaz/std/FunctionInstances.function7Instance$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <T1, T2, T3, T4, T5, T6, T7, T8> scalaz.Monad<?> function8Instance();
    Code:
       0: aload_0
       1: invokestatic  #1309               // InterfaceMethod scalaz/std/FunctionInstances.function8Instance$:(Lscalaz/std/FunctionInstances;)Lscalaz/Monad;
       4: areturn

  public <A, R> scalaz.Monoid<scala.Function1<A, R>> function1Monoid(scalaz.Monoid<R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1318               // InterfaceMethod scalaz/std/FunctionInstances0.function1Monoid$:(Lscalaz/std/FunctionInstances0;Lscalaz/Monoid;)Lscalaz/Monoid;
       5: areturn

  public <A, R> scalaz.Comonad<?> function1Comonad(scalaz.Monoid<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1325               // InterfaceMethod scalaz/std/FunctionInstances0.function1Comonad$:(Lscalaz/std/FunctionInstances0;Lscalaz/Monoid;)Lscalaz/Comonad;
       5: areturn

  public <T> scalaz.Monad<?> function1CovariantByName();
    Code:
       0: aload_0
       1: invokestatic  #1330               // InterfaceMethod scalaz/std/FunctionInstances0.function1CovariantByName$:(Lscalaz/std/FunctionInstances0;)Lscalaz/Monad;
       4: areturn

  public <A, R> scalaz.Semigroup<scala.Function1<A, R>> function1Semigroup(scalaz.Semigroup<R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1338               // InterfaceMethod scalaz/std/FunctionInstances1.function1Semigroup$:(Lscalaz/std/FunctionInstances1;Lscalaz/Semigroup;)Lscalaz/Semigroup;
       5: areturn

  public <A, R> scalaz.Cobind<?> function1Cobind(scalaz.Semigroup<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1345               // InterfaceMethod scalaz/std/FunctionInstances1.function1Cobind$:(Lscalaz/std/FunctionInstances1;Lscalaz/Semigroup;)Lscalaz/Cobind;
       5: areturn

  public scalaz.Monad<java.util.concurrent.Callable> callableMonad();
    Code:
       0: aload_0
       1: getfield      #1348               // Field callableMonad:Lscalaz/Monad;
       4: areturn

  public void scalaz$std$java$util$concurrent$CallableInstances$_setter_$callableMonad_$eq(scalaz.Monad<java.util.concurrent.Callable>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1348               // Field callableMonad:Lscalaz/Monad;
       5: return

  public scalaz.Monoid<java.math.BigInteger> bigIntegerInstance();
    Code:
       0: aload_0
       1: getfield      #1355               // Field bigIntegerInstance:Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid<java.lang.Object> bigIntegerMultiplication();
    Code:
       0: aload_0
       1: getfield      #1358               // Field bigIntegerMultiplication:Lscalaz/Monoid;
       4: areturn

  public void scalaz$std$java$math$BigIntegerInstances$_setter_$bigIntegerInstance_$eq(scalaz.Monoid<java.math.BigInteger>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1355               // Field bigIntegerInstance:Lscalaz/Monoid;
       5: return

  public void scalaz$std$java$math$BigIntegerInstances$_setter_$bigIntegerMultiplication_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1358               // Field bigIntegerMultiplication:Lscalaz/Monoid;
       5: return

  public scalaz.Show<java.math.BigDecimal> javaBigDecimalInstance();
    Code:
       0: aload_0
       1: getfield      #1367               // Field javaBigDecimalInstance:Lscalaz/Show;
       4: areturn

  public void scalaz$std$java$math$BigDecimalInstances$_setter_$javaBigDecimalInstance_$eq(scalaz.Show<java.math.BigDecimal>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1367               // Field javaBigDecimalInstance:Lscalaz/Show;
       5: return

  public scalaz.Bitraverse<java.util.Map$Entry> mapEntryBitraverse();
    Code:
       0: aload_0
       1: getfield      #1374               // Field mapEntryBitraverse:Lscalaz/Bitraverse;
       4: areturn

  public void scalaz$std$java$util$MapInstances$_setter_$mapEntryBitraverse_$eq(scalaz.Bitraverse<java.util.Map$Entry>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1374               // Field mapEntryBitraverse:Lscalaz/Bitraverse;
       5: return

  public scalaz.Monoid<scala.math.BigInt> bigIntInstance();
    Code:
       0: aload_0
       1: getfield      #1380               // Field bigIntInstance:Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid<java.lang.Object> bigIntMultiplication();
    Code:
       0: aload_0
       1: getfield      #1382               // Field bigIntMultiplication:Lscalaz/Monoid;
       4: areturn

  public void scalaz$std$math$BigInts$_setter_$bigIntInstance_$eq(scalaz.Monoid<scala.math.BigInt>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1380               // Field bigIntInstance:Lscalaz/Monoid;
       5: return

  public void scalaz$std$math$BigInts$_setter_$bigIntMultiplication_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1382               // Field bigIntMultiplication:Lscalaz/Monoid;
       5: return

  public scalaz.Monoid<scala.math.BigDecimal> bigDecimalInstance();
    Code:
       0: aload_0
       1: getfield      #1388               // Field bigDecimalInstance:Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid<java.lang.Object> BigDecimalMultiplicationNewType();
    Code:
       0: aload_0
       1: getfield      #1390               // Field BigDecimalMultiplicationNewType:Lscalaz/Monoid;
       4: areturn

  public void scalaz$std$math$BigDecimalInstances$_setter_$bigDecimalInstance_$eq(scalaz.Monoid<scala.math.BigDecimal>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1388               // Field bigDecimalInstance:Lscalaz/Monoid;
       5: return

  public void scalaz$std$math$BigDecimalInstances$_setter_$BigDecimalMultiplicationNewType_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1390               // Field BigDecimalMultiplicationNewType:Lscalaz/Monoid;
       5: return

  public scalaz.Category<scala.Predef$$less$colon$less> $less$colon$less();
    Code:
       0: aload_0
       1: getfield      #1397               // Field $less$colon$less:Lscalaz/Category;
       4: areturn

  public scalaz.Category<scala.Predef$$eq$colon$eq> $eq$colon$eq();
    Code:
       0: aload_0
       1: getfield      #1400               // Field $eq$colon$eq:Lscalaz/Category;
       4: areturn

  public void scalaz$std$TypeConstraintInstances$_setter_$$less$colon$less_$eq(scalaz.Category<scala.Predef$$less$colon$less>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1397               // Field $less$colon$less:Lscalaz/Category;
       5: return

  public void scalaz$std$TypeConstraintInstances$_setter_$$eq$colon$eq_$eq(scalaz.Category<scala.Predef$$eq$colon$eq>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1400               // Field $eq$colon$eq:Lscalaz/Category;
       5: return

  public scalaz.Arrow<scala.PartialFunction> partialFunctionInstance();
    Code:
       0: aload_0
       1: getfield      #1409               // Field partialFunctionInstance:Lscalaz/Arrow;
       4: areturn

  public void scalaz$std$PartialFunctionInstances$_setter_$partialFunctionInstance_$eq(scalaz.Arrow<scala.PartialFunction>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1409               // Field partialFunctionInstance:Lscalaz/Arrow;
       5: return

  public scalaz.Bitraverse<scala.util.Either> eitherInstance();
    Code:
       0: aload_0
       1: getfield      #1415               // Field eitherInstance:Lscalaz/Bitraverse;
       4: areturn

  public void scalaz$std$EitherInstances$_setter_$eitherInstance_$eq(scalaz.Bitraverse<scala.util.Either>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1415               // Field eitherInstance:Lscalaz/Bitraverse;
       5: return

  public scalaz.Traverse<scala.collection.immutable.Vector> vectorInstance();
    Code:
       0: aload_0
       1: getfield      #1420               // Field vectorInstance:Lscalaz/Traverse;
       4: areturn

  public void scalaz$std$VectorInstances$_setter_$vectorInstance_$eq(scalaz.Traverse<scala.collection.immutable.Vector>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1420               // Field vectorInstance:Lscalaz/Traverse;
       5: return

  public scalaz.Cozip<scala.Tuple1> tuple1Cozip();
    Code:
       0: aload_0
       1: getfield      #1426               // Field tuple1Cozip:Lscalaz/Cozip;
       4: areturn

  public void scalaz$std$TupleInstances3$_setter_$tuple1Cozip_$eq(scalaz.Cozip<scala.Tuple1>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1426               // Field tuple1Cozip:Lscalaz/Cozip;
       5: return

  public scalaz.Bitraverse<scala.Tuple2> tuple2Bitraverse();
    Code:
       0: aload_0
       1: getfield      #1432               // Field tuple2Bitraverse:Lscalaz/Bitraverse;
       4: areturn

  public scalaz.Associative<scala.Tuple2> tuple2Associative();
    Code:
       0: aload_0
       1: getfield      #1435               // Field tuple2Associative:Lscalaz/Associative;
       4: areturn

  public scalaz.Traverse<scala.Tuple1> tuple1Instance();
    Code:
       0: aload_0
       1: getfield      #1438               // Field tuple1Instance:Lscalaz/Traverse;
       4: areturn

  public void scalaz$std$TupleInstances2$_setter_$tuple2Bitraverse_$eq(scalaz.Bitraverse<scala.Tuple2>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1432               // Field tuple2Bitraverse:Lscalaz/Bitraverse;
       5: return

  public void scalaz$std$TupleInstances2$_setter_$tuple2Associative_$eq(scalaz.Associative<scala.Tuple2>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1435               // Field tuple2Associative:Lscalaz/Associative;
       5: return

  public void scalaz$std$TupleInstances2$_setter_$tuple1Instance_$eq(scalaz.Traverse<scala.Tuple1>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1438               // Field tuple1Instance:Lscalaz/Traverse;
       5: return

  public scalaz.Traverse<scala.collection.immutable.Stream> streamInstance();
    Code:
       0: aload_0
       1: getfield      #1448               // Field streamInstance:Lscalaz/Traverse;
       4: areturn

  public scalaz.Applicative<?> streamZipApplicative();
    Code:
       0: aload_0
       1: getfield      #1452               // Field streamZipApplicative:Lscalaz/Applicative;
       4: areturn

  public void scalaz$std$StreamInstances$_setter_$streamInstance_$eq(scalaz.Traverse<scala.collection.immutable.Stream>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1448               // Field streamInstance:Lscalaz/Traverse;
       5: return

  public void scalaz$std$StreamInstances$_setter_$streamZipApplicative_$eq(scalaz.Applicative<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1452               // Field streamZipApplicative:Lscalaz/Applicative;
       5: return

  public scalaz.std.StringInstances$stringInstance$ stringInstance();
    Code:
       0: aload_0
       1: getfield      #1461               // Field stringInstance$module:Lscalaz/std/StringInstances$stringInstance$;
       4: ifnonnull     11
       7: aload_0
       8: invokespecial #1464               // Method stringInstance$lzycompute$1:()V
      11: aload_0
      12: getfield      #1461               // Field stringInstance$module:Lscalaz/std/StringInstances$stringInstance$;
      15: areturn

  public scalaz.Foldable<scala.collection.immutable.Set> setInstance();
    Code:
       0: aload_0
       1: getfield      #1467               // Field setInstance:Lscalaz/Foldable;
       4: areturn

  public void scalaz$std$SetInstances$_setter_$setInstance_$eq(scalaz.Foldable<scala.collection.immutable.Set>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1467               // Field setInstance:Lscalaz/Foldable;
       5: return

  public scalaz.Traverse<scala.Option> optionInstance();
    Code:
       0: aload_0
       1: getfield      #1473               // Field optionInstance:Lscalaz/Traverse;
       4: areturn

  public void scalaz$std$OptionInstances$_setter_$optionInstance_$eq(scalaz.Traverse<scala.Option>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1473               // Field optionInstance:Lscalaz/Traverse;
       5: return

  public scalaz.Traverse<scala.collection.immutable.List> listInstance();
    Code:
       0: aload_0
       1: getfield      #1478               // Field listInstance:Lscalaz/Traverse;
       4: areturn

  public void scalaz$std$ListInstances$_setter_$listInstance_$eq(scalaz.Traverse<scala.collection.immutable.List>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1478               // Field listInstance:Lscalaz/Traverse;
       5: return

  public scalaz.Traverse<scala.Function0> function0Instance();
    Code:
       0: aload_0
       1: getfield      #1483               // Field function0Instance:Lscalaz/Traverse;
       4: areturn

  public scalaz.Arrow<scala.Function1> function1Instance();
    Code:
       0: aload_0
       1: getfield      #1486               // Field function1Instance:Lscalaz/Arrow;
       4: areturn

  public void scalaz$std$FunctionInstances$_setter_$function0Instance_$eq(scalaz.Traverse<scala.Function0>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1483               // Field function0Instance:Lscalaz/Traverse;
       5: return

  public void scalaz$std$FunctionInstances$_setter_$function1Instance_$eq(scalaz.Arrow<scala.Function1>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1486               // Field function1Instance:Lscalaz/Arrow;
       5: return

  public scalaz.Monoid<scala.runtime.BoxedUnit> unitInstance();
    Code:
       0: aload_0
       1: getfield      #1493               // Field unitInstance:Lscalaz/Monoid;
       4: areturn

  public scalaz.std.AnyValInstances$booleanInstance$ booleanInstance();
    Code:
       0: aload_0
       1: getfield      #1497               // Field booleanInstance$module:Lscalaz/std/AnyValInstances$booleanInstance$;
       4: ifnonnull     11
       7: aload_0
       8: invokespecial #1500               // Method booleanInstance$lzycompute$1:()V
      11: aload_0
      12: getfield      #1497               // Field booleanInstance$module:Lscalaz/std/AnyValInstances$booleanInstance$;
      15: areturn

  public scalaz.Monoid<java.lang.Object> booleanDisjunctionNewTypeInstance();
    Code:
       0: aload_0
       1: getfield      #1502               // Field booleanDisjunctionNewTypeInstance:Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid<java.lang.Object> booleanConjunctionNewTypeInstance();
    Code:
       0: aload_0
       1: getfield      #1504               // Field booleanConjunctionNewTypeInstance:Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid<java.lang.Object> byteInstance();
    Code:
       0: aload_0
       1: getfield      #1506               // Field byteInstance:Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid<java.lang.Object> byteMultiplicationNewType();
    Code:
       0: aload_0
       1: getfield      #1508               // Field byteMultiplicationNewType:Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid<java.lang.Object> char();
    Code:
       0: aload_0
       1: getfield      #1510               // Field char:Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid<java.lang.Object> charMultiplicationNewType();
    Code:
       0: aload_0
       1: getfield      #1512               // Field charMultiplicationNewType:Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid<java.lang.Object> shortInstance();
    Code:
       0: aload_0
       1: getfield      #1514               // Field shortInstance:Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid<java.lang.Object> shortMultiplicationNewType();
    Code:
       0: aload_0
       1: getfield      #1516               // Field shortMultiplicationNewType:Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid<java.lang.Object> intInstance();
    Code:
       0: aload_0
       1: getfield      #1518               // Field intInstance:Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid<java.lang.Object> intMultiplicationNewType();
    Code:
       0: aload_0
       1: getfield      #1520               // Field intMultiplicationNewType:Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid<java.lang.Object> longInstance();
    Code:
       0: aload_0
       1: getfield      #1522               // Field longInstance:Lscalaz/Monoid;
       4: areturn

  public scalaz.Monoid<java.lang.Object> longMultiplicationNewType();
    Code:
       0: aload_0
       1: getfield      #1524               // Field longMultiplicationNewType:Lscalaz/Monoid;
       4: areturn

  public scalaz.Order<java.lang.Object> floatInstance();
    Code:
       0: aload_0
       1: getfield      #1528               // Field floatInstance:Lscalaz/Order;
       4: areturn

  public scalaz.Order<java.lang.Object> doubleInstance();
    Code:
       0: aload_0
       1: getfield      #1530               // Field doubleInstance:Lscalaz/Order;
       4: areturn

  public void scalaz$std$AnyValInstances$_setter_$unitInstance_$eq(scalaz.Monoid<scala.runtime.BoxedUnit>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1493               // Field unitInstance:Lscalaz/Monoid;
       5: return

  public void scalaz$std$AnyValInstances$_setter_$booleanDisjunctionNewTypeInstance_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1502               // Field booleanDisjunctionNewTypeInstance:Lscalaz/Monoid;
       5: return

  public void scalaz$std$AnyValInstances$_setter_$booleanConjunctionNewTypeInstance_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1504               // Field booleanConjunctionNewTypeInstance:Lscalaz/Monoid;
       5: return

  public void scalaz$std$AnyValInstances$_setter_$byteInstance_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1506               // Field byteInstance:Lscalaz/Monoid;
       5: return

  public void scalaz$std$AnyValInstances$_setter_$byteMultiplicationNewType_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1508               // Field byteMultiplicationNewType:Lscalaz/Monoid;
       5: return

  public void scalaz$std$AnyValInstances$_setter_$char_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1510               // Field char:Lscalaz/Monoid;
       5: return

  public void scalaz$std$AnyValInstances$_setter_$charMultiplicationNewType_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1512               // Field charMultiplicationNewType:Lscalaz/Monoid;
       5: return

  public void scalaz$std$AnyValInstances$_setter_$shortInstance_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1514               // Field shortInstance:Lscalaz/Monoid;
       5: return

  public void scalaz$std$AnyValInstances$_setter_$shortMultiplicationNewType_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1516               // Field shortMultiplicationNewType:Lscalaz/Monoid;
       5: return

  public void scalaz$std$AnyValInstances$_setter_$intInstance_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1518               // Field intInstance:Lscalaz/Monoid;
       5: return

  public void scalaz$std$AnyValInstances$_setter_$intMultiplicationNewType_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1520               // Field intMultiplicationNewType:Lscalaz/Monoid;
       5: return

  public void scalaz$std$AnyValInstances$_setter_$longInstance_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1522               // Field longInstance:Lscalaz/Monoid;
       5: return

  public void scalaz$std$AnyValInstances$_setter_$longMultiplicationNewType_$eq(scalaz.Monoid<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1524               // Field longMultiplicationNewType:Lscalaz/Monoid;
       5: return

  public void scalaz$std$AnyValInstances$_setter_$floatInstance_$eq(scalaz.Order<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1528               // Field floatInstance:Lscalaz/Order;
       5: return

  public void scalaz$std$AnyValInstances$_setter_$doubleInstance_$eq(scalaz.Order<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1530               // Field doubleInstance:Lscalaz/Order;
       5: return

  private final void stringInstance$lzycompute$1();
    Code:
       0: aload_0
       1: monitorenter
       2: aload_0
       3: getfield      #1461               // Field stringInstance$module:Lscalaz/std/StringInstances$stringInstance$;
       6: ifnonnull     21
       9: aload_0
      10: new           #27                 // class scalaz/std/StringInstances$stringInstance$
      13: dup
      14: aload_0
      15: invokespecial #1551               // Method scalaz/std/StringInstances$stringInstance$."<init>":(Lscalaz/std/StringInstances;)V
      18: putfield      #1461               // Field stringInstance$module:Lscalaz/std/StringInstances$stringInstance$;
      21: aload_0
      22: monitorexit
      23: return
      24: aload_0
      25: monitorexit
      26: athrow
    Exception table:
       from    to  target type
           2    21    24   any

  private final void booleanInstance$lzycompute$1();
    Code:
       0: aload_0
       1: monitorenter
       2: aload_0
       3: getfield      #1497               // Field booleanInstance$module:Lscalaz/std/AnyValInstances$booleanInstance$;
       6: ifnonnull     21
       9: aload_0
      10: new           #22                 // class scalaz/std/AnyValInstances$booleanInstance$
      13: dup
      14: aload_0
      15: invokespecial #1556               // Method scalaz/std/AnyValInstances$booleanInstance$."<init>":(Lscalaz/std/AnyValInstances;)V
      18: putfield      #1497               // Field booleanInstance$module:Lscalaz/std/AnyValInstances$booleanInstance$;
      21: aload_0
      22: monitorexit
      23: return
      24: aload_0
      25: monitorexit
      26: athrow
    Exception table:
       from    to  target type
           2    21    24   any

  private scalaz.std.AllInstances$();
    Code:
       0: aload_0
       1: invokespecial #1557               // Method java/lang/Object."<init>":()V
       4: aload_0
       5: putstatic     #1559               // Field MODULE$:Lscalaz/std/AllInstances$;
       8: aload_0
       9: invokestatic  #1562               // InterfaceMethod scalaz/std/AnyValInstances.$init$:(Lscalaz/std/AnyValInstances;)V
      12: aload_0
      13: invokestatic  #1565               // InterfaceMethod scalaz/std/FunctionInstances1.$init$:(Lscalaz/std/FunctionInstances1;)V
      16: aload_0
      17: invokestatic  #1568               // InterfaceMethod scalaz/std/FunctionInstances0.$init$:(Lscalaz/std/FunctionInstances0;)V
      20: aload_0
      21: invokestatic  #1571               // InterfaceMethod scalaz/std/FunctionInstances.$init$:(Lscalaz/std/FunctionInstances;)V
      24: aload_0
      25: invokestatic  #1574               // InterfaceMethod scalaz/std/ListInstances0.$init$:(Lscalaz/std/ListInstances0;)V
      28: aload_0
      29: invokestatic  #1577               // InterfaceMethod scalaz/std/ListInstances.$init$:(Lscalaz/std/ListInstances;)V
      32: aload_0
      33: invokestatic  #1580               // InterfaceMethod scalaz/std/MapInstances0.$init$:(Lscalaz/std/MapInstances0;)V
      36: aload_0
      37: invokestatic  #1583               // InterfaceMethod scalaz/std/MapFunctions.$init$:(Lscalaz/std/MapFunctions;)V
      40: aload_0
      41: invokestatic  #1586               // InterfaceMethod scalaz/std/MapInstances.$init$:(Lscalaz/std/MapInstances;)V
      44: aload_0
      45: invokestatic  #1589               // InterfaceMethod scalaz/std/SortedMapInstances0.$init$:(Lscalaz/std/SortedMapInstances0;)V
      48: aload_0
      49: invokestatic  #1592               // InterfaceMethod scalaz/std/SortedMapFunctions.$init$:(Lscalaz/std/SortedMapFunctions;)V
      52: aload_0
      53: invokestatic  #1595               // InterfaceMethod scalaz/std/SortedMapInstances.$init$:(Lscalaz/std/SortedMapInstances;)V
      56: aload_0
      57: invokestatic  #1598               // InterfaceMethod scalaz/std/OptionInstances1.$init$:(Lscalaz/std/OptionInstances1;)V
      60: aload_0
      61: invokestatic  #1601               // InterfaceMethod scalaz/std/OptionInstances0.$init$:(Lscalaz/std/OptionInstances0;)V
      64: aload_0
      65: invokestatic  #1604               // InterfaceMethod scalaz/std/OptionInstances.$init$:(Lscalaz/std/OptionInstances;)V
      68: aload_0
      69: invokestatic  #1607               // InterfaceMethod scalaz/std/SetInstances.$init$:(Lscalaz/std/SetInstances;)V
      72: aload_0
      73: invokestatic  #1609               // InterfaceMethod scalaz/std/StringInstances.$init$:(Lscalaz/std/StringInstances;)V
      76: aload_0
      77: invokestatic  #1612               // InterfaceMethod scalaz/std/StreamInstances.$init$:(Lscalaz/std/StreamInstances;)V
      80: aload_0
      81: invokestatic  #1615               // InterfaceMethod scalaz/std/TupleInstances0.$init$:(Lscalaz/std/TupleInstances0;)V
      84: aload_0
      85: invokestatic  #1618               // InterfaceMethod scalaz/std/TupleInstances1.$init$:(Lscalaz/std/TupleInstances1;)V
      88: aload_0
      89: invokestatic  #1621               // InterfaceMethod scalaz/std/TupleInstances2.$init$:(Lscalaz/std/TupleInstances2;)V
      92: aload_0
      93: invokestatic  #1624               // InterfaceMethod scalaz/std/TupleInstances3.$init$:(Lscalaz/std/TupleInstances3;)V
      96: aload_0
      97: invokestatic  #1627               // InterfaceMethod scalaz/std/VectorInstances0.$init$:(Lscalaz/std/VectorInstances0;)V
     100: aload_0
     101: invokestatic  #1630               // InterfaceMethod scalaz/std/VectorInstances.$init$:(Lscalaz/std/VectorInstances;)V
     104: aload_0
     105: invokestatic  #1633               // InterfaceMethod scalaz/std/FutureInstances1.$init$:(Lscalaz/std/FutureInstances1;)V
     108: aload_0
     109: invokestatic  #1636               // InterfaceMethod scalaz/std/FutureInstances.$init$:(Lscalaz/std/FutureInstances;)V
     112: aload_0
     113: invokestatic  #1639               // InterfaceMethod scalaz/std/EitherInstances0.$init$:(Lscalaz/std/EitherInstances0;)V
     116: aload_0
     117: invokestatic  #1642               // InterfaceMethod scalaz/std/EitherInstances.$init$:(Lscalaz/std/EitherInstances;)V
     120: aload_0
     121: invokestatic  #1647               // InterfaceMethod scalaz/std/PartialFunctionInstances.$init$:(Lscalaz/std/PartialFunctionInstances;)V
     124: aload_0
     125: invokestatic  #1652               // InterfaceMethod scalaz/std/TypeConstraintInstances.$init$:(Lscalaz/std/TypeConstraintInstances;)V
     128: aload_0
     129: invokestatic  #1657               // InterfaceMethod scalaz/std/math/BigDecimalInstances.$init$:(Lscalaz/std/math/BigDecimalInstances;)V
     132: aload_0
     133: invokestatic  #1662               // InterfaceMethod scalaz/std/math/BigInts.$init$:(Lscalaz/std/math/BigInts;)V
     136: aload_0
     137: invokestatic  #1665               // InterfaceMethod scalaz/std/math/OrderingInstances.$init$:(Lscalaz/std/math/OrderingInstances;)V
     140: aload_0
     141: invokestatic  #1670               // InterfaceMethod scalaz/std/java/util/MapInstances.$init$:(Lscalaz/std/java/util/MapInstances;)V
     144: aload_0
     145: invokestatic  #1675               // InterfaceMethod scalaz/std/java/math/BigDecimalInstances.$init$:(Lscalaz/std/java/math/BigDecimalInstances;)V
     148: aload_0
     149: invokestatic  #1680               // InterfaceMethod scalaz/std/java/math/BigIntegerInstances.$init$:(Lscalaz/std/java/math/BigIntegerInstances;)V
     152: aload_0
     153: invokestatic  #1683               // InterfaceMethod scalaz/std/java/EnumInstances.$init$:(Lscalaz/std/java/EnumInstances;)V
     156: aload_0
     157: invokestatic  #1686               // InterfaceMethod scalaz/std/java/util/concurrent/CallableInstances.$init$:(Lscalaz/std/java/util/concurrent/CallableInstances;)V
     160: return
}
