Compiled from "Stream.scala"
public final class scalaz.std.stream {
  public static <A, B> scala.collection.immutable.Stream<B> unfoldm(A, scala.Function1<A, scalaz.Maybe<scala.Tuple2<B, A>>>);
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: aload_0
       4: aload_1
       5: invokevirtual #24                 // Method scalaz/std/stream$.unfoldm:(Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/Stream;
       8: areturn

  public static <A, B> scala.collection.immutable.Stream<B> unfold(A, scala.Function1<A, scala.Option<scala.Tuple2<B, A>>>);
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: aload_0
       4: aload_1
       5: invokevirtual #28                 // Method scalaz/std/stream$.unfold:(Ljava/lang/Object;Lscala/Function1;)Lscala/collection/immutable/Stream;
       8: areturn

  public static <A> scala.collection.immutable.Stream<A> intersperse(scala.collection.immutable.Stream<A>, A);
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: aload_0
       4: aload_1
       5: invokevirtual #35                 // Method scalaz/std/stream$.intersperse:(Lscala/collection/immutable/Stream;Ljava/lang/Object;)Lscala/collection/immutable/Stream;
       8: areturn

  public static <A, B, M> M unfoldForestM(scala.collection.immutable.Stream<A>, scala.Function1<A, M>, scalaz.Monad<M>);
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #41                 // Method scalaz/std/stream$.unfoldForestM:(Lscala/collection/immutable/Stream;Lscala/Function1;Lscalaz/Monad;)Ljava/lang/Object;
       9: areturn

  public static <A, B> scala.collection.immutable.Stream<scalaz.Tree<B>> unfoldForest(scala.collection.immutable.Stream<A>, scala.Function1<A, scala.Tuple2<B, scala.Function0<scala.collection.immutable.Stream<A>>>>);
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: aload_0
       4: aload_1
       5: invokevirtual #46                 // Method scalaz/std/stream$.unfoldForest:(Lscala/collection/immutable/Stream;Lscala/Function1;)Lscala/collection/immutable/Stream;
       8: areturn

  public static <A, B, C> scala.collection.immutable.Stream<scala.Function1<B, C>> zapp(scala.collection.immutable.Stream<A>, scala.collection.immutable.Stream<scala.Function1<A, scala.Function1<B, C>>>);
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: aload_0
       4: aload_1
       5: invokevirtual #51                 // Method scalaz/std/stream$.zapp:(Lscala/collection/immutable/Stream;Lscala/collection/immutable/Stream;)Lscala/collection/immutable/Stream;
       8: areturn

  public static <A> scala.collection.immutable.Stream<scala.collection.immutable.Stream<A>> tails(scala.collection.immutable.Stream<A>);
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: aload_0
       4: invokevirtual #56                 // Method scalaz/std/stream$.tails:(Lscala/collection/immutable/Stream;)Lscala/collection/immutable/Stream;
       7: areturn

  public static <A> scala.collection.immutable.Stream<scala.collection.immutable.Stream<A>> heads(scala.collection.immutable.Stream<A>);
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: aload_0
       4: invokevirtual #59                 // Method scalaz/std/stream$.heads:(Lscala/collection/immutable/Stream;)Lscala/collection/immutable/Stream;
       7: areturn

  public static <A> scalaz.Maybe<scalaz.Zipper<A>> zipperEnd(scala.collection.immutable.Stream<A>);
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: aload_0
       4: invokevirtual #64                 // Method scalaz/std/stream$.zipperEnd:(Lscala/collection/immutable/Stream;)Lscalaz/Maybe;
       7: areturn

  public static <A> scalaz.Maybe<scalaz.Zipper<A>> toZipper(scala.collection.immutable.Stream<A>);
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: aload_0
       4: invokevirtual #67                 // Method scalaz/std/stream$.toZipper:(Lscala/collection/immutable/Stream;)Lscalaz/Maybe;
       7: areturn

  public static <A> scala.collection.immutable.Stream<A> interleave(scala.collection.immutable.Stream<A>, scala.collection.immutable.Stream<A>);
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: aload_0
       4: aload_1
       5: invokevirtual #73                 // Method scalaz/std/stream$.interleave:(Lscala/collection/immutable/Stream;Lscala/collection/immutable/Stream;)Lscala/collection/immutable/Stream;
       8: areturn

  public static <A> scalaz.Show<scala.collection.immutable.Stream<A>> streamShow(scalaz.Show<A>);
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: aload_0
       4: invokevirtual #79                 // Method scalaz/std/stream$.streamShow:(Lscalaz/Show;)Lscalaz/Show;
       7: areturn

  public static <A> scalaz.Order<scala.collection.immutable.Stream<A>> streamOrder(scalaz.Order<A>);
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: aload_0
       4: invokevirtual #84                 // Method scalaz/std/stream$.streamOrder:(Lscalaz/Order;)Lscalaz/Order;
       7: areturn

  public static <A> scalaz.Equal<scala.collection.immutable.Stream<A>> streamEqual(scalaz.Equal<A>);
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: aload_0
       4: invokevirtual #89                 // Method scalaz/std/stream$.streamEqual:(Lscalaz/Equal;)Lscalaz/Equal;
       7: areturn

  public static <A> scalaz.Monoid<scala.collection.immutable.Stream<A>> streamMonoid();
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: invokevirtual #94                 // Method scalaz/std/stream$.streamMonoid:()Lscalaz/Monoid;
       6: areturn

  public static scalaz.Applicative<?> streamZipApplicative();
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: invokevirtual #99                 // Method scalaz/std/stream$.streamZipApplicative:()Lscalaz/Applicative;
       6: areturn

  public static scalaz.Traverse<scala.collection.immutable.Stream> streamInstance();
    Code:
       0: getstatic     #22                 // Field scalaz/std/stream$.MODULE$:Lscalaz/std/stream$;
       3: invokevirtual #104                // Method scalaz/std/stream$.streamInstance:()Lscalaz/Traverse;
       6: areturn
}
