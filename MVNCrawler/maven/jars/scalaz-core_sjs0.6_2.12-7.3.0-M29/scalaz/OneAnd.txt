Compiled from "OneAnd.scala"
public final class scalaz.OneAnd<F, A> {
  private final scalaz.Name<A> hd;

  private final scalaz.Name<F> tl;

  public static scalaz.Isomorphisms$Iso2<scalaz.NaturalTransformation, scalaz.NonEmptyList, ?> oneAndNelIso();
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: invokevirtual #39                 // Method scalaz/OneAnd$.oneAndNelIso:()Lscalaz/Isomorphisms$Iso2;
       6: areturn

  public static <F, A> scala.Some<scala.Tuple2<A, F>> unapply(scalaz.OneAnd<F, A>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: invokevirtual #45                 // Method scalaz/OneAnd$.unapply:(Lscalaz/OneAnd;)Lscala/Some;
       7: areturn

  public static <F, A> scalaz.OneAnd<F, A> apply(A, F);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: aload_1
       5: invokevirtual #50                 // Method scalaz/OneAnd$.apply:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/OneAnd;
       8: areturn

  public static <F> scalaz.Unzip<?> oneAndUnzip(scalaz.Unzip<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: invokevirtual #56                 // Method scalaz/OneAnd$.oneAndUnzip:(Lscalaz/Unzip;)Lscalaz/Unzip;
       7: areturn

  public static <F> scalaz.Zip<?> oneAndZip(scalaz.Zip<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: invokevirtual #62                 // Method scalaz/OneAnd$.oneAndZip:(Lscalaz/Zip;)Lscalaz/Zip;
       7: areturn

  public static <F, A> scalaz.Semigroup<scalaz.OneAnd<F, A>> oneAndSemigroup(scalaz.Applicative<F>, scalaz.Plus<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: aload_1
       5: invokevirtual #69                 // Method scalaz/OneAnd$.oneAndSemigroup:(Lscalaz/Applicative;Lscalaz/Plus;)Lscalaz/Semigroup;
       8: areturn

  public static <F, A> scalaz.Order<scalaz.OneAnd<F, A>> oneAndOrder(scalaz.Order<A>, scalaz.Order<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: aload_1
       5: invokevirtual #76                 // Method scalaz/OneAnd$.oneAndOrder:(Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
       8: areturn

  public static <F, A> scalaz.Show<scalaz.OneAnd<F, A>> oneAndShow(scalaz.Show<A>, scalaz.Show<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: aload_1
       5: invokevirtual #81                 // Method scalaz/OneAnd$.oneAndShow:(Lscalaz/Show;Lscalaz/Show;)Lscalaz/Show;
       8: areturn

  public static <F> scalaz.Traverse1<?> oneAndTraverse1(scalaz.Traverse1<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: invokevirtual #87                 // Method scalaz/OneAnd$.oneAndTraverse1:(Lscalaz/Traverse1;)Lscalaz/Traverse1;
       7: areturn

  public static <F> scalaz.Plus<?> oneAndPlus(scalaz.Applicative<F>, scalaz.Plus<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: aload_1
       5: invokevirtual #94                 // Method scalaz/OneAnd$.oneAndPlus:(Lscalaz/Applicative;Lscalaz/Plus;)Lscalaz/Plus;
       8: areturn

  public static <F> scalaz.Traverse1<?> oneAndTraverse(scalaz.Traverse<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: invokevirtual #100                // Method scalaz/OneAnd$.oneAndTraverse:(Lscalaz/Traverse;)Lscalaz/Traverse1;
       7: areturn

  public static <F, A> scalaz.Equal<scalaz.OneAnd<F, A>> oneAndEqual(scalaz.Equal<A>, scalaz.Equal<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: aload_1
       5: invokevirtual #105                // Method scalaz/OneAnd$.oneAndEqual:(Lscalaz/Equal;Lscalaz/Equal;)Lscalaz/Equal;
       8: areturn

  public static <F> scalaz.Foldable1<?> oneAndFoldable1(scalaz.Foldable1<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: invokevirtual #111                // Method scalaz/OneAnd$.oneAndFoldable1:(Lscalaz/Foldable1;)Lscalaz/Foldable1;
       7: areturn

  public static <F> scalaz.Foldable1<?> oneAndFoldable(scalaz.Foldable<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: invokevirtual #117                // Method scalaz/OneAnd$.oneAndFoldable:(Lscalaz/Foldable;)Lscalaz/Foldable1;
       7: areturn

  public static <F> scalaz.Monad<?> oneAndMonad(scalaz.MonadPlus<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: invokevirtual #123                // Method scalaz/OneAnd$.oneAndMonad:(Lscalaz/MonadPlus;)Lscalaz/Monad;
       7: areturn

  public static <F> scalaz.Alt<?> oneAndAlt(scalaz.Alt<F>, scalaz.PlusEmpty<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: aload_1
       5: invokevirtual #130                // Method scalaz/OneAnd$.oneAndAlt:(Lscalaz/Alt;Lscalaz/PlusEmpty;)Lscalaz/Alt;
       8: areturn

  public static <F> scalaz.Bind<?> oneAndBind(scalaz.Monad<F>, scalaz.Plus<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: aload_1
       5: invokevirtual #137                // Method scalaz/OneAnd$.oneAndBind:(Lscalaz/Monad;Lscalaz/Plus;)Lscalaz/Bind;
       8: areturn

  public static <F> scalaz.Applicative<?> oneAndApplicative(scalaz.ApplicativePlus<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: invokevirtual #143                // Method scalaz/OneAnd$.oneAndApplicative:(Lscalaz/ApplicativePlus;)Lscalaz/Applicative;
       7: areturn

  public static <F> scalaz.Align<?> oneAndAlign(scalaz.Align<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: invokevirtual #149                // Method scalaz/OneAnd$.oneAndAlign:(Lscalaz/Align;)Lscalaz/Align;
       7: areturn

  public static <F> scalaz.Apply<?> oneAndApply(scalaz.Applicative<F>, scalaz.Plus<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: aload_1
       5: invokevirtual #156                // Method scalaz/OneAnd$.oneAndApply:(Lscalaz/Applicative;Lscalaz/Plus;)Lscalaz/Apply;
       8: areturn

  public static <F> scalaz.Functor<?> oneAndFunctor(scalaz.Functor<F>);
    Code:
       0: getstatic     #37                 // Field scalaz/OneAnd$.MODULE$:Lscalaz/OneAnd$;
       3: aload_0
       4: invokevirtual #162                // Method scalaz/OneAnd$.oneAndFunctor:(Lscalaz/Functor;)Lscalaz/Functor;
       7: areturn

  private scalaz.Name<A> hd();
    Code:
       0: aload_0
       1: getfield      #166                // Field hd:Lscalaz/Name;
       4: areturn

  private scalaz.Name<F> tl();
    Code:
       0: aload_0
       1: getfield      #171                // Field tl:Lscalaz/Name;
       4: areturn

  public A head();
    Code:
       0: aload_0
       1: invokespecial #176                // Method hd:()Lscalaz/Name;
       4: invokevirtual #181                // Method scalaz/Name.value:()Ljava/lang/Object;
       7: areturn

  public F tail();
    Code:
       0: aload_0
       1: invokespecial #185                // Method tl:()Lscalaz/Name;
       4: invokevirtual #181                // Method scalaz/Name.value:()Ljava/lang/Object;
       7: areturn

  public java.lang.String toString();
    Code:
       0: new           #189                // class java/lang/StringBuilder
       3: dup
       4: ldc           #190                // int 9
       6: invokespecial #194                // Method java/lang/StringBuilder."<init>":(I)V
       9: ldc           #196                // String OneAnd(
      11: invokevirtual #200                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: aload_0
      15: invokevirtual #202                // Method head:()Ljava/lang/Object;
      18: invokevirtual #205                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      21: ldc           #207                // String ,
      23: invokevirtual #200                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: invokevirtual #209                // Method tail:()Ljava/lang/Object;
      30: invokevirtual #205                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      33: ldc           #211                // String )
      35: invokevirtual #200                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: invokevirtual #213                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: areturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #202                // Method head:()Ljava/lang/Object;
       4: invokevirtual #217                // Method java/lang/Object.hashCode:()I
       7: bipush        13
       9: aload_0
      10: invokevirtual #209                // Method tail:()Ljava/lang/Object;
      13: invokevirtual #217                // Method java/lang/Object.hashCode:()I
      16: imul
      17: iadd
      18: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class scalaz/OneAnd
       4: ifeq          54
       7: aload_1
       8: checkcast     #2                  // class scalaz/OneAnd
      11: astore_3
      12: aload_0
      13: aload_3
      14: if_acmpeq     45
      17: aload_0
      18: invokevirtual #202                // Method head:()Ljava/lang/Object;
      21: aload_3
      22: invokevirtual #202                // Method head:()Ljava/lang/Object;
      25: invokestatic  #225                // Method scala/runtime/BoxesRunTime.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      28: ifeq          49
      31: aload_0
      32: invokevirtual #209                // Method tail:()Ljava/lang/Object;
      35: aload_3
      36: invokevirtual #209                // Method tail:()Ljava/lang/Object;
      39: invokestatic  #225                // Method scala/runtime/BoxesRunTime.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      42: ifeq          49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: istore_2
      51: goto          56
      54: iconst_0
      55: istore_2
      56: iload_2
      57: ireturn

  public scalaz.OneAnd(scalaz.Name<A>, scalaz.Name<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #166                // Field hd:Lscalaz/Name;
       5: aload_0
       6: aload_2
       7: putfield      #171                // Field tl:Lscalaz/Name;
      10: aload_0
      11: invokespecial #231                // Method java/lang/Object."<init>":()V
      14: return
}
