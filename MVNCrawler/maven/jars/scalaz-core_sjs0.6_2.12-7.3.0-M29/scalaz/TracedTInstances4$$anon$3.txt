Compiled from "TracedT.scala"
public final class scalaz.TracedTInstances4$$anon$3 implements scalaz.TracedTDistributive<W, C> {
  private final scalaz.syntax.DistributiveSyntax<?> distributiveSyntax;

  private final scalaz.syntax.FunctorSyntax<?> functorSyntax;

  private final scalaz.syntax.InvariantFunctorSyntax<?> invariantFunctorSyntax;

  private final scalaz.Distributive evidence$3$1;

  public final <G, A, B> scalaz.TracedT<W, C, G> distributeImpl(G, scala.Function1<A, scalaz.TracedT<W, C, B>>, scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #59                 // InterfaceMethod scalaz/TracedTDistributive.distributeImpl$:(Lscalaz/TracedTDistributive;Ljava/lang/Object;Lscala/Function1;Lscalaz/Functor;)Lscalaz/TracedT;
       7: areturn

  public final <A, B> scalaz.TracedT<W, C, B> map(scalaz.TracedT<W, C, A>, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #73                 // InterfaceMethod scalaz/TracedTFunctor.map$:(Lscalaz/TracedTFunctor;Lscalaz/TracedT;Lscala/Function1;)Lscalaz/TracedT;
       6: areturn

  public <G> scalaz.Distributive<?> compose(scalaz.Distributive<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #81                 // InterfaceMethod scalaz/Distributive.compose$:(Lscalaz/Distributive;Lscalaz/Distributive;)Lscalaz/Distributive;
       5: areturn

  public <G> scalaz.Distributive<?> product(scalaz.Distributive<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #85                 // InterfaceMethod scalaz/Distributive.product$:(Lscalaz/Distributive;Lscalaz/Distributive;)Lscalaz/Distributive;
       5: areturn

  public <G> scalaz.Distributive<?>.Distribution<G> distribution(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #93                 // InterfaceMethod scalaz/Distributive.distribution$:(Lscalaz/Distributive;Lscalaz/Functor;)Lscalaz/Distributive$Distribution;
       5: areturn

  public java.lang.Object distribute(java.lang.Object, scala.Function1, scalaz.Functor);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #100                // InterfaceMethod scalaz/Distributive.distribute$:(Lscalaz/Distributive;Ljava/lang/Object;Lscala/Function1;Lscalaz/Functor;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object cosequence(java.lang.Object, scalaz.Functor);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #107                // InterfaceMethod scalaz/Distributive.cosequence$:(Lscalaz/Distributive;Ljava/lang/Object;Lscalaz/Functor;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object xmap(java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #114                // InterfaceMethod scalaz/Functor.xmap$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public java.lang.Object apply(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #120                // InterfaceMethod scalaz/Functor.apply$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> scala.Function1<scalaz.TracedT<W, C, A>, scalaz.TracedT<W, C, B>> lift(scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #127                // InterfaceMethod scalaz/Functor.lift$:(Lscalaz/Functor;Lscala/Function1;)Lscala/Function1;
       5: areturn

  public java.lang.Object strengthL(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #134                // InterfaceMethod scalaz/Functor.strengthL$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object strengthR(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #139                // InterfaceMethod scalaz/Functor.strengthR$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object mapply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #143                // InterfaceMethod scalaz/Functor.mapply$:(Lscalaz/Functor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object fpair(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #149                // InterfaceMethod scalaz/Functor.fpair$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object fproduct(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #153                // InterfaceMethod scalaz/Functor.fproduct$:(Lscalaz/Functor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object void(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #157                // InterfaceMethod scalaz/Functor.void$:(Lscalaz/Functor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object counzip(scalaz.$bslash$div);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #163                // InterfaceMethod scalaz/Functor.counzip$:(Lscalaz/Functor;Lscalaz/$bslash$div;)Ljava/lang/Object;
       5: areturn

  public <G> scalaz.Functor<?> compose(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #169                // InterfaceMethod scalaz/Functor.compose$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public <G> scalaz.Contravariant<?> icompose(scalaz.Contravariant<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #176                // InterfaceMethod scalaz/Functor.icompose$:(Lscalaz/Functor;Lscalaz/Contravariant;)Lscalaz/Contravariant;
       5: areturn

  public <G> scalaz.Bifunctor<?> bicompose(scalaz.Bifunctor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #185                // InterfaceMethod scalaz/Functor.bicompose$:(Lscalaz/Functor;Lscalaz/Bifunctor;)Lscalaz/Bifunctor;
       5: areturn

  public <G> scalaz.Functor<?> product(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #188                // InterfaceMethod scalaz/Functor.product$:(Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Functor;
       5: areturn

  public java.lang.Object widen(java.lang.Object, scalaz.Liskov);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #195                // InterfaceMethod scalaz/Functor.widen$:(Lscalaz/Functor;Ljava/lang/Object;Lscalaz/Liskov;)Ljava/lang/Object;
       6: areturn

  public scalaz.Functor<?>.FunctorLaw functorLaw();
    Code:
       0: aload_0
       1: invokestatic  #203                // InterfaceMethod scalaz/Functor.functorLaw$:(Lscalaz/Functor;)Lscalaz/Functor$FunctorLaw;
       4: areturn

  public java.lang.Object xmapb(java.lang.Object, scalaz.BijectionT);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #210                // InterfaceMethod scalaz/InvariantFunctor.xmapb$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/BijectionT;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object xmapi(java.lang.Object, scalaz.Isomorphisms$Iso);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #218                // InterfaceMethod scalaz/InvariantFunctor.xmapi$:(Lscalaz/InvariantFunctor;Ljava/lang/Object;Lscalaz/Isomorphisms$Iso;)Ljava/lang/Object;
       6: areturn

  public scalaz.InvariantFunctor<?>.InvariantFunctorLaw invariantFunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #226                // InterfaceMethod scalaz/InvariantFunctor.invariantFunctorLaw$:(Lscalaz/InvariantFunctor;)Lscalaz/InvariantFunctor$InvariantFunctorLaw;
       4: areturn

  public scalaz.syntax.DistributiveSyntax<?> distributiveSyntax();
    Code:
       0: aload_0
       1: getfield      #230                // Field distributiveSyntax:Lscalaz/syntax/DistributiveSyntax;
       4: areturn

  public void scalaz$Distributive$_setter_$distributiveSyntax_$eq(scalaz.syntax.DistributiveSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #230                // Field distributiveSyntax:Lscalaz/syntax/DistributiveSyntax;
       5: return

  public scalaz.syntax.FunctorSyntax<?> functorSyntax();
    Code:
       0: aload_0
       1: getfield      #238                // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       4: areturn

  public void scalaz$Functor$_setter_$functorSyntax_$eq(scalaz.syntax.FunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #238                // Field functorSyntax:Lscalaz/syntax/FunctorSyntax;
       5: return

  public scalaz.syntax.InvariantFunctorSyntax<?> invariantFunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #245                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       4: areturn

  public void scalaz$InvariantFunctor$_setter_$invariantFunctorSyntax_$eq(scalaz.syntax.InvariantFunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #245                // Field invariantFunctorSyntax:Lscalaz/syntax/InvariantFunctorSyntax;
       5: return

  public scalaz.Distributive<W> W();
    Code:
       0: getstatic     #257                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #259                // Field evidence$3$1:Lscalaz/Distributive;
       7: invokevirtual #262                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #22                 // class scalaz/Distributive
      13: areturn

  public final java.lang.Object map(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #264                // class scalaz/TracedT
       4: astore_3
       5: aload_3
       6: aload_0
       7: invokeinterface #267,  1          // InterfaceMethod scalaz/TracedTFunctor.W:()Lscalaz/Functor;
      12: astore        4
      14: ifnonnull     19
      17: aconst_null
      18: athrow
      19: new           #264                // class scalaz/TracedT
      22: dup
      23: aload         4
      25: aload_3
      26: invokevirtual #271                // Method scalaz/TracedT.run:()Ljava/lang/Object;
      29: aload_2
      30: invokedynamic #291,  0            // InvokeDynamic #0:apply:(Lscala/Function1;)Lscala/Function1;
      35: invokeinterface #293,  3          // InterfaceMethod scalaz/Functor.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      40: invokespecial #297                // Method scalaz/TracedT."<init>":(Ljava/lang/Object;)V
      43: areturn

  public final java.lang.Object distributeImpl(java.lang.Object, scala.Function1, scalaz.Functor);
    Code:
       0: new           #264                // class scalaz/TracedT
       3: dup
       4: aload_0
       5: invokeinterface #301,  1          // InterfaceMethod scalaz/TracedTDistributive.W:()Lscalaz/Distributive;
      10: aload_0
      11: invokeinterface #301,  1          // InterfaceMethod scalaz/TracedTDistributive.W:()Lscalaz/Distributive;
      16: aload_3
      17: aload_1
      18: aload_2
      19: invokedynamic #308,  0            // InvokeDynamic #1:apply:(Lscala/Function1;)Lscala/Function1;
      24: invokeinterface #293,  3          // InterfaceMethod scalaz/Functor.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      29: aload_3
      30: invokeinterface #310,  3          // InterfaceMethod scalaz/Distributive.cosequence:(Ljava/lang/Object;Lscalaz/Functor;)Ljava/lang/Object;
      35: aload_3
      36: invokedynamic #320,  0            // InvokeDynamic #2:apply:(Lscalaz/Functor;)Lscala/Function1;
      41: invokeinterface #321,  3          // InterfaceMethod scalaz/Distributive.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      46: invokespecial #297                // Method scalaz/TracedT."<init>":(Ljava/lang/Object;)V
      49: areturn

  public scalaz.Functor W();
    Code:
       0: aload_0
       1: invokevirtual #322                // Method W:()Lscalaz/Distributive;
       4: areturn

  public scalaz.TracedTInstances4$$anon$3(scalaz.TracedTInstances4, scalaz.Distributive);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #259                // Field evidence$3$1:Lscalaz/Distributive;
       5: aload_0
       6: invokespecial #327                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #331                // InterfaceMethod scalaz/InvariantFunctor.$init$:(Lscalaz/InvariantFunctor;)V
      13: aload_0
      14: invokestatic  #334                // InterfaceMethod scalaz/Functor.$init$:(Lscalaz/Functor;)V
      17: aload_0
      18: invokestatic  #337                // InterfaceMethod scalaz/Distributive.$init$:(Lscalaz/Distributive;)V
      21: aload_0
      22: invokestatic  #340                // InterfaceMethod scalaz/TracedTFunctor.$init$:(Lscalaz/TracedTFunctor;)V
      25: aload_0
      26: invokestatic  #343                // InterfaceMethod scalaz/TracedTDistributive.$init$:(Lscalaz/TracedTDistributive;)V
      29: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #356,  0            // InvokeDynamic #3:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
