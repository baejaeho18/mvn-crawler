Compiled from "Bitraverse.scala"
public final class scalaz.Bitraverse$$anon$8 implements scalaz.IsomorphismBitraverse<F, G> {
  private final scalaz.syntax.BitraverseSyntax<F> bitraverseSyntax;

  private final scalaz.syntax.BifoldableSyntax<F> bifoldableSyntax;

  private final scalaz.syntax.BifunctorSyntax<F> bifunctorSyntax;

  private final scalaz.Bitraverse E$1;

  private final scalaz.Isomorphisms$Iso3 D$1;

  public final scalaz.BiNaturalTransformation<F, G> biNaturalTrans();
    Code:
       0: aload_0
       1: invokestatic  #48                 // InterfaceMethod scalaz/IsomorphismBitraverse.biNaturalTrans$:(Lscalaz/IsomorphismBitraverse;)Lscalaz/BiNaturalTransformation;
       4: areturn

  public <H, A, B, C, D> H bitraverseImpl(F, scala.Function1<A, H>, scala.Function1<B, H>, scalaz.Applicative<H>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #61                 // InterfaceMethod scalaz/IsomorphismBitraverse.bitraverseImpl$:(Lscalaz/IsomorphismBitraverse;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       9: areturn

  public <A, B, M> M bifoldMap(F, scala.Function1<A, M>, scala.Function1<B, M>, scalaz.Monoid<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #74                 // InterfaceMethod scalaz/IsomorphismBifoldable.bifoldMap$:(Lscalaz/IsomorphismBifoldable;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public <A, B, C> C bifoldRight(F, scala.Function0<C>, scala.Function2<A, scala.Function0<C>, C>, scala.Function2<B, scala.Function0<C>, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #83                 // InterfaceMethod scalaz/IsomorphismBifoldable.bifoldRight$:(Lscalaz/IsomorphismBifoldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;
       9: areturn

  public <A, B, C> C bifoldLeft(F, C, scala.Function2<C, A, C>, scala.Function2<C, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #93                 // InterfaceMethod scalaz/IsomorphismBifoldable.bifoldLeft$:(Lscalaz/IsomorphismBifoldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;
       9: areturn

  public <A, B, C, D> F bimap(F, scala.Function1<A, C>, scala.Function1<B, D>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #102                // InterfaceMethod scalaz/IsomorphismBifunctor.bimap$:(Lscalaz/IsomorphismBifunctor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public <G> scalaz.Bitraverse<?> compose(scalaz.Bitraverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #110                // InterfaceMethod scalaz/Bitraverse.compose$:(Lscalaz/Bitraverse;Lscalaz/Bitraverse;)Lscalaz/Bitraverse;
       5: areturn

  public <G> scalaz.Bitraverse<?> product(scalaz.Bitraverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #114                // InterfaceMethod scalaz/Bitraverse.product$:(Lscalaz/Bitraverse;Lscalaz/Bitraverse;)Lscalaz/Bitraverse;
       5: areturn

  public <G, A, B, C, D> scala.Function1<F, G> bitraverseF(scala.Function1<A, G>, scala.Function1<B, G>, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #122                // InterfaceMethod scalaz/Bitraverse.bitraverseF$:(Lscalaz/Bitraverse;Lscala/Function1;Lscala/Function1;Lscalaz/Applicative;)Lscala/Function1;
       7: areturn

  public <X> scalaz.Traverse<?> leftTraverse();
    Code:
       0: aload_0
       1: invokestatic  #129                // InterfaceMethod scalaz/Bitraverse.leftTraverse$:(Lscalaz/Bitraverse;)Lscalaz/Traverse;
       4: areturn

  public <X> scalaz.Traverse<?> rightTraverse();
    Code:
       0: aload_0
       1: invokestatic  #133                // InterfaceMethod scalaz/Bitraverse.rightTraverse$:(Lscalaz/Bitraverse;)Lscalaz/Traverse;
       4: areturn

  public scalaz.Traverse<?> uTraverse();
    Code:
       0: aload_0
       1: invokestatic  #138                // InterfaceMethod scalaz/Bitraverse.uTraverse$:(Lscalaz/Bitraverse;)Lscalaz/Traverse;
       4: areturn

  public <G> scalaz.Bitraverse<F>.Bitraversal<G> bitraversal(scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #146                // InterfaceMethod scalaz/Bitraverse.bitraversal$:(Lscalaz/Bitraverse;Lscalaz/Applicative;)Lscalaz/Bitraverse$Bitraversal;
       5: areturn

  public <S> scalaz.Bitraverse<F>.Bitraversal<?> bitraversalS();
    Code:
       0: aload_0
       1: invokestatic  #153                // InterfaceMethod scalaz/Bitraverse.bitraversalS$:(Lscalaz/Bitraverse;)Lscalaz/Bitraverse$Bitraversal;
       4: areturn

  public <G, A, B, C, D> G bitraverse(F, scala.Function1<A, G>, scala.Function1<B, G>, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #160                // InterfaceMethod scalaz/Bitraverse.bitraverse$:(Lscalaz/Bitraverse;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       9: areturn

  public <S, A, B, C, D> scalaz.IndexedStateT<S, S, java.lang.Object, F> bitraverseS(F, scala.Function1<A, scalaz.IndexedStateT<S, S, ?, C>>, scala.Function1<B, scalaz.IndexedStateT<S, S, ?, D>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #167                // InterfaceMethod scalaz/Bitraverse.bitraverseS$:(Lscalaz/Bitraverse;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Lscalaz/IndexedStateT;
       7: areturn

  public <S, A, B, C, D> scala.Tuple2<S, F> runBitraverseS(F, S, scala.Function1<A, scalaz.IndexedStateT<S, S, ?, C>>, scala.Function1<B, scalaz.IndexedStateT<S, S, ?, D>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #175                // InterfaceMethod scalaz/Bitraverse.runBitraverseS$:(Lscalaz/Bitraverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Lscala/Tuple2;
       9: areturn

  public <S, G, A, B, C, D> scalaz.IndexedStateT<S, S, java.lang.Object, G> traverseSTrampoline(F, scala.Function1<A, scalaz.IndexedStateT<S, S, ?, G>>, scala.Function1<B, scalaz.IndexedStateT<S, S, ?, G>>, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #182                // InterfaceMethod scalaz/Bitraverse.traverseSTrampoline$:(Lscalaz/Bitraverse;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Applicative;)Lscalaz/IndexedStateT;
       9: areturn

  public <S, G, A, B, C, D> scalaz.Kleisli<G, S, F> bitraverseKTrampoline(F, scala.Function1<A, scalaz.Kleisli<G, S, C>>, scala.Function1<B, scalaz.Kleisli<G, S, D>>, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #190                // InterfaceMethod scalaz/Bitraverse.bitraverseKTrampoline$:(Lscalaz/Bitraverse;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Applicative;)Lscalaz/Kleisli;
       9: areturn

  public <A, B, C> scala.Tuple2<C, F> bifoldLShape(F, C, scala.Function2<C, A, C>, scala.Function2<C, B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #197                // InterfaceMethod scalaz/Bitraverse.bifoldLShape$:(Lscalaz/Bitraverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;Lscala/Function2;)Lscala/Tuple2;
       9: areturn

  public <G, A, B> G bisequence(F, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #206                // InterfaceMethod scalaz/Bitraverse.bisequence$:(Lscalaz/Bitraverse;Ljava/lang/Object;Lscalaz/Applicative;)Ljava/lang/Object;
       6: areturn

  public <G, H> scalaz.Bitraverse<?> embed(scalaz.Traverse<G>, scalaz.Traverse<H>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #214                // InterfaceMethod scalaz/Bitraverse.embed$:(Lscalaz/Bitraverse;Lscalaz/Traverse;Lscalaz/Traverse;)Lscalaz/Bitraverse;
       6: areturn

  public <G> scalaz.Bitraverse<?> embedLeft(scalaz.Traverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #222                // InterfaceMethod scalaz/Bitraverse.embedLeft$:(Lscalaz/Bitraverse;Lscalaz/Traverse;)Lscalaz/Bitraverse;
       5: areturn

  public <H> scalaz.Bitraverse<?> embedRight(scalaz.Traverse<H>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #227                // InterfaceMethod scalaz/Bitraverse.embedRight$:(Lscalaz/Bitraverse;Lscalaz/Traverse;)Lscalaz/Bitraverse;
       5: areturn

  public <G> scalaz.Bifoldable<?> compose(scalaz.Bifoldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #232                // InterfaceMethod scalaz/Bifoldable.compose$:(Lscalaz/Bifoldable;Lscalaz/Bifoldable;)Lscalaz/Bifoldable;
       5: areturn

  public <G> scalaz.Bifoldable<?> product(scalaz.Bifoldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #235                // InterfaceMethod scalaz/Bifoldable.product$:(Lscalaz/Bifoldable;Lscalaz/Bifoldable;)Lscalaz/Bifoldable;
       5: areturn

  public <A, B, M> scala.Option<M> bifoldMap1(F, scala.Function1<A, M>, scala.Function1<B, M>, scalaz.Semigroup<M>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #243                // InterfaceMethod scalaz/Bifoldable.bifoldMap1$:(Lscalaz/Bifoldable;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Semigroup;)Lscala/Option;
       9: areturn

  public final <A, B, C> C bifoldR(F, scala.Function0<C>, scala.Function1<A, scala.Function1<scala.Function0<C>, C>>, scala.Function1<B, scala.Function1<scala.Function0<C>, C>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #251                // InterfaceMethod scalaz/Bifoldable.bifoldR$:(Lscalaz/Bifoldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       9: areturn

  public final <A, B, C> C bifoldL(F, C, scala.Function1<C, scala.Function1<A, C>>, scala.Function1<C, scala.Function1<B, C>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #258                // InterfaceMethod scalaz/Bifoldable.bifoldL$:(Lscalaz/Bifoldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       9: areturn

  public <X> scalaz.Foldable<?> leftFoldable();
    Code:
       0: aload_0
       1: invokestatic  #265                // InterfaceMethod scalaz/Bifoldable.leftFoldable$:(Lscalaz/Bifoldable;)Lscalaz/Foldable;
       4: areturn

  public <X> scalaz.Foldable<?> rightFoldable();
    Code:
       0: aload_0
       1: invokestatic  #269                // InterfaceMethod scalaz/Bifoldable.rightFoldable$:(Lscalaz/Bifoldable;)Lscalaz/Foldable;
       4: areturn

  public scalaz.Foldable<?> uFoldable();
    Code:
       0: aload_0
       1: invokestatic  #274                // InterfaceMethod scalaz/Bifoldable.uFoldable$:(Lscalaz/Bifoldable;)Lscalaz/Foldable;
       4: areturn

  public <G, H> scalaz.Bifoldable<?> embed(scalaz.Foldable<G>, scalaz.Foldable<H>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #279                // InterfaceMethod scalaz/Bifoldable.embed$:(Lscalaz/Bifoldable;Lscalaz/Foldable;Lscalaz/Foldable;)Lscalaz/Bifoldable;
       6: areturn

  public <G> scalaz.Bifoldable<?> embedLeft(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #285                // InterfaceMethod scalaz/Bifoldable.embedLeft$:(Lscalaz/Bifoldable;Lscalaz/Foldable;)Lscalaz/Bifoldable;
       5: areturn

  public <H> scalaz.Bifoldable<?> embedRight(scalaz.Foldable<H>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #288                // InterfaceMethod scalaz/Bifoldable.embedRight$:(Lscalaz/Bifoldable;Lscalaz/Foldable;)Lscalaz/Bifoldable;
       5: areturn

  public scalaz.Bifoldable<F>.BifoldableLaw bifoldableLaw();
    Code:
       0: aload_0
       1: invokestatic  #295                // InterfaceMethod scalaz/Bifoldable.bifoldableLaw$:(Lscalaz/Bifoldable;)Lscalaz/Bifoldable$BifoldableLaw;
       4: areturn

  public <G> scalaz.Bifunctor<?> compose(scalaz.Bifunctor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #302                // InterfaceMethod scalaz/Bifunctor.compose$:(Lscalaz/Bifunctor;Lscalaz/Bifunctor;)Lscalaz/Bifunctor;
       5: areturn

  public <G> scalaz.Bifunctor<?> product(scalaz.Bifunctor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #305                // InterfaceMethod scalaz/Bifunctor.product$:(Lscalaz/Bifunctor;Lscalaz/Bifunctor;)Lscalaz/Bifunctor;
       5: areturn

  public <X> scalaz.Functor<?> leftFunctor();
    Code:
       0: aload_0
       1: invokestatic  #312                // InterfaceMethod scalaz/Bifunctor.leftFunctor$:(Lscalaz/Bifunctor;)Lscalaz/Functor;
       4: areturn

  public <A, B, C> F leftMap(F, scala.Function1<A, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #319                // InterfaceMethod scalaz/Bifunctor.leftMap$:(Lscalaz/Bifunctor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <X> scalaz.Functor<?> rightFunctor();
    Code:
       0: aload_0
       1: invokestatic  #323                // InterfaceMethod scalaz/Bifunctor.rightFunctor$:(Lscalaz/Bifunctor;)Lscalaz/Functor;
       4: areturn

  public scalaz.Functor<?> uFunctor();
    Code:
       0: aload_0
       1: invokestatic  #328                // InterfaceMethod scalaz/Bifunctor.uFunctor$:(Lscalaz/Bifunctor;)Lscalaz/Functor;
       4: areturn

  public <A, B, D> F rightMap(F, scala.Function1<B, D>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #333                // InterfaceMethod scalaz/Bifunctor.rightMap$:(Lscalaz/Bifunctor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <A, B> F umap(F, scala.Function1<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #339                // InterfaceMethod scalaz/Bifunctor.umap$:(Lscalaz/Bifunctor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G, H> scalaz.Bifunctor<?> embed(scalaz.Functor<G>, scalaz.Functor<H>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #344                // InterfaceMethod scalaz/Bifunctor.embed$:(Lscalaz/Bifunctor;Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Bifunctor;
       6: areturn

  public <G> scalaz.Bifunctor<?> embedLeft(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #350                // InterfaceMethod scalaz/Bifunctor.embedLeft$:(Lscalaz/Bifunctor;Lscalaz/Functor;)Lscalaz/Bifunctor;
       5: areturn

  public <H> scalaz.Bifunctor<?> embedRight(scalaz.Functor<H>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #353                // InterfaceMethod scalaz/Bifunctor.embedRight$:(Lscalaz/Bifunctor;Lscalaz/Functor;)Lscalaz/Bifunctor;
       5: areturn

  public <A, B, C, D> F widen(F);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #360                // InterfaceMethod scalaz/Bifunctor.widen$:(Lscalaz/Bifunctor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public scalaz.syntax.BitraverseSyntax<F> bitraverseSyntax();
    Code:
       0: aload_0
       1: getfield      #364                // Field bitraverseSyntax:Lscalaz/syntax/BitraverseSyntax;
       4: areturn

  public void scalaz$Bitraverse$_setter_$bitraverseSyntax_$eq(scalaz.syntax.BitraverseSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #364                // Field bitraverseSyntax:Lscalaz/syntax/BitraverseSyntax;
       5: return

  public scalaz.syntax.BifoldableSyntax<F> bifoldableSyntax();
    Code:
       0: aload_0
       1: getfield      #372                // Field bifoldableSyntax:Lscalaz/syntax/BifoldableSyntax;
       4: areturn

  public void scalaz$Bifoldable$_setter_$bifoldableSyntax_$eq(scalaz.syntax.BifoldableSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #372                // Field bifoldableSyntax:Lscalaz/syntax/BifoldableSyntax;
       5: return

  public scalaz.syntax.BifunctorSyntax<F> bifunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #379                // Field bifunctorSyntax:Lscalaz/syntax/BifunctorSyntax;
       4: areturn

  public void scalaz$Bifunctor$_setter_$bifunctorSyntax_$eq(scalaz.syntax.BifunctorSyntax<F>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #379                // Field bifunctorSyntax:Lscalaz/syntax/BifunctorSyntax;
       5: return

  public scalaz.Bitraverse<G> G();
    Code:
       0: aload_0
       1: getfield      #387                // Field E$1:Lscalaz/Bitraverse;
       4: areturn

  public scalaz.Isomorphisms$Iso3<scalaz.BiNaturalTransformation, F, G> iso();
    Code:
       0: aload_0
       1: getfield      #392                // Field D$1:Lscalaz/Isomorphisms$Iso3;
       4: areturn

  public scalaz.Bifunctor G();
    Code:
       0: aload_0
       1: invokevirtual #395                // Method G:()Lscalaz/Bitraverse;
       4: areturn

  public scalaz.Bifoldable G();
    Code:
       0: aload_0
       1: invokevirtual #395                // Method G:()Lscalaz/Bitraverse;
       4: areturn

  public scalaz.Bitraverse$$anon$8(scalaz.Bitraverse, scalaz.Isomorphisms$Iso3);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #387                // Field E$1:Lscalaz/Bitraverse;
       5: aload_0
       6: aload_2
       7: putfield      #392                // Field D$1:Lscalaz/Isomorphisms$Iso3;
      10: aload_0
      11: invokespecial #401                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #405                // InterfaceMethod scalaz/Bifunctor.$init$:(Lscalaz/Bifunctor;)V
      18: aload_0
      19: invokestatic  #408                // InterfaceMethod scalaz/Bifoldable.$init$:(Lscalaz/Bifoldable;)V
      22: aload_0
      23: invokestatic  #411                // InterfaceMethod scalaz/Bitraverse.$init$:(Lscalaz/Bitraverse;)V
      26: aload_0
      27: invokestatic  #414                // InterfaceMethod scalaz/IsomorphismBifunctor.$init$:(Lscalaz/IsomorphismBifunctor;)V
      30: aload_0
      31: invokestatic  #417                // InterfaceMethod scalaz/IsomorphismBifoldable.$init$:(Lscalaz/IsomorphismBifoldable;)V
      34: aload_0
      35: invokestatic  #420                // InterfaceMethod scalaz/IsomorphismBitraverse.$init$:(Lscalaz/IsomorphismBitraverse;)V
      38: return
}
