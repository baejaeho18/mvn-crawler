Compiled from "Plus.scala"
public interface scalaz.Plus<F> {
  public static <G, F> scalaz.Plus<?> liftPlus(scalaz.Apply<G>, scalaz.Plus<F>);
    Code:
       0: getstatic     #54                 // Field scalaz/Plus$.MODULE$:Lscalaz/Plus$;
       3: aload_0
       4: aload_1
       5: invokevirtual #56                 // Method scalaz/Plus$.liftPlus:(Lscalaz/Apply;Lscalaz/Plus;)Lscalaz/Plus;
       8: areturn

  public static <F, G> scalaz.Plus<F> fromIso(scalaz.Isomorphisms$Iso2<scalaz.NaturalTransformation, F, G>, scalaz.Plus<G>);
    Code:
       0: getstatic     #54                 // Field scalaz/Plus$.MODULE$:Lscalaz/Plus$;
       3: aload_0
       4: aload_1
       5: invokevirtual #63                 // Method scalaz/Plus$.fromIso:(Lscalaz/Isomorphisms$Iso2;Lscalaz/Plus;)Lscalaz/Plus;
       8: areturn

  public static <F> scalaz.Plus<F> apply(scalaz.Plus<F>);
    Code:
       0: getstatic     #54                 // Field scalaz/Plus$.MODULE$:Lscalaz/Plus$;
       3: ifnonnull     8
       6: aconst_null
       7: athrow
       8: aload_0
       9: areturn

  public abstract void scalaz$Plus$_setter_$plusSyntax_$eq(scalaz.syntax.PlusSyntax<F>);

  public abstract <A> F plus(F, scala.Function0<F>);

  public static scalaz.Maybe unfoldlPsumOpt$(scalaz.Plus, java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #85                 // InterfaceMethod unfoldlPsumOpt:(Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public default <S, A> scalaz.Maybe<F> unfoldlPsumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, F>>>);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #94,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #23                 // class scalaz/Maybe
      10: aload_0
      11: aload_2
      12: invokedynamic #116,  0            // InvokeDynamic #0:apply:(Lscalaz/Plus;Lscala/Function1;)Lscala/Function1;
      17: astore        4
      19: dup
      20: ifnonnull     25
      23: aconst_null
      24: athrow
      25: astore_3
      26: aload         4
      28: invokedynamic #125,  0            // InvokeDynamic #1:apply:()Lscala/Function1;
      33: invokeinterface #129,  2          // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      38: astore        5
      40: aload_3
      41: instanceof    #26                 // class scalaz/Maybe$Just
      44: ifeq          70
      47: aload_3
      48: checkcast     #26                 // class scalaz/Maybe$Just
      51: invokevirtual #133                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      54: astore        7
      56: aload         5
      58: aload         7
      60: invokeinterface #94,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      65: astore        6
      67: goto          94
      70: aload_3
      71: instanceof    #21                 // class scalaz/Maybe$Empty
      74: ifeq          85
      77: invokestatic  #137                // Method scalaz/Maybe.$anonfun$map$2:()Lscalaz/Maybe;
      80: astore        6
      82: goto          94
      85: new           #139                // class scala/MatchError
      88: dup
      89: aload_3
      90: invokespecial #143                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      93: athrow
      94: aload         6
      96: checkcast     #23                 // class scalaz/Maybe
      99: areturn

  public static scalaz.Maybe unfoldrPsumOpt$(scalaz.Plus, java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #153                // InterfaceMethod unfoldrPsumOpt:(Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public default <S, A> scalaz.Maybe<F> unfoldrPsumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<F, S>>>);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #94,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #23                 // class scalaz/Maybe
      10: aload_0
      11: aload_2
      12: invokedynamic #159,  0            // InvokeDynamic #2:apply:(Lscalaz/Plus;Lscala/Function1;)Lscala/Function1;
      17: astore        4
      19: dup
      20: ifnonnull     25
      23: aconst_null
      24: athrow
      25: astore_3
      26: aload         4
      28: invokedynamic #125,  0            // InvokeDynamic #1:apply:()Lscala/Function1;
      33: invokeinterface #129,  2          // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      38: astore        5
      40: aload_3
      41: instanceof    #26                 // class scalaz/Maybe$Just
      44: ifeq          70
      47: aload_3
      48: checkcast     #26                 // class scalaz/Maybe$Just
      51: invokevirtual #133                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      54: astore        7
      56: aload         5
      58: aload         7
      60: invokeinterface #94,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      65: astore        6
      67: goto          94
      70: aload_3
      71: instanceof    #21                 // class scalaz/Maybe$Empty
      74: ifeq          85
      77: invokestatic  #137                // Method scalaz/Maybe.$anonfun$map$2:()Lscalaz/Maybe;
      80: astore        6
      82: goto          94
      85: new           #139                // class scala/MatchError
      88: dup
      89: aload_3
      90: invokespecial #143                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      93: athrow
      94: aload         6
      96: checkcast     #23                 // class scalaz/Maybe
      99: areturn

  public static scalaz.Plus compose$(scalaz.Plus);
    Code:
       0: aload_0
       1: invokespecial #164                // InterfaceMethod compose:()Lscalaz/Plus;
       4: areturn

  public default <G> scalaz.Plus<?> compose();
    Code:
       0: new           #29                 // class scalaz/Plus$$anon$1
       3: dup
       4: aload_0
       5: invokespecial #168                // Method scalaz/Plus$$anon$1."<init>":(Lscalaz/Plus;)V
       8: areturn

  public static scalaz.Plus product$(scalaz.Plus, scalaz.Plus);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #173                // InterfaceMethod product:(Lscalaz/Plus;)Lscalaz/Plus;
       5: areturn

  public default <G> scalaz.Plus<?> product(scalaz.Plus<G>);
    Code:
       0: new           #31                 // class scalaz/Plus$$anon$2
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #177                // Method scalaz/Plus$$anon$2."<init>":(Lscalaz/Plus;Lscalaz/Plus;)V
       9: areturn

  public static scalaz.Semigroup semigroup$(scalaz.Plus);
    Code:
       0: aload_0
       1: invokespecial #183                // InterfaceMethod semigroup:()Lscalaz/Semigroup;
       4: areturn

  public default <A> scalaz.Semigroup<F> semigroup();
    Code:
       0: new           #33                 // class scalaz/Plus$$anon$3
       3: dup
       4: aload_0
       5: invokespecial #185                // Method scalaz/Plus$$anon$3."<init>":(Lscalaz/Plus;)V
       8: areturn

  public static scalaz.Plus$PlusLaw plusLaw$(scalaz.Plus);
    Code:
       0: aload_0
       1: invokespecial #191                // InterfaceMethod plusLaw:()Lscalaz/Plus$PlusLaw;
       4: areturn

  public default scalaz.Plus<F>.PlusLaw plusLaw();
    Code:
       0: new           #35                 // class scalaz/Plus$$anon$4
       3: dup
       4: aload_0
       5: invokespecial #193                // Method scalaz/Plus$$anon$4."<init>":(Lscalaz/Plus;)V
       8: areturn

  public abstract scalaz.syntax.PlusSyntax<F> plusSyntax();

  public static java.lang.Object $anonfun$unfoldlPsumOpt$1(java.lang.Object);
    Code:
       0: aload_0
       1: areturn

  private java.lang.Object go$1(java.lang.Object, java.lang.Object, scala.Function1);
    Code:
       0: aload_3
       1: aload_1
       2: invokeinterface #94,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #23                 // class scalaz/Maybe
      10: astore        4
      12: aload         4
      14: instanceof    #26                 // class scalaz/Maybe$Just
      17: ifeq          73
      20: aload         4
      22: checkcast     #26                 // class scalaz/Maybe$Just
      25: invokevirtual #133                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      28: checkcast     #205                // class scala/Tuple2
      31: astore        5
      33: aload         5
      35: ifnull        73
      38: aload         5
      40: invokevirtual #208                // Method scala/Tuple2._1:()Ljava/lang/Object;
      43: astore        6
      45: aload         5
      47: invokevirtual #211                // Method scala/Tuple2._2:()Ljava/lang/Object;
      50: astore        7
      52: aload         6
      54: aload_0
      55: aload         7
      57: aload_2
      58: invokedynamic #219,  0            // InvokeDynamic #3:apply:(Ljava/lang/Object;)Lscala/Function0;
      63: invokeinterface #221,  3          // InterfaceMethod plus:(Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
      68: astore_2
      69: astore_1
      70: goto          0
      73: aload_2
      74: areturn

  public static java.lang.Object $anonfun$unfoldlPsumOpt$2(scalaz.Plus, scala.Function1, scala.Tuple2);
    Code:
       0: aload_2
       1: ifnull        99
       4: aload_2
       5: invokevirtual #208                // Method scala/Tuple2._1:()Ljava/lang/Object;
       8: astore_3
       9: aload_2
      10: invokevirtual #211                // Method scala/Tuple2._2:()Ljava/lang/Object;
      13: astore        4
      15: aload_3
      16: aload         4
      18: astore        6
      20: astore        5
      22: aload_1
      23: aload         5
      25: invokeinterface #94,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #23                 // class scalaz/Maybe
      33: astore        7
      35: aload         7
      37: instanceof    #26                 // class scalaz/Maybe$Just
      40: ifeq          108
      43: aload         7
      45: checkcast     #26                 // class scalaz/Maybe$Just
      48: invokevirtual #133                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      51: checkcast     #205                // class scala/Tuple2
      54: astore        8
      56: aload         8
      58: ifnull        108
      61: aload         8
      63: invokevirtual #208                // Method scala/Tuple2._1:()Ljava/lang/Object;
      66: astore        9
      68: aload         8
      70: invokevirtual #211                // Method scala/Tuple2._2:()Ljava/lang/Object;
      73: astore        10
      75: aload         9
      77: aload_0
      78: aload         10
      80: aload         6
      82: invokedynamic #219,  0            // InvokeDynamic #3:apply:(Ljava/lang/Object;)Lscala/Function0;
      87: invokeinterface #221,  3          // InterfaceMethod plus:(Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
      92: astore        6
      94: astore        5
      96: goto          22
      99: new           #139                // class scala/MatchError
     102: dup
     103: aload_2
     104: invokespecial #143                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     107: athrow
     108: aload         6
     110: areturn

  public static java.lang.Object $anonfun$unfoldrPsumOpt$1(java.lang.Object);
    Code:
       0: aload_0
       1: areturn

  private java.lang.Object go$2(java.lang.Object, java.lang.Object, scala.Function1);
    Code:
       0: aload_3
       1: aload_2
       2: invokeinterface #94,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #23                 // class scalaz/Maybe
      10: astore        4
      12: aload         4
      14: instanceof    #26                 // class scalaz/Maybe$Just
      17: ifeq          73
      20: aload         4
      22: checkcast     #26                 // class scalaz/Maybe$Just
      25: invokevirtual #133                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      28: checkcast     #205                // class scala/Tuple2
      31: astore        5
      33: aload         5
      35: ifnull        73
      38: aload         5
      40: invokevirtual #208                // Method scala/Tuple2._1:()Ljava/lang/Object;
      43: astore        6
      45: aload         5
      47: invokevirtual #211                // Method scala/Tuple2._2:()Ljava/lang/Object;
      50: astore        7
      52: aload_0
      53: aload_1
      54: aload         6
      56: invokedynamic #235,  0            // InvokeDynamic #4:apply:(Ljava/lang/Object;)Lscala/Function0;
      61: invokeinterface #221,  3          // InterfaceMethod plus:(Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
      66: aload         7
      68: astore_2
      69: astore_1
      70: goto          0
      73: aload_1
      74: areturn

  public static java.lang.Object $anonfun$unfoldrPsumOpt$2(scalaz.Plus, scala.Function1, scala.Tuple2);
    Code:
       0: aload_2
       1: ifnull        99
       4: aload_2
       5: invokevirtual #208                // Method scala/Tuple2._1:()Ljava/lang/Object;
       8: astore_3
       9: aload_2
      10: invokevirtual #211                // Method scala/Tuple2._2:()Ljava/lang/Object;
      13: astore        4
      15: aload_3
      16: aload         4
      18: astore        6
      20: astore        5
      22: aload_1
      23: aload         6
      25: invokeinterface #94,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #23                 // class scalaz/Maybe
      33: astore        7
      35: aload         7
      37: instanceof    #26                 // class scalaz/Maybe$Just
      40: ifeq          108
      43: aload         7
      45: checkcast     #26                 // class scalaz/Maybe$Just
      48: invokevirtual #133                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      51: checkcast     #205                // class scala/Tuple2
      54: astore        8
      56: aload         8
      58: ifnull        108
      61: aload         8
      63: invokevirtual #208                // Method scala/Tuple2._1:()Ljava/lang/Object;
      66: astore        9
      68: aload         8
      70: invokevirtual #211                // Method scala/Tuple2._2:()Ljava/lang/Object;
      73: astore        10
      75: aload_0
      76: aload         5
      78: aload         9
      80: invokedynamic #235,  0            // InvokeDynamic #4:apply:(Ljava/lang/Object;)Lscala/Function0;
      85: invokeinterface #221,  3          // InterfaceMethod plus:(Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
      90: aload         10
      92: astore        6
      94: astore        5
      96: goto          22
      99: new           #139                // class scala/MatchError
     102: dup
     103: aload_2
     104: invokespecial #143                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     107: athrow
     108: aload         5
     110: areturn

  public static void $init$(scalaz.Plus);
    Code:
       0: aload_0
       1: new           #37                 // class scalaz/Plus$$anon$5
       4: dup
       5: aload_0
       6: invokespecial #240                // Method scalaz/Plus$$anon$5."<init>":(Lscalaz/Plus;)V
       9: invokeinterface #242,  2          // InterfaceMethod scalaz$Plus$_setter_$plusSyntax_$eq:(Lscalaz/syntax/PlusSyntax;)V
      14: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #255,  0            // InvokeDynamic #5:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
