Compiled from "Either.scala"
public final class scalaz.DisjunctionInstances$$anon$1 implements scalaz.Order<scalaz.$bslash$div<A, B>> {
  private final scalaz.syntax.OrderSyntax<scalaz.$bslash$div<A, B>> orderSyntax;

  private final scalaz.syntax.EqualSyntax<scalaz.$bslash$div<A, B>> equalSyntax;

  private final scalaz.Order evidence$4$1;

  private final scalaz.Order evidence$5$1;

  public scalaz.Ordering apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #40                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean lessThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #49                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #53                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #57                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #61                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public java.lang.Object max(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #67                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object min(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #71                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 sort(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #77                 // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, scalaz.$bslash$div<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #85                 // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<scalaz.$bslash$div<A, B>> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #93                 // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<scalaz.$bslash$div<A, B>> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #100                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<scalaz.$bslash$div<A, B>>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #107                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #113                // InterfaceMethod scalaz/Equal.equalIsNatural$:(Lscalaz/Equal;)Z
       4: ireturn

  public scalaz.Equal<scalaz.$bslash$div<A, B>>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #120                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.syntax.OrderSyntax<scalaz.$bslash$div<A, B>> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #124                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<scalaz.$bslash$div<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #124                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<scalaz.$bslash$div<A, B>> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #132                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<scalaz.$bslash$div<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #132                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.Ordering order(scalaz.$bslash$div<A, B>, scalaz.$bslash$div<A, B>);
    Code:
       0: aload_1
       1: aload_2
       2: aload_0
       3: getfield      #142                // Field evidence$4$1:Lscalaz/Order;
       6: aload_0
       7: getfield      #144                // Field evidence$5$1:Lscalaz/Order;
      10: invokevirtual #150                // Method scalaz/$bslash$div.compare:(Lscalaz/$bslash$div;Lscalaz/Order;Lscalaz/Order;)Lscalaz/Ordering;
      13: areturn

  public boolean equal(scalaz.$bslash$div<A, B>, scalaz.$bslash$div<A, B>);
    Code:
       0: aload_1
       1: aload_2
       2: aload_0
       3: getfield      #142                // Field evidence$4$1:Lscalaz/Order;
       6: aload_0
       7: getfield      #144                // Field evidence$5$1:Lscalaz/Order;
      10: invokevirtual #158                // Method scalaz/$bslash$div.$eq$eq$eq:(Lscalaz/$bslash$div;Lscalaz/Equal;Lscalaz/Equal;)Z
      13: ireturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: new           #20                 // class scalaz/Order$$anon$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #163                // Method scalaz/Order$$anon$1."<init>":(Lscalaz/Order;Lscala/Function1;)V
       9: areturn

  public boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #146                // class scalaz/$bslash$div
       5: aload_2
       6: checkcast     #146                // class scalaz/$bslash$div
       9: invokevirtual #165                // Method equal:(Lscalaz/$bslash$div;Lscalaz/$bslash$div;)Z
      12: ireturn

  public scalaz.Ordering order(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #146                // class scalaz/$bslash$div
       5: aload_2
       6: checkcast     #146                // class scalaz/$bslash$div
       9: invokevirtual #167                // Method order:(Lscalaz/$bslash$div;Lscalaz/$bslash$div;)Lscalaz/Ordering;
      12: areturn

  public scalaz.DisjunctionInstances$$anon$1(scalaz.DisjunctionInstances, scalaz.Order, scalaz.Order);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #142                // Field evidence$4$1:Lscalaz/Order;
       5: aload_0
       6: aload_3
       7: putfield      #144                // Field evidence$5$1:Lscalaz/Order;
      10: aload_0
      11: invokespecial #172                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #176                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      18: aload_0
      19: invokestatic  #179                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      22: return
}
