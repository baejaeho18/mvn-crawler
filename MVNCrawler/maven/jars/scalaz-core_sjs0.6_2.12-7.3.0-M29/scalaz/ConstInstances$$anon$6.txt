Compiled from "Const.scala"
public final class scalaz.ConstInstances$$anon$6 implements scalaz.ConstOrder<A, B> {
  private final scalaz.Order<A> OA;

  private final scalaz.syntax.OrderSyntax<scalaz.Const<A, B>> orderSyntax;

  private final scalaz.syntax.EqualSyntax<scalaz.Const<A, B>> equalSyntax;

  public scalaz.Ordering order(scalaz.Const<A, B>, scalaz.Const<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #43                 // InterfaceMethod scalaz/ConstOrder.order$:(Lscalaz/ConstOrder;Lscalaz/Const;Lscalaz/Const;)Lscalaz/Ordering;
       6: areturn

  public boolean equal(scalaz.Const<A, B>, scalaz.Const<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #55                 // InterfaceMethod scalaz/ConstEqual.equal$:(Lscalaz/ConstEqual;Lscalaz/Const;Lscalaz/Const;)Z
       6: ireturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #61                 // InterfaceMethod scalaz/ConstEqual.equalIsNatural$:(Lscalaz/ConstEqual;)Z
       4: ireturn

  public scalaz.Ordering apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #69                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean lessThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #76                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #80                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #84                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #88                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public java.lang.Object max(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #94                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object min(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #98                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 sort(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #104                // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, scalaz.Const<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #112                // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<scalaz.Const<A, B>> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #120                // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<scalaz.Const<A, B>> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #126                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<scalaz.Const<A, B>>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #133                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public scalaz.Equal<scalaz.Const<A, B>>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #140                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.syntax.OrderSyntax<scalaz.Const<A, B>> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #144                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<scalaz.Const<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #144                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<scalaz.Const<A, B>> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #152                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<scalaz.Const<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #152                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.Order<A> OA();
    Code:
       0: aload_0
       1: getfield      #158                // Field OA:Lscalaz/Order;
       4: areturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: new           #20                 // class scalaz/Order$$anon$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #163                // Method scalaz/Order$$anon$1."<init>":(Lscalaz/Order;Lscala/Function1;)V
       9: areturn

  public boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #165                // class scalaz/Const
       5: aload_2
       6: checkcast     #165                // class scalaz/Const
       9: invokevirtual #167                // Method equal:(Lscalaz/Const;Lscalaz/Const;)Z
      12: ireturn

  public scalaz.Ordering order(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #165                // class scalaz/Const
       5: aload_2
       6: checkcast     #165                // class scalaz/Const
       9: invokevirtual #169                // Method order:(Lscalaz/Const;Lscalaz/Const;)Lscalaz/Ordering;
      12: areturn

  public scalaz.Equal OA();
    Code:
       0: aload_0
       1: invokevirtual #172                // Method OA:()Lscalaz/Order;
       4: areturn

  public scalaz.ConstInstances$$anon$6(scalaz.ConstInstances, scalaz.Order);
    Code:
       0: aload_0
       1: invokespecial #178                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #182                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
       8: aload_0
       9: invokestatic  #185                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      12: aload_0
      13: invokestatic  #188                // InterfaceMethod scalaz/ConstEqual.$init$:(Lscalaz/ConstEqual;)V
      16: aload_0
      17: invokestatic  #191                // InterfaceMethod scalaz/ConstOrder.$init$:(Lscalaz/ConstOrder;)V
      20: aload_0
      21: getstatic     #197                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      24: aload_2
      25: invokevirtual #201                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      28: checkcast     #24                 // class scalaz/Order
      31: putfield      #158                // Field OA:Lscalaz/Order;
      34: return
}
