Compiled from "Map.scala"
public final class scalaz.MapInstances$$anon$5 implements scalaz.Order<scalaz.$eq$eq$greater$greater<A, B>>, scalaz.MapEqual<A, B> {
  private final scalaz.syntax.OrderSyntax<scalaz.$eq$eq$greater$greater<A, B>> orderSyntax;

  private final scalaz.syntax.EqualSyntax<scalaz.$eq$eq$greater$greater<A, B>> equalSyntax;

  private final scalaz.Order evidence$6$1;

  private final scalaz.Order evidence$7$1;

  public final boolean equal(scalaz.$eq$eq$greater$greater<A, B>, scalaz.$eq$eq$greater$greater<A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #43                 // InterfaceMethod scalaz/MapEqual.equal$:(Lscalaz/MapEqual;Lscalaz/$eq$eq$greater$greater;Lscalaz/$eq$eq$greater$greater;)Z
       6: ireturn

  public scalaz.Ordering apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #54                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean lessThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #61                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #65                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #69                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #73                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public java.lang.Object max(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #79                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object min(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #83                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 sort(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #89                 // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, scalaz.$eq$eq$greater$greater<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #97                 // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<scalaz.$eq$eq$greater$greater<A, B>> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #105                // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<scalaz.$eq$eq$greater$greater<A, B>> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #112                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<scalaz.$eq$eq$greater$greater<A, B>>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #119                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #125                // InterfaceMethod scalaz/Equal.equalIsNatural$:(Lscalaz/Equal;)Z
       4: ireturn

  public scalaz.Equal<scalaz.$eq$eq$greater$greater<A, B>>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #132                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.syntax.OrderSyntax<scalaz.$eq$eq$greater$greater<A, B>> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #136                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<scalaz.$eq$eq$greater$greater<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #136                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<scalaz.$eq$eq$greater$greater<A, B>> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #144                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<scalaz.$eq$eq$greater$greater<A, B>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #144                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.Equal<A> A();
    Code:
       0: getstatic     #156                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #158                // Field evidence$6$1:Lscalaz/Order;
       7: invokevirtual #162                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #19                 // class scalaz/Equal
      13: areturn

  public scalaz.Equal<B> B();
    Code:
       0: getstatic     #156                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #166                // Field evidence$7$1:Lscalaz/Order;
       7: invokevirtual #162                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #19                 // class scalaz/Equal
      13: areturn

  public scalaz.Ordering order(scalaz.$eq$eq$greater$greater<A, B>, scalaz.$eq$eq$greater$greater<A, B>);
    Code:
       0: getstatic     #176                // Field scalaz/Order$.MODULE$:Lscalaz/Order$;
       3: getstatic     #181                // Field scalaz/std/list$.MODULE$:Lscalaz/std/list$;
       6: getstatic     #186                // Field scalaz/std/tuple$.MODULE$:Lscalaz/std/tuple$;
       9: aload_0
      10: getfield      #158                // Field evidence$6$1:Lscalaz/Order;
      13: aload_0
      14: getfield      #166                // Field evidence$7$1:Lscalaz/Order;
      17: invokevirtual #189                // Method scalaz/std/tuple$.tuple2Order:(Lscalaz/Order;Lscalaz/Order;)Lscalaz/Order;
      20: invokevirtual #192                // Method scalaz/std/list$.listOrder:(Lscalaz/Order;)Lscalaz/Order;
      23: astore_3
      24: ifnonnull     29
      27: aconst_null
      28: athrow
      29: aload_3
      30: aload_1
      31: invokevirtual #198                // Method scalaz/$eq$eq$greater$greater.toAscList:()Lscala/collection/immutable/List;
      34: aload_2
      35: invokevirtual #198                // Method scalaz/$eq$eq$greater$greater.toAscList:()Lscala/collection/immutable/List;
      38: invokeinterface #200,  3          // InterfaceMethod scalaz/Order.order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
      43: areturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: new           #22                 // class scalaz/Order$$anon$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #205                // Method scalaz/Order$$anon$1."<init>":(Lscalaz/Order;Lscala/Function1;)V
       9: areturn

  public final boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #194                // class scalaz/$eq$eq$greater$greater
       5: aload_2
       6: checkcast     #194                // class scalaz/$eq$eq$greater$greater
       9: invokevirtual #207                // Method equal:(Lscalaz/$eq$eq$greater$greater;Lscalaz/$eq$eq$greater$greater;)Z
      12: ireturn

  public scalaz.Ordering order(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #194                // class scalaz/$eq$eq$greater$greater
       5: aload_2
       6: checkcast     #194                // class scalaz/$eq$eq$greater$greater
       9: invokevirtual #209                // Method order:(Lscalaz/$eq$eq$greater$greater;Lscalaz/$eq$eq$greater$greater;)Lscalaz/Ordering;
      12: areturn

  public scalaz.MapInstances$$anon$5(scalaz.MapInstances, scalaz.Order, scalaz.Order);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #158                // Field evidence$6$1:Lscalaz/Order;
       5: aload_0
       6: aload_3
       7: putfield      #166                // Field evidence$7$1:Lscalaz/Order;
      10: aload_0
      11: invokespecial #214                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #218                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      18: aload_0
      19: invokestatic  #221                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      22: aload_0
      23: invokestatic  #224                // InterfaceMethod scalaz/MapEqual.$init$:(Lscalaz/MapEqual;)V
      26: return
}
