Compiled from "Category.scala"
public final class scalaz.Category$$anon$2 implements scalaz.Monoid<$eq$greater$colon>, scalaz.Compose<$eq$greater$colon>.ComposeSemigroup<A> {
  private final scalaz.syntax.MonoidSyntax<$eq$greater$colon> monoidSyntax;

  private final scalaz.syntax.SemigroupSyntax<$eq$greater$colon> semigroupSyntax;

  private final scalaz.Category $outer;

  public $eq$greater$colon append($eq$greater$colon, scala.Function0<$eq$greater$colon>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #43                 // InterfaceMethod scalaz/Compose$ComposeSemigroup.append$:(Lscalaz/Compose$ComposeSemigroup;Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
       6: areturn

  public $eq$greater$colon multiply($eq$greater$colon, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #56                 // InterfaceMethod scalaz/Monoid.multiply$:(Lscalaz/Monoid;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public boolean isMZero($eq$greater$colon, scalaz.Equal<$eq$greater$colon>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #66                 // InterfaceMethod scalaz/Monoid.isMZero$:(Lscalaz/Monoid;Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public final <B> B ifEmpty($eq$greater$colon, scala.Function0<B>, scala.Function0<B>, scalaz.Equal<$eq$greater$colon>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #76                 // InterfaceMethod scalaz/Monoid.ifEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscala/Function0;Lscalaz/Equal;)Ljava/lang/Object;
       9: areturn

  public final <B> B onNotEmpty($eq$greater$colon, scala.Function0<B>, scalaz.Equal<$eq$greater$colon>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #85                 // InterfaceMethod scalaz/Monoid.onNotEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public final <A, B> B onEmpty($eq$greater$colon, scala.Function0<B>, scalaz.Equal<$eq$greater$colon>, scalaz.Monoid<B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #91                 // InterfaceMethod scalaz/Monoid.onEmpty$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function0;Lscalaz/Equal;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public <S> $eq$greater$colon unfoldlSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, $eq$greater$colon>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #99                 // InterfaceMethod scalaz/Monoid.unfoldlSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <S> $eq$greater$colon unfoldrSum(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<$eq$greater$colon, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #105                // InterfaceMethod scalaz/Monoid.unfoldrSum$:(Lscalaz/Monoid;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public final scalaz.Category<?> category();
    Code:
       0: aload_0
       1: invokestatic  #112                // InterfaceMethod scalaz/Monoid.category$:(Lscalaz/Monoid;)Lscalaz/Category;
       4: areturn

  public final scalaz.Applicative<?> applicative();
    Code:
       0: aload_0
       1: invokestatic  #119                // InterfaceMethod scalaz/Monoid.applicative$:(Lscalaz/Monoid;)Lscalaz/Applicative;
       4: areturn

  public scalaz.Monoid<$eq$greater$colon>.MonoidLaw monoidLaw();
    Code:
       0: aload_0
       1: invokestatic  #126                // InterfaceMethod scalaz/Monoid.monoidLaw$:(Lscalaz/Monoid;)Lscalaz/Monoid$MonoidLaw;
       4: areturn

  public $eq$greater$colon multiply1($eq$greater$colon, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #131                // InterfaceMethod scalaz/Semigroup.multiply1$:(Lscalaz/Semigroup;Ljava/lang/Object;I)Ljava/lang/Object;
       6: areturn

  public <S> scalaz.Maybe<$eq$greater$colon> unfoldlSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, $eq$greater$colon>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #138                // InterfaceMethod scalaz/Semigroup.unfoldlSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public <S> scalaz.Maybe<$eq$greater$colon> unfoldrSumOpt(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<$eq$greater$colon, S>>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #143                // InterfaceMethod scalaz/Semigroup.unfoldrSumOpt$:(Lscalaz/Semigroup;Ljava/lang/Object;Lscala/Function1;)Lscalaz/Maybe;
       6: areturn

  public final scalaz.Compose<?> compose();
    Code:
       0: aload_0
       1: invokestatic  #150                // InterfaceMethod scalaz/Semigroup.compose$:(Lscalaz/Semigroup;)Lscalaz/Compose;
       4: areturn

  public final scalaz.Apply<?> apply();
    Code:
       0: aload_0
       1: invokestatic  #157                // InterfaceMethod scalaz/Semigroup.apply$:(Lscalaz/Semigroup;)Lscalaz/Apply;
       4: areturn

  public scalaz.Semigroup<$eq$greater$colon>.SemigroupLaw semigroupLaw();
    Code:
       0: aload_0
       1: invokestatic  #164                // InterfaceMethod scalaz/Semigroup.semigroupLaw$:(Lscalaz/Semigroup;)Lscalaz/Semigroup$SemigroupLaw;
       4: areturn

  public scalaz.syntax.MonoidSyntax<$eq$greater$colon> monoidSyntax();
    Code:
       0: aload_0
       1: getfield      #168                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       4: areturn

  public void scalaz$Monoid$_setter_$monoidSyntax_$eq(scalaz.syntax.MonoidSyntax<$eq$greater$colon>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #168                // Field monoidSyntax:Lscalaz/syntax/MonoidSyntax;
       5: return

  public scalaz.syntax.SemigroupSyntax<$eq$greater$colon> semigroupSyntax();
    Code:
       0: aload_0
       1: getfield      #176                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       4: areturn

  public void scalaz$Semigroup$_setter_$semigroupSyntax_$eq(scalaz.syntax.SemigroupSyntax<$eq$greater$colon>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #176                // Field semigroupSyntax:Lscalaz/syntax/SemigroupSyntax;
       5: return

  public $eq$greater$colon zero();
    Code:
       0: aload_0
       1: getfield      #184                // Field $outer:Lscalaz/Category;
       4: invokeinterface #187,  1          // InterfaceMethod scalaz/Category.id:()Ljava/lang/Object;
       9: areturn

  public scalaz.Compose scalaz$Compose$ComposeSemigroup$$$outer();
    Code:
       0: aload_0
       1: getfield      #184                // Field $outer:Lscalaz/Category;
       4: areturn

  public scalaz.Category$$anon$2(scalaz.Category<$eq$greater$colon>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #184                // Field $outer:Lscalaz/Category;
      11: aload_0
      12: invokespecial #194                // Method java/lang/Object."<init>":()V
      15: aload_0
      16: invokestatic  #198                // InterfaceMethod scalaz/Semigroup.$init$:(Lscalaz/Semigroup;)V
      19: aload_0
      20: invokestatic  #201                // InterfaceMethod scalaz/Monoid.$init$:(Lscalaz/Monoid;)V
      23: aload_0
      24: invokestatic  #204                // InterfaceMethod scalaz/Compose$ComposeSemigroup.$init$:(Lscalaz/Compose$ComposeSemigroup;)V
      27: return
}
