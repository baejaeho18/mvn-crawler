Compiled from "Kleisli.scala"
public final class scalaz.KleisliInstances0$$anon$19 implements scalaz.KleisliProChoice<F> {
  private final scalaz.syntax.StrongSyntax<?> strongSyntax;

  private final scalaz.syntax.ProChoiceSyntax<?> proChoiceSyntax;

  private final scalaz.syntax.ProfunctorSyntax<?> profunctorSyntax;

  private final scalaz.Applicative F0$15;

  public <A, B, C> scalaz.Kleisli<F, scalaz.$bslash$div<A, C>, scalaz.$bslash$div<B, C>> left(scalaz.Kleisli<F, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #47                 // InterfaceMethod scalaz/KleisliProChoice.left$:(Lscalaz/KleisliProChoice;Lscalaz/Kleisli;)Lscalaz/Kleisli;
       5: areturn

  public <A, B, C> scalaz.Kleisli<F, scalaz.$bslash$div<C, A>, scalaz.$bslash$div<C, B>> right(scalaz.Kleisli<F, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #55                 // InterfaceMethod scalaz/KleisliProChoice.right$:(Lscalaz/KleisliProChoice;Lscalaz/Kleisli;)Lscalaz/Kleisli;
       5: areturn

  public <A, B, C> scalaz.Kleisli<F, scala.Tuple2<A, C>, scala.Tuple2<B, C>> first(scalaz.Kleisli<F, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #64                 // InterfaceMethod scalaz/KleisliStrong.first$:(Lscalaz/KleisliStrong;Lscalaz/Kleisli;)Lscalaz/Kleisli;
       5: areturn

  public <A, B, C> scalaz.Kleisli<F, scala.Tuple2<C, A>, scala.Tuple2<C, B>> second(scalaz.Kleisli<F, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #69                 // InterfaceMethod scalaz/KleisliStrong.second$:(Lscalaz/KleisliStrong;Lscalaz/Kleisli;)Lscalaz/Kleisli;
       5: areturn

  public <A, B, C> scalaz.Kleisli<F, C, B> mapfst(scalaz.Kleisli<F, A, B>, scala.Function1<C, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #76                 // InterfaceMethod scalaz/KleisliStrong.mapfst$:(Lscalaz/KleisliStrong;Lscalaz/Kleisli;Lscala/Function1;)Lscalaz/Kleisli;
       6: areturn

  public <A, B, C> scalaz.Kleisli<F, A, C> mapsnd(scalaz.Kleisli<F, A, B>, scala.Function1<B, C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #82                 // InterfaceMethod scalaz/KleisliStrong.mapsnd$:(Lscalaz/KleisliStrong;Lscalaz/Kleisli;Lscala/Function1;)Lscalaz/Kleisli;
       6: areturn

  public scalaz.Strong<?>.StrongLaws strongLaw();
    Code:
       0: aload_0
       1: invokestatic  #89                 // InterfaceMethod scalaz/Strong.strongLaw$:(Lscalaz/Strong;)Lscalaz/Strong$StrongLaws;
       4: areturn

  public java.lang.Object dimap(java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #97                 // InterfaceMethod scalaz/Profunctor.dimap$:(Lscalaz/Profunctor;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       7: areturn

  public scalaz.InvariantFunctor<?> invariantFunctor();
    Code:
       0: aload_0
       1: invokestatic  #105                // InterfaceMethod scalaz/Profunctor.invariantFunctor$:(Lscalaz/Profunctor;)Lscalaz/InvariantFunctor;
       4: areturn

  public <C> scalaz.Functor<?> covariantInstance();
    Code:
       0: aload_0
       1: invokestatic  #112                // InterfaceMethod scalaz/Profunctor.covariantInstance$:(Lscalaz/Profunctor;)Lscalaz/Functor;
       4: areturn

  public <C> scalaz.Contravariant<?> contravariantInstance();
    Code:
       0: aload_0
       1: invokestatic  #119                // InterfaceMethod scalaz/Profunctor.contravariantInstance$:(Lscalaz/Profunctor;)Lscalaz/Contravariant;
       4: areturn

  public scalaz.Profunctor<?>.ProfunctorLaw profunctorLaw();
    Code:
       0: aload_0
       1: invokestatic  #126                // InterfaceMethod scalaz/Profunctor.profunctorLaw$:(Lscalaz/Profunctor;)Lscalaz/Profunctor$ProfunctorLaw;
       4: areturn

  public scalaz.syntax.StrongSyntax<?> strongSyntax();
    Code:
       0: aload_0
       1: getfield      #130                // Field strongSyntax:Lscalaz/syntax/StrongSyntax;
       4: areturn

  public void scalaz$Strong$_setter_$strongSyntax_$eq(scalaz.syntax.StrongSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #130                // Field strongSyntax:Lscalaz/syntax/StrongSyntax;
       5: return

  public scalaz.syntax.ProChoiceSyntax<?> proChoiceSyntax();
    Code:
       0: aload_0
       1: getfield      #138                // Field proChoiceSyntax:Lscalaz/syntax/ProChoiceSyntax;
       4: areturn

  public void scalaz$ProChoice$_setter_$proChoiceSyntax_$eq(scalaz.syntax.ProChoiceSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #138                // Field proChoiceSyntax:Lscalaz/syntax/ProChoiceSyntax;
       5: return

  public scalaz.syntax.ProfunctorSyntax<?> profunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #145                // Field profunctorSyntax:Lscalaz/syntax/ProfunctorSyntax;
       4: areturn

  public void scalaz$Profunctor$_setter_$profunctorSyntax_$eq(scalaz.syntax.ProfunctorSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #145                // Field profunctorSyntax:Lscalaz/syntax/ProfunctorSyntax;
       5: return

  public scalaz.Applicative<F> F();
    Code:
       0: aload_0
       1: getfield      #153                // Field F0$15:Lscalaz/Applicative;
       4: areturn

  public java.lang.Object mapsnd(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #156                // class scalaz/Kleisli
       4: astore_3
       5: aload_3
       6: aload_0
       7: invokeinterface #158,  1          // InterfaceMethod scalaz/KleisliStrong.F:()Lscalaz/Functor;
      12: astore        4
      14: ifnonnull     19
      17: aconst_null
      18: athrow
      19: getstatic     #164                // Field scalaz/Kleisli$.MODULE$:Lscalaz/Kleisli$;
      22: aload_3
      23: aload         4
      25: aload_2
      26: invokedynamic #186,  0            // InvokeDynamic #0:apply:(Lscalaz/Kleisli;Lscalaz/Functor;Lscala/Function1;)Lscala/Function1;
      31: astore        5
      33: ifnonnull     38
      36: aconst_null
      37: athrow
      38: new           #156                // class scalaz/Kleisli
      41: dup
      42: aload         5
      44: invokespecial #190                // Method scalaz/Kleisli."<init>":(Lscala/Function1;)V
      47: areturn

  public java.lang.Object mapfst(java.lang.Object, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #156                // class scalaz/Kleisli
       4: astore_3
       5: aload_3
       6: ifnonnull     11
       9: aconst_null
      10: athrow
      11: getstatic     #164                // Field scalaz/Kleisli$.MODULE$:Lscalaz/Kleisli$;
      14: aload_2
      15: aload_3
      16: invokevirtual #202                // Method scalaz/Kleisli.run:()Lscala/Function1;
      19: invokeinterface #206,  2          // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      24: invokevirtual #210                // Method scalaz/Kleisli$.kleisli:(Lscala/Function1;)Lscalaz/Kleisli;
      27: areturn

  public java.lang.Object second(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #156                // class scalaz/Kleisli
       5: invokevirtual #213                // Method second:(Lscalaz/Kleisli;)Lscalaz/Kleisli;
       8: areturn

  public java.lang.Object first(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #156                // class scalaz/Kleisli
       5: invokevirtual #215                // Method first:(Lscalaz/Kleisli;)Lscalaz/Kleisli;
       8: areturn

  public java.lang.Object right(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #156                // class scalaz/Kleisli
       5: invokevirtual #217                // Method right:(Lscalaz/Kleisli;)Lscalaz/Kleisli;
       8: areturn

  public java.lang.Object left(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #156                // class scalaz/Kleisli
       5: invokevirtual #219                // Method left:(Lscalaz/Kleisli;)Lscalaz/Kleisli;
       8: areturn

  public scalaz.Functor F();
    Code:
       0: aload_0
       1: invokevirtual #221                // Method F:()Lscalaz/Applicative;
       4: areturn

  public scalaz.KleisliInstances0$$anon$19(scalaz.KleisliInstances0, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #153                // Field F0$15:Lscalaz/Applicative;
       5: aload_0
       6: invokespecial #226                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #230                // InterfaceMethod scalaz/Profunctor.$init$:(Lscalaz/Profunctor;)V
      13: aload_0
      14: invokestatic  #235                // InterfaceMethod scalaz/ProChoice.$init$:(Lscalaz/ProChoice;)V
      17: aload_0
      18: invokestatic  #238                // InterfaceMethod scalaz/Strong.$init$:(Lscalaz/Strong;)V
      21: aload_0
      22: invokestatic  #241                // InterfaceMethod scalaz/KleisliStrong.$init$:(Lscalaz/KleisliStrong;)V
      25: aload_0
      26: invokestatic  #244                // InterfaceMethod scalaz/KleisliProChoice.$init$:(Lscalaz/KleisliProChoice;)V
      29: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #257,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
