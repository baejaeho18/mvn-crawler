Compiled from "Maybe.scala"
public abstract class scalaz.MaybeInstances extends scalaz.MaybeInstances0 {
  private final scalaz.Traverse<scalaz.Maybe> maybeInstance;

  public <A> scalaz.Equal<scalaz.Maybe<A>> maybeEqual(scalaz.Equal<A>);
    Code:
       0: new           #38                 // class scalaz/MaybeInstances$$anon$4
       3: dup
       4: aconst_null
       5: aload_1
       6: invokespecial #71                 // Method scalaz/MaybeInstances$$anon$4."<init>":(Lscalaz/MaybeInstances;Lscalaz/Equal;)V
       9: areturn

  public <A> scalaz.Order<scalaz.Maybe<A>> maybeOrder(scalaz.Order<A>);
    Code:
       0: new           #40                 // class scalaz/MaybeInstances$$anon$5
       3: dup
       4: aconst_null
       5: aload_1
       6: invokespecial #81                 // Method scalaz/MaybeInstances$$anon$5."<init>":(Lscalaz/MaybeInstances;Lscalaz/Order;)V
       9: areturn

  public <A> scalaz.Show<scalaz.Maybe<A>> maybeShow(scalaz.Show<A>);
    Code:
       0: getstatic     #92                 // Field scalaz/Show$.MODULE$:Lscalaz/Show$;
       3: aload_1
       4: invokedynamic #116,  0            // InvokeDynamic #0:apply:(Lscalaz/Show;)Lscala/Function1;
       9: astore_2
      10: ifnonnull     15
      13: aconst_null
      14: athrow
      15: new           #50                 // class scalaz/Show$$anon$4
      18: dup
      19: aload_2
      20: invokespecial #119                // Method scalaz/Show$$anon$4."<init>":(Lscala/Function1;)V
      23: areturn

  public <A> scalaz.Monoid<scalaz.Maybe<A>> maybeMonoid(scalaz.Semigroup<A>);
    Code:
       0: new           #42                 // class scalaz/MaybeInstances$$anon$6
       3: dup
       4: aconst_null
       5: aload_1
       6: invokespecial #131                // Method scalaz/MaybeInstances$$anon$6."<init>":(Lscalaz/MaybeInstances;Lscalaz/Semigroup;)V
       9: areturn

  public <A> scalaz.Monoid<java.lang.Object> maybeFirstMonoid();
    Code:
       0: new           #44                 // class scalaz/MaybeInstances$$anon$7
       3: dup
       4: aconst_null
       5: invokespecial #138                // Method scalaz/MaybeInstances$$anon$7."<init>":(Lscalaz/MaybeInstances;)V
       8: areturn

  public <A> scalaz.Show<java.lang.Object> maybeFirstShow(scalaz.Show<scalaz.Maybe<A>>);
    Code:
       0: getstatic     #145                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: dup
       4: ifnonnull     9
       7: aconst_null
       8: athrow
       9: invokevirtual #149                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      12: aload_1
      13: invokevirtual #154                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #156                // class scalaz/Show
      19: areturn

  public <A> scalaz.Order<java.lang.Object> maybeFirstOrder(scalaz.Order<scalaz.Maybe<A>>);
    Code:
       0: getstatic     #145                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: dup
       4: ifnonnull     9
       7: aconst_null
       8: athrow
       9: invokevirtual #149                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      12: aload_1
      13: invokevirtual #154                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #160                // class scalaz/Order
      19: areturn

  public scalaz.Monad<java.lang.Object> maybeFirstMonad();
    Code:
       0: getstatic     #168                // Field scalaz/Tags$.MODULE$:Lscalaz/Tags$;
       3: invokevirtual #172                // Method scalaz/Tags$.First:()Lscalaz/Tag$TagOf;
       6: getstatic     #177                // Field scalaz/Monad$.MODULE$:Lscalaz/Monad$;
       9: aload_0
      10: invokevirtual #180                // Method maybeInstance:()Lscalaz/Traverse;
      13: checkcast     #182                // class scalaz/Monad
      16: astore_1
      17: ifnonnull     22
      20: aconst_null
      21: athrow
      22: aload_1
      23: invokevirtual #185                // Method scalaz/Tag$TagOf.subst1:(Ljava/lang/Object;)Ljava/lang/Object;
      26: checkcast     #182                // class scalaz/Monad
      29: areturn

  public <A> scalaz.Monoid<java.lang.Object> maybeLastMonoid();
    Code:
       0: new           #46                 // class scalaz/MaybeInstances$$anon$8
       3: dup
       4: aconst_null
       5: invokespecial #187                // Method scalaz/MaybeInstances$$anon$8."<init>":(Lscalaz/MaybeInstances;)V
       8: areturn

  public <A> scalaz.Show<java.lang.Object> maybeLastShow(scalaz.Show<scalaz.Maybe<A>>);
    Code:
       0: getstatic     #145                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: dup
       4: ifnonnull     9
       7: aconst_null
       8: athrow
       9: invokevirtual #149                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      12: aload_1
      13: invokevirtual #154                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #156                // class scalaz/Show
      19: areturn

  public <A> scalaz.Order<java.lang.Object> maybeLastOrder(scalaz.Order<scalaz.Maybe<A>>);
    Code:
       0: getstatic     #145                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: dup
       4: ifnonnull     9
       7: aconst_null
       8: athrow
       9: invokevirtual #149                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      12: aload_1
      13: invokevirtual #154                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #160                // class scalaz/Order
      19: areturn

  public scalaz.Monad<java.lang.Object> maybeLastMonad();
    Code:
       0: getstatic     #168                // Field scalaz/Tags$.MODULE$:Lscalaz/Tags$;
       3: invokevirtual #193                // Method scalaz/Tags$.Last:()Lscalaz/Tag$TagOf;
       6: getstatic     #177                // Field scalaz/Monad$.MODULE$:Lscalaz/Monad$;
       9: aload_0
      10: invokevirtual #180                // Method maybeInstance:()Lscalaz/Traverse;
      13: checkcast     #182                // class scalaz/Monad
      16: astore_1
      17: ifnonnull     22
      20: aconst_null
      21: athrow
      22: aload_1
      23: invokevirtual #185                // Method scalaz/Tag$TagOf.subst1:(Ljava/lang/Object;)Ljava/lang/Object;
      26: checkcast     #182                // class scalaz/Monad
      29: areturn

  public <A> scalaz.Monoid<java.lang.Object> maybeMin(scalaz.Order<A>);
    Code:
       0: new           #48                 // class scalaz/MaybeInstances$$anon$9
       3: dup
       4: aconst_null
       5: aload_1
       6: invokespecial #198                // Method scalaz/MaybeInstances$$anon$9."<init>":(Lscalaz/MaybeInstances;Lscalaz/Order;)V
       9: areturn

  public <A> scalaz.Show<java.lang.Object> maybeMinShow(scalaz.Show<A>);
    Code:
       0: getstatic     #145                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: getstatic     #92                 // Field scalaz/Show$.MODULE$:Lscalaz/Show$;
       6: aload_0
       7: aload_1
       8: invokevirtual #203                // Method maybeShow:(Lscalaz/Show;)Lscalaz/Show;
      11: astore_2
      12: ifnonnull     17
      15: aconst_null
      16: athrow
      17: dup
      18: ifnonnull     23
      21: aconst_null
      22: athrow
      23: invokevirtual #149                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      26: aload_2
      27: invokevirtual #154                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #156                // class scalaz/Show
      33: areturn

  public <A> scalaz.Order<java.lang.Object> maybeMinOrder(scalaz.Order<A>);
    Code:
       0: getstatic     #145                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: getstatic     #211                // Field scalaz/Order$.MODULE$:Lscalaz/Order$;
       6: aload_0
       7: aload_1
       8: invokevirtual #213                // Method maybeOrder:(Lscalaz/Order;)Lscalaz/Order;
      11: astore_2
      12: ifnonnull     17
      15: aconst_null
      16: athrow
      17: dup
      18: ifnonnull     23
      21: aconst_null
      22: athrow
      23: invokevirtual #149                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      26: aload_2
      27: invokevirtual #154                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #160                // class scalaz/Order
      33: areturn

  public scalaz.Monad<java.lang.Object> maybeMinMonad();
    Code:
       0: getstatic     #168                // Field scalaz/Tags$.MODULE$:Lscalaz/Tags$;
       3: invokevirtual #217                // Method scalaz/Tags$.Min:()Lscalaz/Tag$TagOf;
       6: getstatic     #177                // Field scalaz/Monad$.MODULE$:Lscalaz/Monad$;
       9: aload_0
      10: invokevirtual #180                // Method maybeInstance:()Lscalaz/Traverse;
      13: checkcast     #182                // class scalaz/Monad
      16: astore_1
      17: ifnonnull     22
      20: aconst_null
      21: athrow
      22: aload_1
      23: invokevirtual #185                // Method scalaz/Tag$TagOf.subst1:(Ljava/lang/Object;)Ljava/lang/Object;
      26: checkcast     #182                // class scalaz/Monad
      29: areturn

  public <A> scalaz.Monoid<java.lang.Object> maybeMax(scalaz.Order<A>);
    Code:
       0: new           #34                 // class scalaz/MaybeInstances$$anon$10
       3: dup
       4: aconst_null
       5: aload_1
       6: invokespecial #219                // Method scalaz/MaybeInstances$$anon$10."<init>":(Lscalaz/MaybeInstances;Lscalaz/Order;)V
       9: areturn

  public <A> scalaz.Show<java.lang.Object> maybeMaxShow(scalaz.Show<A>);
    Code:
       0: getstatic     #145                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: getstatic     #92                 // Field scalaz/Show$.MODULE$:Lscalaz/Show$;
       6: aload_0
       7: aload_1
       8: invokevirtual #203                // Method maybeShow:(Lscalaz/Show;)Lscalaz/Show;
      11: astore_2
      12: ifnonnull     17
      15: aconst_null
      16: athrow
      17: dup
      18: ifnonnull     23
      21: aconst_null
      22: athrow
      23: invokevirtual #149                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      26: aload_2
      27: invokevirtual #154                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #156                // class scalaz/Show
      33: areturn

  public <A> scalaz.Order<java.lang.Object> maybeMaxOrder(scalaz.Order<A>);
    Code:
       0: getstatic     #145                // Field scalaz/Tag$.MODULE$:Lscalaz/Tag$;
       3: getstatic     #211                // Field scalaz/Order$.MODULE$:Lscalaz/Order$;
       6: aload_0
       7: aload_1
       8: invokevirtual #213                // Method maybeOrder:(Lscalaz/Order;)Lscalaz/Order;
      11: astore_2
      12: ifnonnull     17
      15: aconst_null
      16: athrow
      17: dup
      18: ifnonnull     23
      21: aconst_null
      22: athrow
      23: invokevirtual #149                // Method scalaz/Tag$.k:()Lscalaz/TagKind;
      26: aload_2
      27: invokevirtual #154                // Method scalaz/TagKind.subst:(Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #160                // class scalaz/Order
      33: areturn

  public scalaz.Monad<java.lang.Object> maybeMaxMonad();
    Code:
       0: getstatic     #168                // Field scalaz/Tags$.MODULE$:Lscalaz/Tags$;
       3: invokevirtual #227                // Method scalaz/Tags$.Max:()Lscalaz/Tag$TagOf;
       6: getstatic     #177                // Field scalaz/Monad$.MODULE$:Lscalaz/Monad$;
       9: aload_0
      10: invokevirtual #180                // Method maybeInstance:()Lscalaz/Traverse;
      13: checkcast     #182                // class scalaz/Monad
      16: astore_1
      17: ifnonnull     22
      20: aconst_null
      21: athrow
      22: aload_1
      23: invokevirtual #185                // Method scalaz/Tag$TagOf.subst1:(Ljava/lang/Object;)Ljava/lang/Object;
      26: checkcast     #182                // class scalaz/Monad
      29: areturn

  public scalaz.Traverse<scalaz.Maybe> maybeInstance();
    Code:
       0: aload_0
       1: getfield      #230                // Field maybeInstance:Lscalaz/Traverse;
       4: areturn

  public static final scalaz.Cord $anonfun$maybeShow$2(scalaz.Show, java.lang.Object);
    Code:
       0: getstatic     #237                // Field scalaz/Cord$CordInterpolator$.MODULE$:Lscalaz/Cord$CordInterpolator$;
       3: getstatic     #242                // Field scalaz/syntax/package$.MODULE$:Lscalaz/syntax/package$;
       6: invokevirtual #246                // Method scalaz/syntax/package$.show:()Lscalaz/syntax/Syntaxes$show$;
       9: new           #248                // class scala/StringContext
      12: dup
      13: getstatic     #253                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      16: iconst_2
      17: anewarray     #255                // class java/lang/String
      20: dup
      21: iconst_0
      22: ldc_w         #257                // String Just(
      25: aastore
      26: dup
      27: iconst_1
      28: ldc_w         #259                // String )
      31: aastore
      32: checkcast     #261                // class "[Ljava/lang/Object;"
      35: invokevirtual #265                // Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      38: invokespecial #268                // Method scala/StringContext."<init>":(Lscala/collection/Seq;)V
      41: invokevirtual #272                // Method scalaz/syntax/Syntaxes$show$.cordInterpolator:(Lscala/StringContext;)Lscala/StringContext;
      44: getstatic     #253                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      47: iconst_1
      48: anewarray     #20                 // class scalaz/Cord$CordInterpolator$Cords
      51: dup
      52: iconst_0
      53: new           #20                 // class scalaz/Cord$CordInterpolator$Cords
      56: dup
      57: getstatic     #275                // Field scalaz/Cord$CordInterpolator$Cords$.MODULE$:Lscalaz/Cord$CordInterpolator$Cords$;
      60: aload_1
      61: aload_0
      62: invokevirtual #279                // Method scalaz/Cord$CordInterpolator$Cords$.mat:(Ljava/lang/Object;Lscalaz/Show;)Lscalaz/Cord;
      65: invokespecial #282                // Method scalaz/Cord$CordInterpolator$Cords."<init>":(Lscalaz/Cord;)V
      68: aastore
      69: invokevirtual #286                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      72: invokevirtual #290                // Method scalaz/Cord$CordInterpolator$.cord$extension:(Lscala/StringContext;Lscala/collection/Seq;)Lscalaz/Cord;
      75: areturn

  public static final scalaz.Cord $anonfun$maybeShow$3();
    Code:
       0: getstatic     #298                // Field scalaz/Cord$.MODULE$:Lscalaz/Cord$;
       3: ldc_w         #299                // String Empty
       6: invokevirtual #302                // Method scalaz/Cord$.apply:(Ljava/lang/String;)Lscalaz/Cord;
       9: areturn

  public static final scalaz.Cord $anonfun$maybeShow$1(scalaz.Show, scalaz.Maybe);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_1
       7: instanceof    #31                 // class scalaz/Maybe$Just
      10: ifeq          30
      13: aload_1
      14: checkcast     #31                 // class scalaz/Maybe$Just
      17: invokevirtual #307                // Method scalaz/Maybe$Just.get:()Ljava/lang/Object;
      20: astore_3
      21: aload_0
      22: aload_3
      23: invokestatic  #309                // Method $anonfun$maybeShow$2:(Lscalaz/Show;Ljava/lang/Object;)Lscalaz/Cord;
      26: astore_2
      27: goto          53
      30: aload_1
      31: instanceof    #26                 // class scalaz/Maybe$Empty
      34: ifeq          44
      37: invokestatic  #311                // Method $anonfun$maybeShow$3:()Lscalaz/Cord;
      40: astore_2
      41: goto          53
      44: new           #313                // class scala/MatchError
      47: dup
      48: aload_1
      49: invokespecial #316                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
      52: athrow
      53: aload_2
      54: areturn

  public scalaz.MaybeInstances();
    Code:
       0: aload_0
       1: invokespecial #321                // Method scalaz/MaybeInstances0."<init>":()V
       4: aload_0
       5: new           #36                 // class scalaz/MaybeInstances$$anon$11
       8: dup
       9: aconst_null
      10: invokespecial #322                // Method scalaz/MaybeInstances$$anon$11."<init>":(Lscalaz/MaybeInstances;)V
      13: putfield      #230                // Field maybeInstance:Lscalaz/Traverse;
      16: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #336,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
