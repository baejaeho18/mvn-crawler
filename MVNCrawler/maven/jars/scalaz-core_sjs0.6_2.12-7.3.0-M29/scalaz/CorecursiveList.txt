Compiled from "CorecursiveList.scala"
public abstract class scalaz.CorecursiveList<A> {
  public static <A> scalaz.Order<scalaz.CorecursiveList<A>> orderInstance(scalaz.Order<A>);
    Code:
       0: getstatic     #30                 // Field scalaz/CorecursiveList$.MODULE$:Lscalaz/CorecursiveList$;
       3: aload_0
       4: invokevirtual #32                 // Method scalaz/CorecursiveList$.orderInstance:(Lscalaz/Order;)Lscalaz/Order;
       7: areturn

  public static <A> scalaz.Monoid<scalaz.CorecursiveList<A>> monoidInstance();
    Code:
       0: getstatic     #30                 // Field scalaz/CorecursiveList$.MODULE$:Lscalaz/CorecursiveList$;
       3: invokevirtual #37                 // Method scalaz/CorecursiveList$.monoidInstance:()Lscalaz/Monoid;
       6: areturn

  public static scalaz.MonadPlus<scalaz.CorecursiveList> covariantInstance();
    Code:
       0: getstatic     #30                 // Field scalaz/CorecursiveList$.MODULE$:Lscalaz/CorecursiveList$;
       3: invokevirtual #42                 // Method scalaz/CorecursiveList$.covariantInstance:()Lscalaz/MonadPlus;
       6: areturn

  public static <A> scalaz.CorecursiveList<A> cons(A, scalaz.CorecursiveList<A>);
    Code:
       0: getstatic     #30                 // Field scalaz/CorecursiveList$.MODULE$:Lscalaz/CorecursiveList$;
       3: aload_0
       4: aload_1
       5: invokevirtual #49                 // Method scalaz/CorecursiveList$.cons:(Ljava/lang/Object;Lscalaz/CorecursiveList;)Lscalaz/CorecursiveList;
       8: areturn

  public static <A> scalaz.CorecursiveList<A> fromStream(scala.collection.immutable.Stream<A>);
    Code:
       0: getstatic     #30                 // Field scalaz/CorecursiveList$.MODULE$:Lscalaz/CorecursiveList$;
       3: aload_0
       4: invokevirtual #55                 // Method scalaz/CorecursiveList$.fromStream:(Lscala/collection/immutable/Stream;)Lscalaz/CorecursiveList;
       7: areturn

  public static scalaz.NaturalTransformation<scala.collection.immutable.IndexedSeq, scalaz.CorecursiveList> fromVector();
    Code:
       0: getstatic     #30                 // Field scalaz/CorecursiveList$.MODULE$:Lscalaz/CorecursiveList$;
       3: invokevirtual #60                 // Method scalaz/CorecursiveList$.fromVector:()Lscalaz/NaturalTransformation;
       6: areturn

  public static scalaz.NaturalTransformation<scala.collection.immutable.LinearSeq, scalaz.CorecursiveList> fromList();
    Code:
       0: getstatic     #30                 // Field scalaz/CorecursiveList$.MODULE$:Lscalaz/CorecursiveList$;
       3: invokevirtual #64                 // Method scalaz/CorecursiveList$.fromList:()Lscalaz/NaturalTransformation;
       6: areturn

  public static scalaz.Isomorphisms$Iso2<scalaz.NaturalTransformation, scala.collection.immutable.Stream, scalaz.CorecursiveList> streamIso();
    Code:
       0: getstatic     #30                 // Field scalaz/CorecursiveList$.MODULE$:Lscalaz/CorecursiveList$;
       3: invokevirtual #69                 // Method scalaz/CorecursiveList$.streamIso:()Lscalaz/Isomorphisms$Iso2;
       6: areturn

  public static scalaz.Isomorphisms$Iso2<scalaz.NaturalTransformation, scalaz.EphemeralStream, scalaz.CorecursiveList> ephemeralStreamIso();
    Code:
       0: getstatic     #30                 // Field scalaz/CorecursiveList$.MODULE$:Lscalaz/CorecursiveList$;
       3: invokevirtual #73                 // Method scalaz/CorecursiveList$.ephemeralStreamIso:()Lscalaz/Isomorphisms$Iso2;
       6: areturn

  public static <S, A> scalaz.CorecursiveList<A> apply(S, scala.Function1<S, scalaz.Maybe<scala.Tuple2<S, A>>>);
    Code:
       0: getstatic     #30                 // Field scalaz/CorecursiveList$.MODULE$:Lscalaz/CorecursiveList$;
       3: ifnonnull     8
       6: aconst_null
       7: athrow
       8: new           #11                 // class scalaz/CorecursiveList$CorecursiveListImpl
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #82                 // Method scalaz/CorecursiveList$CorecursiveListImpl."<init>":(Ljava/lang/Object;Lscala/Function1;)V
      17: areturn

  public static <A> scalaz.Equal<scalaz.CorecursiveList<A>> equalInstance(scalaz.Equal<A>);
    Code:
       0: getstatic     #30                 // Field scalaz/CorecursiveList$.MODULE$:Lscalaz/CorecursiveList$;
       3: aload_0
       4: invokevirtual #88                 // Method scalaz/CorecursiveList$.equalInstance:(Lscalaz/Equal;)Lscalaz/Equal;
       7: areturn

  public abstract java.lang.Object init();

  public abstract scala.Function1<java.lang.Object, scalaz.Maybe<scala.Tuple2<java.lang.Object, A>>> step();

  public scalaz.CorecursiveList();
    Code:
       0: aload_0
       1: invokespecial #94                 // Method java/lang/Object."<init>":()V
       4: return
}
