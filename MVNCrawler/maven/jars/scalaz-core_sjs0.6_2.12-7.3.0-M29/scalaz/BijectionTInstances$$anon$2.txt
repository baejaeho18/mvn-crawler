Compiled from "BijectionT.scala"
public final class scalaz.BijectionTInstances$$anon$2 implements scalaz.BijectionTCategory<F, G> {
  private final scalaz.syntax.SplitSyntax<?> splitSyntax;

  private final scalaz.syntax.CategorySyntax<?> categorySyntax;

  private final scalaz.syntax.ComposeSyntax<?> composeSyntax;

  private final scalaz.Monad F0$2;

  private final scalaz.Monad G0$2;

  public <A> scalaz.BijectionT<F, G, A, A> id();
    Code:
       0: aload_0
       1: invokestatic  #42                 // InterfaceMethod scalaz/BijectionTCategory.id$:(Lscalaz/BijectionTCategory;)Lscalaz/BijectionT;
       4: areturn

  public <A, B, C> scalaz.BijectionT<F, G, A, C> compose(scalaz.BijectionT<F, G, B, C>, scalaz.BijectionT<F, G, A, B>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #55                 // InterfaceMethod scalaz/BijectionTSplit.compose$:(Lscalaz/BijectionTSplit;Lscalaz/BijectionT;Lscalaz/BijectionT;)Lscalaz/BijectionT;
       6: areturn

  public <A, B, C, D> scalaz.BijectionT<F, G, scala.Tuple2<A, C>, scala.Tuple2<B, D>> split(scalaz.BijectionT<F, G, A, B>, scalaz.BijectionT<F, G, C, D>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #62                 // InterfaceMethod scalaz/BijectionTSplit.split$:(Lscalaz/BijectionTSplit;Lscalaz/BijectionT;Lscalaz/BijectionT;)Lscalaz/BijectionT;
       6: areturn

  public scalaz.PlusEmpty<?> empty();
    Code:
       0: aload_0
       1: invokestatic  #69                 // InterfaceMethod scalaz/Category.empty$:(Lscalaz/Category;)Lscalaz/PlusEmpty;
       4: areturn

  public <A> scalaz.Monoid<scalaz.BijectionT<F, G, A, A>> monoid();
    Code:
       0: aload_0
       1: invokestatic  #76                 // InterfaceMethod scalaz/Category.monoid$:(Lscalaz/Category;)Lscalaz/Monoid;
       4: areturn

  public scalaz.Category<?>.CategoryLaw categoryLaw();
    Code:
       0: aload_0
       1: invokestatic  #83                 // InterfaceMethod scalaz/Category.categoryLaw$:(Lscalaz/Category;)Lscalaz/Category$CategoryLaw;
       4: areturn

  public scalaz.Plus<?> plus();
    Code:
       0: aload_0
       1: invokestatic  #90                 // InterfaceMethod scalaz/Compose.plus$:(Lscalaz/Compose;)Lscalaz/Plus;
       4: areturn

  public <A> scalaz.Semigroup<scalaz.BijectionT<F, G, A, A>> semigroup();
    Code:
       0: aload_0
       1: invokestatic  #97                 // InterfaceMethod scalaz/Compose.semigroup$:(Lscalaz/Compose;)Lscalaz/Semigroup;
       4: areturn

  public scalaz.Compose<?>.ComposeLaw composeLaw();
    Code:
       0: aload_0
       1: invokestatic  #104                // InterfaceMethod scalaz/Compose.composeLaw$:(Lscalaz/Compose;)Lscalaz/Compose$ComposeLaw;
       4: areturn

  public scalaz.syntax.SplitSyntax<?> splitSyntax();
    Code:
       0: aload_0
       1: getfield      #108                // Field splitSyntax:Lscalaz/syntax/SplitSyntax;
       4: areturn

  public void scalaz$Split$_setter_$splitSyntax_$eq(scalaz.syntax.SplitSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #108                // Field splitSyntax:Lscalaz/syntax/SplitSyntax;
       5: return

  public scalaz.syntax.CategorySyntax<?> categorySyntax();
    Code:
       0: aload_0
       1: getfield      #116                // Field categorySyntax:Lscalaz/syntax/CategorySyntax;
       4: areturn

  public void scalaz$Category$_setter_$categorySyntax_$eq(scalaz.syntax.CategorySyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #116                // Field categorySyntax:Lscalaz/syntax/CategorySyntax;
       5: return

  public scalaz.syntax.ComposeSyntax<?> composeSyntax();
    Code:
       0: aload_0
       1: getfield      #123                // Field composeSyntax:Lscalaz/syntax/ComposeSyntax;
       4: areturn

  public void scalaz$Compose$_setter_$composeSyntax_$eq(scalaz.syntax.ComposeSyntax<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #123                // Field composeSyntax:Lscalaz/syntax/ComposeSyntax;
       5: return

  public scalaz.Monad<F> F();
    Code:
       0: aload_0
       1: getfield      #131                // Field F0$2:Lscalaz/Monad;
       4: areturn

  public scalaz.Monad<G> G();
    Code:
       0: aload_0
       1: getfield      #135                // Field G0$2:Lscalaz/Monad;
       4: areturn

  public java.lang.Object split(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #140                // class scalaz/BijectionT
       5: aload_2
       6: checkcast     #140                // class scalaz/BijectionT
       9: invokevirtual #142                // Method split:(Lscalaz/BijectionT;Lscalaz/BijectionT;)Lscalaz/BijectionT;
      12: areturn

  public java.lang.Object compose(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #140                // class scalaz/BijectionT
       5: aload_2
       6: checkcast     #140                // class scalaz/BijectionT
       9: invokevirtual #145                // Method compose:(Lscalaz/BijectionT;Lscalaz/BijectionT;)Lscalaz/BijectionT;
      12: areturn

  public java.lang.Object id();
    Code:
       0: aload_0
       1: invokevirtual #148                // Method id:()Lscalaz/BijectionT;
       4: areturn

  public scalaz.Bind G();
    Code:
       0: aload_0
       1: invokevirtual #151                // Method G:()Lscalaz/Monad;
       4: areturn

  public scalaz.Bind F();
    Code:
       0: aload_0
       1: invokevirtual #153                // Method F:()Lscalaz/Monad;
       4: areturn

  public scalaz.BijectionTInstances$$anon$2(scalaz.BijectionTInstances, scalaz.Monad, scalaz.Monad);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #131                // Field F0$2:Lscalaz/Monad;
       5: aload_0
       6: aload_3
       7: putfield      #135                // Field G0$2:Lscalaz/Monad;
      10: aload_0
      11: invokespecial #159                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #163                // InterfaceMethod scalaz/Compose.$init$:(Lscalaz/Compose;)V
      18: aload_0
      19: invokestatic  #166                // InterfaceMethod scalaz/Category.$init$:(Lscalaz/Category;)V
      22: aload_0
      23: invokestatic  #171                // InterfaceMethod scalaz/Split.$init$:(Lscalaz/Split;)V
      26: aload_0
      27: invokestatic  #174                // InterfaceMethod scalaz/BijectionTSplit.$init$:(Lscalaz/BijectionTSplit;)V
      30: aload_0
      31: invokestatic  #177                // InterfaceMethod scalaz/BijectionTCategory.$init$:(Lscalaz/BijectionTCategory;)V
      34: return
}
