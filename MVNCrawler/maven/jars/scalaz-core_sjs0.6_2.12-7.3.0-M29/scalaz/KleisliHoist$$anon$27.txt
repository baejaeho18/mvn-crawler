Compiled from "Kleisli.scala"
public final class scalaz.KleisliHoist$$anon$27 implements scalaz.NaturalTransformation<?, ?> {
  private final scalaz.NaturalTransformation f$11;

  public <E> scalaz.NaturalTransformation<E, ?> compose(scalaz.NaturalTransformation<E, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #28                 // InterfaceMethod scalaz/NaturalTransformation.compose$:(Lscalaz/NaturalTransformation;Lscalaz/NaturalTransformation;)Lscalaz/NaturalTransformation;
       5: areturn

  public <H> scalaz.NaturalTransformation<?, H> andThen(scalaz.NaturalTransformation<?, H>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #35                 // InterfaceMethod scalaz/NaturalTransformation.andThen$:(Lscalaz/NaturalTransformation;Lscalaz/NaturalTransformation;)Lscalaz/NaturalTransformation;
       5: areturn

  public <H> scalaz.NaturalTransformation<?, ?> or(scalaz.NaturalTransformation<H, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #41                 // InterfaceMethod scalaz/NaturalTransformation.or$:(Lscalaz/NaturalTransformation;Lscalaz/NaturalTransformation;)Lscalaz/NaturalTransformation;
       5: areturn

  public <GG> scalaz.NaturalTransformation<?, GG> widen(scalaz.LiskovF<?, GG>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #49                 // InterfaceMethod scalaz/NaturalTransformation.widen$:(Lscalaz/NaturalTransformation;Lscalaz/LiskovF;)Lscalaz/NaturalTransformation;
       5: areturn

  public <FF> scalaz.NaturalTransformation<FF, ?> narrow(scalaz.LiskovF<FF, ?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #55                 // InterfaceMethod scalaz/NaturalTransformation.narrow$:(Lscalaz/NaturalTransformation;Lscalaz/LiskovF;)Lscalaz/NaturalTransformation;
       5: areturn

  public <A62$> scalaz.Kleisli<N, R, A62$> apply(scalaz.Kleisli<M, R, A62$>);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #80,  0             // InvokeDynamic #0:apply:(Lscalaz/KleisliHoist$$anon$27;)Lscala/Function1;
       7: astore_2
       8: ifnonnull     13
      11: aconst_null
      12: athrow
      13: getstatic     #86                 // Field scalaz/Kleisli$.MODULE$:Lscalaz/Kleisli$;
      16: aload_1
      17: invokevirtual #92                 // Method scalaz/Kleisli.run:()Lscala/Function1;
      20: aload_2
      21: invokeinterface #97,  2           // InterfaceMethod scala/Function1.andThen:(Lscala/Function1;)Lscala/Function1;
      26: invokevirtual #101                // Method scalaz/Kleisli$.kleisli:(Lscala/Function1;)Lscalaz/Kleisli;
      29: areturn

  public java.lang.Object apply(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #88                 // class scalaz/Kleisli
       5: invokevirtual #107                // Method apply:(Lscalaz/Kleisli;)Lscalaz/Kleisli;
       8: areturn

  public static final java.lang.Object $anonfun$apply$1(scalaz.KleisliHoist$$anon$27, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #111                // Field f$11:Lscalaz/NaturalTransformation;
       4: aload_1
       5: invokeinterface #113,  2          // InterfaceMethod scalaz/NaturalTransformation.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      10: areturn

  public scalaz.KleisliHoist$$anon$27(scalaz.KleisliHoist<R>);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #111                // Field f$11:Lscalaz/NaturalTransformation;
       5: aload_0
       6: invokespecial #120                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #124                // InterfaceMethod scalaz/NaturalTransformation.$init$:(Lscalaz/NaturalTransformation;)V
      13: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #137,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
