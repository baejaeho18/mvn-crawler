Compiled from "OneOr.scala"
public final class scalaz.OneOrInstances$$anon$2 implements scalaz.OneOrOrder<F, A> {
  private final scalaz.syntax.OrderSyntax<scalaz.OneOr<F, A>> orderSyntax;

  private final scalaz.syntax.EqualSyntax<scalaz.OneOr<F, A>> equalSyntax;

  private final scalaz.Order oa$2;

  private final scalaz.Order ofa$2;

  public scalaz.Ordering order(scalaz.OneOr<F, A>, scalaz.OneOr<F, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #43                 // InterfaceMethod scalaz/OneOrOrder.order$:(Lscalaz/OneOrOrder;Lscalaz/OneOr;Lscalaz/OneOr;)Lscalaz/Ordering;
       6: areturn

  public final boolean equal(scalaz.OneOr<F, A>, scalaz.OneOr<F, A>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #55                 // InterfaceMethod scalaz/OneOrEqual.equal$:(Lscalaz/OneOrEqual;Lscalaz/OneOr;Lscalaz/OneOr;)Z
       6: ireturn

  public final boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #61                 // InterfaceMethod scalaz/OneOrEqual.equalIsNatural$:(Lscalaz/OneOrEqual;)Z
       4: ireturn

  public scalaz.Ordering apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #69                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean lessThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #76                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #80                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #84                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #88                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public java.lang.Object max(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #94                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object min(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #98                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2 sort(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #104                // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, scalaz.OneOr<F, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #112                // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<scalaz.OneOr<F, A>> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #120                // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<scalaz.OneOr<F, A>> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #127                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<scalaz.OneOr<F, A>>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #134                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public scalaz.Equal<scalaz.OneOr<F, A>>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #141                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.syntax.OrderSyntax<scalaz.OneOr<F, A>> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #145                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<scalaz.OneOr<F, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #145                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<scalaz.OneOr<F, A>> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #153                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<scalaz.OneOr<F, A>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #153                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.Order<A> OA();
    Code:
       0: getstatic     #164                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #166                // Field oa$2:Lscalaz/Order;
       7: invokevirtual #170                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #24                 // class scalaz/Order
      13: areturn

  public scalaz.Order<F> OFA();
    Code:
       0: getstatic     #164                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: getfield      #174                // Field ofa$2:Lscalaz/Order;
       7: invokevirtual #170                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #24                 // class scalaz/Order
      13: areturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: new           #20                 // class scalaz/Order$$anon$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #179                // Method scalaz/Order$$anon$1."<init>":(Lscalaz/Order;Lscala/Function1;)V
       9: areturn

  public final boolean equal(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #181                // class scalaz/OneOr
       5: aload_2
       6: checkcast     #181                // class scalaz/OneOr
       9: invokevirtual #183                // Method equal:(Lscalaz/OneOr;Lscalaz/OneOr;)Z
      12: ireturn

  public scalaz.Ordering order(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #181                // class scalaz/OneOr
       5: aload_2
       6: checkcast     #181                // class scalaz/OneOr
       9: invokevirtual #185                // Method order:(Lscalaz/OneOr;Lscalaz/OneOr;)Lscalaz/Ordering;
      12: areturn

  public scalaz.Equal OFA();
    Code:
       0: aload_0
       1: invokevirtual #188                // Method OFA:()Lscalaz/Order;
       4: areturn

  public scalaz.Equal OA();
    Code:
       0: aload_0
       1: invokevirtual #190                // Method OA:()Lscalaz/Order;
       4: areturn

  public scalaz.OneOrInstances$$anon$2(scalaz.OneOrInstances, scalaz.Order, scalaz.Order);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #166                // Field oa$2:Lscalaz/Order;
       5: aload_0
       6: aload_3
       7: putfield      #174                // Field ofa$2:Lscalaz/Order;
      10: aload_0
      11: invokespecial #195                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: invokestatic  #199                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      18: aload_0
      19: invokestatic  #202                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      22: aload_0
      23: invokestatic  #205                // InterfaceMethod scalaz/OneOrEqual.$init$:(Lscalaz/OneOrEqual;)V
      26: aload_0
      27: invokestatic  #208                // InterfaceMethod scalaz/OneOrOrder.$init$:(Lscalaz/OneOrOrder;)V
      30: return
}
