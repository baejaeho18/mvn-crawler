Compiled from "Order.scala"
public interface scalaz.Order<F> extends scalaz.Equal<F> {
  public static <A> scalaz.Monoid<scalaz.Order<A>> orderMonoid();
    Code:
       0: getstatic     #52                 // Field scalaz/Order$.MODULE$:Lscalaz/Order$;
       3: invokevirtual #54                 // Method scalaz/Order$.orderMonoid:()Lscalaz/Monoid;
       6: areturn

  public static <A, B> scalaz.Order<A> orderBy(scala.Function1<A, B>, scalaz.Order<B>);
    Code:
       0: getstatic     #52                 // Field scalaz/Order$.MODULE$:Lscalaz/Order$;
       3: ifnonnull     8
       6: aconst_null
       7: athrow
       8: aload_1
       9: aload_0
      10: invokeinterface #63,  2           // InterfaceMethod contramap:(Lscala/Function1;)Lscalaz/Order;
      15: areturn

  public static <A> scalaz.Order<A> fromScalaOrdering(scala.math.Ordering<A>);
    Code:
       0: getstatic     #52                 // Field scalaz/Order$.MODULE$:Lscalaz/Order$;
       3: aload_0
       4: invokevirtual #69                 // Method scalaz/Order$.fromScalaOrdering:(Lscala/math/Ordering;)Lscalaz/Order;
       7: areturn

  public static scalaz.Decidable<scalaz.Order> orderInstance();
    Code:
       0: getstatic     #52                 // Field scalaz/Order$.MODULE$:Lscalaz/Order$;
       3: invokevirtual #74                 // Method scalaz/Order$.orderInstance:()Lscalaz/Decidable;
       6: areturn

  public static <F, G> scalaz.Order<F> fromIso(scalaz.Isomorphisms$Iso<scala.Function1, F, G>, scalaz.Order<G>);
    Code:
       0: getstatic     #52                 // Field scalaz/Order$.MODULE$:Lscalaz/Order$;
       3: aload_0
       4: aload_1
       5: invokevirtual #81                 // Method scalaz/Order$.fromIso:(Lscalaz/Isomorphisms$Iso;Lscalaz/Order;)Lscalaz/Order;
       8: areturn

  public abstract void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<F>);

  public static scalaz.Ordering apply$(scalaz.Order, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #94                 // InterfaceMethod apply:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public default scalaz.Ordering apply(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #100,  3          // InterfaceMethod order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       8: areturn

  public abstract scalaz.Ordering order(F, F);

  public static boolean equal$(scalaz.Order, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #107                // InterfaceMethod equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public default boolean equal(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #100,  3          // InterfaceMethod order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       8: getstatic     #111                // Field scalaz/Ordering$EQ$.MODULE$:Lscalaz/Ordering$EQ$;
      11: astore_3
      12: dup
      13: ifnonnull     24
      16: pop
      17: aload_3
      18: ifnull        31
      21: goto          33
      24: aload_3
      25: invokevirtual #115                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      28: ifeq          33
      31: iconst_1
      32: ireturn
      33: iconst_0
      34: ireturn

  public static boolean lessThan$(scalaz.Order, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #119                // InterfaceMethod lessThan:(Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public default boolean lessThan(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #100,  3          // InterfaceMethod order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       8: getstatic     #122                // Field scalaz/Ordering$LT$.MODULE$:Lscalaz/Ordering$LT$;
      11: astore_3
      12: dup
      13: ifnonnull     24
      16: pop
      17: aload_3
      18: ifnull        31
      21: goto          33
      24: aload_3
      25: invokevirtual #115                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      28: ifeq          33
      31: iconst_1
      32: ireturn
      33: iconst_0
      34: ireturn

  public static boolean lessThanOrEqual$(scalaz.Order, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #126                // InterfaceMethod lessThanOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public default boolean lessThanOrEqual(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #100,  3          // InterfaceMethod order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       8: getstatic     #129                // Field scalaz/Ordering$GT$.MODULE$:Lscalaz/Ordering$GT$;
      11: astore_3
      12: dup
      13: ifnonnull     24
      16: pop
      17: aload_3
      18: ifnull        33
      21: goto          31
      24: aload_3
      25: invokevirtual #115                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      28: ifne          33
      31: iconst_1
      32: ireturn
      33: iconst_0
      34: ireturn

  public static boolean greaterThan$(scalaz.Order, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #133                // InterfaceMethod greaterThan:(Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public default boolean greaterThan(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #100,  3          // InterfaceMethod order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       8: getstatic     #129                // Field scalaz/Ordering$GT$.MODULE$:Lscalaz/Ordering$GT$;
      11: astore_3
      12: dup
      13: ifnonnull     24
      16: pop
      17: aload_3
      18: ifnull        31
      21: goto          33
      24: aload_3
      25: invokevirtual #115                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      28: ifeq          33
      31: iconst_1
      32: ireturn
      33: iconst_0
      34: ireturn

  public static boolean greaterThanOrEqual$(scalaz.Order, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #137                // InterfaceMethod greaterThanOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public default boolean greaterThanOrEqual(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #100,  3          // InterfaceMethod order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       8: getstatic     #122                // Field scalaz/Ordering$LT$.MODULE$:Lscalaz/Ordering$LT$;
      11: astore_3
      12: dup
      13: ifnonnull     24
      16: pop
      17: aload_3
      18: ifnull        33
      21: goto          31
      24: aload_3
      25: invokevirtual #115                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      28: ifne          33
      31: iconst_1
      32: ireturn
      33: iconst_0
      34: ireturn

  public static java.lang.Object max$(scalaz.Order, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #143                // InterfaceMethod max:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public default F max(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #137,  3          // InterfaceMethod greaterThanOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z
       8: ifeq          13
      11: aload_1
      12: areturn
      13: aload_2
      14: areturn

  public static java.lang.Object min$(scalaz.Order, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #148                // InterfaceMethod min:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public default F min(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #119,  3          // InterfaceMethod lessThan:(Ljava/lang/Object;Ljava/lang/Object;)Z
       8: ifeq          13
      11: aload_1
      12: areturn
      13: aload_2
      14: areturn

  public static scala.Tuple2 sort$(scalaz.Order, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #154                // InterfaceMethod sort:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public default scala.Tuple2<F, F> sort(F, F);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #126,  3          // InterfaceMethod lessThanOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z
       8: ifeq          21
      11: new           #157                // class scala/Tuple2
      14: dup
      15: aload_1
      16: aload_2
      17: invokespecial #161                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      20: areturn
      21: new           #157                // class scala/Tuple2
      24: dup
      25: aload_2
      26: aload_1
      27: invokespecial #161                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      30: areturn

  public static scalaz.Order contramap$(scalaz.Order, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #63                 // InterfaceMethod contramap:(Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public default <B> scalaz.Order<B> contramap(scala.Function1<B, F>);
    Code:
       0: new           #18                 // class scalaz/Order$$anon$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #168                // Method scalaz/Order$$anon$1."<init>":(Lscalaz/Order;Lscala/Function1;)V
       9: areturn

  public static scala.math.Ordering toScalaOrdering$(scalaz.Order);
    Code:
       0: aload_0
       1: invokespecial #174                // InterfaceMethod toScalaOrdering:()Lscala/math/Ordering;
       4: areturn

  public default scala.math.Ordering<F> toScalaOrdering();
    Code:
       0: new           #20                 // class scalaz/Order$$anon$2
       3: dup
       4: aload_0
       5: invokespecial #178                // Method scalaz/Order$$anon$2."<init>":(Lscalaz/Order;)V
       8: areturn

  public static scalaz.Order reverseOrder$(scalaz.Order);
    Code:
       0: aload_0
       1: invokespecial #184                // InterfaceMethod reverseOrder:()Lscalaz/Order;
       4: areturn

  public default scalaz.Order<F> reverseOrder();
    Code:
       0: new           #22                 // class scalaz/Order$$anon$3
       3: dup
       4: aload_0
       5: invokespecial #186                // Method scalaz/Order$$anon$3."<init>":(Lscalaz/Order;)V
       8: areturn

  public static scalaz.Order$OrderLaw orderLaw$(scalaz.Order);
    Code:
       0: aload_0
       1: invokespecial #192                // InterfaceMethod orderLaw:()Lscalaz/Order$OrderLaw;
       4: areturn

  public default scalaz.Order<F>.OrderLaw orderLaw();
    Code:
       0: new           #24                 // class scalaz/Order$$anon$4
       3: dup
       4: aload_0
       5: invokespecial #194                // Method scalaz/Order$$anon$4."<init>":(Lscalaz/Order;)V
       8: areturn

  public abstract scalaz.syntax.OrderSyntax<F> orderSyntax();

  public static void $init$(scalaz.Order);
    Code:
       0: aload_0
       1: new           #26                 // class scalaz/Order$$anon$5
       4: dup
       5: aload_0
       6: invokespecial #199                // Method scalaz/Order$$anon$5."<init>":(Lscalaz/Order;)V
       9: invokeinterface #201,  2          // InterfaceMethod scalaz$Order$_setter_$orderSyntax_$eq:(Lscalaz/syntax/OrderSyntax;)V
      14: return
}
