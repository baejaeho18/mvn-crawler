Compiled from "LazyEither.scala"
public final class scalaz.LazyEitherInstances$$anon$5 implements scalaz.Bitraverse<scalaz.LazyEither> {
  private final scalaz.syntax.BitraverseSyntax<scalaz.LazyEither> bitraverseSyntax;

  private final scalaz.syntax.BifoldableSyntax<scalaz.LazyEither> bifoldableSyntax;

  private final scalaz.syntax.BifunctorSyntax<scalaz.LazyEither> bifunctorSyntax;

  public <G> scalaz.Bitraverse<?> compose(scalaz.Bitraverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #51                 // InterfaceMethod scalaz/Bitraverse.compose$:(Lscalaz/Bitraverse;Lscalaz/Bitraverse;)Lscalaz/Bitraverse;
       5: areturn

  public <G> scalaz.Bitraverse<?> product(scalaz.Bitraverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #58                 // InterfaceMethod scalaz/Bitraverse.product$:(Lscalaz/Bitraverse;Lscalaz/Bitraverse;)Lscalaz/Bitraverse;
       5: areturn

  public <G, A, B, C, D> scala.Function1<scalaz.LazyEither<A, B>, G> bitraverseF(scala.Function1<A, G>, scala.Function1<B, G>, scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #68                 // InterfaceMethod scalaz/Bitraverse.bitraverseF$:(Lscalaz/Bitraverse;Lscala/Function1;Lscala/Function1;Lscalaz/Applicative;)Lscala/Function1;
       7: areturn

  public <X> scalaz.Traverse<?> leftTraverse();
    Code:
       0: aload_0
       1: invokestatic  #77                 // InterfaceMethod scalaz/Bitraverse.leftTraverse$:(Lscalaz/Bitraverse;)Lscalaz/Traverse;
       4: areturn

  public <X> scalaz.Traverse<?> rightTraverse();
    Code:
       0: aload_0
       1: invokestatic  #81                 // InterfaceMethod scalaz/Bitraverse.rightTraverse$:(Lscalaz/Bitraverse;)Lscalaz/Traverse;
       4: areturn

  public scalaz.Traverse<?> uTraverse();
    Code:
       0: aload_0
       1: invokestatic  #86                 // InterfaceMethod scalaz/Bitraverse.uTraverse$:(Lscalaz/Bitraverse;)Lscalaz/Traverse;
       4: areturn

  public <G> scalaz.Bitraverse<scalaz.LazyEither>.Bitraversal<G> bitraversal(scalaz.Applicative<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #94                 // InterfaceMethod scalaz/Bitraverse.bitraversal$:(Lscalaz/Bitraverse;Lscalaz/Applicative;)Lscalaz/Bitraverse$Bitraversal;
       5: areturn

  public <S> scalaz.Bitraverse<scalaz.LazyEither>.Bitraversal<?> bitraversalS();
    Code:
       0: aload_0
       1: invokestatic  #101                // InterfaceMethod scalaz/Bitraverse.bitraversalS$:(Lscalaz/Bitraverse;)Lscalaz/Bitraverse$Bitraversal;
       4: areturn

  public java.lang.Object bitraverse(java.lang.Object, scala.Function1, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #109                // InterfaceMethod scalaz/Bitraverse.bitraverse$:(Lscalaz/Bitraverse;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Applicative;)Ljava/lang/Object;
       9: areturn

  public scalaz.IndexedStateT bitraverseS(java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #116                // InterfaceMethod scalaz/Bitraverse.bitraverseS$:(Lscalaz/Bitraverse;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Lscalaz/IndexedStateT;
       7: areturn

  public scala.Tuple2 runBitraverseS(java.lang.Object, java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #123                // InterfaceMethod scalaz/Bitraverse.runBitraverseS$:(Lscalaz/Bitraverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Lscala/Tuple2;
       9: areturn

  public scalaz.IndexedStateT traverseSTrampoline(java.lang.Object, scala.Function1, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #130                // InterfaceMethod scalaz/Bitraverse.traverseSTrampoline$:(Lscalaz/Bitraverse;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Applicative;)Lscalaz/IndexedStateT;
       9: areturn

  public scalaz.Kleisli bitraverseKTrampoline(java.lang.Object, scala.Function1, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #137                // InterfaceMethod scalaz/Bitraverse.bitraverseKTrampoline$:(Lscalaz/Bitraverse;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Applicative;)Lscalaz/Kleisli;
       9: areturn

  public scala.Tuple2 bifoldLShape(java.lang.Object, java.lang.Object, scala.Function2, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #144                // InterfaceMethod scalaz/Bitraverse.bifoldLShape$:(Lscalaz/Bitraverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;Lscala/Function2;)Lscala/Tuple2;
       9: areturn

  public java.lang.Object bisequence(java.lang.Object, scalaz.Applicative);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #153                // InterfaceMethod scalaz/Bitraverse.bisequence$:(Lscalaz/Bitraverse;Ljava/lang/Object;Lscalaz/Applicative;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object bifoldLeft(java.lang.Object, java.lang.Object, scala.Function2, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #159                // InterfaceMethod scalaz/Bitraverse.bifoldLeft$:(Lscalaz/Bitraverse;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object bifoldMap(java.lang.Object, scala.Function1, scala.Function1, scalaz.Monoid);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #166                // InterfaceMethod scalaz/Bitraverse.bifoldMap$:(Lscalaz/Bitraverse;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object bifoldRight(java.lang.Object, scala.Function0, scala.Function2, scala.Function2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #173                // InterfaceMethod scalaz/Bitraverse.bifoldRight$:(Lscalaz/Bitraverse;Ljava/lang/Object;Lscala/Function0;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;
       9: areturn

  public <G, H> scalaz.Bitraverse<?> embed(scalaz.Traverse<G>, scalaz.Traverse<H>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #182                // InterfaceMethod scalaz/Bitraverse.embed$:(Lscalaz/Bitraverse;Lscalaz/Traverse;Lscalaz/Traverse;)Lscalaz/Bitraverse;
       6: areturn

  public <G> scalaz.Bitraverse<?> embedLeft(scalaz.Traverse<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #190                // InterfaceMethod scalaz/Bitraverse.embedLeft$:(Lscalaz/Bitraverse;Lscalaz/Traverse;)Lscalaz/Bitraverse;
       5: areturn

  public <H> scalaz.Bitraverse<?> embedRight(scalaz.Traverse<H>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #195                // InterfaceMethod scalaz/Bitraverse.embedRight$:(Lscalaz/Bitraverse;Lscalaz/Traverse;)Lscalaz/Bitraverse;
       5: areturn

  public <G> scalaz.Bifoldable<?> compose(scalaz.Bifoldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #200                // InterfaceMethod scalaz/Bifoldable.compose$:(Lscalaz/Bifoldable;Lscalaz/Bifoldable;)Lscalaz/Bifoldable;
       5: areturn

  public <G> scalaz.Bifoldable<?> product(scalaz.Bifoldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #203                // InterfaceMethod scalaz/Bifoldable.product$:(Lscalaz/Bifoldable;Lscalaz/Bifoldable;)Lscalaz/Bifoldable;
       5: areturn

  public scala.Option bifoldMap1(java.lang.Object, scala.Function1, scala.Function1, scalaz.Semigroup);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #209                // InterfaceMethod scalaz/Bifoldable.bifoldMap1$:(Lscalaz/Bifoldable;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;Lscalaz/Semigroup;)Lscala/Option;
       9: areturn

  public final java.lang.Object bifoldR(java.lang.Object, scala.Function0, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #216                // InterfaceMethod scalaz/Bifoldable.bifoldR$:(Lscalaz/Bifoldable;Ljava/lang/Object;Lscala/Function0;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       9: areturn

  public final java.lang.Object bifoldL(java.lang.Object, java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #222                // InterfaceMethod scalaz/Bifoldable.bifoldL$:(Lscalaz/Bifoldable;Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
       9: areturn

  public <X> scalaz.Foldable<?> leftFoldable();
    Code:
       0: aload_0
       1: invokestatic  #229                // InterfaceMethod scalaz/Bifoldable.leftFoldable$:(Lscalaz/Bifoldable;)Lscalaz/Foldable;
       4: areturn

  public <X> scalaz.Foldable<?> rightFoldable();
    Code:
       0: aload_0
       1: invokestatic  #233                // InterfaceMethod scalaz/Bifoldable.rightFoldable$:(Lscalaz/Bifoldable;)Lscalaz/Foldable;
       4: areturn

  public scalaz.Foldable<?> uFoldable();
    Code:
       0: aload_0
       1: invokestatic  #238                // InterfaceMethod scalaz/Bifoldable.uFoldable$:(Lscalaz/Bifoldable;)Lscalaz/Foldable;
       4: areturn

  public <G, H> scalaz.Bifoldable<?> embed(scalaz.Foldable<G>, scalaz.Foldable<H>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #243                // InterfaceMethod scalaz/Bifoldable.embed$:(Lscalaz/Bifoldable;Lscalaz/Foldable;Lscalaz/Foldable;)Lscalaz/Bifoldable;
       6: areturn

  public <G> scalaz.Bifoldable<?> embedLeft(scalaz.Foldable<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #249                // InterfaceMethod scalaz/Bifoldable.embedLeft$:(Lscalaz/Bifoldable;Lscalaz/Foldable;)Lscalaz/Bifoldable;
       5: areturn

  public <H> scalaz.Bifoldable<?> embedRight(scalaz.Foldable<H>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #252                // InterfaceMethod scalaz/Bifoldable.embedRight$:(Lscalaz/Bifoldable;Lscalaz/Foldable;)Lscalaz/Bifoldable;
       5: areturn

  public scalaz.Bifoldable<scalaz.LazyEither>.BifoldableLaw bifoldableLaw();
    Code:
       0: aload_0
       1: invokestatic  #259                // InterfaceMethod scalaz/Bifoldable.bifoldableLaw$:(Lscalaz/Bifoldable;)Lscalaz/Bifoldable$BifoldableLaw;
       4: areturn

  public <G> scalaz.Bifunctor<?> compose(scalaz.Bifunctor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #266                // InterfaceMethod scalaz/Bifunctor.compose$:(Lscalaz/Bifunctor;Lscalaz/Bifunctor;)Lscalaz/Bifunctor;
       5: areturn

  public <G> scalaz.Bifunctor<?> product(scalaz.Bifunctor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #269                // InterfaceMethod scalaz/Bifunctor.product$:(Lscalaz/Bifunctor;Lscalaz/Bifunctor;)Lscalaz/Bifunctor;
       5: areturn

  public <X> scalaz.Functor<?> leftFunctor();
    Code:
       0: aload_0
       1: invokestatic  #276                // InterfaceMethod scalaz/Bifunctor.leftFunctor$:(Lscalaz/Bifunctor;)Lscalaz/Functor;
       4: areturn

  public java.lang.Object leftMap(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #283                // InterfaceMethod scalaz/Bifunctor.leftMap$:(Lscalaz/Bifunctor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <X> scalaz.Functor<?> rightFunctor();
    Code:
       0: aload_0
       1: invokestatic  #287                // InterfaceMethod scalaz/Bifunctor.rightFunctor$:(Lscalaz/Bifunctor;)Lscalaz/Functor;
       4: areturn

  public scalaz.Functor<?> uFunctor();
    Code:
       0: aload_0
       1: invokestatic  #292                // InterfaceMethod scalaz/Bifunctor.uFunctor$:(Lscalaz/Bifunctor;)Lscalaz/Functor;
       4: areturn

  public java.lang.Object rightMap(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #296                // InterfaceMethod scalaz/Bifunctor.rightMap$:(Lscalaz/Bifunctor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public java.lang.Object umap(java.lang.Object, scala.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #301                // InterfaceMethod scalaz/Bifunctor.umap$:(Lscalaz/Bifunctor;Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
       6: areturn

  public <G, H> scalaz.Bifunctor<?> embed(scalaz.Functor<G>, scalaz.Functor<H>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #306                // InterfaceMethod scalaz/Bifunctor.embed$:(Lscalaz/Bifunctor;Lscalaz/Functor;Lscalaz/Functor;)Lscalaz/Bifunctor;
       6: areturn

  public <G> scalaz.Bifunctor<?> embedLeft(scalaz.Functor<G>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #312                // InterfaceMethod scalaz/Bifunctor.embedLeft$:(Lscalaz/Bifunctor;Lscalaz/Functor;)Lscalaz/Bifunctor;
       5: areturn

  public <H> scalaz.Bifunctor<?> embedRight(scalaz.Functor<H>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #315                // InterfaceMethod scalaz/Bifunctor.embedRight$:(Lscalaz/Bifunctor;Lscalaz/Functor;)Lscalaz/Bifunctor;
       5: areturn

  public java.lang.Object widen(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #321                // InterfaceMethod scalaz/Bifunctor.widen$:(Lscalaz/Bifunctor;Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public scalaz.syntax.BitraverseSyntax<scalaz.LazyEither> bitraverseSyntax();
    Code:
       0: aload_0
       1: getfield      #325                // Field bitraverseSyntax:Lscalaz/syntax/BitraverseSyntax;
       4: areturn

  public void scalaz$Bitraverse$_setter_$bitraverseSyntax_$eq(scalaz.syntax.BitraverseSyntax<scalaz.LazyEither>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #325                // Field bitraverseSyntax:Lscalaz/syntax/BitraverseSyntax;
       5: return

  public scalaz.syntax.BifoldableSyntax<scalaz.LazyEither> bifoldableSyntax();
    Code:
       0: aload_0
       1: getfield      #333                // Field bifoldableSyntax:Lscalaz/syntax/BifoldableSyntax;
       4: areturn

  public void scalaz$Bifoldable$_setter_$bifoldableSyntax_$eq(scalaz.syntax.BifoldableSyntax<scalaz.LazyEither>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #333                // Field bifoldableSyntax:Lscalaz/syntax/BifoldableSyntax;
       5: return

  public scalaz.syntax.BifunctorSyntax<scalaz.LazyEither> bifunctorSyntax();
    Code:
       0: aload_0
       1: getfield      #340                // Field bifunctorSyntax:Lscalaz/syntax/BifunctorSyntax;
       4: areturn

  public void scalaz$Bifunctor$_setter_$bifunctorSyntax_$eq(scalaz.syntax.BifunctorSyntax<scalaz.LazyEither>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #340                // Field bifunctorSyntax:Lscalaz/syntax/BifunctorSyntax;
       5: return

  public <A, B, C, D> scalaz.LazyEither<C, D> bimap(scalaz.LazyEither<A, B>, scala.Function1<A, C>, scala.Function1<B, D>);
    Code:
       0: aload_1
       1: aload_3
       2: invokedynamic #369,  0            // InvokeDynamic #0:apply:(Lscala/Function1;)Lscala/Function1;
       7: invokevirtual #373                // Method scalaz/LazyEither.map:(Lscala/Function1;)Lscalaz/LazyEither;
      10: invokevirtual #377                // Method scalaz/LazyEither.left:()Lscalaz/LazyEither$LeftProjection;
      13: aload_2
      14: invokedynamic #382,  0            // InvokeDynamic #1:apply:(Lscala/Function1;)Lscala/Function1;
      19: astore        4
      21: dup
      22: ifnonnull     27
      25: aconst_null
      26: athrow
      27: invokevirtual #386                // Method scalaz/LazyEither$LeftProjection.e:()Lscalaz/LazyEither;
      30: aload         4
      32: invokedynamic #394,  0            // InvokeDynamic #2:apply:(Lscala/Function1;)Lscala/Function1;
      37: invokedynamic #401,  0            // InvokeDynamic #3:apply:()Lscala/Function1;
      42: invokevirtual #405                // Method scalaz/LazyEither.fold:(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
      45: checkcast     #27                 // class scalaz/LazyEither
      48: areturn

  public <G, A, B, C, D> G bitraverseImpl(scalaz.LazyEither<A, B>, scala.Function1<A, G>, scala.Function1<B, G>, scalaz.Applicative<G>);
    Code:
       0: aload_1
       1: aload         4
       3: aload_2
       4: invokedynamic #420,  0            // InvokeDynamic #4:apply:(Lscalaz/Applicative;Lscala/Function1;)Lscala/Function1;
       9: aload         4
      11: aload_3
      12: invokedynamic #425,  0            // InvokeDynamic #5:apply:(Lscalaz/Applicative;Lscala/Function1;)Lscala/Function1;
      17: invokevirtual #405                // Method scalaz/LazyEither.fold:(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
      20: areturn

  public java.lang.Object bitraverseImpl(java.lang.Object, scala.Function1, scala.Function1, scalaz.Applicative);
    Code:
       0: aload_1
       1: checkcast     #27                 // class scalaz/LazyEither
       4: aload         4
       6: aload_2
       7: invokedynamic #420,  0            // InvokeDynamic #4:apply:(Lscalaz/Applicative;Lscala/Function1;)Lscala/Function1;
      12: aload         4
      14: aload_3
      15: invokedynamic #425,  0            // InvokeDynamic #5:apply:(Lscalaz/Applicative;Lscala/Function1;)Lscala/Function1;
      20: invokevirtual #405                // Method scalaz/LazyEither.fold:(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
      23: areturn

  public java.lang.Object bimap(java.lang.Object, scala.Function1, scala.Function1);
    Code:
       0: aload_1
       1: checkcast     #27                 // class scalaz/LazyEither
       4: aload_3
       5: invokedynamic #369,  0            // InvokeDynamic #0:apply:(Lscala/Function1;)Lscala/Function1;
      10: invokevirtual #373                // Method scalaz/LazyEither.map:(Lscala/Function1;)Lscalaz/LazyEither;
      13: invokevirtual #377                // Method scalaz/LazyEither.left:()Lscalaz/LazyEither$LeftProjection;
      16: aload_2
      17: invokedynamic #382,  0            // InvokeDynamic #1:apply:(Lscala/Function1;)Lscala/Function1;
      22: astore        4
      24: dup
      25: ifnonnull     30
      28: aconst_null
      29: athrow
      30: invokevirtual #386                // Method scalaz/LazyEither$LeftProjection.e:()Lscalaz/LazyEither;
      33: aload         4
      35: invokedynamic #394,  0            // InvokeDynamic #2:apply:(Lscala/Function1;)Lscala/Function1;
      40: invokedynamic #401,  0            // InvokeDynamic #3:apply:()Lscala/Function1;
      45: invokevirtual #405                // Method scalaz/LazyEither.fold:(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
      48: checkcast     #27                 // class scalaz/LazyEither
      51: areturn

  public static final java.lang.Object $anonfun$bimap$5(scala.Function1, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #434,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       7: invokeinterface #436,  2          // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      12: areturn

  public static final java.lang.Object $anonfun$bimap$6(scala.Function1, scala.Function0);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #434,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       7: invokeinterface #436,  2          // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      12: areturn

  public static final java.lang.Object $anonfun$bitraverseImpl$3(java.lang.Object);
    Code:
       0: aload_0
       1: areturn

  public static final scalaz.LazyEither $anonfun$bitraverseImpl$2(java.lang.Object);
    Code:
       0: getstatic     #448                // Field scalaz/LazyEither$.MODULE$:Lscalaz/LazyEither$;
       3: invokevirtual #452                // Method scalaz/LazyEither$.lazyLeft:()Lscalaz/LazyEither$LazyLeftConstruct;
       6: aload_0
       7: invokedynamic #460,  0            // InvokeDynamic #6:apply:(Ljava/lang/Object;)Lscala/Function0;
      12: invokevirtual #462                // Method scalaz/LazyEither$LazyLeftConstruct.apply:(Lscala/Function0;)Lscalaz/LazyEither;
      15: areturn

  public static final java.lang.Object $anonfun$bitraverseImpl$1(scalaz.Applicative, scala.Function1, scala.Function0);
    Code:
       0: getstatic     #470                // Field scalaz/Applicative$.MODULE$:Lscalaz/Applicative$;
       3: ifnonnull     8
       6: aconst_null
       7: athrow
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokeinterface #434,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      16: invokeinterface #436,  2          // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      21: invokedynamic #475,  0            // InvokeDynamic #7:apply:()Lscala/Function1;
      26: invokeinterface #479,  3          // InterfaceMethod scalaz/Applicative.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      31: areturn

  public static final java.lang.Object $anonfun$bitraverseImpl$6(java.lang.Object);
    Code:
       0: aload_0
       1: areturn

  public static final scalaz.LazyEither $anonfun$bitraverseImpl$5(java.lang.Object);
    Code:
       0: getstatic     #448                // Field scalaz/LazyEither$.MODULE$:Lscalaz/LazyEither$;
       3: invokevirtual #487                // Method scalaz/LazyEither$.lazyRight:()Lscalaz/LazyEither$LazyRightConstruct;
       6: aload_0
       7: invokedynamic #491,  0            // InvokeDynamic #8:apply:(Ljava/lang/Object;)Lscala/Function0;
      12: invokevirtual #492                // Method scalaz/LazyEither$LazyRightConstruct.apply:(Lscala/Function0;)Lscalaz/LazyEither;
      15: areturn

  public static final java.lang.Object $anonfun$bitraverseImpl$4(scalaz.Applicative, scala.Function1, scala.Function0);
    Code:
       0: getstatic     #470                // Field scalaz/Applicative$.MODULE$:Lscalaz/Applicative$;
       3: ifnonnull     8
       6: aconst_null
       7: athrow
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokeinterface #434,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
      16: invokeinterface #436,  2          // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      21: invokedynamic #497,  0            // InvokeDynamic #9:apply:()Lscala/Function1;
      26: invokeinterface #479,  3          // InterfaceMethod scalaz/Applicative.map:(Ljava/lang/Object;Lscala/Function1;)Ljava/lang/Object;
      31: areturn

  public scalaz.LazyEitherInstances$$anon$5(scalaz.LazyEitherInstances);
    Code:
       0: aload_0
       1: invokespecial #503                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #507                // InterfaceMethod scalaz/Bifunctor.$init$:(Lscalaz/Bifunctor;)V
       8: aload_0
       9: invokestatic  #510                // InterfaceMethod scalaz/Bifoldable.$init$:(Lscalaz/Bifoldable;)V
      12: aload_0
      13: invokestatic  #513                // InterfaceMethod scalaz/Bitraverse.$init$:(Lscalaz/Bitraverse;)V
      16: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #526,  0            // InvokeDynamic #10:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
