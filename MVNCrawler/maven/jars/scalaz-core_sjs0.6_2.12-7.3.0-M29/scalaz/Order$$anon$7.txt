Compiled from "Order.scala"
public final class scalaz.Order$$anon$7 implements scalaz.Order<A> {
  private final scalaz.syntax.OrderSyntax<A> orderSyntax;

  private final scalaz.syntax.EqualSyntax<A> equalSyntax;

  private final scala.math.Ordering O$1;

  public scalaz.Ordering apply(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #40                 // InterfaceMethod scalaz/Order.apply$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
       6: areturn

  public boolean equal(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #50                 // InterfaceMethod scalaz/Order.equal$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThan(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #54                 // InterfaceMethod scalaz/Order.lessThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean lessThanOrEqual(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #58                 // InterfaceMethod scalaz/Order.lessThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThan(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #62                 // InterfaceMethod scalaz/Order.greaterThan$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean greaterThanOrEqual(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #66                 // InterfaceMethod scalaz/Order.greaterThanOrEqual$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public A max(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #73                 // InterfaceMethod scalaz/Order.max$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public A min(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #77                 // InterfaceMethod scalaz/Order.min$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public scala.Tuple2<A, A> sort(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #84                 // InterfaceMethod scalaz/Order.sort$:(Lscalaz/Order;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       6: areturn

  public <B> scalaz.Order<B> contramap(scala.Function1<B, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #92                 // InterfaceMethod scalaz/Order.contramap$:(Lscalaz/Order;Lscala/Function1;)Lscalaz/Order;
       5: areturn

  public scala.math.Ordering<A> toScalaOrdering();
    Code:
       0: aload_0
       1: invokestatic  #100                // InterfaceMethod scalaz/Order.toScalaOrdering$:(Lscalaz/Order;)Lscala/math/Ordering;
       4: areturn

  public scalaz.Order<A> reverseOrder();
    Code:
       0: aload_0
       1: invokestatic  #107                // InterfaceMethod scalaz/Order.reverseOrder$:(Lscalaz/Order;)Lscalaz/Order;
       4: areturn

  public scalaz.Order<A>.OrderLaw orderLaw();
    Code:
       0: aload_0
       1: invokestatic  #114                // InterfaceMethod scalaz/Order.orderLaw$:(Lscalaz/Order;)Lscalaz/Order$OrderLaw;
       4: areturn

  public boolean equalIsNatural();
    Code:
       0: aload_0
       1: invokestatic  #120                // InterfaceMethod scalaz/Equal.equalIsNatural$:(Lscalaz/Equal;)Z
       4: ireturn

  public scalaz.Equal<A>.EqualLaw equalLaw();
    Code:
       0: aload_0
       1: invokestatic  #127                // InterfaceMethod scalaz/Equal.equalLaw$:(Lscalaz/Equal;)Lscalaz/Equal$EqualLaw;
       4: areturn

  public scalaz.syntax.OrderSyntax<A> orderSyntax();
    Code:
       0: aload_0
       1: getfield      #131                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       4: areturn

  public void scalaz$Order$_setter_$orderSyntax_$eq(scalaz.syntax.OrderSyntax<A>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #131                // Field orderSyntax:Lscalaz/syntax/OrderSyntax;
       5: return

  public scalaz.syntax.EqualSyntax<A> equalSyntax();
    Code:
       0: aload_0
       1: getfield      #139                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       4: areturn

  public void scalaz$Equal$_setter_$equalSyntax_$eq(scalaz.syntax.EqualSyntax<A>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #139                // Field equalSyntax:Lscalaz/syntax/EqualSyntax;
       5: return

  public scalaz.Ordering order(A, A);
    Code:
       0: getstatic     #151                // Field scalaz/std/anyVal$.MODULE$:Lscalaz/std/anyVal$;
       3: invokevirtual #155                // Method scalaz/std/anyVal$.intInstance:()Lscalaz/Monoid;
       6: checkcast     #7                  // class scalaz/Order
       9: aload_0
      10: getfield      #157                // Field O$1:Lscala/math/Ordering;
      13: aload_1
      14: aload_2
      15: invokeinterface #163,  3          // InterfaceMethod scala/math/Ordering.compare:(Ljava/lang/Object;Ljava/lang/Object;)I
      20: invokestatic  #169                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      23: iconst_0
      24: invokestatic  #169                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      27: invokeinterface #171,  3          // InterfaceMethod scalaz/Order.order:(Ljava/lang/Object;Ljava/lang/Object;)Lscalaz/Ordering;
      32: areturn

  public scalaz.Equal contramap(scala.Function1);
    Code:
       0: new           #20                 // class scalaz/Order$$anon$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #176                // Method scalaz/Order$$anon$1."<init>":(Lscalaz/Order;Lscala/Function1;)V
       9: areturn

  public scalaz.Order$$anon$7(scala.math.Ordering);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #157                // Field O$1:Lscala/math/Ordering;
       5: aload_0
       6: invokespecial #180                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #184                // InterfaceMethod scalaz/Equal.$init$:(Lscalaz/Equal;)V
      13: aload_0
      14: invokestatic  #187                // InterfaceMethod scalaz/Order.$init$:(Lscalaz/Order;)V
      17: return
}
