Compiled from "Foldable.scala"
public interface scalaz.Foldable$FoldableLaw {
  public static boolean leftFMConsistent$(scalaz.Foldable$FoldableLaw, java.lang.Object, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #22                 // InterfaceMethod leftFMConsistent:(Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public default <A> boolean leftFMConsistent(F, scalaz.Equal<A>);
    Code:
       0: getstatic     #32                 // Field scalaz/Equal$.MODULE$:Lscalaz/Equal$;
       3: getstatic     #37                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       6: aload_2
       7: invokevirtual #41                 // Method scalaz/std/vector$.vectorEqual:(Lscalaz/Equal;)Lscalaz/Equal;
      10: astore_3
      11: ifnonnull     16
      14: aconst_null
      15: athrow
      16: aload_3
      17: aload_0
      18: invokeinterface #45,  1           // InterfaceMethod scalaz$Foldable$FoldableLaw$$$outer:()Lscalaz/Foldable;
      23: aload_1
      24: invokedynamic #68,  0             // InvokeDynamic #0:apply:()Lscala/Function1;
      29: getstatic     #37                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
      32: invokevirtual #72                 // Method scalaz/std/vector$.vectorMonoid:()Lscalaz/Monoid;
      35: invokeinterface #76,  4           // InterfaceMethod scalaz/Foldable.foldMap:(Ljava/lang/Object;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
      40: aload_0
      41: invokeinterface #45,  1           // InterfaceMethod scalaz$Foldable$FoldableLaw$$$outer:()Lscalaz/Foldable;
      46: aload_1
      47: getstatic     #81                 // Field scala/package$.MODULE$:Lscala/package$;
      50: invokevirtual #85                 // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
      53: invokevirtual #91                 // Method scala/collection/immutable/Vector$.empty:()Lscala/collection/immutable/Vector;
      56: invokedynamic #102,  0            // InvokeDynamic #1:apply:()Lscala/Function2;
      61: invokeinterface #106,  4          // InterfaceMethod scalaz/Foldable.foldLeft:(Ljava/lang/Object;Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
      66: invokeinterface #112,  3          // InterfaceMethod scalaz/Equal.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
      71: ireturn

  public static boolean rightFMConsistent$(scalaz.Foldable$FoldableLaw, java.lang.Object, scalaz.Equal);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #118                // InterfaceMethod rightFMConsistent:(Ljava/lang/Object;Lscalaz/Equal;)Z
       6: ireturn

  public default <A> boolean rightFMConsistent(F, scalaz.Equal<A>);
    Code:
       0: getstatic     #32                 // Field scalaz/Equal$.MODULE$:Lscalaz/Equal$;
       3: getstatic     #37                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
       6: aload_2
       7: invokevirtual #41                 // Method scalaz/std/vector$.vectorEqual:(Lscalaz/Equal;)Lscalaz/Equal;
      10: astore_3
      11: ifnonnull     16
      14: aconst_null
      15: athrow
      16: aload_3
      17: aload_0
      18: invokeinterface #45,  1           // InterfaceMethod scalaz$Foldable$FoldableLaw$$$outer:()Lscalaz/Foldable;
      23: aload_1
      24: invokedynamic #123,  0            // InvokeDynamic #2:apply:()Lscala/Function1;
      29: getstatic     #37                 // Field scalaz/std/vector$.MODULE$:Lscalaz/std/vector$;
      32: invokevirtual #72                 // Method scalaz/std/vector$.vectorMonoid:()Lscalaz/Monoid;
      35: invokeinterface #76,  4           // InterfaceMethod scalaz/Foldable.foldMap:(Ljava/lang/Object;Lscala/Function1;Lscalaz/Monoid;)Ljava/lang/Object;
      40: aload_0
      41: invokeinterface #45,  1           // InterfaceMethod scalaz$Foldable$FoldableLaw$$$outer:()Lscalaz/Foldable;
      46: aload_1
      47: invokedynamic #133,  0            // InvokeDynamic #3:apply:()Lscala/Function0;
      52: invokedynamic #140,  0            // InvokeDynamic #4:apply:()Lscala/Function2;
      57: invokeinterface #144,  4          // InterfaceMethod scalaz/Foldable.foldRight:(Ljava/lang/Object;Lscala/Function0;Lscala/Function2;)Ljava/lang/Object;
      62: invokeinterface #112,  3          // InterfaceMethod scalaz/Equal.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
      67: ireturn

  public abstract scalaz.Foldable scalaz$Foldable$FoldableLaw$$$outer();

  public static scala.collection.immutable.Vector $anonfun$leftFMConsistent$1(java.lang.Object);
    Code:
       0: getstatic     #81                 // Field scala/package$.MODULE$:Lscala/package$;
       3: invokevirtual #85                 // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
       6: getstatic     #150                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       9: iconst_1
      10: anewarray     #4                  // class java/lang/Object
      13: dup
      14: iconst_0
      15: aload_0
      16: aastore
      17: invokevirtual #154                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      20: invokevirtual #157                // Method scala/collection/immutable/Vector$.apply:(Lscala/collection/Seq;)Lscala/collection/GenTraversable;
      23: checkcast     #159                // class scala/collection/immutable/Vector
      26: areturn

  public static scala.collection.immutable.Vector $anonfun$leftFMConsistent$2(scala.collection.immutable.Vector, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #164                // Field scala/collection/immutable/Vector$.MODULE$:Lscala/collection/immutable/Vector$;
       5: invokevirtual #168                // Method scala/collection/immutable/Vector$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
       8: invokevirtual #172                // Method scala/collection/immutable/Vector.$colon$plus:(Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      11: checkcast     #159                // class scala/collection/immutable/Vector
      14: areturn

  public static scala.collection.immutable.Vector $anonfun$rightFMConsistent$1(java.lang.Object);
    Code:
       0: getstatic     #81                 // Field scala/package$.MODULE$:Lscala/package$;
       3: invokevirtual #85                 // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
       6: getstatic     #150                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       9: iconst_1
      10: anewarray     #4                  // class java/lang/Object
      13: dup
      14: iconst_0
      15: aload_0
      16: aastore
      17: invokevirtual #154                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      20: invokevirtual #157                // Method scala/collection/immutable/Vector$.apply:(Lscala/collection/Seq;)Lscala/collection/GenTraversable;
      23: checkcast     #159                // class scala/collection/immutable/Vector
      26: areturn

  public static scala.collection.immutable.Vector $anonfun$rightFMConsistent$2();
    Code:
       0: getstatic     #81                 // Field scala/package$.MODULE$:Lscala/package$;
       3: invokevirtual #85                 // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
       6: invokevirtual #91                 // Method scala/collection/immutable/Vector$.empty:()Lscala/collection/immutable/Vector;
       9: areturn

  public static scala.collection.immutable.Vector $anonfun$rightFMConsistent$3(java.lang.Object, scala.Function0);
    Code:
       0: aload_1
       1: invokeinterface #180,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       6: checkcast     #159                // class scala/collection/immutable/Vector
       9: aload_0
      10: getstatic     #164                // Field scala/collection/immutable/Vector$.MODULE$:Lscala/collection/immutable/Vector$;
      13: invokevirtual #168                // Method scala/collection/immutable/Vector$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      16: invokevirtual #183                // Method scala/collection/immutable/Vector.$plus$colon:(Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      19: checkcast     #159                // class scala/collection/immutable/Vector
      22: areturn

  public static void $init$(scalaz.Foldable<F>.FoldableLaw);
    Code:
       0: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #199,  0            // InvokeDynamic #5:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
