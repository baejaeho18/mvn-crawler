Compiled from "CustomConcurrentHashMap.java"
class com.google.common.cache.CustomConcurrentHashMap$Segment<K, V> extends java.util.concurrent.locks.ReentrantLock {
  final com.google.common.cache.CustomConcurrentHashMap<K, V> map;

  volatile int count;

  int modCount;

  int threshold;

  volatile java.util.concurrent.atomic.AtomicReferenceArray<com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>> table;

  final int maxSegmentSize;

  final java.lang.ref.ReferenceQueue<K> keyReferenceQueue;

  final java.lang.ref.ReferenceQueue<V> valueReferenceQueue;

  final java.util.Queue<com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>> recencyQueue;

  final java.util.concurrent.atomic.AtomicInteger readCount;

  final java.util.Queue<com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>> evictionQueue;

  final java.util.Queue<com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>> expirationQueue;

  final com.google.common.cache.AbstractCache$StatsCounter statsCounter;

  com.google.common.cache.CustomConcurrentHashMap$Segment(com.google.common.cache.CustomConcurrentHashMap<K, V>, int, int, com.google.common.cache.AbstractCache$StatsCounter);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      12: putfield      #4                  // Field readCount:Ljava/util/concurrent/atomic/AtomicInteger;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      20: aload_0
      21: iload_3
      22: putfield      #6                  // Field maxSegmentSize:I
      25: aload_0
      26: aload         4
      28: putfield      #7                  // Field statsCounter:Lcom/google/common/cache/AbstractCache$StatsCounter;
      31: aload_0
      32: aload_0
      33: iload_2
      34: invokevirtual #8                  // Method newEntryArray:(I)Ljava/util/concurrent/atomic/AtomicReferenceArray;
      37: invokevirtual #9                  // Method initTable:(Ljava/util/concurrent/atomic/AtomicReferenceArray;)V
      40: aload_0
      41: aload_1
      42: invokevirtual #10                 // Method com/google/common/cache/CustomConcurrentHashMap.usesKeyReferences:()Z
      45: ifeq          58
      48: new           #11                 // class java/lang/ref/ReferenceQueue
      51: dup
      52: invokespecial #12                 // Method java/lang/ref/ReferenceQueue."<init>":()V
      55: goto          59
      58: aconst_null
      59: putfield      #13                 // Field keyReferenceQueue:Ljava/lang/ref/ReferenceQueue;
      62: aload_0
      63: aload_1
      64: invokevirtual #14                 // Method com/google/common/cache/CustomConcurrentHashMap.usesValueReferences:()Z
      67: ifeq          80
      70: new           #11                 // class java/lang/ref/ReferenceQueue
      73: dup
      74: invokespecial #12                 // Method java/lang/ref/ReferenceQueue."<init>":()V
      77: goto          81
      80: aconst_null
      81: putfield      #15                 // Field valueReferenceQueue:Ljava/lang/ref/ReferenceQueue;
      84: aload_0
      85: aload_1
      86: invokevirtual #16                 // Method com/google/common/cache/CustomConcurrentHashMap.evictsBySize:()Z
      89: ifne          99
      92: aload_1
      93: invokevirtual #17                 // Method com/google/common/cache/CustomConcurrentHashMap.expiresAfterAccess:()Z
      96: ifeq          109
      99: new           #18                 // class java/util/concurrent/ConcurrentLinkedQueue
     102: dup
     103: invokespecial #19                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
     106: goto          112
     109: invokestatic  #20                 // Method com/google/common/cache/CustomConcurrentHashMap.discardingQueue:()Ljava/util/Queue;
     112: putfield      #21                 // Field recencyQueue:Ljava/util/Queue;
     115: aload_0
     116: aload_1
     117: invokevirtual #16                 // Method com/google/common/cache/CustomConcurrentHashMap.evictsBySize:()Z
     120: ifeq          133
     123: new           #22                 // class com/google/common/cache/CustomConcurrentHashMap$EvictionQueue
     126: dup
     127: invokespecial #23                 // Method com/google/common/cache/CustomConcurrentHashMap$EvictionQueue."<init>":()V
     130: goto          136
     133: invokestatic  #20                 // Method com/google/common/cache/CustomConcurrentHashMap.discardingQueue:()Ljava/util/Queue;
     136: putfield      #24                 // Field evictionQueue:Ljava/util/Queue;
     139: aload_0
     140: aload_1
     141: invokevirtual #25                 // Method com/google/common/cache/CustomConcurrentHashMap.expires:()Z
     144: ifeq          157
     147: new           #26                 // class com/google/common/cache/CustomConcurrentHashMap$ExpirationQueue
     150: dup
     151: invokespecial #27                 // Method com/google/common/cache/CustomConcurrentHashMap$ExpirationQueue."<init>":()V
     154: goto          160
     157: invokestatic  #20                 // Method com/google/common/cache/CustomConcurrentHashMap.discardingQueue:()Ljava/util/Queue;
     160: putfield      #28                 // Field expirationQueue:Ljava/util/Queue;
     163: return

  java.util.concurrent.atomic.AtomicReferenceArray<com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>> newEntryArray(int);
    Code:
       0: new           #29                 // class java/util/concurrent/atomic/AtomicReferenceArray
       3: dup
       4: iload_1
       5: invokespecial #30                 // Method java/util/concurrent/atomic/AtomicReferenceArray."<init>":(I)V
       8: areturn

  void initTable(java.util.concurrent.atomic.AtomicReferenceArray<com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
       5: iconst_3
       6: imul
       7: iconst_4
       8: idiv
       9: putfield      #32                 // Field threshold:I
      12: aload_0
      13: getfield      #32                 // Field threshold:I
      16: aload_0
      17: getfield      #6                  // Field maxSegmentSize:I
      20: if_icmpne     33
      23: aload_0
      24: dup
      25: getfield      #32                 // Field threshold:I
      28: iconst_1
      29: iadd
      30: putfield      #32                 // Field threshold:I
      33: aload_0
      34: aload_1
      35: putfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      38: return

  com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V> newEntry(K, int, com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
       4: getfield      #34                 // Field com/google/common/cache/CustomConcurrentHashMap.entryFactory:Lcom/google/common/cache/CustomConcurrentHashMap$EntryFactory;
       7: aload_0
       8: aload_1
       9: iload_2
      10: aload_3
      11: invokevirtual #35                 // Method com/google/common/cache/CustomConcurrentHashMap$EntryFactory.newEntry:(Lcom/google/common/cache/CustomConcurrentHashMap$Segment;Ljava/lang/Object;ILcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      14: areturn

  com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V> copyEntry(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>, com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_1
       1: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
       6: astore_3
       7: aload_0
       8: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      11: getfield      #34                 // Field com/google/common/cache/CustomConcurrentHashMap.entryFactory:Lcom/google/common/cache/CustomConcurrentHashMap$EntryFactory;
      14: aload_0
      15: aload_1
      16: aload_2
      17: invokevirtual #37                 // Method com/google/common/cache/CustomConcurrentHashMap$EntryFactory.copyEntry:(Lcom/google/common/cache/CustomConcurrentHashMap$Segment;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      20: astore        4
      22: aload         4
      24: aload_3
      25: aload_0
      26: getfield      #15                 // Field valueReferenceQueue:Ljava/lang/ref/ReferenceQueue;
      29: aload         4
      31: invokeinterface #38,  3           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.copyFor:(Ljava/lang/ref/ReferenceQueue;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      36: invokeinterface #39,  2           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.setValueReference:(Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;)V
      41: aload         4
      43: areturn

  void setValue(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>, V);
    Code:
       0: aload_1
       1: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
       6: astore_3
       7: aload_0
       8: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      11: getfield      #40                 // Field com/google/common/cache/CustomConcurrentHashMap.valueStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
      14: aload_0
      15: aload_1
      16: aload_2
      17: invokevirtual #41                 // Method com/google/common/cache/CustomConcurrentHashMap$Strength.referenceValue:(Lcom/google/common/cache/CustomConcurrentHashMap$Segment;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Ljava/lang/Object;)Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      20: astore        4
      22: aload_1
      23: aload         4
      25: invokeinterface #39,  2           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.setValueReference:(Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;)V
      30: aload_0
      31: aload_1
      32: invokevirtual #42                 // Method recordWrite:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
      35: aload_3
      36: aload_2
      37: invokeinterface #43,  2           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.notifyNewValue:(Ljava/lang/Object;)V
      42: return

  V getOrCompute(K, int, com.google.common.cache.CacheLoader<? super K, V>) throws java.util.concurrent.ExecutionException;
    Code:
       0: aconst_null
       1: astore        4
       3: aload_0
       4: getfield      #44                 // Field count:I
       7: ifeq          62
      10: aload_0
      11: aload_1
      12: iload_2
      13: invokevirtual #45                 // Method getEntry:(Ljava/lang/Object;I)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      16: astore        4
      18: aload         4
      20: ifnull        62
      23: aload_0
      24: aload         4
      26: invokevirtual #46                 // Method getLiveValue:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Ljava/lang/Object;
      29: astore        5
      31: aload         5
      33: ifnull        62
      36: aload_0
      37: aload         4
      39: invokevirtual #47                 // Method recordRead:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
      42: aload_0
      43: getfield      #7                  // Field statsCounter:Lcom/google/common/cache/AbstractCache$StatsCounter;
      46: invokeinterface #48,  1           // InterfaceMethod com/google/common/cache/AbstractCache$StatsCounter.recordHit:()V
      51: aload         5
      53: astore        6
      55: aload_0
      56: invokevirtual #49                 // Method postReadCleanup:()V
      59: aload         6
      61: areturn
      62: aload         4
      64: ifnull        82
      67: aload         4
      69: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      74: invokeinterface #50,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.isComputingReference:()Z
      79: ifne          466
      82: iconst_1
      83: istore        5
      85: aconst_null
      86: astore        6
      88: aload_0
      89: invokevirtual #51                 // Method lock:()V
      92: aload_0
      93: invokevirtual #52                 // Method preWriteCleanup:()V
      96: aload_0
      97: getfield      #44                 // Field count:I
     100: iconst_1
     101: isub
     102: istore        7
     104: aload_0
     105: getfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
     108: astore        8
     110: iload_2
     111: aload         8
     113: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
     116: iconst_1
     117: isub
     118: iand
     119: istore        9
     121: aload         8
     123: iload         9
     125: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
     128: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
     131: astore        10
     133: aload         10
     135: astore        4
     137: aload         4
     139: ifnull        358
     142: aload         4
     144: invokeinterface #55,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
     149: astore        11
     151: aload         4
     153: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
     158: iload_2
     159: if_icmpne     346
     162: aload         11
     164: ifnull        346
     167: aload_0
     168: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
     171: getfield      #57                 // Field com/google/common/cache/CustomConcurrentHashMap.keyEquivalence:Lcom/google/common/base/Equivalence;
     174: aload_1
     175: aload         11
     177: invokevirtual #58                 // Method com/google/common/base/Equivalence.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z
     180: ifeq          346
     183: aload         4
     185: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
     190: astore        12
     192: aload         12
     194: invokeinterface #50,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.isComputingReference:()Z
     199: ifeq          208
     202: iconst_0
     203: istore        5
     205: goto          358
     208: aload         4
     210: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
     215: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
     220: astore        13
     222: aload         13
     224: ifnonnull     242
     227: aload_0
     228: aload         11
     230: iload_2
     231: aload         13
     233: getstatic     #60                 // Field com/google/common/cache/RemovalCause.COLLECTED:Lcom/google/common/cache/RemovalCause;
     236: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
     239: goto          313
     242: aload_0
     243: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
     246: invokevirtual #25                 // Method com/google/common/cache/CustomConcurrentHashMap.expires:()Z
     249: ifeq          279
     252: aload_0
     253: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
     256: aload         4
     258: invokevirtual #62                 // Method com/google/common/cache/CustomConcurrentHashMap.isExpired:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Z
     261: ifeq          279
     264: aload_0
     265: aload         11
     267: iload_2
     268: aload         13
     270: getstatic     #63                 // Field com/google/common/cache/RemovalCause.EXPIRED:Lcom/google/common/cache/RemovalCause;
     273: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
     276: goto          313
     279: aload_0
     280: aload         4
     282: invokevirtual #64                 // Method recordLockedRead:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
     285: aload_0
     286: getfield      #7                  // Field statsCounter:Lcom/google/common/cache/AbstractCache$StatsCounter;
     289: invokeinterface #48,  1           // InterfaceMethod com/google/common/cache/AbstractCache$StatsCounter.recordHit:()V
     294: aload         13
     296: astore        14
     298: aload_0
     299: invokevirtual #65                 // Method unlock:()V
     302: aload_0
     303: invokevirtual #66                 // Method postWriteCleanup:()V
     306: aload_0
     307: invokevirtual #49                 // Method postReadCleanup:()V
     310: aload         14
     312: areturn
     313: aload_0
     314: getfield      #24                 // Field evictionQueue:Ljava/util/Queue;
     317: aload         4
     319: invokeinterface #67,  2           // InterfaceMethod java/util/Queue.remove:(Ljava/lang/Object;)Z
     324: pop
     325: aload_0
     326: getfield      #28                 // Field expirationQueue:Ljava/util/Queue;
     329: aload         4
     331: invokeinterface #67,  2           // InterfaceMethod java/util/Queue.remove:(Ljava/lang/Object;)Z
     336: pop
     337: aload_0
     338: iload         7
     340: putfield      #44                 // Field count:I
     343: goto          358
     346: aload         4
     348: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     353: astore        4
     355: goto          137
     358: iload         5
     360: ifeq          418
     363: new           #69                 // class com/google/common/cache/CustomConcurrentHashMap$ComputingValueReference
     366: dup
     367: aload_3
     368: invokespecial #70                 // Method com/google/common/cache/CustomConcurrentHashMap$ComputingValueReference."<init>":(Lcom/google/common/cache/CacheLoader;)V
     371: astore        6
     373: aload         4
     375: ifnonnull     409
     378: aload_0
     379: aload_1
     380: iload_2
     381: aload         10
     383: invokevirtual #71                 // Method newEntry:(Ljava/lang/Object;ILcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     386: astore        4
     388: aload         4
     390: aload         6
     392: invokeinterface #39,  2           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.setValueReference:(Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;)V
     397: aload         8
     399: iload         9
     401: aload         4
     403: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicReferenceArray.set:(ILjava/lang/Object;)V
     406: goto          418
     409: aload         4
     411: aload         6
     413: invokeinterface #39,  2           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.setValueReference:(Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;)V
     418: aload_0
     419: invokevirtual #65                 // Method unlock:()V
     422: aload_0
     423: invokevirtual #66                 // Method postWriteCleanup:()V
     426: goto          442
     429: astore        15
     431: aload_0
     432: invokevirtual #65                 // Method unlock:()V
     435: aload_0
     436: invokevirtual #66                 // Method postWriteCleanup:()V
     439: aload         15
     441: athrow
     442: iload         5
     444: ifeq          466
     447: aload_0
     448: aload_1
     449: iload_2
     450: aload         4
     452: aload         6
     454: invokevirtual #73                 // Method compute:(Ljava/lang/Object;ILcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/CustomConcurrentHashMap$ComputingValueReference;)Ljava/lang/Object;
     457: astore        7
     459: aload_0
     460: invokevirtual #49                 // Method postReadCleanup:()V
     463: aload         7
     465: areturn
     466: aload         4
     468: invokestatic  #74                 // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
     471: ifne          478
     474: iconst_1
     475: goto          479
     478: iconst_0
     479: ldc           #75                 // String Recursive computation
     481: invokestatic  #76                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
     484: aload         4
     486: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
     491: invokeinterface #77,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.waitForValue:()Ljava/lang/Object;
     496: astore        5
     498: aload         5
     500: ifnull        0
     503: aload_0
     504: aload         4
     506: invokevirtual #47                 // Method recordRead:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
     509: aload_0
     510: getfield      #7                  // Field statsCounter:Lcom/google/common/cache/AbstractCache$StatsCounter;
     513: invokeinterface #78,  1           // InterfaceMethod com/google/common/cache/AbstractCache$StatsCounter.recordConcurrentMiss:()V
     518: aload         5
     520: astore        6
     522: aload_0
     523: invokevirtual #49                 // Method postReadCleanup:()V
     526: aload         6
     528: areturn
     529: astore        16
     531: aload_0
     532: invokevirtual #49                 // Method postReadCleanup:()V
     535: aload         16
     537: athrow
    Exception table:
       from    to  target type
          92   298   429   any
         313   418   429   any
         429   431   429   any
           0    55   529   any
          62   306   529   any
         313   459   529   any
         466   522   529   any
         529   531   529   any

  V compute(K, int, com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>, com.google.common.cache.CustomConcurrentHashMap$ComputingValueReference<K, V>) throws java.util.concurrent.ExecutionException;
    Code:
       0: aconst_null
       1: astore        5
       3: invokestatic  #79                 // Method java/lang/System.nanoTime:()J
       6: lstore        6
       8: aload_3
       9: dup
      10: astore        8
      12: monitorenter
      13: aload         4
      15: aload_1
      16: iload_2
      17: invokevirtual #80                 // Method com/google/common/cache/CustomConcurrentHashMap$ComputingValueReference.compute:(Ljava/lang/Object;I)Ljava/lang/Object;
      20: astore        5
      22: aload         8
      24: monitorexit
      25: goto          36
      28: astore        9
      30: aload         8
      32: monitorexit
      33: aload         9
      35: athrow
      36: invokestatic  #79                 // Method java/lang/System.nanoTime:()J
      39: lstore        8
      41: aload_0
      42: getfield      #7                  // Field statsCounter:Lcom/google/common/cache/AbstractCache$StatsCounter;
      45: lload         8
      47: lload         6
      49: lsub
      50: invokeinterface #81,  3           // InterfaceMethod com/google/common/cache/AbstractCache$StatsCounter.recordLoadSuccess:(J)V
      55: aload_0
      56: aload_1
      57: iload_2
      58: aload         5
      60: iconst_1
      61: invokevirtual #82                 // Method put:(Ljava/lang/Object;ILjava/lang/Object;Z)Ljava/lang/Object;
      64: astore        10
      66: aload         10
      68: ifnull        82
      71: aload_0
      72: aload_1
      73: iload_2
      74: aload         5
      76: getstatic     #83                 // Field com/google/common/cache/RemovalCause.REPLACED:Lcom/google/common/cache/RemovalCause;
      79: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
      82: aload         5
      84: astore        11
      86: aload         5
      88: ifnonnull     119
      91: invokestatic  #79                 // Method java/lang/System.nanoTime:()J
      94: lstore        12
      96: aload_0
      97: getfield      #7                  // Field statsCounter:Lcom/google/common/cache/AbstractCache$StatsCounter;
     100: lload         12
     102: lload         6
     104: lsub
     105: invokeinterface #84,  3           // InterfaceMethod com/google/common/cache/AbstractCache$StatsCounter.recordLoadException:(J)V
     110: aload_0
     111: aload_1
     112: iload_2
     113: aload         4
     115: invokevirtual #85                 // Method clearValue:(Ljava/lang/Object;ILcom/google/common/cache/CustomConcurrentHashMap$ValueReference;)Z
     118: pop
     119: aload         11
     121: areturn
     122: astore        14
     124: aload         5
     126: ifnonnull     157
     129: invokestatic  #79                 // Method java/lang/System.nanoTime:()J
     132: lstore        15
     134: aload_0
     135: getfield      #7                  // Field statsCounter:Lcom/google/common/cache/AbstractCache$StatsCounter;
     138: lload         15
     140: lload         6
     142: lsub
     143: invokeinterface #84,  3           // InterfaceMethod com/google/common/cache/AbstractCache$StatsCounter.recordLoadException:(J)V
     148: aload_0
     149: aload_1
     150: iload_2
     151: aload         4
     153: invokevirtual #85                 // Method clearValue:(Ljava/lang/Object;ILcom/google/common/cache/CustomConcurrentHashMap$ValueReference;)Z
     156: pop
     157: aload         14
     159: athrow
    Exception table:
       from    to  target type
          13    25    28   any
          28    33    28   any
           8    86   122   any
         122   124   122   any

  void tryDrainReferenceQueues();
    Code:
       0: aload_0
       1: invokevirtual #86                 // Method tryLock:()Z
       4: ifeq          25
       7: aload_0
       8: invokevirtual #87                 // Method drainReferenceQueues:()V
      11: aload_0
      12: invokevirtual #65                 // Method unlock:()V
      15: goto          25
      18: astore_1
      19: aload_0
      20: invokevirtual #65                 // Method unlock:()V
      23: aload_1
      24: athrow
      25: return
    Exception table:
       from    to  target type
           7    11    18   any
          18    19    18   any

  void drainReferenceQueues();
    Code:
       0: aload_0
       1: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
       4: invokevirtual #10                 // Method com/google/common/cache/CustomConcurrentHashMap.usesKeyReferences:()Z
       7: ifeq          14
      10: aload_0
      11: invokevirtual #88                 // Method drainKeyReferenceQueue:()V
      14: aload_0
      15: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      18: invokevirtual #14                 // Method com/google/common/cache/CustomConcurrentHashMap.usesValueReferences:()Z
      21: ifeq          28
      24: aload_0
      25: invokevirtual #89                 // Method drainValueReferenceQueue:()V
      28: return

  void drainKeyReferenceQueue();
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #13                 // Field keyReferenceQueue:Ljava/lang/ref/ReferenceQueue;
       6: invokevirtual #90                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
       9: dup
      10: astore_1
      11: ifnull        42
      14: aload_1
      15: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      18: astore_3
      19: aload_0
      20: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      23: aload_3
      24: invokevirtual #91                 // Method com/google/common/cache/CustomConcurrentHashMap.reclaimKey:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
      27: iinc          2, 1
      30: iload_2
      31: bipush        16
      33: if_icmpne     39
      36: goto          42
      39: goto          2
      42: return

  void drainValueReferenceQueue();
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #15                 // Field valueReferenceQueue:Ljava/lang/ref/ReferenceQueue;
       6: invokevirtual #90                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
       9: dup
      10: astore_1
      11: ifnull        42
      14: aload_1
      15: checkcast     #92                 // class com/google/common/cache/CustomConcurrentHashMap$ValueReference
      18: astore_3
      19: aload_0
      20: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      23: aload_3
      24: invokevirtual #93                 // Method com/google/common/cache/CustomConcurrentHashMap.reclaimValue:(Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;)V
      27: iinc          2, 1
      30: iload_2
      31: bipush        16
      33: if_icmpne     39
      36: goto          42
      39: goto          2
      42: return

  void clearReferenceQueues();
    Code:
       0: aload_0
       1: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
       4: invokevirtual #10                 // Method com/google/common/cache/CustomConcurrentHashMap.usesKeyReferences:()Z
       7: ifeq          14
      10: aload_0
      11: invokevirtual #94                 // Method clearKeyReferenceQueue:()V
      14: aload_0
      15: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      18: invokevirtual #14                 // Method com/google/common/cache/CustomConcurrentHashMap.usesValueReferences:()Z
      21: ifeq          28
      24: aload_0
      25: invokevirtual #95                 // Method clearValueReferenceQueue:()V
      28: return

  void clearKeyReferenceQueue();
    Code:
       0: aload_0
       1: getfield      #13                 // Field keyReferenceQueue:Ljava/lang/ref/ReferenceQueue;
       4: invokevirtual #90                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
       7: ifnull        13
      10: goto          0
      13: return

  void clearValueReferenceQueue();
    Code:
       0: aload_0
       1: getfield      #15                 // Field valueReferenceQueue:Ljava/lang/ref/ReferenceQueue;
       4: invokevirtual #90                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
       7: ifnull        13
      10: goto          0
      13: return

  void recordRead(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
       4: invokevirtual #17                 // Method com/google/common/cache/CustomConcurrentHashMap.expiresAfterAccess:()Z
       7: ifeq          22
      10: aload_0
      11: aload_1
      12: aload_0
      13: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      16: getfield      #96                 // Field com/google/common/cache/CustomConcurrentHashMap.expireAfterAccessNanos:J
      19: invokevirtual #97                 // Method recordExpirationTime:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;J)V
      22: aload_0
      23: getfield      #21                 // Field recencyQueue:Ljava/util/Queue;
      26: aload_1
      27: invokeinterface #98,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      32: pop
      33: return

  void recordLockedRead(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: getfield      #24                 // Field evictionQueue:Ljava/util/Queue;
       4: aload_1
       5: invokeinterface #98,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      15: invokevirtual #17                 // Method com/google/common/cache/CustomConcurrentHashMap.expiresAfterAccess:()Z
      18: ifeq          44
      21: aload_0
      22: aload_1
      23: aload_0
      24: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      27: getfield      #96                 // Field com/google/common/cache/CustomConcurrentHashMap.expireAfterAccessNanos:J
      30: invokevirtual #97                 // Method recordExpirationTime:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;J)V
      33: aload_0
      34: getfield      #28                 // Field expirationQueue:Ljava/util/Queue;
      37: aload_1
      38: invokeinterface #98,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      43: pop
      44: return

  void recordWrite(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: invokevirtual #99                 // Method drainRecencyQueue:()V
       4: aload_0
       5: getfield      #24                 // Field evictionQueue:Ljava/util/Queue;
       8: aload_1
       9: invokeinterface #98,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      14: pop
      15: aload_0
      16: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      19: invokevirtual #25                 // Method com/google/common/cache/CustomConcurrentHashMap.expires:()Z
      22: ifeq          70
      25: aload_0
      26: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      29: invokevirtual #17                 // Method com/google/common/cache/CustomConcurrentHashMap.expiresAfterAccess:()Z
      32: ifeq          45
      35: aload_0
      36: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      39: getfield      #96                 // Field com/google/common/cache/CustomConcurrentHashMap.expireAfterAccessNanos:J
      42: goto          52
      45: aload_0
      46: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      49: getfield      #100                // Field com/google/common/cache/CustomConcurrentHashMap.expireAfterWriteNanos:J
      52: lstore_2
      53: aload_0
      54: aload_1
      55: lload_2
      56: invokevirtual #97                 // Method recordExpirationTime:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;J)V
      59: aload_0
      60: getfield      #28                 // Field expirationQueue:Ljava/util/Queue;
      63: aload_1
      64: invokeinterface #98,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      69: pop
      70: return

  void drainRecencyQueue();
    Code:
       0: aload_0
       1: getfield      #21                 // Field recencyQueue:Ljava/util/Queue;
       4: invokeinterface #101,  1          // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
       9: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      12: dup
      13: astore_1
      14: ifnull        78
      17: aload_0
      18: getfield      #24                 // Field evictionQueue:Ljava/util/Queue;
      21: aload_1
      22: invokeinterface #102,  2          // InterfaceMethod java/util/Queue.contains:(Ljava/lang/Object;)Z
      27: ifeq          41
      30: aload_0
      31: getfield      #24                 // Field evictionQueue:Ljava/util/Queue;
      34: aload_1
      35: invokeinterface #98,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      40: pop
      41: aload_0
      42: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      45: invokevirtual #17                 // Method com/google/common/cache/CustomConcurrentHashMap.expiresAfterAccess:()Z
      48: ifeq          0
      51: aload_0
      52: getfield      #28                 // Field expirationQueue:Ljava/util/Queue;
      55: aload_1
      56: invokeinterface #102,  2          // InterfaceMethod java/util/Queue.contains:(Ljava/lang/Object;)Z
      61: ifeq          0
      64: aload_0
      65: getfield      #28                 // Field expirationQueue:Ljava/util/Queue;
      68: aload_1
      69: invokeinterface #98,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      74: pop
      75: goto          0
      78: return

  void recordExpirationTime(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>, long);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
       5: getfield      #103                // Field com/google/common/cache/CustomConcurrentHashMap.ticker:Lcom/google/common/base/Ticker;
       8: invokevirtual #104                // Method com/google/common/base/Ticker.read:()J
      11: lload_2
      12: ladd
      13: invokeinterface #105,  3          // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.setExpirationTime:(J)V
      18: return

  void tryExpireEntries();
    Code:
       0: aload_0
       1: invokevirtual #86                 // Method tryLock:()Z
       4: ifeq          25
       7: aload_0
       8: invokevirtual #106                // Method expireEntries:()V
      11: aload_0
      12: invokevirtual #65                 // Method unlock:()V
      15: goto          25
      18: astore_1
      19: aload_0
      20: invokevirtual #65                 // Method unlock:()V
      23: aload_1
      24: athrow
      25: return
    Exception table:
       from    to  target type
           7    11    18   any
          18    19    18   any

  void expireEntries();
    Code:
       0: aload_0
       1: invokevirtual #99                 // Method drainRecencyQueue:()V
       4: aload_0
       5: getfield      #28                 // Field expirationQueue:Ljava/util/Queue;
       8: invokeinterface #107,  1          // InterfaceMethod java/util/Queue.isEmpty:()Z
      13: ifeq          17
      16: return
      17: aload_0
      18: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      21: getfield      #103                // Field com/google/common/cache/CustomConcurrentHashMap.ticker:Lcom/google/common/base/Ticker;
      24: invokevirtual #104                // Method com/google/common/base/Ticker.read:()J
      27: lstore_1
      28: aload_0
      29: getfield      #28                 // Field expirationQueue:Ljava/util/Queue;
      32: invokeinterface #108,  1          // InterfaceMethod java/util/Queue.peek:()Ljava/lang/Object;
      37: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      40: dup
      41: astore_3
      42: ifnull        82
      45: aload_0
      46: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      49: aload_3
      50: lload_1
      51: invokevirtual #109                // Method com/google/common/cache/CustomConcurrentHashMap.isExpired:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;J)Z
      54: ifeq          82
      57: aload_0
      58: aload_3
      59: aload_3
      60: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
      65: getstatic     #63                 // Field com/google/common/cache/RemovalCause.EXPIRED:Lcom/google/common/cache/RemovalCause;
      68: invokevirtual #110                // Method removeEntry:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;ILcom/google/common/cache/RemovalCause;)Z
      71: ifne          28
      74: new           #111                // class java/lang/AssertionError
      77: dup
      78: invokespecial #112                // Method java/lang/AssertionError."<init>":()V
      81: athrow
      82: return

  void enqueueNotification(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>, com.google.common.cache.RemovalCause);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #55,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
       7: aload_1
       8: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
      13: aload_1
      14: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      19: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
      24: aload_2
      25: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
      28: return

  void enqueueNotification(K, int, V, com.google.common.cache.RemovalCause);
    Code:
       0: aload         4
       2: invokevirtual #113                // Method com/google/common/cache/RemovalCause.wasEvicted:()Z
       5: ifeq          17
       8: aload_0
       9: getfield      #7                  // Field statsCounter:Lcom/google/common/cache/AbstractCache$StatsCounter;
      12: invokeinterface #114,  1          // InterfaceMethod com/google/common/cache/AbstractCache$StatsCounter.recordEviction:()V
      17: aload_0
      18: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      21: getfield      #115                // Field com/google/common/cache/CustomConcurrentHashMap.removalNotificationQueue:Ljava/util/Queue;
      24: getstatic     #116                // Field com/google/common/cache/CustomConcurrentHashMap.DISCARDING_QUEUE:Ljava/util/Queue;
      27: if_acmpeq     58
      30: new           #117                // class com/google/common/cache/RemovalNotification
      33: dup
      34: aload_1
      35: aload_3
      36: aload         4
      38: invokespecial #118                // Method com/google/common/cache/RemovalNotification."<init>":(Ljava/lang/Object;Ljava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
      41: astore        5
      43: aload_0
      44: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      47: getfield      #115                // Field com/google/common/cache/CustomConcurrentHashMap.removalNotificationQueue:Ljava/util/Queue;
      50: aload         5
      52: invokeinterface #119,  2          // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      57: pop
      58: return

  boolean evictEntries();
    Code:
       0: aload_0
       1: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
       4: invokevirtual #16                 // Method com/google/common/cache/CustomConcurrentHashMap.evictsBySize:()Z
       7: ifeq          65
      10: aload_0
      11: getfield      #44                 // Field count:I
      14: aload_0
      15: getfield      #6                  // Field maxSegmentSize:I
      18: if_icmplt     65
      21: aload_0
      22: invokevirtual #99                 // Method drainRecencyQueue:()V
      25: aload_0
      26: getfield      #24                 // Field evictionQueue:Ljava/util/Queue;
      29: invokeinterface #120,  1          // InterfaceMethod java/util/Queue.remove:()Ljava/lang/Object;
      34: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      37: astore_1
      38: aload_0
      39: aload_1
      40: aload_1
      41: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
      46: getstatic     #121                // Field com/google/common/cache/RemovalCause.SIZE:Lcom/google/common/cache/RemovalCause;
      49: invokevirtual #110                // Method removeEntry:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;ILcom/google/common/cache/RemovalCause;)Z
      52: ifne          63
      55: new           #111                // class java/lang/AssertionError
      58: dup
      59: invokespecial #112                // Method java/lang/AssertionError."<init>":()V
      62: athrow
      63: iconst_1
      64: ireturn
      65: iconst_0
      66: ireturn

  com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V> getFirst(int);
    Code:
       0: aload_0
       1: getfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
       4: astore_2
       5: aload_2
       6: iload_1
       7: aload_2
       8: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      11: iconst_1
      12: isub
      13: iand
      14: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      17: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      20: areturn

  com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V> getEntry(java.lang.Object, int);
    Code:
       0: aload_0
       1: iload_2
       2: invokevirtual #122                // Method getFirst:(I)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
       5: astore_3
       6: aload_3
       7: ifnull        71
      10: aload_3
      11: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
      16: iload_2
      17: if_icmpeq     23
      20: goto          61
      23: aload_3
      24: invokeinterface #55,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
      29: astore        4
      31: aload         4
      33: ifnonnull     43
      36: aload_0
      37: invokevirtual #123                // Method tryDrainReferenceQueues:()V
      40: goto          61
      43: aload_0
      44: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      47: getfield      #57                 // Field com/google/common/cache/CustomConcurrentHashMap.keyEquivalence:Lcom/google/common/base/Equivalence;
      50: aload_1
      51: aload         4
      53: invokevirtual #58                 // Method com/google/common/base/Equivalence.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z
      56: ifeq          61
      59: aload_3
      60: areturn
      61: aload_3
      62: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      67: astore_3
      68: goto          6
      71: aconst_null
      72: areturn

  com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V> getLiveEntry(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #45                 // Method getEntry:(Ljava/lang/Object;I)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
       6: astore_3
       7: aload_3
       8: ifnonnull     13
      11: aconst_null
      12: areturn
      13: aload_0
      14: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      17: invokevirtual #25                 // Method com/google/common/cache/CustomConcurrentHashMap.expires:()Z
      20: ifeq          40
      23: aload_0
      24: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      27: aload_3
      28: invokevirtual #62                 // Method com/google/common/cache/CustomConcurrentHashMap.isExpired:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Z
      31: ifeq          40
      34: aload_0
      35: invokevirtual #124                // Method tryExpireEntries:()V
      38: aconst_null
      39: areturn
      40: aload_3
      41: areturn

  V get(java.lang.Object, int);
    Code:
       0: aload_0
       1: getfield      #44                 // Field count:I
       4: ifeq          69
       7: aload_0
       8: aload_1
       9: iload_2
      10: invokevirtual #125                // Method getLiveEntry:(Ljava/lang/Object;I)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      13: astore_3
      14: aload_3
      15: ifnonnull     28
      18: aconst_null
      19: astore        4
      21: aload_0
      22: invokevirtual #49                 // Method postReadCleanup:()V
      25: aload         4
      27: areturn
      28: aload_3
      29: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      34: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
      39: astore        4
      41: aload         4
      43: ifnull        54
      46: aload_0
      47: aload_3
      48: invokevirtual #47                 // Method recordRead:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
      51: goto          58
      54: aload_0
      55: invokevirtual #123                // Method tryDrainReferenceQueues:()V
      58: aload         4
      60: astore        5
      62: aload_0
      63: invokevirtual #49                 // Method postReadCleanup:()V
      66: aload         5
      68: areturn
      69: aconst_null
      70: astore_3
      71: aload_0
      72: invokevirtual #49                 // Method postReadCleanup:()V
      75: aload_3
      76: areturn
      77: astore        6
      79: aload_0
      80: invokevirtual #49                 // Method postReadCleanup:()V
      83: aload         6
      85: athrow
    Exception table:
       from    to  target type
           0    21    77   any
          28    62    77   any
          69    71    77   any
          77    79    77   any

  boolean containsKey(java.lang.Object, int);
    Code:
       0: aload_0
       1: getfield      #44                 // Field count:I
       4: ifeq          56
       7: aload_0
       8: aload_1
       9: iload_2
      10: invokevirtual #125                // Method getLiveEntry:(Ljava/lang/Object;I)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      13: astore_3
      14: aload_3
      15: ifnonnull     28
      18: iconst_0
      19: istore        4
      21: aload_0
      22: invokevirtual #49                 // Method postReadCleanup:()V
      25: iload         4
      27: ireturn
      28: aload_3
      29: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      34: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
      39: ifnull        46
      42: iconst_1
      43: goto          47
      46: iconst_0
      47: istore        4
      49: aload_0
      50: invokevirtual #49                 // Method postReadCleanup:()V
      53: iload         4
      55: ireturn
      56: iconst_0
      57: istore_3
      58: aload_0
      59: invokevirtual #49                 // Method postReadCleanup:()V
      62: iload_3
      63: ireturn
      64: astore        5
      66: aload_0
      67: invokevirtual #49                 // Method postReadCleanup:()V
      70: aload         5
      72: athrow
    Exception table:
       from    to  target type
           0    21    64   any
          28    49    64   any
          56    58    64   any
          64    66    64   any

  boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #44                 // Field count:I
       4: ifeq          102
       7: aload_0
       8: getfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      11: astore_2
      12: aload_2
      13: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      16: istore_3
      17: iconst_0
      18: istore        4
      20: iload         4
      22: iload_3
      23: if_icmpge     102
      26: aload_2
      27: iload         4
      29: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      32: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      35: astore        5
      37: aload         5
      39: ifnull        96
      42: aload_0
      43: aload         5
      45: invokevirtual #46                 // Method getLiveValue:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Ljava/lang/Object;
      48: astore        6
      50: aload         6
      52: ifnonnull     58
      55: goto          84
      58: aload_0
      59: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      62: getfield      #126                // Field com/google/common/cache/CustomConcurrentHashMap.valueEquivalence:Lcom/google/common/base/Equivalence;
      65: aload_1
      66: aload         6
      68: invokevirtual #58                 // Method com/google/common/base/Equivalence.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z
      71: ifeq          84
      74: iconst_1
      75: istore        7
      77: aload_0
      78: invokevirtual #49                 // Method postReadCleanup:()V
      81: iload         7
      83: ireturn
      84: aload         5
      86: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      91: astore        5
      93: goto          37
      96: iinc          4, 1
      99: goto          20
     102: iconst_0
     103: istore_2
     104: aload_0
     105: invokevirtual #49                 // Method postReadCleanup:()V
     108: iload_2
     109: ireturn
     110: astore        8
     112: aload_0
     113: invokevirtual #49                 // Method postReadCleanup:()V
     116: aload         8
     118: athrow
    Exception table:
       from    to  target type
           0    77   110   any
          84   104   110   any
         110   112   110   any

  V put(K, int, V, boolean);
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method lock:()V
       4: aload_0
       5: invokevirtual #52                 // Method preWriteCleanup:()V
       8: aload_0
       9: getfield      #44                 // Field count:I
      12: iconst_1
      13: iadd
      14: istore        5
      16: iload         5
      18: aload_0
      19: getfield      #32                 // Field threshold:I
      22: if_icmple     37
      25: aload_0
      26: invokevirtual #127                // Method expand:()V
      29: aload_0
      30: getfield      #44                 // Field count:I
      33: iconst_1
      34: iadd
      35: istore        5
      37: aload_0
      38: getfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      41: astore        6
      43: iload_2
      44: aload         6
      46: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      49: iconst_1
      50: isub
      51: iand
      52: istore        7
      54: aload         6
      56: iload         7
      58: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      61: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      64: astore        8
      66: aload         8
      68: astore        9
      70: aload         9
      72: ifnull        302
      75: aload         9
      77: invokeinterface #55,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
      82: astore        10
      84: aload         9
      86: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
      91: iload_2
      92: if_icmpne     290
      95: aload         10
      97: ifnull        290
     100: aload_0
     101: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
     104: getfield      #57                 // Field com/google/common/cache/CustomConcurrentHashMap.keyEquivalence:Lcom/google/common/base/Equivalence;
     107: aload_1
     108: aload         10
     110: invokevirtual #58                 // Method com/google/common/base/Equivalence.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z
     113: ifeq          290
     116: aload         9
     118: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
     123: astore        11
     125: aload         11
     127: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
     132: astore        12
     134: aload         12
     136: ifnonnull     221
     139: aload_0
     140: dup
     141: getfield      #128                // Field modCount:I
     144: iconst_1
     145: iadd
     146: putfield      #128                // Field modCount:I
     149: aload_0
     150: aload         9
     152: aload_3
     153: invokevirtual #129                // Method setValue:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Ljava/lang/Object;)V
     156: aload         11
     158: invokeinterface #50,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.isComputingReference:()Z
     163: ifne          186
     166: aload_0
     167: aload_1
     168: iload_2
     169: aload         12
     171: getstatic     #60                 // Field com/google/common/cache/RemovalCause.COLLECTED:Lcom/google/common/cache/RemovalCause;
     174: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
     177: aload_0
     178: getfield      #44                 // Field count:I
     181: istore        5
     183: goto          201
     186: aload_0
     187: invokevirtual #130                // Method evictEntries:()Z
     190: ifeq          201
     193: aload_0
     194: getfield      #44                 // Field count:I
     197: iconst_1
     198: iadd
     199: istore        5
     201: aload_0
     202: iload         5
     204: putfield      #44                 // Field count:I
     207: aconst_null
     208: astore        13
     210: aload_0
     211: invokevirtual #65                 // Method unlock:()V
     214: aload_0
     215: invokevirtual #66                 // Method postWriteCleanup:()V
     218: aload         13
     220: areturn
     221: iload         4
     223: ifeq          247
     226: aload_0
     227: aload         9
     229: invokevirtual #64                 // Method recordLockedRead:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
     232: aload         12
     234: astore        13
     236: aload_0
     237: invokevirtual #65                 // Method unlock:()V
     240: aload_0
     241: invokevirtual #66                 // Method postWriteCleanup:()V
     244: aload         13
     246: areturn
     247: aload_0
     248: dup
     249: getfield      #128                // Field modCount:I
     252: iconst_1
     253: iadd
     254: putfield      #128                // Field modCount:I
     257: aload_0
     258: aload_1
     259: iload_2
     260: aload         12
     262: getstatic     #83                 // Field com/google/common/cache/RemovalCause.REPLACED:Lcom/google/common/cache/RemovalCause;
     265: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
     268: aload_0
     269: aload         9
     271: aload_3
     272: invokevirtual #129                // Method setValue:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Ljava/lang/Object;)V
     275: aload         12
     277: astore        13
     279: aload_0
     280: invokevirtual #65                 // Method unlock:()V
     283: aload_0
     284: invokevirtual #66                 // Method postWriteCleanup:()V
     287: aload         13
     289: areturn
     290: aload         9
     292: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     297: astore        9
     299: goto          70
     302: aload_0
     303: dup
     304: getfield      #128                // Field modCount:I
     307: iconst_1
     308: iadd
     309: putfield      #128                // Field modCount:I
     312: aload_0
     313: aload_1
     314: iload_2
     315: aload         8
     317: invokevirtual #71                 // Method newEntry:(Ljava/lang/Object;ILcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     320: astore        9
     322: aload_0
     323: aload         9
     325: aload_3
     326: invokevirtual #129                // Method setValue:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Ljava/lang/Object;)V
     329: aload         6
     331: iload         7
     333: aload         9
     335: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicReferenceArray.set:(ILjava/lang/Object;)V
     338: aload_0
     339: invokevirtual #130                // Method evictEntries:()Z
     342: ifeq          353
     345: aload_0
     346: getfield      #44                 // Field count:I
     349: iconst_1
     350: iadd
     351: istore        5
     353: aload_0
     354: iload         5
     356: putfield      #44                 // Field count:I
     359: aconst_null
     360: astore        10
     362: aload_0
     363: invokevirtual #65                 // Method unlock:()V
     366: aload_0
     367: invokevirtual #66                 // Method postWriteCleanup:()V
     370: aload         10
     372: areturn
     373: astore        14
     375: aload_0
     376: invokevirtual #65                 // Method unlock:()V
     379: aload_0
     380: invokevirtual #66                 // Method postWriteCleanup:()V
     383: aload         14
     385: athrow
    Exception table:
       from    to  target type
           4   210   373   any
         221   236   373   any
         247   279   373   any
         290   362   373   any
         373   375   373   any

  void expand();
    Code:
       0: aload_0
       1: getfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
       4: astore_1
       5: aload_1
       6: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
       9: istore_2
      10: iload_2
      11: ldc           #131                // int 1073741824
      13: if_icmplt     17
      16: return
      17: aload_0
      18: getfield      #44                 // Field count:I
      21: istore_3
      22: aload_0
      23: iload_2
      24: iconst_1
      25: ishl
      26: invokevirtual #8                  // Method newEntryArray:(I)Ljava/util/concurrent/atomic/AtomicReferenceArray;
      29: astore        4
      31: aload_0
      32: aload         4
      34: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      37: iconst_3
      38: imul
      39: iconst_4
      40: idiv
      41: putfield      #32                 // Field threshold:I
      44: aload         4
      46: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      49: iconst_1
      50: isub
      51: istore        5
      53: iconst_0
      54: istore        6
      56: iload         6
      58: iload_2
      59: if_icmpge     274
      62: aload_1
      63: iload         6
      65: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      68: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      71: astore        7
      73: aload         7
      75: ifnull        268
      78: aload         7
      80: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      85: astore        8
      87: aload         7
      89: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
      94: iload         5
      96: iand
      97: istore        9
      99: aload         8
     101: ifnonnull     116
     104: aload         4
     106: iload         9
     108: aload         7
     110: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicReferenceArray.set:(ILjava/lang/Object;)V
     113: goto          268
     116: aload         7
     118: astore        10
     120: iload         9
     122: istore        11
     124: aload         8
     126: astore        12
     128: aload         12
     130: ifnull        172
     133: aload         12
     135: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
     140: iload         5
     142: iand
     143: istore        13
     145: iload         13
     147: iload         11
     149: if_icmpeq     160
     152: iload         13
     154: istore        11
     156: aload         12
     158: astore        10
     160: aload         12
     162: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     167: astore        12
     169: goto          128
     172: aload         4
     174: iload         11
     176: aload         10
     178: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicReferenceArray.set:(ILjava/lang/Object;)V
     181: aload         7
     183: astore        12
     185: aload         12
     187: aload         10
     189: if_acmpeq     268
     192: aload_0
     193: aload         12
     195: invokevirtual #132                // Method isCollected:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Z
     198: ifeq          213
     201: aload_0
     202: aload         12
     204: invokevirtual #133                // Method removeCollectedEntry:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
     207: iinc          3, -1
     210: goto          256
     213: aload         12
     215: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
     220: iload         5
     222: iand
     223: istore        13
     225: aload         4
     227: iload         13
     229: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
     232: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
     235: astore        14
     237: aload_0
     238: aload         12
     240: aload         14
     242: invokevirtual #134                // Method copyEntry:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     245: astore        15
     247: aload         4
     249: iload         13
     251: aload         15
     253: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicReferenceArray.set:(ILjava/lang/Object;)V
     256: aload         12
     258: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     263: astore        12
     265: goto          185
     268: iinc          6, 1
     271: goto          56
     274: aload_0
     275: aload         4
     277: putfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
     280: aload_0
     281: iload_3
     282: putfield      #44                 // Field count:I
     285: return

  boolean replace(K, int, V, V);
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method lock:()V
       4: aload_0
       5: invokevirtual #52                 // Method preWriteCleanup:()V
       8: aload_0
       9: getfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      12: astore        5
      14: iload_2
      15: aload         5
      17: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      20: iconst_1
      21: isub
      22: iand
      23: istore        6
      25: aload         5
      27: iload         6
      29: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      32: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      35: astore        7
      37: aload         7
      39: astore        8
      41: aload         8
      43: ifnull        287
      46: aload         8
      48: invokeinterface #55,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
      53: astore        9
      55: aload         8
      57: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
      62: iload_2
      63: if_icmpne     275
      66: aload         9
      68: ifnull        275
      71: aload_0
      72: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      75: getfield      #57                 // Field com/google/common/cache/CustomConcurrentHashMap.keyEquivalence:Lcom/google/common/base/Equivalence;
      78: aload_1
      79: aload         9
      81: invokevirtual #58                 // Method com/google/common/base/Equivalence.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z
      84: ifeq          275
      87: aload         8
      89: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      94: astore        10
      96: aload         10
      98: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
     103: astore        11
     105: aload         11
     107: ifnonnull     196
     110: aload_0
     111: aload         10
     113: invokevirtual #135                // Method isCollected:(Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;)Z
     116: ifeq          182
     119: aload_0
     120: getfield      #44                 // Field count:I
     123: iconst_1
     124: isub
     125: istore        12
     127: aload_0
     128: dup
     129: getfield      #128                // Field modCount:I
     132: iconst_1
     133: iadd
     134: putfield      #128                // Field modCount:I
     137: aload_0
     138: aload         9
     140: iload_2
     141: aload         11
     143: getstatic     #60                 // Field com/google/common/cache/RemovalCause.COLLECTED:Lcom/google/common/cache/RemovalCause;
     146: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
     149: aload_0
     150: aload         7
     152: aload         8
     154: invokevirtual #136                // Method removeFromChain:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     157: astore        13
     159: aload_0
     160: getfield      #44                 // Field count:I
     163: iconst_1
     164: isub
     165: istore        12
     167: aload         5
     169: iload         6
     171: aload         13
     173: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicReferenceArray.set:(ILjava/lang/Object;)V
     176: aload_0
     177: iload         12
     179: putfield      #44                 // Field count:I
     182: iconst_0
     183: istore        12
     185: aload_0
     186: invokevirtual #65                 // Method unlock:()V
     189: aload_0
     190: invokevirtual #66                 // Method postWriteCleanup:()V
     193: iload         12
     195: ireturn
     196: aload_0
     197: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
     200: getfield      #126                // Field com/google/common/cache/CustomConcurrentHashMap.valueEquivalence:Lcom/google/common/base/Equivalence;
     203: aload_3
     204: aload         11
     206: invokevirtual #58                 // Method com/google/common/base/Equivalence.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z
     209: ifeq          255
     212: aload_0
     213: dup
     214: getfield      #128                // Field modCount:I
     217: iconst_1
     218: iadd
     219: putfield      #128                // Field modCount:I
     222: aload_0
     223: aload_1
     224: iload_2
     225: aload         11
     227: getstatic     #83                 // Field com/google/common/cache/RemovalCause.REPLACED:Lcom/google/common/cache/RemovalCause;
     230: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
     233: aload_0
     234: aload         8
     236: aload         4
     238: invokevirtual #129                // Method setValue:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Ljava/lang/Object;)V
     241: iconst_1
     242: istore        12
     244: aload_0
     245: invokevirtual #65                 // Method unlock:()V
     248: aload_0
     249: invokevirtual #66                 // Method postWriteCleanup:()V
     252: iload         12
     254: ireturn
     255: aload_0
     256: aload         8
     258: invokevirtual #64                 // Method recordLockedRead:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
     261: iconst_0
     262: istore        12
     264: aload_0
     265: invokevirtual #65                 // Method unlock:()V
     268: aload_0
     269: invokevirtual #66                 // Method postWriteCleanup:()V
     272: iload         12
     274: ireturn
     275: aload         8
     277: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     282: astore        8
     284: goto          41
     287: iconst_0
     288: istore        8
     290: aload_0
     291: invokevirtual #65                 // Method unlock:()V
     294: aload_0
     295: invokevirtual #66                 // Method postWriteCleanup:()V
     298: iload         8
     300: ireturn
     301: astore        14
     303: aload_0
     304: invokevirtual #65                 // Method unlock:()V
     307: aload_0
     308: invokevirtual #66                 // Method postWriteCleanup:()V
     311: aload         14
     313: athrow
    Exception table:
       from    to  target type
           4   185   301   any
         196   244   301   any
         255   264   301   any
         275   290   301   any
         301   303   301   any

  V replace(K, int, V);
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method lock:()V
       4: aload_0
       5: invokevirtual #52                 // Method preWriteCleanup:()V
       8: aload_0
       9: getfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      12: astore        4
      14: iload_2
      15: aload         4
      17: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      20: iconst_1
      21: isub
      22: iand
      23: istore        5
      25: aload         4
      27: iload         5
      29: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      32: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      35: astore        6
      37: aload         6
      39: astore        7
      41: aload         7
      43: ifnull        251
      46: aload         7
      48: invokeinterface #55,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
      53: astore        8
      55: aload         7
      57: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
      62: iload_2
      63: if_icmpne     239
      66: aload         8
      68: ifnull        239
      71: aload_0
      72: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      75: getfield      #57                 // Field com/google/common/cache/CustomConcurrentHashMap.keyEquivalence:Lcom/google/common/base/Equivalence;
      78: aload_1
      79: aload         8
      81: invokevirtual #58                 // Method com/google/common/base/Equivalence.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z
      84: ifeq          239
      87: aload         7
      89: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      94: astore        9
      96: aload         9
      98: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
     103: astore        10
     105: aload         10
     107: ifnonnull     196
     110: aload_0
     111: aload         9
     113: invokevirtual #135                // Method isCollected:(Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;)Z
     116: ifeq          182
     119: aload_0
     120: getfield      #44                 // Field count:I
     123: iconst_1
     124: isub
     125: istore        11
     127: aload_0
     128: dup
     129: getfield      #128                // Field modCount:I
     132: iconst_1
     133: iadd
     134: putfield      #128                // Field modCount:I
     137: aload_0
     138: aload         8
     140: iload_2
     141: aload         10
     143: getstatic     #60                 // Field com/google/common/cache/RemovalCause.COLLECTED:Lcom/google/common/cache/RemovalCause;
     146: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
     149: aload_0
     150: aload         6
     152: aload         7
     154: invokevirtual #136                // Method removeFromChain:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     157: astore        12
     159: aload_0
     160: getfield      #44                 // Field count:I
     163: iconst_1
     164: isub
     165: istore        11
     167: aload         4
     169: iload         5
     171: aload         12
     173: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicReferenceArray.set:(ILjava/lang/Object;)V
     176: aload_0
     177: iload         11
     179: putfield      #44                 // Field count:I
     182: aconst_null
     183: astore        11
     185: aload_0
     186: invokevirtual #65                 // Method unlock:()V
     189: aload_0
     190: invokevirtual #66                 // Method postWriteCleanup:()V
     193: aload         11
     195: areturn
     196: aload_0
     197: dup
     198: getfield      #128                // Field modCount:I
     201: iconst_1
     202: iadd
     203: putfield      #128                // Field modCount:I
     206: aload_0
     207: aload_1
     208: iload_2
     209: aload         10
     211: getstatic     #83                 // Field com/google/common/cache/RemovalCause.REPLACED:Lcom/google/common/cache/RemovalCause;
     214: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
     217: aload_0
     218: aload         7
     220: aload_3
     221: invokevirtual #129                // Method setValue:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Ljava/lang/Object;)V
     224: aload         10
     226: astore        11
     228: aload_0
     229: invokevirtual #65                 // Method unlock:()V
     232: aload_0
     233: invokevirtual #66                 // Method postWriteCleanup:()V
     236: aload         11
     238: areturn
     239: aload         7
     241: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     246: astore        7
     248: goto          41
     251: aconst_null
     252: astore        7
     254: aload_0
     255: invokevirtual #65                 // Method unlock:()V
     258: aload_0
     259: invokevirtual #66                 // Method postWriteCleanup:()V
     262: aload         7
     264: areturn
     265: astore        13
     267: aload_0
     268: invokevirtual #65                 // Method unlock:()V
     271: aload_0
     272: invokevirtual #66                 // Method postWriteCleanup:()V
     275: aload         13
     277: athrow
    Exception table:
       from    to  target type
           4   185   265   any
         196   228   265   any
         239   254   265   any
         265   267   265   any

  V remove(java.lang.Object, int);
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method lock:()V
       4: aload_0
       5: invokevirtual #52                 // Method preWriteCleanup:()V
       8: aload_0
       9: getfield      #44                 // Field count:I
      12: iconst_1
      13: isub
      14: istore_3
      15: aload_0
      16: getfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      19: astore        4
      21: iload_2
      22: aload         4
      24: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      27: iconst_1
      28: isub
      29: iand
      30: istore        5
      32: aload         4
      34: iload         5
      36: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      39: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      42: astore        6
      44: aload         6
      46: astore        7
      48: aload         7
      50: ifnull        235
      53: aload         7
      55: invokeinterface #55,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
      60: astore        8
      62: aload         7
      64: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
      69: iload_2
      70: if_icmpne     223
      73: aload         8
      75: ifnull        223
      78: aload_0
      79: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      82: getfield      #57                 // Field com/google/common/cache/CustomConcurrentHashMap.keyEquivalence:Lcom/google/common/base/Equivalence;
      85: aload_1
      86: aload         8
      88: invokevirtual #58                 // Method com/google/common/base/Equivalence.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z
      91: ifeq          223
      94: aload         7
      96: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
     101: astore        9
     103: aload         9
     105: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
     110: astore        10
     112: aload         10
     114: ifnull        125
     117: getstatic     #137                // Field com/google/common/cache/RemovalCause.EXPLICIT:Lcom/google/common/cache/RemovalCause;
     120: astore        11
     122: goto          156
     125: aload_0
     126: aload         9
     128: invokevirtual #135                // Method isCollected:(Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;)Z
     131: ifeq          142
     134: getstatic     #60                 // Field com/google/common/cache/RemovalCause.COLLECTED:Lcom/google/common/cache/RemovalCause;
     137: astore        11
     139: goto          156
     142: aconst_null
     143: astore        12
     145: aload_0
     146: invokevirtual #65                 // Method unlock:()V
     149: aload_0
     150: invokevirtual #66                 // Method postWriteCleanup:()V
     153: aload         12
     155: areturn
     156: aload_0
     157: dup
     158: getfield      #128                // Field modCount:I
     161: iconst_1
     162: iadd
     163: putfield      #128                // Field modCount:I
     166: aload_0
     167: aload         8
     169: iload_2
     170: aload         10
     172: aload         11
     174: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
     177: aload_0
     178: aload         6
     180: aload         7
     182: invokevirtual #136                // Method removeFromChain:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     185: astore        12
     187: aload_0
     188: getfield      #44                 // Field count:I
     191: iconst_1
     192: isub
     193: istore_3
     194: aload         4
     196: iload         5
     198: aload         12
     200: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicReferenceArray.set:(ILjava/lang/Object;)V
     203: aload_0
     204: iload_3
     205: putfield      #44                 // Field count:I
     208: aload         10
     210: astore        13
     212: aload_0
     213: invokevirtual #65                 // Method unlock:()V
     216: aload_0
     217: invokevirtual #66                 // Method postWriteCleanup:()V
     220: aload         13
     222: areturn
     223: aload         7
     225: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     230: astore        7
     232: goto          48
     235: aconst_null
     236: astore        7
     238: aload_0
     239: invokevirtual #65                 // Method unlock:()V
     242: aload_0
     243: invokevirtual #66                 // Method postWriteCleanup:()V
     246: aload         7
     248: areturn
     249: astore        14
     251: aload_0
     252: invokevirtual #65                 // Method unlock:()V
     255: aload_0
     256: invokevirtual #66                 // Method postWriteCleanup:()V
     259: aload         14
     261: athrow
    Exception table:
       from    to  target type
           4   145   249   any
         156   212   249   any
         223   238   249   any
         249   251   249   any

  boolean remove(java.lang.Object, int, java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method lock:()V
       4: aload_0
       5: invokevirtual #52                 // Method preWriteCleanup:()V
       8: aload_0
       9: getfield      #44                 // Field count:I
      12: iconst_1
      13: isub
      14: istore        4
      16: aload_0
      17: getfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      20: astore        5
      22: iload_2
      23: aload         5
      25: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      28: iconst_1
      29: isub
      30: iand
      31: istore        6
      33: aload         5
      35: iload         6
      37: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      40: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      43: astore        7
      45: aload         7
      47: astore        8
      49: aload         8
      51: ifnull        260
      54: aload         8
      56: invokeinterface #55,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
      61: astore        9
      63: aload         8
      65: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
      70: iload_2
      71: if_icmpne     248
      74: aload         9
      76: ifnull        248
      79: aload_0
      80: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      83: getfield      #57                 // Field com/google/common/cache/CustomConcurrentHashMap.keyEquivalence:Lcom/google/common/base/Equivalence;
      86: aload_1
      87: aload         9
      89: invokevirtual #58                 // Method com/google/common/base/Equivalence.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z
      92: ifeq          248
      95: aload         8
      97: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
     102: astore        10
     104: aload         10
     106: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
     111: astore        11
     113: aload_0
     114: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
     117: getfield      #126                // Field com/google/common/cache/CustomConcurrentHashMap.valueEquivalence:Lcom/google/common/base/Equivalence;
     120: aload_3
     121: aload         11
     123: invokevirtual #58                 // Method com/google/common/base/Equivalence.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z
     126: ifeq          137
     129: getstatic     #137                // Field com/google/common/cache/RemovalCause.EXPLICIT:Lcom/google/common/cache/RemovalCause;
     132: astore        12
     134: goto          168
     137: aload_0
     138: aload         10
     140: invokevirtual #135                // Method isCollected:(Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;)Z
     143: ifeq          154
     146: getstatic     #60                 // Field com/google/common/cache/RemovalCause.COLLECTED:Lcom/google/common/cache/RemovalCause;
     149: astore        12
     151: goto          168
     154: iconst_0
     155: istore        13
     157: aload_0
     158: invokevirtual #65                 // Method unlock:()V
     161: aload_0
     162: invokevirtual #66                 // Method postWriteCleanup:()V
     165: iload         13
     167: ireturn
     168: aload_0
     169: dup
     170: getfield      #128                // Field modCount:I
     173: iconst_1
     174: iadd
     175: putfield      #128                // Field modCount:I
     178: aload_0
     179: aload         9
     181: iload_2
     182: aload         11
     184: aload         12
     186: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
     189: aload_0
     190: aload         7
     192: aload         8
     194: invokevirtual #136                // Method removeFromChain:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     197: astore        13
     199: aload_0
     200: getfield      #44                 // Field count:I
     203: iconst_1
     204: isub
     205: istore        4
     207: aload         5
     209: iload         6
     211: aload         13
     213: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicReferenceArray.set:(ILjava/lang/Object;)V
     216: aload_0
     217: iload         4
     219: putfield      #44                 // Field count:I
     222: aload         12
     224: getstatic     #137                // Field com/google/common/cache/RemovalCause.EXPLICIT:Lcom/google/common/cache/RemovalCause;
     227: if_acmpne     234
     230: iconst_1
     231: goto          235
     234: iconst_0
     235: istore        14
     237: aload_0
     238: invokevirtual #65                 // Method unlock:()V
     241: aload_0
     242: invokevirtual #66                 // Method postWriteCleanup:()V
     245: iload         14
     247: ireturn
     248: aload         8
     250: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     255: astore        8
     257: goto          49
     260: iconst_0
     261: istore        8
     263: aload_0
     264: invokevirtual #65                 // Method unlock:()V
     267: aload_0
     268: invokevirtual #66                 // Method postWriteCleanup:()V
     271: iload         8
     273: ireturn
     274: astore        15
     276: aload_0
     277: invokevirtual #65                 // Method unlock:()V
     280: aload_0
     281: invokevirtual #66                 // Method postWriteCleanup:()V
     284: aload         15
     286: athrow
    Exception table:
       from    to  target type
           4   157   274   any
         168   237   274   any
         248   263   274   any
         274   276   274   any

  void clear();
    Code:
       0: aload_0
       1: getfield      #44                 // Field count:I
       4: ifeq          181
       7: aload_0
       8: invokevirtual #51                 // Method lock:()V
      11: aload_0
      12: getfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      15: astore_1
      16: aload_0
      17: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      20: getfield      #115                // Field com/google/common/cache/CustomConcurrentHashMap.removalNotificationQueue:Ljava/util/Queue;
      23: getstatic     #116                // Field com/google/common/cache/CustomConcurrentHashMap.DISCARDING_QUEUE:Ljava/util/Queue;
      26: if_acmpeq     90
      29: iconst_0
      30: istore_2
      31: iload_2
      32: aload_1
      33: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      36: if_icmpge     90
      39: aload_1
      40: iload_2
      41: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      44: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      47: astore_3
      48: aload_3
      49: ifnull        84
      52: aload_3
      53: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      58: invokeinterface #50,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.isComputingReference:()Z
      63: ifne          74
      66: aload_0
      67: aload_3
      68: getstatic     #137                // Field com/google/common/cache/RemovalCause.EXPLICIT:Lcom/google/common/cache/RemovalCause;
      71: invokevirtual #138                // Method enqueueNotification:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/RemovalCause;)V
      74: aload_3
      75: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      80: astore_3
      81: goto          48
      84: iinc          2, 1
      87: goto          31
      90: iconst_0
      91: istore_2
      92: iload_2
      93: aload_1
      94: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      97: if_icmpge     112
     100: aload_1
     101: iload_2
     102: aconst_null
     103: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicReferenceArray.set:(ILjava/lang/Object;)V
     106: iinc          2, 1
     109: goto          92
     112: aload_0
     113: invokevirtual #139                // Method clearReferenceQueues:()V
     116: aload_0
     117: getfield      #24                 // Field evictionQueue:Ljava/util/Queue;
     120: invokeinterface #140,  1          // InterfaceMethod java/util/Queue.clear:()V
     125: aload_0
     126: getfield      #28                 // Field expirationQueue:Ljava/util/Queue;
     129: invokeinterface #140,  1          // InterfaceMethod java/util/Queue.clear:()V
     134: aload_0
     135: getfield      #4                  // Field readCount:Ljava/util/concurrent/atomic/AtomicInteger;
     138: iconst_0
     139: invokevirtual #141                // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
     142: aload_0
     143: dup
     144: getfield      #128                // Field modCount:I
     147: iconst_1
     148: iadd
     149: putfield      #128                // Field modCount:I
     152: aload_0
     153: iconst_0
     154: putfield      #44                 // Field count:I
     157: aload_0
     158: invokevirtual #65                 // Method unlock:()V
     161: aload_0
     162: invokevirtual #66                 // Method postWriteCleanup:()V
     165: goto          181
     168: astore        4
     170: aload_0
     171: invokevirtual #65                 // Method unlock:()V
     174: aload_0
     175: invokevirtual #66                 // Method postWriteCleanup:()V
     178: aload         4
     180: athrow
     181: return
    Exception table:
       from    to  target type
          11   157   168   any
         168   170   168   any

  com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V> removeFromChain(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>, com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: getfield      #24                 // Field evictionQueue:Ljava/util/Queue;
       4: aload_2
       5: invokeinterface #67,  2           // InterfaceMethod java/util/Queue.remove:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: getfield      #28                 // Field expirationQueue:Ljava/util/Queue;
      15: aload_2
      16: invokeinterface #67,  2           // InterfaceMethod java/util/Queue.remove:(Ljava/lang/Object;)Z
      21: pop
      22: aload_0
      23: getfield      #44                 // Field count:I
      26: istore_3
      27: aload_2
      28: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      33: astore        4
      35: aload_1
      36: astore        5
      38: aload         5
      40: aload_2
      41: if_acmpeq     87
      44: aload_0
      45: aload         5
      47: invokevirtual #132                // Method isCollected:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Z
      50: ifeq          65
      53: aload_0
      54: aload         5
      56: invokevirtual #133                // Method removeCollectedEntry:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
      59: iinc          3, -1
      62: goto          75
      65: aload_0
      66: aload         5
      68: aload         4
      70: invokevirtual #134                // Method copyEntry:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      73: astore        4
      75: aload         5
      77: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      82: astore        5
      84: goto          38
      87: aload_0
      88: iload_3
      89: putfield      #44                 // Field count:I
      92: aload         4
      94: areturn

  void removeCollectedEntry(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #60                 // Field com/google/common/cache/RemovalCause.COLLECTED:Lcom/google/common/cache/RemovalCause;
       5: invokevirtual #138                // Method enqueueNotification:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/RemovalCause;)V
       8: aload_0
       9: getfield      #24                 // Field evictionQueue:Ljava/util/Queue;
      12: aload_1
      13: invokeinterface #67,  2           // InterfaceMethod java/util/Queue.remove:(Ljava/lang/Object;)Z
      18: pop
      19: aload_0
      20: getfield      #28                 // Field expirationQueue:Ljava/util/Queue;
      23: aload_1
      24: invokeinterface #67,  2           // InterfaceMethod java/util/Queue.remove:(Ljava/lang/Object;)Z
      29: pop
      30: return

  boolean reclaimKey(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>, int);
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method lock:()V
       4: aload_0
       5: getfield      #44                 // Field count:I
       8: iconst_1
       9: isub
      10: istore_3
      11: aload_0
      12: getfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      15: astore        4
      17: iload_2
      18: aload         4
      20: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      23: iconst_1
      24: isub
      25: iand
      26: istore        5
      28: aload         4
      30: iload         5
      32: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      35: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      38: astore        6
      40: aload         6
      42: astore        7
      44: aload         7
      46: ifnull        149
      49: aload         7
      51: aload_1
      52: if_acmpne     137
      55: aload_0
      56: dup
      57: getfield      #128                // Field modCount:I
      60: iconst_1
      61: iadd
      62: putfield      #128                // Field modCount:I
      65: aload_0
      66: aload         7
      68: invokeinterface #55,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
      73: iload_2
      74: aload         7
      76: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      81: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
      86: getstatic     #60                 // Field com/google/common/cache/RemovalCause.COLLECTED:Lcom/google/common/cache/RemovalCause;
      89: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
      92: aload_0
      93: aload         6
      95: aload         7
      97: invokevirtual #136                // Method removeFromChain:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     100: astore        8
     102: aload_0
     103: getfield      #44                 // Field count:I
     106: iconst_1
     107: isub
     108: istore_3
     109: aload         4
     111: iload         5
     113: aload         8
     115: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicReferenceArray.set:(ILjava/lang/Object;)V
     118: aload_0
     119: iload_3
     120: putfield      #44                 // Field count:I
     123: iconst_1
     124: istore        9
     126: aload_0
     127: invokevirtual #65                 // Method unlock:()V
     130: aload_0
     131: invokevirtual #66                 // Method postWriteCleanup:()V
     134: iload         9
     136: ireturn
     137: aload         7
     139: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     144: astore        7
     146: goto          44
     149: iconst_0
     150: istore        7
     152: aload_0
     153: invokevirtual #65                 // Method unlock:()V
     156: aload_0
     157: invokevirtual #66                 // Method postWriteCleanup:()V
     160: iload         7
     162: ireturn
     163: astore        10
     165: aload_0
     166: invokevirtual #65                 // Method unlock:()V
     169: aload_0
     170: invokevirtual #66                 // Method postWriteCleanup:()V
     173: aload         10
     175: athrow
    Exception table:
       from    to  target type
           4   126   163   any
         137   152   163   any
         163   165   163   any

  boolean reclaimValue(K, int, com.google.common.cache.CustomConcurrentHashMap$ValueReference<K, V>);
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method lock:()V
       4: aload_0
       5: getfield      #44                 // Field count:I
       8: iconst_1
       9: isub
      10: istore        4
      12: aload_0
      13: getfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      16: astore        5
      18: iload_2
      19: aload         5
      21: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      24: iconst_1
      25: isub
      26: iand
      27: istore        6
      29: aload         5
      31: iload         6
      33: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      36: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      39: astore        7
      41: aload         7
      43: astore        8
      45: aload         8
      47: ifnull        218
      50: aload         8
      52: invokeinterface #55,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
      57: astore        9
      59: aload         8
      61: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
      66: iload_2
      67: if_icmpne     206
      70: aload         9
      72: ifnull        206
      75: aload_0
      76: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      79: getfield      #57                 // Field com/google/common/cache/CustomConcurrentHashMap.keyEquivalence:Lcom/google/common/base/Equivalence;
      82: aload_1
      83: aload         9
      85: invokevirtual #58                 // Method com/google/common/base/Equivalence.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z
      88: ifeq          206
      91: aload         8
      93: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      98: astore        10
     100: aload         10
     102: aload_3
     103: if_acmpne     185
     106: aload_0
     107: dup
     108: getfield      #128                // Field modCount:I
     111: iconst_1
     112: iadd
     113: putfield      #128                // Field modCount:I
     116: aload_0
     117: aload_1
     118: iload_2
     119: aload_3
     120: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
     125: getstatic     #60                 // Field com/google/common/cache/RemovalCause.COLLECTED:Lcom/google/common/cache/RemovalCause;
     128: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
     131: aload_0
     132: aload         7
     134: aload         8
     136: invokevirtual #136                // Method removeFromChain:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     139: astore        11
     141: aload_0
     142: getfield      #44                 // Field count:I
     145: iconst_1
     146: isub
     147: istore        4
     149: aload         5
     151: iload         6
     153: aload         11
     155: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicReferenceArray.set:(ILjava/lang/Object;)V
     158: aload_0
     159: iload         4
     161: putfield      #44                 // Field count:I
     164: iconst_1
     165: istore        12
     167: aload_0
     168: invokevirtual #65                 // Method unlock:()V
     171: aload_0
     172: invokevirtual #142                // Method isHeldByCurrentThread:()Z
     175: ifne          182
     178: aload_0
     179: invokevirtual #66                 // Method postWriteCleanup:()V
     182: iload         12
     184: ireturn
     185: iconst_0
     186: istore        11
     188: aload_0
     189: invokevirtual #65                 // Method unlock:()V
     192: aload_0
     193: invokevirtual #142                // Method isHeldByCurrentThread:()Z
     196: ifne          203
     199: aload_0
     200: invokevirtual #66                 // Method postWriteCleanup:()V
     203: iload         11
     205: ireturn
     206: aload         8
     208: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     213: astore        8
     215: goto          45
     218: iconst_0
     219: istore        8
     221: aload_0
     222: invokevirtual #65                 // Method unlock:()V
     225: aload_0
     226: invokevirtual #142                // Method isHeldByCurrentThread:()Z
     229: ifne          236
     232: aload_0
     233: invokevirtual #66                 // Method postWriteCleanup:()V
     236: iload         8
     238: ireturn
     239: astore        13
     241: aload_0
     242: invokevirtual #65                 // Method unlock:()V
     245: aload_0
     246: invokevirtual #142                // Method isHeldByCurrentThread:()Z
     249: ifne          256
     252: aload_0
     253: invokevirtual #66                 // Method postWriteCleanup:()V
     256: aload         13
     258: athrow
    Exception table:
       from    to  target type
           4   167   239   any
         185   188   239   any
         206   221   239   any
         239   241   239   any

  boolean clearValue(K, int, com.google.common.cache.CustomConcurrentHashMap$ValueReference<K, V>);
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method lock:()V
       4: aload_0
       5: getfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
       8: astore        4
      10: iload_2
      11: aload         4
      13: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      16: iconst_1
      17: isub
      18: iand
      19: istore        5
      21: aload         4
      23: iload         5
      25: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      28: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      31: astore        6
      33: aload         6
      35: astore        7
      37: aload         7
      39: ifnull        157
      42: aload         7
      44: invokeinterface #55,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
      49: astore        8
      51: aload         7
      53: invokeinterface #56,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
      58: iload_2
      59: if_icmpne     145
      62: aload         8
      64: ifnull        145
      67: aload_0
      68: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      71: getfield      #57                 // Field com/google/common/cache/CustomConcurrentHashMap.keyEquivalence:Lcom/google/common/base/Equivalence;
      74: aload_1
      75: aload         8
      77: invokevirtual #58                 // Method com/google/common/base/Equivalence.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z
      80: ifeq          145
      83: aload         7
      85: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      90: astore        9
      92: aload         9
      94: aload_3
      95: if_acmpne     131
      98: aload_0
      99: aload         6
     101: aload         7
     103: invokevirtual #136                // Method removeFromChain:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     106: astore        10
     108: aload         4
     110: iload         5
     112: aload         10
     114: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicReferenceArray.set:(ILjava/lang/Object;)V
     117: iconst_1
     118: istore        11
     120: aload_0
     121: invokevirtual #65                 // Method unlock:()V
     124: aload_0
     125: invokevirtual #66                 // Method postWriteCleanup:()V
     128: iload         11
     130: ireturn
     131: iconst_0
     132: istore        10
     134: aload_0
     135: invokevirtual #65                 // Method unlock:()V
     138: aload_0
     139: invokevirtual #66                 // Method postWriteCleanup:()V
     142: iload         10
     144: ireturn
     145: aload         7
     147: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     152: astore        7
     154: goto          37
     157: iconst_0
     158: istore        7
     160: aload_0
     161: invokevirtual #65                 // Method unlock:()V
     164: aload_0
     165: invokevirtual #66                 // Method postWriteCleanup:()V
     168: iload         7
     170: ireturn
     171: astore        12
     173: aload_0
     174: invokevirtual #65                 // Method unlock:()V
     177: aload_0
     178: invokevirtual #66                 // Method postWriteCleanup:()V
     181: aload         12
     183: athrow
    Exception table:
       from    to  target type
           4   120   171   any
         131   134   171   any
         145   160   171   any
         171   173   171   any

  boolean removeEntry(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>, int, com.google.common.cache.RemovalCause);
    Code:
       0: aload_0
       1: getfield      #44                 // Field count:I
       4: iconst_1
       5: isub
       6: istore        4
       8: aload_0
       9: getfield      #33                 // Field table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      12: astore        5
      14: iload_2
      15: aload         5
      17: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      20: iconst_1
      21: isub
      22: iand
      23: istore        6
      25: aload         5
      27: iload         6
      29: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      32: checkcast     #54                 // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      35: astore        7
      37: aload         7
      39: astore        8
      41: aload         8
      43: ifnull        134
      46: aload         8
      48: aload_1
      49: if_acmpne     122
      52: aload_0
      53: dup
      54: getfield      #128                // Field modCount:I
      57: iconst_1
      58: iadd
      59: putfield      #128                // Field modCount:I
      62: aload_0
      63: aload         8
      65: invokeinterface #55,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
      70: iload_2
      71: aload         8
      73: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      78: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
      83: aload_3
      84: invokevirtual #61                 // Method enqueueNotification:(Ljava/lang/Object;ILjava/lang/Object;Lcom/google/common/cache/RemovalCause;)V
      87: aload_0
      88: aload         7
      90: aload         8
      92: invokevirtual #136                // Method removeFromChain:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      95: astore        9
      97: aload_0
      98: getfield      #44                 // Field count:I
     101: iconst_1
     102: isub
     103: istore        4
     105: aload         5
     107: iload         6
     109: aload         9
     111: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicReferenceArray.set:(ILjava/lang/Object;)V
     114: aload_0
     115: iload         4
     117: putfield      #44                 // Field count:I
     120: iconst_1
     121: ireturn
     122: aload         8
     124: invokeinterface #68,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     129: astore        8
     131: goto          41
     134: iconst_0
     135: ireturn

  boolean isCollected(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_1
       1: invokeinterface #55,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
       6: ifnonnull     11
       9: iconst_1
      10: ireturn
      11: aload_0
      12: aload_1
      13: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      18: invokevirtual #135                // Method isCollected:(Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;)Z
      21: ireturn

  boolean isCollected(com.google.common.cache.CustomConcurrentHashMap$ValueReference<K, V>);
    Code:
       0: aload_1
       1: invokeinterface #50,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.isComputingReference:()Z
       6: ifeq          11
       9: iconst_0
      10: ireturn
      11: aload_1
      12: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
      17: ifnonnull     24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  V getLiveValue(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_1
       1: invokeinterface #55,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
       6: ifnonnull     15
       9: aload_0
      10: invokevirtual #123                // Method tryDrainReferenceQueues:()V
      13: aconst_null
      14: areturn
      15: aload_1
      16: invokeinterface #36,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      21: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
      26: astore_2
      27: aload_2
      28: ifnonnull     37
      31: aload_0
      32: invokevirtual #123                // Method tryDrainReferenceQueues:()V
      35: aconst_null
      36: areturn
      37: aload_0
      38: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      41: invokevirtual #25                 // Method com/google/common/cache/CustomConcurrentHashMap.expires:()Z
      44: ifeq          64
      47: aload_0
      48: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      51: aload_1
      52: invokevirtual #62                 // Method com/google/common/cache/CustomConcurrentHashMap.isExpired:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Z
      55: ifeq          64
      58: aload_0
      59: invokevirtual #124                // Method tryExpireEntries:()V
      62: aconst_null
      63: areturn
      64: aload_2
      65: areturn

  void postReadCleanup();
    Code:
       0: aload_0
       1: getfield      #4                  // Field readCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #143                // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
       7: bipush        63
       9: iand
      10: ifne          17
      13: aload_0
      14: invokevirtual #144                // Method cleanUp:()V
      17: return

  void preWriteCleanup();
    Code:
       0: aload_0
       1: invokevirtual #145                // Method runLockedCleanup:()V
       4: return

  void postWriteCleanup();
    Code:
       0: aload_0
       1: invokevirtual #146                // Method runUnlockedCleanup:()V
       4: return

  void cleanUp();
    Code:
       0: aload_0
       1: invokevirtual #145                // Method runLockedCleanup:()V
       4: aload_0
       5: invokevirtual #146                // Method runUnlockedCleanup:()V
       8: return

  void runLockedCleanup();
    Code:
       0: aload_0
       1: invokevirtual #86                 // Method tryLock:()Z
       4: ifeq          37
       7: aload_0
       8: invokevirtual #87                 // Method drainReferenceQueues:()V
      11: aload_0
      12: invokevirtual #106                // Method expireEntries:()V
      15: aload_0
      16: getfield      #4                  // Field readCount:Ljava/util/concurrent/atomic/AtomicInteger;
      19: iconst_0
      20: invokevirtual #141                // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      23: aload_0
      24: invokevirtual #65                 // Method unlock:()V
      27: goto          37
      30: astore_1
      31: aload_0
      32: invokevirtual #65                 // Method unlock:()V
      35: aload_1
      36: athrow
      37: return
    Exception table:
       from    to  target type
           7    23    30   any
          30    31    30   any

  void runUnlockedCleanup();
    Code:
       0: aload_0
       1: invokevirtual #142                // Method isHeldByCurrentThread:()Z
       4: ifne          14
       7: aload_0
       8: getfield      #5                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      11: invokevirtual #147                // Method com/google/common/cache/CustomConcurrentHashMap.processPendingNotifications:()V
      14: return
}
