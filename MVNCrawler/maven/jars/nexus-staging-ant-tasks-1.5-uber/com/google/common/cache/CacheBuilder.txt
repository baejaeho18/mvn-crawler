Compiled from "CacheBuilder.java"
public final class com.google.common.cache.CacheBuilder<K, V> {
  private static final int DEFAULT_INITIAL_CAPACITY;

  private static final int DEFAULT_CONCURRENCY_LEVEL;

  private static final int DEFAULT_EXPIRATION_NANOS;

  static final com.google.common.base.Supplier<? extends com.google.common.cache.AbstractCache$StatsCounter> DEFAULT_STATS_COUNTER;

  static final com.google.common.cache.CacheStats EMPTY_STATS;

  static final com.google.common.base.Supplier<com.google.common.cache.AbstractCache$SimpleStatsCounter> CACHE_STATS_COUNTER;

  static final int UNSET_INT;

  int initialCapacity;

  int concurrencyLevel;

  int maximumSize;

  com.google.common.cache.CustomConcurrentHashMap$Strength keyStrength;

  com.google.common.cache.CustomConcurrentHashMap$Strength valueStrength;

  long expireAfterWriteNanos;

  long expireAfterAccessNanos;

  com.google.common.cache.RemovalCause nullRemovalCause;

  com.google.common.base.Equivalence<java.lang.Object> keyEquivalence;

  com.google.common.base.Equivalence<java.lang.Object> valueEquivalence;

  com.google.common.cache.RemovalListener<? super K, ? super V> removalListener;

  com.google.common.base.Ticker ticker;

  com.google.common.cache.CacheBuilder();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #2                  // Field initialCapacity:I
       9: aload_0
      10: iconst_m1
      11: putfield      #3                  // Field concurrencyLevel:I
      14: aload_0
      15: iconst_m1
      16: putfield      #4                  // Field maximumSize:I
      19: aload_0
      20: ldc2_w        #5                  // long -1l
      23: putfield      #7                  // Field expireAfterWriteNanos:J
      26: aload_0
      27: ldc2_w        #5                  // long -1l
      30: putfield      #8                  // Field expireAfterAccessNanos:J
      33: return

  public static com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> newBuilder();
    Code:
       0: new           #9                  // class com/google/common/cache/CacheBuilder
       3: dup
       4: invokespecial #10                 // Method "<init>":()V
       7: areturn

  private boolean useNullCache();
    Code:
       0: aload_0
       1: getfield      #11                 // Field nullRemovalCause:Lcom/google/common/cache/RemovalCause;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  com.google.common.cache.CacheBuilder<K, V> keyEquivalence(com.google.common.base.Equivalence<java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #12                 // Field keyEquivalence:Lcom/google/common/base/Equivalence;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #13                 // String key equivalence was already set to %s
      14: iconst_1
      15: anewarray     #14                 // class java/lang/Object
      18: dup
      19: iconst_0
      20: aload_0
      21: getfield      #12                 // Field keyEquivalence:Lcom/google/common/base/Equivalence;
      24: aastore
      25: invokestatic  #15                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      28: aload_0
      29: aload_1
      30: invokestatic  #16                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #17                 // class com/google/common/base/Equivalence
      36: putfield      #12                 // Field keyEquivalence:Lcom/google/common/base/Equivalence;
      39: aload_0
      40: areturn

  com.google.common.base.Equivalence<java.lang.Object> getKeyEquivalence();
    Code:
       0: aload_0
       1: getfield      #12                 // Field keyEquivalence:Lcom/google/common/base/Equivalence;
       4: aload_0
       5: invokevirtual #18                 // Method getKeyStrength:()Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       8: invokevirtual #19                 // Method com/google/common/cache/CustomConcurrentHashMap$Strength.defaultEquivalence:()Lcom/google/common/base/Equivalence;
      11: invokestatic  #20                 // Method com/google/common/base/Objects.firstNonNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #17                 // class com/google/common/base/Equivalence
      17: areturn

  com.google.common.cache.CacheBuilder<K, V> valueEquivalence(com.google.common.base.Equivalence<java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #21                 // Field valueEquivalence:Lcom/google/common/base/Equivalence;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #22                 // String value equivalence was already set to %s
      14: iconst_1
      15: anewarray     #14                 // class java/lang/Object
      18: dup
      19: iconst_0
      20: aload_0
      21: getfield      #21                 // Field valueEquivalence:Lcom/google/common/base/Equivalence;
      24: aastore
      25: invokestatic  #15                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      28: aload_0
      29: aload_1
      30: invokestatic  #16                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #17                 // class com/google/common/base/Equivalence
      36: putfield      #21                 // Field valueEquivalence:Lcom/google/common/base/Equivalence;
      39: aload_0
      40: areturn

  com.google.common.base.Equivalence<java.lang.Object> getValueEquivalence();
    Code:
       0: aload_0
       1: getfield      #21                 // Field valueEquivalence:Lcom/google/common/base/Equivalence;
       4: aload_0
       5: invokevirtual #23                 // Method getValueStrength:()Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       8: invokevirtual #19                 // Method com/google/common/cache/CustomConcurrentHashMap$Strength.defaultEquivalence:()Lcom/google/common/base/Equivalence;
      11: invokestatic  #20                 // Method com/google/common/base/Objects.firstNonNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #17                 // class com/google/common/base/Equivalence
      17: areturn

  public com.google.common.cache.CacheBuilder<K, V> initialCapacity(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field initialCapacity:I
       4: iconst_m1
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ldc           #24                 // String initial capacity was already set to %s
      15: iconst_1
      16: anewarray     #14                 // class java/lang/Object
      19: dup
      20: iconst_0
      21: aload_0
      22: getfield      #2                  // Field initialCapacity:I
      25: invokestatic  #25                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      28: aastore
      29: invokestatic  #15                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      32: iload_1
      33: iflt          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: invokestatic  #26                 // Method com/google/common/base/Preconditions.checkArgument:(Z)V
      44: aload_0
      45: iload_1
      46: putfield      #2                  // Field initialCapacity:I
      49: aload_0
      50: areturn

  int getInitialCapacity();
    Code:
       0: aload_0
       1: getfield      #2                  // Field initialCapacity:I
       4: iconst_m1
       5: if_icmpne     13
       8: bipush        16
      10: goto          17
      13: aload_0
      14: getfield      #2                  // Field initialCapacity:I
      17: ireturn

  public com.google.common.cache.CacheBuilder<K, V> concurrencyLevel(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field concurrencyLevel:I
       4: iconst_m1
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ldc           #27                 // String concurrency level was already set to %s
      15: iconst_1
      16: anewarray     #14                 // class java/lang/Object
      19: dup
      20: iconst_0
      21: aload_0
      22: getfield      #3                  // Field concurrencyLevel:I
      25: invokestatic  #25                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      28: aastore
      29: invokestatic  #15                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      32: iload_1
      33: ifle          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: invokestatic  #26                 // Method com/google/common/base/Preconditions.checkArgument:(Z)V
      44: aload_0
      45: iload_1
      46: putfield      #3                  // Field concurrencyLevel:I
      49: aload_0
      50: areturn

  int getConcurrencyLevel();
    Code:
       0: aload_0
       1: getfield      #3                  // Field concurrencyLevel:I
       4: iconst_m1
       5: if_icmpne     12
       8: iconst_4
       9: goto          16
      12: aload_0
      13: getfield      #3                  // Field concurrencyLevel:I
      16: ireturn

  public com.google.common.cache.CacheBuilder<K, V> maximumSize(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field maximumSize:I
       4: iconst_m1
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ldc           #28                 // String maximum size was already set to %s
      15: iconst_1
      16: anewarray     #14                 // class java/lang/Object
      19: dup
      20: iconst_0
      21: aload_0
      22: getfield      #4                  // Field maximumSize:I
      25: invokestatic  #25                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      28: aastore
      29: invokestatic  #15                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      32: iload_1
      33: iflt          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: ldc           #29                 // String maximum size must not be negative
      43: invokestatic  #30                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      46: aload_0
      47: iload_1
      48: putfield      #4                  // Field maximumSize:I
      51: aload_0
      52: getfield      #4                  // Field maximumSize:I
      55: ifne          65
      58: aload_0
      59: getstatic     #31                 // Field com/google/common/cache/RemovalCause.SIZE:Lcom/google/common/cache/RemovalCause;
      62: putfield      #11                 // Field nullRemovalCause:Lcom/google/common/cache/RemovalCause;
      65: aload_0
      66: areturn

  com.google.common.cache.CacheBuilder<K, V> strongKeys();
    Code:
       0: aload_0
       1: getstatic     #32                 // Field com/google/common/cache/CustomConcurrentHashMap$Strength.STRONG:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       4: invokevirtual #33                 // Method setKeyStrength:(Lcom/google/common/cache/CustomConcurrentHashMap$Strength;)Lcom/google/common/cache/CacheBuilder;
       7: areturn

  public com.google.common.cache.CacheBuilder<K, V> weakKeys();
    Code:
       0: aload_0
       1: getstatic     #34                 // Field com/google/common/cache/CustomConcurrentHashMap$Strength.WEAK:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       4: invokevirtual #33                 // Method setKeyStrength:(Lcom/google/common/cache/CustomConcurrentHashMap$Strength;)Lcom/google/common/cache/CacheBuilder;
       7: areturn

  com.google.common.cache.CacheBuilder<K, V> setKeyStrength(com.google.common.cache.CustomConcurrentHashMap$Strength);
    Code:
       0: aload_0
       1: getfield      #35                 // Field keyStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #36                 // String Key strength was already set to %s
      14: iconst_1
      15: anewarray     #14                 // class java/lang/Object
      18: dup
      19: iconst_0
      20: aload_0
      21: getfield      #35                 // Field keyStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
      24: aastore
      25: invokestatic  #15                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      28: aload_0
      29: aload_1
      30: invokestatic  #16                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #37                 // class com/google/common/cache/CustomConcurrentHashMap$Strength
      36: putfield      #35                 // Field keyStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
      39: aload_0
      40: areturn

  com.google.common.cache.CustomConcurrentHashMap$Strength getKeyStrength();
    Code:
       0: aload_0
       1: getfield      #35                 // Field keyStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       4: getstatic     #32                 // Field com/google/common/cache/CustomConcurrentHashMap$Strength.STRONG:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       7: invokestatic  #20                 // Method com/google/common/base/Objects.firstNonNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #37                 // class com/google/common/cache/CustomConcurrentHashMap$Strength
      13: areturn

  com.google.common.cache.CacheBuilder<K, V> strongValues();
    Code:
       0: aload_0
       1: getstatic     #32                 // Field com/google/common/cache/CustomConcurrentHashMap$Strength.STRONG:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       4: invokevirtual #38                 // Method setValueStrength:(Lcom/google/common/cache/CustomConcurrentHashMap$Strength;)Lcom/google/common/cache/CacheBuilder;
       7: areturn

  public com.google.common.cache.CacheBuilder<K, V> weakValues();
    Code:
       0: aload_0
       1: getstatic     #34                 // Field com/google/common/cache/CustomConcurrentHashMap$Strength.WEAK:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       4: invokevirtual #38                 // Method setValueStrength:(Lcom/google/common/cache/CustomConcurrentHashMap$Strength;)Lcom/google/common/cache/CacheBuilder;
       7: areturn

  public com.google.common.cache.CacheBuilder<K, V> softValues();
    Code:
       0: aload_0
       1: getstatic     #39                 // Field com/google/common/cache/CustomConcurrentHashMap$Strength.SOFT:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       4: invokevirtual #38                 // Method setValueStrength:(Lcom/google/common/cache/CustomConcurrentHashMap$Strength;)Lcom/google/common/cache/CacheBuilder;
       7: areturn

  com.google.common.cache.CacheBuilder<K, V> setValueStrength(com.google.common.cache.CustomConcurrentHashMap$Strength);
    Code:
       0: aload_0
       1: getfield      #40                 // Field valueStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #41                 // String Value strength was already set to %s
      14: iconst_1
      15: anewarray     #14                 // class java/lang/Object
      18: dup
      19: iconst_0
      20: aload_0
      21: getfield      #40                 // Field valueStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
      24: aastore
      25: invokestatic  #15                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      28: aload_0
      29: aload_1
      30: invokestatic  #16                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #37                 // class com/google/common/cache/CustomConcurrentHashMap$Strength
      36: putfield      #40                 // Field valueStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
      39: aload_0
      40: areturn

  com.google.common.cache.CustomConcurrentHashMap$Strength getValueStrength();
    Code:
       0: aload_0
       1: getfield      #40                 // Field valueStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       4: getstatic     #32                 // Field com/google/common/cache/CustomConcurrentHashMap$Strength.STRONG:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       7: invokestatic  #20                 // Method com/google/common/base/Objects.firstNonNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #37                 // class com/google/common/cache/CustomConcurrentHashMap$Strength
      13: areturn

  public com.google.common.cache.CacheBuilder<K, V> expireAfterWrite(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: invokespecial #42                 // Method checkExpiration:(JLjava/util/concurrent/TimeUnit;)V
       6: aload_0
       7: aload_3
       8: lload_1
       9: invokevirtual #43                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      12: putfield      #7                  // Field expireAfterWriteNanos:J
      15: lload_1
      16: lconst_0
      17: lcmp
      18: ifne          35
      21: aload_0
      22: getfield      #11                 // Field nullRemovalCause:Lcom/google/common/cache/RemovalCause;
      25: ifnonnull     35
      28: aload_0
      29: getstatic     #44                 // Field com/google/common/cache/RemovalCause.EXPIRED:Lcom/google/common/cache/RemovalCause;
      32: putfield      #11                 // Field nullRemovalCause:Lcom/google/common/cache/RemovalCause;
      35: aload_0
      36: areturn

  private void checkExpiration(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #7                  // Field expireAfterWriteNanos:J
       4: ldc2_w        #5                  // long -1l
       7: lcmp
       8: ifne          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ldc           #45                 // String expireAfterWrite was already set to %s ns
      18: iconst_1
      19: anewarray     #14                 // class java/lang/Object
      22: dup
      23: iconst_0
      24: aload_0
      25: getfield      #7                  // Field expireAfterWriteNanos:J
      28: invokestatic  #46                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      31: aastore
      32: invokestatic  #15                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      35: aload_0
      36: getfield      #8                  // Field expireAfterAccessNanos:J
      39: ldc2_w        #5                  // long -1l
      42: lcmp
      43: ifne          50
      46: iconst_1
      47: goto          51
      50: iconst_0
      51: ldc           #47                 // String expireAfterAccess was already set to %s ns
      53: iconst_1
      54: anewarray     #14                 // class java/lang/Object
      57: dup
      58: iconst_0
      59: aload_0
      60: getfield      #8                  // Field expireAfterAccessNanos:J
      63: invokestatic  #46                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      66: aastore
      67: invokestatic  #15                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/String;[Ljava/lang/Object;)V
      70: lload_1
      71: lconst_0
      72: lcmp
      73: iflt          80
      76: iconst_1
      77: goto          81
      80: iconst_0
      81: ldc           #48                 // String duration cannot be negative: %s %s
      83: iconst_2
      84: anewarray     #14                 // class java/lang/Object
      87: dup
      88: iconst_0
      89: lload_1
      90: invokestatic  #46                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      93: aastore
      94: dup
      95: iconst_1
      96: aload_3
      97: aastore
      98: invokestatic  #49                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
     101: return

  long getExpireAfterWriteNanos();
    Code:
       0: aload_0
       1: getfield      #7                  // Field expireAfterWriteNanos:J
       4: ldc2_w        #5                  // long -1l
       7: lcmp
       8: ifne          15
      11: lconst_0
      12: goto          19
      15: aload_0
      16: getfield      #7                  // Field expireAfterWriteNanos:J
      19: lreturn

  public com.google.common.cache.CacheBuilder<K, V> expireAfterAccess(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: invokespecial #42                 // Method checkExpiration:(JLjava/util/concurrent/TimeUnit;)V
       6: aload_0
       7: aload_3
       8: lload_1
       9: invokevirtual #43                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      12: putfield      #8                  // Field expireAfterAccessNanos:J
      15: lload_1
      16: lconst_0
      17: lcmp
      18: ifne          35
      21: aload_0
      22: getfield      #11                 // Field nullRemovalCause:Lcom/google/common/cache/RemovalCause;
      25: ifnonnull     35
      28: aload_0
      29: getstatic     #44                 // Field com/google/common/cache/RemovalCause.EXPIRED:Lcom/google/common/cache/RemovalCause;
      32: putfield      #11                 // Field nullRemovalCause:Lcom/google/common/cache/RemovalCause;
      35: aload_0
      36: areturn

  long getExpireAfterAccessNanos();
    Code:
       0: aload_0
       1: getfield      #8                  // Field expireAfterAccessNanos:J
       4: ldc2_w        #5                  // long -1l
       7: lcmp
       8: ifne          15
      11: lconst_0
      12: goto          19
      15: aload_0
      16: getfield      #8                  // Field expireAfterAccessNanos:J
      19: lreturn

  public com.google.common.cache.CacheBuilder<K, V> ticker(com.google.common.base.Ticker);
    Code:
       0: aload_0
       1: getfield      #50                 // Field ticker:Lcom/google/common/base/Ticker;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #51                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      15: aload_0
      16: aload_1
      17: invokestatic  #16                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      20: checkcast     #52                 // class com/google/common/base/Ticker
      23: putfield      #50                 // Field ticker:Lcom/google/common/base/Ticker;
      26: aload_0
      27: areturn

  com.google.common.base.Ticker getTicker();
    Code:
       0: aload_0
       1: getfield      #50                 // Field ticker:Lcom/google/common/base/Ticker;
       4: invokestatic  #53                 // Method com/google/common/base/Ticker.systemTicker:()Lcom/google/common/base/Ticker;
       7: invokestatic  #20                 // Method com/google/common/base/Objects.firstNonNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #52                 // class com/google/common/base/Ticker
      13: areturn

  public <K1 extends K, V1 extends V> com.google.common.cache.CacheBuilder<K1, V1> removalListener(com.google.common.cache.RemovalListener<? super K1, ? super V1>);
    Code:
       0: aload_0
       1: getfield      #54                 // Field removalListener:Lcom/google/common/cache/RemovalListener;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #51                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      15: aload_0
      16: astore_2
      17: aload_2
      18: aload_1
      19: invokestatic  #16                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #55                 // class com/google/common/cache/RemovalListener
      25: putfield      #54                 // Field removalListener:Lcom/google/common/cache/RemovalListener;
      28: aload_2
      29: areturn

  <K1 extends K, V1 extends V> com.google.common.cache.RemovalListener<K1, V1> getRemovalListener();
    Code:
       0: aload_0
       1: getfield      #54                 // Field removalListener:Lcom/google/common/cache/RemovalListener;
       4: getstatic     #56                 // Field com/google/common/cache/CacheBuilder$NullListener.INSTANCE:Lcom/google/common/cache/CacheBuilder$NullListener;
       7: invokestatic  #20                 // Method com/google/common/base/Objects.firstNonNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #55                 // class com/google/common/cache/RemovalListener
      13: areturn

  public <K1 extends K, V1 extends V> com.google.common.cache.Cache<K1, V1> build(com.google.common.cache.CacheLoader<? super K1, V1>);
    Code:
       0: aload_0
       1: invokespecial #57                 // Method useNullCache:()Z
       4: ifeq          22
       7: new           #58                 // class com/google/common/cache/ComputingCache
      10: dup
      11: aload_0
      12: getstatic     #59                 // Field CACHE_STATS_COUNTER:Lcom/google/common/base/Supplier;
      15: aload_1
      16: invokespecial #60                 // Method com/google/common/cache/ComputingCache."<init>":(Lcom/google/common/cache/CacheBuilder;Lcom/google/common/base/Supplier;Lcom/google/common/cache/CacheLoader;)V
      19: goto          34
      22: new           #61                 // class com/google/common/cache/CacheBuilder$NullCache
      25: dup
      26: aload_0
      27: getstatic     #59                 // Field CACHE_STATS_COUNTER:Lcom/google/common/base/Supplier;
      30: aload_1
      31: invokespecial #62                 // Method com/google/common/cache/CacheBuilder$NullCache."<init>":(Lcom/google/common/cache/CacheBuilder;Lcom/google/common/base/Supplier;Lcom/google/common/cache/CacheLoader;)V
      34: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #63                 // Method com/google/common/base/Objects.toStringHelper:(Ljava/lang/Object;)Lcom/google/common/base/Objects$ToStringHelper;
       4: astore_1
       5: aload_0
       6: getfield      #2                  // Field initialCapacity:I
       9: iconst_m1
      10: if_icmpeq     27
      13: aload_1
      14: ldc           #64                 // String initialCapacity
      16: aload_0
      17: getfield      #2                  // Field initialCapacity:I
      20: invokestatic  #25                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      23: invokevirtual #65                 // Method com/google/common/base/Objects$ToStringHelper.add:(Ljava/lang/String;Ljava/lang/Object;)Lcom/google/common/base/Objects$ToStringHelper;
      26: pop
      27: aload_0
      28: getfield      #3                  // Field concurrencyLevel:I
      31: iconst_m1
      32: if_icmpeq     49
      35: aload_1
      36: ldc           #66                 // String concurrencyLevel
      38: aload_0
      39: getfield      #3                  // Field concurrencyLevel:I
      42: invokestatic  #25                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      45: invokevirtual #65                 // Method com/google/common/base/Objects$ToStringHelper.add:(Ljava/lang/String;Ljava/lang/Object;)Lcom/google/common/base/Objects$ToStringHelper;
      48: pop
      49: aload_0
      50: getfield      #4                  // Field maximumSize:I
      53: iconst_m1
      54: if_icmpeq     71
      57: aload_1
      58: ldc           #67                 // String maximumSize
      60: aload_0
      61: getfield      #4                  // Field maximumSize:I
      64: invokestatic  #25                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      67: invokevirtual #65                 // Method com/google/common/base/Objects$ToStringHelper.add:(Ljava/lang/String;Ljava/lang/Object;)Lcom/google/common/base/Objects$ToStringHelper;
      70: pop
      71: aload_0
      72: getfield      #7                  // Field expireAfterWriteNanos:J
      75: ldc2_w        #5                  // long -1l
      78: lcmp
      79: ifeq          111
      82: aload_1
      83: ldc           #68                 // String expireAfterWrite
      85: new           #69                 // class java/lang/StringBuilder
      88: dup
      89: invokespecial #70                 // Method java/lang/StringBuilder."<init>":()V
      92: aload_0
      93: getfield      #7                  // Field expireAfterWriteNanos:J
      96: invokevirtual #71                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      99: ldc           #72                 // String ns
     101: invokevirtual #73                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     104: invokevirtual #74                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     107: invokevirtual #65                 // Method com/google/common/base/Objects$ToStringHelper.add:(Ljava/lang/String;Ljava/lang/Object;)Lcom/google/common/base/Objects$ToStringHelper;
     110: pop
     111: aload_0
     112: getfield      #8                  // Field expireAfterAccessNanos:J
     115: ldc2_w        #5                  // long -1l
     118: lcmp
     119: ifeq          151
     122: aload_1
     123: ldc           #75                 // String expireAfterAccess
     125: new           #69                 // class java/lang/StringBuilder
     128: dup
     129: invokespecial #70                 // Method java/lang/StringBuilder."<init>":()V
     132: aload_0
     133: getfield      #8                  // Field expireAfterAccessNanos:J
     136: invokevirtual #71                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     139: ldc           #72                 // String ns
     141: invokevirtual #73                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     144: invokevirtual #74                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     147: invokevirtual #65                 // Method com/google/common/base/Objects$ToStringHelper.add:(Ljava/lang/String;Ljava/lang/Object;)Lcom/google/common/base/Objects$ToStringHelper;
     150: pop
     151: aload_0
     152: getfield      #35                 // Field keyStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
     155: ifnull        175
     158: aload_1
     159: ldc           #76                 // String keyStrength
     161: aload_0
     162: getfield      #35                 // Field keyStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
     165: invokevirtual #77                 // Method com/google/common/cache/CustomConcurrentHashMap$Strength.toString:()Ljava/lang/String;
     168: invokestatic  #78                 // Method com/google/common/base/Ascii.toLowerCase:(Ljava/lang/String;)Ljava/lang/String;
     171: invokevirtual #65                 // Method com/google/common/base/Objects$ToStringHelper.add:(Ljava/lang/String;Ljava/lang/Object;)Lcom/google/common/base/Objects$ToStringHelper;
     174: pop
     175: aload_0
     176: getfield      #40                 // Field valueStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
     179: ifnull        199
     182: aload_1
     183: ldc           #79                 // String valueStrength
     185: aload_0
     186: getfield      #40                 // Field valueStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
     189: invokevirtual #77                 // Method com/google/common/cache/CustomConcurrentHashMap$Strength.toString:()Ljava/lang/String;
     192: invokestatic  #78                 // Method com/google/common/base/Ascii.toLowerCase:(Ljava/lang/String;)Ljava/lang/String;
     195: invokevirtual #65                 // Method com/google/common/base/Objects$ToStringHelper.add:(Ljava/lang/String;Ljava/lang/Object;)Lcom/google/common/base/Objects$ToStringHelper;
     198: pop
     199: aload_0
     200: getfield      #12                 // Field keyEquivalence:Lcom/google/common/base/Equivalence;
     203: ifnull        213
     206: aload_1
     207: ldc           #80                 // String keyEquivalence
     209: invokevirtual #81                 // Method com/google/common/base/Objects$ToStringHelper.addValue:(Ljava/lang/Object;)Lcom/google/common/base/Objects$ToStringHelper;
     212: pop
     213: aload_0
     214: getfield      #21                 // Field valueEquivalence:Lcom/google/common/base/Equivalence;
     217: ifnull        227
     220: aload_1
     221: ldc           #82                 // String valueEquivalence
     223: invokevirtual #81                 // Method com/google/common/base/Objects$ToStringHelper.addValue:(Ljava/lang/Object;)Lcom/google/common/base/Objects$ToStringHelper;
     226: pop
     227: aload_0
     228: getfield      #54                 // Field removalListener:Lcom/google/common/cache/RemovalListener;
     231: ifnull        241
     234: aload_1
     235: ldc           #83                 // String removalListener
     237: invokevirtual #81                 // Method com/google/common/base/Objects$ToStringHelper.addValue:(Ljava/lang/Object;)Lcom/google/common/base/Objects$ToStringHelper;
     240: pop
     241: aload_1
     242: invokevirtual #84                 // Method com/google/common/base/Objects$ToStringHelper.toString:()Ljava/lang/String;
     245: areturn

  static {};
    Code:
       0: new           #85                 // class com/google/common/cache/CacheBuilder$1
       3: dup
       4: invokespecial #86                 // Method com/google/common/cache/CacheBuilder$1."<init>":()V
       7: invokestatic  #87                 // Method com/google/common/base/Suppliers.ofInstance:(Ljava/lang/Object;)Lcom/google/common/base/Supplier;
      10: putstatic     #88                 // Field DEFAULT_STATS_COUNTER:Lcom/google/common/base/Supplier;
      13: new           #89                 // class com/google/common/cache/CacheStats
      16: dup
      17: lconst_0
      18: lconst_0
      19: lconst_0
      20: lconst_0
      21: lconst_0
      22: lconst_0
      23: invokespecial #90                 // Method com/google/common/cache/CacheStats."<init>":(JJJJJJ)V
      26: putstatic     #91                 // Field EMPTY_STATS:Lcom/google/common/cache/CacheStats;
      29: new           #92                 // class com/google/common/cache/CacheBuilder$2
      32: dup
      33: invokespecial #93                 // Method com/google/common/cache/CacheBuilder$2."<init>":()V
      36: putstatic     #59                 // Field CACHE_STATS_COUNTER:Lcom/google/common/base/Supplier;
      39: return
}
