Compiled from "CustomConcurrentHashMap.java"
class com.google.common.collect.CustomConcurrentHashMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.concurrent.ConcurrentMap<K, V>, java.io.Serializable {
  static final int MAXIMUM_CAPACITY;

  static final int MAX_SEGMENTS;

  static final int CONTAINS_VALUE_RETRIES;

  static final int DRAIN_THRESHOLD;

  static final int DRAIN_MAX;

  static final long CLEANUP_EXECUTOR_DELAY_SECS;

  private static final java.util.logging.Logger logger;

  final transient int segmentMask;

  final transient int segmentShift;

  final transient com.google.common.collect.CustomConcurrentHashMap$Segment<K, V>[] segments;

  final int concurrencyLevel;

  final com.google.common.base.Equivalence<java.lang.Object> keyEquivalence;

  final com.google.common.base.Equivalence<java.lang.Object> valueEquivalence;

  final com.google.common.collect.CustomConcurrentHashMap$Strength keyStrength;

  final com.google.common.collect.CustomConcurrentHashMap$Strength valueStrength;

  final int maximumSize;

  final long expireAfterAccessNanos;

  final long expireAfterWriteNanos;

  final java.util.Queue<com.google.common.collect.MapMaker$RemovalNotification<K, V>> removalNotificationQueue;

  final com.google.common.collect.MapMaker$RemovalListener<K, V> removalListener;

  final transient com.google.common.collect.CustomConcurrentHashMap$EntryFactory entryFactory;

  final com.google.common.base.Ticker ticker;

  static final com.google.common.collect.CustomConcurrentHashMap$ValueReference<java.lang.Object, java.lang.Object> UNSET;

  static final java.util.Queue<? extends java.lang.Object> DISCARDING_QUEUE;

  java.util.Set<K> keySet;

  java.util.Collection<V> values;

  java.util.Set<java.util.Map$Entry<K, V>> entrySet;

  private static final long serialVersionUID;

  com.google.common.collect.CustomConcurrentHashMap(com.google.common.collect.MapMaker);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/util/AbstractMap."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #4                  // Method com/google/common/collect/MapMaker.getConcurrencyLevel:()I
       9: ldc           #5                  // int 65536
      11: invokestatic  #6                  // Method java/lang/Math.min:(II)I
      14: putfield      #7                  // Field concurrencyLevel:I
      17: aload_0
      18: aload_1
      19: invokevirtual #8                  // Method com/google/common/collect/MapMaker.getKeyStrength:()Lcom/google/common/collect/CustomConcurrentHashMap$Strength;
      22: putfield      #9                  // Field keyStrength:Lcom/google/common/collect/CustomConcurrentHashMap$Strength;
      25: aload_0
      26: aload_1
      27: invokevirtual #10                 // Method com/google/common/collect/MapMaker.getValueStrength:()Lcom/google/common/collect/CustomConcurrentHashMap$Strength;
      30: putfield      #11                 // Field valueStrength:Lcom/google/common/collect/CustomConcurrentHashMap$Strength;
      33: aload_0
      34: aload_1
      35: invokevirtual #12                 // Method com/google/common/collect/MapMaker.getKeyEquivalence:()Lcom/google/common/base/Equivalence;
      38: putfield      #13                 // Field keyEquivalence:Lcom/google/common/base/Equivalence;
      41: aload_0
      42: aload_1
      43: invokevirtual #14                 // Method com/google/common/collect/MapMaker.getValueEquivalence:()Lcom/google/common/base/Equivalence;
      46: putfield      #15                 // Field valueEquivalence:Lcom/google/common/base/Equivalence;
      49: aload_0
      50: aload_1
      51: getfield      #16                 // Field com/google/common/collect/MapMaker.maximumSize:I
      54: putfield      #17                 // Field maximumSize:I
      57: aload_0
      58: aload_1
      59: invokevirtual #18                 // Method com/google/common/collect/MapMaker.getExpireAfterAccessNanos:()J
      62: putfield      #19                 // Field expireAfterAccessNanos:J
      65: aload_0
      66: aload_1
      67: invokevirtual #20                 // Method com/google/common/collect/MapMaker.getExpireAfterWriteNanos:()J
      70: putfield      #21                 // Field expireAfterWriteNanos:J
      73: aload_0
      74: aload_0
      75: getfield      #9                  // Field keyStrength:Lcom/google/common/collect/CustomConcurrentHashMap$Strength;
      78: aload_0
      79: invokevirtual #22                 // Method expires:()Z
      82: aload_0
      83: invokevirtual #23                 // Method evictsBySize:()Z
      86: invokestatic  #24                 // Method com/google/common/collect/CustomConcurrentHashMap$EntryFactory.getFactory:(Lcom/google/common/collect/CustomConcurrentHashMap$Strength;ZZ)Lcom/google/common/collect/CustomConcurrentHashMap$EntryFactory;
      89: putfield      #25                 // Field entryFactory:Lcom/google/common/collect/CustomConcurrentHashMap$EntryFactory;
      92: aload_0
      93: aload_1
      94: invokevirtual #26                 // Method com/google/common/collect/MapMaker.getTicker:()Lcom/google/common/base/Ticker;
      97: putfield      #27                 // Field ticker:Lcom/google/common/base/Ticker;
     100: aload_0
     101: aload_1
     102: invokevirtual #28                 // Method com/google/common/collect/MapMaker.getRemovalListener:()Lcom/google/common/collect/MapMaker$RemovalListener;
     105: putfield      #29                 // Field removalListener:Lcom/google/common/collect/MapMaker$RemovalListener;
     108: aload_0
     109: aload_0
     110: getfield      #29                 // Field removalListener:Lcom/google/common/collect/MapMaker$RemovalListener;
     113: getstatic     #30                 // Field com/google/common/collect/GenericMapMaker$NullListener.INSTANCE:Lcom/google/common/collect/GenericMapMaker$NullListener;
     116: if_acmpne     125
     119: invokestatic  #31                 // Method discardingQueue:()Ljava/util/Queue;
     122: goto          132
     125: new           #32                 // class java/util/concurrent/ConcurrentLinkedQueue
     128: dup
     129: invokespecial #33                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
     132: putfield      #34                 // Field removalNotificationQueue:Ljava/util/Queue;
     135: aload_1
     136: invokevirtual #35                 // Method com/google/common/collect/MapMaker.getInitialCapacity:()I
     139: ldc           #36                 // int 1073741824
     141: invokestatic  #6                  // Method java/lang/Math.min:(II)I
     144: istore_2
     145: aload_0
     146: invokevirtual #23                 // Method evictsBySize:()Z
     149: ifeq          161
     152: iload_2
     153: aload_0
     154: getfield      #17                 // Field maximumSize:I
     157: invokestatic  #6                  // Method java/lang/Math.min:(II)I
     160: istore_2
     161: iconst_0
     162: istore_3
     163: iconst_1
     164: istore        4
     166: iload         4
     168: aload_0
     169: getfield      #7                  // Field concurrencyLevel:I
     172: if_icmpge     205
     175: aload_0
     176: invokevirtual #23                 // Method evictsBySize:()Z
     179: ifeq          193
     182: iload         4
     184: iconst_2
     185: imul
     186: aload_0
     187: getfield      #17                 // Field maximumSize:I
     190: if_icmpgt     205
     193: iinc          3, 1
     196: iload         4
     198: iconst_1
     199: ishl
     200: istore        4
     202: goto          166
     205: aload_0
     206: bipush        32
     208: iload_3
     209: isub
     210: putfield      #37                 // Field segmentShift:I
     213: aload_0
     214: iload         4
     216: iconst_1
     217: isub
     218: putfield      #38                 // Field segmentMask:I
     221: aload_0
     222: aload_0
     223: iload         4
     225: invokevirtual #39                 // Method newSegmentArray:(I)[Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
     228: putfield      #40                 // Field segments:[Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
     231: iload_2
     232: iload         4
     234: idiv
     235: istore        5
     237: iload         5
     239: iload         4
     241: imul
     242: iload_2
     243: if_icmpge     249
     246: iinc          5, 1
     249: iconst_1
     250: istore        6
     252: iload         6
     254: iload         5
     256: if_icmpge     268
     259: iload         6
     261: iconst_1
     262: ishl
     263: istore        6
     265: goto          252
     268: aload_0
     269: invokevirtual #23                 // Method evictsBySize:()Z
     272: ifeq          342
     275: aload_0
     276: getfield      #17                 // Field maximumSize:I
     279: iload         4
     281: idiv
     282: iconst_1
     283: iadd
     284: istore        7
     286: aload_0
     287: getfield      #17                 // Field maximumSize:I
     290: iload         4
     292: irem
     293: istore        8
     295: iconst_0
     296: istore        9
     298: iload         9
     300: aload_0
     301: getfield      #40                 // Field segments:[Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
     304: arraylength
     305: if_icmpge     339
     308: iload         9
     310: iload         8
     312: if_icmpne     318
     315: iinc          7, -1
     318: aload_0
     319: getfield      #40                 // Field segments:[Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
     322: iload         9
     324: aload_0
     325: iload         6
     327: iload         7
     329: invokevirtual #41                 // Method createSegment:(II)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
     332: aastore
     333: iinc          9, 1
     336: goto          298
     339: goto          375
     342: iconst_0
     343: istore        7
     345: iload         7
     347: aload_0
     348: getfield      #40                 // Field segments:[Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
     351: arraylength
     352: if_icmpge     375
     355: aload_0
     356: getfield      #40                 // Field segments:[Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
     359: iload         7
     361: aload_0
     362: iload         6
     364: iconst_m1
     365: invokevirtual #41                 // Method createSegment:(II)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
     368: aastore
     369: iinc          7, 1
     372: goto          345
     375: return

  boolean evictsBySize();
    Code:
       0: aload_0
       1: getfield      #17                 // Field maximumSize:I
       4: iconst_m1
       5: if_icmpeq     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  boolean expires();
    Code:
       0: aload_0
       1: invokevirtual #42                 // Method expiresAfterWrite:()Z
       4: ifne          14
       7: aload_0
       8: invokevirtual #43                 // Method expiresAfterAccess:()Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  boolean expiresAfterWrite();
    Code:
       0: aload_0
       1: getfield      #21                 // Field expireAfterWriteNanos:J
       4: lconst_0
       5: lcmp
       6: ifle          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  boolean expiresAfterAccess();
    Code:
       0: aload_0
       1: getfield      #19                 // Field expireAfterAccessNanos:J
       4: lconst_0
       5: lcmp
       6: ifle          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  boolean usesKeyReferences();
    Code:
       0: aload_0
       1: getfield      #9                  // Field keyStrength:Lcom/google/common/collect/CustomConcurrentHashMap$Strength;
       4: getstatic     #44                 // Field com/google/common/collect/CustomConcurrentHashMap$Strength.STRONG:Lcom/google/common/collect/CustomConcurrentHashMap$Strength;
       7: if_acmpeq     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  boolean usesValueReferences();
    Code:
       0: aload_0
       1: getfield      #11                 // Field valueStrength:Lcom/google/common/collect/CustomConcurrentHashMap$Strength;
       4: getstatic     #44                 // Field com/google/common/collect/CustomConcurrentHashMap$Strength.STRONG:Lcom/google/common/collect/CustomConcurrentHashMap$Strength;
       7: if_acmpeq     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  static <K, V> com.google.common.collect.CustomConcurrentHashMap$ValueReference<K, V> unset();
    Code:
       0: getstatic     #45                 // Field UNSET:Lcom/google/common/collect/CustomConcurrentHashMap$ValueReference;
       3: areturn

  static <K, V> com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V> nullEntry();
    Code:
       0: getstatic     #46                 // Field com/google/common/collect/CustomConcurrentHashMap$NullEntry.INSTANCE:Lcom/google/common/collect/CustomConcurrentHashMap$NullEntry;
       3: areturn

  static <E> java.util.Queue<E> discardingQueue();
    Code:
       0: getstatic     #47                 // Field DISCARDING_QUEUE:Ljava/util/Queue;
       3: areturn

  static int rehash(int);
    Code:
       0: iload_0
       1: iload_0
       2: bipush        15
       4: ishl
       5: sipush        -12931
       8: ixor
       9: iadd
      10: istore_0
      11: iload_0
      12: iload_0
      13: bipush        10
      15: iushr
      16: ixor
      17: istore_0
      18: iload_0
      19: iload_0
      20: iconst_3
      21: ishl
      22: iadd
      23: istore_0
      24: iload_0
      25: iload_0
      26: bipush        6
      28: iushr
      29: ixor
      30: istore_0
      31: iload_0
      32: iload_0
      33: iconst_2
      34: ishl
      35: iload_0
      36: bipush        14
      38: ishl
      39: iadd
      40: iadd
      41: istore_0
      42: iload_0
      43: iload_0
      44: bipush        16
      46: iushr
      47: ixor
      48: ireturn

  com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V> newEntry(K, int, com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: iload_2
       2: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
       5: aload_1
       6: iload_2
       7: aload_3
       8: invokevirtual #49                 // Method com/google/common/collect/CustomConcurrentHashMap$Segment.newEntry:(Ljava/lang/Object;ILcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;
      11: areturn

  com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V> copyEntry(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>, com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_1
       1: invokeinterface #50,  1           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
       6: istore_3
       7: aload_0
       8: iload_3
       9: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      12: aload_1
      13: aload_2
      14: invokevirtual #51                 // Method com/google/common/collect/CustomConcurrentHashMap$Segment.copyEntry:(Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;
      17: areturn

  com.google.common.collect.CustomConcurrentHashMap$ValueReference<K, V> newValueReference(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>, V);
    Code:
       0: aload_1
       1: invokeinterface #50,  1           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
       6: istore_3
       7: aload_0
       8: getfield      #11                 // Field valueStrength:Lcom/google/common/collect/CustomConcurrentHashMap$Strength;
      11: aload_0
      12: iload_3
      13: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      16: aload_1
      17: aload_2
      18: invokevirtual #52                 // Method com/google/common/collect/CustomConcurrentHashMap$Strength.referenceValue:(Lcom/google/common/collect/CustomConcurrentHashMap$Segment;Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;Ljava/lang/Object;)Lcom/google/common/collect/CustomConcurrentHashMap$ValueReference;
      21: areturn

  int hash(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #13                 // Field keyEquivalence:Lcom/google/common/base/Equivalence;
       4: aload_1
       5: invokevirtual #53                 // Method com/google/common/base/Equivalence.hash:(Ljava/lang/Object;)I
       8: istore_2
       9: iload_2
      10: invokestatic  #54                 // Method rehash:(I)I
      13: ireturn

  void reclaimValue(com.google.common.collect.CustomConcurrentHashMap$ValueReference<K, V>);
    Code:
       0: aload_1
       1: invokeinterface #55,  1           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ValueReference.getEntry:()Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;
       6: astore_2
       7: aload_2
       8: invokeinterface #50,  1           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
      13: istore_3
      14: aload_0
      15: iload_3
      16: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      19: aload_2
      20: invokeinterface #56,  1           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
      25: iload_3
      26: aload_1
      27: invokevirtual #57                 // Method com/google/common/collect/CustomConcurrentHashMap$Segment.reclaimValue:(Ljava/lang/Object;ILcom/google/common/collect/CustomConcurrentHashMap$ValueReference;)Z
      30: pop
      31: return

  void reclaimKey(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_1
       1: invokeinterface #50,  1           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
       6: istore_2
       7: aload_0
       8: iload_2
       9: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      12: aload_1
      13: iload_2
      14: invokevirtual #58                 // Method com/google/common/collect/CustomConcurrentHashMap$Segment.reclaimKey:(Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;I)Z
      17: pop
      18: return

  boolean isLive(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #50,  1           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
       7: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      10: aload_1
      11: invokevirtual #59                 // Method com/google/common/collect/CustomConcurrentHashMap$Segment.getLiveValue:(Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;)Ljava/lang/Object;
      14: ifnull        21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  com.google.common.collect.CustomConcurrentHashMap$Segment<K, V> segmentFor(int);
    Code:
       0: aload_0
       1: getfield      #40                 // Field segments:[Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
       4: iload_1
       5: aload_0
       6: getfield      #37                 // Field segmentShift:I
       9: iushr
      10: aload_0
      11: getfield      #38                 // Field segmentMask:I
      14: iand
      15: aaload
      16: areturn

  com.google.common.collect.CustomConcurrentHashMap$Segment<K, V> createSegment(int, int);
    Code:
       0: new           #60                 // class com/google/common/collect/CustomConcurrentHashMap$Segment
       3: dup
       4: aload_0
       5: iload_1
       6: iload_2
       7: invokespecial #61                 // Method com/google/common/collect/CustomConcurrentHashMap$Segment."<init>":(Lcom/google/common/collect/CustomConcurrentHashMap;II)V
      10: areturn

  V getLiveValue(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_1
       1: invokeinterface #56,  1           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
       6: ifnonnull     11
       9: aconst_null
      10: areturn
      11: aload_1
      12: invokeinterface #62,  1           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/collect/CustomConcurrentHashMap$ValueReference;
      17: invokeinterface #63,  1           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
      22: astore_2
      23: aload_2
      24: ifnonnull     29
      27: aconst_null
      28: areturn
      29: aload_0
      30: invokevirtual #22                 // Method expires:()Z
      33: ifeq          46
      36: aload_0
      37: aload_1
      38: invokevirtual #64                 // Method isExpired:(Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;)Z
      41: ifeq          46
      44: aconst_null
      45: areturn
      46: aload_2
      47: areturn

  boolean isExpired(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: getfield      #27                 // Field ticker:Lcom/google/common/base/Ticker;
       6: invokevirtual #65                 // Method com/google/common/base/Ticker.read:()J
       9: invokevirtual #66                 // Method isExpired:(Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;J)Z
      12: ireturn

  boolean isExpired(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>, long);
    Code:
       0: lload_2
       1: aload_1
       2: invokeinterface #67,  1           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.getExpirationTime:()J
       7: lsub
       8: lconst_0
       9: lcmp
      10: ifle          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  static <K, V> void connectExpirables(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>, com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #68,  2           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.setNextExpirable:(Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;)V
       7: aload_1
       8: aload_0
       9: invokeinterface #69,  2           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.setPreviousExpirable:(Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;)V
      14: return

  static <K, V> void nullifyExpirable(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: invokestatic  #70                 // Method nullEntry:()Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;
       3: astore_1
       4: aload_0
       5: aload_1
       6: invokeinterface #68,  2           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.setNextExpirable:(Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;)V
      11: aload_0
      12: aload_1
      13: invokeinterface #69,  2           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.setPreviousExpirable:(Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;)V
      18: return

  void processPendingNotifications();
    Code:
       0: aload_0
       1: getfield      #34                 // Field removalNotificationQueue:Ljava/util/Queue;
       4: invokeinterface #71,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
       9: checkcast     #72                 // class com/google/common/collect/MapMaker$RemovalNotification
      12: dup
      13: astore_1
      14: ifnull        46
      17: aload_0
      18: getfield      #29                 // Field removalListener:Lcom/google/common/collect/MapMaker$RemovalListener;
      21: aload_1
      22: invokeinterface #73,  2           // InterfaceMethod com/google/common/collect/MapMaker$RemovalListener.onRemoval:(Lcom/google/common/collect/MapMaker$RemovalNotification;)V
      27: goto          0
      30: astore_2
      31: getstatic     #75                 // Field logger:Ljava/util/logging/Logger;
      34: getstatic     #76                 // Field java/util/logging/Level.WARNING:Ljava/util/logging/Level;
      37: ldc           #77                 // String Exception thrown by removal listener
      39: aload_2
      40: invokevirtual #78                 // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V
      43: goto          0
      46: return
    Exception table:
       from    to  target type
          17    27    30   Class java/lang/Exception

  static <K, V> void connectEvictables(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>, com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #79,  2           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.setNextEvictable:(Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;)V
       7: aload_1
       8: aload_0
       9: invokeinterface #80,  2           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.setPreviousEvictable:(Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;)V
      14: return

  static <K, V> void nullifyEvictable(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: invokestatic  #70                 // Method nullEntry:()Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;
       3: astore_1
       4: aload_0
       5: aload_1
       6: invokeinterface #79,  2           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.setNextEvictable:(Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;)V
      11: aload_0
      12: aload_1
      13: invokeinterface #80,  2           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.setPreviousEvictable:(Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;)V
      18: return

  final com.google.common.collect.CustomConcurrentHashMap$Segment<K, V>[] newSegmentArray(int);
    Code:
       0: iload_1
       1: anewarray     #60                 // class com/google/common/collect/CustomConcurrentHashMap$Segment
       4: areturn

  public boolean isEmpty();
    Code:
       0: lconst_0
       1: lstore_1
       2: aload_0
       3: getfield      #40                 // Field segments:[Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
       6: astore_3
       7: iconst_0
       8: istore        4
      10: iload         4
      12: aload_3
      13: arraylength
      14: if_icmpge     46
      17: aload_3
      18: iload         4
      20: aaload
      21: getfield      #81                 // Field com/google/common/collect/CustomConcurrentHashMap$Segment.count:I
      24: ifeq          29
      27: iconst_0
      28: ireturn
      29: lload_1
      30: aload_3
      31: iload         4
      33: aaload
      34: getfield      #82                 // Field com/google/common/collect/CustomConcurrentHashMap$Segment.modCount:I
      37: i2l
      38: ladd
      39: lstore_1
      40: iinc          4, 1
      43: goto          10
      46: lload_1
      47: lconst_0
      48: lcmp
      49: ifeq          99
      52: iconst_0
      53: istore        4
      55: iload         4
      57: aload_3
      58: arraylength
      59: if_icmpge     91
      62: aload_3
      63: iload         4
      65: aaload
      66: getfield      #81                 // Field com/google/common/collect/CustomConcurrentHashMap$Segment.count:I
      69: ifeq          74
      72: iconst_0
      73: ireturn
      74: lload_1
      75: aload_3
      76: iload         4
      78: aaload
      79: getfield      #82                 // Field com/google/common/collect/CustomConcurrentHashMap$Segment.modCount:I
      82: i2l
      83: lsub
      84: lstore_1
      85: iinc          4, 1
      88: goto          55
      91: lload_1
      92: lconst_0
      93: lcmp
      94: ifeq          99
      97: iconst_0
      98: ireturn
      99: iconst_1
     100: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #40                 // Field segments:[Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
       4: astore_1
       5: lconst_0
       6: lstore_2
       7: iconst_0
       8: istore        4
      10: iload         4
      12: aload_1
      13: arraylength
      14: if_icmpge     34
      17: lload_2
      18: aload_1
      19: iload         4
      21: aaload
      22: getfield      #81                 // Field com/google/common/collect/CustomConcurrentHashMap$Segment.count:I
      25: i2l
      26: ladd
      27: lstore_2
      28: iinc          4, 1
      31: goto          10
      34: lload_2
      35: invokestatic  #83                 // Method com/google/common/primitives/Ints.saturatedCast:(J)I
      38: ireturn

  public V get(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: aload_1
       8: invokevirtual #84                 // Method hash:(Ljava/lang/Object;)I
      11: istore_2
      12: aload_0
      13: iload_2
      14: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      17: aload_1
      18: iload_2
      19: invokevirtual #85                 // Method com/google/common/collect/CustomConcurrentHashMap$Segment.get:(Ljava/lang/Object;I)Ljava/lang/Object;
      22: areturn

  com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V> getEntry(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: aload_1
       8: invokevirtual #84                 // Method hash:(Ljava/lang/Object;)I
      11: istore_2
      12: aload_0
      13: iload_2
      14: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      17: aload_1
      18: iload_2
      19: invokevirtual #86                 // Method com/google/common/collect/CustomConcurrentHashMap$Segment.getEntry:(Ljava/lang/Object;I)Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;
      22: areturn

  com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry<K, V> getLiveEntry(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: aload_1
       8: invokevirtual #84                 // Method hash:(Ljava/lang/Object;)I
      11: istore_2
      12: aload_0
      13: iload_2
      14: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      17: aload_1
      18: iload_2
      19: invokevirtual #87                 // Method com/google/common/collect/CustomConcurrentHashMap$Segment.getLiveEntry:(Ljava/lang/Object;I)Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;
      22: areturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: aload_1
       8: invokevirtual #84                 // Method hash:(Ljava/lang/Object;)I
      11: istore_2
      12: aload_0
      13: iload_2
      14: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      17: aload_1
      18: iload_2
      19: invokevirtual #88                 // Method com/google/common/collect/CustomConcurrentHashMap$Segment.containsKey:(Ljava/lang/Object;I)Z
      22: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: getfield      #40                 // Field segments:[Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      10: astore_2
      11: ldc2_w        #89                 // long -1l
      14: lstore_3
      15: iconst_0
      16: istore        5
      18: iload         5
      20: iconst_3
      21: if_icmpge     179
      24: lconst_0
      25: lstore        6
      27: aload_2
      28: astore        8
      30: aload         8
      32: arraylength
      33: istore        9
      35: iconst_0
      36: istore        10
      38: iload         10
      40: iload         9
      42: if_icmpge     160
      45: aload         8
      47: iload         10
      49: aaload
      50: astore        11
      52: aload         11
      54: getfield      #81                 // Field com/google/common/collect/CustomConcurrentHashMap$Segment.count:I
      57: istore        12
      59: aload         11
      61: getfield      #91                 // Field com/google/common/collect/CustomConcurrentHashMap$Segment.table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      64: astore        13
      66: iconst_0
      67: istore        14
      69: iload         14
      71: aload         13
      73: invokevirtual #92                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      76: if_icmpge     143
      79: aload         13
      81: iload         14
      83: invokevirtual #93                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      86: checkcast     #94                 // class com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry
      89: astore        15
      91: aload         15
      93: ifnull        137
      96: aload         11
      98: aload         15
     100: invokevirtual #59                 // Method com/google/common/collect/CustomConcurrentHashMap$Segment.getLiveValue:(Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;)Ljava/lang/Object;
     103: astore        16
     105: aload         16
     107: ifnull        125
     110: aload_0
     111: getfield      #15                 // Field valueEquivalence:Lcom/google/common/base/Equivalence;
     114: aload_1
     115: aload         16
     117: invokevirtual #95                 // Method com/google/common/base/Equivalence.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z
     120: ifeq          125
     123: iconst_1
     124: ireturn
     125: aload         15
     127: invokeinterface #96,  1           // InterfaceMethod com/google/common/collect/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/collect/CustomConcurrentHashMap$ReferenceEntry;
     132: astore        15
     134: goto          91
     137: iinc          14, 1
     140: goto          69
     143: lload         6
     145: aload         11
     147: getfield      #82                 // Field com/google/common/collect/CustomConcurrentHashMap$Segment.modCount:I
     150: i2l
     151: ladd
     152: lstore        6
     154: iinc          10, 1
     157: goto          38
     160: lload         6
     162: lload_3
     163: lcmp
     164: ifne          170
     167: goto          179
     170: lload         6
     172: lstore_3
     173: iinc          5, 1
     176: goto          18
     179: iconst_0
     180: ireturn

  public V put(K, V);
    Code:
       0: aload_1
       1: invokestatic  #97                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_2
       6: invokestatic  #97                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: aload_0
      11: aload_1
      12: invokevirtual #84                 // Method hash:(Ljava/lang/Object;)I
      15: istore_3
      16: aload_0
      17: iload_3
      18: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      21: aload_1
      22: iload_3
      23: aload_2
      24: iconst_0
      25: invokevirtual #98                 // Method com/google/common/collect/CustomConcurrentHashMap$Segment.put:(Ljava/lang/Object;ILjava/lang/Object;Z)Ljava/lang/Object;
      28: areturn

  public V putIfAbsent(K, V);
    Code:
       0: aload_1
       1: invokestatic  #97                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_2
       6: invokestatic  #97                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: aload_0
      11: aload_1
      12: invokevirtual #84                 // Method hash:(Ljava/lang/Object;)I
      15: istore_3
      16: aload_0
      17: iload_3
      18: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      21: aload_1
      22: iload_3
      23: aload_2
      24: iconst_1
      25: invokevirtual #98                 // Method com/google/common/collect/CustomConcurrentHashMap$Segment.put:(Ljava/lang/Object;ILjava/lang/Object;Z)Ljava/lang/Object;
      28: areturn

  public void putAll(java.util.Map<? extends K, ? extends V>);
    Code:
       0: aload_1
       1: invokeinterface #99,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #100,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #101,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          51
      21: aload_2
      22: invokeinterface #102,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #103                // class java/util/Map$Entry
      30: astore_3
      31: aload_0
      32: aload_3
      33: invokeinterface #104,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      38: aload_3
      39: invokeinterface #105,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      44: invokevirtual #106                // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      47: pop
      48: goto          12
      51: return

  public V remove(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: aload_1
       8: invokevirtual #84                 // Method hash:(Ljava/lang/Object;)I
      11: istore_2
      12: aload_0
      13: iload_2
      14: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      17: aload_1
      18: iload_2
      19: invokevirtual #107                // Method com/google/common/collect/CustomConcurrentHashMap$Segment.remove:(Ljava/lang/Object;I)Ljava/lang/Object;
      22: areturn

  public boolean remove(java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        8
       4: aload_2
       5: ifnonnull     10
       8: iconst_0
       9: ireturn
      10: aload_0
      11: aload_1
      12: invokevirtual #84                 // Method hash:(Ljava/lang/Object;)I
      15: istore_3
      16: aload_0
      17: iload_3
      18: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      21: aload_1
      22: iload_3
      23: aload_2
      24: invokevirtual #108                // Method com/google/common/collect/CustomConcurrentHashMap$Segment.remove:(Ljava/lang/Object;ILjava/lang/Object;)Z
      27: ireturn

  public boolean replace(K, V, V);
    Code:
       0: aload_1
       1: invokestatic  #97                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_3
       6: invokestatic  #97                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: aload_2
      11: ifnonnull     16
      14: iconst_0
      15: ireturn
      16: aload_0
      17: aload_1
      18: invokevirtual #84                 // Method hash:(Ljava/lang/Object;)I
      21: istore        4
      23: aload_0
      24: iload         4
      26: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      29: aload_1
      30: iload         4
      32: aload_2
      33: aload_3
      34: invokevirtual #109                // Method com/google/common/collect/CustomConcurrentHashMap$Segment.replace:(Ljava/lang/Object;ILjava/lang/Object;Ljava/lang/Object;)Z
      37: ireturn

  public V replace(K, V);
    Code:
       0: aload_1
       1: invokestatic  #97                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_2
       6: invokestatic  #97                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: aload_0
      11: aload_1
      12: invokevirtual #84                 // Method hash:(Ljava/lang/Object;)I
      15: istore_3
      16: aload_0
      17: iload_3
      18: invokevirtual #48                 // Method segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
      21: aload_1
      22: iload_3
      23: aload_2
      24: invokevirtual #110                // Method com/google/common/collect/CustomConcurrentHashMap$Segment.replace:(Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;
      27: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #40                 // Field segments:[Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     31
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: invokevirtual #111                // Method com/google/common/collect/CustomConcurrentHashMap$Segment.clear:()V
      25: iinc          3, 1
      28: goto          10
      31: return

  public java.util.Set<K> keySet();
    Code:
       0: aload_0
       1: getfield      #112                // Field keySet:Ljava/util/Set;
       4: astore_1
       5: aload_1
       6: ifnull        13
       9: aload_1
      10: goto          26
      13: aload_0
      14: new           #113                // class com/google/common/collect/CustomConcurrentHashMap$KeySet
      17: dup
      18: aload_0
      19: invokespecial #114                // Method com/google/common/collect/CustomConcurrentHashMap$KeySet."<init>":(Lcom/google/common/collect/CustomConcurrentHashMap;)V
      22: dup_x1
      23: putfield      #112                // Field keySet:Ljava/util/Set;
      26: areturn

  public java.util.Collection<V> values();
    Code:
       0: aload_0
       1: getfield      #115                // Field values:Ljava/util/Collection;
       4: astore_1
       5: aload_1
       6: ifnull        13
       9: aload_1
      10: goto          26
      13: aload_0
      14: new           #116                // class com/google/common/collect/CustomConcurrentHashMap$Values
      17: dup
      18: aload_0
      19: invokespecial #117                // Method com/google/common/collect/CustomConcurrentHashMap$Values."<init>":(Lcom/google/common/collect/CustomConcurrentHashMap;)V
      22: dup_x1
      23: putfield      #115                // Field values:Ljava/util/Collection;
      26: areturn

  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: aload_0
       1: getfield      #118                // Field entrySet:Ljava/util/Set;
       4: astore_1
       5: aload_1
       6: ifnull        13
       9: aload_1
      10: goto          26
      13: aload_0
      14: new           #119                // class com/google/common/collect/CustomConcurrentHashMap$EntrySet
      17: dup
      18: aload_0
      19: invokespecial #120                // Method com/google/common/collect/CustomConcurrentHashMap$EntrySet."<init>":(Lcom/google/common/collect/CustomConcurrentHashMap;)V
      22: dup_x1
      23: putfield      #118                // Field entrySet:Ljava/util/Set;
      26: areturn

  java.lang.Object writeReplace();
    Code:
       0: new           #121                // class com/google/common/collect/CustomConcurrentHashMap$SerializationProxy
       3: dup
       4: aload_0
       5: getfield      #9                  // Field keyStrength:Lcom/google/common/collect/CustomConcurrentHashMap$Strength;
       8: aload_0
       9: getfield      #11                 // Field valueStrength:Lcom/google/common/collect/CustomConcurrentHashMap$Strength;
      12: aload_0
      13: getfield      #13                 // Field keyEquivalence:Lcom/google/common/base/Equivalence;
      16: aload_0
      17: getfield      #15                 // Field valueEquivalence:Lcom/google/common/base/Equivalence;
      20: aload_0
      21: getfield      #21                 // Field expireAfterWriteNanos:J
      24: aload_0
      25: getfield      #19                 // Field expireAfterAccessNanos:J
      28: aload_0
      29: getfield      #17                 // Field maximumSize:I
      32: aload_0
      33: getfield      #7                  // Field concurrencyLevel:I
      36: aload_0
      37: getfield      #29                 // Field removalListener:Lcom/google/common/collect/MapMaker$RemovalListener;
      40: aload_0
      41: invokespecial #122                // Method com/google/common/collect/CustomConcurrentHashMap$SerializationProxy."<init>":(Lcom/google/common/collect/CustomConcurrentHashMap$Strength;Lcom/google/common/collect/CustomConcurrentHashMap$Strength;Lcom/google/common/base/Equivalence;Lcom/google/common/base/Equivalence;JJIILcom/google/common/collect/MapMaker$RemovalListener;Ljava/util/concurrent/ConcurrentMap;)V
      44: areturn

  static {};
    Code:
       0: ldc_w         #123                // class com/google/common/collect/CustomConcurrentHashMap
       3: invokevirtual #124                // Method java/lang/Class.getName:()Ljava/lang/String;
       6: invokestatic  #125                // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       9: putstatic     #75                 // Field logger:Ljava/util/logging/Logger;
      12: new           #126                // class com/google/common/collect/CustomConcurrentHashMap$1
      15: dup
      16: invokespecial #127                // Method com/google/common/collect/CustomConcurrentHashMap$1."<init>":()V
      19: putstatic     #45                 // Field UNSET:Lcom/google/common/collect/CustomConcurrentHashMap$ValueReference;
      22: new           #128                // class com/google/common/collect/CustomConcurrentHashMap$2
      25: dup
      26: invokespecial #129                // Method com/google/common/collect/CustomConcurrentHashMap$2."<init>":()V
      29: putstatic     #47                 // Field DISCARDING_QUEUE:Ljava/util/Queue;
      32: return
}
