Compiled from "AbstractRange.java"
public abstract class org.sonatype.spice.zapper.internal.AbstractRange implements org.sonatype.spice.zapper.Range {
  private final long offset;

  private final long length;

  protected org.sonatype.spice.zapper.internal.AbstractRange(long, long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lload_1
       6: lconst_0
       7: lcmp
       8: iflt          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: lload_1
      17: invokestatic  #2                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      20: ldc           #3                  // String Offset is less than 0!
      22: invokestatic  #4                  // Method org/sonatype/spice/zapper/internal/Check.argument:(ZLjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      25: checkcast     #5                  // class java/lang/Long
      28: invokevirtual #6                  // Method java/lang/Long.longValue:()J
      31: putfield      #7                  // Field offset:J
      34: aload_0
      35: lload_3
      36: lconst_0
      37: lcmp
      38: ifle          45
      41: iconst_1
      42: goto          46
      45: iconst_0
      46: lload_3
      47: invokestatic  #2                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      50: ldc           #8                  // String Length is less than 1!
      52: invokestatic  #4                  // Method org/sonatype/spice/zapper/internal/Check.argument:(ZLjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      55: checkcast     #5                  // class java/lang/Long
      58: invokevirtual #6                  // Method java/lang/Long.longValue:()J
      61: putfield      #9                  // Field length:J
      64: return

  public long getOffset();
    Code:
       0: aload_0
       1: getfield      #7                  // Field offset:J
       4: lreturn

  public long getLength();
    Code:
       0: aload_0
       1: getfield      #9                  // Field length:J
       4: lreturn

  public boolean matches(org.sonatype.spice.zapper.Range);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method getOffset:()J
       4: aload_1
       5: invokeinterface #11,  1           // InterfaceMethod org/sonatype/spice/zapper/Range.getOffset:()J
      10: lcmp
      11: ifne          32
      14: aload_0
      15: invokevirtual #12                 // Method getLength:()J
      18: aload_1
      19: invokeinterface #13,  1           // InterfaceMethod org/sonatype/spice/zapper/Range.getLength:()J
      24: lcmp
      25: ifne          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public boolean contains(org.sonatype.spice.zapper.Range);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method getOffset:()J
       4: aload_1
       5: invokeinterface #11,  1           // InterfaceMethod org/sonatype/spice/zapper/Range.getOffset:()J
      10: lcmp
      11: ifgt          32
      14: aload_0
      15: invokevirtual #12                 // Method getLength:()J
      18: aload_1
      19: invokeinterface #13,  1           // InterfaceMethod org/sonatype/spice/zapper/Range.getLength:()J
      24: lcmp
      25: iflt          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public boolean overlaps(org.sonatype.spice.zapper.Range);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method getOffset:()J
       4: lstore_2
       5: lload_2
       6: aload_0
       7: invokevirtual #12                 // Method getLength:()J
      10: ladd
      11: lstore        4
      13: aload_1
      14: invokeinterface #11,  1           // InterfaceMethod org/sonatype/spice/zapper/Range.getOffset:()J
      19: lstore        6
      21: lload         6
      23: aload_1
      24: invokeinterface #13,  1           // InterfaceMethod org/sonatype/spice/zapper/Range.getLength:()J
      29: ladd
      30: lstore        8
      32: lload         4
      34: lload         6
      36: lcmp
      37: iflt          51
      40: lload_2
      41: lload         8
      43: lcmp
      44: ifgt          51
      47: iconst_1
      48: goto          52
      51: iconst_0
      52: ireturn

  public java.lang.String toString();
    Code:
       0: new           #14                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #16                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: invokevirtual #17                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      14: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: ldc           #19                 // String (offset=
      19: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_0
      23: invokevirtual #10                 // Method getOffset:()J
      26: invokevirtual #20                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      29: ldc           #21                 // String , length=
      31: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: aload_0
      35: invokevirtual #12                 // Method getLength:()J
      38: invokevirtual #20                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      41: ldc           #22                 // String )
      43: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: areturn
}
