Compiled from "RangeInputStream.java"
public class org.sonatype.spice.zapper.internal.RangeInputStream extends java.io.FilterInputStream {
  private final org.sonatype.spice.zapper.Range range;

  private long allowedToRead;

  private boolean allowedToClose;

  public org.sonatype.spice.zapper.internal.RangeInputStream(java.io.InputStream, org.sonatype.spice.zapper.Range, boolean, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method java/io/FilterInputStream."<init>":(Ljava/io/InputStream;)V
       5: aload_2
       6: ifnonnull     19
       9: new           #2                  // class java/lang/NullPointerException
      12: dup
      13: ldc           #3                  // String Range is null!
      15: invokespecial #4                  // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_0
      20: aload_2
      21: putfield      #5                  // Field range:Lorg/sonatype/spice/zapper/Range;
      24: aload_0
      25: aload_2
      26: invokeinterface #6,  1            // InterfaceMethod org/sonatype/spice/zapper/Range.getLength:()J
      31: putfield      #7                  // Field allowedToRead:J
      34: aload_0
      35: iload         4
      37: putfield      #8                  // Field allowedToClose:Z
      40: iload_3
      41: ifeq          66
      44: aload_2
      45: invokeinterface #9,  1            // InterfaceMethod org/sonatype/spice/zapper/Range.getOffset:()J
      50: lconst_0
      51: lcmp
      52: ifle          66
      55: aload_0
      56: aload_2
      57: invokeinterface #9,  1            // InterfaceMethod org/sonatype/spice/zapper/Range.getOffset:()J
      62: invokespecial #10                 // Method java/io/FilterInputStream.skip:(J)J
      65: pop2
      66: return

  public org.sonatype.spice.zapper.Range getRange();
    Code:
       0: aload_0
       1: getfield      #5                  // Field range:Lorg/sonatype/spice/zapper/Range;
       4: areturn

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #11                 // Method java/io/FilterInputStream.available:()I
       5: aload_0
       6: getfield      #7                  // Field allowedToRead:J
       9: invokevirtual #12                 // Method mathMin:(IJ)I
      12: ireturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field allowedToRead:J
       4: lconst_0
       5: lcmp
       6: ifgt          11
       9: iconst_m1
      10: ireturn
      11: aload_0
      12: invokespecial #13                 // Method java/io/FilterInputStream.read:()I
      15: istore_1
      16: iload_1
      17: iflt          30
      20: aload_0
      21: dup
      22: getfield      #7                  // Field allowedToRead:J
      25: lconst_1
      26: lsub
      27: putfield      #7                  // Field allowedToRead:J
      30: iload_1
      31: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field allowedToRead:J
       4: lconst_0
       5: lcmp
       6: ifgt          11
       9: iconst_m1
      10: ireturn
      11: aload_0
      12: iload_3
      13: aload_0
      14: getfield      #7                  // Field allowedToRead:J
      17: invokevirtual #12                 // Method mathMin:(IJ)I
      20: istore        4
      22: aload_0
      23: aload_1
      24: iload_2
      25: iload         4
      27: invokespecial #14                 // Method java/io/FilterInputStream.read:([BII)I
      30: istore        5
      32: iload         5
      34: iflt          49
      37: aload_0
      38: dup
      39: getfield      #7                  // Field allowedToRead:J
      42: iload         5
      44: i2l
      45: lsub
      46: putfield      #7                  // Field allowedToRead:J
      49: iload         5
      51: ireturn

  public long skip(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: aload_0
       3: getfield      #7                  // Field allowedToRead:J
       6: invokestatic  #15                 // Method java/lang/Math.min:(JJ)J
       9: invokespecial #10                 // Method java/io/FilterInputStream.skip:(J)J
      12: lstore_3
      13: lload_3
      14: lconst_0
      15: lcmp
      16: iflt          29
      19: aload_0
      20: dup
      21: getfield      #7                  // Field allowedToRead:J
      24: lload_3
      25: lsub
      26: putfield      #7                  // Field allowedToRead:J
      29: lload_3
      30: lreturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field allowedToClose:Z
       4: ifeq          11
       7: aload_0
       8: invokespecial #16                 // Method java/io/FilterInputStream.close:()V
      11: return

  protected long getAllowedToRead();
    Code:
       0: aload_0
       1: getfield      #7                  // Field allowedToRead:J
       4: lreturn

  protected int mathMin(int, long);
    Code:
       0: lload_2
       1: ldc2_w        #17                 // long 2147483647l
       4: lcmp
       5: ifge          15
       8: iload_1
       9: lload_2
      10: l2i
      11: invokestatic  #19                 // Method java/lang/Math.min:(II)I
      14: ireturn
      15: iload_1
      16: ireturn
}
