Compiled from "RangeOutputStream.java"
public class org.sonatype.spice.zapper.internal.RangeOutputStream extends java.io.FilterOutputStream {
  private final org.sonatype.spice.zapper.Range range;

  private long allowedToWrite;

  private boolean allowedToClose;

  public org.sonatype.spice.zapper.internal.RangeOutputStream(java.io.OutputStream, org.sonatype.spice.zapper.Range, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method java/io/FilterOutputStream."<init>":(Ljava/io/OutputStream;)V
       5: aload_2
       6: ifnonnull     19
       9: new           #2                  // class java/lang/NullPointerException
      12: dup
      13: ldc           #3                  // String Range is null!
      15: invokespecial #4                  // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_0
      20: aload_2
      21: putfield      #5                  // Field range:Lorg/sonatype/spice/zapper/Range;
      24: aload_0
      25: aload_2
      26: invokeinterface #6,  1            // InterfaceMethod org/sonatype/spice/zapper/Range.getLength:()J
      31: putfield      #7                  // Field allowedToWrite:J
      34: aload_0
      35: iload_3
      36: putfield      #8                  // Field allowedToClose:Z
      39: return

  public org.sonatype.spice.zapper.Range getRange();
    Code:
       0: aload_0
       1: getfield      #5                  // Field range:Lorg/sonatype/spice/zapper/Range;
       4: areturn

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field allowedToWrite:J
       4: lconst_0
       5: lcmp
       6: ifgt          10
       9: return
      10: aload_0
      11: iload_1
      12: invokespecial #9                  // Method java/io/FilterOutputStream.write:(I)V
      15: aload_0
      16: dup
      17: getfield      #7                  // Field allowedToWrite:J
      20: lconst_1
      21: lsub
      22: putfield      #7                  // Field allowedToWrite:J
      25: return

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field allowedToWrite:J
       4: lconst_0
       5: lcmp
       6: ifgt          10
       9: return
      10: aload_0
      11: iload_3
      12: aload_0
      13: getfield      #7                  // Field allowedToWrite:J
      16: invokevirtual #10                 // Method mathMin:(IJ)I
      19: istore        4
      21: aload_0
      22: aload_1
      23: iload_2
      24: iload         4
      26: invokespecial #11                 // Method java/io/FilterOutputStream.write:([BII)V
      29: aload_0
      30: dup
      31: getfield      #7                  // Field allowedToWrite:J
      34: iload         4
      36: i2l
      37: lsub
      38: putfield      #7                  // Field allowedToWrite:J
      41: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field allowedToClose:Z
       4: ifeq          11
       7: aload_0
       8: invokespecial #12                 // Method java/io/FilterOutputStream.close:()V
      11: return

  protected long getAllowedToWrite();
    Code:
       0: aload_0
       1: getfield      #7                  // Field allowedToWrite:J
       4: lreturn

  protected int mathMin(int, long);
    Code:
       0: lload_2
       1: ldc2_w        #13                 // long 2147483647l
       4: lcmp
       5: ifge          15
       8: iload_1
       9: lload_2
      10: l2i
      11: invokestatic  #15                 // Method java/lang/Math.min:(II)I
      14: ireturn
      15: iload_1
      16: ireturn
}
