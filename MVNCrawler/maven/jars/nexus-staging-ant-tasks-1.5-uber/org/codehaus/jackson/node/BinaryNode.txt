Compiled from "BinaryNode.java"
public final class org.codehaus.jackson.node.BinaryNode extends org.codehaus.jackson.node.ValueNode {
  static final org.codehaus.jackson.node.BinaryNode EMPTY_BINARY_NODE;

  final byte[] _data;

  public org.codehaus.jackson.node.BinaryNode(byte[]);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/codehaus/jackson/node/ValueNode."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field _data:[B
       9: return

  public org.codehaus.jackson.node.BinaryNode(byte[], int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/codehaus/jackson/node/ValueNode."<init>":()V
       4: iload_2
       5: ifne          22
       8: iload_3
       9: aload_1
      10: arraylength
      11: if_icmpne     22
      14: aload_0
      15: aload_1
      16: putfield      #2                  // Field _data:[B
      19: goto          40
      22: aload_0
      23: iload_3
      24: newarray       byte
      26: putfield      #2                  // Field _data:[B
      29: aload_1
      30: iload_2
      31: aload_0
      32: getfield      #2                  // Field _data:[B
      35: iconst_0
      36: iload_3
      37: invokestatic  #3                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      40: return

  public static org.codehaus.jackson.node.BinaryNode valueOf(byte[]);
    Code:
       0: aload_0
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: arraylength
       8: ifne          15
      11: getstatic     #4                  // Field EMPTY_BINARY_NODE:Lorg/codehaus/jackson/node/BinaryNode;
      14: areturn
      15: new           #5                  // class org/codehaus/jackson/node/BinaryNode
      18: dup
      19: aload_0
      20: invokespecial #6                  // Method "<init>":([B)V
      23: areturn

  public static org.codehaus.jackson.node.BinaryNode valueOf(byte[], int, int);
    Code:
       0: aload_0
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: iload_2
       7: ifne          14
      10: getstatic     #4                  // Field EMPTY_BINARY_NODE:Lorg/codehaus/jackson/node/BinaryNode;
      13: areturn
      14: new           #5                  // class org/codehaus/jackson/node/BinaryNode
      17: dup
      18: aload_0
      19: iload_1
      20: iload_2
      21: invokespecial #7                  // Method "<init>":([BII)V
      24: areturn

  public org.codehaus.jackson.JsonToken asToken();
    Code:
       0: getstatic     #8                  // Field org/codehaus/jackson/JsonToken.VALUE_EMBEDDED_OBJECT:Lorg/codehaus/jackson/JsonToken;
       3: areturn

  public boolean isBinary();
    Code:
       0: iconst_1
       1: ireturn

  public byte[] getBinaryValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _data:[B
       4: areturn

  public java.lang.String asText();
    Code:
       0: invokestatic  #9                  // Method org/codehaus/jackson/Base64Variants.getDefaultVariant:()Lorg/codehaus/jackson/Base64Variant;
       3: aload_0
       4: getfield      #2                  // Field _data:[B
       7: iconst_0
       8: invokevirtual #10                 // Method org/codehaus/jackson/Base64Variant.encode:([BZ)Ljava/lang/String;
      11: areturn

  public final void serialize(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #2                  // Field _data:[B
       5: invokevirtual #11                 // Method org/codehaus/jackson/JsonGenerator.writeBinary:([B)V
       8: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_1
      14: invokevirtual #12                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      17: aload_0
      18: invokevirtual #12                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: if_acmpeq     26
      24: iconst_0
      25: ireturn
      26: aload_1
      27: checkcast     #5                  // class org/codehaus/jackson/node/BinaryNode
      30: getfield      #2                  // Field _data:[B
      33: aload_0
      34: getfield      #2                  // Field _data:[B
      37: invokestatic  #13                 // Method java/util/Arrays.equals:([B[B)Z
      40: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _data:[B
       4: ifnonnull     11
       7: iconst_m1
       8: goto          16
      11: aload_0
      12: getfield      #2                  // Field _data:[B
      15: arraylength
      16: ireturn

  public java.lang.String toString();
    Code:
       0: invokestatic  #9                  // Method org/codehaus/jackson/Base64Variants.getDefaultVariant:()Lorg/codehaus/jackson/Base64Variant;
       3: aload_0
       4: getfield      #2                  // Field _data:[B
       7: iconst_1
       8: invokevirtual #10                 // Method org/codehaus/jackson/Base64Variant.encode:([BZ)Ljava/lang/String;
      11: areturn

  static {};
    Code:
       0: new           #5                  // class org/codehaus/jackson/node/BinaryNode
       3: dup
       4: iconst_0
       5: newarray       byte
       7: invokespecial #6                  // Method "<init>":([B)V
      10: putstatic     #4                  // Field EMPTY_BINARY_NODE:Lorg/codehaus/jackson/node/BinaryNode;
      13: return
}
