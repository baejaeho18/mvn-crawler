Compiled from "MapperConfig.java"
public abstract class org.codehaus.jackson.map.MapperConfig<T extends org.codehaus.jackson.map.MapperConfig<T>> implements org.codehaus.jackson.map.ClassIntrospector$MixInResolver {
  protected static final java.text.DateFormat DEFAULT_DATE_FORMAT;

  protected org.codehaus.jackson.map.MapperConfig$Base _base;

  protected java.util.HashMap<org.codehaus.jackson.map.type.ClassKey, java.lang.Class<?>> _mixInAnnotations;

  protected boolean _mixInAnnotationsShared;

  protected org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver;

  protected org.codehaus.jackson.map.MapperConfig(org.codehaus.jackson.map.ClassIntrospector<? extends org.codehaus.jackson.map.BeanDescription>, org.codehaus.jackson.map.AnnotationIntrospector, org.codehaus.jackson.map.introspect.VisibilityChecker<?>, org.codehaus.jackson.map.jsontype.SubtypeResolver, org.codehaus.jackson.map.PropertyNamingStrategy, org.codehaus.jackson.map.type.TypeFactory, org.codehaus.jackson.map.HandlerInstantiator);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/codehaus/jackson/map/MapperConfig$Base
       8: dup
       9: aload_1
      10: aload_2
      11: aload_3
      12: aload         5
      14: aload         6
      16: aconst_null
      17: getstatic     #3                  // Field DEFAULT_DATE_FORMAT:Ljava/text/DateFormat;
      20: aload         7
      22: invokespecial #4                  // Method org/codehaus/jackson/map/MapperConfig$Base."<init>":(Lorg/codehaus/jackson/map/ClassIntrospector;Lorg/codehaus/jackson/map/AnnotationIntrospector;Lorg/codehaus/jackson/map/introspect/VisibilityChecker;Lorg/codehaus/jackson/map/PropertyNamingStrategy;Lorg/codehaus/jackson/map/type/TypeFactory;Lorg/codehaus/jackson/map/jsontype/TypeResolverBuilder;Ljava/text/DateFormat;Lorg/codehaus/jackson/map/HandlerInstantiator;)V
      25: putfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
      28: aload_0
      29: aload         4
      31: putfield      #6                  // Field _subtypeResolver:Lorg/codehaus/jackson/map/jsontype/SubtypeResolver;
      34: aload_0
      35: iconst_1
      36: putfield      #7                  // Field _mixInAnnotationsShared:Z
      39: return

  protected org.codehaus.jackson.map.MapperConfig(org.codehaus.jackson.map.MapperConfig<T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_1
       3: getfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
       6: aload_1
       7: getfield      #6                  // Field _subtypeResolver:Lorg/codehaus/jackson/map/jsontype/SubtypeResolver;
      10: invokespecial #8                  // Method "<init>":(Lorg/codehaus/jackson/map/MapperConfig;Lorg/codehaus/jackson/map/MapperConfig$Base;Lorg/codehaus/jackson/map/jsontype/SubtypeResolver;)V
      13: return

  protected org.codehaus.jackson.map.MapperConfig(org.codehaus.jackson.map.MapperConfig<T>, org.codehaus.jackson.map.MapperConfig$Base, org.codehaus.jackson.map.jsontype.SubtypeResolver);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_2
       6: putfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
       9: aload_0
      10: aload_3
      11: putfield      #6                  // Field _subtypeResolver:Lorg/codehaus/jackson/map/jsontype/SubtypeResolver;
      14: aload_0
      15: iconst_1
      16: putfield      #7                  // Field _mixInAnnotationsShared:Z
      19: aload_0
      20: aload_1
      21: getfield      #9                  // Field _mixInAnnotations:Ljava/util/HashMap;
      24: putfield      #9                  // Field _mixInAnnotations:Ljava/util/HashMap;
      27: return

  public abstract void fromAnnotations(java.lang.Class<?>);

  public abstract T createUnshared(org.codehaus.jackson.map.jsontype.SubtypeResolver);

  public abstract T withClassIntrospector(org.codehaus.jackson.map.ClassIntrospector<? extends org.codehaus.jackson.map.BeanDescription>);

  public abstract T withAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector);

  public abstract T withVisibilityChecker(org.codehaus.jackson.map.introspect.VisibilityChecker<?>);

  public abstract T withVisibility(org.codehaus.jackson.annotate.JsonMethod, org.codehaus.jackson.annotate.JsonAutoDetect$Visibility);

  public abstract T withTypeResolverBuilder(org.codehaus.jackson.map.jsontype.TypeResolverBuilder<?>);

  public abstract T withSubtypeResolver(org.codehaus.jackson.map.jsontype.SubtypeResolver);

  public abstract T withPropertyNamingStrategy(org.codehaus.jackson.map.PropertyNamingStrategy);

  public abstract T withTypeFactory(org.codehaus.jackson.map.type.TypeFactory);

  public abstract T withDateFormat(java.text.DateFormat);

  public abstract T withHandlerInstantiator(org.codehaus.jackson.map.HandlerInstantiator);

  public abstract T withInsertedAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector);

  public abstract T withAppendedAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector);

  public abstract boolean isEnabled(org.codehaus.jackson.map.MapperConfig$ConfigFeature);

  public abstract boolean isAnnotationProcessingEnabled();

  public abstract boolean canOverrideAccessModifiers();

  public abstract boolean shouldSortPropertiesAlphabetically();

  public org.codehaus.jackson.map.ClassIntrospector<? extends org.codehaus.jackson.map.BeanDescription> getClassIntrospector();
    Code:
       0: aload_0
       1: getfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
       4: invokevirtual #10                 // Method org/codehaus/jackson/map/MapperConfig$Base.getClassIntrospector:()Lorg/codehaus/jackson/map/ClassIntrospector;
       7: areturn

  public org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector();
    Code:
       0: aload_0
       1: getfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
       4: invokevirtual #11                 // Method org/codehaus/jackson/map/MapperConfig$Base.getAnnotationIntrospector:()Lorg/codehaus/jackson/map/AnnotationIntrospector;
       7: areturn

  public final void insertAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
       5: aload_1
       6: aload_0
       7: invokevirtual #12                 // Method getAnnotationIntrospector:()Lorg/codehaus/jackson/map/AnnotationIntrospector;
      10: invokestatic  #13                 // Method org/codehaus/jackson/map/AnnotationIntrospector$Pair.create:(Lorg/codehaus/jackson/map/AnnotationIntrospector;Lorg/codehaus/jackson/map/AnnotationIntrospector;)Lorg/codehaus/jackson/map/AnnotationIntrospector;
      13: invokevirtual #14                 // Method org/codehaus/jackson/map/MapperConfig$Base.withAnnotationIntrospector:(Lorg/codehaus/jackson/map/AnnotationIntrospector;)Lorg/codehaus/jackson/map/MapperConfig$Base;
      16: putfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
      19: return

  public final void appendAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
       5: aload_0
       6: invokevirtual #12                 // Method getAnnotationIntrospector:()Lorg/codehaus/jackson/map/AnnotationIntrospector;
       9: aload_1
      10: invokestatic  #13                 // Method org/codehaus/jackson/map/AnnotationIntrospector$Pair.create:(Lorg/codehaus/jackson/map/AnnotationIntrospector;Lorg/codehaus/jackson/map/AnnotationIntrospector;)Lorg/codehaus/jackson/map/AnnotationIntrospector;
      13: invokevirtual #14                 // Method org/codehaus/jackson/map/MapperConfig$Base.withAnnotationIntrospector:(Lorg/codehaus/jackson/map/AnnotationIntrospector;)Lorg/codehaus/jackson/map/MapperConfig$Base;
      16: putfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
      19: return

  public org.codehaus.jackson.map.introspect.VisibilityChecker<?> getDefaultVisibilityChecker();
    Code:
       0: aload_0
       1: getfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
       4: invokevirtual #15                 // Method org/codehaus/jackson/map/MapperConfig$Base.getVisibilityChecker:()Lorg/codehaus/jackson/map/introspect/VisibilityChecker;
       7: areturn

  public final org.codehaus.jackson.map.PropertyNamingStrategy getPropertyNamingStrategy();
    Code:
       0: aload_0
       1: getfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
       4: invokevirtual #16                 // Method org/codehaus/jackson/map/MapperConfig$Base.getPropertyNamingStrategy:()Lorg/codehaus/jackson/map/PropertyNamingStrategy;
       7: areturn

  public final org.codehaus.jackson.map.HandlerInstantiator getHandlerInstantiator();
    Code:
       0: aload_0
       1: getfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
       4: invokevirtual #17                 // Method org/codehaus/jackson/map/MapperConfig$Base.getHandlerInstantiator:()Lorg/codehaus/jackson/map/HandlerInstantiator;
       7: areturn

  public final void setMixInAnnotations(java.util.Map<java.lang.Class<?>, java.lang.Class<?>>);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_1
       3: ifnull        93
       6: aload_1
       7: invokeinterface #18,  1           // InterfaceMethod java/util/Map.size:()I
      12: ifle          93
      15: new           #19                 // class java/util/HashMap
      18: dup
      19: aload_1
      20: invokeinterface #18,  1           // InterfaceMethod java/util/Map.size:()I
      25: invokespecial #20                 // Method java/util/HashMap."<init>":(I)V
      28: astore_2
      29: aload_1
      30: invokeinterface #21,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      35: invokeinterface #22,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      40: astore_3
      41: aload_3
      42: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      47: ifeq          93
      50: aload_3
      51: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      56: checkcast     #25                 // class java/util/Map$Entry
      59: astore        4
      61: aload_2
      62: new           #26                 // class org/codehaus/jackson/map/type/ClassKey
      65: dup
      66: aload         4
      68: invokeinterface #27,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      73: checkcast     #28                 // class java/lang/Class
      76: invokespecial #29                 // Method org/codehaus/jackson/map/type/ClassKey."<init>":(Ljava/lang/Class;)V
      79: aload         4
      81: invokeinterface #30,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      86: invokevirtual #31                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      89: pop
      90: goto          41
      93: aload_0
      94: iconst_0
      95: putfield      #7                  // Field _mixInAnnotationsShared:Z
      98: aload_0
      99: aload_2
     100: putfield      #9                  // Field _mixInAnnotations:Ljava/util/HashMap;
     103: return

  public final void addMixInAnnotations(java.lang.Class<?>, java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #9                  // Field _mixInAnnotations:Ljava/util/HashMap;
       4: ifnonnull     26
       7: aload_0
       8: iconst_0
       9: putfield      #7                  // Field _mixInAnnotationsShared:Z
      12: aload_0
      13: new           #19                 // class java/util/HashMap
      16: dup
      17: invokespecial #32                 // Method java/util/HashMap."<init>":()V
      20: putfield      #9                  // Field _mixInAnnotations:Ljava/util/HashMap;
      23: goto          53
      26: aload_0
      27: getfield      #7                  // Field _mixInAnnotationsShared:Z
      30: ifeq          53
      33: aload_0
      34: iconst_0
      35: putfield      #7                  // Field _mixInAnnotationsShared:Z
      38: aload_0
      39: new           #19                 // class java/util/HashMap
      42: dup
      43: aload_0
      44: getfield      #9                  // Field _mixInAnnotations:Ljava/util/HashMap;
      47: invokespecial #33                 // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
      50: putfield      #9                  // Field _mixInAnnotations:Ljava/util/HashMap;
      53: aload_0
      54: getfield      #9                  // Field _mixInAnnotations:Ljava/util/HashMap;
      57: new           #26                 // class org/codehaus/jackson/map/type/ClassKey
      60: dup
      61: aload_1
      62: invokespecial #29                 // Method org/codehaus/jackson/map/type/ClassKey."<init>":(Ljava/lang/Class;)V
      65: aload_2
      66: invokevirtual #31                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      69: pop
      70: return

  public final java.lang.Class<?> findMixInClassFor(java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #9                  // Field _mixInAnnotations:Ljava/util/HashMap;
       4: ifnonnull     11
       7: aconst_null
       8: goto          29
      11: aload_0
      12: getfield      #9                  // Field _mixInAnnotations:Ljava/util/HashMap;
      15: new           #26                 // class org/codehaus/jackson/map/type/ClassKey
      18: dup
      19: aload_1
      20: invokespecial #29                 // Method org/codehaus/jackson/map/type/ClassKey."<init>":(Ljava/lang/Class;)V
      23: invokevirtual #34                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      26: checkcast     #28                 // class java/lang/Class
      29: areturn

  public final int mixInCount();
    Code:
       0: aload_0
       1: getfield      #9                  // Field _mixInAnnotations:Ljava/util/HashMap;
       4: ifnonnull     11
       7: iconst_0
       8: goto          18
      11: aload_0
      12: getfield      #9                  // Field _mixInAnnotations:Ljava/util/HashMap;
      15: invokevirtual #35                 // Method java/util/HashMap.size:()I
      18: ireturn

  public final org.codehaus.jackson.map.jsontype.TypeResolverBuilder<?> getDefaultTyper(org.codehaus.jackson.type.JavaType);
    Code:
       0: aload_0
       1: getfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
       4: invokevirtual #36                 // Method org/codehaus/jackson/map/MapperConfig$Base.getTypeResolverBuilder:()Lorg/codehaus/jackson/map/jsontype/TypeResolverBuilder;
       7: areturn

  public final org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver();
    Code:
       0: aload_0
       1: getfield      #6                  // Field _subtypeResolver:Lorg/codehaus/jackson/map/jsontype/SubtypeResolver;
       4: ifnonnull     18
       7: aload_0
       8: new           #37                 // class org/codehaus/jackson/map/jsontype/impl/StdSubtypeResolver
      11: dup
      12: invokespecial #38                 // Method org/codehaus/jackson/map/jsontype/impl/StdSubtypeResolver."<init>":()V
      15: putfield      #6                  // Field _subtypeResolver:Lorg/codehaus/jackson/map/jsontype/SubtypeResolver;
      18: aload_0
      19: getfield      #6                  // Field _subtypeResolver:Lorg/codehaus/jackson/map/jsontype/SubtypeResolver;
      22: areturn

  public final org.codehaus.jackson.map.type.TypeFactory getTypeFactory();
    Code:
       0: aload_0
       1: getfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
       4: invokevirtual #39                 // Method org/codehaus/jackson/map/MapperConfig$Base.getTypeFactory:()Lorg/codehaus/jackson/map/type/TypeFactory;
       7: areturn

  public final org.codehaus.jackson.type.JavaType constructType(java.lang.Class<?>);
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method getTypeFactory:()Lorg/codehaus/jackson/map/type/TypeFactory;
       4: aload_1
       5: aconst_null
       6: checkcast     #41                 // class org/codehaus/jackson/map/type/TypeBindings
       9: invokevirtual #42                 // Method org/codehaus/jackson/map/type/TypeFactory.constructType:(Ljava/lang/reflect/Type;Lorg/codehaus/jackson/map/type/TypeBindings;)Lorg/codehaus/jackson/type/JavaType;
      12: areturn

  public final org.codehaus.jackson.type.JavaType constructType(org.codehaus.jackson.type.TypeReference<?>);
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method getTypeFactory:()Lorg/codehaus/jackson/map/type/TypeFactory;
       4: aload_1
       5: invokevirtual #43                 // Method org/codehaus/jackson/type/TypeReference.getType:()Ljava/lang/reflect/Type;
       8: aconst_null
       9: checkcast     #41                 // class org/codehaus/jackson/map/type/TypeBindings
      12: invokevirtual #42                 // Method org/codehaus/jackson/map/type/TypeFactory.constructType:(Ljava/lang/reflect/Type;Lorg/codehaus/jackson/map/type/TypeBindings;)Lorg/codehaus/jackson/type/JavaType;
      15: areturn

  public org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType, java.lang.Class<?>);
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method getTypeFactory:()Lorg/codehaus/jackson/map/type/TypeFactory;
       4: aload_1
       5: aload_2
       6: invokevirtual #44                 // Method org/codehaus/jackson/map/type/TypeFactory.constructSpecializedType:(Lorg/codehaus/jackson/type/JavaType;Ljava/lang/Class;)Lorg/codehaus/jackson/type/JavaType;
       9: areturn

  public final java.text.DateFormat getDateFormat();
    Code:
       0: aload_0
       1: getfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
       4: invokevirtual #45                 // Method org/codehaus/jackson/map/MapperConfig$Base.getDateFormat:()Ljava/text/DateFormat;
       7: areturn

  public <DESC extends org.codehaus.jackson.map.BeanDescription> DESC introspectClassAnnotations(java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #46                 // Method constructType:(Ljava/lang/Class;)Lorg/codehaus/jackson/type/JavaType;
       6: invokevirtual #47                 // Method introspectClassAnnotations:(Lorg/codehaus/jackson/type/JavaType;)Lorg/codehaus/jackson/map/BeanDescription;
       9: areturn

  public abstract <DESC extends org.codehaus.jackson.map.BeanDescription> DESC introspectClassAnnotations(org.codehaus.jackson.type.JavaType);

  public <DESC extends org.codehaus.jackson.map.BeanDescription> DESC introspectDirectClassAnnotations(java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #46                 // Method constructType:(Ljava/lang/Class;)Lorg/codehaus/jackson/type/JavaType;
       6: invokevirtual #48                 // Method introspectDirectClassAnnotations:(Lorg/codehaus/jackson/type/JavaType;)Lorg/codehaus/jackson/map/BeanDescription;
       9: areturn

  public abstract <DESC extends org.codehaus.jackson.map.BeanDescription> DESC introspectDirectClassAnnotations(org.codehaus.jackson.type.JavaType);

  public org.codehaus.jackson.map.jsontype.TypeResolverBuilder<?> typeResolverBuilderInstance(org.codehaus.jackson.map.introspect.Annotated, java.lang.Class<? extends org.codehaus.jackson.map.jsontype.TypeResolverBuilder<?>>);
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method getHandlerInstantiator:()Lorg/codehaus/jackson/map/HandlerInstantiator;
       4: astore_3
       5: aload_3
       6: ifnull        26
       9: aload_3
      10: aload_0
      11: aload_1
      12: aload_2
      13: invokevirtual #50                 // Method org/codehaus/jackson/map/HandlerInstantiator.typeResolverBuilderInstance:(Lorg/codehaus/jackson/map/MapperConfig;Lorg/codehaus/jackson/map/introspect/Annotated;Ljava/lang/Class;)Lorg/codehaus/jackson/map/jsontype/TypeResolverBuilder;
      16: astore        4
      18: aload         4
      20: ifnull        26
      23: aload         4
      25: areturn
      26: aload_2
      27: aload_0
      28: invokevirtual #51                 // Method canOverrideAccessModifiers:()Z
      31: invokestatic  #52                 // Method org/codehaus/jackson/map/util/ClassUtil.createInstance:(Ljava/lang/Class;Z)Ljava/lang/Object;
      34: checkcast     #53                 // class org/codehaus/jackson/map/jsontype/TypeResolverBuilder
      37: areturn

  public org.codehaus.jackson.map.jsontype.TypeIdResolver typeIdResolverInstance(org.codehaus.jackson.map.introspect.Annotated, java.lang.Class<? extends org.codehaus.jackson.map.jsontype.TypeIdResolver>);
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method getHandlerInstantiator:()Lorg/codehaus/jackson/map/HandlerInstantiator;
       4: astore_3
       5: aload_3
       6: ifnull        26
       9: aload_3
      10: aload_0
      11: aload_1
      12: aload_2
      13: invokevirtual #54                 // Method org/codehaus/jackson/map/HandlerInstantiator.typeIdResolverInstance:(Lorg/codehaus/jackson/map/MapperConfig;Lorg/codehaus/jackson/map/introspect/Annotated;Ljava/lang/Class;)Lorg/codehaus/jackson/map/jsontype/TypeIdResolver;
      16: astore        4
      18: aload         4
      20: ifnull        26
      23: aload         4
      25: areturn
      26: aload_2
      27: aload_0
      28: invokevirtual #51                 // Method canOverrideAccessModifiers:()Z
      31: invokestatic  #52                 // Method org/codehaus/jackson/map/util/ClassUtil.createInstance:(Ljava/lang/Class;Z)Ljava/lang/Object;
      34: checkcast     #55                 // class org/codehaus/jackson/map/jsontype/TypeIdResolver
      37: areturn

  public final void setAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
       5: aload_1
       6: invokevirtual #14                 // Method org/codehaus/jackson/map/MapperConfig$Base.withAnnotationIntrospector:(Lorg/codehaus/jackson/map/AnnotationIntrospector;)Lorg/codehaus/jackson/map/MapperConfig$Base;
       9: putfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
      12: return

  public void setDateFormat(java.text.DateFormat);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: getstatic     #56                 // Field org/codehaus/jackson/map/util/StdDateFormat.instance:Lorg/codehaus/jackson/map/util/StdDateFormat;
       7: astore_1
       8: aload_0
       9: aload_0
      10: getfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
      13: aload_1
      14: invokevirtual #57                 // Method org/codehaus/jackson/map/MapperConfig$Base.withDateFormat:(Ljava/text/DateFormat;)Lorg/codehaus/jackson/map/MapperConfig$Base;
      17: putfield      #5                  // Field _base:Lorg/codehaus/jackson/map/MapperConfig$Base;
      20: return

  static {};
    Code:
       0: getstatic     #56                 // Field org/codehaus/jackson/map/util/StdDateFormat.instance:Lorg/codehaus/jackson/map/util/StdDateFormat;
       3: putstatic     #3                  // Field DEFAULT_DATE_FORMAT:Ljava/text/DateFormat;
       6: return
}
