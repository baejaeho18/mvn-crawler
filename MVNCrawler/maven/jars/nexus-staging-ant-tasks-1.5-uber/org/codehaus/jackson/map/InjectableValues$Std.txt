Compiled from "InjectableValues.java"
public class org.codehaus.jackson.map.InjectableValues$Std extends org.codehaus.jackson.map.InjectableValues {
  protected final java.util.Map<java.lang.String, java.lang.Object> _values;

  public org.codehaus.jackson.map.InjectableValues$Std();
    Code:
       0: aload_0
       1: new           #1                  // class java/util/HashMap
       4: dup
       5: invokespecial #2                  // Method java/util/HashMap."<init>":()V
       8: invokespecial #3                  // Method "<init>":(Ljava/util/Map;)V
      11: return

  public org.codehaus.jackson.map.InjectableValues$Std(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method org/codehaus/jackson/map/InjectableValues."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #5                  // Field _values:Ljava/util/Map;
       9: return

  public org.codehaus.jackson.map.InjectableValues$Std addValue(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field _values:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #6,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: aload_0
      13: areturn

  public org.codehaus.jackson.map.InjectableValues$Std addValue(java.lang.Class<?>, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field _values:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #7                  // Method java/lang/Class.getName:()Ljava/lang/String;
       8: aload_2
       9: invokeinterface #6,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: aload_0
      16: areturn

  public java.lang.Object findInjectableValue(java.lang.Object, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.BeanProperty, java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #8                  // class java/lang/String
       4: ifne          58
       7: aload_1
       8: ifnonnull     16
      11: ldc           #9                  // String [null]
      13: goto          23
      16: aload_1
      17: invokevirtual #10                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      20: invokevirtual #7                  // Method java/lang/Class.getName:()Ljava/lang/String;
      23: astore        5
      25: new           #11                 // class java/lang/IllegalArgumentException
      28: dup
      29: new           #12                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #14                 // String Unrecognized inject value id type (
      38: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload         5
      43: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: ldc           #16                 // String ), expecting String
      48: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      54: invokespecial #18                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      57: athrow
      58: aload_1
      59: checkcast     #8                  // class java/lang/String
      62: astore        5
      64: aload_0
      65: getfield      #5                  // Field _values:Ljava/util/Map;
      68: aload         5
      70: invokeinterface #19,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      75: astore        6
      77: aload         6
      79: ifnonnull     143
      82: aload_0
      83: getfield      #5                  // Field _values:Ljava/util/Map;
      86: aload         5
      88: invokeinterface #20,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      93: ifne          143
      96: new           #11                 // class java/lang/IllegalArgumentException
      99: dup
     100: new           #12                 // class java/lang/StringBuilder
     103: dup
     104: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
     107: ldc           #21                 // String No injectable id with value \'
     109: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     112: aload         5
     114: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     117: ldc           #22                 // String \' found (for property \'
     119: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     122: aload_3
     123: invokeinterface #23,  1           // InterfaceMethod org/codehaus/jackson/map/BeanProperty.getName:()Ljava/lang/String;
     128: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: ldc           #24                 // String \')
     133: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     136: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     139: invokespecial #18                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     142: athrow
     143: aload         6
     145: areturn
}
