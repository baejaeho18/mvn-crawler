Compiled from "CopticChronology.java"
public final class org.joda.time.chrono.CopticChronology extends org.joda.time.chrono.BasicFixedMonthChronology {
  private static final long serialVersionUID;

  public static final int AM;

  private static final org.joda.time.DateTimeField ERA_FIELD;

  private static final int MIN_YEAR;

  private static final int MAX_YEAR;

  private static final java.util.Map<org.joda.time.DateTimeZone, org.joda.time.chrono.CopticChronology[]> cCache;

  private static final org.joda.time.chrono.CopticChronology INSTANCE_UTC;

  public static org.joda.time.chrono.CopticChronology getInstanceUTC();
    Code:
       0: getstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/CopticChronology;
       3: areturn

  public static org.joda.time.chrono.CopticChronology getInstance();
    Code:
       0: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       3: iconst_4
       4: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/CopticChronology;
       7: areturn

  public static org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone);
    Code:
       0: aload_0
       1: iconst_4
       2: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/CopticChronology;
       5: areturn

  public static org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone, int);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_0
       8: getstatic     #4                  // Field cCache:Ljava/util/Map;
      11: dup
      12: astore_3
      13: monitorenter
      14: getstatic     #4                  // Field cCache:Ljava/util/Map;
      17: aload_0
      18: invokeinterface #5,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #6                  // class "[Lorg/joda/time/chrono/CopticChronology;"
      26: astore        4
      28: aload         4
      30: ifnonnull     52
      33: bipush        7
      35: anewarray     #7                  // class org/joda/time/chrono/CopticChronology
      38: astore        4
      40: getstatic     #4                  // Field cCache:Ljava/util/Map;
      43: aload_0
      44: aload         4
      46: invokeinterface #8,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      51: pop
      52: aload         4
      54: iload_1
      55: iconst_1
      56: isub
      57: aaload
      58: astore_2
      59: goto          91
      62: astore        5
      64: new           #10                 // class java/lang/IllegalArgumentException
      67: dup
      68: new           #11                 // class java/lang/StringBuilder
      71: dup
      72: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      75: ldc           #13                 // String Invalid min days in first week:
      77: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: iload_1
      81: invokevirtual #15                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      84: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      87: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      90: athrow
      91: aload_2
      92: ifnonnull     180
      95: aload_0
      96: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      99: if_acmpne     150
     102: new           #7                  // class org/joda/time/chrono/CopticChronology
     105: dup
     106: aconst_null
     107: aconst_null
     108: iload_1
     109: invokespecial #19                 // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
     112: astore_2
     113: new           #20                 // class org/joda/time/DateTime
     116: dup
     117: iconst_1
     118: iconst_1
     119: iconst_1
     120: iconst_0
     121: iconst_0
     122: iconst_0
     123: iconst_0
     124: aload_2
     125: invokespecial #21                 // Method org/joda/time/DateTime."<init>":(IIIIIIILorg/joda/time/Chronology;)V
     128: astore        5
     130: new           #7                  // class org/joda/time/chrono/CopticChronology
     133: dup
     134: aload_2
     135: aload         5
     137: aconst_null
     138: invokestatic  #22                 // Method org/joda/time/chrono/LimitChronology.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/ReadableDateTime;Lorg/joda/time/ReadableDateTime;)Lorg/joda/time/chrono/LimitChronology;
     141: aconst_null
     142: iload_1
     143: invokespecial #19                 // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
     146: astore_2
     147: goto          173
     150: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
     153: iload_1
     154: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/CopticChronology;
     157: astore_2
     158: new           #7                  // class org/joda/time/chrono/CopticChronology
     161: dup
     162: aload_2
     163: aload_0
     164: invokestatic  #23                 // Method org/joda/time/chrono/ZonedChronology.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;
     167: aconst_null
     168: iload_1
     169: invokespecial #19                 // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
     172: astore_2
     173: aload         4
     175: iload_1
     176: iconst_1
     177: isub
     178: aload_2
     179: aastore
     180: aload_3
     181: monitorexit
     182: goto          192
     185: astore        6
     187: aload_3
     188: monitorexit
     189: aload         6
     191: athrow
     192: aload_2
     193: areturn
    Exception table:
       from    to  target type
          52    59    62   Class java/lang/ArrayIndexOutOfBoundsException
          14   182   185   any
         185   189   185   any

  org.joda.time.chrono.CopticChronology(org.joda.time.Chronology, java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokespecial #24                 // Method org/joda/time/chrono/BasicFixedMonthChronology."<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
       7: return

  private java.lang.Object readResolve();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method getBase:()Lorg/joda/time/Chronology;
       4: astore_1
       5: aload_0
       6: invokevirtual #26                 // Method getMinimumDaysInFirstWeek:()I
       9: istore_2
      10: iload_2
      11: ifne          18
      14: iconst_4
      15: goto          19
      18: iload_2
      19: istore_2
      20: aload_1
      21: ifnonnull     34
      24: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      27: iload_2
      28: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/CopticChronology;
      31: goto          42
      34: aload_1
      35: invokevirtual #27                 // Method org/joda/time/Chronology.getZone:()Lorg/joda/time/DateTimeZone;
      38: iload_2
      39: invokestatic  #3                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/CopticChronology;
      42: areturn

  public org.joda.time.Chronology withUTC();
    Code:
       0: getstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/CopticChronology;
       3: areturn

  public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: invokestatic  #2                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokevirtual #28                 // Method getZone:()Lorg/joda/time/DateTimeZone;
      13: if_acmpne     18
      16: aload_0
      17: areturn
      18: aload_1
      19: invokestatic  #29                 // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/CopticChronology;
      22: areturn

  long calculateFirstDayOfYearMillis(int);
    Code:
       0: iload_1
       1: sipush        1687
       4: isub
       5: istore_2
       6: iload_2
       7: ifgt          19
      10: iload_2
      11: iconst_3
      12: iadd
      13: iconst_2
      14: ishr
      15: istore_3
      16: goto          34
      19: iload_2
      20: iconst_2
      21: ishr
      22: istore_3
      23: aload_0
      24: iload_1
      25: invokevirtual #30                 // Method isLeapYear:(I)Z
      28: ifne          34
      31: iinc          3, 1
      34: iload_2
      35: i2l
      36: ldc2_w        #31                 // long 365l
      39: lmul
      40: iload_3
      41: i2l
      42: ladd
      43: ldc2_w        #33                 // long 86400000l
      46: lmul
      47: lstore        4
      49: lload         4
      51: ldc2_w        #35                 // long 21859200000l
      54: ladd
      55: lreturn

  int getMinYear();
    Code:
       0: ldc           #37                 // int -292269337
       2: ireturn

  int getMaxYear();
    Code:
       0: ldc           #38                 // int 292272708
       2: ireturn

  long getApproxMillisAtEpochDividedByTwo();
    Code:
       0: ldc2_w        #39                 // long 26607895200000l
       3: lreturn

  protected void assemble(org.joda.time.chrono.AssembledChronology$Fields);
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method getBase:()Lorg/joda/time/Chronology;
       4: ifnonnull     76
       7: aload_0
       8: aload_1
       9: invokespecial #41                 // Method org/joda/time/chrono/BasicFixedMonthChronology.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V
      12: aload_1
      13: new           #42                 // class org/joda/time/field/SkipDateTimeField
      16: dup
      17: aload_0
      18: aload_1
      19: getfield      #43                 // Field org/joda/time/chrono/AssembledChronology$Fields.year:Lorg/joda/time/DateTimeField;
      22: invokespecial #44                 // Method org/joda/time/field/SkipDateTimeField."<init>":(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V
      25: putfield      #43                 // Field org/joda/time/chrono/AssembledChronology$Fields.year:Lorg/joda/time/DateTimeField;
      28: aload_1
      29: new           #42                 // class org/joda/time/field/SkipDateTimeField
      32: dup
      33: aload_0
      34: aload_1
      35: getfield      #45                 // Field org/joda/time/chrono/AssembledChronology$Fields.weekyear:Lorg/joda/time/DateTimeField;
      38: invokespecial #44                 // Method org/joda/time/field/SkipDateTimeField."<init>":(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V
      41: putfield      #45                 // Field org/joda/time/chrono/AssembledChronology$Fields.weekyear:Lorg/joda/time/DateTimeField;
      44: aload_1
      45: getstatic     #46                 // Field ERA_FIELD:Lorg/joda/time/DateTimeField;
      48: putfield      #47                 // Field org/joda/time/chrono/AssembledChronology$Fields.era:Lorg/joda/time/DateTimeField;
      51: aload_1
      52: new           #48                 // class org/joda/time/chrono/BasicMonthOfYearDateTimeField
      55: dup
      56: aload_0
      57: bipush        13
      59: invokespecial #49                 // Method org/joda/time/chrono/BasicMonthOfYearDateTimeField."<init>":(Lorg/joda/time/chrono/BasicChronology;I)V
      62: putfield      #50                 // Field org/joda/time/chrono/AssembledChronology$Fields.monthOfYear:Lorg/joda/time/DateTimeField;
      65: aload_1
      66: aload_1
      67: getfield      #50                 // Field org/joda/time/chrono/AssembledChronology$Fields.monthOfYear:Lorg/joda/time/DateTimeField;
      70: invokevirtual #51                 // Method org/joda/time/DateTimeField.getDurationField:()Lorg/joda/time/DurationField;
      73: putfield      #52                 // Field org/joda/time/chrono/AssembledChronology$Fields.months:Lorg/joda/time/DurationField;
      76: return

  static {};
    Code:
       0: new           #53                 // class org/joda/time/chrono/BasicSingleEraDateTimeField
       3: dup
       4: ldc           #54                 // String AM
       6: invokespecial #55                 // Method org/joda/time/chrono/BasicSingleEraDateTimeField."<init>":(Ljava/lang/String;)V
       9: putstatic     #46                 // Field ERA_FIELD:Lorg/joda/time/DateTimeField;
      12: new           #56                 // class java/util/HashMap
      15: dup
      16: invokespecial #57                 // Method java/util/HashMap."<init>":()V
      19: putstatic     #4                  // Field cCache:Ljava/util/Map;
      22: getstatic     #18                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      25: invokestatic  #29                 // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/CopticChronology;
      28: putstatic     #1                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/CopticChronology;
      31: return
}
