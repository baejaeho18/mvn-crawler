Compiled from "JulianChronology.java"
public final class org.joda.time.chrono.JulianChronology extends org.joda.time.chrono.BasicGJChronology {
  private static final long serialVersionUID;

  private static final long MILLIS_PER_YEAR;

  private static final long MILLIS_PER_MONTH;

  private static final int MIN_YEAR;

  private static final int MAX_YEAR;

  private static final org.joda.time.chrono.JulianChronology INSTANCE_UTC;

  private static final java.util.Map<org.joda.time.DateTimeZone, org.joda.time.chrono.JulianChronology[]> cCache;

  static int adjustYearForSet(int);
    Code:
       0: iload_0
       1: ifgt          28
       4: iload_0
       5: ifne          25
       8: new           #1                  // class org/joda/time/IllegalFieldValueException
      11: dup
      12: invokestatic  #2                  // Method org/joda/time/DateTimeFieldType.year:()Lorg/joda/time/DateTimeFieldType;
      15: iload_0
      16: invokestatic  #3                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      19: aconst_null
      20: aconst_null
      21: invokespecial #4                  // Method org/joda/time/IllegalFieldValueException."<init>":(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      24: athrow
      25: iinc          0, 1
      28: iload_0
      29: ireturn

  public static org.joda.time.chrono.JulianChronology getInstanceUTC();
    Code:
       0: getstatic     #5                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/JulianChronology;
       3: areturn

  public static org.joda.time.chrono.JulianChronology getInstance();
    Code:
       0: invokestatic  #6                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       3: iconst_4
       4: invokestatic  #7                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;
       7: areturn

  public static org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone);
    Code:
       0: aload_0
       1: iconst_4
       2: invokestatic  #7                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;
       5: areturn

  public static org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone, int);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: invokestatic  #6                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_0
       8: getstatic     #8                  // Field cCache:Ljava/util/Map;
      11: dup
      12: astore_3
      13: monitorenter
      14: getstatic     #8                  // Field cCache:Ljava/util/Map;
      17: aload_0
      18: invokeinterface #9,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #10                 // class "[Lorg/joda/time/chrono/JulianChronology;"
      26: astore        4
      28: aload         4
      30: ifnonnull     52
      33: bipush        7
      35: anewarray     #11                 // class org/joda/time/chrono/JulianChronology
      38: astore        4
      40: getstatic     #8                  // Field cCache:Ljava/util/Map;
      43: aload_0
      44: aload         4
      46: invokeinterface #12,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      51: pop
      52: aload         4
      54: iload_1
      55: iconst_1
      56: isub
      57: aaload
      58: astore_2
      59: goto          91
      62: astore        5
      64: new           #14                 // class java/lang/IllegalArgumentException
      67: dup
      68: new           #15                 // class java/lang/StringBuilder
      71: dup
      72: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      75: ldc           #17                 // String Invalid min days in first week:
      77: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: iload_1
      81: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      84: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      87: invokespecial #21                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      90: athrow
      91: aload_2
      92: ifnonnull     146
      95: aload_0
      96: getstatic     #22                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      99: if_acmpne     116
     102: new           #11                 // class org/joda/time/chrono/JulianChronology
     105: dup
     106: aconst_null
     107: aconst_null
     108: iload_1
     109: invokespecial #23                 // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
     112: astore_2
     113: goto          139
     116: getstatic     #22                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
     119: iload_1
     120: invokestatic  #7                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;
     123: astore_2
     124: new           #11                 // class org/joda/time/chrono/JulianChronology
     127: dup
     128: aload_2
     129: aload_0
     130: invokestatic  #24                 // Method org/joda/time/chrono/ZonedChronology.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;
     133: aconst_null
     134: iload_1
     135: invokespecial #23                 // Method "<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
     138: astore_2
     139: aload         4
     141: iload_1
     142: iconst_1
     143: isub
     144: aload_2
     145: aastore
     146: aload_3
     147: monitorexit
     148: goto          158
     151: astore        6
     153: aload_3
     154: monitorexit
     155: aload         6
     157: athrow
     158: aload_2
     159: areturn
    Exception table:
       from    to  target type
          52    59    62   Class java/lang/ArrayIndexOutOfBoundsException
          14   148   151   any
         151   155   151   any

  org.joda.time.chrono.JulianChronology(org.joda.time.Chronology, java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokespecial #25                 // Method org/joda/time/chrono/BasicGJChronology."<init>":(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V
       7: return

  private java.lang.Object readResolve();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method getBase:()Lorg/joda/time/Chronology;
       4: astore_1
       5: aload_0
       6: invokevirtual #27                 // Method getMinimumDaysInFirstWeek:()I
       9: istore_2
      10: iload_2
      11: ifne          18
      14: iconst_4
      15: goto          19
      18: iload_2
      19: istore_2
      20: aload_1
      21: ifnonnull     34
      24: getstatic     #22                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      27: iload_2
      28: invokestatic  #7                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;
      31: goto          42
      34: aload_1
      35: invokevirtual #28                 // Method org/joda/time/Chronology.getZone:()Lorg/joda/time/DateTimeZone;
      38: iload_2
      39: invokestatic  #7                  // Method getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;
      42: areturn

  public org.joda.time.Chronology withUTC();
    Code:
       0: getstatic     #5                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/JulianChronology;
       3: areturn

  public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: invokestatic  #6                  // Method org/joda/time/DateTimeZone.getDefault:()Lorg/joda/time/DateTimeZone;
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokevirtual #29                 // Method getZone:()Lorg/joda/time/DateTimeZone;
      13: if_acmpne     18
      16: aload_0
      17: areturn
      18: aload_1
      19: invokestatic  #30                 // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/JulianChronology;
      22: areturn

  long getDateMidnightMillis(int, int, int) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #31                 // Method adjustYearForSet:(I)I
       5: iload_2
       6: iload_3
       7: invokespecial #32                 // Method org/joda/time/chrono/BasicGJChronology.getDateMidnightMillis:(III)J
      10: lreturn

  boolean isLeapYear(int);
    Code:
       0: iload_1
       1: iconst_3
       2: iand
       3: ifne          10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ireturn

  long calculateFirstDayOfYearMillis(int);
    Code:
       0: iload_1
       1: sipush        1968
       4: isub
       5: istore_2
       6: iload_2
       7: ifgt          19
      10: iload_2
      11: iconst_3
      12: iadd
      13: iconst_2
      14: ishr
      15: istore_3
      16: goto          34
      19: iload_2
      20: iconst_2
      21: ishr
      22: istore_3
      23: aload_0
      24: iload_1
      25: invokevirtual #33                 // Method isLeapYear:(I)Z
      28: ifne          34
      31: iinc          3, 1
      34: iload_2
      35: i2l
      36: ldc2_w        #34                 // long 365l
      39: lmul
      40: iload_3
      41: i2l
      42: ladd
      43: ldc2_w        #36                 // long 86400000l
      46: lmul
      47: lstore        4
      49: lload         4
      51: ldc2_w        #38                 // long 62035200000l
      54: lsub
      55: lreturn

  int getMinYear();
    Code:
       0: ldc           #40                 // int -292269054
       2: ireturn

  int getMaxYear();
    Code:
       0: ldc           #41                 // int 292272992
       2: ireturn

  long getAverageMillisPerYear();
    Code:
       0: ldc2_w        #42                 // long 31557600000l
       3: lreturn

  long getAverageMillisPerYearDividedByTwo();
    Code:
       0: ldc2_w        #44                 // long 15778800000l
       3: lreturn

  long getAverageMillisPerMonth();
    Code:
       0: ldc2_w        #46                 // long 2629800000l
       3: lreturn

  long getApproxMillisAtEpochDividedByTwo();
    Code:
       0: ldc2_w        #48                 // long 31083663600000l
       3: lreturn

  protected void assemble(org.joda.time.chrono.AssembledChronology$Fields);
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method getBase:()Lorg/joda/time/Chronology;
       4: ifnonnull     44
       7: aload_0
       8: aload_1
       9: invokespecial #50                 // Method org/joda/time/chrono/BasicGJChronology.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V
      12: aload_1
      13: new           #51                 // class org/joda/time/field/SkipDateTimeField
      16: dup
      17: aload_0
      18: aload_1
      19: getfield      #52                 // Field org/joda/time/chrono/AssembledChronology$Fields.year:Lorg/joda/time/DateTimeField;
      22: invokespecial #53                 // Method org/joda/time/field/SkipDateTimeField."<init>":(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V
      25: putfield      #52                 // Field org/joda/time/chrono/AssembledChronology$Fields.year:Lorg/joda/time/DateTimeField;
      28: aload_1
      29: new           #51                 // class org/joda/time/field/SkipDateTimeField
      32: dup
      33: aload_0
      34: aload_1
      35: getfield      #54                 // Field org/joda/time/chrono/AssembledChronology$Fields.weekyear:Lorg/joda/time/DateTimeField;
      38: invokespecial #53                 // Method org/joda/time/field/SkipDateTimeField."<init>":(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V
      41: putfield      #54                 // Field org/joda/time/chrono/AssembledChronology$Fields.weekyear:Lorg/joda/time/DateTimeField;
      44: return

  static {};
    Code:
       0: new           #55                 // class java/util/HashMap
       3: dup
       4: invokespecial #56                 // Method java/util/HashMap."<init>":()V
       7: putstatic     #8                  // Field cCache:Ljava/util/Map;
      10: getstatic     #22                 // Field org/joda/time/DateTimeZone.UTC:Lorg/joda/time/DateTimeZone;
      13: invokestatic  #30                 // Method getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/JulianChronology;
      16: putstatic     #5                  // Field INSTANCE_UTC:Lorg/joda/time/chrono/JulianChronology;
      19: return
}
