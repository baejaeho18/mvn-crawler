Compiled from "BaseSingleFieldPeriod.java"
public abstract class org.joda.time.base.BaseSingleFieldPeriod implements org.joda.time.ReadablePeriod, java.lang.Comparable<org.joda.time.base.BaseSingleFieldPeriod>, java.io.Serializable {
  private static final long serialVersionUID;

  private volatile int iPeriod;

  protected static int between(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant, org.joda.time.DurationFieldType);
    Code:
       0: aload_0
       1: ifnull        8
       4: aload_1
       5: ifnonnull     18
       8: new           #1                  // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #2                  // String ReadableInstant objects must not be null
      14: invokespecial #3                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: invokestatic  #4                  // Method org/joda/time/DateTimeUtils.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;
      22: astore_3
      23: aload_2
      24: aload_3
      25: invokevirtual #5                  // Method org/joda/time/DurationFieldType.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;
      28: aload_1
      29: invokeinterface #6,  1            // InterfaceMethod org/joda/time/ReadableInstant.getMillis:()J
      34: aload_0
      35: invokeinterface #6,  1            // InterfaceMethod org/joda/time/ReadableInstant.getMillis:()J
      40: invokevirtual #7                  // Method org/joda/time/DurationField.getDifference:(JJ)I
      43: istore        4
      45: iload         4
      47: ireturn

  protected static int between(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial, org.joda.time.ReadablePeriod);
    Code:
       0: aload_0
       1: ifnull        8
       4: aload_1
       5: ifnonnull     18
       8: new           #1                  // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #8                  // String ReadablePartial objects must not be null
      14: invokespecial #3                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: invokeinterface #9,  1            // InterfaceMethod org/joda/time/ReadablePartial.size:()I
      24: aload_1
      25: invokeinterface #9,  1            // InterfaceMethod org/joda/time/ReadablePartial.size:()I
      30: if_icmpeq     43
      33: new           #1                  // class java/lang/IllegalArgumentException
      36: dup
      37: ldc           #10                 // String ReadablePartial objects must have the same set of fields
      39: invokespecial #3                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: iconst_0
      44: istore_3
      45: aload_0
      46: invokeinterface #9,  1            // InterfaceMethod org/joda/time/ReadablePartial.size:()I
      51: istore        4
      53: iload_3
      54: iload         4
      56: if_icmpge     92
      59: aload_0
      60: iload_3
      61: invokeinterface #11,  2           // InterfaceMethod org/joda/time/ReadablePartial.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;
      66: aload_1
      67: iload_3
      68: invokeinterface #11,  2           // InterfaceMethod org/joda/time/ReadablePartial.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;
      73: if_acmpeq     86
      76: new           #1                  // class java/lang/IllegalArgumentException
      79: dup
      80: ldc           #10                 // String ReadablePartial objects must have the same set of fields
      82: invokespecial #3                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      85: athrow
      86: iinc          3, 1
      89: goto          53
      92: aload_0
      93: invokestatic  #12                 // Method org/joda/time/DateTimeUtils.isContiguous:(Lorg/joda/time/ReadablePartial;)Z
      96: ifne          109
      99: new           #1                  // class java/lang/IllegalArgumentException
     102: dup
     103: ldc           #13                 // String ReadablePartial objects must be contiguous
     105: invokespecial #3                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     108: athrow
     109: aload_0
     110: invokeinterface #14,  1           // InterfaceMethod org/joda/time/ReadablePartial.getChronology:()Lorg/joda/time/Chronology;
     115: invokestatic  #15                 // Method org/joda/time/DateTimeUtils.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;
     118: invokevirtual #16                 // Method org/joda/time/Chronology.withUTC:()Lorg/joda/time/Chronology;
     121: astore_3
     122: aload_3
     123: aload_2
     124: aload_3
     125: aload_0
     126: lconst_0
     127: invokevirtual #17                 // Method org/joda/time/Chronology.set:(Lorg/joda/time/ReadablePartial;J)J
     130: aload_3
     131: aload_1
     132: lconst_0
     133: invokevirtual #17                 // Method org/joda/time/Chronology.set:(Lorg/joda/time/ReadablePartial;J)J
     136: invokevirtual #18                 // Method org/joda/time/Chronology.get:(Lorg/joda/time/ReadablePeriod;JJ)[I
     139: astore        4
     141: aload         4
     143: iconst_0
     144: iaload
     145: ireturn

  protected static int standardPeriodIn(org.joda.time.ReadablePeriod, long);
    Code:
       0: aload_0
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: invokestatic  #19                 // Method org/joda/time/chrono/ISOChronology.getInstanceUTC:()Lorg/joda/time/chrono/ISOChronology;
       9: astore_3
      10: lconst_0
      11: lstore        4
      13: iconst_0
      14: istore        6
      16: iload         6
      18: aload_0
      19: invokeinterface #20,  1           // InterfaceMethod org/joda/time/ReadablePeriod.size:()I
      24: if_icmpge     127
      27: aload_0
      28: iload         6
      30: invokeinterface #21,  2           // InterfaceMethod org/joda/time/ReadablePeriod.getValue:(I)I
      35: istore        7
      37: iload         7
      39: ifeq          121
      42: aload_0
      43: iload         6
      45: invokeinterface #22,  2           // InterfaceMethod org/joda/time/ReadablePeriod.getFieldType:(I)Lorg/joda/time/DurationFieldType;
      50: aload_3
      51: invokevirtual #5                  // Method org/joda/time/DurationFieldType.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;
      54: astore        8
      56: aload         8
      58: invokevirtual #23                 // Method org/joda/time/DurationField.isPrecise:()Z
      61: ifne          104
      64: new           #1                  // class java/lang/IllegalArgumentException
      67: dup
      68: new           #24                 // class java/lang/StringBuilder
      71: dup
      72: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      75: ldc           #26                 // String Cannot convert period to duration as
      77: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: aload         8
      82: invokevirtual #28                 // Method org/joda/time/DurationField.getName:()Ljava/lang/String;
      85: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: ldc           #29                 // String  is not precise in the period
      90: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: aload_0
      94: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      97: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     100: invokespecial #3                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     103: athrow
     104: lload         4
     106: aload         8
     108: invokevirtual #32                 // Method org/joda/time/DurationField.getUnitMillis:()J
     111: iload         7
     113: invokestatic  #33                 // Method org/joda/time/field/FieldUtils.safeMultiply:(JI)J
     116: invokestatic  #34                 // Method org/joda/time/field/FieldUtils.safeAdd:(JJ)J
     119: lstore        4
     121: iinc          6, 1
     124: goto          16
     127: lload         4
     129: lload_1
     130: ldiv
     131: invokestatic  #35                 // Method org/joda/time/field/FieldUtils.safeToInt:(J)I
     134: ireturn

  protected org.joda.time.base.BaseSingleFieldPeriod(int);
    Code:
       0: aload_0
       1: invokespecial #36                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #37                 // Field iPeriod:I
       9: return

  protected int getValue();
    Code:
       0: aload_0
       1: getfield      #37                 // Field iPeriod:I
       4: ireturn

  protected void setValue(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #37                 // Field iPeriod:I
       5: return

  public abstract org.joda.time.DurationFieldType getFieldType();

  public abstract org.joda.time.PeriodType getPeriodType();

  public int size();
    Code:
       0: iconst_1
       1: ireturn

  public org.joda.time.DurationFieldType getFieldType(int);
    Code:
       0: iload_1
       1: ifeq          16
       4: new           #38                 // class java/lang/IndexOutOfBoundsException
       7: dup
       8: iload_1
       9: invokestatic  #39                 // Method java/lang/String.valueOf:(I)Ljava/lang/String;
      12: invokespecial #40                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: aload_0
      17: invokevirtual #41                 // Method getFieldType:()Lorg/joda/time/DurationFieldType;
      20: areturn

  public int getValue(int);
    Code:
       0: iload_1
       1: ifeq          16
       4: new           #38                 // class java/lang/IndexOutOfBoundsException
       7: dup
       8: iload_1
       9: invokestatic  #39                 // Method java/lang/String.valueOf:(I)Ljava/lang/String;
      12: invokespecial #40                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: aload_0
      17: invokevirtual #42                 // Method getValue:()I
      20: ireturn

  public int get(org.joda.time.DurationFieldType);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #41                 // Method getFieldType:()Lorg/joda/time/DurationFieldType;
       5: if_acmpne     13
       8: aload_0
       9: invokevirtual #42                 // Method getValue:()I
      12: ireturn
      13: iconst_0
      14: ireturn

  public boolean isSupported(org.joda.time.DurationFieldType);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #41                 // Method getFieldType:()Lorg/joda/time/DurationFieldType;
       5: if_acmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public org.joda.time.Period toPeriod();
    Code:
       0: getstatic     #43                 // Field org/joda/time/Period.ZERO:Lorg/joda/time/Period;
       3: aload_0
       4: invokevirtual #44                 // Method org/joda/time/Period.withFields:(Lorg/joda/time/ReadablePeriod;)Lorg/joda/time/Period;
       7: areturn

  public org.joda.time.MutablePeriod toMutablePeriod();
    Code:
       0: new           #45                 // class org/joda/time/MutablePeriod
       3: dup
       4: invokespecial #46                 // Method org/joda/time/MutablePeriod."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokevirtual #47                 // Method org/joda/time/MutablePeriod.add:(Lorg/joda/time/ReadablePeriod;)V
      13: aload_1
      14: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #48                 // class org/joda/time/ReadablePeriod
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #48                 // class org/joda/time/ReadablePeriod
      20: astore_2
      21: aload_2
      22: invokeinterface #49,  1           // InterfaceMethod org/joda/time/ReadablePeriod.getPeriodType:()Lorg/joda/time/PeriodType;
      27: aload_0
      28: invokevirtual #50                 // Method getPeriodType:()Lorg/joda/time/PeriodType;
      31: if_acmpne     52
      34: aload_2
      35: iconst_0
      36: invokeinterface #21,  2           // InterfaceMethod org/joda/time/ReadablePeriod.getValue:(I)I
      41: aload_0
      42: invokevirtual #42                 // Method getValue:()I
      45: if_icmpne     52
      48: iconst_1
      49: goto          53
      52: iconst_0
      53: ireturn

  public int hashCode();
    Code:
       0: bipush        17
       2: istore_1
       3: bipush        27
       5: iload_1
       6: imul
       7: aload_0
       8: invokevirtual #42                 // Method getValue:()I
      11: iadd
      12: istore_1
      13: bipush        27
      15: iload_1
      16: imul
      17: aload_0
      18: invokevirtual #41                 // Method getFieldType:()Lorg/joda/time/DurationFieldType;
      21: invokevirtual #51                 // Method java/lang/Object.hashCode:()I
      24: iadd
      25: istore_1
      26: iload_1
      27: ireturn

  public int compareTo(org.joda.time.base.BaseSingleFieldPeriod);
    Code:
       0: aload_1
       1: invokevirtual #52                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: aload_0
       5: invokevirtual #52                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       8: if_acmpeq     48
      11: new           #53                 // class java/lang/ClassCastException
      14: dup
      15: new           #24                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      22: aload_0
      23: invokevirtual #52                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      26: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      29: ldc           #54                 // String  cannot be compared to
      31: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: aload_1
      35: invokevirtual #52                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      38: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      41: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      44: invokespecial #55                 // Method java/lang/ClassCastException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: aload_1
      49: invokevirtual #42                 // Method getValue:()I
      52: istore_2
      53: aload_0
      54: invokevirtual #42                 // Method getValue:()I
      57: istore_3
      58: iload_3
      59: iload_2
      60: if_icmple     65
      63: iconst_1
      64: ireturn
      65: iload_3
      66: iload_2
      67: if_icmpge     72
      70: iconst_m1
      71: ireturn
      72: iconst_0
      73: ireturn

  public int compareTo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #56                 // class org/joda/time/base/BaseSingleFieldPeriod
       5: invokevirtual #57                 // Method compareTo:(Lorg/joda/time/base/BaseSingleFieldPeriod;)I
       8: ireturn
}
