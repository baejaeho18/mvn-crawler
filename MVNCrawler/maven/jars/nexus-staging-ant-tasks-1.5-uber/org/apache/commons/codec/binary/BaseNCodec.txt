Compiled from "BaseNCodec.java"
public abstract class org.apache.commons.codec.binary.BaseNCodec implements org.apache.commons.codec.BinaryEncoder,org.apache.commons.codec.BinaryDecoder {
  public static final int MIME_CHUNK_SIZE;

  public static final int PEM_CHUNK_SIZE;

  private static final int DEFAULT_BUFFER_RESIZE_FACTOR;

  private static final int DEFAULT_BUFFER_SIZE;

  protected static final int MASK_8BITS;

  protected static final byte PAD_DEFAULT;

  protected final byte PAD;

  private final int unencodedBlockSize;

  private final int encodedBlockSize;

  protected final int lineLength;

  private final int chunkSeparatorLength;

  protected byte[] buffer;

  protected int pos;

  private int readPos;

  protected boolean eof;

  protected int currentLinePos;

  protected int modulus;

  protected org.apache.commons.codec.binary.BaseNCodec(int, int, int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        61
       7: putfield      #2                  // Field PAD:B
      10: aload_0
      11: iload_1
      12: putfield      #3                  // Field unencodedBlockSize:I
      15: aload_0
      16: iload_2
      17: putfield      #4                  // Field encodedBlockSize:I
      20: aload_0
      21: iload_3
      22: ifle          38
      25: iload         4
      27: ifle          38
      30: iload_3
      31: iload_2
      32: idiv
      33: iload_2
      34: imul
      35: goto          39
      38: iconst_0
      39: putfield      #5                  // Field lineLength:I
      42: aload_0
      43: iload         4
      45: putfield      #6                  // Field chunkSeparatorLength:I
      48: return

  boolean hasData();
    Code:
       0: aload_0
       1: getfield      #7                  // Field buffer:[B
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  int available();
    Code:
       0: aload_0
       1: getfield      #7                  // Field buffer:[B
       4: ifnull        19
       7: aload_0
       8: getfield      #8                  // Field pos:I
      11: aload_0
      12: getfield      #9                  // Field readPos:I
      15: isub
      16: goto          20
      19: iconst_0
      20: ireturn

  protected int getDefaultBufferSize();
    Code:
       0: sipush        8192
       3: ireturn

  private void resizeBuffer();
    Code:
       0: aload_0
       1: getfield      #7                  // Field buffer:[B
       4: ifnonnull     30
       7: aload_0
       8: aload_0
       9: invokevirtual #10                 // Method getDefaultBufferSize:()I
      12: newarray       byte
      14: putfield      #7                  // Field buffer:[B
      17: aload_0
      18: iconst_0
      19: putfield      #8                  // Field pos:I
      22: aload_0
      23: iconst_0
      24: putfield      #9                  // Field readPos:I
      27: goto          60
      30: aload_0
      31: getfield      #7                  // Field buffer:[B
      34: arraylength
      35: iconst_2
      36: imul
      37: newarray       byte
      39: astore_1
      40: aload_0
      41: getfield      #7                  // Field buffer:[B
      44: iconst_0
      45: aload_1
      46: iconst_0
      47: aload_0
      48: getfield      #7                  // Field buffer:[B
      51: arraylength
      52: invokestatic  #11                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      55: aload_0
      56: aload_1
      57: putfield      #7                  // Field buffer:[B
      60: return

  protected void ensureBufferSize(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field buffer:[B
       4: ifnull        21
       7: aload_0
       8: getfield      #7                  // Field buffer:[B
      11: arraylength
      12: aload_0
      13: getfield      #8                  // Field pos:I
      16: iload_1
      17: iadd
      18: if_icmpge     25
      21: aload_0
      22: invokespecial #12                 // Method resizeBuffer:()V
      25: return

  int readResults(byte[], int, int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field buffer:[B
       4: ifnull        62
       7: aload_0
       8: invokevirtual #13                 // Method available:()I
      11: iload_3
      12: invokestatic  #14                 // Method java/lang/Math.min:(II)I
      15: istore        4
      17: aload_0
      18: getfield      #7                  // Field buffer:[B
      21: aload_0
      22: getfield      #9                  // Field readPos:I
      25: aload_1
      26: iload_2
      27: iload         4
      29: invokestatic  #11                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      32: aload_0
      33: dup
      34: getfield      #9                  // Field readPos:I
      37: iload         4
      39: iadd
      40: putfield      #9                  // Field readPos:I
      43: aload_0
      44: getfield      #9                  // Field readPos:I
      47: aload_0
      48: getfield      #8                  // Field pos:I
      51: if_icmplt     59
      54: aload_0
      55: aconst_null
      56: putfield      #7                  // Field buffer:[B
      59: iload         4
      61: ireturn
      62: aload_0
      63: getfield      #15                 // Field eof:Z
      66: ifeq          73
      69: iconst_m1
      70: goto          74
      73: iconst_0
      74: ireturn

  protected static boolean isWhiteSpace(byte);
    Code:
       0: iload_0
       1: lookupswitch  { // 4
                     9: 44
                    10: 44
                    13: 44
                    32: 44
               default: 46
          }
      44: iconst_1
      45: ireturn
      46: iconst_0
      47: ireturn

  private void reset();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #7                  // Field buffer:[B
       5: aload_0
       6: iconst_0
       7: putfield      #8                  // Field pos:I
      10: aload_0
      11: iconst_0
      12: putfield      #9                  // Field readPos:I
      15: aload_0
      16: iconst_0
      17: putfield      #16                 // Field currentLinePos:I
      20: aload_0
      21: iconst_0
      22: putfield      #17                 // Field modulus:I
      25: aload_0
      26: iconst_0
      27: putfield      #15                 // Field eof:Z
      30: return

  public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;
    Code:
       0: aload_1
       1: instanceof    #18                 // class "[B"
       4: ifne          17
       7: new           #19                 // class org/apache/commons/codec/EncoderException
      10: dup
      11: ldc           #20                 // String Parameter supplied to Base-N encode is not a byte[]
      13: invokespecial #21                 // Method org/apache/commons/codec/EncoderException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: checkcast     #18                 // class "[B"
      22: checkcast     #18                 // class "[B"
      25: invokevirtual #22                 // Method encode:([B)[B
      28: areturn

  public java.lang.String encodeToString(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #22                 // Method encode:([B)[B
       5: invokestatic  #23                 // Method org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;
       8: areturn

  public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException;
    Code:
       0: aload_1
       1: instanceof    #18                 // class "[B"
       4: ifeq          19
       7: aload_0
       8: aload_1
       9: checkcast     #18                 // class "[B"
      12: checkcast     #18                 // class "[B"
      15: invokevirtual #24                 // Method decode:([B)[B
      18: areturn
      19: aload_1
      20: instanceof    #25                 // class java/lang/String
      23: ifeq          35
      26: aload_0
      27: aload_1
      28: checkcast     #25                 // class java/lang/String
      31: invokevirtual #26                 // Method decode:(Ljava/lang/String;)[B
      34: areturn
      35: new           #27                 // class org/apache/commons/codec/DecoderException
      38: dup
      39: ldc           #28                 // String Parameter supplied to Base-N decode is not a byte[] or a String
      41: invokespecial #29                 // Method org/apache/commons/codec/DecoderException."<init>":(Ljava/lang/String;)V
      44: athrow

  public byte[] decode(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #30                 // Method org/apache/commons/codec/binary/StringUtils.getBytesUtf8:(Ljava/lang/String;)[B
       5: invokevirtual #24                 // Method decode:([B)[B
       8: areturn

  public byte[] decode(byte[]);
    Code:
       0: aload_0
       1: invokespecial #31                 // Method reset:()V
       4: aload_1
       5: ifnull        13
       8: aload_1
       9: arraylength
      10: ifne          15
      13: aload_1
      14: areturn
      15: aload_0
      16: aload_1
      17: iconst_0
      18: aload_1
      19: arraylength
      20: invokevirtual #32                 // Method decode:([BII)V
      23: aload_0
      24: aload_1
      25: iconst_0
      26: iconst_m1
      27: invokevirtual #32                 // Method decode:([BII)V
      30: aload_0
      31: getfield      #8                  // Field pos:I
      34: newarray       byte
      36: astore_2
      37: aload_0
      38: aload_2
      39: iconst_0
      40: aload_2
      41: arraylength
      42: invokevirtual #33                 // Method readResults:([BII)I
      45: pop
      46: aload_2
      47: areturn

  public byte[] encode(byte[]);
    Code:
       0: aload_0
       1: invokespecial #31                 // Method reset:()V
       4: aload_1
       5: ifnull        13
       8: aload_1
       9: arraylength
      10: ifne          15
      13: aload_1
      14: areturn
      15: aload_0
      16: aload_1
      17: iconst_0
      18: aload_1
      19: arraylength
      20: invokevirtual #34                 // Method encode:([BII)V
      23: aload_0
      24: aload_1
      25: iconst_0
      26: iconst_m1
      27: invokevirtual #34                 // Method encode:([BII)V
      30: aload_0
      31: getfield      #8                  // Field pos:I
      34: aload_0
      35: getfield      #9                  // Field readPos:I
      38: isub
      39: newarray       byte
      41: astore_2
      42: aload_0
      43: aload_2
      44: iconst_0
      45: aload_2
      46: arraylength
      47: invokevirtual #33                 // Method readResults:([BII)I
      50: pop
      51: aload_2
      52: areturn

  public java.lang.String encodeAsString(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #22                 // Method encode:([B)[B
       5: invokestatic  #23                 // Method org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;
       8: areturn

  abstract void encode(byte[], int, int);

  abstract void decode(byte[], int, int);

  protected abstract boolean isInAlphabet(byte);

  public boolean isInAlphabet(byte[], boolean);
    Code:
       0: iconst_0
       1: istore_3
       2: iload_3
       3: aload_1
       4: arraylength
       5: if_icmpge     47
       8: aload_0
       9: aload_1
      10: iload_3
      11: baload
      12: invokevirtual #35                 // Method isInAlphabet:(B)Z
      15: ifne          41
      18: iload_2
      19: ifeq          39
      22: aload_1
      23: iload_3
      24: baload
      25: bipush        61
      27: if_icmpeq     41
      30: aload_1
      31: iload_3
      32: baload
      33: invokestatic  #36                 // Method isWhiteSpace:(B)Z
      36: ifne          41
      39: iconst_0
      40: ireturn
      41: iinc          3, 1
      44: goto          2
      47: iconst_1
      48: ireturn

  public boolean isInAlphabet(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #30                 // Method org/apache/commons/codec/binary/StringUtils.getBytesUtf8:(Ljava/lang/String;)[B
       5: iconst_1
       6: invokevirtual #37                 // Method isInAlphabet:([BZ)Z
       9: ireturn

  protected boolean containsAlphabetOrPad(byte[]);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_1
       7: astore_2
       8: aload_2
       9: arraylength
      10: istore_3
      11: iconst_0
      12: istore        4
      14: iload         4
      16: iload_3
      17: if_icmpge     50
      20: aload_2
      21: iload         4
      23: baload
      24: istore        5
      26: bipush        61
      28: iload         5
      30: if_icmpeq     42
      33: aload_0
      34: iload         5
      36: invokevirtual #35                 // Method isInAlphabet:(B)Z
      39: ifeq          44
      42: iconst_1
      43: ireturn
      44: iinc          4, 1
      47: goto          14
      50: iconst_0
      51: ireturn

  public long getEncodedLength(byte[]);
    Code:
       0: aload_1
       1: arraylength
       2: aload_0
       3: getfield      #3                  // Field unencodedBlockSize:I
       6: iadd
       7: iconst_1
       8: isub
       9: aload_0
      10: getfield      #3                  // Field unencodedBlockSize:I
      13: idiv
      14: i2l
      15: aload_0
      16: getfield      #4                  // Field encodedBlockSize:I
      19: i2l
      20: lmul
      21: lstore_2
      22: aload_0
      23: getfield      #5                  // Field lineLength:I
      26: ifle          53
      29: lload_2
      30: lload_2
      31: aload_0
      32: getfield      #5                  // Field lineLength:I
      35: i2l
      36: ladd
      37: lconst_1
      38: lsub
      39: aload_0
      40: getfield      #5                  // Field lineLength:I
      43: i2l
      44: ldiv
      45: aload_0
      46: getfield      #6                  // Field chunkSeparatorLength:I
      49: i2l
      50: lmul
      51: ladd
      52: lstore_2
      53: lload_2
      54: lreturn
}
