Compiled from "IOStream.java"
public interface au.id.ajlane.iostreams.IOStream<T> extends java.io.Closeable {
  public abstract void close() throws au.id.ajlane.iostreams.IOStreamCloseException;

  public default void consume() throws au.id.ajlane.iostreams.IOStreamReadException, au.id.ajlane.iostreams.IOStreamCloseException;
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method au/id/ajlane/iostreams/IOStreams.consume:(Lau/id/ajlane/iostreams/IOStream;)V
       4: return

  public default void consume(au.id.ajlane.iostreams.IOStreamConsumer<? super T>) throws au.id.ajlane.iostreams.IOStreamReadException, au.id.ajlane.iostreams.IOStreamCloseException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #2                  // Method au/id/ajlane/iostreams/IOStreams.consume:(Lau/id/ajlane/iostreams/IOStream;Lau/id/ajlane/iostreams/IOStreamConsumer;)V
       5: return

  public default long count() throws au.id.ajlane.iostreams.IOStreamReadException, au.id.ajlane.iostreams.IOStreamCloseException;
    Code:
       0: aload_0
       1: invokestatic  #3                  // Method au/id/ajlane/iostreams/IOStreams.count:(Lau/id/ajlane/iostreams/IOStream;)J
       4: lreturn

  public default au.id.ajlane.iostreams.IOStream<T> filter(au.id.ajlane.iostreams.IOStreamFilter<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #4                  // Method au/id/ajlane/iostreams/IOStreams.filter:(Lau/id/ajlane/iostreams/IOStream;Lau/id/ajlane/iostreams/IOStreamFilter;)Lau/id/ajlane/iostreams/IOStream;
       5: areturn

  public default <R> au.id.ajlane.iostreams.IOStream<R> flatMap(au.id.ajlane.iostreams.IOStreamTransform<? super T, ? extends au.id.ajlane.iostreams.IOStream<? extends R>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #5                  // Method au/id/ajlane/iostreams/IOStreams.flatMap:(Lau/id/ajlane/iostreams/IOStream;Lau/id/ajlane/iostreams/IOStreamTransform;)Lau/id/ajlane/iostreams/IOStream;
       5: areturn

  public default <R> R fold(R, au.id.ajlane.iostreams.IOStreamAccumulator<R, ? super T>) throws au.id.ajlane.iostreams.IOStreamReadException, au.id.ajlane.iostreams.IOStreamCloseException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #6                  // Method au/id/ajlane/iostreams/IOStreams.fold:(Lau/id/ajlane/iostreams/IOStream;Ljava/lang/Object;Lau/id/ajlane/iostreams/IOStreamAccumulator;)Ljava/lang/Object;
       6: areturn

  public default au.id.ajlane.iostreams.IOStream<? extends au.id.ajlane.iostreams.IOStream<T>> group(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #7                  // Method au/id/ajlane/iostreams/IOStreams.group:(Lau/id/ajlane/iostreams/IOStream;I)Lau/id/ajlane/iostreams/IOStream;
       5: areturn

  public default au.id.ajlane.iostreams.IOStream<? extends au.id.ajlane.iostreams.IOStream<T>> group(au.id.ajlane.iostreams.IOStreamBiPredicate<? super T, ? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #8                  // Method au/id/ajlane/iostreams/IOStreams.group:(Lau/id/ajlane/iostreams/IOStream;Lau/id/ajlane/iostreams/IOStreamBiPredicate;)Lau/id/ajlane/iostreams/IOStream;
       5: areturn

  public abstract boolean hasNext() throws au.id.ajlane.iostreams.IOStreamReadException;

  public default au.id.ajlane.iostreams.IOStream<T> keep(au.id.ajlane.iostreams.IOStreamPredicate<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #9                  // Method au/id/ajlane/iostreams/IOStreams.keep:(Lau/id/ajlane/iostreams/IOStream;Lau/id/ajlane/iostreams/IOStreamPredicate;)Lau/id/ajlane/iostreams/IOStream;
       5: areturn

  public default au.id.ajlane.iostreams.IOStream<T> limit(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokestatic  #10                 // Method au/id/ajlane/iostreams/IOStreams.limit:(Lau/id/ajlane/iostreams/IOStream;J)Lau/id/ajlane/iostreams/IOStream;
       5: areturn

  public default <R> au.id.ajlane.iostreams.IOStream<R> map(au.id.ajlane.iostreams.IOStreamTransform<? super T, ? extends R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #11                 // Method au/id/ajlane/iostreams/IOStreams.map:(Lau/id/ajlane/iostreams/IOStream;Lau/id/ajlane/iostreams/IOStreamTransform;)Lau/id/ajlane/iostreams/IOStream;
       5: areturn

  public default <R> au.id.ajlane.iostreams.IOStream<R> map(au.id.ajlane.iostreams.IOStreamTransform<? super T, ? extends R>, au.id.ajlane.iostreams.IOStreamTransformExceptionHandler<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #12                 // Method au/id/ajlane/iostreams/IOStreams.map:(Lau/id/ajlane/iostreams/IOStream;Lau/id/ajlane/iostreams/IOStreamTransform;Lau/id/ajlane/iostreams/IOStreamTransformExceptionHandler;)Lau/id/ajlane/iostreams/IOStream;
       6: areturn

  public default java.util.Optional<T> max(java.util.Comparator<T>) throws au.id.ajlane.iostreams.IOStreamReadException, au.id.ajlane.iostreams.IOStreamCloseException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #13                 // Method au/id/ajlane/iostreams/IOStreams.max:(Lau/id/ajlane/iostreams/IOStream;Ljava/util/Comparator;)Ljava/util/Optional;
       5: areturn

  public default java.util.Optional<T> min(java.util.Comparator<T>) throws au.id.ajlane.iostreams.IOStreamReadException, au.id.ajlane.iostreams.IOStreamCloseException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #14                 // Method au/id/ajlane/iostreams/IOStreams.min:(Lau/id/ajlane/iostreams/IOStream;Ljava/util/Comparator;)Ljava/util/Optional;
       5: areturn

  public abstract T next() throws au.id.ajlane.iostreams.IOStreamReadException;

  public default au.id.ajlane.iostreams.IOStream<T> observe(au.id.ajlane.iostreams.IOStreamConsumer<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #15                 // Method au/id/ajlane/iostreams/IOStreams.observe:(Lau/id/ajlane/iostreams/IOStream;Lau/id/ajlane/iostreams/IOStreamConsumer;)Lau/id/ajlane/iostreams/IOStream;
       5: areturn

  public default au.id.ajlane.iostreams.PeekableIOStream<T> peekable();
    Code:
       0: aload_0
       1: invokestatic  #16                 // Method au/id/ajlane/iostreams/IOStreams.peekable:(Lau/id/ajlane/iostreams/IOStream;)Lau/id/ajlane/iostreams/PeekableIOStream;
       4: areturn

  public default <R> R reduce(au.id.ajlane.iostreams.IOStreamTransform<? super au.id.ajlane.iostreams.IOStream<T>, R>) throws au.id.ajlane.iostreams.IOStreamReadException, au.id.ajlane.iostreams.IOStreamCloseException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #17                 // Method au/id/ajlane/iostreams/IOStreams.reduce:(Lau/id/ajlane/iostreams/IOStream;Lau/id/ajlane/iostreams/IOStreamTransform;)Ljava/lang/Object;
       5: areturn

  public default au.id.ajlane.iostreams.IOStream<T> skip(au.id.ajlane.iostreams.IOStreamPredicate<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #18                 // Method au/id/ajlane/iostreams/IOStreams.skip:(Lau/id/ajlane/iostreams/IOStream;Lau/id/ajlane/iostreams/IOStreamPredicate;)Lau/id/ajlane/iostreams/IOStream;
       5: areturn

  public default au.id.ajlane.iostreams.IOStream<? extends au.id.ajlane.iostreams.IOStream<T>> split(au.id.ajlane.iostreams.IOStreamBiPredicate<? super T, ? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #19                 // Method au/id/ajlane/iostreams/IOStreams.split:(Lau/id/ajlane/iostreams/IOStream;Lau/id/ajlane/iostreams/IOStreamBiPredicate;)Lau/id/ajlane/iostreams/IOStream;
       5: areturn

  public default T[] toArray(java.util.function.IntFunction<T[]>) throws au.id.ajlane.iostreams.IOStreamReadException, au.id.ajlane.iostreams.IOStreamCloseException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #20                 // Method au/id/ajlane/iostreams/IOStreams.toArray:(Lau/id/ajlane/iostreams/IOStream;Ljava/util/function/IntFunction;)[Ljava/lang/Object;
       5: areturn

  public default java.util.List<T> toList() throws au.id.ajlane.iostreams.IOStreamReadException, au.id.ajlane.iostreams.IOStreamCloseException;
    Code:
       0: aload_0
       1: invokestatic  #21                 // Method au/id/ajlane/iostreams/IOStreams.toList:(Lau/id/ajlane/iostreams/IOStream;)Ljava/util/List;
       4: areturn

  public default java.util.Set<T> toSet() throws au.id.ajlane.iostreams.IOStreamReadException, au.id.ajlane.iostreams.IOStreamCloseException;
    Code:
       0: aload_0
       1: invokestatic  #22                 // Method au/id/ajlane/iostreams/IOStreams.toSet:(Lau/id/ajlane/iostreams/IOStream;)Ljava/util/Set;
       4: areturn

  public default au.id.ajlane.iostreams.IOStream<T> truncate();
    Code:
       0: aload_0
       1: invokestatic  #23                 // Method au/id/ajlane/iostreams/IOStreams.truncate:(Lau/id/ajlane/iostreams/IOStream;)Lau/id/ajlane/iostreams/IOStream;
       4: areturn

  public default au.id.ajlane.iostreams.IOStream<T> until(au.id.ajlane.iostreams.IOStreamPredicate<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #24                 // Method au/id/ajlane/iostreams/IOStreams.until:(Lau/id/ajlane/iostreams/IOStream;Lau/id/ajlane/iostreams/IOStreamPredicate;)Lau/id/ajlane/iostreams/IOStream;
       5: areturn
}
