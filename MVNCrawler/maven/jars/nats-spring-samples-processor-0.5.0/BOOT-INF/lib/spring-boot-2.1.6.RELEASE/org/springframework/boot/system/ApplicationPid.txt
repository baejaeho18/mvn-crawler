Compiled from "ApplicationPid.java"
public class org.springframework.boot.system.ApplicationPid {
  private static final java.nio.file.attribute.PosixFilePermission[] WRITE_PERMISSIONS;

  private final java.lang.String pid;

  public org.springframework.boot.system.ApplicationPid();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokespecial #2                  // Method getPid:()Ljava/lang/String;
       9: putfield      #3                  // Field pid:Ljava/lang/String;
      12: return

  protected org.springframework.boot.system.ApplicationPid(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field pid:Ljava/lang/String;
       9: return

  private java.lang.String getPid();
    Code:
       0: invokestatic  #4                  // Method java/lang/management/ManagementFactory.getRuntimeMXBean:()Ljava/lang/management/RuntimeMXBean;
       3: invokeinterface #5,  1            // InterfaceMethod java/lang/management/RuntimeMXBean.getName:()Ljava/lang/String;
       8: astore_1
       9: aload_1
      10: ldc           #6                  // String @
      12: invokevirtual #7                  // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
      15: iconst_0
      16: aaload
      17: areturn
      18: astore_1
      19: aconst_null
      20: areturn
    Exception table:
       from    to  target type
           0    17    18   Class java/lang/Throwable

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        33
      11: aload_1
      12: instanceof    #9                  // class org/springframework/boot/system/ApplicationPid
      15: ifeq          33
      18: aload_0
      19: getfield      #3                  // Field pid:Ljava/lang/String;
      22: aload_1
      23: checkcast     #9                  // class org/springframework/boot/system/ApplicationPid
      26: getfield      #3                  // Field pid:Ljava/lang/String;
      29: invokestatic  #10                 // Method org/springframework/util/ObjectUtils.nullSafeEquals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      32: ireturn
      33: iconst_0
      34: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #3                  // Field pid:Ljava/lang/String;
       4: invokestatic  #11                 // Method org/springframework/util/ObjectUtils.nullSafeHashCode:(Ljava/lang/Object;)I
       7: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #3                  // Field pid:Ljava/lang/String;
       4: ifnull        14
       7: aload_0
       8: getfield      #3                  // Field pid:Ljava/lang/String;
      11: goto          16
      14: ldc           #12                 // String ???
      16: areturn

  public void write(java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field pid:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #13                 // String No PID available
      14: invokestatic  #14                 // Method org/springframework/util/Assert.state:(ZLjava/lang/String;)V
      17: aload_0
      18: aload_1
      19: invokespecial #15                 // Method createParentFolder:(Ljava/io/File;)V
      22: aload_1
      23: invokevirtual #16                 // Method java/io/File.exists:()Z
      26: ifeq          34
      29: aload_0
      30: aload_1
      31: invokespecial #17                 // Method assertCanOverwrite:(Ljava/io/File;)V
      34: new           #18                 // class java/io/FileWriter
      37: dup
      38: aload_1
      39: invokespecial #19                 // Method java/io/FileWriter."<init>":(Ljava/io/File;)V
      42: astore_2
      43: aconst_null
      44: astore_3
      45: aload_2
      46: aload_0
      47: getfield      #3                  // Field pid:Ljava/lang/String;
      50: invokevirtual #20                 // Method java/io/FileWriter.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;
      53: pop
      54: aload_2
      55: ifnull        130
      58: aload_3
      59: ifnull        80
      62: aload_2
      63: invokevirtual #21                 // Method java/io/FileWriter.close:()V
      66: goto          130
      69: astore        4
      71: aload_3
      72: aload         4
      74: invokevirtual #22                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      77: goto          130
      80: aload_2
      81: invokevirtual #21                 // Method java/io/FileWriter.close:()V
      84: goto          130
      87: astore        4
      89: aload         4
      91: astore_3
      92: aload         4
      94: athrow
      95: astore        5
      97: aload_2
      98: ifnull        127
     101: aload_3
     102: ifnull        123
     105: aload_2
     106: invokevirtual #21                 // Method java/io/FileWriter.close:()V
     109: goto          127
     112: astore        6
     114: aload_3
     115: aload         6
     117: invokevirtual #22                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     120: goto          127
     123: aload_2
     124: invokevirtual #21                 // Method java/io/FileWriter.close:()V
     127: aload         5
     129: athrow
     130: return
    Exception table:
       from    to  target type
          62    66    69   Class java/lang/Throwable
          45    54    87   Class java/lang/Throwable
          45    54    95   any
         105   109   112   Class java/lang/Throwable
          87    97    95   any

  private void createParentFolder(java.io.File);
    Code:
       0: aload_1
       1: invokevirtual #23                 // Method java/io/File.getParentFile:()Ljava/io/File;
       4: astore_2
       5: aload_2
       6: ifnull        14
       9: aload_2
      10: invokevirtual #24                 // Method java/io/File.mkdirs:()Z
      13: pop
      14: return

  private void assertCanOverwrite(java.io.File) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #25                 // Method java/io/File.canWrite:()Z
       4: ifeq          15
       7: aload_0
       8: aload_1
       9: invokespecial #26                 // Method canWritePosixFile:(Ljava/io/File;)Z
      12: ifne          45
      15: new           #27                 // class java/io/FileNotFoundException
      18: dup
      19: new           #28                 // class java/lang/StringBuilder
      22: dup
      23: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      26: aload_1
      27: invokevirtual #30                 // Method java/io/File.toString:()Ljava/lang/String;
      30: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: ldc           #32                 // String  (permission denied)
      35: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: invokespecial #34                 // Method java/io/FileNotFoundException."<init>":(Ljava/lang/String;)V
      44: athrow
      45: return

  private boolean canWritePosixFile(java.io.File) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #35                 // Method java/io/File.toPath:()Ljava/nio/file/Path;
       4: iconst_0
       5: anewarray     #36                 // class java/nio/file/LinkOption
       8: invokestatic  #37                 // Method java/nio/file/Files.getPosixFilePermissions:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/util/Set;
      11: astore_2
      12: getstatic     #38                 // Field WRITE_PERMISSIONS:[Ljava/nio/file/attribute/PosixFilePermission;
      15: astore_3
      16: aload_3
      17: arraylength
      18: istore        4
      20: iconst_0
      21: istore        5
      23: iload         5
      25: iload         4
      27: if_icmpge     55
      30: aload_3
      31: iload         5
      33: aaload
      34: astore        6
      36: aload_2
      37: aload         6
      39: invokeinterface #39,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      44: ifeq          49
      47: iconst_1
      48: ireturn
      49: iinc          5, 1
      52: goto          23
      55: iconst_0
      56: ireturn
      57: astore_2
      58: iconst_1
      59: ireturn
    Exception table:
       from    to  target type
           0    48    57   Class java/lang/UnsupportedOperationException
          49    56    57   Class java/lang/UnsupportedOperationException

  static {};
    Code:
       0: iconst_3
       1: anewarray     #41                 // class java/nio/file/attribute/PosixFilePermission
       4: dup
       5: iconst_0
       6: getstatic     #42                 // Field java/nio/file/attribute/PosixFilePermission.OWNER_WRITE:Ljava/nio/file/attribute/PosixFilePermission;
       9: aastore
      10: dup
      11: iconst_1
      12: getstatic     #43                 // Field java/nio/file/attribute/PosixFilePermission.GROUP_WRITE:Ljava/nio/file/attribute/PosixFilePermission;
      15: aastore
      16: dup
      17: iconst_2
      18: getstatic     #44                 // Field java/nio/file/attribute/PosixFilePermission.OTHERS_WRITE:Ljava/nio/file/attribute/PosixFilePermission;
      21: aastore
      22: putstatic     #38                 // Field WRITE_PERMISSIONS:[Ljava/nio/file/attribute/PosixFilePermission;
      25: return
}
