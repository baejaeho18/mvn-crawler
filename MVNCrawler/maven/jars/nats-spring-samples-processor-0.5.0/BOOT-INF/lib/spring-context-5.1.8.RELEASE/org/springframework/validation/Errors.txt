Compiled from "Errors.java"
public interface org.springframework.validation.Errors {
  public static final java.lang.String NESTED_PATH_SEPARATOR;

  public abstract java.lang.String getObjectName();

  public abstract void setNestedPath(java.lang.String);

  public abstract java.lang.String getNestedPath();

  public abstract void pushNestedPath(java.lang.String);

  public abstract void popNestedPath() throws java.lang.IllegalStateException;

  public abstract void reject(java.lang.String);

  public abstract void reject(java.lang.String, java.lang.String);

  public abstract void reject(java.lang.String, java.lang.Object[], java.lang.String);

  public abstract void rejectValue(java.lang.String, java.lang.String);

  public abstract void rejectValue(java.lang.String, java.lang.String, java.lang.String);

  public abstract void rejectValue(java.lang.String, java.lang.String, java.lang.Object[], java.lang.String);

  public abstract void addAllErrors(org.springframework.validation.Errors);

  public abstract boolean hasErrors();

  public abstract int getErrorCount();

  public abstract java.util.List<org.springframework.validation.ObjectError> getAllErrors();

  public abstract boolean hasGlobalErrors();

  public abstract int getGlobalErrorCount();

  public abstract java.util.List<org.springframework.validation.ObjectError> getGlobalErrors();

  public abstract org.springframework.validation.ObjectError getGlobalError();

  public abstract boolean hasFieldErrors();

  public abstract int getFieldErrorCount();

  public abstract java.util.List<org.springframework.validation.FieldError> getFieldErrors();

  public abstract org.springframework.validation.FieldError getFieldError();

  public abstract boolean hasFieldErrors(java.lang.String);

  public abstract int getFieldErrorCount(java.lang.String);

  public abstract java.util.List<org.springframework.validation.FieldError> getFieldErrors(java.lang.String);

  public abstract org.springframework.validation.FieldError getFieldError(java.lang.String);

  public abstract java.lang.Object getFieldValue(java.lang.String);

  public abstract java.lang.Class<?> getFieldType(java.lang.String);
}
