{
  "groups": [
    {
      "name": "management.endpoint.bindings",
      "type": "org.springframework.cloud.stream.endpoint.BindingsEndpoint",
      "sourceType": "org.springframework.cloud.stream.endpoint.BindingsEndpoint"
    },
    {
      "name": "management.endpoint.channels",
      "type": "org.springframework.cloud.stream.endpoint.ChannelsEndpoint",
      "sourceType": "org.springframework.cloud.stream.endpoint.ChannelsEndpoint"
    },
    {
      "name": "spring.cloud.stream",
      "type": "org.springframework.cloud.stream.config.BindingServiceProperties",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties"
    },
    {
      "name": "spring.cloud.stream.function",
      "type": "org.springframework.cloud.stream.function.StreamFunctionProperties",
      "sourceType": "org.springframework.cloud.stream.function.StreamFunctionProperties"
    },
    {
      "name": "spring.cloud.stream.integration",
      "type": "org.springframework.cloud.stream.config.SpringIntegrationProperties",
      "sourceType": "org.springframework.cloud.stream.config.SpringIntegrationProperties"
    },
    {
      "name": "spring.cloud.stream.metrics",
      "type": "org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties",
      "sourceType": "org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties"
    },
    {
      "name": "spring.integration.poller",
      "type": "org.springframework.cloud.stream.config.DefaultPollerProperties",
      "sourceType": "org.springframework.cloud.stream.config.DefaultPollerProperties"
    }
  ],
  "properties": [
    {
      "name": "management.endpoint.bindings.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.cloud.stream.endpoint.BindingsEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.bindings.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the bindings endpoint.",
      "sourceType": "org.springframework.cloud.stream.endpoint.BindingsEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.channels.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.cloud.stream.endpoint.ChannelsEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.channels.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the channels endpoint.",
      "sourceType": "org.springframework.cloud.stream.endpoint.ChannelsEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.health.binders.enabled",
      "type": "java.lang.Boolean",
      "description": "Allows to enable\/disable binder's' health indicators. If you want to disable health indicator completely, then set it to `false`.",
      "defaultValue": "true"
    },
    {
      "name": "spring.cloud.stream.binders",
      "type": "java.util.Map<java.lang.String,org.springframework.cloud.stream.config.BinderProperties>",
      "description": "Additional per-binder properties (see {@link BinderProperties}) if more then one binder of the same type is used (i.e., connect to multiple instances of RabbitMq). Here you can specify multiple binder configurations, each with different environment settings. For example; spring.cloud.stream.binders.rabbit1.environment. . . , spring.cloud.stream.binders.rabbit2.environment. . .",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties"
    },
    {
      "name": "spring.cloud.stream.binding-retry-interval",
      "type": "java.lang.Integer",
      "description": "Retry interval (in seconds) used to schedule binding attempts. Default: 30 sec.",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties",
      "defaultValue": 30
    },
    {
      "name": "spring.cloud.stream.bindings",
      "type": "java.util.Map<java.lang.String,org.springframework.cloud.stream.config.BindingProperties>",
      "description": "Additional binding properties (see {@link BinderProperties}) per binding name (e.g., 'input`). For example; This sets the content-type for the 'input' binding of a Sink application: 'spring.cloud.stream.bindings.input.contentType=text\/plain'",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties"
    },
    {
      "name": "spring.cloud.stream.default-binder",
      "type": "java.lang.String",
      "description": "The name of the binder to use by all bindings in the event multiple binders available (e.g., 'rabbit').",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties"
    },
    {
      "name": "spring.cloud.stream.dynamic-destinations",
      "type": "java.lang.String[]",
      "description": "A list of destinations that can be bound dynamically. If set, only listed destinations can be bound.",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties",
      "defaultValue": []
    },
    {
      "name": "spring.cloud.stream.function.definition",
      "type": "java.lang.String",
      "description": "Definition of functions to bind. If several functions need to be composed into one, use pipes (e.g., 'fooFunc\\|barFunc')",
      "sourceType": "org.springframework.cloud.stream.function.StreamFunctionProperties"
    },
    {
      "name": "spring.cloud.stream.instance-count",
      "type": "java.lang.Integer",
      "description": "The number of deployed instances of an application. Default: 1. NOTE: Could also be managed per individual binding \"spring.cloud.stream.bindings.foo.consumer.instance-count\" where 'foo' is the name of the binding.",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties",
      "defaultValue": 1
    },
    {
      "name": "spring.cloud.stream.instance-index",
      "type": "java.lang.Integer",
      "description": "The instance id of the application: a number from 0 to instanceCount-1. Used for partitioning and with Kafka. NOTE: Could also be managed per individual binding \"spring.cloud.stream.bindings.foo.consumer.instance-index\" where 'foo' is the name of the binding.",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties",
      "defaultValue": 0
    },
    {
      "name": "spring.cloud.stream.integration.message-handler-not-propagated-headers",
      "type": "java.lang.String[]",
      "description": "Message header names that will NOT be copied from the inbound message.",
      "sourceType": "org.springframework.cloud.stream.config.SpringIntegrationProperties"
    },
    {
      "name": "spring.cloud.stream.metrics.export-properties",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "description": "List of properties that are going to be appended to each message. This gets populate by onApplicationEvent, once the context refreshes to avoid overhead of doing per message basis.",
      "sourceType": "org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties"
    },
    {
      "name": "spring.cloud.stream.metrics.key",
      "type": "java.lang.String",
      "description": "The name of the metric being emitted. Should be an unique value per application. Defaults to: ${spring.application.name:${vcap.application.name:${spring.config.name:application}}}.",
      "sourceType": "org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties"
    },
    {
      "name": "spring.cloud.stream.metrics.meter-filter",
      "type": "java.lang.String",
      "description": "Pattern to control the 'meters' one wants to capture. By default all 'meters' will be captured. For example, 'spring.integration.*' will only capture metric information for meters whose name starts with 'spring.integration'.",
      "sourceType": "org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties"
    },
    {
      "name": "spring.cloud.stream.metrics.properties",
      "type": "java.lang.String[]",
      "description": "Application properties that should be added to the metrics payload For example: `spring.application**`.",
      "sourceType": "org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties"
    },
    {
      "name": "spring.cloud.stream.metrics.schedule-interval",
      "type": "java.time.Duration",
      "description": "Interval expressed as Duration for scheduling metrics snapshots publishing. Defaults to 60 seconds",
      "sourceType": "org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties",
      "defaultValue": "60s"
    },
    {
      "name": "spring.cloud.stream.override-cloud-connectors",
      "type": "java.lang.Boolean",
      "description": "This property is only applicable when the cloud profile is active and Spring Cloud Connectors are provided with the application. If the property is false (the default), the binder detects a suitable bound service (for example, a RabbitMQ service bound in Cloud Foundry for the RabbitMQ binder) and uses it for creating connections (usually through Spring Cloud Connectors). When set to true, this property instructs binders to completely ignore the bound services and rely on Spring Boot properties (for example, relying on the spring.rabbitmq.* properties provided in the environment for the RabbitMQ binder). The typical usage of this property is to be nested in a customized environment when connecting to multiple systems.",
      "defaultValue": "false"
    },
    {
      "name": "spring.integration.poller.fixed-delay",
      "type": "java.lang.Long",
      "description": "Fixed delay for default poller.",
      "sourceType": "org.springframework.cloud.stream.config.DefaultPollerProperties",
      "defaultValue": 1000
    },
    {
      "name": "spring.integration.poller.max-messages-per-poll",
      "type": "java.lang.Long",
      "description": "Maximum messages per poll for the default poller.",
      "sourceType": "org.springframework.cloud.stream.config.DefaultPollerProperties",
      "defaultValue": 1
    }
  ],
  "hints": []
}