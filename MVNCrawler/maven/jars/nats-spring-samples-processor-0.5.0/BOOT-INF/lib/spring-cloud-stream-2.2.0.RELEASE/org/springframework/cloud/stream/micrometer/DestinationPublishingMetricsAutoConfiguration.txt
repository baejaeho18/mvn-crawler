Compiled from "DestinationPublishingMetricsAutoConfiguration.java"
public class org.springframework.cloud.stream.micrometer.DestinationPublishingMetricsAutoConfiguration {
  public org.springframework.cloud.stream.micrometer.DestinationPublishingMetricsAutoConfiguration();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public org.springframework.cloud.stream.micrometer.MetricsPublisherConfig metricsPublisherConfig(org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties);
    Code:
       0: new           #2                  // class org/springframework/cloud/stream/micrometer/MetricsPublisherConfig
       3: dup
       4: aload_1
       5: invokespecial #3                  // Method org/springframework/cloud/stream/micrometer/MetricsPublisherConfig."<init>":(Lorg/springframework/cloud/stream/micrometer/ApplicationMetricsProperties;)V
       8: areturn

  public org.springframework.cloud.stream.micrometer.DefaultDestinationPublishingMeterRegistry defaultDestinationPublishingMeterRegistry(org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties, org.springframework.cloud.stream.micrometer.MetersPublisherBinding, org.springframework.cloud.stream.micrometer.MetricsPublisherConfig, io.micrometer.core.instrument.Clock);
    Code:
       0: new           #4                  // class org/springframework/cloud/stream/micrometer/DefaultDestinationPublishingMeterRegistry
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: invokespecial #5                  // Method org/springframework/cloud/stream/micrometer/DefaultDestinationPublishingMeterRegistry."<init>":(Lorg/springframework/cloud/stream/micrometer/ApplicationMetricsProperties;Lorg/springframework/cloud/stream/micrometer/MetersPublisherBinding;Lorg/springframework/cloud/stream/micrometer/MetricsPublisherConfig;Lio/micrometer/core/instrument/Clock;)V
      12: astore        5
      14: aload_1
      15: invokevirtual #6                  // Method org/springframework/cloud/stream/micrometer/ApplicationMetricsProperties.getMeterFilter:()Ljava/lang/String;
      18: invokestatic  #7                  // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
      21: ifeq          42
      24: aload         5
      26: invokevirtual #8                  // Method org/springframework/cloud/stream/micrometer/DefaultDestinationPublishingMeterRegistry.config:()Lio/micrometer/core/instrument/MeterRegistry$Config;
      29: aload_1
      30: invokedynamic #9,  0              // InvokeDynamic #0:test:(Lorg/springframework/cloud/stream/micrometer/ApplicationMetricsProperties;)Ljava/util/function/Predicate;
      35: invokestatic  #10                 // InterfaceMethod io/micrometer/core/instrument/config/MeterFilter.denyUnless:(Ljava/util/function/Predicate;)Lio/micrometer/core/instrument/config/MeterFilter;
      38: invokevirtual #11                 // Method io/micrometer/core/instrument/MeterRegistry$Config.meterFilter:(Lio/micrometer/core/instrument/config/MeterFilter;)Lio/micrometer/core/instrument/MeterRegistry$Config;
      41: pop
      42: aload         5
      44: areturn

  public org.springframework.beans.factory.config.BeanFactoryPostProcessor metersPublisherBindingRegistrant();
    Code:
       0: new           #12                 // class org/springframework/cloud/stream/micrometer/DestinationPublishingMetricsAutoConfiguration$1
       3: dup
       4: aload_0
       5: invokespecial #13                 // Method org/springframework/cloud/stream/micrometer/DestinationPublishingMetricsAutoConfiguration$1."<init>":(Lorg/springframework/cloud/stream/micrometer/DestinationPublishingMetricsAutoConfiguration;)V
       8: areturn

  private static boolean lambda$defaultDestinationPublishingMeterRegistry$0(org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties, io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method org/springframework/cloud/stream/micrometer/ApplicationMetricsProperties.getMeterFilter:()Ljava/lang/String;
       4: aload_1
       5: invokevirtual #14                 // Method io/micrometer/core/instrument/Meter$Id.getName:()Ljava/lang/String;
       8: invokestatic  #15                 // Method org/springframework/util/PatternMatchUtils.simpleMatch:(Ljava/lang/String;Ljava/lang/String;)Z
      11: ireturn
}
