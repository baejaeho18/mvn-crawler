Compiled from "DefaultDestinationPublishingMeterRegistry.java"
class org.springframework.cloud.stream.micrometer.DefaultDestinationPublishingMeterRegistry extends io.micrometer.core.instrument.MeterRegistry implements org.springframework.context.SmartLifecycle {
  private static final org.apache.commons.logging.Log logger;

  private final org.springframework.cloud.stream.micrometer.MetricsPublisherConfig metricsPublisherConfig;

  private final java.util.function.Consumer<java.lang.String> metricsConsumer;

  private final org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties applicationProperties;

  private final com.fasterxml.jackson.databind.ObjectMapper objectMapper;

  private java.util.concurrent.ScheduledFuture<?> publisher;

  org.springframework.cloud.stream.micrometer.DefaultDestinationPublishingMeterRegistry(org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties, org.springframework.cloud.stream.micrometer.MetersPublisherBinding, org.springframework.cloud.stream.micrometer.MetricsPublisherConfig, io.micrometer.core.instrument.Clock);
    Code:
       0: aload_0
       1: aload         4
       3: invokespecial #2                  // Method io/micrometer/core/instrument/MeterRegistry."<init>":(Lio/micrometer/core/instrument/Clock;)V
       6: aload_0
       7: new           #3                  // class com/fasterxml/jackson/databind/ObjectMapper
      10: dup
      11: invokespecial #4                  // Method com/fasterxml/jackson/databind/ObjectMapper."<init>":()V
      14: putfield      #5                  // Field objectMapper:Lcom/fasterxml/jackson/databind/ObjectMapper;
      17: aload_0
      18: aload_3
      19: putfield      #6                  // Field metricsPublisherConfig:Lorg/springframework/cloud/stream/micrometer/MetricsPublisherConfig;
      22: aload_0
      23: new           #7                  // class org/springframework/cloud/stream/micrometer/DefaultDestinationPublishingMeterRegistry$MessageChannelPublisher
      26: dup
      27: aload_2
      28: invokespecial #8                  // Method org/springframework/cloud/stream/micrometer/DefaultDestinationPublishingMeterRegistry$MessageChannelPublisher."<init>":(Lorg/springframework/cloud/stream/micrometer/MetersPublisherBinding;)V
      31: putfield      #9                  // Field metricsConsumer:Ljava/util/function/Consumer;
      34: aload_0
      35: aload_1
      36: putfield      #10                 // Field applicationProperties:Lorg/springframework/cloud/stream/micrometer/ApplicationMetricsProperties;
      39: return

  public void start();
    Code:
       0: aload_0
       1: invokestatic  #11                 // Method java/util/concurrent/Executors.defaultThreadFactory:()Ljava/util/concurrent/ThreadFactory;
       4: invokespecial #12                 // Method start:(Ljava/util/concurrent/ThreadFactory;)V
       7: return

  public void stop();
    Code:
       0: aload_0
       1: getfield      #13                 // Field publisher:Ljava/util/concurrent/ScheduledFuture;
       4: ifnull        23
       7: aload_0
       8: getfield      #13                 // Field publisher:Ljava/util/concurrent/ScheduledFuture;
      11: iconst_0
      12: invokeinterface #14,  2           // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      17: pop
      18: aload_0
      19: aconst_null
      20: putfield      #13                 // Field publisher:Ljava/util/concurrent/ScheduledFuture;
      23: return

  public boolean isRunning();
    Code:
       0: aload_0
       1: getfield      #13                 // Field publisher:Ljava/util/concurrent/ScheduledFuture;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public int getPhase();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isAutoStartup();
    Code:
       0: iconst_1
       1: ireturn

  public void stop(java.lang.Runnable);
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method stop:()V
       4: aload_1
       5: invokeinterface #16,  1           // InterfaceMethod java/lang/Runnable.run:()V
      10: return

  protected <T> io.micrometer.core.instrument.Gauge newGauge(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToDoubleFunction<T>);
    Code:
       0: new           #17                 // class io/micrometer/core/instrument/internal/DefaultGauge
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokespecial #18                 // Method io/micrometer/core/instrument/internal/DefaultGauge."<init>":(Lio/micrometer/core/instrument/Meter$Id;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)V
      10: areturn

  protected io.micrometer.core.instrument.Counter newCounter(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: new           #19                 // class io/micrometer/core/instrument/step/StepCounter
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #20                 // Field clock:Lio/micrometer/core/instrument/Clock;
       9: aload_0
      10: getfield      #6                  // Field metricsPublisherConfig:Lorg/springframework/cloud/stream/micrometer/MetricsPublisherConfig;
      13: invokevirtual #21                 // Method org/springframework/cloud/stream/micrometer/MetricsPublisherConfig.step:()Ljava/time/Duration;
      16: invokevirtual #22                 // Method java/time/Duration.toMillis:()J
      19: invokespecial #23                 // Method io/micrometer/core/instrument/step/StepCounter."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;J)V
      22: areturn

  protected io.micrometer.core.instrument.LongTaskTimer newLongTaskTimer(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: new           #24                 // class io/micrometer/core/instrument/internal/DefaultLongTaskTimer
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #20                 // Field clock:Lio/micrometer/core/instrument/Clock;
       9: invokespecial #25                 // Method io/micrometer/core/instrument/internal/DefaultLongTaskTimer."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;)V
      12: areturn

  protected java.util.concurrent.TimeUnit getBaseTimeUnit();
    Code:
       0: getstatic     #26                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       3: areturn

  protected void publish();
    Code:
       0: new           #27                 // class java/util/ArrayList
       3: dup
       4: invokespecial #28                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #29                 // Method getMeters:()Ljava/util/List;
      12: invokeinterface #30,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      17: astore_2
      18: aload_2
      19: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          87
      27: aload_2
      28: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #33                 // class io/micrometer/core/instrument/Meter
      36: astore_3
      37: aload_3
      38: instanceof    #34                 // class io/micrometer/core/instrument/Timer
      41: ifeq          62
      44: aload_1
      45: aload_0
      46: aload_3
      47: checkcast     #34                 // class io/micrometer/core/instrument/Timer
      50: invokespecial #35                 // Method toTimerMetric:(Lio/micrometer/core/instrument/Timer;)Lorg/springframework/cloud/stream/micrometer/Metric;
      53: invokeinterface #36,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      58: pop
      59: goto          84
      62: aload_3
      63: instanceof    #37                 // class io/micrometer/core/instrument/DistributionSummary
      66: ifeq          84
      69: aload_1
      70: aload_0
      71: aload_3
      72: checkcast     #37                 // class io/micrometer/core/instrument/DistributionSummary
      75: invokespecial #38                 // Method toSummaryMetric:(Lio/micrometer/core/instrument/DistributionSummary;)Lorg/springframework/cloud/stream/micrometer/Metric;
      78: invokeinterface #36,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      83: pop
      84: goto          18
      87: aload_1
      88: invokeinterface #39,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      93: ifne          171
      96: new           #40                 // class org/springframework/cloud/stream/micrometer/ApplicationMetrics
      99: dup
     100: aload_0
     101: getfield      #10                 // Field applicationProperties:Lorg/springframework/cloud/stream/micrometer/ApplicationMetricsProperties;
     104: invokevirtual #41                 // Method org/springframework/cloud/stream/micrometer/ApplicationMetricsProperties.getKey:()Ljava/lang/String;
     107: aload_1
     108: invokespecial #42                 // Method org/springframework/cloud/stream/micrometer/ApplicationMetrics."<init>":(Ljava/lang/String;Ljava/util/Collection;)V
     111: astore_2
     112: aload_2
     113: aload_0
     114: getfield      #6                  // Field metricsPublisherConfig:Lorg/springframework/cloud/stream/micrometer/MetricsPublisherConfig;
     117: invokevirtual #21                 // Method org/springframework/cloud/stream/micrometer/MetricsPublisherConfig.step:()Ljava/time/Duration;
     120: invokevirtual #22                 // Method java/time/Duration.toMillis:()J
     123: invokevirtual #43                 // Method org/springframework/cloud/stream/micrometer/ApplicationMetrics.setInterval:(J)V
     126: aload_2
     127: aload_0
     128: getfield      #10                 // Field applicationProperties:Lorg/springframework/cloud/stream/micrometer/ApplicationMetricsProperties;
     131: invokevirtual #44                 // Method org/springframework/cloud/stream/micrometer/ApplicationMetricsProperties.getExportProperties:()Ljava/util/Map;
     134: invokevirtual #45                 // Method org/springframework/cloud/stream/micrometer/ApplicationMetrics.setProperties:(Ljava/util/Map;)V
     137: aload_0
     138: getfield      #5                  // Field objectMapper:Lcom/fasterxml/jackson/databind/ObjectMapper;
     141: aload_2
     142: invokevirtual #46                 // Method com/fasterxml/jackson/databind/ObjectMapper.writeValueAsString:(Ljava/lang/Object;)Ljava/lang/String;
     145: astore_3
     146: aload_0
     147: getfield      #9                  // Field metricsConsumer:Ljava/util/function/Consumer;
     150: aload_3
     151: invokeinterface #47,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
     156: goto          171
     159: astore_3
     160: getstatic     #1                  // Field logger:Lorg/apache/commons/logging/Log;
     163: ldc           #49                 // String Error producing JSON String representation metric data
     165: aload_3
     166: invokeinterface #50,  3           // InterfaceMethod org/apache/commons/logging/Log.warn:(Ljava/lang/Object;Ljava/lang/Throwable;)V
     171: return
    Exception table:
       from    to  target type
         137   156   159   Class com/fasterxml/jackson/core/JsonProcessingException

  protected io.micrometer.core.instrument.Timer newTimer(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, io.micrometer.core.instrument.distribution.pause.PauseDetector);
    Code:
       0: new           #51                 // class io/micrometer/core/instrument/step/StepTimer
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #20                 // Field clock:Lio/micrometer/core/instrument/Clock;
       9: aload_2
      10: aload_3
      11: aload_0
      12: invokevirtual #52                 // Method getBaseTimeUnit:()Ljava/util/concurrent/TimeUnit;
      15: aload_0
      16: getfield      #6                  // Field metricsPublisherConfig:Lorg/springframework/cloud/stream/micrometer/MetricsPublisherConfig;
      19: invokevirtual #21                 // Method org/springframework/cloud/stream/micrometer/MetricsPublisherConfig.step:()Ljava/time/Duration;
      22: invokevirtual #22                 // Method java/time/Duration.toMillis:()J
      25: iconst_0
      26: invokespecial #53                 // Method io/micrometer/core/instrument/step/StepTimer."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Lio/micrometer/core/instrument/distribution/pause/PauseDetector;Ljava/util/concurrent/TimeUnit;JZ)V
      29: areturn

  protected <T> io.micrometer.core.instrument.FunctionTimer newFunctionTimer(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToLongFunction<T>, java.util.function.ToDoubleFunction<T>, java.util.concurrent.TimeUnit);
    Code:
       0: new           #54                 // class io/micrometer/core/instrument/step/StepFunctionTimer
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #20                 // Field clock:Lio/micrometer/core/instrument/Clock;
       9: aload_0
      10: getfield      #6                  // Field metricsPublisherConfig:Lorg/springframework/cloud/stream/micrometer/MetricsPublisherConfig;
      13: invokevirtual #21                 // Method org/springframework/cloud/stream/micrometer/MetricsPublisherConfig.step:()Ljava/time/Duration;
      16: invokevirtual #22                 // Method java/time/Duration.toMillis:()J
      19: aload_2
      20: aload_3
      21: aload         4
      23: aload         5
      25: aload_0
      26: invokevirtual #52                 // Method getBaseTimeUnit:()Ljava/util/concurrent/TimeUnit;
      29: invokespecial #55                 // Method io/micrometer/core/instrument/step/StepFunctionTimer."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;JLjava/lang/Object;Ljava/util/function/ToLongFunction;Ljava/util/function/ToDoubleFunction;Ljava/util/concurrent/TimeUnit;Ljava/util/concurrent/TimeUnit;)V
      32: areturn

  protected <T> io.micrometer.core.instrument.FunctionCounter newFunctionCounter(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToDoubleFunction<T>);
    Code:
       0: new           #56                 // class io/micrometer/core/instrument/step/StepFunctionCounter
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #20                 // Field clock:Lio/micrometer/core/instrument/Clock;
       9: aload_0
      10: getfield      #6                  // Field metricsPublisherConfig:Lorg/springframework/cloud/stream/micrometer/MetricsPublisherConfig;
      13: invokevirtual #21                 // Method org/springframework/cloud/stream/micrometer/MetricsPublisherConfig.step:()Ljava/time/Duration;
      16: invokevirtual #22                 // Method java/time/Duration.toMillis:()J
      19: aload_2
      20: aload_3
      21: invokespecial #57                 // Method io/micrometer/core/instrument/step/StepFunctionCounter."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;JLjava/lang/Object;Ljava/util/function/ToDoubleFunction;)V
      24: areturn

  protected io.micrometer.core.instrument.Meter newMeter(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.Meter$Type, java.lang.Iterable<io.micrometer.core.instrument.Measurement>);
    Code:
       0: new           #58                 // class io/micrometer/core/instrument/internal/DefaultMeter
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokespecial #59                 // Method io/micrometer/core/instrument/internal/DefaultMeter."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Meter$Type;Ljava/lang/Iterable;)V
      10: areturn

  protected io.micrometer.core.instrument.DistributionSummary newDistributionSummary(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, double);
    Code:
       0: new           #60                 // class io/micrometer/core/instrument/step/StepDistributionSummary
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #20                 // Field clock:Lio/micrometer/core/instrument/Clock;
       9: aload_2
      10: dload_3
      11: aload_0
      12: getfield      #6                  // Field metricsPublisherConfig:Lorg/springframework/cloud/stream/micrometer/MetricsPublisherConfig;
      15: invokevirtual #21                 // Method org/springframework/cloud/stream/micrometer/MetricsPublisherConfig.step:()Ljava/time/Duration;
      18: invokevirtual #22                 // Method java/time/Duration.toMillis:()J
      21: iconst_0
      22: invokespecial #61                 // Method io/micrometer/core/instrument/step/StepDistributionSummary."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;DJZ)V
      25: areturn

  protected io.micrometer.core.instrument.distribution.DistributionStatisticConfig defaultHistogramConfig();
    Code:
       0: invokestatic  #62                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.builder:()Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       3: aload_0
       4: getfield      #6                  // Field metricsPublisherConfig:Lorg/springframework/cloud/stream/micrometer/MetricsPublisherConfig;
       7: invokevirtual #21                 // Method org/springframework/cloud/stream/micrometer/MetricsPublisherConfig.step:()Ljava/time/Duration;
      10: invokevirtual #63                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.expiry:(Ljava/time/Duration;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      13: invokevirtual #64                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.build:()Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      16: getstatic     #65                 // Field io/micrometer/core/instrument/distribution/DistributionStatisticConfig.DEFAULT:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      19: invokevirtual #66                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.merge:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      22: areturn

  private void start(java.util.concurrent.ThreadFactory);
    Code:
       0: aload_0
       1: getfield      #13                 // Field publisher:Ljava/util/concurrent/ScheduledFuture;
       4: ifnull        11
       7: aload_0
       8: invokevirtual #15                 // Method stop:()V
      11: aload_0
      12: aload_1
      13: invokestatic  #67                 // Method java/util/concurrent/Executors.newSingleThreadScheduledExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;
      16: aload_0
      17: invokedynamic #68,  0             // InvokeDynamic #0:run:(Lorg/springframework/cloud/stream/micrometer/DefaultDestinationPublishingMeterRegistry;)Ljava/lang/Runnable;
      22: aload_0
      23: getfield      #6                  // Field metricsPublisherConfig:Lorg/springframework/cloud/stream/micrometer/MetricsPublisherConfig;
      26: invokevirtual #21                 // Method org/springframework/cloud/stream/micrometer/MetricsPublisherConfig.step:()Ljava/time/Duration;
      29: invokevirtual #22                 // Method java/time/Duration.toMillis:()J
      32: aload_0
      33: getfield      #6                  // Field metricsPublisherConfig:Lorg/springframework/cloud/stream/micrometer/MetricsPublisherConfig;
      36: invokevirtual #21                 // Method org/springframework/cloud/stream/micrometer/MetricsPublisherConfig.step:()Ljava/time/Duration;
      39: invokevirtual #22                 // Method java/time/Duration.toMillis:()J
      42: getstatic     #26                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      45: invokeinterface #69,  7           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      50: putfield      #13                 // Field publisher:Ljava/util/concurrent/ScheduledFuture;
      53: return

  private org.springframework.cloud.stream.micrometer.Metric<java.lang.Number> toSummaryMetric(io.micrometer.core.instrument.DistributionSummary);
    Code:
       0: new           #70                 // class org/springframework/cloud/stream/micrometer/Metric
       3: dup
       4: aload_1
       5: invokeinterface #71,  1           // InterfaceMethod io/micrometer/core/instrument/DistributionSummary.getId:()Lio/micrometer/core/instrument/Meter$Id;
      10: aload_1
      11: invokeinterface #72,  1           // InterfaceMethod io/micrometer/core/instrument/DistributionSummary.takeSnapshot:()Lio/micrometer/core/instrument/distribution/HistogramSnapshot;
      16: invokespecial #73                 // Method org/springframework/cloud/stream/micrometer/Metric."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/distribution/HistogramSnapshot;)V
      19: areturn

  private org.springframework.cloud.stream.micrometer.Metric<java.lang.Number> toTimerMetric(io.micrometer.core.instrument.Timer);
    Code:
       0: new           #70                 // class org/springframework/cloud/stream/micrometer/Metric
       3: dup
       4: aload_1
       5: invokeinterface #74,  1           // InterfaceMethod io/micrometer/core/instrument/Timer.getId:()Lio/micrometer/core/instrument/Meter$Id;
      10: aload_1
      11: invokeinterface #75,  1           // InterfaceMethod io/micrometer/core/instrument/Timer.takeSnapshot:()Lio/micrometer/core/instrument/distribution/HistogramSnapshot;
      16: invokespecial #73                 // Method org/springframework/cloud/stream/micrometer/Metric."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/distribution/HistogramSnapshot;)V
      19: areturn

  static org.apache.commons.logging.Log access$000();
    Code:
       0: getstatic     #1                  // Field logger:Lorg/apache/commons/logging/Log;
       3: areturn

  static {};
    Code:
       0: ldc           #76                 // class org/springframework/cloud/stream/micrometer/DefaultDestinationPublishingMeterRegistry
       2: invokestatic  #77                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #1                  // Field logger:Lorg/apache/commons/logging/Log;
       8: return
}
