Compiled from "FluxMetrics.java"
final class reactor.core.publisher.FluxMetrics<T> extends reactor.core.publisher.FluxOperator<T, T> {
  private static final reactor.util.Logger LOGGER;

  static final java.lang.String REACTOR_DEFAULT_NAME;

  static final java.lang.String METER_MALFORMED;

  static final java.lang.String METER_SUBSCRIBED;

  static final java.lang.String METER_FLOW_DURATION;

  static final java.lang.String METER_ON_NEXT_DELAY;

  static final java.lang.String METER_REQUESTED;

  static final java.lang.String TAG_STATUS;

  static final java.lang.String TAG_EXCEPTION;

  static final java.lang.String TAG_SEQUENCE_NAME;

  static final java.lang.String TAG_SEQUENCE_TYPE;

  static final java.lang.String TAGVALUE_ON_ERROR;

  static final java.lang.String TAGVALUE_ON_COMPLETE;

  static final java.lang.String TAGVALUE_CANCEL;

  static final java.lang.String TAGVALUE_FLUX;

  static final java.lang.String TAGVALUE_MONO;

  final java.lang.String name;

  final java.util.List<io.micrometer.core.instrument.Tag> tags;

  final io.micrometer.core.instrument.MeterRegistry registryCandidate;

  static reactor.util.function.Tuple2<java.lang.String, java.util.List<io.micrometer.core.instrument.Tag>> resolveNameAndTags(org.reactivestreams.Publisher<?>);
    Code:
       0: aload_0
       1: invokestatic  #1                  // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
       4: astore_3
       5: aload_3
       6: invokeinterface #2,  1            // InterfaceMethod reactor/core/Scannable.isScanAvailable:()Z
      11: ifeq          76
      14: aload_3
      15: invokeinterface #3,  1            // InterfaceMethod reactor/core/Scannable.name:()Ljava/lang/String;
      20: astore        4
      22: aload_3
      23: invokeinterface #4,  1            // InterfaceMethod reactor/core/Scannable.stepName:()Ljava/lang/String;
      28: aload         4
      30: invokevirtual #5                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      33: ifeq          42
      36: ldc           #7                  // String reactor
      38: astore_1
      39: goto          45
      42: aload         4
      44: astore_1
      45: aload_3
      46: invokeinterface #8,  1            // InterfaceMethod reactor/core/Scannable.tags:()Ljava/util/stream/Stream;
      51: invokedynamic #9,  0              // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      56: invokeinterface #10,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      61: invokestatic  #11                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      64: invokeinterface #12,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      69: checkcast     #13                 // class java/util/List
      72: astore_2
      73: goto          93
      76: getstatic     #14                 // Field LOGGER:Lreactor/util/Logger;
      79: ldc           #15                 // String Attempting to activate metrics but the upstream is not Scannable. You might want to use `name()` (and optionally `tags()`) right before `metrics()`
      81: invokeinterface #16,  2           // InterfaceMethod reactor/util/Logger.warn:(Ljava/lang/String;)V
      86: ldc           #7                  // String reactor
      88: astore_1
      89: invokestatic  #17                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      92: astore_2
      93: aload_1
      94: aload_2
      95: invokestatic  #18                 // Method reactor/util/function/Tuples.of:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      98: areturn

  reactor.core.publisher.FluxMetrics(reactor.core.publisher.Flux<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #19                 // Method "<init>":(Lreactor/core/publisher/Flux;Lio/micrometer/core/instrument/MeterRegistry;)V
       6: return

  reactor.core.publisher.FluxMetrics(reactor.core.publisher.Flux<? extends T>, io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #20                 // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_1
       6: invokestatic  #21                 // Method resolveNameAndTags:(Lorg/reactivestreams/Publisher;)Lreactor/util/function/Tuple2;
       9: astore_3
      10: aload_0
      11: aload_3
      12: invokevirtual #22                 // Method reactor/util/function/Tuple2.getT1:()Ljava/lang/Object;
      15: checkcast     #23                 // class java/lang/String
      18: putfield      #24                 // Field name:Ljava/lang/String;
      21: aload_0
      22: aload_3
      23: invokevirtual #25                 // Method reactor/util/function/Tuple2.getT2:()Ljava/lang/Object;
      26: checkcast     #13                 // class java/util/List
      29: putfield      #26                 // Field tags:Ljava/util/List;
      32: aload_2
      33: ifnonnull     46
      36: aload_0
      37: getstatic     #27                 // Field io/micrometer/core/instrument/Metrics.globalRegistry:Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;
      40: putfield      #28                 // Field registryCandidate:Lio/micrometer/core/instrument/MeterRegistry;
      43: goto          51
      46: aload_0
      47: aload_2
      48: putfield      #28                 // Field registryCandidate:Lio/micrometer/core/instrument/MeterRegistry;
      51: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #29                 // Field source:Lreactor/core/publisher/Flux;
       4: new           #30                 // class reactor/core/publisher/FluxMetrics$MicrometerFluxMetricsSubscriber
       7: dup
       8: aload_1
       9: aload_0
      10: getfield      #28                 // Field registryCandidate:Lio/micrometer/core/instrument/MeterRegistry;
      13: getstatic     #31                 // Field io/micrometer/core/instrument/Clock.SYSTEM:Lio/micrometer/core/instrument/Clock;
      16: aload_0
      17: getfield      #24                 // Field name:Ljava/lang/String;
      20: aload_0
      21: getfield      #26                 // Field tags:Ljava/util/List;
      24: invokespecial #32                 // Method reactor/core/publisher/FluxMetrics$MicrometerFluxMetricsSubscriber."<init>":(Lreactor/core/CoreSubscriber;Lio/micrometer/core/instrument/MeterRegistry;Lio/micrometer/core/instrument/Clock;Ljava/lang/String;Ljava/util/List;)V
      27: invokevirtual #33                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      30: return

  private static io.micrometer.core.instrument.Tag lambda$resolveNameAndTags$0(reactor.util.function.Tuple2);
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method reactor/util/function/Tuple2.getT1:()Ljava/lang/Object;
       4: checkcast     #23                 // class java/lang/String
       7: aload_0
       8: invokevirtual #25                 // Method reactor/util/function/Tuple2.getT2:()Ljava/lang/Object;
      11: checkcast     #23                 // class java/lang/String
      14: invokestatic  #34                 // InterfaceMethod io/micrometer/core/instrument/Tag.of:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Tag;
      17: areturn

  static {};
    Code:
       0: ldc           #6                  // class reactor/core/publisher/FluxMetrics
       2: invokestatic  #35                 // Method reactor/util/Loggers.getLogger:(Ljava/lang/Class;)Lreactor/util/Logger;
       5: putstatic     #14                 // Field LOGGER:Lreactor/util/Logger;
       8: return
}
