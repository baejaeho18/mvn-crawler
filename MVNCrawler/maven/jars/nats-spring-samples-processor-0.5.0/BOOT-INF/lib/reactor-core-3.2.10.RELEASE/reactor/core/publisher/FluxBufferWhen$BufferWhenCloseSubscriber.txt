Compiled from "FluxBufferWhen.java"
final class reactor.core.publisher.FluxBufferWhen$BufferWhenCloseSubscriber<T, BUFFER extends java.util.Collection<? super T>> implements reactor.core.Disposable, reactor.core.publisher.InnerConsumer<java.lang.Object> {
  volatile org.reactivestreams.Subscription subscription;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxBufferWhen$BufferWhenCloseSubscriber, org.reactivestreams.Subscription> SUBSCRIPTION;

  final reactor.core.publisher.FluxBufferWhen$BufferWhenMainSubscriber<T, ?, ?, BUFFER> parent;

  final long index;

  reactor.core.publisher.FluxBufferWhen$BufferWhenCloseSubscriber(reactor.core.publisher.FluxBufferWhen$BufferWhenMainSubscriber<T, ?, ?, BUFFER>, long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber;
       9: aload_0
      10: lload_2
      11: putfield      #3                  // Field index:J
      14: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #4                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #5                  // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          23
      11: aload_0
      12: getfield      #6                  // Field subscription:Lorg/reactivestreams/Subscription;
      15: ldc2_w        #8                  // long 9223372036854775807l
      18: invokeinterface #10,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      23: return

  public void dispose();
    Code:
       0: getstatic     #4                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #11                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #6                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: invokestatic  #12                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void onNext(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #6                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: astore_2
       5: aload_2
       6: invokestatic  #12                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       9: if_acmpeq     40
      12: getstatic     #4                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: invokestatic  #12                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      19: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      22: aload_2
      23: invokeinterface #14,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      28: aload_0
      29: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber;
      32: aload_0
      33: aload_0
      34: getfield      #3                  // Field index:J
      37: invokevirtual #15                 // Method reactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber.close:(Lreactor/core/publisher/FluxBufferWhen$BufferWhenCloseSubscriber;J)V
      40: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #6                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: invokestatic  #12                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpeq     32
      10: getstatic     #4                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      13: aload_0
      14: invokestatic  #12                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      17: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      20: aload_0
      21: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber;
      24: aload_0
      25: aload_1
      26: invokevirtual #16                 // Method reactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber.boundaryError:(Lreactor/core/Disposable;Ljava/lang/Throwable;)V
      29: goto          43
      32: aload_1
      33: aload_0
      34: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber;
      37: getfield      #17                 // Field reactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber.ctx:Lreactor/util/context/Context;
      40: invokestatic  #18                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      43: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #6                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: invokestatic  #12                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpeq     32
      10: getstatic     #4                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      13: aload_0
      14: invokestatic  #12                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      17: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      20: aload_0
      21: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber;
      24: aload_0
      25: aload_0
      26: getfield      #3                  // Field index:J
      29: invokevirtual #15                 // Method reactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber.close:(Lreactor/core/publisher/FluxBufferWhen$BufferWhenCloseSubscriber;J)V
      32: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #19                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber;
      11: areturn
      12: aload_1
      13: getstatic     #20                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #6                  // Field subscription:Lorg/reactivestreams/Subscription;
      23: areturn
      24: aload_1
      25: getstatic     #21                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      28: if_acmpne     38
      31: ldc2_w        #8                  // long 9223372036854775807l
      34: invokestatic  #22                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      37: areturn
      38: aload_1
      39: getstatic     #23                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      42: if_acmpne     53
      45: aload_0
      46: invokevirtual #24                 // Method isDisposed:()Z
      49: invokestatic  #25                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      52: areturn
      53: aconst_null
      54: areturn

  static {};
    Code:
       0: ldc           #26                 // class reactor/core/publisher/FluxBufferWhen$BufferWhenCloseSubscriber
       2: ldc           #27                 // class org/reactivestreams/Subscription
       4: ldc           #28                 // String subscription
       6: invokestatic  #29                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #4                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
