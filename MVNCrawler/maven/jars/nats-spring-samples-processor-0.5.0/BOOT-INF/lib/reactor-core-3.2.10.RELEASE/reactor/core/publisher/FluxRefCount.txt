Compiled from "FluxRefCount.java"
final class reactor.core.publisher.FluxRefCount<T> extends reactor.core.publisher.Flux<T> implements reactor.core.Scannable, reactor.core.Fuseable {
  final reactor.core.publisher.ConnectableFlux<? extends T> source;

  final int n;

  reactor.core.publisher.FluxRefCount$RefCountMonitor<T> connection;

  reactor.core.publisher.FluxRefCount(reactor.core.publisher.ConnectableFlux<? extends T>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: iload_2
       5: ifgt          35
       8: new           #2                  // class java/lang/IllegalArgumentException
      11: dup
      12: new           #3                  // class java/lang/StringBuilder
      15: dup
      16: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #5                  // String n > 0 required but it was
      21: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_2
      25: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: aload_1
      37: ldc           #10                 // String source
      39: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      42: checkcast     #12                 // class reactor/core/publisher/ConnectableFlux
      45: putfield      #13                 // Field source:Lreactor/core/publisher/ConnectableFlux;
      48: aload_0
      49: iload_2
      50: putfield      #14                 // Field n:I
      53: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #13                 // Field source:Lreactor/core/publisher/ConnectableFlux;
       4: invokevirtual #15                 // Method reactor/core/publisher/ConnectableFlux.getPrefetch:()I
       7: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: dup
       4: astore        4
       6: monitorenter
       7: aload_0
       8: getfield      #16                 // Field connection:Lreactor/core/publisher/FluxRefCount$RefCountMonitor;
      11: astore_2
      12: aload_2
      13: ifnull        23
      16: aload_2
      17: getfield      #17                 // Field reactor/core/publisher/FluxRefCount$RefCountMonitor.terminated:Z
      20: ifeq          37
      23: new           #18                 // class reactor/core/publisher/FluxRefCount$RefCountMonitor
      26: dup
      27: aload_0
      28: invokespecial #19                 // Method reactor/core/publisher/FluxRefCount$RefCountMonitor."<init>":(Lreactor/core/publisher/FluxRefCount;)V
      31: astore_2
      32: aload_0
      33: aload_2
      34: putfield      #16                 // Field connection:Lreactor/core/publisher/FluxRefCount$RefCountMonitor;
      37: aload_2
      38: getfield      #20                 // Field reactor/core/publisher/FluxRefCount$RefCountMonitor.subscribers:J
      41: lstore        5
      43: aload_2
      44: lload         5
      46: lconst_1
      47: ladd
      48: putfield      #20                 // Field reactor/core/publisher/FluxRefCount$RefCountMonitor.subscribers:J
      51: aload_2
      52: getfield      #21                 // Field reactor/core/publisher/FluxRefCount$RefCountMonitor.connected:Z
      55: ifne          78
      58: lload         5
      60: lconst_1
      61: ladd
      62: aload_0
      63: getfield      #14                 // Field n:I
      66: i2l
      67: lcmp
      68: ifne          78
      71: iconst_1
      72: istore_3
      73: aload_2
      74: iconst_1
      75: putfield      #21                 // Field reactor/core/publisher/FluxRefCount$RefCountMonitor.connected:Z
      78: aload         4
      80: monitorexit
      81: goto          92
      84: astore        7
      86: aload         4
      88: monitorexit
      89: aload         7
      91: athrow
      92: aload_0
      93: getfield      #13                 // Field source:Lreactor/core/publisher/ConnectableFlux;
      96: new           #22                 // class reactor/core/publisher/FluxRefCount$RefCountInner
      99: dup
     100: aload_1
     101: aload_2
     102: invokespecial #23                 // Method reactor/core/publisher/FluxRefCount$RefCountInner."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxRefCount$RefCountMonitor;)V
     105: invokevirtual #24                 // Method reactor/core/publisher/ConnectableFlux.subscribe:(Lreactor/core/CoreSubscriber;)V
     108: iload_3
     109: ifeq          120
     112: aload_0
     113: getfield      #13                 // Field source:Lreactor/core/publisher/ConnectableFlux;
     116: aload_2
     117: invokevirtual #25                 // Method reactor/core/publisher/ConnectableFlux.connect:(Ljava/util/function/Consumer;)V
     120: return
    Exception table:
       from    to  target type
           7    81    84   any
          84    89    84   any

  void cancel(reactor.core.publisher.FluxRefCount$RefCountMonitor);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: dup
       4: astore_3
       5: monitorenter
       6: aload_1
       7: getfield      #17                 // Field reactor/core/publisher/FluxRefCount$RefCountMonitor.terminated:Z
      10: ifeq          16
      13: aload_3
      14: monitorexit
      15: return
      16: aload_1
      17: getfield      #20                 // Field reactor/core/publisher/FluxRefCount$RefCountMonitor.subscribers:J
      20: lconst_1
      21: lsub
      22: lstore        4
      24: aload_1
      25: lload         4
      27: putfield      #20                 // Field reactor/core/publisher/FluxRefCount$RefCountMonitor.subscribers:J
      30: lload         4
      32: lconst_0
      33: lcmp
      34: ifne          44
      37: aload_1
      38: getfield      #21                 // Field reactor/core/publisher/FluxRefCount$RefCountMonitor.connected:Z
      41: ifne          47
      44: aload_3
      45: monitorexit
      46: return
      47: aload_1
      48: aload_0
      49: getfield      #16                 // Field connection:Lreactor/core/publisher/FluxRefCount$RefCountMonitor;
      52: if_acmpne     74
      55: getstatic     #26                 // Field reactor/core/publisher/FluxRefCount$RefCountMonitor.DISCONNECT:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      58: aload_1
      59: invokestatic  #27                 // Method reactor/core/Disposables.disposed:()Lreactor/core/Disposable;
      62: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      65: checkcast     #29                 // class reactor/core/Disposable
      68: astore_2
      69: aload_0
      70: aconst_null
      71: putfield      #16                 // Field connection:Lreactor/core/publisher/FluxRefCount$RefCountMonitor;
      74: aload_3
      75: monitorexit
      76: goto          86
      79: astore        6
      81: aload_3
      82: monitorexit
      83: aload         6
      85: athrow
      86: aload_2
      87: ifnull        96
      90: aload_2
      91: invokeinterface #30,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      96: return
    Exception table:
       from    to  target type
           6    15    79   any
          16    46    79   any
          47    76    79   any
          79    83    79   any

  void terminated(reactor.core.publisher.FluxRefCount$RefCountMonitor);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_1
       5: getfield      #17                 // Field reactor/core/publisher/FluxRefCount$RefCountMonitor.terminated:Z
       8: ifne          21
      11: aload_1
      12: iconst_1
      13: putfield      #17                 // Field reactor/core/publisher/FluxRefCount$RefCountMonitor.terminated:Z
      16: aload_0
      17: aconst_null
      18: putfield      #16                 // Field connection:Lreactor/core/publisher/FluxRefCount$RefCountMonitor;
      21: aload_2
      22: monitorexit
      23: goto          31
      26: astore_3
      27: aload_2
      28: monitorexit
      29: aload_3
      30: athrow
      31: return
    Exception table:
       from    to  target type
           4    23    26   any
          26    29    26   any

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #31                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #32                 // Method getPrefetch:()I
      11: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: areturn
      15: aload_1
      16: getstatic     #34                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #13                 // Field source:Lreactor/core/publisher/ConnectableFlux;
      26: areturn
      27: aconst_null
      28: areturn
}
