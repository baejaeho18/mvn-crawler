Compiled from "FluxFlatMap.java"
final class reactor.core.publisher.FluxFlatMap$FlatMapMain<T, R> extends reactor.core.publisher.FlatMapTracker<reactor.core.publisher.FluxFlatMap$FlatMapInner<R>> implements reactor.core.publisher.InnerOperator<T, R> {
  final boolean delayError;

  final int maxConcurrency;

  final int prefetch;

  final int limit;

  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>> mapper;

  final java.util.function.Supplier<? extends java.util.Queue<R>> mainQueueSupplier;

  final java.util.function.Supplier<? extends java.util.Queue<R>> innerQueueSupplier;

  final reactor.core.CoreSubscriber<? super R> actual;

  final reactor.util.context.Context ctx;

  volatile java.util.Queue<R> scalarQueue;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxFlatMap$FlatMapMain, java.lang.Throwable> ERROR;

  volatile boolean done;

  volatile boolean cancelled;

  org.reactivestreams.Subscription s;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxFlatMap$FlatMapMain> REQUESTED;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxFlatMap$FlatMapMain> WIP;

  static final reactor.core.publisher.FluxFlatMap$FlatMapInner[] EMPTY;

  static final reactor.core.publisher.FluxFlatMap$FlatMapInner[] TERMINATED;

  int lastIndex;

  int produced;

  reactor.core.publisher.FluxFlatMap$FlatMapMain(reactor.core.CoreSubscriber<? super R>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, boolean, int, java.util.function.Supplier<? extends java.util.Queue<R>>, int, java.util.function.Supplier<? extends java.util.Queue<R>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/FlatMapTracker."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_1
      11: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      16: putfield      #4                  // Field ctx:Lreactor/util/context/Context;
      19: aload_0
      20: aload_2
      21: putfield      #5                  // Field mapper:Ljava/util/function/Function;
      24: aload_0
      25: iload_3
      26: putfield      #6                  // Field delayError:Z
      29: aload_0
      30: iload         4
      32: putfield      #7                  // Field maxConcurrency:I
      35: aload_0
      36: aload         5
      38: putfield      #8                  // Field mainQueueSupplier:Ljava/util/function/Supplier;
      41: aload_0
      42: iload         6
      44: putfield      #9                  // Field prefetch:I
      47: aload_0
      48: aload         7
      50: putfield      #10                 // Field innerQueueSupplier:Ljava/util/function/Supplier;
      53: aload_0
      54: iload         4
      56: invokestatic  #11                 // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      59: putfield      #12                 // Field limit:I
      62: return

  public final reactor.core.CoreSubscriber<? super R> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #13                 // Field array:[Ljava/lang/Object;
       4: invokestatic  #14                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: invokedynamic #15,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      12: invokeinterface #16,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      17: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #17                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #19                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #20                 // Field cancelled:Z
      23: invokestatic  #21                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #22                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      31: if_acmpne     39
      34: aload_0
      35: getfield      #23                 // Field error:Ljava/lang/Throwable;
      38: areturn
      39: aload_1
      40: getstatic     #24                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      43: if_acmpne     81
      46: aload_0
      47: getfield      #25                 // Field done:Z
      50: ifeq          76
      53: aload_0
      54: getfield      #26                 // Field scalarQueue:Ljava/util/Queue;
      57: ifnull        72
      60: aload_0
      61: getfield      #26                 // Field scalarQueue:Ljava/util/Queue;
      64: invokeinterface #27,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      69: ifeq          76
      72: iconst_1
      73: goto          77
      76: iconst_0
      77: invokestatic  #21                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      80: areturn
      81: aload_1
      82: getstatic     #28                 // Field reactor/core/Scannable$Attr.DELAY_ERROR:Lreactor/core/Scannable$Attr;
      85: if_acmpne     96
      88: aload_0
      89: getfield      #6                  // Field delayError:Z
      92: invokestatic  #21                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      95: areturn
      96: aload_1
      97: getstatic     #29                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
     100: if_acmpne     111
     103: aload_0
     104: getfield      #7                  // Field maxConcurrency:I
     107: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     110: areturn
     111: aload_1
     112: getstatic     #31                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
     115: if_acmpne     126
     118: aload_0
     119: getfield      #32                 // Field requested:J
     122: invokestatic  #33                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     125: areturn
     126: aload_1
     127: getstatic     #34                 // Field reactor/core/Scannable$Attr.LARGE_BUFFERED:Lreactor/core/Scannable$Attr;
     130: if_acmpne     164
     133: aload_0
     134: getfield      #26                 // Field scalarQueue:Ljava/util/Queue;
     137: ifnull        153
     140: aload_0
     141: getfield      #26                 // Field scalarQueue:Ljava/util/Queue;
     144: invokeinterface #35,  1           // InterfaceMethod java/util/Queue.size:()I
     149: i2l
     150: goto          154
     153: lconst_0
     154: aload_0
     155: getfield      #36                 // Field size:I
     158: i2l
     159: ladd
     160: invokestatic  #33                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     163: areturn
     164: aload_1
     165: getstatic     #37                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
     168: if_acmpne     219
     171: aload_0
     172: getfield      #26                 // Field scalarQueue:Ljava/util/Queue;
     175: ifnull        191
     178: aload_0
     179: getfield      #26                 // Field scalarQueue:Ljava/util/Queue;
     182: invokeinterface #35,  1           // InterfaceMethod java/util/Queue.size:()I
     187: i2l
     188: goto          192
     191: lconst_0
     192: aload_0
     193: getfield      #36                 // Field size:I
     196: i2l
     197: ladd
     198: lstore_2
     199: lload_2
     200: ldc2_w        #39                 // long 2147483647l
     203: lcmp
     204: ifgt          213
     207: lload_2
     208: l2i
     209: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     212: areturn
     213: ldc           #41                 // int -2147483648
     215: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     218: areturn
     219: aload_0
     220: aload_1
     221: invokespecial #42                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     224: areturn

  reactor.core.publisher.FluxFlatMap$FlatMapInner<R>[] empty();
    Code:
       0: getstatic     #43                 // Field EMPTY:[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;
       3: areturn

  reactor.core.publisher.FluxFlatMap$FlatMapInner<R>[] terminated();
    Code:
       0: getstatic     #44                 // Field TERMINATED:[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;
       3: areturn

  reactor.core.publisher.FluxFlatMap$FlatMapInner<R>[] newArray(int);
    Code:
       0: iload_1
       1: anewarray     #45                 // class reactor/core/publisher/FluxFlatMap$FlatMapInner
       4: areturn

  void setIndex(reactor.core.publisher.FluxFlatMap$FlatMapInner<R>, int);
    Code:
       0: aload_1
       1: iload_2
       2: putfield      #46                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.index:I
       5: return

  void unsubscribeEntry(reactor.core.publisher.FluxFlatMap$FlatMapInner<R>);
    Code:
       0: aload_1
       1: invokevirtual #47                 // Method reactor/core/publisher/FluxFlatMap$FlatMapInner.cancel:()V
       4: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #48                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          20
       7: getstatic     #49                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #50                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #51                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #20                 // Field cancelled:Z
       4: ifne          52
       7: aload_0
       8: iconst_1
       9: putfield      #20                 // Field cancelled:Z
      12: getstatic     #52                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      15: aload_0
      16: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      19: ifne          52
      22: aload_0
      23: getfield      #26                 // Field scalarQueue:Ljava/util/Queue;
      26: aload_0
      27: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      30: aconst_null
      31: invokestatic  #54                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
      34: aload_0
      35: aconst_null
      36: putfield      #26                 // Field scalarQueue:Ljava/util/Queue;
      39: aload_0
      40: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
      43: invokeinterface #55,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      48: aload_0
      49: invokevirtual #56                 // Method unsubscribe:()V
      52: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #57                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          39
      11: aload_0
      12: aload_1
      13: putfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #58,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: aload_0
      28: getfield      #7                  // Field maxConcurrency:I
      31: invokestatic  #59                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      34: invokeinterface #60,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      39: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #25                 // Field done:Z
       4: ifeq          16
       7: aload_1
       8: aload_0
       9: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      12: invokestatic  #61                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      15: return
      16: aload_0
      17: getfield      #5                  // Field mapper:Ljava/util/function/Function;
      20: aload_1
      21: invokeinterface #62,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      26: ldc           #63                 // String The mapper returned a null Publisher
      28: invokestatic  #64                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      31: checkcast     #65                 // class org/reactivestreams/Publisher
      34: astore_2
      35: goto          82
      38: astore_3
      39: aload_1
      40: aload_3
      41: aload_0
      42: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      45: aload_0
      46: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
      49: invokestatic  #67                 // Method reactor/core/publisher/Operators.onNextError:(Ljava/lang/Object;Ljava/lang/Throwable;Lreactor/util/context/Context;Lorg/reactivestreams/Subscription;)Ljava/lang/Throwable;
      52: astore        4
      54: aload_1
      55: aload_0
      56: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      59: invokestatic  #68                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      62: aload         4
      64: ifnull        76
      67: aload_0
      68: aload         4
      70: invokevirtual #69                 // Method onError:(Ljava/lang/Throwable;)V
      73: goto          81
      76: aload_0
      77: aconst_null
      78: invokevirtual #70                 // Method tryEmitScalar:(Ljava/lang/Object;)V
      81: return
      82: aload_2
      83: instanceof    #71                 // class java/util/concurrent/Callable
      86: ifeq          181
      89: aload_2
      90: checkcast     #71                 // class java/util/concurrent/Callable
      93: invokeinterface #72,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      98: astore_3
      99: goto          173
     102: astore        4
     104: aload_0
     105: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     108: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     113: astore        5
     115: aload_1
     116: aload         4
     118: aload         5
     120: invokestatic  #73                 // Method reactor/core/publisher/Operators.onNextPollError:(Ljava/lang/Object;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
     123: astore        6
     125: aload         6
     127: ifnonnull     131
     130: return
     131: aload_0
     132: getfield      #6                  // Field delayError:Z
     135: ifeq          150
     138: getstatic     #74                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     141: aload_0
     142: aload         4
     144: invokestatic  #75                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
     147: ifne          166
     150: aload_0
     151: aload_0
     152: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
     155: aload         4
     157: aload_1
     158: aload         5
     160: invokestatic  #76                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     163: invokevirtual #69                 // Method onError:(Ljava/lang/Throwable;)V
     166: aload_1
     167: aload         5
     169: invokestatic  #68                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
     172: return
     173: aload_0
     174: aload_3
     175: invokevirtual #70                 // Method tryEmitScalar:(Ljava/lang/Object;)V
     178: goto          209
     181: new           #45                 // class reactor/core/publisher/FluxFlatMap$FlatMapInner
     184: dup
     185: aload_0
     186: aload_0
     187: getfield      #9                  // Field prefetch:I
     190: invokespecial #77                 // Method reactor/core/publisher/FluxFlatMap$FlatMapInner."<init>":(Lreactor/core/publisher/FluxFlatMap$FlatMapMain;I)V
     193: astore_3
     194: aload_0
     195: aload_3
     196: invokevirtual #78                 // Method add:(Ljava/lang/Object;)Z
     199: ifeq          209
     202: aload_2
     203: aload_3
     204: invokeinterface #79,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     209: return
    Exception table:
       from    to  target type
          16    35    38   Class java/lang/Throwable
          89    99   102   Class java/lang/Throwable

  java.util.Queue<R> getOrCreateScalarQueue();
    Code:
       0: aload_0
       1: getfield      #26                 // Field scalarQueue:Ljava/util/Queue;
       4: astore_1
       5: aload_1
       6: ifnonnull     27
       9: aload_0
      10: getfield      #8                  // Field mainQueueSupplier:Ljava/util/function/Supplier;
      13: invokeinterface #80,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      18: checkcast     #81                 // class java/util/Queue
      21: astore_1
      22: aload_0
      23: aload_1
      24: putfield      #26                 // Field scalarQueue:Ljava/util/Queue;
      27: aload_1
      28: areturn

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #25                 // Field done:Z
       4: ifeq          16
       7: aload_1
       8: aload_0
       9: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      12: invokestatic  #82                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      15: return
      16: getstatic     #74                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      19: aload_0
      20: aload_1
      21: invokestatic  #75                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      24: ifeq          39
      27: aload_0
      28: iconst_1
      29: putfield      #25                 // Field done:Z
      32: aload_0
      33: invokevirtual #51                 // Method drain:()V
      36: goto          47
      39: aload_1
      40: aload_0
      41: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      44: invokestatic  #82                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      47: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #25                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #25                 // Field done:Z
      13: aload_0
      14: invokevirtual #51                 // Method drain:()V
      17: return

  void tryEmitScalar(R);
    Code:
       0: aload_1
       1: ifnonnull     53
       4: aload_0
       5: getfield      #7                  // Field maxConcurrency:I
       8: ldc           #83                 // int 2147483647
      10: if_icmpeq     52
      13: aload_0
      14: getfield      #84                 // Field produced:I
      17: iconst_1
      18: iadd
      19: istore_2
      20: iload_2
      21: aload_0
      22: getfield      #12                 // Field limit:I
      25: if_icmpne     47
      28: aload_0
      29: iconst_0
      30: putfield      #84                 // Field produced:I
      33: aload_0
      34: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
      37: iload_2
      38: i2l
      39: invokeinterface #60,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      44: goto          52
      47: aload_0
      48: iload_2
      49: putfield      #84                 // Field produced:I
      52: return
      53: aload_0
      54: getfield      #85                 // Field wip:I
      57: ifne          247
      60: getstatic     #52                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      63: aload_0
      64: iconst_0
      65: iconst_1
      66: invokevirtual #86                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      69: ifeq          247
      72: aload_0
      73: getfield      #32                 // Field requested:J
      76: lstore_2
      77: aload_0
      78: getfield      #26                 // Field scalarQueue:Ljava/util/Queue;
      81: astore        4
      83: lload_2
      84: lconst_0
      85: lcmp
      86: ifeq          185
      89: aload         4
      91: ifnull        104
      94: aload         4
      96: invokeinterface #27,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     101: ifeq          185
     104: aload_0
     105: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     108: aload_1
     109: invokeinterface #87,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     114: lload_2
     115: ldc2_w        #89                 // long 9223372036854775807l
     118: lcmp
     119: ifeq          130
     122: getstatic     #49                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     125: aload_0
     126: invokevirtual #91                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
     129: pop2
     130: aload_0
     131: getfield      #7                  // Field maxConcurrency:I
     134: ldc           #83                 // int 2147483647
     136: if_icmpeq     229
     139: aload_0
     140: getfield      #84                 // Field produced:I
     143: iconst_1
     144: iadd
     145: istore        5
     147: iload         5
     149: aload_0
     150: getfield      #12                 // Field limit:I
     153: if_icmpne     176
     156: aload_0
     157: iconst_0
     158: putfield      #84                 // Field produced:I
     161: aload_0
     162: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
     165: iload         5
     167: i2l
     168: invokeinterface #60,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     173: goto          182
     176: aload_0
     177: iload         5
     179: putfield      #84                 // Field produced:I
     182: goto          229
     185: aload         4
     187: ifnonnull     196
     190: aload_0
     191: invokevirtual #92                 // Method getOrCreateScalarQueue:()Ljava/util/Queue;
     194: astore        4
     196: aload         4
     198: aload_1
     199: invokeinterface #93,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     204: ifne          229
     207: aload_0
     208: aload_1
     209: aload_0
     210: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
     213: invokevirtual #94                 // Method failOverflow:(Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
     216: ifeq          229
     219: aload_0
     220: iconst_1
     221: putfield      #25                 // Field done:Z
     224: aload_0
     225: invokevirtual #95                 // Method drainLoop:()V
     228: return
     229: getstatic     #52                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     232: aload_0
     233: invokevirtual #96                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     236: ifne          240
     239: return
     240: aload_0
     241: invokevirtual #95                 // Method drainLoop:()V
     244: goto          283
     247: aload_0
     248: invokevirtual #92                 // Method getOrCreateScalarQueue:()Ljava/util/Queue;
     251: astore_2
     252: aload_2
     253: aload_1
     254: invokeinterface #93,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     259: ifne          279
     262: aload_0
     263: aload_1
     264: aload_0
     265: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
     268: invokevirtual #94                 // Method failOverflow:(Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
     271: ifeq          279
     274: aload_0
     275: iconst_1
     276: putfield      #25                 // Field done:Z
     279: aload_0
     280: invokevirtual #51                 // Method drain:()V
     283: return

  void tryEmit(reactor.core.publisher.FluxFlatMap$FlatMapInner<R>, R);
    Code:
       0: aload_0
       1: getfield      #85                 // Field wip:I
       4: ifne          145
       7: getstatic     #52                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_0
      12: iconst_1
      13: invokevirtual #86                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      16: ifeq          145
      19: aload_0
      20: getfield      #32                 // Field requested:J
      23: lstore_3
      24: aload_1
      25: getfield      #97                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.queue:Ljava/util/Queue;
      28: astore        5
      30: lload_3
      31: lconst_0
      32: lcmp
      33: ifeq          85
      36: aload         5
      38: ifnull        51
      41: aload         5
      43: invokeinterface #27,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      48: ifeq          85
      51: aload_0
      52: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      55: aload_2
      56: invokeinterface #87,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      61: lload_3
      62: ldc2_w        #89                 // long 9223372036854775807l
      65: lcmp
      66: ifeq          77
      69: getstatic     #49                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      72: aload_0
      73: invokevirtual #91                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
      76: pop2
      77: aload_1
      78: lconst_1
      79: invokevirtual #98                 // Method reactor/core/publisher/FluxFlatMap$FlatMapInner.request:(J)V
      82: goto          127
      85: aload         5
      87: ifnonnull     97
      90: aload_0
      91: aload_1
      92: invokevirtual #99                 // Method getOrCreateInnerQueue:(Lreactor/core/publisher/FluxFlatMap$FlatMapInner;)Ljava/util/Queue;
      95: astore        5
      97: aload         5
      99: aload_2
     100: invokeinterface #93,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     105: ifne          127
     108: aload_0
     109: aload_2
     110: aload_1
     111: invokevirtual #94                 // Method failOverflow:(Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
     114: ifeq          127
     117: aload_1
     118: iconst_1
     119: putfield      #100                // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
     122: aload_0
     123: invokevirtual #95                 // Method drainLoop:()V
     126: return
     127: getstatic     #52                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     130: aload_0
     131: invokevirtual #96                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     134: ifne          138
     137: return
     138: aload_0
     139: invokevirtual #95                 // Method drainLoop:()V
     142: goto          179
     145: aload_0
     146: aload_1
     147: invokevirtual #99                 // Method getOrCreateInnerQueue:(Lreactor/core/publisher/FluxFlatMap$FlatMapInner;)Ljava/util/Queue;
     150: astore_3
     151: aload_3
     152: aload_2
     153: invokeinterface #93,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     158: ifne          175
     161: aload_0
     162: aload_2
     163: aload_1
     164: invokevirtual #94                 // Method failOverflow:(Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
     167: ifeq          175
     170: aload_1
     171: iconst_1
     172: putfield      #100                // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
     175: aload_0
     176: invokevirtual #51                 // Method drain:()V
     179: return

  void drain();
    Code:
       0: getstatic     #52                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: invokevirtual #95                 // Method drainLoop:()V
      15: return

  void drainLoop();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       6: astore_2
       7: aload_0
       8: getfield      #25                 // Field done:Z
      11: istore_3
      12: aload_0
      13: invokevirtual #101                // Method get:()[Ljava/lang/Object;
      16: checkcast     #102                // class "[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;"
      19: astore        4
      21: aload         4
      23: arraylength
      24: istore        5
      26: aload_0
      27: getfield      #26                 // Field scalarQueue:Ljava/util/Queue;
      30: astore        6
      32: aload_0
      33: invokevirtual #103                // Method isEmpty:()Z
      36: istore        7
      38: aload_0
      39: iload_3
      40: iload         7
      42: ifeq          64
      45: aload         6
      47: ifnull        60
      50: aload         6
      52: invokeinterface #27,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      57: ifeq          64
      60: iconst_1
      61: goto          65
      64: iconst_0
      65: aload_2
      66: invokevirtual #104                // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
      69: ifeq          73
      72: return
      73: iconst_0
      74: istore        8
      76: aload_0
      77: getfield      #32                 // Field requested:J
      80: lstore        9
      82: lconst_0
      83: lstore        11
      85: lconst_0
      86: lstore        13
      88: lload         9
      90: lconst_0
      91: lcmp
      92: ifeq          211
      95: aload         6
      97: ifnull        211
     100: lload         11
     102: lload         9
     104: lcmp
     105: ifeq          170
     108: aload_0
     109: getfield      #25                 // Field done:Z
     112: istore_3
     113: aload         6
     115: invokeinterface #105,  1          // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
     120: astore        15
     122: aload         15
     124: ifnonnull     131
     127: iconst_1
     128: goto          132
     131: iconst_0
     132: istore        16
     134: aload_0
     135: iload_3
     136: iconst_0
     137: aload_2
     138: invokevirtual #104                // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
     141: ifeq          145
     144: return
     145: iload         16
     147: ifeq          153
     150: goto          170
     153: aload_2
     154: aload         15
     156: invokeinterface #106,  2          // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     161: lload         11
     163: lconst_1
     164: ladd
     165: lstore        11
     167: goto          100
     170: lload         11
     172: lconst_0
     173: lcmp
     174: ifeq          211
     177: lload         13
     179: lload         11
     181: ladd
     182: lstore        13
     184: lload         9
     186: ldc2_w        #89                 // long 9223372036854775807l
     189: lcmp
     190: ifeq          205
     193: getstatic     #49                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     196: aload_0
     197: lload         11
     199: lneg
     200: invokevirtual #107                // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
     203: lstore        9
     205: lconst_0
     206: lstore        11
     208: iconst_1
     209: istore        8
     211: lload         9
     213: lconst_0
     214: lcmp
     215: ifeq          633
     218: iload         7
     220: ifne          633
     223: aload_0
     224: getfield      #108                // Field lastIndex:I
     227: istore        15
     229: iconst_0
     230: istore        16
     232: iload         16
     234: iload         5
     236: if_icmpge     627
     239: aload_0
     240: getfield      #20                 // Field cancelled:Z
     243: ifeq          277
     246: aload_0
     247: getfield      #26                 // Field scalarQueue:Ljava/util/Queue;
     250: aload_0
     251: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     254: aconst_null
     255: invokestatic  #54                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
     258: aload_0
     259: aconst_null
     260: putfield      #26                 // Field scalarQueue:Ljava/util/Queue;
     263: aload_0
     264: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
     267: invokeinterface #55,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     272: aload_0
     273: invokevirtual #56                 // Method unsubscribe:()V
     276: return
     277: aload         4
     279: iload         15
     281: aaload
     282: astore        17
     284: aload         17
     286: ifnull        598
     289: aload         17
     291: getfield      #100                // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
     294: istore_3
     295: aload         17
     297: getfield      #97                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.queue:Ljava/util/Queue;
     300: astore        18
     302: iload_3
     303: ifeq          332
     306: aload         18
     308: ifnonnull     332
     311: aload_0
     312: aload         17
     314: getfield      #46                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.index:I
     317: invokevirtual #109                // Method remove:(I)V
     320: iconst_1
     321: istore        8
     323: lload         13
     325: lconst_1
     326: ladd
     327: lstore        13
     329: goto          598
     332: aload         18
     334: ifnull        598
     337: lload         11
     339: lload         9
     341: lcmp
     342: ifeq          492
     345: aload         17
     347: getfield      #100                // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
     350: istore_3
     351: aload         18
     353: invokeinterface #105,  1          // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
     358: astore        19
     360: goto          414
     363: astore        20
     365: aload         17
     367: aload         20
     369: aload_0
     370: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     373: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     378: invokestatic  #110                // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     381: astore        20
     383: getstatic     #74                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     386: aload_0
     387: aload         20
     389: invokestatic  #75                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
     392: ifne          409
     395: aload         20
     397: aload_0
     398: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     401: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     406: invokestatic  #82                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
     409: aconst_null
     410: astore        19
     412: iconst_1
     413: istore_3
     414: aload         19
     416: ifnonnull     423
     419: iconst_1
     420: goto          424
     423: iconst_0
     424: istore        20
     426: aload_0
     427: iload_3
     428: iconst_0
     429: aload_2
     430: invokevirtual #104                // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
     433: ifeq          437
     436: return
     437: iload_3
     438: ifeq          467
     441: iload         20
     443: ifeq          467
     446: aload_0
     447: aload         17
     449: getfield      #46                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.index:I
     452: invokevirtual #109                // Method remove:(I)V
     455: iconst_1
     456: istore        8
     458: lload         13
     460: lconst_1
     461: ladd
     462: lstore        13
     464: goto          492
     467: iload         20
     469: ifeq          475
     472: goto          492
     475: aload_2
     476: aload         19
     478: invokeinterface #106,  2          // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     483: lload         11
     485: lconst_1
     486: ladd
     487: lstore        11
     489: goto          337
     492: lload         11
     494: lload         9
     496: lcmp
     497: ifne          542
     500: aload         17
     502: getfield      #100                // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
     505: istore_3
     506: aload         18
     508: invokeinterface #27,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     513: istore        19
     515: iload_3
     516: ifeq          542
     519: iload         19
     521: ifeq          542
     524: aload_0
     525: aload         17
     527: getfield      #46                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.index:I
     530: invokevirtual #109                // Method remove:(I)V
     533: iconst_1
     534: istore        8
     536: lload         13
     538: lconst_1
     539: ladd
     540: lstore        13
     542: lload         11
     544: lconst_0
     545: lcmp
     546: ifeq          598
     549: aload         17
     551: getfield      #100                // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
     554: ifne          564
     557: aload         17
     559: lload         11
     561: invokevirtual #98                 // Method reactor/core/publisher/FluxFlatMap$FlatMapInner.request:(J)V
     564: lload         9
     566: ldc2_w        #89                 // long 9223372036854775807l
     569: lcmp
     570: ifeq          595
     573: getstatic     #49                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     576: aload_0
     577: lload         11
     579: lneg
     580: invokevirtual #107                // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
     583: lstore        9
     585: lload         9
     587: lconst_0
     588: lcmp
     589: ifne          595
     592: goto          627
     595: lconst_0
     596: lstore        11
     598: lload         9
     600: lconst_0
     601: lcmp
     602: ifne          608
     605: goto          627
     608: iinc          15, 1
     611: iload         15
     613: iload         5
     615: if_icmpne     621
     618: iconst_0
     619: istore        15
     621: iinc          16, 1
     624: goto          232
     627: aload_0
     628: iload         15
     630: putfield      #108                // Field lastIndex:I
     633: lload         9
     635: lconst_0
     636: lcmp
     637: ifne          798
     640: iload         7
     642: ifne          798
     645: aload_0
     646: invokevirtual #101                // Method get:()[Ljava/lang/Object;
     649: checkcast     #102                // class "[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;"
     652: astore        4
     654: aload         4
     656: arraylength
     657: istore        5
     659: iconst_0
     660: istore        15
     662: iload         15
     664: iload         5
     666: if_icmpge     798
     669: aload_0
     670: getfield      #20                 // Field cancelled:Z
     673: ifeq          707
     676: aload_0
     677: getfield      #26                 // Field scalarQueue:Ljava/util/Queue;
     680: aload_0
     681: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     684: aconst_null
     685: invokestatic  #54                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
     688: aload_0
     689: aconst_null
     690: putfield      #26                 // Field scalarQueue:Ljava/util/Queue;
     693: aload_0
     694: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
     697: invokeinterface #55,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     702: aload_0
     703: invokevirtual #56                 // Method unsubscribe:()V
     706: return
     707: aload         4
     709: iload         15
     711: aaload
     712: astore        16
     714: aload         16
     716: ifnonnull     722
     719: goto          792
     722: aload         16
     724: getfield      #100                // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
     727: istore_3
     728: aload         16
     730: getfield      #97                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.queue:Ljava/util/Queue;
     733: astore        17
     735: aload         17
     737: ifnull        750
     740: aload         17
     742: invokeinterface #27,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     747: ifeq          754
     750: iconst_1
     751: goto          755
     754: iconst_0
     755: istore        18
     757: iload         18
     759: ifne          765
     762: goto          798
     765: iload_3
     766: ifeq          792
     769: iload         18
     771: ifeq          792
     774: aload_0
     775: aload         16
     777: getfield      #46                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.index:I
     780: invokevirtual #109                // Method remove:(I)V
     783: iconst_1
     784: istore        8
     786: lload         13
     788: lconst_1
     789: ladd
     790: lstore        13
     792: iinc          15, 1
     795: goto          662
     798: lload         13
     800: lconst_0
     801: lcmp
     802: ifeq          830
     805: aload_0
     806: getfield      #25                 // Field done:Z
     809: ifne          830
     812: aload_0
     813: getfield      #20                 // Field cancelled:Z
     816: ifne          830
     819: aload_0
     820: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
     823: lload         13
     825: invokeinterface #60,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     830: iload         8
     832: ifeq          838
     835: goto          7
     838: getstatic     #52                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     841: aload_0
     842: iload_1
     843: ineg
     844: invokevirtual #111                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     847: istore_1
     848: iload_1
     849: ifne          855
     852: goto          858
     855: goto          7
     858: return
    Exception table:
       from    to  target type
         351   360   363   Class java/lang/Throwable

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>);
    Code:
       0: aload_0
       1: getfield      #20                 // Field cancelled:Z
       4: ifeq          39
       7: aload_0
       8: getfield      #26                 // Field scalarQueue:Ljava/util/Queue;
      11: aload_0
      12: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      15: aconst_null
      16: invokestatic  #54                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
      19: aload_0
      20: aconst_null
      21: putfield      #26                 // Field scalarQueue:Ljava/util/Queue;
      24: aload_0
      25: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
      28: invokeinterface #55,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      33: aload_0
      34: invokevirtual #56                 // Method unsubscribe:()V
      37: iconst_1
      38: ireturn
      39: aload_0
      40: getfield      #6                  // Field delayError:Z
      43: ifeq          101
      46: iload_1
      47: ifeq          185
      50: iload_2
      51: ifeq          185
      54: aload_0
      55: getfield      #23                 // Field error:Ljava/lang/Throwable;
      58: astore        4
      60: aload         4
      62: ifnull        93
      65: aload         4
      67: getstatic     #112                // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      70: if_acmpeq     93
      73: getstatic     #74                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      76: aload_0
      77: invokestatic  #113                // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      80: astore        4
      82: aload_3
      83: aload         4
      85: invokeinterface #114,  2          // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      90: goto          99
      93: aload_3
      94: invokeinterface #115,  1          // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      99: iconst_1
     100: ireturn
     101: iload_1
     102: ifeq          185
     105: aload_0
     106: getfield      #23                 // Field error:Ljava/lang/Throwable;
     109: astore        4
     111: aload         4
     113: ifnull        173
     116: aload         4
     118: getstatic     #112                // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
     121: if_acmpeq     173
     124: getstatic     #74                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     127: aload_0
     128: invokestatic  #113                // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
     131: astore        4
     133: aload_0
     134: getfield      #26                 // Field scalarQueue:Ljava/util/Queue;
     137: aload_0
     138: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     141: aconst_null
     142: invokestatic  #54                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
     145: aload_0
     146: aconst_null
     147: putfield      #26                 // Field scalarQueue:Ljava/util/Queue;
     150: aload_0
     151: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
     154: invokeinterface #55,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     159: aload_0
     160: invokevirtual #56                 // Method unsubscribe:()V
     163: aload_3
     164: aload         4
     166: invokeinterface #114,  2          // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     171: iconst_1
     172: ireturn
     173: iload_2
     174: ifeq          185
     177: aload_3
     178: invokeinterface #115,  1          // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     183: iconst_1
     184: ireturn
     185: iconst_0
     186: ireturn

  void innerError(reactor.core.publisher.FluxFlatMap$FlatMapInner<R>, java.lang.Throwable);
    Code:
       0: aload_2
       1: aload_0
       2: invokevirtual #116                // Method currentContext:()Lreactor/util/context/Context;
       5: aload_0
       6: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
       9: invokestatic  #117                // Method reactor/core/publisher/Operators.onNextInnerError:(Ljava/lang/Throwable;Lreactor/util/context/Context;Lorg/reactivestreams/Subscription;)Ljava/lang/Throwable;
      12: astore_2
      13: aload_2
      14: ifnull        68
      17: getstatic     #74                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      20: aload_0
      21: aload_2
      22: invokestatic  #75                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      25: ifeq          52
      28: aload_1
      29: iconst_1
      30: putfield      #100                // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
      33: aload_0
      34: getfield      #6                  // Field delayError:Z
      37: ifne          45
      40: aload_0
      41: iconst_1
      42: putfield      #25                 // Field done:Z
      45: aload_0
      46: invokevirtual #51                 // Method drain:()V
      49: goto          72
      52: aload_2
      53: aload_0
      54: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      57: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      62: invokestatic  #82                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      65: goto          72
      68: aload_0
      69: invokevirtual #51                 // Method drain:()V
      72: return

  boolean failOverflow(R, org.reactivestreams.Subscription);
    Code:
       0: aload_2
       1: ldc           #119                // String Queue is full: Reactive Streams source doesn\'t respect backpressure
       3: invokestatic  #120                // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
       6: aload_1
       7: aload_0
       8: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      11: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      16: invokestatic  #76                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      19: astore_3
      20: getstatic     #74                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      23: aload_0
      24: aload_3
      25: invokestatic  #75                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      28: ifne          46
      31: aload_3
      32: aload_0
      33: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      36: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      41: invokestatic  #82                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      44: iconst_0
      45: ireturn
      46: iconst_1
      47: ireturn

  void innerComplete(reactor.core.publisher.FluxFlatMap$FlatMapInner<R>);
    Code:
       0: getstatic     #52                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: invokevirtual #95                 // Method drainLoop:()V
      15: return

  java.util.Queue<R> getOrCreateInnerQueue(reactor.core.publisher.FluxFlatMap$FlatMapInner<R>);
    Code:
       0: aload_1
       1: getfield      #97                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.queue:Ljava/util/Queue;
       4: astore_2
       5: aload_2
       6: ifnonnull     27
       9: aload_0
      10: getfield      #10                 // Field innerQueueSupplier:Ljava/util/function/Supplier;
      13: invokeinterface #80,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      18: checkcast     #81                 // class java/util/Queue
      21: astore_2
      22: aload_1
      23: aload_2
      24: putfield      #97                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.queue:Ljava/util/Queue;
      27: aload_2
      28: areturn

  void setIndex(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #45                 // class reactor/core/publisher/FluxFlatMap$FlatMapInner
       5: iload_2
       6: invokevirtual #121                // Method setIndex:(Lreactor/core/publisher/FluxFlatMap$FlatMapInner;I)V
       9: return

  void unsubscribeEntry(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #45                 // class reactor/core/publisher/FluxFlatMap$FlatMapInner
       5: invokevirtual #122                // Method unsubscribeEntry:(Lreactor/core/publisher/FluxFlatMap$FlatMapInner;)V
       8: return

  java.lang.Object[] newArray(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #123                // Method newArray:(I)[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;
       5: areturn

  java.lang.Object[] terminated();
    Code:
       0: aload_0
       1: invokevirtual #124                // Method terminated:()[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;
       4: areturn

  java.lang.Object[] empty();
    Code:
       0: aload_0
       1: invokevirtual #125                // Method empty:()[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;
       4: areturn

  static {};
    Code:
       0: ldc           #126                // class reactor/core/publisher/FluxFlatMap$FlatMapMain
       2: ldc           #66                 // class java/lang/Throwable
       4: ldc           #127                // String error
       6: invokestatic  #128                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #74                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #126                // class reactor/core/publisher/FluxFlatMap$FlatMapMain
      14: ldc           #129                // String requested
      16: invokestatic  #130                // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      19: putstatic     #49                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      22: ldc           #126                // class reactor/core/publisher/FluxFlatMap$FlatMapMain
      24: ldc           #131                // String wip
      26: invokestatic  #132                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      29: putstatic     #52                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      32: iconst_0
      33: anewarray     #45                 // class reactor/core/publisher/FluxFlatMap$FlatMapInner
      36: putstatic     #43                 // Field EMPTY:[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;
      39: iconst_0
      40: anewarray     #45                 // class reactor/core/publisher/FluxFlatMap$FlatMapInner
      43: putstatic     #44                 // Field TERMINATED:[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;
      46: return
}
