Compiled from "FluxSampleTimeout.java"
final class reactor.core.publisher.FluxSampleTimeout$SampleTimeoutOther<T, U> extends reactor.core.publisher.Operators$DeferredSubscription implements reactor.core.publisher.InnerConsumer<U> {
  final reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain<T, U> main;

  final T value;

  final long index;

  volatile int once;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutOther> ONCE;

  reactor.core.publisher.FluxSampleTimeout$SampleTimeoutOther(reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain<T, U>, T, long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Operators$DeferredSubscription."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field main:Lreactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field value:Ljava/lang/Object;
      14: aload_0
      15: lload_3
      16: putfield      #4                  // Field index:J
      19: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field main:Lreactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain;
       4: invokevirtual #5                  // Method reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain.currentContext:()Lreactor/util/context/Context;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #6                  // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     24
       7: aload_0
       8: getfield      #7                  // Field once:I
      11: iconst_1
      12: if_icmpne     19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: invokestatic  #8                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      23: areturn
      24: aload_1
      25: getstatic     #9                  // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      28: if_acmpne     36
      31: aload_0
      32: getfield      #2                  // Field main:Lreactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain;
      35: areturn
      36: aload_0
      37: aload_1
      38: invokespecial #10                 // Method reactor/core/publisher/Operators$DeferredSubscription.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      41: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #11                 // Method set:(Lorg/reactivestreams/Subscription;)Z
       5: ifeq          17
       8: aload_1
       9: ldc2_w        #13                 // long 9223372036854775807l
      12: invokeinterface #15,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      17: return

  public void onNext(U);
    Code:
       0: getstatic     #16                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          24
      12: aload_0
      13: invokevirtual #18                 // Method cancel:()V
      16: aload_0
      17: getfield      #2                  // Field main:Lreactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain;
      20: aload_0
      21: invokevirtual #19                 // Method reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain.otherNext:(Lreactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther;)V
      24: return

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #16                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          27
      12: aload_0
      13: getfield      #2                  // Field main:Lreactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain;
      16: aload_0
      17: getfield      #4                  // Field index:J
      20: aload_1
      21: invokevirtual #20                 // Method reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain.otherError:(JLjava/lang/Throwable;)V
      24: goto          38
      27: aload_1
      28: aload_0
      29: getfield      #2                  // Field main:Lreactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain;
      32: invokevirtual #5                  // Method reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain.currentContext:()Lreactor/util/context/Context;
      35: invokestatic  #21                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      38: return

  public void onComplete();
    Code:
       0: getstatic     #16                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          20
      12: aload_0
      13: getfield      #2                  // Field main:Lreactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain;
      16: aload_0
      17: invokevirtual #19                 // Method reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain.otherNext:(Lreactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther;)V
      20: return

  final java.util.stream.Stream<T> toStream();
    Code:
       0: aload_0
       1: getfield      #3                  // Field value:Ljava/lang/Object;
       4: invokestatic  #22                 // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: areturn

  static {};
    Code:
       0: ldc           #23                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther
       2: ldc           #24                 // String once
       4: invokestatic  #25                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #16                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
