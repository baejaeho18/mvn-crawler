Compiled from "FluxSubscribeOnValue.java"
final class reactor.core.publisher.FluxSubscribeOnValue$ScheduledEmpty implements reactor.core.Fuseable$QueueSubscription<java.lang.Void>, java.lang.Runnable {
  final org.reactivestreams.Subscriber<?> actual;

  volatile reactor.core.Disposable future;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSubscribeOnValue$ScheduledEmpty, reactor.core.Disposable> FUTURE;

  static final reactor.core.Disposable FINISHED;

  reactor.core.publisher.FluxSubscribeOnValue$ScheduledEmpty(org.reactivestreams.Subscriber<?>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lorg/reactivestreams/Subscriber;
       9: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #3                  // Method reactor/core/publisher/Operators.validate:(J)Z
       4: pop
       5: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #4                  // Field future:Lreactor/core/Disposable;
       4: astore_1
       5: aload_1
       6: getstatic     #5                  // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
       9: if_acmpeq     57
      12: aload_1
      13: getstatic     #6                  // Field FINISHED:Lreactor/core/Disposable;
      16: if_acmpeq     57
      19: getstatic     #7                  // Field FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: aload_0
      23: getstatic     #5                  // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      26: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      29: checkcast     #9                  // class reactor/core/Disposable
      32: astore_1
      33: aload_1
      34: ifnull        57
      37: aload_1
      38: getstatic     #5                  // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      41: if_acmpeq     57
      44: aload_1
      45: getstatic     #6                  // Field FINISHED:Lreactor/core/Disposable;
      48: if_acmpeq     57
      51: aload_1
      52: invokeinterface #10,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      57: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lorg/reactivestreams/Subscriber;
       4: invokeinterface #11,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
       9: getstatic     #7                  // Field FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: aload_0
      13: getstatic     #6                  // Field FINISHED:Lreactor/core/Disposable;
      16: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      19: goto          35
      22: astore_1
      23: getstatic     #7                  // Field FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      26: aload_0
      27: getstatic     #6                  // Field FINISHED:Lreactor/core/Disposable;
      30: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      33: aload_1
      34: athrow
      35: return
    Exception table:
       from    to  target type
           0     9    22   any

  void setFuture(reactor.core.Disposable);
    Code:
       0: getstatic     #7                  // Field FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aconst_null
       5: aload_1
       6: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ifne          37
      12: aload_0
      13: getfield      #4                  // Field future:Lreactor/core/Disposable;
      16: astore_2
      17: aload_2
      18: getstatic     #6                  // Field FINISHED:Lreactor/core/Disposable;
      21: if_acmpeq     37
      24: aload_2
      25: getstatic     #5                  // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      28: if_acmpeq     37
      31: aload_1
      32: invokeinterface #10,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      37: return

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_2
       2: iand
       3: ireturn

  public java.lang.Void poll();
    Code:
       0: aconst_null
       1: areturn

  public boolean isEmpty();
    Code:
       0: iconst_1
       1: ireturn

  public int size();
    Code:
       0: iconst_0
       1: ireturn

  public void clear();
    Code:
       0: return

  public java.lang.Object poll();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method poll:()Ljava/lang/Void;
       4: areturn

  static {};
    Code:
       0: ldc           #16                 // class reactor/core/publisher/FluxSubscribeOnValue$ScheduledEmpty
       2: ldc           #9                  // class reactor/core/Disposable
       4: ldc           #17                 // String future
       6: invokestatic  #18                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #7                  // Field FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: invokestatic  #19                 // Method reactor/core/Disposables.disposed:()Lreactor/core/Disposable;
      15: putstatic     #6                  // Field FINISHED:Lreactor/core/Disposable;
      18: return
}
