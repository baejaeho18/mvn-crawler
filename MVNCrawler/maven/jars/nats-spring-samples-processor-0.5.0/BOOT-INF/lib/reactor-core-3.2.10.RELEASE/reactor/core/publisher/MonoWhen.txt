Compiled from "MonoWhen.java"
final class reactor.core.publisher.MonoWhen extends reactor.core.publisher.Mono<java.lang.Void> implements reactor.core.publisher.SourceProducer<java.lang.Void> {
  final boolean delayError;

  final org.reactivestreams.Publisher<?>[] sources;

  final java.lang.Iterable<? extends org.reactivestreams.Publisher<?>> sourcesIterable;

  reactor.core.publisher.MonoWhen(boolean, org.reactivestreams.Publisher<?>...);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Mono."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field delayError:Z
       9: aload_0
      10: aload_2
      11: ldc           #3                  // String sources
      13: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      16: checkcast     #5                  // class "[Lorg/reactivestreams/Publisher;"
      19: putfield      #6                  // Field sources:[Lorg/reactivestreams/Publisher;
      22: aload_0
      23: aconst_null
      24: putfield      #7                  // Field sourcesIterable:Ljava/lang/Iterable;
      27: return

  reactor.core.publisher.MonoWhen(boolean, java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Mono."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field delayError:Z
       9: aload_0
      10: aconst_null
      11: putfield      #6                  // Field sources:[Lorg/reactivestreams/Publisher;
      14: aload_0
      15: aload_2
      16: ldc           #8                  // String sourcesIterable
      18: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      21: checkcast     #9                  // class java/lang/Iterable
      24: putfield      #7                  // Field sourcesIterable:Ljava/lang/Iterable;
      27: return

  reactor.core.publisher.Mono<java.lang.Void> whenAdditionalSource(org.reactivestreams.Publisher<?>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field sources:[Lorg/reactivestreams/Publisher;
       4: astore_2
       5: aload_2
       6: ifnull        48
       9: aload_2
      10: arraylength
      11: istore_3
      12: iload_3
      13: iconst_1
      14: iadd
      15: anewarray     #10                 // class org/reactivestreams/Publisher
      18: astore        4
      20: aload_2
      21: iconst_0
      22: aload         4
      24: iconst_0
      25: iload_3
      26: invokestatic  #11                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      29: aload         4
      31: iload_3
      32: aload_1
      33: aastore
      34: new           #12                 // class reactor/core/publisher/MonoWhen
      37: dup
      38: aload_0
      39: getfield      #2                  // Field delayError:Z
      42: aload         4
      44: invokespecial #13                 // Method "<init>":(Z[Lorg/reactivestreams/Publisher;)V
      47: areturn
      48: aconst_null
      49: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super java.lang.Void>);
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: getfield      #6                  // Field sources:[Lorg/reactivestreams/Publisher;
       6: ifnull        20
       9: aload_0
      10: getfield      #6                  // Field sources:[Lorg/reactivestreams/Publisher;
      13: astore_2
      14: aload_2
      15: arraylength
      16: istore_3
      17: goto          98
      20: bipush        8
      22: anewarray     #10                 // class org/reactivestreams/Publisher
      25: astore_2
      26: aload_0
      27: getfield      #7                  // Field sourcesIterable:Ljava/lang/Iterable;
      30: invokeinterface #14,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      35: astore        4
      37: aload         4
      39: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      44: ifeq          98
      47: aload         4
      49: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      54: checkcast     #10                 // class org/reactivestreams/Publisher
      57: astore        5
      59: iload_3
      60: aload_2
      61: arraylength
      62: if_icmpne     87
      65: iload_3
      66: iload_3
      67: iconst_2
      68: ishr
      69: iadd
      70: anewarray     #10                 // class org/reactivestreams/Publisher
      73: astore        6
      75: aload_2
      76: iconst_0
      77: aload         6
      79: iconst_0
      80: iload_3
      81: invokestatic  #11                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      84: aload         6
      86: astore_2
      87: aload_2
      88: iload_3
      89: iinc          3, 1
      92: aload         5
      94: aastore
      95: goto          37
      98: iload_3
      99: ifne          107
     102: aload_1
     103: invokestatic  #17                 // Method reactor/core/publisher/Operators.complete:(Lorg/reactivestreams/Subscriber;)V
     106: return
     107: new           #18                 // class reactor/core/publisher/MonoWhen$WhenCoordinator
     110: dup
     111: aload_1
     112: iload_3
     113: aload_0
     114: getfield      #2                  // Field delayError:Z
     117: invokespecial #19                 // Method reactor/core/publisher/MonoWhen$WhenCoordinator."<init>":(Lreactor/core/CoreSubscriber;IZ)V
     120: astore        4
     122: aload_1
     123: aload         4
     125: invokeinterface #20,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     130: aload         4
     132: aload_2
     133: invokevirtual #21                 // Method reactor/core/publisher/MonoWhen$WhenCoordinator.subscribe:([Lorg/reactivestreams/Publisher;)V
     136: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #22                 // Field reactor/core/Scannable$Attr.DELAY_ERROR:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #2                  // Field delayError:Z
      11: invokestatic  #23                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aconst_null
      16: areturn
}
