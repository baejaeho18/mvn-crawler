Compiled from "ParallelLiftFuseable.java"
final class reactor.core.publisher.ParallelLiftFuseable<I, O> extends reactor.core.publisher.ParallelFlux<O> implements reactor.core.Scannable, reactor.core.Fuseable {
  final java.util.function.BiFunction<org.reactivestreams.Publisher, ? super reactor.core.CoreSubscriber<? super O>, ? extends reactor.core.CoreSubscriber<? super I>> lifter;

  final reactor.core.publisher.ParallelFlux<I> source;

  reactor.core.publisher.ParallelLiftFuseable(reactor.core.publisher.ParallelFlux<I>, java.util.function.BiFunction<org.reactivestreams.Publisher, ? super reactor.core.CoreSubscriber<? super O>, ? extends reactor.core.CoreSubscriber<? super I>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/ParallelFlux."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String source
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class reactor/core/publisher/ParallelFlux
      14: putfield      #5                  // Field source:Lreactor/core/publisher/ParallelFlux;
      17: aload_0
      18: aload_2
      19: putfield      #6                  // Field lifter:Ljava/util/function/BiFunction;
      22: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #5                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #7                  // Method reactor/core/publisher/ParallelFlux.getPrefetch:()I
       7: ireturn

  public int parallelism();
    Code:
       0: aload_0
       1: getfield      #5                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #8                  // Method reactor/core/publisher/ParallelFlux.parallelism:()I
       7: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #9                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #5                  // Field source:Lreactor/core/publisher/ParallelFlux;
      11: areturn
      12: aload_1
      13: getstatic     #10                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #11                 // Method getPrefetch:()I
      23: invokestatic  #12                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aconst_null
      28: areturn

  protected void subscribe(reactor.core.CoreSubscriber<? super O>[]);
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method parallelism:()I
       4: anewarray     #14                 // class reactor/core/CoreSubscriber
       7: astore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: aload_2
      12: arraylength
      13: if_icmpge     92
      16: aload_1
      17: iload_3
      18: aaload
      19: astore        4
      21: aload_0
      22: getfield      #6                  // Field lifter:Ljava/util/function/BiFunction;
      25: aload_0
      26: getfield      #5                  // Field source:Lreactor/core/publisher/ParallelFlux;
      29: aload         4
      31: invokeinterface #15,  3           // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      36: ldc           #16                 // String Lifted subscriber MUST NOT be null
      38: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      41: checkcast     #14                 // class reactor/core/CoreSubscriber
      44: astore        5
      46: aload         5
      48: ldc           #16                 // String Lifted subscriber MUST NOT be null
      50: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      53: pop
      54: aload         4
      56: instanceof    #17                 // class reactor/core/Fuseable$QueueSubscription
      59: ifeq          81
      62: aload         5
      64: instanceof    #17                 // class reactor/core/Fuseable$QueueSubscription
      67: ifne          81
      70: new           #18                 // class reactor/core/publisher/FluxHide$SuppressFuseableSubscriber
      73: dup
      74: aload         5
      76: invokespecial #19                 // Method reactor/core/publisher/FluxHide$SuppressFuseableSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
      79: astore        5
      81: aload_2
      82: iload_3
      83: aload         5
      85: aastore
      86: iinc          3, 1
      89: goto          10
      92: aload_0
      93: getfield      #5                  // Field source:Lreactor/core/publisher/ParallelFlux;
      96: aload_2
      97: invokevirtual #20                 // Method reactor/core/publisher/ParallelFlux.subscribe:([Lreactor/core/CoreSubscriber;)V
     100: return
}
