Compiled from "FluxCombineLatest.java"
final class reactor.core.publisher.FluxCombineLatest$CombineLatestCoordinator<T, R> implements reactor.core.Fuseable$QueueSubscription<R>, reactor.core.publisher.InnerProducer<R> {
  final java.util.function.Function<java.lang.Object[], R> combiner;

  final reactor.core.publisher.FluxCombineLatest$CombineLatestInner<T>[] subscribers;

  final java.util.Queue<reactor.core.publisher.FluxCombineLatest$SourceAndArray> queue;

  final java.lang.Object[] latest;

  final reactor.core.CoreSubscriber<? super R> actual;

  final reactor.util.context.Context ctx;

  boolean outputFused;

  int nonEmptySources;

  int completedSources;

  volatile boolean cancelled;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxCombineLatest$CombineLatestCoordinator> REQUESTED;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxCombineLatest$CombineLatestCoordinator> WIP;

  volatile boolean done;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxCombineLatest$CombineLatestCoordinator, java.lang.Throwable> ERROR;

  reactor.core.publisher.FluxCombineLatest$CombineLatestCoordinator(reactor.core.CoreSubscriber<? super R>, java.util.function.Function<java.lang.Object[], R>, int, java.util.Queue<reactor.core.publisher.FluxCombineLatest$SourceAndArray>, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_1
      11: invokeinterface #4,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      16: putfield      #5                  // Field ctx:Lreactor/util/context/Context;
      19: aload_0
      20: aload_2
      21: putfield      #6                  // Field combiner:Ljava/util/function/Function;
      24: iload_3
      25: anewarray     #7                  // class reactor/core/publisher/FluxCombineLatest$CombineLatestInner
      28: astore        6
      30: iconst_0
      31: istore        7
      33: iload         7
      35: iload_3
      36: if_icmpge     62
      39: aload         6
      41: iload         7
      43: new           #7                  // class reactor/core/publisher/FluxCombineLatest$CombineLatestInner
      46: dup
      47: aload_0
      48: iload         7
      50: iload         5
      52: invokespecial #8                  // Method reactor/core/publisher/FluxCombineLatest$CombineLatestInner."<init>":(Lreactor/core/publisher/FluxCombineLatest$CombineLatestCoordinator;II)V
      55: aastore
      56: iinc          7, 1
      59: goto          33
      62: aload_0
      63: aload         6
      65: putfield      #9                  // Field subscribers:[Lreactor/core/publisher/FluxCombineLatest$CombineLatestInner;
      68: aload_0
      69: iload_3
      70: anewarray     #10                 // class java/lang/Object
      73: putfield      #11                 // Field latest:[Ljava/lang/Object;
      76: aload_0
      77: aload         4
      79: putfield      #12                 // Field queue:Ljava/util/Queue;
      82: return

  public final reactor.core.CoreSubscriber<? super R> actual();
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #13                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          20
       7: getstatic     #14                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #15                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #16                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #17                 // Field cancelled:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #17                 // Field cancelled:Z
      13: aload_0
      14: invokevirtual #18                 // Method cancelAll:()V
      17: getstatic     #19                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      20: aload_0
      21: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      24: ifne          31
      27: aload_0
      28: invokevirtual #21                 // Method clear:()V
      31: return

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #9                  // Field subscribers:[Lreactor/core/publisher/FluxCombineLatest$CombineLatestInner;
       4: invokestatic  #22                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #23                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #24                 // Field done:Z
      11: invokestatic  #25                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aload_1
      16: getstatic     #26                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      19: if_acmpne     30
      22: aload_0
      23: getfield      #17                 // Field cancelled:Z
      26: invokestatic  #25                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      29: areturn
      30: aload_1
      31: getstatic     #27                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      34: if_acmpne     42
      37: aload_0
      38: getfield      #28                 // Field error:Ljava/lang/Throwable;
      41: areturn
      42: aload_1
      43: getstatic     #29                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      46: if_acmpne     57
      49: aload_0
      50: getfield      #30                 // Field requested:J
      53: invokestatic  #31                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      56: areturn
      57: aload_0
      58: aload_1
      59: invokespecial #32                 // InterfaceMethod reactor/core/publisher/InnerProducer.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      62: areturn

  void subscribe(org.reactivestreams.Publisher<? extends T>[], int);
    Code:
       0: aload_0
       1: getfield      #9                  // Field subscribers:[Lreactor/core/publisher/FluxCombineLatest$CombineLatestInner;
       4: astore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_2
      11: if_icmpge     48
      14: aload_0
      15: getfield      #24                 // Field done:Z
      18: ifne          28
      21: aload_0
      22: getfield      #17                 // Field cancelled:Z
      25: ifeq          29
      28: return
      29: aload_1
      30: iload         4
      32: aaload
      33: aload_3
      34: iload         4
      36: aaload
      37: invokeinterface #33,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      42: iinc          4, 1
      45: goto          8
      48: return

  void innerValue(int, T);
    Code:
       0: aload_0
       1: dup
       2: astore        4
       4: monitorenter
       5: aload_0
       6: getfield      #11                 // Field latest:[Ljava/lang/Object;
       9: astore        5
      11: aload_0
      12: getfield      #34                 // Field nonEmptySources:I
      15: istore        6
      17: aload         5
      19: iload_1
      20: aaload
      21: ifnonnull     33
      24: iinc          6, 1
      27: aload_0
      28: iload         6
      30: putfield      #34                 // Field nonEmptySources:I
      33: aload         5
      35: iload_1
      36: aload_2
      37: aastore
      38: aload         5
      40: arraylength
      41: iload         6
      43: if_icmpne     109
      46: new           #35                 // class reactor/core/publisher/FluxCombineLatest$SourceAndArray
      49: dup
      50: aload_0
      51: getfield      #9                  // Field subscribers:[Lreactor/core/publisher/FluxCombineLatest$CombineLatestInner;
      54: iload_1
      55: aaload
      56: aload         5
      58: invokevirtual #36                 // Method "[Ljava/lang/Object;".clone:()Ljava/lang/Object;
      61: checkcast     #37                 // class "[Ljava/lang/Object;"
      64: invokespecial #38                 // Method reactor/core/publisher/FluxCombineLatest$SourceAndArray."<init>":(Lreactor/core/publisher/FluxCombineLatest$CombineLatestInner;[Ljava/lang/Object;)V
      67: astore        7
      69: aload_0
      70: getfield      #12                 // Field queue:Ljava/util/Queue;
      73: aload         7
      75: invokeinterface #39,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      80: ifne          104
      83: aload_0
      84: aload_0
      85: ldc           #41                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      87: invokestatic  #42                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      90: aload_0
      91: getfield      #5                  // Field ctx:Lreactor/util/context/Context;
      94: invokestatic  #43                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      97: invokevirtual #44                 // Method innerError:(Ljava/lang/Throwable;)V
     100: aload         4
     102: monitorexit
     103: return
     104: iconst_0
     105: istore_3
     106: goto          111
     109: iconst_1
     110: istore_3
     111: aload         4
     113: monitorexit
     114: goto          125
     117: astore        8
     119: aload         4
     121: monitorexit
     122: aload         8
     124: athrow
     125: iload_3
     126: ifeq          141
     129: aload_0
     130: getfield      #9                  // Field subscribers:[Lreactor/core/publisher/FluxCombineLatest$CombineLatestInner;
     133: iload_1
     134: aaload
     135: invokevirtual #45                 // Method reactor/core/publisher/FluxCombineLatest$CombineLatestInner.requestOne:()V
     138: goto          145
     141: aload_0
     142: invokevirtual #16                 // Method drain:()V
     145: return
    Exception table:
       from    to  target type
           5   103   117   any
         104   114   117   any
         117   122   117   any

  void innerComplete(int);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: getfield      #11                 // Field latest:[Ljava/lang/Object;
       8: astore_3
       9: aload_3
      10: iload_1
      11: aaload
      12: ifnull        50
      15: aload_0
      16: getfield      #46                 // Field completedSources:I
      19: iconst_1
      20: iadd
      21: istore        4
      23: iload         4
      25: aload_3
      26: arraylength
      27: if_icmpne     38
      30: aload_0
      31: iconst_1
      32: putfield      #24                 // Field done:Z
      35: goto          47
      38: aload_0
      39: iload         4
      41: putfield      #46                 // Field completedSources:I
      44: aload_2
      45: monitorexit
      46: return
      47: goto          55
      50: aload_0
      51: iconst_1
      52: putfield      #24                 // Field done:Z
      55: aload_2
      56: monitorexit
      57: goto          67
      60: astore        5
      62: aload_2
      63: monitorexit
      64: aload         5
      66: athrow
      67: aload_0
      68: invokevirtual #16                 // Method drain:()V
      71: return
    Exception table:
       from    to  target type
           4    46    60   any
          47    57    60   any
          60    64    60   any

  void innerError(java.lang.Throwable);
    Code:
       0: getstatic     #47                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #48                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          23
      11: aload_0
      12: iconst_1
      13: putfield      #24                 // Field done:Z
      16: aload_0
      17: invokevirtual #16                 // Method drain:()V
      20: goto          39
      23: aload_0
      24: aload_0
      25: getfield      #12                 // Field queue:Ljava/util/Queue;
      28: invokespecial #49                 // Method discardQueue:(Ljava/util/Queue;)V
      31: aload_1
      32: aload_0
      33: getfield      #5                  // Field ctx:Lreactor/util/context/Context;
      36: invokestatic  #50                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      39: return

  void drainOutput();
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       4: astore_1
       5: aload_0
       6: getfield      #12                 // Field queue:Ljava/util/Queue;
       9: astore_2
      10: iconst_1
      11: istore_3
      12: aload_0
      13: getfield      #17                 // Field cancelled:Z
      16: ifeq          25
      19: aload_0
      20: aload_2
      21: invokespecial #49                 // Method discardQueue:(Ljava/util/Queue;)V
      24: return
      25: aload_0
      26: getfield      #28                 // Field error:Ljava/lang/Throwable;
      29: astore        4
      31: aload         4
      33: ifnull        50
      36: aload_0
      37: aload_2
      38: invokespecial #49                 // Method discardQueue:(Ljava/util/Queue;)V
      41: aload_1
      42: aload         4
      44: invokeinterface #51,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      49: return
      50: aload_0
      51: getfield      #24                 // Field done:Z
      54: istore        5
      56: aload_2
      57: invokeinterface #52,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      62: istore        6
      64: iload         6
      66: ifne          76
      69: aload_1
      70: aconst_null
      71: invokeinterface #53,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      76: iload         5
      78: ifeq          93
      81: iload         6
      83: ifeq          93
      86: aload_1
      87: invokeinterface #54,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      92: return
      93: getstatic     #19                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      96: aload_0
      97: iload_3
      98: ineg
      99: invokevirtual #55                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     102: istore_3
     103: iload_3
     104: ifne          110
     107: goto          113
     110: goto          12
     113: return

  void drainAsync();
    Code:
       0: aload_0
       1: getfield      #12                 // Field queue:Ljava/util/Queue;
       4: astore_1
       5: iconst_1
       6: istore_2
       7: aload_0
       8: getfield      #30                 // Field requested:J
      11: lstore_3
      12: lconst_0
      13: lstore        5
      15: lload         5
      17: lload_3
      18: lcmp
      19: ifeq          189
      22: aload_0
      23: getfield      #24                 // Field done:Z
      26: istore        7
      28: aload_1
      29: invokeinterface #56,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      34: checkcast     #35                 // class reactor/core/publisher/FluxCombineLatest$SourceAndArray
      37: astore        8
      39: aload         8
      41: ifnonnull     48
      44: iconst_1
      45: goto          49
      48: iconst_0
      49: istore        9
      51: aload_0
      52: iload         7
      54: iload         9
      56: aload_1
      57: invokevirtual #57                 // Method checkTerminated:(ZZLjava/util/Queue;)Z
      60: ifeq          64
      63: return
      64: iload         9
      66: ifeq          72
      69: goto          189
      72: aload_0
      73: getfield      #6                  // Field combiner:Ljava/util/function/Function;
      76: aload         8
      78: getfield      #58                 // Field reactor/core/publisher/FluxCombineLatest$SourceAndArray.array:[Ljava/lang/Object;
      81: invokeinterface #59,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      86: ldc           #60                 // String Combiner returned null
      88: invokestatic  #61                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      91: astore        10
      93: goto          161
      96: astore        11
      98: aload         8
     100: getfield      #58                 // Field reactor/core/publisher/FluxCombineLatest$SourceAndArray.array:[Ljava/lang/Object;
     103: invokestatic  #22                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
     106: aload_0
     107: getfield      #5                  // Field ctx:Lreactor/util/context/Context;
     110: invokestatic  #63                 // Method reactor/core/publisher/Operators.onDiscardMultiple:(Ljava/util/stream/Stream;Lreactor/util/context/Context;)V
     113: aload_0
     114: aload         11
     116: aload         8
     118: getfield      #58                 // Field reactor/core/publisher/FluxCombineLatest$SourceAndArray.array:[Ljava/lang/Object;
     121: aload_0
     122: getfield      #5                  // Field ctx:Lreactor/util/context/Context;
     125: invokestatic  #64                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     128: astore        11
     130: getstatic     #47                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     133: aload_0
     134: aload         11
     136: invokestatic  #48                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
     139: pop
     140: getstatic     #47                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     143: aload_0
     144: invokestatic  #65                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
     147: astore        11
     149: aload_0
     150: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
     153: aload         11
     155: invokeinterface #51,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     160: return
     161: aload_0
     162: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
     165: aload         10
     167: invokeinterface #53,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     172: aload         8
     174: getfield      #66                 // Field reactor/core/publisher/FluxCombineLatest$SourceAndArray.source:Lreactor/core/publisher/FluxCombineLatest$CombineLatestInner;
     177: invokevirtual #45                 // Method reactor/core/publisher/FluxCombineLatest$CombineLatestInner.requestOne:()V
     180: lload         5
     182: lconst_1
     183: ladd
     184: lstore        5
     186: goto          15
     189: lload         5
     191: lload_3
     192: lcmp
     193: ifne          215
     196: aload_0
     197: aload_0
     198: getfield      #24                 // Field done:Z
     201: aload_1
     202: invokeinterface #52,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     207: aload_1
     208: invokevirtual #57                 // Method checkTerminated:(ZZLjava/util/Queue;)Z
     211: ifeq          215
     214: return
     215: lload         5
     217: lconst_0
     218: lcmp
     219: ifeq          241
     222: lload_3
     223: ldc2_w        #68                 // long 9223372036854775807l
     226: lcmp
     227: ifeq          241
     230: getstatic     #14                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     233: aload_0
     234: lload         5
     236: lneg
     237: invokevirtual #70                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
     240: pop2
     241: getstatic     #19                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     244: aload_0
     245: iload_2
     246: ineg
     247: invokevirtual #55                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     250: istore_2
     251: iload_2
     252: ifne          258
     255: goto          261
     258: goto          7
     261: return
    Exception table:
       from    to  target type
          72    93    96   Class java/lang/Throwable

  void drain();
    Code:
       0: getstatic     #19                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #71                 // Field outputFused:Z
      15: ifeq          25
      18: aload_0
      19: invokevirtual #72                 // Method drainOutput:()V
      22: goto          29
      25: aload_0
      26: invokevirtual #73                 // Method drainAsync:()V
      29: return

  boolean checkTerminated(boolean, boolean, java.util.Queue<reactor.core.publisher.FluxCombineLatest$SourceAndArray>);
    Code:
       0: aload_0
       1: getfield      #17                 // Field cancelled:Z
       4: ifeq          18
       7: aload_0
       8: invokevirtual #18                 // Method cancelAll:()V
      11: aload_0
      12: aload_3
      13: invokespecial #49                 // Method discardQueue:(Ljava/util/Queue;)V
      16: iconst_1
      17: ireturn
      18: iload_1
      19: ifeq          85
      22: getstatic     #47                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      25: aload_0
      26: invokestatic  #65                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      29: astore        4
      31: aload         4
      33: ifnull        66
      36: aload         4
      38: getstatic     #74                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      41: if_acmpeq     66
      44: aload_0
      45: invokevirtual #18                 // Method cancelAll:()V
      48: aload_0
      49: aload_3
      50: invokespecial #49                 // Method discardQueue:(Ljava/util/Queue;)V
      53: aload_0
      54: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      57: aload         4
      59: invokeinterface #51,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      64: iconst_1
      65: ireturn
      66: iload_2
      67: ifeq          85
      70: aload_0
      71: invokevirtual #18                 // Method cancelAll:()V
      74: aload_0
      75: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      78: invokeinterface #54,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      83: iconst_1
      84: ireturn
      85: iconst_0
      86: ireturn

  void cancelAll();
    Code:
       0: aload_0
       1: getfield      #9                  // Field subscribers:[Lreactor/core/publisher/FluxCombineLatest$CombineLatestInner;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     31
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: invokevirtual #75                 // Method reactor/core/publisher/FluxCombineLatest$CombineLatestInner.cancel:()V
      25: iinc          3, 1
      28: goto          10
      31: return

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_4
       2: iand
       3: ifeq          8
       6: iconst_0
       7: ireturn
       8: iload_1
       9: iconst_2
      10: iand
      11: istore_2
      12: aload_0
      13: iload_2
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: putfield      #71                 // Field outputFused:Z
      25: iload_2
      26: ireturn

  public R poll();
    Code:
       0: aload_0
       1: getfield      #12                 // Field queue:Ljava/util/Queue;
       4: invokeinterface #56,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
       9: checkcast     #35                 // class reactor/core/publisher/FluxCombineLatest$SourceAndArray
      12: astore_1
      13: aload_1
      14: ifnonnull     19
      17: aconst_null
      18: areturn
      19: aload_0
      20: getfield      #6                  // Field combiner:Ljava/util/function/Function;
      23: aload_1
      24: getfield      #58                 // Field reactor/core/publisher/FluxCombineLatest$SourceAndArray.array:[Ljava/lang/Object;
      27: invokeinterface #59,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      32: astore_2
      33: aload_1
      34: getfield      #66                 // Field reactor/core/publisher/FluxCombineLatest$SourceAndArray.source:Lreactor/core/publisher/FluxCombineLatest$CombineLatestInner;
      37: invokevirtual #45                 // Method reactor/core/publisher/FluxCombineLatest$CombineLatestInner.requestOne:()V
      40: aload_2
      41: areturn

  private void discardQueue(java.util.Queue<reactor.core.publisher.FluxCombineLatest$SourceAndArray>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #5                  // Field ctx:Lreactor/util/context/Context;
       5: invokedynamic #76,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      10: invokestatic  #77                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
      13: return

  public void clear();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field queue:Ljava/util/Queue;
       5: invokespecial #49                 // Method discardQueue:(Ljava/util/Queue;)V
       8: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #12                 // Field queue:Ljava/util/Queue;
       4: invokeinterface #52,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
       9: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #12                 // Field queue:Ljava/util/Queue;
       4: invokeinterface #78,  1           // InterfaceMethod java/util/Queue.size:()I
       9: ireturn

  static {};
    Code:
       0: ldc           #79                 // class reactor/core/publisher/FluxCombineLatest$CombineLatestCoordinator
       2: ldc           #80                 // String requested
       4: invokestatic  #81                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       7: putstatic     #14                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: ldc           #79                 // class reactor/core/publisher/FluxCombineLatest$CombineLatestCoordinator
      12: ldc           #82                 // String wip
      14: invokestatic  #83                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      17: putstatic     #19                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      20: ldc           #79                 // class reactor/core/publisher/FluxCombineLatest$CombineLatestCoordinator
      22: ldc           #62                 // class java/lang/Throwable
      24: ldc           #84                 // String error
      26: invokestatic  #85                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      29: putstatic     #47                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      32: return
}
