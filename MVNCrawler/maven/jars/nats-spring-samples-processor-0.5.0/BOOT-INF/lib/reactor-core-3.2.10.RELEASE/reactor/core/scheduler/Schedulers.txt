Compiled from "Schedulers.java"
public abstract class reactor.core.scheduler.Schedulers {
  public static final int DEFAULT_POOL_SIZE;

  static volatile java.util.function.BiConsumer<java.lang.Thread, ? super java.lang.Throwable> onHandleErrorHook;

  static final java.lang.String ELASTIC;

  static final java.lang.String PARALLEL;

  static final java.lang.String SINGLE;

  static final java.lang.String IMMEDIATE;

  static final java.lang.String FROM_EXECUTOR;

  static final java.lang.String FROM_EXECUTOR_SERVICE;

  static java.util.concurrent.atomic.AtomicReference<reactor.core.scheduler.Schedulers$CachedScheduler> CACHED_ELASTIC;

  static java.util.concurrent.atomic.AtomicReference<reactor.core.scheduler.Schedulers$CachedScheduler> CACHED_PARALLEL;

  static java.util.concurrent.atomic.AtomicReference<reactor.core.scheduler.Schedulers$CachedScheduler> CACHED_SINGLE;

  static final java.util.function.Supplier<reactor.core.scheduler.Scheduler> ELASTIC_SUPPLIER;

  static final java.util.function.Supplier<reactor.core.scheduler.Scheduler> PARALLEL_SUPPLIER;

  static final java.util.function.Supplier<reactor.core.scheduler.Scheduler> SINGLE_SUPPLIER;

  static final reactor.core.scheduler.Schedulers$Factory DEFAULT;

  static final java.util.Map<java.lang.String, java.util.function.BiFunction<reactor.core.scheduler.Scheduler, java.util.concurrent.ScheduledExecutorService, java.util.concurrent.ScheduledExecutorService>> DECORATORS;

  static volatile reactor.core.scheduler.Schedulers$Factory factory;

  static final reactor.util.Logger log;

  public reactor.core.scheduler.Schedulers();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static reactor.core.scheduler.Scheduler fromExecutor(java.util.concurrent.Executor);
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #2                  // Method fromExecutor:(Ljava/util/concurrent/Executor;Z)Lreactor/core/scheduler/Scheduler;
       5: areturn

  public static reactor.core.scheduler.Scheduler fromExecutor(java.util.concurrent.Executor, boolean);
    Code:
       0: iload_1
       1: ifne          19
       4: aload_0
       5: instanceof    #3                  // class java/util/concurrent/ExecutorService
       8: ifeq          19
      11: aload_0
      12: checkcast     #3                  // class java/util/concurrent/ExecutorService
      15: invokestatic  #4                  // Method fromExecutorService:(Ljava/util/concurrent/ExecutorService;)Lreactor/core/scheduler/Scheduler;
      18: areturn
      19: new           #5                  // class reactor/core/scheduler/ExecutorScheduler
      22: dup
      23: aload_0
      24: iload_1
      25: invokespecial #6                  // Method reactor/core/scheduler/ExecutorScheduler."<init>":(Ljava/util/concurrent/Executor;Z)V
      28: areturn

  public static reactor.core.scheduler.Scheduler fromExecutorService(java.util.concurrent.ExecutorService);
    Code:
       0: new           #7                  // class reactor/core/scheduler/DelegateServiceScheduler
       3: dup
       4: aload_0
       5: invokespecial #8                  // Method reactor/core/scheduler/DelegateServiceScheduler."<init>":(Ljava/util/concurrent/ExecutorService;)V
       8: areturn

  public static reactor.core.scheduler.Scheduler elastic();
    Code:
       0: getstatic     #9                  // Field CACHED_ELASTIC:Ljava/util/concurrent/atomic/AtomicReference;
       3: ldc           #11                 // String elastic
       5: getstatic     #12                 // Field ELASTIC_SUPPLIER:Ljava/util/function/Supplier;
       8: invokestatic  #13                 // Method cache:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/String;Ljava/util/function/Supplier;)Lreactor/core/scheduler/Schedulers$CachedScheduler;
      11: areturn

  public static reactor.core.scheduler.Scheduler parallel();
    Code:
       0: getstatic     #14                 // Field CACHED_PARALLEL:Ljava/util/concurrent/atomic/AtomicReference;
       3: ldc           #15                 // String parallel
       5: getstatic     #16                 // Field PARALLEL_SUPPLIER:Ljava/util/function/Supplier;
       8: invokestatic  #13                 // Method cache:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/String;Ljava/util/function/Supplier;)Lreactor/core/scheduler/Schedulers$CachedScheduler;
      11: areturn

  public static reactor.core.scheduler.Scheduler immediate();
    Code:
       0: invokestatic  #17                 // Method reactor/core/scheduler/ImmediateScheduler.instance:()Lreactor/core/scheduler/Scheduler;
       3: areturn

  public static reactor.core.scheduler.Scheduler newElastic(java.lang.String);
    Code:
       0: aload_0
       1: bipush        60
       3: invokestatic  #19                 // Method newElastic:(Ljava/lang/String;I)Lreactor/core/scheduler/Scheduler;
       6: areturn

  public static reactor.core.scheduler.Scheduler newElastic(java.lang.String, int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokestatic  #20                 // Method newElastic:(Ljava/lang/String;IZ)Lreactor/core/scheduler/Scheduler;
       6: areturn

  public static reactor.core.scheduler.Scheduler newElastic(java.lang.String, int, boolean);
    Code:
       0: iload_1
       1: new           #21                 // class reactor/core/scheduler/ReactorThreadFactory
       4: dup
       5: aload_0
       6: getstatic     #22                 // Field reactor/core/scheduler/ElasticScheduler.COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
       9: iload_2
      10: iconst_0
      11: invokedynamic #23,  0             // InvokeDynamic #0:accept:()Ljava/util/function/BiConsumer;
      16: invokespecial #24                 // Method reactor/core/scheduler/ReactorThreadFactory."<init>":(Ljava/lang/String;Ljava/util/concurrent/atomic/AtomicLong;ZZLjava/util/function/BiConsumer;)V
      19: invokestatic  #25                 // Method newElastic:(ILjava/util/concurrent/ThreadFactory;)Lreactor/core/scheduler/Scheduler;
      22: areturn

  public static reactor.core.scheduler.Scheduler newElastic(int, java.util.concurrent.ThreadFactory);
    Code:
       0: getstatic     #26                 // Field factory:Lreactor/core/scheduler/Schedulers$Factory;
       3: iload_0
       4: aload_1
       5: invokeinterface #27,  3           // InterfaceMethod reactor/core/scheduler/Schedulers$Factory.newElastic:(ILjava/util/concurrent/ThreadFactory;)Lreactor/core/scheduler/Scheduler;
      10: areturn

  public static reactor.core.scheduler.Scheduler newParallel(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #28                 // Field DEFAULT_POOL_SIZE:I
       4: invokestatic  #29                 // Method newParallel:(Ljava/lang/String;I)Lreactor/core/scheduler/Scheduler;
       7: areturn

  public static reactor.core.scheduler.Scheduler newParallel(java.lang.String, int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokestatic  #30                 // Method newParallel:(Ljava/lang/String;IZ)Lreactor/core/scheduler/Scheduler;
       6: areturn

  public static reactor.core.scheduler.Scheduler newParallel(java.lang.String, int, boolean);
    Code:
       0: iload_1
       1: new           #21                 // class reactor/core/scheduler/ReactorThreadFactory
       4: dup
       5: aload_0
       6: getstatic     #31                 // Field reactor/core/scheduler/ParallelScheduler.COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
       9: iload_2
      10: iconst_1
      11: invokedynamic #23,  0             // InvokeDynamic #0:accept:()Ljava/util/function/BiConsumer;
      16: invokespecial #24                 // Method reactor/core/scheduler/ReactorThreadFactory."<init>":(Ljava/lang/String;Ljava/util/concurrent/atomic/AtomicLong;ZZLjava/util/function/BiConsumer;)V
      19: invokestatic  #32                 // Method newParallel:(ILjava/util/concurrent/ThreadFactory;)Lreactor/core/scheduler/Scheduler;
      22: areturn

  public static reactor.core.scheduler.Scheduler newParallel(int, java.util.concurrent.ThreadFactory);
    Code:
       0: getstatic     #26                 // Field factory:Lreactor/core/scheduler/Schedulers$Factory;
       3: iload_0
       4: aload_1
       5: invokeinterface #33,  3           // InterfaceMethod reactor/core/scheduler/Schedulers$Factory.newParallel:(ILjava/util/concurrent/ThreadFactory;)Lreactor/core/scheduler/Scheduler;
      10: areturn

  public static reactor.core.scheduler.Scheduler newSingle(java.lang.String);
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #34                 // Method newSingle:(Ljava/lang/String;Z)Lreactor/core/scheduler/Scheduler;
       5: areturn

  public static reactor.core.scheduler.Scheduler newSingle(java.lang.String, boolean);
    Code:
       0: new           #21                 // class reactor/core/scheduler/ReactorThreadFactory
       3: dup
       4: aload_0
       5: getstatic     #35                 // Field reactor/core/scheduler/SingleScheduler.COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
       8: iload_1
       9: iconst_1
      10: invokedynamic #23,  0             // InvokeDynamic #0:accept:()Ljava/util/function/BiConsumer;
      15: invokespecial #24                 // Method reactor/core/scheduler/ReactorThreadFactory."<init>":(Ljava/lang/String;Ljava/util/concurrent/atomic/AtomicLong;ZZLjava/util/function/BiConsumer;)V
      18: invokestatic  #36                 // Method newSingle:(Ljava/util/concurrent/ThreadFactory;)Lreactor/core/scheduler/Scheduler;
      21: areturn

  public static reactor.core.scheduler.Scheduler newSingle(java.util.concurrent.ThreadFactory);
    Code:
       0: getstatic     #26                 // Field factory:Lreactor/core/scheduler/Schedulers$Factory;
       3: aload_0
       4: invokeinterface #37,  2           // InterfaceMethod reactor/core/scheduler/Schedulers$Factory.newSingle:(Ljava/util/concurrent/ThreadFactory;)Lreactor/core/scheduler/Scheduler;
       9: areturn

  public static void onHandleError(java.util.function.BiConsumer<java.lang.Thread, ? super java.lang.Throwable>);
    Code:
       0: getstatic     #38                 // Field log:Lreactor/util/Logger;
       3: invokeinterface #39,  1           // InterfaceMethod reactor/util/Logger.isDebugEnabled:()Z
       8: ifeq          21
      11: getstatic     #38                 // Field log:Lreactor/util/Logger;
      14: ldc           #40                 // String Hooking new default: onHandleError
      16: invokeinterface #41,  2           // InterfaceMethod reactor/util/Logger.debug:(Ljava/lang/String;)V
      21: aload_0
      22: ldc           #42                 // String onHandleError
      24: invokestatic  #43                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      27: checkcast     #44                 // class java/util/function/BiConsumer
      30: putstatic     #45                 // Field onHandleErrorHook:Ljava/util/function/BiConsumer;
      33: return

  public static boolean isInNonBlockingThread();
    Code:
       0: invokestatic  #46                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: instanceof    #47                 // class reactor/core/scheduler/NonBlocking
       6: ireturn

  public static boolean isNonBlockingThread(java.lang.Thread);
    Code:
       0: aload_0
       1: instanceof    #47                 // class reactor/core/scheduler/NonBlocking
       4: ireturn

  public static void enableMetrics();
    Code:
       0: invokestatic  #48                 // Method reactor/util/Metrics.isInstrumentationAvailable:()Z
       3: ifeq          19
       6: ldc           #50                 // String reactor.metrics.decorator
       8: new           #49                 // class reactor/core/scheduler/SchedulerMetricDecorator
      11: dup
      12: invokespecial #51                 // Method reactor/core/scheduler/SchedulerMetricDecorator."<init>":()V
      15: invokestatic  #52                 // Method addExecutorServiceDecorator:(Ljava/lang/String;Ljava/util/function/BiFunction;)Z
      18: pop
      19: return

  public static void disableMetrics();
    Code:
       0: ldc           #50                 // String reactor.metrics.decorator
       2: invokestatic  #53                 // Method removeExecutorServiceDecorator:(Ljava/lang/String;)Ljava/util/function/BiFunction;
       5: pop
       6: return

  public static void resetFactory();
    Code:
       0: getstatic     #54                 // Field DEFAULT:Lreactor/core/scheduler/Schedulers$Factory;
       3: invokestatic  #55                 // Method setFactory:(Lreactor/core/scheduler/Schedulers$Factory;)V
       6: return

  public static void resetOnHandleError();
    Code:
       0: getstatic     #38                 // Field log:Lreactor/util/Logger;
       3: invokeinterface #39,  1           // InterfaceMethod reactor/util/Logger.isDebugEnabled:()Z
       8: ifeq          21
      11: getstatic     #38                 // Field log:Lreactor/util/Logger;
      14: ldc           #56                 // String Reset to factory defaults: onHandleError
      16: invokeinterface #41,  2           // InterfaceMethod reactor/util/Logger.debug:(Ljava/lang/String;)V
      21: aconst_null
      22: putstatic     #45                 // Field onHandleErrorHook:Ljava/util/function/BiConsumer;
      25: return

  public static void setFactory(reactor.core.scheduler.Schedulers$Factory);
    Code:
       0: aload_0
       1: ldc           #57                 // String factoryInstance
       3: invokestatic  #43                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: invokestatic  #58                 // Method shutdownNow:()V
      10: aload_0
      11: putstatic     #26                 // Field factory:Lreactor/core/scheduler/Schedulers$Factory;
      14: return

  public static boolean addExecutorServiceDecorator(java.lang.String, java.util.function.BiFunction<reactor.core.scheduler.Scheduler, java.util.concurrent.ScheduledExecutorService, java.util.concurrent.ScheduledExecutorService>);
    Code:
       0: getstatic     #59                 // Field DECORATORS:Ljava/util/Map;
       3: dup
       4: astore_2
       5: monitorenter
       6: getstatic     #59                 // Field DECORATORS:Ljava/util/Map;
       9: aload_0
      10: aload_1
      11: invokeinterface #60,  3           // InterfaceMethod java/util/Map.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      16: ifnonnull     23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: aload_2
      25: monitorexit
      26: ireturn
      27: astore_3
      28: aload_2
      29: monitorexit
      30: aload_3
      31: athrow
    Exception table:
       from    to  target type
           6    26    27   any
          27    30    27   any

  public static void setExecutorServiceDecorator(java.lang.String, java.util.function.BiFunction<reactor.core.scheduler.Scheduler, java.util.concurrent.ScheduledExecutorService, java.util.concurrent.ScheduledExecutorService>);
    Code:
       0: getstatic     #59                 // Field DECORATORS:Ljava/util/Map;
       3: dup
       4: astore_2
       5: monitorenter
       6: getstatic     #59                 // Field DECORATORS:Ljava/util/Map;
       9: aload_0
      10: aload_1
      11: invokeinterface #61,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: aload_2
      18: monitorexit
      19: goto          27
      22: astore_3
      23: aload_2
      24: monitorexit
      25: aload_3
      26: athrow
      27: return
    Exception table:
       from    to  target type
           6    19    22   any
          22    25    22   any

  public static java.util.function.BiFunction<reactor.core.scheduler.Scheduler, java.util.concurrent.ScheduledExecutorService, java.util.concurrent.ScheduledExecutorService> removeExecutorServiceDecorator(java.lang.String);
    Code:
       0: getstatic     #59                 // Field DECORATORS:Ljava/util/Map;
       3: dup
       4: astore_2
       5: monitorenter
       6: getstatic     #59                 // Field DECORATORS:Ljava/util/Map;
       9: aload_0
      10: invokeinterface #62,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #63                 // class java/util/function/BiFunction
      18: astore_1
      19: aload_2
      20: monitorexit
      21: goto          29
      24: astore_3
      25: aload_2
      26: monitorexit
      27: aload_3
      28: athrow
      29: aload_1
      30: instanceof    #64                 // class reactor/core/Disposable
      33: ifeq          45
      36: aload_1
      37: checkcast     #64                 // class reactor/core/Disposable
      40: invokeinterface #65,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      45: aload_1
      46: areturn
    Exception table:
       from    to  target type
           6    21    24   any
          24    27    24   any

  public static java.util.concurrent.ScheduledExecutorService decorateExecutorService(reactor.core.scheduler.Scheduler, java.util.concurrent.ScheduledExecutorService);
    Code:
       0: getstatic     #59                 // Field DECORATORS:Ljava/util/Map;
       3: dup
       4: astore_2
       5: monitorenter
       6: getstatic     #59                 // Field DECORATORS:Ljava/util/Map;
       9: invokeinterface #66,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      14: invokeinterface #67,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      19: astore_3
      20: aload_3
      21: invokeinterface #68,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      26: ifeq          56
      29: aload_3
      30: invokeinterface #69,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      35: checkcast     #63                 // class java/util/function/BiFunction
      38: astore        4
      40: aload         4
      42: aload_0
      43: aload_1
      44: invokeinterface #70,  3           // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      49: checkcast     #71                 // class java/util/concurrent/ScheduledExecutorService
      52: astore_1
      53: goto          20
      56: aload_2
      57: monitorexit
      58: goto          68
      61: astore        5
      63: aload_2
      64: monitorexit
      65: aload         5
      67: athrow
      68: aload_1
      69: astore_2
      70: aload_0
      71: instanceof    #72                 // class reactor/core/scheduler/SingleScheduler
      74: ifeq          83
      77: ldc           #73                 // String single
      79: astore_3
      80: goto          130
      83: aload_0
      84: instanceof    #74                 // class reactor/core/scheduler/ParallelScheduler
      87: ifeq          96
      90: ldc           #15                 // String parallel
      92: astore_3
      93: goto          130
      96: aload_0
      97: instanceof    #18                 // class reactor/core/scheduler/ElasticScheduler
     100: ifeq          109
     103: ldc           #11                 // String elastic
     105: astore_3
     106: goto          130
     109: aload_0
     110: instanceof    #7                  // class reactor/core/scheduler/DelegateServiceScheduler
     113: ifeq          122
     116: ldc           #75                 // String ExecutorService
     118: astore_3
     119: goto          130
     122: aload_0
     123: invokevirtual #76                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     126: invokevirtual #77                 // Method java/lang/Class.getName:()Ljava/lang/String;
     129: astore_3
     130: getstatic     #26                 // Field factory:Lreactor/core/scheduler/Schedulers$Factory;
     133: aload_3
     134: aload_2
     135: invokedynamic #78,  0             // InvokeDynamic #1:get:(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/function/Supplier;
     140: invokeinterface #79,  3           // InterfaceMethod reactor/core/scheduler/Schedulers$Factory.decorateExecutorService:(Ljava/lang/String;Ljava/util/function/Supplier;)Ljava/util/concurrent/ScheduledExecutorService;
     145: areturn
    Exception table:
       from    to  target type
           6    58    61   any
          61    65    61   any

  public static void shutdownNow();
    Code:
       0: getstatic     #9                  // Field CACHED_ELASTIC:Ljava/util/concurrent/atomic/AtomicReference;
       3: aconst_null
       4: invokevirtual #80                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #81                 // class reactor/core/scheduler/Schedulers$CachedScheduler
      10: astore_0
      11: getstatic     #14                 // Field CACHED_PARALLEL:Ljava/util/concurrent/atomic/AtomicReference;
      14: aconst_null
      15: invokevirtual #80                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      18: checkcast     #81                 // class reactor/core/scheduler/Schedulers$CachedScheduler
      21: astore_1
      22: getstatic     #82                 // Field CACHED_SINGLE:Ljava/util/concurrent/atomic/AtomicReference;
      25: aconst_null
      26: invokevirtual #80                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      29: checkcast     #81                 // class reactor/core/scheduler/Schedulers$CachedScheduler
      32: astore_2
      33: aload_0
      34: ifnull        41
      37: aload_0
      38: invokevirtual #83                 // Method reactor/core/scheduler/Schedulers$CachedScheduler._dispose:()V
      41: aload_1
      42: ifnull        49
      45: aload_1
      46: invokevirtual #83                 // Method reactor/core/scheduler/Schedulers$CachedScheduler._dispose:()V
      49: aload_2
      50: ifnull        57
      53: aload_2
      54: invokevirtual #83                 // Method reactor/core/scheduler/Schedulers$CachedScheduler._dispose:()V
      57: return

  public static reactor.core.scheduler.Scheduler single();
    Code:
       0: getstatic     #82                 // Field CACHED_SINGLE:Ljava/util/concurrent/atomic/AtomicReference;
       3: ldc           #73                 // String single
       5: getstatic     #84                 // Field SINGLE_SUPPLIER:Ljava/util/function/Supplier;
       8: invokestatic  #13                 // Method cache:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/String;Ljava/util/function/Supplier;)Lreactor/core/scheduler/Schedulers$CachedScheduler;
      11: areturn

  public static reactor.core.scheduler.Scheduler single(reactor.core.scheduler.Scheduler);
    Code:
       0: new           #85                 // class reactor/core/scheduler/SingleWorkerScheduler
       3: dup
       4: aload_0
       5: invokespecial #86                 // Method reactor/core/scheduler/SingleWorkerScheduler."<init>":(Lreactor/core/scheduler/Scheduler;)V
       8: areturn

  static reactor.core.scheduler.Schedulers$CachedScheduler cache(java.util.concurrent.atomic.AtomicReference<reactor.core.scheduler.Schedulers$CachedScheduler>, java.lang.String, java.util.function.Supplier<reactor.core.scheduler.Scheduler>);
    Code:
       0: aload_0
       1: invokevirtual #87                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       4: checkcast     #81                 // class reactor/core/scheduler/Schedulers$CachedScheduler
       7: astore_3
       8: aload_3
       9: ifnull        14
      12: aload_3
      13: areturn
      14: new           #81                 // class reactor/core/scheduler/Schedulers$CachedScheduler
      17: dup
      18: aload_1
      19: aload_2
      20: invokeinterface #88,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      25: checkcast     #89                 // class reactor/core/scheduler/Scheduler
      28: invokespecial #90                 // Method reactor/core/scheduler/Schedulers$CachedScheduler."<init>":(Ljava/lang/String;Lreactor/core/scheduler/Scheduler;)V
      31: astore_3
      32: aload_0
      33: aconst_null
      34: aload_3
      35: invokevirtual #91                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      38: ifeq          43
      41: aload_3
      42: areturn
      43: aload_3
      44: invokevirtual #83                 // Method reactor/core/scheduler/Schedulers$CachedScheduler._dispose:()V
      47: aload_0
      48: invokevirtual #87                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      51: checkcast     #81                 // class reactor/core/scheduler/Schedulers$CachedScheduler
      54: areturn

  static final void defaultUncaughtException(java.lang.Thread, java.lang.Throwable);
    Code:
       0: getstatic     #38                 // Field log:Lreactor/util/Logger;
       3: new           #92                 // class java/lang/StringBuilder
       6: dup
       7: invokespecial #93                 // Method java/lang/StringBuilder."<init>":()V
      10: ldc           #94                 // String Scheduler worker in group
      12: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      15: aload_0
      16: invokevirtual #96                 // Method java/lang/Thread.getThreadGroup:()Ljava/lang/ThreadGroup;
      19: invokevirtual #97                 // Method java/lang/ThreadGroup.getName:()Ljava/lang/String;
      22: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: ldc           #98                 // String  failed with an uncaught exception
      27: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: invokevirtual #99                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: aload_1
      34: invokeinterface #100,  3          // InterfaceMethod reactor/util/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      39: return

  static void handleError(java.lang.Throwable);
    Code:
       0: invokestatic  #46                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: astore_1
       4: aload_0
       5: invokestatic  #101                // Method reactor/core/Exceptions.unwrap:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
       8: astore_2
       9: aload_1
      10: invokevirtual #102                // Method java/lang/Thread.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;
      13: astore_3
      14: aload_3
      15: ifnull        29
      18: aload_3
      19: aload_1
      20: aload_2
      21: invokeinterface #103,  3          // InterfaceMethod java/lang/Thread$UncaughtExceptionHandler.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V
      26: goto          40
      29: getstatic     #38                 // Field log:Lreactor/util/Logger;
      32: ldc           #104                // String Scheduler worker failed with an uncaught exception
      34: aload_2
      35: invokeinterface #100,  3          // InterfaceMethod reactor/util/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      40: getstatic     #45                 // Field onHandleErrorHook:Ljava/util/function/BiConsumer;
      43: ifnull        56
      46: getstatic     #45                 // Field onHandleErrorHook:Ljava/util/function/BiConsumer;
      49: aload_1
      50: aload_2
      51: invokeinterface #105,  3          // InterfaceMethod java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
      56: return

  static reactor.core.Disposable directSchedule(java.util.concurrent.ScheduledExecutorService, java.lang.Runnable, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #106                // class reactor/core/scheduler/SchedulerTask
       3: dup
       4: aload_1
       5: invokespecial #107                // Method reactor/core/scheduler/SchedulerTask."<init>":(Ljava/lang/Runnable;)V
       8: astore        5
      10: lload_2
      11: lconst_0
      12: lcmp
      13: ifgt          29
      16: aload_0
      17: aload         5
      19: invokeinterface #108,  2          // InterfaceMethod java/util/concurrent/ScheduledExecutorService.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
      24: astore        6
      26: goto          42
      29: aload_0
      30: aload         5
      32: lload_2
      33: aload         4
      35: invokeinterface #109,  5          // InterfaceMethod java/util/concurrent/ScheduledExecutorService.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      40: astore        6
      42: aload         5
      44: aload         6
      46: invokevirtual #110                // Method reactor/core/scheduler/SchedulerTask.setFuture:(Ljava/util/concurrent/Future;)V
      49: aload         5
      51: areturn

  static reactor.core.Disposable directSchedulePeriodically(java.util.concurrent.ScheduledExecutorService, java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: lload         4
       2: lconst_0
       3: lcmp
       4: ifgt          60
       7: new           #111                // class reactor/core/scheduler/InstantPeriodicWorkerTask
      10: dup
      11: aload_1
      12: aload_0
      13: invokespecial #112                // Method reactor/core/scheduler/InstantPeriodicWorkerTask."<init>":(Ljava/lang/Runnable;Ljava/util/concurrent/ExecutorService;)V
      16: astore        7
      18: lload_2
      19: lconst_0
      20: lcmp
      21: ifgt          37
      24: aload_0
      25: aload         7
      27: invokeinterface #108,  2          // InterfaceMethod java/util/concurrent/ScheduledExecutorService.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
      32: astore        8
      34: goto          50
      37: aload_0
      38: aload         7
      40: lload_2
      41: aload         6
      43: invokeinterface #109,  5          // InterfaceMethod java/util/concurrent/ScheduledExecutorService.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      48: astore        8
      50: aload         7
      52: aload         8
      54: invokevirtual #113                // Method reactor/core/scheduler/InstantPeriodicWorkerTask.setFirst:(Ljava/util/concurrent/Future;)V
      57: aload         7
      59: areturn
      60: new           #114                // class reactor/core/scheduler/PeriodicSchedulerTask
      63: dup
      64: aload_1
      65: invokespecial #115                // Method reactor/core/scheduler/PeriodicSchedulerTask."<init>":(Ljava/lang/Runnable;)V
      68: astore        7
      70: aload_0
      71: aload         7
      73: lload_2
      74: lload         4
      76: aload         6
      78: invokeinterface #116,  7          // InterfaceMethod java/util/concurrent/ScheduledExecutorService.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      83: astore        8
      85: aload         7
      87: aload         8
      89: invokevirtual #117                // Method reactor/core/scheduler/PeriodicSchedulerTask.setFuture:(Ljava/util/concurrent/Future;)V
      92: aload         7
      94: areturn

  static reactor.core.Disposable workerSchedule(java.util.concurrent.ScheduledExecutorService, reactor.core.Disposable$Composite, java.lang.Runnable, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #118                // class reactor/core/scheduler/WorkerTask
       3: dup
       4: aload_2
       5: aload_1
       6: invokespecial #119                // Method reactor/core/scheduler/WorkerTask."<init>":(Ljava/lang/Runnable;Lreactor/core/Disposable$Composite;)V
       9: astore        6
      11: aload_1
      12: aload         6
      14: invokeinterface #120,  2          // InterfaceMethod reactor/core/Disposable$Composite.add:(Lreactor/core/Disposable;)Z
      19: ifne          26
      22: invokestatic  #121                // Method reactor/core/Exceptions.failWithRejected:()Ljava/util/concurrent/RejectedExecutionException;
      25: athrow
      26: lload_3
      27: lconst_0
      28: lcmp
      29: ifgt          45
      32: aload_0
      33: aload         6
      35: invokeinterface #108,  2          // InterfaceMethod java/util/concurrent/ScheduledExecutorService.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
      40: astore        7
      42: goto          58
      45: aload_0
      46: aload         6
      48: lload_3
      49: aload         5
      51: invokeinterface #109,  5          // InterfaceMethod java/util/concurrent/ScheduledExecutorService.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      56: astore        7
      58: aload         6
      60: aload         7
      62: invokevirtual #122                // Method reactor/core/scheduler/WorkerTask.setFuture:(Ljava/util/concurrent/Future;)V
      65: goto          78
      68: astore        7
      70: aload         6
      72: invokevirtual #124                // Method reactor/core/scheduler/WorkerTask.dispose:()V
      75: aload         7
      77: athrow
      78: aload         6
      80: areturn
    Exception table:
       from    to  target type
          26    65    68   Class java/util/concurrent/RejectedExecutionException

  static reactor.core.Disposable workerSchedulePeriodically(java.util.concurrent.ScheduledExecutorService, reactor.core.Disposable$Composite, java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: lload         5
       2: lconst_0
       3: lcmp
       4: ifgt          106
       7: new           #111                // class reactor/core/scheduler/InstantPeriodicWorkerTask
      10: dup
      11: aload_2
      12: aload_0
      13: aload_1
      14: invokespecial #125                // Method reactor/core/scheduler/InstantPeriodicWorkerTask."<init>":(Ljava/lang/Runnable;Ljava/util/concurrent/ExecutorService;Lreactor/core/Disposable$Composite;)V
      17: astore        8
      19: aload_1
      20: aload         8
      22: invokeinterface #120,  2          // InterfaceMethod reactor/core/Disposable$Composite.add:(Lreactor/core/Disposable;)Z
      27: ifne          34
      30: invokestatic  #121                // Method reactor/core/Exceptions.failWithRejected:()Ljava/util/concurrent/RejectedExecutionException;
      33: athrow
      34: lload_3
      35: lconst_0
      36: lcmp
      37: ifgt          53
      40: aload_0
      41: aload         8
      43: invokeinterface #108,  2          // InterfaceMethod java/util/concurrent/ScheduledExecutorService.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
      48: astore        9
      50: goto          66
      53: aload_0
      54: aload         8
      56: lload_3
      57: aload         7
      59: invokeinterface #109,  5          // InterfaceMethod java/util/concurrent/ScheduledExecutorService.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      64: astore        9
      66: aload         8
      68: aload         9
      70: invokevirtual #113                // Method reactor/core/scheduler/InstantPeriodicWorkerTask.setFirst:(Ljava/util/concurrent/Future;)V
      73: goto          103
      76: astore        9
      78: aload         8
      80: invokevirtual #126                // Method reactor/core/scheduler/InstantPeriodicWorkerTask.dispose:()V
      83: aload         9
      85: athrow
      86: astore        9
      88: aload         8
      90: invokevirtual #126                // Method reactor/core/scheduler/InstantPeriodicWorkerTask.dispose:()V
      93: new           #123                // class java/util/concurrent/RejectedExecutionException
      96: dup
      97: aload         9
      99: invokespecial #129                // Method java/util/concurrent/RejectedExecutionException."<init>":(Ljava/lang/Throwable;)V
     102: athrow
     103: aload         8
     105: areturn
     106: new           #130                // class reactor/core/scheduler/PeriodicWorkerTask
     109: dup
     110: aload_2
     111: aload_1
     112: invokespecial #131                // Method reactor/core/scheduler/PeriodicWorkerTask."<init>":(Ljava/lang/Runnable;Lreactor/core/Disposable$Composite;)V
     115: astore        8
     117: aload_1
     118: aload         8
     120: invokeinterface #120,  2          // InterfaceMethod reactor/core/Disposable$Composite.add:(Lreactor/core/Disposable;)Z
     125: ifne          132
     128: invokestatic  #121                // Method reactor/core/Exceptions.failWithRejected:()Ljava/util/concurrent/RejectedExecutionException;
     131: athrow
     132: aload_0
     133: aload         8
     135: lload_3
     136: lload         5
     138: aload         7
     140: invokeinterface #116,  7          // InterfaceMethod java/util/concurrent/ScheduledExecutorService.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
     145: astore        9
     147: aload         8
     149: aload         9
     151: invokevirtual #132                // Method reactor/core/scheduler/PeriodicWorkerTask.setFuture:(Ljava/util/concurrent/Future;)V
     154: goto          184
     157: astore        9
     159: aload         8
     161: invokevirtual #133                // Method reactor/core/scheduler/PeriodicWorkerTask.dispose:()V
     164: aload         9
     166: athrow
     167: astore        9
     169: aload         8
     171: invokevirtual #133                // Method reactor/core/scheduler/PeriodicWorkerTask.dispose:()V
     174: new           #123                // class java/util/concurrent/RejectedExecutionException
     177: dup
     178: aload         9
     180: invokespecial #129                // Method java/util/concurrent/RejectedExecutionException."<init>":(Ljava/lang/Throwable;)V
     183: athrow
     184: aload         8
     186: areturn
    Exception table:
       from    to  target type
          34    73    76   Class java/util/concurrent/RejectedExecutionException
          34    73    86   Class java/lang/IllegalArgumentException
          34    73    86   Class java/lang/NullPointerException
         132   154   157   Class java/util/concurrent/RejectedExecutionException
         132   154   167   Class java/lang/IllegalArgumentException
         132   154   167   Class java/lang/NullPointerException

  static final java.lang.Object scanExecutor(java.util.concurrent.Executor, reactor.core.Scannable$Attr);
    Code:
       0: aload_0
       1: instanceof    #134                // class reactor/core/scheduler/DelegateServiceScheduler$UnsupportedScheduledExecutorService
       4: ifeq          15
       7: aload_0
       8: checkcast     #134                // class reactor/core/scheduler/DelegateServiceScheduler$UnsupportedScheduledExecutorService
      11: invokevirtual #135                // Method reactor/core/scheduler/DelegateServiceScheduler$UnsupportedScheduledExecutorService.get:()Ljava/util/concurrent/ExecutorService;
      14: astore_0
      15: aload_0
      16: instanceof    #136                // class reactor/core/Scannable
      19: ifeq          33
      22: aload_0
      23: checkcast     #136                // class reactor/core/Scannable
      26: aload_1
      27: invokeinterface #137,  2          // InterfaceMethod reactor/core/Scannable.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      32: areturn
      33: aload_0
      34: instanceof    #3                  // class java/util/concurrent/ExecutorService
      37: ifeq          79
      40: aload_0
      41: checkcast     #3                  // class java/util/concurrent/ExecutorService
      44: astore_2
      45: aload_1
      46: getstatic     #138                // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      49: if_acmpne     62
      52: aload_2
      53: invokeinterface #139,  1          // InterfaceMethod java/util/concurrent/ExecutorService.isTerminated:()Z
      58: invokestatic  #140                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      61: areturn
      62: aload_1
      63: getstatic     #141                // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      66: if_acmpne     79
      69: aload_2
      70: invokeinterface #142,  1          // InterfaceMethod java/util/concurrent/ExecutorService.isShutdown:()Z
      75: invokestatic  #140                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      78: areturn
      79: aload_0
      80: instanceof    #143                // class java/util/concurrent/ThreadPoolExecutor
      83: ifeq          152
      86: aload_0
      87: checkcast     #143                // class java/util/concurrent/ThreadPoolExecutor
      90: astore_2
      91: aload_1
      92: getstatic     #144                // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      95: if_acmpne     106
      98: aload_2
      99: invokevirtual #145                // Method java/util/concurrent/ThreadPoolExecutor.getMaximumPoolSize:()I
     102: invokestatic  #146                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     105: areturn
     106: aload_1
     107: getstatic     #147                // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
     110: if_acmpne     132
     113: aload_2
     114: invokevirtual #148                // Method java/util/concurrent/ThreadPoolExecutor.getTaskCount:()J
     117: aload_2
     118: invokevirtual #149                // Method java/util/concurrent/ThreadPoolExecutor.getCompletedTaskCount:()J
     121: lsub
     122: invokestatic  #150                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     125: invokevirtual #151                // Method java/lang/Long.intValue:()I
     128: invokestatic  #146                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     131: areturn
     132: aload_1
     133: getstatic     #152                // Field reactor/core/Scannable$Attr.LARGE_BUFFERED:Lreactor/core/Scannable$Attr;
     136: if_acmpne     152
     139: aload_2
     140: invokevirtual #148                // Method java/util/concurrent/ThreadPoolExecutor.getTaskCount:()J
     143: aload_2
     144: invokevirtual #149                // Method java/util/concurrent/ThreadPoolExecutor.getCompletedTaskCount:()J
     147: lsub
     148: invokestatic  #150                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     151: areturn
     152: aconst_null
     153: areturn

  private static reactor.core.scheduler.Scheduler lambda$static$4();
    Code:
       0: ldc           #73                 // String single
       2: iconst_1
       3: invokestatic  #34                 // Method newSingle:(Ljava/lang/String;Z)Lreactor/core/scheduler/Scheduler;
       6: areturn

  private static reactor.core.scheduler.Scheduler lambda$static$3();
    Code:
       0: ldc           #15                 // String parallel
       2: getstatic     #28                 // Field DEFAULT_POOL_SIZE:I
       5: iconst_1
       6: invokestatic  #30                 // Method newParallel:(Ljava/lang/String;IZ)Lreactor/core/scheduler/Scheduler;
       9: areturn

  private static reactor.core.scheduler.Scheduler lambda$static$2();
    Code:
       0: ldc           #11                 // String elastic
       2: bipush        60
       4: iconst_1
       5: invokestatic  #20                 // Method newElastic:(Ljava/lang/String;IZ)Lreactor/core/scheduler/Scheduler;
       8: areturn

  private static java.util.concurrent.ScheduledExecutorService lambda$decorateExecutorService$1(java.util.concurrent.ScheduledExecutorService);
    Code:
       0: aload_0
       1: areturn

  private static java.lang.Integer lambda$static$0();
    Code:
       0: invokestatic  #153                // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
       3: invokevirtual #154                // Method java/lang/Runtime.availableProcessors:()I
       6: invokestatic  #146                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       9: areturn

  static {};
    Code:
       0: ldc           #155                // String reactor.schedulers.defaultPoolSize
       2: invokestatic  #156                // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: invokestatic  #157                // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
       8: invokedynamic #158,  0            // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      13: invokevirtual #159                // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      16: invokedynamic #160,  0            // InvokeDynamic #3:get:()Ljava/util/function/Supplier;
      21: invokevirtual #161                // Method java/util/Optional.orElseGet:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      24: checkcast     #162                // class java/lang/Integer
      27: invokevirtual #163                // Method java/lang/Integer.intValue:()I
      30: putstatic     #28                 // Field DEFAULT_POOL_SIZE:I
      33: new           #164                // class java/util/concurrent/atomic/AtomicReference
      36: dup
      37: invokespecial #165                // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      40: putstatic     #9                  // Field CACHED_ELASTIC:Ljava/util/concurrent/atomic/AtomicReference;
      43: new           #164                // class java/util/concurrent/atomic/AtomicReference
      46: dup
      47: invokespecial #165                // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      50: putstatic     #14                 // Field CACHED_PARALLEL:Ljava/util/concurrent/atomic/AtomicReference;
      53: new           #164                // class java/util/concurrent/atomic/AtomicReference
      56: dup
      57: invokespecial #165                // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      60: putstatic     #82                 // Field CACHED_SINGLE:Ljava/util/concurrent/atomic/AtomicReference;
      63: invokedynamic #166,  0            // InvokeDynamic #4:get:()Ljava/util/function/Supplier;
      68: putstatic     #12                 // Field ELASTIC_SUPPLIER:Ljava/util/function/Supplier;
      71: invokedynamic #167,  0            // InvokeDynamic #5:get:()Ljava/util/function/Supplier;
      76: putstatic     #16                 // Field PARALLEL_SUPPLIER:Ljava/util/function/Supplier;
      79: invokedynamic #168,  0            // InvokeDynamic #6:get:()Ljava/util/function/Supplier;
      84: putstatic     #84                 // Field SINGLE_SUPPLIER:Ljava/util/function/Supplier;
      87: new           #169                // class reactor/core/scheduler/Schedulers$1
      90: dup
      91: invokespecial #170                // Method reactor/core/scheduler/Schedulers$1."<init>":()V
      94: putstatic     #54                 // Field DEFAULT:Lreactor/core/scheduler/Schedulers$Factory;
      97: new           #171                // class java/util/LinkedHashMap
     100: dup
     101: invokespecial #172                // Method java/util/LinkedHashMap."<init>":()V
     104: putstatic     #59                 // Field DECORATORS:Ljava/util/Map;
     107: getstatic     #54                 // Field DEFAULT:Lreactor/core/scheduler/Schedulers$Factory;
     110: putstatic     #26                 // Field factory:Lreactor/core/scheduler/Schedulers$Factory;
     113: ldc           #10                 // class reactor/core/scheduler/Schedulers
     115: invokestatic  #173                // Method reactor/util/Loggers.getLogger:(Ljava/lang/Class;)Lreactor/util/Logger;
     118: putstatic     #38                 // Field log:Lreactor/util/Logger;
     121: return
}
