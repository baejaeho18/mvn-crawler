Compiled from "FluxOnBackpressureLatest.java"
final class reactor.core.publisher.FluxOnBackpressureLatest$LatestSubscriber<T> implements reactor.core.publisher.InnerOperator<T, T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final reactor.util.context.Context ctx;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxOnBackpressureLatest$LatestSubscriber> REQUESTED;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxOnBackpressureLatest$LatestSubscriber> WIP;

  org.reactivestreams.Subscription s;

  java.lang.Throwable error;

  volatile boolean done;

  volatile boolean cancelled;

  volatile T value;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxOnBackpressureLatest$LatestSubscriber, java.lang.Object> VALUE;

  reactor.core.publisher.FluxOnBackpressureLatest$LatestSubscriber(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_1
      11: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      16: putfield      #4                  // Field ctx:Lreactor/util/context/Context;
      19: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #5                  // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          20
       7: getstatic     #6                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #7                  // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #8                  // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #9                  // Field cancelled:Z
       4: ifne          52
       7: aload_0
       8: iconst_1
       9: putfield      #9                  // Field cancelled:Z
      12: aload_0
      13: getfield      #10                 // Field s:Lorg/reactivestreams/Subscription;
      16: invokeinterface #11,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      21: getstatic     #12                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      24: aload_0
      25: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      28: ifne          52
      31: getstatic     #14                 // Field VALUE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      34: aload_0
      35: aconst_null
      36: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      39: astore_1
      40: aload_1
      41: ifnull        52
      44: aload_1
      45: aload_0
      46: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      49: invokestatic  #16                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      52: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #10                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #17                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          35
      11: aload_0
      12: aload_1
      13: putfield      #10                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #18,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: ldc2_w        #20                 // long 9223372036854775807l
      30: invokeinterface #22,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      35: return

  public void onNext(T);
    Code:
       0: getstatic     #14                 // Field VALUE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: astore_2
       9: aload_2
      10: ifnull        21
      13: aload_2
      14: aload_0
      15: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      18: invokestatic  #16                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      21: aload_0
      22: invokevirtual #8                  // Method drain:()V
      25: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: iconst_1
       7: putfield      #24                 // Field done:Z
      10: aload_0
      11: invokevirtual #8                  // Method drain:()V
      14: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #24                 // Field done:Z
       5: aload_0
       6: invokevirtual #8                  // Method drain:()V
       9: return

  void drain();
    Code:
       0: getstatic     #12                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      15: astore_1
      16: iconst_1
      17: istore_2
      18: aload_0
      19: aload_0
      20: getfield      #24                 // Field done:Z
      23: aload_0
      24: getfield      #25                 // Field value:Ljava/lang/Object;
      27: ifnonnull     34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: aload_1
      36: invokevirtual #26                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
      39: ifeq          43
      42: return
      43: aload_0
      44: getfield      #27                 // Field requested:J
      47: lstore_3
      48: lconst_0
      49: lstore        5
      51: lload_3
      52: lload         5
      54: lcmp
      55: ifeq          124
      58: aload_0
      59: getfield      #24                 // Field done:Z
      62: istore        7
      64: getstatic     #14                 // Field VALUE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      67: aload_0
      68: aconst_null
      69: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      72: astore        8
      74: aload         8
      76: ifnonnull     83
      79: iconst_1
      80: goto          84
      83: iconst_0
      84: istore        9
      86: aload_0
      87: iload         7
      89: iload         9
      91: aload_1
      92: invokevirtual #26                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
      95: ifeq          99
      98: return
      99: iload         9
     101: ifeq          107
     104: goto          124
     107: aload_1
     108: aload         8
     110: invokeinterface #28,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     115: lload         5
     117: lconst_1
     118: ladd
     119: lstore        5
     121: goto          51
     124: lload_3
     125: lload         5
     127: lcmp
     128: ifne          156
     131: aload_0
     132: aload_0
     133: getfield      #24                 // Field done:Z
     136: aload_0
     137: getfield      #25                 // Field value:Ljava/lang/Object;
     140: ifnonnull     147
     143: iconst_1
     144: goto          148
     147: iconst_0
     148: aload_1
     149: invokevirtual #26                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
     152: ifeq          156
     155: return
     156: lload         5
     158: lconst_0
     159: lcmp
     160: ifeq          181
     163: lload_3
     164: ldc2_w        #20                 // long 9223372036854775807l
     167: lcmp
     168: ifeq          181
     171: getstatic     #6                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     174: aload_0
     175: lload         5
     177: invokestatic  #29                 // Method reactor/core/publisher/Operators.produced:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
     180: pop2
     181: getstatic     #12                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     184: aload_0
     185: iload_2
     186: ineg
     187: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     190: istore_2
     191: iload_2
     192: ifne          198
     195: goto          201
     198: goto          18
     201: return

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #9                  // Field cancelled:Z
       4: ifeq          33
       7: getstatic     #14                 // Field VALUE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      10: aload_0
      11: aconst_null
      12: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      15: astore        4
      17: aload         4
      19: ifnull        31
      22: aload         4
      24: aload_0
      25: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      28: invokestatic  #16                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      31: iconst_1
      32: ireturn
      33: iload_1
      34: ifeq          94
      37: aload_0
      38: getfield      #23                 // Field error:Ljava/lang/Throwable;
      41: astore        4
      43: aload         4
      45: ifnull        82
      48: getstatic     #14                 // Field VALUE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      51: aload_0
      52: aconst_null
      53: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      56: astore        5
      58: aload         5
      60: ifnull        72
      63: aload         5
      65: aload_0
      66: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      69: invokestatic  #16                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      72: aload_3
      73: aload         4
      75: invokeinterface #31,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      80: iconst_1
      81: ireturn
      82: iload_2
      83: ifeq          94
      86: aload_3
      87: invokeinterface #32,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      92: iconst_1
      93: ireturn
      94: iconst_0
      95: ireturn

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #33                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #10                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #34                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #27                 // Field requested:J
      23: invokestatic  #35                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      26: areturn
      27: aload_1
      28: getstatic     #36                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #24                 // Field done:Z
      38: invokestatic  #37                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aload_1
      43: getstatic     #38                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      46: if_acmpne     57
      49: aload_0
      50: getfield      #9                  // Field cancelled:Z
      53: invokestatic  #37                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      56: areturn
      57: aload_1
      58: getstatic     #39                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      61: if_acmpne     80
      64: aload_0
      65: getfield      #25                 // Field value:Ljava/lang/Object;
      68: ifnull        75
      71: iconst_1
      72: goto          76
      75: iconst_0
      76: invokestatic  #40                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      79: areturn
      80: aload_1
      81: getstatic     #41                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      84: if_acmpne     92
      87: aload_0
      88: getfield      #23                 // Field error:Ljava/lang/Throwable;
      91: areturn
      92: aload_1
      93: getstatic     #42                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      96: if_acmpne     105
      99: ldc           #44                 // int 2147483647
     101: invokestatic  #40                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     104: areturn
     105: aload_0
     106: aload_1
     107: invokespecial #45                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     110: areturn

  static {};
    Code:
       0: ldc           #46                 // class reactor/core/publisher/FluxOnBackpressureLatest$LatestSubscriber
       2: ldc           #47                 // String requested
       4: invokestatic  #48                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       7: putstatic     #6                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: ldc           #46                 // class reactor/core/publisher/FluxOnBackpressureLatest$LatestSubscriber
      12: ldc           #49                 // String wip
      14: invokestatic  #50                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      17: putstatic     #12                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      20: ldc           #46                 // class reactor/core/publisher/FluxOnBackpressureLatest$LatestSubscriber
      22: ldc           #51                 // class java/lang/Object
      24: ldc           #52                 // String value
      26: invokestatic  #53                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      29: putstatic     #14                 // Field VALUE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      32: return
}
