Compiled from "FluxRepeatWhen.java"
final class reactor.core.publisher.FluxRepeatWhen$RepeatWhenMainSubscriber<T> extends reactor.core.publisher.Operators$MultiSubscriptionSubscriber<T, T> {
  final reactor.core.publisher.Operators$DeferredSubscription otherArbiter;

  final org.reactivestreams.Subscriber<java.lang.Long> signaller;

  final org.reactivestreams.Publisher<? extends T> source;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxRepeatWhen$RepeatWhenMainSubscriber> WIP;

  reactor.util.context.Context context;

  long produced;

  reactor.core.publisher.FluxRepeatWhen$RepeatWhenMainSubscriber(reactor.core.CoreSubscriber<? super T>, org.reactivestreams.Subscriber<java.lang.Long>, org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/Operators$MultiSubscriptionSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field signaller:Lorg/reactivestreams/Subscriber;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field source:Lorg/reactivestreams/Publisher;
      15: aload_0
      16: new           #4                  // class reactor/core/publisher/Operators$DeferredSubscription
      19: dup
      20: invokespecial #5                  // Method reactor/core/publisher/Operators$DeferredSubscription."<init>":()V
      23: putfield      #6                  // Field otherArbiter:Lreactor/core/publisher/Operators$DeferredSubscription;
      26: aload_0
      27: aload_1
      28: invokeinterface #7,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      33: putfield      #8                  // Field context:Lreactor/util/context/Context;
      36: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #8                  // Field context:Lreactor/util/context/Context;
       4: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: iconst_2
       1: anewarray     #9                  // class reactor/core/Scannable
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #2                  // Field signaller:Lorg/reactivestreams/Subscriber;
      10: invokestatic  #10                 // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
      13: aastore
      14: dup
      15: iconst_1
      16: aload_0
      17: getfield      #6                  // Field otherArbiter:Lreactor/core/publisher/Operators$DeferredSubscription;
      20: aastore
      21: invokestatic  #11                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
      24: areturn

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #12                 // Field cancelled:Z
       4: ifne          18
       7: aload_0
       8: getfield      #6                  // Field otherArbiter:Lreactor/core/publisher/Operators$DeferredSubscription;
      11: invokevirtual #13                 // Method reactor/core/publisher/Operators$DeferredSubscription.cancel:()V
      14: aload_0
      15: invokespecial #14                 // Method reactor/core/publisher/Operators$MultiSubscriptionSubscriber.cancel:()V
      18: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #15                 // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #16,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      10: aload_0
      11: dup
      12: getfield      #17                 // Field produced:J
      15: lconst_1
      16: ladd
      17: putfield      #17                 // Field produced:J
      20: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #6                  // Field otherArbiter:Lreactor/core/publisher/Operators$DeferredSubscription;
       4: invokevirtual #13                 // Method reactor/core/publisher/Operators$DeferredSubscription.cancel:()V
       7: aload_0
       8: getfield      #15                 // Field actual:Lreactor/core/CoreSubscriber;
      11: aload_1
      12: invokeinterface #18,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      17: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #17                 // Field produced:J
       4: lstore_1
       5: lload_1
       6: lconst_0
       7: lcmp
       8: ifeq          21
      11: aload_0
      12: lconst_0
      13: putfield      #17                 // Field produced:J
      16: aload_0
      17: lload_1
      18: invokevirtual #19                 // Method produced:(J)V
      21: aload_0
      22: getfield      #6                  // Field otherArbiter:Lreactor/core/publisher/Operators$DeferredSubscription;
      25: lconst_1
      26: invokevirtual #20                 // Method reactor/core/publisher/Operators$DeferredSubscription.request:(J)V
      29: aload_0
      30: getfield      #2                  // Field signaller:Lorg/reactivestreams/Subscriber;
      33: lload_1
      34: invokestatic  #21                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      37: invokeinterface #22,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      42: return

  void setWhen(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #6                  // Field otherArbiter:Lreactor/core/publisher/Operators$DeferredSubscription;
       4: aload_1
       5: invokevirtual #23                 // Method reactor/core/publisher/Operators$DeferredSubscription.set:(Lorg/reactivestreams/Subscription;)Z
       8: pop
       9: return

  void resubscribe(java.lang.Object);
    Code:
       0: getstatic     #24                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          53
      10: aload_0
      11: getfield      #12                 // Field cancelled:Z
      14: ifeq          18
      17: return
      18: aload_1
      19: instanceof    #26                 // class reactor/util/context/Context
      22: ifeq          33
      25: aload_0
      26: aload_1
      27: checkcast     #26                 // class reactor/util/context/Context
      30: putfield      #8                  // Field context:Lreactor/util/context/Context;
      33: aload_0
      34: getfield      #3                  // Field source:Lorg/reactivestreams/Publisher;
      37: aload_0
      38: invokeinterface #27,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      43: getstatic     #24                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      46: aload_0
      47: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      50: ifne          10
      53: return

  void whenError(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokespecial #14                 // Method reactor/core/publisher/Operators$MultiSubscriptionSubscriber.cancel:()V
       4: aload_0
       5: getfield      #15                 // Field actual:Lreactor/core/CoreSubscriber;
       8: aload_1
       9: invokeinterface #18,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      14: return

  void whenComplete();
    Code:
       0: aload_0
       1: invokespecial #14                 // Method reactor/core/publisher/Operators$MultiSubscriptionSubscriber.cancel:()V
       4: aload_0
       5: getfield      #15                 // Field actual:Lreactor/core/CoreSubscriber;
       8: invokeinterface #29,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      13: return

  static {};
    Code:
       0: ldc           #30                 // class reactor/core/publisher/FluxRepeatWhen$RepeatWhenMainSubscriber
       2: ldc           #31                 // String wip
       4: invokestatic  #32                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #24                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
