Compiled from "FluxJust.java"
final class reactor.core.publisher.FluxJust<T> extends reactor.core.publisher.Flux<T> implements reactor.core.Fuseable$ScalarCallable<T>, reactor.core.Fuseable, reactor.core.publisher.SourceProducer<T> {
  final T value;

  reactor.core.publisher.FluxJust(T);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String value
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: putfield      #4                  // Field value:Ljava/lang/Object;
      14: return

  public T call() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #4                  // Field value:Ljava/lang/Object;
       4: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: new           #5                  // class reactor/core/publisher/FluxJust$WeakScalarSubscription
       4: dup
       5: aload_0
       6: getfield      #4                  // Field value:Ljava/lang/Object;
       9: aload_1
      10: invokespecial #6                  // Method reactor/core/publisher/FluxJust$WeakScalarSubscription."<init>":(Ljava/lang/Object;Lreactor/core/CoreSubscriber;)V
      13: invokeinterface #7,  2            // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      18: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #8                  // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: iconst_1
       8: invokestatic  #9                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      11: areturn
      12: aconst_null
      13: areturn
}
