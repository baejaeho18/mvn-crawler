Compiled from "FluxBuffer.java"
final class reactor.core.publisher.FluxBuffer$BufferSkipSubscriber<T, C extends java.util.Collection<? super T>> implements reactor.core.publisher.InnerOperator<T, C> {
  final reactor.core.CoreSubscriber<? super C> actual;

  final reactor.util.context.Context ctx;

  final java.util.function.Supplier<C> bufferSupplier;

  final int size;

  final int skip;

  C buffer;

  org.reactivestreams.Subscription s;

  boolean done;

  long index;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxBuffer$BufferSkipSubscriber> WIP;

  reactor.core.publisher.FluxBuffer$BufferSkipSubscriber(reactor.core.CoreSubscriber<? super C>, int, int, java.util.function.Supplier<C>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_1
      11: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      16: putfield      #4                  // Field ctx:Lreactor/util/context/Context;
      19: aload_0
      20: iload_2
      21: putfield      #5                  // Field size:I
      24: aload_0
      25: iload_3
      26: putfield      #6                  // Field skip:I
      29: aload_0
      30: aload         4
      32: putfield      #7                  // Field bufferSupplier:Ljava/util/function/Supplier;
      35: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #8                  // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifne          8
       7: return
       8: aload_0
       9: getfield      #9                  // Field wip:I
      12: ifne          73
      15: getstatic     #10                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      18: aload_0
      19: iconst_0
      20: iconst_1
      21: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      24: ifeq          73
      27: lload_1
      28: aload_0
      29: getfield      #5                  // Field size:I
      32: i2l
      33: invokestatic  #12                 // Method reactor/core/publisher/Operators.multiplyCap:(JJ)J
      36: lstore_3
      37: aload_0
      38: getfield      #6                  // Field skip:I
      41: aload_0
      42: getfield      #5                  // Field size:I
      45: isub
      46: i2l
      47: lload_1
      48: lconst_1
      49: lsub
      50: invokestatic  #12                 // Method reactor/core/publisher/Operators.multiplyCap:(JJ)J
      53: lstore        5
      55: aload_0
      56: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      59: lload_3
      60: lload         5
      62: invokestatic  #14                 // Method reactor/core/publisher/Operators.addCap:(JJ)J
      65: invokeinterface #15,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      70: goto          91
      73: aload_0
      74: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      77: aload_0
      78: getfield      #6                  // Field skip:I
      81: i2l
      82: lload_1
      83: invokestatic  #12                 // Method reactor/core/publisher/Operators.multiplyCap:(JJ)J
      86: invokeinterface #15,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      91: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
       4: invokeinterface #16,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
       9: aload_0
      10: getfield      #17                 // Field buffer:Ljava/util/Collection;
      13: aload_0
      14: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      17: invokestatic  #18                 // Method reactor/core/publisher/Operators.onDiscardMultiple:(Ljava/util/Collection;Lreactor/util/context/Context;)V
      20: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #19                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          26
      11: aload_0
      12: aload_1
      13: putfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #20,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #21                 // Field done:Z
       4: ifeq          16
       7: aload_1
       8: aload_0
       9: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      12: invokestatic  #22                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      15: return
      16: aload_0
      17: getfield      #17                 // Field buffer:Ljava/util/Collection;
      20: astore_2
      21: aload_0
      22: getfield      #23                 // Field index:J
      25: lstore_3
      26: lload_3
      27: aload_0
      28: getfield      #6                  // Field skip:I
      31: i2l
      32: lrem
      33: lconst_0
      34: lcmp
      35: ifne          93
      38: aload_0
      39: getfield      #7                  // Field bufferSupplier:Ljava/util/function/Supplier;
      42: invokeinterface #24,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      47: ldc           #25                 // String The bufferSupplier returned a null buffer
      49: invokestatic  #26                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      52: checkcast     #27                 // class java/util/Collection
      55: astore_2
      56: goto          88
      59: astore        5
      61: aload_0
      62: aload_0
      63: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      66: aload         5
      68: aload_1
      69: aload_0
      70: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      73: invokestatic  #29                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      76: invokevirtual #30                 // Method onError:(Ljava/lang/Throwable;)V
      79: aload_1
      80: aload_0
      81: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      84: invokestatic  #31                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      87: return
      88: aload_0
      89: aload_2
      90: putfield      #17                 // Field buffer:Ljava/util/Collection;
      93: aload_2
      94: ifnull        136
      97: aload_2
      98: aload_1
      99: invokeinterface #32,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
     104: pop
     105: aload_2
     106: invokeinterface #33,  1           // InterfaceMethod java/util/Collection.size:()I
     111: aload_0
     112: getfield      #5                  // Field size:I
     115: if_icmpne     144
     118: aload_0
     119: aconst_null
     120: putfield      #17                 // Field buffer:Ljava/util/Collection;
     123: aload_0
     124: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     127: aload_2
     128: invokeinterface #34,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     133: goto          144
     136: aload_1
     137: aload_0
     138: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     141: invokestatic  #31                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
     144: aload_0
     145: lload_3
     146: lconst_1
     147: ladd
     148: putfield      #23                 // Field index:J
     151: return
    Exception table:
       from    to  target type
          38    56    59   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #21                 // Field done:Z
       4: ifeq          16
       7: aload_1
       8: aload_0
       9: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      12: invokestatic  #35                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      15: return
      16: aload_0
      17: iconst_1
      18: putfield      #21                 // Field done:Z
      21: aload_0
      22: getfield      #17                 // Field buffer:Ljava/util/Collection;
      25: astore_2
      26: aload_0
      27: aconst_null
      28: putfield      #17                 // Field buffer:Ljava/util/Collection;
      31: aload_0
      32: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      35: aload_1
      36: invokeinterface #36,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      41: aload_2
      42: aload_0
      43: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      46: invokestatic  #18                 // Method reactor/core/publisher/Operators.onDiscardMultiple:(Ljava/util/Collection;Lreactor/util/context/Context;)V
      49: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #21                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #21                 // Field done:Z
      13: aload_0
      14: getfield      #17                 // Field buffer:Ljava/util/Collection;
      17: astore_1
      18: aload_0
      19: aconst_null
      20: putfield      #17                 // Field buffer:Ljava/util/Collection;
      23: aload_1
      24: ifnull        37
      27: aload_0
      28: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      31: aload_1
      32: invokeinterface #34,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      37: aload_0
      38: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      41: invokeinterface #37,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      46: return

  public reactor.core.CoreSubscriber<? super C> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #38                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #39                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #21                 // Field done:Z
      23: invokestatic  #40                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #41                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #5                  // Field size:I
      38: invokestatic  #42                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      41: areturn
      42: aload_1
      43: getstatic     #43                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      46: if_acmpne     72
      49: aload_0
      50: getfield      #17                 // Field buffer:Ljava/util/Collection;
      53: astore_2
      54: aload_2
      55: ifnull        67
      58: aload_2
      59: invokeinterface #33,  1           // InterfaceMethod java/util/Collection.size:()I
      64: goto          68
      67: iconst_0
      68: invokestatic  #42                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      71: areturn
      72: aload_1
      73: getstatic     #44                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      76: if_acmpne     87
      79: aload_0
      80: getfield      #5                  // Field size:I
      83: invokestatic  #42                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      86: areturn
      87: aload_0
      88: aload_1
      89: invokespecial #45                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      92: areturn

  static {};
    Code:
       0: ldc           #46                 // class reactor/core/publisher/FluxBuffer$BufferSkipSubscriber
       2: ldc           #47                 // String wip
       4: invokestatic  #48                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #10                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
