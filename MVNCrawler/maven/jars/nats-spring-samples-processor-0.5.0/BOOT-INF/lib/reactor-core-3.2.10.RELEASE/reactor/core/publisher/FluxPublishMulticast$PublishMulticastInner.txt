Compiled from "FluxPublishMulticast.java"
final class reactor.core.publisher.FluxPublishMulticast$PublishMulticastInner<T> implements reactor.core.publisher.InnerProducer<T> {
  final reactor.core.publisher.FluxPublishMulticast$FluxPublishMulticaster<T> parent;

  final reactor.core.CoreSubscriber<? super T> actual;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxPublishMulticast$PublishMulticastInner> REQUESTED;

  reactor.core.publisher.FluxPublishMulticast$PublishMulticastInner(reactor.core.publisher.FluxPublishMulticast$FluxPublishMulticaster<T>, reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      14: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #4                  // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
       4: if_acmpne     19
       7: lconst_0
       8: aload_0
       9: getfield      #5                  // Field requested:J
      12: invokestatic  #6                  // Method java/lang/Math.max:(JJ)J
      15: invokestatic  #7                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      18: areturn
      19: aload_1
      20: getstatic     #8                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      23: if_acmpne     31
      26: aload_0
      27: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster;
      30: areturn
      31: aload_1
      32: getstatic     #9                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      35: if_acmpne     58
      38: ldc2_w        #11                 // long -9223372036854775808l
      41: aload_0
      42: getfield      #5                  // Field requested:J
      45: lcmp
      46: ifne          53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: invokestatic  #13                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      57: areturn
      58: aload_0
      59: aload_1
      60: invokespecial #14                 // InterfaceMethod reactor/core/publisher/InnerProducer.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      63: areturn

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #15                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          23
       7: getstatic     #16                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #17                 // Method reactor/core/publisher/Operators.addCapCancellable:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster;
      20: invokevirtual #18                 // Method reactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster.drain:()V
      23: return

  public void cancel();
    Code:
       0: getstatic     #16                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: ldc2_w        #11                 // long -9223372036854775808l
       7: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndSet:(Ljava/lang/Object;J)J
      10: ldc2_w        #11                 // long -9223372036854775808l
      13: lcmp
      14: ifeq          32
      17: aload_0
      18: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster;
      21: aload_0
      22: invokevirtual #20                 // Method reactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster.remove:(Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;)V
      25: aload_0
      26: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster;
      29: invokevirtual #18                 // Method reactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster.drain:()V
      32: return

  void produced(long);
    Code:
       0: getstatic     #16                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: lload_1
       5: invokestatic  #21                 // Method reactor/core/publisher/Operators.producedCancellable:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
       8: pop2
       9: return

  static {};
    Code:
       0: ldc           #22                 // class reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner
       2: ldc           #23                 // String requested
       4: invokestatic  #24                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       7: putstatic     #16                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: return
}
