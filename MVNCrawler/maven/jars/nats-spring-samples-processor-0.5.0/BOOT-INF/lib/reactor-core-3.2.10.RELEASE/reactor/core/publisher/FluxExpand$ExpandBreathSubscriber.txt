Compiled from "FluxExpand.java"
final class reactor.core.publisher.FluxExpand$ExpandBreathSubscriber<T> extends reactor.core.publisher.Operators$MultiSubscriptionSubscriber<T, T> {
  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends T>> expander;

  final java.util.Queue<org.reactivestreams.Publisher<? extends T>> queue;

  volatile boolean active;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxExpand$ExpandBreathSubscriber> WIP;

  long produced;

  reactor.core.publisher.FluxExpand$ExpandBreathSubscriber(reactor.core.CoreSubscriber<? super T>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends T>>, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/Operators$MultiSubscriptionSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field expander:Ljava/util/function/Function;
      10: aload_0
      11: iload_3
      12: invokestatic  #3                  // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      15: invokeinterface #4,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      20: checkcast     #5                  // class java/util/Queue
      23: putfield      #6                  // Field queue:Ljava/util/Queue;
      26: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #7                  // Method set:(Lorg/reactivestreams/Subscription;)V
       5: return

  public void onNext(T);
    Code:
       0: aload_0
       1: dup
       2: getfield      #8                  // Field produced:J
       5: lconst_1
       6: ladd
       7: putfield      #8                  // Field produced:J
      10: aload_0
      11: getfield      #9                  // Field actual:Lreactor/core/CoreSubscriber;
      14: aload_1
      15: invokeinterface #10,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      20: aload_0
      21: getfield      #2                  // Field expander:Ljava/util/function/Function;
      24: aload_1
      25: invokeinterface #11,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      30: ldc           #12                 // String The expander returned a null Publisher
      32: invokestatic  #13                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      35: checkcast     #14                 // class org/reactivestreams/Publisher
      38: astore_2
      39: goto          66
      42: astore_3
      43: aload_3
      44: invokestatic  #16                 // Method reactor/core/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
      47: aload_0
      48: invokespecial #17                 // Method reactor/core/publisher/Operators$MultiSubscriptionSubscriber.cancel:()V
      51: aload_0
      52: getfield      #9                  // Field actual:Lreactor/core/CoreSubscriber;
      55: aload_3
      56: invokeinterface #18,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      61: aload_0
      62: invokevirtual #19                 // Method drainQueue:()V
      65: return
      66: aload_0
      67: getfield      #6                  // Field queue:Ljava/util/Queue;
      70: aload_2
      71: invokeinterface #20,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      76: pop
      77: return
    Exception table:
       from    to  target type
          20    39    42   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokestatic  #21                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       4: invokevirtual #7                  // Method set:(Lorg/reactivestreams/Subscription;)V
       7: aload_0
       8: invokespecial #17                 // Method reactor/core/publisher/Operators$MultiSubscriptionSubscriber.cancel:()V
      11: aload_0
      12: getfield      #9                  // Field actual:Lreactor/core/CoreSubscriber;
      15: aload_1
      16: invokeinterface #18,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      21: aload_0
      22: invokevirtual #19                 // Method drainQueue:()V
      25: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #22                 // Field active:Z
       5: aload_0
       6: invokevirtual #19                 // Method drainQueue:()V
       9: return

  public void cancel();
    Code:
       0: aload_0
       1: invokespecial #17                 // Method reactor/core/publisher/Operators$MultiSubscriptionSubscriber.cancel:()V
       4: aload_0
       5: invokevirtual #19                 // Method drainQueue:()V
       8: return

  void drainQueue();
    Code:
       0: getstatic     #23                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          123
      10: aload_0
      11: getfield      #6                  // Field queue:Ljava/util/Queue;
      14: astore_1
      15: aload_0
      16: invokevirtual #25                 // Method isCancelled:()Z
      19: ifeq          31
      22: aload_1
      23: invokeinterface #26,  1           // InterfaceMethod java/util/Queue.clear:()V
      28: goto          113
      31: aload_0
      32: getfield      #22                 // Field active:Z
      35: ifne          113
      38: aload_1
      39: invokeinterface #27,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      44: ifeq          70
      47: aload_0
      48: invokestatic  #21                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      51: invokevirtual #7                  // Method set:(Lorg/reactivestreams/Subscription;)V
      54: aload_0
      55: invokespecial #17                 // Method reactor/core/publisher/Operators$MultiSubscriptionSubscriber.cancel:()V
      58: aload_0
      59: getfield      #9                  // Field actual:Lreactor/core/CoreSubscriber;
      62: invokeinterface #28,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      67: goto          113
      70: aload_1
      71: invokeinterface #29,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      76: checkcast     #14                 // class org/reactivestreams/Publisher
      79: astore_2
      80: aload_0
      81: getfield      #8                  // Field produced:J
      84: lstore_3
      85: lload_3
      86: lconst_0
      87: lcmp
      88: ifeq          101
      91: aload_0
      92: lconst_0
      93: putfield      #8                  // Field produced:J
      96: aload_0
      97: lload_3
      98: invokevirtual #30                 // Method produced:(J)V
     101: aload_0
     102: iconst_1
     103: putfield      #22                 // Field active:Z
     106: aload_2
     107: aload_0
     108: invokeinterface #31,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     113: getstatic     #23                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     116: aload_0
     117: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     120: ifne          10
     123: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #33                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     31
       7: aload_0
       8: getfield      #6                  // Field queue:Ljava/util/Queue;
      11: ifnull        26
      14: aload_0
      15: getfield      #6                  // Field queue:Ljava/util/Queue;
      18: invokeinterface #34,  1           // InterfaceMethod java/util/Queue.size:()I
      23: goto          27
      26: iconst_0
      27: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      30: areturn
      31: aload_0
      32: aload_1
      33: invokespecial #36                 // Method reactor/core/publisher/Operators$MultiSubscriptionSubscriber.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      36: areturn

  static {};
    Code:
       0: ldc           #37                 // class reactor/core/publisher/FluxExpand$ExpandBreathSubscriber
       2: ldc           #38                 // String wip
       4: invokestatic  #39                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #23                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
