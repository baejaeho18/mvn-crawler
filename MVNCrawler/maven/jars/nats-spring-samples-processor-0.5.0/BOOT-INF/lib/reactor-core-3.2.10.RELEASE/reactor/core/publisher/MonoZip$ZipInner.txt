Compiled from "MonoZip.java"
final class reactor.core.publisher.MonoZip$ZipInner<R> implements reactor.core.publisher.InnerConsumer<java.lang.Object> {
  final reactor.core.publisher.MonoZip$ZipCoordinator<R> parent;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoZip$ZipInner, org.reactivestreams.Subscription> S;

  java.lang.Object value;

  java.lang.Throwable error;

  reactor.core.publisher.MonoZip$ZipInner(reactor.core.publisher.MonoZip$ZipCoordinator<R>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
       9: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #3                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     26
       7: aload_0
       8: getfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
      11: invokestatic  #5                  // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      14: if_acmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: invokestatic  #6                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      25: areturn
      26: aload_1
      27: getstatic     #7                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      30: if_acmpne     38
      33: aload_0
      34: getfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
      37: areturn
      38: aload_1
      39: getstatic     #8                  // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      42: if_acmpne     50
      45: aload_0
      46: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
      49: areturn
      50: aload_1
      51: getstatic     #9                  // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      54: if_acmpne     62
      57: aload_0
      58: getfield      #10                 // Field error:Ljava/lang/Throwable;
      61: areturn
      62: aconst_null
      63: areturn

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
       4: invokevirtual #11                 // Method reactor/core/publisher/MonoZip$ZipCoordinator.currentContext:()Lreactor/util/context/Context;
       7: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #12                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #13                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          23
      11: aload_1
      12: ldc2_w        #15                 // long 9223372036854775807l
      15: invokeinterface #17,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      20: goto          29
      23: aload_1
      24: invokeinterface #18,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      29: return

  public void onNext(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #19                 // Field value:Ljava/lang/Object;
       4: ifnonnull     19
       7: aload_0
       8: aload_1
       9: putfield      #19                 // Field value:Ljava/lang/Object;
      12: aload_0
      13: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
      16: invokevirtual #20                 // Method reactor/core/publisher/MonoZip$ZipCoordinator.signal:()V
      19: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
       9: getfield      #21                 // Field reactor/core/publisher/MonoZip$ZipCoordinator.delayError:Z
      12: ifeq          25
      15: aload_0
      16: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
      19: invokevirtual #20                 // Method reactor/core/publisher/MonoZip$ZipCoordinator.signal:()V
      22: goto          70
      25: aload_0
      26: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
      29: getfield      #22                 // Field reactor/core/publisher/MonoZip$ZipCoordinator.subscribers:[Lreactor/core/publisher/MonoZip$ZipInner;
      32: arraylength
      33: istore_2
      34: getstatic     #23                 // Field reactor/core/publisher/MonoZip$ZipCoordinator.DONE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      37: aload_0
      38: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
      41: iload_2
      42: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
      45: iload_2
      46: if_icmpeq     70
      49: aload_0
      50: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
      53: aload_0
      54: invokevirtual #25                 // Method reactor/core/publisher/MonoZip$ZipCoordinator.cancelExcept:(Lreactor/core/publisher/MonoZip$ZipInner;)V
      57: aload_0
      58: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
      61: getfield      #26                 // Field reactor/core/publisher/MonoZip$ZipCoordinator.actual:Lreactor/core/CoreSubscriber;
      64: aload_1
      65: invokeinterface #27,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      70: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #19                 // Field value:Ljava/lang/Object;
       4: ifnonnull     71
       7: aload_0
       8: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
      11: getfield      #21                 // Field reactor/core/publisher/MonoZip$ZipCoordinator.delayError:Z
      14: ifeq          27
      17: aload_0
      18: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
      21: invokevirtual #20                 // Method reactor/core/publisher/MonoZip$ZipCoordinator.signal:()V
      24: goto          71
      27: aload_0
      28: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
      31: getfield      #22                 // Field reactor/core/publisher/MonoZip$ZipCoordinator.subscribers:[Lreactor/core/publisher/MonoZip$ZipInner;
      34: arraylength
      35: istore_1
      36: getstatic     #23                 // Field reactor/core/publisher/MonoZip$ZipCoordinator.DONE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      39: aload_0
      40: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
      43: iload_1
      44: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
      47: iload_1
      48: if_icmpeq     71
      51: aload_0
      52: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
      55: aload_0
      56: invokevirtual #25                 // Method reactor/core/publisher/MonoZip$ZipCoordinator.cancelExcept:(Lreactor/core/publisher/MonoZip$ZipInner;)V
      59: aload_0
      60: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoZip$ZipCoordinator;
      63: getfield      #26                 // Field reactor/core/publisher/MonoZip$ZipCoordinator.actual:Lreactor/core/CoreSubscriber;
      66: invokeinterface #28,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      71: return

  void cancel();
    Code:
       0: getstatic     #12                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #29                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  static {};
    Code:
       0: ldc           #30                 // class reactor/core/publisher/MonoZip$ZipInner
       2: ldc           #31                 // class org/reactivestreams/Subscription
       4: ldc           #32                 // String s
       6: invokestatic  #33                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #12                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
