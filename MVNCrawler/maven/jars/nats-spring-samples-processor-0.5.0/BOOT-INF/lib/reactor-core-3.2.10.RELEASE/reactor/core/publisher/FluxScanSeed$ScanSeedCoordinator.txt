Compiled from "FluxScanSeed.java"
final class reactor.core.publisher.FluxScanSeed$ScanSeedCoordinator<T, R> extends reactor.core.publisher.Operators$MultiSubscriptionSubscriber<R, R> {
  final java.util.function.Supplier<R> initialSupplier;

  final reactor.core.publisher.Flux<? extends T> source;

  final java.util.function.BiFunction<R, ? super T, R> accumulator;

  volatile int wip;

  long produced;

  private reactor.core.publisher.FluxScanSeed$ScanSeedSubscriber<T, R> seedSubscriber;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxScanSeed$ScanSeedCoordinator> WIP;

  reactor.core.publisher.FluxScanSeed$ScanSeedCoordinator(reactor.core.CoreSubscriber<? super R>, reactor.core.publisher.Flux<? extends T>, java.util.function.BiFunction<R, ? super T, R>, java.util.function.Supplier<R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/Operators$MultiSubscriptionSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field source:Lreactor/core/publisher/Flux;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field accumulator:Ljava/util/function/BiFunction;
      15: aload_0
      16: aload         4
      18: putfield      #4                  // Field initialSupplier:Ljava/util/function/Supplier;
      21: return

  public void onComplete();
    Code:
       0: getstatic     #5                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          173
      10: aload_0
      11: invokevirtual #7                  // Method isCancelled:()Z
      14: ifeq          18
      17: return
      18: aconst_null
      19: aload_0
      20: getfield      #8                  // Field seedSubscriber:Lreactor/core/publisher/FluxScanSeed$ScanSeedSubscriber;
      23: if_acmpeq     47
      26: aload_0
      27: getfield      #9                  // Field subscription:Lorg/reactivestreams/Subscription;
      30: aload_0
      31: getfield      #8                  // Field seedSubscriber:Lreactor/core/publisher/FluxScanSeed$ScanSeedSubscriber;
      34: if_acmpne     47
      37: aload_0
      38: getfield      #10                 // Field actual:Lreactor/core/CoreSubscriber;
      41: invokeinterface #11,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      46: return
      47: aload_0
      48: getfield      #12                 // Field produced:J
      51: lstore_1
      52: lload_1
      53: lconst_0
      54: lcmp
      55: ifeq          68
      58: aload_0
      59: lconst_0
      60: putfield      #12                 // Field produced:J
      63: aload_0
      64: lload_1
      65: invokevirtual #13                 // Method produced:(J)V
      68: aconst_null
      69: aload_0
      70: getfield      #8                  // Field seedSubscriber:Lreactor/core/publisher/FluxScanSeed$ScanSeedSubscriber;
      73: if_acmpne     144
      76: aload_0
      77: getfield      #4                  // Field initialSupplier:Ljava/util/function/Supplier;
      80: invokeinterface #14,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      85: ldc           #15                 // String The initial value supplied is null
      87: invokestatic  #16                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      90: astore_3
      91: goto          115
      94: astore        4
      96: aload_0
      97: aload         4
      99: aload_0
     100: getfield      #10                 // Field actual:Lreactor/core/CoreSubscriber;
     103: invokeinterface #18,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     108: invokestatic  #19                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     111: invokevirtual #20                 // Method onError:(Ljava/lang/Throwable;)V
     114: return
     115: aload_0
     116: aload_0
     117: aload_3
     118: invokestatic  #21                 // Method reactor/core/publisher/Operators.scalarSubscription:(Lreactor/core/CoreSubscriber;Ljava/lang/Object;)Lorg/reactivestreams/Subscription;
     121: invokevirtual #22                 // Method onSubscribe:(Lorg/reactivestreams/Subscription;)V
     124: aload_0
     125: new           #23                 // class reactor/core/publisher/FluxScanSeed$ScanSeedSubscriber
     128: dup
     129: aload_0
     130: aload_0
     131: getfield      #3                  // Field accumulator:Ljava/util/function/BiFunction;
     134: aload_3
     135: invokespecial #24                 // Method reactor/core/publisher/FluxScanSeed$ScanSeedSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/BiFunction;Ljava/lang/Object;)V
     138: putfield      #8                  // Field seedSubscriber:Lreactor/core/publisher/FluxScanSeed$ScanSeedSubscriber;
     141: goto          155
     144: aload_0
     145: getfield      #2                  // Field source:Lreactor/core/publisher/Flux;
     148: aload_0
     149: getfield      #8                  // Field seedSubscriber:Lreactor/core/publisher/FluxScanSeed$ScanSeedSubscriber;
     152: invokevirtual #25                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
     155: aload_0
     156: invokevirtual #7                  // Method isCancelled:()Z
     159: ifeq          163
     162: return
     163: getstatic     #5                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     166: aload_0
     167: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     170: ifne          10
     173: return
    Exception table:
       from    to  target type
          76    91    94   Class java/lang/Throwable

  public void onNext(R);
    Code:
       0: aload_0
       1: dup
       2: getfield      #12                 // Field produced:J
       5: lconst_1
       6: ladd
       7: putfield      #12                 // Field produced:J
      10: aload_0
      11: getfield      #10                 // Field actual:Lreactor/core/CoreSubscriber;
      14: aload_1
      15: invokeinterface #27,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      20: return

  static {};
    Code:
       0: ldc           #28                 // class reactor/core/publisher/FluxScanSeed$ScanSeedCoordinator
       2: ldc           #29                 // String wip
       4: invokestatic  #30                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #5                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
