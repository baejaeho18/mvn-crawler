Compiled from "MonoHandleFuseable.java"
final class reactor.core.publisher.MonoHandleFuseable<T, R> extends reactor.core.publisher.MonoOperator<T, R> implements reactor.core.Fuseable {
  final java.util.function.BiConsumer<? super T, reactor.core.publisher.SynchronousSink<R>> handler;

  reactor.core.publisher.MonoHandleFuseable(reactor.core.publisher.Mono<? extends T>, java.util.function.BiConsumer<? super T, reactor.core.publisher.SynchronousSink<R>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String handler
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/function/BiConsumer
      15: putfield      #5                  // Field handler:Ljava/util/function/BiConsumer;
      18: return

  public void subscribe(reactor.core.CoreSubscriber<? super R>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field source:Lreactor/core/publisher/Mono;
       4: new           #7                  // class reactor/core/publisher/FluxHandleFuseable$HandleFuseableSubscriber
       7: dup
       8: aload_1
       9: aload_0
      10: getfield      #5                  // Field handler:Ljava/util/function/BiConsumer;
      13: invokespecial #8                  // Method reactor/core/publisher/FluxHandleFuseable$HandleFuseableSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/BiConsumer;)V
      16: invokevirtual #9                  // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      19: return
}
