Compiled from "EmitterProcessor.java"
public final class reactor.core.publisher.EmitterProcessor<T> extends reactor.core.publisher.FluxProcessor<T, T> {
  static final reactor.core.publisher.FluxPublish$PubSubInner[] EMPTY;

  final int prefetch;

  final boolean autoCancel;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.EmitterProcessor, org.reactivestreams.Subscription> S;

  volatile reactor.core.publisher.FluxPublish$PubSubInner<T>[] subscribers;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.EmitterProcessor, reactor.core.publisher.FluxPublish$PubSubInner[]> SUBSCRIBERS;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.EmitterProcessor> WIP;

  volatile java.util.Queue<T> queue;

  int sourceMode;

  volatile boolean done;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.EmitterProcessor, java.lang.Throwable> ERROR;

  public static <E> reactor.core.publisher.EmitterProcessor<E> create();
    Code:
       0: getstatic     #1                  // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       3: iconst_1
       4: invokestatic  #2                  // Method create:(IZ)Lreactor/core/publisher/EmitterProcessor;
       7: areturn

  public static <E> reactor.core.publisher.EmitterProcessor<E> create(boolean);
    Code:
       0: getstatic     #1                  // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       3: iload_0
       4: invokestatic  #2                  // Method create:(IZ)Lreactor/core/publisher/EmitterProcessor;
       7: areturn

  public static <E> reactor.core.publisher.EmitterProcessor<E> create(int);
    Code:
       0: iload_0
       1: iconst_1
       2: invokestatic  #2                  // Method create:(IZ)Lreactor/core/publisher/EmitterProcessor;
       5: areturn

  public static <E> reactor.core.publisher.EmitterProcessor<E> create(int, boolean);
    Code:
       0: new           #3                  // class reactor/core/publisher/EmitterProcessor
       3: dup
       4: iload_1
       5: iload_0
       6: invokespecial #4                  // Method "<init>":(ZI)V
       9: areturn

  reactor.core.publisher.EmitterProcessor(boolean, int);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method reactor/core/publisher/FluxProcessor."<init>":()V
       4: iload_2
       5: iconst_1
       6: if_icmpge     36
       9: new           #6                  // class java/lang/IllegalArgumentException
      12: dup
      13: new           #7                  // class java/lang/StringBuilder
      16: dup
      17: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
      20: ldc           #9                  // String bufferSize must be strictly positive, was:
      22: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: iload_2
      26: invokevirtual #11                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      29: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: invokespecial #13                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      35: athrow
      36: aload_0
      37: iload_1
      38: putfield      #14                 // Field autoCancel:Z
      41: aload_0
      42: iload_2
      43: putfield      #15                 // Field prefetch:I
      46: getstatic     #16                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      49: aload_0
      50: getstatic     #17                 // Field EMPTY:[Lreactor/core/publisher/FluxPublish$PubSubInner;
      53: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      56: return

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #19                 // Field subscribers:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       4: invokestatic  #20                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: ldc           #21                 // String subscribe
       3: invokestatic  #22                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #23                 // class reactor/core/publisher/EmitterProcessor$EmitterInner
      10: dup
      11: aload_1
      12: aload_0
      13: invokespecial #24                 // Method reactor/core/publisher/EmitterProcessor$EmitterInner."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/EmitterProcessor;)V
      16: astore_2
      17: aload_1
      18: aload_2
      19: invokeinterface #25,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      24: aload_2
      25: invokevirtual #26                 // Method reactor/core/publisher/EmitterProcessor$EmitterInner.isCancelled:()Z
      28: ifeq          32
      31: return
      32: aload_0
      33: aload_2
      34: invokevirtual #27                 // Method add:(Lreactor/core/publisher/EmitterProcessor$EmitterInner;)Z
      37: ifeq          59
      40: aload_2
      41: invokevirtual #26                 // Method reactor/core/publisher/EmitterProcessor$EmitterInner.isCancelled:()Z
      44: ifeq          52
      47: aload_0
      48: aload_2
      49: invokevirtual #28                 // Method remove:(Lreactor/core/publisher/FluxPublish$PubSubInner;)V
      52: aload_0
      53: invokevirtual #29                 // Method drain:()V
      56: goto          90
      59: aload_0
      60: getfield      #30                 // Field error:Ljava/lang/Throwable;
      63: astore_3
      64: aload_3
      65: ifnull        81
      68: aload_2
      69: getfield      #31                 // Field reactor/core/publisher/EmitterProcessor$EmitterInner.actual:Lreactor/core/CoreSubscriber;
      72: aload_3
      73: invokeinterface #32,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      78: goto          90
      81: aload_2
      82: getfield      #31                 // Field reactor/core/publisher/EmitterProcessor$EmitterInner.actual:Lreactor/core/CoreSubscriber;
      85: invokeinterface #33,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      90: return

  public int getPending();
    Code:
       0: aload_0
       1: getfield      #34                 // Field queue:Ljava/util/Queue;
       4: astore_1
       5: aload_1
       6: ifnull        18
       9: aload_1
      10: invokeinterface #35,  1           // InterfaceMethod java/util/Queue.size:()I
      15: goto          19
      18: iconst_0
      19: ireturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #36                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #37                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          112
      11: aload_1
      12: instanceof    #38                 // class reactor/core/Fuseable$QueueSubscription
      15: ifeq          80
      18: aload_1
      19: checkcast     #38                 // class reactor/core/Fuseable$QueueSubscription
      22: astore_2
      23: aload_2
      24: iconst_3
      25: invokeinterface #40,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      30: istore_3
      31: iload_3
      32: iconst_1
      33: if_icmpne     51
      36: aload_0
      37: iload_3
      38: putfield      #41                 // Field sourceMode:I
      41: aload_0
      42: aload_2
      43: putfield      #34                 // Field queue:Ljava/util/Queue;
      46: aload_0
      47: invokevirtual #29                 // Method drain:()V
      50: return
      51: iload_3
      52: iconst_2
      53: if_icmpne     80
      56: aload_0
      57: iload_3
      58: putfield      #41                 // Field sourceMode:I
      61: aload_0
      62: aload_2
      63: putfield      #34                 // Field queue:Ljava/util/Queue;
      66: aload_1
      67: aload_0
      68: getfield      #15                 // Field prefetch:I
      71: invokestatic  #42                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      74: invokeinterface #43,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      79: return
      80: aload_0
      81: aload_0
      82: getfield      #15                 // Field prefetch:I
      85: invokestatic  #44                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      88: invokeinterface #45,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      93: checkcast     #46                 // class java/util/Queue
      96: putfield      #34                 // Field queue:Ljava/util/Queue;
      99: aload_1
     100: aload_0
     101: getfield      #15                 // Field prefetch:I
     104: invokestatic  #42                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
     107: invokeinterface #43,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     112: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #47                 // Field done:Z
       4: ifeq          16
       7: aload_1
       8: aload_0
       9: invokevirtual #48                 // Method currentContext:()Lreactor/util/context/Context;
      12: invokestatic  #49                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      15: return
      16: aload_0
      17: getfield      #41                 // Field sourceMode:I
      20: iconst_2
      21: if_icmpne     29
      24: aload_0
      25: invokevirtual #29                 // Method drain:()V
      28: return
      29: aload_1
      30: ldc           #50                 // String onNext
      32: invokestatic  #22                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      35: pop
      36: aload_0
      37: getfield      #34                 // Field queue:Ljava/util/Queue;
      40: astore_2
      41: aload_2
      42: ifnonnull     102
      45: getstatic     #36                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      48: aload_0
      49: invokestatic  #51                 // Method reactor/core/publisher/Operators.emptySubscription:()Lorg/reactivestreams/Subscription;
      52: invokestatic  #37                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
      55: ifeq          82
      58: aload_0
      59: getfield      #15                 // Field prefetch:I
      62: invokestatic  #44                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      65: invokeinterface #45,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      70: checkcast     #46                 // class java/util/Queue
      73: astore_2
      74: aload_0
      75: aload_2
      76: putfield      #34                 // Field queue:Ljava/util/Queue;
      79: goto          102
      82: aload_0
      83: invokevirtual #52                 // Method isDisposed:()Z
      86: ifeq          90
      89: return
      90: aload_0
      91: getfield      #34                 // Field queue:Ljava/util/Queue;
      94: astore_2
      95: aload_2
      96: ifnull        82
      99: goto          102
     102: aload_2
     103: aload_1
     104: invokeinterface #53,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     109: ifne          121
     112: ldc2_w        #54                 // long 10l
     115: invokestatic  #56                 // Method java/util/concurrent/locks/LockSupport.parkNanos:(J)V
     118: goto          102
     121: aload_0
     122: invokevirtual #29                 // Method drain:()V
     125: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_1
       1: ldc           #57                 // String onError
       3: invokestatic  #22                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #47                 // Field done:Z
      11: ifeq          23
      14: aload_1
      15: aload_0
      16: invokevirtual #48                 // Method currentContext:()Lreactor/util/context/Context;
      19: invokestatic  #58                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      22: return
      23: getstatic     #59                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      26: aload_0
      27: aload_1
      28: invokestatic  #60                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      31: ifeq          46
      34: aload_0
      35: iconst_1
      36: putfield      #47                 // Field done:Z
      39: aload_0
      40: invokevirtual #29                 // Method drain:()V
      43: goto          50
      46: aload_1
      47: invokestatic  #61                 // Method reactor/core/publisher/Operators.onErrorDroppedMulticast:(Ljava/lang/Throwable;)V
      50: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #47                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #47                 // Field done:Z
      13: aload_0
      14: invokevirtual #29                 // Method drain:()V
      17: return

  public java.lang.Throwable getError();
    Code:
       0: aload_0
       1: getfield      #30                 // Field error:Ljava/lang/Throwable;
       4: areturn

  public boolean isCancelled();
    Code:
       0: invokestatic  #62                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       3: aload_0
       4: getfield      #63                 // Field s:Lorg/reactivestreams/Subscription;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public final int getBufferSize();
    Code:
       0: aload_0
       1: getfield      #15                 // Field prefetch:I
       4: ireturn

  public boolean isTerminated();
    Code:
       0: aload_0
       1: getfield      #47                 // Field done:Z
       4: ifeq          18
       7: aload_0
       8: invokevirtual #64                 // Method getPending:()I
      11: ifne          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #15                 // Field prefetch:I
       4: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #65                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #63                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #66                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #64                 // Method getPending:()I
      23: invokestatic  #67                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aload_1
      28: getstatic     #68                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: invokevirtual #69                 // Method isCancelled:()Z
      38: invokestatic  #70                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aload_1
      43: getstatic     #71                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      46: if_acmpne     57
      49: aload_0
      50: invokevirtual #72                 // Method getPrefetch:()I
      53: invokestatic  #67                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      56: areturn
      57: aload_0
      58: aload_1
      59: invokespecial #73                 // Method reactor/core/publisher/FluxProcessor.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      62: areturn

  final void drain();
    Code:
       0: getstatic     #74                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #75                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: iconst_1
      12: istore_1
      13: aload_0
      14: getfield      #47                 // Field done:Z
      17: istore_2
      18: aload_0
      19: getfield      #34                 // Field queue:Ljava/util/Queue;
      22: astore_3
      23: aload_3
      24: ifnull        36
      27: aload_3
      28: invokeinterface #76,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      33: ifeq          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: istore        4
      43: aload_0
      44: iload_2
      45: iload         4
      47: invokevirtual #77                 // Method checkTerminated:(ZZ)Z
      50: ifeq          54
      53: return
      54: aload_0
      55: getfield      #19                 // Field subscribers:[Lreactor/core/publisher/FluxPublish$PubSubInner;
      58: astore        5
      60: aload         5
      62: getstatic     #17                 // Field EMPTY:[Lreactor/core/publisher/FluxPublish$PubSubInner;
      65: if_acmpeq     460
      68: iload         4
      70: ifne          460
      73: ldc2_w        #79                 // long 9223372036854775807l
      76: lstore        6
      78: aload         5
      80: arraylength
      81: istore        8
      83: iconst_0
      84: istore        9
      86: aload         5
      88: astore        10
      90: aload         10
      92: arraylength
      93: istore        11
      95: iconst_0
      96: istore        12
      98: iload         12
     100: iload         11
     102: if_icmpge     147
     105: aload         10
     107: iload         12
     109: aaload
     110: astore        13
     112: aload         13
     114: getfield      #81                 // Field reactor/core/publisher/FluxPublish$PubSubInner.requested:J
     117: lstore        14
     119: lload         14
     121: lconst_0
     122: lcmp
     123: iflt          138
     126: lload         6
     128: lload         14
     130: invokestatic  #82                 // Method java/lang/Math.min:(JJ)J
     133: lstore        6
     135: goto          141
     138: iinc          9, 1
     141: iinc          12, 1
     144: goto          98
     147: iload         8
     149: iload         9
     151: if_icmpne     233
     154: aload_3
     155: invokeinterface #83,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
     160: astore        10
     162: goto          193
     165: astore        11
     167: getstatic     #59                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     170: aload_0
     171: aload_0
     172: getfield      #63                 // Field s:Lorg/reactivestreams/Subscription;
     175: aload         11
     177: aload_0
     178: invokevirtual #48                 // Method currentContext:()Lreactor/util/context/Context;
     181: invokestatic  #85                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     184: invokestatic  #60                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
     187: pop
     188: iconst_1
     189: istore_2
     190: aconst_null
     191: astore        10
     193: aload_0
     194: iload_2
     195: aload         10
     197: ifnonnull     204
     200: iconst_1
     201: goto          205
     204: iconst_0
     205: invokevirtual #77                 // Method checkTerminated:(ZZ)Z
     208: ifeq          212
     211: return
     212: aload_0
     213: getfield      #41                 // Field sourceMode:I
     216: iconst_1
     217: if_icmpeq     13
     220: aload_0
     221: getfield      #63                 // Field s:Lorg/reactivestreams/Subscription;
     224: lconst_1
     225: invokeinterface #43,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     230: goto          13
     233: iconst_0
     234: istore        10
     236: iload         10
     238: i2l
     239: lload         6
     241: lcmp
     242: ifge          417
     245: iload         9
     247: ldc           #87                 // int -2147483648
     249: if_icmpeq     417
     252: aload_0
     253: getfield      #47                 // Field done:Z
     256: istore_2
     257: aload_3
     258: invokeinterface #83,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
     263: astore        11
     265: goto          296
     268: astore        12
     270: getstatic     #59                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     273: aload_0
     274: aload_0
     275: getfield      #63                 // Field s:Lorg/reactivestreams/Subscription;
     278: aload         12
     280: aload_0
     281: invokevirtual #48                 // Method currentContext:()Lreactor/util/context/Context;
     284: invokestatic  #85                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     287: invokestatic  #60                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
     290: pop
     291: iconst_1
     292: istore_2
     293: aconst_null
     294: astore        11
     296: aload         11
     298: ifnonnull     305
     301: iconst_1
     302: goto          306
     305: iconst_0
     306: istore        4
     308: aload_0
     309: iload_2
     310: iload         4
     312: invokevirtual #77                 // Method checkTerminated:(ZZ)Z
     315: ifeq          319
     318: return
     319: iload         4
     321: ifeq          347
     324: aload_0
     325: getfield      #41                 // Field sourceMode:I
     328: iconst_1
     329: if_icmpne     417
     332: aload_0
     333: iconst_1
     334: putfield      #47                 // Field done:Z
     337: aload_0
     338: iconst_1
     339: iconst_1
     340: invokevirtual #77                 // Method checkTerminated:(ZZ)Z
     343: pop
     344: goto          417
     347: aload         5
     349: astore        12
     351: aload         12
     353: arraylength
     354: istore        13
     356: iconst_0
     357: istore        14
     359: iload         14
     361: iload         13
     363: if_icmpge     411
     366: aload         12
     368: iload         14
     370: aaload
     371: astore        15
     373: aload         15
     375: getfield      #88                 // Field reactor/core/publisher/FluxPublish$PubSubInner.actual:Lreactor/core/CoreSubscriber;
     378: aload         11
     380: invokeinterface #89,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     385: getstatic     #90                 // Field reactor/core/publisher/FluxPublish$PublishInner.REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     388: aload         15
     390: lconst_1
     391: invokestatic  #91                 // Method reactor/core/publisher/Operators.producedCancellable:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
     394: ldc2_w        #92                 // long -9223372036854775808l
     397: lcmp
     398: ifne          405
     401: ldc           #87                 // int -2147483648
     403: istore        9
     405: iinc          14, 1
     408: goto          359
     411: iinc          10, 1
     414: goto          236
     417: iload         10
     419: ifeq          442
     422: aload_0
     423: getfield      #41                 // Field sourceMode:I
     426: iconst_1
     427: if_icmpeq     442
     430: aload_0
     431: getfield      #63                 // Field s:Lorg/reactivestreams/Subscription;
     434: iload         10
     436: i2l
     437: invokeinterface #43,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     442: lload         6
     444: lconst_0
     445: lcmp
     446: ifeq          457
     449: iload         4
     451: ifne          457
     454: goto          13
     457: goto          486
     460: aload_0
     461: getfield      #41                 // Field sourceMode:I
     464: iconst_1
     465: if_icmpne     486
     468: aload_0
     469: iconst_1
     470: putfield      #47                 // Field done:Z
     473: aload_0
     474: iconst_1
     475: iload         4
     477: invokevirtual #77                 // Method checkTerminated:(ZZ)Z
     480: ifeq          486
     483: goto          506
     486: getstatic     #74                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     489: aload_0
     490: iload_1
     491: ineg
     492: invokevirtual #94                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     495: istore_1
     496: iload_1
     497: ifne          503
     500: goto          506
     503: goto          13
     506: return
    Exception table:
       from    to  target type
         154   162   165   Class java/lang/Throwable
         257   265   268   Class java/lang/Throwable

  reactor.core.publisher.FluxPublish$PubSubInner<T>[] terminate();
    Code:
       0: getstatic     #16                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: getstatic     #95                 // Field reactor/core/publisher/FluxPublish$PublishSubscriber.TERMINATED:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       7: invokevirtual #96                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #97                 // class "[Lreactor/core/publisher/FluxPublish$PubSubInner;"
      13: areturn

  boolean checkTerminated(boolean, boolean);
    Code:
       0: aload_0
       1: getfield      #63                 // Field s:Lorg/reactivestreams/Subscription;
       4: invokestatic  #62                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpne     39
      10: aload_0
      11: getfield      #14                 // Field autoCancel:Z
      14: ifeq          37
      17: aload_0
      18: invokevirtual #98                 // Method terminate:()[Lreactor/core/publisher/FluxPublish$PubSubInner;
      21: pop
      22: aload_0
      23: getfield      #34                 // Field queue:Ljava/util/Queue;
      26: astore_3
      27: aload_3
      28: ifnull        37
      31: aload_3
      32: invokeinterface #99,  1           // InterfaceMethod java/util/Queue.clear:()V
      37: iconst_1
      38: ireturn
      39: iload_1
      40: ifeq          174
      43: aload_0
      44: getfield      #30                 // Field error:Ljava/lang/Throwable;
      47: astore_3
      48: aload_3
      49: ifnull        124
      52: aload_3
      53: getstatic     #100                // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      56: if_acmpeq     124
      59: aload_0
      60: getfield      #34                 // Field queue:Ljava/util/Queue;
      63: astore        4
      65: aload         4
      67: ifnull        77
      70: aload         4
      72: invokeinterface #99,  1           // InterfaceMethod java/util/Queue.clear:()V
      77: aload_0
      78: invokevirtual #98                 // Method terminate:()[Lreactor/core/publisher/FluxPublish$PubSubInner;
      81: astore        5
      83: aload         5
      85: arraylength
      86: istore        6
      88: iconst_0
      89: istore        7
      91: iload         7
      93: iload         6
      95: if_icmpge     122
      98: aload         5
     100: iload         7
     102: aaload
     103: astore        8
     105: aload         8
     107: getfield      #88                 // Field reactor/core/publisher/FluxPublish$PubSubInner.actual:Lreactor/core/CoreSubscriber;
     110: aload_3
     111: invokeinterface #32,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     116: iinc          7, 1
     119: goto          91
     122: iconst_1
     123: ireturn
     124: iload_2
     125: ifeq          174
     128: aload_0
     129: invokevirtual #98                 // Method terminate:()[Lreactor/core/publisher/FluxPublish$PubSubInner;
     132: astore        4
     134: aload         4
     136: arraylength
     137: istore        5
     139: iconst_0
     140: istore        6
     142: iload         6
     144: iload         5
     146: if_icmpge     172
     149: aload         4
     151: iload         6
     153: aaload
     154: astore        7
     156: aload         7
     158: getfield      #88                 // Field reactor/core/publisher/FluxPublish$PubSubInner.actual:Lreactor/core/CoreSubscriber;
     161: invokeinterface #33,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     166: iinc          6, 1
     169: goto          142
     172: iconst_1
     173: ireturn
     174: iconst_0
     175: ireturn

  final boolean add(reactor.core.publisher.EmitterProcessor$EmitterInner<T>);
    Code:
       0: aload_0
       1: getfield      #19                 // Field subscribers:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       4: astore_2
       5: aload_2
       6: getstatic     #95                 // Field reactor/core/publisher/FluxPublish$PublishSubscriber.TERMINATED:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       9: if_acmpne     14
      12: iconst_0
      13: ireturn
      14: aload_2
      15: arraylength
      16: istore_3
      17: iload_3
      18: iconst_1
      19: iadd
      20: anewarray     #101                // class reactor/core/publisher/FluxPublish$PubSubInner
      23: astore        4
      25: aload_2
      26: iconst_0
      27: aload         4
      29: iconst_0
      30: iload_3
      31: invokestatic  #102                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      34: aload         4
      36: iload_3
      37: aload_1
      38: aastore
      39: getstatic     #16                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      42: aload_0
      43: aload_2
      44: aload         4
      46: invokevirtual #103                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      49: ifeq          54
      52: iconst_1
      53: ireturn
      54: goto          0

  final void remove(reactor.core.publisher.FluxPublish$PubSubInner<T>);
    Code:
       0: aload_0
       1: getfield      #19                 // Field subscribers:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       4: astore_2
       5: aload_2
       6: getstatic     #95                 // Field reactor/core/publisher/FluxPublish$PublishSubscriber.TERMINATED:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       9: if_acmpeq     19
      12: aload_2
      13: getstatic     #17                 // Field EMPTY:[Lreactor/core/publisher/FluxPublish$PubSubInner;
      16: if_acmpne     20
      19: return
      20: aload_2
      21: arraylength
      22: istore_3
      23: iconst_m1
      24: istore        4
      26: iconst_0
      27: istore        5
      29: iload         5
      31: iload_3
      32: if_icmpge     56
      35: aload_2
      36: iload         5
      38: aaload
      39: aload_1
      40: if_acmpne     50
      43: iload         5
      45: istore        4
      47: goto          56
      50: iinc          5, 1
      53: goto          29
      56: iload         4
      58: ifge          62
      61: return
      62: iload_3
      63: iconst_1
      64: if_icmpne     75
      67: getstatic     #17                 // Field EMPTY:[Lreactor/core/publisher/FluxPublish$PubSubInner;
      70: astore        5
      72: goto          111
      75: iload_3
      76: iconst_1
      77: isub
      78: anewarray     #101                // class reactor/core/publisher/FluxPublish$PubSubInner
      81: astore        5
      83: aload_2
      84: iconst_0
      85: aload         5
      87: iconst_0
      88: iload         4
      90: invokestatic  #102                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      93: aload_2
      94: iload         4
      96: iconst_1
      97: iadd
      98: aload         5
     100: iload         4
     102: iload_3
     103: iload         4
     105: isub
     106: iconst_1
     107: isub
     108: invokestatic  #102                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     111: getstatic     #16                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     114: aload_0
     115: aload_2
     116: aload         5
     118: invokevirtual #103                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     121: ifeq          183
     124: aload_0
     125: getfield      #14                 // Field autoCancel:Z
     128: ifeq          183
     131: aload         5
     133: getstatic     #17                 // Field EMPTY:[Lreactor/core/publisher/FluxPublish$PubSubInner;
     136: if_acmpne     183
     139: getstatic     #36                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     142: aload_0
     143: invokestatic  #104                // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
     146: ifeq          183
     149: getstatic     #74                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     152: aload_0
     153: invokevirtual #75                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
     156: ifeq          160
     159: return
     160: aload_0
     161: invokevirtual #98                 // Method terminate:()[Lreactor/core/publisher/FluxPublish$PubSubInner;
     164: pop
     165: aload_0
     166: getfield      #34                 // Field queue:Ljava/util/Queue;
     169: astore        6
     171: aload         6
     173: ifnull        183
     176: aload         6
     178: invokeinterface #99,  1           // InterfaceMethod java/util/Queue.clear:()V
     183: return

  public long downstreamCount();
    Code:
       0: aload_0
       1: getfield      #19                 // Field subscribers:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       4: arraylength
       5: i2l
       6: lreturn

  static {};
    Code:
       0: iconst_0
       1: anewarray     #105                // class reactor/core/publisher/FluxPublish$PublishInner
       4: putstatic     #17                 // Field EMPTY:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       7: ldc           #3                  // class reactor/core/publisher/EmitterProcessor
       9: ldc           #106                // class org/reactivestreams/Subscription
      11: ldc           #107                // String s
      13: invokestatic  #108                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      16: putstatic     #36                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      19: ldc           #3                  // class reactor/core/publisher/EmitterProcessor
      21: ldc           #97                 // class "[Lreactor/core/publisher/FluxPublish$PubSubInner;"
      23: ldc           #109                // String subscribers
      25: invokestatic  #108                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      28: putstatic     #16                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: ldc           #3                  // class reactor/core/publisher/EmitterProcessor
      33: ldc           #110                // String wip
      35: invokestatic  #111                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      38: putstatic     #74                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      41: ldc           #3                  // class reactor/core/publisher/EmitterProcessor
      43: ldc           #84                 // class java/lang/Throwable
      45: ldc           #112                // String error
      47: invokestatic  #108                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      50: putstatic     #59                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      53: return
}
