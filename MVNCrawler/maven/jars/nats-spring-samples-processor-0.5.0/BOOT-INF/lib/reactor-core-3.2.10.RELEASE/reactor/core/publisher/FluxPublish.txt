Compiled from "FluxPublish.java"
final class reactor.core.publisher.FluxPublish<T> extends reactor.core.publisher.ConnectableFlux<T> implements reactor.core.Scannable {
  final reactor.core.publisher.Flux<? extends T> source;

  final int prefetch;

  final java.util.function.Supplier<? extends java.util.Queue<T>> queueSupplier;

  volatile reactor.core.publisher.FluxPublish$PublishSubscriber<T> connection;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxPublish, reactor.core.publisher.FluxPublish$PublishSubscriber> CONNECTION;

  reactor.core.publisher.FluxPublish(reactor.core.publisher.Flux<? extends T>, int, java.util.function.Supplier<? extends java.util.Queue<T>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/ConnectableFlux."<init>":()V
       4: iload_2
       5: ifgt          35
       8: new           #2                  // class java/lang/IllegalArgumentException
      11: dup
      12: new           #3                  // class java/lang/StringBuilder
      15: dup
      16: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #5                  // String bufferSize > 0 required but it was
      21: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_2
      25: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: aload_1
      37: ldc           #10                 // String source
      39: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      42: checkcast     #12                 // class reactor/core/publisher/Flux
      45: putfield      #13                 // Field source:Lreactor/core/publisher/Flux;
      48: aload_0
      49: iload_2
      50: putfield      #14                 // Field prefetch:I
      53: aload_0
      54: aload_3
      55: ldc           #15                 // String queueSupplier
      57: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      60: checkcast     #16                 // class java/util/function/Supplier
      63: putfield      #17                 // Field queueSupplier:Ljava/util/function/Supplier;
      66: return

  public void connect(java.util.function.Consumer<? super reactor.core.Disposable>);
    Code:
       0: aload_0
       1: getfield      #18                 // Field connection:Lreactor/core/publisher/FluxPublish$PublishSubscriber;
       4: astore_3
       5: aload_3
       6: ifnull        16
       9: aload_3
      10: invokevirtual #19                 // Method reactor/core/publisher/FluxPublish$PublishSubscriber.isTerminated:()Z
      13: ifeq          49
      16: new           #20                 // class reactor/core/publisher/FluxPublish$PublishSubscriber
      19: dup
      20: aload_0
      21: getfield      #14                 // Field prefetch:I
      24: aload_0
      25: invokespecial #21                 // Method reactor/core/publisher/FluxPublish$PublishSubscriber."<init>":(ILreactor/core/publisher/FluxPublish;)V
      28: astore        4
      30: getstatic     #22                 // Field CONNECTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      33: aload_0
      34: aload_3
      35: aload         4
      37: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      40: ifne          46
      43: goto          0
      46: aload         4
      48: astore_3
      49: aload_3
      50: invokevirtual #24                 // Method reactor/core/publisher/FluxPublish$PublishSubscriber.tryConnect:()Z
      53: istore_2
      54: goto          57
      57: aload_1
      58: aload_3
      59: invokeinterface #25,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      64: iload_2
      65: ifeq          76
      68: aload_0
      69: getfield      #13                 // Field source:Lreactor/core/publisher/Flux;
      72: aload_3
      73: invokevirtual #26                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      76: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: new           #27                 // class reactor/core/publisher/FluxPublish$PublishInner
       3: dup
       4: aload_1
       5: invokespecial #28                 // Method reactor/core/publisher/FluxPublish$PublishInner."<init>":(Lreactor/core/CoreSubscriber;)V
       8: astore_2
       9: aload_1
      10: aload_2
      11: invokeinterface #29,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      16: aload_2
      17: invokevirtual #30                 // Method reactor/core/publisher/FluxPublish$PublishInner.isCancelled:()Z
      20: ifeq          26
      23: goto          113
      26: aload_0
      27: getfield      #18                 // Field connection:Lreactor/core/publisher/FluxPublish$PublishSubscriber;
      30: astore_3
      31: aload_3
      32: ifnull        42
      35: aload_3
      36: invokevirtual #19                 // Method reactor/core/publisher/FluxPublish$PublishSubscriber.isTerminated:()Z
      39: ifeq          75
      42: new           #20                 // class reactor/core/publisher/FluxPublish$PublishSubscriber
      45: dup
      46: aload_0
      47: getfield      #14                 // Field prefetch:I
      50: aload_0
      51: invokespecial #21                 // Method reactor/core/publisher/FluxPublish$PublishSubscriber."<init>":(ILreactor/core/publisher/FluxPublish;)V
      54: astore        4
      56: getstatic     #22                 // Field CONNECTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      59: aload_0
      60: aload_3
      61: aload         4
      63: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      66: ifne          72
      69: goto          16
      72: aload         4
      74: astore_3
      75: aload_3
      76: aload_2
      77: invokevirtual #31                 // Method reactor/core/publisher/FluxPublish$PublishSubscriber.add:(Lreactor/core/publisher/FluxPublish$PublishInner;)Z
      80: ifeq          110
      83: aload_2
      84: invokevirtual #30                 // Method reactor/core/publisher/FluxPublish$PublishInner.isCancelled:()Z
      87: ifeq          98
      90: aload_3
      91: aload_2
      92: invokevirtual #32                 // Method reactor/core/publisher/FluxPublish$PublishSubscriber.remove:(Lreactor/core/publisher/FluxPublish$PubSubInner;)V
      95: goto          103
      98: aload_2
      99: aload_3
     100: putfield      #33                 // Field reactor/core/publisher/FluxPublish$PublishInner.parent:Lreactor/core/publisher/FluxPublish$PublishSubscriber;
     103: aload_3
     104: invokevirtual #34                 // Method reactor/core/publisher/FluxPublish$PublishSubscriber.drain:()V
     107: goto          113
     110: goto          16
     113: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #14                 // Field prefetch:I
       4: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #35                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #36                 // Method getPrefetch:()I
      11: invokestatic  #37                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: areturn
      15: aload_1
      16: getstatic     #38                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #13                 // Field source:Lreactor/core/publisher/Flux;
      26: areturn
      27: aconst_null
      28: areturn

  static {};
    Code:
       0: ldc           #39                 // class reactor/core/publisher/FluxPublish
       2: ldc           #20                 // class reactor/core/publisher/FluxPublish$PublishSubscriber
       4: ldc           #40                 // String connection
       6: invokestatic  #41                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #22                 // Field CONNECTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
