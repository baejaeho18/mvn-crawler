Compiled from "ParallelSource.java"
final class reactor.core.publisher.ParallelSource$ParallelSourceMain<T> implements reactor.core.publisher.InnerConsumer<T> {
  final reactor.core.CoreSubscriber<? super T>[] subscribers;

  final java.util.concurrent.atomic.AtomicLongArray requests;

  final long[] emissions;

  final int prefetch;

  final int limit;

  final java.util.function.Supplier<java.util.Queue<T>> queueSupplier;

  org.reactivestreams.Subscription s;

  java.util.Queue<T> queue;

  java.lang.Throwable error;

  volatile boolean done;

  int index;

  volatile boolean cancelled;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.ParallelSource$ParallelSourceMain> WIP;

  volatile int subscriberCount;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.ParallelSource$ParallelSourceMain> SUBSCRIBER_COUNT;

  int produced;

  int sourceMode;

  reactor.core.publisher.ParallelSource$ParallelSourceMain(reactor.core.CoreSubscriber<? super T>[], int, java.util.function.Supplier<java.util.Queue<T>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field subscribers:[Lreactor/core/CoreSubscriber;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field prefetch:I
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field queueSupplier:Ljava/util/function/Supplier;
      19: aload_0
      20: iload_2
      21: invokestatic  #5                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      24: putfield      #6                  // Field limit:I
      27: aload_0
      28: new           #7                  // class java/util/concurrent/atomic/AtomicLongArray
      31: dup
      32: aload_1
      33: arraylength
      34: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicLongArray."<init>":(I)V
      37: putfield      #9                  // Field requests:Ljava/util/concurrent/atomic/AtomicLongArray;
      40: aload_0
      41: aload_1
      42: arraylength
      43: newarray       long
      45: putfield      #10                 // Field emissions:[J
      48: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #11                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #13                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #3                  // Field prefetch:I
      23: invokestatic  #14                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aload_1
      28: getstatic     #15                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #16                 // Field done:Z
      38: invokestatic  #17                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aload_1
      43: getstatic     #18                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      46: if_acmpne     57
      49: aload_0
      50: getfield      #19                 // Field cancelled:Z
      53: invokestatic  #17                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      56: areturn
      57: aload_1
      58: getstatic     #20                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      61: if_acmpne     69
      64: aload_0
      65: getfield      #21                 // Field error:Ljava/lang/Throwable;
      68: areturn
      69: aload_1
      70: getstatic     #22                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      73: if_acmpne     100
      76: aload_0
      77: getfield      #23                 // Field queue:Ljava/util/Queue;
      80: ifnull        95
      83: aload_0
      84: getfield      #23                 // Field queue:Ljava/util/Queue;
      87: invokeinterface #24,  1           // InterfaceMethod java/util/Queue.size:()I
      92: goto          96
      95: iconst_0
      96: invokestatic  #14                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      99: areturn
     100: aconst_null
     101: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #2                  // Field subscribers:[Lreactor/core/CoreSubscriber;
       4: invokestatic  #25                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: invokedynamic #26,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      12: invokeinterface #27,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      17: areturn

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field subscribers:[Lreactor/core/CoreSubscriber;
       4: iconst_0
       5: aaload
       6: invokeinterface #28,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      11: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #29                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          132
      11: aload_0
      12: aload_1
      13: putfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_1
      17: instanceof    #30                 // class reactor/core/Fuseable$QueueSubscription
      20: ifeq          99
      23: aload_1
      24: checkcast     #30                 // class reactor/core/Fuseable$QueueSubscription
      27: astore_2
      28: aload_2
      29: bipush        7
      31: invokeinterface #32,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      36: istore_3
      37: iload_3
      38: iconst_1
      39: if_icmpne     66
      42: aload_0
      43: iload_3
      44: putfield      #33                 // Field sourceMode:I
      47: aload_0
      48: aload_2
      49: putfield      #23                 // Field queue:Ljava/util/Queue;
      52: aload_0
      53: iconst_1
      54: putfield      #16                 // Field done:Z
      57: aload_0
      58: invokevirtual #34                 // Method setupSubscribers:()V
      61: aload_0
      62: invokevirtual #35                 // Method drain:()V
      65: return
      66: iload_3
      67: iconst_2
      68: if_icmpne     99
      71: aload_0
      72: iload_3
      73: putfield      #33                 // Field sourceMode:I
      76: aload_0
      77: aload_2
      78: putfield      #23                 // Field queue:Ljava/util/Queue;
      81: aload_0
      82: invokevirtual #34                 // Method setupSubscribers:()V
      85: aload_1
      86: aload_0
      87: getfield      #3                  // Field prefetch:I
      90: invokestatic  #36                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      93: invokeinterface #37,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      98: return
      99: aload_0
     100: aload_0
     101: getfield      #4                  // Field queueSupplier:Ljava/util/function/Supplier;
     104: invokeinterface #38,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     109: checkcast     #39                 // class java/util/Queue
     112: putfield      #23                 // Field queue:Ljava/util/Queue;
     115: aload_0
     116: invokevirtual #34                 // Method setupSubscribers:()V
     119: aload_1
     120: aload_0
     121: getfield      #3                  // Field prefetch:I
     124: invokestatic  #36                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
     127: invokeinterface #37,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     132: return

  void setupSubscribers();
    Code:
       0: aload_0
       1: getfield      #2                  // Field subscribers:[Lreactor/core/CoreSubscriber;
       4: arraylength
       5: istore_1
       6: iconst_0
       7: istore_2
       8: iload_2
       9: iload_1
      10: if_icmpge     60
      13: aload_0
      14: getfield      #19                 // Field cancelled:Z
      17: ifeq          21
      20: return
      21: iload_2
      22: istore_3
      23: getstatic     #40                 // Field SUBSCRIBER_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      26: aload_0
      27: iload_2
      28: iconst_1
      29: iadd
      30: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.lazySet:(Ljava/lang/Object;I)V
      33: aload_0
      34: getfield      #2                  // Field subscribers:[Lreactor/core/CoreSubscriber;
      37: iload_2
      38: aaload
      39: new           #42                 // class reactor/core/publisher/ParallelSource$ParallelSourceMain$ParallelSourceInner
      42: dup
      43: aload_0
      44: iload_3
      45: iload_1
      46: invokespecial #43                 // Method reactor/core/publisher/ParallelSource$ParallelSourceMain$ParallelSourceInner."<init>":(Lreactor/core/publisher/ParallelSource$ParallelSourceMain;II)V
      49: invokeinterface #44,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      54: iinc          2, 1
      57: goto          8
      60: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #16                 // Field done:Z
       4: ifeq          16
       7: aload_1
       8: aload_0
       9: invokevirtual #45                 // Method currentContext:()Lreactor/util/context/Context;
      12: invokestatic  #46                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      15: return
      16: aload_0
      17: getfield      #33                 // Field sourceMode:I
      20: ifne          58
      23: aload_0
      24: getfield      #23                 // Field queue:Ljava/util/Queue;
      27: aload_1
      28: invokeinterface #47,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      33: ifne          58
      36: aload_0
      37: aload_0
      38: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
      41: ldc           #49                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      43: invokestatic  #50                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      46: aload_1
      47: aload_0
      48: invokevirtual #45                 // Method currentContext:()Lreactor/util/context/Context;
      51: invokestatic  #51                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      54: invokevirtual #52                 // Method onError:(Ljava/lang/Throwable;)V
      57: return
      58: aload_0
      59: invokevirtual #35                 // Method drain:()V
      62: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #16                 // Field done:Z
       4: ifeq          16
       7: aload_1
       8: aload_0
       9: invokevirtual #45                 // Method currentContext:()Lreactor/util/context/Context;
      12: invokestatic  #53                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      15: return
      16: aload_0
      17: aload_1
      18: putfield      #21                 // Field error:Ljava/lang/Throwable;
      21: aload_0
      22: iconst_1
      23: putfield      #16                 // Field done:Z
      26: aload_0
      27: invokevirtual #35                 // Method drain:()V
      30: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #16                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #16                 // Field done:Z
      13: aload_0
      14: invokevirtual #35                 // Method drain:()V
      17: return

  void cancel();
    Code:
       0: aload_0
       1: getfield      #19                 // Field cancelled:Z
       4: ifne          40
       7: aload_0
       8: iconst_1
       9: putfield      #19                 // Field cancelled:Z
      12: aload_0
      13: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
      16: invokeinterface #54,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      21: getstatic     #55                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      24: aload_0
      25: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      28: ifne          40
      31: aload_0
      32: getfield      #23                 // Field queue:Ljava/util/Queue;
      35: invokeinterface #57,  1           // InterfaceMethod java/util/Queue.clear:()V
      40: return

  void drainAsync();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #23                 // Field queue:Ljava/util/Queue;
       6: astore_2
       7: aload_0
       8: getfield      #2                  // Field subscribers:[Lreactor/core/CoreSubscriber;
      11: astore_3
      12: aload_0
      13: getfield      #9                  // Field requests:Ljava/util/concurrent/atomic/AtomicLongArray;
      16: astore        4
      18: aload_0
      19: getfield      #10                 // Field emissions:[J
      22: astore        5
      24: aload         5
      26: arraylength
      27: istore        6
      29: aload_0
      30: getfield      #58                 // Field index:I
      33: istore        7
      35: aload_0
      36: getfield      #59                 // Field produced:I
      39: istore        8
      41: iconst_0
      42: istore        9
      44: aload_0
      45: getfield      #19                 // Field cancelled:Z
      48: ifeq          58
      51: aload_2
      52: invokeinterface #57,  1           // InterfaceMethod java/util/Queue.clear:()V
      57: return
      58: aload_0
      59: getfield      #16                 // Field done:Z
      62: istore        10
      64: iload         10
      66: ifeq          127
      69: aload_0
      70: getfield      #21                 // Field error:Ljava/lang/Throwable;
      73: astore        11
      75: aload         11
      77: ifnull        127
      80: aload_2
      81: invokeinterface #57,  1           // InterfaceMethod java/util/Queue.clear:()V
      86: aload_3
      87: astore        12
      89: aload         12
      91: arraylength
      92: istore        13
      94: iconst_0
      95: istore        14
      97: iload         14
      99: iload         13
     101: if_icmpge     126
     104: aload         12
     106: iload         14
     108: aaload
     109: astore        15
     111: aload         15
     113: aload         11
     115: invokeinterface #60,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     120: iinc          14, 1
     123: goto          97
     126: return
     127: aload_2
     128: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     133: istore        11
     135: iload         10
     137: ifeq          184
     140: iload         11
     142: ifeq          184
     145: aload_3
     146: astore        12
     148: aload         12
     150: arraylength
     151: istore        13
     153: iconst_0
     154: istore        14
     156: iload         14
     158: iload         13
     160: if_icmpge     183
     163: aload         12
     165: iload         14
     167: aaload
     168: astore        15
     170: aload         15
     172: invokeinterface #62,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     177: iinc          14, 1
     180: goto          156
     183: return
     184: iload         11
     186: ifeq          192
     189: goto          384
     192: aload         4
     194: iload         7
     196: invokevirtual #63                 // Method java/util/concurrent/atomic/AtomicLongArray.get:(I)J
     199: lstore        12
     201: aload         5
     203: iload         7
     205: laload
     206: lstore        14
     208: lload         12
     210: lload         14
     212: lcmp
     213: ifeq          355
     216: aload_2
     217: invokeinterface #64,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
     222: astore        16
     224: goto          290
     227: astore        17
     229: aload_0
     230: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
     233: aload         17
     235: aload_3
     236: iload         7
     238: aaload
     239: invokeinterface #28,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     244: invokestatic  #66                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     247: astore        17
     249: aload_3
     250: astore        18
     252: aload         18
     254: arraylength
     255: istore        19
     257: iconst_0
     258: istore        20
     260: iload         20
     262: iload         19
     264: if_icmpge     289
     267: aload         18
     269: iload         20
     271: aaload
     272: astore        21
     274: aload         21
     276: aload         17
     278: invokeinterface #60,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     283: iinc          20, 1
     286: goto          260
     289: return
     290: aload         16
     292: ifnonnull     298
     295: goto          384
     298: aload_3
     299: iload         7
     301: aaload
     302: aload         16
     304: invokeinterface #67,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     309: aload         5
     311: iload         7
     313: lload         14
     315: lconst_1
     316: ladd
     317: lastore
     318: iinc          8, 1
     321: iload         8
     323: istore        17
     325: iload         17
     327: aload_0
     328: getfield      #6                  // Field limit:I
     331: if_icmpne     349
     334: iconst_0
     335: istore        8
     337: aload_0
     338: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
     341: iload         17
     343: i2l
     344: invokeinterface #37,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     349: iconst_0
     350: istore        9
     352: goto          358
     355: iinc          9, 1
     358: iinc          7, 1
     361: iload         7
     363: iload         6
     365: if_icmpne     371
     368: iconst_0
     369: istore        7
     371: iload         9
     373: iload         6
     375: if_icmpne     381
     378: goto          384
     381: goto          44
     384: aload_0
     385: getfield      #68                 // Field wip:I
     388: istore        10
     390: iload         10
     392: iload_1
     393: if_icmpne     425
     396: aload_0
     397: iload         7
     399: putfield      #58                 // Field index:I
     402: aload_0
     403: iload         8
     405: putfield      #59                 // Field produced:I
     408: getstatic     #55                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     411: aload_0
     412: iload_1
     413: ineg
     414: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     417: istore_1
     418: iload_1
     419: ifne          428
     422: goto          431
     425: iload         10
     427: istore_1
     428: goto          41
     431: return
    Exception table:
       from    to  target type
         216   224   227   Class java/lang/Throwable

  void drainSync();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #23                 // Field queue:Ljava/util/Queue;
       6: astore_2
       7: aload_0
       8: getfield      #2                  // Field subscribers:[Lreactor/core/CoreSubscriber;
      11: astore_3
      12: aload_0
      13: getfield      #9                  // Field requests:Ljava/util/concurrent/atomic/AtomicLongArray;
      16: astore        4
      18: aload_0
      19: getfield      #10                 // Field emissions:[J
      22: astore        5
      24: aload         5
      26: arraylength
      27: istore        6
      29: aload_0
      30: getfield      #58                 // Field index:I
      33: istore        7
      35: iconst_0
      36: istore        8
      38: aload_0
      39: getfield      #19                 // Field cancelled:Z
      42: ifeq          52
      45: aload_2
      46: invokeinterface #57,  1           // InterfaceMethod java/util/Queue.clear:()V
      51: return
      52: aload_2
      53: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      58: ifeq          100
      61: aload_3
      62: astore        9
      64: aload         9
      66: arraylength
      67: istore        10
      69: iconst_0
      70: istore        11
      72: iload         11
      74: iload         10
      76: if_icmpge     99
      79: aload         9
      81: iload         11
      83: aaload
      84: astore        12
      86: aload         12
      88: invokeinterface #62,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      93: iinc          11, 1
      96: goto          72
      99: return
     100: aload         4
     102: iload         7
     104: invokevirtual #63                 // Method java/util/concurrent/atomic/AtomicLongArray.get:(I)J
     107: lstore        9
     109: aload         5
     111: iload         7
     113: laload
     114: lstore        11
     116: lload         9
     118: lload         11
     120: lcmp
     121: ifeq          268
     124: aload_2
     125: invokeinterface #64,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
     130: astore        13
     132: goto          198
     135: astore        14
     137: aload_0
     138: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
     141: aload         14
     143: aload_3
     144: iload         7
     146: aaload
     147: invokeinterface #28,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     152: invokestatic  #66                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     155: astore        14
     157: aload_3
     158: astore        15
     160: aload         15
     162: arraylength
     163: istore        16
     165: iconst_0
     166: istore        17
     168: iload         17
     170: iload         16
     172: if_icmpge     197
     175: aload         15
     177: iload         17
     179: aaload
     180: astore        18
     182: aload         18
     184: aload         14
     186: invokeinterface #60,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     191: iinc          17, 1
     194: goto          168
     197: return
     198: aload         13
     200: ifnonnull     242
     203: aload_3
     204: astore        14
     206: aload         14
     208: arraylength
     209: istore        15
     211: iconst_0
     212: istore        16
     214: iload         16
     216: iload         15
     218: if_icmpge     241
     221: aload         14
     223: iload         16
     225: aaload
     226: astore        17
     228: aload         17
     230: invokeinterface #62,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     235: iinc          16, 1
     238: goto          214
     241: return
     242: aload_3
     243: iload         7
     245: aaload
     246: aload         13
     248: invokeinterface #67,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     253: aload         5
     255: iload         7
     257: lload         11
     259: lconst_1
     260: ladd
     261: lastore
     262: iconst_0
     263: istore        8
     265: goto          271
     268: iinc          8, 1
     271: iinc          7, 1
     274: iload         7
     276: iload         6
     278: if_icmpne     284
     281: iconst_0
     282: istore        7
     284: iload         8
     286: iload         6
     288: if_icmpne     294
     291: goto          297
     294: goto          38
     297: aload_0
     298: getfield      #68                 // Field wip:I
     301: istore        9
     303: iload         9
     305: iload_1
     306: if_icmpne     332
     309: aload_0
     310: iload         7
     312: putfield      #58                 // Field index:I
     315: getstatic     #55                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     318: aload_0
     319: iload_1
     320: ineg
     321: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     324: istore_1
     325: iload_1
     326: ifne          335
     329: goto          338
     332: iload         9
     334: istore_1
     335: goto          35
     338: return
    Exception table:
       from    to  target type
         124   132   135   Class java/lang/Throwable

  void drain();
    Code:
       0: getstatic     #55                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #33                 // Field sourceMode:I
      15: iconst_1
      16: if_icmpne     26
      19: aload_0
      20: invokevirtual #70                 // Method drainSync:()V
      23: goto          30
      26: aload_0
      27: invokevirtual #71                 // Method drainAsync:()V
      30: return

  static {};
    Code:
       0: ldc           #72                 // class reactor/core/publisher/ParallelSource$ParallelSourceMain
       2: ldc           #73                 // String wip
       4: invokestatic  #74                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #55                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #72                 // class reactor/core/publisher/ParallelSource$ParallelSourceMain
      12: ldc           #75                 // String subscriberCount
      14: invokestatic  #74                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      17: putstatic     #40                 // Field SUBSCRIBER_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      20: return
}
