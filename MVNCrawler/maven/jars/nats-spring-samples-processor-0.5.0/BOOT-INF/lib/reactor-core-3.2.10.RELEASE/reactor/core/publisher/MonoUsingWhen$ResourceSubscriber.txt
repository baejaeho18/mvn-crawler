Compiled from "MonoUsingWhen.java"
class reactor.core.publisher.MonoUsingWhen$ResourceSubscriber<S, T> extends reactor.core.publisher.Operators$DeferredSubscription implements reactor.core.publisher.InnerConsumer<S> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final java.util.function.Function<? super S, ? extends reactor.core.publisher.Mono<? extends T>> resourceClosure;

  final java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>> asyncComplete;

  final java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>> asyncError;

  final java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>> asyncCancel;

  final boolean isMonoSource;

  org.reactivestreams.Subscription resourceSubscription;

  boolean resourceProvided;

  reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber<? super T, S> closureSubscriber;

  reactor.core.publisher.MonoUsingWhen$ResourceSubscriber(reactor.core.CoreSubscriber<? super T>, java.util.function.Function<? super S, ? extends reactor.core.publisher.Mono<? extends T>>, java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>>, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Operators$DeferredSubscription."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String actual
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class reactor/core/CoreSubscriber
      14: putfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      17: aload_0
      18: aload_2
      19: ldc           #6                  // String resourceClosure
      21: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      24: checkcast     #7                  // class java/util/function/Function
      27: putfield      #8                  // Field resourceClosure:Ljava/util/function/Function;
      30: aload_0
      31: aload_3
      32: ldc           #9                  // String asyncComplete
      34: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      37: checkcast     #7                  // class java/util/function/Function
      40: putfield      #10                 // Field asyncComplete:Ljava/util/function/Function;
      43: aload_0
      44: aload         4
      46: ldc           #11                 // String asyncError
      48: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      51: checkcast     #7                  // class java/util/function/Function
      54: putfield      #12                 // Field asyncError:Ljava/util/function/Function;
      57: aload_0
      58: aload         5
      60: putfield      #13                 // Field asyncCancel:Ljava/util/function/Function;
      63: aload_0
      64: iload         6
      66: putfield      #14                 // Field isMonoSource:Z
      69: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #15,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
       9: areturn

  public void onNext(S);
    Code:
       0: aload_0
       1: getfield      #16                 // Field resourceProvided:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #15,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #17                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: iconst_1
      23: putfield      #16                 // Field resourceProvided:Z
      26: aload_1
      27: aload_0
      28: getfield      #8                  // Field resourceClosure:Ljava/util/function/Function;
      31: invokestatic  #18                 // Method reactor/core/publisher/MonoUsingWhen.access$000:(Ljava/lang/Object;Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      34: astore_2
      35: aload_0
      36: aload_1
      37: aload_0
      38: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      41: aload_0
      42: getfield      #10                 // Field asyncComplete:Ljava/util/function/Function;
      45: aload_0
      46: getfield      #12                 // Field asyncError:Ljava/util/function/Function;
      49: aload_0
      50: getfield      #13                 // Field asyncCancel:Ljava/util/function/Function;
      53: aload_0
      54: invokestatic  #19                 // Method reactor/core/publisher/MonoUsingWhen.access$100:(Ljava/lang/Object;Lreactor/core/CoreSubscriber;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Lreactor/core/publisher/Operators$DeferredSubscription;)Lreactor/core/publisher/FluxUsingWhen$UsingWhenSubscriber;
      57: putfield      #20                 // Field closureSubscriber:Lreactor/core/publisher/FluxUsingWhen$UsingWhenSubscriber;
      60: aload_2
      61: aload_0
      62: getfield      #20                 // Field closureSubscriber:Lreactor/core/publisher/FluxUsingWhen$UsingWhenSubscriber;
      65: invokevirtual #21                 // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      68: aload_0
      69: getfield      #14                 // Field isMonoSource:Z
      72: ifne          84
      75: aload_0
      76: getfield      #22                 // Field resourceSubscription:Lorg/reactivestreams/Subscription;
      79: invokeinterface #23,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      84: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #16                 // Field resourceProvided:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #15,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #24                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      25: aload_1
      26: invokeinterface #25,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      31: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #16                 // Field resourceProvided:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #26,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      17: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #22                 // Field resourceSubscription:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #27                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          35
      11: aload_0
      12: aload_1
      13: putfield      #22                 // Field resourceSubscription:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #28,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: ldc2_w        #30                 // long 9223372036854775807l
      30: invokeinterface #32,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      35: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #16                 // Field resourceProvided:Z
       4: ifne          23
       7: aload_0
       8: getfield      #22                 // Field resourceSubscription:Lorg/reactivestreams/Subscription;
      11: invokeinterface #23,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      16: aload_0
      17: invokespecial #33                 // Method reactor/core/publisher/Operators$DeferredSubscription.cancel:()V
      20: goto          45
      23: getstatic     #34                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      26: aload_0
      27: invokestatic  #35                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      30: pop
      31: aload_0
      32: getfield      #20                 // Field closureSubscriber:Lreactor/core/publisher/FluxUsingWhen$UsingWhenSubscriber;
      35: ifnull        45
      38: aload_0
      39: getfield      #20                 // Field closureSubscriber:Lreactor/core/publisher/FluxUsingWhen$UsingWhenSubscriber;
      42: invokevirtual #36                 // Method reactor/core/publisher/FluxUsingWhen$UsingWhenSubscriber.cancel:()V
      45: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #37                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #22                 // Field resourceSubscription:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #38                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      23: areturn
      24: aload_1
      25: getstatic     #39                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      28: if_acmpne     37
      31: ldc           #41                 // int 2147483647
      33: invokestatic  #42                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      36: areturn
      37: aload_1
      38: getstatic     #43                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      41: if_acmpne     52
      44: aload_0
      45: getfield      #16                 // Field resourceProvided:Z
      48: invokestatic  #44                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      51: areturn
      52: aconst_null
      53: areturn
}
