Compiled from "FluxBufferPredicate.java"
final class reactor.core.publisher.FluxBufferPredicate<T, C extends java.util.Collection<? super T>> extends reactor.core.publisher.FluxOperator<T, C> {
  final java.util.function.Predicate<? super T> predicate;

  final java.util.function.Supplier<C> bufferSupplier;

  final reactor.core.publisher.FluxBufferPredicate$Mode mode;

  reactor.core.publisher.FluxBufferPredicate(reactor.core.publisher.Flux<? extends T>, java.util.function.Predicate<? super T>, java.util.function.Supplier<C>, reactor.core.publisher.FluxBufferPredicate$Mode);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String predicate
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/function/Predicate
      15: putfield      #5                  // Field predicate:Ljava/util/function/Predicate;
      18: aload_0
      19: aload_3
      20: ldc           #6                  // String bufferSupplier
      22: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      25: checkcast     #7                  // class java/util/function/Supplier
      28: putfield      #8                  // Field bufferSupplier:Ljava/util/function/Supplier;
      31: aload_0
      32: aload         4
      34: putfield      #9                  // Field mode:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      37: return

  public int getPrefetch();
    Code:
       0: iconst_1
       1: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super C>);
    Code:
       0: aload_0
       1: getfield      #8                  // Field bufferSupplier:Ljava/util/function/Supplier;
       4: invokeinterface #10,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       9: ldc           #11                 // String The bufferSupplier returned a null initial buffer
      11: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      14: checkcast     #12                 // class java/util/Collection
      17: astore_2
      18: goto          37
      21: astore_3
      22: aload_1
      23: aload_3
      24: aload_1
      25: invokeinterface #14,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      30: invokestatic  #15                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      33: invokestatic  #16                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      36: return
      37: new           #17                 // class reactor/core/publisher/FluxBufferPredicate$BufferPredicateSubscriber
      40: dup
      41: aload_1
      42: aload_2
      43: aload_0
      44: getfield      #8                  // Field bufferSupplier:Ljava/util/function/Supplier;
      47: aload_0
      48: getfield      #5                  // Field predicate:Ljava/util/function/Predicate;
      51: aload_0
      52: getfield      #9                  // Field mode:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      55: invokespecial #18                 // Method reactor/core/publisher/FluxBufferPredicate$BufferPredicateSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/Collection;Ljava/util/function/Supplier;Ljava/util/function/Predicate;Lreactor/core/publisher/FluxBufferPredicate$Mode;)V
      58: astore_3
      59: aload_0
      60: getfield      #19                 // Field source:Lreactor/core/publisher/Flux;
      63: aload_3
      64: invokevirtual #20                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      67: return
    Exception table:
       from    to  target type
           0    18    21   Class java/lang/Throwable
}
