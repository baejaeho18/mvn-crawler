Compiled from "FluxCreate.java"
final class reactor.core.publisher.FluxCreate$SerializedSink<T> implements reactor.core.publisher.FluxSink<T>, reactor.core.Scannable {
  final reactor.core.publisher.FluxCreate$BaseSink<T> sink;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxCreate$SerializedSink, java.lang.Throwable> ERROR;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxCreate$SerializedSink> WIP;

  final java.util.Queue<T> mpscQueue;

  volatile boolean done;

  reactor.core.publisher.FluxCreate$SerializedSink(reactor.core.publisher.FluxCreate$BaseSink<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
       9: aload_0
      10: invokestatic  #3                  // Method reactor/util/concurrent/Queues.unboundedMultiproducer:()Ljava/util/function/Supplier;
      13: invokeinterface #4,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      18: checkcast     #5                  // class java/util/Queue
      21: putfield      #6                  // Field mpscQueue:Ljava/util/Queue;
      24: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
       4: invokevirtual #7                  // Method reactor/core/publisher/FluxCreate$BaseSink.currentContext:()Lreactor/util/context/Context;
       7: areturn

  public reactor.core.publisher.FluxSink<T> next(T);
    Code:
       0: aload_1
       1: ldc           #8                  // String t is null in sink.next(t)
       3: invokestatic  #9                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
      11: invokevirtual #10                 // Method reactor/core/publisher/FluxCreate$BaseSink.isTerminated:()Z
      14: ifne          24
      17: aload_0
      18: getfield      #11                 // Field done:Z
      21: ifeq          37
      24: aload_1
      25: aload_0
      26: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
      29: invokevirtual #7                  // Method reactor/core/publisher/FluxCreate$BaseSink.currentContext:()Lreactor/util/context/Context;
      32: invokestatic  #12                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      35: aload_0
      36: areturn
      37: getstatic     #13                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      40: aload_0
      41: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
      44: ifne          101
      47: getstatic     #13                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      50: aload_0
      51: iconst_0
      52: iconst_1
      53: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      56: ifeq          101
      59: aload_0
      60: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
      63: aload_1
      64: invokevirtual #16                 // Method reactor/core/publisher/FluxCreate$BaseSink.next:(Ljava/lang/Object;)Lreactor/core/publisher/FluxSink;
      67: pop
      68: goto          89
      71: astore_2
      72: aload_0
      73: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
      76: aload_2
      77: aload_1
      78: aload_0
      79: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
      82: invokevirtual #7                  // Method reactor/core/publisher/FluxCreate$BaseSink.currentContext:()Lreactor/util/context/Context;
      85: invokestatic  #18                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      88: pop
      89: getstatic     #13                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      92: aload_0
      93: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      96: ifne          124
      99: aload_0
     100: areturn
     101: aload_0
     102: getfield      #6                  // Field mpscQueue:Ljava/util/Queue;
     105: aload_1
     106: invokeinterface #20,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     111: pop
     112: getstatic     #13                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     115: aload_0
     116: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
     119: ifeq          124
     122: aload_0
     123: areturn
     124: aload_0
     125: invokevirtual #22                 // Method drainLoop:()V
     128: aload_0
     129: areturn
    Exception table:
       from    to  target type
          59    68    71   Class java/lang/Throwable

  public void error(java.lang.Throwable);
    Code:
       0: aload_1
       1: ldc           #23                 // String t is null in sink.error(t)
       3: invokestatic  #9                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
      11: invokevirtual #10                 // Method reactor/core/publisher/FluxCreate$BaseSink.isTerminated:()Z
      14: ifne          24
      17: aload_0
      18: getfield      #11                 // Field done:Z
      21: ifeq          37
      24: aload_1
      25: aload_0
      26: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
      29: invokevirtual #7                  // Method reactor/core/publisher/FluxCreate$BaseSink.currentContext:()Lreactor/util/context/Context;
      32: invokestatic  #24                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      35: pop
      36: return
      37: getstatic     #25                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      40: aload_0
      41: aload_1
      42: invokestatic  #26                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      45: ifeq          60
      48: aload_0
      49: iconst_1
      50: putfield      #11                 // Field done:Z
      53: aload_0
      54: invokevirtual #27                 // Method drain:()V
      57: goto          83
      60: aload_0
      61: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
      64: invokevirtual #7                  // Method reactor/core/publisher/FluxCreate$BaseSink.currentContext:()Lreactor/util/context/Context;
      67: astore_2
      68: aload_0
      69: getfield      #6                  // Field mpscQueue:Ljava/util/Queue;
      72: aload_2
      73: aconst_null
      74: invokestatic  #28                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
      77: aload_1
      78: aload_2
      79: invokestatic  #24                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      82: pop
      83: return

  public void complete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
       4: invokevirtual #10                 // Method reactor/core/publisher/FluxCreate$BaseSink.isTerminated:()Z
       7: ifne          17
      10: aload_0
      11: getfield      #11                 // Field done:Z
      14: ifeq          18
      17: return
      18: aload_0
      19: iconst_1
      20: putfield      #11                 // Field done:Z
      23: aload_0
      24: invokevirtual #27                 // Method drain:()V
      27: return

  void drain();
    Code:
       0: getstatic     #13                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          14
      10: aload_0
      11: invokevirtual #22                 // Method drainLoop:()V
      14: return

  void drainLoop();
    Code:
       0: aload_0
       1: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
       4: invokevirtual #7                  // Method reactor/core/publisher/FluxCreate$BaseSink.currentContext:()Lreactor/util/context/Context;
       7: astore_1
       8: aload_0
       9: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
      12: astore_2
      13: aload_0
      14: getfield      #6                  // Field mpscQueue:Ljava/util/Queue;
      17: astore_3
      18: aload_2
      19: invokevirtual #29                 // Method reactor/core/publisher/FluxCreate$BaseSink.isCancelled:()Z
      22: ifeq          42
      25: aload_3
      26: aload_1
      27: aconst_null
      28: invokestatic  #28                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
      31: getstatic     #13                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      34: aload_0
      35: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      38: ifne          18
      41: return
      42: getstatic     #25                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      45: aload_0
      46: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
      49: ifnull        70
      52: aload_3
      53: aload_1
      54: aconst_null
      55: invokestatic  #28                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
      58: aload_2
      59: getstatic     #25                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      62: aload_0
      63: invokestatic  #31                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      66: invokevirtual #32                 // Method reactor/core/publisher/FluxCreate$BaseSink.error:(Ljava/lang/Throwable;)V
      69: return
      70: aload_0
      71: getfield      #11                 // Field done:Z
      74: istore        4
      76: aload_3
      77: invokeinterface #33,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      82: astore        5
      84: aload         5
      86: ifnonnull     93
      89: iconst_1
      90: goto          94
      93: iconst_0
      94: istore        6
      96: iload         4
      98: ifeq          111
     101: iload         6
     103: ifeq          111
     106: aload_2
     107: invokevirtual #34                 // Method reactor/core/publisher/FluxCreate$BaseSink.complete:()V
     110: return
     111: iload         6
     113: ifeq          119
     116: goto          153
     119: aload_2
     120: aload         5
     122: invokevirtual #16                 // Method reactor/core/publisher/FluxCreate$BaseSink.next:(Ljava/lang/Object;)Lreactor/core/publisher/FluxSink;
     125: pop
     126: goto          150
     129: astore        7
     131: aload_0
     132: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
     135: aload         7
     137: aload         5
     139: aload_0
     140: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
     143: invokevirtual #7                  // Method reactor/core/publisher/FluxCreate$BaseSink.currentContext:()Lreactor/util/context/Context;
     146: invokestatic  #18                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     149: pop
     150: goto          18
     153: getstatic     #13                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     156: aload_0
     157: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     160: ifne          18
     163: goto          166
     166: return
    Exception table:
       from    to  target type
         119   126   129   Class java/lang/Throwable

  public reactor.core.publisher.FluxSink<T> onRequest(java.util.function.LongConsumer);
    Code:
       0: aload_0
       1: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
       4: aload_1
       5: aload_1
       6: aload_0
       7: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
      10: getfield      #35                 // Field reactor/core/publisher/FluxCreate$BaseSink.requested:J
      13: invokevirtual #36                 // Method reactor/core/publisher/FluxCreate$BaseSink.onRequest:(Ljava/util/function/LongConsumer;Ljava/util/function/LongConsumer;J)V
      16: aload_0
      17: areturn

  public reactor.core.publisher.FluxSink<T> onCancel(reactor.core.Disposable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
       4: aload_1
       5: invokevirtual #37                 // Method reactor/core/publisher/FluxCreate$BaseSink.onCancel:(Lreactor/core/Disposable;)Lreactor/core/publisher/FluxSink;
       8: pop
       9: aload_0
      10: areturn

  public reactor.core.publisher.FluxSink<T> onDispose(reactor.core.Disposable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
       4: aload_1
       5: invokevirtual #38                 // Method reactor/core/publisher/FluxCreate$BaseSink.onDispose:(Lreactor/core/Disposable;)Lreactor/core/publisher/FluxSink;
       8: pop
       9: aload_0
      10: areturn

  public long requestedFromDownstream();
    Code:
       0: aload_0
       1: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
       4: invokevirtual #39                 // Method reactor/core/publisher/FluxCreate$BaseSink.requestedFromDownstream:()J
       7: lreturn

  public boolean isCancelled();
    Code:
       0: aload_0
       1: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
       4: invokevirtual #29                 // Method reactor/core/publisher/FluxCreate$BaseSink.isCancelled:()Z
       7: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #40                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     20
       7: aload_0
       8: getfield      #6                  // Field mpscQueue:Ljava/util/Queue;
      11: invokeinterface #41,  1           // InterfaceMethod java/util/Queue.size:()I
      16: invokestatic  #42                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      19: areturn
      20: aload_1
      21: getstatic     #43                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      24: if_acmpne     32
      27: aload_0
      28: getfield      #44                 // Field error:Ljava/lang/Throwable;
      31: areturn
      32: aload_1
      33: getstatic     #45                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      36: if_acmpne     47
      39: aload_0
      40: getfield      #11                 // Field done:Z
      43: invokestatic  #46                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      46: areturn
      47: aload_0
      48: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
      51: aload_1
      52: invokevirtual #47                 // Method reactor/core/publisher/FluxCreate$BaseSink.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      55: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxCreate$BaseSink;
       4: invokevirtual #48                 // Method reactor/core/publisher/FluxCreate$BaseSink.toString:()Ljava/lang/String;
       7: areturn

  static {};
    Code:
       0: ldc           #49                 // class reactor/core/publisher/FluxCreate$SerializedSink
       2: ldc           #17                 // class java/lang/Throwable
       4: ldc           #50                 // String error
       6: invokestatic  #51                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #25                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #49                 // class reactor/core/publisher/FluxCreate$SerializedSink
      14: ldc           #52                 // String wip
      16: invokestatic  #53                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: putstatic     #13                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: return
}
