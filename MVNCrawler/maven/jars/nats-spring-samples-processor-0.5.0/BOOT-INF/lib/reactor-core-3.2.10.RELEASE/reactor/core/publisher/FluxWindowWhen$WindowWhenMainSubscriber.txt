Compiled from "FluxWindowWhen.java"
final class reactor.core.publisher.FluxWindowWhen$WindowWhenMainSubscriber<T, U, V> extends reactor.core.publisher.QueueDrainSubscriber<T, java.lang.Object, reactor.core.publisher.Flux<T>> {
  final org.reactivestreams.Publisher<U> open;

  final java.util.function.Function<? super U, ? extends org.reactivestreams.Publisher<V>> close;

  final java.util.function.Supplier<? extends java.util.Queue<T>> processorQueueSupplier;

  final reactor.core.Disposable$Composite resources;

  org.reactivestreams.Subscription s;

  volatile reactor.core.Disposable boundary;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxWindowWhen$WindowWhenMainSubscriber, reactor.core.Disposable> BOUNDARY;

  final java.util.List<reactor.core.publisher.UnicastProcessor<T>> windows;

  volatile long openWindowCount;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxWindowWhen$WindowWhenMainSubscriber> OPEN_WINDOW_COUNT;

  reactor.core.publisher.FluxWindowWhen$WindowWhenMainSubscriber(reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>>, org.reactivestreams.Publisher<U>, java.util.function.Function<? super U, ? extends org.reactivestreams.Publisher<V>>, java.util.function.Supplier<? extends java.util.Queue<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1                  // Method reactor/util/concurrent/Queues.unboundedMultiproducer:()Ljava/util/function/Supplier;
       5: invokeinterface #2,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      10: checkcast     #3                  // class java/util/Queue
      13: invokespecial #4                  // Method reactor/core/publisher/QueueDrainSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/Queue;)V
      16: aload_0
      17: aload_2
      18: putfield      #5                  // Field open:Lorg/reactivestreams/Publisher;
      21: aload_0
      22: aload_3
      23: putfield      #6                  // Field close:Ljava/util/function/Function;
      26: aload_0
      27: aload         4
      29: putfield      #7                  // Field processorQueueSupplier:Ljava/util/function/Supplier;
      32: aload_0
      33: invokestatic  #8                  // Method reactor/core/Disposables.composite:()Lreactor/core/Disposable$Composite;
      36: putfield      #9                  // Field resources:Lreactor/core/Disposable$Composite;
      39: aload_0
      40: new           #10                 // class java/util/ArrayList
      43: dup
      44: invokespecial #11                 // Method java/util/ArrayList."<init>":()V
      47: putfield      #12                 // Field windows:Ljava/util/List;
      50: getstatic     #13                 // Field OPEN_WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      53: aload_0
      54: lconst_1
      55: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.lazySet:(Ljava/lang/Object;J)V
      58: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #16                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          25
      11: aload_0
      12: aload_1
      13: putfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_1
      17: ldc2_w        #18                 // long 9223372036854775807l
      20: invokeinterface #20,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      25: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #21                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #22                 // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #23,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #24                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: invokevirtual #25                 // Method fastEnter:()Z
      25: ifeq          74
      28: aload_0
      29: getfield      #12                 // Field windows:Ljava/util/List;
      32: invokeinterface #26,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      37: astore_2
      38: aload_2
      39: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      44: ifeq          65
      47: aload_2
      48: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      53: checkcast     #29                 // class reactor/core/publisher/UnicastProcessor
      56: astore_3
      57: aload_3
      58: aload_1
      59: invokevirtual #30                 // Method reactor/core/publisher/UnicastProcessor.onNext:(Ljava/lang/Object;)V
      62: goto          38
      65: aload_0
      66: iconst_m1
      67: invokevirtual #31                 // Method leave:(I)I
      70: ifne          93
      73: return
      74: aload_0
      75: getfield      #32                 // Field queue:Ljava/util/Queue;
      78: aload_1
      79: invokeinterface #33,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      84: pop
      85: aload_0
      86: invokevirtual #34                 // Method enter:()Z
      89: ifne          93
      92: return
      93: aload_0
      94: invokevirtual #35                 // Method drainLoop:()V
      97: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #21                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #22                 // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #23,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #36                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: aload_1
      23: putfield      #37                 // Field error:Ljava/lang/Throwable;
      26: aload_0
      27: iconst_1
      28: putfield      #21                 // Field done:Z
      31: aload_0
      32: invokevirtual #34                 // Method enter:()Z
      35: ifeq          42
      38: aload_0
      39: invokevirtual #35                 // Method drainLoop:()V
      42: getstatic     #13                 // Field OPEN_WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      45: aload_0
      46: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
      49: lconst_0
      50: lcmp
      51: ifne          63
      54: aload_0
      55: getfield      #9                  // Field resources:Lreactor/core/Disposable$Composite;
      58: invokeinterface #39,  1           // InterfaceMethod reactor/core/Disposable$Composite.dispose:()V
      63: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #21                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #21                 // Field done:Z
      13: aload_0
      14: invokevirtual #34                 // Method enter:()Z
      17: ifeq          24
      20: aload_0
      21: invokevirtual #35                 // Method drainLoop:()V
      24: getstatic     #13                 // Field OPEN_WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      27: aload_0
      28: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
      31: lconst_0
      32: lcmp
      33: ifne          45
      36: aload_0
      37: getfield      #9                  // Field resources:Lreactor/core/Disposable$Composite;
      40: invokeinterface #39,  1           // InterfaceMethod reactor/core/Disposable$Composite.dispose:()V
      45: return

  void error(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
       4: invokeinterface #40,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
       9: aload_0
      10: getfield      #9                  // Field resources:Lreactor/core/Disposable$Composite;
      13: invokeinterface #39,  1           // InterfaceMethod reactor/core/Disposable$Composite.dispose:()V
      18: getstatic     #41                 // Field BOUNDARY:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      21: aload_0
      22: invokestatic  #42                 // Method reactor/core/publisher/OperatorDisposables.dispose:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      25: pop
      26: aload_0
      27: getfield      #22                 // Field actual:Lreactor/core/CoreSubscriber;
      30: aload_1
      31: invokeinterface #43,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      36: return

  public void request(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #44                 // Method requested:(J)V
       5: return

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #45                 // Field cancelled:Z
       5: return

  void dispose();
    Code:
       0: aload_0
       1: getfield      #9                  // Field resources:Lreactor/core/Disposable$Composite;
       4: invokeinterface #39,  1           // InterfaceMethod reactor/core/Disposable$Composite.dispose:()V
       9: getstatic     #41                 // Field BOUNDARY:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: aload_0
      13: invokestatic  #42                 // Method reactor/core/publisher/OperatorDisposables.dispose:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      16: pop
      17: return

  void drainLoop();
    Code:
       0: aload_0
       1: getfield      #32                 // Field queue:Ljava/util/Queue;
       4: astore_1
       5: aload_0
       6: getfield      #22                 // Field actual:Lreactor/core/CoreSubscriber;
       9: astore_2
      10: aload_0
      11: getfield      #12                 // Field windows:Ljava/util/List;
      14: astore_3
      15: iconst_1
      16: istore        4
      18: aload_0
      19: getfield      #21                 // Field done:Z
      22: istore        5
      24: aload_1
      25: invokeinterface #46,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      30: astore        6
      32: aload         6
      34: ifnonnull     41
      37: iconst_1
      38: goto          42
      41: iconst_0
      42: istore        7
      44: iload         5
      46: ifeq          177
      49: iload         7
      51: ifeq          177
      54: aload_0
      55: invokevirtual #47                 // Method dispose:()V
      58: aload_0
      59: getfield      #37                 // Field error:Ljava/lang/Throwable;
      62: astore        8
      64: aload         8
      66: ifnull        123
      69: aload_0
      70: getfield      #22                 // Field actual:Lreactor/core/CoreSubscriber;
      73: aload         8
      75: invokeinterface #43,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      80: aload_3
      81: invokeinterface #26,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      86: astore        9
      88: aload         9
      90: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      95: ifeq          120
      98: aload         9
     100: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     105: checkcast     #29                 // class reactor/core/publisher/UnicastProcessor
     108: astore        10
     110: aload         10
     112: aload         8
     114: invokevirtual #48                 // Method reactor/core/publisher/UnicastProcessor.onError:(Ljava/lang/Throwable;)V
     117: goto          88
     120: goto          170
     123: aload_0
     124: getfield      #22                 // Field actual:Lreactor/core/CoreSubscriber;
     127: invokeinterface #49,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     132: aload_3
     133: invokeinterface #26,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     138: astore        9
     140: aload         9
     142: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     147: ifeq          170
     150: aload         9
     152: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     157: checkcast     #29                 // class reactor/core/publisher/UnicastProcessor
     160: astore        10
     162: aload         10
     164: invokevirtual #50                 // Method reactor/core/publisher/UnicastProcessor.onComplete:()V
     167: goto          140
     170: aload_3
     171: invokeinterface #51,  1           // InterfaceMethod java/util/List.clear:()V
     176: return
     177: iload         7
     179: ifeq          185
     182: goto          483
     185: aload         6
     187: instanceof    #52                 // class reactor/core/publisher/FluxWindowWhen$WindowOperation
     190: ifeq          436
     193: aload         6
     195: checkcast     #52                 // class reactor/core/publisher/FluxWindowWhen$WindowOperation
     198: astore        8
     200: aload         8
     202: getfield      #53                 // Field reactor/core/publisher/FluxWindowWhen$WindowOperation.w:Lreactor/core/publisher/UnicastProcessor;
     205: astore        9
     207: aload         9
     209: ifnull        251
     212: aload_3
     213: aload         8
     215: getfield      #53                 // Field reactor/core/publisher/FluxWindowWhen$WindowOperation.w:Lreactor/core/publisher/UnicastProcessor;
     218: invokeinterface #54,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
     223: ifeq          18
     226: aload         8
     228: getfield      #53                 // Field reactor/core/publisher/FluxWindowWhen$WindowOperation.w:Lreactor/core/publisher/UnicastProcessor;
     231: invokevirtual #50                 // Method reactor/core/publisher/UnicastProcessor.onComplete:()V
     234: getstatic     #13                 // Field OPEN_WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     237: aload_0
     238: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
     241: lconst_0
     242: lcmp
     243: ifne          18
     246: aload_0
     247: invokevirtual #47                 // Method dispose:()V
     250: return
     251: aload_0
     252: getfield      #45                 // Field cancelled:Z
     255: ifeq          261
     258: goto          18
     261: aload_0
     262: getfield      #7                  // Field processorQueueSupplier:Ljava/util/function/Supplier;
     265: invokeinterface #2,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     270: checkcast     #3                  // class java/util/Queue
     273: invokestatic  #55                 // Method reactor/core/publisher/UnicastProcessor.create:(Ljava/util/Queue;)Lreactor/core/publisher/UnicastProcessor;
     276: astore        9
     278: aload_0
     279: invokevirtual #56                 // Method requested:()J
     282: lstore        10
     284: lload         10
     286: lconst_0
     287: lcmp
     288: ifeq          326
     291: aload_3
     292: aload         9
     294: invokeinterface #57,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     299: pop
     300: aload_2
     301: aload         9
     303: invokeinterface #58,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     308: lload         10
     310: ldc2_w        #18                 // long 9223372036854775807l
     313: lcmp
     314: ifeq          345
     317: aload_0
     318: lconst_1
     319: invokevirtual #59                 // Method produced:(J)J
     322: pop2
     323: goto          345
     326: aload_0
     327: iconst_1
     328: putfield      #45                 // Field cancelled:Z
     331: aload_2
     332: ldc           #60                 // String Could not deliver new window due to lack of requests
     334: invokestatic  #61                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
     337: invokeinterface #62,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     342: goto          18
     345: aload_0
     346: getfield      #6                  // Field close:Ljava/util/function/Function;
     349: aload         8
     351: getfield      #63                 // Field reactor/core/publisher/FluxWindowWhen$WindowOperation.open:Ljava/lang/Object;
     354: invokeinterface #64,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     359: ldc           #65                 // String The publisher supplied is null
     361: invokestatic  #66                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
     364: checkcast     #67                 // class org/reactivestreams/Publisher
     367: astore        12
     369: goto          390
     372: astore        13
     374: aload_0
     375: iconst_1
     376: putfield      #45                 // Field cancelled:Z
     379: aload_2
     380: aload         13
     382: invokeinterface #62,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     387: goto          18
     390: new           #69                 // class reactor/core/publisher/FluxWindowWhen$WindowWhenCloseSubscriber
     393: dup
     394: aload_0
     395: aload         9
     397: invokespecial #70                 // Method reactor/core/publisher/FluxWindowWhen$WindowWhenCloseSubscriber."<init>":(Lreactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber;Lreactor/core/publisher/UnicastProcessor;)V
     400: astore        13
     402: aload_0
     403: getfield      #9                  // Field resources:Lreactor/core/Disposable$Composite;
     406: aload         13
     408: invokeinterface #71,  2           // InterfaceMethod reactor/core/Disposable$Composite.add:(Lreactor/core/Disposable;)Z
     413: ifeq          18
     416: getstatic     #13                 // Field OPEN_WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     419: aload_0
     420: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndIncrement:(Ljava/lang/Object;)J
     423: pop2
     424: aload         12
     426: aload         13
     428: invokeinterface #73,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     433: goto          18
     436: aload_3
     437: invokeinterface #26,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     442: astore        8
     444: aload         8
     446: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     451: ifeq          480
     454: aload         8
     456: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     461: checkcast     #29                 // class reactor/core/publisher/UnicastProcessor
     464: astore        9
     466: aload         6
     468: astore        10
     470: aload         9
     472: aload         10
     474: invokevirtual #30                 // Method reactor/core/publisher/UnicastProcessor.onNext:(Ljava/lang/Object;)V
     477: goto          444
     480: goto          18
     483: aload_0
     484: iload         4
     486: ineg
     487: invokevirtual #31                 // Method leave:(I)I
     490: istore        4
     492: iload         4
     494: ifne          18
     497: goto          500
     500: return
    Exception table:
       from    to  target type
         345   369   372   Class java/lang/Throwable

  void open(U);
    Code:
       0: aload_0
       1: getfield      #32                 // Field queue:Ljava/util/Queue;
       4: new           #52                 // class reactor/core/publisher/FluxWindowWhen$WindowOperation
       7: dup
       8: aconst_null
       9: aload_1
      10: invokespecial #74                 // Method reactor/core/publisher/FluxWindowWhen$WindowOperation."<init>":(Lreactor/core/publisher/UnicastProcessor;Ljava/lang/Object;)V
      13: invokeinterface #33,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      18: pop
      19: aload_0
      20: invokevirtual #34                 // Method enter:()Z
      23: ifeq          30
      26: aload_0
      27: invokevirtual #35                 // Method drainLoop:()V
      30: return

  void close(reactor.core.publisher.FluxWindowWhen$WindowWhenCloseSubscriber<T, V>);
    Code:
       0: aload_0
       1: getfield      #9                  // Field resources:Lreactor/core/Disposable$Composite;
       4: aload_1
       5: invokeinterface #75,  2           // InterfaceMethod reactor/core/Disposable$Composite.remove:(Lreactor/core/Disposable;)Z
      10: pop
      11: aload_0
      12: getfield      #32                 // Field queue:Ljava/util/Queue;
      15: new           #52                 // class reactor/core/publisher/FluxWindowWhen$WindowOperation
      18: dup
      19: aload_1
      20: getfield      #76                 // Field reactor/core/publisher/FluxWindowWhen$WindowWhenCloseSubscriber.w:Lreactor/core/publisher/UnicastProcessor;
      23: aconst_null
      24: invokespecial #74                 // Method reactor/core/publisher/FluxWindowWhen$WindowOperation."<init>":(Lreactor/core/publisher/UnicastProcessor;Ljava/lang/Object;)V
      27: invokeinterface #33,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      32: pop
      33: aload_0
      34: invokevirtual #34                 // Method enter:()Z
      37: ifeq          44
      40: aload_0
      41: invokevirtual #35                 // Method drainLoop:()V
      44: return

  static {};
    Code:
       0: ldc           #77                 // class reactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber
       2: ldc           #78                 // class reactor/core/Disposable
       4: ldc           #79                 // String boundary
       6: invokestatic  #80                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #41                 // Field BOUNDARY:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #77                 // class reactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber
      14: ldc           #81                 // String openWindowCount
      16: invokestatic  #82                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      19: putstatic     #13                 // Field OPEN_WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      22: return
}
