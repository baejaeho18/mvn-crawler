Compiled from "MonoFilterWhen.java"
class reactor.core.publisher.MonoFilterWhen<T> extends reactor.core.publisher.MonoOperator<T, T> {
  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<java.lang.Boolean>> asyncPredicate;

  reactor.core.publisher.MonoFilterWhen(reactor.core.publisher.Mono<T>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<java.lang.Boolean>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field asyncPredicate:Ljava/util/function/Function;
      10: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field source:Lreactor/core/publisher/Mono;
       4: new           #4                  // class reactor/core/publisher/MonoFilterWhen$MonoFilterWhenMain
       7: dup
       8: aload_1
       9: aload_0
      10: getfield      #2                  // Field asyncPredicate:Ljava/util/function/Function;
      13: invokespecial #5                  // Method reactor/core/publisher/MonoFilterWhen$MonoFilterWhenMain."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;)V
      16: invokevirtual #6                  // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      19: return
}
