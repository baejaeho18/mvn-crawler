Compiled from "MonoIgnoreThen.java"
final class reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain<T> extends reactor.core.publisher.Operators$MonoSubscriber<T, T> {
  final reactor.core.publisher.MonoIgnoreThen$ThenIgnoreInner ignore;

  final reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner<T> accept;

  final org.reactivestreams.Publisher<?>[] ignoreMonos;

  final reactor.core.publisher.Mono<T> lastMono;

  int index;

  volatile boolean active;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain> WIP;

  reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain(reactor.core.CoreSubscriber<? super T>, org.reactivestreams.Publisher<?>[], reactor.core.publisher.Mono<T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/Operators$MonoSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field ignoreMonos:[Lorg/reactivestreams/Publisher;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field lastMono:Lreactor/core/publisher/Mono;
      15: aload_0
      16: new           #4                  // class reactor/core/publisher/MonoIgnoreThen$ThenIgnoreInner
      19: dup
      20: aload_0
      21: invokespecial #5                  // Method reactor/core/publisher/MonoIgnoreThen$ThenIgnoreInner."<init>":(Lreactor/core/publisher/MonoIgnoreThen$ThenIgnoreMain;)V
      24: putfield      #6                  // Field ignore:Lreactor/core/publisher/MonoIgnoreThen$ThenIgnoreInner;
      27: aload_0
      28: new           #7                  // class reactor/core/publisher/MonoIgnoreThen$ThenAcceptInner
      31: dup
      32: aload_0
      33: invokespecial #8                  // Method reactor/core/publisher/MonoIgnoreThen$ThenAcceptInner."<init>":(Lreactor/core/publisher/MonoIgnoreThen$ThenIgnoreMain;)V
      36: putfield      #9                  // Field accept:Lreactor/core/publisher/MonoIgnoreThen$ThenAcceptInner;
      39: return

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: iconst_2
       1: anewarray     #10                 // class reactor/core/publisher/InnerConsumer
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #6                  // Field ignore:Lreactor/core/publisher/MonoIgnoreThen$ThenIgnoreInner;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: getfield      #9                  // Field accept:Lreactor/core/publisher/MonoIgnoreThen$ThenAcceptInner;
      17: aastore
      18: invokestatic  #11                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
      21: areturn

  void drain();
    Code:
       0: getstatic     #12                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: invokevirtual #14                 // Method isCancelled:()Z
      15: ifeq          19
      18: return
      19: aload_0
      20: getfield      #15                 // Field active:Z
      23: ifne          213
      26: aload_0
      27: getfield      #2                  // Field ignoreMonos:[Lorg/reactivestreams/Publisher;
      30: astore_1
      31: aload_0
      32: getfield      #16                 // Field index:I
      35: istore_2
      36: iload_2
      37: aload_1
      38: arraylength
      39: if_icmpne     141
      42: aload_0
      43: getfield      #6                  // Field ignore:Lreactor/core/publisher/MonoIgnoreThen$ThenIgnoreInner;
      46: invokevirtual #17                 // Method reactor/core/publisher/MonoIgnoreThen$ThenIgnoreInner.clear:()V
      49: aload_0
      50: getfield      #3                  // Field lastMono:Lreactor/core/publisher/Mono;
      53: astore_3
      54: aload_3
      55: instanceof    #18                 // class java/util/concurrent/Callable
      58: ifeq          125
      61: aload_3
      62: checkcast     #18                 // class java/util/concurrent/Callable
      65: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      70: astore        4
      72: goto          101
      75: astore        5
      77: aload_0
      78: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
      81: aload         5
      83: aload_0
      84: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
      87: invokeinterface #22,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      92: invokestatic  #23                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      95: invokeinterface #24,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     100: return
     101: aload         4
     103: ifnonnull     118
     106: aload_0
     107: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
     110: invokeinterface #25,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     115: goto          124
     118: aload_0
     119: aload         4
     121: invokevirtual #26                 // Method complete:(Ljava/lang/Object;)V
     124: return
     125: aload_0
     126: iconst_1
     127: putfield      #15                 // Field active:Z
     130: aload_3
     131: aload_0
     132: getfield      #9                  // Field accept:Lreactor/core/publisher/MonoIgnoreThen$ThenAcceptInner;
     135: invokevirtual #27                 // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
     138: goto          213
     141: aload_1
     142: iload_2
     143: aaload
     144: astore_3
     145: aload_0
     146: iload_2
     147: iconst_1
     148: iadd
     149: putfield      #16                 // Field index:I
     152: aload_3
     153: instanceof    #18                 // class java/util/concurrent/Callable
     156: ifeq          198
     159: aload_3
     160: checkcast     #18                 // class java/util/concurrent/Callable
     163: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
     168: pop
     169: goto          11
     172: astore        4
     174: aload_0
     175: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
     178: aload         4
     180: aload_0
     181: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
     184: invokeinterface #22,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     189: invokestatic  #23                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     192: invokeinterface #24,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     197: return
     198: aload_0
     199: iconst_1
     200: putfield      #15                 // Field active:Z
     203: aload_3
     204: aload_0
     205: getfield      #6                  // Field ignore:Lreactor/core/publisher/MonoIgnoreThen$ThenIgnoreInner;
     208: invokeinterface #28,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     213: getstatic     #12                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     216: aload_0
     217: invokevirtual #29                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     220: ifne          11
     223: goto          226
     226: return
    Exception table:
       from    to  target type
          61    72    75   Class java/lang/Throwable
         159   169   172   Class java/lang/Throwable

  public void cancel();
    Code:
       0: aload_0
       1: invokespecial #30                 // Method reactor/core/publisher/Operators$MonoSubscriber.cancel:()V
       4: aload_0
       5: getfield      #6                  // Field ignore:Lreactor/core/publisher/MonoIgnoreThen$ThenIgnoreInner;
       8: invokevirtual #31                 // Method reactor/core/publisher/MonoIgnoreThen$ThenIgnoreInner.cancel:()V
      11: aload_0
      12: getfield      #9                  // Field accept:Lreactor/core/publisher/MonoIgnoreThen$ThenAcceptInner;
      15: invokevirtual #32                 // Method reactor/core/publisher/MonoIgnoreThen$ThenAcceptInner.cancel:()V
      18: return

  void ignoreDone();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #15                 // Field active:Z
       5: aload_0
       6: invokevirtual #33                 // Method drain:()V
       9: return

  static {};
    Code:
       0: ldc           #34                 // class reactor/core/publisher/MonoIgnoreThen$ThenIgnoreMain
       2: ldc           #35                 // String wip
       4: invokestatic  #36                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #12                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
