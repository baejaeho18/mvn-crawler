Compiled from "RingBuffer.java"
final class reactor.core.publisher.MultiProducerRingBuffer extends reactor.core.publisher.RingBufferProducer {
  private static final sun.misc.Unsafe UNSAFE;

  private static final long BASE;

  private static final long SCALE;

  private final reactor.core.publisher.RingBuffer$Sequence gatingSequenceCache;

  private final int[] availableBuffer;

  private final int indexMask;

  private final int indexShift;

  reactor.core.publisher.MultiProducerRingBuffer(int, reactor.util.concurrent.WaitStrategy, java.lang.Runnable);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method reactor/core/publisher/RingBufferProducer."<init>":(ILreactor/util/concurrent/WaitStrategy;Ljava/lang/Runnable;)V
       7: aload_0
       8: new           #2                  // class reactor/core/publisher/UnsafeSequence
      11: dup
      12: ldc2_w        #4                  // long -1l
      15: invokespecial #6                  // Method reactor/core/publisher/UnsafeSequence."<init>":(J)V
      18: putfield      #7                  // Field gatingSequenceCache:Lreactor/core/publisher/RingBuffer$Sequence;
      21: aload_0
      22: iload_1
      23: newarray       int
      25: putfield      #8                  // Field availableBuffer:[I
      28: aload_0
      29: iload_1
      30: iconst_1
      31: isub
      32: putfield      #9                  // Field indexMask:I
      35: aload_0
      36: iload_1
      37: invokestatic  #10                 // Method reactor/core/publisher/RingBuffer.log2:(I)I
      40: putfield      #11                 // Field indexShift:I
      43: aload_0
      44: invokespecial #12                 // Method initialiseAvailableBuffer:()V
      47: return

  long next();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #13                 // Method next:(I)J
       5: lreturn

  long next(int);
    Code:
       0: aload_0
       1: getfield      #14                 // Field cursor:Lreactor/core/publisher/RingBuffer$Sequence;
       4: invokeinterface #15,  1           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.getAsLong:()J
       9: lstore_2
      10: lload_2
      11: iload_1
      12: i2l
      13: ladd
      14: lstore        4
      16: lload         4
      18: aload_0
      19: getfield      #16                 // Field bufferSize:I
      22: i2l
      23: lsub
      24: lstore        6
      26: aload_0
      27: getfield      #7                  // Field gatingSequenceCache:Lreactor/core/publisher/RingBuffer$Sequence;
      30: invokeinterface #15,  1           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.getAsLong:()J
      35: lstore        8
      37: lload         6
      39: lload         8
      41: lcmp
      42: ifgt          52
      45: lload         8
      47: lload_2
      48: lcmp
      49: ifle          107
      52: aload_0
      53: getfield      #17                 // Field gatingSequences:[Lreactor/core/publisher/RingBuffer$Sequence;
      56: lload_2
      57: invokestatic  #18                 // Method reactor/core/publisher/RingBuffer.getMinimumSequence:([Lreactor/core/publisher/RingBuffer$Sequence;J)J
      60: lstore        10
      62: lload         6
      64: lload         10
      66: lcmp
      67: ifle          93
      70: aload_0
      71: getfield      #19                 // Field spinObserver:Ljava/lang/Runnable;
      74: ifnull        86
      77: aload_0
      78: getfield      #19                 // Field spinObserver:Ljava/lang/Runnable;
      81: invokeinterface #20,  1           // InterfaceMethod java/lang/Runnable.run:()V
      86: lconst_1
      87: invokestatic  #21                 // Method java/util/concurrent/locks/LockSupport.parkNanos:(J)V
      90: goto          0
      93: aload_0
      94: getfield      #7                  // Field gatingSequenceCache:Lreactor/core/publisher/RingBuffer$Sequence;
      97: lload         10
      99: invokeinterface #22,  3           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.set:(J)V
     104: goto          125
     107: aload_0
     108: getfield      #14                 // Field cursor:Lreactor/core/publisher/RingBuffer$Sequence;
     111: lload_2
     112: lload         4
     114: invokeinterface #23,  5           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.compareAndSet:(JJ)Z
     119: ifeq          125
     122: goto          128
     125: goto          0
     128: lload         4
     130: lreturn

  long getPending();
    Code:
       0: aload_0
       1: getfield      #17                 // Field gatingSequences:[Lreactor/core/publisher/RingBuffer$Sequence;
       4: aload_0
       5: getfield      #14                 // Field cursor:Lreactor/core/publisher/RingBuffer$Sequence;
       8: invokeinterface #15,  1           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.getAsLong:()J
      13: invokestatic  #18                 // Method reactor/core/publisher/RingBuffer.getMinimumSequence:([Lreactor/core/publisher/RingBuffer$Sequence;J)J
      16: lstore_1
      17: aload_0
      18: getfield      #14                 // Field cursor:Lreactor/core/publisher/RingBuffer$Sequence;
      21: invokeinterface #15,  1           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.getAsLong:()J
      26: lstore_3
      27: lload_3
      28: lload_1
      29: lsub
      30: lreturn

  private void initialiseAvailableBuffer();
    Code:
       0: aload_0
       1: getfield      #8                  // Field availableBuffer:[I
       4: arraylength
       5: iconst_1
       6: isub
       7: istore_1
       8: iload_1
       9: ifeq          24
      12: aload_0
      13: iload_1
      14: iconst_m1
      15: invokespecial #24                 // Method setAvailableBufferValue:(II)V
      18: iinc          1, -1
      21: goto          8
      24: aload_0
      25: iconst_0
      26: iconst_m1
      27: invokespecial #24                 // Method setAvailableBufferValue:(II)V
      30: return

  void publish(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokespecial #25                 // Method setAvailable:(J)V
       5: aload_0
       6: getfield      #26                 // Field waitStrategy:Lreactor/util/concurrent/WaitStrategy;
       9: invokevirtual #27                 // Method reactor/util/concurrent/WaitStrategy.signalAllWhenBlocking:()V
      12: return

  private void setAvailable(long);
    Code:
       0: aload_0
       1: aload_0
       2: lload_1
       3: invokespecial #28                 // Method calculateIndex:(J)I
       6: aload_0
       7: lload_1
       8: invokespecial #29                 // Method calculateAvailabilityFlag:(J)I
      11: invokespecial #24                 // Method setAvailableBufferValue:(II)V
      14: return

  private void setAvailableBufferValue(int, int);
    Code:
       0: iload_1
       1: i2l
       2: getstatic     #30                 // Field SCALE:J
       5: lmul
       6: getstatic     #31                 // Field BASE:J
       9: ladd
      10: lstore_3
      11: getstatic     #32                 // Field UNSAFE:Lsun/misc/Unsafe;
      14: aload_0
      15: getfield      #8                  // Field availableBuffer:[I
      18: lload_3
      19: iload_2
      20: invokevirtual #33                 // Method sun/misc/Unsafe.putOrderedInt:(Ljava/lang/Object;JI)V
      23: return

  boolean isAvailable(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokespecial #28                 // Method calculateIndex:(J)I
       5: istore_3
       6: aload_0
       7: lload_1
       8: invokespecial #29                 // Method calculateAvailabilityFlag:(J)I
      11: istore        4
      13: iload_3
      14: i2l
      15: getstatic     #30                 // Field SCALE:J
      18: lmul
      19: getstatic     #31                 // Field BASE:J
      22: ladd
      23: lstore        5
      25: getstatic     #32                 // Field UNSAFE:Lsun/misc/Unsafe;
      28: aload_0
      29: getfield      #8                  // Field availableBuffer:[I
      32: lload         5
      34: invokevirtual #34                 // Method sun/misc/Unsafe.getIntVolatile:(Ljava/lang/Object;J)I
      37: iload         4
      39: if_icmpne     46
      42: iconst_1
      43: goto          47
      46: iconst_0
      47: ireturn

  long getHighestPublishedSequence(long, long);
    Code:
       0: lload_1
       1: lstore        5
       3: lload         5
       5: lload_3
       6: lcmp
       7: ifgt          33
      10: aload_0
      11: lload         5
      13: invokevirtual #35                 // Method isAvailable:(J)Z
      16: ifne          24
      19: lload         5
      21: lconst_1
      22: lsub
      23: lreturn
      24: lload         5
      26: lconst_1
      27: ladd
      28: lstore        5
      30: goto          3
      33: lload_3
      34: lreturn

  private int calculateAvailabilityFlag(long);
    Code:
       0: lload_1
       1: aload_0
       2: getfield      #11                 // Field indexShift:I
       5: lushr
       6: l2i
       7: ireturn

  private int calculateIndex(long);
    Code:
       0: lload_1
       1: l2i
       2: aload_0
       3: getfield      #9                  // Field indexMask:I
       6: iand
       7: ireturn

  static {};
    Code:
       0: invokestatic  #36                 // Method reactor/core/publisher/RingBuffer.getUnsafe:()Ljava/lang/Object;
       3: checkcast     #37                 // class sun/misc/Unsafe
       6: putstatic     #32                 // Field UNSAFE:Lsun/misc/Unsafe;
       9: getstatic     #32                 // Field UNSAFE:Lsun/misc/Unsafe;
      12: ldc           #38                 // class "[I"
      14: invokevirtual #39                 // Method sun/misc/Unsafe.arrayBaseOffset:(Ljava/lang/Class;)I
      17: i2l
      18: putstatic     #31                 // Field BASE:J
      21: getstatic     #32                 // Field UNSAFE:Lsun/misc/Unsafe;
      24: ldc           #38                 // class "[I"
      26: invokevirtual #40                 // Method sun/misc/Unsafe.arrayIndexScale:(Ljava/lang/Class;)I
      29: i2l
      30: putstatic     #30                 // Field SCALE:J
      33: return
}
