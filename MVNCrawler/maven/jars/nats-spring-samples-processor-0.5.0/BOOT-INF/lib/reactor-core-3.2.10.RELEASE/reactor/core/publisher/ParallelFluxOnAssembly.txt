Compiled from "ParallelFluxOnAssembly.java"
final class reactor.core.publisher.ParallelFluxOnAssembly<T> extends reactor.core.publisher.ParallelFlux<T> implements reactor.core.Fuseable, reactor.core.publisher.AssemblyOp, reactor.core.Scannable {
  final reactor.core.publisher.ParallelFlux<T> source;

  final reactor.core.publisher.FluxOnAssembly$AssemblySnapshot stacktrace;

  reactor.core.publisher.ParallelFluxOnAssembly(reactor.core.publisher.ParallelFlux<T>, reactor.core.publisher.FluxOnAssembly$AssemblySnapshot);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/ParallelFlux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
      14: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #4                  // Method reactor/core/publisher/ParallelFlux.getPrefetch:()I
       7: ireturn

  public int parallelism();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #5                  // Method reactor/core/publisher/ParallelFlux.parallelism:()I
       7: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #6                  // Method validate:([Lorg/reactivestreams/Subscriber;)Z
       5: ifne          9
       8: return
       9: aload_1
      10: arraylength
      11: istore_2
      12: iload_2
      13: anewarray     #7                  // class reactor/core/CoreSubscriber
      16: astore_3
      17: iconst_0
      18: istore        5
      20: iload         5
      22: iload_2
      23: if_icmpge     100
      26: aload_1
      27: iload         5
      29: aaload
      30: astore        4
      32: aload         4
      34: instanceof    #8                  // class reactor/core/Fuseable$ConditionalSubscriber
      37: ifeq          69
      40: aload         4
      42: checkcast     #8                  // class reactor/core/Fuseable$ConditionalSubscriber
      45: astore        6
      47: new           #9                  // class reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber
      50: dup
      51: aload         6
      53: aload_0
      54: getfield      #3                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
      57: aload_0
      58: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      61: invokespecial #10                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;Lorg/reactivestreams/Publisher;)V
      64: astore        4
      66: goto          88
      69: new           #11                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber
      72: dup
      73: aload         4
      75: aload_0
      76: getfield      #3                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
      79: aload_0
      80: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      83: invokespecial #12                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;Lorg/reactivestreams/Publisher;)V
      86: astore        4
      88: aload_3
      89: iload         5
      91: aload         4
      93: aastore
      94: iinc          5, 1
      97: goto          20
     100: aload_0
     101: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
     104: aload_3
     105: invokevirtual #13                 // Method reactor/core/publisher/ParallelFlux.subscribe:([Lreactor/core/CoreSubscriber;)V
     108: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #14                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      11: areturn
      12: aload_1
      13: getstatic     #15                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #16                 // Method getPrefetch:()I
      23: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aload_1
      28: getstatic     #18                 // Field reactor/core/Scannable$Attr.ACTUAL_METADATA:Lreactor/core/Scannable$Attr;
      31: if_acmpne     53
      34: aload_0
      35: getfield      #3                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
      38: getfield      #19                 // Field reactor/core/publisher/FluxOnAssembly$AssemblySnapshot.checkpointed:Z
      41: ifne          48
      44: iconst_1
      45: goto          49
      48: iconst_0
      49: invokestatic  #20                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      52: areturn
      53: aconst_null
      54: areturn

  public java.lang.String stepName();
    Code:
       0: aload_0
       1: getfield      #3                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
       4: invokevirtual #21                 // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshot.operatorAssemblyInformation:()Ljava/lang/String;
       7: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #3                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
       4: invokevirtual #21                 // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshot.operatorAssemblyInformation:()Ljava/lang/String;
       7: areturn
}
