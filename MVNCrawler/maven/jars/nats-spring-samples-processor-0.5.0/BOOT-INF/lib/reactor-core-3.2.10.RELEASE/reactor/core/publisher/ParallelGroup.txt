Compiled from "ParallelGroup.java"
final class reactor.core.publisher.ParallelGroup<T> extends reactor.core.publisher.Flux<reactor.core.publisher.GroupedFlux<java.lang.Integer, T>> implements reactor.core.Scannable, reactor.core.Fuseable {
  final reactor.core.publisher.ParallelFlux<? extends T> source;

  reactor.core.publisher.ParallelGroup(reactor.core.publisher.ParallelFlux<? extends T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       9: return

  public void subscribe(reactor.core.CoreSubscriber<? super reactor.core.publisher.GroupedFlux<java.lang.Integer, T>>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #3                  // Method reactor/core/publisher/ParallelFlux.parallelism:()I
       7: istore_2
       8: iload_2
       9: anewarray     #4                  // class reactor/core/publisher/ParallelGroup$ParallelInnerGroup
      12: astore_3
      13: iconst_0
      14: istore        4
      16: iload         4
      18: iload_2
      19: if_icmpge     41
      22: aload_3
      23: iload         4
      25: new           #4                  // class reactor/core/publisher/ParallelGroup$ParallelInnerGroup
      28: dup
      29: iload         4
      31: invokespecial #5                  // Method reactor/core/publisher/ParallelGroup$ParallelInnerGroup."<init>":(I)V
      34: aastore
      35: iinc          4, 1
      38: goto          16
      41: aload_1
      42: aload_3
      43: invokestatic  #6                  // Method reactor/core/publisher/FluxArray.subscribe:(Lreactor/core/CoreSubscriber;[Ljava/lang/Object;)V
      46: aload_0
      47: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      50: aload_3
      51: invokevirtual #7                  // Method reactor/core/publisher/ParallelFlux.subscribe:([Lreactor/core/CoreSubscriber;)V
      54: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #8                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      11: areturn
      12: aload_1
      13: getstatic     #9                  // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #10                 // Method getPrefetch:()I
      23: invokestatic  #11                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aconst_null
      28: areturn
}
