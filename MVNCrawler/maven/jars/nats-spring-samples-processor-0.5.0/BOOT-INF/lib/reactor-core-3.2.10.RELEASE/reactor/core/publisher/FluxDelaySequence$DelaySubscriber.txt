Compiled from "FluxDelaySequence.java"
final class reactor.core.publisher.FluxDelaySequence$DelaySubscriber<T> implements reactor.core.publisher.InnerOperator<T, T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final long delay;

  final java.util.concurrent.TimeUnit timeUnit;

  final reactor.core.scheduler.Scheduler$Worker w;

  org.reactivestreams.Subscription s;

  volatile boolean done;

  volatile long delayed;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxDelaySequence$DelaySubscriber> DELAYED;

  reactor.core.publisher.FluxDelaySequence$DelaySubscriber(reactor.core.CoreSubscriber<? super T>, java.time.Duration, reactor.core.scheduler.Scheduler$Worker);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class reactor/core/publisher/SerializedSubscriber
       8: dup
       9: aload_1
      10: invokespecial #3                  // Method reactor/core/publisher/SerializedSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
      13: putfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      16: aload_0
      17: aload_3
      18: putfield      #5                  // Field w:Lreactor/core/scheduler/Scheduler$Worker;
      21: aload_2
      22: lconst_1
      23: invokestatic  #6                  // Method java/time/Duration.ofMinutes:(J)Ljava/time/Duration;
      26: invokevirtual #7                  // Method java/time/Duration.compareTo:(Ljava/time/Duration;)I
      29: ifge          50
      32: aload_0
      33: aload_2
      34: invokevirtual #8                  // Method java/time/Duration.toNanos:()J
      37: putfield      #9                  // Field delay:J
      40: aload_0
      41: getstatic     #10                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      44: putfield      #11                 // Field timeUnit:Ljava/util/concurrent/TimeUnit;
      47: goto          65
      50: aload_0
      51: aload_2
      52: invokevirtual #12                 // Method java/time/Duration.toMillis:()J
      55: putfield      #9                  // Field delay:J
      58: aload_0
      59: getstatic     #13                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      62: putfield      #11                 // Field timeUnit:Ljava/util/concurrent/TimeUnit;
      65: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #15                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          26
      11: aload_0
      12: aload_1
      13: putfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #16,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #17                 // Field done:Z
       4: ifne          16
       7: aload_0
       8: getfield      #18                 // Field delayed:J
      11: lconst_0
      12: lcmp
      13: ifge          25
      16: aload_1
      17: aload_0
      18: invokevirtual #19                 // Method currentContext:()Lreactor/util/context/Context;
      21: invokestatic  #20                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      24: return
      25: getstatic     #21                 // Field DELAYED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      28: aload_0
      29: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.incrementAndGet:(Ljava/lang/Object;)J
      32: pop2
      33: aload_0
      34: getfield      #5                  // Field w:Lreactor/core/scheduler/Scheduler$Worker;
      37: aload_0
      38: aload_1
      39: invokedynamic #23,  0             // InvokeDynamic #0:run:(Lreactor/core/publisher/FluxDelaySequence$DelaySubscriber;Ljava/lang/Object;)Ljava/lang/Runnable;
      44: aload_0
      45: getfield      #9                  // Field delay:J
      48: aload_0
      49: getfield      #11                 // Field timeUnit:Ljava/util/concurrent/TimeUnit;
      52: invokeinterface #24,  5           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      57: pop
      58: return

  private void delayedNext(T);
    Code:
       0: getstatic     #21                 // Field DELAYED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
       7: pop2
       8: aload_0
       9: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      12: aload_1
      13: invokeinterface #26,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      18: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #17                 // Field done:Z
       4: ifeq          16
       7: aload_1
       8: aload_0
       9: invokevirtual #19                 // Method currentContext:()Lreactor/util/context/Context;
      12: invokestatic  #27                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      15: return
      16: aload_0
      17: iconst_1
      18: putfield      #17                 // Field done:Z
      21: getstatic     #21                 // Field DELAYED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      24: aload_0
      25: lconst_0
      26: ldc2_w        #28                 // long -1l
      29: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.compareAndSet:(Ljava/lang/Object;JJ)Z
      32: ifeq          48
      35: aload_0
      36: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      39: aload_1
      40: invokeinterface #31,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      45: goto          75
      48: aload_0
      49: getfield      #5                  // Field w:Lreactor/core/scheduler/Scheduler$Worker;
      52: new           #32                 // class reactor/core/publisher/FluxDelaySequence$DelaySubscriber$OnError
      55: dup
      56: aload_0
      57: aload_1
      58: invokespecial #33                 // Method reactor/core/publisher/FluxDelaySequence$DelaySubscriber$OnError."<init>":(Lreactor/core/publisher/FluxDelaySequence$DelaySubscriber;Ljava/lang/Throwable;)V
      61: aload_0
      62: getfield      #9                  // Field delay:J
      65: aload_0
      66: getfield      #11                 // Field timeUnit:Ljava/util/concurrent/TimeUnit;
      69: invokeinterface #24,  5           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      74: pop
      75: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #17                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #17                 // Field done:Z
      13: getstatic     #21                 // Field DELAYED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      16: aload_0
      17: lconst_0
      18: ldc2_w        #28                 // long -1l
      21: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.compareAndSet:(Ljava/lang/Object;JJ)Z
      24: ifeq          39
      27: aload_0
      28: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      31: invokeinterface #34,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      36: goto          65
      39: aload_0
      40: getfield      #5                  // Field w:Lreactor/core/scheduler/Scheduler$Worker;
      43: new           #35                 // class reactor/core/publisher/FluxDelaySequence$DelaySubscriber$OnComplete
      46: dup
      47: aload_0
      48: invokespecial #36                 // Method reactor/core/publisher/FluxDelaySequence$DelaySubscriber$OnComplete."<init>":(Lreactor/core/publisher/FluxDelaySequence$DelaySubscriber;)V
      51: aload_0
      52: getfield      #9                  // Field delay:J
      55: aload_0
      56: getfield      #11                 // Field timeUnit:Ljava/util/concurrent/TimeUnit;
      59: invokeinterface #24,  5           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      64: pop
      65: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
       4: lload_1
       5: invokeinterface #37,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      10: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
       4: invokeinterface #38,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
       9: aload_0
      10: getfield      #5                  // Field w:Lreactor/core/scheduler/Scheduler$Worker;
      13: invokeinterface #39,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      18: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #40                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #41                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #5                  // Field w:Lreactor/core/scheduler/Scheduler$Worker;
      23: areturn
      24: aload_1
      25: getstatic     #42                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      28: if_acmpne     39
      31: aload_0
      32: getfield      #17                 // Field done:Z
      35: invokestatic  #43                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      38: areturn
      39: aload_1
      40: getstatic     #44                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      43: if_acmpne     74
      46: aload_0
      47: getfield      #5                  // Field w:Lreactor/core/scheduler/Scheduler$Worker;
      50: invokeinterface #45,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.isDisposed:()Z
      55: ifeq          69
      58: aload_0
      59: getfield      #17                 // Field done:Z
      62: ifne          69
      65: iconst_1
      66: goto          70
      69: iconst_0
      70: invokestatic  #43                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      73: areturn
      74: aload_0
      75: aload_1
      76: invokespecial #46                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      79: areturn

  private void lambda$onNext$0(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #47                 // Method delayedNext:(Ljava/lang/Object;)V
       5: return

  static {};
    Code:
       0: ldc           #48                 // class reactor/core/publisher/FluxDelaySequence$DelaySubscriber
       2: ldc           #49                 // String delayed
       4: invokestatic  #50                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       7: putstatic     #21                 // Field DELAYED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: return
}
