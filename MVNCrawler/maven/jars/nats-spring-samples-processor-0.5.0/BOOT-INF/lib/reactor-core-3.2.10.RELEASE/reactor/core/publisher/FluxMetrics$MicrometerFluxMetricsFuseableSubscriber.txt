Compiled from "FluxMetrics.java"
final class reactor.core.publisher.FluxMetrics$MicrometerFluxMetricsFuseableSubscriber<T> extends reactor.core.publisher.FluxMetrics$MicrometerFluxMetricsSubscriber<T> implements reactor.core.Fuseable, reactor.core.Fuseable$QueueSubscription<T> {
  private int fusionMode;

  reactor.core.publisher.FluxMetrics$MicrometerFluxMetricsFuseableSubscriber(reactor.core.CoreSubscriber<? super T>, io.micrometer.core.instrument.MeterRegistry, io.micrometer.core.instrument.Clock, java.lang.String, java.util.List<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokespecial #1                  // Method reactor/core/publisher/FluxMetrics$MicrometerFluxMetricsSubscriber."<init>":(Lreactor/core/CoreSubscriber;Lio/micrometer/core/instrument/MeterRegistry;Lio/micrometer/core/instrument/Clock;Ljava/lang/String;Ljava/util/List;)V
      11: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fusionMode:I
       4: iconst_2
       5: if_icmpne     19
       8: aload_0
       9: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      12: aconst_null
      13: invokeinterface #5,  2            // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      18: return
      19: aload_0
      20: getfield      #6                  // Field done:Z
      23: ifeq          49
      26: aload_0
      27: getfield      #7                  // Field malformedSourceCounter:Lio/micrometer/core/instrument/Counter;
      30: invokeinterface #8,  1            // InterfaceMethod io/micrometer/core/instrument/Counter.increment:()V
      35: aload_1
      36: aload_0
      37: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      40: invokeinterface #9,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      45: invokestatic  #10                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      48: return
      49: aload_0
      50: getfield      #11                 // Field lastNextEventNanos:J
      53: lstore_2
      54: aload_0
      55: aload_0
      56: getfield      #12                 // Field clock:Lio/micrometer/core/instrument/Clock;
      59: invokeinterface #13,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      64: putfield      #11                 // Field lastNextEventNanos:J
      67: aload_0
      68: getfield      #14                 // Field onNextIntervalTimer:Lio/micrometer/core/instrument/Timer;
      71: aload_0
      72: getfield      #11                 // Field lastNextEventNanos:J
      75: lload_2
      76: lsub
      77: getstatic     #15                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      80: invokeinterface #16,  4           // InterfaceMethod io/micrometer/core/instrument/Timer.record:(JLjava/util/concurrent/TimeUnit;)V
      85: aload_0
      86: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      89: aload_1
      90: invokeinterface #5,  2            // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      95: return

  public int requestFusion(int);
    Code:
       0: aload_0
       1: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: ifnull        26
       7: aload_0
       8: aload_0
       9: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
      12: iload_1
      13: invokeinterface #18,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      18: putfield      #2                  // Field fusionMode:I
      21: aload_0
      22: getfield      #2                  // Field fusionMode:I
      25: ireturn
      26: iconst_0
      27: ireturn

  public T poll();
    Code:
       0: aload_0
       1: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: ifnonnull     9
       7: aconst_null
       8: areturn
       9: aload_0
      10: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
      13: invokeinterface #19,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.poll:()Ljava/lang/Object;
      18: astore_1
      19: aload_1
      20: ifnonnull     43
      23: aload_0
      24: getfield      #2                  // Field fusionMode:I
      27: iconst_1
      28: if_icmpne     43
      31: aload_0
      32: getfield      #20                 // Field subscribeToTerminateSample:Lio/micrometer/core/instrument/Timer$Sample;
      35: aload_0
      36: getfield      #21                 // Field subscribeToCompleteTimer:Lio/micrometer/core/instrument/Timer;
      39: invokevirtual #22                 // Method io/micrometer/core/instrument/Timer$Sample.stop:(Lio/micrometer/core/instrument/Timer;)J
      42: pop2
      43: aload_1
      44: ifnull        83
      47: aload_0
      48: getfield      #11                 // Field lastNextEventNanos:J
      51: lstore_2
      52: aload_0
      53: aload_0
      54: getfield      #12                 // Field clock:Lio/micrometer/core/instrument/Clock;
      57: invokeinterface #13,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      62: putfield      #11                 // Field lastNextEventNanos:J
      65: aload_0
      66: getfield      #14                 // Field onNextIntervalTimer:Lio/micrometer/core/instrument/Timer;
      69: aload_0
      70: getfield      #11                 // Field lastNextEventNanos:J
      73: lload_2
      74: lsub
      75: getstatic     #15                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      78: invokeinterface #16,  4           // InterfaceMethod io/micrometer/core/instrument/Timer.record:(JLjava/util/concurrent/TimeUnit;)V
      83: aload_1
      84: areturn
      85: astore_1
      86: aload_0
      87: getfield      #24                 // Field subscribeToErrorTimerFactory:Ljava/util/function/Function;
      90: aload_1
      91: invokeinterface #25,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      96: checkcast     #26                 // class io/micrometer/core/instrument/Timer
      99: astore_2
     100: aload_0
     101: getfield      #20                 // Field subscribeToTerminateSample:Lio/micrometer/core/instrument/Timer$Sample;
     104: aload_2
     105: invokevirtual #22                 // Method io/micrometer/core/instrument/Timer$Sample.stop:(Lio/micrometer/core/instrument/Timer;)J
     108: pop2
     109: aload_1
     110: athrow
    Exception table:
       from    to  target type
           9    84    85   Class java/lang/Throwable

  public void clear();
    Code:
       0: aload_0
       1: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: ifnull        16
       7: aload_0
       8: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
      11: invokeinterface #27,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.clear:()V
      16: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: ifnull        19
       7: aload_0
       8: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
      11: invokeinterface #28,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.isEmpty:()Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: ifnonnull     11
       7: iconst_0
       8: goto          20
      11: aload_0
      12: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
      15: invokeinterface #29,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.size:()I
      20: ireturn
}
