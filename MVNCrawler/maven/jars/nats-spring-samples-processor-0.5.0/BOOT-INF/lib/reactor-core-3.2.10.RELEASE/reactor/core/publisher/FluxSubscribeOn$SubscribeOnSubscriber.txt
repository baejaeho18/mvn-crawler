Compiled from "FluxSubscribeOn.java"
final class reactor.core.publisher.FluxSubscribeOn$SubscribeOnSubscriber<T> implements reactor.core.publisher.InnerOperator<T, T>, java.lang.Runnable {
  final reactor.core.CoreSubscriber<? super T> actual;

  final org.reactivestreams.Publisher<? extends T> source;

  final reactor.core.scheduler.Scheduler$Worker worker;

  final boolean requestOnSeparateThread;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSubscribeOn$SubscribeOnSubscriber, org.reactivestreams.Subscription> S;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxSubscribeOn$SubscribeOnSubscriber> REQUESTED;

  volatile java.lang.Thread thread;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSubscribeOn$SubscribeOnSubscriber, java.lang.Thread> THREAD;

  reactor.core.publisher.FluxSubscribeOn$SubscribeOnSubscriber(org.reactivestreams.Publisher<? extends T>, reactor.core.CoreSubscriber<? super T>, reactor.core.scheduler.Scheduler$Worker, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_2
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_3
      11: putfield      #3                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      14: aload_0
      15: aload_1
      16: putfield      #4                  // Field source:Lorg/reactivestreams/Publisher;
      19: aload_0
      20: iload         4
      22: putfield      #5                  // Field requestOnSeparateThread:Z
      25: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #6                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #7                  // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          32
      11: getstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      14: aload_0
      15: lconst_0
      16: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndSet:(Ljava/lang/Object;J)J
      19: lstore_2
      20: lload_2
      21: lconst_0
      22: lcmp
      23: ifeq          32
      26: aload_0
      27: lload_2
      28: aload_1
      29: invokevirtual #10                 // Method requestUpstream:(JLorg/reactivestreams/Subscription;)V
      32: return

  void requestUpstream(long, org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #5                  // Field requestOnSeparateThread:Z
       4: ifeq          20
       7: invokestatic  #11                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      10: getstatic     #12                 // Field THREAD:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      13: aload_0
      14: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
      17: if_acmpne     30
      20: aload_3
      21: lload_1
      22: invokeinterface #14,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      27: goto          82
      30: aload_0
      31: getfield      #3                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      34: aload_3
      35: lload_1
      36: invokedynamic #15,  0             // InvokeDynamic #0:run:(Lorg/reactivestreams/Subscription;J)Ljava/lang/Runnable;
      41: invokeinterface #16,  2           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedule:(Ljava/lang/Runnable;)Lreactor/core/Disposable;
      46: pop
      47: goto          82
      50: astore        4
      52: aload_0
      53: getfield      #3                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      56: invokeinterface #18,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.isDisposed:()Z
      61: ifne          82
      64: aload         4
      66: aload_0
      67: aconst_null
      68: aconst_null
      69: aload_0
      70: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      73: invokeinterface #19,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      78: invokestatic  #20                 // Method reactor/core/publisher/Operators.onRejectedExecution:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
      81: athrow
      82: return
    Exception table:
       from    to  target type
          30    47    50   Class java/util/concurrent/RejectedExecutionException

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #21,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      10: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #22,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      10: aload_0
      11: getfield      #3                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      14: invokeinterface #23,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      19: goto          34
      22: astore_2
      23: aload_0
      24: getfield      #3                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      27: invokeinterface #23,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      32: aload_2
      33: athrow
      34: return
    Exception table:
       from    to  target type
           0    10    22   any

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #24,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
       9: aload_0
      10: getfield      #3                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      13: invokeinterface #23,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      18: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #25                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          79
       7: getstatic     #6                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      10: aload_0
      11: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #26                 // class org/reactivestreams/Subscription
      17: astore_3
      18: aload_3
      19: ifnull        31
      22: aload_0
      23: lload_1
      24: aload_3
      25: invokevirtual #10                 // Method requestUpstream:(JLorg/reactivestreams/Subscription;)V
      28: goto          79
      31: getstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      34: aload_0
      35: lload_1
      36: invokestatic  #27                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      39: pop2
      40: getstatic     #6                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      43: aload_0
      44: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
      47: checkcast     #26                 // class org/reactivestreams/Subscription
      50: astore_3
      51: aload_3
      52: ifnull        79
      55: getstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      58: aload_0
      59: lconst_0
      60: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndSet:(Ljava/lang/Object;J)J
      63: lstore        4
      65: lload         4
      67: lconst_0
      68: lcmp
      69: ifeq          79
      72: aload_0
      73: lload         4
      75: aload_3
      76: invokevirtual #10                 // Method requestUpstream:(JLorg/reactivestreams/Subscription;)V
      79: return

  public void run();
    Code:
       0: getstatic     #12                 // Field THREAD:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #11                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       7: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      10: aload_0
      11: getfield      #4                  // Field source:Lorg/reactivestreams/Publisher;
      14: aload_0
      15: invokeinterface #29,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #30                 // Field s:Lorg/reactivestreams/Subscription;
       4: astore_1
       5: aload_1
       6: invokestatic  #31                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       9: if_acmpeq     43
      12: getstatic     #6                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: invokestatic  #31                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      19: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #26                 // class org/reactivestreams/Subscription
      25: astore_1
      26: aload_1
      27: ifnull        43
      30: aload_1
      31: invokestatic  #31                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      34: if_acmpeq     43
      37: aload_1
      38: invokeinterface #33,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      43: aload_0
      44: getfield      #3                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      47: invokeinterface #23,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      52: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #34                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #30                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #35                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     38
      19: aload_0
      20: getfield      #30                 // Field s:Lorg/reactivestreams/Subscription;
      23: invokestatic  #31                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      26: if_acmpne     33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: invokestatic  #36                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      37: areturn
      38: aload_1
      39: getstatic     #37                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      42: if_acmpne     53
      45: aload_0
      46: getfield      #38                 // Field requested:J
      49: invokestatic  #39                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      52: areturn
      53: aload_0
      54: aload_1
      55: invokespecial #40                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      58: areturn

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  private static void lambda$requestUpstream$0(org.reactivestreams.Subscription, long);
    Code:
       0: aload_0
       1: lload_1
       2: invokeinterface #14,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
       7: return

  static {};
    Code:
       0: ldc           #41                 // class reactor/core/publisher/FluxSubscribeOn$SubscribeOnSubscriber
       2: ldc           #26                 // class org/reactivestreams/Subscription
       4: ldc           #42                 // String s
       6: invokestatic  #43                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #6                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #41                 // class reactor/core/publisher/FluxSubscribeOn$SubscribeOnSubscriber
      14: ldc           #44                 // String requested
      16: invokestatic  #45                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      19: putstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      22: ldc           #41                 // class reactor/core/publisher/FluxSubscribeOn$SubscribeOnSubscriber
      24: ldc           #46                 // class java/lang/Thread
      26: ldc           #47                 // String thread
      28: invokestatic  #43                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: putstatic     #12                 // Field THREAD:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      34: return
}
