Compiled from "MonoCreate.java"
final class reactor.core.publisher.MonoCreate$DefaultMonoSink<T> extends java.util.concurrent.atomic.AtomicBoolean implements reactor.core.publisher.MonoSink<T>, reactor.core.publisher.InnerProducer<T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  volatile reactor.core.Disposable disposable;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoCreate$DefaultMonoSink, reactor.core.Disposable> DISPOSABLE;

  volatile int state;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.MonoCreate$DefaultMonoSink> STATE;

  volatile java.util.function.LongConsumer requestConsumer;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoCreate$DefaultMonoSink, java.util.function.LongConsumer> REQUEST_CONSUMER;

  T value;

  static final int NO_REQUEST_HAS_VALUE;

  static final int HAS_REQUEST_NO_VALUE;

  static final int HAS_REQUEST_HAS_VALUE;

  reactor.core.publisher.MonoCreate$DefaultMonoSink(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
       9: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #4                  // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     42
       7: aload_0
       8: getfield      #5                  // Field state:I
      11: iconst_3
      12: if_icmpeq     33
      15: aload_0
      16: getfield      #5                  // Field state:I
      19: iconst_1
      20: if_icmpeq     33
      23: aload_0
      24: getfield      #7                  // Field disposable:Lreactor/core/Disposable;
      27: getstatic     #8                  // Field reactor/core/publisher/MonoCreate.TERMINATED:Lreactor/core/Disposable;
      30: if_acmpne     37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: invokestatic  #9                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aload_1
      43: getstatic     #10                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      46: if_acmpne     68
      49: aload_0
      50: getfield      #7                  // Field disposable:Lreactor/core/Disposable;
      53: getstatic     #11                 // Field reactor/core/publisher/MonoCreate.CANCELLED:Lreactor/core/Disposable;
      56: if_acmpne     63
      59: iconst_1
      60: goto          64
      63: iconst_0
      64: invokestatic  #9                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      67: areturn
      68: aload_0
      69: aload_1
      70: invokespecial #12                 // InterfaceMethod reactor/core/publisher/InnerProducer.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      73: areturn

  public void success();
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method isDisposed:()Z
       4: ifeq          8
       7: return
       8: getstatic     #14                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      11: aload_0
      12: iconst_3
      13: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
      16: iconst_3
      17: if_icmpeq     45
      20: aload_0
      21: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      24: invokeinterface #16,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      29: aload_0
      30: iconst_0
      31: invokevirtual #17                 // Method disposeResource:(Z)V
      34: goto          45
      37: astore_1
      38: aload_0
      39: iconst_0
      40: invokevirtual #17                 // Method disposeResource:(Z)V
      43: aload_1
      44: athrow
      45: return
    Exception table:
       from    to  target type
          20    29    37   any

  public void success(T);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: invokevirtual #18                 // Method success:()V
       8: return
       9: aload_0
      10: invokevirtual #13                 // Method isDisposed:()Z
      13: ifeq          30
      16: aload_1
      17: aload_0
      18: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      21: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      26: invokestatic  #19                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      29: return
      30: aload_0
      31: getfield      #5                  // Field state:I
      34: istore_2
      35: iload_2
      36: iconst_3
      37: if_icmpeq     45
      40: iload_2
      41: iconst_1
      42: if_icmpne     59
      45: aload_1
      46: aload_0
      47: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      50: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      55: invokestatic  #19                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      58: return
      59: iload_2
      60: iconst_2
      61: if_icmpne     112
      64: getstatic     #14                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      67: aload_0
      68: iload_2
      69: iconst_3
      70: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      73: ifeq          111
      76: aload_0
      77: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      80: aload_1
      81: invokeinterface #21,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      86: aload_0
      87: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      90: invokeinterface #16,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      95: aload_0
      96: iconst_0
      97: invokevirtual #17                 // Method disposeResource:(Z)V
     100: goto          111
     103: astore_3
     104: aload_0
     105: iconst_0
     106: invokevirtual #17                 // Method disposeResource:(Z)V
     109: aload_3
     110: athrow
     111: return
     112: aload_0
     113: aload_1
     114: putfield      #22                 // Field value:Ljava/lang/Object;
     117: getstatic     #14                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     120: aload_0
     121: iload_2
     122: iconst_1
     123: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     126: ifeq          130
     129: return
     130: goto          30
    Exception table:
       from    to  target type
          76    95   103   any

  public void error(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method isDisposed:()Z
       4: ifeq          22
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #23                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      20: pop
      21: return
      22: getstatic     #14                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      25: aload_0
      26: iconst_3
      27: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
      30: iconst_3
      31: if_icmpeq     63
      34: aload_0
      35: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      38: aload_1
      39: invokeinterface #24,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      44: aload_0
      45: iconst_0
      46: invokevirtual #17                 // Method disposeResource:(Z)V
      49: goto          60
      52: astore_2
      53: aload_0
      54: iconst_0
      55: invokevirtual #17                 // Method disposeResource:(Z)V
      58: aload_2
      59: athrow
      60: goto          77
      63: aload_1
      64: aload_0
      65: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      68: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      73: invokestatic  #23                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      76: pop
      77: return
    Exception table:
       from    to  target type
          34    44    52   any

  public reactor.core.publisher.MonoSink<T> onRequest(java.util.function.LongConsumer);
    Code:
       0: aload_1
       1: ldc           #25                 // String onRequest
       3: invokestatic  #26                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: getstatic     #27                 // Field REQUEST_CONSUMER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      10: aload_0
      11: aconst_null
      12: aload_1
      13: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      16: ifne          29
      19: new           #29                 // class java/lang/IllegalStateException
      22: dup
      23: ldc           #30                 // String A consumer has already been assigned to consume requests
      25: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: aload_0
      30: getfield      #5                  // Field state:I
      33: istore_2
      34: iload_2
      35: iconst_2
      36: if_icmpeq     44
      39: iload_2
      40: iconst_3
      41: if_icmpne     53
      44: aload_1
      45: ldc2_w        #33                 // long 9223372036854775807l
      48: invokeinterface #35,  3           // InterfaceMethod java/util/function/LongConsumer.accept:(J)V
      53: aload_0
      54: areturn

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public reactor.core.publisher.MonoSink<T> onCancel(reactor.core.Disposable);
    Code:
       0: aload_1
       1: ldc           #36                 // String onCancel
       3: invokestatic  #26                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #37                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      10: dup
      11: aconst_null
      12: aload_1
      13: invokespecial #38                 // Method reactor/core/publisher/FluxCreate$SinkDisposable."<init>":(Lreactor/core/Disposable;Lreactor/core/Disposable;)V
      16: astore_2
      17: getstatic     #39                 // Field DISPOSABLE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      20: aload_0
      21: aconst_null
      22: aload_2
      23: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      26: ifne          86
      29: aload_0
      30: getfield      #7                  // Field disposable:Lreactor/core/Disposable;
      33: astore_3
      34: aload_3
      35: getstatic     #11                 // Field reactor/core/publisher/MonoCreate.CANCELLED:Lreactor/core/Disposable;
      38: if_acmpne     50
      41: aload_1
      42: invokeinterface #40,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      47: goto          86
      50: aload_3
      51: instanceof    #37                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      54: ifeq          86
      57: aload_3
      58: checkcast     #37                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      61: astore        4
      63: aload         4
      65: getfield      #41                 // Field reactor/core/publisher/FluxCreate$SinkDisposable.onCancel:Lreactor/core/Disposable;
      68: ifnonnull     80
      71: aload         4
      73: aload_1
      74: putfield      #41                 // Field reactor/core/publisher/FluxCreate$SinkDisposable.onCancel:Lreactor/core/Disposable;
      77: goto          86
      80: aload_1
      81: invokeinterface #40,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      86: aload_0
      87: areturn

  public reactor.core.publisher.MonoSink<T> onDispose(reactor.core.Disposable);
    Code:
       0: aload_1
       1: ldc           #42                 // String onDispose
       3: invokestatic  #26                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #37                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      10: dup
      11: aload_1
      12: aconst_null
      13: invokespecial #38                 // Method reactor/core/publisher/FluxCreate$SinkDisposable."<init>":(Lreactor/core/Disposable;Lreactor/core/Disposable;)V
      16: astore_2
      17: getstatic     #39                 // Field DISPOSABLE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      20: aload_0
      21: aconst_null
      22: aload_2
      23: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      26: ifne          86
      29: aload_0
      30: getfield      #7                  // Field disposable:Lreactor/core/Disposable;
      33: astore_3
      34: aload_0
      35: invokevirtual #13                 // Method isDisposed:()Z
      38: ifeq          50
      41: aload_1
      42: invokeinterface #40,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      47: goto          86
      50: aload_3
      51: instanceof    #37                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      54: ifeq          86
      57: aload_3
      58: checkcast     #37                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      61: astore        4
      63: aload         4
      65: getfield      #43                 // Field reactor/core/publisher/FluxCreate$SinkDisposable.disposable:Lreactor/core/Disposable;
      68: ifnonnull     80
      71: aload         4
      73: aload_1
      74: putfield      #43                 // Field reactor/core/publisher/FluxCreate$SinkDisposable.disposable:Lreactor/core/Disposable;
      77: goto          86
      80: aload_1
      81: invokeinterface #40,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      86: aload_0
      87: areturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #44                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          119
       7: aload_0
       8: getfield      #45                 // Field requestConsumer:Ljava/util/function/LongConsumer;
      11: astore_3
      12: aload_3
      13: ifnull        23
      16: aload_3
      17: lload_1
      18: invokeinterface #35,  3           // InterfaceMethod java/util/function/LongConsumer.accept:(J)V
      23: aload_0
      24: getfield      #5                  // Field state:I
      27: istore        4
      29: iload         4
      31: iconst_2
      32: if_icmpeq     41
      35: iload         4
      37: iconst_3
      38: if_icmpne     42
      41: return
      42: iload         4
      44: iconst_1
      45: if_icmpne     102
      48: getstatic     #14                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      51: aload_0
      52: iload         4
      54: iconst_3
      55: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      58: ifeq          101
      61: aload_0
      62: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      65: aload_0
      66: getfield      #22                 // Field value:Ljava/lang/Object;
      69: invokeinterface #21,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      74: aload_0
      75: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      78: invokeinterface #16,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      83: aload_0
      84: iconst_0
      85: invokevirtual #17                 // Method disposeResource:(Z)V
      88: goto          101
      91: astore        5
      93: aload_0
      94: iconst_0
      95: invokevirtual #17                 // Method disposeResource:(Z)V
      98: aload         5
     100: athrow
     101: return
     102: getstatic     #14                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     105: aload_0
     106: iload         4
     108: iconst_2
     109: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     112: ifeq          116
     115: return
     116: goto          23
     119: return
    Exception table:
       from    to  target type
          61    83    91   any
          91    93    91   any

  public void cancel();
    Code:
       0: getstatic     #14                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_3
       5: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
       8: iconst_3
       9: if_icmpeq     40
      12: aload_0
      13: getfield      #22                 // Field value:Ljava/lang/Object;
      16: astore_1
      17: aload_0
      18: aconst_null
      19: putfield      #22                 // Field value:Ljava/lang/Object;
      22: aload_1
      23: aload_0
      24: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      27: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      32: invokestatic  #46                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      35: aload_0
      36: iconst_1
      37: invokevirtual #17                 // Method disposeResource:(Z)V
      40: return

  void disposeResource(boolean);
    Code:
       0: iload_1
       1: ifeq          10
       4: getstatic     #11                 // Field reactor/core/publisher/MonoCreate.CANCELLED:Lreactor/core/Disposable;
       7: goto          13
      10: getstatic     #8                  // Field reactor/core/publisher/MonoCreate.TERMINATED:Lreactor/core/Disposable;
      13: astore_2
      14: aload_0
      15: getfield      #7                  // Field disposable:Lreactor/core/Disposable;
      18: astore_3
      19: aload_3
      20: getstatic     #8                  // Field reactor/core/publisher/MonoCreate.TERMINATED:Lreactor/core/Disposable;
      23: if_acmpeq     87
      26: aload_3
      27: getstatic     #11                 // Field reactor/core/publisher/MonoCreate.CANCELLED:Lreactor/core/Disposable;
      30: if_acmpeq     87
      33: getstatic     #39                 // Field DISPOSABLE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      36: aload_0
      37: aload_2
      38: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      41: checkcast     #48                 // class reactor/core/Disposable
      44: astore_3
      45: aload_3
      46: ifnull        87
      49: aload_3
      50: getstatic     #8                  // Field reactor/core/publisher/MonoCreate.TERMINATED:Lreactor/core/Disposable;
      53: if_acmpeq     87
      56: aload_3
      57: getstatic     #11                 // Field reactor/core/publisher/MonoCreate.CANCELLED:Lreactor/core/Disposable;
      60: if_acmpeq     87
      63: iload_1
      64: ifeq          81
      67: aload_3
      68: instanceof    #37                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      71: ifeq          81
      74: aload_3
      75: checkcast     #37                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      78: invokevirtual #49                 // Method reactor/core/publisher/FluxCreate$SinkDisposable.cancel:()V
      81: aload_3
      82: invokeinterface #40,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      87: return

  public java.lang.String toString();
    Code:
       0: ldc           #50                 // String MonoSink
       2: areturn

  boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #7                  // Field disposable:Lreactor/core/Disposable;
       4: astore_1
       5: aload_1
       6: getstatic     #11                 // Field reactor/core/publisher/MonoCreate.CANCELLED:Lreactor/core/Disposable;
       9: if_acmpeq     19
      12: aload_1
      13: getstatic     #8                  // Field reactor/core/publisher/MonoCreate.TERMINATED:Lreactor/core/Disposable;
      16: if_acmpne     23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  static {};
    Code:
       0: ldc           #6                  // class reactor/core/publisher/MonoCreate$DefaultMonoSink
       2: ldc           #48                 // class reactor/core/Disposable
       4: ldc           #51                 // String disposable
       6: invokestatic  #52                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #39                 // Field DISPOSABLE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #6                  // class reactor/core/publisher/MonoCreate$DefaultMonoSink
      14: ldc           #53                 // String state
      16: invokestatic  #54                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: putstatic     #14                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: ldc           #6                  // class reactor/core/publisher/MonoCreate$DefaultMonoSink
      24: ldc           #55                 // class java/util/function/LongConsumer
      26: ldc           #56                 // String requestConsumer
      28: invokestatic  #52                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: putstatic     #27                 // Field REQUEST_CONSUMER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      34: return
}
