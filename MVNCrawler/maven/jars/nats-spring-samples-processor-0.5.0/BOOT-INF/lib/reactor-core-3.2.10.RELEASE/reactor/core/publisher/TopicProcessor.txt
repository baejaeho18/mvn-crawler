Compiled from "TopicProcessor.java"
public final class reactor.core.publisher.TopicProcessor<E> extends reactor.core.publisher.EventLoopProcessor<E> {
  final reactor.core.publisher.RingBuffer$Reader barrier;

  final reactor.core.publisher.RingBuffer$Sequence minimum;

  public static <E> reactor.core.publisher.TopicProcessor$Builder<E> builder();
    Code:
       0: new           #1                  // class reactor/core/publisher/TopicProcessor$Builder
       3: dup
       4: invokespecial #2                  // Method reactor/core/publisher/TopicProcessor$Builder."<init>":()V
       7: areturn

  public static <E> reactor.core.publisher.TopicProcessor<E> create();
    Code:
       0: invokestatic  #3                  // Method builder:()Lreactor/core/publisher/TopicProcessor$Builder;
       3: invokevirtual #4                  // Method reactor/core/publisher/TopicProcessor$Builder.build:()Lreactor/core/publisher/TopicProcessor;
       6: areturn

  public static <E> reactor.core.publisher.TopicProcessor<E> create(java.lang.String, int);
    Code:
       0: invokestatic  #3                  // Method builder:()Lreactor/core/publisher/TopicProcessor$Builder;
       3: aload_0
       4: invokevirtual #5                  // Method reactor/core/publisher/TopicProcessor$Builder.name:(Ljava/lang/String;)Lreactor/core/publisher/TopicProcessor$Builder;
       7: iload_1
       8: invokevirtual #6                  // Method reactor/core/publisher/TopicProcessor$Builder.bufferSize:(I)Lreactor/core/publisher/TopicProcessor$Builder;
      11: invokevirtual #4                  // Method reactor/core/publisher/TopicProcessor$Builder.build:()Lreactor/core/publisher/TopicProcessor;
      14: areturn

  public static <E> reactor.core.publisher.TopicProcessor<E> share(java.lang.String, int);
    Code:
       0: invokestatic  #3                  // Method builder:()Lreactor/core/publisher/TopicProcessor$Builder;
       3: iconst_1
       4: invokevirtual #7                  // Method reactor/core/publisher/TopicProcessor$Builder.share:(Z)Lreactor/core/publisher/TopicProcessor$Builder;
       7: aload_0
       8: invokevirtual #5                  // Method reactor/core/publisher/TopicProcessor$Builder.name:(Ljava/lang/String;)Lreactor/core/publisher/TopicProcessor$Builder;
      11: iload_1
      12: invokevirtual #6                  // Method reactor/core/publisher/TopicProcessor$Builder.bufferSize:(I)Lreactor/core/publisher/TopicProcessor$Builder;
      15: invokevirtual #4                  // Method reactor/core/publisher/TopicProcessor$Builder.build:()Lreactor/core/publisher/TopicProcessor;
      18: areturn

  reactor.core.publisher.TopicProcessor(java.util.concurrent.ThreadFactory, java.util.concurrent.ExecutorService, java.util.concurrent.ExecutorService, int, reactor.util.concurrent.WaitStrategy, boolean, boolean, java.util.function.Supplier<E>);
    Code:
       0: aload_0
       1: iload         4
       3: aload_1
       4: aload_2
       5: aload_3
       6: iload         7
       8: iload         6
      10: aload         8
      12: invokedynamic #8,  0              // InvokeDynamic #0:get:(Ljava/util/function/Supplier;)Ljava/util/function/Supplier;
      17: aload         5
      19: invokespecial #9                  // Method reactor/core/publisher/EventLoopProcessor."<init>":(ILjava/util/concurrent/ThreadFactory;Ljava/util/concurrent/ExecutorService;Ljava/util/concurrent/ExecutorService;ZZLjava/util/function/Supplier;Lreactor/util/concurrent/WaitStrategy;)V
      22: aload_0
      23: ldc2_w        #10                 // long -1l
      26: invokestatic  #12                 // Method reactor/core/publisher/RingBuffer.newSequence:(J)Lreactor/core/publisher/RingBuffer$Sequence;
      29: putfield      #13                 // Field minimum:Lreactor/core/publisher/RingBuffer$Sequence;
      32: aload_0
      33: aload_0
      34: getfield      #14                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
      37: invokevirtual #15                 // Method reactor/core/publisher/RingBuffer.newReader:()Lreactor/core/publisher/RingBuffer$Reader;
      40: putfield      #16                 // Field barrier:Lreactor/core/publisher/RingBuffer$Reader;
      43: return

  public void subscribe(reactor.core.CoreSubscriber<? super E>);
    Code:
       0: aload_1
       1: ldc           #17                 // String subscribe
       3: invokestatic  #18                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: invokevirtual #19                 // Method alive:()Z
      11: ifne          35
      14: aload_0
      15: getfield      #14                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
      18: aconst_null
      19: aload_0
      20: getfield      #20                 // Field error:Ljava/lang/Throwable;
      23: aload_0
      24: getfield      #13                 // Field minimum:Lreactor/core/publisher/RingBuffer$Sequence;
      27: invokestatic  #21                 // Method coldSource:(Lreactor/core/publisher/RingBuffer;Ljava/lang/Throwable;Ljava/lang/Throwable;Lreactor/core/publisher/RingBuffer$Sequence;)Lreactor/core/publisher/Flux;
      30: aload_1
      31: invokevirtual #22                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      34: return
      35: lconst_0
      36: invokestatic  #12                 // Method reactor/core/publisher/RingBuffer.newSequence:(J)Lreactor/core/publisher/RingBuffer$Sequence;
      39: astore_2
      40: new           #23                 // class reactor/core/publisher/TopicProcessor$TopicInner
      43: dup
      44: aload_0
      45: aload_2
      46: aload_1
      47: invokespecial #24                 // Method reactor/core/publisher/TopicProcessor$TopicInner."<init>":(Lreactor/core/publisher/TopicProcessor;Lreactor/core/publisher/RingBuffer$Sequence;Lreactor/core/CoreSubscriber;)V
      50: astore_3
      51: aload_0
      52: invokevirtual #25                 // Method incrementSubscribers:()Z
      55: ifeq          90
      58: aload_3
      59: getfield      #26                 // Field reactor/core/publisher/TopicProcessor$TopicInner.sequence:Lreactor/core/publisher/RingBuffer$Sequence;
      62: aload_0
      63: getfield      #13                 // Field minimum:Lreactor/core/publisher/RingBuffer$Sequence;
      66: invokeinterface #27,  1           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.getAsLong:()J
      71: invokeinterface #28,  3           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.set:(J)V
      76: aload_0
      77: getfield      #14                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
      80: aload_3
      81: getfield      #26                 // Field reactor/core/publisher/TopicProcessor$TopicInner.sequence:Lreactor/core/publisher/RingBuffer$Sequence;
      84: invokevirtual #29                 // Method reactor/core/publisher/RingBuffer.addGatingSequence:(Lreactor/core/publisher/RingBuffer$Sequence;)V
      87: goto          117
      90: aload_3
      91: getfield      #26                 // Field reactor/core/publisher/TopicProcessor$TopicInner.sequence:Lreactor/core/publisher/RingBuffer$Sequence;
      94: aload_0
      95: getfield      #14                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
      98: invokevirtual #30                 // Method reactor/core/publisher/RingBuffer.getCursor:()J
     101: invokeinterface #28,  3           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.set:(J)V
     106: aload_0
     107: getfield      #14                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
     110: aload_3
     111: getfield      #26                 // Field reactor/core/publisher/TopicProcessor$TopicInner.sequence:Lreactor/core/publisher/RingBuffer$Sequence;
     114: invokevirtual #29                 // Method reactor/core/publisher/RingBuffer.addGatingSequence:(Lreactor/core/publisher/RingBuffer$Sequence;)V
     117: aload_0
     118: getfield      #31                 // Field executor:Ljava/util/concurrent/ExecutorService;
     121: aload_3
     122: invokeinterface #32,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
     127: goto          198
     130: astore        4
     132: aload_0
     133: getfield      #14                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
     136: aload_3
     137: getfield      #26                 // Field reactor/core/publisher/TopicProcessor$TopicInner.sequence:Lreactor/core/publisher/RingBuffer$Sequence;
     140: invokevirtual #34                 // Method reactor/core/publisher/RingBuffer.removeGatingSequence:(Lreactor/core/publisher/RingBuffer$Sequence;)Z
     143: pop
     144: aload_0
     145: invokevirtual #35                 // Method decrementSubscribers:()V
     148: aload_0
     149: invokevirtual #19                 // Method alive:()Z
     152: ifne          192
     155: ldc           #36                 // class java/util/concurrent/RejectedExecutionException
     157: aload         4
     159: invokevirtual #37                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     162: invokevirtual #38                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
     165: ifeq          192
     168: aload_0
     169: getfield      #14                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
     172: aload         4
     174: aload_0
     175: getfield      #20                 // Field error:Ljava/lang/Throwable;
     178: aload_0
     179: getfield      #13                 // Field minimum:Lreactor/core/publisher/RingBuffer$Sequence;
     182: invokestatic  #21                 // Method coldSource:(Lreactor/core/publisher/RingBuffer;Ljava/lang/Throwable;Ljava/lang/Throwable;Lreactor/core/publisher/RingBuffer$Sequence;)Lreactor/core/publisher/Flux;
     185: aload_1
     186: invokevirtual #22                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
     189: goto          198
     192: aload_1
     193: aload         4
     195: invokestatic  #39                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
     198: return
    Exception table:
       from    to  target type
         117   127   130   Class java/lang/Throwable

  public reactor.core.publisher.Flux<E> drain();
    Code:
       0: aload_0
       1: getfield      #14                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
       4: aconst_null
       5: aload_0
       6: getfield      #20                 // Field error:Ljava/lang/Throwable;
       9: aload_0
      10: getfield      #13                 // Field minimum:Lreactor/core/publisher/RingBuffer$Sequence;
      13: invokestatic  #21                 // Method coldSource:(Lreactor/core/publisher/RingBuffer;Ljava/lang/Throwable;Ljava/lang/Throwable;Lreactor/core/publisher/RingBuffer$Sequence;)Lreactor/core/publisher/Flux;
      16: areturn

  protected void doError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #16                 // Field barrier:Lreactor/core/publisher/RingBuffer$Reader;
       4: invokevirtual #40                 // Method reactor/core/publisher/RingBuffer$Reader.signal:()V
       7: return

  protected void doComplete();
    Code:
       0: aload_0
       1: getfield      #16                 // Field barrier:Lreactor/core/publisher/RingBuffer$Reader;
       4: invokevirtual #40                 // Method reactor/core/publisher/RingBuffer$Reader.signal:()V
       7: return

  public long getPending();
    Code:
       0: aload_0
       1: getfield      #14                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
       4: invokevirtual #41                 // Method reactor/core/publisher/RingBuffer.getPending:()I
       7: i2l
       8: lreturn

  protected void requestTask(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #13                 // Field minimum:Lreactor/core/publisher/RingBuffer$Sequence;
       4: aload_0
       5: getfield      #14                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
       8: invokevirtual #30                 // Method reactor/core/publisher/RingBuffer.getCursor:()J
      11: invokeinterface #28,  3           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.set:(J)V
      16: aload_0
      17: getfield      #14                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
      20: aload_0
      21: getfield      #13                 // Field minimum:Lreactor/core/publisher/RingBuffer$Sequence;
      24: invokevirtual #29                 // Method reactor/core/publisher/RingBuffer.addGatingSequence:(Lreactor/core/publisher/RingBuffer$Sequence;)V
      27: aload_0
      28: getfield      #42                 // Field requestTaskExecutor:Ljava/util/concurrent/ExecutorService;
      31: aload_1
      32: aload_0
      33: aload_0
      34: getfield      #13                 // Field minimum:Lreactor/core/publisher/RingBuffer$Sequence;
      37: dup
      38: invokevirtual #37                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      41: pop
      42: invokedynamic #43,  0             // InvokeDynamic #1:accept:(Lreactor/core/publisher/RingBuffer$Sequence;)Ljava/util/function/Consumer;
      47: aload_0
      48: invokedynamic #44,  0             // InvokeDynamic #2:getAsLong:(Lreactor/core/publisher/TopicProcessor;)Ljava/util/function/LongSupplier;
      53: invokestatic  #45                 // Method createRequestTask:(Lorg/reactivestreams/Subscription;Lreactor/core/publisher/EventLoopProcessor;Ljava/util/function/Consumer;Ljava/util/function/LongSupplier;)Ljava/lang/Runnable;
      56: invokeinterface #32,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
      61: return

  public void run();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method alive:()Z
       4: ifne          20
       7: getstatic     #46                 // Field SUBSCRIBER_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
      14: ifne          20
      17: invokestatic  #48                 // Method reactor/util/concurrent/WaitStrategy.alert:()V
      20: return

  public long downstreamCount();
    Code:
       0: aload_0
       1: invokespecial #49                 // Method reactor/core/publisher/EventLoopProcessor.downstreamCount:()J
       4: lreturn

  public boolean isSerialized();
    Code:
       0: aload_0
       1: invokespecial #50                 // Method reactor/core/publisher/EventLoopProcessor.isSerialized:()Z
       4: ireturn

  public java.util.stream.Stream inners();
    Code:
       0: aload_0
       1: invokespecial #51                 // Method reactor/core/publisher/EventLoopProcessor.inners:()Ljava/util/stream/Stream;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #52                 // Method reactor/core/publisher/EventLoopProcessor.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
       5: areturn

  private long lambda$requestTask$1();
    Code:
       0: getstatic     #46                 // Field SUBSCRIBER_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
       7: ifne          22
      10: aload_0
      11: getfield      #13                 // Field minimum:Lreactor/core/publisher/RingBuffer$Sequence;
      14: invokeinterface #27,  1           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.getAsLong:()J
      19: goto          33
      22: aload_0
      23: getfield      #14                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
      26: aload_0
      27: getfield      #13                 // Field minimum:Lreactor/core/publisher/RingBuffer$Sequence;
      30: invokevirtual #53                 // Method reactor/core/publisher/RingBuffer.getMinimumGatingSequence:(Lreactor/core/publisher/RingBuffer$Sequence;)J
      33: lreturn

  private static reactor.core.publisher.EventLoopProcessor$Slot lambda$new$0(java.util.function.Supplier);
    Code:
       0: new           #54                 // class reactor/core/publisher/EventLoopProcessor$Slot
       3: dup
       4: invokespecial #55                 // Method reactor/core/publisher/EventLoopProcessor$Slot."<init>":()V
       7: astore_1
       8: aload_0
       9: ifnull        22
      12: aload_1
      13: aload_0
      14: invokeinterface #56,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      19: putfield      #57                 // Field reactor/core/publisher/EventLoopProcessor$Slot.value:Ljava/lang/Object;
      22: aload_1
      23: areturn
}
