Compiled from "MonoSubscribeOn.java"
final class reactor.core.publisher.MonoSubscribeOn<T> extends reactor.core.publisher.MonoOperator<T, T> {
  final reactor.core.scheduler.Scheduler scheduler;

  reactor.core.publisher.MonoSubscribeOn(reactor.core.publisher.Mono<? extends T>, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      10: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
       4: invokeinterface #3,  1            // InterfaceMethod reactor/core/scheduler/Scheduler.createWorker:()Lreactor/core/scheduler/Scheduler$Worker;
       9: astore_2
      10: new           #4                  // class reactor/core/publisher/MonoSubscribeOn$SubscribeOnSubscriber
      13: dup
      14: aload_0
      15: getfield      #5                  // Field source:Lreactor/core/publisher/Mono;
      18: aload_1
      19: aload_2
      20: invokespecial #6                  // Method reactor/core/publisher/MonoSubscribeOn$SubscribeOnSubscriber."<init>":(Lorg/reactivestreams/Publisher;Lreactor/core/CoreSubscriber;Lreactor/core/scheduler/Scheduler$Worker;)V
      23: astore_3
      24: aload_1
      25: aload_3
      26: invokeinterface #7,  2            // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      31: aload_2
      32: aload_3
      33: invokeinterface #8,  2            // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedule:(Ljava/lang/Runnable;)Lreactor/core/Disposable;
      38: pop
      39: goto          74
      42: astore        4
      44: aload_3
      45: getfield      #10                 // Field reactor/core/publisher/MonoSubscribeOn$SubscribeOnSubscriber.s:Lorg/reactivestreams/Subscription;
      48: invokestatic  #11                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      51: if_acmpeq     74
      54: aload_1
      55: aload         4
      57: aload_3
      58: aconst_null
      59: aconst_null
      60: aload_1
      61: invokeinterface #12,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      66: invokestatic  #13                 // Method reactor/core/publisher/Operators.onRejectedExecution:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
      69: invokeinterface #14,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      74: return
    Exception table:
       from    to  target type
          31    39    42   Class java/util/concurrent/RejectedExecutionException

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #15                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      11: areturn
      12: aload_0
      13: aload_1
      14: invokespecial #16                 // Method reactor/core/publisher/MonoOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      17: areturn
}
