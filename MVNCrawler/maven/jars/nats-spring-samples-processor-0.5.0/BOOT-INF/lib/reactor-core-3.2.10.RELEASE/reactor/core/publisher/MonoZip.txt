Compiled from "MonoZip.java"
final class reactor.core.publisher.MonoZip<T, R> extends reactor.core.publisher.Mono<R> implements reactor.core.publisher.SourceProducer<R> {
  final boolean delayError;

  final org.reactivestreams.Publisher<?>[] sources;

  final java.lang.Iterable<? extends org.reactivestreams.Publisher<?>> sourcesIterable;

  final java.util.function.Function<? super java.lang.Object[], ? extends R> zipper;

  <U> reactor.core.publisher.MonoZip(boolean, org.reactivestreams.Publisher<? extends T>, org.reactivestreams.Publisher<? extends U>, java.util.function.BiFunction<? super T, ? super U, ? extends R>);
    Code:
       0: aload_0
       1: iload_1
       2: new           #1                  // class reactor/core/publisher/FluxZip$PairwiseZipper
       5: dup
       6: iconst_1
       7: anewarray     #2                  // class java/util/function/BiFunction
      10: dup
      11: iconst_0
      12: aload         4
      14: ldc           #3                  // String zipper2
      16: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      19: checkcast     #2                  // class java/util/function/BiFunction
      22: aastore
      23: invokespecial #5                  // Method reactor/core/publisher/FluxZip$PairwiseZipper."<init>":([Ljava/util/function/BiFunction;)V
      26: iconst_2
      27: anewarray     #6                  // class org/reactivestreams/Publisher
      30: dup
      31: iconst_0
      32: aload_2
      33: ldc           #7                  // String p1
      35: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      38: checkcast     #6                  // class org/reactivestreams/Publisher
      41: aastore
      42: dup
      43: iconst_1
      44: aload_3
      45: ldc           #8                  // String p2
      47: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      50: checkcast     #6                  // class org/reactivestreams/Publisher
      53: aastore
      54: invokespecial #9                  // Method "<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      57: return

  reactor.core.publisher.MonoZip(boolean, java.util.function.Function<? super java.lang.Object[], ? extends R>, org.reactivestreams.Publisher<?>...);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method reactor/core/publisher/Mono."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #11                 // Field delayError:Z
       9: aload_0
      10: aload_2
      11: ldc           #12                 // String zipper
      13: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      16: checkcast     #13                 // class java/util/function/Function
      19: putfield      #14                 // Field zipper:Ljava/util/function/Function;
      22: aload_0
      23: aload_3
      24: ldc           #15                 // String sources
      26: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      29: checkcast     #16                 // class "[Lorg/reactivestreams/Publisher;"
      32: putfield      #17                 // Field sources:[Lorg/reactivestreams/Publisher;
      35: aload_0
      36: aconst_null
      37: putfield      #18                 // Field sourcesIterable:Ljava/lang/Iterable;
      40: return

  reactor.core.publisher.MonoZip(boolean, java.util.function.Function<? super java.lang.Object[], ? extends R>, java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method reactor/core/publisher/Mono."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #11                 // Field delayError:Z
       9: aload_0
      10: aload_2
      11: ldc           #12                 // String zipper
      13: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      16: checkcast     #13                 // class java/util/function/Function
      19: putfield      #14                 // Field zipper:Ljava/util/function/Function;
      22: aload_0
      23: aconst_null
      24: putfield      #17                 // Field sources:[Lorg/reactivestreams/Publisher;
      27: aload_0
      28: aload_3
      29: ldc           #19                 // String sourcesIterable
      31: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      34: checkcast     #20                 // class java/lang/Iterable
      37: putfield      #18                 // Field sourcesIterable:Ljava/lang/Iterable;
      40: return

  reactor.core.publisher.Mono<R> zipAdditionalSource(org.reactivestreams.Publisher, java.util.function.BiFunction);
    Code:
       0: aload_0
       1: getfield      #17                 // Field sources:[Lorg/reactivestreams/Publisher;
       4: astore_3
       5: aload_3
       6: ifnull        77
       9: aload_0
      10: getfield      #14                 // Field zipper:Ljava/util/function/Function;
      13: instanceof    #1                  // class reactor/core/publisher/FluxZip$PairwiseZipper
      16: ifeq          77
      19: aload_3
      20: arraylength
      21: istore        4
      23: iload         4
      25: iconst_1
      26: iadd
      27: anewarray     #6                  // class org/reactivestreams/Publisher
      30: astore        5
      32: aload_3
      33: iconst_0
      34: aload         5
      36: iconst_0
      37: iload         4
      39: invokestatic  #21                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      42: aload         5
      44: iload         4
      46: aload_1
      47: aastore
      48: aload_0
      49: getfield      #14                 // Field zipper:Ljava/util/function/Function;
      52: checkcast     #1                  // class reactor/core/publisher/FluxZip$PairwiseZipper
      55: aload_2
      56: invokevirtual #22                 // Method reactor/core/publisher/FluxZip$PairwiseZipper.then:(Ljava/util/function/BiFunction;)Lreactor/core/publisher/FluxZip$PairwiseZipper;
      59: astore        6
      61: new           #23                 // class reactor/core/publisher/MonoZip
      64: dup
      65: aload_0
      66: getfield      #11                 // Field delayError:Z
      69: aload         6
      71: aload         5
      73: invokespecial #9                  // Method "<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      76: areturn
      77: aconst_null
      78: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super R>);
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: getfield      #17                 // Field sources:[Lorg/reactivestreams/Publisher;
       6: ifnull        20
       9: aload_0
      10: getfield      #17                 // Field sources:[Lorg/reactivestreams/Publisher;
      13: astore_2
      14: aload_2
      15: arraylength
      16: istore_3
      17: goto          98
      20: bipush        8
      22: anewarray     #6                  // class org/reactivestreams/Publisher
      25: astore_2
      26: aload_0
      27: getfield      #18                 // Field sourcesIterable:Ljava/lang/Iterable;
      30: invokeinterface #24,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      35: astore        4
      37: aload         4
      39: invokeinterface #25,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      44: ifeq          98
      47: aload         4
      49: invokeinterface #26,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      54: checkcast     #6                  // class org/reactivestreams/Publisher
      57: astore        5
      59: iload_3
      60: aload_2
      61: arraylength
      62: if_icmpne     87
      65: iload_3
      66: iload_3
      67: iconst_2
      68: ishr
      69: iadd
      70: anewarray     #6                  // class org/reactivestreams/Publisher
      73: astore        6
      75: aload_2
      76: iconst_0
      77: aload         6
      79: iconst_0
      80: iload_3
      81: invokestatic  #21                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      84: aload         6
      86: astore_2
      87: aload_2
      88: iload_3
      89: iinc          3, 1
      92: aload         5
      94: aastore
      95: goto          37
      98: iload_3
      99: ifne          107
     102: aload_1
     103: invokestatic  #27                 // Method reactor/core/publisher/Operators.complete:(Lorg/reactivestreams/Subscriber;)V
     106: return
     107: new           #28                 // class reactor/core/publisher/MonoZip$ZipCoordinator
     110: dup
     111: aload_1
     112: iload_3
     113: aload_0
     114: getfield      #11                 // Field delayError:Z
     117: aload_0
     118: getfield      #14                 // Field zipper:Ljava/util/function/Function;
     121: invokespecial #29                 // Method reactor/core/publisher/MonoZip$ZipCoordinator."<init>":(Lreactor/core/CoreSubscriber;IZLjava/util/function/Function;)V
     124: astore        4
     126: aload_1
     127: aload         4
     129: invokeinterface #30,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     134: aload         4
     136: getfield      #31                 // Field reactor/core/publisher/MonoZip$ZipCoordinator.subscribers:[Lreactor/core/publisher/MonoZip$ZipInner;
     139: astore        5
     141: iconst_0
     142: istore        6
     144: iload         6
     146: iload_3
     147: if_icmpge     170
     150: aload_2
     151: iload         6
     153: aaload
     154: aload         5
     156: iload         6
     158: aaload
     159: invokeinterface #32,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     164: iinc          6, 1
     167: goto          144
     170: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #33                 // Field reactor/core/Scannable$Attr.DELAY_ERROR:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #11                 // Field delayError:Z
      11: invokestatic  #34                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aconst_null
      16: areturn
}
