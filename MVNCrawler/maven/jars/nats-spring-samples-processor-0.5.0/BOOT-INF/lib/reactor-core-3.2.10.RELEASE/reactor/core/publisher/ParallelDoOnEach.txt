Compiled from "ParallelDoOnEach.java"
final class reactor.core.publisher.ParallelDoOnEach<T> extends reactor.core.publisher.ParallelFlux<T> implements reactor.core.Scannable {
  final reactor.core.publisher.ParallelFlux<T> source;

  final java.util.function.BiConsumer<reactor.util.context.Context, ? super T> onNext;

  final java.util.function.BiConsumer<reactor.util.context.Context, ? super java.lang.Throwable> onError;

  final java.util.function.Consumer<reactor.util.context.Context> onComplete;

  reactor.core.publisher.ParallelDoOnEach(reactor.core.publisher.ParallelFlux<T>, java.util.function.BiConsumer<reactor.util.context.Context, ? super T>, java.util.function.BiConsumer<reactor.util.context.Context, ? super java.lang.Throwable>, java.util.function.Consumer<reactor.util.context.Context>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/ParallelFlux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field onNext:Ljava/util/function/BiConsumer;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field onError:Ljava/util/function/BiConsumer;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field onComplete:Ljava/util/function/Consumer;
      25: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #6                  // Method validate:([Lorg/reactivestreams/Subscriber;)Z
       5: ifne          9
       8: return
       9: aload_1
      10: arraylength
      11: istore_2
      12: iload_2
      13: anewarray     #7                  // class reactor/core/CoreSubscriber
      16: astore_3
      17: aload_1
      18: iconst_0
      19: aaload
      20: instanceof    #8                  // class reactor/core/Fuseable$ConditionalSubscriber
      23: istore        4
      25: iconst_0
      26: istore        5
      28: iload         5
      30: iload_2
      31: if_icmpge     104
      34: aload_1
      35: iload         5
      37: aaload
      38: astore        6
      40: new           #9                  // class reactor/core/publisher/ParallelDoOnEach$DoOnEachSignalPeek
      43: dup
      44: aload_0
      45: aload         6
      47: invokeinterface #10,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      52: invokespecial #11                 // Method reactor/core/publisher/ParallelDoOnEach$DoOnEachSignalPeek."<init>":(Lreactor/core/publisher/ParallelDoOnEach;Lreactor/util/context/Context;)V
      55: astore        7
      57: iload         4
      59: ifeq          83
      62: aload_3
      63: iload         5
      65: new           #12                 // class reactor/core/publisher/FluxPeekFuseable$PeekConditionalSubscriber
      68: dup
      69: aload         6
      71: checkcast     #8                  // class reactor/core/Fuseable$ConditionalSubscriber
      74: aload         7
      76: invokespecial #13                 // Method reactor/core/publisher/FluxPeekFuseable$PeekConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Lreactor/core/publisher/SignalPeek;)V
      79: aastore
      80: goto          98
      83: aload_3
      84: iload         5
      86: new           #14                 // class reactor/core/publisher/FluxPeek$PeekSubscriber
      89: dup
      90: aload         6
      92: aload         7
      94: invokespecial #15                 // Method reactor/core/publisher/FluxPeek$PeekSubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/SignalPeek;)V
      97: aastore
      98: iinc          5, 1
     101: goto          28
     104: aload_0
     105: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
     108: aload_3
     109: invokevirtual #16                 // Method reactor/core/publisher/ParallelFlux.subscribe:([Lreactor/core/CoreSubscriber;)V
     112: return

  public int parallelism();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #17                 // Method reactor/core/publisher/ParallelFlux.parallelism:()I
       7: ireturn

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #18                 // Method reactor/core/publisher/ParallelFlux.getPrefetch:()I
       7: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #19                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      11: areturn
      12: aload_1
      13: getstatic     #20                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #21                 // Method getPrefetch:()I
      23: invokestatic  #22                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aconst_null
      28: areturn
}
