Compiled from "FluxConcatMap.java"
final class reactor.core.publisher.FluxConcatMap$ConcatMapImmediate<T, R> implements reactor.core.publisher.FluxConcatMap$FluxConcatMapSupport<T, R> {
  final reactor.core.CoreSubscriber<? super R> actual;

  final reactor.util.context.Context ctx;

  final reactor.core.publisher.FluxConcatMap$ConcatMapInner<R> inner;

  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>> mapper;

  final java.util.function.Supplier<? extends java.util.Queue<T>> queueSupplier;

  final int prefetch;

  final int limit;

  org.reactivestreams.Subscription s;

  int consumed;

  volatile java.util.Queue<T> queue;

  volatile boolean done;

  volatile boolean cancelled;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxConcatMap$ConcatMapImmediate, java.lang.Throwable> ERROR;

  volatile boolean active;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxConcatMap$ConcatMapImmediate> WIP;

  volatile int guard;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxConcatMap$ConcatMapImmediate> GUARD;

  int sourceMode;

  reactor.core.publisher.FluxConcatMap$ConcatMapImmediate(reactor.core.CoreSubscriber<? super R>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, java.util.function.Supplier<? extends java.util.Queue<T>>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_1
      11: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      16: putfield      #4                  // Field ctx:Lreactor/util/context/Context;
      19: aload_0
      20: aload_2
      21: putfield      #5                  // Field mapper:Ljava/util/function/Function;
      24: aload_0
      25: aload_3
      26: putfield      #6                  // Field queueSupplier:Ljava/util/function/Supplier;
      29: aload_0
      30: iload         4
      32: putfield      #7                  // Field prefetch:I
      35: aload_0
      36: iload         4
      38: invokestatic  #8                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      41: putfield      #9                  // Field limit:I
      44: aload_0
      45: new           #10                 // class reactor/core/publisher/FluxConcatMap$ConcatMapInner
      48: dup
      49: aload_0
      50: invokespecial #11                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner."<init>":(Lreactor/core/publisher/FluxConcatMap$FluxConcatMapSupport;)V
      53: putfield      #12                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
      56: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #13                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #15                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     45
      19: aload_0
      20: getfield      #16                 // Field done:Z
      23: ifne          36
      26: aload_0
      27: getfield      #17                 // Field error:Ljava/lang/Throwable;
      30: getstatic     #18                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      33: if_acmpne     40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: invokestatic  #19                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      44: areturn
      45: aload_1
      46: getstatic     #20                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      49: if_acmpne     60
      52: aload_0
      53: getfield      #21                 // Field cancelled:Z
      56: invokestatic  #19                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      59: areturn
      60: aload_1
      61: getstatic     #22                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      64: if_acmpne     75
      67: aload_0
      68: getfield      #7                  // Field prefetch:I
      71: invokestatic  #23                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      74: areturn
      75: aload_1
      76: getstatic     #24                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      79: if_acmpne     106
      82: aload_0
      83: getfield      #25                 // Field queue:Ljava/util/Queue;
      86: ifnull        101
      89: aload_0
      90: getfield      #25                 // Field queue:Ljava/util/Queue;
      93: invokeinterface #26,  1           // InterfaceMethod java/util/Queue.size:()I
      98: goto          102
     101: iconst_0
     102: invokestatic  #23                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     105: areturn
     106: aload_1
     107: getstatic     #27                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
     110: if_acmpne     118
     113: aload_0
     114: getfield      #17                 // Field error:Ljava/lang/Throwable;
     117: areturn
     118: aload_0
     119: aload_1
     120: invokespecial #28                 // InterfaceMethod reactor/core/publisher/FluxConcatMap$FluxConcatMapSupport.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     123: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #29                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          148
      11: aload_0
      12: aload_1
      13: putfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_1
      17: instanceof    #30                 // class reactor/core/Fuseable$QueueSubscription
      20: ifeq          109
      23: aload_1
      24: checkcast     #30                 // class reactor/core/Fuseable$QueueSubscription
      27: astore_2
      28: aload_2
      29: bipush        7
      31: invokeinterface #32,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      36: istore_3
      37: iload_3
      38: iconst_1
      39: if_icmpne     72
      42: aload_0
      43: iconst_1
      44: putfield      #33                 // Field sourceMode:I
      47: aload_0
      48: aload_2
      49: putfield      #25                 // Field queue:Ljava/util/Queue;
      52: aload_0
      53: iconst_1
      54: putfield      #16                 // Field done:Z
      57: aload_0
      58: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      61: aload_0
      62: invokeinterface #34,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      67: aload_0
      68: invokevirtual #35                 // Method drain:()V
      71: return
      72: iload_3
      73: iconst_2
      74: if_icmpne     90
      77: aload_0
      78: iconst_2
      79: putfield      #33                 // Field sourceMode:I
      82: aload_0
      83: aload_2
      84: putfield      #25                 // Field queue:Ljava/util/Queue;
      87: goto          106
      90: aload_0
      91: aload_0
      92: getfield      #6                  // Field queueSupplier:Ljava/util/function/Supplier;
      95: invokeinterface #36,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     100: checkcast     #37                 // class java/util/Queue
     103: putfield      #25                 // Field queue:Ljava/util/Queue;
     106: goto          125
     109: aload_0
     110: aload_0
     111: getfield      #6                  // Field queueSupplier:Ljava/util/function/Supplier;
     114: invokeinterface #36,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     119: checkcast     #37                 // class java/util/Queue
     122: putfield      #25                 // Field queue:Ljava/util/Queue;
     125: aload_0
     126: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     129: aload_0
     130: invokeinterface #34,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     135: aload_1
     136: aload_0
     137: getfield      #7                  // Field prefetch:I
     140: invokestatic  #38                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
     143: invokeinterface #39,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     148: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #33                 // Field sourceMode:I
       4: iconst_2
       5: if_icmpne     15
       8: aload_0
       9: invokevirtual #35                 // Method drain:()V
      12: goto          64
      15: aload_0
      16: getfield      #25                 // Field queue:Ljava/util/Queue;
      19: aload_1
      20: invokeinterface #40,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      25: ifne          60
      28: aload_0
      29: aload_0
      30: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
      33: ldc           #42                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      35: invokestatic  #43                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      38: aload_1
      39: aload_0
      40: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      43: invokestatic  #44                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      46: invokevirtual #45                 // Method onError:(Ljava/lang/Throwable;)V
      49: aload_1
      50: aload_0
      51: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      54: invokestatic  #46                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      57: goto          64
      60: aload_0
      61: invokevirtual #35                 // Method drain:()V
      64: return

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #47                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #48                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          68
      11: aload_0
      12: getfield      #12                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
      15: invokevirtual #49                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.cancel:()V
      18: getstatic     #50                 // Field GUARD:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      21: aload_0
      22: invokevirtual #51                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      25: ifne          76
      28: getstatic     #47                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: aload_0
      32: invokestatic  #52                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      35: astore_1
      36: aload_1
      37: getstatic     #18                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      40: if_acmpeq     76
      43: aload_0
      44: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      47: aload_1
      48: invokeinterface #53,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      53: aload_0
      54: getfield      #25                 // Field queue:Ljava/util/Queue;
      57: aload_0
      58: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      61: aconst_null
      62: invokestatic  #54                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
      65: goto          76
      68: aload_1
      69: aload_0
      70: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      73: invokestatic  #55                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      76: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #16                 // Field done:Z
       5: aload_0
       6: invokevirtual #35                 // Method drain:()V
       9: return

  public void innerNext(R);
    Code:
       0: aload_0
       1: getfield      #56                 // Field guard:I
       4: ifne          67
       7: getstatic     #50                 // Field GUARD:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_0
      12: iconst_1
      13: invokevirtual #57                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      16: ifeq          67
      19: aload_0
      20: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      23: aload_1
      24: invokeinterface #58,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      29: getstatic     #50                 // Field GUARD:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      32: aload_0
      33: iconst_1
      34: iconst_0
      35: invokevirtual #57                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      38: ifeq          42
      41: return
      42: getstatic     #47                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      45: aload_0
      46: invokestatic  #52                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      49: astore_2
      50: aload_2
      51: getstatic     #18                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      54: if_acmpeq     67
      57: aload_0
      58: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      61: aload_2
      62: invokeinterface #53,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      67: return

  public void innerComplete();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #59                 // Field active:Z
       5: aload_0
       6: invokevirtual #35                 // Method drain:()V
       9: return

  public void innerError(java.lang.Throwable);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #60                 // Method currentContext:()Lreactor/util/context/Context;
       5: aload_0
       6: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
       9: invokestatic  #61                 // Method reactor/core/publisher/Operators.onNextInnerError:(Ljava/lang/Throwable;Lreactor/util/context/Context;Lorg/reactivestreams/Subscription;)Ljava/lang/Throwable;
      12: astore_1
      13: aload_1
      14: ifnull        86
      17: getstatic     #47                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      20: aload_0
      21: aload_1
      22: invokestatic  #48                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      25: ifeq          75
      28: aload_0
      29: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
      32: invokeinterface #62,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      37: getstatic     #50                 // Field GUARD:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      40: aload_0
      41: invokevirtual #51                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      44: ifne          95
      47: getstatic     #47                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      50: aload_0
      51: invokestatic  #52                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      54: astore_1
      55: aload_1
      56: getstatic     #18                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      59: if_acmpeq     95
      62: aload_0
      63: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      66: aload_1
      67: invokeinterface #53,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      72: goto          95
      75: aload_1
      76: aload_0
      77: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      80: invokestatic  #55                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      83: goto          95
      86: aload_0
      87: iconst_0
      88: putfield      #59                 // Field active:Z
      91: aload_0
      92: invokevirtual #35                 // Method drain:()V
      95: return

  public reactor.core.CoreSubscriber<? super R> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #12                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
       4: lload_1
       5: invokevirtual #63                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.request:(J)V
       8: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #21                 // Field cancelled:Z
       4: ifne          40
       7: aload_0
       8: iconst_1
       9: putfield      #21                 // Field cancelled:Z
      12: aload_0
      13: getfield      #12                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
      16: invokevirtual #49                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.cancel:()V
      19: aload_0
      20: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
      23: invokeinterface #62,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      28: aload_0
      29: getfield      #25                 // Field queue:Ljava/util/Queue;
      32: aload_0
      33: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      36: aconst_null
      37: invokestatic  #54                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
      40: return

  void drain();
    Code:
       0: getstatic     #64                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #51                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          453
      10: aload_0
      11: getfield      #21                 // Field cancelled:Z
      14: ifeq          18
      17: return
      18: aload_0
      19: getfield      #59                 // Field active:Z
      22: ifne          440
      25: aload_0
      26: getfield      #16                 // Field done:Z
      29: istore_1
      30: aload_0
      31: getfield      #25                 // Field queue:Ljava/util/Queue;
      34: invokeinterface #65,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      39: astore_2
      40: goto          66
      43: astore_3
      44: aload_0
      45: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      48: aload_0
      49: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
      52: aload_3
      53: aload_0
      54: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      57: invokestatic  #67                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      60: invokeinterface #53,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      65: return
      66: aload_2
      67: ifnonnull     74
      70: iconst_1
      71: goto          75
      74: iconst_0
      75: istore_3
      76: iload_1
      77: ifeq          94
      80: iload_3
      81: ifeq          94
      84: aload_0
      85: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      88: invokeinterface #68,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      93: return
      94: iload_3
      95: ifne          440
      98: aload_0
      99: getfield      #5                  // Field mapper:Ljava/util/function/Function;
     102: aload_2
     103: invokeinterface #69,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     108: ldc           #70                 // String The mapper returned a null Publisher
     110: invokestatic  #71                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
     113: checkcast     #72                 // class org/reactivestreams/Publisher
     116: astore        4
     118: goto          179
     121: astore        5
     123: aload_2
     124: aload_0
     125: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     128: invokestatic  #46                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
     131: aload_2
     132: aload         5
     134: aload_0
     135: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     138: aload_0
     139: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
     142: invokestatic  #73                 // Method reactor/core/publisher/Operators.onNextError:(Ljava/lang/Object;Ljava/lang/Throwable;Lreactor/util/context/Context;Lorg/reactivestreams/Subscription;)Ljava/lang/Throwable;
     145: astore        6
     147: aload         6
     149: ifnull        176
     152: aload_0
     153: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     156: aload_0
     157: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
     160: aload         5
     162: aload_2
     163: aload_0
     164: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     167: invokestatic  #44                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     170: invokeinterface #53,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     175: return
     176: goto          10
     179: aload_0
     180: getfield      #33                 // Field sourceMode:I
     183: iconst_1
     184: if_icmpeq     230
     187: aload_0
     188: getfield      #74                 // Field consumed:I
     191: iconst_1
     192: iadd
     193: istore        5
     195: iload         5
     197: aload_0
     198: getfield      #9                  // Field limit:I
     201: if_icmpne     224
     204: aload_0
     205: iconst_0
     206: putfield      #74                 // Field consumed:I
     209: aload_0
     210: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
     213: iload         5
     215: i2l
     216: invokeinterface #39,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     221: goto          230
     224: aload_0
     225: iload         5
     227: putfield      #74                 // Field consumed:I
     230: aload         4
     232: instanceof    #75                 // class java/util/concurrent/Callable
     235: ifeq          424
     238: aload         4
     240: checkcast     #75                 // class java/util/concurrent/Callable
     243: astore        5
     245: aload         5
     247: invokeinterface #76,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
     252: astore        6
     254: goto          307
     257: astore        7
     259: aload_2
     260: aload         7
     262: aload_0
     263: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     266: aload_0
     267: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
     270: invokestatic  #73                 // Method reactor/core/publisher/Operators.onNextError:(Ljava/lang/Object;Ljava/lang/Throwable;Lreactor/util/context/Context;Lorg/reactivestreams/Subscription;)Ljava/lang/Throwable;
     273: astore        8
     275: aload         8
     277: ifnull        304
     280: aload_0
     281: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     284: aload_0
     285: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
     288: aload         7
     290: aload_2
     291: aload_0
     292: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     295: invokestatic  #44                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     298: invokeinterface #53,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     303: return
     304: goto          10
     307: aload         6
     309: ifnonnull     315
     312: goto          10
     315: aload_0
     316: getfield      #12                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     319: invokevirtual #77                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.isUnbounded:()Z
     322: ifeq          396
     325: aload_0
     326: getfield      #56                 // Field guard:I
     329: ifne          10
     332: getstatic     #50                 // Field GUARD:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     335: aload_0
     336: iconst_0
     337: iconst_1
     338: invokevirtual #57                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     341: ifeq          10
     344: aload_0
     345: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     348: aload         6
     350: invokeinterface #58,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     355: getstatic     #50                 // Field GUARD:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     358: aload_0
     359: iconst_1
     360: iconst_0
     361: invokevirtual #57                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     364: ifne          10
     367: getstatic     #47                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     370: aload_0
     371: invokestatic  #52                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
     374: astore        7
     376: aload         7
     378: getstatic     #18                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
     381: if_acmpeq     395
     384: aload_0
     385: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     388: aload         7
     390: invokeinterface #53,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     395: return
     396: aload_0
     397: iconst_1
     398: putfield      #59                 // Field active:Z
     401: aload_0
     402: getfield      #12                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     405: new           #78                 // class reactor/core/publisher/FluxConcatMap$WeakScalarSubscription
     408: dup
     409: aload         6
     411: aload_0
     412: getfield      #12                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     415: invokespecial #79                 // Method reactor/core/publisher/FluxConcatMap$WeakScalarSubscription."<init>":(Ljava/lang/Object;Lreactor/core/CoreSubscriber;)V
     418: invokevirtual #80                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.set:(Lorg/reactivestreams/Subscription;)V
     421: goto          440
     424: aload_0
     425: iconst_1
     426: putfield      #59                 // Field active:Z
     429: aload         4
     431: aload_0
     432: getfield      #12                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     435: invokeinterface #81,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     440: getstatic     #64                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     443: aload_0
     444: invokevirtual #82                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     447: ifne          10
     450: goto          453
     453: return
    Exception table:
       from    to  target type
          30    40    43   Class java/lang/Throwable
          98   118   121   Class java/lang/Throwable
         245   254   257   Class java/lang/Throwable

  static {};
    Code:
       0: ldc           #83                 // class reactor/core/publisher/FluxConcatMap$ConcatMapImmediate
       2: ldc           #66                 // class java/lang/Throwable
       4: ldc           #84                 // String error
       6: invokestatic  #85                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #47                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #83                 // class reactor/core/publisher/FluxConcatMap$ConcatMapImmediate
      14: ldc           #86                 // String wip
      16: invokestatic  #87                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: putstatic     #64                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: ldc           #83                 // class reactor/core/publisher/FluxConcatMap$ConcatMapImmediate
      24: ldc           #88                 // String guard
      26: invokestatic  #87                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      29: putstatic     #50                 // Field GUARD:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      32: return
}
