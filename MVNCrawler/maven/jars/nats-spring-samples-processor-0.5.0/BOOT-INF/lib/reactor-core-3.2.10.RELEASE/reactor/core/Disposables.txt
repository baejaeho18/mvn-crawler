Compiled from "Disposables.java"
public final class reactor.core.Disposables {
  static final reactor.core.Disposable DISPOSED;

  private reactor.core.Disposables();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static reactor.core.Disposable$Composite composite();
    Code:
       0: new           #2                  // class reactor/core/Disposables$ListCompositeDisposable
       3: dup
       4: invokespecial #3                  // Method reactor/core/Disposables$ListCompositeDisposable."<init>":()V
       7: areturn

  public static reactor.core.Disposable$Composite composite(reactor.core.Disposable...);
    Code:
       0: new           #2                  // class reactor/core/Disposables$ListCompositeDisposable
       3: dup
       4: aload_0
       5: invokespecial #4                  // Method reactor/core/Disposables$ListCompositeDisposable."<init>":([Lreactor/core/Disposable;)V
       8: areturn

  public static reactor.core.Disposable$Composite composite(java.lang.Iterable<? extends reactor.core.Disposable>);
    Code:
       0: new           #2                  // class reactor/core/Disposables$ListCompositeDisposable
       3: dup
       4: aload_0
       5: invokespecial #5                  // Method reactor/core/Disposables$ListCompositeDisposable."<init>":(Ljava/lang/Iterable;)V
       8: areturn

  public static reactor.core.Disposable disposed();
    Code:
       0: new           #6                  // class reactor/core/Disposables$AlwaysDisposable
       3: dup
       4: invokespecial #7                  // Method reactor/core/Disposables$AlwaysDisposable."<init>":()V
       7: areturn

  public static reactor.core.Disposable never();
    Code:
       0: new           #8                  // class reactor/core/Disposables$NeverDisposable
       3: dup
       4: invokespecial #9                  // Method reactor/core/Disposables$NeverDisposable."<init>":()V
       7: areturn

  public static reactor.core.Disposable single();
    Code:
       0: new           #10                 // class reactor/core/Disposables$SimpleDisposable
       3: dup
       4: invokespecial #11                 // Method reactor/core/Disposables$SimpleDisposable."<init>":()V
       7: areturn

  public static reactor.core.Disposable$Swap swap();
    Code:
       0: new           #12                 // class reactor/core/Disposables$SwapDisposable
       3: dup
       4: invokespecial #13                 // Method reactor/core/Disposables$SwapDisposable."<init>":()V
       7: areturn

  static <T> boolean set(java.util.concurrent.atomic.AtomicReferenceFieldUpdater<T, reactor.core.Disposable>, T, reactor.core.Disposable);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #15                 // class reactor/core/Disposable
       8: astore_3
       9: aload_3
      10: getstatic     #16                 // Field DISPOSED:Lreactor/core/Disposable;
      13: if_acmpne     28
      16: aload_2
      17: ifnull        26
      20: aload_2
      21: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      26: iconst_0
      27: ireturn
      28: aload_0
      29: aload_1
      30: aload_3
      31: aload_2
      32: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      35: ifeq          50
      38: aload_3
      39: ifnull        48
      42: aload_3
      43: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      48: iconst_1
      49: ireturn
      50: goto          0

  static <T> boolean replace(java.util.concurrent.atomic.AtomicReferenceFieldUpdater<T, reactor.core.Disposable>, T, reactor.core.Disposable);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #15                 // class reactor/core/Disposable
       8: astore_3
       9: aload_3
      10: getstatic     #16                 // Field DISPOSED:Lreactor/core/Disposable;
      13: if_acmpne     28
      16: aload_2
      17: ifnull        26
      20: aload_2
      21: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      26: iconst_0
      27: ireturn
      28: aload_0
      29: aload_1
      30: aload_3
      31: aload_2
      32: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      35: ifeq          40
      38: iconst_1
      39: ireturn
      40: goto          0

  static <T> boolean dispose(java.util.concurrent.atomic.AtomicReferenceFieldUpdater<T, reactor.core.Disposable>, T);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #15                 // class reactor/core/Disposable
       8: astore_2
       9: getstatic     #16                 // Field DISPOSED:Lreactor/core/Disposable;
      12: astore_3
      13: aload_2
      14: aload_3
      15: if_acmpeq     45
      18: aload_0
      19: aload_1
      20: aload_3
      21: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #15                 // class reactor/core/Disposable
      27: astore_2
      28: aload_2
      29: aload_3
      30: if_acmpeq     45
      33: aload_2
      34: ifnull        43
      37: aload_2
      38: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      43: iconst_1
      44: ireturn
      45: iconst_0
      46: ireturn

  static boolean isDisposed(reactor.core.Disposable);
    Code:
       0: aload_0
       1: getstatic     #16                 // Field DISPOSED:Lreactor/core/Disposable;
       4: if_acmpne     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  static {};
    Code:
       0: invokestatic  #20                 // Method disposed:()Lreactor/core/Disposable;
       3: putstatic     #16                 // Field DISPOSED:Lreactor/core/Disposable;
       6: return
}
