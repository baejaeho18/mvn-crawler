Compiled from "MonoIgnorePublisher.java"
final class reactor.core.publisher.MonoIgnorePublisher<T> extends reactor.core.publisher.Mono<T> implements reactor.core.Scannable {
  final org.reactivestreams.Publisher<? extends T> source;

  reactor.core.publisher.MonoIgnorePublisher(org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Mono."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String publisher
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class org/reactivestreams/Publisher
      14: putfield      #5                  // Field source:Lorg/reactivestreams/Publisher;
      17: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field source:Lorg/reactivestreams/Publisher;
       4: new           #6                  // class reactor/core/publisher/MonoIgnoreElements$IgnoreElementsSubscriber
       7: dup
       8: aload_1
       9: invokespecial #7                  // Method reactor/core/publisher/MonoIgnoreElements$IgnoreElementsSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
      12: invokeinterface #8,  2            // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      17: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #9                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #5                  // Field source:Lorg/reactivestreams/Publisher;
      11: areturn
      12: aconst_null
      13: areturn
}
