Compiled from "FluxUsingWhen.java"
final class reactor.core.publisher.FluxUsingWhen$CancelInner implements reactor.core.publisher.InnerConsumer<java.lang.Object> {
  final reactor.core.publisher.FluxUsingWhen$UsingWhenParent parent;

  reactor.core.publisher.FluxUsingWhen$CancelInner(reactor.core.publisher.FluxUsingWhen$UsingWhenParent);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/FluxUsingWhen$UsingWhenParent;
       9: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxUsingWhen$UsingWhenParent;
       4: invokeinterface #3,  1            // InterfaceMethod reactor/core/publisher/FluxUsingWhen$UsingWhenParent.currentContext:()Lreactor/util/context/Context;
       9: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_1
       1: ldc           #4                  // String Subscription cannot be null
       3: invokestatic  #5                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: checkcast     #6                  // class org/reactivestreams/Subscription
       9: ldc2_w        #8                  // long 9223372036854775807l
      12: invokeinterface #10,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      17: return

  public void onNext(java.lang.Object);
    Code:
       0: return

  public void onError(java.lang.Throwable);
    Code:
       0: ldc           #11                 // class reactor/core/publisher/FluxUsingWhen
       2: invokestatic  #12                 // Method reactor/util/Loggers.getLogger:(Ljava/lang/Class;)Lreactor/util/Logger;
       5: ldc           #13                 // String Async resource cleanup failed after cancel
       7: aload_1
       8: invokeinterface #14,  3           // InterfaceMethod reactor/util/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
      13: return

  public void onComplete();
    Code:
       0: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #15                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxUsingWhen$UsingWhenParent;
      11: areturn
      12: aload_1
      13: getstatic     #16                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      16: if_acmpne     29
      19: aload_0
      20: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxUsingWhen$UsingWhenParent;
      23: invokeinterface #17,  1           // InterfaceMethod reactor/core/publisher/FluxUsingWhen$UsingWhenParent.actual:()Lreactor/core/CoreSubscriber;
      28: areturn
      29: aconst_null
      30: areturn
}
