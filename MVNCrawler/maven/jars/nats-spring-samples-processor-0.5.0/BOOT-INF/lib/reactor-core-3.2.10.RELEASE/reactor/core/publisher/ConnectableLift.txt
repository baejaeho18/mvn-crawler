Compiled from "ConnectableLift.java"
final class reactor.core.publisher.ConnectableLift<I, O> extends reactor.core.publisher.ConnectableFlux<O> implements reactor.core.Scannable {
  final java.util.function.BiFunction<org.reactivestreams.Publisher, ? super reactor.core.CoreSubscriber<? super O>, ? extends reactor.core.CoreSubscriber<? super I>> lifter;

  final reactor.core.publisher.ConnectableFlux<I> source;

  reactor.core.publisher.ConnectableLift(reactor.core.publisher.ConnectableFlux<I>, java.util.function.BiFunction<org.reactivestreams.Publisher, ? super reactor.core.CoreSubscriber<? super O>, ? extends reactor.core.CoreSubscriber<? super I>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/ConnectableFlux."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String source
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class reactor/core/publisher/ConnectableFlux
      14: putfield      #5                  // Field source:Lreactor/core/publisher/ConnectableFlux;
      17: aload_0
      18: aload_2
      19: putfield      #6                  // Field lifter:Ljava/util/function/BiFunction;
      22: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #5                  // Field source:Lreactor/core/publisher/ConnectableFlux;
       4: invokevirtual #7                  // Method reactor/core/publisher/ConnectableFlux.getPrefetch:()I
       7: ireturn

  public void connect(java.util.function.Consumer<? super reactor.core.Disposable>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field source:Lreactor/core/publisher/ConnectableFlux;
       4: invokevirtual #8                  // Method reactor/core/publisher/ConnectableFlux.connect:()Lreactor/core/Disposable;
       7: pop
       8: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #9                  // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
       4: if_acmpne     18
       7: aload_0
       8: getfield      #5                  // Field source:Lreactor/core/publisher/ConnectableFlux;
      11: invokevirtual #7                  // Method reactor/core/publisher/ConnectableFlux.getPrefetch:()I
      14: invokestatic  #10                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      17: areturn
      18: aload_1
      19: getstatic     #11                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      22: if_acmpne     30
      25: aload_0
      26: getfield      #5                  // Field source:Lreactor/core/publisher/ConnectableFlux;
      29: areturn
      30: aconst_null
      31: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super O>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field lifter:Ljava/util/function/BiFunction;
       4: aload_0
       5: getfield      #5                  // Field source:Lreactor/core/publisher/ConnectableFlux;
       8: aload_1
       9: invokeinterface #12,  3           // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #13                 // class reactor/core/CoreSubscriber
      17: astore_2
      18: aload_2
      19: ldc           #14                 // String Lifted subscriber MUST NOT be null
      21: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      24: pop
      25: aload_0
      26: getfield      #5                  // Field source:Lreactor/core/publisher/ConnectableFlux;
      29: aload_2
      30: invokevirtual #15                 // Method reactor/core/publisher/ConnectableFlux.subscribe:(Lreactor/core/CoreSubscriber;)V
      33: return
}
