Compiled from "MonoFlatMap.java"
final class reactor.core.publisher.MonoFlatMap<T, R> extends reactor.core.publisher.MonoOperator<T, R> implements reactor.core.Fuseable {
  final java.util.function.Function<? super T, ? extends reactor.core.publisher.Mono<? extends R>> mapper;

  reactor.core.publisher.MonoFlatMap(reactor.core.publisher.Mono<? extends T>, java.util.function.Function<? super T, ? extends reactor.core.publisher.Mono<? extends R>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String mapper
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/function/Function
      15: putfield      #5                  // Field mapper:Ljava/util/function/Function;
      18: return

  public void subscribe(reactor.core.CoreSubscriber<? super R>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field source:Lreactor/core/publisher/Mono;
       4: aload_1
       5: aload_0
       6: getfield      #5                  // Field mapper:Ljava/util/function/Function;
       9: iconst_1
      10: invokestatic  #7                  // Method reactor/core/publisher/FluxFlatMap.trySubscribeScalarMap:(Lorg/reactivestreams/Publisher;Lreactor/core/CoreSubscriber;Ljava/util/function/Function;Z)Z
      13: ifeq          17
      16: return
      17: new           #8                  // class reactor/core/publisher/MonoFlatMap$FlatMapMain
      20: dup
      21: aload_1
      22: aload_0
      23: getfield      #5                  // Field mapper:Ljava/util/function/Function;
      26: invokespecial #9                  // Method reactor/core/publisher/MonoFlatMap$FlatMapMain."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;)V
      29: astore_2
      30: aload_1
      31: aload_2
      32: invokeinterface #10,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      37: aload_0
      38: getfield      #6                  // Field source:Lreactor/core/publisher/Mono;
      41: aload_2
      42: invokevirtual #11                 // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      45: return
}
