Compiled from "FluxDoOnEach.java"
final class reactor.core.publisher.FluxDoOnEach<T> extends reactor.core.publisher.FluxOperator<T, T> {
  final java.util.function.Consumer<? super reactor.core.publisher.Signal<T>> onSignal;

  reactor.core.publisher.FluxDoOnEach(reactor.core.publisher.Flux<? extends T>, java.util.function.Consumer<? super reactor.core.publisher.Signal<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String onSignal
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/function/Consumer
      15: putfield      #5                  // Field onSignal:Ljava/util/function/Consumer;
      18: return

  static <T> reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber<T> createSubscriber(reactor.core.CoreSubscriber<? super T>, java.util.function.Consumer<? super reactor.core.publisher.Signal<T>>, boolean, boolean);
    Code:
       0: iload_2
       1: ifeq          36
       4: aload_0
       5: instanceof    #6                  // class reactor/core/Fuseable$ConditionalSubscriber
       8: ifeq          25
      11: new           #7                  // class reactor/core/publisher/FluxDoOnEach$DoOnEachFuseableConditionalSubscriber
      14: dup
      15: aload_0
      16: checkcast     #6                  // class reactor/core/Fuseable$ConditionalSubscriber
      19: aload_1
      20: iload_3
      21: invokespecial #8                  // Method reactor/core/publisher/FluxDoOnEach$DoOnEachFuseableConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Ljava/util/function/Consumer;Z)V
      24: areturn
      25: new           #9                  // class reactor/core/publisher/FluxDoOnEach$DoOnEachFuseableSubscriber
      28: dup
      29: aload_0
      30: aload_1
      31: iload_3
      32: invokespecial #10                 // Method reactor/core/publisher/FluxDoOnEach$DoOnEachFuseableSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Consumer;Z)V
      35: areturn
      36: aload_0
      37: instanceof    #6                  // class reactor/core/Fuseable$ConditionalSubscriber
      40: ifeq          57
      43: new           #11                 // class reactor/core/publisher/FluxDoOnEach$DoOnEachConditionalSubscriber
      46: dup
      47: aload_0
      48: checkcast     #6                  // class reactor/core/Fuseable$ConditionalSubscriber
      51: aload_1
      52: iload_3
      53: invokespecial #12                 // Method reactor/core/publisher/FluxDoOnEach$DoOnEachConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Ljava/util/function/Consumer;Z)V
      56: areturn
      57: new           #13                 // class reactor/core/publisher/FluxDoOnEach$DoOnEachSubscriber
      60: dup
      61: aload_0
      62: aload_1
      63: iload_3
      64: invokespecial #14                 // Method reactor/core/publisher/FluxDoOnEach$DoOnEachSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Consumer;Z)V
      67: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #15                 // Field source:Lreactor/core/publisher/Flux;
       4: aload_1
       5: aload_0
       6: getfield      #5                  // Field onSignal:Ljava/util/function/Consumer;
       9: iconst_0
      10: iconst_0
      11: invokestatic  #16                 // Method createSubscriber:(Lreactor/core/CoreSubscriber;Ljava/util/function/Consumer;ZZ)Lreactor/core/publisher/FluxDoOnEach$DoOnEachSubscriber;
      14: invokevirtual #17                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      17: return
}
