Compiled from "FluxUsingWhen.java"
final class reactor.core.publisher.FluxUsingWhen<T, S> extends reactor.core.publisher.Flux<T> implements reactor.core.publisher.SourceProducer<T> {
  final org.reactivestreams.Publisher<S> resourceSupplier;

  final java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<? extends T>> resourceClosure;

  final java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>> asyncComplete;

  final java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>> asyncError;

  final java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>> asyncCancel;

  reactor.core.publisher.FluxUsingWhen(org.reactivestreams.Publisher<S>, java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<? extends T>>, java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #4                  // String resourceSupplier
       8: invokestatic  #5                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #6                  // class org/reactivestreams/Publisher
      14: putfield      #7                  // Field resourceSupplier:Lorg/reactivestreams/Publisher;
      17: aload_0
      18: aload_2
      19: ldc           #8                  // String resourceClosure
      21: invokestatic  #5                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      24: checkcast     #9                  // class java/util/function/Function
      27: putfield      #10                 // Field resourceClosure:Ljava/util/function/Function;
      30: aload_0
      31: aload_3
      32: ldc           #11                 // String asyncComplete
      34: invokestatic  #5                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      37: checkcast     #9                  // class java/util/function/Function
      40: putfield      #12                 // Field asyncComplete:Ljava/util/function/Function;
      43: aload_0
      44: aload         4
      46: ldc           #13                 // String asyncError
      48: invokestatic  #5                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      51: checkcast     #9                  // class java/util/function/Function
      54: putfield      #14                 // Field asyncError:Ljava/util/function/Function;
      57: aload_0
      58: aload         5
      60: putfield      #15                 // Field asyncCancel:Ljava/util/function/Function;
      63: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #7                  // Field resourceSupplier:Lorg/reactivestreams/Publisher;
       4: instanceof    #16                 // class java/util/concurrent/Callable
       7: ifeq          85
      10: aload_0
      11: getfield      #7                  // Field resourceSupplier:Lorg/reactivestreams/Publisher;
      14: checkcast     #16                 // class java/util/concurrent/Callable
      17: astore_2
      18: aload_2
      19: invokeinterface #17,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      24: astore_3
      25: aload_3
      26: ifnonnull     36
      29: aload_1
      30: invokestatic  #18                 // Method reactor/core/publisher/Operators.complete:(Lorg/reactivestreams/Subscriber;)V
      33: goto          75
      36: aload_3
      37: aload_0
      38: getfield      #10                 // Field resourceClosure:Ljava/util/function/Function;
      41: invokestatic  #2                  // Method deriveFluxFromResource:(Ljava/lang/Object;Ljava/util/function/Function;)Lorg/reactivestreams/Publisher;
      44: astore        4
      46: aload_3
      47: aload_1
      48: aload_0
      49: getfield      #12                 // Field asyncComplete:Ljava/util/function/Function;
      52: aload_0
      53: getfield      #14                 // Field asyncError:Ljava/util/function/Function;
      56: aload_0
      57: getfield      #15                 // Field asyncCancel:Ljava/util/function/Function;
      60: aconst_null
      61: invokestatic  #1                  // Method prepareSubscriberForResource:(Ljava/lang/Object;Lreactor/core/CoreSubscriber;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Lreactor/core/publisher/Operators$DeferredSubscription;)Lreactor/core/publisher/FluxUsingWhen$UsingWhenSubscriber;
      64: astore        5
      66: aload         4
      68: aload         5
      70: invokeinterface #19,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      75: goto          84
      78: astore_2
      79: aload_1
      80: aload_2
      81: invokestatic  #21                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      84: return
      85: aload_0
      86: getfield      #7                  // Field resourceSupplier:Lorg/reactivestreams/Publisher;
      89: new           #22                 // class reactor/core/publisher/FluxUsingWhen$ResourceSubscriber
      92: dup
      93: aload_1
      94: aload_0
      95: getfield      #10                 // Field resourceClosure:Ljava/util/function/Function;
      98: aload_0
      99: getfield      #12                 // Field asyncComplete:Ljava/util/function/Function;
     102: aload_0
     103: getfield      #14                 // Field asyncError:Ljava/util/function/Function;
     106: aload_0
     107: getfield      #15                 // Field asyncCancel:Ljava/util/function/Function;
     110: aload_0
     111: getfield      #7                  // Field resourceSupplier:Lorg/reactivestreams/Publisher;
     114: instanceof    #23                 // class reactor/core/publisher/Mono
     117: invokespecial #24                 // Method reactor/core/publisher/FluxUsingWhen$ResourceSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Z)V
     120: invokeinterface #19,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     125: return
    Exception table:
       from    to  target type
          10    75    78   Class java/lang/Throwable

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aconst_null
       1: areturn

  private static <RESOURCE, T> org.reactivestreams.Publisher<? extends T> deriveFluxFromResource(RESOURCE, java.util.function.Function<? super RESOURCE, ? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #25,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: ldc           #26                 // String The resourceClosure function returned a null value
       9: invokestatic  #5                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #6                  // class org/reactivestreams/Publisher
      15: astore_2
      16: goto          25
      19: astore_3
      20: aload_3
      21: invokestatic  #27                 // Method reactor/core/publisher/Flux.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Flux;
      24: astore_2
      25: aload_2
      26: areturn
    Exception table:
       from    to  target type
           0    16    19   Class java/lang/Throwable

  private static <RESOURCE, T> reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber<? super T, RESOURCE> prepareSubscriberForResource(RESOURCE, reactor.core.CoreSubscriber<? super T>, java.util.function.Function<? super RESOURCE, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super RESOURCE, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super RESOURCE, ? extends org.reactivestreams.Publisher<?>>, reactor.core.publisher.Operators$DeferredSubscription);
    Code:
       0: aload_1
       1: instanceof    #28                 // class reactor/core/Fuseable$ConditionalSubscriber
       4: ifeq          30
       7: aload_1
       8: checkcast     #28                 // class reactor/core/Fuseable$ConditionalSubscriber
      11: astore        6
      13: new           #29                 // class reactor/core/publisher/FluxUsingWhen$UsingWhenConditionalSubscriber
      16: dup
      17: aload         6
      19: aload_0
      20: aload_2
      21: aload_3
      22: aload         4
      24: aload         5
      26: invokespecial #30                 // Method reactor/core/publisher/FluxUsingWhen$UsingWhenConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Ljava/lang/Object;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Lreactor/core/publisher/Operators$DeferredSubscription;)V
      29: areturn
      30: new           #31                 // class reactor/core/publisher/FluxUsingWhen$UsingWhenSubscriber
      33: dup
      34: aload_1
      35: aload_0
      36: aload_2
      37: aload_3
      38: aload         4
      40: aload         5
      42: invokespecial #32                 // Method reactor/core/publisher/FluxUsingWhen$UsingWhenSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/lang/Object;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Lreactor/core/publisher/Operators$DeferredSubscription;)V
      45: areturn

  static org.reactivestreams.Publisher access$000(java.lang.Object, java.util.function.Function);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #2                  // Method deriveFluxFromResource:(Ljava/lang/Object;Ljava/util/function/Function;)Lorg/reactivestreams/Publisher;
       5: areturn

  static reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber access$100(java.lang.Object, reactor.core.CoreSubscriber, java.util.function.Function, java.util.function.Function, java.util.function.Function, reactor.core.publisher.Operators$DeferredSubscription);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokestatic  #1                  // Method prepareSubscriberForResource:(Ljava/lang/Object;Lreactor/core/CoreSubscriber;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Lreactor/core/publisher/Operators$DeferredSubscription;)Lreactor/core/publisher/FluxUsingWhen$UsingWhenSubscriber;
      11: areturn
}
