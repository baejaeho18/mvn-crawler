Compiled from "FluxSample.java"
final class reactor.core.publisher.FluxSample$SampleMainSubscriber<T> implements reactor.core.publisher.InnerOperator<T, T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final reactor.util.context.Context ctx;

  volatile T value;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSample$SampleMainSubscriber, java.lang.Object> VALUE;

  volatile org.reactivestreams.Subscription main;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSample$SampleMainSubscriber, org.reactivestreams.Subscription> MAIN;

  volatile org.reactivestreams.Subscription other;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSample$SampleMainSubscriber, org.reactivestreams.Subscription> OTHER;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxSample$SampleMainSubscriber> REQUESTED;

  reactor.core.publisher.FluxSample$SampleMainSubscriber(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_1
      11: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      16: putfield      #4                  // Field ctx:Lreactor/util/context/Context;
      19: return

  public final reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #5                  // Field other:Lorg/reactivestreams/Subscription;
       4: invokestatic  #6                  // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
       7: invokestatic  #7                  // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
      10: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #8                  // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #9                  // Field requested:J
      11: invokestatic  #10                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      14: areturn
      15: aload_1
      16: getstatic     #11                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #12                 // Field main:Lorg/reactivestreams/Subscription;
      26: areturn
      27: aload_1
      28: getstatic     #13                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     53
      34: aload_0
      35: getfield      #12                 // Field main:Lorg/reactivestreams/Subscription;
      38: invokestatic  #14                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      41: if_acmpne     48
      44: iconst_1
      45: goto          49
      48: iconst_0
      49: invokestatic  #15                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      52: areturn
      53: aload_1
      54: getstatic     #16                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      57: if_acmpne     76
      60: aload_0
      61: getfield      #17                 // Field value:Ljava/lang/Object;
      64: ifnull        71
      67: iconst_1
      68: goto          72
      71: iconst_0
      72: invokestatic  #18                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      75: areturn
      76: aload_0
      77: aload_1
      78: invokespecial #19                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      81: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #20                 // Field MAIN:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aconst_null
       5: aload_1
       6: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ifne          32
      12: aload_1
      13: invokeinterface #22,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      18: aload_0
      19: getfield      #12                 // Field main:Lorg/reactivestreams/Subscription;
      22: invokestatic  #14                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      25: if_acmpeq     31
      28: invokestatic  #23                 // Method reactor/core/publisher/Operators.reportSubscriptionSet:()V
      31: return
      32: aload_1
      33: ldc2_w        #25                 // long 9223372036854775807l
      36: invokeinterface #27,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      41: return

  void cancelMain();
    Code:
       0: aload_0
       1: getfield      #12                 // Field main:Lorg/reactivestreams/Subscription;
       4: astore_1
       5: aload_1
       6: invokestatic  #14                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       9: if_acmpeq     43
      12: getstatic     #20                 // Field MAIN:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: invokestatic  #14                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      19: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #29                 // class org/reactivestreams/Subscription
      25: astore_1
      26: aload_1
      27: ifnull        43
      30: aload_1
      31: invokestatic  #14                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      34: if_acmpeq     43
      37: aload_1
      38: invokeinterface #22,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      43: return

  void cancelOther();
    Code:
       0: aload_0
       1: getfield      #5                  // Field other:Lorg/reactivestreams/Subscription;
       4: astore_1
       5: aload_1
       6: invokestatic  #14                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       9: if_acmpeq     43
      12: getstatic     #30                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: invokestatic  #14                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      19: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #29                 // class org/reactivestreams/Subscription
      25: astore_1
      26: aload_1
      27: ifnull        43
      30: aload_1
      31: invokestatic  #14                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      34: if_acmpeq     43
      37: aload_1
      38: invokeinterface #22,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      43: return

  void setOther(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #30                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aconst_null
       5: aload_1
       6: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ifne          32
      12: aload_1
      13: invokeinterface #22,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      18: aload_0
      19: getfield      #5                  // Field other:Lorg/reactivestreams/Subscription;
      22: invokestatic  #14                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      25: if_acmpeq     31
      28: invokestatic  #23                 // Method reactor/core/publisher/Operators.reportSubscriptionSet:()V
      31: return
      32: aload_1
      33: ldc2_w        #25                 // long 9223372036854775807l
      36: invokeinterface #27,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      41: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #31                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          16
       7: getstatic     #32                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #33                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: return

  public void cancel();
    Code:
       0: aload_0
       1: invokevirtual #34                 // Method cancelMain:()V
       4: aload_0
       5: invokevirtual #35                 // Method cancelOther:()V
       8: return

  public void onNext(T);
    Code:
       0: getstatic     #36                 // Field VALUE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: astore_2
       9: aload_2
      10: ifnull        21
      13: aload_2
      14: aload_0
      15: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      18: invokestatic  #37                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      21: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method cancelOther:()V
       4: aload_0
       5: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       8: aload_1
       9: invokeinterface #38,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      14: return

  public void onComplete();
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method cancelOther:()V
       4: aload_0
       5: getfield      #17                 // Field value:Ljava/lang/Object;
       8: astore_1
       9: aload_1
      10: ifnull        26
      13: aload_0
      14: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      17: aload_0
      18: getfield      #17                 // Field value:Ljava/lang/Object;
      21: invokeinterface #39,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      26: aload_0
      27: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      30: invokeinterface #40,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      35: return

  T getAndNullValue();
    Code:
       0: getstatic     #36                 // Field VALUE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aconst_null
       5: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  void decrement();
    Code:
       0: getstatic     #32                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
       7: pop2
       8: return

  static {};
    Code:
       0: ldc           #42                 // class reactor/core/publisher/FluxSample$SampleMainSubscriber
       2: ldc           #43                 // class java/lang/Object
       4: ldc           #44                 // String value
       6: invokestatic  #45                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #36                 // Field VALUE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #42                 // class reactor/core/publisher/FluxSample$SampleMainSubscriber
      14: ldc           #29                 // class org/reactivestreams/Subscription
      16: ldc           #46                 // String main
      18: invokestatic  #45                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      21: putstatic     #20                 // Field MAIN:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      24: ldc           #42                 // class reactor/core/publisher/FluxSample$SampleMainSubscriber
      26: ldc           #29                 // class org/reactivestreams/Subscription
      28: ldc           #47                 // String other
      30: invokestatic  #45                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      33: putstatic     #30                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      36: ldc           #42                 // class reactor/core/publisher/FluxSample$SampleMainSubscriber
      38: ldc           #48                 // String requested
      40: invokestatic  #49                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      43: putstatic     #32                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      46: return
}
