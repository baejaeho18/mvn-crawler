Compiled from "ReplayProcessor.java"
public final class reactor.core.publisher.ReplayProcessor<T> extends reactor.core.publisher.FluxProcessor<T, T> implements reactor.core.Fuseable {
  final reactor.core.publisher.FluxReplay$ReplayBuffer<T> buffer;

  org.reactivestreams.Subscription subscription;

  volatile reactor.core.publisher.FluxReplay$ReplaySubscription<T>[] subscribers;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.ReplayProcessor, reactor.core.publisher.FluxReplay$ReplaySubscription[]> SUBSCRIBERS;

  public static <T> reactor.core.publisher.ReplayProcessor<T> cacheLast();
    Code:
       0: aconst_null
       1: invokestatic  #1                  // Method cacheLastOrDefault:(Ljava/lang/Object;)Lreactor/core/publisher/ReplayProcessor;
       4: areturn

  public static <T> reactor.core.publisher.ReplayProcessor<T> cacheLastOrDefault(T);
    Code:
       0: iconst_1
       1: invokestatic  #2                  // Method create:(I)Lreactor/core/publisher/ReplayProcessor;
       4: astore_1
       5: aload_0
       6: ifnull        14
       9: aload_1
      10: aload_0
      11: invokevirtual #3                  // Method onNext:(Ljava/lang/Object;)V
      14: aload_1
      15: areturn

  public static <E> reactor.core.publisher.ReplayProcessor<E> create();
    Code:
       0: getstatic     #4                  // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       3: iconst_1
       4: invokestatic  #5                  // Method create:(IZ)Lreactor/core/publisher/ReplayProcessor;
       7: areturn

  public static <E> reactor.core.publisher.ReplayProcessor<E> create(int);
    Code:
       0: iload_0
       1: iconst_0
       2: invokestatic  #5                  // Method create:(IZ)Lreactor/core/publisher/ReplayProcessor;
       5: areturn

  public static <E> reactor.core.publisher.ReplayProcessor<E> create(int, boolean);
    Code:
       0: iload_1
       1: ifeq          16
       4: new           #6                  // class reactor/core/publisher/FluxReplay$UnboundedReplayBuffer
       7: dup
       8: iload_0
       9: invokespecial #7                  // Method reactor/core/publisher/FluxReplay$UnboundedReplayBuffer."<init>":(I)V
      12: astore_2
      13: goto          25
      16: new           #8                  // class reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer
      19: dup
      20: iload_0
      21: invokespecial #9                  // Method reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer."<init>":(I)V
      24: astore_2
      25: new           #10                 // class reactor/core/publisher/ReplayProcessor
      28: dup
      29: aload_2
      30: invokespecial #11                 // Method "<init>":(Lreactor/core/publisher/FluxReplay$ReplayBuffer;)V
      33: areturn

  public static <T> reactor.core.publisher.ReplayProcessor<T> createTimeout(java.time.Duration);
    Code:
       0: aload_0
       1: invokestatic  #12                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       4: invokestatic  #13                 // Method createTimeout:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/ReplayProcessor;
       7: areturn

  public static <T> reactor.core.publisher.ReplayProcessor<T> createTimeout(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: ldc           #15                 // int 2147483647
       2: aload_0
       3: aload_1
       4: invokestatic  #16                 // Method createSizeAndTimeout:(ILjava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/ReplayProcessor;
       7: areturn

  public static <T> reactor.core.publisher.ReplayProcessor<T> createSizeAndTimeout(int, java.time.Duration);
    Code:
       0: iload_0
       1: aload_1
       2: invokestatic  #12                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokestatic  #16                 // Method createSizeAndTimeout:(ILjava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/ReplayProcessor;
       8: areturn

  public static <T> reactor.core.publisher.ReplayProcessor<T> createSizeAndTimeout(int, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_2
       1: ldc           #17                 // String scheduler is null
       3: invokestatic  #18                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: iload_0
       8: ifgt          38
      11: new           #19                 // class java/lang/IllegalArgumentException
      14: dup
      15: new           #20                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #22                 // String size > 0 required but it was
      24: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: iload_0
      28: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: new           #10                 // class reactor/core/publisher/ReplayProcessor
      41: dup
      42: new           #27                 // class reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer
      45: dup
      46: iload_0
      47: aload_1
      48: invokevirtual #28                 // Method java/time/Duration.toMillis:()J
      51: aload_2
      52: invokespecial #29                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer."<init>":(IJLreactor/core/scheduler/Scheduler;)V
      55: invokespecial #11                 // Method "<init>":(Lreactor/core/publisher/FluxReplay$ReplayBuffer;)V
      58: areturn

  reactor.core.publisher.ReplayProcessor(reactor.core.publisher.FluxReplay$ReplayBuffer<T>);
    Code:
       0: aload_0
       1: invokespecial #30                 // Method reactor/core/publisher/FluxProcessor."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #31                 // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
       9: getstatic     #32                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: aload_0
      13: getstatic     #33                 // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.EMPTY:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      16: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      19: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: ldc           #35                 // String subscribe
       3: invokestatic  #18                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #36                 // class reactor/core/publisher/ReplayProcessor$ReplayInner
      10: dup
      11: aload_1
      12: aload_0
      13: invokespecial #37                 // Method reactor/core/publisher/ReplayProcessor$ReplayInner."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/ReplayProcessor;)V
      16: astore_2
      17: aload_1
      18: aload_2
      19: invokeinterface #38,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      24: aload_0
      25: aload_2
      26: invokevirtual #39                 // Method add:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)Z
      29: ifeq          47
      32: aload_2
      33: invokeinterface #40,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.isCancelled:()Z
      38: ifeq          47
      41: aload_0
      42: aload_2
      43: invokevirtual #41                 // Method remove:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      46: return
      47: aload_0
      48: getfield      #31                 // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
      51: aload_2
      52: invokeinterface #42,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.replay:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      57: return

  public java.lang.Throwable getError();
    Code:
       0: aload_0
       1: getfield      #31                 // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
       4: invokeinterface #43,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.getError:()Ljava/lang/Throwable;
       9: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #44                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #45                 // Field subscription:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #46                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      16: if_acmpne     32
      19: aload_0
      20: getfield      #31                 // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
      23: invokeinterface #47,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.capacity:()I
      28: invokestatic  #48                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      31: areturn
      32: aload_0
      33: aload_1
      34: invokespecial #49                 // Method reactor/core/publisher/FluxProcessor.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      37: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #50                 // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       4: invokestatic  #51                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: areturn

  public long downstreamCount();
    Code:
       0: aload_0
       1: getfield      #50                 // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       4: arraylength
       5: i2l
       6: lreturn

  public boolean isTerminated();
    Code:
       0: aload_0
       1: getfield      #31                 // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
       4: invokeinterface #52,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.isDone:()Z
       9: ireturn

  boolean add(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_0
       1: getfield      #50                 // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       4: astore_2
       5: aload_2
       6: getstatic     #53                 // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.TERMINATED:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       9: if_acmpne     14
      12: iconst_0
      13: ireturn
      14: aload_2
      15: arraylength
      16: istore_3
      17: iload_3
      18: iconst_1
      19: iadd
      20: anewarray     #36                 // class reactor/core/publisher/ReplayProcessor$ReplayInner
      23: astore        4
      25: aload_2
      26: iconst_0
      27: aload         4
      29: iconst_0
      30: iload_3
      31: invokestatic  #54                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      34: aload         4
      36: iload_3
      37: aload_1
      38: aastore
      39: getstatic     #32                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      42: aload_0
      43: aload_2
      44: aload         4
      46: invokevirtual #55                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      49: ifeq          54
      52: iconst_1
      53: ireturn
      54: goto          0

  void remove(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_0
       1: getfield      #50                 // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       4: astore_2
       5: aload_2
       6: getstatic     #53                 // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.TERMINATED:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       9: if_acmpeq     19
      12: aload_2
      13: getstatic     #33                 // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.EMPTY:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      16: if_acmpne     20
      19: return
      20: aload_2
      21: arraylength
      22: istore_3
      23: iconst_0
      24: istore        4
      26: iload         4
      28: iload_3
      29: if_icmpge     109
      32: aload_2
      33: iload         4
      35: aaload
      36: aload_1
      37: if_acmpne     103
      40: iload_3
      41: iconst_1
      42: if_icmpne     53
      45: getstatic     #33                 // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.EMPTY:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      48: astore        5
      50: goto          89
      53: iload_3
      54: iconst_1
      55: isub
      56: anewarray     #36                 // class reactor/core/publisher/ReplayProcessor$ReplayInner
      59: astore        5
      61: aload_2
      62: iconst_0
      63: aload         5
      65: iconst_0
      66: iload         4
      68: invokestatic  #54                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      71: aload_2
      72: iload         4
      74: iconst_1
      75: iadd
      76: aload         5
      78: iload         4
      80: iload_3
      81: iload         4
      83: isub
      84: iconst_1
      85: isub
      86: invokestatic  #54                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      89: getstatic     #32                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      92: aload_0
      93: aload_2
      94: aload         5
      96: invokevirtual #55                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      99: ifeq          0
     102: return
     103: iinc          4, 1
     106: goto          26
     109: goto          112
     112: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #31                 // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
       4: invokeinterface #52,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.isDone:()Z
       9: ifeq          21
      12: aload_1
      13: invokeinterface #56,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      18: goto          46
      21: aload_0
      22: getfield      #45                 // Field subscription:Lorg/reactivestreams/Subscription;
      25: aload_1
      26: invokestatic  #57                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
      29: ifeq          46
      32: aload_0
      33: aload_1
      34: putfield      #45                 // Field subscription:Lorg/reactivestreams/Subscription;
      37: aload_1
      38: ldc2_w        #59                 // long 9223372036854775807l
      41: invokeinterface #61,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      46: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #50                 // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       4: invokestatic  #62                 // Method reactor/core/publisher/Operators.multiSubscribersContext:([Lreactor/core/publisher/InnerProducer;)Lreactor/util/context/Context;
       7: areturn

  public int getPrefetch();
    Code:
       0: ldc           #15                 // int 2147483647
       2: ireturn

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #31                 // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
       4: astore_2
       5: aload_2
       6: invokeinterface #52,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.isDone:()Z
      11: ifeq          25
      14: aload_1
      15: aload_0
      16: invokevirtual #63                 // Method currentContext:()Lreactor/util/context/Context;
      19: invokestatic  #64                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      22: goto          71
      25: aload_2
      26: aload_1
      27: invokeinterface #65,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.add:(Ljava/lang/Object;)V
      32: aload_0
      33: getfield      #50                 // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      36: astore_3
      37: aload_3
      38: arraylength
      39: istore        4
      41: iconst_0
      42: istore        5
      44: iload         5
      46: iload         4
      48: if_icmpge     71
      51: aload_3
      52: iload         5
      54: aaload
      55: astore        6
      57: aload_2
      58: aload         6
      60: invokeinterface #42,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.replay:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      65: iinc          5, 1
      68: goto          44
      71: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #31                 // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
       4: astore_2
       5: aload_2
       6: invokeinterface #52,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.isDone:()Z
      11: ifeq          21
      14: aload_1
      15: invokestatic  #66                 // Method reactor/core/publisher/Operators.onErrorDroppedMulticast:(Ljava/lang/Throwable;)V
      18: goto          81
      21: aload_2
      22: aload_1
      23: invokeinterface #67,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.onError:(Ljava/lang/Throwable;)V
      28: getstatic     #32                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: aload_0
      32: getstatic     #53                 // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.TERMINATED:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      35: invokevirtual #68                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      38: checkcast     #69                 // class "[Lreactor/core/publisher/FluxReplay$ReplaySubscription;"
      41: astore_3
      42: aload_3
      43: astore        4
      45: aload         4
      47: arraylength
      48: istore        5
      50: iconst_0
      51: istore        6
      53: iload         6
      55: iload         5
      57: if_icmpge     81
      60: aload         4
      62: iload         6
      64: aaload
      65: astore        7
      67: aload_2
      68: aload         7
      70: invokeinterface #42,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.replay:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      75: iinc          6, 1
      78: goto          53
      81: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #31                 // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
       4: astore_1
       5: aload_1
       6: invokeinterface #52,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.isDone:()Z
      11: ifne          70
      14: aload_1
      15: invokeinterface #70,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.onComplete:()V
      20: getstatic     #32                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      23: aload_0
      24: getstatic     #53                 // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.TERMINATED:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      27: invokevirtual #68                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #69                 // class "[Lreactor/core/publisher/FluxReplay$ReplaySubscription;"
      33: astore_2
      34: aload_2
      35: astore_3
      36: aload_3
      37: arraylength
      38: istore        4
      40: iconst_0
      41: istore        5
      43: iload         5
      45: iload         4
      47: if_icmpge     70
      50: aload_3
      51: iload         5
      53: aaload
      54: astore        6
      56: aload_1
      57: aload         6
      59: invokeinterface #42,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.replay:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      64: iinc          5, 1
      67: goto          43
      70: return

  static {};
    Code:
       0: ldc           #10                 // class reactor/core/publisher/ReplayProcessor
       2: ldc           #69                 // class "[Lreactor/core/publisher/FluxReplay$ReplaySubscription;"
       4: ldc           #71                 // String subscribers
       6: invokestatic  #72                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #32                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
