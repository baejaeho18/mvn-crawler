Compiled from "FluxJust.java"
final class reactor.core.publisher.FluxJust$WeakScalarSubscription<T> implements reactor.core.Fuseable$QueueSubscription<T>, reactor.core.publisher.InnerProducer<T> {
  boolean terminado;

  final T value;

  final reactor.core.CoreSubscriber<? super T> actual;

  reactor.core.publisher.FluxJust$WeakScalarSubscription(T, reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field value:Ljava/lang/Object;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      14: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field terminado:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #4                  // Field terminado:Z
      13: aload_0
      14: getfield      #2                  // Field value:Ljava/lang/Object;
      17: ifnull        33
      20: aload_0
      21: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      24: aload_0
      25: getfield      #2                  // Field value:Ljava/lang/Object;
      28: invokeinterface #5,  2            // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      33: aload_0
      34: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      37: invokeinterface #6,  1            // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      42: return

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #4                  // Field terminado:Z
       5: return

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_1
       2: iand
       3: ifeq          8
       6: iconst_1
       7: ireturn
       8: iconst_0
       9: ireturn

  public T poll();
    Code:
       0: aload_0
       1: getfield      #4                  // Field terminado:Z
       4: ifne          17
       7: aload_0
       8: iconst_1
       9: putfield      #4                  // Field terminado:Z
      12: aload_0
      13: getfield      #2                  // Field value:Ljava/lang/Object;
      16: areturn
      17: aconst_null
      18: areturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #4                  // Field terminado:Z
       4: ireturn

  public int size();
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method isEmpty:()Z
       4: ifeq          11
       7: iconst_0
       8: goto          12
      11: iconst_1
      12: ireturn

  public void clear();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #4                  // Field terminado:Z
       5: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #9                  // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpeq     14
       7: aload_1
       8: getstatic     #10                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      11: if_acmpne     22
      14: aload_0
      15: getfield      #4                  // Field terminado:Z
      18: invokestatic  #11                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      21: areturn
      22: aload_0
      23: aload_1
      24: invokespecial #12                 // InterfaceMethod reactor/core/publisher/InnerProducer.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      27: areturn
}
