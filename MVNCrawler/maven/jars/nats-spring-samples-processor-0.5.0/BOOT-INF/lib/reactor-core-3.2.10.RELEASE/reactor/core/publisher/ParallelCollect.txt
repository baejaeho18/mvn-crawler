Compiled from "ParallelCollect.java"
final class reactor.core.publisher.ParallelCollect<T, C> extends reactor.core.publisher.ParallelFlux<C> implements reactor.core.Scannable, reactor.core.Fuseable {
  final reactor.core.publisher.ParallelFlux<? extends T> source;

  final java.util.function.Supplier<? extends C> initialCollection;

  final java.util.function.BiConsumer<? super C, ? super T> collector;

  reactor.core.publisher.ParallelCollect(reactor.core.publisher.ParallelFlux<? extends T>, java.util.function.Supplier<? extends C>, java.util.function.BiConsumer<? super C, ? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/ParallelFlux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field initialCollection:Ljava/util/function/Supplier;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field collector:Ljava/util/function/BiConsumer;
      19: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #5                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      11: areturn
      12: aload_1
      13: getstatic     #6                  // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #7                  // Method getPrefetch:()I
      23: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aconst_null
      28: areturn

  public int getPrefetch();
    Code:
       0: ldc           #10                 // int 2147483647
       2: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super C>[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #11                 // Method validate:([Lorg/reactivestreams/Subscriber;)Z
       5: ifne          9
       8: return
       9: aload_1
      10: arraylength
      11: istore_2
      12: iload_2
      13: anewarray     #12                 // class reactor/core/CoreSubscriber
      16: astore_3
      17: iconst_0
      18: istore        4
      20: iload         4
      22: iload_2
      23: if_icmpge     94
      26: aload_0
      27: getfield      #3                  // Field initialCollection:Ljava/util/function/Supplier;
      30: invokeinterface #13,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      35: ldc           #14                 // String The initialSupplier returned a null value
      37: invokestatic  #15                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      40: astore        5
      42: goto          67
      45: astore        6
      47: aload_0
      48: aload_1
      49: aload         6
      51: aload_1
      52: iload         4
      54: aaload
      55: invokeinterface #17,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      60: invokestatic  #18                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      63: invokevirtual #19                 // Method reportError:([Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      66: return
      67: aload_3
      68: iload         4
      70: new           #20                 // class reactor/core/publisher/ParallelCollect$ParallelCollectSubscriber
      73: dup
      74: aload_1
      75: iload         4
      77: aaload
      78: aload         5
      80: aload_0
      81: getfield      #4                  // Field collector:Ljava/util/function/BiConsumer;
      84: invokespecial #21                 // Method reactor/core/publisher/ParallelCollect$ParallelCollectSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/lang/Object;Ljava/util/function/BiConsumer;)V
      87: aastore
      88: iinc          4, 1
      91: goto          20
      94: aload_0
      95: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      98: aload_3
      99: invokevirtual #22                 // Method reactor/core/publisher/ParallelFlux.subscribe:([Lreactor/core/CoreSubscriber;)V
     102: return
    Exception table:
       from    to  target type
          26    42    45   Class java/lang/Throwable

  void reportError(org.reactivestreams.Subscriber<?>[], java.lang.Throwable);
    Code:
       0: aload_1
       1: astore_3
       2: aload_3
       3: arraylength
       4: istore        4
       6: iconst_0
       7: istore        5
       9: iload         5
      11: iload         4
      13: if_icmpge     34
      16: aload_3
      17: iload         5
      19: aaload
      20: astore        6
      22: aload         6
      24: aload_2
      25: invokestatic  #23                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      28: iinc          5, 1
      31: goto          9
      34: return

  public int parallelism();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #24                 // Method reactor/core/publisher/ParallelFlux.parallelism:()I
       7: ireturn
}
