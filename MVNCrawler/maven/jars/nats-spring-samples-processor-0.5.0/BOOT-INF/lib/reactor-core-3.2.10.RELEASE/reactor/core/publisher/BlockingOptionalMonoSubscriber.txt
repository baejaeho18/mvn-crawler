Compiled from "BlockingOptionalMonoSubscriber.java"
final class reactor.core.publisher.BlockingOptionalMonoSubscriber<T> extends java.util.concurrent.CountDownLatch implements reactor.core.publisher.InnerConsumer<T>, reactor.core.Disposable {
  T value;

  java.lang.Throwable error;

  org.reactivestreams.Subscription s;

  volatile boolean cancelled;

  reactor.core.publisher.BlockingOptionalMonoSubscriber();
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #1                  // Method java/util/concurrent/CountDownLatch."<init>":(I)V
       5: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:Ljava/lang/Object;
       4: ifnonnull     16
       7: aload_0
       8: aload_1
       9: putfield      #2                  // Field value:Ljava/lang/Object;
      12: aload_0
      13: invokevirtual #3                  // Method countDown:()V
      16: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:Ljava/lang/Object;
       4: ifnonnull     12
       7: aload_0
       8: aload_1
       9: putfield      #4                  // Field error:Ljava/lang/Throwable;
      12: aload_0
      13: invokevirtual #3                  // Method countDown:()V
      16: return

  public final void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       5: aload_0
       6: getfield      #6                  // Field cancelled:Z
       9: ifne          21
      12: aload_1
      13: ldc2_w        #8                  // long 9223372036854775807l
      16: invokeinterface #10,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      21: return

  public final void onComplete();
    Code:
       0: aload_0
       1: invokevirtual #3                  // Method countDown:()V
       4: return

  public final void dispose();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #6                  // Field cancelled:Z
       5: aload_0
       6: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       9: astore_1
      10: aload_1
      11: ifnull        25
      14: aload_0
      15: aconst_null
      16: putfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      19: aload_1
      20: invokeinterface #11,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      25: return

  final java.util.Optional<T> blockingGet();
    Code:
       0: invokestatic  #12                 // Method reactor/core/scheduler/Schedulers.isInNonBlockingThread:()Z
       3: ifeq          38
       6: new           #13                 // class java/lang/IllegalStateException
       9: dup
      10: new           #14                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #16                 // String blockOptional() is blocking, which is not supported in thread
      19: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: invokestatic  #18                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      25: invokevirtual #19                 // Method java/lang/Thread.getName:()Ljava/lang/String;
      28: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #21                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: aload_0
      39: invokevirtual #22                 // Method getCount:()J
      42: lconst_0
      43: lcmp
      44: ifeq          79
      47: aload_0
      48: invokevirtual #23                 // Method await:()V
      51: goto          79
      54: astore_1
      55: aload_0
      56: invokevirtual #25                 // Method dispose:()V
      59: aload_1
      60: invokestatic  #26                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      63: astore_2
      64: aload_2
      65: new           #27                 // class java/lang/Exception
      68: dup
      69: ldc           #28                 // String #blockOptional() has been interrupted
      71: invokespecial #29                 // Method java/lang/Exception."<init>":(Ljava/lang/String;)V
      74: invokevirtual #30                 // Method java/lang/RuntimeException.addSuppressed:(Ljava/lang/Throwable;)V
      77: aload_2
      78: athrow
      79: aload_0
      80: getfield      #4                  // Field error:Ljava/lang/Throwable;
      83: astore_1
      84: aload_1
      85: ifnull        108
      88: aload_1
      89: invokestatic  #26                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      92: astore_2
      93: aload_2
      94: new           #27                 // class java/lang/Exception
      97: dup
      98: ldc           #31                 // String #block terminated with an error
     100: invokespecial #29                 // Method java/lang/Exception."<init>":(Ljava/lang/String;)V
     103: invokevirtual #30                 // Method java/lang/RuntimeException.addSuppressed:(Ljava/lang/Throwable;)V
     106: aload_2
     107: athrow
     108: aload_0
     109: getfield      #2                  // Field value:Ljava/lang/Object;
     112: invokestatic  #32                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
     115: areturn
    Exception table:
       from    to  target type
          47    51    54   Class java/lang/InterruptedException

  final java.util.Optional<T> blockingGet(long, java.util.concurrent.TimeUnit);
    Code:
       0: invokestatic  #12                 // Method reactor/core/scheduler/Schedulers.isInNonBlockingThread:()Z
       3: ifeq          38
       6: new           #13                 // class java/lang/IllegalStateException
       9: dup
      10: new           #14                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #16                 // String blockOptional() is blocking, which is not supported in thread
      19: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: invokestatic  #18                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      25: invokevirtual #19                 // Method java/lang/Thread.getName:()Ljava/lang/String;
      28: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #21                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: aload_0
      39: invokevirtual #22                 // Method getCount:()J
      42: lconst_0
      43: lcmp
      44: ifeq          129
      47: aload_0
      48: lload_1
      49: aload_3
      50: invokevirtual #33                 // Method await:(JLjava/util/concurrent/TimeUnit;)Z
      53: ifne          96
      56: aload_0
      57: invokevirtual #25                 // Method dispose:()V
      60: new           #13                 // class java/lang/IllegalStateException
      63: dup
      64: new           #14                 // class java/lang/StringBuilder
      67: dup
      68: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      71: ldc           #34                 // String Timeout on blocking read for
      73: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      76: lload_1
      77: invokevirtual #35                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      80: ldc           #36                 // String
      82: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: aload_3
      86: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      89: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      92: invokespecial #21                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      95: athrow
      96: goto          129
      99: astore        4
     101: aload_0
     102: invokevirtual #25                 // Method dispose:()V
     105: aload         4
     107: invokestatic  #26                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     110: astore        5
     112: aload         5
     114: new           #27                 // class java/lang/Exception
     117: dup
     118: ldc           #38                 // String #blockOptional(timeout) has been interrupted
     120: invokespecial #29                 // Method java/lang/Exception."<init>":(Ljava/lang/String;)V
     123: invokevirtual #30                 // Method java/lang/RuntimeException.addSuppressed:(Ljava/lang/Throwable;)V
     126: aload         5
     128: athrow
     129: aload_0
     130: getfield      #4                  // Field error:Ljava/lang/Throwable;
     133: astore        4
     135: aload         4
     137: ifnull        164
     140: aload         4
     142: invokestatic  #26                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     145: astore        5
     147: aload         5
     149: new           #27                 // class java/lang/Exception
     152: dup
     153: ldc           #31                 // String #block terminated with an error
     155: invokespecial #29                 // Method java/lang/Exception."<init>":(Ljava/lang/String;)V
     158: invokevirtual #30                 // Method java/lang/RuntimeException.addSuppressed:(Ljava/lang/Throwable;)V
     161: aload         5
     163: athrow
     164: aload_0
     165: getfield      #2                  // Field value:Ljava/lang/Object;
     168: invokestatic  #32                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
     171: areturn
    Exception table:
       from    to  target type
          47    96    99   Class java/lang/InterruptedException

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #39                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     25
       7: aload_0
       8: invokevirtual #22                 // Method getCount:()J
      11: lconst_0
      12: lcmp
      13: ifne          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: invokestatic  #40                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      24: areturn
      25: aload_1
      26: getstatic     #41                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      29: if_acmpne     37
      32: aload_0
      33: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      36: areturn
      37: aload_1
      38: getstatic     #42                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      41: if_acmpne     52
      44: aload_0
      45: getfield      #6                  // Field cancelled:Z
      48: invokestatic  #40                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      51: areturn
      52: aload_1
      53: getstatic     #43                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      56: if_acmpne     64
      59: aload_0
      60: getfield      #4                  // Field error:Ljava/lang/Throwable;
      63: areturn
      64: aload_1
      65: getstatic     #44                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      68: if_acmpne     77
      71: ldc           #46                 // int 2147483647
      73: invokestatic  #47                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      76: areturn
      77: aconst_null
      78: areturn

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #6                  // Field cancelled:Z
       4: ifne          16
       7: aload_0
       8: invokevirtual #22                 // Method getCount:()J
      11: lconst_0
      12: lcmp
      13: ifne          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn
}
