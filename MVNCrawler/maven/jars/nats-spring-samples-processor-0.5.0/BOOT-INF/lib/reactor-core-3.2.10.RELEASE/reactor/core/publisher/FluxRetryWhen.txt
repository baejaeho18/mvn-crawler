Compiled from "FluxRetryWhen.java"
final class reactor.core.publisher.FluxRetryWhen<T> extends reactor.core.publisher.FluxOperator<T, T> {
  static final java.time.Duration MAX_BACKOFF;

  final java.util.function.Function<? super reactor.core.publisher.Flux<java.lang.Throwable>, ? extends org.reactivestreams.Publisher<?>> whenSourceFactory;

  reactor.core.publisher.FluxRetryWhen(reactor.core.publisher.Flux<? extends T>, java.util.function.Function<? super reactor.core.publisher.Flux<java.lang.Throwable>, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String whenSourceFactory
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/function/Function
      15: putfield      #5                  // Field whenSourceFactory:Ljava/util/function/Function;
      18: return

  static <T> void subscribe(reactor.core.CoreSubscriber<? super T>, java.util.function.Function<? super reactor.core.publisher.Flux<java.lang.Throwable>, ? extends org.reactivestreams.Publisher<?>>, org.reactivestreams.Publisher<? extends T>);
    Code:
       0: new           #6                  // class reactor/core/publisher/FluxRetryWhen$RetryWhenOtherSubscriber
       3: dup
       4: invokespecial #7                  // Method reactor/core/publisher/FluxRetryWhen$RetryWhenOtherSubscriber."<init>":()V
       7: astore_3
       8: aload_3
       9: getfield      #8                  // Field reactor/core/publisher/FluxRetryWhen$RetryWhenOtherSubscriber.completionSignal:Lreactor/core/publisher/DirectProcessor;
      12: invokestatic  #9                  // Method reactor/core/publisher/Operators.serialize:(Lreactor/core/CoreSubscriber;)Lreactor/core/CoreSubscriber;
      15: astore        4
      17: aload         4
      19: invokestatic  #10                 // Method reactor/core/publisher/Operators.emptySubscription:()Lorg/reactivestreams/Subscription;
      22: invokeinterface #11,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      27: aload_0
      28: invokestatic  #9                  // Method reactor/core/publisher/Operators.serialize:(Lreactor/core/CoreSubscriber;)Lreactor/core/CoreSubscriber;
      31: astore        5
      33: new           #12                 // class reactor/core/publisher/FluxRetryWhen$RetryWhenMainSubscriber
      36: dup
      37: aload         5
      39: aload         4
      41: aload_2
      42: invokespecial #13                 // Method reactor/core/publisher/FluxRetryWhen$RetryWhenMainSubscriber."<init>":(Lreactor/core/CoreSubscriber;Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V
      45: astore        6
      47: aload_3
      48: aload         6
      50: putfield      #14                 // Field reactor/core/publisher/FluxRetryWhen$RetryWhenOtherSubscriber.main:Lreactor/core/publisher/FluxRetryWhen$RetryWhenMainSubscriber;
      53: aload         5
      55: aload         6
      57: invokeinterface #15,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      62: aload_1
      63: aload_3
      64: invokeinterface #16,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      69: ldc           #17                 // String The whenSourceFactory returned a null Publisher
      71: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      74: checkcast     #18                 // class org/reactivestreams/Publisher
      77: astore        7
      79: goto          102
      82: astore        8
      84: aload_0
      85: aload         8
      87: aload_0
      88: invokeinterface #20,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      93: invokestatic  #21                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      96: invokeinterface #22,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     101: return
     102: aload         7
     104: aload_3
     105: invokeinterface #23,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     110: aload         6
     112: getfield      #24                 // Field reactor/core/publisher/FluxRetryWhen$RetryWhenMainSubscriber.cancelled:Z
     115: ifne          126
     118: aload_2
     119: aload         6
     121: invokeinterface #23,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     126: return
    Exception table:
       from    to  target type
          62    79    82   Class java/lang/Throwable

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #5                  // Field whenSourceFactory:Ljava/util/function/Function;
       5: aload_0
       6: getfield      #25                 // Field source:Lreactor/core/publisher/Flux;
       9: invokestatic  #26                 // Method subscribe:(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;Lorg/reactivestreams/Publisher;)V
      12: return

  static java.util.function.Function<reactor.core.publisher.Flux<java.lang.Throwable>, org.reactivestreams.Publisher<java.lang.Long>> randomExponentialBackoffFunction(long, java.time.Duration, java.time.Duration, double, reactor.core.scheduler.Scheduler);
    Code:
       0: dload         4
       2: dconst_0
       3: dcmpg
       4: iflt          14
       7: dload         4
       9: dconst_1
      10: dcmpl
      11: ifle          24
      14: new           #27                 // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #28                 // String jitterFactor must be between 0 and 1 (default 0.5)
      20: invokespecial #29                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_2
      25: ldc           #30                 // String firstBackoff is required
      27: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      30: pop
      31: aload_3
      32: ldc           #31                 // String maxBackoff is required
      34: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      37: pop
      38: aload         6
      40: ldc           #32                 // String backoffScheduler is required
      42: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      45: pop
      46: lload_0
      47: aload_2
      48: aload_3
      49: dload         4
      51: aload         6
      53: invokedynamic #33,  0             // InvokeDynamic #0:apply:(JLjava/time/Duration;Ljava/time/Duration;DLreactor/core/scheduler/Scheduler;)Ljava/util/function/Function;
      58: areturn

  private static org.reactivestreams.Publisher lambda$randomExponentialBackoffFunction$1(long, java.time.Duration, java.time.Duration, double, reactor.core.scheduler.Scheduler, reactor.core.publisher.Flux);
    Code:
       0: aload         7
       2: invokevirtual #34                 // Method reactor/core/publisher/Flux.index:()Lreactor/core/publisher/Flux;
       5: lload_0
       6: aload_2
       7: aload_3
       8: dload         4
      10: aload         6
      12: invokedynamic #35,  0             // InvokeDynamic #1:apply:(JLjava/time/Duration;Ljava/time/Duration;DLreactor/core/scheduler/Scheduler;)Ljava/util/function/Function;
      17: invokevirtual #36                 // Method reactor/core/publisher/Flux.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      20: areturn

  private static org.reactivestreams.Publisher lambda$null$0(long, java.time.Duration, java.time.Duration, double, reactor.core.scheduler.Scheduler, reactor.util.function.Tuple2);
    Code:
       0: aload         7
       2: invokevirtual #37                 // Method reactor/util/function/Tuple2.getT1:()Ljava/lang/Object;
       5: checkcast     #38                 // class java/lang/Long
       8: invokevirtual #39                 // Method java/lang/Long.longValue:()J
      11: lstore        8
      13: lload         8
      15: lload_0
      16: lcmp
      17: iflt          68
      20: new           #40                 // class java/lang/IllegalStateException
      23: dup
      24: new           #41                 // class java/lang/StringBuilder
      27: dup
      28: invokespecial #42                 // Method java/lang/StringBuilder."<init>":()V
      31: ldc           #43                 // String Retries exhausted:
      33: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: lload         8
      38: invokevirtual #45                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      41: ldc           #46                 // String /
      43: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: lload_0
      47: invokevirtual #45                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      50: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      53: aload         7
      55: invokevirtual #48                 // Method reactor/util/function/Tuple2.getT2:()Ljava/lang/Object;
      58: checkcast     #19                 // class java/lang/Throwable
      61: invokespecial #49                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      64: invokestatic  #50                 // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      67: areturn
      68: aload_2
      69: ldc2_w        #51                 // double 2.0d
      72: lload         8
      74: l2d
      75: invokestatic  #53                 // Method java/lang/Math.pow:(DD)D
      78: d2l
      79: invokevirtual #54                 // Method java/time/Duration.multipliedBy:(J)Ljava/time/Duration;
      82: astore        10
      84: aload         10
      86: aload_3
      87: invokevirtual #55                 // Method java/time/Duration.compareTo:(Ljava/time/Duration;)I
      90: ifle          96
      93: aload_3
      94: astore        10
      96: goto          104
      99: astore        11
     101: aload_3
     102: astore        10
     104: aload         10
     106: invokevirtual #57                 // Method java/time/Duration.isZero:()Z
     109: ifeq          121
     112: lload         8
     114: invokestatic  #58                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     117: invokestatic  #59                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
     120: areturn
     121: invokestatic  #60                 // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
     124: astore        11
     126: aload         10
     128: ldc2_w        #61                 // double 100.0d
     131: dload         4
     133: dmul
     134: d2l
     135: invokevirtual #54                 // Method java/time/Duration.multipliedBy:(J)Ljava/time/Duration;
     138: ldc2_w        #63                 // long 100l
     141: invokevirtual #65                 // Method java/time/Duration.dividedBy:(J)Ljava/time/Duration;
     144: invokevirtual #66                 // Method java/time/Duration.toMillis:()J
     147: lstore        12
     149: goto          165
     152: astore        14
     154: ldc2_w        #67                 // double 9.223372036854776E18d
     157: dload         4
     159: dmul
     160: invokestatic  #69                 // Method java/lang/Math.round:(D)J
     163: lstore        12
     165: aload_2
     166: aload         10
     168: invokevirtual #70                 // Method java/time/Duration.minus:(Ljava/time/Duration;)Ljava/time/Duration;
     171: invokevirtual #66                 // Method java/time/Duration.toMillis:()J
     174: lload         12
     176: lneg
     177: invokestatic  #71                 // Method java/lang/Math.max:(JJ)J
     180: lstore        14
     182: aload_3
     183: aload         10
     185: invokevirtual #70                 // Method java/time/Duration.minus:(Ljava/time/Duration;)Ljava/time/Duration;
     188: invokevirtual #66                 // Method java/time/Duration.toMillis:()J
     191: lload         12
     193: invokestatic  #72                 // Method java/lang/Math.min:(JJ)J
     196: lstore        16
     198: lload         16
     200: lload         14
     202: lcmp
     203: ifne          231
     206: lload         16
     208: lconst_0
     209: lcmp
     210: ifne          219
     213: lconst_0
     214: lstore        18
     216: goto          242
     219: aload         11
     221: lload         16
     223: invokevirtual #73                 // Method java/util/concurrent/ThreadLocalRandom.nextLong:(J)J
     226: lstore        18
     228: goto          242
     231: aload         11
     233: lload         14
     235: lload         16
     237: invokevirtual #74                 // Method java/util/concurrent/ThreadLocalRandom.nextLong:(JJ)J
     240: lstore        18
     242: aload         10
     244: lload         18
     246: invokevirtual #75                 // Method java/time/Duration.plusMillis:(J)Ljava/time/Duration;
     249: astore        20
     251: aload         20
     253: aload         6
     255: invokestatic  #76                 // Method reactor/core/publisher/Mono.delay:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
     258: areturn
    Exception table:
       from    to  target type
          68    96    99   Class java/lang/ArithmeticException
         126   149   152   Class java/lang/ArithmeticException

  static {};
    Code:
       0: ldc2_w        #77                 // long 9223372036854775807l
       3: invokestatic  #79                 // Method java/time/Duration.ofMillis:(J)Ljava/time/Duration;
       6: putstatic     #80                 // Field MAX_BACKOFF:Ljava/time/Duration;
       9: return
}
