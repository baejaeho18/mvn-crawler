Compiled from "FluxWindowPredicate.java"
final class reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain<T> implements reactor.core.Fuseable$QueueSubscription<reactor.core.publisher.Flux<T>>, reactor.core.publisher.InnerOperator<T, reactor.core.publisher.Flux<T>> {
  final reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>> actual;

  final reactor.util.context.Context ctx;

  final java.util.function.Supplier<? extends java.util.Queue<T>> groupQueueSupplier;

  final reactor.core.publisher.FluxBufferPredicate$Mode mode;

  final java.util.function.Predicate<? super T> predicate;

  final int prefetch;

  final java.util.Queue<reactor.core.publisher.Flux<T>> queue;

  reactor.core.publisher.FluxWindowPredicate$WindowFlux<T> window;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain> WIP;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain> REQUESTED;

  volatile boolean done;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain, java.lang.Throwable> ERROR;

  volatile int cancelled;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain> CANCELLED;

  volatile int windowCount;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain> WINDOW_COUNT;

  org.reactivestreams.Subscription s;

  volatile boolean outputFused;

  reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain(reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>>, java.util.Queue<reactor.core.publisher.Flux<T>>, java.util.function.Supplier<? extends java.util.Queue<T>>, int, java.util.function.Predicate<? super T>, reactor.core.publisher.FluxBufferPredicate$Mode);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_1
      11: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      16: putfield      #4                  // Field ctx:Lreactor/util/context/Context;
      19: aload_0
      20: aload_2
      21: putfield      #5                  // Field queue:Ljava/util/Queue;
      24: aload_0
      25: aload_3
      26: putfield      #6                  // Field groupQueueSupplier:Ljava/util/function/Supplier;
      29: aload_0
      30: iload         4
      32: putfield      #7                  // Field prefetch:I
      35: aload_0
      36: aload         5
      38: putfield      #8                  // Field predicate:Ljava/util/function/Predicate;
      41: aload_0
      42: aload         6
      44: putfield      #9                  // Field mode:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      47: getstatic     #10                 // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      50: aload_0
      51: iconst_2
      52: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.lazySet:(Ljava/lang/Object;I)V
      55: aload_0
      56: invokevirtual #12                 // Method initializeWindow:()V
      59: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #14                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          46
      11: aload_0
      12: aload_1
      13: putfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #15,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_0
      27: getfield      #16                 // Field cancelled:I
      30: ifne          46
      33: aload_1
      34: aload_0
      35: getfield      #7                  // Field prefetch:I
      38: invokestatic  #17                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      41: invokeinterface #18,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      46: return

  void initializeWindow();
    Code:
       0: new           #19                 // class reactor/core/publisher/FluxWindowPredicate$WindowFlux
       3: dup
       4: aload_0
       5: getfield      #6                  // Field groupQueueSupplier:Ljava/util/function/Supplier;
       8: invokeinterface #20,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      13: checkcast     #21                 // class java/util/Queue
      16: aload_0
      17: invokespecial #22                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux."<init>":(Ljava/util/Queue;Lreactor/core/publisher/FluxWindowPredicate$WindowPredicateMain;)V
      20: astore_1
      21: aload_0
      22: aload_1
      23: putfield      #23                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      26: return

  reactor.core.publisher.FluxWindowPredicate$WindowFlux<T> newWindowDeferred();
    Code:
       0: aload_0
       1: getfield      #16                 // Field cancelled:I
       4: ifne          43
       7: getstatic     #10                 // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      14: pop
      15: new           #19                 // class reactor/core/publisher/FluxWindowPredicate$WindowFlux
      18: dup
      19: aload_0
      20: getfield      #6                  // Field groupQueueSupplier:Ljava/util/function/Supplier;
      23: invokeinterface #20,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      28: checkcast     #21                 // class java/util/Queue
      31: aload_0
      32: invokespecial #22                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux."<init>":(Ljava/util/Queue;Lreactor/core/publisher/FluxWindowPredicate$WindowPredicateMain;)V
      35: astore_1
      36: aload_0
      37: aload_1
      38: putfield      #23                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      41: aload_1
      42: areturn
      43: aconst_null
      44: areturn

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #25                 // Field done:Z
       4: ifeq          16
       7: aload_1
       8: aload_0
       9: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      12: invokestatic  #26                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      15: return
      16: aload_0
      17: getfield      #23                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      20: astore_2
      21: aload_0
      22: getfield      #8                  // Field predicate:Ljava/util/function/Predicate;
      25: aload_1
      26: invokeinterface #27,  2           // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
      31: istore_3
      32: goto          56
      35: astore        4
      37: aload_0
      38: aload_0
      39: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      42: aload         4
      44: aload_1
      45: aload_0
      46: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      49: invokestatic  #29                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      52: invokevirtual #30                 // Method onError:(Ljava/lang/Throwable;)V
      55: return
      56: aload_0
      57: aload_2
      58: aload_1
      59: invokevirtual #31                 // Method handleDeferredWindow:(Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;Ljava/lang/Object;)Z
      62: ifne          66
      65: return
      66: aload_0
      67: invokevirtual #32                 // Method drain:()V
      70: aload_0
      71: getfield      #9                  // Field mode:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      74: getstatic     #33                 // Field reactor/core/publisher/FluxBufferPredicate$Mode.UNTIL:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      77: if_acmpne     101
      80: iload_3
      81: ifeq          101
      84: aload_2
      85: aload_1
      86: invokevirtual #34                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onNext:(Ljava/lang/Object;)V
      89: aload_2
      90: invokevirtual #35                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onComplete:()V
      93: aload_0
      94: invokevirtual #36                 // Method newWindowDeferred:()Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      97: pop
      98: goto          196
     101: aload_0
     102: getfield      #9                  // Field mode:Lreactor/core/publisher/FluxBufferPredicate$Mode;
     105: getstatic     #37                 // Field reactor/core/publisher/FluxBufferPredicate$Mode.UNTIL_CUT_BEFORE:Lreactor/core/publisher/FluxBufferPredicate$Mode;
     108: if_acmpne     147
     111: iload_3
     112: ifeq          147
     115: aload_2
     116: invokevirtual #35                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onComplete:()V
     119: aload_0
     120: invokevirtual #36                 // Method newWindowDeferred:()Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
     123: astore_2
     124: aload_2
     125: ifnull        196
     128: aload_2
     129: aload_1
     130: invokevirtual #34                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onNext:(Ljava/lang/Object;)V
     133: aload_0
     134: aload_2
     135: aload_1
     136: invokevirtual #31                 // Method handleDeferredWindow:(Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;Ljava/lang/Object;)Z
     139: pop
     140: aload_0
     141: invokevirtual #32                 // Method drain:()V
     144: goto          196
     147: aload_0
     148: getfield      #9                  // Field mode:Lreactor/core/publisher/FluxBufferPredicate$Mode;
     151: getstatic     #38                 // Field reactor/core/publisher/FluxBufferPredicate$Mode.WHILE:Lreactor/core/publisher/FluxBufferPredicate$Mode;
     154: if_acmpne     191
     157: iload_3
     158: ifne          191
     161: aload_2
     162: invokevirtual #35                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onComplete:()V
     165: aload_0
     166: invokevirtual #36                 // Method newWindowDeferred:()Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
     169: pop
     170: aload_1
     171: aload_0
     172: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     175: invokestatic  #39                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
     178: aload_0
     179: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
     182: lconst_1
     183: invokeinterface #18,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     188: goto          196
     191: aload_2
     192: aload_1
     193: invokevirtual #34                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onNext:(Ljava/lang/Object;)V
     196: return
    Exception table:
       from    to  target type
          21    32    35   Class java/lang/Throwable

  boolean handleDeferredWindow(reactor.core.publisher.FluxWindowPredicate$WindowFlux<T>, T);
    Code:
       0: aload_1
       1: ifnull        49
       4: aload_1
       5: getfield      #40                 // Field reactor/core/publisher/FluxWindowPredicate$WindowFlux.deferred:Z
       8: ifeq          49
      11: aload_1
      12: iconst_0
      13: putfield      #40                 // Field reactor/core/publisher/FluxWindowPredicate$WindowFlux.deferred:Z
      16: aload_0
      17: getfield      #5                  // Field queue:Ljava/util/Queue;
      20: aload_1
      21: invokeinterface #41,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      26: ifne          49
      29: aload_0
      30: aload_0
      31: ldc           #43                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      33: invokestatic  #44                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      36: aload_2
      37: aload_0
      38: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      41: invokestatic  #29                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      44: invokevirtual #30                 // Method onError:(Ljava/lang/Throwable;)V
      47: iconst_0
      48: ireturn
      49: iconst_1
      50: ireturn

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #45                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #46                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          23
      11: aload_0
      12: iconst_1
      13: putfield      #25                 // Field done:Z
      16: aload_0
      17: invokevirtual #32                 // Method drain:()V
      20: goto          31
      23: aload_1
      24: aload_0
      25: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      28: invokestatic  #47                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      31: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #25                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #23                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      12: astore_1
      13: aload_1
      14: ifnull        21
      17: aload_1
      18: invokevirtual #35                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onComplete:()V
      21: aload_0
      22: aconst_null
      23: putfield      #23                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      26: aload_0
      27: iconst_1
      28: putfield      #25                 // Field done:Z
      31: getstatic     #10                 // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      34: aload_0
      35: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      38: pop
      39: aload_0
      40: invokevirtual #32                 // Method drain:()V
      43: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #49                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #50                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     36
      19: aload_0
      20: getfield      #16                 // Field cancelled:I
      23: iconst_1
      24: if_icmpne     31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: invokestatic  #51                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      35: areturn
      36: aload_1
      37: getstatic     #52                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      40: if_acmpne     51
      43: aload_0
      44: getfield      #7                  // Field prefetch:I
      47: invokestatic  #53                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      50: areturn
      51: aload_1
      52: getstatic     #54                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      55: if_acmpne     66
      58: aload_0
      59: getfield      #25                 // Field done:Z
      62: invokestatic  #51                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      65: areturn
      66: aload_1
      67: getstatic     #55                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      70: if_acmpne     86
      73: aload_0
      74: getfield      #5                  // Field queue:Ljava/util/Queue;
      77: invokeinterface #56,  1           // InterfaceMethod java/util/Queue.size:()I
      82: invokestatic  #53                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      85: areturn
      86: aload_1
      87: getstatic     #57                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      90: if_acmpne     98
      93: aload_0
      94: getfield      #58                 // Field error:Ljava/lang/Throwable;
      97: areturn
      98: aload_1
      99: getstatic     #59                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
     102: if_acmpne     113
     105: aload_0
     106: getfield      #60                 // Field requested:J
     109: invokestatic  #61                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     112: areturn
     113: aload_0
     114: aload_1
     115: invokespecial #62                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     118: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #23                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
       4: ifnonnull     13
       7: invokestatic  #63                 // InterfaceMethod java/util/stream/Stream.empty:()Ljava/util/stream/Stream;
      10: goto          20
      13: aload_0
      14: getfield      #23                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      17: invokestatic  #64                 // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
      20: areturn

  public reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  void signalAsyncError();
    Code:
       0: getstatic     #45                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #65                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
       7: astore_1
       8: aload_0
       9: iconst_0
      10: putfield      #66                 // Field windowCount:I
      13: aload_0
      14: getfield      #23                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      17: astore_2
      18: aload_2
      19: ifnull        27
      22: aload_2
      23: aload_1
      24: invokevirtual #67                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onError:(Ljava/lang/Throwable;)V
      27: aload_0
      28: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      31: aload_1
      32: invokeinterface #68,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      37: aload_0
      38: aconst_null
      39: putfield      #23                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      42: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #69                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          20
       7: getstatic     #70                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #71                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #32                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: getstatic     #72                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #73                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          161
      12: getstatic     #10                 // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      15: aload_0
      16: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      19: ifne          34
      22: aload_0
      23: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      26: invokeinterface #74,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      31: goto          191
      34: aload_0
      35: getfield      #75                 // Field outputFused:Z
      38: ifne          191
      41: getstatic     #76                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      44: aload_0
      45: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      48: ifne          191
      51: aload_0
      52: getfield      #23                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      55: astore_2
      56: aload_0
      57: getfield      #5                  // Field queue:Ljava/util/Queue;
      60: invokeinterface #77,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      65: checkcast     #78                 // class reactor/core/publisher/Flux
      68: dup
      69: astore_1
      70: ifnull        83
      73: aload_1
      74: checkcast     #19                 // class reactor/core/publisher/FluxWindowPredicate$WindowFlux
      77: invokevirtual #79                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.cancel:()V
      80: goto          56
      83: aload_2
      84: ifnull        98
      87: aload_2
      88: getfield      #40                 // Field reactor/core/publisher/FluxWindowPredicate$WindowFlux.deferred:Z
      91: ifeq          98
      94: aload_2
      95: invokevirtual #79                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.cancel:()V
      98: getstatic     #76                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     101: aload_0
     102: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     105: ifne          146
     108: aload_0
     109: getfield      #25                 // Field done:Z
     112: ifne          137
     115: getstatic     #10                 // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     118: aload_0
     119: invokevirtual #80                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
     122: ifne          137
     125: aload_0
     126: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
     129: invokeinterface #74,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     134: goto          145
     137: getstatic     #72                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     140: aload_0
     141: iconst_2
     142: invokevirtual #81                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.set:(Ljava/lang/Object;I)V
     145: return
     146: getstatic     #72                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     149: aload_0
     150: iconst_2
     151: invokevirtual #81                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.set:(Ljava/lang/Object;I)V
     154: aload_0
     155: invokevirtual #82                 // Method drainLoop:()V
     158: goto          191
     161: getstatic     #72                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     164: aload_0
     165: invokevirtual #80                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
     168: iconst_2
     169: if_icmpne     191
     172: getstatic     #10                 // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     175: aload_0
     176: invokevirtual #80                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
     179: ifne          191
     182: aload_0
     183: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
     186: invokeinterface #74,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     191: return

  void groupTerminated();
    Code:
       0: aload_0
       1: getfield      #66                 // Field windowCount:I
       4: ifne          8
       7: return
       8: aload_0
       9: aconst_null
      10: putfield      #23                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      13: getstatic     #10                 // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      16: aload_0
      17: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      20: ifne          32
      23: aload_0
      24: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      27: invokeinterface #74,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      32: return

  void drain();
    Code:
       0: getstatic     #76                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #75                 // Field outputFused:Z
      15: ifeq          25
      18: aload_0
      19: invokevirtual #83                 // Method drainFused:()V
      22: goto          29
      25: aload_0
      26: invokevirtual #82                 // Method drainLoop:()V
      29: return

  void drainFused();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       6: astore_2
       7: aload_0
       8: getfield      #5                  // Field queue:Ljava/util/Queue;
      11: astore_3
      12: aload_0
      13: getfield      #16                 // Field cancelled:I
      16: ifeq          26
      19: aload_3
      20: invokeinterface #84,  1           // InterfaceMethod java/util/Queue.clear:()V
      25: return
      26: aload_0
      27: getfield      #25                 // Field done:Z
      30: istore        4
      32: aload_2
      33: aconst_null
      34: invokeinterface #85,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      39: iload         4
      41: ifeq          69
      44: aload_0
      45: getfield      #58                 // Field error:Ljava/lang/Throwable;
      48: astore        5
      50: aload         5
      52: ifnull        62
      55: aload_0
      56: invokevirtual #86                 // Method signalAsyncError:()V
      59: goto          68
      62: aload_2
      63: invokeinterface #87,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      68: return
      69: getstatic     #76                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      72: aload_0
      73: iload_1
      74: ineg
      75: invokevirtual #88                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
      78: istore_1
      79: iload_1
      80: ifne          86
      83: goto          89
      86: goto          12
      89: return

  void drainLoop();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       6: astore_2
       7: aload_0
       8: getfield      #5                  // Field queue:Ljava/util/Queue;
      11: astore_3
      12: aload_0
      13: getfield      #60                 // Field requested:J
      16: lstore        4
      18: lconst_0
      19: lstore        6
      21: lload         6
      23: lload         4
      25: lcmp
      26: ifeq          97
      29: aload_0
      30: getfield      #25                 // Field done:Z
      33: istore        8
      35: aload_3
      36: invokeinterface #77,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      41: checkcast     #78                 // class reactor/core/publisher/Flux
      44: astore        9
      46: aload         9
      48: ifnonnull     55
      51: iconst_1
      52: goto          56
      55: iconst_0
      56: istore        10
      58: aload_0
      59: iload         8
      61: iload         10
      63: aload_2
      64: aload_3
      65: invokevirtual #89                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
      68: ifeq          72
      71: return
      72: iload         10
      74: ifeq          80
      77: goto          97
      80: aload_2
      81: aload         9
      83: invokeinterface #85,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      88: lload         6
      90: lconst_1
      91: ladd
      92: lstore        6
      94: goto          21
      97: lload         6
      99: lload         4
     101: lcmp
     102: ifne          125
     105: aload_0
     106: aload_0
     107: getfield      #25                 // Field done:Z
     110: aload_3
     111: invokeinterface #90,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     116: aload_2
     117: aload_3
     118: invokevirtual #89                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
     121: ifeq          125
     124: return
     125: lload         6
     127: lconst_0
     128: lcmp
     129: ifeq          163
     132: aload_0
     133: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
     136: lload         6
     138: invokeinterface #18,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     143: lload         4
     145: ldc2_w        #92                 // long 9223372036854775807l
     148: lcmp
     149: ifeq          163
     152: getstatic     #70                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     155: aload_0
     156: lload         6
     158: lneg
     159: invokevirtual #94                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
     162: pop2
     163: getstatic     #76                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     166: aload_0
     167: iload_1
     168: ineg
     169: invokevirtual #88                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     172: istore_1
     173: iload_1
     174: ifne          180
     177: goto          183
     180: goto          12
     183: return

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>, java.util.Queue<reactor.core.publisher.Flux<T>>);
    Code:
       0: aload_0
       1: getfield      #16                 // Field cancelled:I
       4: ifeq          16
       7: aload         4
       9: invokeinterface #84,  1           // InterfaceMethod java/util/Queue.clear:()V
      14: iconst_1
      15: ireturn
      16: iload_1
      17: ifeq          66
      20: aload_0
      21: getfield      #58                 // Field error:Ljava/lang/Throwable;
      24: astore        5
      26: aload         5
      28: ifnull        54
      31: aload         5
      33: getstatic     #95                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      36: if_acmpeq     54
      39: aload_0
      40: getfield      #5                  // Field queue:Ljava/util/Queue;
      43: invokeinterface #84,  1           // InterfaceMethod java/util/Queue.clear:()V
      48: aload_0
      49: invokevirtual #86                 // Method signalAsyncError:()V
      52: iconst_1
      53: ireturn
      54: iload_2
      55: ifeq          66
      58: aload_3
      59: invokeinterface #87,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      64: iconst_1
      65: ireturn
      66: iconst_0
      67: ireturn

  public reactor.core.publisher.Flux<T> poll();
    Code:
       0: aload_0
       1: getfield      #5                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #77,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
       9: checkcast     #78                 // class reactor/core/publisher/Flux
      12: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #5                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #56,  1           // InterfaceMethod java/util/Queue.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #5                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #90,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
       9: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #5                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #84,  1           // InterfaceMethod java/util/Queue.clear:()V
       9: return

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_2
       2: iand
       3: ifeq          13
       6: aload_0
       7: iconst_1
       8: putfield      #75                 // Field outputFused:Z
      11: iconst_2
      12: ireturn
      13: iconst_0
      14: ireturn

  public java.lang.Object poll();
    Code:
       0: aload_0
       1: invokevirtual #97                 // Method poll:()Lreactor/core/publisher/Flux;
       4: areturn

  static {};
    Code:
       0: ldc           #98                 // class reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain
       2: ldc           #99                 // String wip
       4: invokestatic  #100                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #76                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #98                 // class reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain
      12: ldc           #101                // String requested
      14: invokestatic  #102                // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      17: putstatic     #70                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      20: ldc           #98                 // class reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain
      22: ldc           #28                 // class java/lang/Throwable
      24: ldc           #103                // String error
      26: invokestatic  #104                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      29: putstatic     #45                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      32: ldc           #98                 // class reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain
      34: ldc           #105                // String cancelled
      36: invokestatic  #100                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      39: putstatic     #72                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      42: ldc           #98                 // class reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain
      44: ldc           #106                // String windowCount
      46: invokestatic  #100                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      49: putstatic     #10                 // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      52: return
}
