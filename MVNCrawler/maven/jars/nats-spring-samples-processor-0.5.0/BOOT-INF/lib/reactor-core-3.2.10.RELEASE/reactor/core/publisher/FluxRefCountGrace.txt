Compiled from "FluxRefCountGrace.java"
final class reactor.core.publisher.FluxRefCountGrace<T> extends reactor.core.publisher.Flux<T> implements reactor.core.Scannable, reactor.core.Fuseable {
  final reactor.core.publisher.ConnectableFlux<T> source;

  final int n;

  final java.time.Duration gracePeriod;

  final reactor.core.scheduler.Scheduler scheduler;

  reactor.core.publisher.FluxRefCountGrace$RefConnection connection;

  reactor.core.publisher.FluxRefCountGrace(reactor.core.publisher.ConnectableFlux<T>, int, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field n:I
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field gracePeriod:Ljava/time/Duration;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      25: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
       4: invokevirtual #6                  // Method reactor/core/publisher/ConnectableFlux.getPrefetch:()I
       7: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #7                  // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #8                  // Method getPrefetch:()I
      11: invokestatic  #9                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: areturn
      15: aload_1
      16: getstatic     #10                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
      26: areturn
      27: aconst_null
      28: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: dup
       4: astore        4
       6: monitorenter
       7: aload_0
       8: getfield      #11                 // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      11: astore_2
      12: aload_2
      13: ifnull        23
      16: aload_2
      17: getfield      #12                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.terminated:Z
      20: ifeq          37
      23: new           #13                 // class reactor/core/publisher/FluxRefCountGrace$RefConnection
      26: dup
      27: aload_0
      28: invokespecial #14                 // Method reactor/core/publisher/FluxRefCountGrace$RefConnection."<init>":(Lreactor/core/publisher/FluxRefCountGrace;)V
      31: astore_2
      32: aload_0
      33: aload_2
      34: putfield      #11                 // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      37: aload_2
      38: getfield      #15                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.subscriberCount:J
      41: lstore        5
      43: lload         5
      45: lconst_0
      46: lcmp
      47: ifne          66
      50: aload_2
      51: getfield      #16                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.timer:Lreactor/core/Disposable;
      54: ifnull        66
      57: aload_2
      58: getfield      #16                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.timer:Lreactor/core/Disposable;
      61: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      66: aload_2
      67: lload         5
      69: lconst_1
      70: ladd
      71: putfield      #15                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.subscriberCount:J
      74: aload_2
      75: getfield      #18                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.connected:Z
      78: ifne          101
      81: lload         5
      83: lconst_1
      84: ladd
      85: aload_0
      86: getfield      #3                  // Field n:I
      89: i2l
      90: lcmp
      91: ifne          101
      94: iconst_1
      95: istore_3
      96: aload_2
      97: iconst_1
      98: putfield      #18                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.connected:Z
     101: aload         4
     103: monitorexit
     104: goto          115
     107: astore        7
     109: aload         4
     111: monitorexit
     112: aload         7
     114: athrow
     115: aload_0
     116: getfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
     119: new           #19                 // class reactor/core/publisher/FluxRefCountGrace$RefCountInner
     122: dup
     123: aload_1
     124: aload_0
     125: aload_2
     126: invokespecial #20                 // Method reactor/core/publisher/FluxRefCountGrace$RefCountInner."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxRefCountGrace;Lreactor/core/publisher/FluxRefCountGrace$RefConnection;)V
     129: invokevirtual #21                 // Method reactor/core/publisher/ConnectableFlux.subscribe:(Lreactor/core/CoreSubscriber;)V
     132: iload_3
     133: ifeq          144
     136: aload_0
     137: getfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
     140: aload_2
     141: invokevirtual #22                 // Method reactor/core/publisher/ConnectableFlux.connect:(Ljava/util/function/Consumer;)V
     144: return
    Exception table:
       from    to  target type
           7   104   107   any
         107   112   107   any

  void cancel(reactor.core.publisher.FluxRefCountGrace$RefConnection);
    Code:
       0: iconst_0
       1: istore_2
       2: aconst_null
       3: astore_3
       4: aconst_null
       5: astore        4
       7: aload_0
       8: dup
       9: astore        5
      11: monitorenter
      12: aload_1
      13: getfield      #12                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.terminated:Z
      16: ifeq          23
      19: aload         5
      21: monitorexit
      22: return
      23: aload_1
      24: getfield      #15                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.subscriberCount:J
      27: lconst_1
      28: lsub
      29: lstore        6
      31: aload_1
      32: lload         6
      34: putfield      #15                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.subscriberCount:J
      37: lload         6
      39: lconst_0
      40: lcmp
      41: ifne          51
      44: aload_1
      45: getfield      #18                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.connected:Z
      48: ifne          55
      51: aload         5
      53: monitorexit
      54: return
      55: aload_0
      56: getfield      #4                  // Field gracePeriod:Ljava/time/Duration;
      59: invokevirtual #23                 // Method java/time/Duration.isZero:()Z
      62: ifne          81
      65: invokestatic  #24                 // Method reactor/core/Disposables.swap:()Lreactor/core/Disposable$Swap;
      68: astore        4
      70: aload_1
      71: aload         4
      73: putfield      #16                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.timer:Lreactor/core/Disposable;
      76: iconst_1
      77: istore_2
      78: goto          108
      81: aload_1
      82: aload_0
      83: getfield      #11                 // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      86: if_acmpne     108
      89: aload_0
      90: aconst_null
      91: putfield      #11                 // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      94: getstatic     #25                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.SOURCE_DISCONNECTOR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      97: aload_1
      98: invokestatic  #26                 // Method reactor/core/Disposables.disposed:()Lreactor/core/Disposable;
     101: invokevirtual #27                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     104: checkcast     #28                 // class reactor/core/Disposable
     107: astore_3
     108: aload         5
     110: monitorexit
     111: goto          122
     114: astore        8
     116: aload         5
     118: monitorexit
     119: aload         8
     121: athrow
     122: iload_2
     123: ifeq          157
     126: aload         4
     128: aload_0
     129: getfield      #5                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
     132: aload_1
     133: aload_0
     134: getfield      #4                  // Field gracePeriod:Ljava/time/Duration;
     137: invokevirtual #29                 // Method java/time/Duration.toMillis:()J
     140: getstatic     #30                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     143: invokeinterface #31,  5           // InterfaceMethod reactor/core/scheduler/Scheduler.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
     148: invokeinterface #32,  2           // InterfaceMethod reactor/core/Disposable$Swap.replace:(Lreactor/core/Disposable;)Z
     153: pop
     154: goto          167
     157: aload_3
     158: ifnull        167
     161: aload_3
     162: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
     167: return
    Exception table:
       from    to  target type
          12    22   114   any
          23    54   114   any
          55   111   114   any
         114   119   114   any

  void terminated(reactor.core.publisher.FluxRefCountGrace$RefConnection);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_1
       5: getfield      #12                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.terminated:Z
       8: ifne          21
      11: aload_1
      12: iconst_1
      13: putfield      #12                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.terminated:Z
      16: aload_0
      17: aconst_null
      18: putfield      #11                 // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      21: aload_2
      22: monitorexit
      23: goto          31
      26: astore_3
      27: aload_2
      28: monitorexit
      29: aload_3
      30: athrow
      31: return
    Exception table:
       from    to  target type
           4    23    26   any
          26    29    26   any

  void timeout(reactor.core.publisher.FluxRefCountGrace$RefConnection);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: dup
       4: astore_3
       5: monitorenter
       6: aload_1
       7: getfield      #15                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.subscriberCount:J
      10: lconst_0
      11: lcmp
      12: ifne          42
      15: aload_1
      16: aload_0
      17: getfield      #11                 // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      20: if_acmpne     42
      23: aload_0
      24: aconst_null
      25: putfield      #11                 // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      28: getstatic     #25                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.SOURCE_DISCONNECTOR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: aload_1
      32: invokestatic  #26                 // Method reactor/core/Disposables.disposed:()Lreactor/core/Disposable;
      35: invokevirtual #27                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      38: checkcast     #28                 // class reactor/core/Disposable
      41: astore_2
      42: aload_3
      43: monitorexit
      44: goto          54
      47: astore        4
      49: aload_3
      50: monitorexit
      51: aload         4
      53: athrow
      54: aload_2
      55: ifnull        64
      58: aload_2
      59: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      64: return
    Exception table:
       from    to  target type
           6    44    47   any
          47    51    47   any
}
