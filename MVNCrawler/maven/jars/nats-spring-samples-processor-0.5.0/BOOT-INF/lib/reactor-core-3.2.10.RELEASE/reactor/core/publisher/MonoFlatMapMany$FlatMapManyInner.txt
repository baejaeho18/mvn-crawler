Compiled from "MonoFlatMapMany.java"
final class reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner<R> implements reactor.core.publisher.InnerConsumer<R> {
  final reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain<?, R> parent;

  final reactor.core.CoreSubscriber<? super R> actual;

  reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner(reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain<?, R>, reactor.core.CoreSubscriber<? super R>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/MonoFlatMapMany$FlatMapManyMain;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      14: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #4,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
       9: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #5                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoFlatMapMany$FlatMapManyMain;
      11: getfield      #6                  // Field reactor/core/publisher/MonoFlatMapMany$FlatMapManyMain.inner:Lorg/reactivestreams/Subscription;
      14: areturn
      15: aload_1
      16: getstatic     #7                  // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoFlatMapMany$FlatMapManyMain;
      26: areturn
      27: aload_1
      28: getstatic     #8                  // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      31: if_acmpne     45
      34: aload_0
      35: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoFlatMapMany$FlatMapManyMain;
      38: getfield      #9                  // Field reactor/core/publisher/MonoFlatMapMany$FlatMapManyMain.requested:J
      41: invokestatic  #10                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      44: areturn
      45: aconst_null
      46: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoFlatMapMany$FlatMapManyMain;
       4: aload_1
       5: invokevirtual #11                 // Method reactor/core/publisher/MonoFlatMapMany$FlatMapManyMain.onSubscribeInner:(Lorg/reactivestreams/Subscription;)V
       8: return

  public void onNext(R);
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      10: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #13,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      10: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #14,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
       9: return
}
