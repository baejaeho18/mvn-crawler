Compiled from "FluxGroupJoin.java"
final class reactor.core.publisher.FluxGroupJoin$LeftRightEndSubscriber implements reactor.core.publisher.InnerConsumer<java.lang.Object>, reactor.core.Disposable {
  final reactor.core.publisher.FluxGroupJoin$JoinSupport<?> parent;

  final boolean isLeft;

  final int index;

  volatile org.reactivestreams.Subscription subscription;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxGroupJoin$LeftRightEndSubscriber, org.reactivestreams.Subscription> SUBSCRIPTION;

  reactor.core.publisher.FluxGroupJoin$LeftRightEndSubscriber(reactor.core.publisher.FluxGroupJoin$JoinSupport<?>, boolean, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/FluxGroupJoin$JoinSupport;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field isLeft:Z
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field index:I
      19: return

  public void dispose();
    Code:
       0: getstatic     #5                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #6                  // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #7                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #8                  // Field subscription:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #9                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #10                 // Method isDisposed:()Z
      23: invokestatic  #11                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aconst_null
      28: areturn

  public boolean isDisposed();
    Code:
       0: invokestatic  #12                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       3: aload_0
       4: getfield      #8                  // Field subscription:Lorg/reactivestreams/Subscription;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #5                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #13                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          20
      11: aload_1
      12: ldc2_w        #15                 // long 9223372036854775807l
      15: invokeinterface #17,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      20: return

  public void onNext(java.lang.Object);
    Code:
       0: getstatic     #5                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #6                  // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: ifeq          24
      10: aload_0
      11: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxGroupJoin$JoinSupport;
      14: aload_0
      15: getfield      #3                  // Field isLeft:Z
      18: aload_0
      19: invokeinterface #18,  3           // InterfaceMethod reactor/core/publisher/FluxGroupJoin$JoinSupport.innerClose:(ZLreactor/core/publisher/FluxGroupJoin$LeftRightEndSubscriber;)V
      24: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxGroupJoin$JoinSupport;
       4: aload_1
       5: invokeinterface #19,  2           // InterfaceMethod reactor/core/publisher/FluxGroupJoin$JoinSupport.innerError:(Ljava/lang/Throwable;)V
      10: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxGroupJoin$JoinSupport;
       4: aload_0
       5: getfield      #3                  // Field isLeft:Z
       8: aload_0
       9: invokeinterface #18,  3           // InterfaceMethod reactor/core/publisher/FluxGroupJoin$JoinSupport.innerClose:(ZLreactor/core/publisher/FluxGroupJoin$LeftRightEndSubscriber;)V
      14: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxGroupJoin$JoinSupport;
       4: invokeinterface #20,  1           // InterfaceMethod reactor/core/publisher/FluxGroupJoin$JoinSupport.actual:()Lreactor/core/CoreSubscriber;
       9: invokeinterface #21,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      14: areturn

  static {};
    Code:
       0: ldc           #22                 // class reactor/core/publisher/FluxGroupJoin$LeftRightEndSubscriber
       2: ldc           #23                 // class org/reactivestreams/Subscription
       4: ldc           #24                 // String subscription
       6: invokestatic  #25                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #5                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
