Compiled from "ParallelMergeSequential.java"
final class reactor.core.publisher.ParallelMergeSequential$MergeSequentialInner<T> implements reactor.core.publisher.InnerConsumer<T> {
  final reactor.core.publisher.ParallelMergeSequential$MergeSequentialMain<T> parent;

  final int prefetch;

  final int limit;

  long produced;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.ParallelMergeSequential$MergeSequentialInner, org.reactivestreams.Subscription> S;

  volatile java.util.Queue<T> queue;

  volatile boolean done;

  reactor.core.publisher.ParallelMergeSequential$MergeSequentialInner(reactor.core.publisher.ParallelMergeSequential$MergeSequentialMain<T>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/ParallelMergeSequential$MergeSequentialMain;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field prefetch:I
      14: aload_0
      15: iload_2
      16: invokestatic  #4                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      19: putfield      #5                  // Field limit:I
      22: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #6                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     26
       7: aload_0
       8: getfield      #7                  // Field s:Lorg/reactivestreams/Subscription;
      11: invokestatic  #8                  // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      14: if_acmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: invokestatic  #9                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      25: areturn
      26: aload_1
      27: getstatic     #10                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      30: if_acmpne     38
      33: aload_0
      34: getfield      #7                  // Field s:Lorg/reactivestreams/Subscription;
      37: areturn
      38: aload_1
      39: getstatic     #11                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      42: if_acmpne     50
      45: aload_0
      46: getfield      #2                  // Field parent:Lreactor/core/publisher/ParallelMergeSequential$MergeSequentialMain;
      49: areturn
      50: aload_1
      51: getstatic     #12                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      54: if_acmpne     65
      57: aload_0
      58: getfield      #3                  // Field prefetch:I
      61: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      64: areturn
      65: aload_1
      66: getstatic     #14                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      69: if_acmpne     96
      72: aload_0
      73: getfield      #15                 // Field queue:Ljava/util/Queue;
      76: ifnull        91
      79: aload_0
      80: getfield      #15                 // Field queue:Ljava/util/Queue;
      83: invokeinterface #16,  1           // InterfaceMethod java/util/Queue.size:()I
      88: goto          92
      91: iconst_0
      92: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      95: areturn
      96: aload_1
      97: getstatic     #17                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
     100: if_acmpne     111
     103: aload_0
     104: getfield      #18                 // Field done:Z
     107: invokestatic  #9                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     110: areturn
     111: aconst_null
     112: areturn

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/ParallelMergeSequential$MergeSequentialMain;
       4: getfield      #19                 // Field reactor/core/publisher/ParallelMergeSequential$MergeSequentialMain.actual:Lreactor/core/CoreSubscriber;
       7: invokeinterface #20,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      12: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #21                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #22                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          24
      11: aload_1
      12: aload_0
      13: getfield      #3                  // Field prefetch:I
      16: invokestatic  #23                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      19: invokeinterface #24,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      24: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/ParallelMergeSequential$MergeSequentialMain;
       4: aload_0
       5: aload_1
       6: invokevirtual #25                 // Method reactor/core/publisher/ParallelMergeSequential$MergeSequentialMain.onNext:(Lreactor/core/publisher/ParallelMergeSequential$MergeSequentialInner;Ljava/lang/Object;)V
       9: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/ParallelMergeSequential$MergeSequentialMain;
       4: aload_1
       5: invokevirtual #26                 // Method reactor/core/publisher/ParallelMergeSequential$MergeSequentialMain.onError:(Ljava/lang/Throwable;)V
       8: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/ParallelMergeSequential$MergeSequentialMain;
       4: invokevirtual #27                 // Method reactor/core/publisher/ParallelMergeSequential$MergeSequentialMain.onComplete:()V
       7: return

  void requestOne();
    Code:
       0: aload_0
       1: getfield      #28                 // Field produced:J
       4: lconst_1
       5: ladd
       6: lstore_1
       7: lload_1
       8: aload_0
       9: getfield      #5                  // Field limit:I
      12: i2l
      13: lcmp
      14: ifne          35
      17: aload_0
      18: lconst_0
      19: putfield      #28                 // Field produced:J
      22: aload_0
      23: getfield      #7                  // Field s:Lorg/reactivestreams/Subscription;
      26: lload_1
      27: invokeinterface #24,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      32: goto          40
      35: aload_0
      36: lload_1
      37: putfield      #28                 // Field produced:J
      40: return

  public void cancel();
    Code:
       0: getstatic     #21                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #29                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  java.util.Queue<T> getQueue(java.util.function.Supplier<java.util.Queue<T>>);
    Code:
       0: aload_0
       1: getfield      #15                 // Field queue:Ljava/util/Queue;
       4: astore_2
       5: aload_2
       6: ifnonnull     24
       9: aload_1
      10: invokeinterface #30,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      15: checkcast     #31                 // class java/util/Queue
      18: astore_2
      19: aload_0
      20: aload_2
      21: putfield      #15                 // Field queue:Ljava/util/Queue;
      24: aload_2
      25: areturn

  static {};
    Code:
       0: ldc           #32                 // class reactor/core/publisher/ParallelMergeSequential$MergeSequentialInner
       2: ldc           #33                 // class org/reactivestreams/Subscription
       4: ldc           #34                 // String s
       6: invokestatic  #35                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #21                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
