Compiled from "ParallelGroup.java"
final class reactor.core.publisher.ParallelGroup$ParallelInnerGroup<T> extends reactor.core.publisher.GroupedFlux<java.lang.Integer, T> implements reactor.core.publisher.InnerOperator<T, T> {
  final int key;

  volatile int once;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.ParallelGroup$ParallelInnerGroup> ONCE;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.ParallelGroup$ParallelInnerGroup, org.reactivestreams.Subscription> S;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.ParallelGroup$ParallelInnerGroup> REQUESTED;

  reactor.core.CoreSubscriber<? super T> actual;

  reactor.core.publisher.ParallelGroup$ParallelInnerGroup(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/GroupedFlux."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field key:I
       9: return

  public java.lang.Integer key();
    Code:
       0: aload_0
       1: getfield      #2                  // Field key:I
       4: invokestatic  #3                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       7: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: getstatic     #4                  // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          27
      12: aload_0
      13: aload_1
      14: putfield      #6                  // Field actual:Lreactor/core/CoreSubscriber;
      17: aload_1
      18: aload_0
      19: invokeinterface #7,  2            // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      24: goto          40
      27: aload_1
      28: new           #8                  // class java/lang/IllegalStateException
      31: dup
      32: ldc           #9                  // String This ParallelGroup can be subscribed to at most once.
      34: invokespecial #10                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      37: invokestatic  #11                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      40: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #6                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #12                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #14                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #15                 // Field requested:J
      23: invokestatic  #16                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      26: areturn
      27: aload_1
      28: getstatic     #17                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     53
      34: aload_0
      35: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      38: invokestatic  #18                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      41: if_acmpne     48
      44: iconst_1
      45: goto          49
      48: iconst_0
      49: invokestatic  #19                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      52: areturn
      53: aload_0
      54: aload_1
      55: invokespecial #20                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      58: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #21                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #22                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          33
      11: getstatic     #23                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      14: aload_0
      15: lconst_0
      16: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndSet:(Ljava/lang/Object;J)J
      19: lstore_2
      20: lload_2
      21: lconst_0
      22: lcmp
      23: ifeq          33
      26: aload_1
      27: lload_2
      28: invokeinterface #25,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      33: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #6                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #26,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      10: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #6                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #27,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      10: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #6                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #28,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
       9: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #29                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          68
       7: aload_0
       8: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      11: astore_3
      12: aload_3
      13: ifnonnull     61
      16: getstatic     #23                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      19: aload_0
      20: lload_1
      21: invokestatic  #30                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      24: pop2
      25: aload_0
      26: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      29: astore_3
      30: aload_3
      31: ifnull        68
      34: getstatic     #23                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      37: aload_0
      38: lconst_0
      39: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndSet:(Ljava/lang/Object;J)J
      42: lstore        4
      44: lload         4
      46: lconst_0
      47: lcmp
      48: ifeq          58
      51: aload_3
      52: lload_1
      53: invokeinterface #25,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      58: goto          68
      61: aload_3
      62: lload_1
      63: invokeinterface #25,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      68: return

  public void cancel();
    Code:
       0: getstatic     #21                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #31                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  public java.lang.Object key();
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method key:()Ljava/lang/Integer;
       4: areturn

  static {};
    Code:
       0: ldc           #33                 // class reactor/core/publisher/ParallelGroup$ParallelInnerGroup
       2: ldc           #34                 // String once
       4: invokestatic  #35                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #4                  // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #33                 // class reactor/core/publisher/ParallelGroup$ParallelInnerGroup
      12: ldc           #36                 // class org/reactivestreams/Subscription
      14: ldc           #37                 // String s
      16: invokestatic  #38                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      19: putstatic     #21                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: ldc           #33                 // class reactor/core/publisher/ParallelGroup$ParallelInnerGroup
      24: ldc           #39                 // String requested
      26: invokestatic  #40                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      29: putstatic     #23                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      32: return
}
