Compiled from "FluxTake.java"
final class reactor.core.publisher.FluxTake$TakeSubscriber<T> implements reactor.core.publisher.InnerOperator<T, T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final long n;

  long remaining;

  org.reactivestreams.Subscription s;

  boolean done;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxTake$TakeSubscriber> WIP;

  public reactor.core.publisher.FluxTake$TakeSubscriber(reactor.core.CoreSubscriber<? super T>, long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: lload_2
      11: putfield      #3                  // Field n:J
      14: aload_0
      15: lload_2
      16: putfield      #4                  // Field remaining:J
      19: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #6                  // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          56
      11: aload_0
      12: getfield      #3                  // Field n:J
      15: lconst_0
      16: lcmp
      17: ifne          41
      20: aload_1
      21: invokeinterface #7,  1            // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      26: aload_0
      27: iconst_1
      28: putfield      #8                  // Field done:Z
      31: aload_0
      32: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      35: invokestatic  #9                  // Method reactor/core/publisher/Operators.complete:(Lorg/reactivestreams/Subscriber;)V
      38: goto          56
      41: aload_0
      42: aload_1
      43: putfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      46: aload_0
      47: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      50: aload_0
      51: invokeinterface #10,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      56: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #8                  // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #11,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #12                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: getfield      #4                  // Field remaining:J
      25: lstore_2
      26: lload_2
      27: lconst_0
      28: lcmp
      29: ifne          46
      32: aload_0
      33: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      36: invokeinterface #7,  1            // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      41: aload_0
      42: invokevirtual #13                 // Method onComplete:()V
      45: return
      46: aload_0
      47: lload_2
      48: lconst_1
      49: lsub
      50: dup2
      51: lstore_2
      52: putfield      #4                  // Field remaining:J
      55: lload_2
      56: lconst_0
      57: lcmp
      58: ifne          65
      61: iconst_1
      62: goto          66
      65: iconst_0
      66: istore        4
      68: aload_0
      69: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      72: aload_1
      73: invokeinterface #14,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      78: iload         4
      80: ifeq          96
      83: aload_0
      84: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      87: invokeinterface #7,  1            // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      92: aload_0
      93: invokevirtual #13                 // Method onComplete:()V
      96: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #8                  // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #11,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #15                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: iconst_1
      23: putfield      #8                  // Field done:Z
      26: aload_0
      27: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      30: aload_1
      31: invokeinterface #16,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      36: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #8                  // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #8                  // Field done:Z
      13: aload_0
      14: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      17: invokeinterface #17,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      22: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #18                 // Field wip:I
       4: ifne          54
       7: getstatic     #19                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_0
      12: iconst_1
      13: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      16: ifeq          54
      19: lload_1
      20: aload_0
      21: getfield      #3                  // Field n:J
      24: lcmp
      25: iflt          43
      28: aload_0
      29: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      32: ldc2_w        #22                 // long 9223372036854775807l
      35: invokeinterface #24,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      40: goto          53
      43: aload_0
      44: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      47: lload_1
      48: invokeinterface #24,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      53: return
      54: aload_0
      55: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      58: lload_1
      59: invokeinterface #24,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      64: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: invokeinterface #7,  1            // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
       9: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #25                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #8                  // Field done:Z
      11: invokestatic  #26                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aload_1
      16: getstatic     #27                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      26: areturn
      27: aload_0
      28: aload_1
      29: invokespecial #28                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      32: areturn

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  static {};
    Code:
       0: ldc           #29                 // class reactor/core/publisher/FluxTake$TakeSubscriber
       2: ldc           #30                 // String wip
       4: invokestatic  #31                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #19                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
