Compiled from "ElasticScheduler.java"
final class reactor.core.scheduler.ElasticScheduler implements reactor.core.scheduler.Scheduler, java.util.function.Supplier<java.util.concurrent.ScheduledExecutorService>, reactor.core.Scannable {
  static final java.util.concurrent.atomic.AtomicLong COUNTER;

  static final java.util.concurrent.ThreadFactory EVICTOR_FACTORY;

  static final reactor.core.scheduler.ElasticScheduler$CachedService SHUTDOWN;

  static final int DEFAULT_TTL_SECONDS;

  final java.util.concurrent.ThreadFactory factory;

  final int ttlSeconds;

  final java.util.Queue<reactor.core.scheduler.ElasticScheduler$ScheduledExecutorServiceExpiry> cache;

  final java.util.Queue<reactor.core.scheduler.ElasticScheduler$CachedService> all;

  final java.util.concurrent.ScheduledExecutorService evictor;

  volatile boolean shutdown;

  reactor.core.scheduler.ElasticScheduler(java.util.concurrent.ThreadFactory, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: iload_2
       5: ifge          35
       8: new           #2                  // class java/lang/IllegalArgumentException
      11: dup
      12: new           #3                  // class java/lang/StringBuilder
      15: dup
      16: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #5                  // String ttlSeconds must be positive, was:
      21: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_2
      25: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: iload_2
      37: putfield      #10                 // Field ttlSeconds:I
      40: aload_0
      41: aload_1
      42: putfield      #11                 // Field factory:Ljava/util/concurrent/ThreadFactory;
      45: aload_0
      46: new           #12                 // class java/util/concurrent/ConcurrentLinkedQueue
      49: dup
      50: invokespecial #13                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      53: putfield      #14                 // Field cache:Ljava/util/Queue;
      56: aload_0
      57: new           #12                 // class java/util/concurrent/ConcurrentLinkedQueue
      60: dup
      61: invokespecial #13                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      64: putfield      #15                 // Field all:Ljava/util/Queue;
      67: aload_0
      68: iconst_1
      69: getstatic     #16                 // Field EVICTOR_FACTORY:Ljava/util/concurrent/ThreadFactory;
      72: invokestatic  #17                 // Method java/util/concurrent/Executors.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;
      75: putfield      #18                 // Field evictor:Ljava/util/concurrent/ScheduledExecutorService;
      78: aload_0
      79: getfield      #18                 // Field evictor:Ljava/util/concurrent/ScheduledExecutorService;
      82: aload_0
      83: invokedynamic #19,  0             // InvokeDynamic #0:run:(Lreactor/core/scheduler/ElasticScheduler;)Ljava/lang/Runnable;
      88: iload_2
      89: i2l
      90: iload_2
      91: i2l
      92: getstatic     #20                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      95: invokeinterface #21,  7           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
     100: pop
     101: return

  public java.util.concurrent.ScheduledExecutorService get();
    Code:
       0: new           #22                 // class java/util/concurrent/ScheduledThreadPoolExecutor
       3: dup
       4: iconst_1
       5: aload_0
       6: getfield      #11                 // Field factory:Ljava/util/concurrent/ThreadFactory;
       9: invokespecial #23                 // Method java/util/concurrent/ScheduledThreadPoolExecutor."<init>":(ILjava/util/concurrent/ThreadFactory;)V
      12: astore_1
      13: aload_1
      14: iconst_1
      15: invokevirtual #24                 // Method java/util/concurrent/ScheduledThreadPoolExecutor.setMaximumPoolSize:(I)V
      18: aload_1
      19: iconst_1
      20: invokevirtual #25                 // Method java/util/concurrent/ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy:(Z)V
      23: aload_1
      24: areturn

  public void start();
    Code:
       0: new           #26                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #27                 // String Restarting not supported yet
       6: invokespecial #28                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #29                 // Field shutdown:Z
       4: ireturn

  public void dispose();
    Code:
       0: aload_0
       1: getfield      #29                 // Field shutdown:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #29                 // Field shutdown:Z
      13: aload_0
      14: getfield      #18                 // Field evictor:Ljava/util/concurrent/ScheduledExecutorService;
      17: invokeinterface #30,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdownNow:()Ljava/util/List;
      22: pop
      23: aload_0
      24: getfield      #14                 // Field cache:Ljava/util/Queue;
      27: invokeinterface #31,  1           // InterfaceMethod java/util/Queue.clear:()V
      32: aload_0
      33: getfield      #15                 // Field all:Ljava/util/Queue;
      36: invokeinterface #32,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      41: checkcast     #33                 // class reactor/core/scheduler/ElasticScheduler$CachedService
      44: dup
      45: astore_1
      46: ifnull        62
      49: aload_1
      50: getfield      #34                 // Field reactor/core/scheduler/ElasticScheduler$CachedService.exec:Ljava/util/concurrent/ScheduledExecutorService;
      53: invokeinterface #30,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdownNow:()Ljava/util/List;
      58: pop
      59: goto          32
      62: return

  reactor.core.scheduler.ElasticScheduler$CachedService pick();
    Code:
       0: aload_0
       1: getfield      #29                 // Field shutdown:Z
       4: ifeq          11
       7: getstatic     #35                 // Field SHUTDOWN:Lreactor/core/scheduler/ElasticScheduler$CachedService;
      10: areturn
      11: aload_0
      12: getfield      #14                 // Field cache:Ljava/util/Queue;
      15: invokeinterface #32,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      20: checkcast     #36                 // class reactor/core/scheduler/ElasticScheduler$ScheduledExecutorServiceExpiry
      23: astore_2
      24: aload_2
      25: ifnull        33
      28: aload_2
      29: getfield      #37                 // Field reactor/core/scheduler/ElasticScheduler$ScheduledExecutorServiceExpiry.cached:Lreactor/core/scheduler/ElasticScheduler$CachedService;
      32: areturn
      33: new           #33                 // class reactor/core/scheduler/ElasticScheduler$CachedService
      36: dup
      37: aload_0
      38: invokespecial #38                 // Method reactor/core/scheduler/ElasticScheduler$CachedService."<init>":(Lreactor/core/scheduler/ElasticScheduler;)V
      41: astore_1
      42: aload_0
      43: getfield      #15                 // Field all:Ljava/util/Queue;
      46: aload_1
      47: invokeinterface #39,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      52: pop
      53: aload_0
      54: getfield      #29                 // Field shutdown:Z
      57: ifeq          75
      60: aload_0
      61: getfield      #15                 // Field all:Ljava/util/Queue;
      64: aload_1
      65: invokeinterface #40,  2           // InterfaceMethod java/util/Queue.remove:(Ljava/lang/Object;)Z
      70: pop
      71: getstatic     #35                 // Field SHUTDOWN:Lreactor/core/scheduler/ElasticScheduler$CachedService;
      74: areturn
      75: aload_1
      76: areturn

  public reactor.core.Disposable schedule(java.lang.Runnable);
    Code:
       0: aload_0
       1: invokevirtual #41                 // Method pick:()Lreactor/core/scheduler/ElasticScheduler$CachedService;
       4: astore_2
       5: aload_2
       6: getfield      #34                 // Field reactor/core/scheduler/ElasticScheduler$CachedService.exec:Ljava/util/concurrent/ScheduledExecutorService;
       9: new           #42                 // class reactor/core/scheduler/ElasticScheduler$DirectScheduleTask
      12: dup
      13: aload_1
      14: aload_2
      15: invokespecial #43                 // Method reactor/core/scheduler/ElasticScheduler$DirectScheduleTask."<init>":(Ljava/lang/Runnable;Lreactor/core/scheduler/ElasticScheduler$CachedService;)V
      18: lconst_0
      19: getstatic     #44                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      22: invokestatic  #45                 // Method reactor/core/scheduler/Schedulers.directSchedule:(Ljava/util/concurrent/ScheduledExecutorService;Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      25: areturn

  public reactor.core.Disposable schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokevirtual #41                 // Method pick:()Lreactor/core/scheduler/ElasticScheduler$CachedService;
       4: astore        5
       6: aload         5
       8: getfield      #34                 // Field reactor/core/scheduler/ElasticScheduler$CachedService.exec:Ljava/util/concurrent/ScheduledExecutorService;
      11: new           #42                 // class reactor/core/scheduler/ElasticScheduler$DirectScheduleTask
      14: dup
      15: aload_1
      16: aload         5
      18: invokespecial #43                 // Method reactor/core/scheduler/ElasticScheduler$DirectScheduleTask."<init>":(Ljava/lang/Runnable;Lreactor/core/scheduler/ElasticScheduler$CachedService;)V
      21: lload_2
      22: aload         4
      24: invokestatic  #45                 // Method reactor/core/scheduler/Schedulers.directSchedule:(Ljava/util/concurrent/ScheduledExecutorService;Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      27: areturn

  public reactor.core.Disposable schedulePeriodically(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokevirtual #41                 // Method pick:()Lreactor/core/scheduler/ElasticScheduler$CachedService;
       4: astore        7
       6: iconst_2
       7: anewarray     #46                 // class reactor/core/Disposable
      10: dup
      11: iconst_0
      12: aload         7
      14: getfield      #34                 // Field reactor/core/scheduler/ElasticScheduler$CachedService.exec:Ljava/util/concurrent/ScheduledExecutorService;
      17: aload_1
      18: lload_2
      19: lload         4
      21: aload         6
      23: invokestatic  #47                 // Method reactor/core/scheduler/Schedulers.directSchedulePeriodically:(Ljava/util/concurrent/ScheduledExecutorService;Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      26: aastore
      27: dup
      28: iconst_1
      29: aload         7
      31: aastore
      32: invokestatic  #48                 // Method reactor/core/Disposables.composite:([Lreactor/core/Disposable;)Lreactor/core/Disposable$Composite;
      35: areturn

  public java.lang.String toString();
    Code:
       0: new           #3                  // class java/lang/StringBuilder
       3: dup
       4: ldc           #50                 // String elastic
       6: invokespecial #51                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
       9: bipush        40
      11: invokevirtual #52                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      14: astore_1
      15: aload_0
      16: getfield      #11                 // Field factory:Ljava/util/concurrent/ThreadFactory;
      19: instanceof    #53                 // class reactor/core/scheduler/ReactorThreadFactory
      22: ifeq          50
      25: aload_1
      26: bipush        34
      28: invokevirtual #52                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      31: aload_0
      32: getfield      #11                 // Field factory:Ljava/util/concurrent/ThreadFactory;
      35: checkcast     #53                 // class reactor/core/scheduler/ReactorThreadFactory
      38: invokevirtual #54                 // Method reactor/core/scheduler/ReactorThreadFactory.get:()Ljava/lang/String;
      41: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: bipush        34
      46: invokevirtual #52                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      49: pop
      50: aload_1
      51: bipush        41
      53: invokevirtual #52                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      56: pop
      57: aload_1
      58: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      61: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #55                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpeq     14
       7: aload_1
       8: getstatic     #56                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      11: if_acmpne     22
      14: aload_0
      15: invokevirtual #57                 // Method isDisposed:()Z
      18: invokestatic  #58                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      21: areturn
      22: aload_1
      23: getstatic     #59                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      26: if_acmpne     35
      29: ldc           #61                 // int 2147483647
      31: invokestatic  #62                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      34: areturn
      35: aload_1
      36: getstatic     #63                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      39: if_acmpne     55
      42: aload_0
      43: getfield      #14                 // Field cache:Ljava/util/Queue;
      46: invokeinterface #64,  1           // InterfaceMethod java/util/Queue.size:()I
      51: invokestatic  #62                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      54: areturn
      55: aload_1
      56: getstatic     #65                 // Field reactor/core/Scannable$Attr.NAME:Lreactor/core/Scannable$Attr;
      59: if_acmpne     67
      62: aload_0
      63: invokevirtual #66                 // Method toString:()Ljava/lang/String;
      66: areturn
      67: aconst_null
      68: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #14                 // Field cache:Ljava/util/Queue;
       4: invokeinterface #67,  1           // InterfaceMethod java/util/Queue.stream:()Ljava/util/stream/Stream;
       9: invokedynamic #68,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      14: invokeinterface #69,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      19: areturn

  public reactor.core.scheduler.Scheduler$Worker createWorker();
    Code:
       0: new           #70                 // class reactor/core/scheduler/ElasticScheduler$ElasticWorker
       3: dup
       4: aload_0
       5: invokevirtual #41                 // Method pick:()Lreactor/core/scheduler/ElasticScheduler$CachedService;
       8: invokespecial #71                 // Method reactor/core/scheduler/ElasticScheduler$ElasticWorker."<init>":(Lreactor/core/scheduler/ElasticScheduler$CachedService;)V
      11: areturn

  void eviction();
    Code:
       0: invokestatic  #72                 // Method java/lang/System.currentTimeMillis:()J
       3: lstore_1
       4: new           #73                 // class java/util/ArrayList
       7: dup
       8: aload_0
       9: getfield      #14                 // Field cache:Ljava/util/Queue;
      12: invokespecial #74                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      15: astore_3
      16: aload_3
      17: invokeinterface #75,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      22: astore        4
      24: aload         4
      26: invokeinterface #76,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      31: ifeq          102
      34: aload         4
      36: invokeinterface #77,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      41: checkcast     #36                 // class reactor/core/scheduler/ElasticScheduler$ScheduledExecutorServiceExpiry
      44: astore        5
      46: aload         5
      48: getfield      #78                 // Field reactor/core/scheduler/ElasticScheduler$ScheduledExecutorServiceExpiry.expireMillis:J
      51: lload_1
      52: lcmp
      53: ifge          99
      56: aload_0
      57: getfield      #14                 // Field cache:Ljava/util/Queue;
      60: aload         5
      62: invokeinterface #40,  2           // InterfaceMethod java/util/Queue.remove:(Ljava/lang/Object;)Z
      67: ifeq          99
      70: aload         5
      72: getfield      #37                 // Field reactor/core/scheduler/ElasticScheduler$ScheduledExecutorServiceExpiry.cached:Lreactor/core/scheduler/ElasticScheduler$CachedService;
      75: getfield      #34                 // Field reactor/core/scheduler/ElasticScheduler$CachedService.exec:Ljava/util/concurrent/ScheduledExecutorService;
      78: invokeinterface #30,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdownNow:()Ljava/util/List;
      83: pop
      84: aload_0
      85: getfield      #15                 // Field all:Ljava/util/Queue;
      88: aload         5
      90: getfield      #37                 // Field reactor/core/scheduler/ElasticScheduler$ScheduledExecutorServiceExpiry.cached:Lreactor/core/scheduler/ElasticScheduler$CachedService;
      93: invokeinterface #40,  2           // InterfaceMethod java/util/Queue.remove:(Ljava/lang/Object;)Z
      98: pop
      99: goto          24
     102: return

  public java.lang.Object get();
    Code:
       0: aload_0
       1: invokevirtual #79                 // Method get:()Ljava/util/concurrent/ScheduledExecutorService;
       4: areturn

  private static reactor.core.scheduler.ElasticScheduler$CachedService lambda$inners$1(reactor.core.scheduler.ElasticScheduler$ScheduledExecutorServiceExpiry);
    Code:
       0: aload_0
       1: getfield      #37                 // Field reactor/core/scheduler/ElasticScheduler$ScheduledExecutorServiceExpiry.cached:Lreactor/core/scheduler/ElasticScheduler$CachedService;
       4: areturn

  private static java.lang.Thread lambda$static$0(java.lang.Runnable);
    Code:
       0: new           #80                 // class java/lang/Thread
       3: dup
       4: aload_0
       5: new           #3                  // class java/lang/StringBuilder
       8: dup
       9: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      12: ldc           #81                 // String elastic-evictor-
      14: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: getstatic     #82                 // Field COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
      20: invokevirtual #83                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      23: invokevirtual #84                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      26: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: invokespecial #85                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
      32: astore_1
      33: aload_1
      34: iconst_1
      35: invokevirtual #86                 // Method java/lang/Thread.setDaemon:(Z)V
      38: aload_1
      39: areturn

  static {};
    Code:
       0: new           #87                 // class java/util/concurrent/atomic/AtomicLong
       3: dup
       4: invokespecial #88                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
       7: putstatic     #82                 // Field COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
      10: invokedynamic #89,  0             // InvokeDynamic #2:newThread:()Ljava/util/concurrent/ThreadFactory;
      15: putstatic     #16                 // Field EVICTOR_FACTORY:Ljava/util/concurrent/ThreadFactory;
      18: new           #33                 // class reactor/core/scheduler/ElasticScheduler$CachedService
      21: dup
      22: aconst_null
      23: invokespecial #38                 // Method reactor/core/scheduler/ElasticScheduler$CachedService."<init>":(Lreactor/core/scheduler/ElasticScheduler;)V
      26: putstatic     #35                 // Field SHUTDOWN:Lreactor/core/scheduler/ElasticScheduler$CachedService;
      29: return
}
