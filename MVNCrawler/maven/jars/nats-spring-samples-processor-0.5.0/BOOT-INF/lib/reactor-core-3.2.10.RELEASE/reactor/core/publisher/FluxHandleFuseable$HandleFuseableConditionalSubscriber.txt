Compiled from "FluxHandleFuseable.java"
final class reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber<T, R> implements reactor.core.Fuseable$ConditionalSubscriber<T>, reactor.core.publisher.InnerOperator<T, R>, reactor.core.Fuseable$QueueSubscription<R>, reactor.core.publisher.SynchronousSink<R> {
  final reactor.core.Fuseable$ConditionalSubscriber<? super R> actual;

  final java.util.function.BiConsumer<? super T, reactor.core.publisher.SynchronousSink<R>> handler;

  boolean done;

  boolean stop;

  java.lang.Throwable error;

  R data;

  reactor.core.Fuseable$QueueSubscription<T> s;

  int sourceMode;

  reactor.core.publisher.FluxHandleFuseable$HandleFuseableConditionalSubscriber(reactor.core.Fuseable$ConditionalSubscriber<? super R>, java.util.function.BiConsumer<? super T, reactor.core.publisher.SynchronousSink<R>>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #4                  // Field handler:Ljava/util/function/BiConsumer;
      14: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
       4: invokeinterface #5,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
       9: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: aload_1
       5: invokestatic  #7                  // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          29
      11: aload_0
      12: aload_1
      13: checkcast     #8                  // class reactor/core/Fuseable$QueueSubscription
      16: putfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
      19: aload_0
      20: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      23: aload_0
      24: invokeinterface #9,  2            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      29: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #10                 // Field sourceMode:I
       4: iconst_2
       5: if_icmpne     21
       8: aload_0
       9: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      12: aconst_null
      13: invokeinterface #11,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onNext:(Ljava/lang/Object;)V
      18: goto          242
      21: aload_0
      22: getfield      #12                 // Field done:Z
      25: ifeq          42
      28: aload_1
      29: aload_0
      30: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      33: invokeinterface #5,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      38: invokestatic  #13                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      41: return
      42: aload_0
      43: getfield      #4                  // Field handler:Ljava/util/function/BiConsumer;
      46: aload_1
      47: aload_0
      48: invokeinterface #14,  3           // InterfaceMethod java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
      53: goto          103
      56: astore_2
      57: aload_1
      58: aload_2
      59: aload_0
      60: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      63: invokeinterface #5,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      68: aload_0
      69: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
      72: invokestatic  #16                 // Method reactor/core/publisher/Operators.onNextError:(Ljava/lang/Object;Ljava/lang/Throwable;Lreactor/util/context/Context;Lorg/reactivestreams/Subscription;)Ljava/lang/Throwable;
      75: astore_3
      76: aload_3
      77: ifnull        88
      80: aload_0
      81: aload_3
      82: invokevirtual #17                 // Method onError:(Ljava/lang/Throwable;)V
      85: goto          102
      88: aload_0
      89: invokespecial #18                 // Method reset:()V
      92: aload_0
      93: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
      96: lconst_1
      97: invokeinterface #19,  3           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.request:(J)V
     102: return
     103: aload_0
     104: getfield      #20                 // Field data:Ljava/lang/Object;
     107: astore_2
     108: aload_0
     109: aconst_null
     110: putfield      #20                 // Field data:Ljava/lang/Object;
     113: aload_2
     114: ifnull        127
     117: aload_0
     118: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     121: aload_2
     122: invokeinterface #11,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onNext:(Ljava/lang/Object;)V
     127: aload_0
     128: getfield      #21                 // Field stop:Z
     131: ifeq          228
     134: aload_0
     135: getfield      #22                 // Field error:Ljava/lang/Throwable;
     138: ifnull        202
     141: aload_1
     142: aload_0
     143: getfield      #22                 // Field error:Ljava/lang/Throwable;
     146: aload_0
     147: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     150: invokeinterface #5,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
     155: aload_0
     156: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
     159: invokestatic  #16                 // Method reactor/core/publisher/Operators.onNextError:(Ljava/lang/Object;Ljava/lang/Throwable;Lreactor/util/context/Context;Lorg/reactivestreams/Subscription;)Ljava/lang/Throwable;
     162: astore_3
     163: aload_3
     164: ifnull        185
     167: aload_0
     168: iconst_1
     169: putfield      #12                 // Field done:Z
     172: aload_0
     173: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     176: aload_3
     177: invokeinterface #23,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onError:(Ljava/lang/Throwable;)V
     182: goto          199
     185: aload_0
     186: invokespecial #18                 // Method reset:()V
     189: aload_0
     190: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
     193: lconst_1
     194: invokeinterface #19,  3           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.request:(J)V
     199: goto          242
     202: aload_0
     203: iconst_1
     204: putfield      #12                 // Field done:Z
     207: aload_0
     208: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
     211: invokeinterface #24,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.cancel:()V
     216: aload_0
     217: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     220: invokeinterface #25,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onComplete:()V
     225: goto          242
     228: aload_2
     229: ifnonnull     242
     232: aload_0
     233: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
     236: lconst_1
     237: invokeinterface #19,  3           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.request:(J)V
     242: return
    Exception table:
       from    to  target type
          42    53    56   Class java/lang/Throwable

  private void reset();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #12                 // Field done:Z
       5: aload_0
       6: iconst_0
       7: putfield      #21                 // Field stop:Z
      10: aload_0
      11: aconst_null
      12: putfield      #22                 // Field error:Ljava/lang/Throwable;
      15: return

  public boolean tryOnNext(T);
    Code:
       0: aload_0
       1: getfield      #12                 // Field done:Z
       4: ifeq          22
       7: aload_1
       8: aload_0
       9: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      12: invokeinterface #5,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #13                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: iconst_1
      21: ireturn
      22: aload_0
      23: getfield      #4                  // Field handler:Ljava/util/function/BiConsumer;
      26: aload_1
      27: aload_0
      28: invokeinterface #14,  3           // InterfaceMethod java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
      33: goto          76
      36: astore_2
      37: aload_1
      38: aload_0
      39: getfield      #22                 // Field error:Ljava/lang/Throwable;
      42: aload_0
      43: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      46: invokeinterface #5,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      51: aload_0
      52: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
      55: invokestatic  #16                 // Method reactor/core/publisher/Operators.onNextError:(Ljava/lang/Object;Ljava/lang/Throwable;Lreactor/util/context/Context;Lorg/reactivestreams/Subscription;)Ljava/lang/Throwable;
      58: astore_3
      59: aload_3
      60: ifnull        70
      63: aload_0
      64: aload_3
      65: invokevirtual #17                 // Method onError:(Ljava/lang/Throwable;)V
      68: iconst_1
      69: ireturn
      70: aload_0
      71: invokespecial #18                 // Method reset:()V
      74: iconst_0
      75: ireturn
      76: aload_0
      77: getfield      #20                 // Field data:Ljava/lang/Object;
      80: astore_2
      81: aload_0
      82: aconst_null
      83: putfield      #20                 // Field data:Ljava/lang/Object;
      86: iconst_0
      87: istore_3
      88: aload_2
      89: ifnull        103
      92: aload_0
      93: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      96: aload_2
      97: invokeinterface #26,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.tryOnNext:(Ljava/lang/Object;)Z
     102: istore_3
     103: aload_0
     104: getfield      #21                 // Field stop:Z
     107: ifeq          198
     110: aload_0
     111: getfield      #22                 // Field error:Ljava/lang/Throwable;
     114: ifnull        173
     117: aload_1
     118: aload_0
     119: getfield      #22                 // Field error:Ljava/lang/Throwable;
     122: aload_0
     123: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     126: invokeinterface #5,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
     131: aload_0
     132: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
     135: invokestatic  #16                 // Method reactor/core/publisher/Operators.onNextError:(Ljava/lang/Object;Ljava/lang/Throwable;Lreactor/util/context/Context;Lorg/reactivestreams/Subscription;)Ljava/lang/Throwable;
     138: astore        4
     140: aload         4
     142: ifnull        164
     145: aload_0
     146: iconst_1
     147: putfield      #12                 // Field done:Z
     150: aload_0
     151: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     154: aload         4
     156: invokeinterface #23,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onError:(Ljava/lang/Throwable;)V
     161: goto          170
     164: aload_0
     165: invokespecial #18                 // Method reset:()V
     168: iconst_0
     169: ireturn
     170: goto          196
     173: aload_0
     174: iconst_1
     175: putfield      #12                 // Field done:Z
     178: aload_0
     179: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
     182: invokeinterface #24,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.cancel:()V
     187: aload_0
     188: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     191: invokeinterface #25,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onComplete:()V
     196: iconst_1
     197: ireturn
     198: iload_3
     199: ireturn
    Exception table:
       from    to  target type
          22    33    36   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #12                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      12: invokeinterface #5,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #27                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: iconst_1
      23: putfield      #12                 // Field done:Z
      26: aload_0
      27: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      30: aload_1
      31: invokeinterface #23,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onError:(Ljava/lang/Throwable;)V
      36: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #12                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #12                 // Field done:Z
      13: aload_0
      14: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      17: invokeinterface #25,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onComplete:()V
      22: return

  public void complete();
    Code:
       0: aload_0
       1: getfield      #21                 // Field stop:Z
       4: ifeq          17
       7: new           #28                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #29                 // String Cannot complete after a complete or error
      13: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iconst_1
      19: putfield      #21                 // Field stop:Z
      22: return

  public void error(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #21                 // Field stop:Z
       4: ifeq          17
       7: new           #28                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #31                 // String Cannot error after a complete or error
      13: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: ldc           #32                 // String error
      21: invokestatic  #33                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      24: checkcast     #15                 // class java/lang/Throwable
      27: putfield      #22                 // Field error:Ljava/lang/Throwable;
      30: aload_0
      31: iconst_1
      32: putfield      #21                 // Field stop:Z
      35: return

  public void next(R);
    Code:
       0: aload_0
       1: getfield      #20                 // Field data:Ljava/lang/Object;
       4: ifnull        17
       7: new           #28                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #34                 // String Cannot emit more than one data
      13: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #21                 // Field stop:Z
      21: ifeq          34
      24: new           #28                 // class java/lang/IllegalStateException
      27: dup
      28: ldc           #35                 // String Cannot emit after a complete or error
      30: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: aload_1
      36: ldc           #36                 // String data
      38: invokestatic  #33                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      41: putfield      #20                 // Field data:Ljava/lang/Object;
      44: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #37                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
      11: areturn
      12: aload_1
      13: getstatic     #38                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #12                 // Field done:Z
      23: invokestatic  #39                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #40                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      31: if_acmpne     39
      34: aload_0
      35: getfield      #22                 // Field error:Ljava/lang/Throwable;
      38: areturn
      39: aload_0
      40: aload_1
      41: invokespecial #41                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      44: areturn

  public reactor.core.CoreSubscriber<? super R> actual();
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
       4: areturn

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: lload_1
       5: invokeinterface #19,  3           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.request:(J)V
      10: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #24,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.cancel:()V
       9: return

  public R poll();
    Code:
       0: aload_0
       1: getfield      #10                 // Field sourceMode:I
       4: iconst_2
       5: if_icmpne     217
       8: aload_0
       9: getfield      #12                 // Field done:Z
      12: ifeq          17
      15: aconst_null
      16: areturn
      17: lconst_0
      18: lstore_1
      19: aload_0
      20: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
      23: invokeinterface #42,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.poll:()Ljava/lang/Object;
      28: astore_3
      29: aload_3
      30: ifnull        196
      33: aload_0
      34: getfield      #4                  // Field handler:Ljava/util/function/BiConsumer;
      37: aload_3
      38: aload_0
      39: invokeinterface #14,  3           // InterfaceMethod java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
      44: goto          84
      47: astore        5
      49: aload_3
      50: aload         5
      52: aload_0
      53: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      56: invokeinterface #5,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      61: invokestatic  #43                 // Method reactor/core/publisher/Operators.onNextPollError:(Ljava/lang/Object;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
      64: astore        6
      66: aload         6
      68: ifnull        77
      71: aload         6
      73: invokestatic  #44                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      76: athrow
      77: aload_0
      78: invokespecial #18                 // Method reset:()V
      81: goto          19
      84: aload_0
      85: getfield      #20                 // Field data:Ljava/lang/Object;
      88: astore        4
      90: aload_0
      91: aconst_null
      92: putfield      #20                 // Field data:Ljava/lang/Object;
      95: aload_0
      96: getfield      #21                 // Field stop:Z
      99: ifeq          181
     102: aload_0
     103: getfield      #22                 // Field error:Ljava/lang/Throwable;
     106: ifnull        155
     109: aload_3
     110: aload_0
     111: getfield      #22                 // Field error:Ljava/lang/Throwable;
     114: aload_0
     115: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     118: invokeinterface #5,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
     123: aload_0
     124: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
     127: invokestatic  #16                 // Method reactor/core/publisher/Operators.onNextError:(Ljava/lang/Object;Ljava/lang/Throwable;Lreactor/util/context/Context;Lorg/reactivestreams/Subscription;)Ljava/lang/Throwable;
     130: astore        5
     132: aload         5
     134: ifnull        148
     137: aload_0
     138: iconst_1
     139: putfield      #12                 // Field done:Z
     142: aload         5
     144: invokestatic  #44                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     147: athrow
     148: aload_0
     149: invokespecial #18                 // Method reset:()V
     152: goto          19
     155: aload_0
     156: iconst_1
     157: putfield      #12                 // Field done:Z
     160: aload_0
     161: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
     164: invokeinterface #24,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.cancel:()V
     169: aload_0
     170: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     173: invokeinterface #25,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onComplete:()V
     178: aload         4
     180: areturn
     181: aload         4
     183: ifnull        189
     186: aload         4
     188: areturn
     189: lload_1
     190: lconst_1
     191: ladd
     192: lstore_1
     193: goto          214
     196: lload_1
     197: lconst_0
     198: lcmp
     199: ifeq          212
     202: aload_0
     203: lload_1
     204: invokevirtual #45                 // Method request:(J)V
     207: lconst_0
     208: lstore_1
     209: goto          214
     212: aconst_null
     213: areturn
     214: goto          19
     217: aload_0
     218: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
     221: invokeinterface #42,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.poll:()Ljava/lang/Object;
     226: astore_1
     227: aload_1
     228: ifnull        351
     231: aload_0
     232: getfield      #4                  // Field handler:Ljava/util/function/BiConsumer;
     235: aload_1
     236: aload_0
     237: invokeinterface #14,  3           // InterfaceMethod java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
     242: goto          277
     245: astore_2
     246: aload_1
     247: aload_2
     248: aload_0
     249: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     252: invokeinterface #5,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
     257: invokestatic  #43                 // Method reactor/core/publisher/Operators.onNextPollError:(Ljava/lang/Object;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
     260: astore_3
     261: aload_3
     262: ifnull        270
     265: aload_3
     266: invokestatic  #44                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     269: athrow
     270: aload_0
     271: invokespecial #18                 // Method reset:()V
     274: goto          217
     277: aload_0
     278: getfield      #20                 // Field data:Ljava/lang/Object;
     281: astore_2
     282: aload_0
     283: aconst_null
     284: putfield      #20                 // Field data:Ljava/lang/Object;
     287: aload_0
     288: getfield      #21                 // Field stop:Z
     291: ifeq          342
     294: aload_0
     295: iconst_1
     296: putfield      #12                 // Field done:Z
     299: aload_0
     300: getfield      #22                 // Field error:Ljava/lang/Throwable;
     303: ifnull        340
     306: aload_1
     307: aload_0
     308: getfield      #22                 // Field error:Ljava/lang/Throwable;
     311: aload_0
     312: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     315: invokeinterface #5,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
     320: invokestatic  #43                 // Method reactor/core/publisher/Operators.onNextPollError:(Ljava/lang/Object;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
     323: astore_3
     324: aload_3
     325: ifnull        333
     328: aload_3
     329: invokestatic  #44                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     332: athrow
     333: aload_0
     334: invokespecial #18                 // Method reset:()V
     337: goto          217
     340: aload_2
     341: areturn
     342: aload_2
     343: ifnull        348
     346: aload_2
     347: areturn
     348: goto          353
     351: aconst_null
     352: areturn
     353: goto          217
    Exception table:
       from    to  target type
          33    44    47   Class java/lang/Throwable
         231   242   245   Class java/lang/Throwable

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #46,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.isEmpty:()Z
       9: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #47,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.clear:()V
       9: return

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_4
       2: iand
       3: ifeq          8
       6: iconst_0
       7: ireturn
       8: aload_0
       9: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
      12: iload_1
      13: invokeinterface #48,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      18: istore_2
      19: aload_0
      20: iload_2
      21: putfield      #10                 // Field sourceMode:I
      24: iload_2
      25: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #6                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #49,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.size:()I
       9: ireturn
}
