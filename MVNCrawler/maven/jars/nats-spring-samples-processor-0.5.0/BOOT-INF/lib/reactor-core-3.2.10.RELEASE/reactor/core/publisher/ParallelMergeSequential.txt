Compiled from "ParallelMergeSequential.java"
final class reactor.core.publisher.ParallelMergeSequential<T> extends reactor.core.publisher.Flux<T> implements reactor.core.Scannable {
  final reactor.core.publisher.ParallelFlux<? extends T> source;

  final int prefetch;

  final java.util.function.Supplier<java.util.Queue<T>> queueSupplier;

  reactor.core.publisher.ParallelMergeSequential(reactor.core.publisher.ParallelFlux<? extends T>, int, java.util.function.Supplier<java.util.Queue<T>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: iload_2
       5: ifgt          35
       8: new           #2                  // class java/lang/IllegalArgumentException
      11: dup
      12: new           #3                  // class java/lang/StringBuilder
      15: dup
      16: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #5                  // String prefetch > 0 required but it was
      21: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_2
      25: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: aload_1
      37: putfield      #10                 // Field source:Lreactor/core/publisher/ParallelFlux;
      40: aload_0
      41: iload_2
      42: putfield      #11                 // Field prefetch:I
      45: aload_0
      46: aload_3
      47: putfield      #12                 // Field queueSupplier:Ljava/util/function/Supplier;
      50: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #13                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #10                 // Field source:Lreactor/core/publisher/ParallelFlux;
      11: areturn
      12: aload_1
      13: getstatic     #14                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #15                 // Method getPrefetch:()I
      23: invokestatic  #16                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aconst_null
      28: areturn

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #11                 // Field prefetch:I
       4: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: new           #17                 // class reactor/core/publisher/ParallelMergeSequential$MergeSequentialMain
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #10                 // Field source:Lreactor/core/publisher/ParallelFlux;
       9: invokevirtual #18                 // Method reactor/core/publisher/ParallelFlux.parallelism:()I
      12: aload_0
      13: getfield      #11                 // Field prefetch:I
      16: aload_0
      17: getfield      #12                 // Field queueSupplier:Ljava/util/function/Supplier;
      20: invokespecial #19                 // Method reactor/core/publisher/ParallelMergeSequential$MergeSequentialMain."<init>":(Lreactor/core/CoreSubscriber;IILjava/util/function/Supplier;)V
      23: astore_2
      24: aload_1
      25: aload_2
      26: invokeinterface #20,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      31: aload_0
      32: getfield      #10                 // Field source:Lreactor/core/publisher/ParallelFlux;
      35: aload_2
      36: getfield      #21                 // Field reactor/core/publisher/ParallelMergeSequential$MergeSequentialMain.subscribers:[Lreactor/core/publisher/ParallelMergeSequential$MergeSequentialInner;
      39: invokevirtual #22                 // Method reactor/core/publisher/ParallelFlux.subscribe:([Lreactor/core/CoreSubscriber;)V
      42: return
}
