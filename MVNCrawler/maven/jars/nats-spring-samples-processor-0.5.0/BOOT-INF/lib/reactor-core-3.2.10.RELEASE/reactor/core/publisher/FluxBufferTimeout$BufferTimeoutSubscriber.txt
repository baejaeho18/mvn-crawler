Compiled from "FluxBufferTimeout.java"
final class reactor.core.publisher.FluxBufferTimeout$BufferTimeoutSubscriber<T, C extends java.util.Collection<? super T>> implements reactor.core.publisher.InnerOperator<T, C> {
  final reactor.core.CoreSubscriber<? super C> actual;

  final reactor.util.context.Context ctx;

  static final int NOT_TERMINATED;

  static final int TERMINATED_WITH_SUCCESS;

  static final int TERMINATED_WITH_ERROR;

  static final int TERMINATED_WITH_CANCEL;

  final int batchSize;

  final long timespan;

  final reactor.core.scheduler.Scheduler$Worker timer;

  final java.lang.Runnable flushTask;

  protected org.reactivestreams.Subscription subscription;

  volatile int terminated;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxBufferTimeout$BufferTimeoutSubscriber> TERMINATED;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxBufferTimeout$BufferTimeoutSubscriber> REQUESTED;

  volatile int index;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxBufferTimeout$BufferTimeoutSubscriber> INDEX;

  volatile reactor.core.Disposable timespanRegistration;

  final java.util.function.Supplier<C> bufferSupplier;

  volatile C values;

  reactor.core.publisher.FluxBufferTimeout$BufferTimeoutSubscriber(reactor.core.CoreSubscriber<? super C>, int, long, reactor.core.scheduler.Scheduler$Worker, java.util.function.Supplier<C>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #3                  // Field terminated:I
       9: aload_0
      10: iconst_0
      11: putfield      #4                  // Field index:I
      14: aload_0
      15: aload_1
      16: putfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      19: aload_0
      20: aload_1
      21: invokeinterface #6,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      26: putfield      #7                  // Field ctx:Lreactor/util/context/Context;
      29: aload_0
      30: lload_3
      31: putfield      #8                  // Field timespan:J
      34: aload_0
      35: aload         5
      37: putfield      #9                  // Field timer:Lreactor/core/scheduler/Scheduler$Worker;
      40: aload_0
      41: aload_0
      42: invokedynamic #10,  0             // InvokeDynamic #0:run:(Lreactor/core/publisher/FluxBufferTimeout$BufferTimeoutSubscriber;)Ljava/lang/Runnable;
      47: putfield      #11                 // Field flushTask:Ljava/lang/Runnable;
      50: aload_0
      51: iload_2
      52: putfield      #12                 // Field batchSize:I
      55: aload_0
      56: aload         6
      58: putfield      #13                 // Field bufferSupplier:Ljava/util/function/Supplier;
      61: return

  protected void doOnSubscribe();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #13                 // Field bufferSupplier:Ljava/util/function/Supplier;
       5: invokeinterface #14,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      10: checkcast     #15                 // class java/util/Collection
      13: putfield      #16                 // Field values:Ljava/util/Collection;
      16: return

  void nextCallback(T);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: getfield      #16                 // Field values:Ljava/util/Collection;
       8: astore_3
       9: aload_3
      10: ifnonnull     36
      13: aload_0
      14: getfield      #13                 // Field bufferSupplier:Ljava/util/function/Supplier;
      17: invokeinterface #14,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      22: ldc           #17                 // String The bufferSupplier returned a null buffer
      24: invokestatic  #18                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      27: checkcast     #15                 // class java/util/Collection
      30: astore_3
      31: aload_0
      32: aload_3
      33: putfield      #16                 // Field values:Ljava/util/Collection;
      36: aload_3
      37: aload_1
      38: invokeinterface #19,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      43: pop
      44: aload_2
      45: monitorexit
      46: goto          56
      49: astore        4
      51: aload_2
      52: monitorexit
      53: aload         4
      55: athrow
      56: return
    Exception table:
       from    to  target type
           4    46    49   any
          49    53    49   any

  void flushCallback(T);
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: dup
       4: astore        4
       6: monitorenter
       7: aload_0
       8: getfield      #16                 // Field values:Ljava/util/Collection;
      11: astore_2
      12: aload_2
      13: ifnull        43
      16: aload_2
      17: invokeinterface #20,  1           // InterfaceMethod java/util/Collection.isEmpty:()Z
      22: ifne          43
      25: aload_0
      26: aload_0
      27: getfield      #13                 // Field bufferSupplier:Ljava/util/function/Supplier;
      30: invokeinterface #14,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      35: checkcast     #15                 // class java/util/Collection
      38: putfield      #16                 // Field values:Ljava/util/Collection;
      41: iconst_1
      42: istore_3
      43: aload         4
      45: monitorexit
      46: goto          57
      49: astore        5
      51: aload         4
      53: monitorexit
      54: aload         5
      56: athrow
      57: iload_3
      58: ifeq          166
      61: aload_0
      62: getfield      #21                 // Field requested:J
      65: lstore        4
      67: lload         4
      69: lconst_0
      70: lcmp
      71: ifeq          144
      74: lload         4
      76: ldc2_w        #23                 // long 9223372036854775807l
      79: lcmp
      80: ifeq          133
      83: lload         4
      85: lconst_1
      86: lsub
      87: lstore        6
      89: getstatic     #25                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      92: aload_0
      93: lload         4
      95: lload         6
      97: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.compareAndSet:(Ljava/lang/Object;JJ)Z
     100: ifeq          114
     103: aload_0
     104: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
     107: aload_2
     108: invokeinterface #27,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     113: return
     114: aload_0
     115: getfield      #21                 // Field requested:J
     118: lstore        4
     120: lload         4
     122: lconst_0
     123: lcmp
     124: ifgt          83
     127: goto          130
     130: goto          144
     133: aload_0
     134: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
     137: aload_2
     138: invokeinterface #27,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     143: return
     144: aload_0
     145: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
     148: ldc           #28                 // String Could not emit buffer due to lack of requests
     150: invokestatic  #29                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
     153: invokeinterface #30,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     158: aload_2
     159: aload_0
     160: getfield      #7                  // Field ctx:Lreactor/util/context/Context;
     163: invokestatic  #31                 // Method reactor/core/publisher/Operators.onDiscardMultiple:(Ljava/util/Collection;Lreactor/util/context/Context;)V
     166: return
    Exception table:
       from    to  target type
           7    46    49   any
          49    54    49   any

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #32                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #33                 // Field subscription:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #34                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     36
      19: aload_0
      20: getfield      #3                  // Field terminated:I
      23: iconst_3
      24: if_icmpne     31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: invokestatic  #35                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      35: areturn
      36: aload_1
      37: getstatic     #36                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      40: if_acmpne     68
      43: aload_0
      44: getfield      #3                  // Field terminated:I
      47: iconst_2
      48: if_icmpeq     59
      51: aload_0
      52: getfield      #3                  // Field terminated:I
      55: iconst_1
      56: if_icmpne     63
      59: iconst_1
      60: goto          64
      63: iconst_0
      64: invokestatic  #35                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      67: areturn
      68: aload_1
      69: getstatic     #37                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      72: if_acmpne     83
      75: aload_0
      76: getfield      #21                 // Field requested:J
      79: invokestatic  #38                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      82: areturn
      83: aload_1
      84: getstatic     #39                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      87: if_acmpne     98
      90: aload_0
      91: getfield      #12                 // Field batchSize:I
      94: invokestatic  #40                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      97: areturn
      98: aload_1
      99: getstatic     #41                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
     102: if_acmpne     118
     105: aload_0
     106: getfield      #12                 // Field batchSize:I
     109: aload_0
     110: getfield      #4                  // Field index:I
     113: isub
     114: invokestatic  #40                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     117: areturn
     118: aload_1
     119: getstatic     #42                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
     122: if_acmpne     130
     125: aload_0
     126: getfield      #9                  // Field timer:Lreactor/core/scheduler/Scheduler$Worker;
     129: areturn
     130: aload_0
     131: aload_1
     132: invokespecial #43                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     135: areturn

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #4                  // Field index:I
       4: iconst_1
       5: iadd
       6: istore_2
       7: getstatic     #44                 // Field INDEX:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iload_2
      12: iconst_1
      13: isub
      14: iload_2
      15: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      18: ifeq          0
      21: goto          24
      24: iload_2
      25: iconst_1
      26: if_icmpne     84
      29: aload_0
      30: aload_0
      31: getfield      #9                  // Field timer:Lreactor/core/scheduler/Scheduler$Worker;
      34: aload_0
      35: getfield      #11                 // Field flushTask:Ljava/lang/Runnable;
      38: aload_0
      39: getfield      #8                  // Field timespan:J
      42: getstatic     #46                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      45: invokeinterface #47,  5           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      50: putfield      #48                 // Field timespanRegistration:Lreactor/core/Disposable;
      53: goto          84
      56: astore_3
      57: aload_0
      58: aload_3
      59: aload_0
      60: getfield      #33                 // Field subscription:Lorg/reactivestreams/Subscription;
      63: aconst_null
      64: aload_1
      65: aload_0
      66: getfield      #7                  // Field ctx:Lreactor/util/context/Context;
      69: invokestatic  #50                 // Method reactor/core/publisher/Operators.onRejectedExecution:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
      72: invokevirtual #51                 // Method onError:(Ljava/lang/Throwable;)V
      75: aload_1
      76: aload_0
      77: getfield      #7                  // Field ctx:Lreactor/util/context/Context;
      80: invokestatic  #52                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      83: return
      84: aload_0
      85: aload_1
      86: invokevirtual #53                 // Method nextCallback:(Ljava/lang/Object;)V
      89: aload_0
      90: getfield      #4                  // Field index:I
      93: aload_0
      94: getfield      #12                 // Field batchSize:I
      97: irem
      98: ifne          132
     101: aload_0
     102: iconst_0
     103: putfield      #4                  // Field index:I
     106: aload_0
     107: getfield      #48                 // Field timespanRegistration:Lreactor/core/Disposable;
     110: ifnull        127
     113: aload_0
     114: getfield      #48                 // Field timespanRegistration:Lreactor/core/Disposable;
     117: invokeinterface #54,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
     122: aload_0
     123: aconst_null
     124: putfield      #48                 // Field timespanRegistration:Lreactor/core/Disposable;
     127: aload_0
     128: aload_1
     129: invokevirtual #55                 // Method flushCallback:(Ljava/lang/Object;)V
     132: return
    Exception table:
       from    to  target type
          29    53    56   Class java/util/concurrent/RejectedExecutionException

  void checkedComplete();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #55                 // Method flushCallback:(Ljava/lang/Object;)V
       5: aload_0
       6: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
       9: invokeinterface #56,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      14: goto          29
      17: astore_1
      18: aload_0
      19: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      22: invokeinterface #56,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      27: aload_1
      28: athrow
      29: return
    Exception table:
       from    to  target type
           0     5    17   any

  final boolean isCompleted();
    Code:
       0: aload_0
       1: getfield      #3                  // Field terminated:I
       4: iconst_1
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  final boolean isFailed();
    Code:
       0: aload_0
       1: getfield      #3                  // Field terminated:I
       4: iconst_2
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #57                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          64
       7: getstatic     #25                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #58                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: getfield      #3                  // Field terminated:I
      20: ifeq          24
      23: return
      24: aload_0
      25: getfield      #12                 // Field batchSize:I
      28: ldc           #60                 // int 2147483647
      30: if_icmpeq     41
      33: lload_1
      34: ldc2_w        #23                 // long 9223372036854775807l
      37: lcmp
      38: ifne          51
      41: aload_0
      42: ldc2_w        #23                 // long 9223372036854775807l
      45: invokevirtual #61                 // Method requestMore:(J)V
      48: goto          64
      51: aload_0
      52: lload_1
      53: aload_0
      54: getfield      #12                 // Field batchSize:I
      57: i2l
      58: invokestatic  #62                 // Method reactor/core/publisher/Operators.multiplyCap:(JJ)J
      61: invokevirtual #61                 // Method requestMore:(J)V
      64: return

  final void requestMore(long);
    Code:
       0: aload_0
       1: getfield      #33                 // Field subscription:Lorg/reactivestreams/Subscription;
       4: astore_3
       5: aload_3
       6: ifnull        16
       9: aload_3
      10: lload_1
      11: invokeinterface #63,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      16: return

  public reactor.core.CoreSubscriber<? super C> actual();
    Code:
       0: aload_0
       1: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void onComplete();
    Code:
       0: getstatic     #64                 // Field TERMINATED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          25
      12: aload_0
      13: getfield      #9                  // Field timer:Lreactor/core/scheduler/Scheduler$Worker;
      16: invokeinterface #65,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      21: aload_0
      22: invokevirtual #66                 // Method checkedComplete:()V
      25: return

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #64                 // Field TERMINATED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_2
       6: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          75
      12: aload_0
      13: getfield      #9                  // Field timer:Lreactor/core/scheduler/Scheduler$Worker;
      16: invokeinterface #65,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      21: aload_0
      22: dup
      23: astore_2
      24: monitorenter
      25: aload_0
      26: getfield      #16                 // Field values:Ljava/util/Collection;
      29: astore_3
      30: aload_3
      31: ifnull        53
      34: aload_3
      35: aload_0
      36: getfield      #7                  // Field ctx:Lreactor/util/context/Context;
      39: invokestatic  #31                 // Method reactor/core/publisher/Operators.onDiscardMultiple:(Ljava/util/Collection;Lreactor/util/context/Context;)V
      42: aload_3
      43: invokeinterface #67,  1           // InterfaceMethod java/util/Collection.clear:()V
      48: aload_0
      49: aconst_null
      50: putfield      #16                 // Field values:Ljava/util/Collection;
      53: aload_2
      54: monitorexit
      55: goto          65
      58: astore        4
      60: aload_2
      61: monitorexit
      62: aload         4
      64: athrow
      65: aload_0
      66: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      69: aload_1
      70: invokeinterface #30,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      75: return
    Exception table:
       from    to  target type
          25    55    58   any
          58    62    58   any

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #33                 // Field subscription:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #68                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          30
      11: aload_0
      12: aload_1
      13: putfield      #33                 // Field subscription:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: invokevirtual #69                 // Method doOnSubscribe:()V
      20: aload_0
      21: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      24: aload_0
      25: invokeinterface #70,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      30: return

  public void cancel();
    Code:
       0: getstatic     #64                 // Field TERMINATED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_3
       6: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          64
      12: aload_0
      13: getfield      #9                  // Field timer:Lreactor/core/scheduler/Scheduler$Worker;
      16: invokeinterface #65,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      21: aload_0
      22: getfield      #33                 // Field subscription:Lorg/reactivestreams/Subscription;
      25: astore_1
      26: aload_1
      27: ifnull        41
      30: aload_0
      31: aconst_null
      32: putfield      #33                 // Field subscription:Lorg/reactivestreams/Subscription;
      35: aload_1
      36: invokeinterface #71,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      41: aload_0
      42: getfield      #16                 // Field values:Ljava/util/Collection;
      45: astore_2
      46: aload_2
      47: ifnull        64
      50: aload_2
      51: aload_0
      52: getfield      #7                  // Field ctx:Lreactor/util/context/Context;
      55: invokestatic  #31                 // Method reactor/core/publisher/Operators.onDiscardMultiple:(Ljava/util/Collection;Lreactor/util/context/Context;)V
      58: aload_2
      59: invokeinterface #67,  1           // InterfaceMethod java/util/Collection.clear:()V
      64: return

  private void lambda$new$0();
    Code:
       0: aload_0
       1: getfield      #3                  // Field terminated:I
       4: ifne          37
       7: aload_0
       8: getfield      #4                  // Field index:I
      11: istore_1
      12: iload_1
      13: ifne          17
      16: return
      17: getstatic     #44                 // Field INDEX:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      20: aload_0
      21: iload_1
      22: iconst_0
      23: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      26: ifeq          7
      29: goto          32
      32: aload_0
      33: aconst_null
      34: invokevirtual #55                 // Method flushCallback:(Ljava/lang/Object;)V
      37: return

  static {};
    Code:
       0: ldc           #2                  // class reactor/core/publisher/FluxBufferTimeout$BufferTimeoutSubscriber
       2: ldc           #72                 // String terminated
       4: invokestatic  #73                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #64                 // Field TERMINATED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #2                  // class reactor/core/publisher/FluxBufferTimeout$BufferTimeoutSubscriber
      12: ldc           #74                 // String requested
      14: invokestatic  #75                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      17: putstatic     #25                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      20: ldc           #2                  // class reactor/core/publisher/FluxBufferTimeout$BufferTimeoutSubscriber
      22: ldc           #76                 // String index
      24: invokestatic  #73                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      27: putstatic     #44                 // Field INDEX:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      30: return
}
