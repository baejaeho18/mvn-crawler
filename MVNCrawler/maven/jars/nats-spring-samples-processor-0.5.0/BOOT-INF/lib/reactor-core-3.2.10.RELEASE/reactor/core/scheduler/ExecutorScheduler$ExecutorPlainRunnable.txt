Compiled from "ExecutorScheduler.java"
final class reactor.core.scheduler.ExecutorScheduler$ExecutorPlainRunnable extends java.util.concurrent.atomic.AtomicBoolean implements java.lang.Runnable,reactor.core.Disposable {
  private static final long serialVersionUID;

  final java.lang.Runnable task;

  reactor.core.scheduler.ExecutorScheduler$ExecutorPlainRunnable(java.lang.Runnable);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field task:Ljava/lang/Runnable;
       9: return

  public void run();
    Code:
       0: aload_0
       1: invokevirtual #3                  // Method get:()Z
       4: ifne          45
       7: aload_0
       8: getfield      #2                  // Field task:Ljava/lang/Runnable;
      11: invokeinterface #4,  1            // InterfaceMethod java/lang/Runnable.run:()V
      16: aload_0
      17: iconst_1
      18: invokevirtual #5                  // Method lazySet:(Z)V
      21: goto          45
      24: astore_1
      25: aload_1
      26: invokestatic  #7                  // Method reactor/core/scheduler/Schedulers.handleError:(Ljava/lang/Throwable;)V
      29: aload_0
      30: iconst_1
      31: invokevirtual #5                  // Method lazySet:(Z)V
      34: goto          45
      37: astore_2
      38: aload_0
      39: iconst_1
      40: invokevirtual #5                  // Method lazySet:(Z)V
      43: aload_2
      44: athrow
      45: return
    Exception table:
       from    to  target type
           7    16    24   Class java/lang/Throwable
           7    16    37   any
          24    29    37   any

  public boolean isDisposed();
    Code:
       0: aload_0
       1: invokevirtual #3                  // Method get:()Z
       4: ireturn

  public void dispose();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #8                  // Method set:(Z)V
       5: return
}
