Compiled from "RingBuffer.java"
final class reactor.core.publisher.SingleProducerSequencer extends reactor.core.publisher.SingleProducerSequencerFields {
  protected long p1;

  protected long p2;

  protected long p3;

  protected long p4;

  protected long p5;

  protected long p6;

  protected long p7;

  reactor.core.publisher.SingleProducerSequencer(int, reactor.util.concurrent.WaitStrategy, java.lang.Runnable);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method reactor/core/publisher/SingleProducerSequencerFields."<init>":(ILreactor/util/concurrent/WaitStrategy;Ljava/lang/Runnable;)V
       7: return

  long next();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #2                  // Method next:(I)J
       5: lreturn

  long next(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field nextValue:J
       4: lstore_2
       5: lload_2
       6: iload_1
       7: i2l
       8: ladd
       9: lstore        4
      11: lload         4
      13: aload_0
      14: getfield      #4                  // Field bufferSize:I
      17: i2l
      18: lsub
      19: lstore        6
      21: aload_0
      22: getfield      #5                  // Field cachedValue:J
      25: lstore        8
      27: lload         6
      29: lload         8
      31: lcmp
      32: ifgt          42
      35: lload         8
      37: lload_2
      38: lcmp
      39: ifle          88
      42: lload         6
      44: aload_0
      45: getfield      #6                  // Field gatingSequences:[Lreactor/core/publisher/RingBuffer$Sequence;
      48: lload_2
      49: invokestatic  #7                  // Method reactor/core/publisher/RingBuffer.getMinimumSequence:([Lreactor/core/publisher/RingBuffer$Sequence;J)J
      52: dup2
      53: lstore        10
      55: lcmp
      56: ifle          82
      59: aload_0
      60: getfield      #8                  // Field spinObserver:Ljava/lang/Runnable;
      63: ifnull        75
      66: aload_0
      67: getfield      #8                  // Field spinObserver:Ljava/lang/Runnable;
      70: invokeinterface #9,  1            // InterfaceMethod java/lang/Runnable.run:()V
      75: lconst_1
      76: invokestatic  #10                 // Method java/util/concurrent/locks/LockSupport.parkNanos:(J)V
      79: goto          42
      82: aload_0
      83: lload         10
      85: putfield      #5                  // Field cachedValue:J
      88: aload_0
      89: lload         4
      91: putfield      #3                  // Field nextValue:J
      94: lload         4
      96: lreturn

  public long getPending();
    Code:
       0: aload_0
       1: getfield      #3                  // Field nextValue:J
       4: lstore_1
       5: aload_0
       6: getfield      #6                  // Field gatingSequences:[Lreactor/core/publisher/RingBuffer$Sequence;
       9: lload_1
      10: invokestatic  #7                  // Method reactor/core/publisher/RingBuffer.getMinimumSequence:([Lreactor/core/publisher/RingBuffer$Sequence;J)J
      13: lstore_3
      14: lload_1
      15: lstore        5
      17: lload         5
      19: lload_3
      20: lsub
      21: lreturn

  void publish(long);
    Code:
       0: aload_0
       1: getfield      #11                 // Field cursor:Lreactor/core/publisher/RingBuffer$Sequence;
       4: lload_1
       5: invokeinterface #12,  3           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.set:(J)V
      10: aload_0
      11: getfield      #13                 // Field waitStrategy:Lreactor/util/concurrent/WaitStrategy;
      14: invokevirtual #14                 // Method reactor/util/concurrent/WaitStrategy.signalAllWhenBlocking:()V
      17: return

  long getHighestPublishedSequence(long, long);
    Code:
       0: lload_3
       1: lreturn
}
