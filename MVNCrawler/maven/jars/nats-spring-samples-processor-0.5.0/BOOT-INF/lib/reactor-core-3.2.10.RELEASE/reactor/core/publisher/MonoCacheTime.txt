Compiled from "MonoCacheTime.java"
class reactor.core.publisher.MonoCacheTime<T> extends reactor.core.publisher.MonoOperator<T, T> implements java.lang.Runnable {
  private static final reactor.util.Logger LOGGER;

  final java.util.function.Function<? super reactor.core.publisher.Signal<T>, java.time.Duration> ttlGenerator;

  final reactor.core.scheduler.Scheduler clock;

  volatile reactor.core.publisher.Signal<T> state;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoCacheTime, reactor.core.publisher.Signal> STATE;

  static final reactor.core.publisher.Signal<?> EMPTY;

  reactor.core.publisher.MonoCacheTime(reactor.core.publisher.Mono<? extends T>, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: invokedynamic #2,  0              // InvokeDynamic #0:apply:(Ljava/time/Duration;)Ljava/util/function/Function;
      12: putfield      #3                  // Field ttlGenerator:Ljava/util/function/Function;
      15: aload_0
      16: aload_3
      17: putfield      #4                  // Field clock:Lreactor/core/scheduler/Scheduler;
      20: aload_0
      21: getstatic     #5                  // Field EMPTY:Lreactor/core/publisher/Signal;
      24: putfield      #6                  // Field state:Lreactor/core/publisher/Signal;
      27: return

  reactor.core.publisher.MonoCacheTime(reactor.core.publisher.Mono<? extends T>, java.util.function.Function<? super reactor.core.publisher.Signal<T>, java.time.Duration>, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: putfield      #3                  // Field ttlGenerator:Ljava/util/function/Function;
      10: aload_0
      11: aload_3
      12: putfield      #4                  // Field clock:Lreactor/core/scheduler/Scheduler;
      15: aload_0
      16: getstatic     #5                  // Field EMPTY:Lreactor/core/publisher/Signal;
      19: putfield      #6                  // Field state:Lreactor/core/publisher/Signal;
      22: return

  reactor.core.publisher.MonoCacheTime(reactor.core.publisher.Mono<? extends T>, java.util.function.Function<? super T, java.time.Duration>, java.util.function.Function<java.lang.Throwable, java.time.Duration>, java.util.function.Supplier<java.time.Duration>, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: aload_3
       8: aload         4
      10: invokedynamic #7,  0              // InvokeDynamic #1:apply:(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Supplier;)Ljava/util/function/Function;
      15: putfield      #3                  // Field ttlGenerator:Ljava/util/function/Function;
      18: aload_0
      19: aload         5
      21: putfield      #4                  // Field clock:Lreactor/core/scheduler/Scheduler;
      24: getstatic     #5                  // Field EMPTY:Lreactor/core/publisher/Signal;
      27: astore        6
      29: aload_0
      30: aload         6
      32: putfield      #6                  // Field state:Lreactor/core/publisher/Signal;
      35: return

  public void run();
    Code:
       0: getstatic     #8                  // Field LOGGER:Lreactor/util/Logger;
       3: ldc           #9                  // String expired {}
       5: iconst_1
       6: anewarray     #10                 // class java/lang/Object
       9: dup
      10: iconst_0
      11: aload_0
      12: getfield      #6                  // Field state:Lreactor/core/publisher/Signal;
      15: aastore
      16: invokeinterface #11,  3           // InterfaceMethod reactor/util/Logger.debug:(Ljava/lang/String;[Ljava/lang/Object;)V
      21: getstatic     #5                  // Field EMPTY:Lreactor/core/publisher/Signal;
      24: astore_1
      25: aload_0
      26: aload_1
      27: putfield      #6                  // Field state:Lreactor/core/publisher/Signal;
      30: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: new           #12                 // class reactor/core/publisher/MonoCacheTime$CacheMonoSubscriber
       3: dup
       4: aload_1
       5: invokespecial #13                 // Method reactor/core/publisher/MonoCacheTime$CacheMonoSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
       8: astore_2
       9: aload_1
      10: aload_2
      11: invokeinterface #14,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      16: aload_0
      17: getfield      #6                  // Field state:Lreactor/core/publisher/Signal;
      20: astore_3
      21: aload_3
      22: getstatic     #5                  // Field EMPTY:Lreactor/core/publisher/Signal;
      25: if_acmpeq     35
      28: aload_3
      29: instanceof    #15                 // class reactor/core/publisher/MonoCacheTime$CoordinatorSubscriber
      32: ifeq          136
      35: iconst_0
      36: istore        4
      38: aload_3
      39: getstatic     #5                  // Field EMPTY:Lreactor/core/publisher/Signal;
      42: if_acmpne     79
      45: new           #15                 // class reactor/core/publisher/MonoCacheTime$CoordinatorSubscriber
      48: dup
      49: aload_0
      50: invokespecial #16                 // Method reactor/core/publisher/MonoCacheTime$CoordinatorSubscriber."<init>":(Lreactor/core/publisher/MonoCacheTime;)V
      53: astore        5
      55: getstatic     #17                 // Field STATE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      58: aload_0
      59: getstatic     #5                  // Field EMPTY:Lreactor/core/publisher/Signal;
      62: aload         5
      64: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      67: ifne          73
      70: goto          16
      73: iconst_1
      74: istore        4
      76: goto          85
      79: aload_3
      80: checkcast     #15                 // class reactor/core/publisher/MonoCacheTime$CoordinatorSubscriber
      83: astore        5
      85: aload         5
      87: aload_2
      88: invokevirtual #19                 // Method reactor/core/publisher/MonoCacheTime$CoordinatorSubscriber.add:(Lreactor/core/publisher/Operators$MonoSubscriber;)Z
      91: ifeq          133
      94: aload_2
      95: invokevirtual #20                 // Method reactor/core/publisher/MonoCacheTime$CacheMonoSubscriber.isCancelled:()Z
      98: ifeq          110
     101: aload         5
     103: aload_2
     104: invokevirtual #21                 // Method reactor/core/publisher/MonoCacheTime$CoordinatorSubscriber.remove:(Lreactor/core/publisher/Operators$MonoSubscriber;)V
     107: goto          116
     110: aload_2
     111: aload         5
     113: putfield      #22                 // Field reactor/core/publisher/MonoCacheTime$CacheMonoSubscriber.coordinator:Lreactor/core/publisher/MonoCacheTime$CoordinatorSubscriber;
     116: iload         4
     118: ifeq          190
     121: aload_0
     122: getfield      #23                 // Field source:Lreactor/core/publisher/Mono;
     125: aload         5
     127: invokevirtual #24                 // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
     130: goto          190
     133: goto          187
     136: aload_3
     137: invokeinterface #25,  1           // InterfaceMethod reactor/core/publisher/Signal.isOnNext:()Z
     142: ifeq          158
     145: aload_2
     146: aload_3
     147: invokeinterface #26,  1           // InterfaceMethod reactor/core/publisher/Signal.get:()Ljava/lang/Object;
     152: invokevirtual #27                 // Method reactor/core/publisher/MonoCacheTime$CacheMonoSubscriber.complete:(Ljava/lang/Object;)V
     155: goto          190
     158: aload_3
     159: invokeinterface #28,  1           // InterfaceMethod reactor/core/publisher/Signal.isOnComplete:()Z
     164: ifeq          174
     167: aload_2
     168: invokevirtual #29                 // Method reactor/core/publisher/MonoCacheTime$CacheMonoSubscriber.onComplete:()V
     171: goto          190
     174: aload_2
     175: aload_3
     176: invokeinterface #30,  1           // InterfaceMethod reactor/core/publisher/Signal.getThrowable:()Ljava/lang/Throwable;
     181: invokevirtual #31                 // Method reactor/core/publisher/MonoCacheTime$CacheMonoSubscriber.onError:(Ljava/lang/Throwable;)V
     184: goto          190
     187: goto          16
     190: return

  private static java.time.Duration lambda$new$1(java.util.function.Function, java.util.function.Function, java.util.function.Supplier, reactor.core.publisher.Signal);
    Code:
       0: aload_3
       1: invokeinterface #25,  1           // InterfaceMethod reactor/core/publisher/Signal.isOnNext:()Z
       6: ifeq          25
       9: aload_0
      10: aload_3
      11: invokeinterface #26,  1           // InterfaceMethod reactor/core/publisher/Signal.get:()Ljava/lang/Object;
      16: invokeinterface #32,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      21: checkcast     #33                 // class java/time/Duration
      24: areturn
      25: aload_3
      26: invokeinterface #34,  1           // InterfaceMethod reactor/core/publisher/Signal.isOnError:()Z
      31: ifeq          50
      34: aload_1
      35: aload_3
      36: invokeinterface #30,  1           // InterfaceMethod reactor/core/publisher/Signal.getThrowable:()Ljava/lang/Throwable;
      41: invokeinterface #32,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      46: checkcast     #33                 // class java/time/Duration
      49: areturn
      50: aload_2
      51: invokeinterface #35,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      56: checkcast     #33                 // class java/time/Duration
      59: areturn

  private static java.time.Duration lambda$new$0(java.time.Duration, reactor.core.publisher.Signal);
    Code:
       0: aload_0
       1: areturn

  static {};
    Code:
       0: ldc           #36                 // class reactor/core/publisher/MonoCacheTime
       2: invokestatic  #37                 // Method reactor/util/Loggers.getLogger:(Ljava/lang/Class;)Lreactor/util/Logger;
       5: putstatic     #8                  // Field LOGGER:Lreactor/util/Logger;
       8: ldc           #36                 // class reactor/core/publisher/MonoCacheTime
      10: ldc           #38                 // class reactor/core/publisher/Signal
      12: ldc           #39                 // String state
      14: invokestatic  #40                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      17: putstatic     #17                 // Field STATE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      20: new           #41                 // class reactor/core/publisher/ImmutableSignal
      23: dup
      24: invokestatic  #42                 // InterfaceMethod reactor/util/context/Context.empty:()Lreactor/util/context/Context;
      27: getstatic     #43                 // Field reactor/core/publisher/SignalType.ON_NEXT:Lreactor/core/publisher/SignalType;
      30: aconst_null
      31: aconst_null
      32: aconst_null
      33: invokespecial #44                 // Method reactor/core/publisher/ImmutableSignal."<init>":(Lreactor/util/context/Context;Lreactor/core/publisher/SignalType;Ljava/lang/Object;Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;)V
      36: putstatic     #5                  // Field EMPTY:Lreactor/core/publisher/Signal;
      39: return
}
