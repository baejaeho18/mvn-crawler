Compiled from "FluxSubscribeOnValue.java"
final class reactor.core.publisher.FluxSubscribeOnValue$ScheduledScalar<T> implements reactor.core.Fuseable$QueueSubscription<T>, reactor.core.publisher.InnerProducer<T>, java.lang.Runnable {
  final reactor.core.CoreSubscriber<? super T> actual;

  final T value;

  final reactor.core.scheduler.Scheduler scheduler;

  volatile int once;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxSubscribeOnValue$ScheduledScalar> ONCE;

  volatile reactor.core.Disposable future;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSubscribeOnValue$ScheduledScalar, reactor.core.Disposable> FUTURE;

  static final reactor.core.Disposable FINISHED;

  int fusionState;

  static final int NO_VALUE;

  static final int HAS_VALUE;

  static final int COMPLETE;

  reactor.core.publisher.FluxSubscribeOnValue$ScheduledScalar(reactor.core.CoreSubscriber<? super T>, T, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field value:Ljava/lang/Object;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      19: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #5                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     26
       7: aload_0
       8: getfield      #6                  // Field future:Lreactor/core/Disposable;
      11: getstatic     #7                  // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      14: if_acmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: invokestatic  #8                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      25: areturn
      26: aload_1
      27: getstatic     #9                  // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      30: if_acmpne     52
      33: aload_0
      34: getfield      #6                  // Field future:Lreactor/core/Disposable;
      37: getstatic     #10                 // Field FINISHED:Lreactor/core/Disposable;
      40: if_acmpne     47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: invokestatic  #8                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      51: areturn
      52: aload_1
      53: getstatic     #11                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      56: if_acmpne     64
      59: iconst_1
      60: invokestatic  #12                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      63: areturn
      64: aload_1
      65: getstatic     #13                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
      68: if_acmpne     76
      71: aload_0
      72: getfield      #4                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      75: areturn
      76: aload_0
      77: aload_1
      78: invokespecial #14                 // InterfaceMethod reactor/core/publisher/InnerProducer.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      81: areturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #15                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          120
       7: getstatic     #16                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_0
      12: iconst_1
      13: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      16: ifeq          120
      19: aload_0
      20: getfield      #4                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      23: aload_0
      24: invokeinterface #18,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.schedule:(Ljava/lang/Runnable;)Lreactor/core/Disposable;
      29: astore_3
      30: getstatic     #19                 // Field FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      33: aload_0
      34: aconst_null
      35: aload_3
      36: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      39: ifne          68
      42: aload_0
      43: getfield      #6                  // Field future:Lreactor/core/Disposable;
      46: getstatic     #10                 // Field FINISHED:Lreactor/core/Disposable;
      49: if_acmpeq     68
      52: aload_0
      53: getfield      #6                  // Field future:Lreactor/core/Disposable;
      56: getstatic     #7                  // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      59: if_acmpeq     68
      62: aload_3
      63: invokeinterface #21,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      68: goto          120
      71: astore_3
      72: aload_0
      73: getfield      #6                  // Field future:Lreactor/core/Disposable;
      76: getstatic     #10                 // Field FINISHED:Lreactor/core/Disposable;
      79: if_acmpeq     120
      82: aload_0
      83: getfield      #6                  // Field future:Lreactor/core/Disposable;
      86: getstatic     #7                  // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      89: if_acmpeq     120
      92: aload_0
      93: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      96: aload_3
      97: aload_0
      98: aconst_null
      99: aload_0
     100: getfield      #3                  // Field value:Ljava/lang/Object;
     103: aload_0
     104: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     107: invokeinterface #23,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     112: invokestatic  #24                 // Method reactor/core/publisher/Operators.onRejectedExecution:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
     115: invokeinterface #25,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     120: return
    Exception table:
       from    to  target type
          19    68    71   Class java/util/concurrent/RejectedExecutionException

  public void cancel();
    Code:
       0: getstatic     #16                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_1
       5: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.lazySet:(Ljava/lang/Object;I)V
       8: aload_0
       9: getfield      #6                  // Field future:Lreactor/core/Disposable;
      12: astore_1
      13: aload_1
      14: getstatic     #7                  // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      17: if_acmpeq     68
      20: aload_0
      21: getfield      #6                  // Field future:Lreactor/core/Disposable;
      24: getstatic     #10                 // Field FINISHED:Lreactor/core/Disposable;
      27: if_acmpeq     68
      30: getstatic     #19                 // Field FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      33: aload_0
      34: getstatic     #7                  // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      37: invokevirtual #27                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      40: checkcast     #28                 // class reactor/core/Disposable
      43: astore_1
      44: aload_1
      45: ifnull        68
      48: aload_1
      49: getstatic     #7                  // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      52: if_acmpeq     68
      55: aload_1
      56: getstatic     #10                 // Field FINISHED:Lreactor/core/Disposable;
      59: if_acmpeq     68
      62: aload_1
      63: invokeinterface #21,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      68: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #29                 // Field fusionState:I
       4: iconst_1
       5: if_icmpne     13
       8: aload_0
       9: iconst_2
      10: putfield      #29                 // Field fusionState:I
      13: aload_0
      14: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      17: aload_0
      18: getfield      #3                  // Field value:Ljava/lang/Object;
      21: invokeinterface #31,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      26: aload_0
      27: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      30: invokeinterface #32,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      35: getstatic     #19                 // Field FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      38: aload_0
      39: getstatic     #10                 // Field FINISHED:Lreactor/core/Disposable;
      42: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      45: goto          61
      48: astore_1
      49: getstatic     #19                 // Field FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      52: aload_0
      53: getstatic     #10                 // Field FINISHED:Lreactor/core/Disposable;
      56: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      59: aload_1
      60: athrow
      61: return
    Exception table:
       from    to  target type
           0    35    48   any

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_2
       2: iand
       3: ifeq          13
       6: aload_0
       7: iconst_1
       8: putfield      #29                 // Field fusionState:I
      11: iconst_2
      12: ireturn
      13: iconst_0
      14: ireturn

  public T poll();
    Code:
       0: aload_0
       1: getfield      #29                 // Field fusionState:I
       4: iconst_2
       5: if_icmpne     18
       8: aload_0
       9: iconst_3
      10: putfield      #29                 // Field fusionState:I
      13: aload_0
      14: getfield      #3                  // Field value:Ljava/lang/Object;
      17: areturn
      18: aconst_null
      19: areturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #29                 // Field fusionState:I
       4: iconst_2
       5: if_icmpeq     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public int size();
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method isEmpty:()Z
       4: ifeq          11
       7: iconst_0
       8: goto          12
      11: iconst_1
      12: ireturn

  public void clear();
    Code:
       0: aload_0
       1: iconst_3
       2: putfield      #29                 // Field fusionState:I
       5: return

  static {};
    Code:
       0: ldc           #30                 // class reactor/core/publisher/FluxSubscribeOnValue$ScheduledScalar
       2: ldc           #36                 // String once
       4: invokestatic  #37                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #16                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #30                 // class reactor/core/publisher/FluxSubscribeOnValue$ScheduledScalar
      12: ldc           #28                 // class reactor/core/Disposable
      14: ldc           #38                 // String future
      16: invokestatic  #39                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      19: putstatic     #19                 // Field FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: invokestatic  #40                 // Method reactor/core/Disposables.disposed:()Lreactor/core/Disposable;
      25: putstatic     #10                 // Field FINISHED:Lreactor/core/Disposable;
      28: return
}
