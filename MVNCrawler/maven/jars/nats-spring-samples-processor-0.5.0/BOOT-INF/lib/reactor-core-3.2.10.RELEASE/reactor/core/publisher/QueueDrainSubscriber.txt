Compiled from "QueueDrainSubscriber.java"
abstract class reactor.core.publisher.QueueDrainSubscriber<T, U, V> extends reactor.core.publisher.QueueDrainSubscriberPad4 implements reactor.core.publisher.InnerOperator<T, V> {
  final reactor.core.CoreSubscriber<? super V> actual;

  final java.util.Queue<U> queue;

  volatile boolean cancelled;

  volatile boolean done;

  java.lang.Throwable error;

  reactor.core.publisher.QueueDrainSubscriber(reactor.core.CoreSubscriber<? super V>, java.util.Queue<U>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/QueueDrainSubscriberPad4."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field queue:Ljava/util/Queue;
      14: return

  public reactor.core.CoreSubscriber<? super V> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public final boolean cancelled();
    Code:
       0: aload_0
       1: getfield      #4                  // Field cancelled:Z
       4: ireturn

  public final boolean done();
    Code:
       0: aload_0
       1: getfield      #5                  // Field done:Z
       4: ireturn

  public final boolean enter();
    Code:
       0: aload_0
       1: getfield      #6                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public final boolean fastEnter();
    Code:
       0: aload_0
       1: getfield      #6                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ifne          26
      10: aload_0
      11: getfield      #6                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
      14: iconst_0
      15: iconst_1
      16: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      19: ifeq          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  protected final void fastPathEmitMax(U, boolean, reactor.core.Disposable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: astore        4
       6: aload_0
       7: getfield      #3                  // Field queue:Ljava/util/Queue;
      10: astore        5
      12: aload_0
      13: getfield      #6                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
      16: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      19: ifne          103
      22: aload_0
      23: getfield      #6                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
      26: iconst_0
      27: iconst_1
      28: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      31: ifeq          103
      34: aload_0
      35: getfield      #10                 // Field requested:J
      38: lstore        6
      40: lload         6
      42: lconst_0
      43: lcmp
      44: ifeq          81
      47: aload_0
      48: aload         4
      50: aload_1
      51: invokevirtual #11                 // Method accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z
      54: ifeq          72
      57: lload         6
      59: ldc2_w        #13                 // long 9223372036854775807l
      62: lcmp
      63: ifeq          72
      66: aload_0
      67: lconst_1
      68: invokevirtual #15                 // Method produced:(J)J
      71: pop2
      72: aload_0
      73: iconst_m1
      74: invokevirtual #16                 // Method leave:(I)I
      77: ifne          100
      80: return
      81: aload_3
      82: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      87: aload         4
      89: ldc           #18                 // String Could not emit buffer due to lack of requests
      91: invokestatic  #19                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      94: invokeinterface #20,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      99: return
     100: goto          120
     103: aload         5
     105: aload_1
     106: invokeinterface #21,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     111: pop
     112: aload_0
     113: invokevirtual #22                 // Method enter:()Z
     116: ifne          120
     119: return
     120: aload         5
     122: aload         4
     124: iload_2
     125: aload_3
     126: aload_0
     127: invokestatic  #23                 // Method drainMaxLoop:(Ljava/util/Queue;Lorg/reactivestreams/Subscriber;ZLreactor/core/Disposable;Lreactor/core/publisher/QueueDrainSubscriber;)V
     130: return

  protected final void fastPathOrderedEmitMax(U, boolean, reactor.core.Disposable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: astore        4
       6: aload_0
       7: getfield      #3                  // Field queue:Ljava/util/Queue;
      10: astore        5
      12: aload_0
      13: getfield      #6                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
      16: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      19: ifne          130
      22: aload_0
      23: getfield      #6                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
      26: iconst_0
      27: iconst_1
      28: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      31: ifeq          130
      34: aload_0
      35: getfield      #10                 // Field requested:J
      38: lstore        6
      40: lload         6
      42: lconst_0
      43: lcmp
      44: ifeq          103
      47: aload         5
      49: invokeinterface #24,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      54: ifeq          91
      57: aload_0
      58: aload         4
      60: aload_1
      61: invokevirtual #11                 // Method accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z
      64: ifeq          82
      67: lload         6
      69: ldc2_w        #13                 // long 9223372036854775807l
      72: lcmp
      73: ifeq          82
      76: aload_0
      77: lconst_1
      78: invokevirtual #15                 // Method produced:(J)J
      81: pop2
      82: aload_0
      83: iconst_m1
      84: invokevirtual #16                 // Method leave:(I)I
      87: ifne          127
      90: return
      91: aload         5
      93: aload_1
      94: invokeinterface #21,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      99: pop
     100: goto          127
     103: aload_0
     104: iconst_1
     105: putfield      #4                  // Field cancelled:Z
     108: aload_3
     109: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
     114: aload         4
     116: ldc           #18                 // String Could not emit buffer due to lack of requests
     118: invokestatic  #19                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
     121: invokeinterface #20,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     126: return
     127: goto          147
     130: aload         5
     132: aload_1
     133: invokeinterface #21,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     138: pop
     139: aload_0
     140: invokevirtual #22                 // Method enter:()Z
     143: ifne          147
     146: return
     147: aload         5
     149: aload         4
     151: iload_2
     152: aload_3
     153: aload_0
     154: invokestatic  #23                 // Method drainMaxLoop:(Ljava/util/Queue;Lorg/reactivestreams/Subscriber;ZLreactor/core/Disposable;Lreactor/core/publisher/QueueDrainSubscriber;)V
     157: return

  public boolean accept(org.reactivestreams.Subscriber<? super V>, U);
    Code:
       0: iconst_0
       1: ireturn

  public final java.lang.Throwable error();
    Code:
       0: aload_0
       1: getfield      #25                 // Field error:Ljava/lang/Throwable;
       4: areturn

  public final int leave(int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
       4: iload_1
       5: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicInteger.addAndGet:(I)I
       8: ireturn

  public final long requested();
    Code:
       0: aload_0
       1: getfield      #10                 // Field requested:J
       4: lreturn

  public final long produced(long);
    Code:
       0: getstatic     #27                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: lload_1
       5: lneg
       6: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
       9: lreturn

  public final void requested(long);
    Code:
       0: lload_1
       1: invokestatic  #29                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          16
       7: getstatic     #27                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #30                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #31                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #5                  // Field done:Z
      11: invokestatic  #32                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aload_1
      16: getstatic     #33                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      19: if_acmpne     30
      22: aload_0
      23: getfield      #4                  // Field cancelled:Z
      26: invokestatic  #32                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      29: areturn
      30: aload_1
      31: getstatic     #34                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      34: if_acmpne     45
      37: aload_0
      38: getfield      #10                 // Field requested:J
      41: invokestatic  #35                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      44: areturn
      45: aload_1
      46: getstatic     #36                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      49: if_acmpne     57
      52: aload_0
      53: getfield      #25                 // Field error:Ljava/lang/Throwable;
      56: areturn
      57: aload_0
      58: aload_1
      59: invokespecial #37                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      62: areturn

  static <Q, S> void drainMaxLoop(java.util.Queue<Q>, org.reactivestreams.Subscriber<? super S>, boolean, reactor.core.Disposable, reactor.core.publisher.QueueDrainSubscriber<?, Q, S>);
    Code:
       0: iconst_1
       1: istore        5
       3: aload         4
       5: invokevirtual #38                 // Method done:()Z
       8: istore        6
      10: aload_0
      11: invokeinterface #39,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      16: astore        7
      18: aload         7
      20: ifnonnull     27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: istore        8
      30: iload         6
      32: iload         8
      34: aload_1
      35: iload_2
      36: aload_0
      37: aload         4
      39: invokestatic  #40                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;ZLjava/util/Queue;Lreactor/core/publisher/QueueDrainSubscriber;)Z
      42: ifeq          56
      45: aload_3
      46: ifnull        55
      49: aload_3
      50: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      55: return
      56: iload         8
      58: ifeq          64
      61: goto          139
      64: aload         4
      66: invokevirtual #41                 // Method requested:()J
      69: lstore        9
      71: lload         9
      73: lconst_0
      74: lcmp
      75: ifeq          108
      78: aload         4
      80: aload_1
      81: aload         7
      83: invokevirtual #11                 // Method accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z
      86: ifeq          136
      89: lload         9
      91: ldc2_w        #13                 // long 9223372036854775807l
      94: lcmp
      95: ifeq          136
      98: aload         4
     100: lconst_1
     101: invokevirtual #15                 // Method produced:(J)J
     104: pop2
     105: goto          136
     108: aload_0
     109: invokeinterface #42,  1           // InterfaceMethod java/util/Queue.clear:()V
     114: aload_3
     115: ifnull        124
     118: aload_3
     119: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
     124: aload_1
     125: ldc           #43                 // String Could not emit value due to lack of requests.
     127: invokestatic  #19                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
     130: invokeinterface #20,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     135: return
     136: goto          3
     139: aload         4
     141: iload         5
     143: ineg
     144: invokevirtual #16                 // Method leave:(I)I
     147: istore        5
     149: iload         5
     151: ifne          3
     154: goto          157
     157: return

  static <Q, S> boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>, boolean, java.util.Queue<?>, reactor.core.publisher.QueueDrainSubscriber<?, Q, S>);
    Code:
       0: aload         5
       2: invokevirtual #44                 // Method cancelled:()Z
       5: ifeq          17
       8: aload         4
      10: invokeinterface #42,  1           // InterfaceMethod java/util/Queue.clear:()V
      15: iconst_1
      16: ireturn
      17: iload_0
      18: ifeq          101
      21: iload_3
      22: ifeq          60
      25: iload_1
      26: ifeq          101
      29: aload         5
      31: invokevirtual #45                 // Method error:()Ljava/lang/Throwable;
      34: astore        6
      36: aload         6
      38: ifnull        52
      41: aload_2
      42: aload         6
      44: invokeinterface #20,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      49: goto          58
      52: aload_2
      53: invokeinterface #46,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      58: iconst_1
      59: ireturn
      60: aload         5
      62: invokevirtual #45                 // Method error:()Ljava/lang/Throwable;
      65: astore        6
      67: aload         6
      69: ifnull        89
      72: aload         4
      74: invokeinterface #42,  1           // InterfaceMethod java/util/Queue.clear:()V
      79: aload_2
      80: aload         6
      82: invokeinterface #20,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      87: iconst_1
      88: ireturn
      89: iload_1
      90: ifeq          101
      93: aload_2
      94: invokeinterface #46,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      99: iconst_1
     100: ireturn
     101: iconst_0
     102: ireturn
}
