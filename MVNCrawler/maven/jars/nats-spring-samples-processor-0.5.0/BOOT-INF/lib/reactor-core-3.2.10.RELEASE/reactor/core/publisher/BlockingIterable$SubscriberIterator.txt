Compiled from "BlockingIterable.java"
final class reactor.core.publisher.BlockingIterable$SubscriberIterator<T> implements reactor.core.publisher.InnerConsumer<T>, java.util.Iterator<T>, java.lang.Runnable {
  final java.util.Queue<T> queue;

  final int batchSize;

  final int limit;

  final java.util.concurrent.locks.Lock lock;

  final java.util.concurrent.locks.Condition condition;

  long produced;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.BlockingIterable$SubscriberIterator, org.reactivestreams.Subscription> S;

  volatile boolean done;

  java.lang.Throwable error;

  reactor.core.publisher.BlockingIterable$SubscriberIterator(java.util.Queue<T>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field queue:Ljava/util/Queue;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field batchSize:I
      14: aload_0
      15: iload_2
      16: invokestatic  #4                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      19: putfield      #5                  // Field limit:I
      22: aload_0
      23: new           #6                  // class java/util/concurrent/locks/ReentrantLock
      26: dup
      27: invokespecial #7                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      30: putfield      #8                  // Field lock:Ljava/util/concurrent/locks/Lock;
      33: aload_0
      34: aload_0
      35: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/Lock;
      38: invokeinterface #9,  1            // InterfaceMethod java/util/concurrent/locks/Lock.newCondition:()Ljava/util/concurrent/locks/Condition;
      43: putfield      #10                 // Field condition:Ljava/util/concurrent/locks/Condition;
      46: return

  public boolean hasNext();
    Code:
       0: invokestatic  #11                 // Method reactor/core/scheduler/Schedulers.isInNonBlockingThread:()Z
       3: ifeq          38
       6: new           #12                 // class java/lang/IllegalStateException
       9: dup
      10: new           #13                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #15                 // String Iterating over a toIterable() / toStream() is blocking, which is not supported in thread
      19: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: invokestatic  #17                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      25: invokevirtual #18                 // Method java/lang/Thread.getName:()Ljava/lang/String;
      28: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #20                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: aload_0
      39: getfield      #21                 // Field done:Z
      42: istore_1
      43: aload_0
      44: getfield      #2                  // Field queue:Ljava/util/Queue;
      47: invokeinterface #22,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      52: istore_2
      53: iload_1
      54: ifeq          77
      57: aload_0
      58: getfield      #23                 // Field error:Ljava/lang/Throwable;
      61: astore_3
      62: aload_3
      63: ifnull        71
      66: aload_3
      67: invokestatic  #24                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      70: athrow
      71: iload_2
      72: ifeq          77
      75: iconst_0
      76: ireturn
      77: iload_2
      78: ifeq          160
      81: aload_0
      82: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/Lock;
      85: invokeinterface #25,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      90: aload_0
      91: getfield      #21                 // Field done:Z
      94: ifne          121
      97: aload_0
      98: getfield      #2                  // Field queue:Ljava/util/Queue;
     101: invokeinterface #22,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     106: ifeq          121
     109: aload_0
     110: getfield      #10                 // Field condition:Ljava/util/concurrent/locks/Condition;
     113: invokeinterface #26,  1           // InterfaceMethod java/util/concurrent/locks/Condition.await:()V
     118: goto          90
     121: aload_0
     122: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/Lock;
     125: invokeinterface #27,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     130: goto          157
     133: astore_3
     134: aload_0
     135: invokevirtual #29                 // Method run:()V
     138: aload_3
     139: invokestatic  #24                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     142: athrow
     143: astore        4
     145: aload_0
     146: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/Lock;
     149: invokeinterface #27,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     154: aload         4
     156: athrow
     157: goto          162
     160: iconst_1
     161: ireturn
     162: goto          38
    Exception table:
       from    to  target type
          90   121   133   Class java/lang/InterruptedException
          90   121   143   any
         133   145   143   any

  public T next();
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method hasNext:()Z
       4: ifeq          77
       7: aload_0
       8: getfield      #2                  // Field queue:Ljava/util/Queue;
      11: invokeinterface #31,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      16: astore_1
      17: aload_1
      18: ifnonnull     35
      21: aload_0
      22: invokevirtual #29                 // Method run:()V
      25: new           #12                 // class java/lang/IllegalStateException
      28: dup
      29: ldc           #32                 // String Queue is empty: Expected one element to be available from the Reactive Streams source.
      31: invokespecial #20                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: getfield      #33                 // Field produced:J
      39: lconst_1
      40: ladd
      41: lstore_2
      42: lload_2
      43: aload_0
      44: getfield      #5                  // Field limit:I
      47: i2l
      48: lcmp
      49: ifne          70
      52: aload_0
      53: lconst_0
      54: putfield      #33                 // Field produced:J
      57: aload_0
      58: getfield      #34                 // Field s:Lorg/reactivestreams/Subscription;
      61: lload_2
      62: invokeinterface #35,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      67: goto          75
      70: aload_0
      71: lload_2
      72: putfield      #33                 // Field produced:J
      75: aload_1
      76: areturn
      77: new           #36                 // class java/util/NoSuchElementException
      80: dup
      81: invokespecial #37                 // Method java/util/NoSuchElementException."<init>":()V
      84: athrow

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #38                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #39                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          24
      11: aload_1
      12: aload_0
      13: getfield      #3                  // Field batchSize:I
      16: invokestatic  #40                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      19: invokeinterface #35,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      24: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field queue:Ljava/util/Queue;
       4: aload_1
       5: invokeinterface #41,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      10: ifne          42
      13: getstatic     #38                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      16: aload_0
      17: invokestatic  #42                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      20: pop
      21: aload_0
      22: aconst_null
      23: ldc           #44                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      25: invokestatic  #45                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      28: aload_1
      29: aload_0
      30: invokevirtual #46                 // Method currentContext:()Lreactor/util/context/Context;
      33: invokestatic  #47                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      36: invokevirtual #48                 // Method onError:(Ljava/lang/Throwable;)V
      39: goto          46
      42: aload_0
      43: invokevirtual #49                 // Method signalConsumer:()V
      46: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: iconst_1
       7: putfield      #21                 // Field done:Z
      10: aload_0
      11: invokevirtual #49                 // Method signalConsumer:()V
      14: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #21                 // Field done:Z
       5: aload_0
       6: invokevirtual #49                 // Method signalConsumer:()V
       9: return

  void signalConsumer();
    Code:
       0: aload_0
       1: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #25,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #10                 // Field condition:Ljava/util/concurrent/locks/Condition;
      13: invokeinterface #50,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V
      18: aload_0
      19: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/Lock;
      22: invokeinterface #27,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      27: goto          42
      30: astore_1
      31: aload_0
      32: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/Lock;
      35: invokeinterface #27,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      40: aload_1
      41: athrow
      42: return
    Exception table:
       from    to  target type
           9    18    30   any

  public void run();
    Code:
       0: getstatic     #38                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #42                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: aload_0
       9: invokevirtual #49                 // Method signalConsumer:()V
      12: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #51                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #21                 // Field done:Z
      11: invokestatic  #52                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aload_1
      16: getstatic     #53                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #34                 // Field s:Lorg/reactivestreams/Subscription;
      26: areturn
      27: aload_1
      28: getstatic     #54                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     53
      34: aload_0
      35: getfield      #34                 // Field s:Lorg/reactivestreams/Subscription;
      38: invokestatic  #55                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      41: if_acmpne     48
      44: iconst_1
      45: goto          49
      48: iconst_0
      49: invokestatic  #52                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      52: areturn
      53: aload_1
      54: getstatic     #56                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      57: if_acmpne     68
      60: aload_0
      61: getfield      #3                  // Field batchSize:I
      64: invokestatic  #57                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      67: areturn
      68: aload_1
      69: getstatic     #58                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      72: if_acmpne     80
      75: aload_0
      76: getfield      #23                 // Field error:Ljava/lang/Throwable;
      79: areturn
      80: aconst_null
      81: areturn

  static {};
    Code:
       0: ldc           #59                 // class reactor/core/publisher/BlockingIterable$SubscriberIterator
       2: ldc           #60                 // class org/reactivestreams/Subscription
       4: ldc           #61                 // String s
       6: invokestatic  #62                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #38                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
