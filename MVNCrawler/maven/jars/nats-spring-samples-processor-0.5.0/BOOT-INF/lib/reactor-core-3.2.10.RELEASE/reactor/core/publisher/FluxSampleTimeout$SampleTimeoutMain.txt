Compiled from "FluxSampleTimeout.java"
final class reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain<T, U> implements reactor.core.publisher.InnerOperator<T, T> {
  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<U>> throttler;

  final java.util.Queue<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutOther<T, U>> queue;

  final reactor.core.CoreSubscriber<? super T> actual;

  final reactor.util.context.Context ctx;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain, org.reactivestreams.Subscription> S;

  volatile org.reactivestreams.Subscription other;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain, org.reactivestreams.Subscription> OTHER;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain> REQUESTED;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain> WIP;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain, java.lang.Throwable> ERROR;

  volatile boolean done;

  volatile boolean cancelled;

  volatile long index;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain> INDEX;

  reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain(reactor.core.CoreSubscriber<? super T>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<U>>, java.util.Queue<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutOther<T, U>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_1
      11: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      16: putfield      #4                  // Field ctx:Lreactor/util/context/Context;
      19: aload_0
      20: aload_2
      21: putfield      #5                  // Field throttler:Ljava/util/function/Function;
      24: aload_0
      25: aload_3
      26: putfield      #6                  // Field queue:Ljava/util/Queue;
      29: return

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #7                  // Field other:Lorg/reactivestreams/Subscription;
       4: invokestatic  #8                  // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
       7: invokestatic  #9                  // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
      10: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #10                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #11                 // Field done:Z
      11: invokestatic  #12                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aload_1
      16: getstatic     #13                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      19: if_acmpne     30
      22: aload_0
      23: getfield      #14                 // Field cancelled:Z
      26: invokestatic  #12                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      29: areturn
      30: aload_1
      31: getstatic     #15                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      34: if_acmpne     42
      37: aload_0
      38: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
      41: areturn
      42: aload_1
      43: getstatic     #17                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      46: if_acmpne     54
      49: aload_0
      50: getfield      #18                 // Field error:Ljava/lang/Throwable;
      53: areturn
      54: aload_1
      55: getstatic     #19                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      58: if_acmpne     69
      61: aload_0
      62: getfield      #20                 // Field requested:J
      65: invokestatic  #21                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      68: areturn
      69: aload_1
      70: getstatic     #22                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      73: if_acmpne     89
      76: aload_0
      77: getfield      #6                  // Field queue:Ljava/util/Queue;
      80: invokeinterface #23,  1           // InterfaceMethod java/util/Queue.size:()I
      85: invokestatic  #24                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      88: areturn
      89: aload_0
      90: aload_1
      91: invokespecial #25                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      94: areturn

  public final reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #26                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          16
       7: getstatic     #27                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #28                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #14                 // Field cancelled:Z
       4: ifne          44
       7: aload_0
       8: iconst_1
       9: putfield      #14                 // Field cancelled:Z
      12: getstatic     #29                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: invokestatic  #30                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      19: pop
      20: getstatic     #31                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      23: aload_0
      24: invokestatic  #30                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      27: pop
      28: aload_0
      29: getfield      #6                  // Field queue:Ljava/util/Queue;
      32: aload_0
      33: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      36: invokedynamic #32,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      41: invokestatic  #33                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
      44: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #29                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #34                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          20
      11: aload_1
      12: ldc2_w        #36                 // long 9223372036854775807l
      15: invokeinterface #38,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      20: return

  public void onNext(T);
    Code:
       0: getstatic     #39                 // Field INDEX:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.incrementAndGet:(Ljava/lang/Object;)J
       7: lstore_2
       8: getstatic     #31                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      11: aload_0
      12: invokestatic  #41                 // Method reactor/core/publisher/Operators.emptySubscription:()Lorg/reactivestreams/Subscription;
      15: invokestatic  #42                 // Method reactor/core/publisher/Operators.set:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
      18: ifne          22
      21: return
      22: aload_0
      23: getfield      #5                  // Field throttler:Ljava/util/function/Function;
      26: aload_1
      27: invokeinterface #43,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      32: ldc           #44                 // String throttler returned a null publisher
      34: invokestatic  #45                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      37: checkcast     #46                 // class org/reactivestreams/Publisher
      40: astore        4
      42: goto          66
      45: astore        5
      47: aload_0
      48: aload_0
      49: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
      52: aload         5
      54: aload_1
      55: aload_0
      56: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      59: invokestatic  #48                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      62: invokevirtual #49                 // Method onError:(Ljava/lang/Throwable;)V
      65: return
      66: new           #50                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther
      69: dup
      70: aload_0
      71: aload_1
      72: lload_2
      73: invokespecial #51                 // Method reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther."<init>":(Lreactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain;Ljava/lang/Object;J)V
      76: astore        5
      78: getstatic     #31                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      81: aload_0
      82: aload         5
      84: invokestatic  #52                 // Method reactor/core/publisher/Operators.replace:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
      87: ifeq          99
      90: aload         4
      92: aload         5
      94: invokeinterface #53,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      99: return
    Exception table:
       from    to  target type
          22    42    45   Class java/lang/Throwable

  void error(java.lang.Throwable);
    Code:
       0: getstatic     #54                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #55                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          23
      11: aload_0
      12: iconst_1
      13: putfield      #11                 // Field done:Z
      16: aload_0
      17: invokevirtual #56                 // Method drain:()V
      20: goto          31
      23: aload_1
      24: aload_0
      25: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      28: invokestatic  #57                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      31: return

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #31                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #30                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: aload_0
       9: aload_1
      10: invokevirtual #58                 // Method error:(Ljava/lang/Throwable;)V
      13: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #7                  // Field other:Lorg/reactivestreams/Subscription;
       4: astore_1
       5: aload_1
       6: instanceof    #50                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther
       9: ifeq          25
      12: aload_1
      13: checkcast     #50                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther
      16: astore_2
      17: aload_2
      18: invokevirtual #59                 // Method reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther.cancel:()V
      21: aload_2
      22: invokevirtual #60                 // Method reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther.onComplete:()V
      25: aload_0
      26: iconst_1
      27: putfield      #11                 // Field done:Z
      30: aload_0
      31: invokevirtual #56                 // Method drain:()V
      34: return

  void otherNext(reactor.core.publisher.FluxSampleTimeout$SampleTimeoutOther<T, U>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field queue:Ljava/util/Queue;
       4: aload_1
       5: invokeinterface #61,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: invokevirtual #56                 // Method drain:()V
      15: return

  void otherError(long, java.lang.Throwable);
    Code:
       0: lload_1
       1: aload_0
       2: getfield      #62                 // Field index:J
       5: lcmp
       6: ifne          25
       9: getstatic     #29                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: aload_0
      13: invokestatic  #30                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      16: pop
      17: aload_0
      18: aload_3
      19: invokevirtual #58                 // Method error:(Ljava/lang/Throwable;)V
      22: goto          33
      25: aload_3
      26: aload_0
      27: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      30: invokestatic  #57                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      33: return

  void drain();
    Code:
       0: getstatic     #63                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #64                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      15: astore_1
      16: aload_0
      17: getfield      #6                  // Field queue:Ljava/util/Queue;
      20: astore_2
      21: iconst_1
      22: istore_3
      23: aload_0
      24: getfield      #11                 // Field done:Z
      27: istore        4
      29: aload_2
      30: invokeinterface #65,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      35: checkcast     #50                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther
      38: astore        5
      40: aload         5
      42: ifnonnull     49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: istore        6
      52: aload_0
      53: iload         4
      55: iload         6
      57: aload_1
      58: aload_2
      59: invokevirtual #66                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
      62: ifeq          66
      65: return
      66: iload         6
      68: ifeq          74
      71: goto          186
      74: aload         5
      76: getfield      #67                 // Field reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther.index:J
      79: aload_0
      80: getfield      #62                 // Field index:J
      83: lcmp
      84: ifne          183
      87: aload_0
      88: getfield      #20                 // Field requested:J
      91: lstore        7
      93: lload         7
      95: lconst_0
      96: lcmp
      97: ifeq          131
     100: aload_1
     101: aload         5
     103: getfield      #68                 // Field reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther.value:Ljava/lang/Object;
     106: invokeinterface #69,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     111: lload         7
     113: ldc2_w        #36                 // long 9223372036854775807l
     116: lcmp
     117: ifeq          183
     120: getstatic     #27                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     123: aload_0
     124: invokevirtual #70                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
     127: pop2
     128: goto          183
     131: aload_0
     132: invokevirtual #71                 // Method cancel:()V
     135: aload_2
     136: aload_0
     137: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     140: invokedynamic #32,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
     145: invokestatic  #33                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
     148: ldc           #72                 // String Could not emit value due to lack of requests
     150: invokestatic  #73                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
     153: astore        9
     155: getstatic     #54                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     158: aload_0
     159: aload         9
     161: invokestatic  #55                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
     164: pop
     165: getstatic     #54                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     168: aload_0
     169: invokestatic  #74                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
     172: astore        9
     174: aload_1
     175: aload         9
     177: invokeinterface #75,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     182: return
     183: goto          23
     186: getstatic     #63                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     189: aload_0
     190: iload_3
     191: ineg
     192: invokevirtual #76                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     195: istore_3
     196: iload_3
     197: ifne          23
     200: goto          203
     203: return

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>, java.util.Queue<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutOther<T, U>>);
    Code:
       0: aload_0
       1: getfield      #14                 // Field cancelled:Z
       4: ifeq          23
       7: aload         4
       9: aload_0
      10: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      13: invokedynamic #32,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      18: invokestatic  #33                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
      21: iconst_1
      22: ireturn
      23: iload_1
      24: ifeq          89
      27: getstatic     #54                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      30: aload_0
      31: invokestatic  #74                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      34: astore        5
      36: aload         5
      38: ifnull        77
      41: aload         5
      43: getstatic     #77                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      46: if_acmpeq     77
      49: aload_0
      50: invokevirtual #71                 // Method cancel:()V
      53: aload         4
      55: aload_0
      56: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      59: invokedynamic #32,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      64: invokestatic  #33                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
      67: aload_3
      68: aload         5
      70: invokeinterface #75,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      75: iconst_1
      76: ireturn
      77: iload_2
      78: ifeq          89
      81: aload_3
      82: invokeinterface #78,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      87: iconst_1
      88: ireturn
      89: iconst_0
      90: ireturn

  static {};
    Code:
       0: ldc           #79                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain
       2: ldc           #80                 // class org/reactivestreams/Subscription
       4: ldc           #81                 // String s
       6: invokestatic  #82                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #29                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #79                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain
      14: ldc           #80                 // class org/reactivestreams/Subscription
      16: ldc           #83                 // String other
      18: invokestatic  #82                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      21: putstatic     #31                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      24: ldc           #79                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain
      26: ldc           #84                 // String requested
      28: invokestatic  #85                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      31: putstatic     #27                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      34: ldc           #79                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain
      36: ldc           #86                 // String wip
      38: invokestatic  #87                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      41: putstatic     #63                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      44: ldc           #79                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain
      46: ldc           #47                 // class java/lang/Throwable
      48: ldc           #88                 // String error
      50: invokestatic  #82                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      53: putstatic     #54                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      56: ldc           #79                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain
      58: ldc           #89                 // String index
      60: invokestatic  #85                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      63: putstatic     #39                 // Field INDEX:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      66: return
}
