Compiled from "FluxPublishOn.java"
final class reactor.core.publisher.FluxPublishOn<T> extends reactor.core.publisher.FluxOperator<T, T> implements reactor.core.Fuseable {
  final reactor.core.scheduler.Scheduler scheduler;

  final boolean delayError;

  final java.util.function.Supplier<? extends java.util.Queue<T>> queueSupplier;

  final int prefetch;

  final int lowTide;

  reactor.core.publisher.FluxPublishOn(reactor.core.publisher.Flux<? extends T>, reactor.core.scheduler.Scheduler, boolean, int, int, java.util.function.Supplier<? extends java.util.Queue<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: iload         4
       7: ifgt          38
      10: new           #2                  // class java/lang/IllegalArgumentException
      13: dup
      14: new           #3                  // class java/lang/StringBuilder
      17: dup
      18: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #5                  // String prefetch > 0 required but it was
      23: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: iload         4
      28: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: aload_0
      39: aload_2
      40: ldc           #10                 // String scheduler
      42: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      45: checkcast     #12                 // class reactor/core/scheduler/Scheduler
      48: putfield      #13                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      51: aload_0
      52: iload_3
      53: putfield      #14                 // Field delayError:Z
      56: aload_0
      57: iload         4
      59: putfield      #15                 // Field prefetch:I
      62: aload_0
      63: iload         5
      65: putfield      #16                 // Field lowTide:I
      68: aload_0
      69: aload         6
      71: ldc           #17                 // String queueSupplier
      73: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      76: checkcast     #18                 // class java/util/function/Supplier
      79: putfield      #19                 // Field queueSupplier:Ljava/util/function/Supplier;
      82: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #20                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #13                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      11: areturn
      12: aload_0
      13: aload_1
      14: invokespecial #21                 // Method reactor/core/publisher/FluxOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      17: areturn

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #15                 // Field prefetch:I
       4: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #13                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
       4: invokeinterface #22,  1           // InterfaceMethod reactor/core/scheduler/Scheduler.createWorker:()Lreactor/core/scheduler/Scheduler$Worker;
       9: ldc           #23                 // String The scheduler returned a null worker
      11: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      14: checkcast     #24                 // class reactor/core/scheduler/Scheduler$Worker
      17: astore_2
      18: goto          37
      21: astore_3
      22: aload_1
      23: aload_3
      24: aload_1
      25: invokeinterface #26,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      30: invokestatic  #27                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      33: invokestatic  #28                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      36: return
      37: aload_1
      38: instanceof    #29                 // class reactor/core/Fuseable$ConditionalSubscriber
      41: ifeq          86
      44: aload_1
      45: checkcast     #29                 // class reactor/core/Fuseable$ConditionalSubscriber
      48: astore_3
      49: aload_0
      50: getfield      #30                 // Field source:Lreactor/core/publisher/Flux;
      53: new           #31                 // class reactor/core/publisher/FluxPublishOn$PublishOnConditionalSubscriber
      56: dup
      57: aload_3
      58: aload_0
      59: getfield      #13                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      62: aload_2
      63: aload_0
      64: getfield      #14                 // Field delayError:Z
      67: aload_0
      68: getfield      #15                 // Field prefetch:I
      71: aload_0
      72: getfield      #16                 // Field lowTide:I
      75: aload_0
      76: getfield      #19                 // Field queueSupplier:Ljava/util/function/Supplier;
      79: invokespecial #32                 // Method reactor/core/publisher/FluxPublishOn$PublishOnConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Lreactor/core/scheduler/Scheduler;Lreactor/core/scheduler/Scheduler$Worker;ZIILjava/util/function/Supplier;)V
      82: invokevirtual #33                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      85: return
      86: aload_0
      87: getfield      #30                 // Field source:Lreactor/core/publisher/Flux;
      90: new           #34                 // class reactor/core/publisher/FluxPublishOn$PublishOnSubscriber
      93: dup
      94: aload_1
      95: aload_0
      96: getfield      #13                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      99: aload_2
     100: aload_0
     101: getfield      #14                 // Field delayError:Z
     104: aload_0
     105: getfield      #15                 // Field prefetch:I
     108: aload_0
     109: getfield      #16                 // Field lowTide:I
     112: aload_0
     113: getfield      #19                 // Field queueSupplier:Ljava/util/function/Supplier;
     116: invokespecial #35                 // Method reactor/core/publisher/FluxPublishOn$PublishOnSubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/scheduler/Scheduler;Lreactor/core/scheduler/Scheduler$Worker;ZIILjava/util/function/Supplier;)V
     119: invokevirtual #33                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
     122: return
    Exception table:
       from    to  target type
           0    18    21   Class java/lang/Throwable
}
