Compiled from "FluxCancelOn.java"
final class reactor.core.publisher.FluxCancelOn<T> extends reactor.core.publisher.FluxOperator<T, T> {
  final reactor.core.scheduler.Scheduler scheduler;

  public reactor.core.publisher.FluxCancelOn(reactor.core.publisher.Flux<T>, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String scheduler
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class reactor/core/scheduler/Scheduler
      15: putfield      #5                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      18: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field source:Lreactor/core/publisher/Flux;
       4: new           #7                  // class reactor/core/publisher/FluxCancelOn$CancelSubscriber
       7: dup
       8: aload_1
       9: aload_0
      10: getfield      #5                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      13: invokespecial #8                  // Method reactor/core/publisher/FluxCancelOn$CancelSubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/scheduler/Scheduler;)V
      16: invokevirtual #9                  // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      19: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #10                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #5                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      11: areturn
      12: aload_0
      13: aload_1
      14: invokespecial #11                 // Method reactor/core/publisher/FluxOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      17: areturn
}
