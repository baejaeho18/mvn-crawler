Compiled from "MonoCallableOnAssembly.java"
final class reactor.core.publisher.MonoCallableOnAssembly<T> extends reactor.core.publisher.MonoOperator<T, T> implements java.util.concurrent.Callable<T>, reactor.core.publisher.AssemblyOp {
  final reactor.core.publisher.FluxOnAssembly$AssemblySnapshot stacktrace;

  reactor.core.publisher.MonoCallableOnAssembly(reactor.core.publisher.Mono<? extends T>, reactor.core.publisher.FluxOnAssembly$AssemblySnapshot);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
      10: return

  public T block();
    Code:
       0: aload_0
       1: getstatic     #3                  // Field java/time/Duration.ZERO:Ljava/time/Duration;
       4: invokevirtual #4                  // Method block:(Ljava/time/Duration;)Ljava/lang/Object;
       7: areturn

  public T block(java.time.Duration);
    Code:
       0: aload_0
       1: getfield      #5                  // Field source:Lreactor/core/publisher/Mono;
       4: checkcast     #6                  // class java/util/concurrent/Callable
       7: invokeinterface #7,  1            // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      12: areturn
      13: astore_2
      14: aload_2
      15: invokestatic  #9                  // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      18: athrow
    Exception table:
       from    to  target type
           0    12    13   Class java/lang/Throwable

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: instanceof    #10                 // class reactor/core/Fuseable$ConditionalSubscriber
       4: ifeq          38
       7: aload_1
       8: checkcast     #10                 // class reactor/core/Fuseable$ConditionalSubscriber
      11: astore_2
      12: aload_0
      13: getfield      #5                  // Field source:Lreactor/core/publisher/Mono;
      16: new           #11                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber
      19: dup
      20: aload_2
      21: aload_0
      22: getfield      #2                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
      25: aload_0
      26: getfield      #5                  // Field source:Lreactor/core/publisher/Mono;
      29: invokespecial #12                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;Lorg/reactivestreams/Publisher;)V
      32: invokevirtual #13                 // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      35: goto          61
      38: aload_0
      39: getfield      #5                  // Field source:Lreactor/core/publisher/Mono;
      42: new           #14                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber
      45: dup
      46: aload_1
      47: aload_0
      48: getfield      #2                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
      51: aload_0
      52: getfield      #5                  // Field source:Lreactor/core/publisher/Mono;
      55: invokespecial #15                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;Lorg/reactivestreams/Publisher;)V
      58: invokevirtual #13                 // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      61: return

  public T call() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #5                  // Field source:Lreactor/core/publisher/Mono;
       4: checkcast     #6                  // class java/util/concurrent/Callable
       7: invokeinterface #7,  1            // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      12: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #16                 // Field reactor/core/Scannable$Attr.ACTUAL_METADATA:Lreactor/core/Scannable$Attr;
       4: if_acmpne     26
       7: aload_0
       8: getfield      #2                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
      11: getfield      #17                 // Field reactor/core/publisher/FluxOnAssembly$AssemblySnapshot.checkpointed:Z
      14: ifne          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      25: areturn
      26: aload_0
      27: aload_1
      28: invokespecial #19                 // Method reactor/core/publisher/MonoOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      31: areturn

  public java.lang.String stepName();
    Code:
       0: aload_0
       1: getfield      #2                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
       4: invokevirtual #20                 // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshot.operatorAssemblyInformation:()Ljava/lang/String;
       7: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
       4: invokevirtual #20                 // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshot.operatorAssemblyInformation:()Ljava/lang/String;
       7: areturn
}
