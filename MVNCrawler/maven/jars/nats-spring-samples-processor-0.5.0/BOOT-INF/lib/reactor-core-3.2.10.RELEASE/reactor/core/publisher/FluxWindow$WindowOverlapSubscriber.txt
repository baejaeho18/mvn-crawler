Compiled from "FluxWindow.java"
final class reactor.core.publisher.FluxWindow$WindowOverlapSubscriber<T> extends java.util.ArrayDeque<reactor.core.publisher.UnicastProcessor<T>> implements reactor.core.Disposable, reactor.core.publisher.InnerOperator<T, reactor.core.publisher.Flux<T>> {
  final reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>> actual;

  final java.util.function.Supplier<? extends java.util.Queue<T>> processorQueueSupplier;

  final java.util.Queue<reactor.core.publisher.UnicastProcessor<T>> queue;

  final int size;

  final int skip;

  volatile int cancelled;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindow$WindowOverlapSubscriber> CANCELLED;

  volatile int windowCount;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindow$WindowOverlapSubscriber> WINDOW_COUNT;

  volatile int firstRequest;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindow$WindowOverlapSubscriber> FIRST_REQUEST;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxWindow$WindowOverlapSubscriber> REQUESTED;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindow$WindowOverlapSubscriber> WIP;

  int index;

  int produced;

  org.reactivestreams.Subscription s;

  volatile boolean done;

  java.lang.Throwable error;

  reactor.core.publisher.FluxWindow$WindowOverlapSubscriber(reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>>, int, int, java.util.function.Supplier<? extends java.util.Queue<T>>, java.util.Queue<reactor.core.publisher.UnicastProcessor<T>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/ArrayDeque."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field size:I
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field skip:I
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field processorQueueSupplier:Ljava/util/function/Supplier;
      25: getstatic     #6                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      28: aload_0
      29: iconst_1
      30: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.lazySet:(Ljava/lang/Object;I)V
      33: aload_0
      34: aload         5
      36: putfield      #8                  // Field queue:Ljava/util/Queue;
      39: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #10                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          26
      11: aload_0
      12: aload_1
      13: putfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #11,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #12                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #13,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #14                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: getfield      #15                 // Field index:I
      25: istore_2
      26: iload_2
      27: ifne          87
      30: aload_0
      31: getfield      #16                 // Field cancelled:I
      34: ifne          87
      37: getstatic     #6                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      40: aload_0
      41: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      44: pop
      45: new           #18                 // class reactor/core/publisher/UnicastProcessor
      48: dup
      49: aload_0
      50: getfield      #5                  // Field processorQueueSupplier:Ljava/util/function/Supplier;
      53: invokeinterface #19,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      58: checkcast     #20                 // class java/util/Queue
      61: aload_0
      62: invokespecial #21                 // Method reactor/core/publisher/UnicastProcessor."<init>":(Ljava/util/Queue;Lreactor/core/Disposable;)V
      65: astore_3
      66: aload_0
      67: aload_3
      68: invokevirtual #22                 // Method offer:(Ljava/lang/Object;)Z
      71: pop
      72: aload_0
      73: getfield      #8                  // Field queue:Ljava/util/Queue;
      76: aload_3
      77: invokeinterface #23,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      82: pop
      83: aload_0
      84: invokevirtual #24                 // Method drain:()V
      87: iinc          2, 1
      90: aload_0
      91: invokevirtual #25                 // Method iterator:()Ljava/util/Iterator;
      94: astore_3
      95: aload_3
      96: invokeinterface #26,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     101: ifeq          126
     104: aload_3
     105: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     110: checkcast     #28                 // class org/reactivestreams/Processor
     113: astore        4
     115: aload         4
     117: aload_1
     118: invokeinterface #29,  2           // InterfaceMethod org/reactivestreams/Processor.onNext:(Ljava/lang/Object;)V
     123: goto          95
     126: aload_0
     127: getfield      #30                 // Field produced:I
     130: iconst_1
     131: iadd
     132: istore_3
     133: iload_3
     134: aload_0
     135: getfield      #3                  // Field size:I
     138: if_icmpne     175
     141: aload_0
     142: iload_3
     143: aload_0
     144: getfield      #4                  // Field skip:I
     147: isub
     148: putfield      #30                 // Field produced:I
     151: aload_0
     152: invokevirtual #31                 // Method poll:()Ljava/lang/Object;
     155: checkcast     #28                 // class org/reactivestreams/Processor
     158: astore        4
     160: aload         4
     162: ifnull        172
     165: aload         4
     167: invokeinterface #32,  1           // InterfaceMethod org/reactivestreams/Processor.onComplete:()V
     172: goto          180
     175: aload_0
     176: iload_3
     177: putfield      #30                 // Field produced:I
     180: iload_2
     181: aload_0
     182: getfield      #4                  // Field skip:I
     185: if_icmpne     196
     188: aload_0
     189: iconst_0
     190: putfield      #15                 // Field index:I
     193: goto          201
     196: aload_0
     197: iload_2
     198: putfield      #15                 // Field index:I
     201: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #12                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #13,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #33                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: iconst_1
      23: putfield      #12                 // Field done:Z
      26: aload_0
      27: invokevirtual #25                 // Method iterator:()Ljava/util/Iterator;
      30: astore_2
      31: aload_2
      32: invokeinterface #26,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      37: ifeq          60
      40: aload_2
      41: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      46: checkcast     #28                 // class org/reactivestreams/Processor
      49: astore_3
      50: aload_3
      51: aload_1
      52: invokeinterface #34,  2           // InterfaceMethod org/reactivestreams/Processor.onError:(Ljava/lang/Throwable;)V
      57: goto          31
      60: aload_0
      61: invokevirtual #35                 // Method clear:()V
      64: aload_0
      65: aload_1
      66: putfield      #36                 // Field error:Ljava/lang/Throwable;
      69: aload_0
      70: invokevirtual #24                 // Method drain:()V
      73: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #12                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #12                 // Field done:Z
      13: aload_0
      14: invokevirtual #25                 // Method iterator:()Ljava/util/Iterator;
      17: astore_1
      18: aload_1
      19: invokeinterface #26,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          46
      27: aload_1
      28: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #28                 // class org/reactivestreams/Processor
      36: astore_2
      37: aload_2
      38: invokeinterface #32,  1           // InterfaceMethod org/reactivestreams/Processor.onComplete:()V
      43: goto          18
      46: aload_0
      47: invokevirtual #35                 // Method clear:()V
      50: aload_0
      51: invokevirtual #24                 // Method drain:()V
      54: return

  void drain();
    Code:
       0: getstatic     #37                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      15: astore_1
      16: aload_0
      17: getfield      #8                  // Field queue:Ljava/util/Queue;
      20: astore_2
      21: iconst_1
      22: istore_3
      23: aload_0
      24: getfield      #38                 // Field requested:J
      27: lstore        4
      29: lconst_0
      30: lstore        6
      32: lload         6
      34: lload         4
      36: lcmp
      37: ifeq          108
      40: aload_0
      41: getfield      #12                 // Field done:Z
      44: istore        8
      46: aload_2
      47: invokeinterface #39,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      52: checkcast     #18                 // class reactor/core/publisher/UnicastProcessor
      55: astore        9
      57: aload         9
      59: ifnonnull     66
      62: iconst_1
      63: goto          67
      66: iconst_0
      67: istore        10
      69: aload_0
      70: iload         8
      72: iload         10
      74: aload_1
      75: aload_2
      76: invokevirtual #40                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
      79: ifeq          83
      82: return
      83: iload         10
      85: ifeq          91
      88: goto          108
      91: aload_1
      92: aload         9
      94: invokeinterface #41,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      99: lload         6
     101: lconst_1
     102: ladd
     103: lstore        6
     105: goto          32
     108: lload         6
     110: lload         4
     112: lcmp
     113: ifne          136
     116: aload_0
     117: aload_0
     118: getfield      #12                 // Field done:Z
     121: aload_2
     122: invokeinterface #42,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     127: aload_1
     128: aload_2
     129: invokevirtual #40                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
     132: ifeq          136
     135: return
     136: lload         6
     138: lconst_0
     139: lcmp
     140: ifeq          163
     143: lload         4
     145: ldc2_w        #44                 // long 9223372036854775807l
     148: lcmp
     149: ifeq          163
     152: getstatic     #46                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     155: aload_0
     156: lload         6
     158: lneg
     159: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
     162: pop2
     163: getstatic     #37                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     166: aload_0
     167: iload_3
     168: ineg
     169: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     172: istore_3
     173: iload_3
     174: ifne          180
     177: goto          183
     180: goto          23
     183: return

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>, java.util.Queue<?>);
    Code:
       0: aload_0
       1: getfield      #16                 // Field cancelled:I
       4: iconst_1
       5: if_icmpne     17
       8: aload         4
      10: invokeinterface #49,  1           // InterfaceMethod java/util/Queue.clear:()V
      15: iconst_1
      16: ireturn
      17: iload_1
      18: ifeq          61
      21: aload_0
      22: getfield      #36                 // Field error:Ljava/lang/Throwable;
      25: astore        5
      27: aload         5
      29: ifnull        49
      32: aload         4
      34: invokeinterface #49,  1           // InterfaceMethod java/util/Queue.clear:()V
      39: aload_3
      40: aload         5
      42: invokeinterface #50,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      47: iconst_1
      48: ireturn
      49: iload_2
      50: ifeq          61
      53: aload_3
      54: invokeinterface #51,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      59: iconst_1
      60: ireturn
      61: iconst_0
      62: ireturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #52                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          96
       7: getstatic     #46                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #53                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: getfield      #54                 // Field firstRequest:I
      20: ifne          72
      23: getstatic     #55                 // Field FIRST_REQUEST:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      26: aload_0
      27: iconst_0
      28: iconst_1
      29: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      32: ifeq          72
      35: aload_0
      36: getfield      #4                  // Field skip:I
      39: i2l
      40: lload_1
      41: lconst_1
      42: lsub
      43: invokestatic  #57                 // Method reactor/core/publisher/Operators.multiplyCap:(JJ)J
      46: lstore_3
      47: aload_0
      48: getfield      #3                  // Field size:I
      51: i2l
      52: lload_3
      53: invokestatic  #58                 // Method reactor/core/publisher/Operators.addCap:(JJ)J
      56: lstore        5
      58: aload_0
      59: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
      62: lload         5
      64: invokeinterface #59,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      69: goto          92
      72: aload_0
      73: getfield      #4                  // Field skip:I
      76: i2l
      77: lload_1
      78: invokestatic  #57                 // Method reactor/core/publisher/Operators.multiplyCap:(JJ)J
      81: lstore_3
      82: aload_0
      83: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
      86: lload_3
      87: invokeinterface #59,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      92: aload_0
      93: invokevirtual #24                 // Method drain:()V
      96: return

  public void cancel();
    Code:
       0: getstatic     #60                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          16
      12: aload_0
      13: invokevirtual #61                 // Method dispose:()V
      16: return

  public void dispose();
    Code:
       0: getstatic     #6                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #62                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
       7: ifne          19
      10: aload_0
      11: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
      14: invokeinterface #63,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      19: return

  public reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #16                 // Field cancelled:I
       4: iconst_1
       5: if_icmpeq     15
       8: aload_0
       9: getfield      #12                 // Field done:Z
      12: ifeq          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #64                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #65                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     36
      19: aload_0
      20: getfield      #16                 // Field cancelled:I
      23: iconst_1
      24: if_icmpne     31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: invokestatic  #66                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      35: areturn
      36: aload_1
      37: getstatic     #67                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      40: if_acmpne     51
      43: aload_0
      44: getfield      #3                  // Field size:I
      47: invokestatic  #68                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      50: areturn
      51: aload_1
      52: getstatic     #69                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      55: if_acmpne     66
      58: aload_0
      59: getfield      #12                 // Field done:Z
      62: invokestatic  #66                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      65: areturn
      66: aload_1
      67: getstatic     #70                 // Field reactor/core/Scannable$Attr.LARGE_BUFFERED:Lreactor/core/Scannable$Attr;
      70: if_acmpne     93
      73: aload_0
      74: getfield      #8                  // Field queue:Ljava/util/Queue;
      77: invokeinterface #71,  1           // InterfaceMethod java/util/Queue.size:()I
      82: i2l
      83: aload_0
      84: invokevirtual #72                 // Method size:()I
      87: i2l
      88: ladd
      89: invokestatic  #73                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      92: areturn
      93: aload_1
      94: getstatic     #74                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      97: if_acmpne     137
     100: aload_0
     101: getfield      #8                  // Field queue:Ljava/util/Queue;
     104: invokeinterface #71,  1           // InterfaceMethod java/util/Queue.size:()I
     109: i2l
     110: aload_0
     111: invokevirtual #72                 // Method size:()I
     114: i2l
     115: ladd
     116: lstore_2
     117: lload_2
     118: ldc2_w        #76                 // long 2147483647l
     121: lcmp
     122: ifge          131
     125: lload_2
     126: l2i
     127: invokestatic  #68                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     130: areturn
     131: ldc           #78                 // int -2147483648
     133: invokestatic  #68                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     136: areturn
     137: aload_1
     138: getstatic     #79                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
     141: if_acmpne     149
     144: aload_0
     145: getfield      #36                 // Field error:Ljava/lang/Throwable;
     148: areturn
     149: aload_1
     150: getstatic     #80                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
     153: if_acmpne     164
     156: aload_0
     157: getfield      #38                 // Field requested:J
     160: invokestatic  #73                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     163: areturn
     164: aload_0
     165: aload_1
     166: invokespecial #81                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     169: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: invokevirtual #82                 // Method toArray:()[Ljava/lang/Object;
       4: invokestatic  #83                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: invokedynamic #84,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      12: invokeinterface #85,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      17: areturn

  static {};
    Code:
       0: ldc           #86                 // class reactor/core/publisher/FluxWindow$WindowOverlapSubscriber
       2: ldc           #87                 // String cancelled
       4: invokestatic  #88                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #60                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #86                 // class reactor/core/publisher/FluxWindow$WindowOverlapSubscriber
      12: ldc           #89                 // String windowCount
      14: invokestatic  #88                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      17: putstatic     #6                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      20: ldc           #86                 // class reactor/core/publisher/FluxWindow$WindowOverlapSubscriber
      22: ldc           #90                 // String firstRequest
      24: invokestatic  #88                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      27: putstatic     #55                 // Field FIRST_REQUEST:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      30: ldc           #86                 // class reactor/core/publisher/FluxWindow$WindowOverlapSubscriber
      32: ldc           #91                 // String requested
      34: invokestatic  #92                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      37: putstatic     #46                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      40: ldc           #86                 // class reactor/core/publisher/FluxWindow$WindowOverlapSubscriber
      42: ldc           #93                 // String wip
      44: invokestatic  #88                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      47: putstatic     #37                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      50: return
}
