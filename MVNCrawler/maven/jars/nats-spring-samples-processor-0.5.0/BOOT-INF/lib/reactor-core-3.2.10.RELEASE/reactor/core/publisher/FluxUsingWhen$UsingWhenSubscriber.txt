Compiled from "FluxUsingWhen.java"
class reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber<T, S> implements reactor.core.publisher.FluxUsingWhen$UsingWhenParent<T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber, org.reactivestreams.Subscription> SUBSCRIPTION;

  final S resource;

  final java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>> asyncComplete;

  final java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>> asyncError;

  final java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>> asyncCancel;

  final reactor.core.publisher.Operators$DeferredSubscription arbiter;

  volatile int callbackApplied;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber> CALLBACK_APPLIED;

  java.lang.Throwable error;

  reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber(reactor.core.CoreSubscriber<? super T>, S, java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>>, reactor.core.publisher.Operators$DeferredSubscription);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field resource:Ljava/lang/Object;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field asyncComplete:Ljava/util/function/Function;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field asyncError:Ljava/util/function/Function;
      25: aload_0
      26: aload         5
      28: putfield      #6                  // Field asyncCancel:Ljava/util/function/Function;
      31: aload_0
      32: aload         6
      34: putfield      #7                  // Field arbiter:Lreactor/core/publisher/Operators$DeferredSubscription;
      37: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #8                  // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     23
       7: aload_0
       8: getfield      #9                  // Field error:Ljava/lang/Throwable;
      11: ifnull        18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: invokestatic  #10                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      22: areturn
      23: aload_1
      24: getstatic     #11                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      27: if_acmpne     49
      30: aload_0
      31: getfield      #9                  // Field error:Ljava/lang/Throwable;
      34: getstatic     #12                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      37: if_acmpne     44
      40: aconst_null
      41: goto          48
      44: aload_0
      45: getfield      #9                  // Field error:Ljava/lang/Throwable;
      48: areturn
      49: aload_1
      50: getstatic     #13                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      53: if_acmpne     75
      56: aload_0
      57: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
      60: invokestatic  #15                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      63: if_acmpne     70
      66: iconst_1
      67: goto          71
      70: iconst_0
      71: invokestatic  #10                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      74: areturn
      75: aload_1
      76: getstatic     #16                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      79: if_acmpne     87
      82: aload_0
      83: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
      86: areturn
      87: aload_0
      88: aload_1
      89: invokespecial #17                 // InterfaceMethod reactor/core/publisher/FluxUsingWhen$UsingWhenParent.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      92: areturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #18                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          17
       7: aload_0
       8: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
      11: lload_1
      12: invokeinterface #19,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      17: return

  public void cancel();
    Code:
       0: getstatic     #20                 // Field CALLBACK_APPLIED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          109
      12: getstatic     #22                 // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: invokestatic  #23                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      19: ifeq          109
      22: aload_0
      23: getfield      #6                  // Field asyncCancel:Ljava/util/function/Function;
      26: ifnull        62
      29: aload_0
      30: getfield      #6                  // Field asyncCancel:Ljava/util/function/Function;
      33: aload_0
      34: getfield      #3                  // Field resource:Ljava/lang/Object;
      37: invokeinterface #24,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      42: checkcast     #25                 // class org/reactivestreams/Publisher
      45: invokestatic  #26                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      48: new           #27                 // class reactor/core/publisher/FluxUsingWhen$CancelInner
      51: dup
      52: aload_0
      53: invokespecial #28                 // Method reactor/core/publisher/FluxUsingWhen$CancelInner."<init>":(Lreactor/core/publisher/FluxUsingWhen$UsingWhenParent;)V
      56: invokevirtual #29                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      59: goto          92
      62: aload_0
      63: getfield      #4                  // Field asyncComplete:Ljava/util/function/Function;
      66: aload_0
      67: getfield      #3                  // Field resource:Ljava/lang/Object;
      70: invokeinterface #24,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      75: checkcast     #25                 // class org/reactivestreams/Publisher
      78: invokestatic  #26                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      81: new           #27                 // class reactor/core/publisher/FluxUsingWhen$CancelInner
      84: dup
      85: aload_0
      86: invokespecial #28                 // Method reactor/core/publisher/FluxUsingWhen$CancelInner."<init>":(Lreactor/core/publisher/FluxUsingWhen$UsingWhenParent;)V
      89: invokevirtual #29                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      92: goto          109
      95: astore_1
      96: ldc           #31                 // class reactor/core/publisher/FluxUsingWhen
      98: invokestatic  #32                 // Method reactor/util/Loggers.getLogger:(Ljava/lang/Class;)Lreactor/util/Logger;
     101: ldc           #33                 // String Error generating async resource cleanup during onCancel
     103: aload_1
     104: invokeinterface #34,  3           // InterfaceMethod reactor/util/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
     109: return
    Exception table:
       from    to  target type
          22    92    95   Class java/lang/Throwable

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #35,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      10: return

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #20                 // Field CALLBACK_APPLIED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          88
      12: aload_0
      13: getfield      #5                  // Field asyncError:Ljava/util/function/Function;
      16: aload_0
      17: getfield      #3                  // Field resource:Ljava/lang/Object;
      20: invokeinterface #24,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      25: ldc           #36                 // String The asyncError returned a null Publisher
      27: invokestatic  #37                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      30: checkcast     #25                 // class org/reactivestreams/Publisher
      33: astore_2
      34: goto          73
      37: astore_3
      38: aload_3
      39: aload_0
      40: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      43: invokeinterface #38,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      48: invokestatic  #39                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      51: astore        4
      53: aload         4
      55: aload_1
      56: invokestatic  #40                 // Method reactor/core/Exceptions.addSuppressed:(Ljava/lang/Throwable;Ljava/lang/Throwable;)Ljava/lang/Throwable;
      59: astore        4
      61: aload_0
      62: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      65: aload         4
      67: invokeinterface #41,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      72: return
      73: aload_2
      74: new           #42                 // class reactor/core/publisher/FluxUsingWhen$RollbackInner
      77: dup
      78: aload_0
      79: aload_1
      80: invokespecial #43                 // Method reactor/core/publisher/FluxUsingWhen$RollbackInner."<init>":(Lreactor/core/publisher/FluxUsingWhen$UsingWhenParent;Ljava/lang/Throwable;)V
      83: invokeinterface #44,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      88: return
    Exception table:
       from    to  target type
          12    34    37   Class java/lang/Throwable

  public void onComplete();
    Code:
       0: getstatic     #20                 // Field CALLBACK_APPLIED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          77
      12: aload_0
      13: getfield      #4                  // Field asyncComplete:Ljava/util/function/Function;
      16: aload_0
      17: getfield      #3                  // Field resource:Ljava/lang/Object;
      20: invokeinterface #24,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      25: ldc           #45                 // String The asyncComplete returned a null Publisher
      27: invokestatic  #37                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      30: checkcast     #25                 // class org/reactivestreams/Publisher
      33: astore_1
      34: goto          63
      37: astore_2
      38: aload_2
      39: aload_0
      40: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      43: invokeinterface #38,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      48: invokestatic  #39                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      51: astore_3
      52: aload_0
      53: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      56: aload_3
      57: invokeinterface #41,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      62: return
      63: aload_1
      64: new           #46                 // class reactor/core/publisher/FluxUsingWhen$CommitInner
      67: dup
      68: aload_0
      69: invokespecial #47                 // Method reactor/core/publisher/FluxUsingWhen$CommitInner."<init>":(Lreactor/core/publisher/FluxUsingWhen$UsingWhenParent;)V
      72: invokeinterface #44,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      77: return
    Exception table:
       from    to  target type
          12    34    37   Class java/lang/Throwable

  public void deferredComplete();
    Code:
       0: aload_0
       1: getstatic     #12                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
       4: putfield      #9                  // Field error:Ljava/lang/Throwable;
       7: aload_0
       8: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      11: invokeinterface #48,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      16: return

  public void deferredError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_1
      10: invokeinterface #41,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      15: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #49                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          45
      11: aload_0
      12: aload_1
      13: putfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #7                  // Field arbiter:Lreactor/core/publisher/Operators$DeferredSubscription;
      20: ifnonnull     36
      23: aload_0
      24: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      27: aload_0
      28: invokeinterface #50,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      33: goto          45
      36: aload_0
      37: getfield      #7                  // Field arbiter:Lreactor/core/publisher/Operators$DeferredSubscription;
      40: aload_1
      41: invokevirtual #51                 // Method reactor/core/publisher/Operators$DeferredSubscription.set:(Lorg/reactivestreams/Subscription;)Z
      44: pop
      45: return

  static {};
    Code:
       0: ldc           #52                 // class reactor/core/publisher/FluxUsingWhen$UsingWhenSubscriber
       2: ldc           #53                 // class org/reactivestreams/Subscription
       4: ldc           #54                 // String s
       6: invokestatic  #55                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #22                 // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #52                 // class reactor/core/publisher/FluxUsingWhen$UsingWhenSubscriber
      14: ldc           #56                 // String callbackApplied
      16: invokestatic  #57                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: putstatic     #20                 // Field CALLBACK_APPLIED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: return
}
