Compiled from "FluxSample.java"
final class reactor.core.publisher.FluxSample$SampleOther<T, U> implements reactor.core.publisher.InnerConsumer<U> {
  final reactor.core.publisher.FluxSample$SampleMainSubscriber<T> main;

  reactor.core.publisher.FluxSample$SampleOther(reactor.core.publisher.FluxSample$SampleMainSubscriber<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field main:Lreactor/core/publisher/FluxSample$SampleMainSubscriber;
       9: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #3                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #2                  // Field main:Lreactor/core/publisher/FluxSample$SampleMainSubscriber;
      11: getfield      #4                  // Field reactor/core/publisher/FluxSample$SampleMainSubscriber.other:Lorg/reactivestreams/Subscription;
      14: areturn
      15: aload_1
      16: getstatic     #5                  // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #2                  // Field main:Lreactor/core/publisher/FluxSample$SampleMainSubscriber;
      26: areturn
      27: aload_1
      28: getstatic     #6                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     56
      34: aload_0
      35: getfield      #2                  // Field main:Lreactor/core/publisher/FluxSample$SampleMainSubscriber;
      38: getfield      #4                  // Field reactor/core/publisher/FluxSample$SampleMainSubscriber.other:Lorg/reactivestreams/Subscription;
      41: invokestatic  #7                  // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      44: if_acmpne     51
      47: iconst_1
      48: goto          52
      51: iconst_0
      52: invokestatic  #8                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      55: areturn
      56: aload_1
      57: getstatic     #9                  // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      60: if_acmpne     69
      63: ldc           #11                 // int 2147483647
      65: invokestatic  #12                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      68: areturn
      69: aconst_null
      70: areturn

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field main:Lreactor/core/publisher/FluxSample$SampleMainSubscriber;
       4: invokevirtual #13                 // Method reactor/core/publisher/FluxSample$SampleMainSubscriber.currentContext:()Lreactor/util/context/Context;
       7: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #2                  // Field main:Lreactor/core/publisher/FluxSample$SampleMainSubscriber;
       4: aload_1
       5: invokevirtual #14                 // Method reactor/core/publisher/FluxSample$SampleMainSubscriber.setOther:(Lorg/reactivestreams/Subscription;)V
       8: return

  public void onNext(U);
    Code:
       0: aload_0
       1: getfield      #2                  // Field main:Lreactor/core/publisher/FluxSample$SampleMainSubscriber;
       4: astore_2
       5: aload_2
       6: invokevirtual #15                 // Method reactor/core/publisher/FluxSample$SampleMainSubscriber.getAndNullValue:()Ljava/lang/Object;
       9: astore_3
      10: aload_3
      11: ifnull        75
      14: aload_2
      15: getfield      #16                 // Field reactor/core/publisher/FluxSample$SampleMainSubscriber.requested:J
      18: lconst_0
      19: lcmp
      20: ifeq          49
      23: aload_2
      24: getfield      #17                 // Field reactor/core/publisher/FluxSample$SampleMainSubscriber.actual:Lreactor/core/CoreSubscriber;
      27: aload_3
      28: invokeinterface #18,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      33: aload_2
      34: getfield      #16                 // Field reactor/core/publisher/FluxSample$SampleMainSubscriber.requested:J
      37: ldc2_w        #20                 // long 9223372036854775807l
      40: lcmp
      41: ifeq          48
      44: aload_2
      45: invokevirtual #22                 // Method reactor/core/publisher/FluxSample$SampleMainSubscriber.decrement:()V
      48: return
      49: aload_2
      50: invokevirtual #23                 // Method reactor/core/publisher/FluxSample$SampleMainSubscriber.cancel:()V
      53: aload_2
      54: getfield      #17                 // Field reactor/core/publisher/FluxSample$SampleMainSubscriber.actual:Lreactor/core/CoreSubscriber;
      57: ldc           #24                 // String Can\'t signal value due to lack of requests
      59: invokestatic  #25                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      62: invokeinterface #26,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      67: aload_3
      68: aload_2
      69: getfield      #27                 // Field reactor/core/publisher/FluxSample$SampleMainSubscriber.ctx:Lreactor/util/context/Context;
      72: invokestatic  #28                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      75: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field main:Lreactor/core/publisher/FluxSample$SampleMainSubscriber;
       4: astore_2
       5: aload_2
       6: invokevirtual #29                 // Method reactor/core/publisher/FluxSample$SampleMainSubscriber.cancelMain:()V
       9: aload_2
      10: getfield      #17                 // Field reactor/core/publisher/FluxSample$SampleMainSubscriber.actual:Lreactor/core/CoreSubscriber;
      13: aload_1
      14: invokeinterface #26,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      19: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field main:Lreactor/core/publisher/FluxSample$SampleMainSubscriber;
       4: astore_1
       5: aload_1
       6: invokevirtual #29                 // Method reactor/core/publisher/FluxSample$SampleMainSubscriber.cancelMain:()V
       9: aload_1
      10: getfield      #17                 // Field reactor/core/publisher/FluxSample$SampleMainSubscriber.actual:Lreactor/core/CoreSubscriber;
      13: invokeinterface #30,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      18: return
}
