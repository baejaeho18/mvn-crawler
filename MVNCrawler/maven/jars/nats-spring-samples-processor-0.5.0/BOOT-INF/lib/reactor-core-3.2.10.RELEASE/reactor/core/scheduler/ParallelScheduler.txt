Compiled from "ParallelScheduler.java"
final class reactor.core.scheduler.ParallelScheduler implements reactor.core.scheduler.Scheduler, java.util.function.Supplier<java.util.concurrent.ScheduledExecutorService>, reactor.core.Scannable {
  static final java.util.concurrent.atomic.AtomicLong COUNTER;

  final int n;

  final java.util.concurrent.ThreadFactory factory;

  volatile java.util.concurrent.ScheduledExecutorService[] executors;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.scheduler.ParallelScheduler, java.util.concurrent.ScheduledExecutorService[]> EXECUTORS;

  static final java.util.concurrent.ScheduledExecutorService[] SHUTDOWN;

  static final java.util.concurrent.ScheduledExecutorService TERMINATED;

  int roundRobin;

  reactor.core.scheduler.ParallelScheduler(int, java.util.concurrent.ThreadFactory);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: iload_1
       5: ifgt          35
       8: new           #2                  // class java/lang/IllegalArgumentException
      11: dup
      12: new           #3                  // class java/lang/StringBuilder
      15: dup
      16: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #5                  // String n > 0 required but it was
      21: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_1
      25: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: iload_1
      37: putfield      #10                 // Field n:I
      40: aload_0
      41: aload_2
      42: putfield      #11                 // Field factory:Ljava/util/concurrent/ThreadFactory;
      45: aload_0
      46: iload_1
      47: invokevirtual #12                 // Method init:(I)V
      50: return

  public java.util.concurrent.ScheduledExecutorService get();
    Code:
       0: new           #13                 // class java/util/concurrent/ScheduledThreadPoolExecutor
       3: dup
       4: iconst_1
       5: aload_0
       6: getfield      #11                 // Field factory:Ljava/util/concurrent/ThreadFactory;
       9: invokespecial #14                 // Method java/util/concurrent/ScheduledThreadPoolExecutor."<init>":(ILjava/util/concurrent/ThreadFactory;)V
      12: astore_1
      13: aload_1
      14: iconst_1
      15: invokevirtual #15                 // Method java/util/concurrent/ScheduledThreadPoolExecutor.setMaximumPoolSize:(I)V
      18: aload_1
      19: iconst_1
      20: invokevirtual #16                 // Method java/util/concurrent/ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy:(Z)V
      23: aload_1
      24: areturn

  void init(int);
    Code:
       0: iload_1
       1: anewarray     #17                 // class java/util/concurrent/ScheduledExecutorService
       4: astore_2
       5: iconst_0
       6: istore_3
       7: iload_3
       8: iload_1
       9: if_icmpge     29
      12: aload_2
      13: iload_3
      14: aload_0
      15: aload_0
      16: invokevirtual #18                 // Method get:()Ljava/util/concurrent/ScheduledExecutorService;
      19: invokestatic  #19                 // Method reactor/core/scheduler/Schedulers.decorateExecutorService:(Lreactor/core/scheduler/Scheduler;Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;
      22: aastore
      23: iinc          3, 1
      26: goto          7
      29: getstatic     #20                 // Field EXECUTORS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      32: aload_0
      33: aload_2
      34: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      37: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #22                 // Field executors:[Ljava/util/concurrent/ScheduledExecutorService;
       4: getstatic     #23                 // Field SHUTDOWN:[Ljava/util/concurrent/ScheduledExecutorService;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void start();
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #22                 // Field executors:[Ljava/util/concurrent/ScheduledExecutorService;
       6: astore_2
       7: aload_2
       8: getstatic     #23                 // Field SHUTDOWN:[Ljava/util/concurrent/ScheduledExecutorService;
      11: if_acmpeq     55
      14: aload_1
      15: ifnull        54
      18: aload_1
      19: astore_3
      20: aload_3
      21: arraylength
      22: istore        4
      24: iconst_0
      25: istore        5
      27: iload         5
      29: iload         4
      31: if_icmpge     54
      34: aload_3
      35: iload         5
      37: aaload
      38: astore        6
      40: aload         6
      42: invokeinterface #24,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdownNow:()Ljava/util/List;
      47: pop
      48: iinc          5, 1
      51: goto          27
      54: return
      55: aload_1
      56: ifnonnull     94
      59: aload_0
      60: getfield      #10                 // Field n:I
      63: anewarray     #17                 // class java/util/concurrent/ScheduledExecutorService
      66: astore_1
      67: iconst_0
      68: istore_3
      69: iload_3
      70: aload_0
      71: getfield      #10                 // Field n:I
      74: if_icmpge     94
      77: aload_1
      78: iload_3
      79: aload_0
      80: aload_0
      81: invokevirtual #18                 // Method get:()Ljava/util/concurrent/ScheduledExecutorService;
      84: invokestatic  #19                 // Method reactor/core/scheduler/Schedulers.decorateExecutorService:(Lreactor/core/scheduler/Scheduler;Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;
      87: aastore
      88: iinc          3, 1
      91: goto          69
      94: getstatic     #20                 // Field EXECUTORS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      97: aload_0
      98: aload_2
      99: aload_1
     100: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     103: ifeq          107
     106: return
     107: goto          2

  public void dispose();
    Code:
       0: aload_0
       1: getfield      #22                 // Field executors:[Ljava/util/concurrent/ScheduledExecutorService;
       4: astore_1
       5: aload_1
       6: getstatic     #23                 // Field SHUTDOWN:[Ljava/util/concurrent/ScheduledExecutorService;
       9: if_acmpeq     67
      12: getstatic     #20                 // Field EXECUTORS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: getstatic     #23                 // Field SHUTDOWN:[Ljava/util/concurrent/ScheduledExecutorService;
      19: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #27                 // class "[Ljava/util/concurrent/ScheduledExecutorService;"
      25: astore_1
      26: aload_1
      27: getstatic     #23                 // Field SHUTDOWN:[Ljava/util/concurrent/ScheduledExecutorService;
      30: if_acmpeq     67
      33: aload_1
      34: astore_2
      35: aload_2
      36: arraylength
      37: istore_3
      38: iconst_0
      39: istore        4
      41: iload         4
      43: iload_3
      44: if_icmpge     67
      47: aload_2
      48: iload         4
      50: aaload
      51: astore        5
      53: aload         5
      55: invokeinterface #24,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdownNow:()Ljava/util/List;
      60: pop
      61: iinc          4, 1
      64: goto          41
      67: return

  java.util.concurrent.ScheduledExecutorService pick();
    Code:
       0: aload_0
       1: getfield      #22                 // Field executors:[Ljava/util/concurrent/ScheduledExecutorService;
       4: astore_1
       5: aload_1
       6: getstatic     #23                 // Field SHUTDOWN:[Ljava/util/concurrent/ScheduledExecutorService;
       9: if_acmpeq     46
      12: aload_0
      13: getfield      #28                 // Field roundRobin:I
      16: istore_2
      17: iload_2
      18: aload_0
      19: getfield      #10                 // Field n:I
      22: if_icmpne     35
      25: iconst_0
      26: istore_2
      27: aload_0
      28: iconst_1
      29: putfield      #28                 // Field roundRobin:I
      32: goto          42
      35: aload_0
      36: iload_2
      37: iconst_1
      38: iadd
      39: putfield      #28                 // Field roundRobin:I
      42: aload_1
      43: iload_2
      44: aaload
      45: areturn
      46: getstatic     #29                 // Field TERMINATED:Ljava/util/concurrent/ScheduledExecutorService;
      49: areturn

  public reactor.core.Disposable schedule(java.lang.Runnable);
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method pick:()Ljava/util/concurrent/ScheduledExecutorService;
       4: aload_1
       5: lconst_0
       6: getstatic     #31                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       9: invokestatic  #32                 // Method reactor/core/scheduler/Schedulers.directSchedule:(Ljava/util/concurrent/ScheduledExecutorService;Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      12: areturn

  public reactor.core.Disposable schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method pick:()Ljava/util/concurrent/ScheduledExecutorService;
       4: aload_1
       5: lload_2
       6: aload         4
       8: invokestatic  #32                 // Method reactor/core/scheduler/Schedulers.directSchedule:(Ljava/util/concurrent/ScheduledExecutorService;Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      11: areturn

  public reactor.core.Disposable schedulePeriodically(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method pick:()Ljava/util/concurrent/ScheduledExecutorService;
       4: aload_1
       5: lload_2
       6: lload         4
       8: aload         6
      10: invokestatic  #33                 // Method reactor/core/scheduler/Schedulers.directSchedulePeriodically:(Ljava/util/concurrent/ScheduledExecutorService;Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      13: areturn

  public java.lang.String toString();
    Code:
       0: new           #3                  // class java/lang/StringBuilder
       3: dup
       4: ldc           #35                 // String parallel
       6: invokespecial #36                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
       9: bipush        40
      11: invokevirtual #37                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      14: aload_0
      15: getfield      #10                 // Field n:I
      18: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      21: astore_1
      22: aload_0
      23: getfield      #11                 // Field factory:Ljava/util/concurrent/ThreadFactory;
      26: instanceof    #38                 // class reactor/core/scheduler/ReactorThreadFactory
      29: ifeq          57
      32: aload_1
      33: ldc           #39                 // String ,\"
      35: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: aload_0
      39: getfield      #11                 // Field factory:Ljava/util/concurrent/ThreadFactory;
      42: checkcast     #38                 // class reactor/core/scheduler/ReactorThreadFactory
      45: invokevirtual #40                 // Method reactor/core/scheduler/ReactorThreadFactory.get:()Ljava/lang/String;
      48: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: bipush        34
      53: invokevirtual #37                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      56: pop
      57: aload_1
      58: bipush        41
      60: invokevirtual #37                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      63: pop
      64: aload_1
      65: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      68: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #41                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpeq     14
       7: aload_1
       8: getstatic     #42                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      11: if_acmpne     22
      14: aload_0
      15: invokevirtual #43                 // Method isDisposed:()Z
      18: invokestatic  #44                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      21: areturn
      22: aload_1
      23: getstatic     #45                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      26: if_acmpeq     36
      29: aload_1
      30: getstatic     #46                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      33: if_acmpne     44
      36: aload_0
      37: getfield      #10                 // Field n:I
      40: invokestatic  #47                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      43: areturn
      44: aload_1
      45: getstatic     #48                 // Field reactor/core/Scannable$Attr.NAME:Lreactor/core/Scannable$Attr;
      48: if_acmpne     56
      51: aload_0
      52: invokevirtual #49                 // Method toString:()Ljava/lang/String;
      55: areturn
      56: aconst_null
      57: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #22                 // Field executors:[Ljava/util/concurrent/ScheduledExecutorService;
       4: invokestatic  #50                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: invokedynamic #51,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      12: invokeinterface #52,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      17: areturn

  public reactor.core.scheduler.Scheduler$Worker createWorker();
    Code:
       0: new           #53                 // class reactor/core/scheduler/ExecutorServiceWorker
       3: dup
       4: aload_0
       5: invokevirtual #30                 // Method pick:()Ljava/util/concurrent/ScheduledExecutorService;
       8: invokespecial #54                 // Method reactor/core/scheduler/ExecutorServiceWorker."<init>":(Ljava/util/concurrent/ScheduledExecutorService;)V
      11: areturn

  public java.lang.Object get();
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method get:()Ljava/util/concurrent/ScheduledExecutorService;
       4: areturn

  private static reactor.core.Scannable lambda$inners$1(java.util.concurrent.ScheduledExecutorService);
    Code:
       0: aload_0
       1: invokedynamic #55,  0             // InvokeDynamic #1:scanUnsafe:(Ljava/util/concurrent/ScheduledExecutorService;)Lreactor/core/Scannable;
       6: areturn

  private static java.lang.Object lambda$null$0(java.util.concurrent.ScheduledExecutorService, reactor.core.Scannable$Attr);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #56                 // Method reactor/core/scheduler/Schedulers.scanExecutor:(Ljava/util/concurrent/Executor;Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
       5: areturn

  static {};
    Code:
       0: new           #57                 // class java/util/concurrent/atomic/AtomicLong
       3: dup
       4: invokespecial #58                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
       7: putstatic     #59                 // Field COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
      10: ldc           #60                 // class reactor/core/scheduler/ParallelScheduler
      12: ldc           #27                 // class "[Ljava/util/concurrent/ScheduledExecutorService;"
      14: ldc           #61                 // String executors
      16: invokestatic  #62                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      19: putstatic     #20                 // Field EXECUTORS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: iconst_0
      23: anewarray     #17                 // class java/util/concurrent/ScheduledExecutorService
      26: putstatic     #23                 // Field SHUTDOWN:[Ljava/util/concurrent/ScheduledExecutorService;
      29: invokestatic  #63                 // Method java/util/concurrent/Executors.newSingleThreadScheduledExecutor:()Ljava/util/concurrent/ScheduledExecutorService;
      32: putstatic     #29                 // Field TERMINATED:Ljava/util/concurrent/ScheduledExecutorService;
      35: getstatic     #29                 // Field TERMINATED:Ljava/util/concurrent/ScheduledExecutorService;
      38: invokeinterface #24,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdownNow:()Ljava/util/List;
      43: pop
      44: return
}
