Compiled from "WorkQueueProcessor.java"
public final class reactor.core.publisher.WorkQueueProcessor<E> extends reactor.core.publisher.EventLoopProcessor<E> {
  static final java.util.function.Supplier FACTORY;

  final reactor.core.publisher.RingBuffer$Sequence workSequence;

  final java.util.Queue<java.lang.Object> claimedDisposed;

  final reactor.util.concurrent.WaitStrategy writeWait;

  volatile int replaying;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.WorkQueueProcessor> REPLAYING;

  static final reactor.util.Logger log;

  public static final <T> reactor.core.publisher.WorkQueueProcessor$Builder<T> builder();
    Code:
       0: new           #1                  // class reactor/core/publisher/WorkQueueProcessor$Builder
       3: dup
       4: invokespecial #2                  // Method reactor/core/publisher/WorkQueueProcessor$Builder."<init>":()V
       7: areturn

  public static <E> reactor.core.publisher.WorkQueueProcessor<E> create();
    Code:
       0: invokestatic  #3                  // Method builder:()Lreactor/core/publisher/WorkQueueProcessor$Builder;
       3: invokevirtual #4                  // Method reactor/core/publisher/WorkQueueProcessor$Builder.build:()Lreactor/core/publisher/WorkQueueProcessor;
       6: areturn

  public static <E> reactor.core.publisher.WorkQueueProcessor<E> create(java.lang.String, int);
    Code:
       0: invokestatic  #3                  // Method builder:()Lreactor/core/publisher/WorkQueueProcessor$Builder;
       3: aload_0
       4: invokevirtual #5                  // Method reactor/core/publisher/WorkQueueProcessor$Builder.name:(Ljava/lang/String;)Lreactor/core/publisher/WorkQueueProcessor$Builder;
       7: iload_1
       8: invokevirtual #6                  // Method reactor/core/publisher/WorkQueueProcessor$Builder.bufferSize:(I)Lreactor/core/publisher/WorkQueueProcessor$Builder;
      11: invokevirtual #4                  // Method reactor/core/publisher/WorkQueueProcessor$Builder.build:()Lreactor/core/publisher/WorkQueueProcessor;
      14: areturn

  public static <E> reactor.core.publisher.WorkQueueProcessor<E> share(java.lang.String, int);
    Code:
       0: invokestatic  #3                  // Method builder:()Lreactor/core/publisher/WorkQueueProcessor$Builder;
       3: iconst_1
       4: invokevirtual #7                  // Method reactor/core/publisher/WorkQueueProcessor$Builder.share:(Z)Lreactor/core/publisher/WorkQueueProcessor$Builder;
       7: aload_0
       8: invokevirtual #5                  // Method reactor/core/publisher/WorkQueueProcessor$Builder.name:(Ljava/lang/String;)Lreactor/core/publisher/WorkQueueProcessor$Builder;
      11: iload_1
      12: invokevirtual #6                  // Method reactor/core/publisher/WorkQueueProcessor$Builder.bufferSize:(I)Lreactor/core/publisher/WorkQueueProcessor$Builder;
      15: invokevirtual #4                  // Method reactor/core/publisher/WorkQueueProcessor$Builder.build:()Lreactor/core/publisher/WorkQueueProcessor;
      18: areturn

  reactor.core.publisher.WorkQueueProcessor(java.util.concurrent.ThreadFactory, java.util.concurrent.ExecutorService, java.util.concurrent.ExecutorService, int, reactor.util.concurrent.WaitStrategy, boolean, boolean);
    Code:
       0: aload_0
       1: iload         4
       3: aload_1
       4: aload_2
       5: aload_3
       6: iload         7
       8: iload         6
      10: getstatic     #8                  // Field FACTORY:Ljava/util/function/Supplier;
      13: aload         5
      15: invokespecial #9                  // Method reactor/core/publisher/EventLoopProcessor."<init>":(ILjava/util/concurrent/ThreadFactory;Ljava/util/concurrent/ExecutorService;Ljava/util/concurrent/ExecutorService;ZZLjava/util/function/Supplier;Lreactor/util/concurrent/WaitStrategy;)V
      18: aload_0
      19: ldc2_w        #11                 // long -1l
      22: invokestatic  #13                 // Method reactor/core/publisher/RingBuffer.newSequence:(J)Lreactor/core/publisher/RingBuffer$Sequence;
      25: putfield      #14                 // Field workSequence:Lreactor/core/publisher/RingBuffer$Sequence;
      28: aload_0
      29: new           #15                 // class java/util/concurrent/ConcurrentLinkedQueue
      32: dup
      33: invokespecial #16                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      36: putfield      #17                 // Field claimedDisposed:Ljava/util/Queue;
      39: aload_0
      40: aload         5
      42: putfield      #18                 // Field writeWait:Lreactor/util/concurrent/WaitStrategy;
      45: aload_0
      46: getfield      #19                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
      49: aload_0
      50: getfield      #14                 // Field workSequence:Lreactor/core/publisher/RingBuffer$Sequence;
      53: invokevirtual #20                 // Method reactor/core/publisher/RingBuffer.addGatingSequence:(Lreactor/core/publisher/RingBuffer$Sequence;)V
      56: return

  public void subscribe(reactor.core.CoreSubscriber<? super E>);
    Code:
       0: aload_1
       1: ldc           #21                 // String subscribe
       3: invokestatic  #22                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: invokevirtual #23                 // Method alive:()Z
      11: ifne          35
      14: aload_0
      15: getfield      #19                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
      18: aconst_null
      19: aload_0
      20: getfield      #24                 // Field error:Ljava/lang/Throwable;
      23: aload_0
      24: getfield      #14                 // Field workSequence:Lreactor/core/publisher/RingBuffer$Sequence;
      27: invokestatic  #25                 // Method reactor/core/publisher/TopicProcessor.coldSource:(Lreactor/core/publisher/RingBuffer;Ljava/lang/Throwable;Ljava/lang/Throwable;Lreactor/core/publisher/RingBuffer$Sequence;)Lreactor/core/publisher/Flux;
      30: aload_1
      31: invokevirtual #26                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      34: return
      35: new           #27                 // class reactor/core/publisher/WorkQueueProcessor$WorkQueueInner
      38: dup
      39: aload_1
      40: aload_0
      41: invokespecial #28                 // Method reactor/core/publisher/WorkQueueProcessor$WorkQueueInner."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/WorkQueueProcessor;)V
      44: astore_2
      45: aload_0
      46: invokevirtual #29                 // Method incrementSubscribers:()Z
      49: pop
      50: aload_2
      51: getfield      #30                 // Field reactor/core/publisher/WorkQueueProcessor$WorkQueueInner.sequence:Lreactor/core/publisher/RingBuffer$Sequence;
      54: aload_0
      55: getfield      #14                 // Field workSequence:Lreactor/core/publisher/RingBuffer$Sequence;
      58: invokeinterface #31,  1           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.getAsLong:()J
      63: invokeinterface #32,  3           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.set:(J)V
      68: aload_0
      69: getfield      #19                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
      72: aload_2
      73: getfield      #30                 // Field reactor/core/publisher/WorkQueueProcessor$WorkQueueInner.sequence:Lreactor/core/publisher/RingBuffer$Sequence;
      76: invokevirtual #20                 // Method reactor/core/publisher/RingBuffer.addGatingSequence:(Lreactor/core/publisher/RingBuffer$Sequence;)V
      79: aload_0
      80: getfield      #33                 // Field executor:Ljava/util/concurrent/ExecutorService;
      83: invokestatic  #34                 // Method bestEffortMaxSubscribers:(Ljava/util/concurrent/ExecutorService;)I
      86: istore_3
      87: iload_3
      88: ldc           #36                 // int -2147483648
      90: if_icmple     128
      93: aload_0
      94: getfield      #37                 // Field subscriberCount:I
      97: iload_3
      98: if_icmple     128
     101: new           #38                 // class java/lang/IllegalStateException
     104: dup
     105: new           #39                 // class java/lang/StringBuilder
     108: dup
     109: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
     112: ldc           #41                 // String The executor service could not accommodate another subscriber, detected limit
     114: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     117: iload_3
     118: invokevirtual #43                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     121: invokevirtual #44                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     124: invokespecial #45                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     127: athrow
     128: aload_0
     129: getfield      #33                 // Field executor:Ljava/util/concurrent/ExecutorService;
     132: aload_2
     133: invokeinterface #46,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
     138: goto          198
     141: astore_3
     142: aload_0
     143: invokevirtual #48                 // Method decrementSubscribers:()V
     146: aload_0
     147: getfield      #19                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
     150: aload_2
     151: getfield      #30                 // Field reactor/core/publisher/WorkQueueProcessor$WorkQueueInner.sequence:Lreactor/core/publisher/RingBuffer$Sequence;
     154: invokevirtual #49                 // Method reactor/core/publisher/RingBuffer.removeGatingSequence:(Lreactor/core/publisher/RingBuffer$Sequence;)Z
     157: pop
     158: ldc           #50                 // class java/util/concurrent/RejectedExecutionException
     160: aload_3
     161: invokevirtual #51                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     164: invokevirtual #52                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
     167: ifeq          193
     170: aload_0
     171: getfield      #19                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
     174: aload_3
     175: aload_0
     176: getfield      #24                 // Field error:Ljava/lang/Throwable;
     179: aload_0
     180: getfield      #14                 // Field workSequence:Lreactor/core/publisher/RingBuffer$Sequence;
     183: invokestatic  #25                 // Method reactor/core/publisher/TopicProcessor.coldSource:(Lreactor/core/publisher/RingBuffer;Ljava/lang/Throwable;Ljava/lang/Throwable;Lreactor/core/publisher/RingBuffer$Sequence;)Lreactor/core/publisher/Flux;
     186: aload_1
     187: invokevirtual #26                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
     190: goto          198
     193: aload_1
     194: aload_3
     195: invokestatic  #53                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
     198: return
    Exception table:
       from    to  target type
          45   138   141   Class java/lang/Throwable

  static int bestEffortMaxSubscribers(java.util.concurrent.ExecutorService);
    Code:
       0: ldc           #36                 // int -2147483648
       2: istore_1
       3: aload_0
       4: instanceof    #54                 // class java/util/concurrent/ThreadPoolExecutor
       7: ifeq          21
      10: aload_0
      11: checkcast     #54                 // class java/util/concurrent/ThreadPoolExecutor
      14: invokevirtual #55                 // Method java/util/concurrent/ThreadPoolExecutor.getMaximumPoolSize:()I
      17: istore_1
      18: goto          36
      21: aload_0
      22: instanceof    #56                 // class java/util/concurrent/ForkJoinPool
      25: ifeq          36
      28: aload_0
      29: checkcast     #56                 // class java/util/concurrent/ForkJoinPool
      32: invokevirtual #57                 // Method java/util/concurrent/ForkJoinPool.getParallelism:()I
      35: istore_1
      36: iload_1
      37: ireturn

  public reactor.core.publisher.Flux<E> drain();
    Code:
       0: aload_0
       1: getfield      #19                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
       4: aconst_null
       5: aload_0
       6: getfield      #24                 // Field error:Ljava/lang/Throwable;
       9: aload_0
      10: getfield      #14                 // Field workSequence:Lreactor/core/publisher/RingBuffer$Sequence;
      13: invokestatic  #25                 // Method reactor/core/publisher/TopicProcessor.coldSource:(Lreactor/core/publisher/RingBuffer;Ljava/lang/Throwable;Ljava/lang/Throwable;Lreactor/core/publisher/RingBuffer$Sequence;)Lreactor/core/publisher/Flux;
      16: areturn

  protected void doError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #18                 // Field writeWait:Lreactor/util/concurrent/WaitStrategy;
       4: invokevirtual #58                 // Method reactor/util/concurrent/WaitStrategy.signalAllWhenBlocking:()V
       7: return

  protected void doComplete();
    Code:
       0: aload_0
       1: getfield      #18                 // Field writeWait:Lreactor/util/concurrent/WaitStrategy;
       4: invokevirtual #58                 // Method reactor/util/concurrent/WaitStrategy.signalAllWhenBlocking:()V
       7: return

  protected void requestTask(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #59                 // Field requestTaskExecutor:Ljava/util/concurrent/ExecutorService;
       4: aload_1
       5: aload_0
       6: aconst_null
       7: aload_0
       8: getfield      #19                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
      11: dup
      12: invokevirtual #51                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: pop
      16: invokedynamic #60,  0             // InvokeDynamic #0:getAsLong:(Lreactor/core/publisher/RingBuffer;)Ljava/util/function/LongSupplier;
      21: invokestatic  #61                 // Method createRequestTask:(Lorg/reactivestreams/Subscription;Lreactor/core/publisher/EventLoopProcessor;Ljava/util/function/Consumer;Ljava/util/function/LongSupplier;)Ljava/lang/Runnable;
      24: invokeinterface #46,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
      29: return

  public long getPending();
    Code:
       0: aload_0
       1: invokevirtual #62                 // Method getBufferSize:()I
       4: aload_0
       5: getfield      #19                 // Field ringBuffer:Lreactor/core/publisher/RingBuffer;
       8: invokevirtual #63                 // Method reactor/core/publisher/RingBuffer.getPending:()I
      11: isub
      12: aload_0
      13: getfield      #17                 // Field claimedDisposed:Ljava/util/Queue;
      16: invokeinterface #64,  1           // InterfaceMethod java/util/Queue.size:()I
      21: iadd
      22: i2l
      23: lreturn

  public void run();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method alive:()Z
       4: ifne          10
       7: invokestatic  #65                 // Method reactor/util/concurrent/WaitStrategy.alert:()V
      10: return

  public long downstreamCount();
    Code:
       0: aload_0
       1: invokespecial #66                 // Method reactor/core/publisher/EventLoopProcessor.downstreamCount:()J
       4: lreturn

  public boolean isSerialized();
    Code:
       0: aload_0
       1: invokespecial #67                 // Method reactor/core/publisher/EventLoopProcessor.isSerialized:()Z
       4: ireturn

  public java.util.stream.Stream inners();
    Code:
       0: aload_0
       1: invokespecial #68                 // Method reactor/core/publisher/EventLoopProcessor.inners:()Ljava/util/stream/Stream;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #69                 // Method reactor/core/publisher/EventLoopProcessor.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
       5: areturn

  static {};
    Code:
       0: invokedynamic #70,  0             // InvokeDynamic #1:get:()Ljava/util/function/Supplier;
       5: putstatic     #8                  // Field FACTORY:Ljava/util/function/Supplier;
       8: ldc           #71                 // class reactor/core/publisher/WorkQueueProcessor
      10: ldc           #72                 // String replaying
      12: invokestatic  #73                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      15: putstatic     #74                 // Field REPLAYING:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      18: ldc           #71                 // class reactor/core/publisher/WorkQueueProcessor
      20: invokestatic  #75                 // Method reactor/util/Loggers.getLogger:(Ljava/lang/Class;)Lreactor/util/Logger;
      23: putstatic     #76                 // Field log:Lreactor/util/Logger;
      26: return
}
