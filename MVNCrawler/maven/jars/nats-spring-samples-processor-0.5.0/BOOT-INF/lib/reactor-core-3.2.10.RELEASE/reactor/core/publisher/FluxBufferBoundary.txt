Compiled from "FluxBufferBoundary.java"
final class reactor.core.publisher.FluxBufferBoundary<T, U, C extends java.util.Collection<? super T>> extends reactor.core.publisher.FluxOperator<T, C> {
  final org.reactivestreams.Publisher<U> other;

  final java.util.function.Supplier<C> bufferSupplier;

  reactor.core.publisher.FluxBufferBoundary(reactor.core.publisher.Flux<? extends T>, org.reactivestreams.Publisher<U>, java.util.function.Supplier<C>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String other
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class org/reactivestreams/Publisher
      15: putfield      #5                  // Field other:Lorg/reactivestreams/Publisher;
      18: aload_0
      19: aload_3
      20: ldc           #6                  // String bufferSupplier
      22: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      25: checkcast     #7                  // class java/util/function/Supplier
      28: putfield      #8                  // Field bufferSupplier:Ljava/util/function/Supplier;
      31: return

  public int getPrefetch();
    Code:
       0: ldc           #10                 // int 2147483647
       2: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super C>);
    Code:
       0: aload_0
       1: getfield      #8                  // Field bufferSupplier:Ljava/util/function/Supplier;
       4: invokeinterface #11,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       9: ldc           #12                 // String The bufferSupplier returned a null buffer
      11: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      14: checkcast     #13                 // class java/util/Collection
      17: astore_2
      18: goto          37
      21: astore_3
      22: aload_1
      23: aload_3
      24: aload_1
      25: invokeinterface #15,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      30: invokestatic  #16                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      33: invokestatic  #17                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      36: return
      37: new           #18                 // class reactor/core/publisher/FluxBufferBoundary$BufferBoundaryMain
      40: dup
      41: aload_0
      42: getfield      #19                 // Field source:Lreactor/core/publisher/Flux;
      45: instanceof    #20                 // class reactor/core/publisher/FluxInterval
      48: ifeq          55
      51: aload_1
      52: goto          59
      55: aload_1
      56: invokestatic  #21                 // Method reactor/core/publisher/Operators.serialize:(Lreactor/core/CoreSubscriber;)Lreactor/core/CoreSubscriber;
      59: aload_2
      60: aload_0
      61: getfield      #8                  // Field bufferSupplier:Ljava/util/function/Supplier;
      64: invokespecial #22                 // Method reactor/core/publisher/FluxBufferBoundary$BufferBoundaryMain."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/Collection;Ljava/util/function/Supplier;)V
      67: astore_3
      68: aload_1
      69: aload_3
      70: invokeinterface #23,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      75: aload_0
      76: getfield      #5                  // Field other:Lorg/reactivestreams/Publisher;
      79: aload_3
      80: getfield      #24                 // Field reactor/core/publisher/FluxBufferBoundary$BufferBoundaryMain.other:Lreactor/core/publisher/FluxBufferBoundary$BufferBoundaryOther;
      83: invokeinterface #25,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      88: aload_0
      89: getfield      #19                 // Field source:Lreactor/core/publisher/Flux;
      92: aload_3
      93: invokevirtual #26                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      96: return
    Exception table:
       from    to  target type
           0    18    21   Class java/lang/Throwable
}
