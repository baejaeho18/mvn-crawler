Compiled from "FluxCallableOnAssembly.java"
final class reactor.core.publisher.FluxCallableOnAssembly<T> extends reactor.core.publisher.FluxOperator<T, T> implements reactor.core.Fuseable, java.util.concurrent.Callable<T>, reactor.core.publisher.AssemblyOp {
  final reactor.core.publisher.FluxOnAssembly$AssemblySnapshot stacktrace;

  reactor.core.publisher.FluxCallableOnAssembly(reactor.core.publisher.Flux<? extends T>, reactor.core.publisher.FluxOnAssembly$AssemblySnapshot);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
      10: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #3                  // Field source:Lreactor/core/publisher/Flux;
       5: aload_0
       6: getfield      #2                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
       9: invokestatic  #4                  // Method reactor/core/publisher/FluxOnAssembly.subscribe:(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/Flux;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;)V
      12: return

  public T call() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #3                  // Field source:Lreactor/core/publisher/Flux;
       4: checkcast     #5                  // class java/util/concurrent/Callable
       7: invokeinterface #6,  1            // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      12: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #7                  // Field reactor/core/Scannable$Attr.ACTUAL_METADATA:Lreactor/core/Scannable$Attr;
       4: if_acmpne     26
       7: aload_0
       8: getfield      #2                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
      11: getfield      #8                  // Field reactor/core/publisher/FluxOnAssembly$AssemblySnapshot.checkpointed:Z
      14: ifne          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: invokestatic  #9                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      25: areturn
      26: aload_0
      27: aload_1
      28: invokespecial #10                 // Method reactor/core/publisher/FluxOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      31: areturn

  public java.lang.String stepName();
    Code:
       0: aload_0
       1: getfield      #2                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
       4: invokevirtual #11                 // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshot.operatorAssemblyInformation:()Ljava/lang/String;
       7: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
       4: invokevirtual #11                 // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshot.operatorAssemblyInformation:()Ljava/lang/String;
       7: areturn
}
