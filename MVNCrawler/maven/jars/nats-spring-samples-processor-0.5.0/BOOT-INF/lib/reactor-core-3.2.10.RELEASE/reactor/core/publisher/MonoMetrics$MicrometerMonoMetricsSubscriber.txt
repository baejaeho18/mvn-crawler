Compiled from "MonoMetrics.java"
class reactor.core.publisher.MonoMetrics$MicrometerMonoMetricsSubscriber<T> implements reactor.core.publisher.InnerOperator<T, T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final io.micrometer.core.instrument.Clock clock;

  final io.micrometer.core.instrument.Counter malformedSourceCounter;

  final io.micrometer.core.instrument.Counter subscribedCounter;

  io.micrometer.core.instrument.Timer$Sample subscribeToTerminateSample;

  boolean done;

  reactor.core.Fuseable$QueueSubscription<T> qs;

  org.reactivestreams.Subscription s;

  final io.micrometer.core.instrument.Timer subscribeToCompleteTimer;

  final io.micrometer.core.instrument.Timer subscribeToCancelTimer;

  final java.util.function.Function<java.lang.Throwable, io.micrometer.core.instrument.Timer> subscribeToErrorTimerFactory;

  reactor.core.publisher.MonoMetrics$MicrometerMonoMetricsSubscriber(reactor.core.CoreSubscriber<? super T>, io.micrometer.core.instrument.MeterRegistry, io.micrometer.core.instrument.Clock, java.lang.String, java.util.List<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_3
      11: putfield      #3                  // Field clock:Lio/micrometer/core/instrument/Clock;
      14: new           #4                  // class java/util/ArrayList
      17: dup
      18: invokespecial #5                  // Method java/util/ArrayList."<init>":()V
      21: astore        6
      23: aload         6
      25: ldc           #7                  // String flow
      27: aload         4
      29: invokestatic  #8                  // InterfaceMethod io/micrometer/core/instrument/Tag.of:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Tag;
      32: invokeinterface #9,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      37: pop
      38: aload         6
      40: ldc           #10                 // String type
      42: ldc           #11                 // String Mono
      44: invokestatic  #8                  // InterfaceMethod io/micrometer/core/instrument/Tag.of:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Tag;
      47: invokeinterface #9,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      52: pop
      53: aload         6
      55: aload         5
      57: invokeinterface #12,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      62: pop
      63: aload_0
      64: ldc           #13                 // String reactor.flow.duration
      66: invokestatic  #14                 // InterfaceMethod io/micrometer/core/instrument/Timer.builder:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
      69: aload         6
      71: invokevirtual #15                 // Method io/micrometer/core/instrument/Timer$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Builder;
      74: ldc           #16                 // String status
      76: ldc           #17                 // String completed
      78: invokevirtual #18                 // Method io/micrometer/core/instrument/Timer$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
      81: ldc           #19                 // String exception
      83: ldc           #20                 // String
      85: invokevirtual #18                 // Method io/micrometer/core/instrument/Timer$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
      88: ldc           #21                 // String Times the duration elapsed between a subscription and the onComplete termination of the sequence
      90: invokevirtual #22                 // Method io/micrometer/core/instrument/Timer$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
      93: aload_2
      94: invokevirtual #23                 // Method io/micrometer/core/instrument/Timer$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Timer;
      97: putfield      #24                 // Field subscribeToCompleteTimer:Lio/micrometer/core/instrument/Timer;
     100: aload_0
     101: ldc           #13                 // String reactor.flow.duration
     103: invokestatic  #14                 // InterfaceMethod io/micrometer/core/instrument/Timer.builder:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     106: aload         6
     108: invokevirtual #15                 // Method io/micrometer/core/instrument/Timer$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Builder;
     111: ldc           #16                 // String status
     113: ldc           #25                 // String cancelled
     115: invokevirtual #18                 // Method io/micrometer/core/instrument/Timer$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     118: ldc           #19                 // String exception
     120: ldc           #20                 // String
     122: invokevirtual #18                 // Method io/micrometer/core/instrument/Timer$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     125: ldc           #26                 // String Times the duration elapsed between a subscription and the cancellation of the sequence
     127: invokevirtual #22                 // Method io/micrometer/core/instrument/Timer$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     130: aload_2
     131: invokevirtual #23                 // Method io/micrometer/core/instrument/Timer$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Timer;
     134: putfield      #27                 // Field subscribeToCancelTimer:Lio/micrometer/core/instrument/Timer;
     137: ldc           #13                 // String reactor.flow.duration
     139: invokestatic  #14                 // InterfaceMethod io/micrometer/core/instrument/Timer.builder:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     142: aload         6
     144: invokevirtual #15                 // Method io/micrometer/core/instrument/Timer$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Builder;
     147: ldc           #16                 // String status
     149: ldc           #28                 // String error
     151: invokevirtual #18                 // Method io/micrometer/core/instrument/Timer$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     154: ldc           #29                 // String Times the duration elapsed between a subscription and the onError termination of the sequence, with the exception name as a tag.
     156: invokevirtual #22                 // Method io/micrometer/core/instrument/Timer$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     159: astore        7
     161: aload_0
     162: aload         7
     164: aload_2
     165: invokedynamic #30,  0             // InvokeDynamic #0:apply:(Lio/micrometer/core/instrument/Timer$Builder;Lio/micrometer/core/instrument/MeterRegistry;)Ljava/util/function/Function;
     170: putfield      #31                 // Field subscribeToErrorTimerFactory:Ljava/util/function/Function;
     173: aload_0
     174: ldc           #32                 // String reactor.subscribed
     176: invokestatic  #33                 // InterfaceMethod io/micrometer/core/instrument/Counter.builder:(Ljava/lang/String;)Lio/micrometer/core/instrument/Counter$Builder;
     179: aload         6
     181: invokevirtual #34                 // Method io/micrometer/core/instrument/Counter$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Counter$Builder;
     184: ldc           #35                 // String subscribers
     186: invokevirtual #36                 // Method io/micrometer/core/instrument/Counter$Builder.baseUnit:(Ljava/lang/String;)Lio/micrometer/core/instrument/Counter$Builder;
     189: ldc           #37                 // String Counts how many Reactor sequences have been subscribed to
     191: invokevirtual #38                 // Method io/micrometer/core/instrument/Counter$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Counter$Builder;
     194: aload_2
     195: invokevirtual #39                 // Method io/micrometer/core/instrument/Counter$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Counter;
     198: putfield      #40                 // Field subscribedCounter:Lio/micrometer/core/instrument/Counter;
     201: aload_0
     202: aload_2
     203: ldc           #41                 // String reactor.malformed.source
     205: aload         6
     207: invokevirtual #42                 // Method io/micrometer/core/instrument/MeterRegistry.counter:(Ljava/lang/String;Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Counter;
     210: putfield      #43                 // Field malformedSourceCounter:Lio/micrometer/core/instrument/Counter;
     213: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #44                 // Field done:Z
       4: ifeq          30
       7: aload_0
       8: getfield      #43                 // Field malformedSourceCounter:Lio/micrometer/core/instrument/Counter;
      11: invokeinterface #45,  1           // InterfaceMethod io/micrometer/core/instrument/Counter.increment:()V
      16: aload_1
      17: aload_0
      18: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      21: invokeinterface #46,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      26: invokestatic  #47                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      29: return
      30: aload_0
      31: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      34: aload_1
      35: invokeinterface #48,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      40: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #44                 // Field done:Z
       4: ifeq          30
       7: aload_0
       8: getfield      #43                 // Field malformedSourceCounter:Lio/micrometer/core/instrument/Counter;
      11: invokeinterface #45,  1           // InterfaceMethod io/micrometer/core/instrument/Counter.increment:()V
      16: aload_1
      17: aload_0
      18: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      21: invokeinterface #46,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      26: invokestatic  #49                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      29: return
      30: aload_0
      31: iconst_1
      32: putfield      #44                 // Field done:Z
      35: aload_0
      36: getfield      #31                 // Field subscribeToErrorTimerFactory:Ljava/util/function/Function;
      39: aload_1
      40: invokeinterface #50,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      45: checkcast     #51                 // class io/micrometer/core/instrument/Timer
      48: astore_2
      49: aload_0
      50: getfield      #52                 // Field subscribeToTerminateSample:Lio/micrometer/core/instrument/Timer$Sample;
      53: aload_2
      54: invokevirtual #53                 // Method io/micrometer/core/instrument/Timer$Sample.stop:(Lio/micrometer/core/instrument/Timer;)J
      57: pop2
      58: aload_0
      59: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      62: aload_1
      63: invokeinterface #54,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      68: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #44                 // Field done:Z
       4: ifeq          17
       7: aload_0
       8: getfield      #43                 // Field malformedSourceCounter:Lio/micrometer/core/instrument/Counter;
      11: invokeinterface #45,  1           // InterfaceMethod io/micrometer/core/instrument/Counter.increment:()V
      16: return
      17: aload_0
      18: iconst_1
      19: putfield      #44                 // Field done:Z
      22: aload_0
      23: getfield      #52                 // Field subscribeToTerminateSample:Lio/micrometer/core/instrument/Timer$Sample;
      26: aload_0
      27: getfield      #24                 // Field subscribeToCompleteTimer:Lio/micrometer/core/instrument/Timer;
      30: invokevirtual #53                 // Method io/micrometer/core/instrument/Timer$Sample.stop:(Lio/micrometer/core/instrument/Timer;)J
      33: pop2
      34: aload_0
      35: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      38: invokeinterface #55,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      43: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #56                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #57                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          61
      11: aload_0
      12: getfield      #40                 // Field subscribedCounter:Lio/micrometer/core/instrument/Counter;
      15: invokeinterface #45,  1           // InterfaceMethod io/micrometer/core/instrument/Counter.increment:()V
      20: aload_0
      21: aload_0
      22: getfield      #3                  // Field clock:Lio/micrometer/core/instrument/Clock;
      25: invokestatic  #58                 // InterfaceMethod io/micrometer/core/instrument/Timer.start:(Lio/micrometer/core/instrument/Clock;)Lio/micrometer/core/instrument/Timer$Sample;
      28: putfield      #52                 // Field subscribeToTerminateSample:Lio/micrometer/core/instrument/Timer$Sample;
      31: aload_1
      32: instanceof    #59                 // class reactor/core/Fuseable$QueueSubscription
      35: ifeq          46
      38: aload_0
      39: aload_1
      40: checkcast     #59                 // class reactor/core/Fuseable$QueueSubscription
      43: putfield      #60                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
      46: aload_0
      47: aload_1
      48: putfield      #56                 // Field s:Lorg/reactivestreams/Subscription;
      51: aload_0
      52: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      55: aload_0
      56: invokeinterface #61,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      61: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #62                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          17
       7: aload_0
       8: getfield      #56                 // Field s:Lorg/reactivestreams/Subscription;
      11: lload_1
      12: invokeinterface #63,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      17: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #52                 // Field subscribeToTerminateSample:Lio/micrometer/core/instrument/Timer$Sample;
       4: aload_0
       5: getfield      #27                 // Field subscribeToCancelTimer:Lio/micrometer/core/instrument/Timer;
       8: invokevirtual #53                 // Method io/micrometer/core/instrument/Timer$Sample.stop:(Lio/micrometer/core/instrument/Timer;)J
      11: pop2
      12: aload_0
      13: getfield      #56                 // Field s:Lorg/reactivestreams/Subscription;
      16: invokeinterface #64,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      21: return

  private static io.micrometer.core.instrument.Timer lambda$new$0(io.micrometer.core.instrument.Timer$Builder, io.micrometer.core.instrument.MeterRegistry, java.lang.Throwable);
    Code:
       0: aload_0
       1: ldc           #19                 // String exception
       3: aload_2
       4: invokevirtual #65                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       7: invokevirtual #66                 // Method java/lang/Class.getName:()Ljava/lang/String;
      10: invokevirtual #18                 // Method io/micrometer/core/instrument/Timer$Builder.tag:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
      13: aload_1
      14: invokevirtual #23                 // Method io/micrometer/core/instrument/Timer$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Timer;
      17: areturn
}
