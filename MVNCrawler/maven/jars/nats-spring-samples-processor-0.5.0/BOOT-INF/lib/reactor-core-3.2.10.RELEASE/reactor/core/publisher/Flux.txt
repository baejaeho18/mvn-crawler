Compiled from "Flux.java"
public abstract class reactor.core.publisher.Flux<T> implements org.reactivestreams.Publisher<T> {
  static final java.util.function.BiFunction TUPLE2_BIFUNCTION;

  static final java.util.function.Supplier LIST_SUPPLIER;

  static final java.util.function.Supplier SET_SUPPLIER;

  static final java.util.function.BooleanSupplier ALWAYS_BOOLEAN_SUPPLIER;

  static final java.util.function.BiPredicate OBJECT_EQUAL;

  static final java.util.function.Function IDENTITY_FUNCTION;

  public reactor.core.publisher.Flux();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static <T, V> reactor.core.publisher.Flux<V> combineLatest(java.util.function.Function<java.lang.Object[], V>, org.reactivestreams.Publisher<? extends T>...);
    Code:
       0: aload_0
       1: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       4: aload_1
       5: invokestatic  #3                  // Method combineLatest:(Ljava/util/function/Function;I[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: areturn

  public static <T, V> reactor.core.publisher.Flux<V> combineLatest(java.util.function.Function<java.lang.Object[], V>, int, org.reactivestreams.Publisher<? extends T>...);
    Code:
       0: aload_2
       1: arraylength
       2: ifne          9
       5: invokestatic  #4                  // Method empty:()Lreactor/core/publisher/Flux;
       8: areturn
       9: aload_2
      10: arraylength
      11: iconst_1
      12: if_icmpne     68
      15: aload_2
      16: iconst_0
      17: aaload
      18: astore_3
      19: aload_3
      20: instanceof    #5                  // class reactor/core/Fuseable
      23: ifeq          47
      26: new           #6                  // class reactor/core/publisher/FluxMapFuseable
      29: dup
      30: aload_3
      31: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      34: aload_0
      35: invokedynamic #8,  0              // InvokeDynamic #0:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
      40: invokespecial #9                  // Method reactor/core/publisher/FluxMapFuseable."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;)V
      43: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      46: areturn
      47: new           #11                 // class reactor/core/publisher/FluxMap
      50: dup
      51: aload_3
      52: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      55: aload_0
      56: invokedynamic #12,  0             // InvokeDynamic #1:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
      61: invokespecial #13                 // Method reactor/core/publisher/FluxMap."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;)V
      64: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      67: areturn
      68: new           #14                 // class reactor/core/publisher/FluxCombineLatest
      71: dup
      72: aload_2
      73: aload_0
      74: iload_1
      75: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      78: iload_1
      79: invokespecial #16                 // Method reactor/core/publisher/FluxCombineLatest."<init>":([Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Supplier;I)V
      82: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      85: areturn

  public static <T1, T2, V> reactor.core.publisher.Flux<V> combineLatest(org.reactivestreams.Publisher<? extends T1>, org.reactivestreams.Publisher<? extends T2>, java.util.function.BiFunction<? super T1, ? super T2, ? extends V>);
    Code:
       0: aload_2
       1: invokedynamic #17,  0             // InvokeDynamic #2:apply:(Ljava/util/function/BiFunction;)Ljava/util/function/Function;
       6: iconst_2
       7: anewarray     #18                 // class org/reactivestreams/Publisher
      10: dup
      11: iconst_0
      12: aload_0
      13: aastore
      14: dup
      15: iconst_1
      16: aload_1
      17: aastore
      18: invokestatic  #19                 // Method combineLatest:(Ljava/util/function/Function;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      21: areturn

  public static <T1, T2, T3, V> reactor.core.publisher.Flux<V> combineLatest(org.reactivestreams.Publisher<? extends T1>, org.reactivestreams.Publisher<? extends T2>, org.reactivestreams.Publisher<? extends T3>, java.util.function.Function<java.lang.Object[], V>);
    Code:
       0: aload_3
       1: iconst_3
       2: anewarray     #18                 // class org/reactivestreams/Publisher
       5: dup
       6: iconst_0
       7: aload_0
       8: aastore
       9: dup
      10: iconst_1
      11: aload_1
      12: aastore
      13: dup
      14: iconst_2
      15: aload_2
      16: aastore
      17: invokestatic  #19                 // Method combineLatest:(Ljava/util/function/Function;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      20: areturn

  public static <T1, T2, T3, T4, V> reactor.core.publisher.Flux<V> combineLatest(org.reactivestreams.Publisher<? extends T1>, org.reactivestreams.Publisher<? extends T2>, org.reactivestreams.Publisher<? extends T3>, org.reactivestreams.Publisher<? extends T4>, java.util.function.Function<java.lang.Object[], V>);
    Code:
       0: aload         4
       2: iconst_4
       3: anewarray     #18                 // class org/reactivestreams/Publisher
       6: dup
       7: iconst_0
       8: aload_0
       9: aastore
      10: dup
      11: iconst_1
      12: aload_1
      13: aastore
      14: dup
      15: iconst_2
      16: aload_2
      17: aastore
      18: dup
      19: iconst_3
      20: aload_3
      21: aastore
      22: invokestatic  #19                 // Method combineLatest:(Ljava/util/function/Function;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      25: areturn

  public static <T1, T2, T3, T4, T5, V> reactor.core.publisher.Flux<V> combineLatest(org.reactivestreams.Publisher<? extends T1>, org.reactivestreams.Publisher<? extends T2>, org.reactivestreams.Publisher<? extends T3>, org.reactivestreams.Publisher<? extends T4>, org.reactivestreams.Publisher<? extends T5>, java.util.function.Function<java.lang.Object[], V>);
    Code:
       0: aload         5
       2: iconst_5
       3: anewarray     #18                 // class org/reactivestreams/Publisher
       6: dup
       7: iconst_0
       8: aload_0
       9: aastore
      10: dup
      11: iconst_1
      12: aload_1
      13: aastore
      14: dup
      15: iconst_2
      16: aload_2
      17: aastore
      18: dup
      19: iconst_3
      20: aload_3
      21: aastore
      22: dup
      23: iconst_4
      24: aload         4
      26: aastore
      27: invokestatic  #19                 // Method combineLatest:(Ljava/util/function/Function;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      30: areturn

  public static <T1, T2, T3, T4, T5, T6, V> reactor.core.publisher.Flux<V> combineLatest(org.reactivestreams.Publisher<? extends T1>, org.reactivestreams.Publisher<? extends T2>, org.reactivestreams.Publisher<? extends T3>, org.reactivestreams.Publisher<? extends T4>, org.reactivestreams.Publisher<? extends T5>, org.reactivestreams.Publisher<? extends T6>, java.util.function.Function<java.lang.Object[], V>);
    Code:
       0: aload         6
       2: bipush        6
       4: anewarray     #18                 // class org/reactivestreams/Publisher
       7: dup
       8: iconst_0
       9: aload_0
      10: aastore
      11: dup
      12: iconst_1
      13: aload_1
      14: aastore
      15: dup
      16: iconst_2
      17: aload_2
      18: aastore
      19: dup
      20: iconst_3
      21: aload_3
      22: aastore
      23: dup
      24: iconst_4
      25: aload         4
      27: aastore
      28: dup
      29: iconst_5
      30: aload         5
      32: aastore
      33: invokestatic  #19                 // Method combineLatest:(Ljava/util/function/Function;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      36: areturn

  public static <T, V> reactor.core.publisher.Flux<V> combineLatest(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>, java.util.function.Function<java.lang.Object[], V>);
    Code:
       0: aload_0
       1: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       4: aload_1
       5: invokestatic  #20                 // Method combineLatest:(Ljava/lang/Iterable;ILjava/util/function/Function;)Lreactor/core/publisher/Flux;
       8: areturn

  public static <T, V> reactor.core.publisher.Flux<V> combineLatest(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>, int, java.util.function.Function<java.lang.Object[], V>);
    Code:
       0: new           #14                 // class reactor/core/publisher/FluxCombineLatest
       3: dup
       4: aload_0
       5: aload_2
       6: iload_1
       7: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      10: iload_1
      11: invokespecial #21                 // Method reactor/core/publisher/FluxCombineLatest."<init>":(Ljava/lang/Iterable;Ljava/util/function/Function;Ljava/util/function/Supplier;I)V
      14: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      17: areturn

  public static <T> reactor.core.publisher.Flux<T> concat(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: new           #22                 // class reactor/core/publisher/FluxConcatIterable
       3: dup
       4: aload_0
       5: invokespecial #23                 // Method reactor/core/publisher/FluxConcatIterable."<init>":(Ljava/lang/Iterable;)V
       8: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      11: areturn

  public final reactor.core.publisher.Flux<T> concatWithValues(T...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #24                 // Method fromArray:([Ljava/lang/Object;)Lreactor/core/publisher/Flux;
       5: invokevirtual #25                 // Method concatWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: areturn

  public static <T> reactor.core.publisher.Flux<T> concat(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: aload_0
       1: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       4: invokestatic  #26                 // Method concat:(Lorg/reactivestreams/Publisher;I)Lreactor/core/publisher/Flux;
       7: areturn

  public static <T> reactor.core.publisher.Flux<T> concat(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>, int);
    Code:
       0: new           #27                 // class reactor/core/publisher/FluxConcatMap
       3: dup
       4: aload_0
       5: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
      11: iload_1
      12: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      15: iload_1
      16: getstatic     #29                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.IMMEDIATE:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      19: invokespecial #30                 // Method reactor/core/publisher/FluxConcatMap."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;Ljava/util/function/Supplier;ILreactor/core/publisher/FluxConcatMap$ErrorMode;)V
      22: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      25: areturn

  public static <T> reactor.core.publisher.Flux<T> concat(org.reactivestreams.Publisher<? extends T>...);
    Code:
       0: new           #31                 // class reactor/core/publisher/FluxConcatArray
       3: dup
       4: iconst_0
       5: aload_0
       6: invokespecial #32                 // Method reactor/core/publisher/FluxConcatArray."<init>":(Z[Lorg/reactivestreams/Publisher;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public static <T> reactor.core.publisher.Flux<T> concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: aload_0
       1: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       4: invokestatic  #33                 // Method concatDelayError:(Lorg/reactivestreams/Publisher;I)Lreactor/core/publisher/Flux;
       7: areturn

  public static <T> reactor.core.publisher.Flux<T> concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>, int);
    Code:
       0: new           #27                 // class reactor/core/publisher/FluxConcatMap
       3: dup
       4: aload_0
       5: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
      11: iload_1
      12: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      15: iload_1
      16: getstatic     #34                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.END:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      19: invokespecial #30                 // Method reactor/core/publisher/FluxConcatMap."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;Ljava/util/function/Supplier;ILreactor/core/publisher/FluxConcatMap$ErrorMode;)V
      22: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      25: areturn

  public static <T> reactor.core.publisher.Flux<T> concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>, boolean, int);
    Code:
       0: new           #27                 // class reactor/core/publisher/FluxConcatMap
       3: dup
       4: aload_0
       5: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
      11: iload_2
      12: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      15: iload_2
      16: iload_1
      17: ifeq          26
      20: getstatic     #34                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.END:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      23: goto          29
      26: getstatic     #35                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.BOUNDARY:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      29: invokespecial #30                 // Method reactor/core/publisher/FluxConcatMap."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;Ljava/util/function/Supplier;ILreactor/core/publisher/FluxConcatMap$ErrorMode;)V
      32: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      35: areturn

  public static <T> reactor.core.publisher.Flux<T> concatDelayError(org.reactivestreams.Publisher<? extends T>...);
    Code:
       0: new           #31                 // class reactor/core/publisher/FluxConcatArray
       3: dup
       4: iconst_1
       5: aload_0
       6: invokespecial #32                 // Method reactor/core/publisher/FluxConcatArray."<init>":(Z[Lorg/reactivestreams/Publisher;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public static <T> reactor.core.publisher.Flux<T> create(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>);
    Code:
       0: aload_0
       1: getstatic     #36                 // Field reactor/core/publisher/FluxSink$OverflowStrategy.BUFFER:Lreactor/core/publisher/FluxSink$OverflowStrategy;
       4: invokestatic  #37                 // Method create:(Ljava/util/function/Consumer;Lreactor/core/publisher/FluxSink$OverflowStrategy;)Lreactor/core/publisher/Flux;
       7: areturn

  public static <T> reactor.core.publisher.Flux<T> create(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>, reactor.core.publisher.FluxSink$OverflowStrategy);
    Code:
       0: new           #38                 // class reactor/core/publisher/FluxCreate
       3: dup
       4: aload_0
       5: aload_1
       6: getstatic     #39                 // Field reactor/core/publisher/FluxCreate$CreateMode.PUSH_PULL:Lreactor/core/publisher/FluxCreate$CreateMode;
       9: invokespecial #40                 // Method reactor/core/publisher/FluxCreate."<init>":(Ljava/util/function/Consumer;Lreactor/core/publisher/FluxSink$OverflowStrategy;Lreactor/core/publisher/FluxCreate$CreateMode;)V
      12: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      15: areturn

  public static <T> reactor.core.publisher.Flux<T> push(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>);
    Code:
       0: new           #38                 // class reactor/core/publisher/FluxCreate
       3: dup
       4: aload_0
       5: getstatic     #36                 // Field reactor/core/publisher/FluxSink$OverflowStrategy.BUFFER:Lreactor/core/publisher/FluxSink$OverflowStrategy;
       8: getstatic     #41                 // Field reactor/core/publisher/FluxCreate$CreateMode.PUSH_ONLY:Lreactor/core/publisher/FluxCreate$CreateMode;
      11: invokespecial #40                 // Method reactor/core/publisher/FluxCreate."<init>":(Ljava/util/function/Consumer;Lreactor/core/publisher/FluxSink$OverflowStrategy;Lreactor/core/publisher/FluxCreate$CreateMode;)V
      14: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      17: areturn

  public static <T> reactor.core.publisher.Flux<T> push(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>, reactor.core.publisher.FluxSink$OverflowStrategy);
    Code:
       0: new           #38                 // class reactor/core/publisher/FluxCreate
       3: dup
       4: aload_0
       5: aload_1
       6: getstatic     #41                 // Field reactor/core/publisher/FluxCreate$CreateMode.PUSH_ONLY:Lreactor/core/publisher/FluxCreate$CreateMode;
       9: invokespecial #40                 // Method reactor/core/publisher/FluxCreate."<init>":(Ljava/util/function/Consumer;Lreactor/core/publisher/FluxSink$OverflowStrategy;Lreactor/core/publisher/FluxCreate$CreateMode;)V
      12: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      15: areturn

  public static <T> reactor.core.publisher.Flux<T> defer(java.util.function.Supplier<? extends org.reactivestreams.Publisher<T>>);
    Code:
       0: new           #42                 // class reactor/core/publisher/FluxDefer
       3: dup
       4: aload_0
       5: invokespecial #43                 // Method reactor/core/publisher/FluxDefer."<init>":(Ljava/util/function/Supplier;)V
       8: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      11: areturn

  public static <T> reactor.core.publisher.Flux<T> empty();
    Code:
       0: invokestatic  #44                 // Method reactor/core/publisher/FluxEmpty.instance:()Lreactor/core/publisher/Flux;
       3: areturn

  public static <T> reactor.core.publisher.Flux<T> error(java.lang.Throwable);
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #45                 // Method error:(Ljava/lang/Throwable;Z)Lreactor/core/publisher/Flux;
       5: areturn

  public static <T> reactor.core.publisher.Flux<T> error(java.util.function.Supplier<java.lang.Throwable>);
    Code:
       0: new           #46                 // class reactor/core/publisher/FluxErrorSupplied
       3: dup
       4: aload_0
       5: invokespecial #47                 // Method reactor/core/publisher/FluxErrorSupplied."<init>":(Ljava/util/function/Supplier;)V
       8: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      11: areturn

  public static <O> reactor.core.publisher.Flux<O> error(java.lang.Throwable, boolean);
    Code:
       0: iload_1
       1: ifeq          16
       4: new           #48                 // class reactor/core/publisher/FluxErrorOnRequest
       7: dup
       8: aload_0
       9: invokespecial #49                 // Method reactor/core/publisher/FluxErrorOnRequest."<init>":(Ljava/lang/Throwable;)V
      12: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      15: areturn
      16: new           #50                 // class reactor/core/publisher/FluxError
      19: dup
      20: aload_0
      21: invokespecial #51                 // Method reactor/core/publisher/FluxError."<init>":(Ljava/lang/Throwable;)V
      24: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      27: areturn

  public static <I> reactor.core.publisher.Flux<I> first(org.reactivestreams.Publisher<? extends I>...);
    Code:
       0: new           #52                 // class reactor/core/publisher/FluxFirstEmitting
       3: dup
       4: aload_0
       5: invokespecial #53                 // Method reactor/core/publisher/FluxFirstEmitting."<init>":([Lorg/reactivestreams/Publisher;)V
       8: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      11: areturn

  public static <I> reactor.core.publisher.Flux<I> first(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>);
    Code:
       0: new           #52                 // class reactor/core/publisher/FluxFirstEmitting
       3: dup
       4: aload_0
       5: invokespecial #54                 // Method reactor/core/publisher/FluxFirstEmitting."<init>":(Ljava/lang/Iterable;)V
       8: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      11: areturn

  public static <T> reactor.core.publisher.Flux<T> from(org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_0
       1: instanceof    #55                 // class reactor/core/publisher/Flux
       4: ifeq          14
       7: aload_0
       8: checkcast     #55                 // class reactor/core/publisher/Flux
      11: astore_1
      12: aload_1
      13: areturn
      14: aload_0
      15: instanceof    #56                 // class reactor/core/Fuseable$ScalarCallable
      18: ifeq          50
      21: aload_0
      22: checkcast     #56                 // class reactor/core/Fuseable$ScalarCallable
      25: invokeinterface #57,  1           // InterfaceMethod reactor/core/Fuseable$ScalarCallable.call:()Ljava/lang/Object;
      30: astore_1
      31: aload_1
      32: ifnull        40
      35: aload_1
      36: invokestatic  #58                 // Method just:(Ljava/lang/Object;)Lreactor/core/publisher/Flux;
      39: areturn
      40: invokestatic  #4                  // Method empty:()Lreactor/core/publisher/Flux;
      43: areturn
      44: astore_1
      45: aload_1
      46: invokestatic  #60                 // Method error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Flux;
      49: areturn
      50: aload_0
      51: invokestatic  #61                 // Method wrap:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      54: areturn
    Exception table:
       from    to  target type
          21    39    44   Class java/lang/Exception
          40    43    44   Class java/lang/Exception

  public static <T> reactor.core.publisher.Flux<T> fromArray(T[]);
    Code:
       0: aload_0
       1: arraylength
       2: ifne          9
       5: invokestatic  #4                  // Method empty:()Lreactor/core/publisher/Flux;
       8: areturn
       9: aload_0
      10: arraylength
      11: iconst_1
      12: if_icmpne     22
      15: aload_0
      16: iconst_0
      17: aaload
      18: invokestatic  #58                 // Method just:(Ljava/lang/Object;)Lreactor/core/publisher/Flux;
      21: areturn
      22: new           #62                 // class reactor/core/publisher/FluxArray
      25: dup
      26: aload_0
      27: invokespecial #63                 // Method reactor/core/publisher/FluxArray."<init>":([Ljava/lang/Object;)V
      30: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      33: areturn

  public static <T> reactor.core.publisher.Flux<T> fromIterable(java.lang.Iterable<? extends T>);
    Code:
       0: new           #64                 // class reactor/core/publisher/FluxIterable
       3: dup
       4: aload_0
       5: invokespecial #65                 // Method reactor/core/publisher/FluxIterable."<init>":(Ljava/lang/Iterable;)V
       8: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      11: areturn

  public static <T> reactor.core.publisher.Flux<T> fromStream(java.util.stream.Stream<? extends T>);
    Code:
       0: aload_0
       1: ldc           #66                 // String Stream s must be provided
       3: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #68                 // class reactor/core/publisher/FluxStream
      10: dup
      11: aload_0
      12: invokedynamic #69,  0             // InvokeDynamic #3:get:(Ljava/util/stream/Stream;)Ljava/util/function/Supplier;
      17: invokespecial #70                 // Method reactor/core/publisher/FluxStream."<init>":(Ljava/util/function/Supplier;)V
      20: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      23: areturn

  public static <T> reactor.core.publisher.Flux<T> fromStream(java.util.function.Supplier<java.util.stream.Stream<? extends T>>);
    Code:
       0: new           #68                 // class reactor/core/publisher/FluxStream
       3: dup
       4: aload_0
       5: invokespecial #70                 // Method reactor/core/publisher/FluxStream."<init>":(Ljava/util/function/Supplier;)V
       8: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      11: areturn

  public static <T> reactor.core.publisher.Flux<T> generate(java.util.function.Consumer<reactor.core.publisher.SynchronousSink<T>>);
    Code:
       0: aload_0
       1: ldc           #71                 // String generator
       3: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #72                 // class reactor/core/publisher/FluxGenerate
      10: dup
      11: aload_0
      12: invokespecial #73                 // Method reactor/core/publisher/FluxGenerate."<init>":(Ljava/util/function/Consumer;)V
      15: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      18: areturn

  public static <T, S> reactor.core.publisher.Flux<T> generate(java.util.concurrent.Callable<S>, java.util.function.BiFunction<S, reactor.core.publisher.SynchronousSink<T>, S>);
    Code:
       0: new           #72                 // class reactor/core/publisher/FluxGenerate
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #74                 // Method reactor/core/publisher/FluxGenerate."<init>":(Ljava/util/concurrent/Callable;Ljava/util/function/BiFunction;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public static <T, S> reactor.core.publisher.Flux<T> generate(java.util.concurrent.Callable<S>, java.util.function.BiFunction<S, reactor.core.publisher.SynchronousSink<T>, S>, java.util.function.Consumer<? super S>);
    Code:
       0: new           #72                 // class reactor/core/publisher/FluxGenerate
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #75                 // Method reactor/core/publisher/FluxGenerate."<init>":(Ljava/util/concurrent/Callable;Ljava/util/function/BiFunction;Ljava/util/function/Consumer;)V
      10: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      13: areturn

  public static reactor.core.publisher.Flux<java.lang.Long> interval(java.time.Duration);
    Code:
       0: aload_0
       1: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       4: invokestatic  #77                 // Method interval:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       7: areturn

  public static reactor.core.publisher.Flux<java.lang.Long> interval(java.time.Duration, java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokestatic  #78                 // Method interval:(Ljava/time/Duration;Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       8: areturn

  public static reactor.core.publisher.Flux<java.lang.Long> interval(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: new           #79                 // class reactor/core/publisher/FluxInterval
       3: dup
       4: aload_0
       5: invokevirtual #80                 // Method java/time/Duration.toMillis:()J
       8: aload_0
       9: invokevirtual #80                 // Method java/time/Duration.toMillis:()J
      12: getstatic     #81                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      15: aload_1
      16: invokespecial #82                 // Method reactor/core/publisher/FluxInterval."<init>":(JJLjava/util/concurrent/TimeUnit;Lreactor/core/scheduler/Scheduler;)V
      19: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      22: areturn

  public static reactor.core.publisher.Flux<java.lang.Long> interval(java.time.Duration, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: new           #79                 // class reactor/core/publisher/FluxInterval
       3: dup
       4: aload_0
       5: invokevirtual #80                 // Method java/time/Duration.toMillis:()J
       8: aload_1
       9: invokevirtual #80                 // Method java/time/Duration.toMillis:()J
      12: getstatic     #81                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      15: aload_2
      16: invokespecial #82                 // Method reactor/core/publisher/FluxInterval."<init>":(JJLjava/util/concurrent/TimeUnit;Lreactor/core/scheduler/Scheduler;)V
      19: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      22: areturn

  public static <T> reactor.core.publisher.Flux<T> just(T...);
    Code:
       0: aload_0
       1: invokestatic  #24                 // Method fromArray:([Ljava/lang/Object;)Lreactor/core/publisher/Flux;
       4: areturn

  public static <T> reactor.core.publisher.Flux<T> just(T);
    Code:
       0: new           #83                 // class reactor/core/publisher/FluxJust
       3: dup
       4: aload_0
       5: invokespecial #84                 // Method reactor/core/publisher/FluxJust."<init>":(Ljava/lang/Object;)V
       8: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      11: areturn

  public static <T> reactor.core.publisher.Flux<T> merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: aload_0
       1: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       4: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       7: invokestatic  #86                 // Method merge:(Lorg/reactivestreams/Publisher;II)Lreactor/core/publisher/Flux;
      10: areturn

  public static <T> reactor.core.publisher.Flux<T> merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>, int);
    Code:
       0: aload_0
       1: iload_1
       2: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       5: invokestatic  #86                 // Method merge:(Lorg/reactivestreams/Publisher;II)Lreactor/core/publisher/Flux;
       8: areturn

  public static <T> reactor.core.publisher.Flux<T> merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>, int, int);
    Code:
       0: new           #87                 // class reactor/core/publisher/FluxFlatMap
       3: dup
       4: aload_0
       5: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
      11: iconst_0
      12: iload_1
      13: iload_1
      14: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      17: iload_2
      18: iload_2
      19: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      22: invokespecial #88                 // Method reactor/core/publisher/FluxFlatMap."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;ZILjava/util/function/Supplier;ILjava/util/function/Supplier;)V
      25: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      28: areturn

  public static <I> reactor.core.publisher.Flux<I> merge(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>);
    Code:
       0: aload_0
       1: invokestatic  #89                 // Method fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
       4: invokestatic  #90                 // Method merge:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       7: areturn

  public static <I> reactor.core.publisher.Flux<I> merge(org.reactivestreams.Publisher<? extends I>...);
    Code:
       0: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       3: aload_0
       4: invokestatic  #91                 // Method merge:(I[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       7: areturn

  public static <I> reactor.core.publisher.Flux<I> merge(int, org.reactivestreams.Publisher<? extends I>...);
    Code:
       0: iload_0
       1: iconst_0
       2: aload_1
       3: invokestatic  #92                 // Method merge:(IZ[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       6: areturn

  public static <I> reactor.core.publisher.Flux<I> mergeDelayError(int, org.reactivestreams.Publisher<? extends I>...);
    Code:
       0: iload_0
       1: iconst_1
       2: aload_1
       3: invokestatic  #92                 // Method merge:(IZ[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       6: areturn

  public static <I extends java.lang.Comparable<? super I>> reactor.core.publisher.Flux<I> mergeOrdered(org.reactivestreams.Publisher<? extends I>...);
    Code:
       0: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       3: invokestatic  #93                 // InterfaceMethod java/util/Comparator.naturalOrder:()Ljava/util/Comparator;
       6: aload_0
       7: invokestatic  #94                 // Method mergeOrdered:(ILjava/util/Comparator;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      10: areturn

  public static <T> reactor.core.publisher.Flux<T> mergeOrdered(java.util.Comparator<? super T>, org.reactivestreams.Publisher<? extends T>...);
    Code:
       0: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       3: aload_0
       4: aload_1
       5: invokestatic  #94                 // Method mergeOrdered:(ILjava/util/Comparator;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: areturn

  public static <T> reactor.core.publisher.Flux<T> mergeOrdered(int, java.util.Comparator<? super T>, org.reactivestreams.Publisher<? extends T>...);
    Code:
       0: aload_2
       1: arraylength
       2: ifne          9
       5: invokestatic  #4                  // Method empty:()Lreactor/core/publisher/Flux;
       8: areturn
       9: aload_2
      10: arraylength
      11: iconst_1
      12: if_icmpne     22
      15: aload_2
      16: iconst_0
      17: aaload
      18: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      21: areturn
      22: new           #95                 // class reactor/core/publisher/FluxMergeOrdered
      25: dup
      26: iload_0
      27: iload_0
      28: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      31: aload_1
      32: aload_2
      33: invokespecial #96                 // Method reactor/core/publisher/FluxMergeOrdered."<init>":(ILjava/util/function/Supplier;Ljava/util/Comparator;[Lorg/reactivestreams/Publisher;)V
      36: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      39: areturn

  public static <T> reactor.core.publisher.Flux<T> mergeSequential(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: aload_0
       1: iconst_0
       2: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       8: invokestatic  #97                 // Method mergeSequential:(Lorg/reactivestreams/Publisher;ZII)Lreactor/core/publisher/Flux;
      11: areturn

  public static <T> reactor.core.publisher.Flux<T> mergeSequential(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>, int, int);
    Code:
       0: aload_0
       1: iconst_0
       2: iload_1
       3: iload_2
       4: invokestatic  #97                 // Method mergeSequential:(Lorg/reactivestreams/Publisher;ZII)Lreactor/core/publisher/Flux;
       7: areturn

  public static <T> reactor.core.publisher.Flux<T> mergeSequentialDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>, int, int);
    Code:
       0: aload_0
       1: iconst_1
       2: iload_1
       3: iload_2
       4: invokestatic  #97                 // Method mergeSequential:(Lorg/reactivestreams/Publisher;ZII)Lreactor/core/publisher/Flux;
       7: areturn

  public static <I> reactor.core.publisher.Flux<I> mergeSequential(org.reactivestreams.Publisher<? extends I>...);
    Code:
       0: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       3: iconst_0
       4: aload_0
       5: invokestatic  #98                 // Method mergeSequential:(IZ[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: areturn

  public static <I> reactor.core.publisher.Flux<I> mergeSequential(int, org.reactivestreams.Publisher<? extends I>...);
    Code:
       0: iload_0
       1: iconst_0
       2: aload_1
       3: invokestatic  #98                 // Method mergeSequential:(IZ[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       6: areturn

  public static <I> reactor.core.publisher.Flux<I> mergeSequentialDelayError(int, org.reactivestreams.Publisher<? extends I>...);
    Code:
       0: iload_0
       1: iconst_1
       2: aload_1
       3: invokestatic  #98                 // Method mergeSequential:(IZ[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       6: areturn

  public static <I> reactor.core.publisher.Flux<I> mergeSequential(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>);
    Code:
       0: aload_0
       1: iconst_0
       2: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       8: invokestatic  #99                 // Method mergeSequential:(Ljava/lang/Iterable;ZII)Lreactor/core/publisher/Flux;
      11: areturn

  public static <I> reactor.core.publisher.Flux<I> mergeSequential(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>, int, int);
    Code:
       0: aload_0
       1: iconst_0
       2: iload_1
       3: iload_2
       4: invokestatic  #99                 // Method mergeSequential:(Ljava/lang/Iterable;ZII)Lreactor/core/publisher/Flux;
       7: areturn

  public static <I> reactor.core.publisher.Flux<I> mergeSequentialDelayError(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>, int, int);
    Code:
       0: aload_0
       1: iconst_1
       2: iload_1
       3: iload_2
       4: invokestatic  #99                 // Method mergeSequential:(Ljava/lang/Iterable;ZII)Lreactor/core/publisher/Flux;
       7: areturn

  public static <T> reactor.core.publisher.Flux<T> never();
    Code:
       0: invokestatic  #100                // Method reactor/core/publisher/FluxNever.instance:()Lreactor/core/publisher/Flux;
       3: areturn

  public static reactor.core.publisher.Flux<java.lang.Integer> range(int, int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmpne     13
       5: iload_0
       6: invokestatic  #101                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       9: invokestatic  #58                 // Method just:(Ljava/lang/Object;)Lreactor/core/publisher/Flux;
      12: areturn
      13: iload_1
      14: ifne          21
      17: invokestatic  #4                  // Method empty:()Lreactor/core/publisher/Flux;
      20: areturn
      21: new           #102                // class reactor/core/publisher/FluxRange
      24: dup
      25: iload_0
      26: iload_1
      27: invokespecial #103                // Method reactor/core/publisher/FluxRange."<init>":(II)V
      30: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      33: areturn

  public static <T> reactor.core.publisher.Flux<T> switchOnNext(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: aload_0
       1: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       4: invokestatic  #104                // Method switchOnNext:(Lorg/reactivestreams/Publisher;I)Lreactor/core/publisher/Flux;
       7: areturn

  public static <T> reactor.core.publisher.Flux<T> switchOnNext(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>, int);
    Code:
       0: new           #105                // class reactor/core/publisher/FluxSwitchMap
       3: dup
       4: aload_0
       5: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
      11: iload_1
      12: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      15: iload_1
      16: invokespecial #107                // Method reactor/core/publisher/FluxSwitchMap."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;Ljava/util/function/Supplier;I)V
      19: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      22: areturn

  public static <T, D> reactor.core.publisher.Flux<T> using(java.util.concurrent.Callable<? extends D>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<? extends T>>, java.util.function.Consumer<? super D>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_1
       4: invokestatic  #108                // Method using:(Ljava/util/concurrent/Callable;Ljava/util/function/Function;Ljava/util/function/Consumer;Z)Lreactor/core/publisher/Flux;
       7: areturn

  public static <T, D> reactor.core.publisher.Flux<T> using(java.util.concurrent.Callable<? extends D>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<? extends T>>, java.util.function.Consumer<? super D>, boolean);
    Code:
       0: new           #109                // class reactor/core/publisher/FluxUsing
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: iload_3
       8: invokespecial #110                // Method reactor/core/publisher/FluxUsing."<init>":(Ljava/util/concurrent/Callable;Ljava/util/function/Function;Ljava/util/function/Consumer;Z)V
      11: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      14: areturn

  public static <T, D> reactor.core.publisher.Flux<T> usingWhen(org.reactivestreams.Publisher<D>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<? extends T>>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: new           #111                // class reactor/core/publisher/FluxUsingWhen
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_3
       8: aconst_null
       9: invokespecial #112                // Method reactor/core/publisher/FluxUsingWhen."<init>":(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;)V
      12: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      15: areturn

  public static <T, D> reactor.core.publisher.Flux<T> usingWhen(org.reactivestreams.Publisher<D>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<? extends T>>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: new           #111                // class reactor/core/publisher/FluxUsingWhen
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_3
       8: aload         4
      10: invokespecial #112                // Method reactor/core/publisher/FluxUsingWhen."<init>":(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;)V
      13: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      16: areturn

  public static <T, D> reactor.core.publisher.Flux<T> usingWhen(org.reactivestreams.Publisher<D>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<? extends T>>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_2
       4: invokestatic  #113                // Method usingWhen:(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
       7: areturn

  public static <T1, T2, O> reactor.core.publisher.Flux<O> zip(org.reactivestreams.Publisher<? extends T1>, org.reactivestreams.Publisher<? extends T2>, java.util.function.BiFunction<? super T1, ? super T2, ? extends O>);
    Code:
       0: new           #114                // class reactor/core/publisher/FluxZip
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokestatic  #115                // Method reactor/util/concurrent/Queues.xs:()Ljava/util/function/Supplier;
      10: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
      13: invokespecial #116                // Method reactor/core/publisher/FluxZip."<init>":(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Ljava/util/function/BiFunction;Ljava/util/function/Supplier;I)V
      16: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      19: areturn

  public static <T1, T2> reactor.core.publisher.Flux<reactor.util.function.Tuple2<T1, T2>> zip(org.reactivestreams.Publisher<? extends T1>, org.reactivestreams.Publisher<? extends T2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #117                // Method tuple2Function:()Ljava/util/function/BiFunction;
       5: invokestatic  #118                // Method zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Ljava/util/function/BiFunction;)Lreactor/core/publisher/Flux;
       8: areturn

  public static <T1, T2, T3> reactor.core.publisher.Flux<reactor.util.function.Tuple3<T1, T2, T3>> zip(org.reactivestreams.Publisher<? extends T1>, org.reactivestreams.Publisher<? extends T2>, org.reactivestreams.Publisher<? extends T3>);
    Code:
       0: invokestatic  #119                // Method reactor/util/function/Tuples.fn3:()Ljava/util/function/Function;
       3: iconst_3
       4: anewarray     #18                 // class org/reactivestreams/Publisher
       7: dup
       8: iconst_0
       9: aload_0
      10: aastore
      11: dup
      12: iconst_1
      13: aload_1
      14: aastore
      15: dup
      16: iconst_2
      17: aload_2
      18: aastore
      19: invokestatic  #120                // Method zip:(Ljava/util/function/Function;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      22: areturn

  public static <T1, T2, T3, T4> reactor.core.publisher.Flux<reactor.util.function.Tuple4<T1, T2, T3, T4>> zip(org.reactivestreams.Publisher<? extends T1>, org.reactivestreams.Publisher<? extends T2>, org.reactivestreams.Publisher<? extends T3>, org.reactivestreams.Publisher<? extends T4>);
    Code:
       0: invokestatic  #121                // Method reactor/util/function/Tuples.fn4:()Ljava/util/function/Function;
       3: iconst_4
       4: anewarray     #18                 // class org/reactivestreams/Publisher
       7: dup
       8: iconst_0
       9: aload_0
      10: aastore
      11: dup
      12: iconst_1
      13: aload_1
      14: aastore
      15: dup
      16: iconst_2
      17: aload_2
      18: aastore
      19: dup
      20: iconst_3
      21: aload_3
      22: aastore
      23: invokestatic  #120                // Method zip:(Ljava/util/function/Function;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      26: areturn

  public static <T1, T2, T3, T4, T5> reactor.core.publisher.Flux<reactor.util.function.Tuple5<T1, T2, T3, T4, T5>> zip(org.reactivestreams.Publisher<? extends T1>, org.reactivestreams.Publisher<? extends T2>, org.reactivestreams.Publisher<? extends T3>, org.reactivestreams.Publisher<? extends T4>, org.reactivestreams.Publisher<? extends T5>);
    Code:
       0: invokestatic  #122                // Method reactor/util/function/Tuples.fn5:()Ljava/util/function/Function;
       3: iconst_5
       4: anewarray     #18                 // class org/reactivestreams/Publisher
       7: dup
       8: iconst_0
       9: aload_0
      10: aastore
      11: dup
      12: iconst_1
      13: aload_1
      14: aastore
      15: dup
      16: iconst_2
      17: aload_2
      18: aastore
      19: dup
      20: iconst_3
      21: aload_3
      22: aastore
      23: dup
      24: iconst_4
      25: aload         4
      27: aastore
      28: invokestatic  #120                // Method zip:(Ljava/util/function/Function;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      31: areturn

  public static <T1, T2, T3, T4, T5, T6> reactor.core.publisher.Flux<reactor.util.function.Tuple6<T1, T2, T3, T4, T5, T6>> zip(org.reactivestreams.Publisher<? extends T1>, org.reactivestreams.Publisher<? extends T2>, org.reactivestreams.Publisher<? extends T3>, org.reactivestreams.Publisher<? extends T4>, org.reactivestreams.Publisher<? extends T5>, org.reactivestreams.Publisher<? extends T6>);
    Code:
       0: invokestatic  #123                // Method reactor/util/function/Tuples.fn6:()Ljava/util/function/Function;
       3: bipush        6
       5: anewarray     #18                 // class org/reactivestreams/Publisher
       8: dup
       9: iconst_0
      10: aload_0
      11: aastore
      12: dup
      13: iconst_1
      14: aload_1
      15: aastore
      16: dup
      17: iconst_2
      18: aload_2
      19: aastore
      20: dup
      21: iconst_3
      22: aload_3
      23: aastore
      24: dup
      25: iconst_4
      26: aload         4
      28: aastore
      29: dup
      30: iconst_5
      31: aload         5
      33: aastore
      34: invokestatic  #120                // Method zip:(Ljava/util/function/Function;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      37: areturn

  public static <T1, T2, T3, T4, T5, T6, T7> reactor.core.publisher.Flux<reactor.util.function.Tuple7<T1, T2, T3, T4, T5, T6, T7>> zip(org.reactivestreams.Publisher<? extends T1>, org.reactivestreams.Publisher<? extends T2>, org.reactivestreams.Publisher<? extends T3>, org.reactivestreams.Publisher<? extends T4>, org.reactivestreams.Publisher<? extends T5>, org.reactivestreams.Publisher<? extends T6>, org.reactivestreams.Publisher<? extends T7>);
    Code:
       0: invokestatic  #124                // Method reactor/util/function/Tuples.fn7:()Ljava/util/function/Function;
       3: bipush        7
       5: anewarray     #18                 // class org/reactivestreams/Publisher
       8: dup
       9: iconst_0
      10: aload_0
      11: aastore
      12: dup
      13: iconst_1
      14: aload_1
      15: aastore
      16: dup
      17: iconst_2
      18: aload_2
      19: aastore
      20: dup
      21: iconst_3
      22: aload_3
      23: aastore
      24: dup
      25: iconst_4
      26: aload         4
      28: aastore
      29: dup
      30: iconst_5
      31: aload         5
      33: aastore
      34: dup
      35: bipush        6
      37: aload         6
      39: aastore
      40: invokestatic  #120                // Method zip:(Ljava/util/function/Function;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      43: areturn

  public static <T1, T2, T3, T4, T5, T6, T7, T8> reactor.core.publisher.Flux<reactor.util.function.Tuple8<T1, T2, T3, T4, T5, T6, T7, T8>> zip(org.reactivestreams.Publisher<? extends T1>, org.reactivestreams.Publisher<? extends T2>, org.reactivestreams.Publisher<? extends T3>, org.reactivestreams.Publisher<? extends T4>, org.reactivestreams.Publisher<? extends T5>, org.reactivestreams.Publisher<? extends T6>, org.reactivestreams.Publisher<? extends T7>, org.reactivestreams.Publisher<? extends T8>);
    Code:
       0: invokestatic  #125                // Method reactor/util/function/Tuples.fn8:()Ljava/util/function/Function;
       3: bipush        8
       5: anewarray     #18                 // class org/reactivestreams/Publisher
       8: dup
       9: iconst_0
      10: aload_0
      11: aastore
      12: dup
      13: iconst_1
      14: aload_1
      15: aastore
      16: dup
      17: iconst_2
      18: aload_2
      19: aastore
      20: dup
      21: iconst_3
      22: aload_3
      23: aastore
      24: dup
      25: iconst_4
      26: aload         4
      28: aastore
      29: dup
      30: iconst_5
      31: aload         5
      33: aastore
      34: dup
      35: bipush        6
      37: aload         6
      39: aastore
      40: dup
      41: bipush        7
      43: aload         7
      45: aastore
      46: invokestatic  #120                // Method zip:(Ljava/util/function/Function;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      49: areturn

  public static <O> reactor.core.publisher.Flux<O> zip(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super java.lang.Object[], ? extends O>);
    Code:
       0: aload_0
       1: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       4: aload_1
       5: invokestatic  #126                // Method zip:(Ljava/lang/Iterable;ILjava/util/function/Function;)Lreactor/core/publisher/Flux;
       8: areturn

  public static <O> reactor.core.publisher.Flux<O> zip(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>, int, java.util.function.Function<? super java.lang.Object[], ? extends O>);
    Code:
       0: new           #114                // class reactor/core/publisher/FluxZip
       3: dup
       4: aload_0
       5: aload_2
       6: iload_1
       7: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      10: iload_1
      11: invokespecial #127                // Method reactor/core/publisher/FluxZip."<init>":(Ljava/lang/Iterable;Ljava/util/function/Function;Ljava/util/function/Supplier;I)V
      14: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      17: areturn

  public static <I, O> reactor.core.publisher.Flux<O> zip(java.util.function.Function<? super java.lang.Object[], ? extends O>, org.reactivestreams.Publisher<? extends I>...);
    Code:
       0: aload_0
       1: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       4: aload_1
       5: invokestatic  #128                // Method zip:(Ljava/util/function/Function;I[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: areturn

  public static <I, O> reactor.core.publisher.Flux<O> zip(java.util.function.Function<? super java.lang.Object[], ? extends O>, int, org.reactivestreams.Publisher<? extends I>...);
    Code:
       0: aload_2
       1: arraylength
       2: ifne          9
       5: invokestatic  #4                  // Method empty:()Lreactor/core/publisher/Flux;
       8: areturn
       9: aload_2
      10: arraylength
      11: iconst_1
      12: if_icmpne     68
      15: aload_2
      16: iconst_0
      17: aaload
      18: astore_3
      19: aload_3
      20: instanceof    #5                  // class reactor/core/Fuseable
      23: ifeq          47
      26: new           #6                  // class reactor/core/publisher/FluxMapFuseable
      29: dup
      30: aload_3
      31: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      34: aload_0
      35: invokedynamic #129,  0            // InvokeDynamic #4:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
      40: invokespecial #9                  // Method reactor/core/publisher/FluxMapFuseable."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;)V
      43: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      46: areturn
      47: new           #11                 // class reactor/core/publisher/FluxMap
      50: dup
      51: aload_3
      52: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      55: aload_0
      56: invokedynamic #130,  0            // InvokeDynamic #5:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
      61: invokespecial #13                 // Method reactor/core/publisher/FluxMap."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;)V
      64: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      67: areturn
      68: new           #114                // class reactor/core/publisher/FluxZip
      71: dup
      72: aload_2
      73: aload_0
      74: iload_1
      75: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      78: iload_1
      79: invokespecial #131                // Method reactor/core/publisher/FluxZip."<init>":([Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Supplier;I)V
      82: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      85: areturn

  public static <TUPLE extends reactor.util.function.Tuple2, V> reactor.core.publisher.Flux<V> zip(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super TUPLE, ? extends V>);
    Code:
       0: new           #132                // class reactor/core/publisher/FluxBuffer
       3: dup
       4: aload_0
       5: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: ldc           #134                // int 2147483647
      10: invokestatic  #135                // Method listSupplier:()Ljava/util/function/Supplier;
      13: invokespecial #136                // Method reactor/core/publisher/FluxBuffer."<init>":(Lreactor/core/publisher/Flux;ILjava/util/function/Supplier;)V
      16: new           #137                // class reactor/core/publisher/Flux$1
      19: dup
      20: aload_1
      21: invokespecial #138                // Method reactor/core/publisher/Flux$1."<init>":(Ljava/util/function/Function;)V
      24: invokevirtual #139                // Method reactor/core/publisher/FluxBuffer.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      27: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      30: areturn

  public final reactor.core.publisher.Mono<java.lang.Boolean> all(java.util.function.Predicate<? super T>);
    Code:
       0: new           #140                // class reactor/core/publisher/MonoAll
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #141                // Method reactor/core/publisher/MonoAll."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Predicate;)V
       9: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public final reactor.core.publisher.Mono<java.lang.Boolean> any(java.util.function.Predicate<? super T>);
    Code:
       0: new           #143                // class reactor/core/publisher/MonoAny
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #144                // Method reactor/core/publisher/MonoAny."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Predicate;)V
       9: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public final <P> P as(java.util.function.Function<? super reactor.core.publisher.Flux<T>, P>);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final T blockFirst();
    Code:
       0: new           #146                // class reactor/core/publisher/BlockingFirstSubscriber
       3: dup
       4: invokespecial #147                // Method reactor/core/publisher/BlockingFirstSubscriber."<init>":()V
       7: astore_1
       8: aload_0
       9: invokestatic  #148                // Method onLastAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: aload_1
      13: invokestatic  #149                // Method reactor/core/publisher/Operators.toCoreSubscriber:(Lorg/reactivestreams/Subscriber;)Lreactor/core/CoreSubscriber;
      16: invokevirtual #150                // Method subscribe:(Lreactor/core/CoreSubscriber;)V
      19: aload_1
      20: invokevirtual #151                // Method reactor/core/publisher/BlockingFirstSubscriber.blockingGet:()Ljava/lang/Object;
      23: areturn

  public final T blockFirst(java.time.Duration);
    Code:
       0: new           #146                // class reactor/core/publisher/BlockingFirstSubscriber
       3: dup
       4: invokespecial #147                // Method reactor/core/publisher/BlockingFirstSubscriber."<init>":()V
       7: astore_2
       8: aload_0
       9: invokestatic  #148                // Method onLastAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: aload_2
      13: invokestatic  #149                // Method reactor/core/publisher/Operators.toCoreSubscriber:(Lorg/reactivestreams/Subscriber;)Lreactor/core/CoreSubscriber;
      16: invokevirtual #150                // Method subscribe:(Lreactor/core/CoreSubscriber;)V
      19: aload_2
      20: aload_1
      21: invokevirtual #80                 // Method java/time/Duration.toMillis:()J
      24: getstatic     #81                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      27: invokevirtual #152                // Method reactor/core/publisher/BlockingFirstSubscriber.blockingGet:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;
      30: areturn

  public final T blockLast();
    Code:
       0: new           #153                // class reactor/core/publisher/BlockingLastSubscriber
       3: dup
       4: invokespecial #154                // Method reactor/core/publisher/BlockingLastSubscriber."<init>":()V
       7: astore_1
       8: aload_0
       9: invokestatic  #148                // Method onLastAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: aload_1
      13: invokestatic  #149                // Method reactor/core/publisher/Operators.toCoreSubscriber:(Lorg/reactivestreams/Subscriber;)Lreactor/core/CoreSubscriber;
      16: invokevirtual #150                // Method subscribe:(Lreactor/core/CoreSubscriber;)V
      19: aload_1
      20: invokevirtual #155                // Method reactor/core/publisher/BlockingLastSubscriber.blockingGet:()Ljava/lang/Object;
      23: areturn

  public final T blockLast(java.time.Duration);
    Code:
       0: new           #153                // class reactor/core/publisher/BlockingLastSubscriber
       3: dup
       4: invokespecial #154                // Method reactor/core/publisher/BlockingLastSubscriber."<init>":()V
       7: astore_2
       8: aload_0
       9: invokestatic  #148                // Method onLastAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: aload_2
      13: invokestatic  #149                // Method reactor/core/publisher/Operators.toCoreSubscriber:(Lorg/reactivestreams/Subscriber;)Lreactor/core/CoreSubscriber;
      16: invokevirtual #150                // Method subscribe:(Lreactor/core/CoreSubscriber;)V
      19: aload_2
      20: aload_1
      21: invokevirtual #80                 // Method java/time/Duration.toMillis:()J
      24: getstatic     #81                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      27: invokevirtual #156                // Method reactor/core/publisher/BlockingLastSubscriber.blockingGet:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;
      30: areturn

  public final reactor.core.publisher.Flux<java.util.List<T>> buffer();
    Code:
       0: aload_0
       1: ldc           #134                // int 2147483647
       3: invokevirtual #157                // Method buffer:(I)Lreactor/core/publisher/Flux;
       6: areturn

  public final reactor.core.publisher.Flux<java.util.List<T>> buffer(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #135                // Method listSupplier:()Ljava/util/function/Supplier;
       5: invokevirtual #158                // Method buffer:(ILjava/util/function/Supplier;)Lreactor/core/publisher/Flux;
       8: areturn

  public final <C extends java.util.Collection<? super T>> reactor.core.publisher.Flux<C> buffer(int, java.util.function.Supplier<C>);
    Code:
       0: new           #132                // class reactor/core/publisher/FluxBuffer
       3: dup
       4: aload_0
       5: iload_1
       6: aload_2
       7: invokespecial #136                // Method reactor/core/publisher/FluxBuffer."<init>":(Lreactor/core/publisher/Flux;ILjava/util/function/Supplier;)V
      10: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      13: areturn

  public final reactor.core.publisher.Flux<java.util.List<T>> buffer(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #135                // Method listSupplier:()Ljava/util/function/Supplier;
       6: invokevirtual #159                // Method buffer:(IILjava/util/function/Supplier;)Lreactor/core/publisher/Flux;
       9: areturn

  public final <C extends java.util.Collection<? super T>> reactor.core.publisher.Flux<C> buffer(int, int, java.util.function.Supplier<C>);
    Code:
       0: new           #132                // class reactor/core/publisher/FluxBuffer
       3: dup
       4: aload_0
       5: iload_1
       6: iload_2
       7: aload_3
       8: invokespecial #160                // Method reactor/core/publisher/FluxBuffer."<init>":(Lreactor/core/publisher/Flux;IILjava/util/function/Supplier;)V
      11: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      14: areturn

  public final reactor.core.publisher.Flux<java.util.List<T>> buffer(org.reactivestreams.Publisher<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #135                // Method listSupplier:()Ljava/util/function/Supplier;
       5: invokevirtual #161                // Method buffer:(Lorg/reactivestreams/Publisher;Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
       8: areturn

  public final <C extends java.util.Collection<? super T>> reactor.core.publisher.Flux<C> buffer(org.reactivestreams.Publisher<?>, java.util.function.Supplier<C>);
    Code:
       0: new           #162                // class reactor/core/publisher/FluxBufferBoundary
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #163                // Method reactor/core/publisher/FluxBufferBoundary."<init>":(Lreactor/core/publisher/Flux;Lorg/reactivestreams/Publisher;Ljava/util/function/Supplier;)V
      10: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      13: areturn

  public final reactor.core.publisher.Flux<java.util.List<T>> buffer(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokevirtual #164                // Method buffer:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<java.util.List<T>> buffer(java.time.Duration, java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       6: invokevirtual #165                // Method buffer:(Ljava/time/Duration;Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       9: areturn

  public final reactor.core.publisher.Flux<java.util.List<T>> buffer(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #77                 // Method interval:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       6: invokevirtual #166                // Method buffer:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       9: areturn

  public final reactor.core.publisher.Flux<java.util.List<T>> buffer(java.time.Duration, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #167                // Method java/time/Duration.equals:(Ljava/lang/Object;)Z
       5: ifeq          15
       8: aload_0
       9: aload_1
      10: aload_3
      11: invokevirtual #164                // Method buffer:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
      14: areturn
      15: aload_0
      16: getstatic     #168                // Field java/time/Duration.ZERO:Ljava/time/Duration;
      19: aload_2
      20: aload_3
      21: invokestatic  #78                 // Method interval:(Ljava/time/Duration;Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
      24: aload_1
      25: aload_3
      26: invokedynamic #169,  0            // InvokeDynamic #6:apply:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Ljava/util/function/Function;
      31: invokevirtual #170                // Method bufferWhen:(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      34: areturn

  public final reactor.core.publisher.Flux<java.util.List<T>> bufferTimeout(int, java.time.Duration);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #135                // Method listSupplier:()Ljava/util/function/Supplier;
       6: invokevirtual #171                // Method bufferTimeout:(ILjava/time/Duration;Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
       9: areturn

  public final <C extends java.util.Collection<? super T>> reactor.core.publisher.Flux<C> bufferTimeout(int, java.time.Duration, java.util.function.Supplier<C>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       6: aload_3
       7: invokevirtual #172                // Method bufferTimeout:(ILjava/time/Duration;Lreactor/core/scheduler/Scheduler;Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
      10: areturn

  public final reactor.core.publisher.Flux<java.util.List<T>> bufferTimeout(int, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #135                // Method listSupplier:()Ljava/util/function/Supplier;
       7: invokevirtual #172                // Method bufferTimeout:(ILjava/time/Duration;Lreactor/core/scheduler/Scheduler;Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
      10: areturn

  public final <C extends java.util.Collection<? super T>> reactor.core.publisher.Flux<C> bufferTimeout(int, java.time.Duration, reactor.core.scheduler.Scheduler, java.util.function.Supplier<C>);
    Code:
       0: new           #173                // class reactor/core/publisher/FluxBufferTimeout
       3: dup
       4: aload_0
       5: iload_1
       6: aload_2
       7: invokevirtual #80                 // Method java/time/Duration.toMillis:()J
      10: aload_3
      11: aload         4
      13: invokespecial #174                // Method reactor/core/publisher/FluxBufferTimeout."<init>":(Lreactor/core/publisher/Flux;IJLreactor/core/scheduler/Scheduler;Ljava/util/function/Supplier;)V
      16: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      19: areturn

  public final reactor.core.publisher.Flux<java.util.List<T>> bufferUntil(java.util.function.Predicate<? super T>);
    Code:
       0: new           #175                // class reactor/core/publisher/FluxBufferPredicate
       3: dup
       4: aload_0
       5: aload_1
       6: invokestatic  #135                // Method listSupplier:()Ljava/util/function/Supplier;
       9: getstatic     #176                // Field reactor/core/publisher/FluxBufferPredicate$Mode.UNTIL:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      12: invokespecial #177                // Method reactor/core/publisher/FluxBufferPredicate."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Predicate;Ljava/util/function/Supplier;Lreactor/core/publisher/FluxBufferPredicate$Mode;)V
      15: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      18: areturn

  public final reactor.core.publisher.Flux<java.util.List<T>> bufferUntil(java.util.function.Predicate<? super T>, boolean);
    Code:
       0: new           #175                // class reactor/core/publisher/FluxBufferPredicate
       3: dup
       4: aload_0
       5: aload_1
       6: invokestatic  #135                // Method listSupplier:()Ljava/util/function/Supplier;
       9: iload_2
      10: ifeq          19
      13: getstatic     #178                // Field reactor/core/publisher/FluxBufferPredicate$Mode.UNTIL_CUT_BEFORE:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      16: goto          22
      19: getstatic     #176                // Field reactor/core/publisher/FluxBufferPredicate$Mode.UNTIL:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      22: invokespecial #177                // Method reactor/core/publisher/FluxBufferPredicate."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Predicate;Ljava/util/function/Supplier;Lreactor/core/publisher/FluxBufferPredicate$Mode;)V
      25: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      28: areturn

  public final reactor.core.publisher.Flux<java.util.List<T>> bufferWhile(java.util.function.Predicate<? super T>);
    Code:
       0: new           #175                // class reactor/core/publisher/FluxBufferPredicate
       3: dup
       4: aload_0
       5: aload_1
       6: invokestatic  #135                // Method listSupplier:()Ljava/util/function/Supplier;
       9: getstatic     #179                // Field reactor/core/publisher/FluxBufferPredicate$Mode.WHILE:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      12: invokespecial #177                // Method reactor/core/publisher/FluxBufferPredicate."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Predicate;Ljava/util/function/Supplier;Lreactor/core/publisher/FluxBufferPredicate$Mode;)V
      15: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      18: areturn

  public final <U, V> reactor.core.publisher.Flux<java.util.List<T>> bufferWhen(org.reactivestreams.Publisher<U>, java.util.function.Function<? super U, ? extends org.reactivestreams.Publisher<V>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #135                // Method listSupplier:()Ljava/util/function/Supplier;
       6: invokevirtual #180                // Method bufferWhen:(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
       9: areturn

  public final <U, V, C extends java.util.Collection<? super T>> reactor.core.publisher.Flux<C> bufferWhen(org.reactivestreams.Publisher<U>, java.util.function.Function<? super U, ? extends org.reactivestreams.Publisher<V>>, java.util.function.Supplier<C>);
    Code:
       0: new           #181                // class reactor/core/publisher/FluxBufferWhen
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_3
       8: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
      11: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      14: invokespecial #182                // Method reactor/core/publisher/FluxBufferWhen."<init>":(Lreactor/core/publisher/Flux;Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Supplier;Ljava/util/function/Supplier;)V
      17: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      20: areturn

  public final reactor.core.publisher.Flux<T> cache();
    Code:
       0: aload_0
       1: ldc           #134                // int 2147483647
       3: invokevirtual #183                // Method cache:(I)Lreactor/core/publisher/Flux;
       6: areturn

  public final reactor.core.publisher.Flux<T> cache(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #184                // Method replay:(I)Lreactor/core/publisher/ConnectableFlux;
       5: invokevirtual #185                // Method reactor/core/publisher/ConnectableFlux.autoConnect:()Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> cache(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokevirtual #186                // Method cache:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> cache(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: ldc           #134                // int 2147483647
       3: aload_1
       4: aload_2
       5: invokevirtual #187                // Method cache:(ILjava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> cache(int, java.time.Duration);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       6: invokevirtual #187                // Method cache:(ILjava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       9: areturn

  public final reactor.core.publisher.Flux<T> cache(int, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #188                // Method replay:(ILjava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/ConnectableFlux;
       7: invokevirtual #185                // Method reactor/core/publisher/ConnectableFlux.autoConnect:()Lreactor/core/publisher/Flux;
      10: areturn

  public final <E> reactor.core.publisher.Flux<E> cast(java.lang.Class<E>);
    Code:
       0: aload_1
       1: ldc           #189                // String clazz
       3: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: dup
      10: invokevirtual #190                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      13: pop
      14: invokedynamic #191,  0            // InvokeDynamic #7:apply:(Ljava/lang/Class;)Ljava/util/function/Function;
      19: invokevirtual #192                // Method map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      22: areturn

  public final reactor.core.publisher.Flux<T> cancelOn(reactor.core.scheduler.Scheduler);
    Code:
       0: new           #193                // class reactor/core/publisher/FluxCancelOn
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #194                // Method reactor/core/publisher/FluxCancelOn."<init>":(Lreactor/core/publisher/Flux;Lreactor/core/scheduler/Scheduler;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> checkpoint();
    Code:
       0: aload_0
       1: aconst_null
       2: iconst_1
       3: invokevirtual #195                // Method checkpoint:(Ljava/lang/String;Z)Lreactor/core/publisher/Flux;
       6: areturn

  public final reactor.core.publisher.Flux<T> checkpoint(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #196                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #197                // class java/lang/String
       8: iconst_0
       9: invokevirtual #195                // Method checkpoint:(Ljava/lang/String;Z)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> checkpoint(java.lang.String, boolean);
    Code:
       0: iload_2
       1: ifne          16
       4: new           #198                // class reactor/core/publisher/FluxOnAssembly$AssemblyLightSnapshot
       7: dup
       8: aload_1
       9: invokespecial #199                // Method reactor/core/publisher/FluxOnAssembly$AssemblyLightSnapshot."<init>":(Ljava/lang/String;)V
      12: astore_3
      13: goto          36
      16: new           #200                // class reactor/core/publisher/FluxOnAssembly$AssemblySnapshot
      19: dup
      20: aload_1
      21: getstatic     #201                // Field reactor/core/publisher/Traces.callSiteSupplierFactory:Ljava/util/function/Supplier;
      24: invokeinterface #202,  1          // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      29: checkcast     #203                // class java/util/function/Supplier
      32: invokespecial #204                // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshot."<init>":(Ljava/lang/String;Ljava/util/function/Supplier;)V
      35: astore_3
      36: new           #205                // class reactor/core/publisher/FluxOnAssembly
      39: dup
      40: aload_0
      41: aload_3
      42: invokespecial #206                // Method reactor/core/publisher/FluxOnAssembly."<init>":(Lreactor/core/publisher/Flux;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;)V
      45: areturn

  public final <E> reactor.core.publisher.Mono<E> collect(java.util.function.Supplier<E>, java.util.function.BiConsumer<E, ? super T>);
    Code:
       0: new           #207                // class reactor/core/publisher/MonoCollect
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #208                // Method reactor/core/publisher/MonoCollect."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;)V
      10: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      13: areturn

  public final <R, A> reactor.core.publisher.Mono<R> collect(java.util.stream.Collector<? super T, A, ? extends R>);
    Code:
       0: new           #209                // class reactor/core/publisher/MonoStreamCollector
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #210                // Method reactor/core/publisher/MonoStreamCollector."<init>":(Lreactor/core/publisher/Flux;Ljava/util/stream/Collector;)V
       9: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public final reactor.core.publisher.Mono<java.util.List<T>> collectList();
    Code:
       0: aload_0
       1: instanceof    #211                // class java/util/concurrent/Callable
       4: ifeq          91
       7: aload_0
       8: instanceof    #56                 // class reactor/core/Fuseable$ScalarCallable
      11: ifeq          66
      14: aload_0
      15: checkcast     #56                 // class reactor/core/Fuseable$ScalarCallable
      18: astore_1
      19: aload_1
      20: invokeinterface #57,  1           // InterfaceMethod reactor/core/Fuseable$ScalarCallable.call:()Ljava/lang/Object;
      25: astore_2
      26: goto          35
      29: astore_3
      30: aload_3
      31: invokestatic  #212                // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      34: areturn
      35: aload_2
      36: ifnonnull     53
      39: new           #213                // class reactor/core/publisher/MonoSupplier
      42: dup
      43: invokestatic  #135                // Method listSupplier:()Ljava/util/function/Supplier;
      46: invokespecial #214                // Method reactor/core/publisher/MonoSupplier."<init>":(Ljava/util/function/Supplier;)V
      49: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      52: areturn
      53: aload_2
      54: invokestatic  #215                // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      57: invokedynamic #216,  0            // InvokeDynamic #8:apply:()Ljava/util/function/Function;
      62: invokevirtual #217                // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      65: areturn
      66: aload_0
      67: checkcast     #211                // class java/util/concurrent/Callable
      70: astore_1
      71: new           #218                // class reactor/core/publisher/MonoCallable
      74: dup
      75: aload_1
      76: invokespecial #219                // Method reactor/core/publisher/MonoCallable."<init>":(Ljava/util/concurrent/Callable;)V
      79: invokedynamic #220,  0            // InvokeDynamic #9:apply:()Ljava/util/function/Function;
      84: invokevirtual #221                // Method reactor/core/publisher/MonoCallable.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      87: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      90: areturn
      91: new           #222                // class reactor/core/publisher/MonoCollectList
      94: dup
      95: aload_0
      96: invokespecial #223                // Method reactor/core/publisher/MonoCollectList."<init>":(Lreactor/core/publisher/Flux;)V
      99: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
     102: areturn
    Exception table:
       from    to  target type
          19    26    29   Class java/lang/Exception

  public final <K> reactor.core.publisher.Mono<java.util.Map<K, T>> collectMap(java.util.function.Function<? super T, ? extends K>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
       5: invokevirtual #224                // Method collectMap:(Ljava/util/function/Function;Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
       8: areturn

  public final <K, V> reactor.core.publisher.Mono<java.util.Map<K, V>> collectMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #225,  0            // InvokeDynamic #10:get:()Ljava/util/function/Supplier;
       8: invokevirtual #226                // Method collectMap:(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      11: areturn

  public final <K, V> reactor.core.publisher.Mono<java.util.Map<K, V>> collectMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>, java.util.function.Supplier<java.util.Map<K, V>>);
    Code:
       0: aload_1
       1: ldc           #227                // String Key extractor is null
       3: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_2
       8: ldc           #228                // String Value extractor is null
      10: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: aload_3
      15: ldc           #229                // String Map supplier is null
      17: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      20: pop
      21: aload_0
      22: aload_3
      23: aload_1
      24: aload_2
      25: invokedynamic #230,  0            // InvokeDynamic #11:accept:(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/function/BiConsumer;
      30: invokevirtual #231                // Method collect:(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;)Lreactor/core/publisher/Mono;
      33: areturn

  public final <K> reactor.core.publisher.Mono<java.util.Map<K, java.util.Collection<T>>> collectMultimap(java.util.function.Function<? super T, ? extends K>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
       5: invokevirtual #232                // Method collectMultimap:(Ljava/util/function/Function;Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
       8: areturn

  public final <K, V> reactor.core.publisher.Mono<java.util.Map<K, java.util.Collection<V>>> collectMultimap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #233,  0            // InvokeDynamic #12:get:()Ljava/util/function/Supplier;
       8: invokevirtual #234                // Method collectMultimap:(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      11: areturn

  public final <K, V> reactor.core.publisher.Mono<java.util.Map<K, java.util.Collection<V>>> collectMultimap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>, java.util.function.Supplier<java.util.Map<K, java.util.Collection<V>>>);
    Code:
       0: aload_1
       1: ldc           #227                // String Key extractor is null
       3: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_2
       8: ldc           #228                // String Value extractor is null
      10: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: aload_3
      15: ldc           #229                // String Map supplier is null
      17: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      20: pop
      21: aload_0
      22: aload_3
      23: aload_1
      24: aload_2
      25: invokedynamic #235,  0            // InvokeDynamic #13:accept:(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/function/BiConsumer;
      30: invokevirtual #231                // Method collect:(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;)Lreactor/core/publisher/Mono;
      33: areturn

  public final reactor.core.publisher.Mono<java.util.List<T>> collectSortedList();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #236                // Method collectSortedList:(Ljava/util/Comparator;)Lreactor/core/publisher/Mono;
       5: areturn

  public final reactor.core.publisher.Mono<java.util.List<T>> collectSortedList(java.util.Comparator<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #237                // Method collectList:()Lreactor/core/publisher/Mono;
       4: aload_1
       5: invokedynamic #238,  0            // InvokeDynamic #14:apply:(Ljava/util/Comparator;)Ljava/util/function/Function;
      10: invokevirtual #217                // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      13: areturn

  public final <V> reactor.core.publisher.Flux<V> compose(java.util.function.Function<? super reactor.core.publisher.Flux<T>, ? extends org.reactivestreams.Publisher<V>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #239,  0            // InvokeDynamic #15:get:(Lreactor/core/publisher/Flux;Ljava/util/function/Function;)Ljava/util/function/Supplier;
       7: invokestatic  #240                // Method defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
      10: areturn

  public final <V> reactor.core.publisher.Flux<V> concatMap(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends V>>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       5: invokevirtual #241                // Method concatMap:(Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final <V> reactor.core.publisher.Flux<V> concatMap(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends V>>, int);
    Code:
       0: new           #27                 // class reactor/core/publisher/FluxConcatMap
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      10: iload_2
      11: getstatic     #29                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.IMMEDIATE:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      14: invokespecial #30                 // Method reactor/core/publisher/FluxConcatMap."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;Ljava/util/function/Supplier;ILreactor/core/publisher/FluxConcatMap$ErrorMode;)V
      17: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      20: areturn

  public final <V> reactor.core.publisher.Flux<V> concatMapDelayError(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends V>>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       5: invokevirtual #242                // Method concatMapDelayError:(Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final <V> reactor.core.publisher.Flux<V> concatMapDelayError(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends V>>, int);
    Code:
       0: new           #27                 // class reactor/core/publisher/FluxConcatMap
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      10: iload_2
      11: getstatic     #34                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.END:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      14: invokespecial #30                 // Method reactor/core/publisher/FluxConcatMap."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;Ljava/util/function/Supplier;ILreactor/core/publisher/FluxConcatMap$ErrorMode;)V
      17: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      20: areturn

  public final <V> reactor.core.publisher.Flux<V> concatMapDelayError(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends V>>, boolean, int);
    Code:
       0: new           #27                 // class reactor/core/publisher/FluxConcatMap
       3: dup
       4: aload_0
       5: aload_1
       6: iload_3
       7: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      10: iload_3
      11: iload_2
      12: ifeq          21
      15: getstatic     #34                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.END:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      18: goto          24
      21: getstatic     #35                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.BOUNDARY:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      24: invokespecial #30                 // Method reactor/core/publisher/FluxConcatMap."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;Ljava/util/function/Supplier;ILreactor/core/publisher/FluxConcatMap$ErrorMode;)V
      27: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      30: areturn

  public final <R> reactor.core.publisher.Flux<R> concatMapIterable(java.util.function.Function<? super T, ? extends java.lang.Iterable<? extends R>>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       5: invokevirtual #243                // Method concatMapIterable:(Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final <R> reactor.core.publisher.Flux<R> concatMapIterable(java.util.function.Function<? super T, ? extends java.lang.Iterable<? extends R>>, int);
    Code:
       0: new           #244                // class reactor/core/publisher/FluxFlattenIterable
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: iload_2
       8: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      11: invokespecial #245                // Method reactor/core/publisher/FluxFlattenIterable."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;ILjava/util/function/Supplier;)V
      14: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      17: areturn

  public final reactor.core.publisher.Flux<T> concatWith(org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_0
       1: instanceof    #31                 // class reactor/core/publisher/FluxConcatArray
       4: ifeq          18
       7: aload_0
       8: checkcast     #31                 // class reactor/core/publisher/FluxConcatArray
      11: astore_2
      12: aload_2
      13: aload_1
      14: invokevirtual #246                // Method reactor/core/publisher/FluxConcatArray.concatAdditionalSourceLast:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/FluxConcatArray;
      17: areturn
      18: iconst_2
      19: anewarray     #18                 // class org/reactivestreams/Publisher
      22: dup
      23: iconst_0
      24: aload_0
      25: aastore
      26: dup
      27: iconst_1
      28: aload_1
      29: aastore
      30: invokestatic  #247                // Method concat:([Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      33: areturn

  public final reactor.core.publisher.Mono<java.lang.Long> count();
    Code:
       0: new           #248                // class reactor/core/publisher/MonoCount
       3: dup
       4: aload_0
       5: invokespecial #249                // Method reactor/core/publisher/MonoCount."<init>":(Lreactor/core/publisher/Flux;)V
       8: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public final reactor.core.publisher.Flux<T> defaultIfEmpty(T);
    Code:
       0: new           #250                // class reactor/core/publisher/FluxDefaultIfEmpty
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #251                // Method reactor/core/publisher/FluxDefaultIfEmpty."<init>":(Lreactor/core/publisher/Flux;Ljava/lang/Object;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> delayElements(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokevirtual #252                // Method delayElements:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> delayElements(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #253,  0            // InvokeDynamic #16:apply:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Ljava/util/function/Function;
       8: invokevirtual #254                // Method delayUntil:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      11: areturn

  public final reactor.core.publisher.Flux<T> delaySequence(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokevirtual #255                // Method delaySequence:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> delaySequence(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: new           #256                // class reactor/core/publisher/FluxDelaySequence
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #257                // Method reactor/core/publisher/FluxDelaySequence."<init>":(Lreactor/core/publisher/Flux;Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)V
      10: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      13: areturn

  public final reactor.core.publisher.Flux<T> delayUntil(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #258,  0            // InvokeDynamic #17:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
       7: invokevirtual #259                // Method concatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      10: areturn

  public final reactor.core.publisher.Flux<T> delaySubscription(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokevirtual #260                // Method delaySubscription:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> delaySubscription(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #261                // Method reactor/core/publisher/Mono.delay:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       6: invokevirtual #262                // Method delaySubscription:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       9: areturn

  public final <U> reactor.core.publisher.Flux<T> delaySubscription(org.reactivestreams.Publisher<U>);
    Code:
       0: new           #263                // class reactor/core/publisher/FluxDelaySubscription
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #264                // Method reactor/core/publisher/FluxDelaySubscription."<init>":(Lreactor/core/publisher/Flux;Lorg/reactivestreams/Publisher;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final <X> reactor.core.publisher.Flux<X> dematerialize();
    Code:
       0: aload_0
       1: astore_1
       2: new           #265                // class reactor/core/publisher/FluxDematerialize
       5: dup
       6: aload_1
       7: invokespecial #266                // Method reactor/core/publisher/FluxDematerialize."<init>":(Lreactor/core/publisher/Flux;)V
      10: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      13: areturn

  public final reactor.core.publisher.Flux<T> distinct();
    Code:
       0: aload_0
       1: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
       4: invokevirtual #267                // Method distinct:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
       7: areturn

  public final <V> reactor.core.publisher.Flux<T> distinct(java.util.function.Function<? super T, ? extends V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #268                // Method hashSetSupplier:()Ljava/util/function/Supplier;
       5: invokevirtual #269                // Method distinct:(Ljava/util/function/Function;Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
       8: areturn

  public final <V, C extends java.util.Collection<? super V>> reactor.core.publisher.Flux<T> distinct(java.util.function.Function<? super T, ? extends V>, java.util.function.Supplier<C>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #270,  0            // InvokeDynamic #18:test:()Ljava/util/function/BiPredicate;
       8: invokedynamic #271,  0            // InvokeDynamic #19:accept:()Ljava/util/function/Consumer;
      13: invokevirtual #272                // Method distinct:(Ljava/util/function/Function;Ljava/util/function/Supplier;Ljava/util/function/BiPredicate;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      16: areturn

  public final <V, C> reactor.core.publisher.Flux<T> distinct(java.util.function.Function<? super T, ? extends V>, java.util.function.Supplier<C>, java.util.function.BiPredicate<C, V>, java.util.function.Consumer<C>);
    Code:
       0: aload_0
       1: instanceof    #5                  // class reactor/core/Fuseable
       4: ifeq          24
       7: new           #273                // class reactor/core/publisher/FluxDistinctFuseable
      10: dup
      11: aload_0
      12: aload_1
      13: aload_2
      14: aload_3
      15: aload         4
      17: invokespecial #274                // Method reactor/core/publisher/FluxDistinctFuseable."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;Ljava/util/function/Supplier;Ljava/util/function/BiPredicate;Ljava/util/function/Consumer;)V
      20: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      23: areturn
      24: new           #275                // class reactor/core/publisher/FluxDistinct
      27: dup
      28: aload_0
      29: aload_1
      30: aload_2
      31: aload_3
      32: aload         4
      34: invokespecial #276                // Method reactor/core/publisher/FluxDistinct."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;Ljava/util/function/Supplier;Ljava/util/function/BiPredicate;Ljava/util/function/Consumer;)V
      37: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      40: areturn

  public final reactor.core.publisher.Flux<T> distinctUntilChanged();
    Code:
       0: aload_0
       1: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
       4: invokevirtual #277                // Method distinctUntilChanged:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
       7: areturn

  public final <V> reactor.core.publisher.Flux<T> distinctUntilChanged(java.util.function.Function<? super T, ? extends V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #278                // Method equalPredicate:()Ljava/util/function/BiPredicate;
       5: invokevirtual #279                // Method distinctUntilChanged:(Ljava/util/function/Function;Ljava/util/function/BiPredicate;)Lreactor/core/publisher/Flux;
       8: areturn

  public final <V> reactor.core.publisher.Flux<T> distinctUntilChanged(java.util.function.Function<? super T, ? extends V>, java.util.function.BiPredicate<? super V, ? super V>);
    Code:
       0: new           #280                // class reactor/core/publisher/FluxDistinctUntilChanged
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #281                // Method reactor/core/publisher/FluxDistinctUntilChanged."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;Ljava/util/function/BiPredicate;)V
      10: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      13: areturn

  public final reactor.core.publisher.Flux<T> doAfterTerminate(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc_w         #282                // String afterTerminate
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aconst_null
      10: aconst_null
      11: aconst_null
      12: aconst_null
      13: aload_1
      14: aconst_null
      15: aconst_null
      16: invokestatic  #283                // Method doOnSignal:(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      19: areturn

  public final reactor.core.publisher.Flux<T> doOnCancel(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc_w         #284                // String onCancel
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aconst_null
      10: aconst_null
      11: aconst_null
      12: aconst_null
      13: aconst_null
      14: aconst_null
      15: aload_1
      16: invokestatic  #283                // Method doOnSignal:(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      19: areturn

  public final reactor.core.publisher.Flux<T> doOnComplete(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc_w         #285                // String onComplete
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aconst_null
      10: aconst_null
      11: aconst_null
      12: aload_1
      13: aconst_null
      14: aconst_null
      15: aconst_null
      16: invokestatic  #283                // Method doOnSignal:(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      19: areturn

  public final <R> reactor.core.publisher.Flux<T> doOnDiscard(java.lang.Class<R>, java.util.function.Consumer<? super R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #286                // Method reactor/core/publisher/Operators.discardLocalAdapter:(Ljava/lang/Class;Ljava/util/function/Consumer;)Ljava/util/function/Function;
       6: invokevirtual #287                // Method subscriberContext:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
       9: areturn

  public final reactor.core.publisher.Flux<T> doOnEach(java.util.function.Consumer<? super reactor.core.publisher.Signal<T>>);
    Code:
       0: aload_0
       1: instanceof    #5                  // class reactor/core/Fuseable
       4: ifeq          20
       7: new           #288                // class reactor/core/publisher/FluxDoOnEachFuseable
      10: dup
      11: aload_0
      12: aload_1
      13: invokespecial #289                // Method reactor/core/publisher/FluxDoOnEachFuseable."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;)V
      16: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      19: areturn
      20: new           #290                // class reactor/core/publisher/FluxDoOnEach
      23: dup
      24: aload_0
      25: aload_1
      26: invokespecial #291                // Method reactor/core/publisher/FluxDoOnEach."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;)V
      29: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      32: areturn

  public final reactor.core.publisher.Flux<T> doOnError(java.util.function.Consumer<? super java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc_w         #292                // String onError
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aconst_null
      10: aconst_null
      11: aload_1
      12: aconst_null
      13: aconst_null
      14: aconst_null
      15: aconst_null
      16: invokestatic  #283                // Method doOnSignal:(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      19: areturn

  public final <E extends java.lang.Throwable> reactor.core.publisher.Flux<T> doOnError(java.lang.Class<E>, java.util.function.Consumer<? super E>);
    Code:
       0: aload_1
       1: ldc_w         #293                // String type
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_2
       9: astore_3
      10: aload_0
      11: aload_1
      12: dup
      13: invokevirtual #190                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      16: pop
      17: invokedynamic #294,  0            // InvokeDynamic #20:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      22: aload_3
      23: invokevirtual #295                // Method doOnError:(Ljava/util/function/Predicate;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      26: areturn

  public final reactor.core.publisher.Flux<T> doOnError(java.util.function.Predicate<? super java.lang.Throwable>, java.util.function.Consumer<? super java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc_w         #296                // String predicate
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokedynamic #297,  0            // InvokeDynamic #21:accept:(Ljava/util/function/Predicate;Ljava/util/function/Consumer;)Ljava/util/function/Consumer;
      16: invokevirtual #298                // Method doOnError:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      19: areturn

  public final reactor.core.publisher.Flux<T> doOnNext(java.util.function.Consumer<? super T>);
    Code:
       0: aload_1
       1: ldc_w         #299                // String onNext
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aconst_null
      10: aload_1
      11: aconst_null
      12: aconst_null
      13: aconst_null
      14: aconst_null
      15: aconst_null
      16: invokestatic  #283                // Method doOnSignal:(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      19: areturn

  public final reactor.core.publisher.Flux<T> doOnRequest(java.util.function.LongConsumer);
    Code:
       0: aload_1
       1: ldc_w         #300                // String consumer
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aconst_null
      10: aconst_null
      11: aconst_null
      12: aconst_null
      13: aconst_null
      14: aload_1
      15: aconst_null
      16: invokestatic  #283                // Method doOnSignal:(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      19: areturn

  public final reactor.core.publisher.Flux<T> doOnSubscribe(java.util.function.Consumer<? super org.reactivestreams.Subscription>);
    Code:
       0: aload_1
       1: ldc_w         #301                // String onSubscribe
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aload_1
      10: aconst_null
      11: aconst_null
      12: aconst_null
      13: aconst_null
      14: aconst_null
      15: aconst_null
      16: invokestatic  #283                // Method doOnSignal:(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      19: areturn

  public final reactor.core.publisher.Flux<T> doOnTerminate(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc_w         #302                // String onTerminate
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aconst_null
      10: aconst_null
      11: aload_1
      12: invokedynamic #303,  0            // InvokeDynamic #22:accept:(Ljava/lang/Runnable;)Ljava/util/function/Consumer;
      17: aload_1
      18: aconst_null
      19: aconst_null
      20: aconst_null
      21: invokestatic  #283                // Method doOnSignal:(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      24: areturn

  public final reactor.core.publisher.Flux<T> doFirst(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc_w         #304                // String onFirst
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: instanceof    #5                  // class reactor/core/Fuseable
      12: ifeq          28
      15: new           #305                // class reactor/core/publisher/FluxDoFirstFuseable
      18: dup
      19: aload_0
      20: aload_1
      21: invokespecial #306                // Method reactor/core/publisher/FluxDoFirstFuseable."<init>":(Lreactor/core/publisher/Flux;Ljava/lang/Runnable;)V
      24: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      27: areturn
      28: new           #307                // class reactor/core/publisher/FluxDoFirst
      31: dup
      32: aload_0
      33: aload_1
      34: invokespecial #308                // Method reactor/core/publisher/FluxDoFirst."<init>":(Lreactor/core/publisher/Flux;Ljava/lang/Runnable;)V
      37: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      40: areturn

  public final reactor.core.publisher.Flux<T> doFinally(java.util.function.Consumer<reactor.core.publisher.SignalType>);
    Code:
       0: aload_1
       1: ldc_w         #309                // String onFinally
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: instanceof    #5                  // class reactor/core/Fuseable
      12: ifeq          28
      15: new           #310                // class reactor/core/publisher/FluxDoFinallyFuseable
      18: dup
      19: aload_0
      20: aload_1
      21: invokespecial #311                // Method reactor/core/publisher/FluxDoFinallyFuseable."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;)V
      24: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      27: areturn
      28: new           #312                // class reactor/core/publisher/FluxDoFinally
      31: dup
      32: aload_0
      33: aload_1
      34: invokespecial #313                // Method reactor/core/publisher/FluxDoFinally."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;)V
      37: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      40: areturn

  public final reactor.core.publisher.Flux<reactor.util.function.Tuple2<java.lang.Long, T>> elapsed();
    Code:
       0: aload_0
       1: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       4: invokevirtual #314                // Method elapsed:(Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       7: areturn

  public final reactor.core.publisher.Flux<reactor.util.function.Tuple2<java.lang.Long, T>> elapsed(reactor.core.scheduler.Scheduler);
    Code:
       0: aload_1
       1: ldc_w         #315                // String scheduler
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: new           #316                // class reactor/core/publisher/FluxElapsed
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #317                // Method reactor/core/publisher/FluxElapsed."<init>":(Lreactor/core/publisher/Flux;Lreactor/core/scheduler/Scheduler;)V
      17: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      20: areturn

  public final reactor.core.publisher.Mono<T> elementAt(int);
    Code:
       0: new           #318                // class reactor/core/publisher/MonoElementAt
       3: dup
       4: aload_0
       5: iload_1
       6: i2l
       7: invokespecial #319                // Method reactor/core/publisher/MonoElementAt."<init>":(Lreactor/core/publisher/Flux;J)V
      10: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      13: areturn

  public final reactor.core.publisher.Mono<T> elementAt(int, T);
    Code:
       0: new           #318                // class reactor/core/publisher/MonoElementAt
       3: dup
       4: aload_0
       5: iload_1
       6: i2l
       7: aload_2
       8: invokespecial #320                // Method reactor/core/publisher/MonoElementAt."<init>":(Lreactor/core/publisher/Flux;JLjava/lang/Object;)V
      11: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      14: areturn

  public final reactor.core.publisher.Flux<T> expandDeep(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends T>>, int);
    Code:
       0: new           #321                // class reactor/core/publisher/FluxExpand
       3: dup
       4: aload_0
       5: aload_1
       6: iconst_0
       7: iload_2
       8: invokespecial #322                // Method reactor/core/publisher/FluxExpand."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;ZI)V
      11: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      14: areturn

  public final reactor.core.publisher.Flux<T> expandDeep(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: invokevirtual #323                // Method expandDeep:(Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> expand(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends T>>, int);
    Code:
       0: new           #321                // class reactor/core/publisher/FluxExpand
       3: dup
       4: aload_0
       5: aload_1
       6: iconst_1
       7: iload_2
       8: invokespecial #322                // Method reactor/core/publisher/FluxExpand."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;ZI)V
      11: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      14: areturn

  public final reactor.core.publisher.Flux<T> expand(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: invokevirtual #324                // Method expand:(Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> filter(java.util.function.Predicate<? super T>);
    Code:
       0: aload_0
       1: instanceof    #5                  // class reactor/core/Fuseable
       4: ifeq          20
       7: new           #325                // class reactor/core/publisher/FluxFilterFuseable
      10: dup
      11: aload_0
      12: aload_1
      13: invokespecial #326                // Method reactor/core/publisher/FluxFilterFuseable."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Predicate;)V
      16: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      19: areturn
      20: new           #327                // class reactor/core/publisher/FluxFilter
      23: dup
      24: aload_0
      25: aload_1
      26: invokespecial #328                // Method reactor/core/publisher/FluxFilter."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Predicate;)V
      29: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      32: areturn

  public final reactor.core.publisher.Flux<T> filterWhen(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<java.lang.Boolean>>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: invokevirtual #329                // Method filterWhen:(Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> filterWhen(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<java.lang.Boolean>>, int);
    Code:
       0: new           #330                // class reactor/core/publisher/FluxFilterWhen
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: invokespecial #331                // Method reactor/core/publisher/FluxFilterWhen."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;I)V
      10: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      13: areturn

  public final <R> reactor.core.publisher.Flux<R> flatMap(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       8: invokevirtual #332                // Method flatMap:(Ljava/util/function/Function;II)Lreactor/core/publisher/Flux;
      11: areturn

  public final <V> reactor.core.publisher.Flux<V> flatMap(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends V>>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       6: invokevirtual #332                // Method flatMap:(Ljava/util/function/Function;II)Lreactor/core/publisher/Flux;
       9: areturn

  public final <V> reactor.core.publisher.Flux<V> flatMap(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends V>>, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iload_2
       4: iload_3
       5: invokevirtual #333                // Method flatMap:(Ljava/util/function/Function;ZII)Lreactor/core/publisher/Flux;
       8: areturn

  public final <V> reactor.core.publisher.Flux<V> flatMapDelayError(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends V>>, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: iload_2
       4: iload_3
       5: invokevirtual #333                // Method flatMap:(Ljava/util/function/Function;ZII)Lreactor/core/publisher/Flux;
       8: areturn

  public final <R> reactor.core.publisher.Flux<R> flatMap(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, java.util.function.Function<? super java.lang.Throwable, ? extends org.reactivestreams.Publisher<? extends R>>, java.util.function.Supplier<? extends org.reactivestreams.Publisher<? extends R>>);
    Code:
       0: new           #87                 // class reactor/core/publisher/FluxFlatMap
       3: dup
       4: new           #334                // class reactor/core/publisher/FluxMapSignal
       7: dup
       8: aload_0
       9: aload_1
      10: aload_2
      11: aload_3
      12: invokespecial #335                // Method reactor/core/publisher/FluxMapSignal."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Supplier;)V
      15: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
      18: iconst_0
      19: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
      22: invokestatic  #115                // Method reactor/util/concurrent/Queues.xs:()Ljava/util/function/Supplier;
      25: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
      28: invokestatic  #115                // Method reactor/util/concurrent/Queues.xs:()Ljava/util/function/Supplier;
      31: invokespecial #88                 // Method reactor/core/publisher/FluxFlatMap."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;ZILjava/util/function/Supplier;ILjava/util/function/Supplier;)V
      34: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      37: areturn

  public final <R> reactor.core.publisher.Flux<R> flatMapIterable(java.util.function.Function<? super T, ? extends java.lang.Iterable<? extends R>>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: invokevirtual #336                // Method flatMapIterable:(Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final <R> reactor.core.publisher.Flux<R> flatMapIterable(java.util.function.Function<? super T, ? extends java.lang.Iterable<? extends R>>, int);
    Code:
       0: new           #244                // class reactor/core/publisher/FluxFlattenIterable
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: iload_2
       8: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      11: invokespecial #245                // Method reactor/core/publisher/FluxFlattenIterable."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;ILjava/util/function/Supplier;)V
      14: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      17: areturn

  public final <R> reactor.core.publisher.Flux<R> flatMapSequential(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: invokevirtual #337                // Method flatMapSequential:(Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final <R> reactor.core.publisher.Flux<R> flatMapSequential(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       6: invokevirtual #338                // Method flatMapSequential:(Ljava/util/function/Function;II)Lreactor/core/publisher/Flux;
       9: areturn

  public final <R> reactor.core.publisher.Flux<R> flatMapSequential(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iload_2
       4: iload_3
       5: invokevirtual #339                // Method flatMapSequential:(Ljava/util/function/Function;ZII)Lreactor/core/publisher/Flux;
       8: areturn

  public final <R> reactor.core.publisher.Flux<R> flatMapSequentialDelayError(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: iload_2
       4: iload_3
       5: invokevirtual #339                // Method flatMapSequential:(Ljava/util/function/Function;ZII)Lreactor/core/publisher/Flux;
       8: areturn

  public int getPrefetch();
    Code:
       0: iconst_m1
       1: ireturn

  public final <K> reactor.core.publisher.Flux<reactor.core.publisher.GroupedFlux<K, T>> groupBy(java.util.function.Function<? super T, ? extends K>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
       5: invokevirtual #340                // Method groupBy:(Ljava/util/function/Function;Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
       8: areturn

  public final <K> reactor.core.publisher.Flux<reactor.core.publisher.GroupedFlux<K, T>> groupBy(java.util.function.Function<? super T, ? extends K>, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
       5: iload_2
       6: invokevirtual #341                // Method groupBy:(Ljava/util/function/Function;Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       9: areturn

  public final <K, V> reactor.core.publisher.Flux<reactor.core.publisher.GroupedFlux<K, V>> groupBy(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       6: invokevirtual #341                // Method groupBy:(Ljava/util/function/Function;Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       9: areturn

  public final <K, V> reactor.core.publisher.Flux<reactor.core.publisher.GroupedFlux<K, V>> groupBy(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>, int);
    Code:
       0: new           #342                // class reactor/core/publisher/FluxGroupBy
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: iload_3
       8: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      11: iload_3
      12: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      15: iload_3
      16: invokespecial #343                // Method reactor/core/publisher/FluxGroupBy."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Supplier;Ljava/util/function/Supplier;I)V
      19: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      22: areturn

  public final <TRight, TLeftEnd, TRightEnd, R> reactor.core.publisher.Flux<R> groupJoin(org.reactivestreams.Publisher<? extends TRight>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<TLeftEnd>>, java.util.function.Function<? super TRight, ? extends org.reactivestreams.Publisher<TRightEnd>>, java.util.function.BiFunction<? super T, ? super reactor.core.publisher.Flux<TRight>, ? extends R>);
    Code:
       0: new           #344                // class reactor/core/publisher/FluxGroupJoin
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_3
       8: aload         4
      10: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
      13: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      16: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
      19: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      22: invokespecial #345                // Method reactor/core/publisher/FluxGroupJoin."<init>":(Lreactor/core/publisher/Flux;Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BiFunction;Ljava/util/function/Supplier;Ljava/util/function/Supplier;)V
      25: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      28: areturn

  public final <R> reactor.core.publisher.Flux<R> handle(java.util.function.BiConsumer<? super T, reactor.core.publisher.SynchronousSink<R>>);
    Code:
       0: aload_0
       1: instanceof    #5                  // class reactor/core/Fuseable
       4: ifeq          20
       7: new           #346                // class reactor/core/publisher/FluxHandleFuseable
      10: dup
      11: aload_0
      12: aload_1
      13: invokespecial #347                // Method reactor/core/publisher/FluxHandleFuseable."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/BiConsumer;)V
      16: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      19: areturn
      20: new           #348                // class reactor/core/publisher/FluxHandle
      23: dup
      24: aload_0
      25: aload_1
      26: invokespecial #349                // Method reactor/core/publisher/FluxHandle."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/BiConsumer;)V
      29: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      32: areturn

  public final reactor.core.publisher.Mono<java.lang.Boolean> hasElement(T);
    Code:
       0: aload_1
       1: ldc_w         #350                // String value
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aload_1
      10: invokedynamic #351,  0            // InvokeDynamic #23:test:(Ljava/lang/Object;)Ljava/util/function/Predicate;
      15: invokevirtual #352                // Method any:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Mono;
      18: areturn

  public final reactor.core.publisher.Mono<java.lang.Boolean> hasElements();
    Code:
       0: new           #353                // class reactor/core/publisher/MonoHasElements
       3: dup
       4: aload_0
       5: invokespecial #354                // Method reactor/core/publisher/MonoHasElements."<init>":(Lreactor/core/publisher/Flux;)V
       8: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public final reactor.core.publisher.Flux<T> hide();
    Code:
       0: new           #355                // class reactor/core/publisher/FluxHide
       3: dup
       4: aload_0
       5: invokespecial #356                // Method reactor/core/publisher/FluxHide."<init>":(Lreactor/core/publisher/Flux;)V
       8: areturn

  public final reactor.core.publisher.Flux<reactor.util.function.Tuple2<java.lang.Long, T>> index();
    Code:
       0: aload_0
       1: invokestatic  #117                // Method tuple2Function:()Ljava/util/function/BiFunction;
       4: invokevirtual #357                // Method index:(Ljava/util/function/BiFunction;)Lreactor/core/publisher/Flux;
       7: areturn

  public final <I> reactor.core.publisher.Flux<I> index(java.util.function.BiFunction<? super java.lang.Long, ? super T, ? extends I>);
    Code:
       0: aload_0
       1: instanceof    #5                  // class reactor/core/Fuseable
       4: ifeq          20
       7: new           #358                // class reactor/core/publisher/FluxIndexFuseable
      10: dup
      11: aload_0
      12: aload_1
      13: invokespecial #359                // Method reactor/core/publisher/FluxIndexFuseable."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/BiFunction;)V
      16: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      19: areturn
      20: new           #360                // class reactor/core/publisher/FluxIndex
      23: dup
      24: aload_0
      25: aload_1
      26: invokespecial #361                // Method reactor/core/publisher/FluxIndex."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/BiFunction;)V
      29: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      32: areturn

  public final reactor.core.publisher.Mono<T> ignoreElements();
    Code:
       0: new           #362                // class reactor/core/publisher/MonoIgnoreElements
       3: dup
       4: aload_0
       5: invokespecial #363                // Method reactor/core/publisher/MonoIgnoreElements."<init>":(Lreactor/core/publisher/Flux;)V
       8: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public final <TRight, TLeftEnd, TRightEnd, R> reactor.core.publisher.Flux<R> join(org.reactivestreams.Publisher<? extends TRight>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<TLeftEnd>>, java.util.function.Function<? super TRight, ? extends org.reactivestreams.Publisher<TRightEnd>>, java.util.function.BiFunction<? super T, ? super TRight, ? extends R>);
    Code:
       0: new           #364                // class reactor/core/publisher/FluxJoin
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_3
       8: aload         4
      10: invokespecial #365                // Method reactor/core/publisher/FluxJoin."<init>":(Lreactor/core/publisher/Flux;Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BiFunction;)V
      13: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      16: areturn

  public final reactor.core.publisher.Mono<T> last();
    Code:
       0: aload_0
       1: instanceof    #211                // class java/util/concurrent/Callable
       4: ifeq          40
       7: aload_0
       8: checkcast     #211                // class java/util/concurrent/Callable
      11: astore_1
      12: aload_1
      13: invokestatic  #366                // Method convertToMono:(Ljava/util/concurrent/Callable;)Lreactor/core/publisher/Mono;
      16: astore_2
      17: aload_2
      18: invokestatic  #367                // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      21: if_acmpne     38
      24: new           #368                // class java/util/NoSuchElementException
      27: dup
      28: ldc_w         #369                // String Flux#last() didn\'t observe any onNext signal from Callable flux
      31: invokespecial #370                // Method java/util/NoSuchElementException."<init>":(Ljava/lang/String;)V
      34: invokestatic  #212                // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      37: areturn
      38: aload_2
      39: areturn
      40: new           #371                // class reactor/core/publisher/MonoTakeLastOne
      43: dup
      44: aload_0
      45: invokespecial #372                // Method reactor/core/publisher/MonoTakeLastOne."<init>":(Lreactor/core/publisher/Flux;)V
      48: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      51: areturn

  public final reactor.core.publisher.Mono<T> last(T);
    Code:
       0: aload_0
       1: instanceof    #211                // class java/util/concurrent/Callable
       4: ifeq          71
       7: aload_0
       8: checkcast     #211                // class java/util/concurrent/Callable
      11: astore_2
      12: aload_2
      13: instanceof    #56                 // class reactor/core/Fuseable$ScalarCallable
      16: ifeq          59
      19: aload_2
      20: checkcast     #56                 // class reactor/core/Fuseable$ScalarCallable
      23: astore_3
      24: aload_3
      25: invokeinterface #57,  1           // InterfaceMethod reactor/core/Fuseable$ScalarCallable.call:()Ljava/lang/Object;
      30: astore        4
      32: goto          43
      35: astore        5
      37: aload         5
      39: invokestatic  #212                // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      42: areturn
      43: aload         4
      45: ifnonnull     53
      48: aload_1
      49: invokestatic  #215                // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      52: areturn
      53: aload         4
      55: invokestatic  #215                // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      58: areturn
      59: new           #218                // class reactor/core/publisher/MonoCallable
      62: dup
      63: aload_2
      64: invokespecial #219                // Method reactor/core/publisher/MonoCallable."<init>":(Ljava/util/concurrent/Callable;)V
      67: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      70: pop
      71: new           #371                // class reactor/core/publisher/MonoTakeLastOne
      74: dup
      75: aload_0
      76: aload_1
      77: invokespecial #373                // Method reactor/core/publisher/MonoTakeLastOne."<init>":(Lreactor/core/publisher/Flux;Ljava/lang/Object;)V
      80: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      83: areturn
    Exception table:
       from    to  target type
          24    32    35   Class java/lang/Exception

  public final reactor.core.publisher.Flux<T> limitRate(int);
    Code:
       0: aload_0
       1: invokestatic  #374                // Method reactor/core/scheduler/Schedulers.immediate:()Lreactor/core/scheduler/Scheduler;
       4: iload_1
       5: invokevirtual #375                // Method publishOn:(Lreactor/core/scheduler/Scheduler;I)Lreactor/core/publisher/Flux;
       8: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      11: areturn

  public final reactor.core.publisher.Flux<T> limitRate(int, int);
    Code:
       0: aload_0
       1: invokestatic  #374                // Method reactor/core/scheduler/Schedulers.immediate:()Lreactor/core/scheduler/Scheduler;
       4: iconst_1
       5: iload_1
       6: iload_2
       7: invokevirtual #376                // Method publishOn:(Lreactor/core/scheduler/Scheduler;ZII)Lreactor/core/publisher/Flux;
      10: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      13: areturn

  public final reactor.core.publisher.Flux<T> limitRequest(long);
    Code:
       0: new           #377                // class reactor/core/publisher/FluxLimitRequest
       3: dup
       4: aload_0
       5: lload_1
       6: invokespecial #378                // Method reactor/core/publisher/FluxLimitRequest."<init>":(Lreactor/core/publisher/Flux;J)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> log();
    Code:
       0: aload_0
       1: aconst_null
       2: getstatic     #379                // Field java/util/logging/Level.INFO:Ljava/util/logging/Level;
       5: iconst_0
       6: anewarray     #380                // class reactor/core/publisher/SignalType
       9: invokevirtual #381                // Method log:(Ljava/lang/String;Ljava/util/logging/Level;[Lreactor/core/publisher/SignalType;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> log(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #379                // Field java/util/logging/Level.INFO:Ljava/util/logging/Level;
       5: iconst_0
       6: anewarray     #380                // class reactor/core/publisher/SignalType
       9: invokevirtual #381                // Method log:(Ljava/lang/String;Ljava/util/logging/Level;[Lreactor/core/publisher/SignalType;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> log(java.lang.String, java.util.logging.Level, reactor.core.publisher.SignalType...);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: aload_3
       5: invokevirtual #382                // Method log:(Ljava/lang/String;Ljava/util/logging/Level;Z[Lreactor/core/publisher/SignalType;)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> log(java.lang.String, java.util.logging.Level, boolean, reactor.core.publisher.SignalType...);
    Code:
       0: new           #383                // class reactor/core/publisher/SignalLogger
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: iload_3
       8: aload         4
      10: invokespecial #384                // Method reactor/core/publisher/SignalLogger."<init>":(Lorg/reactivestreams/Publisher;Ljava/lang/String;Ljava/util/logging/Level;Z[Lreactor/core/publisher/SignalType;)V
      13: astore        5
      15: aload_0
      16: instanceof    #5                  // class reactor/core/Fuseable
      19: ifeq          36
      22: new           #385                // class reactor/core/publisher/FluxLogFuseable
      25: dup
      26: aload_0
      27: aload         5
      29: invokespecial #386                // Method reactor/core/publisher/FluxLogFuseable."<init>":(Lreactor/core/publisher/Flux;Lreactor/core/publisher/SignalPeek;)V
      32: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      35: areturn
      36: new           #387                // class reactor/core/publisher/FluxLog
      39: dup
      40: aload_0
      41: aload         5
      43: invokespecial #388                // Method reactor/core/publisher/FluxLog."<init>":(Lreactor/core/publisher/Flux;Lreactor/core/publisher/SignalPeek;)V
      46: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      49: areturn

  public final reactor.core.publisher.Flux<T> log(reactor.util.Logger);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #379                // Field java/util/logging/Level.INFO:Ljava/util/logging/Level;
       5: iconst_0
       6: iconst_0
       7: anewarray     #380                // class reactor/core/publisher/SignalType
      10: invokevirtual #389                // Method log:(Lreactor/util/Logger;Ljava/util/logging/Level;Z[Lreactor/core/publisher/SignalType;)Lreactor/core/publisher/Flux;
      13: areturn

  public final reactor.core.publisher.Flux<T> log(reactor.util.Logger, java.util.logging.Level, boolean, reactor.core.publisher.SignalType...);
    Code:
       0: new           #383                // class reactor/core/publisher/SignalLogger
       3: dup
       4: aload_0
       5: ldc_w         #390                // String IGNORED
       8: aload_2
       9: iload_3
      10: aload_1
      11: invokedynamic #391,  0            // InvokeDynamic #24:apply:(Lreactor/util/Logger;)Ljava/util/function/Function;
      16: aload         4
      18: invokespecial #392                // Method reactor/core/publisher/SignalLogger."<init>":(Lorg/reactivestreams/Publisher;Ljava/lang/String;Ljava/util/logging/Level;ZLjava/util/function/Function;[Lreactor/core/publisher/SignalType;)V
      21: astore        5
      23: aload_0
      24: instanceof    #5                  // class reactor/core/Fuseable
      27: ifeq          44
      30: new           #385                // class reactor/core/publisher/FluxLogFuseable
      33: dup
      34: aload_0
      35: aload         5
      37: invokespecial #386                // Method reactor/core/publisher/FluxLogFuseable."<init>":(Lreactor/core/publisher/Flux;Lreactor/core/publisher/SignalPeek;)V
      40: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      43: areturn
      44: new           #387                // class reactor/core/publisher/FluxLog
      47: dup
      48: aload_0
      49: aload         5
      51: invokespecial #388                // Method reactor/core/publisher/FluxLog."<init>":(Lreactor/core/publisher/Flux;Lreactor/core/publisher/SignalPeek;)V
      54: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      57: areturn

  public final <V> reactor.core.publisher.Flux<V> map(java.util.function.Function<? super T, ? extends V>);
    Code:
       0: aload_0
       1: instanceof    #5                  // class reactor/core/Fuseable
       4: ifeq          20
       7: new           #6                  // class reactor/core/publisher/FluxMapFuseable
      10: dup
      11: aload_0
      12: aload_1
      13: invokespecial #9                  // Method reactor/core/publisher/FluxMapFuseable."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;)V
      16: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      19: areturn
      20: new           #11                 // class reactor/core/publisher/FluxMap
      23: dup
      24: aload_0
      25: aload_1
      26: invokespecial #13                 // Method reactor/core/publisher/FluxMap."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;)V
      29: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      32: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Signal<T>> materialize();
    Code:
       0: new           #393                // class reactor/core/publisher/FluxMaterialize
       3: dup
       4: aload_0
       5: invokespecial #394                // Method reactor/core/publisher/FluxMaterialize."<init>":(Lreactor/core/publisher/Flux;)V
       8: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      11: areturn

  public final reactor.core.publisher.Flux<T> mergeOrderedWith(org.reactivestreams.Publisher<? extends T>, java.util.Comparator<? super T>);
    Code:
       0: aload_0
       1: instanceof    #95                 // class reactor/core/publisher/FluxMergeOrdered
       4: ifeq          19
       7: aload_0
       8: checkcast     #95                 // class reactor/core/publisher/FluxMergeOrdered
      11: astore_3
      12: aload_3
      13: aload_1
      14: aload_2
      15: invokevirtual #395                // Method reactor/core/publisher/FluxMergeOrdered.mergeAdditionalSource:(Lorg/reactivestreams/Publisher;Ljava/util/Comparator;)Lreactor/core/publisher/FluxMergeOrdered;
      18: areturn
      19: aload_2
      20: iconst_2
      21: anewarray     #18                 // class org/reactivestreams/Publisher
      24: dup
      25: iconst_0
      26: aload_0
      27: aastore
      28: dup
      29: iconst_1
      30: aload_1
      31: aastore
      32: invokestatic  #396                // Method mergeOrdered:(Ljava/util/Comparator;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      35: areturn

  public final reactor.core.publisher.Flux<T> mergeWith(org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_0
       1: instanceof    #397                // class reactor/core/publisher/FluxMerge
       4: ifeq          23
       7: aload_0
       8: checkcast     #397                // class reactor/core/publisher/FluxMerge
      11: astore_2
      12: aload_2
      13: aload_1
      14: invokedynamic #398,  0            // InvokeDynamic #25:apply:()Ljava/util/function/IntFunction;
      19: invokevirtual #399                // Method reactor/core/publisher/FluxMerge.mergeAdditionalSource:(Lorg/reactivestreams/Publisher;Ljava/util/function/IntFunction;)Lreactor/core/publisher/FluxMerge;
      22: areturn
      23: iconst_2
      24: anewarray     #18                 // class org/reactivestreams/Publisher
      27: dup
      28: iconst_0
      29: aload_0
      30: aastore
      31: dup
      32: iconst_1
      33: aload_1
      34: aastore
      35: invokestatic  #400                // Method merge:([Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      38: areturn

  public final reactor.core.publisher.Flux<T> metrics();
    Code:
       0: invokestatic  #401                // Method reactor/util/Metrics.isInstrumentationAvailable:()Z
       3: ifne          8
       6: aload_0
       7: areturn
       8: aload_0
       9: instanceof    #5                  // class reactor/core/Fuseable
      12: ifeq          27
      15: new           #402                // class reactor/core/publisher/FluxMetricsFuseable
      18: dup
      19: aload_0
      20: invokespecial #403                // Method reactor/core/publisher/FluxMetricsFuseable."<init>":(Lreactor/core/publisher/Flux;)V
      23: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      26: areturn
      27: new           #404                // class reactor/core/publisher/FluxMetrics
      30: dup
      31: aload_0
      32: invokespecial #405                // Method reactor/core/publisher/FluxMetrics."<init>":(Lreactor/core/publisher/Flux;)V
      35: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      38: areturn

  public final reactor.core.publisher.Flux<T> name(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #406                // Method reactor/core/publisher/FluxName.createOrAppend:(Lreactor/core/publisher/Flux;Ljava/lang/String;)Lreactor/core/publisher/Flux;
       5: areturn

  public final reactor.core.publisher.Mono<T> next();
    Code:
       0: aload_0
       1: instanceof    #211                // class java/util/concurrent/Callable
       4: ifeq          17
       7: aload_0
       8: checkcast     #211                // class java/util/concurrent/Callable
      11: astore_1
      12: aload_1
      13: invokestatic  #366                // Method convertToMono:(Ljava/util/concurrent/Callable;)Lreactor/core/publisher/Mono;
      16: areturn
      17: new           #407                // class reactor/core/publisher/MonoNext
      20: dup
      21: aload_0
      22: invokespecial #408                // Method reactor/core/publisher/MonoNext."<init>":(Lreactor/core/publisher/Flux;)V
      25: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      28: areturn

  public final <U> reactor.core.publisher.Flux<U> ofType(java.lang.Class<U>);
    Code:
       0: aload_1
       1: ldc           #189                // String clazz
       3: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: invokedynamic #409,  0            // InvokeDynamic #26:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      14: invokevirtual #410                // Method filter:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Flux;
      17: aload_1
      18: invokevirtual #411                // Method cast:(Ljava/lang/Class;)Lreactor/core/publisher/Flux;
      21: areturn

  public final reactor.core.publisher.Flux<T> onBackpressureBuffer();
    Code:
       0: new           #412                // class reactor/core/publisher/FluxOnBackpressureBuffer
       3: dup
       4: aload_0
       5: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       8: iconst_1
       9: aconst_null
      10: invokespecial #413                // Method reactor/core/publisher/FluxOnBackpressureBuffer."<init>":(Lreactor/core/publisher/Flux;IZLjava/util/function/Consumer;)V
      13: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      16: areturn

  public final reactor.core.publisher.Flux<T> onBackpressureBuffer(int);
    Code:
       0: new           #412                // class reactor/core/publisher/FluxOnBackpressureBuffer
       3: dup
       4: aload_0
       5: iload_1
       6: iconst_0
       7: aconst_null
       8: invokespecial #413                // Method reactor/core/publisher/FluxOnBackpressureBuffer."<init>":(Lreactor/core/publisher/Flux;IZLjava/util/function/Consumer;)V
      11: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      14: areturn

  public final reactor.core.publisher.Flux<T> onBackpressureBuffer(int, java.util.function.Consumer<? super T>);
    Code:
       0: aload_2
       1: ldc_w         #414                // String onOverflow
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: new           #412                // class reactor/core/publisher/FluxOnBackpressureBuffer
      11: dup
      12: aload_0
      13: iload_1
      14: iconst_0
      15: aload_2
      16: invokespecial #413                // Method reactor/core/publisher/FluxOnBackpressureBuffer."<init>":(Lreactor/core/publisher/Flux;IZLjava/util/function/Consumer;)V
      19: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      22: areturn

  public final reactor.core.publisher.Flux<T> onBackpressureBuffer(int, reactor.core.publisher.BufferOverflowStrategy);
    Code:
       0: aload_2
       1: ldc_w         #415                // String bufferOverflowStrategy
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: new           #416                // class reactor/core/publisher/FluxOnBackpressureBufferStrategy
      11: dup
      12: aload_0
      13: iload_1
      14: aconst_null
      15: aload_2
      16: invokespecial #417                // Method reactor/core/publisher/FluxOnBackpressureBufferStrategy."<init>":(Lreactor/core/publisher/Flux;ILjava/util/function/Consumer;Lreactor/core/publisher/BufferOverflowStrategy;)V
      19: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      22: areturn

  public final reactor.core.publisher.Flux<T> onBackpressureBuffer(int, java.util.function.Consumer<? super T>, reactor.core.publisher.BufferOverflowStrategy);
    Code:
       0: aload_2
       1: ldc_w         #418                // String onBufferOverflow
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_3
       9: ldc_w         #415                // String bufferOverflowStrategy
      12: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      15: pop
      16: new           #416                // class reactor/core/publisher/FluxOnBackpressureBufferStrategy
      19: dup
      20: aload_0
      21: iload_1
      22: aload_2
      23: aload_3
      24: invokespecial #417                // Method reactor/core/publisher/FluxOnBackpressureBufferStrategy."<init>":(Lreactor/core/publisher/Flux;ILjava/util/function/Consumer;Lreactor/core/publisher/BufferOverflowStrategy;)V
      27: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      30: areturn

  public final reactor.core.publisher.Flux<T> onBackpressureBuffer(java.time.Duration, int, java.util.function.Consumer<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       7: invokevirtual #419                // Method onBackpressureBuffer:(Ljava/time/Duration;ILjava/util/function/Consumer;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
      10: areturn

  public final reactor.core.publisher.Flux<T> onBackpressureBuffer(java.time.Duration, int, java.util.function.Consumer<? super T>, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_1
       1: ldc_w         #420                // String ttl
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_3
       9: ldc_w         #421                // String onBufferEviction
      12: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      15: pop
      16: new           #422                // class reactor/core/publisher/FluxOnBackpressureBufferTimeout
      19: dup
      20: aload_0
      21: aload_1
      22: aload         4
      24: iload_2
      25: aload_3
      26: invokespecial #423                // Method reactor/core/publisher/FluxOnBackpressureBufferTimeout."<init>":(Lreactor/core/publisher/Flux;Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;ILjava/util/function/Consumer;)V
      29: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      32: areturn

  public final reactor.core.publisher.Flux<T> onBackpressureDrop();
    Code:
       0: new           #424                // class reactor/core/publisher/FluxOnBackpressureDrop
       3: dup
       4: aload_0
       5: invokespecial #425                // Method reactor/core/publisher/FluxOnBackpressureDrop."<init>":(Lreactor/core/publisher/Flux;)V
       8: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      11: areturn

  public final reactor.core.publisher.Flux<T> onBackpressureDrop(java.util.function.Consumer<? super T>);
    Code:
       0: new           #424                // class reactor/core/publisher/FluxOnBackpressureDrop
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #426                // Method reactor/core/publisher/FluxOnBackpressureDrop."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> onBackpressureError();
    Code:
       0: aload_0
       1: invokedynamic #427,  0            // InvokeDynamic #27:accept:()Ljava/util/function/Consumer;
       6: invokevirtual #428                // Method onBackpressureDrop:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
       9: areturn

  public final reactor.core.publisher.Flux<T> onBackpressureLatest();
    Code:
       0: new           #429                // class reactor/core/publisher/FluxOnBackpressureLatest
       3: dup
       4: aload_0
       5: invokespecial #430                // Method reactor/core/publisher/FluxOnBackpressureLatest."<init>":(Lreactor/core/publisher/Flux;)V
       8: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      11: areturn

  public final reactor.core.publisher.Flux<T> onErrorContinue(java.util.function.BiConsumer<java.lang.Throwable, java.lang.Object>);
    Code:
       0: aload_1
       1: astore_2
       2: aload_0
       3: ldc_w         #432                // String reactor.onNextError.localStrategy
       6: aload_2
       7: invokestatic  #433                // InterfaceMethod reactor/core/publisher/OnNextFailureStrategy.resume:(Ljava/util/function/BiConsumer;)Lreactor/core/publisher/OnNextFailureStrategy;
      10: invokestatic  #434                // InterfaceMethod reactor/util/context/Context.of:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/util/context/Context;
      13: invokevirtual #435                // Method subscriberContext:(Lreactor/util/context/Context;)Lreactor/core/publisher/Flux;
      16: areturn

  public final <E extends java.lang.Throwable> reactor.core.publisher.Flux<T> onErrorContinue(java.lang.Class<E>, java.util.function.BiConsumer<java.lang.Throwable, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: dup
       3: invokevirtual #190                // Method java/lang/Object.getClass:()Ljava/lang/Class;
       6: pop
       7: invokedynamic #294,  0            // InvokeDynamic #20:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      12: aload_2
      13: invokevirtual #436                // Method onErrorContinue:(Ljava/util/function/Predicate;Ljava/util/function/BiConsumer;)Lreactor/core/publisher/Flux;
      16: areturn

  public final <E extends java.lang.Throwable> reactor.core.publisher.Flux<T> onErrorContinue(java.util.function.Predicate<E>, java.util.function.BiConsumer<java.lang.Throwable, java.lang.Object>);
    Code:
       0: aload_1
       1: astore_3
       2: aload_2
       3: astore        4
       5: aload_0
       6: ldc_w         #432                // String reactor.onNextError.localStrategy
       9: aload_3
      10: aload         4
      12: invokestatic  #437                // InterfaceMethod reactor/core/publisher/OnNextFailureStrategy.resumeIf:(Ljava/util/function/Predicate;Ljava/util/function/BiConsumer;)Lreactor/core/publisher/OnNextFailureStrategy;
      15: invokestatic  #434                // InterfaceMethod reactor/util/context/Context.of:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/util/context/Context;
      18: invokevirtual #435                // Method subscriberContext:(Lreactor/util/context/Context;)Lreactor/core/publisher/Flux;
      21: areturn

  public final reactor.core.publisher.Flux<T> onErrorStop();
    Code:
       0: aload_0
       1: ldc_w         #432                // String reactor.onNextError.localStrategy
       4: invokestatic  #438                // InterfaceMethod reactor/core/publisher/OnNextFailureStrategy.stop:()Lreactor/core/publisher/OnNextFailureStrategy;
       7: invokestatic  #434                // InterfaceMethod reactor/util/context/Context.of:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/util/context/Context;
      10: invokevirtual #435                // Method subscriberContext:(Lreactor/util/context/Context;)Lreactor/core/publisher/Flux;
      13: areturn

  public final reactor.core.publisher.Flux<T> onErrorMap(java.util.function.Function<? super java.lang.Throwable, ? extends java.lang.Throwable>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #439,  0            // InvokeDynamic #28:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
       7: invokevirtual #440                // Method onErrorResume:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      10: areturn

  public final <E extends java.lang.Throwable> reactor.core.publisher.Flux<T> onErrorMap(java.lang.Class<E>, java.util.function.Function<? super E, ? extends java.lang.Throwable>);
    Code:
       0: aload_2
       1: astore_3
       2: aload_0
       3: aload_1
       4: dup
       5: invokevirtual #190                // Method java/lang/Object.getClass:()Ljava/lang/Class;
       8: pop
       9: invokedynamic #294,  0            // InvokeDynamic #20:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      14: aload_3
      15: invokevirtual #441                // Method onErrorMap:(Ljava/util/function/Predicate;Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      18: areturn

  public final reactor.core.publisher.Flux<T> onErrorMap(java.util.function.Predicate<? super java.lang.Throwable>, java.util.function.Function<? super java.lang.Throwable, ? extends java.lang.Throwable>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #442,  0            // InvokeDynamic #29:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
       8: invokevirtual #443                // Method onErrorResume:(Ljava/util/function/Predicate;Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      11: areturn

  public final reactor.core.publisher.Flux<T> onErrorResume(java.util.function.Function<? super java.lang.Throwable, ? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: new           #444                // class reactor/core/publisher/FluxOnErrorResume
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #445                // Method reactor/core/publisher/FluxOnErrorResume."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final <E extends java.lang.Throwable> reactor.core.publisher.Flux<T> onErrorResume(java.lang.Class<E>, java.util.function.Function<? super E, ? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: aload_1
       1: ldc_w         #293                // String type
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_2
       9: astore_3
      10: aload_0
      11: aload_1
      12: dup
      13: invokevirtual #190                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      16: pop
      17: invokedynamic #294,  0            // InvokeDynamic #20:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      22: aload_3
      23: invokevirtual #443                // Method onErrorResume:(Ljava/util/function/Predicate;Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      26: areturn

  public final reactor.core.publisher.Flux<T> onErrorResume(java.util.function.Predicate<? super java.lang.Throwable>, java.util.function.Function<? super java.lang.Throwable, ? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: aload_1
       1: ldc_w         #296                // String predicate
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokedynamic #446,  0            // InvokeDynamic #30:apply:(Ljava/util/function/Predicate;Ljava/util/function/Function;)Ljava/util/function/Function;
      16: invokevirtual #440                // Method onErrorResume:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      19: areturn

  public final reactor.core.publisher.Flux<T> onErrorReturn(T);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #447,  0            // InvokeDynamic #31:apply:(Ljava/lang/Object;)Ljava/util/function/Function;
       7: invokevirtual #440                // Method onErrorResume:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      10: areturn

  public final <E extends java.lang.Throwable> reactor.core.publisher.Flux<T> onErrorReturn(java.lang.Class<E>, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #448,  0            // InvokeDynamic #32:apply:(Ljava/lang/Object;)Ljava/util/function/Function;
       8: invokevirtual #449                // Method onErrorResume:(Ljava/lang/Class;Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      11: areturn

  public final reactor.core.publisher.Flux<T> onErrorReturn(java.util.function.Predicate<? super java.lang.Throwable>, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #450,  0            // InvokeDynamic #33:apply:(Ljava/lang/Object;)Ljava/util/function/Function;
       8: invokevirtual #443                // Method onErrorResume:(Ljava/util/function/Predicate;Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      11: areturn

  public final reactor.core.publisher.Flux<T> onTerminateDetach();
    Code:
       0: new           #451                // class reactor/core/publisher/FluxDetach
       3: dup
       4: aload_0
       5: invokespecial #452                // Method reactor/core/publisher/FluxDetach."<init>":(Lreactor/core/publisher/Flux;)V
       8: areturn

  public final reactor.core.publisher.Flux<T> or(org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_0
       1: instanceof    #52                 // class reactor/core/publisher/FluxFirstEmitting
       4: ifeq          24
       7: aload_0
       8: checkcast     #52                 // class reactor/core/publisher/FluxFirstEmitting
      11: astore_2
      12: aload_2
      13: aload_1
      14: invokevirtual #453                // Method reactor/core/publisher/FluxFirstEmitting.ambAdditionalSource:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/FluxFirstEmitting;
      17: astore_3
      18: aload_3
      19: ifnull        24
      22: aload_3
      23: areturn
      24: iconst_2
      25: anewarray     #18                 // class org/reactivestreams/Publisher
      28: dup
      29: iconst_0
      30: aload_0
      31: aastore
      32: dup
      33: iconst_1
      34: aload_1
      35: aastore
      36: invokestatic  #454                // Method first:([Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      39: areturn

  public final reactor.core.publisher.ParallelFlux<T> parallel();
    Code:
       0: aload_0
       1: invokestatic  #455                // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
       4: invokevirtual #456                // Method java/lang/Runtime.availableProcessors:()I
       7: invokevirtual #457                // Method parallel:(I)Lreactor/core/publisher/ParallelFlux;
      10: areturn

  public final reactor.core.publisher.ParallelFlux<T> parallel(int);
    Code:
       0: aload_0
       1: iload_1
       2: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: invokevirtual #458                // Method parallel:(II)Lreactor/core/publisher/ParallelFlux;
       8: areturn

  public final reactor.core.publisher.ParallelFlux<T> parallel(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_2
       4: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
       7: invokestatic  #459                // Method reactor/core/publisher/ParallelFlux.from:(Lorg/reactivestreams/Publisher;IILjava/util/function/Supplier;)Lreactor/core/publisher/ParallelFlux;
      10: areturn

  public final reactor.core.publisher.ConnectableFlux<T> publish();
    Code:
       0: aload_0
       1: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       4: invokevirtual #460                // Method publish:(I)Lreactor/core/publisher/ConnectableFlux;
       7: areturn

  public final reactor.core.publisher.ConnectableFlux<T> publish(int);
    Code:
       0: new           #461                // class reactor/core/publisher/FluxPublish
       3: dup
       4: aload_0
       5: iload_1
       6: iload_1
       7: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      10: invokespecial #462                // Method reactor/core/publisher/FluxPublish."<init>":(Lreactor/core/publisher/Flux;ILjava/util/function/Supplier;)V
      13: invokestatic  #463                // Method onAssembly:(Lreactor/core/publisher/ConnectableFlux;)Lreactor/core/publisher/ConnectableFlux;
      16: areturn

  public final <R> reactor.core.publisher.Flux<R> publish(java.util.function.Function<? super reactor.core.publisher.Flux<T>, ? extends org.reactivestreams.Publisher<? extends R>>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: invokevirtual #464                // Method publish:(Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final <R> reactor.core.publisher.Flux<R> publish(java.util.function.Function<? super reactor.core.publisher.Flux<T>, ? extends org.reactivestreams.Publisher<? extends R>>, int);
    Code:
       0: new           #465                // class reactor/core/publisher/FluxPublishMulticast
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: iload_2
       8: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      11: invokespecial #466                // Method reactor/core/publisher/FluxPublishMulticast."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;ILjava/util/function/Supplier;)V
      14: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      17: areturn

  public final reactor.core.publisher.Mono<T> publishNext();
    Code:
       0: new           #467                // class reactor/core/publisher/MonoProcessor
       3: dup
       4: aload_0
       5: invokespecial #468                // Method reactor/core/publisher/MonoProcessor."<init>":(Lorg/reactivestreams/Publisher;)V
       8: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public final reactor.core.publisher.Flux<T> publishOn(reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: invokevirtual #375                // Method publishOn:(Lreactor/core/scheduler/Scheduler;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> publishOn(reactor.core.scheduler.Scheduler, int);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: iload_2
       4: invokevirtual #469                // Method publishOn:(Lreactor/core/scheduler/Scheduler;ZI)Lreactor/core/publisher/Flux;
       7: areturn

  public final reactor.core.publisher.Flux<T> publishOn(reactor.core.scheduler.Scheduler, boolean, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload_3
       5: invokevirtual #376                // Method publishOn:(Lreactor/core/scheduler/Scheduler;ZII)Lreactor/core/publisher/Flux;
       8: areturn

  final reactor.core.publisher.Flux<T> publishOn(reactor.core.scheduler.Scheduler, boolean, int, int);
    Code:
       0: aload_0
       1: instanceof    #211                // class java/util/concurrent/Callable
       4: ifeq          61
       7: aload_0
       8: instanceof    #56                 // class reactor/core/Fuseable$ScalarCallable
      11: ifeq          41
      14: aload_0
      15: checkcast     #56                 // class reactor/core/Fuseable$ScalarCallable
      18: astore        5
      20: new           #470                // class reactor/core/publisher/FluxSubscribeOnValue
      23: dup
      24: aload         5
      26: invokeinterface #57,  1           // InterfaceMethod reactor/core/Fuseable$ScalarCallable.call:()Ljava/lang/Object;
      31: aload_1
      32: invokespecial #471                // Method reactor/core/publisher/FluxSubscribeOnValue."<init>":(Ljava/lang/Object;Lreactor/core/scheduler/Scheduler;)V
      35: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      38: areturn
      39: astore        6
      41: aload_0
      42: checkcast     #211                // class java/util/concurrent/Callable
      45: astore        5
      47: new           #472                // class reactor/core/publisher/FluxSubscribeOnCallable
      50: dup
      51: aload         5
      53: aload_1
      54: invokespecial #473                // Method reactor/core/publisher/FluxSubscribeOnCallable."<init>":(Ljava/util/concurrent/Callable;Lreactor/core/scheduler/Scheduler;)V
      57: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      60: areturn
      61: new           #474                // class reactor/core/publisher/FluxPublishOn
      64: dup
      65: aload_0
      66: aload_1
      67: iload_2
      68: iload_3
      69: iload         4
      71: iload_3
      72: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      75: invokespecial #475                // Method reactor/core/publisher/FluxPublishOn."<init>":(Lreactor/core/publisher/Flux;Lreactor/core/scheduler/Scheduler;ZIILjava/util/function/Supplier;)V
      78: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      81: areturn
    Exception table:
       from    to  target type
          20    38    39   Class java/lang/Exception

  public final reactor.core.publisher.Mono<T> reduce(java.util.function.BiFunction<T, T, T>);
    Code:
       0: aload_0
       1: instanceof    #211                // class java/util/concurrent/Callable
       4: ifeq          17
       7: aload_0
       8: checkcast     #211                // class java/util/concurrent/Callable
      11: astore_2
      12: aload_2
      13: invokestatic  #366                // Method convertToMono:(Ljava/util/concurrent/Callable;)Lreactor/core/publisher/Mono;
      16: areturn
      17: new           #476                // class reactor/core/publisher/MonoReduce
      20: dup
      21: aload_0
      22: aload_1
      23: invokespecial #477                // Method reactor/core/publisher/MonoReduce."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/BiFunction;)V
      26: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      29: areturn

  public final <A> reactor.core.publisher.Mono<A> reduce(A, java.util.function.BiFunction<A, ? super T, A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #478,  0            // InvokeDynamic #34:get:(Ljava/lang/Object;)Ljava/util/function/Supplier;
       7: aload_2
       8: invokevirtual #479                // Method reduceWith:(Ljava/util/function/Supplier;Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
      11: areturn

  public final <A> reactor.core.publisher.Mono<A> reduceWith(java.util.function.Supplier<A>, java.util.function.BiFunction<A, ? super T, A>);
    Code:
       0: new           #480                // class reactor/core/publisher/MonoReduceSeed
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #481                // Method reactor/core/publisher/MonoReduceSeed."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Supplier;Ljava/util/function/BiFunction;)V
      10: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      13: areturn

  public final reactor.core.publisher.Flux<T> repeat();
    Code:
       0: aload_0
       1: getstatic     #482                // Field ALWAYS_BOOLEAN_SUPPLIER:Ljava/util/function/BooleanSupplier;
       4: invokevirtual #483                // Method repeat:(Ljava/util/function/BooleanSupplier;)Lreactor/core/publisher/Flux;
       7: areturn

  public final reactor.core.publisher.Flux<T> repeat(java.util.function.BooleanSupplier);
    Code:
       0: new           #484                // class reactor/core/publisher/FluxRepeatPredicate
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #485                // Method reactor/core/publisher/FluxRepeatPredicate."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/BooleanSupplier;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> repeat(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifne          8
       6: aload_0
       7: areturn
       8: new           #486                // class reactor/core/publisher/FluxRepeat
      11: dup
      12: aload_0
      13: lload_1
      14: invokespecial #487                // Method reactor/core/publisher/FluxRepeat."<init>":(Lreactor/core/publisher/Flux;J)V
      17: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      20: areturn

  public final reactor.core.publisher.Flux<T> repeat(long, java.util.function.BooleanSupplier);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          17
       6: new           #488                // class java/lang/IllegalArgumentException
       9: dup
      10: ldc_w         #489                // String numRepeat >= 0 required
      13: invokespecial #490                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: lload_1
      18: lconst_0
      19: lcmp
      20: ifne          25
      23: aload_0
      24: areturn
      25: aload_0
      26: aload_3
      27: lload_1
      28: invokedynamic #491,  0            // InvokeDynamic #35:get:(Lreactor/core/publisher/Flux;Ljava/util/function/BooleanSupplier;J)Ljava/util/function/Supplier;
      33: invokestatic  #240                // Method defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
      36: areturn

  public final reactor.core.publisher.Flux<T> repeatWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: new           #492                // class reactor/core/publisher/FluxRepeatWhen
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #493                // Method reactor/core/publisher/FluxRepeatWhen."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.ConnectableFlux<T> replay();
    Code:
       0: aload_0
       1: ldc           #134                // int 2147483647
       3: invokevirtual #184                // Method replay:(I)Lreactor/core/publisher/ConnectableFlux;
       6: areturn

  public final reactor.core.publisher.ConnectableFlux<T> replay(int);
    Code:
       0: new           #494                // class reactor/core/publisher/FluxReplay
       3: dup
       4: aload_0
       5: iload_1
       6: lconst_0
       7: aconst_null
       8: invokespecial #495                // Method reactor/core/publisher/FluxReplay."<init>":(Lorg/reactivestreams/Publisher;IJLreactor/core/scheduler/Scheduler;)V
      11: invokestatic  #463                // Method onAssembly:(Lreactor/core/publisher/ConnectableFlux;)Lreactor/core/publisher/ConnectableFlux;
      14: areturn

  public final reactor.core.publisher.ConnectableFlux<T> replay(java.time.Duration);
    Code:
       0: aload_0
       1: ldc           #134                // int 2147483647
       3: aload_1
       4: invokevirtual #496                // Method replay:(ILjava/time/Duration;)Lreactor/core/publisher/ConnectableFlux;
       7: areturn

  public final reactor.core.publisher.ConnectableFlux<T> replay(int, java.time.Duration);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       6: invokevirtual #188                // Method replay:(ILjava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/ConnectableFlux;
       9: areturn

  public final reactor.core.publisher.ConnectableFlux<T> replay(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: ldc           #134                // int 2147483647
       3: aload_1
       4: aload_2
       5: invokevirtual #188                // Method replay:(ILjava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/ConnectableFlux;
       8: areturn

  public final reactor.core.publisher.ConnectableFlux<T> replay(int, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_3
       1: ldc_w         #497                // String timer
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: new           #494                // class reactor/core/publisher/FluxReplay
      11: dup
      12: aload_0
      13: iload_1
      14: aload_2
      15: invokevirtual #80                 // Method java/time/Duration.toMillis:()J
      18: aload_3
      19: invokespecial #495                // Method reactor/core/publisher/FluxReplay."<init>":(Lorg/reactivestreams/Publisher;IJLreactor/core/scheduler/Scheduler;)V
      22: invokestatic  #463                // Method onAssembly:(Lreactor/core/publisher/ConnectableFlux;)Lreactor/core/publisher/ConnectableFlux;
      25: areturn

  public final reactor.core.publisher.Flux<T> retry();
    Code:
       0: aload_0
       1: ldc2_w        #499                // long 9223372036854775807l
       4: invokevirtual #501                // Method retry:(J)Lreactor/core/publisher/Flux;
       7: areturn

  public final reactor.core.publisher.Flux<T> retry(long);
    Code:
       0: new           #502                // class reactor/core/publisher/FluxRetry
       3: dup
       4: aload_0
       5: lload_1
       6: invokespecial #503                // Method reactor/core/publisher/FluxRetry."<init>":(Lreactor/core/publisher/Flux;J)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> retry(java.util.function.Predicate<? super java.lang.Throwable>);
    Code:
       0: new           #504                // class reactor/core/publisher/FluxRetryPredicate
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #505                // Method reactor/core/publisher/FluxRetryPredicate."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Predicate;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> retry(long, java.util.function.Predicate<? super java.lang.Throwable>);
    Code:
       0: aload_0
       1: aload_3
       2: lload_1
       3: invokedynamic #506,  0            // InvokeDynamic #36:get:(Lreactor/core/publisher/Flux;Ljava/util/function/Predicate;J)Ljava/util/function/Supplier;
       8: invokestatic  #240                // Method defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
      11: areturn

  public final reactor.core.publisher.Flux<T> retryWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Throwable>, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: new           #507                // class reactor/core/publisher/FluxRetryWhen
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #508                // Method reactor/core/publisher/FluxRetryWhen."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> retryBackoff(long, java.time.Duration);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: getstatic     #509                // Field reactor/core/publisher/FluxRetryWhen.MAX_BACKOFF:Ljava/time/Duration;
       6: ldc2_w        #510                // double 0.5d
       9: invokevirtual #512                // Method retryBackoff:(JLjava/time/Duration;Ljava/time/Duration;D)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> retryBackoff(long, java.time.Duration, java.time.Duration);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: aload         4
       5: ldc2_w        #510                // double 0.5d
       8: invokevirtual #512                // Method retryBackoff:(JLjava/time/Duration;Ljava/time/Duration;D)Lreactor/core/publisher/Flux;
      11: areturn

  public final reactor.core.publisher.Flux<T> retryBackoff(long, java.time.Duration, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: aload         4
       5: ldc2_w        #510                // double 0.5d
       8: aload         5
      10: invokevirtual #513                // Method retryBackoff:(JLjava/time/Duration;Ljava/time/Duration;DLreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
      13: areturn

  public final reactor.core.publisher.Flux<T> retryBackoff(long, java.time.Duration, java.time.Duration, double);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: aload         4
       5: dload         5
       7: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
      10: invokevirtual #513                // Method retryBackoff:(JLjava/time/Duration;Ljava/time/Duration;DLreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
      13: areturn

  public final reactor.core.publisher.Flux<T> retryBackoff(long, java.time.Duration, java.time.Duration, double, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: aload         4
       5: dload         5
       7: aload         7
       9: invokestatic  #514                // Method reactor/core/publisher/FluxRetryWhen.randomExponentialBackoffFunction:(JLjava/time/Duration;Ljava/time/Duration;DLreactor/core/scheduler/Scheduler;)Ljava/util/function/Function;
      12: invokevirtual #515                // Method retryWhen:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      15: areturn

  public final reactor.core.publisher.Flux<T> sample(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #516                // Method interval:(Ljava/time/Duration;)Lreactor/core/publisher/Flux;
       5: invokevirtual #517                // Method sample:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: areturn

  public final <U> reactor.core.publisher.Flux<T> sample(org.reactivestreams.Publisher<U>);
    Code:
       0: new           #518                // class reactor/core/publisher/FluxSample
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #519                // Method reactor/core/publisher/FluxSample."<init>":(Lreactor/core/publisher/Flux;Lorg/reactivestreams/Publisher;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> sampleFirst(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #520,  0            // InvokeDynamic #37:apply:(Ljava/time/Duration;)Ljava/util/function/Function;
       7: invokevirtual #521                // Method sampleFirst:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      10: areturn

  public final <U> reactor.core.publisher.Flux<T> sampleFirst(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<U>>);
    Code:
       0: new           #522                // class reactor/core/publisher/FluxSampleFirst
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #523                // Method reactor/core/publisher/FluxSampleFirst."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final <U> reactor.core.publisher.Flux<T> sampleTimeout(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<U>>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       5: invokevirtual #524                // Method sampleTimeout:(Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final <U> reactor.core.publisher.Flux<T> sampleTimeout(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<U>>, int);
    Code:
       0: new           #525                // class reactor/core/publisher/FluxSampleTimeout
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      10: invokespecial #526                // Method reactor/core/publisher/FluxSampleTimeout."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;Ljava/util/function/Supplier;)V
      13: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      16: areturn

  public final reactor.core.publisher.Flux<T> scan(java.util.function.BiFunction<T, T, T>);
    Code:
       0: new           #527                // class reactor/core/publisher/FluxScan
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #528                // Method reactor/core/publisher/FluxScan."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/BiFunction;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final <A> reactor.core.publisher.Flux<A> scan(A, java.util.function.BiFunction<A, ? super T, A>);
    Code:
       0: aload_1
       1: ldc_w         #529                // String seed
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aload_1
      10: invokedynamic #530,  0            // InvokeDynamic #38:get:(Ljava/lang/Object;)Ljava/util/function/Supplier;
      15: aload_2
      16: invokevirtual #531                // Method scanWith:(Ljava/util/function/Supplier;Ljava/util/function/BiFunction;)Lreactor/core/publisher/Flux;
      19: areturn

  public final <A> reactor.core.publisher.Flux<A> scanWith(java.util.function.Supplier<A>, java.util.function.BiFunction<A, ? super T, A>);
    Code:
       0: new           #532                // class reactor/core/publisher/FluxScanSeed
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #533                // Method reactor/core/publisher/FluxScanSeed."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Supplier;Ljava/util/function/BiFunction;)V
      10: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      13: areturn

  public final reactor.core.publisher.Flux<T> share();
    Code:
       0: new           #534                // class reactor/core/publisher/FluxRefCount
       3: dup
       4: new           #461                // class reactor/core/publisher/FluxPublish
       7: dup
       8: aload_0
       9: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
      12: invokestatic  #535                // Method reactor/util/concurrent/Queues.small:()Ljava/util/function/Supplier;
      15: invokespecial #462                // Method reactor/core/publisher/FluxPublish."<init>":(Lreactor/core/publisher/Flux;ILjava/util/function/Supplier;)V
      18: iconst_1
      19: invokespecial #536                // Method reactor/core/publisher/FluxRefCount."<init>":(Lreactor/core/publisher/ConnectableFlux;I)V
      22: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      25: areturn

  public final reactor.core.publisher.Mono<T> single();
    Code:
       0: aload_0
       1: instanceof    #211                // class java/util/concurrent/Callable
       4: ifeq          75
       7: aload_0
       8: instanceof    #56                 // class reactor/core/Fuseable$ScalarCallable
      11: ifeq          58
      14: aload_0
      15: checkcast     #56                 // class reactor/core/Fuseable$ScalarCallable
      18: astore_1
      19: aload_1
      20: invokeinterface #57,  1           // InterfaceMethod reactor/core/Fuseable$ScalarCallable.call:()Ljava/lang/Object;
      25: astore_2
      26: goto          35
      29: astore_3
      30: aload_3
      31: invokestatic  #212                // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      34: areturn
      35: aload_2
      36: ifnonnull     53
      39: new           #368                // class java/util/NoSuchElementException
      42: dup
      43: ldc_w         #537                // String Source was a (constant) empty
      46: invokespecial #370                // Method java/util/NoSuchElementException."<init>":(Ljava/lang/String;)V
      49: invokestatic  #212                // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      52: areturn
      53: aload_2
      54: invokestatic  #215                // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      57: areturn
      58: aload_0
      59: checkcast     #211                // class java/util/concurrent/Callable
      62: astore_1
      63: new           #218                // class reactor/core/publisher/MonoCallable
      66: dup
      67: aload_1
      68: invokespecial #219                // Method reactor/core/publisher/MonoCallable."<init>":(Ljava/util/concurrent/Callable;)V
      71: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      74: areturn
      75: new           #538                // class reactor/core/publisher/MonoSingle
      78: dup
      79: aload_0
      80: invokespecial #539                // Method reactor/core/publisher/MonoSingle."<init>":(Lreactor/core/publisher/Flux;)V
      83: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      86: areturn
    Exception table:
       from    to  target type
          19    26    29   Class java/lang/Exception

  public final reactor.core.publisher.Mono<T> single(T);
    Code:
       0: aload_0
       1: instanceof    #211                // class java/util/concurrent/Callable
       4: ifeq          68
       7: aload_0
       8: instanceof    #56                 // class reactor/core/Fuseable$ScalarCallable
      11: ifeq          51
      14: aload_0
      15: checkcast     #56                 // class reactor/core/Fuseable$ScalarCallable
      18: astore_2
      19: aload_2
      20: invokeinterface #57,  1           // InterfaceMethod reactor/core/Fuseable$ScalarCallable.call:()Ljava/lang/Object;
      25: astore_3
      26: goto          37
      29: astore        4
      31: aload         4
      33: invokestatic  #212                // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      36: areturn
      37: aload_3
      38: ifnonnull     46
      41: aload_1
      42: invokestatic  #215                // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      45: areturn
      46: aload_3
      47: invokestatic  #215                // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      50: areturn
      51: aload_0
      52: checkcast     #211                // class java/util/concurrent/Callable
      55: astore_2
      56: new           #218                // class reactor/core/publisher/MonoCallable
      59: dup
      60: aload_2
      61: invokespecial #219                // Method reactor/core/publisher/MonoCallable."<init>":(Ljava/util/concurrent/Callable;)V
      64: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      67: areturn
      68: new           #538                // class reactor/core/publisher/MonoSingle
      71: dup
      72: aload_0
      73: aload_1
      74: iconst_0
      75: invokespecial #540                // Method reactor/core/publisher/MonoSingle."<init>":(Lreactor/core/publisher/Flux;Ljava/lang/Object;Z)V
      78: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      81: areturn
    Exception table:
       from    to  target type
          19    26    29   Class java/lang/Exception

  public final reactor.core.publisher.Mono<T> singleOrEmpty();
    Code:
       0: aload_0
       1: instanceof    #211                // class java/util/concurrent/Callable
       4: ifeq          17
       7: aload_0
       8: checkcast     #211                // class java/util/concurrent/Callable
      11: astore_1
      12: aload_1
      13: invokestatic  #366                // Method convertToMono:(Ljava/util/concurrent/Callable;)Lreactor/core/publisher/Mono;
      16: areturn
      17: new           #538                // class reactor/core/publisher/MonoSingle
      20: dup
      21: aload_0
      22: aconst_null
      23: iconst_1
      24: invokespecial #540                // Method reactor/core/publisher/MonoSingle."<init>":(Lreactor/core/publisher/Flux;Ljava/lang/Object;Z)V
      27: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      30: areturn

  public final reactor.core.publisher.Flux<T> skip(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifne          8
       6: aload_0
       7: areturn
       8: new           #541                // class reactor/core/publisher/FluxSkip
      11: dup
      12: aload_0
      13: lload_1
      14: invokespecial #542                // Method reactor/core/publisher/FluxSkip."<init>":(Lreactor/core/publisher/Flux;J)V
      17: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      20: areturn

  public final reactor.core.publisher.Flux<T> skip(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokevirtual #543                // Method skip:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> skip(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_1
       1: invokevirtual #544                // Method java/time/Duration.isZero:()Z
       4: ifne          17
       7: aload_0
       8: aload_1
       9: aload_2
      10: invokestatic  #261                // Method reactor/core/publisher/Mono.delay:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
      13: invokevirtual #545                // Method skipUntilOther:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      16: areturn
      17: aload_0
      18: areturn

  public final reactor.core.publisher.Flux<T> skipLast(int);
    Code:
       0: iload_1
       1: ifne          6
       4: aload_0
       5: areturn
       6: new           #546                // class reactor/core/publisher/FluxSkipLast
       9: dup
      10: aload_0
      11: iload_1
      12: invokespecial #547                // Method reactor/core/publisher/FluxSkipLast."<init>":(Lreactor/core/publisher/Flux;I)V
      15: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      18: areturn

  public final reactor.core.publisher.Flux<T> skipUntil(java.util.function.Predicate<? super T>);
    Code:
       0: new           #548                // class reactor/core/publisher/FluxSkipUntil
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #549                // Method reactor/core/publisher/FluxSkipUntil."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Predicate;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> skipUntilOther(org.reactivestreams.Publisher<?>);
    Code:
       0: new           #550                // class reactor/core/publisher/FluxSkipUntilOther
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #551                // Method reactor/core/publisher/FluxSkipUntilOther."<init>":(Lreactor/core/publisher/Flux;Lorg/reactivestreams/Publisher;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> skipWhile(java.util.function.Predicate<? super T>);
    Code:
       0: new           #552                // class reactor/core/publisher/FluxSkipWhile
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #553                // Method reactor/core/publisher/FluxSkipWhile."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Predicate;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> sort();
    Code:
       0: aload_0
       1: invokevirtual #554                // Method collectSortedList:()Lreactor/core/publisher/Mono;
       4: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
       7: invokevirtual #555                // Method reactor/core/publisher/Mono.flatMapIterable:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      10: areturn

  public final reactor.core.publisher.Flux<T> sort(java.util.Comparator<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #236                // Method collectSortedList:(Ljava/util/Comparator;)Lreactor/core/publisher/Mono;
       5: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
       8: invokevirtual #555                // Method reactor/core/publisher/Mono.flatMapIterable:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      11: areturn

  public final reactor.core.publisher.Flux<T> startWith(java.lang.Iterable<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #89                 // Method fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
       5: invokevirtual #556                // Method startWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> startWith(T...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #557                // Method just:([Ljava/lang/Object;)Lreactor/core/publisher/Flux;
       5: invokevirtual #556                // Method startWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> startWith(org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_0
       1: instanceof    #31                 // class reactor/core/publisher/FluxConcatArray
       4: ifeq          18
       7: aload_0
       8: checkcast     #31                 // class reactor/core/publisher/FluxConcatArray
      11: astore_2
      12: aload_2
      13: aload_1
      14: invokevirtual #558                // Method reactor/core/publisher/FluxConcatArray.concatAdditionalSourceFirst:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/FluxConcatArray;
      17: areturn
      18: iconst_2
      19: anewarray     #18                 // class org/reactivestreams/Publisher
      22: dup
      23: iconst_0
      24: aload_1
      25: aastore
      26: dup
      27: iconst_1
      28: aload_0
      29: aastore
      30: invokestatic  #247                // Method concat:([Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      33: areturn

  public final reactor.core.Disposable subscribe();
    Code:
       0: aload_0
       1: aconst_null
       2: aconst_null
       3: aconst_null
       4: invokevirtual #559                // Method subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;)Lreactor/core/Disposable;
       7: areturn

  public final reactor.core.Disposable subscribe(java.util.function.Consumer<? super T>);
    Code:
       0: aload_1
       1: ldc_w         #300                // String consumer
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aload_1
      10: aconst_null
      11: aconst_null
      12: invokevirtual #559                // Method subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;)Lreactor/core/Disposable;
      15: areturn

  public final reactor.core.Disposable subscribe(java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>);
    Code:
       0: aload_2
       1: ldc_w         #560                // String errorConsumer
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aload_1
      10: aload_2
      11: aconst_null
      12: invokevirtual #559                // Method subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;)Lreactor/core/Disposable;
      15: areturn

  public final reactor.core.Disposable subscribe(java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aconst_null
       5: invokevirtual #561                // Method subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/Consumer;)Lreactor/core/Disposable;
       8: areturn

  public final reactor.core.Disposable subscribe(java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable, java.util.function.Consumer<? super org.reactivestreams.Subscription>);
    Code:
       0: aload_0
       1: new           #562                // class reactor/core/publisher/LambdaSubscriber
       4: dup
       5: aload_1
       6: aload_2
       7: aload_3
       8: aload         4
      10: invokespecial #563                // Method reactor/core/publisher/LambdaSubscriber."<init>":(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/Consumer;)V
      13: invokevirtual #564                // Method subscribeWith:(Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;
      16: checkcast     #565                // class reactor/core/Disposable
      19: areturn

  public final void subscribe(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_0
       1: invokestatic  #148                // Method onLastAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
       4: aload_1
       5: invokestatic  #149                // Method reactor/core/publisher/Operators.toCoreSubscriber:(Lorg/reactivestreams/Subscriber;)Lreactor/core/CoreSubscriber;
       8: invokevirtual #150                // Method subscribe:(Lreactor/core/CoreSubscriber;)V
      11: return

  public abstract void subscribe(reactor.core.CoreSubscriber<? super T>);

  public final reactor.core.publisher.Flux<T> subscriberContext(reactor.util.context.Context);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #566,  0            // InvokeDynamic #39:apply:(Lreactor/util/context/Context;)Ljava/util/function/Function;
       7: invokevirtual #287                // Method subscriberContext:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      10: areturn

  public final reactor.core.publisher.Flux<T> subscriberContext(java.util.function.Function<reactor.util.context.Context, reactor.util.context.Context>);
    Code:
       0: new           #567                // class reactor/core/publisher/FluxContextStart
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #568                // Method reactor/core/publisher/FluxContextStart."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;)V
       9: areturn

  public final reactor.core.publisher.Flux<T> subscribeOn(reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokevirtual #569                // Method subscribeOn:(Lreactor/core/scheduler/Scheduler;Z)Lreactor/core/publisher/Flux;
       6: areturn

  public final reactor.core.publisher.Flux<T> subscribeOn(reactor.core.scheduler.Scheduler, boolean);
    Code:
       0: aload_0
       1: instanceof    #211                // class java/util/concurrent/Callable
       4: ifeq          56
       7: aload_0
       8: instanceof    #56                 // class reactor/core/Fuseable$ScalarCallable
      11: ifeq          38
      14: aload_0
      15: checkcast     #56                 // class reactor/core/Fuseable$ScalarCallable
      18: invokeinterface #57,  1           // InterfaceMethod reactor/core/Fuseable$ScalarCallable.call:()Ljava/lang/Object;
      23: astore_3
      24: new           #470                // class reactor/core/publisher/FluxSubscribeOnValue
      27: dup
      28: aload_3
      29: aload_1
      30: invokespecial #471                // Method reactor/core/publisher/FluxSubscribeOnValue."<init>":(Ljava/lang/Object;Lreactor/core/scheduler/Scheduler;)V
      33: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      36: areturn
      37: astore_3
      38: aload_0
      39: checkcast     #211                // class java/util/concurrent/Callable
      42: astore_3
      43: new           #472                // class reactor/core/publisher/FluxSubscribeOnCallable
      46: dup
      47: aload_3
      48: aload_1
      49: invokespecial #473                // Method reactor/core/publisher/FluxSubscribeOnCallable."<init>":(Ljava/util/concurrent/Callable;Lreactor/core/scheduler/Scheduler;)V
      52: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      55: areturn
      56: new           #570                // class reactor/core/publisher/FluxSubscribeOn
      59: dup
      60: aload_0
      61: aload_1
      62: iload_2
      63: invokespecial #571                // Method reactor/core/publisher/FluxSubscribeOn."<init>":(Lreactor/core/publisher/Flux;Lreactor/core/scheduler/Scheduler;Z)V
      66: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      69: areturn
    Exception table:
       from    to  target type
          14    36    37   Class java/lang/Exception

  public final <E extends org.reactivestreams.Subscriber<? super T>> E subscribeWith(E);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #572                // Method subscribe:(Lorg/reactivestreams/Subscriber;)V
       5: aload_1
       6: areturn

  public final <V> reactor.core.publisher.Flux<V> switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>, reactor.core.publisher.Flux<T>, org.reactivestreams.Publisher<? extends V>>);
    Code:
       0: new           #573                // class reactor/core/publisher/FluxSwitchOnFirst
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #574                // Method reactor/core/publisher/FluxSwitchOnFirst."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/BiFunction;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> switchIfEmpty(org.reactivestreams.Publisher<? extends T>);
    Code:
       0: new           #575                // class reactor/core/publisher/FluxSwitchIfEmpty
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #576                // Method reactor/core/publisher/FluxSwitchIfEmpty."<init>":(Lreactor/core/publisher/Flux;Lorg/reactivestreams/Publisher;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final <V> reactor.core.publisher.Flux<V> switchMap(java.util.function.Function<? super T, org.reactivestreams.Publisher<? extends V>>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       5: invokevirtual #577                // Method switchMap:(Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final <V> reactor.core.publisher.Flux<V> switchMap(java.util.function.Function<? super T, org.reactivestreams.Publisher<? extends V>>, int);
    Code:
       0: new           #105                // class reactor/core/publisher/FluxSwitchMap
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      10: iload_2
      11: invokespecial #107                // Method reactor/core/publisher/FluxSwitchMap."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;Ljava/util/function/Supplier;I)V
      14: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      17: areturn

  public final reactor.core.publisher.Flux<T> tag(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #578                // Method reactor/core/publisher/FluxName.createOrAppend:(Lreactor/core/publisher/Flux;Ljava/lang/String;Ljava/lang/String;)Lreactor/core/publisher/Flux;
       6: areturn

  public final reactor.core.publisher.Flux<T> take(long);
    Code:
       0: aload_0
       1: instanceof    #5                  // class reactor/core/Fuseable
       4: ifeq          20
       7: new           #579                // class reactor/core/publisher/FluxTakeFuseable
      10: dup
      11: aload_0
      12: lload_1
      13: invokespecial #580                // Method reactor/core/publisher/FluxTakeFuseable."<init>":(Lreactor/core/publisher/Flux;J)V
      16: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      19: areturn
      20: new           #581                // class reactor/core/publisher/FluxTake
      23: dup
      24: aload_0
      25: lload_1
      26: invokespecial #582                // Method reactor/core/publisher/FluxTake."<init>":(Lreactor/core/publisher/Flux;J)V
      29: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      32: areturn

  public final reactor.core.publisher.Flux<T> take(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokevirtual #583                // Method take:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> take(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_1
       1: invokevirtual #544                // Method java/time/Duration.isZero:()Z
       4: ifne          17
       7: aload_0
       8: aload_1
       9: aload_2
      10: invokestatic  #261                // Method reactor/core/publisher/Mono.delay:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
      13: invokevirtual #584                // Method takeUntilOther:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      16: areturn
      17: aload_0
      18: lconst_0
      19: invokevirtual #585                // Method take:(J)Lreactor/core/publisher/Flux;
      22: areturn

  public final reactor.core.publisher.Flux<T> takeLast(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmpne     17
       5: new           #586                // class reactor/core/publisher/FluxTakeLastOne
       8: dup
       9: aload_0
      10: invokespecial #587                // Method reactor/core/publisher/FluxTakeLastOne."<init>":(Lreactor/core/publisher/Flux;)V
      13: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      16: areturn
      17: new           #588                // class reactor/core/publisher/FluxTakeLast
      20: dup
      21: aload_0
      22: iload_1
      23: invokespecial #589                // Method reactor/core/publisher/FluxTakeLast."<init>":(Lreactor/core/publisher/Flux;I)V
      26: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      29: areturn

  public final reactor.core.publisher.Flux<T> takeUntil(java.util.function.Predicate<? super T>);
    Code:
       0: new           #590                // class reactor/core/publisher/FluxTakeUntil
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #591                // Method reactor/core/publisher/FluxTakeUntil."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Predicate;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> takeUntilOther(org.reactivestreams.Publisher<?>);
    Code:
       0: new           #592                // class reactor/core/publisher/FluxTakeUntilOther
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #593                // Method reactor/core/publisher/FluxTakeUntilOther."<init>":(Lreactor/core/publisher/Flux;Lorg/reactivestreams/Publisher;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> takeWhile(java.util.function.Predicate<? super T>);
    Code:
       0: new           #594                // class reactor/core/publisher/FluxTakeWhile
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #595                // Method reactor/core/publisher/FluxTakeWhile."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Predicate;)V
       9: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Mono<java.lang.Void> then();
    Code:
       0: new           #362                // class reactor/core/publisher/MonoIgnoreElements
       3: dup
       4: aload_0
       5: invokespecial #363                // Method reactor/core/publisher/MonoIgnoreElements."<init>":(Lreactor/core/publisher/Flux;)V
       8: astore_1
       9: aload_1
      10: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      13: areturn

  public final <V> reactor.core.publisher.Mono<V> then(reactor.core.publisher.Mono<V>);
    Code:
       0: new           #596                // class reactor/core/publisher/MonoIgnoreThen
       3: dup
       4: iconst_1
       5: anewarray     #18                 // class org/reactivestreams/Publisher
       8: dup
       9: iconst_0
      10: aload_0
      11: aastore
      12: aload_1
      13: invokespecial #597                // Method reactor/core/publisher/MonoIgnoreThen."<init>":([Lorg/reactivestreams/Publisher;Lreactor/core/publisher/Mono;)V
      16: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      19: areturn

  public final reactor.core.publisher.Mono<java.lang.Void> thenEmpty(org.reactivestreams.Publisher<java.lang.Void>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #598                // Method reactor/core/publisher/Mono.fromDirect:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       5: invokevirtual #599                // Method then:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
       8: areturn

  public final <V> reactor.core.publisher.Flux<V> thenMany(org.reactivestreams.Publisher<V>);
    Code:
       0: aload_0
       1: instanceof    #31                 // class reactor/core/publisher/FluxConcatArray
       4: ifeq          18
       7: aload_0
       8: checkcast     #31                 // class reactor/core/publisher/FluxConcatArray
      11: astore_2
      12: aload_2
      13: aload_1
      14: invokevirtual #600                // Method reactor/core/publisher/FluxConcatArray.concatAdditionalIgnoredLast:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/FluxConcatArray;
      17: areturn
      18: iconst_2
      19: anewarray     #18                 // class org/reactivestreams/Publisher
      22: dup
      23: iconst_0
      24: aload_0
      25: invokevirtual #601                // Method ignoreElements:()Lreactor/core/publisher/Mono;
      28: aastore
      29: dup
      30: iconst_1
      31: aload_1
      32: aastore
      33: invokestatic  #247                // Method concat:([Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      36: astore_2
      37: aload_2
      38: areturn

  public final reactor.core.publisher.Flux<T> timeout(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       6: invokevirtual #602                // Method timeout:(Ljava/time/Duration;Lorg/reactivestreams/Publisher;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       9: areturn

  public final reactor.core.publisher.Flux<T> timeout(java.time.Duration, org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       6: invokevirtual #602                // Method timeout:(Ljava/time/Duration;Lorg/reactivestreams/Publisher;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       9: areturn

  public final reactor.core.publisher.Flux<T> timeout(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aload_2
       4: invokevirtual #602                // Method timeout:(Ljava/time/Duration;Lorg/reactivestreams/Publisher;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       7: areturn

  public final reactor.core.publisher.Flux<T> timeout(java.time.Duration, org.reactivestreams.Publisher<? extends T>, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_1
       1: aload_3
       2: invokestatic  #261                // Method reactor/core/publisher/Mono.delay:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       5: lconst_0
       6: invokestatic  #603                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       9: invokevirtual #604                // Method reactor/core/publisher/Mono.onErrorReturn:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      12: astore        4
      14: aload         4
      16: invokedynamic #605,  0            // InvokeDynamic #40:apply:(Lreactor/core/publisher/Mono;)Ljava/util/function/Function;
      21: astore        5
      23: aload_2
      24: ifnonnull     59
      27: aload_0
      28: aload         4
      30: aload         5
      32: new           #606                // class java/lang/StringBuilder
      35: dup
      36: invokespecial #607                // Method java/lang/StringBuilder."<init>":()V
      39: aload_1
      40: invokevirtual #80                 // Method java/time/Duration.toMillis:()J
      43: invokevirtual #608                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      46: ldc_w         #609                // String ms
      49: invokevirtual #610                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: invokevirtual #611                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      55: invokespecial #612                // Method timeout:(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/lang/String;)Lreactor/core/publisher/Flux;
      58: areturn
      59: aload_0
      60: aload         4
      62: aload         5
      64: aload_2
      65: invokevirtual #613                // Method timeout:(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      68: areturn

  public final <U> reactor.core.publisher.Flux<T> timeout(org.reactivestreams.Publisher<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #614,  0            // InvokeDynamic #41:apply:()Ljava/util/function/Function;
       7: invokevirtual #615                // Method timeout:(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      10: areturn

  public final <U, V> reactor.core.publisher.Flux<T> timeout(org.reactivestreams.Publisher<U>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<V>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: ldc_w         #616                // String first signal from a Publisher
       6: invokespecial #612                // Method timeout:(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/lang/String;)Lreactor/core/publisher/Flux;
       9: areturn

  private final <U, V> reactor.core.publisher.Flux<T> timeout(org.reactivestreams.Publisher<U>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<V>>, java.lang.String);
    Code:
       0: new           #617                // class reactor/core/publisher/FluxTimeout
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_3
       8: invokespecial #618                // Method reactor/core/publisher/FluxTimeout."<init>":(Lreactor/core/publisher/Flux;Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/lang/String;)V
      11: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      14: areturn

  public final <U, V> reactor.core.publisher.Flux<T> timeout(org.reactivestreams.Publisher<U>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<V>>, org.reactivestreams.Publisher<? extends T>);
    Code:
       0: new           #617                // class reactor/core/publisher/FluxTimeout
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_3
       8: invokespecial #619                // Method reactor/core/publisher/FluxTimeout."<init>":(Lreactor/core/publisher/Flux;Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Lorg/reactivestreams/Publisher;)V
      11: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      14: areturn

  public final reactor.core.publisher.Flux<reactor.util.function.Tuple2<java.lang.Long, T>> timestamp();
    Code:
       0: aload_0
       1: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       4: invokevirtual #620                // Method timestamp:(Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       7: areturn

  public final reactor.core.publisher.Flux<reactor.util.function.Tuple2<java.lang.Long, T>> timestamp(reactor.core.scheduler.Scheduler);
    Code:
       0: aload_1
       1: ldc_w         #315                // String scheduler
       4: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aload_1
      10: invokedynamic #621,  0            // InvokeDynamic #42:apply:(Lreactor/core/scheduler/Scheduler;)Ljava/util/function/Function;
      15: invokevirtual #192                // Method map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      18: areturn

  public final java.lang.Iterable<T> toIterable();
    Code:
       0: aload_0
       1: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       4: invokevirtual #622                // Method toIterable:(I)Ljava/lang/Iterable;
       7: areturn

  public final java.lang.Iterable<T> toIterable(int);
    Code:
       0: aload_0
       1: iload_1
       2: aconst_null
       3: invokevirtual #623                // Method toIterable:(ILjava/util/function/Supplier;)Ljava/lang/Iterable;
       6: areturn

  public final java.lang.Iterable<T> toIterable(int, java.util.function.Supplier<java.util.Queue<T>>);
    Code:
       0: aload_2
       1: ifnonnull     12
       4: iload_1
       5: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
       8: astore_3
       9: goto          14
      12: aload_2
      13: astore_3
      14: new           #624                // class reactor/core/publisher/BlockingIterable
      17: dup
      18: aload_0
      19: iload_1
      20: aload_3
      21: invokespecial #625                // Method reactor/core/publisher/BlockingIterable."<init>":(Lorg/reactivestreams/Publisher;ILjava/util/function/Supplier;)V
      24: areturn

  public final java.util.stream.Stream<T> toStream();
    Code:
       0: aload_0
       1: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       4: invokevirtual #626                // Method toStream:(I)Ljava/util/stream/Stream;
       7: areturn

  public final java.util.stream.Stream<T> toStream(int);
    Code:
       0: iload_1
       1: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
       4: astore_2
       5: new           #624                // class reactor/core/publisher/BlockingIterable
       8: dup
       9: aload_0
      10: iload_1
      11: aload_2
      12: invokespecial #625                // Method reactor/core/publisher/BlockingIterable."<init>":(Lorg/reactivestreams/Publisher;ILjava/util/function/Supplier;)V
      15: invokevirtual #627                // Method reactor/core/publisher/BlockingIterable.stream:()Ljava/util/stream/Stream;
      18: areturn

  public final <V> reactor.core.publisher.Flux<V> transform(java.util.function.Function<? super reactor.core.publisher.Flux<T>, ? extends org.reactivestreams.Publisher<V>>);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #18                 // class org/reactivestreams/Publisher
      10: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      13: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      16: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> window(int);
    Code:
       0: new           #628                // class reactor/core/publisher/FluxWindow
       3: dup
       4: aload_0
       5: iload_1
       6: iload_1
       7: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      10: invokespecial #629                // Method reactor/core/publisher/FluxWindow."<init>":(Lreactor/core/publisher/Flux;ILjava/util/function/Supplier;)V
      13: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      16: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> window(int, int);
    Code:
       0: new           #628                // class reactor/core/publisher/FluxWindow
       3: dup
       4: aload_0
       5: iload_1
       6: iload_2
       7: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
      10: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      13: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
      16: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      19: invokespecial #630                // Method reactor/core/publisher/FluxWindow."<init>":(Lreactor/core/publisher/Flux;IILjava/util/function/Supplier;Ljava/util/function/Supplier;)V
      22: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      25: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> window(org.reactivestreams.Publisher<?>);
    Code:
       0: new           #631                // class reactor/core/publisher/FluxWindowBoundary
       3: dup
       4: aload_0
       5: aload_1
       6: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
       9: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      12: invokespecial #632                // Method reactor/core/publisher/FluxWindowBoundary."<init>":(Lreactor/core/publisher/Flux;Lorg/reactivestreams/Publisher;Ljava/util/function/Supplier;)V
      15: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      18: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> window(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokevirtual #633                // Method window:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> window(java.time.Duration, java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       6: invokevirtual #634                // Method window:(Ljava/time/Duration;Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       9: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> window(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #77                 // Method interval:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       6: invokevirtual #635                // Method window:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       9: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> window(java.time.Duration, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_2
       1: aload_1
       2: invokevirtual #167                // Method java/time/Duration.equals:(Ljava/lang/Object;)Z
       5: ifeq          14
       8: aload_0
       9: aload_1
      10: invokevirtual #636                // Method window:(Ljava/time/Duration;)Lreactor/core/publisher/Flux;
      13: areturn
      14: aload_0
      15: getstatic     #168                // Field java/time/Duration.ZERO:Ljava/time/Duration;
      18: aload_2
      19: aload_3
      20: invokestatic  #78                 // Method interval:(Ljava/time/Duration;Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
      23: aload_1
      24: aload_3
      25: invokedynamic #637,  0            // InvokeDynamic #43:apply:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Ljava/util/function/Function;
      30: invokevirtual #638                // Method windowWhen:(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      33: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> windowTimeout(int, java.time.Duration);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #76                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       6: invokevirtual #639                // Method windowTimeout:(ILjava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       9: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> windowTimeout(int, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: new           #640                // class reactor/core/publisher/FluxWindowTimeout
       3: dup
       4: aload_0
       5: iload_1
       6: aload_2
       7: invokevirtual #80                 // Method java/time/Duration.toMillis:()J
      10: aload_3
      11: invokespecial #641                // Method reactor/core/publisher/FluxWindowTimeout."<init>":(Lreactor/core/publisher/Flux;IJLreactor/core/scheduler/Scheduler;)V
      14: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      17: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> windowUntil(java.util.function.Predicate<T>);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #642                // Method windowUntil:(Ljava/util/function/Predicate;Z)Lreactor/core/publisher/Flux;
       6: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> windowUntil(java.util.function.Predicate<T>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       6: invokevirtual #643                // Method windowUntil:(Ljava/util/function/Predicate;ZI)Lreactor/core/publisher/Flux;
       9: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> windowUntil(java.util.function.Predicate<T>, boolean, int);
    Code:
       0: new           #644                // class reactor/core/publisher/FluxWindowPredicate
       3: dup
       4: aload_0
       5: iload_3
       6: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
       9: iload_3
      10: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      13: iload_3
      14: aload_1
      15: iload_2
      16: ifeq          25
      19: getstatic     #178                // Field reactor/core/publisher/FluxBufferPredicate$Mode.UNTIL_CUT_BEFORE:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      22: goto          28
      25: getstatic     #176                // Field reactor/core/publisher/FluxBufferPredicate$Mode.UNTIL:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      28: invokespecial #645                // Method reactor/core/publisher/FluxWindowPredicate."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Supplier;Ljava/util/function/Supplier;ILjava/util/function/Predicate;Lreactor/core/publisher/FluxBufferPredicate$Mode;)V
      31: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      34: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> windowWhile(java.util.function.Predicate<T>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #85                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: invokevirtual #646                // Method windowWhile:(Ljava/util/function/Predicate;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> windowWhile(java.util.function.Predicate<T>, int);
    Code:
       0: new           #644                // class reactor/core/publisher/FluxWindowPredicate
       3: dup
       4: aload_0
       5: iload_2
       6: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
       9: iload_2
      10: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      13: iload_2
      14: aload_1
      15: getstatic     #179                // Field reactor/core/publisher/FluxBufferPredicate$Mode.WHILE:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      18: invokespecial #645                // Method reactor/core/publisher/FluxWindowPredicate."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Supplier;Ljava/util/function/Supplier;ILjava/util/function/Predicate;Lreactor/core/publisher/FluxBufferPredicate$Mode;)V
      21: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      24: areturn

  public final <U, V> reactor.core.publisher.Flux<reactor.core.publisher.Flux<T>> windowWhen(org.reactivestreams.Publisher<U>, java.util.function.Function<? super U, ? extends org.reactivestreams.Publisher<V>>);
    Code:
       0: new           #647                // class reactor/core/publisher/FluxWindowWhen
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: getstatic     #2                  // Field reactor/util/concurrent/Queues.XS_BUFFER_SIZE:I
      10: invokestatic  #106                // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      13: invokespecial #648                // Method reactor/core/publisher/FluxWindowWhen."<init>":(Lreactor/core/publisher/Flux;Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Supplier;)V
      16: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      19: areturn

  public final <U, R> reactor.core.publisher.Flux<R> withLatestFrom(org.reactivestreams.Publisher<? extends U>, java.util.function.BiFunction<? super T, ? super U, ? extends R>);
    Code:
       0: new           #649                // class reactor/core/publisher/FluxWithLatestFrom
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #650                // Method reactor/core/publisher/FluxWithLatestFrom."<init>":(Lreactor/core/publisher/Flux;Lorg/reactivestreams/Publisher;Ljava/util/function/BiFunction;)V
      10: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      13: areturn

  public final <T2> reactor.core.publisher.Flux<reactor.util.function.Tuple2<T, T2>> zipWith(org.reactivestreams.Publisher<? extends T2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #117                // Method tuple2Function:()Ljava/util/function/BiFunction;
       5: invokevirtual #651                // Method zipWith:(Lorg/reactivestreams/Publisher;Ljava/util/function/BiFunction;)Lreactor/core/publisher/Flux;
       8: areturn

  public final <T2, V> reactor.core.publisher.Flux<V> zipWith(org.reactivestreams.Publisher<? extends T2>, java.util.function.BiFunction<? super T, ? super T2, ? extends V>);
    Code:
       0: aload_0
       1: instanceof    #114                // class reactor/core/publisher/FluxZip
       4: ifeq          28
       7: aload_0
       8: checkcast     #114                // class reactor/core/publisher/FluxZip
      11: astore_3
      12: aload_3
      13: aload_1
      14: aload_2
      15: invokevirtual #652                // Method reactor/core/publisher/FluxZip.zipAdditionalSource:(Lorg/reactivestreams/Publisher;Ljava/util/function/BiFunction;)Lreactor/core/publisher/FluxZip;
      18: astore        4
      20: aload         4
      22: ifnull        28
      25: aload         4
      27: areturn
      28: aload_0
      29: aload_1
      30: aload_2
      31: invokestatic  #118                // Method zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Ljava/util/function/BiFunction;)Lreactor/core/publisher/Flux;
      34: areturn

  public final <T2, V> reactor.core.publisher.Flux<V> zipWith(org.reactivestreams.Publisher<? extends T2>, int, java.util.function.BiFunction<? super T, ? super T2, ? extends V>);
    Code:
       0: aload_3
       1: invokedynamic #653,  0            // InvokeDynamic #44:apply:(Ljava/util/function/BiFunction;)Ljava/util/function/Function;
       6: iload_2
       7: iconst_2
       8: anewarray     #18                 // class org/reactivestreams/Publisher
      11: dup
      12: iconst_0
      13: aload_0
      14: aastore
      15: dup
      16: iconst_1
      17: aload_1
      18: aastore
      19: invokestatic  #128                // Method zip:(Ljava/util/function/Function;I[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      22: areturn

  public final <T2> reactor.core.publisher.Flux<reactor.util.function.Tuple2<T, T2>> zipWith(org.reactivestreams.Publisher<? extends T2>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #117                // Method tuple2Function:()Ljava/util/function/BiFunction;
       6: invokevirtual #654                // Method zipWith:(Lorg/reactivestreams/Publisher;ILjava/util/function/BiFunction;)Lreactor/core/publisher/Flux;
       9: areturn

  public final <T2> reactor.core.publisher.Flux<reactor.util.function.Tuple2<T, T2>> zipWithIterable(java.lang.Iterable<? extends T2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #117                // Method tuple2Function:()Ljava/util/function/BiFunction;
       5: invokevirtual #655                // Method zipWithIterable:(Ljava/lang/Iterable;Ljava/util/function/BiFunction;)Lreactor/core/publisher/Flux;
       8: areturn

  public final <T2, V> reactor.core.publisher.Flux<V> zipWithIterable(java.lang.Iterable<? extends T2>, java.util.function.BiFunction<? super T, ? super T2, ? extends V>);
    Code:
       0: new           #656                // class reactor/core/publisher/FluxZipIterable
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #657                // Method reactor/core/publisher/FluxZipIterable."<init>":(Lreactor/core/publisher/Flux;Ljava/lang/Iterable;Ljava/util/function/BiFunction;)V
      10: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      13: areturn

  protected static <T> reactor.core.publisher.Flux<T> onAssembly(reactor.core.publisher.Flux<T>);
    Code:
       0: getstatic     #658                // Field reactor/core/publisher/Hooks.onEachOperatorHook:Ljava/util/function/Function;
       3: astore_1
       4: aload_1
       5: ifnull        19
       8: aload_1
       9: aload_0
      10: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #55                 // class reactor/core/publisher/Flux
      18: astore_0
      19: getstatic     #659                // Field reactor/core/publisher/Hooks.GLOBAL_TRACE:Z
      22: ifeq          54
      25: new           #200                // class reactor/core/publisher/FluxOnAssembly$AssemblySnapshot
      28: dup
      29: aconst_null
      30: getstatic     #201                // Field reactor/core/publisher/Traces.callSiteSupplierFactory:Ljava/util/function/Supplier;
      33: invokeinterface #202,  1          // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      38: checkcast     #203                // class java/util/function/Supplier
      41: invokespecial #204                // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshot."<init>":(Ljava/lang/String;Ljava/util/function/Supplier;)V
      44: astore_2
      45: aload_0
      46: aload_2
      47: invokestatic  #660                // Method reactor/core/publisher/Hooks.addAssemblyInfo:(Lorg/reactivestreams/Publisher;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;)Lorg/reactivestreams/Publisher;
      50: checkcast     #55                 // class reactor/core/publisher/Flux
      53: astore_0
      54: aload_0
      55: areturn

  protected static <T> reactor.core.publisher.Flux<T> onLastAssembly(reactor.core.publisher.Flux<T>);
    Code:
       0: getstatic     #661                // Field reactor/core/publisher/Hooks.onLastOperatorHook:Ljava/util/function/Function;
       3: astore_1
       4: aload_1
       5: ifnonnull     10
       8: aload_0
       9: areturn
      10: aload_1
      11: aload_0
      12: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      17: ldc_w         #662                // String LastOperator hook returned null
      20: invokestatic  #67                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      23: checkcast     #55                 // class reactor/core/publisher/Flux
      26: areturn

  protected static <T> reactor.core.publisher.ConnectableFlux<T> onAssembly(reactor.core.publisher.ConnectableFlux<T>);
    Code:
       0: getstatic     #658                // Field reactor/core/publisher/Hooks.onEachOperatorHook:Ljava/util/function/Function;
       3: astore_1
       4: aload_1
       5: ifnull        19
       8: aload_1
       9: aload_0
      10: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #663                // class reactor/core/publisher/ConnectableFlux
      18: astore_0
      19: getstatic     #659                // Field reactor/core/publisher/Hooks.GLOBAL_TRACE:Z
      22: ifeq          54
      25: new           #200                // class reactor/core/publisher/FluxOnAssembly$AssemblySnapshot
      28: dup
      29: aconst_null
      30: getstatic     #201                // Field reactor/core/publisher/Traces.callSiteSupplierFactory:Ljava/util/function/Supplier;
      33: invokeinterface #202,  1          // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      38: checkcast     #203                // class java/util/function/Supplier
      41: invokespecial #204                // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshot."<init>":(Ljava/lang/String;Ljava/util/function/Supplier;)V
      44: astore_2
      45: aload_0
      46: aload_2
      47: invokestatic  #660                // Method reactor/core/publisher/Hooks.addAssemblyInfo:(Lorg/reactivestreams/Publisher;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;)Lorg/reactivestreams/Publisher;
      50: checkcast     #663                // class reactor/core/publisher/ConnectableFlux
      53: astore_0
      54: aload_0
      55: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #190                // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: invokevirtual #664                // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
       7: areturn

  final <V> reactor.core.publisher.Flux<V> flatMap(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends V>>, boolean, int, int);
    Code:
       0: new           #87                 // class reactor/core/publisher/FluxFlatMap
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: iload_3
       8: iload_3
       9: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      12: iload         4
      14: iload         4
      16: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      19: invokespecial #88                 // Method reactor/core/publisher/FluxFlatMap."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;ZILjava/util/function/Supplier;ILjava/util/function/Supplier;)V
      22: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      25: areturn

  final <R> reactor.core.publisher.Flux<R> flatMapSequential(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, boolean, int, int);
    Code:
       0: new           #665                // class reactor/core/publisher/FluxMergeSequential
       3: dup
       4: aload_0
       5: aload_1
       6: iload_3
       7: iload         4
       9: iload_2
      10: ifeq          19
      13: getstatic     #34                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.END:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      16: goto          22
      19: getstatic     #29                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.IMMEDIATE:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      22: invokespecial #666                // Method reactor/core/publisher/FluxMergeSequential."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;IILreactor/core/publisher/FluxConcatMap$ErrorMode;)V
      25: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      28: areturn

  static <T> reactor.core.publisher.Flux<T> doOnSignal(reactor.core.publisher.Flux<T>, java.util.function.Consumer<? super org.reactivestreams.Subscription>, java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable, java.lang.Runnable, java.util.function.LongConsumer, java.lang.Runnable);
    Code:
       0: aload_0
       1: instanceof    #5                  // class reactor/core/Fuseable
       4: ifeq          30
       7: new           #667                // class reactor/core/publisher/FluxPeekFuseable
      10: dup
      11: aload_0
      12: aload_1
      13: aload_2
      14: aload_3
      15: aload         4
      17: aload         5
      19: aload         6
      21: aload         7
      23: invokespecial #668                // Method reactor/core/publisher/FluxPeekFuseable."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)V
      26: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      29: areturn
      30: new           #669                // class reactor/core/publisher/FluxPeek
      33: dup
      34: aload_0
      35: aload_1
      36: aload_2
      37: aload_3
      38: aload         4
      40: aload         5
      42: aload         6
      44: aload         7
      46: invokespecial #670                // Method reactor/core/publisher/FluxPeek."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)V
      49: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      52: areturn

  static <T> reactor.core.publisher.Mono<T> convertToMono(java.util.concurrent.Callable<T>);
    Code:
       0: aload_0
       1: instanceof    #56                 // class reactor/core/Fuseable$ScalarCallable
       4: ifeq          41
       7: aload_0
       8: checkcast     #56                 // class reactor/core/Fuseable$ScalarCallable
      11: astore_1
      12: aload_1
      13: invokeinterface #57,  1           // InterfaceMethod reactor/core/Fuseable$ScalarCallable.call:()Ljava/lang/Object;
      18: astore_2
      19: goto          28
      22: astore_3
      23: aload_3
      24: invokestatic  #212                // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      27: areturn
      28: aload_2
      29: ifnonnull     36
      32: invokestatic  #367                // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      35: areturn
      36: aload_2
      37: invokestatic  #215                // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      40: areturn
      41: new           #218                // class reactor/core/publisher/MonoCallable
      44: dup
      45: aload_0
      46: invokespecial #219                // Method reactor/core/publisher/MonoCallable."<init>":(Ljava/util/concurrent/Callable;)V
      49: invokestatic  #142                // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      52: areturn
    Exception table:
       from    to  target type
          12    19    22   Class java/lang/Exception

  static <I> reactor.core.publisher.Flux<I> merge(int, boolean, org.reactivestreams.Publisher<? extends I>...);
    Code:
       0: aload_2
       1: arraylength
       2: ifne          9
       5: invokestatic  #4                  // Method empty:()Lreactor/core/publisher/Flux;
       8: areturn
       9: aload_2
      10: arraylength
      11: iconst_1
      12: if_icmpne     22
      15: aload_2
      16: iconst_0
      17: aaload
      18: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      21: areturn
      22: new           #397                // class reactor/core/publisher/FluxMerge
      25: dup
      26: aload_2
      27: iload_1
      28: aload_2
      29: arraylength
      30: aload_2
      31: arraylength
      32: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      35: iload_0
      36: iload_0
      37: invokestatic  #15                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      40: invokespecial #671                // Method reactor/core/publisher/FluxMerge."<init>":([Lorg/reactivestreams/Publisher;ZILjava/util/function/Supplier;ILjava/util/function/Supplier;)V
      43: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      46: areturn

  static <I> reactor.core.publisher.Flux<I> mergeSequential(int, boolean, org.reactivestreams.Publisher<? extends I>...);
    Code:
       0: aload_2
       1: arraylength
       2: ifne          9
       5: invokestatic  #4                  // Method empty:()Lreactor/core/publisher/Flux;
       8: areturn
       9: aload_2
      10: arraylength
      11: iconst_1
      12: if_icmpne     22
      15: aload_2
      16: iconst_0
      17: aaload
      18: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      21: areturn
      22: new           #665                // class reactor/core/publisher/FluxMergeSequential
      25: dup
      26: new           #62                 // class reactor/core/publisher/FluxArray
      29: dup
      30: aload_2
      31: invokespecial #63                 // Method reactor/core/publisher/FluxArray."<init>":([Ljava/lang/Object;)V
      34: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
      37: aload_2
      38: arraylength
      39: iload_0
      40: iload_1
      41: ifeq          50
      44: getstatic     #34                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.END:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      47: goto          53
      50: getstatic     #29                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.IMMEDIATE:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      53: invokespecial #666                // Method reactor/core/publisher/FluxMergeSequential."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;IILreactor/core/publisher/FluxConcatMap$ErrorMode;)V
      56: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      59: areturn

  static <T> reactor.core.publisher.Flux<T> mergeSequential(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>, boolean, int, int);
    Code:
       0: new           #665                // class reactor/core/publisher/FluxMergeSequential
       3: dup
       4: aload_0
       5: invokestatic  #7                  // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
      11: iload_2
      12: iload_3
      13: iload_1
      14: ifeq          23
      17: getstatic     #34                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.END:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      20: goto          26
      23: getstatic     #29                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.IMMEDIATE:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      26: invokespecial #666                // Method reactor/core/publisher/FluxMergeSequential."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;IILreactor/core/publisher/FluxConcatMap$ErrorMode;)V
      29: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      32: areturn

  static <I> reactor.core.publisher.Flux<I> mergeSequential(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>, boolean, int, int);
    Code:
       0: new           #665                // class reactor/core/publisher/FluxMergeSequential
       3: dup
       4: new           #64                 // class reactor/core/publisher/FluxIterable
       7: dup
       8: aload_0
       9: invokespecial #65                 // Method reactor/core/publisher/FluxIterable."<init>":(Ljava/lang/Iterable;)V
      12: invokestatic  #28                 // Method identityFunction:()Ljava/util/function/Function;
      15: iload_2
      16: iload_3
      17: iload_1
      18: ifeq          27
      21: getstatic     #34                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.END:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      24: goto          30
      27: getstatic     #29                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.IMMEDIATE:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      30: invokespecial #666                // Method reactor/core/publisher/FluxMergeSequential."<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;IILreactor/core/publisher/FluxConcatMap$ErrorMode;)V
      33: invokestatic  #10                 // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      36: areturn

  static java.util.function.BooleanSupplier countingBooleanSupplier(java.util.function.BooleanSupplier, long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifgt          8
       6: aload_0
       7: areturn
       8: new           #672                // class reactor/core/publisher/Flux$2
      11: dup
      12: lload_1
      13: aload_0
      14: invokespecial #673                // Method reactor/core/publisher/Flux$2."<init>":(JLjava/util/function/BooleanSupplier;)V
      17: areturn

  static <O> java.util.function.Predicate<O> countingPredicate(java.util.function.Predicate<O>, long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifne          8
       6: aload_0
       7: areturn
       8: new           #674                // class reactor/core/publisher/Flux$3
      11: dup
      12: lload_1
      13: aload_0
      14: invokespecial #675                // Method reactor/core/publisher/Flux$3."<init>":(JLjava/util/function/Predicate;)V
      17: areturn

  static <O> java.util.function.Supplier<java.util.Set<O>> hashSetSupplier();
    Code:
       0: getstatic     #676                // Field SET_SUPPLIER:Ljava/util/function/Supplier;
       3: areturn

  static <O> java.util.function.Supplier<java.util.List<O>> listSupplier();
    Code:
       0: getstatic     #677                // Field LIST_SUPPLIER:Ljava/util/function/Supplier;
       3: areturn

  static <U, V> java.util.function.BiPredicate<U, V> equalPredicate();
    Code:
       0: getstatic     #678                // Field OBJECT_EQUAL:Ljava/util/function/BiPredicate;
       3: areturn

  static <T> java.util.function.Function<T, T> identityFunction();
    Code:
       0: getstatic     #679                // Field IDENTITY_FUNCTION:Ljava/util/function/Function;
       3: areturn

  static <A, B> java.util.function.BiFunction<A, B, reactor.util.function.Tuple2<A, B>> tuple2Function();
    Code:
       0: getstatic     #680                // Field TUPLE2_BIFUNCTION:Ljava/util/function/BiFunction;
       3: areturn

  static <I> reactor.core.publisher.Flux<I> wrap(org.reactivestreams.Publisher<? extends I>);
    Code:
       0: aload_0
       1: instanceof    #681                // class reactor/core/publisher/Mono
       4: ifeq          38
       7: aload_0
       8: instanceof    #5                  // class reactor/core/Fuseable
      11: ifeq          26
      14: new           #682                // class reactor/core/publisher/FluxSourceMonoFuseable
      17: dup
      18: aload_0
      19: checkcast     #681                // class reactor/core/publisher/Mono
      22: invokespecial #683                // Method reactor/core/publisher/FluxSourceMonoFuseable."<init>":(Lreactor/core/publisher/Mono;)V
      25: areturn
      26: new           #684                // class reactor/core/publisher/FluxSourceMono
      29: dup
      30: aload_0
      31: checkcast     #681                // class reactor/core/publisher/Mono
      34: invokespecial #685                // Method reactor/core/publisher/FluxSourceMono."<init>":(Lreactor/core/publisher/Mono;)V
      37: areturn
      38: aload_0
      39: instanceof    #5                  // class reactor/core/Fuseable
      42: ifeq          54
      45: new           #686                // class reactor/core/publisher/FluxSourceFuseable
      48: dup
      49: aload_0
      50: invokespecial #687                // Method reactor/core/publisher/FluxSourceFuseable."<init>":(Lorg/reactivestreams/Publisher;)V
      53: areturn
      54: new           #688                // class reactor/core/publisher/FluxSource
      57: dup
      58: aload_0
      59: invokespecial #689                // Method reactor/core/publisher/FluxSource."<init>":(Lorg/reactivestreams/Publisher;)V
      62: areturn

  private static boolean lambda$static$41();
    Code:
       0: iconst_1
       1: ireturn

  private static java.lang.Object lambda$zipWith$40(java.util.function.BiFunction, java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aaload
       4: aload_1
       5: iconst_1
       6: aaload
       7: invokeinterface #690,  3          // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      12: areturn

  private static org.reactivestreams.Publisher lambda$window$39(java.time.Duration, reactor.core.scheduler.Scheduler, java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #261                // Method reactor/core/publisher/Mono.delay:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       5: areturn

  private static reactor.util.function.Tuple2 lambda$timestamp$38(reactor.core.scheduler.Scheduler, java.lang.Object);
    Code:
       0: aload_0
       1: getstatic     #81                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       4: invokeinterface #691,  2          // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
       9: invokestatic  #603                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      12: aload_1
      13: invokestatic  #692                // Method reactor/util/function/Tuples.of:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      16: areturn

  private static org.reactivestreams.Publisher lambda$timeout$37(java.lang.Object);
    Code:
       0: invokestatic  #693                // Method never:()Lreactor/core/publisher/Flux;
       3: areturn

  private static org.reactivestreams.Publisher lambda$timeout$36(reactor.core.publisher.Mono, java.lang.Object);
    Code:
       0: aload_0
       1: areturn

  private static reactor.util.context.Context lambda$subscriberContext$35(reactor.util.context.Context, reactor.util.context.Context);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #694,  2          // InterfaceMethod reactor/util/context/Context.putAll:(Lreactor/util/context/Context;)Lreactor/util/context/Context;
       7: areturn

  private static java.lang.Object lambda$scan$34(java.lang.Object);
    Code:
       0: aload_0
       1: areturn

  private static org.reactivestreams.Publisher lambda$sampleFirst$33(java.time.Duration, java.lang.Object);
    Code:
       0: aload_0
       1: invokestatic  #695                // Method reactor/core/publisher/Mono.delay:(Ljava/time/Duration;)Lreactor/core/publisher/Mono;
       4: areturn

  private org.reactivestreams.Publisher lambda$retry$32(java.util.function.Predicate, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: invokestatic  #696                // Method countingPredicate:(Ljava/util/function/Predicate;J)Ljava/util/function/Predicate;
       6: invokevirtual #697                // Method retry:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Flux;
       9: areturn

  private org.reactivestreams.Publisher lambda$repeat$31(java.util.function.BooleanSupplier, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: invokestatic  #698                // Method countingBooleanSupplier:(Ljava/util/function/BooleanSupplier;J)Ljava/util/function/BooleanSupplier;
       6: invokevirtual #483                // Method repeat:(Ljava/util/function/BooleanSupplier;)Lreactor/core/publisher/Flux;
       9: areturn

  private static java.lang.Object lambda$reduce$30(java.lang.Object);
    Code:
       0: aload_0
       1: areturn

  private static org.reactivestreams.Publisher lambda$onErrorReturn$29(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: invokestatic  #58                 // Method just:(Ljava/lang/Object;)Lreactor/core/publisher/Flux;
       4: areturn

  private static org.reactivestreams.Publisher lambda$onErrorReturn$28(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: invokestatic  #58                 // Method just:(Ljava/lang/Object;)Lreactor/core/publisher/Flux;
       4: areturn

  private static org.reactivestreams.Publisher lambda$onErrorReturn$27(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: invokestatic  #58                 // Method just:(Ljava/lang/Object;)Lreactor/core/publisher/Flux;
       4: areturn

  private static org.reactivestreams.Publisher lambda$onErrorResume$26(java.util.function.Predicate, java.util.function.Function, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #699,  2          // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
       7: ifeq          23
      10: aload_1
      11: aload_2
      12: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #18                 // class org/reactivestreams/Publisher
      20: goto          27
      23: aload_2
      24: invokestatic  #60                 // Method error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Flux;
      27: areturn

  private static org.reactivestreams.Publisher lambda$onErrorMap$25(java.util.function.Function, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #700                // class java/lang/Throwable
      10: invokestatic  #212                // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      13: areturn

  private static org.reactivestreams.Publisher lambda$onErrorMap$24(java.util.function.Function, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #700                // class java/lang/Throwable
      10: invokestatic  #212                // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      13: areturn

  private static void lambda$onBackpressureError$23(java.lang.Object);
    Code:
       0: invokestatic  #701                // Method reactor/core/Exceptions.failWithOverflow:()Ljava/lang/IllegalStateException;
       3: athrow

  private static boolean lambda$ofType$22(java.lang.Class, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #190                // Method java/lang/Object.getClass:()Ljava/lang/Class;
       5: invokevirtual #702                // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
       8: ireturn

  private static reactor.util.Logger lambda$log$21(reactor.util.Logger, java.lang.String);
    Code:
       0: aload_0
       1: areturn

  private static boolean lambda$hasElement$20(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #703                // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
       5: ireturn

  private static void lambda$doOnTerminate$19(java.lang.Runnable, java.lang.Throwable);
    Code:
       0: aload_0
       1: invokeinterface #704,  1          // InterfaceMethod java/lang/Runnable.run:()V
       6: return

  private static void lambda$doOnError$18(java.util.function.Predicate, java.util.function.Consumer, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #699,  2          // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
       7: ifeq          17
      10: aload_1
      11: aload_2
      12: invokeinterface #705,  2          // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      17: return

  private static org.reactivestreams.Publisher lambda$delayUntil$17(java.util.function.Function, java.lang.Object);
    Code:
       0: aload_1
       1: invokestatic  #215                // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       4: aload_0
       5: invokevirtual #706                // Method reactor/core/publisher/Mono.delayUntil:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
       8: areturn

  private static org.reactivestreams.Publisher lambda$delayElements$16(java.time.Duration, reactor.core.scheduler.Scheduler, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #261                // Method reactor/core/publisher/Mono.delay:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       5: areturn

  private org.reactivestreams.Publisher lambda$compose$15(java.util.function.Function);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #18                 // class org/reactivestreams/Publisher
      10: areturn

  private static java.util.List lambda$collectSortedList$14(java.util.Comparator, java.util.List);
    Code:
       0: aload_0
       1: ifnull        14
       4: aload_1
       5: aload_0
       6: invokeinterface #707,  2          // InterfaceMethod java/util/List.sort:(Ljava/util/Comparator;)V
      11: goto          20
      14: aload_1
      15: astore_2
      16: aload_2
      17: invokestatic  #708                // Method java/util/Collections.sort:(Ljava/util/List;)V
      20: aload_1
      21: areturn

  private static void lambda$collectMultimap$13(java.util.function.Function, java.util.function.Function, java.util.Map, java.lang.Object);
    Code:
       0: aload_0
       1: aload_3
       2: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: astore        4
       9: aload_2
      10: aload         4
      12: invokedynamic #709,  0            // InvokeDynamic #45:apply:()Ljava/util/function/Function;
      17: invokeinterface #710,  3          // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      22: checkcast     #711                // class java/util/Collection
      25: astore        5
      27: aload         5
      29: aload_1
      30: aload_3
      31: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      36: invokeinterface #712,  2          // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      41: pop
      42: return

  private static java.util.Collection lambda$null$12(java.lang.Object);
    Code:
       0: new           #713                // class java/util/ArrayList
       3: dup
       4: invokespecial #714                // Method java/util/ArrayList."<init>":()V
       7: areturn

  private static java.util.Map lambda$collectMultimap$11();
    Code:
       0: new           #715                // class java/util/HashMap
       3: dup
       4: invokespecial #716                // Method java/util/HashMap."<init>":()V
       7: areturn

  private static void lambda$collectMap$10(java.util.function.Function, java.util.function.Function, java.util.Map, java.lang.Object);
    Code:
       0: aload_2
       1: aload_0
       2: aload_3
       3: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       8: aload_1
       9: aload_3
      10: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      15: invokeinterface #717,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      20: pop
      21: return

  private static java.util.Map lambda$collectMap$9();
    Code:
       0: new           #715                // class java/util/HashMap
       3: dup
       4: invokespecial #716                // Method java/util/HashMap."<init>":()V
       7: areturn

  private static java.util.List lambda$collectList$8(java.lang.Object);
    Code:
       0: invokestatic  #135                // Method listSupplier:()Ljava/util/function/Supplier;
       3: invokeinterface #202,  1          // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       8: checkcast     #718                // class java/util/List
      11: astore_1
      12: aload_1
      13: aload_0
      14: invokeinterface #719,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      19: pop
      20: aload_1
      21: areturn

  private static java.util.List lambda$collectList$7(java.lang.Object);
    Code:
       0: invokestatic  #135                // Method listSupplier:()Ljava/util/function/Supplier;
       3: invokeinterface #202,  1          // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       8: checkcast     #718                // class java/util/List
      11: astore_1
      12: aload_1
      13: aload_0
      14: invokeinterface #719,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      19: pop
      20: aload_1
      21: areturn

  private static org.reactivestreams.Publisher lambda$buffer$6(java.time.Duration, reactor.core.scheduler.Scheduler, java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #261                // Method reactor/core/publisher/Mono.delay:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       5: areturn

  private static java.lang.Object lambda$zip$5(java.util.function.Function, java.lang.Object);
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #720                // class java/lang/Object
       5: dup
       6: iconst_0
       7: aload_1
       8: aastore
       9: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      14: areturn

  private static java.lang.Object lambda$zip$4(java.util.function.Function, java.lang.Object);
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #720                // class java/lang/Object
       5: dup
       6: iconst_0
       7: aload_1
       8: aastore
       9: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      14: areturn

  private static java.util.stream.Stream lambda$fromStream$3(java.util.stream.Stream);
    Code:
       0: aload_0
       1: areturn

  private static java.lang.Object lambda$combineLatest$2(java.util.function.BiFunction, java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aaload
       4: aload_1
       5: iconst_1
       6: aaload
       7: invokeinterface #690,  3          // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      12: areturn

  private static java.lang.Object lambda$combineLatest$1(java.util.function.Function, java.lang.Object);
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #720                // class java/lang/Object
       5: dup
       6: iconst_0
       7: aload_1
       8: aastore
       9: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      14: areturn

  private static java.lang.Object lambda$combineLatest$0(java.util.function.Function, java.lang.Object);
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #720                // class java/lang/Object
       5: dup
       6: iconst_0
       7: aload_1
       8: aastore
       9: invokeinterface #145,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      14: areturn

  static {};
    Code:
       0: invokedynamic #721,  0            // InvokeDynamic #46:apply:()Ljava/util/function/BiFunction;
       5: putstatic     #680                // Field TUPLE2_BIFUNCTION:Ljava/util/function/BiFunction;
       8: invokedynamic #722,  0            // InvokeDynamic #47:get:()Ljava/util/function/Supplier;
      13: putstatic     #677                // Field LIST_SUPPLIER:Ljava/util/function/Supplier;
      16: invokedynamic #723,  0            // InvokeDynamic #48:get:()Ljava/util/function/Supplier;
      21: putstatic     #676                // Field SET_SUPPLIER:Ljava/util/function/Supplier;
      24: invokedynamic #724,  0            // InvokeDynamic #49:getAsBoolean:()Ljava/util/function/BooleanSupplier;
      29: putstatic     #482                // Field ALWAYS_BOOLEAN_SUPPLIER:Ljava/util/function/BooleanSupplier;
      32: invokedynamic #725,  0            // InvokeDynamic #50:test:()Ljava/util/function/BiPredicate;
      37: putstatic     #678                // Field OBJECT_EQUAL:Ljava/util/function/BiPredicate;
      40: invokestatic  #726                // InterfaceMethod java/util/function/Function.identity:()Ljava/util/function/Function;
      43: putstatic     #679                // Field IDENTITY_FUNCTION:Ljava/util/function/Function;
      46: return
}
