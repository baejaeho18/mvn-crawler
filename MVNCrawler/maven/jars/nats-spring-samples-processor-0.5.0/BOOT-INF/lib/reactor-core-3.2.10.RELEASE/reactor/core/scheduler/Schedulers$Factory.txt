Compiled from "Schedulers.java"
public interface reactor.core.scheduler.Schedulers$Factory {
  public default java.util.concurrent.ScheduledExecutorService decorateExecutorService(java.lang.String, java.util.function.Supplier<? extends java.util.concurrent.ScheduledExecutorService>);
    Code:
       0: aload_2
       1: invokeinterface #1,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       6: checkcast     #2                  // class java/util/concurrent/ScheduledExecutorService
       9: areturn

  public default reactor.core.scheduler.Scheduler newElastic(int, java.util.concurrent.ThreadFactory);
    Code:
       0: new           #3                  // class reactor/core/scheduler/ElasticScheduler
       3: dup
       4: aload_2
       5: iload_1
       6: invokespecial #4                  // Method reactor/core/scheduler/ElasticScheduler."<init>":(Ljava/util/concurrent/ThreadFactory;I)V
       9: areturn

  public default reactor.core.scheduler.Scheduler newParallel(int, java.util.concurrent.ThreadFactory);
    Code:
       0: new           #5                  // class reactor/core/scheduler/ParallelScheduler
       3: dup
       4: iload_1
       5: aload_2
       6: invokespecial #6                  // Method reactor/core/scheduler/ParallelScheduler."<init>":(ILjava/util/concurrent/ThreadFactory;)V
       9: areturn

  public default reactor.core.scheduler.Scheduler newSingle(java.util.concurrent.ThreadFactory);
    Code:
       0: new           #7                  // class reactor/core/scheduler/SingleScheduler
       3: dup
       4: aload_1
       5: invokespecial #8                  // Method reactor/core/scheduler/SingleScheduler."<init>":(Ljava/util/concurrent/ThreadFactory;)V
       8: areturn
}
