Compiled from "FluxAutoConnectFuseable.java"
final class reactor.core.publisher.FluxAutoConnectFuseable<T> extends reactor.core.publisher.Flux<T> implements reactor.core.Scannable, reactor.core.Fuseable {
  final reactor.core.publisher.ConnectableFlux<? extends T> source;

  final java.util.function.Consumer<? super reactor.core.Disposable> cancelSupport;

  volatile int remaining;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxAutoConnectFuseable> REMAINING;

  reactor.core.publisher.FluxAutoConnectFuseable(reactor.core.publisher.ConnectableFlux<? extends T>, int, java.util.function.Consumer<? super reactor.core.Disposable>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: iload_2
       5: ifgt          35
       8: new           #2                  // class java/lang/IllegalArgumentException
      11: dup
      12: new           #3                  // class java/lang/StringBuilder
      15: dup
      16: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #5                  // String n > required but it was
      21: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_2
      25: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: aload_1
      37: ldc           #10                 // String source
      39: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      42: checkcast     #12                 // class reactor/core/publisher/ConnectableFlux
      45: putfield      #13                 // Field source:Lreactor/core/publisher/ConnectableFlux;
      48: aload_0
      49: aload_3
      50: ldc           #14                 // String cancelSupport
      52: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      55: checkcast     #15                 // class java/util/function/Consumer
      58: putfield      #16                 // Field cancelSupport:Ljava/util/function/Consumer;
      61: getstatic     #17                 // Field REMAINING:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      64: aload_0
      65: iload_2
      66: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.lazySet:(Ljava/lang/Object;I)V
      69: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #13                 // Field source:Lreactor/core/publisher/ConnectableFlux;
       4: aload_1
       5: invokevirtual #19                 // Method reactor/core/publisher/ConnectableFlux.subscribe:(Lreactor/core/CoreSubscriber;)V
       8: aload_0
       9: getfield      #20                 // Field remaining:I
      12: ifle          36
      15: getstatic     #17                 // Field REMAINING:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      18: aload_0
      19: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      22: ifne          36
      25: aload_0
      26: getfield      #13                 // Field source:Lreactor/core/publisher/ConnectableFlux;
      29: aload_0
      30: getfield      #16                 // Field cancelSupport:Ljava/util/function/Consumer;
      33: invokevirtual #22                 // Method reactor/core/publisher/ConnectableFlux.connect:(Ljava/util/function/Consumer;)V
      36: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #13                 // Field source:Lreactor/core/publisher/ConnectableFlux;
       4: invokevirtual #23                 // Method reactor/core/publisher/ConnectableFlux.getPrefetch:()I
       7: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #24                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #25                 // Method getPrefetch:()I
      11: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: areturn
      15: aload_1
      16: getstatic     #27                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #13                 // Field source:Lreactor/core/publisher/ConnectableFlux;
      26: areturn
      27: aload_1
      28: getstatic     #28                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #20                 // Field remaining:I
      38: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      41: areturn
      42: aconst_null
      43: areturn

  static {};
    Code:
       0: ldc           #29                 // class reactor/core/publisher/FluxAutoConnectFuseable
       2: ldc           #30                 // String remaining
       4: invokestatic  #31                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #17                 // Field REMAINING:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
