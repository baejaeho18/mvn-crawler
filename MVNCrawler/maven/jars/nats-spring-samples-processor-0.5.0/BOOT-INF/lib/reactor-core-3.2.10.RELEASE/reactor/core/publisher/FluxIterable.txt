Compiled from "FluxIterable.java"
final class reactor.core.publisher.FluxIterable<T> extends reactor.core.publisher.Flux<T> implements reactor.core.Fuseable, reactor.core.publisher.SourceProducer<T> {
  final java.lang.Iterable<? extends T> iterable;

  private final java.lang.Runnable onClose;

  reactor.core.publisher.FluxIterable(java.lang.Iterable<? extends T>, java.lang.Runnable);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String iterable
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class java/lang/Iterable
      14: putfield      #5                  // Field iterable:Ljava/lang/Iterable;
      17: aload_0
      18: aload_2
      19: putfield      #6                  // Field onClose:Ljava/lang/Runnable;
      22: return

  reactor.core.publisher.FluxIterable(java.lang.Iterable<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #7                  // Method "<init>":(Ljava/lang/Iterable;Ljava/lang/Runnable;)V
       6: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field iterable:Ljava/lang/Iterable;
       4: invokeinterface #8,  1            // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: goto          29
      13: astore_3
      14: aload_1
      15: aload_3
      16: aload_1
      17: invokeinterface #10,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      22: invokestatic  #11                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      25: invokestatic  #12                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      28: return
      29: aload_1
      30: aload_2
      31: aload_0
      32: getfield      #6                  // Field onClose:Ljava/lang/Runnable;
      35: invokestatic  #13                 // Method subscribe:(Lreactor/core/CoreSubscriber;Ljava/util/Iterator;Ljava/lang/Runnable;)V
      38: return
    Exception table:
       from    to  target type
           0    10    13   Class java/lang/Throwable

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #14                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     57
       7: aload_0
       8: getfield      #5                  // Field iterable:Ljava/lang/Iterable;
      11: instanceof    #15                 // class java/util/Collection
      14: ifeq          33
      17: aload_0
      18: getfield      #5                  // Field iterable:Ljava/lang/Iterable;
      21: checkcast     #15                 // class java/util/Collection
      24: invokeinterface #16,  1           // InterfaceMethod java/util/Collection.size:()I
      29: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      32: areturn
      33: aload_0
      34: getfield      #5                  // Field iterable:Ljava/lang/Iterable;
      37: instanceof    #18                 // class reactor/util/function/Tuple2
      40: ifeq          57
      43: aload_0
      44: getfield      #5                  // Field iterable:Ljava/lang/Iterable;
      47: checkcast     #18                 // class reactor/util/function/Tuple2
      50: invokevirtual #19                 // Method reactor/util/function/Tuple2.size:()I
      53: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      56: areturn
      57: aconst_null
      58: areturn

  static <T> void subscribe(reactor.core.CoreSubscriber<? super T>, java.util.Iterator<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokestatic  #13                 // Method subscribe:(Lreactor/core/CoreSubscriber;Ljava/util/Iterator;Ljava/lang/Runnable;)V
       6: return

  static <T> void subscribe(reactor.core.CoreSubscriber<? super T>, java.util.Iterator<? extends T>, java.lang.Runnable);
    Code:
       0: aload_1
       1: ifnonnull     18
       4: aload_0
       5: new           #20                 // class java/lang/NullPointerException
       8: dup
       9: ldc           #21                 // String The iterator is null
      11: invokespecial #22                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      14: invokestatic  #12                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      17: return
      18: aload_1
      19: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: istore_3
      25: goto          72
      28: astore        4
      30: aload_0
      31: aload         4
      33: aload_0
      34: invokeinterface #10,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      39: invokestatic  #11                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      42: invokestatic  #12                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      45: aload_2
      46: ifnull        71
      49: aload_2
      50: invokeinterface #24,  1           // InterfaceMethod java/lang/Runnable.run:()V
      55: goto          71
      58: astore        5
      60: aload         5
      62: aload_0
      63: invokeinterface #10,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      68: invokestatic  #25                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      71: return
      72: iload_3
      73: ifne          107
      76: aload_0
      77: invokestatic  #26                 // Method reactor/core/publisher/Operators.complete:(Lorg/reactivestreams/Subscriber;)V
      80: aload_2
      81: ifnull        106
      84: aload_2
      85: invokeinterface #24,  1           // InterfaceMethod java/lang/Runnable.run:()V
      90: goto          106
      93: astore        4
      95: aload         4
      97: aload_0
      98: invokeinterface #10,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     103: invokestatic  #25                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
     106: return
     107: aload_0
     108: instanceof    #27                 // class reactor/core/Fuseable$ConditionalSubscriber
     111: ifeq          136
     114: aload_0
     115: new           #28                 // class reactor/core/publisher/FluxIterable$IterableSubscriptionConditional
     118: dup
     119: aload_0
     120: checkcast     #27                 // class reactor/core/Fuseable$ConditionalSubscriber
     123: aload_1
     124: aload_2
     125: invokespecial #29                 // Method reactor/core/publisher/FluxIterable$IterableSubscriptionConditional."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Ljava/util/Iterator;Ljava/lang/Runnable;)V
     128: invokeinterface #30,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     133: goto          152
     136: aload_0
     137: new           #31                 // class reactor/core/publisher/FluxIterable$IterableSubscription
     140: dup
     141: aload_0
     142: aload_1
     143: aload_2
     144: invokespecial #32                 // Method reactor/core/publisher/FluxIterable$IterableSubscription."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/Iterator;Ljava/lang/Runnable;)V
     147: invokeinterface #30,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     152: return
    Exception table:
       from    to  target type
          18    25    28   Class java/lang/Throwable
          49    55    58   Class java/lang/Throwable
          84    90    93   Class java/lang/Throwable
}
