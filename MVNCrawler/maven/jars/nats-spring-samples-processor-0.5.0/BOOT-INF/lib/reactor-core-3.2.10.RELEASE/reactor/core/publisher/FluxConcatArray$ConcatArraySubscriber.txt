Compiled from "FluxConcatArray.java"
final class reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber<T> extends reactor.core.publisher.Operators$MultiSubscriptionSubscriber<T, T> {
  final org.reactivestreams.Publisher<? extends T>[] sources;

  int index;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber> WIP;

  long produced;

  reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber(reactor.core.CoreSubscriber<? super T>, org.reactivestreams.Publisher<? extends T>[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/Operators$MultiSubscriptionSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field sources:[Lorg/reactivestreams/Publisher;
      10: return

  public void onNext(T);
    Code:
       0: aload_0
       1: dup
       2: getfield      #3                  // Field produced:J
       5: lconst_1
       6: ladd
       7: putfield      #3                  // Field produced:J
      10: aload_0
      11: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      14: aload_1
      15: invokeinterface #5,  2            // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      20: return

  public void onComplete();
    Code:
       0: getstatic     #6                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          150
      10: aload_0
      11: getfield      #2                  // Field sources:[Lorg/reactivestreams/Publisher;
      14: astore_1
      15: aload_0
      16: invokevirtual #8                  // Method isCancelled:()Z
      19: ifeq          23
      22: return
      23: aload_0
      24: getfield      #9                  // Field index:I
      27: istore_2
      28: iload_2
      29: aload_1
      30: arraylength
      31: if_icmpne     44
      34: aload_0
      35: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      38: invokeinterface #10,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      43: return
      44: aload_1
      45: iload_2
      46: aaload
      47: astore_3
      48: aload_3
      49: ifnonnull     93
      52: aload_0
      53: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      56: new           #11                 // class java/lang/NullPointerException
      59: dup
      60: new           #12                 // class java/lang/StringBuilder
      63: dup
      64: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      67: ldc           #14                 // String Source Publisher at index
      69: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: iload_2
      73: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      76: ldc           #17                 // String  is null
      78: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: invokevirtual #18                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      84: invokespecial #19                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      87: invokeinterface #20,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      92: return
      93: aload_0
      94: getfield      #3                  // Field produced:J
      97: lstore        4
      99: lload         4
     101: lconst_0
     102: lcmp
     103: ifeq          117
     106: aload_0
     107: lconst_0
     108: putfield      #3                  // Field produced:J
     111: aload_0
     112: lload         4
     114: invokevirtual #21                 // Method produced:(J)V
     117: aload_3
     118: aload_0
     119: invokeinterface #22,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     124: aload_0
     125: invokevirtual #8                  // Method isCancelled:()Z
     128: ifeq          132
     131: return
     132: aload_0
     133: iinc          2, 1
     136: iload_2
     137: putfield      #9                  // Field index:I
     140: getstatic     #6                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     143: aload_0
     144: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     147: ifne          15
     150: return

  static {};
    Code:
       0: ldc           #24                 // class reactor/core/publisher/FluxConcatArray$ConcatArraySubscriber
       2: ldc           #25                 // String wip
       4: invokestatic  #26                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #6                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
