Compiled from "FluxFirstEmitting.java"
final class reactor.core.publisher.FluxFirstEmitting$FirstEmittingSubscriber<T> extends reactor.core.publisher.Operators$DeferredSubscription implements reactor.core.publisher.InnerOperator<T, T> {
  final reactor.core.publisher.FluxFirstEmitting$RaceCoordinator<T> parent;

  final reactor.core.CoreSubscriber<? super T> actual;

  final int index;

  boolean won;

  reactor.core.publisher.FluxFirstEmitting$FirstEmittingSubscriber(reactor.core.CoreSubscriber<? super T>, reactor.core.publisher.FluxFirstEmitting$RaceCoordinator<T>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Operators$DeferredSubscription."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field parent:Lreactor/core/publisher/FluxFirstEmitting$RaceCoordinator;
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field index:I
      19: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #5                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #6                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #7                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     30
      19: aload_0
      20: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxFirstEmitting$RaceCoordinator;
      23: getfield      #8                  // Field reactor/core/publisher/FluxFirstEmitting$RaceCoordinator.cancelled:Z
      26: invokestatic  #9                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      29: areturn
      30: aload_0
      31: aload_1
      32: invokespecial #10                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      35: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #11                 // Method set:(Lorg/reactivestreams/Subscription;)Z
       5: pop
       6: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #12                 // Field won:Z
       4: ifeq          20
       7: aload_0
       8: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      11: aload_1
      12: invokeinterface #13,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      17: goto          49
      20: aload_0
      21: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxFirstEmitting$RaceCoordinator;
      24: aload_0
      25: getfield      #4                  // Field index:I
      28: invokevirtual #14                 // Method reactor/core/publisher/FluxFirstEmitting$RaceCoordinator.tryWin:(I)Z
      31: ifeq          49
      34: aload_0
      35: iconst_1
      36: putfield      #12                 // Field won:Z
      39: aload_0
      40: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      43: aload_1
      44: invokeinterface #13,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      49: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #12                 // Field won:Z
       4: ifeq          20
       7: aload_0
       8: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      11: aload_1
      12: invokeinterface #15,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      17: goto          49
      20: aload_0
      21: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxFirstEmitting$RaceCoordinator;
      24: aload_0
      25: getfield      #4                  // Field index:I
      28: invokevirtual #14                 // Method reactor/core/publisher/FluxFirstEmitting$RaceCoordinator.tryWin:(I)Z
      31: ifeq          49
      34: aload_0
      35: iconst_1
      36: putfield      #12                 // Field won:Z
      39: aload_0
      40: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      43: aload_1
      44: invokeinterface #15,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      49: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #12                 // Field won:Z
       4: ifeq          19
       7: aload_0
       8: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      11: invokeinterface #16,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      16: goto          47
      19: aload_0
      20: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxFirstEmitting$RaceCoordinator;
      23: aload_0
      24: getfield      #4                  // Field index:I
      27: invokevirtual #14                 // Method reactor/core/publisher/FluxFirstEmitting$RaceCoordinator.tryWin:(I)Z
      30: ifeq          47
      33: aload_0
      34: iconst_1
      35: putfield      #12                 // Field won:Z
      38: aload_0
      39: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      42: invokeinterface #16,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      47: return
}
