Compiled from "FluxSampleFirst.java"
final class reactor.core.publisher.FluxSampleFirst$SampleFirstMain<T, U> implements reactor.core.publisher.InnerOperator<T, T> {
  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<U>> throttler;

  final reactor.core.CoreSubscriber<? super T> actual;

  final reactor.util.context.Context ctx;

  volatile boolean gate;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSampleFirst$SampleFirstMain, org.reactivestreams.Subscription> S;

  volatile org.reactivestreams.Subscription other;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSampleFirst$SampleFirstMain, org.reactivestreams.Subscription> OTHER;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxSampleFirst$SampleFirstMain> REQUESTED;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxSampleFirst$SampleFirstMain> WIP;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSampleFirst$SampleFirstMain, java.lang.Throwable> ERROR;

  reactor.core.publisher.FluxSampleFirst$SampleFirstMain(reactor.core.CoreSubscriber<? super T>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<U>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_1
      11: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      16: putfield      #4                  // Field ctx:Lreactor/util/context/Context;
      19: aload_0
      20: aload_2
      21: putfield      #5                  // Field throttler:Ljava/util/function/Function;
      24: return

  public final reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #6                  // Field other:Lorg/reactivestreams/Subscription;
       4: invokestatic  #7                  // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
       7: invokestatic  #8                  // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
      10: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #9                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     26
       7: aload_0
       8: getfield      #10                 // Field s:Lorg/reactivestreams/Subscription;
      11: invokestatic  #11                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      14: if_acmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: invokestatic  #12                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      25: areturn
      26: aload_1
      27: getstatic     #13                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      30: if_acmpne     38
      33: aload_0
      34: getfield      #10                 // Field s:Lorg/reactivestreams/Subscription;
      37: areturn
      38: aload_1
      39: getstatic     #14                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      42: if_acmpne     50
      45: aload_0
      46: getfield      #15                 // Field error:Ljava/lang/Throwable;
      49: areturn
      50: aload_1
      51: getstatic     #16                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      54: if_acmpne     65
      57: aload_0
      58: getfield      #17                 // Field requested:J
      61: invokestatic  #18                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      64: areturn
      65: aload_0
      66: aload_1
      67: invokespecial #19                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      70: areturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #20                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          16
       7: getstatic     #21                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #22                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: return

  public void cancel();
    Code:
       0: getstatic     #23                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #24                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: getstatic     #25                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      11: aload_0
      12: invokestatic  #24                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      15: pop
      16: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #23                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #26                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          20
      11: aload_1
      12: ldc2_w        #28                 // long 9223372036854775807l
      15: invokeinterface #30,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      20: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #31                 // Field gate:Z
       4: ifne          133
       7: aload_0
       8: iconst_1
       9: putfield      #31                 // Field gate:Z
      12: aload_0
      13: getfield      #32                 // Field wip:I
      16: ifne          56
      19: getstatic     #33                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: aload_0
      23: iconst_0
      24: iconst_1
      25: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      28: ifeq          56
      31: aload_0
      32: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      35: aload_1
      36: invokeinterface #35,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      41: getstatic     #33                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      44: aload_0
      45: invokevirtual #36                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      48: ifeq          57
      51: aload_0
      52: invokevirtual #37                 // Method handleTermination:()V
      55: return
      56: return
      57: aload_0
      58: getfield      #5                  // Field throttler:Ljava/util/function/Function;
      61: aload_1
      62: invokeinterface #38,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      67: ldc           #39                 // String The throttler returned a null publisher
      69: invokestatic  #40                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      72: checkcast     #41                 // class org/reactivestreams/Publisher
      75: astore_2
      76: goto          103
      79: astore_3
      80: getstatic     #23                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      83: aload_0
      84: invokestatic  #24                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      87: pop
      88: aload_0
      89: aconst_null
      90: aload_3
      91: aload_1
      92: aload_0
      93: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      96: invokestatic  #43                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      99: invokevirtual #44                 // Method error:(Ljava/lang/Throwable;)V
     102: return
     103: new           #45                 // class reactor/core/publisher/FluxSampleFirst$SampleFirstOther
     106: dup
     107: aload_0
     108: invokespecial #46                 // Method reactor/core/publisher/FluxSampleFirst$SampleFirstOther."<init>":(Lreactor/core/publisher/FluxSampleFirst$SampleFirstMain;)V
     111: astore_3
     112: getstatic     #25                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     115: aload_0
     116: aload_3
     117: invokestatic  #47                 // Method reactor/core/publisher/Operators.replace:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
     120: ifeq          130
     123: aload_2
     124: aload_3
     125: invokeinterface #48,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     130: goto          141
     133: aload_1
     134: aload_0
     135: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     138: invokestatic  #49                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
     141: return
    Exception table:
       from    to  target type
          57    76    79   Class java/lang/Throwable

  void handleTermination();
    Code:
       0: getstatic     #50                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #51                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
       7: astore_1
       8: aload_1
       9: ifnull        32
      12: aload_1
      13: getstatic     #52                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      16: if_acmpeq     32
      19: aload_0
      20: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      23: aload_1
      24: invokeinterface #53,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      29: goto          41
      32: aload_0
      33: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      36: invokeinterface #54,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      41: return

  void error(java.lang.Throwable);
    Code:
       0: getstatic     #50                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #55                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          28
      11: getstatic     #33                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      14: aload_0
      15: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      18: ifne          36
      21: aload_0
      22: invokevirtual #37                 // Method handleTermination:()V
      25: goto          36
      28: aload_1
      29: aload_0
      30: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      33: invokestatic  #57                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      36: return

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #25                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #24                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: aload_0
       9: aload_1
      10: invokevirtual #44                 // Method error:(Ljava/lang/Throwable;)V
      13: return

  public void onComplete();
    Code:
       0: getstatic     #25                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #24                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: getstatic     #33                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      11: aload_0
      12: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      15: ifne          22
      18: aload_0
      19: invokevirtual #37                 // Method handleTermination:()V
      22: return

  void otherNext();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #31                 // Field gate:Z
       5: return

  void otherError(java.lang.Throwable);
    Code:
       0: getstatic     #23                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #24                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: aload_0
       9: aload_1
      10: invokevirtual #44                 // Method error:(Ljava/lang/Throwable;)V
      13: return

  static {};
    Code:
       0: ldc           #58                 // class reactor/core/publisher/FluxSampleFirst$SampleFirstMain
       2: ldc           #59                 // class org/reactivestreams/Subscription
       4: ldc           #60                 // String s
       6: invokestatic  #61                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #23                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #58                 // class reactor/core/publisher/FluxSampleFirst$SampleFirstMain
      14: ldc           #59                 // class org/reactivestreams/Subscription
      16: ldc           #62                 // String other
      18: invokestatic  #61                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      21: putstatic     #25                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      24: ldc           #58                 // class reactor/core/publisher/FluxSampleFirst$SampleFirstMain
      26: ldc           #63                 // String requested
      28: invokestatic  #64                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      31: putstatic     #21                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      34: ldc           #58                 // class reactor/core/publisher/FluxSampleFirst$SampleFirstMain
      36: ldc           #65                 // String wip
      38: invokestatic  #66                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      41: putstatic     #33                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      44: ldc           #58                 // class reactor/core/publisher/FluxSampleFirst$SampleFirstMain
      46: ldc           #42                 // class java/lang/Throwable
      48: ldc           #67                 // String error
      50: invokestatic  #61                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      53: putstatic     #50                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      56: return
}
