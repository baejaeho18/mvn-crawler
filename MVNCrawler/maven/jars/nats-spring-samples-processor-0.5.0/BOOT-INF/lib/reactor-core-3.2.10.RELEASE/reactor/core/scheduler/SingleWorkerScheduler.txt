Compiled from "SingleWorkerScheduler.java"
final class reactor.core.scheduler.SingleWorkerScheduler implements reactor.core.scheduler.Scheduler,java.util.concurrent.Executor,reactor.core.Scannable {
  final reactor.core.scheduler.Scheduler$Worker main;

  reactor.core.scheduler.SingleWorkerScheduler(reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokeinterface #2,  1            // InterfaceMethod reactor/core/scheduler/Scheduler.createWorker:()Lreactor/core/scheduler/Scheduler$Worker;
      11: putfield      #3                  // Field main:Lreactor/core/scheduler/Scheduler$Worker;
      14: return

  public void dispose();
    Code:
       0: aload_0
       1: getfield      #3                  // Field main:Lreactor/core/scheduler/Scheduler$Worker;
       4: invokeinterface #4,  1            // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
       9: return

  public reactor.core.Disposable schedule(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #3                  // Field main:Lreactor/core/scheduler/Scheduler$Worker;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedule:(Ljava/lang/Runnable;)Lreactor/core/Disposable;
      10: areturn

  public reactor.core.Disposable schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #3                  // Field main:Lreactor/core/scheduler/Scheduler$Worker;
       4: aload_1
       5: lload_2
       6: aload         4
       8: invokeinterface #6,  5            // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      13: areturn

  public reactor.core.Disposable schedulePeriodically(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #3                  // Field main:Lreactor/core/scheduler/Scheduler$Worker;
       4: aload_1
       5: lload_2
       6: lload         4
       8: aload         6
      10: invokeinterface #7,  7            // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      15: areturn

  public void execute(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #3                  // Field main:Lreactor/core/scheduler/Scheduler$Worker;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedule:(Ljava/lang/Runnable;)Lreactor/core/Disposable;
      10: pop
      11: return

  public reactor.core.scheduler.Scheduler$Worker createWorker();
    Code:
       0: new           #8                  // class reactor/core/scheduler/ExecutorScheduler$ExecutorSchedulerWorker
       3: dup
       4: aload_0
       5: invokespecial #9                  // Method reactor/core/scheduler/ExecutorScheduler$ExecutorSchedulerWorker."<init>":(Ljava/util/concurrent/Executor;)V
       8: areturn

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #3                  // Field main:Lreactor/core/scheduler/Scheduler$Worker;
       4: invokeinterface #10,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.isDisposed:()Z
       9: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #3                  // Field main:Lreactor/core/scheduler/Scheduler$Worker;
       4: invokestatic  #11                 // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
       7: astore_1
       8: aload_1
       9: invokeinterface #12,  1           // InterfaceMethod reactor/core/Scannable.isScanAvailable:()Z
      14: ifeq          50
      17: new           #13                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      24: ldc           #16                 // String singleWorker(
      26: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_1
      30: getstatic     #18                 // Field reactor/core/Scannable$Attr.NAME:Lreactor/core/Scannable$Attr;
      33: invokeinterface #19,  2           // InterfaceMethod reactor/core/Scannable.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      38: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      41: ldc           #21                 // String )
      43: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: areturn
      50: new           #13                 // class java/lang/StringBuilder
      53: dup
      54: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      57: ldc           #16                 // String singleWorker(
      59: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: aload_0
      63: getfield      #3                  // Field main:Lreactor/core/scheduler/Scheduler$Worker;
      66: invokevirtual #23                 // Method java/lang/Object.toString:()Ljava/lang/String;
      69: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: ldc           #21                 // String )
      74: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      80: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #24                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpeq     14
       7: aload_1
       8: getstatic     #25                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      11: if_acmpne     22
      14: aload_0
      15: invokevirtual #26                 // Method isDisposed:()Z
      18: invokestatic  #27                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      21: areturn
      22: aload_1
      23: getstatic     #28                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      26: if_acmpne     34
      29: aload_0
      30: getfield      #3                  // Field main:Lreactor/core/scheduler/Scheduler$Worker;
      33: areturn
      34: aload_1
      35: getstatic     #18                 // Field reactor/core/Scannable$Attr.NAME:Lreactor/core/Scannable$Attr;
      38: if_acmpne     46
      41: aload_0
      42: invokevirtual #29                 // Method toString:()Ljava/lang/String;
      45: areturn
      46: aload_0
      47: getfield      #3                  // Field main:Lreactor/core/scheduler/Scheduler$Worker;
      50: invokestatic  #11                 // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
      53: aload_1
      54: invokeinterface #19,  2           // InterfaceMethod reactor/core/Scannable.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      59: areturn
}
