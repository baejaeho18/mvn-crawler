Compiled from "FluxRetryPredicate.java"
final class reactor.core.publisher.FluxRetryPredicate$RetryPredicateSubscriber<T> extends reactor.core.publisher.Operators$MultiSubscriptionSubscriber<T, T> {
  final org.reactivestreams.Publisher<? extends T> source;

  final java.util.function.Predicate<? super java.lang.Throwable> predicate;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxRetryPredicate$RetryPredicateSubscriber> WIP;

  long produced;

  reactor.core.publisher.FluxRetryPredicate$RetryPredicateSubscriber(org.reactivestreams.Publisher<? extends T>, reactor.core.CoreSubscriber<? super T>, java.util.function.Predicate<? super java.lang.Throwable>);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #1                  // Method reactor/core/publisher/Operators$MultiSubscriptionSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
       5: aload_0
       6: aload_1
       7: putfield      #2                  // Field source:Lorg/reactivestreams/Publisher;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field predicate:Ljava/util/function/Predicate;
      15: return

  public void onNext(T);
    Code:
       0: aload_0
       1: dup
       2: getfield      #4                  // Field produced:J
       5: lconst_1
       6: ladd
       7: putfield      #4                  // Field produced:J
      10: aload_0
      11: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      14: aload_1
      15: invokeinterface #6,  2            // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      20: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #3                  // Field predicate:Ljava/util/function/Predicate;
       4: aload_1
       5: invokeinterface #7,  2            // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
      10: istore_2
      11: goto          50
      14: astore_3
      15: aload_3
      16: aload_0
      17: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      20: invokeinterface #9,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      25: invokestatic  #10                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      28: astore        4
      30: aload         4
      32: aload_1
      33: invokestatic  #11                 // Method reactor/core/Exceptions.addSuppressed:(Ljava/lang/Throwable;Ljava/lang/Throwable;)Ljava/lang/Throwable;
      36: astore        4
      38: aload_0
      39: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      42: aload         4
      44: invokeinterface #12,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      49: return
      50: iload_2
      51: ifeq          61
      54: aload_0
      55: invokevirtual #13                 // Method resubscribe:()V
      58: goto          71
      61: aload_0
      62: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
      65: aload_1
      66: invokeinterface #12,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      71: return
    Exception table:
       from    to  target type
           0    11    14   Class java/lang/Throwable

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #5                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #14,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
       9: return

  void resubscribe();
    Code:
       0: getstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          59
      10: aload_0
      11: invokevirtual #17                 // Method isCancelled:()Z
      14: ifeq          18
      17: return
      18: aload_0
      19: getfield      #4                  // Field produced:J
      22: lstore_1
      23: lload_1
      24: lconst_0
      25: lcmp
      26: ifeq          39
      29: aload_0
      30: lconst_0
      31: putfield      #4                  // Field produced:J
      34: aload_0
      35: lload_1
      36: invokevirtual #18                 // Method produced:(J)V
      39: aload_0
      40: getfield      #2                  // Field source:Lorg/reactivestreams/Publisher;
      43: aload_0
      44: invokeinterface #19,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      49: getstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      52: aload_0
      53: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      56: ifne          10
      59: return

  static {};
    Code:
       0: ldc           #21                 // class reactor/core/publisher/FluxRetryPredicate$RetryPredicateSubscriber
       2: ldc           #22                 // String wip
       4: invokestatic  #23                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
