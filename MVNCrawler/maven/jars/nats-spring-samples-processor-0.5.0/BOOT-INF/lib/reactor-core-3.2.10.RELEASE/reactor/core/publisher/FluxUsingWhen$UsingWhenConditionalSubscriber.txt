Compiled from "FluxUsingWhen.java"
final class reactor.core.publisher.FluxUsingWhen$UsingWhenConditionalSubscriber<T, S> extends reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber<T, S> implements reactor.core.Fuseable$ConditionalSubscriber<T> {
  final reactor.core.Fuseable$ConditionalSubscriber<? super T> actual;

  reactor.core.publisher.FluxUsingWhen$UsingWhenConditionalSubscriber(reactor.core.Fuseable$ConditionalSubscriber<? super T>, S, java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<?>>, reactor.core.publisher.Operators$DeferredSubscription);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokespecial #1                  // Method reactor/core/publisher/FluxUsingWhen$UsingWhenSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/lang/Object;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Lreactor/core/publisher/Operators$DeferredSubscription;)V
      13: aload_0
      14: aload_1
      15: putfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      18: return

  public boolean tryOnNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
       4: aload_1
       5: invokeinterface #3,  2            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.tryOnNext:(Ljava/lang/Object;)Z
      10: ireturn
}
