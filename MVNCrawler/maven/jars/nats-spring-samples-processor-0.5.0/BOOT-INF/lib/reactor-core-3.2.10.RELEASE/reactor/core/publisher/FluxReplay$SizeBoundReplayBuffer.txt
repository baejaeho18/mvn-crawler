Compiled from "FluxReplay.java"
final class reactor.core.publisher.FluxReplay$SizeBoundReplayBuffer<T> implements reactor.core.publisher.FluxReplay$ReplayBuffer<T> {
  final int limit;

  volatile reactor.core.publisher.FluxReplay$SizeBoundReplayBuffer$Node<T> head;

  reactor.core.publisher.FluxReplay$SizeBoundReplayBuffer$Node<T> tail;

  int size;

  volatile boolean done;

  java.lang.Throwable error;

  reactor.core.publisher.FluxReplay$SizeBoundReplayBuffer(int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: iload_1
       5: ifge          18
       8: new           #3                  // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #4                  // String Limit cannot be negative
      14: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: iload_1
      20: putfield      #6                  // Field limit:I
      23: new           #7                  // class reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node
      26: dup
      27: aconst_null
      28: invokespecial #8                  // Method reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node."<init>":(Ljava/lang/Object;)V
      31: astore_2
      32: aload_0
      33: aload_2
      34: putfield      #9                  // Field tail:Lreactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node;
      37: aload_0
      38: aload_2
      39: putfield      #10                 // Field head:Lreactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node;
      42: return

  public boolean isExpired();
    Code:
       0: iconst_0
       1: ireturn

  public int capacity();
    Code:
       0: aload_0
       1: getfield      #6                  // Field limit:I
       4: ireturn

  public void add(T);
    Code:
       0: new           #7                  // class reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node
       3: dup
       4: aload_1
       5: invokespecial #8                  // Method reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node."<init>":(Ljava/lang/Object;)V
       8: astore_2
       9: aload_0
      10: getfield      #9                  // Field tail:Lreactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node;
      13: aload_2
      14: invokevirtual #11                 // Method reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node.set:(Ljava/lang/Object;)V
      17: aload_0
      18: aload_2
      19: putfield      #9                  // Field tail:Lreactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node;
      22: aload_0
      23: getfield      #12                 // Field size:I
      26: istore_3
      27: iload_3
      28: aload_0
      29: getfield      #6                  // Field limit:I
      32: if_icmpne     52
      35: aload_0
      36: aload_0
      37: getfield      #10                 // Field head:Lreactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node;
      40: invokevirtual #13                 // Method reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node.get:()Ljava/lang/Object;
      43: checkcast     #7                  // class reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node
      46: putfield      #10                 // Field head:Lreactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node;
      49: goto          59
      52: aload_0
      53: iload_3
      54: iconst_1
      55: iadd
      56: putfield      #12                 // Field size:I
      59: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: iconst_1
       7: putfield      #15                 // Field done:Z
      10: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #15                 // Field done:Z
       5: return

  void replayNormal(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_1
       1: invokeinterface #16,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.actual:()Lreactor/core/CoreSubscriber;
       6: astore_2
       7: iconst_1
       8: istore_3
       9: aload_1
      10: invokeinterface #17,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.requested:()J
      15: lstore        4
      17: lconst_0
      18: lstore        6
      20: aload_1
      21: invokeinterface #18,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:()Ljava/lang/Object;
      26: checkcast     #7                  // class reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node
      29: astore        8
      31: aload         8
      33: ifnonnull     42
      36: aload_0
      37: getfield      #10                 // Field head:Lreactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node;
      40: astore        8
      42: lload         6
      44: lload         4
      46: lcmp
      47: ifeq          173
      50: aload_1
      51: invokeinterface #19,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.isCancelled:()Z
      56: ifeq          67
      59: aload_1
      60: aconst_null
      61: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
      66: return
      67: aload_0
      68: getfield      #15                 // Field done:Z
      71: istore        9
      73: aload         8
      75: invokevirtual #13                 // Method reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node.get:()Ljava/lang/Object;
      78: checkcast     #7                  // class reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node
      81: astore        10
      83: aload         10
      85: ifnonnull     92
      88: iconst_1
      89: goto          93
      92: iconst_0
      93: istore        11
      95: iload         9
      97: ifeq          141
     100: iload         11
     102: ifeq          141
     105: aload_1
     106: aconst_null
     107: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
     112: aload_0
     113: getfield      #14                 // Field error:Ljava/lang/Throwable;
     116: astore        12
     118: aload         12
     120: ifnull        134
     123: aload_2
     124: aload         12
     126: invokeinterface #21,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     131: goto          140
     134: aload_2
     135: invokeinterface #22,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     140: return
     141: iload         11
     143: ifeq          149
     146: goto          173
     149: aload_2
     150: aload         10
     152: getfield      #23                 // Field reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node.value:Ljava/lang/Object;
     155: invokeinterface #24,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     160: lload         6
     162: lconst_1
     163: ladd
     164: lstore        6
     166: aload         10
     168: astore        8
     170: goto          42
     173: lload         6
     175: lload         4
     177: lcmp
     178: ifne          265
     181: aload_1
     182: invokeinterface #19,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.isCancelled:()Z
     187: ifeq          198
     190: aload_1
     191: aconst_null
     192: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
     197: return
     198: aload_0
     199: getfield      #15                 // Field done:Z
     202: istore        9
     204: aload         8
     206: invokevirtual #13                 // Method reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node.get:()Ljava/lang/Object;
     209: ifnonnull     216
     212: iconst_1
     213: goto          217
     216: iconst_0
     217: istore        10
     219: iload         9
     221: ifeq          265
     224: iload         10
     226: ifeq          265
     229: aload_1
     230: aconst_null
     231: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
     236: aload_0
     237: getfield      #14                 // Field error:Ljava/lang/Throwable;
     240: astore        11
     242: aload         11
     244: ifnull        258
     247: aload_2
     248: aload         11
     250: invokeinterface #21,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     255: goto          264
     258: aload_2
     259: invokeinterface #22,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     264: return
     265: lload         6
     267: lconst_0
     268: lcmp
     269: ifeq          289
     272: lload         4
     274: ldc2_w        #26                 // long 9223372036854775807l
     277: lcmp
     278: ifeq          289
     281: aload_1
     282: lload         6
     284: invokeinterface #28,  3           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.produced:(J)V
     289: aload_1
     290: aload         8
     292: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
     297: aload_1
     298: iload_3
     299: invokeinterface #29,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.leave:(I)I
     304: istore_3
     305: iload_3
     306: ifne          312
     309: goto          315
     312: goto          9
     315: return

  void replayFused(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_1
       3: invokeinterface #16,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.actual:()Lreactor/core/CoreSubscriber;
       8: astore_3
       9: aload_1
      10: invokeinterface #19,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.isCancelled:()Z
      15: ifeq          26
      18: aload_1
      19: aconst_null
      20: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
      25: return
      26: aload_0
      27: getfield      #15                 // Field done:Z
      30: istore        4
      32: aload_3
      33: aconst_null
      34: invokeinterface #24,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      39: iload         4
      41: ifeq          73
      44: aload_0
      45: getfield      #14                 // Field error:Ljava/lang/Throwable;
      48: astore        5
      50: aload         5
      52: ifnull        66
      55: aload_3
      56: aload         5
      58: invokeinterface #21,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      63: goto          72
      66: aload_3
      67: invokeinterface #22,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      72: return
      73: aload_1
      74: iload_2
      75: invokeinterface #29,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.leave:(I)I
      80: istore_2
      81: iload_2
      82: ifne          88
      85: goto          91
      88: goto          9
      91: return

  public void replay(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_1
       1: invokeinterface #30,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.enter:()Z
       6: ifne          10
       9: return
      10: aload_1
      11: invokeinterface #31,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.fusionMode:()I
      16: ifne          27
      19: aload_0
      20: aload_1
      21: invokevirtual #32                 // Method replayNormal:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      24: goto          32
      27: aload_0
      28: aload_1
      29: invokevirtual #33                 // Method replayFused:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      32: return

  public java.lang.Throwable getError();
    Code:
       0: aload_0
       1: getfield      #14                 // Field error:Ljava/lang/Throwable;
       4: areturn

  public boolean isDone();
    Code:
       0: aload_0
       1: getfield      #15                 // Field done:Z
       4: ireturn

  public T poll(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_1
       1: invokeinterface #18,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:()Ljava/lang/Object;
       6: checkcast     #7                  // class reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node
       9: astore_2
      10: aload_2
      11: ifnonnull     26
      14: aload_0
      15: getfield      #10                 // Field head:Lreactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node;
      18: astore_2
      19: aload_1
      20: aload_2
      21: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
      26: aload_2
      27: invokevirtual #13                 // Method reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node.get:()Ljava/lang/Object;
      30: checkcast     #7                  // class reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node
      33: astore_3
      34: aload_3
      35: ifnonnull     40
      38: aconst_null
      39: areturn
      40: aload_1
      41: aload_3
      42: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
      47: aload_3
      48: getfield      #23                 // Field reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node.value:Ljava/lang/Object;
      51: areturn

  public void clear(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_1
       1: aconst_null
       2: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
       7: return

  public boolean isEmpty(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_1
       1: invokeinterface #18,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:()Ljava/lang/Object;
       6: checkcast     #7                  // class reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node
       9: astore_2
      10: aload_2
      11: ifnonnull     26
      14: aload_0
      15: getfield      #10                 // Field head:Lreactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node;
      18: astore_2
      19: aload_1
      20: aload_2
      21: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
      26: aload_2
      27: invokevirtual #13                 // Method reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node.get:()Ljava/lang/Object;
      30: ifnonnull     37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: ireturn

  public int size(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_1
       1: invokeinterface #18,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:()Ljava/lang/Object;
       6: checkcast     #7                  // class reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node
       9: astore_2
      10: aload_2
      11: ifnonnull     19
      14: aload_0
      15: getfield      #10                 // Field head:Lreactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node;
      18: astore_2
      19: iconst_0
      20: istore_3
      21: aload_2
      22: invokevirtual #13                 // Method reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node.get:()Ljava/lang/Object;
      25: checkcast     #7                  // class reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node
      28: dup
      29: astore        4
      31: ifnull        49
      34: iload_3
      35: ldc           #35                 // int 2147483647
      37: if_icmpeq     49
      40: iinc          3, 1
      43: aload         4
      45: astore_2
      46: goto          21
      49: iload_3
      50: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #10                 // Field head:Lreactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node;
       4: astore_1
       5: iconst_0
       6: istore_2
       7: aload_1
       8: invokevirtual #13                 // Method reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node.get:()Ljava/lang/Object;
      11: checkcast     #7                  // class reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer$Node
      14: dup
      15: astore_3
      16: ifnull        33
      19: iload_2
      20: ldc           #35                 // int 2147483647
      22: if_icmpeq     33
      25: iinc          2, 1
      28: aload_3
      29: astore_1
      30: goto          7
      33: iload_2
      34: ireturn
}
