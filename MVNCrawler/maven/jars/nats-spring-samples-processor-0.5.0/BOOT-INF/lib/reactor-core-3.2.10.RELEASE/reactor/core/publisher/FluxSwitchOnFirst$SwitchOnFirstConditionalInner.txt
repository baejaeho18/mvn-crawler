Compiled from "FluxSwitchOnFirst.java"
final class reactor.core.publisher.FluxSwitchOnFirst$SwitchOnFirstConditionalInner<T, R> extends reactor.core.publisher.FluxSwitchOnFirst$AbstractSwitchOnFirstInner<T, R> implements reactor.core.Fuseable$ConditionalSubscriber<T> {
  reactor.core.publisher.FluxSwitchOnFirst$SwitchOnFirstConditionalInner(reactor.core.Fuseable$ConditionalSubscriber<? super R>, java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>, reactor.core.publisher.Flux<T>, org.reactivestreams.Publisher<? extends R>>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #2                  // Method reactor/core/publisher/FluxSwitchOnFirst$AbstractSwitchOnFirstInner."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/BiFunction;)V
       6: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:I
       4: ifne          77
       7: getstatic     #4                  // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_0
      12: iconst_1
      13: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      16: ifeq          77
      19: aload_0
      20: getfield      #6                  // Field first:Ljava/lang/Object;
      23: ifnonnull     56
      26: aload_0
      27: getfield      #7                  // Field done:Z
      30: ifeq          56
      33: aload_0
      34: getfield      #8                  // Field throwable:Ljava/lang/Throwable;
      37: ifnull        51
      40: aload_1
      41: aload_0
      42: getfield      #8                  // Field throwable:Ljava/lang/Throwable;
      45: invokestatic  #9                  // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      48: goto          55
      51: aload_1
      52: invokestatic  #10                 // Method reactor/core/publisher/Operators.complete:(Lorg/reactivestreams/Subscriber;)V
      55: return
      56: getstatic     #11                 // Field INNER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      59: aload_0
      60: aload_1
      61: invokestatic  #12                 // Method reactor/core/publisher/Operators.toConditionalSubscriber:(Lreactor/core/CoreSubscriber;)Lreactor/core/Fuseable$ConditionalSubscriber;
      64: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      67: aload_1
      68: aload_0
      69: invokeinterface #14,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      74: goto          90
      77: aload_1
      78: new           #15                 // class java/lang/IllegalStateException
      81: dup
      82: ldc           #16                 // String FluxSwitchOnFirst allows only one Subscriber
      84: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      87: invokestatic  #9                  // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      90: return

  public boolean tryOnNext(T);
    Code:
       0: aload_0
       1: getfield      #7                  // Field done:Z
       4: ifeq          17
       7: aload_1
       8: aload_0
       9: invokevirtual #18                 // Method currentContext:()Lreactor/util/context/Context;
      12: invokestatic  #19                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      15: iconst_0
      16: ireturn
      17: aload_0
      18: getfield      #20                 // Field inner:Lreactor/core/CoreSubscriber;
      21: checkcast     #21                 // class reactor/core/Fuseable$ConditionalSubscriber
      24: astore_2
      25: aload_2
      26: ifnonnull     114
      29: aload_0
      30: getfield      #22                 // Field outer:Lreactor/core/CoreSubscriber;
      33: astore        4
      35: aload_0
      36: getfield      #23                 // Field transformer:Ljava/util/function/BiFunction;
      39: aload_1
      40: aload         4
      42: invokeinterface #24,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      47: invokestatic  #25                 // InterfaceMethod reactor/core/publisher/Signal.next:(Ljava/lang/Object;Lreactor/util/context/Context;)Lreactor/core/publisher/Signal;
      50: aload_0
      51: invokeinterface #26,  3           // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      56: ldc           #27                 // String The transformer returned a null value
      58: invokestatic  #28                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      61: checkcast     #29                 // class org/reactivestreams/Publisher
      64: astore_3
      65: goto          99
      68: astore        5
      70: aload_0
      71: iconst_1
      72: putfield      #7                  // Field done:Z
      75: aload         4
      77: aload_0
      78: getfield      #31                 // Field s:Lorg/reactivestreams/Subscription;
      81: aload         5
      83: aload_1
      84: aload         4
      86: invokeinterface #24,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      91: invokestatic  #32                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      94: invokestatic  #9                  // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      97: iconst_0
      98: ireturn
      99: aload_0
     100: aload_1
     101: putfield      #6                  // Field first:Ljava/lang/Object;
     104: aload_3
     105: aload         4
     107: invokeinterface #33,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     112: iconst_1
     113: ireturn
     114: aload_2
     115: aload_1
     116: invokeinterface #34,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.tryOnNext:(Ljava/lang/Object;)Z
     121: ireturn
    Exception table:
       from    to  target type
          35    65    68   Class java/lang/Throwable

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #35                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          61
       7: aload_0
       8: getfield      #6                  // Field first:Ljava/lang/Object;
      11: ifnull        51
      14: aload_0
      15: invokevirtual #36                 // Method drainRegular:()Z
      18: ifeq          51
      21: lload_1
      22: ldc2_w        #38                 // long 9223372036854775807l
      25: lcmp
      26: ifeq          51
      29: lload_1
      30: lconst_1
      31: lsub
      32: dup2
      33: lstore_1
      34: lconst_0
      35: lcmp
      36: ifle          50
      39: aload_0
      40: getfield      #31                 // Field s:Lorg/reactivestreams/Subscription;
      43: lload_1
      44: invokeinterface #40,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      49: return
      50: return
      51: aload_0
      52: getfield      #31                 // Field s:Lorg/reactivestreams/Subscription;
      55: lload_1
      56: invokeinterface #40,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      61: return

  void drain();
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method drainRegular:()Z
       4: pop
       5: return

  boolean drainRegular();
    Code:
       0: getstatic     #41                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #42                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          12
      10: iconst_0
      11: ireturn
      12: aload_0
      13: getfield      #6                  // Field first:Ljava/lang/Object;
      16: astore_1
      17: iconst_1
      18: istore_2
      19: iconst_0
      20: istore_3
      21: aload_0
      22: getfield      #20                 // Field inner:Lreactor/core/CoreSubscriber;
      25: checkcast     #21                 // class reactor/core/Fuseable$ConditionalSubscriber
      28: astore        4
      30: aload_1
      31: ifnull        70
      34: aload_0
      35: aconst_null
      36: putfield      #6                  // Field first:Ljava/lang/Object;
      39: aload_0
      40: getfield      #43                 // Field cancelled:Z
      43: ifeq          59
      46: aload_1
      47: aload         4
      49: invokeinterface #44,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      54: invokestatic  #45                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      57: iconst_0
      58: ireturn
      59: aload         4
      61: aload_1
      62: invokeinterface #34,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.tryOnNext:(Ljava/lang/Object;)Z
      67: istore_3
      68: aconst_null
      69: astore_1
      70: aload_0
      71: getfield      #43                 // Field cancelled:Z
      74: ifeq          79
      77: iconst_0
      78: ireturn
      79: aload_0
      80: getfield      #7                  // Field done:Z
      83: ifeq          118
      86: aload_0
      87: getfield      #8                  // Field throwable:Ljava/lang/Throwable;
      90: astore        5
      92: aload         5
      94: ifnull        109
      97: aload         4
      99: aload         5
     101: invokeinterface #46,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onError:(Ljava/lang/Throwable;)V
     106: goto          116
     109: aload         4
     111: invokeinterface #47,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onComplete:()V
     116: iload_3
     117: ireturn
     118: getstatic     #41                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     121: aload_0
     122: iload_2
     123: ineg
     124: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     127: istore_2
     128: iload_2
     129: ifne          30
     132: iload_3
     133: ireturn
}
