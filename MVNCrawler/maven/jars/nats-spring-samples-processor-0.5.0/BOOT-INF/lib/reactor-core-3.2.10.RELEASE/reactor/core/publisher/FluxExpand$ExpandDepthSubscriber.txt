Compiled from "FluxExpand.java"
final class reactor.core.publisher.FluxExpand$ExpandDepthSubscriber<T> implements reactor.core.publisher.InnerConsumer<T> {
  reactor.core.publisher.FluxExpand$ExpandDepthSubscription<T> parent;

  volatile boolean done;

  volatile T value;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxExpand$ExpandDepthSubscriber, org.reactivestreams.Subscription> S;

  reactor.core.publisher.FluxExpand$ExpandDepthSubscriber(reactor.core.publisher.FluxExpand$ExpandDepthSubscription<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/FluxExpand$ExpandDepthSubscription;
       9: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #3                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #4                  // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          18
      11: aload_1
      12: lconst_1
      13: invokeinterface #5,  3            // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      18: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #6                  // Field s:Lorg/reactivestreams/Subscription;
       4: invokestatic  #7                  // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpeq     22
      10: aload_0
      11: aload_1
      12: putfield      #8                  // Field value:Ljava/lang/Object;
      15: aload_0
      16: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxExpand$ExpandDepthSubscription;
      19: invokevirtual #9                  // Method reactor/core/publisher/FluxExpand$ExpandDepthSubscription.innerNext:()V
      22: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #6                  // Field s:Lorg/reactivestreams/Subscription;
       4: invokestatic  #7                  // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpeq     19
      10: aload_0
      11: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxExpand$ExpandDepthSubscription;
      14: aload_0
      15: aload_1
      16: invokevirtual #10                 // Method reactor/core/publisher/FluxExpand$ExpandDepthSubscription.innerError:(Lreactor/core/publisher/FluxExpand$ExpandDepthSubscriber;Ljava/lang/Throwable;)V
      19: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #6                  // Field s:Lorg/reactivestreams/Subscription;
       4: invokestatic  #7                  // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpeq     18
      10: aload_0
      11: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxExpand$ExpandDepthSubscription;
      14: aload_0
      15: invokevirtual #11                 // Method reactor/core/publisher/FluxExpand$ExpandDepthSubscription.innerComplete:(Lreactor/core/publisher/FluxExpand$ExpandDepthSubscriber;)V
      18: return

  void requestOne();
    Code:
       0: aload_0
       1: getfield      #6                  // Field s:Lorg/reactivestreams/Subscription;
       4: lconst_1
       5: invokeinterface #5,  3            // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      10: return

  void dispose();
    Code:
       0: getstatic     #3                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #12                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #13                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #6                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #14                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxExpand$ExpandDepthSubscription;
      23: getfield      #15                 // Field reactor/core/publisher/FluxExpand$ExpandDepthSubscription.actual:Lreactor/core/CoreSubscriber;
      26: areturn
      27: aload_1
      28: getstatic     #16                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #17                 // Field done:Z
      38: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aconst_null
      43: areturn

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxExpand$ExpandDepthSubscription;
       4: invokevirtual #19                 // Method reactor/core/publisher/FluxExpand$ExpandDepthSubscription.actual:()Lreactor/core/CoreSubscriber;
       7: invokeinterface #20,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      12: areturn

  static {};
    Code:
       0: ldc           #21                 // class reactor/core/publisher/FluxExpand$ExpandDepthSubscriber
       2: ldc           #22                 // class org/reactivestreams/Subscription
       4: ldc           #23                 // String s
       6: invokestatic  #24                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #3                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
