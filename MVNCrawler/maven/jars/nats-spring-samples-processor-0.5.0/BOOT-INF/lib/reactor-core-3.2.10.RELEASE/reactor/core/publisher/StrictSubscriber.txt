Compiled from "StrictSubscriber.java"
final class reactor.core.publisher.StrictSubscriber<T> implements reactor.core.Scannable, reactor.core.CoreSubscriber<T>, org.reactivestreams.Subscription {
  final org.reactivestreams.Subscriber<? super T> actual;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.StrictSubscriber, org.reactivestreams.Subscription> S;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.StrictSubscriber> REQUESTED;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.StrictSubscriber> WIP;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.StrictSubscriber, java.lang.Throwable> ERROR;

  volatile boolean done;

  reactor.core.publisher.StrictSubscriber(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lorg/reactivestreams/Subscriber;
       9: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #3                  // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #4                  // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          57
      11: aload_0
      12: getfield      #2                  // Field actual:Lorg/reactivestreams/Subscriber;
      15: aload_0
      16: invokeinterface #5,  2            // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      21: getstatic     #6                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      24: aload_0
      25: aload_1
      26: invokestatic  #7                  // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
      29: ifeq          70
      32: getstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      35: aload_0
      36: lconst_0
      37: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndSet:(Ljava/lang/Object;J)J
      40: lstore_2
      41: lload_2
      42: lconst_0
      43: lcmp
      44: ifeq          54
      47: aload_1
      48: lload_2
      49: invokeinterface #10,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      54: goto          70
      57: aload_0
      58: new           #11                 // class java/lang/IllegalStateException
      61: dup
      62: ldc           #12                 // String ยง2.12 violated: onSubscribe must be called at most once
      64: invokespecial #13                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      67: invokevirtual #14                 // Method onError:(Ljava/lang/Throwable;)V
      70: return

  public void onNext(T);
    Code:
       0: getstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
       7: ifne          76
      10: getstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      13: aload_0
      14: iconst_0
      15: iconst_1
      16: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      19: ifeq          76
      22: aload_0
      23: getfield      #2                  // Field actual:Lorg/reactivestreams/Subscriber;
      26: aload_1
      27: invokeinterface #18,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      32: getstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      35: aload_0
      36: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      39: ifeq          76
      42: getstatic     #20                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      45: aload_0
      46: invokestatic  #21                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      49: astore_2
      50: aload_2
      51: ifnull        67
      54: aload_0
      55: getfield      #2                  // Field actual:Lorg/reactivestreams/Subscriber;
      58: aload_2
      59: invokeinterface #22,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      64: goto          76
      67: aload_0
      68: getfield      #2                  // Field actual:Lorg/reactivestreams/Subscriber;
      71: invokeinterface #23,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      76: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #24                 // Field done:Z
       5: getstatic     #20                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       8: aload_0
       9: aload_1
      10: invokestatic  #25                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      13: ifeq          45
      16: getstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: aload_0
      20: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      23: ifne          52
      26: aload_0
      27: getfield      #2                  // Field actual:Lorg/reactivestreams/Subscriber;
      30: getstatic     #20                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      33: aload_0
      34: invokestatic  #21                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      37: invokeinterface #22,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      42: goto          52
      45: aload_1
      46: invokestatic  #27                 // InterfaceMethod reactor/util/context/Context.empty:()Lreactor/util/context/Context;
      49: invokestatic  #28                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      52: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #24                 // Field done:Z
       5: getstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       8: aload_0
       9: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      12: ifne          49
      15: getstatic     #20                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      18: aload_0
      19: invokestatic  #21                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      22: astore_1
      23: aload_1
      24: ifnull        40
      27: aload_0
      28: getfield      #2                  // Field actual:Lorg/reactivestreams/Subscriber;
      31: aload_1
      32: invokeinterface #22,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      37: goto          49
      40: aload_0
      41: getfield      #2                  // Field actual:Lorg/reactivestreams/Subscriber;
      44: invokeinterface #23,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      49: return

  public void request(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifgt          41
       6: aload_0
       7: invokevirtual #29                 // Method cancel:()V
      10: aload_0
      11: new           #30                 // class java/lang/IllegalArgumentException
      14: dup
      15: new           #31                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #32                 // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #33                 // String ยง3.9 violated: positive request amount required but it was
      24: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: lload_1
      28: invokevirtual #35                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      31: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #37                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      37: invokevirtual #14                 // Method onError:(Ljava/lang/Throwable;)V
      40: return
      41: aload_0
      42: getfield      #3                  // Field s:Lorg/reactivestreams/Subscription;
      45: astore_3
      46: aload_3
      47: ifnull        60
      50: aload_3
      51: lload_1
      52: invokeinterface #10,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      57: goto          102
      60: getstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      63: aload_0
      64: lload_1
      65: invokestatic  #38                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      68: pop2
      69: aload_0
      70: getfield      #3                  // Field s:Lorg/reactivestreams/Subscription;
      73: astore_3
      74: aload_3
      75: ifnull        102
      78: getstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      81: aload_0
      82: lconst_0
      83: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndSet:(Ljava/lang/Object;J)J
      86: lstore        4
      88: lload         4
      90: lconst_0
      91: lcmp
      92: ifeq          102
      95: aload_3
      96: lload_1
      97: invokeinterface #10,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     102: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #24                 // Field done:Z
       4: ifne          15
       7: getstatic     #6                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      10: aload_0
      11: invokestatic  #39                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      14: pop
      15: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #40                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #3                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #41                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     38
      19: aload_0
      20: getfield      #3                  // Field s:Lorg/reactivestreams/Subscription;
      23: invokestatic  #42                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      26: if_acmpne     33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: invokestatic  #43                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      37: areturn
      38: aload_1
      39: getstatic     #44                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      42: if_acmpne     53
      45: aload_0
      46: getfield      #45                 // Field requested:J
      49: invokestatic  #46                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      52: areturn
      53: aload_1
      54: getstatic     #47                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      57: if_acmpne     65
      60: aload_0
      61: getfield      #2                  // Field actual:Lorg/reactivestreams/Subscriber;
      64: areturn
      65: aconst_null
      66: areturn

  static {};
    Code:
       0: ldc           #48                 // class reactor/core/publisher/StrictSubscriber
       2: ldc           #49                 // class org/reactivestreams/Subscription
       4: ldc           #50                 // String s
       6: invokestatic  #51                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #6                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #48                 // class reactor/core/publisher/StrictSubscriber
      14: ldc           #52                 // String requested
      16: invokestatic  #53                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      19: putstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      22: ldc           #48                 // class reactor/core/publisher/StrictSubscriber
      24: ldc           #54                 // String wip
      26: invokestatic  #55                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      29: putstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      32: ldc           #48                 // class reactor/core/publisher/StrictSubscriber
      34: ldc           #56                 // class java/lang/Throwable
      36: ldc           #57                 // String error
      38: invokestatic  #51                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      41: putstatic     #20                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      44: return
}
