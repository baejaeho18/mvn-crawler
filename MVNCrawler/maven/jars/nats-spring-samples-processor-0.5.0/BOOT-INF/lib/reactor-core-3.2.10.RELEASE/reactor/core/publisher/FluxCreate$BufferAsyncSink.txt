Compiled from "FluxCreate.java"
final class reactor.core.publisher.FluxCreate$BufferAsyncSink<T> extends reactor.core.publisher.FluxCreate$BaseSink<T> {
  final java.util.Queue<T> queue;

  java.lang.Throwable error;

  volatile boolean done;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxCreate$BufferAsyncSink> WIP;

  reactor.core.publisher.FluxCreate$BufferAsyncSink(reactor.core.CoreSubscriber<? super T>, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxCreate$BaseSink."<init>":(Lreactor/core/CoreSubscriber;)V
       5: aload_0
       6: iload_2
       7: invokestatic  #2                  // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      10: invokeinterface #3,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      15: checkcast     #4                  // class java/util/Queue
      18: putfield      #5                  // Field queue:Ljava/util/Queue;
      21: return

  public reactor.core.publisher.FluxSink<T> next(T);
    Code:
       0: aload_0
       1: getfield      #5                  // Field queue:Ljava/util/Queue;
       4: aload_1
       5: invokeinterface #6,  2            // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: invokevirtual #7                  // Method drain:()V
      15: aload_0
      16: areturn

  public void error(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: iconst_1
       7: putfield      #9                  // Field done:Z
      10: aload_0
      11: invokevirtual #7                  // Method drain:()V
      14: return

  public void complete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #9                  // Field done:Z
       5: aload_0
       6: invokevirtual #7                  // Method drain:()V
       9: return

  void onRequestedFromDownstream();
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method drain:()V
       4: return

  void onCancel();
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method drain:()V
       4: return

  void drain();
    Code:
       0: getstatic     #10                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #12                 // Field actual:Lreactor/core/CoreSubscriber;
      15: astore_1
      16: aload_0
      17: getfield      #5                  // Field queue:Ljava/util/Queue;
      20: astore_2
      21: aload_0
      22: getfield      #13                 // Field requested:J
      25: lstore_3
      26: lconst_0
      27: lstore        5
      29: lload         5
      31: lload_3
      32: lcmp
      33: ifeq          152
      36: aload_0
      37: invokevirtual #14                 // Method isCancelled:()Z
      40: ifeq          66
      43: aload_2
      44: aload_0
      45: getfield      #15                 // Field ctx:Lreactor/util/context/Context;
      48: aconst_null
      49: invokestatic  #16                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
      52: getstatic     #10                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      55: aload_0
      56: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      59: ifeq          65
      62: goto          29
      65: return
      66: aload_0
      67: getfield      #9                  // Field done:Z
      70: istore        7
      72: aload_2
      73: invokeinterface #18,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      78: astore        8
      80: aload         8
      82: ifnonnull     89
      85: iconst_1
      86: goto          90
      89: iconst_0
      90: istore        9
      92: iload         7
      94: ifeq          127
      97: iload         9
      99: ifeq          127
     102: aload_0
     103: getfield      #8                  // Field error:Ljava/lang/Throwable;
     106: astore        10
     108: aload         10
     110: ifnull        122
     113: aload_0
     114: aload         10
     116: invokespecial #19                 // Method reactor/core/publisher/FluxCreate$BaseSink.error:(Ljava/lang/Throwable;)V
     119: goto          126
     122: aload_0
     123: invokespecial #20                 // Method reactor/core/publisher/FluxCreate$BaseSink.complete:()V
     126: return
     127: iload         9
     129: ifeq          135
     132: goto          152
     135: aload_1
     136: aload         8
     138: invokeinterface #21,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     143: lload         5
     145: lconst_1
     146: ladd
     147: lstore        5
     149: goto          29
     152: lload         5
     154: lload_3
     155: lcmp
     156: ifne          238
     159: aload_0
     160: invokevirtual #14                 // Method isCancelled:()Z
     163: ifeq          189
     166: aload_2
     167: aload_0
     168: getfield      #15                 // Field ctx:Lreactor/util/context/Context;
     171: aconst_null
     172: invokestatic  #16                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
     175: getstatic     #10                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     178: aload_0
     179: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     182: ifeq          188
     185: goto          21
     188: return
     189: aload_0
     190: getfield      #9                  // Field done:Z
     193: istore        7
     195: aload_2
     196: invokeinterface #22,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     201: istore        8
     203: iload         7
     205: ifeq          238
     208: iload         8
     210: ifeq          238
     213: aload_0
     214: getfield      #8                  // Field error:Ljava/lang/Throwable;
     217: astore        9
     219: aload         9
     221: ifnull        233
     224: aload_0
     225: aload         9
     227: invokespecial #19                 // Method reactor/core/publisher/FluxCreate$BaseSink.error:(Ljava/lang/Throwable;)V
     230: goto          237
     233: aload_0
     234: invokespecial #20                 // Method reactor/core/publisher/FluxCreate$BaseSink.complete:()V
     237: return
     238: lload         5
     240: lconst_0
     241: lcmp
     242: ifeq          255
     245: getstatic     #23                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     248: aload_0
     249: lload         5
     251: invokestatic  #24                 // Method reactor/core/publisher/Operators.produced:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
     254: pop2
     255: getstatic     #10                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     258: aload_0
     259: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     262: ifne          268
     265: goto          271
     268: goto          21
     271: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #25                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     20
       7: aload_0
       8: getfield      #5                  // Field queue:Ljava/util/Queue;
      11: invokeinterface #26,  1           // InterfaceMethod java/util/Queue.size:()I
      16: invokestatic  #27                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      19: areturn
      20: aload_1
      21: getstatic     #28                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      24: if_acmpne     35
      27: aload_0
      28: getfield      #9                  // Field done:Z
      31: invokestatic  #29                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      34: areturn
      35: aload_1
      36: getstatic     #30                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      39: if_acmpne     47
      42: aload_0
      43: getfield      #8                  // Field error:Ljava/lang/Throwable;
      46: areturn
      47: aload_0
      48: aload_1
      49: invokespecial #31                 // Method reactor/core/publisher/FluxCreate$BaseSink.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      52: areturn

  public java.lang.String toString();
    Code:
       0: new           #32                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #34                 // String FluxSink(
       9: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: getstatic     #36                 // Field reactor/core/publisher/FluxSink$OverflowStrategy.BUFFER:Lreactor/core/publisher/FluxSink$OverflowStrategy;
      15: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      18: ldc           #38                 // String )
      20: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      26: areturn

  static {};
    Code:
       0: ldc           #40                 // class reactor/core/publisher/FluxCreate$BufferAsyncSink
       2: ldc           #41                 // String wip
       4: invokestatic  #42                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #10                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
