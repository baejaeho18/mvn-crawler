Compiled from "SingleScheduler.java"
final class reactor.core.scheduler.SingleScheduler implements reactor.core.scheduler.Scheduler, java.util.function.Supplier<java.util.concurrent.ScheduledExecutorService>, reactor.core.Scannable {
  static final java.util.concurrent.atomic.AtomicLong COUNTER;

  final java.util.concurrent.ThreadFactory factory;

  volatile java.util.concurrent.ScheduledExecutorService executor;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.scheduler.SingleScheduler, java.util.concurrent.ScheduledExecutorService> EXECUTORS;

  static final java.util.concurrent.ScheduledExecutorService TERMINATED;

  reactor.core.scheduler.SingleScheduler(java.util.concurrent.ThreadFactory);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field factory:Ljava/util/concurrent/ThreadFactory;
       9: aload_0
      10: invokespecial #3                  // Method init:()V
      13: return

  public java.util.concurrent.ScheduledExecutorService get();
    Code:
       0: iconst_1
       1: aload_0
       2: getfield      #2                  // Field factory:Ljava/util/concurrent/ThreadFactory;
       5: invokestatic  #4                  // Method java/util/concurrent/Executors.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;
       8: checkcast     #5                  // class java/util/concurrent/ScheduledThreadPoolExecutor
      11: astore_1
      12: aload_1
      13: iconst_1
      14: invokevirtual #6                  // Method java/util/concurrent/ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy:(Z)V
      17: aload_1
      18: iconst_1
      19: invokevirtual #7                  // Method java/util/concurrent/ScheduledThreadPoolExecutor.setMaximumPoolSize:(I)V
      22: aload_1
      23: areturn

  private void init();
    Code:
       0: getstatic     #8                  // Field EXECUTORS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_0
       5: aload_0
       6: invokevirtual #9                  // Method get:()Ljava/util/concurrent/ScheduledExecutorService;
       9: invokestatic  #10                 // Method reactor/core/scheduler/Schedulers.decorateExecutorService:(Lreactor/core/scheduler/Scheduler;Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;
      12: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      15: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #12                 // Field executor:Ljava/util/concurrent/ScheduledExecutorService;
       4: getstatic     #13                 // Field TERMINATED:Ljava/util/concurrent/ScheduledExecutorService;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void start();
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #12                 // Field executor:Ljava/util/concurrent/ScheduledExecutorService;
       6: astore_2
       7: aload_2
       8: getstatic     #13                 // Field TERMINATED:Ljava/util/concurrent/ScheduledExecutorService;
      11: if_acmpeq     26
      14: aload_1
      15: ifnull        25
      18: aload_1
      19: invokeinterface #14,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdownNow:()Ljava/util/List;
      24: pop
      25: return
      26: aload_1
      27: ifnonnull     39
      30: aload_0
      31: aload_0
      32: invokevirtual #9                  // Method get:()Ljava/util/concurrent/ScheduledExecutorService;
      35: invokestatic  #10                 // Method reactor/core/scheduler/Schedulers.decorateExecutorService:(Lreactor/core/scheduler/Scheduler;Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;
      38: astore_1
      39: getstatic     #8                  // Field EXECUTORS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      42: aload_0
      43: aload_2
      44: aload_1
      45: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      48: ifeq          52
      51: return
      52: goto          2

  public void dispose();
    Code:
       0: aload_0
       1: getfield      #12                 // Field executor:Ljava/util/concurrent/ScheduledExecutorService;
       4: astore_1
       5: aload_1
       6: getstatic     #13                 // Field TERMINATED:Ljava/util/concurrent/ScheduledExecutorService;
       9: if_acmpeq     40
      12: getstatic     #8                  // Field EXECUTORS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: getstatic     #13                 // Field TERMINATED:Ljava/util/concurrent/ScheduledExecutorService;
      19: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #17                 // class java/util/concurrent/ScheduledExecutorService
      25: astore_1
      26: aload_1
      27: getstatic     #13                 // Field TERMINATED:Ljava/util/concurrent/ScheduledExecutorService;
      30: if_acmpeq     40
      33: aload_1
      34: invokeinterface #14,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdownNow:()Ljava/util/List;
      39: pop
      40: return

  public reactor.core.Disposable schedule(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #12                 // Field executor:Ljava/util/concurrent/ScheduledExecutorService;
       4: aload_1
       5: lconst_0
       6: getstatic     #18                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       9: invokestatic  #19                 // Method reactor/core/scheduler/Schedulers.directSchedule:(Ljava/util/concurrent/ScheduledExecutorService;Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      12: areturn

  public reactor.core.Disposable schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #12                 // Field executor:Ljava/util/concurrent/ScheduledExecutorService;
       4: aload_1
       5: lload_2
       6: aload         4
       8: invokestatic  #19                 // Method reactor/core/scheduler/Schedulers.directSchedule:(Ljava/util/concurrent/ScheduledExecutorService;Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      11: areturn

  public reactor.core.Disposable schedulePeriodically(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #12                 // Field executor:Ljava/util/concurrent/ScheduledExecutorService;
       4: aload_1
       5: lload_2
       6: lload         4
       8: aload         6
      10: invokestatic  #20                 // Method reactor/core/scheduler/Schedulers.directSchedulePeriodically:(Ljava/util/concurrent/ScheduledExecutorService;Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      13: areturn

  public java.lang.String toString();
    Code:
       0: new           #21                 // class java/lang/StringBuilder
       3: dup
       4: ldc           #23                 // String single
       6: invokespecial #24                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
       9: bipush        40
      11: invokevirtual #25                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      14: astore_1
      15: aload_0
      16: getfield      #2                  // Field factory:Ljava/util/concurrent/ThreadFactory;
      19: instanceof    #26                 // class reactor/core/scheduler/ReactorThreadFactory
      22: ifeq          50
      25: aload_1
      26: bipush        34
      28: invokevirtual #25                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      31: aload_0
      32: getfield      #2                  // Field factory:Ljava/util/concurrent/ThreadFactory;
      35: checkcast     #26                 // class reactor/core/scheduler/ReactorThreadFactory
      38: invokevirtual #27                 // Method reactor/core/scheduler/ReactorThreadFactory.get:()Ljava/lang/String;
      41: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: bipush        34
      46: invokevirtual #25                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      49: pop
      50: aload_1
      51: bipush        41
      53: invokevirtual #25                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      56: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #30                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpeq     14
       7: aload_1
       8: getstatic     #31                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      11: if_acmpne     22
      14: aload_0
      15: invokevirtual #32                 // Method isDisposed:()Z
      18: invokestatic  #33                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      21: areturn
      22: aload_1
      23: getstatic     #34                 // Field reactor/core/Scannable$Attr.NAME:Lreactor/core/Scannable$Attr;
      26: if_acmpne     34
      29: aload_0
      30: invokevirtual #35                 // Method toString:()Ljava/lang/String;
      33: areturn
      34: aload_1
      35: getstatic     #36                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      38: if_acmpeq     48
      41: aload_1
      42: getstatic     #37                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      45: if_acmpne     53
      48: iconst_1
      49: invokestatic  #38                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      52: areturn
      53: aload_0
      54: getfield      #12                 // Field executor:Ljava/util/concurrent/ScheduledExecutorService;
      57: aload_1
      58: invokestatic  #39                 // Method reactor/core/scheduler/Schedulers.scanExecutor:(Ljava/util/concurrent/Executor;Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      61: areturn

  public reactor.core.scheduler.Scheduler$Worker createWorker();
    Code:
       0: new           #40                 // class reactor/core/scheduler/ExecutorServiceWorker
       3: dup
       4: aload_0
       5: getfield      #12                 // Field executor:Ljava/util/concurrent/ScheduledExecutorService;
       8: invokespecial #41                 // Method reactor/core/scheduler/ExecutorServiceWorker."<init>":(Ljava/util/concurrent/ScheduledExecutorService;)V
      11: areturn

  public java.lang.Object get();
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method get:()Ljava/util/concurrent/ScheduledExecutorService;
       4: areturn

  static {};
    Code:
       0: new           #42                 // class java/util/concurrent/atomic/AtomicLong
       3: dup
       4: invokespecial #43                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
       7: putstatic     #44                 // Field COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
      10: ldc           #45                 // class reactor/core/scheduler/SingleScheduler
      12: ldc           #17                 // class java/util/concurrent/ScheduledExecutorService
      14: ldc           #46                 // String executor
      16: invokestatic  #47                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      19: putstatic     #8                  // Field EXECUTORS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: invokestatic  #48                 // Method java/util/concurrent/Executors.newSingleThreadScheduledExecutor:()Ljava/util/concurrent/ScheduledExecutorService;
      25: putstatic     #13                 // Field TERMINATED:Ljava/util/concurrent/ScheduledExecutorService;
      28: getstatic     #13                 // Field TERMINATED:Ljava/util/concurrent/ScheduledExecutorService;
      31: invokeinterface #14,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdownNow:()Ljava/util/List;
      36: pop
      37: return
}
