Compiled from "MonoMetrics.java"
final class reactor.core.publisher.MonoMetrics<T> extends reactor.core.publisher.MonoOperator<T, T> {
  final java.lang.String name;

  final java.util.List<io.micrometer.core.instrument.Tag> tags;

  final io.micrometer.core.instrument.MeterRegistry meterRegistry;

  reactor.core.publisher.MonoMetrics(reactor.core.publisher.Mono<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #1                  // Method "<init>":(Lreactor/core/publisher/Mono;Lio/micrometer/core/instrument/MeterRegistry;)V
       6: return

  reactor.core.publisher.MonoMetrics(reactor.core.publisher.Mono<? extends T>, io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_1
       6: invokestatic  #3                  // Method reactor/core/publisher/FluxMetrics.resolveNameAndTags:(Lorg/reactivestreams/Publisher;)Lreactor/util/function/Tuple2;
       9: astore_3
      10: aload_0
      11: aload_3
      12: invokevirtual #4                  // Method reactor/util/function/Tuple2.getT1:()Ljava/lang/Object;
      15: checkcast     #5                  // class java/lang/String
      18: putfield      #6                  // Field name:Ljava/lang/String;
      21: aload_0
      22: aload_3
      23: invokevirtual #7                  // Method reactor/util/function/Tuple2.getT2:()Ljava/lang/Object;
      26: checkcast     #8                  // class java/util/List
      29: putfield      #9                  // Field tags:Ljava/util/List;
      32: aload_2
      33: ifnonnull     46
      36: aload_0
      37: getstatic     #10                 // Field io/micrometer/core/instrument/Metrics.globalRegistry:Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;
      40: putfield      #11                 // Field meterRegistry:Lio/micrometer/core/instrument/MeterRegistry;
      43: goto          51
      46: aload_0
      47: aload_2
      48: putfield      #11                 // Field meterRegistry:Lio/micrometer/core/instrument/MeterRegistry;
      51: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #12                 // Field source:Lreactor/core/publisher/Mono;
       4: new           #13                 // class reactor/core/publisher/MonoMetrics$MicrometerMonoMetricsSubscriber
       7: dup
       8: aload_1
       9: aload_0
      10: getfield      #11                 // Field meterRegistry:Lio/micrometer/core/instrument/MeterRegistry;
      13: getstatic     #14                 // Field io/micrometer/core/instrument/Clock.SYSTEM:Lio/micrometer/core/instrument/Clock;
      16: aload_0
      17: getfield      #6                  // Field name:Ljava/lang/String;
      20: aload_0
      21: getfield      #9                  // Field tags:Ljava/util/List;
      24: invokespecial #15                 // Method reactor/core/publisher/MonoMetrics$MicrometerMonoMetricsSubscriber."<init>":(Lreactor/core/CoreSubscriber;Lio/micrometer/core/instrument/MeterRegistry;Lio/micrometer/core/instrument/Clock;Ljava/lang/String;Ljava/util/List;)V
      27: invokevirtual #16                 // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      30: return
}
