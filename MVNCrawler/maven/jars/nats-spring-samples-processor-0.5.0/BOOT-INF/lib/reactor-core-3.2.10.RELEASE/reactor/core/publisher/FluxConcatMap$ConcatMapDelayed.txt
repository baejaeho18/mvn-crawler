Compiled from "FluxConcatMap.java"
final class reactor.core.publisher.FluxConcatMap$ConcatMapDelayed<T, R> implements reactor.core.publisher.FluxConcatMap$FluxConcatMapSupport<T, R> {
  final reactor.core.CoreSubscriber<? super R> actual;

  final reactor.util.context.Context ctx;

  final reactor.core.publisher.FluxConcatMap$ConcatMapInner<R> inner;

  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>> mapper;

  final java.util.function.Supplier<? extends java.util.Queue<T>> queueSupplier;

  final int prefetch;

  final int limit;

  final boolean veryEnd;

  org.reactivestreams.Subscription s;

  int consumed;

  volatile java.util.Queue<T> queue;

  volatile boolean done;

  volatile boolean cancelled;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxConcatMap$ConcatMapDelayed, java.lang.Throwable> ERROR;

  volatile boolean active;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxConcatMap$ConcatMapDelayed> WIP;

  int sourceMode;

  reactor.core.publisher.FluxConcatMap$ConcatMapDelayed(reactor.core.CoreSubscriber<? super R>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, java.util.function.Supplier<? extends java.util.Queue<T>>, int, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_1
      11: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      16: putfield      #4                  // Field ctx:Lreactor/util/context/Context;
      19: aload_0
      20: aload_2
      21: putfield      #5                  // Field mapper:Ljava/util/function/Function;
      24: aload_0
      25: aload_3
      26: putfield      #6                  // Field queueSupplier:Ljava/util/function/Supplier;
      29: aload_0
      30: iload         4
      32: putfield      #7                  // Field prefetch:I
      35: aload_0
      36: iload         4
      38: invokestatic  #8                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      41: putfield      #9                  // Field limit:I
      44: aload_0
      45: iload         5
      47: putfield      #10                 // Field veryEnd:Z
      50: aload_0
      51: new           #11                 // class reactor/core/publisher/FluxConcatMap$ConcatMapInner
      54: dup
      55: aload_0
      56: invokespecial #12                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner."<init>":(Lreactor/core/publisher/FluxConcatMap$FluxConcatMapSupport;)V
      59: putfield      #13                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
      62: return

  public reactor.core.CoreSubscriber<? super R> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #14                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #16                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #17                 // Field done:Z
      23: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #19                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #20                 // Field cancelled:Z
      38: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aload_1
      43: getstatic     #21                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      46: if_acmpne     57
      49: aload_0
      50: getfield      #7                  // Field prefetch:I
      53: invokestatic  #22                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      56: areturn
      57: aload_1
      58: getstatic     #23                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      61: if_acmpne     88
      64: aload_0
      65: getfield      #24                 // Field queue:Ljava/util/Queue;
      68: ifnull        83
      71: aload_0
      72: getfield      #24                 // Field queue:Ljava/util/Queue;
      75: invokeinterface #25,  1           // InterfaceMethod java/util/Queue.size:()I
      80: goto          84
      83: iconst_0
      84: invokestatic  #22                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      87: areturn
      88: aload_1
      89: getstatic     #26                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      92: if_acmpne     100
      95: aload_0
      96: getfield      #27                 // Field error:Ljava/lang/Throwable;
      99: areturn
     100: aload_1
     101: getstatic     #28                 // Field reactor/core/Scannable$Attr.DELAY_ERROR:Lreactor/core/Scannable$Attr;
     104: if_acmpne     112
     107: iconst_1
     108: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     111: areturn
     112: aload_0
     113: aload_1
     114: invokespecial #29                 // InterfaceMethod reactor/core/publisher/FluxConcatMap$FluxConcatMapSupport.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     117: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #30                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          148
      11: aload_0
      12: aload_1
      13: putfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_1
      17: instanceof    #31                 // class reactor/core/Fuseable$QueueSubscription
      20: ifeq          109
      23: aload_1
      24: checkcast     #31                 // class reactor/core/Fuseable$QueueSubscription
      27: astore_2
      28: aload_2
      29: bipush        7
      31: invokeinterface #33,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      36: istore_3
      37: iload_3
      38: iconst_1
      39: if_icmpne     72
      42: aload_0
      43: iconst_1
      44: putfield      #34                 // Field sourceMode:I
      47: aload_0
      48: aload_2
      49: putfield      #24                 // Field queue:Ljava/util/Queue;
      52: aload_0
      53: iconst_1
      54: putfield      #17                 // Field done:Z
      57: aload_0
      58: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      61: aload_0
      62: invokeinterface #35,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      67: aload_0
      68: invokevirtual #36                 // Method drain:()V
      71: return
      72: iload_3
      73: iconst_2
      74: if_icmpne     90
      77: aload_0
      78: iconst_2
      79: putfield      #34                 // Field sourceMode:I
      82: aload_0
      83: aload_2
      84: putfield      #24                 // Field queue:Ljava/util/Queue;
      87: goto          106
      90: aload_0
      91: aload_0
      92: getfield      #6                  // Field queueSupplier:Ljava/util/function/Supplier;
      95: invokeinterface #37,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     100: checkcast     #38                 // class java/util/Queue
     103: putfield      #24                 // Field queue:Ljava/util/Queue;
     106: goto          125
     109: aload_0
     110: aload_0
     111: getfield      #6                  // Field queueSupplier:Ljava/util/function/Supplier;
     114: invokeinterface #37,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     119: checkcast     #38                 // class java/util/Queue
     122: putfield      #24                 // Field queue:Ljava/util/Queue;
     125: aload_0
     126: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     129: aload_0
     130: invokeinterface #35,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     135: aload_1
     136: aload_0
     137: getfield      #7                  // Field prefetch:I
     140: invokestatic  #39                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
     143: invokeinterface #40,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     148: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #34                 // Field sourceMode:I
       4: iconst_2
       5: if_icmpne     15
       8: aload_0
       9: invokevirtual #36                 // Method drain:()V
      12: goto          64
      15: aload_0
      16: getfield      #24                 // Field queue:Ljava/util/Queue;
      19: aload_1
      20: invokeinterface #41,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      25: ifne          60
      28: aload_0
      29: aload_0
      30: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
      33: ldc           #43                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      35: invokestatic  #44                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      38: aload_1
      39: aload_0
      40: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      43: invokestatic  #45                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      46: invokevirtual #46                 // Method onError:(Ljava/lang/Throwable;)V
      49: aload_1
      50: aload_0
      51: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      54: invokestatic  #47                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      57: goto          64
      60: aload_0
      61: invokevirtual #36                 // Method drain:()V
      64: return

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #48                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #49                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          23
      11: aload_0
      12: iconst_1
      13: putfield      #17                 // Field done:Z
      16: aload_0
      17: invokevirtual #36                 // Method drain:()V
      20: goto          31
      23: aload_1
      24: aload_0
      25: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      28: invokestatic  #50                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      31: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #17                 // Field done:Z
       5: aload_0
       6: invokevirtual #36                 // Method drain:()V
       9: return

  public void innerNext(R);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #51,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      10: return

  public void innerComplete();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #52                 // Field active:Z
       5: aload_0
       6: invokevirtual #36                 // Method drain:()V
       9: return

  public void innerError(java.lang.Throwable);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #53                 // Method currentContext:()Lreactor/util/context/Context;
       5: aload_0
       6: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
       9: invokestatic  #54                 // Method reactor/core/publisher/Operators.onNextInnerError:(Ljava/lang/Throwable;Lreactor/util/context/Context;Lorg/reactivestreams/Subscription;)Ljava/lang/Throwable;
      12: astore_1
      13: aload_1
      14: ifnull        72
      17: getstatic     #48                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      20: aload_0
      21: aload_1
      22: invokestatic  #49                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      25: ifeq          61
      28: aload_0
      29: getfield      #10                 // Field veryEnd:Z
      32: ifne          49
      35: aload_0
      36: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
      39: invokeinterface #55,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      44: aload_0
      45: iconst_1
      46: putfield      #17                 // Field done:Z
      49: aload_0
      50: iconst_0
      51: putfield      #52                 // Field active:Z
      54: aload_0
      55: invokevirtual #36                 // Method drain:()V
      58: goto          77
      61: aload_1
      62: aload_0
      63: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      66: invokestatic  #50                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      69: goto          77
      72: aload_0
      73: iconst_0
      74: putfield      #52                 // Field active:Z
      77: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #13                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
       4: lload_1
       5: invokevirtual #56                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.request:(J)V
       8: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #20                 // Field cancelled:Z
       4: ifne          40
       7: aload_0
       8: iconst_1
       9: putfield      #20                 // Field cancelled:Z
      12: aload_0
      13: getfield      #13                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
      16: invokevirtual #57                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.cancel:()V
      19: aload_0
      20: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
      23: invokeinterface #55,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      28: aload_0
      29: getfield      #24                 // Field queue:Ljava/util/Queue;
      32: aload_0
      33: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      36: aconst_null
      37: invokestatic  #58                 // Method reactor/core/publisher/Operators.onDiscardQueueWithClear:(Ljava/util/Queue;Lreactor/util/context/Context;Ljava/util/function/Function;)V
      40: return

  void drain();
    Code:
       0: getstatic     #59                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #60                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          496
      10: aload_0
      11: getfield      #20                 // Field cancelled:Z
      14: ifeq          18
      17: return
      18: aload_0
      19: getfield      #52                 // Field active:Z
      22: ifne          483
      25: aload_0
      26: getfield      #17                 // Field done:Z
      29: istore_1
      30: iload_1
      31: ifeq          76
      34: aload_0
      35: getfield      #10                 // Field veryEnd:Z
      38: ifne          76
      41: aload_0
      42: getfield      #27                 // Field error:Ljava/lang/Throwable;
      45: astore_2
      46: aload_2
      47: ifnull        76
      50: getstatic     #48                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      53: aload_0
      54: invokestatic  #61                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      57: astore_2
      58: aload_2
      59: getstatic     #62                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      62: if_acmpeq     75
      65: aload_0
      66: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      69: aload_2
      70: invokeinterface #63,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      75: return
      76: aload_0
      77: getfield      #24                 // Field queue:Ljava/util/Queue;
      80: invokeinterface #64,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      85: astore_2
      86: goto          112
      89: astore_3
      90: aload_0
      91: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      94: aload_0
      95: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
      98: aload_3
      99: aload_0
     100: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     103: invokestatic  #66                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     106: invokeinterface #63,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     111: return
     112: aload_2
     113: ifnonnull     120
     116: iconst_1
     117: goto          121
     120: iconst_0
     121: istore_3
     122: iload_1
     123: ifeq          176
     126: iload_3
     127: ifeq          176
     130: getstatic     #48                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     133: aload_0
     134: invokestatic  #61                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
     137: astore        4
     139: aload         4
     141: ifnull        166
     144: aload         4
     146: getstatic     #62                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
     149: if_acmpeq     166
     152: aload_0
     153: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     156: aload         4
     158: invokeinterface #63,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     163: goto          175
     166: aload_0
     167: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     170: invokeinterface #67,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     175: return
     176: iload_3
     177: ifne          483
     180: aload_0
     181: getfield      #5                  // Field mapper:Ljava/util/function/Function;
     184: aload_2
     185: invokeinterface #68,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     190: ldc           #69                 // String The mapper returned a null Publisher
     192: invokestatic  #70                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
     195: checkcast     #71                 // class org/reactivestreams/Publisher
     198: astore        4
     200: goto          261
     203: astore        5
     205: aload_2
     206: aload_0
     207: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     210: invokestatic  #47                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
     213: aload_2
     214: aload         5
     216: aload_0
     217: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     220: aload_0
     221: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
     224: invokestatic  #72                 // Method reactor/core/publisher/Operators.onNextError:(Ljava/lang/Object;Ljava/lang/Throwable;Lreactor/util/context/Context;Lorg/reactivestreams/Subscription;)Ljava/lang/Throwable;
     227: astore        6
     229: aload         6
     231: ifnull        258
     234: aload_0
     235: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     238: aload_0
     239: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
     242: aload         5
     244: aload_2
     245: aload_0
     246: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     249: invokestatic  #45                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     252: invokeinterface #63,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     257: return
     258: goto          10
     261: aload_0
     262: getfield      #34                 // Field sourceMode:I
     265: iconst_1
     266: if_icmpeq     312
     269: aload_0
     270: getfield      #73                 // Field consumed:I
     273: iconst_1
     274: iadd
     275: istore        5
     277: iload         5
     279: aload_0
     280: getfield      #9                  // Field limit:I
     283: if_icmpne     306
     286: aload_0
     287: iconst_0
     288: putfield      #73                 // Field consumed:I
     291: aload_0
     292: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
     295: iload         5
     297: i2l
     298: invokeinterface #40,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     303: goto          312
     306: aload_0
     307: iload         5
     309: putfield      #73                 // Field consumed:I
     312: aload         4
     314: instanceof    #74                 // class java/util/concurrent/Callable
     317: ifeq          467
     320: aload         4
     322: checkcast     #74                 // class java/util/concurrent/Callable
     325: astore        5
     327: aload         5
     329: invokeinterface #75,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
     334: astore        6
     336: goto          407
     339: astore        7
     341: aload_2
     342: aload         7
     344: aload_0
     345: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     348: invokestatic  #76                 // Method reactor/core/publisher/Operators.onNextPollError:(Ljava/lang/Object;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
     351: astore        8
     353: aload         8
     355: ifnonnull     361
     358: goto          10
     361: aload_0
     362: getfield      #10                 // Field veryEnd:Z
     365: ifeq          383
     368: getstatic     #48                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     371: aload_0
     372: aload         7
     374: invokestatic  #49                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
     377: ifeq          383
     380: goto          10
     383: aload_0
     384: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     387: aload_0
     388: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
     391: aload         7
     393: aload_2
     394: aload_0
     395: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
     398: invokestatic  #45                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     401: invokeinterface #63,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     406: return
     407: aload         6
     409: ifnonnull     415
     412: goto          10
     415: aload_0
     416: getfield      #13                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     419: invokevirtual #77                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.isUnbounded:()Z
     422: ifeq          439
     425: aload_0
     426: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     429: aload         6
     431: invokeinterface #51,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     436: goto          10
     439: aload_0
     440: iconst_1
     441: putfield      #52                 // Field active:Z
     444: aload_0
     445: getfield      #13                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     448: new           #78                 // class reactor/core/publisher/FluxConcatMap$WeakScalarSubscription
     451: dup
     452: aload         6
     454: aload_0
     455: getfield      #13                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     458: invokespecial #79                 // Method reactor/core/publisher/FluxConcatMap$WeakScalarSubscription."<init>":(Ljava/lang/Object;Lreactor/core/CoreSubscriber;)V
     461: invokevirtual #80                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.set:(Lorg/reactivestreams/Subscription;)V
     464: goto          483
     467: aload_0
     468: iconst_1
     469: putfield      #52                 // Field active:Z
     472: aload         4
     474: aload_0
     475: getfield      #13                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     478: invokeinterface #81,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     483: getstatic     #59                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     486: aload_0
     487: invokevirtual #82                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     490: ifne          10
     493: goto          496
     496: return
    Exception table:
       from    to  target type
          76    86    89   Class java/lang/Throwable
         180   200   203   Class java/lang/Throwable
         327   336   339   Class java/lang/Throwable

  static {};
    Code:
       0: ldc           #83                 // class reactor/core/publisher/FluxConcatMap$ConcatMapDelayed
       2: ldc           #65                 // class java/lang/Throwable
       4: ldc           #84                 // String error
       6: invokestatic  #85                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #48                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #83                 // class reactor/core/publisher/FluxConcatMap$ConcatMapDelayed
      14: ldc           #86                 // String wip
      16: invokestatic  #87                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: putstatic     #59                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: return
}
