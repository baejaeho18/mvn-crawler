Compiled from "FluxOnBackpressureBuffer.java"
final class reactor.core.publisher.FluxOnBackpressureBuffer<O> extends reactor.core.publisher.FluxOperator<O, O> implements reactor.core.Fuseable {
  final java.util.function.Consumer<? super O> onOverflow;

  final int bufferSize;

  final boolean unbounded;

  final boolean delayError;

  reactor.core.publisher.FluxOnBackpressureBuffer(reactor.core.publisher.Flux<? extends O>, int, boolean, java.util.function.Consumer<? super O>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: iload_2
       6: iconst_1
       7: if_icmpge     20
      10: new           #2                  // class java/lang/IllegalArgumentException
      13: dup
      14: ldc           #3                  // String Buffer Size must be strictly positive
      16: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: iload_2
      22: putfield      #5                  // Field bufferSize:I
      25: aload_0
      26: iload_3
      27: putfield      #6                  // Field unbounded:Z
      30: aload_0
      31: aload         4
      33: putfield      #7                  // Field onOverflow:Ljava/util/function/Consumer;
      36: aload_0
      37: iload_3
      38: ifne          46
      41: aload         4
      43: ifnull        50
      46: iconst_1
      47: goto          51
      50: iconst_0
      51: putfield      #8                  // Field delayError:Z
      54: return

  public void subscribe(reactor.core.CoreSubscriber<? super O>);
    Code:
       0: aload_0
       1: getfield      #9                  // Field source:Lreactor/core/publisher/Flux;
       4: new           #10                 // class reactor/core/publisher/FluxOnBackpressureBuffer$BackpressureBufferSubscriber
       7: dup
       8: aload_1
       9: aload_0
      10: getfield      #5                  // Field bufferSize:I
      13: aload_0
      14: getfield      #6                  // Field unbounded:Z
      17: aload_0
      18: getfield      #8                  // Field delayError:Z
      21: aload_0
      22: getfield      #7                  // Field onOverflow:Ljava/util/function/Consumer;
      25: invokespecial #11                 // Method reactor/core/publisher/FluxOnBackpressureBuffer$BackpressureBufferSubscriber."<init>":(Lreactor/core/CoreSubscriber;IZZLjava/util/function/Consumer;)V
      28: invokevirtual #12                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      31: return

  public int getPrefetch();
    Code:
       0: ldc           #14                 // int 2147483647
       2: ireturn
}
