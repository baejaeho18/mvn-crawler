Compiled from "FluxOnAssembly.java"
final class reactor.core.publisher.FluxOnAssembly<T> extends reactor.core.publisher.FluxOperator<T, T> implements reactor.core.Fuseable, reactor.core.publisher.AssemblyOp {
  final reactor.core.publisher.FluxOnAssembly$AssemblySnapshot snapshotStack;

  reactor.core.publisher.FluxOnAssembly(reactor.core.publisher.Flux<? extends T>, reactor.core.publisher.FluxOnAssembly$AssemblySnapshot);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field snapshotStack:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
      10: return

  public java.lang.String stepName();
    Code:
       0: aload_0
       1: getfield      #2                  // Field snapshotStack:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
       4: invokevirtual #3                  // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshot.operatorAssemblyInformation:()Ljava/lang/String;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #4                  // Field reactor/core/Scannable$Attr.ACTUAL_METADATA:Lreactor/core/Scannable$Attr;
       4: if_acmpne     26
       7: aload_0
       8: getfield      #2                  // Field snapshotStack:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
      11: getfield      #5                  // Field reactor/core/publisher/FluxOnAssembly$AssemblySnapshot.checkpointed:Z
      14: ifne          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: invokestatic  #6                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      25: areturn
      26: aload_0
      27: aload_1
      28: invokespecial #7                  // Method reactor/core/publisher/FluxOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      31: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field snapshotStack:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
       4: invokevirtual #3                  // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshot.operatorAssemblyInformation:()Ljava/lang/String;
       7: areturn

  static void fillStacktraceHeader(java.lang.StringBuilder, java.lang.Class<?>, java.lang.String);
    Code:
       0: aload_0
       1: ldc           #8                  // String \nAssembly trace from producer [
       3: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       6: aload_1
       7: invokevirtual #10                 // Method java/lang/Class.getName:()Ljava/lang/String;
      10: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      13: ldc           #11                 // String ]
      15: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      18: pop
      19: aload_2
      20: ifnull        39
      23: aload_0
      24: ldc           #12                 // String , described as [
      26: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_2
      30: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: ldc           #11                 // String ]
      35: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: pop
      39: aload_0
      40: ldc           #13                 // String  :\n
      42: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: pop
      46: return

  static <T> void subscribe(reactor.core.CoreSubscriber<? super T>, reactor.core.publisher.Flux<? extends T>, reactor.core.publisher.FluxOnAssembly$AssemblySnapshot);
    Code:
       0: aload_2
       1: ifnull        47
       4: aload_0
       5: instanceof    #14                 // class reactor/core/Fuseable$ConditionalSubscriber
       8: ifeq          33
      11: aload_0
      12: checkcast     #14                 // class reactor/core/Fuseable$ConditionalSubscriber
      15: astore_3
      16: aload_1
      17: new           #15                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber
      20: dup
      21: aload_3
      22: aload_2
      23: aload_1
      24: invokespecial #16                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;Lorg/reactivestreams/Publisher;)V
      27: invokevirtual #17                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      30: goto          47
      33: aload_1
      34: new           #18                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber
      37: dup
      38: aload_0
      39: aload_2
      40: aload_1
      41: invokespecial #19                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;Lorg/reactivestreams/Publisher;)V
      44: invokevirtual #17                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      47: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field snapshotStack:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
       4: ifnull        68
       7: aload_1
       8: instanceof    #14                 // class reactor/core/Fuseable$ConditionalSubscriber
      11: ifeq          45
      14: aload_1
      15: checkcast     #14                 // class reactor/core/Fuseable$ConditionalSubscriber
      18: astore_2
      19: aload_0
      20: getfield      #20                 // Field source:Lreactor/core/publisher/Flux;
      23: new           #15                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber
      26: dup
      27: aload_2
      28: aload_0
      29: getfield      #2                  // Field snapshotStack:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
      32: aload_0
      33: getfield      #20                 // Field source:Lreactor/core/publisher/Flux;
      36: invokespecial #16                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;Lorg/reactivestreams/Publisher;)V
      39: invokevirtual #17                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      42: goto          68
      45: aload_0
      46: getfield      #20                 // Field source:Lreactor/core/publisher/Flux;
      49: new           #18                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber
      52: dup
      53: aload_1
      54: aload_0
      55: getfield      #2                  // Field snapshotStack:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;
      58: aload_0
      59: getfield      #20                 // Field source:Lreactor/core/publisher/Flux;
      62: invokespecial #19                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;Lorg/reactivestreams/Publisher;)V
      65: invokevirtual #17                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      68: return

  static int getParentOrThis(reactor.core.Scannable);
    Code:
       0: aload_0
       1: invokeinterface #21,  1           // InterfaceMethod reactor/core/Scannable.parents:()Ljava/util/stream/Stream;
       6: invokedynamic #22,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      11: invokeinterface #23,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      16: invokeinterface #24,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      21: invokedynamic #25,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      26: invokevirtual #26                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      29: aload_0
      30: invokevirtual #27                 // Method java/lang/Object.hashCode:()I
      33: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      36: invokevirtual #29                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      39: checkcast     #30                 // class java/lang/Integer
      42: invokevirtual #31                 // Method java/lang/Integer.intValue:()I
      45: ireturn

  private static boolean lambda$getParentOrThis$0(reactor.core.Scannable);
    Code:
       0: aload_0
       1: instanceof    #32                 // class reactor/core/publisher/AssemblyOp
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn
}
