Compiled from "FluxUsing.java"
final class reactor.core.publisher.FluxUsing$UsingFuseableSubscriber<T, S> implements reactor.core.publisher.InnerOperator<T, T>, reactor.core.Fuseable$QueueSubscription<T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final java.util.function.Consumer<? super S> resourceCleanup;

  final S resource;

  final boolean eager;

  reactor.core.Fuseable$QueueSubscription<T> s;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxUsing$UsingFuseableSubscriber> WIP;

  int mode;

  reactor.core.publisher.FluxUsing$UsingFuseableSubscriber(reactor.core.CoreSubscriber<? super T>, java.util.function.Consumer<? super S>, S, boolean);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #4                  // Field resourceCleanup:Ljava/util/function/Consumer;
      14: aload_0
      15: aload_3
      16: putfield      #5                  // Field resource:Ljava/lang/Object;
      19: aload_0
      20: iload         4
      22: putfield      #6                  // Field eager:Z
      25: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #7                  // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpeq     14
       7: aload_1
       8: getstatic     #8                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      11: if_acmpne     31
      14: aload_0
      15: getfield      #9                  // Field wip:I
      18: iconst_1
      19: if_icmpne     26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: invokestatic  #10                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      30: areturn
      31: aload_1
      32: getstatic     #11                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      35: if_acmpne     43
      38: aload_0
      39: getfield      #12                 // Field s:Lreactor/core/Fuseable$QueueSubscription;
      42: areturn
      43: aload_0
      44: aload_1
      45: invokespecial #13                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      48: areturn

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #12                 // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: lload_1
       5: invokeinterface #14,  3           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.request:(J)V
      10: return

  public void cancel();
    Code:
       0: getstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          25
      12: aload_0
      13: getfield      #12                 // Field s:Lreactor/core/Fuseable$QueueSubscription;
      16: invokeinterface #17,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.cancel:()V
      21: aload_0
      22: invokevirtual #18                 // Method cleanup:()V
      25: return

  void cleanup();
    Code:
       0: aload_0
       1: getfield      #4                  // Field resourceCleanup:Ljava/util/function/Consumer;
       4: aload_0
       5: getfield      #5                  // Field resource:Ljava/lang/Object;
       8: invokeinterface #19,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      13: goto          30
      16: astore_1
      17: aload_1
      18: aload_0
      19: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      22: invokeinterface #21,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      27: invokestatic  #22                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      30: return
    Exception table:
       from    to  target type
           0    13    16   Class java/lang/Throwable

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #12                 // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: aload_1
       5: invokestatic  #23                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          29
      11: aload_0
      12: aload_1
      13: checkcast     #24                 // class reactor/core/Fuseable$QueueSubscription
      16: putfield      #12                 // Field s:Lreactor/core/Fuseable$QueueSubscription;
      19: aload_0
      20: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      23: aload_0
      24: invokeinterface #25,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      29: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #26,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      10: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #6                  // Field eager:Z
       4: ifeq          56
       7: getstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_0
      12: iconst_1
      13: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      16: ifeq          56
      19: aload_0
      20: getfield      #4                  // Field resourceCleanup:Ljava/util/function/Consumer;
      23: aload_0
      24: getfield      #5                  // Field resource:Ljava/lang/Object;
      27: invokeinterface #19,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      32: goto          56
      35: astore_2
      36: aload_2
      37: aload_0
      38: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      41: invokeinterface #21,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      46: invokestatic  #27                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      49: astore_3
      50: aload_3
      51: aload_1
      52: invokestatic  #28                 // Method reactor/core/Exceptions.addSuppressed:(Ljava/lang/Throwable;Ljava/lang/Throwable;)Ljava/lang/Throwable;
      55: astore_1
      56: aload_0
      57: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      60: aload_1
      61: invokeinterface #29,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      66: aload_0
      67: getfield      #6                  // Field eager:Z
      70: ifne          89
      73: getstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      76: aload_0
      77: iconst_0
      78: iconst_1
      79: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      82: ifeq          89
      85: aload_0
      86: invokevirtual #18                 // Method cleanup:()V
      89: return
    Exception table:
       from    to  target type
          19    32    35   Class java/lang/Throwable

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #6                  // Field eager:Z
       4: ifeq          59
       7: getstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_0
      12: iconst_1
      13: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      16: ifeq          59
      19: aload_0
      20: getfield      #4                  // Field resourceCleanup:Ljava/util/function/Consumer;
      23: aload_0
      24: getfield      #5                  // Field resource:Ljava/lang/Object;
      27: invokeinterface #19,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      32: goto          59
      35: astore_1
      36: aload_0
      37: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      40: aload_1
      41: aload_0
      42: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      45: invokeinterface #21,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      50: invokestatic  #27                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      53: invokeinterface #29,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      58: return
      59: aload_0
      60: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      63: invokeinterface #30,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      68: aload_0
      69: getfield      #6                  // Field eager:Z
      72: ifne          91
      75: getstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      78: aload_0
      79: iconst_0
      80: iconst_1
      81: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      84: ifeq          91
      87: aload_0
      88: invokevirtual #18                 // Method cleanup:()V
      91: return
    Exception table:
       from    to  target type
          19    32    35   Class java/lang/Throwable

  public void clear();
    Code:
       0: aload_0
       1: getfield      #12                 // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #31,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.clear:()V
       9: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #12                 // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #32,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.isEmpty:()Z
       9: ireturn

  public T poll();
    Code:
       0: aload_0
       1: getfield      #12                 // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #33,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.poll:()Ljava/lang/Object;
       9: astore_1
      10: aload_1
      11: ifnonnull     47
      14: aload_0
      15: getfield      #34                 // Field mode:I
      18: iconst_1
      19: if_icmpne     47
      22: getstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      25: aload_0
      26: iconst_0
      27: iconst_1
      28: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      31: ifeq          47
      34: aload_0
      35: getfield      #4                  // Field resourceCleanup:Ljava/util/function/Consumer;
      38: aload_0
      39: getfield      #5                  // Field resource:Ljava/lang/Object;
      42: invokeinterface #19,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      47: aload_1
      48: areturn

  public int requestFusion(int);
    Code:
       0: aload_0
       1: getfield      #12                 // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: iload_1
       5: invokeinterface #35,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      10: istore_2
      11: aload_0
      12: iload_2
      13: putfield      #34                 // Field mode:I
      16: iload_2
      17: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #12                 // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #36,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.size:()I
       9: ireturn

  static {};
    Code:
       0: ldc           #37                 // class reactor/core/publisher/FluxUsing$UsingFuseableSubscriber
       2: ldc           #38                 // String wip
       4: invokestatic  #39                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #15                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
