Compiled from "FluxBuffer.java"
final class reactor.core.publisher.FluxBuffer$BufferOverlappingSubscriber<T, C extends java.util.Collection<? super T>> extends java.util.ArrayDeque<C> implements java.util.function.BooleanSupplier, reactor.core.publisher.InnerOperator<T, C> {
  final reactor.core.CoreSubscriber<? super C> actual;

  final reactor.util.context.Context ctx;

  final java.util.function.Supplier<C> bufferSupplier;

  final int size;

  final int skip;

  org.reactivestreams.Subscription s;

  boolean done;

  long index;

  volatile boolean cancelled;

  long produced;

  volatile int once;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxBuffer$BufferOverlappingSubscriber> ONCE;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxBuffer$BufferOverlappingSubscriber> REQUESTED;

  reactor.core.publisher.FluxBuffer$BufferOverlappingSubscriber(reactor.core.CoreSubscriber<? super C>, int, int, java.util.function.Supplier<C>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/ArrayDeque."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_1
      11: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      16: putfield      #4                  // Field ctx:Lreactor/util/context/Context;
      19: aload_0
      20: iload_2
      21: putfield      #5                  // Field size:I
      24: aload_0
      25: iload_3
      26: putfield      #6                  // Field skip:I
      29: aload_0
      30: aload         4
      32: putfield      #7                  // Field bufferSupplier:Ljava/util/function/Supplier;
      35: return

  public boolean getAsBoolean();
    Code:
       0: aload_0
       1: getfield      #8                  // Field cancelled:Z
       4: ireturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #9                  // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifne          8
       7: return
       8: lload_1
       9: aload_0
      10: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      13: aload_0
      14: getstatic     #10                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      17: aload_0
      18: aload_0
      19: invokestatic  #11                 // Method reactor/core/publisher/DrainUtils.postCompleteRequest:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;Ljava/util/function/BooleanSupplier;)Z
      22: ifeq          26
      25: return
      26: aload_0
      27: getfield      #12                 // Field once:I
      30: ifne          82
      33: getstatic     #13                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      36: aload_0
      37: iconst_0
      38: iconst_1
      39: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      42: ifeq          82
      45: aload_0
      46: getfield      #6                  // Field skip:I
      49: i2l
      50: lload_1
      51: lconst_1
      52: lsub
      53: invokestatic  #15                 // Method reactor/core/publisher/Operators.multiplyCap:(JJ)J
      56: lstore_3
      57: aload_0
      58: getfield      #5                  // Field size:I
      61: i2l
      62: lload_3
      63: invokestatic  #16                 // Method reactor/core/publisher/Operators.addCap:(JJ)J
      66: lstore        5
      68: aload_0
      69: getfield      #17                 // Field s:Lorg/reactivestreams/Subscription;
      72: lload         5
      74: invokeinterface #18,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      79: goto          102
      82: aload_0
      83: getfield      #6                  // Field skip:I
      86: i2l
      87: lload_1
      88: invokestatic  #15                 // Method reactor/core/publisher/Operators.multiplyCap:(JJ)J
      91: lstore_3
      92: aload_0
      93: getfield      #17                 // Field s:Lorg/reactivestreams/Subscription;
      96: lload_3
      97: invokeinterface #18,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     102: return

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #8                  // Field cancelled:Z
       5: aload_0
       6: getfield      #17                 // Field s:Lorg/reactivestreams/Subscription;
       9: invokeinterface #19,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      14: aload_0
      15: invokevirtual #20                 // Method clear:()V
      18: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #17                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #21                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          26
      11: aload_0
      12: aload_1
      13: putfield      #17                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #22,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #23                 // Field done:Z
       4: ifeq          16
       7: aload_1
       8: aload_0
       9: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      12: invokestatic  #24                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      15: return
      16: aload_0
      17: getfield      #25                 // Field index:J
      20: lstore_2
      21: lload_2
      22: aload_0
      23: getfield      #6                  // Field skip:I
      26: i2l
      27: lrem
      28: lconst_0
      29: lcmp
      30: ifne          91
      33: aload_0
      34: getfield      #7                  // Field bufferSupplier:Ljava/util/function/Supplier;
      37: invokeinterface #26,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      42: ldc           #27                 // String The bufferSupplier returned a null buffer
      44: invokestatic  #28                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      47: checkcast     #29                 // class java/util/Collection
      50: astore        4
      52: goto          84
      55: astore        5
      57: aload_0
      58: aload_0
      59: getfield      #17                 // Field s:Lorg/reactivestreams/Subscription;
      62: aload         5
      64: aload_1
      65: aload_0
      66: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      69: invokestatic  #31                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      72: invokevirtual #32                 // Method onError:(Ljava/lang/Throwable;)V
      75: aload_1
      76: aload_0
      77: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      80: invokestatic  #33                 // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      83: return
      84: aload_0
      85: aload         4
      87: invokevirtual #34                 // Method offer:(Ljava/lang/Object;)Z
      90: pop
      91: aload_0
      92: invokevirtual #35                 // Method peek:()Ljava/lang/Object;
      95: checkcast     #29                 // class java/util/Collection
      98: astore        4
     100: aload         4
     102: ifnull        156
     105: aload         4
     107: invokeinterface #36,  1           // InterfaceMethod java/util/Collection.size:()I
     112: iconst_1
     113: iadd
     114: aload_0
     115: getfield      #5                  // Field size:I
     118: if_icmpne     156
     121: aload_0
     122: invokevirtual #37                 // Method poll:()Ljava/lang/Object;
     125: pop
     126: aload         4
     128: aload_1
     129: invokeinterface #38,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
     134: pop
     135: aload_0
     136: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     139: aload         4
     141: invokeinterface #39,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     146: aload_0
     147: dup
     148: getfield      #40                 // Field produced:J
     151: lconst_1
     152: ladd
     153: putfield      #40                 // Field produced:J
     156: aload_0
     157: invokevirtual #41                 // Method iterator:()Ljava/util/Iterator;
     160: astore        5
     162: aload         5
     164: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     169: ifeq          196
     172: aload         5
     174: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     179: checkcast     #29                 // class java/util/Collection
     182: astore        6
     184: aload         6
     186: aload_1
     187: invokeinterface #38,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
     192: pop
     193: goto          162
     196: aload_0
     197: lload_2
     198: lconst_1
     199: ladd
     200: putfield      #25                 // Field index:J
     203: return
    Exception table:
       from    to  target type
          33    52    55   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #23                 // Field done:Z
       4: ifeq          16
       7: aload_1
       8: aload_0
       9: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      12: invokestatic  #44                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      15: return
      16: aload_0
      17: iconst_1
      18: putfield      #23                 // Field done:Z
      21: aload_0
      22: invokevirtual #20                 // Method clear:()V
      25: aload_0
      26: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      29: aload_1
      30: invokeinterface #45,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      35: return

  public void clear();
    Code:
       0: aload_0
       1: invokevirtual #41                 // Method iterator:()Ljava/util/Iterator;
       4: astore_1
       5: aload_1
       6: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      11: ifeq          35
      14: aload_1
      15: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      20: checkcast     #29                 // class java/util/Collection
      23: astore_2
      24: aload_2
      25: aload_0
      26: getfield      #4                  // Field ctx:Lreactor/util/context/Context;
      29: invokestatic  #46                 // Method reactor/core/publisher/Operators.onDiscardMultiple:(Ljava/util/Collection;Lreactor/util/context/Context;)V
      32: goto          5
      35: aload_0
      36: invokespecial #47                 // Method java/util/ArrayDeque.clear:()V
      39: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #23                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #23                 // Field done:Z
      13: aload_0
      14: getfield      #40                 // Field produced:J
      17: lstore_1
      18: lload_1
      19: lconst_0
      20: lcmp
      21: ifeq          33
      24: getstatic     #10                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      27: aload_0
      28: lload_1
      29: invokestatic  #48                 // Method reactor/core/publisher/Operators.produced:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      32: pop2
      33: aload_0
      34: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      37: aload_0
      38: getstatic     #10                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      41: aload_0
      42: aload_0
      43: invokestatic  #49                 // Method reactor/core/publisher/DrainUtils.postComplete:(Lreactor/core/CoreSubscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;Ljava/util/function/BooleanSupplier;)V
      46: return

  public reactor.core.CoreSubscriber<? super C> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #50                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #17                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #51                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #23                 // Field done:Z
      23: invokestatic  #52                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #53                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #8                  // Field cancelled:Z
      38: invokestatic  #52                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aload_1
      43: getstatic     #54                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      46: if_acmpne     62
      49: aload_0
      50: invokevirtual #55                 // Method size:()I
      53: aload_0
      54: getfield      #5                  // Field size:I
      57: imul
      58: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      61: areturn
      62: aload_1
      63: getstatic     #57                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      66: if_acmpne     92
      69: aload_0
      70: invokevirtual #58                 // Method stream:()Ljava/util/stream/Stream;
      73: invokedynamic #59,  0             // InvokeDynamic #0:applyAsInt:()Ljava/util/function/ToIntFunction;
      78: invokeinterface #60,  2           // InterfaceMethod java/util/stream/Stream.mapToInt:(Ljava/util/function/ToIntFunction;)Ljava/util/stream/IntStream;
      83: invokeinterface #61,  1           // InterfaceMethod java/util/stream/IntStream.sum:()I
      88: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      91: areturn
      92: aload_1
      93: getstatic     #62                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      96: if_acmpne     105
      99: ldc           #64                 // int 2147483647
     101: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     104: areturn
     105: aload_1
     106: getstatic     #65                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
     109: if_acmpne     120
     112: aload_0
     113: getfield      #66                 // Field requested:J
     116: invokestatic  #67                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     119: areturn
     120: aload_0
     121: aload_1
     122: invokespecial #68                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     125: areturn

  static {};
    Code:
       0: ldc           #69                 // class reactor/core/publisher/FluxBuffer$BufferOverlappingSubscriber
       2: ldc           #70                 // String once
       4: invokestatic  #71                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #13                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #69                 // class reactor/core/publisher/FluxBuffer$BufferOverlappingSubscriber
      12: ldc           #72                 // String requested
      14: invokestatic  #73                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      17: putstatic     #10                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      20: return
}
