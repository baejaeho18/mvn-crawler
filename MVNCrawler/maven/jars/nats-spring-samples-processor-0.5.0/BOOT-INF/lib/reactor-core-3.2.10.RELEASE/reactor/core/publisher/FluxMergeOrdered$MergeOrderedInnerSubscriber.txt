Compiled from "FluxMergeOrdered.java"
final class reactor.core.publisher.FluxMergeOrdered$MergeOrderedInnerSubscriber<T> implements reactor.core.publisher.InnerOperator<T, T> {
  final reactor.core.publisher.FluxMergeOrdered$MergeOrderedMainProducer<T> parent;

  final int prefetch;

  final int limit;

  final java.util.Queue<T> queue;

  int consumed;

  volatile boolean done;

  volatile org.reactivestreams.Subscription s;

  java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxMergeOrdered$MergeOrderedInnerSubscriber, org.reactivestreams.Subscription> S;

  reactor.core.publisher.FluxMergeOrdered$MergeOrderedInnerSubscriber(reactor.core.publisher.FluxMergeOrdered$MergeOrderedMainProducer<T>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #2                  // class reactor/core/publisher/FluxMergeOrdered$MergeOrderedInnerSubscriber
       7: ldc           #3                  // class org/reactivestreams/Subscription
       9: ldc           #4                  // String s
      11: invokestatic  #5                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      14: putfield      #6                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      17: aload_0
      18: aload_1
      19: putfield      #7                  // Field parent:Lreactor/core/publisher/FluxMergeOrdered$MergeOrderedMainProducer;
      22: aload_0
      23: iload_2
      24: putfield      #8                  // Field prefetch:I
      27: aload_0
      28: iload_2
      29: iload_2
      30: iconst_2
      31: ishr
      32: isub
      33: putfield      #9                  // Field limit:I
      36: aload_0
      37: invokestatic  #10                 // Method reactor/util/concurrent/Queues.small:()Ljava/util/function/Supplier;
      40: invokeinterface #11,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      45: checkcast     #12                 // class java/util/Queue
      48: putfield      #13                 // Field queue:Ljava/util/Queue;
      51: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #6                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       4: aload_0
       5: aload_1
       6: invokestatic  #14                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       9: ifeq          23
      12: aload_1
      13: aload_0
      14: getfield      #8                  // Field prefetch:I
      17: i2l
      18: invokeinterface #15,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      23: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #13                 // Field queue:Ljava/util/Queue;
       4: aload_1
       5: invokeinterface #16,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: getfield      #7                  // Field parent:Lreactor/core/publisher/FluxMergeOrdered$MergeOrderedMainProducer;
      15: invokevirtual #17                 // Method reactor/core/publisher/FluxMergeOrdered$MergeOrderedMainProducer.drain:()V
      18: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #7                  // Field parent:Lreactor/core/publisher/FluxMergeOrdered$MergeOrderedMainProducer;
       4: aload_0
       5: aload_1
       6: invokevirtual #18                 // Method reactor/core/publisher/FluxMergeOrdered$MergeOrderedMainProducer.onInnerError:(Lreactor/core/publisher/FluxMergeOrdered$MergeOrderedInnerSubscriber;Ljava/lang/Throwable;)V
       9: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #19                 // Field done:Z
       5: aload_0
       6: getfield      #7                  // Field parent:Lreactor/core/publisher/FluxMergeOrdered$MergeOrderedMainProducer;
       9: invokevirtual #17                 // Method reactor/core/publisher/FluxMergeOrdered$MergeOrderedMainProducer.drain:()V
      12: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #20                 // Field consumed:I
       4: iconst_1
       5: iadd
       6: istore_3
       7: iload_3
       8: aload_0
       9: getfield      #9                  // Field limit:I
      12: if_icmpne     44
      15: aload_0
      16: iconst_0
      17: putfield      #20                 // Field consumed:I
      20: aload_0
      21: getfield      #21                 // Field s:Lorg/reactivestreams/Subscription;
      24: astore        4
      26: aload         4
      28: aload_0
      29: if_acmpeq     41
      32: aload         4
      34: iload_3
      35: i2l
      36: invokeinterface #15,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      41: goto          49
      44: aload_0
      45: iload_3
      46: putfield      #20                 // Field consumed:I
      49: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #6                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       4: aload_0
       5: aload_0
       6: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #3                  // class org/reactivestreams/Subscription
      12: astore_1
      13: aload_1
      14: ifnull        28
      17: aload_1
      18: aload_0
      19: if_acmpeq     28
      22: aload_1
      23: invokeinterface #23,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      28: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #7                  // Field parent:Lreactor/core/publisher/FluxMergeOrdered$MergeOrderedMainProducer;
       4: getfield      #24                 // Field reactor/core/publisher/FluxMergeOrdered$MergeOrderedMainProducer.actual:Lreactor/core/CoreSubscriber;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #25                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #7                  // Field parent:Lreactor/core/publisher/FluxMergeOrdered$MergeOrderedMainProducer;
      11: areturn
      12: aload_1
      13: getstatic     #26                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #21                 // Field s:Lorg/reactivestreams/Subscription;
      23: areturn
      24: aload_1
      25: getstatic     #27                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      28: if_acmpne     39
      31: aload_0
      32: getfield      #8                  // Field prefetch:I
      35: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      38: areturn
      39: aload_1
      40: getstatic     #29                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      43: if_acmpne     54
      46: aload_0
      47: getfield      #19                 // Field done:Z
      50: invokestatic  #30                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      53: areturn
      54: aload_1
      55: getstatic     #31                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      58: if_acmpne     74
      61: aload_0
      62: getfield      #13                 // Field queue:Ljava/util/Queue;
      65: invokeinterface #32,  1           // InterfaceMethod java/util/Queue.size:()I
      70: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      73: areturn
      74: aconst_null
      75: areturn
}
