Compiled from "MonoProcessor.java"
public final class reactor.core.publisher.MonoProcessor<O> extends reactor.core.publisher.Mono<O> implements org.reactivestreams.Processor<O, O>, reactor.core.CoreSubscriber<O>, reactor.core.Disposable, org.reactivestreams.Subscription, reactor.core.Scannable, java.util.function.LongSupplier {
  final reactor.util.concurrent.WaitStrategy waitStrategy;

  volatile reactor.core.publisher.MonoProcessor$NextInner<O>[] subscribers;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoProcessor, reactor.core.publisher.MonoProcessor$NextInner[]> SUBSCRIBERS;

  static final reactor.core.publisher.MonoProcessor$NextInner[] EMPTY;

  static final reactor.core.publisher.MonoProcessor$NextInner[] TERMINATED;

  static final reactor.core.publisher.MonoProcessor$NextInner[] EMPTY_WITH_SOURCE;

  org.reactivestreams.Publisher<? extends O> source;

  java.lang.Throwable error;

  O value;

  volatile org.reactivestreams.Subscription subscription;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoProcessor, org.reactivestreams.Subscription> UPSTREAM;

  public static <T> reactor.core.publisher.MonoProcessor<T> create();
    Code:
       0: new           #1                  // class reactor/core/publisher/MonoProcessor
       3: dup
       4: aconst_null
       5: invokespecial #2                  // Method "<init>":(Lorg/reactivestreams/Publisher;)V
       8: areturn

  public static <T> reactor.core.publisher.MonoProcessor<T> create(reactor.util.concurrent.WaitStrategy);
    Code:
       0: new           #1                  // class reactor/core/publisher/MonoProcessor
       3: dup
       4: aconst_null
       5: aload_0
       6: invokespecial #3                  // Method "<init>":(Lorg/reactivestreams/Publisher;Lreactor/util/concurrent/WaitStrategy;)V
       9: areturn

  reactor.core.publisher.MonoProcessor(org.reactivestreams.Publisher<? extends O>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #4                  // Method reactor/util/concurrent/WaitStrategy.sleeping:()Lreactor/util/concurrent/WaitStrategy;
       5: invokespecial #3                  // Method "<init>":(Lorg/reactivestreams/Publisher;Lreactor/util/concurrent/WaitStrategy;)V
       8: return

  reactor.core.publisher.MonoProcessor(org.reactivestreams.Publisher<? extends O>, reactor.util.concurrent.WaitStrategy);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method reactor/core/publisher/Mono."<init>":()V
       4: aload_0
       5: aload_2
       6: ldc           #6                  // String waitStrategy
       8: invokestatic  #7                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #8                  // class reactor/util/concurrent/WaitStrategy
      14: putfield      #9                  // Field waitStrategy:Lreactor/util/concurrent/WaitStrategy;
      17: aload_0
      18: aload_1
      19: putfield      #10                 // Field source:Lorg/reactivestreams/Publisher;
      22: getstatic     #11                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      25: aload_0
      26: aload_1
      27: ifnull        36
      30: getstatic     #12                 // Field EMPTY_WITH_SOURCE:[Lreactor/core/publisher/MonoProcessor$NextInner;
      33: goto          39
      36: getstatic     #13                 // Field EMPTY:[Lreactor/core/publisher/MonoProcessor$NextInner;
      39: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      42: return

  public final void cancel();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method isTerminated:()Z
       4: ifeq          8
       7: return
       8: getstatic     #16                 // Field UPSTREAM:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      11: aload_0
      12: invokestatic  #17                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      15: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: checkcast     #19                 // class org/reactivestreams/Subscription
      21: astore_1
      22: aload_1
      23: invokestatic  #17                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      26: if_acmpne     30
      29: return
      30: aload_0
      31: aconst_null
      32: putfield      #10                 // Field source:Lorg/reactivestreams/Publisher;
      35: aload_1
      36: ifnull        45
      39: aload_1
      40: invokeinterface #20,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      45: return

  public void dispose();
    Code:
       0: getstatic     #16                 // Field UPSTREAM:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #17                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #19                 // class org/reactivestreams/Subscription
      13: astore_1
      14: aload_1
      15: invokestatic  #17                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      18: if_acmpne     22
      21: return
      22: aload_0
      23: aconst_null
      24: putfield      #10                 // Field source:Lorg/reactivestreams/Publisher;
      27: aload_1
      28: ifnull        37
      31: aload_1
      32: invokeinterface #20,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      37: getstatic     #11                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      40: aload_0
      41: getstatic     #21                 // Field TERMINATED:[Lreactor/core/publisher/MonoProcessor$NextInner;
      44: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      47: checkcast     #22                 // class "[Lreactor/core/publisher/MonoProcessor$NextInner;"
      50: dup
      51: astore_2
      52: getstatic     #21                 // Field TERMINATED:[Lreactor/core/publisher/MonoProcessor$NextInner;
      55: if_acmpeq     115
      58: new           #23                 // class java/util/concurrent/CancellationException
      61: dup
      62: ldc           #24                 // String Disposed
      64: invokespecial #25                 // Method java/util/concurrent/CancellationException."<init>":(Ljava/lang/String;)V
      67: astore_3
      68: aload_0
      69: aload_3
      70: putfield      #26                 // Field error:Ljava/lang/Throwable;
      73: aload_0
      74: aconst_null
      75: putfield      #27                 // Field value:Ljava/lang/Object;
      78: aload_2
      79: astore        4
      81: aload         4
      83: arraylength
      84: istore        5
      86: iconst_0
      87: istore        6
      89: iload         6
      91: iload         5
      93: if_icmpge     115
      96: aload         4
      98: iload         6
     100: aaload
     101: astore        7
     103: aload         7
     105: aload_3
     106: invokevirtual #28                 // Method reactor/core/publisher/MonoProcessor$NextInner.onError:(Ljava/lang/Throwable;)V
     109: iinc          6, 1
     112: goto          89
     115: aload_0
     116: getfield      #9                  // Field waitStrategy:Lreactor/util/concurrent/WaitStrategy;
     119: invokevirtual #29                 // Method reactor/util/concurrent/WaitStrategy.signalAllWhenBlocking:()V
     122: return

  public O block();
    Code:
       0: aload_0
       1: getstatic     #30                 // Field reactor/util/concurrent/WaitStrategy.NOOP_SPIN_OBSERVER:Ljava/lang/Runnable;
       4: invokevirtual #31                 // Method block:(Ljava/lang/Runnable;)Ljava/lang/Object;
       7: areturn

  public O block(java.time.Duration);
    Code:
       0: invokestatic  #32                 // Method java/lang/System.nanoTime:()J
       3: aload_1
       4: invokevirtual #33                 // Method java/time/Duration.toNanos:()J
       7: ladd
       8: lstore_2
       9: lload_2
      10: invokedynamic #34,  0             // InvokeDynamic #0:run:(J)Ljava/lang/Runnable;
      15: astore        4
      17: aload_0
      18: aload         4
      20: invokevirtual #31                 // Method block:(Ljava/lang/Runnable;)Ljava/lang/Object;
      23: areturn

  O block(java.lang.Runnable);
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method isPending:()Z
       4: ifne          12
       7: aload_0
       8: invokevirtual #36                 // Method peek:()Ljava/lang/Object;
      11: areturn
      12: aload_0
      13: invokevirtual #37                 // Method connect:()V
      16: aload_0
      17: getfield      #9                  // Field waitStrategy:Lreactor/util/concurrent/WaitStrategy;
      20: ldc2_w        #38                 // long 3l
      23: aload_0
      24: aload_1
      25: invokevirtual #40                 // Method reactor/util/concurrent/WaitStrategy.waitFor:(JLjava/util/function/LongSupplier;Ljava/lang/Runnable;)J
      28: lstore_2
      29: lload_2
      30: l2i
      31: tableswitch   { // 3 to 5
                     3: 56
                     4: 61
                     5: 63
               default: 91
          }
      56: aload_0
      57: getfield      #27                 // Field value:Ljava/lang/Object;
      60: areturn
      61: aconst_null
      62: areturn
      63: aload_0
      64: getfield      #26                 // Field error:Ljava/lang/Throwable;
      67: invokestatic  #41                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      70: astore        4
      72: aload         4
      74: new           #42                 // class java/lang/Exception
      77: dup
      78: ldc           #43                 // String Mono#block terminated with an error
      80: invokespecial #44                 // Method java/lang/Exception."<init>":(Ljava/lang/String;)V
      83: invokestatic  #45                 // Method reactor/core/Exceptions.addSuppressed:(Ljava/lang/RuntimeException;Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      86: astore        4
      88: aload         4
      90: athrow
      91: new           #46                 // class java/lang/IllegalStateException
      94: dup
      95: ldc           #47                 // String Mono has been cancelled
      97: invokespecial #48                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     100: athrow
     101: astore_2
     102: aload_2
     103: invokestatic  #50                 // Method reactor/util/concurrent/WaitStrategy.isAlert:(Ljava/lang/Throwable;)Z
     106: ifeq          123
     109: aload_0
     110: invokevirtual #51                 // Method cancel:()V
     113: new           #46                 // class java/lang/IllegalStateException
     116: dup
     117: ldc           #52                 // String Timeout on Mono blocking read
     119: invokespecial #48                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     122: athrow
     123: aload_2
     124: athrow
     125: astore_2
     126: invokestatic  #54                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     129: invokevirtual #55                 // Method java/lang/Thread.interrupt:()V
     132: new           #46                 // class java/lang/IllegalStateException
     135: dup
     136: ldc           #56                 // String Thread Interruption on Mono blocking read
     138: invokespecial #48                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     141: athrow
    Exception table:
       from    to  target type
          16    60   101   Class java/lang/RuntimeException
          61    62   101   Class java/lang/RuntimeException
          63   101   101   Class java/lang/RuntimeException
           0    11   125   Class java/lang/InterruptedException
          12    60   125   Class java/lang/InterruptedException
          61    62   125   Class java/lang/InterruptedException
          63   125   125   Class java/lang/InterruptedException

  public long getAsLong();
    Code:
       0: aload_0
       1: getfield      #57                 // Field subscribers:[Lreactor/core/publisher/MonoProcessor$NextInner;
       4: astore_1
       5: aload_1
       6: getstatic     #21                 // Field TERMINATED:[Lreactor/core/publisher/MonoProcessor$NextInner;
       9: if_acmpne     38
      12: aload_0
      13: getfield      #26                 // Field error:Ljava/lang/Throwable;
      16: ifnull        23
      19: ldc2_w        #58                 // long 5l
      22: lreturn
      23: aload_0
      24: getfield      #27                 // Field value:Ljava/lang/Object;
      27: ifnonnull     34
      30: ldc2_w        #60                 // long 4l
      33: lreturn
      34: ldc2_w        #38                 // long 3l
      37: lreturn
      38: aload_0
      39: getfield      #62                 // Field subscription:Lorg/reactivestreams/Subscription;
      42: invokestatic  #17                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      45: if_acmpne     52
      48: ldc2_w        #63                 // long -1l
      51: lreturn
      52: aload_0
      53: getfield      #57                 // Field subscribers:[Lreactor/core/publisher/MonoProcessor$NextInner;
      56: getstatic     #13                 // Field EMPTY:[Lreactor/core/publisher/MonoProcessor$NextInner;
      59: if_acmpeq     76
      62: aload_0
      63: getfield      #57                 // Field subscribers:[Lreactor/core/publisher/MonoProcessor$NextInner;
      66: getstatic     #12                 // Field EMPTY_WITH_SOURCE:[Lreactor/core/publisher/MonoProcessor$NextInner;
      69: if_acmpeq     76
      72: ldc2_w        #65                 // long 2l
      75: lreturn
      76: lconst_0
      77: lreturn

  public final java.lang.Throwable getError();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method isTerminated:()Z
       4: ifeq          14
       7: aload_0
       8: getfield      #26                 // Field error:Ljava/lang/Throwable;
      11: goto          15
      14: aconst_null
      15: areturn

  public boolean isCancelled();
    Code:
       0: aload_0
       1: getfield      #62                 // Field subscription:Lorg/reactivestreams/Subscription;
       4: invokestatic  #17                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpne     21
      10: aload_0
      11: invokevirtual #15                 // Method isTerminated:()Z
      14: ifne          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public final boolean isError();
    Code:
       0: aload_0
       1: invokevirtual #67                 // Method getError:()Ljava/lang/Throwable;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public final boolean isSuccess();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method isTerminated:()Z
       4: ifeq          18
       7: aload_0
       8: getfield      #26                 // Field error:Ljava/lang/Throwable;
      11: ifnonnull     18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public final boolean isTerminated();
    Code:
       0: aload_0
       1: getfield      #57                 // Field subscribers:[Lreactor/core/publisher/MonoProcessor$NextInner;
       4: getstatic     #21                 // Field TERMINATED:[Lreactor/core/publisher/MonoProcessor$NextInner;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public boolean isDisposed();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method isTerminated:()Z
       4: ifne          14
       7: aload_0
       8: invokevirtual #68                 // Method isCancelled:()Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public final void onComplete();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #69                 // Method onNext:(Ljava/lang/Object;)V
       5: return

  public final void onError(java.lang.Throwable);
    Code:
       0: aload_1
       1: ldc           #70                 // String onError cannot be null
       3: invokestatic  #7                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: getstatic     #16                 // Field UPSTREAM:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      10: aload_0
      11: invokestatic  #17                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      14: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      17: invokestatic  #17                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      20: if_acmpne     28
      23: aload_1
      24: invokestatic  #71                 // Method reactor/core/publisher/Operators.onErrorDroppedMulticast:(Ljava/lang/Throwable;)V
      27: return
      28: aload_0
      29: aload_1
      30: putfield      #26                 // Field error:Ljava/lang/Throwable;
      33: aload_0
      34: aconst_null
      35: putfield      #27                 // Field value:Ljava/lang/Object;
      38: aload_0
      39: aconst_null
      40: putfield      #10                 // Field source:Lorg/reactivestreams/Publisher;
      43: getstatic     #11                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      46: aload_0
      47: getstatic     #21                 // Field TERMINATED:[Lreactor/core/publisher/MonoProcessor$NextInner;
      50: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      53: checkcast     #22                 // class "[Lreactor/core/publisher/MonoProcessor$NextInner;"
      56: astore_2
      57: aload_2
      58: arraylength
      59: istore_3
      60: iconst_0
      61: istore        4
      63: iload         4
      65: iload_3
      66: if_icmpge     87
      69: aload_2
      70: iload         4
      72: aaload
      73: astore        5
      75: aload         5
      77: aload_1
      78: invokevirtual #28                 // Method reactor/core/publisher/MonoProcessor$NextInner.onError:(Ljava/lang/Throwable;)V
      81: iinc          4, 1
      84: goto          63
      87: aload_0
      88: getfield      #9                  // Field waitStrategy:Lreactor/util/concurrent/WaitStrategy;
      91: invokevirtual #29                 // Method reactor/util/concurrent/WaitStrategy.signalAllWhenBlocking:()V
      94: return

  public final void onNext(O);
    Code:
       0: getstatic     #16                 // Field UPSTREAM:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #17                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #19                 // class org/reactivestreams/Subscription
      13: dup
      14: astore_2
      15: invokestatic  #17                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      18: if_acmpne     30
      21: aload_1
      22: ifnull        29
      25: aload_1
      26: invokestatic  #72                 // Method reactor/core/publisher/Operators.onNextDroppedMulticast:(Ljava/lang/Object;)V
      29: return
      30: aload_0
      31: aload_1
      32: putfield      #27                 // Field value:Ljava/lang/Object;
      35: aload_0
      36: getfield      #10                 // Field source:Lorg/reactivestreams/Publisher;
      39: astore_3
      40: aload_0
      41: aconst_null
      42: putfield      #10                 // Field source:Lorg/reactivestreams/Publisher;
      45: getstatic     #11                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      48: aload_0
      49: getstatic     #21                 // Field TERMINATED:[Lreactor/core/publisher/MonoProcessor$NextInner;
      52: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      55: checkcast     #22                 // class "[Lreactor/core/publisher/MonoProcessor$NextInner;"
      58: astore        4
      60: aload_1
      61: ifnonnull     104
      64: aload         4
      66: astore        5
      68: aload         5
      70: arraylength
      71: istore        6
      73: iconst_0
      74: istore        7
      76: iload         7
      78: iload         6
      80: if_icmpge     101
      83: aload         5
      85: iload         7
      87: aaload
      88: astore        8
      90: aload         8
      92: invokevirtual #73                 // Method reactor/core/publisher/MonoProcessor$NextInner.onComplete:()V
      95: iinc          7, 1
      98: goto          76
     101: goto          159
     104: aload_2
     105: ifnull        121
     108: aload_3
     109: instanceof    #74                 // class reactor/core/publisher/Mono
     112: ifne          121
     115: aload_2
     116: invokeinterface #20,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     121: aload         4
     123: astore        5
     125: aload         5
     127: arraylength
     128: istore        6
     130: iconst_0
     131: istore        7
     133: iload         7
     135: iload         6
     137: if_icmpge     159
     140: aload         5
     142: iload         7
     144: aaload
     145: astore        8
     147: aload         8
     149: aload_1
     150: invokevirtual #75                 // Method reactor/core/publisher/MonoProcessor$NextInner.complete:(Ljava/lang/Object;)V
     153: iinc          7, 1
     156: goto          133
     159: aload_0
     160: getfield      #9                  // Field waitStrategy:Lreactor/util/concurrent/WaitStrategy;
     163: invokevirtual #29                 // Method reactor/util/concurrent/WaitStrategy.signalAllWhenBlocking:()V
     166: return

  public final void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #16                 // Field UPSTREAM:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #76                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          20
      11: aload_1
      12: ldc2_w        #78                 // long 9223372036854775807l
      15: invokeinterface #80,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      20: return

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #57                 // Field subscribers:[Lreactor/core/publisher/MonoProcessor$NextInner;
       4: invokestatic  #81                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: areturn

  public O peek();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method isTerminated:()Z
       4: ifne          9
       7: aconst_null
       8: areturn
       9: aload_0
      10: getfield      #27                 // Field value:Ljava/lang/Object;
      13: ifnull        21
      16: aload_0
      17: getfield      #27                 // Field value:Ljava/lang/Object;
      20: areturn
      21: aload_0
      22: getfield      #26                 // Field error:Ljava/lang/Throwable;
      25: ifnull        52
      28: aload_0
      29: getfield      #26                 // Field error:Ljava/lang/Throwable;
      32: invokestatic  #41                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      35: astore_1
      36: aload_1
      37: new           #42                 // class java/lang/Exception
      40: dup
      41: ldc           #82                 // String Mono#peek terminated with an error
      43: invokespecial #44                 // Method java/lang/Exception."<init>":(Ljava/lang/String;)V
      46: invokestatic  #45                 // Method reactor/core/Exceptions.addSuppressed:(Ljava/lang/RuntimeException;Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      49: astore_1
      50: aload_1
      51: athrow
      52: aconst_null
      53: areturn

  public final void request(long);
    Code:
       0: lload_1
       1: invokestatic  #83                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: pop
       5: return

  public void subscribe(reactor.core.CoreSubscriber<? super O>);
    Code:
       0: new           #84                 // class reactor/core/publisher/MonoProcessor$NextInner
       3: dup
       4: aload_1
       5: aload_0
       6: invokespecial #85                 // Method reactor/core/publisher/MonoProcessor$NextInner."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/MonoProcessor;)V
       9: astore_2
      10: aload_1
      11: aload_2
      12: invokeinterface #86,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      17: aload_0
      18: aload_2
      19: invokevirtual #87                 // Method add:(Lreactor/core/publisher/MonoProcessor$NextInner;)Z
      22: ifeq          40
      25: aload_2
      26: invokevirtual #88                 // Method reactor/core/publisher/MonoProcessor$NextInner.isCancelled:()Z
      29: ifeq          83
      32: aload_0
      33: aload_2
      34: invokevirtual #89                 // Method remove:(Lreactor/core/publisher/MonoProcessor$NextInner;)V
      37: goto          83
      40: aload_0
      41: getfield      #26                 // Field error:Ljava/lang/Throwable;
      44: astore_3
      45: aload_3
      46: ifnull        59
      49: aload_1
      50: aload_3
      51: invokeinterface #90,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      56: goto          83
      59: aload_0
      60: getfield      #27                 // Field value:Ljava/lang/Object;
      63: astore        4
      65: aload         4
      67: ifnull        79
      70: aload_2
      71: aload         4
      73: invokevirtual #75                 // Method reactor/core/publisher/MonoProcessor$NextInner.complete:(Ljava/lang/Object;)V
      76: goto          83
      79: aload_2
      80: invokevirtual #73                 // Method reactor/core/publisher/MonoProcessor$NextInner.onComplete:()V
      83: return

  void connect();
    Code:
       0: aload_0
       1: getfield      #10                 // Field source:Lorg/reactivestreams/Publisher;
       4: astore_1
       5: aload_1
       6: ifnull        32
       9: getstatic     #11                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: aload_0
      13: getstatic     #12                 // Field EMPTY_WITH_SOURCE:[Lreactor/core/publisher/MonoProcessor$NextInner;
      16: getstatic     #13                 // Field EMPTY:[Lreactor/core/publisher/MonoProcessor$NextInner;
      19: invokevirtual #91                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      22: ifeq          32
      25: aload_1
      26: aload_0
      27: invokeinterface #92,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      32: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #57                 // Field subscribers:[Lreactor/core/publisher/MonoProcessor$NextInner;
       4: invokestatic  #93                 // Method reactor/core/publisher/Operators.multiSubscribersContext:([Lreactor/core/publisher/InnerProducer;)Lreactor/util/context/Context;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method isTerminated:()Z
       4: istore_2
       5: aload_1
       6: getstatic     #94                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       9: if_acmpne     17
      12: iload_2
      13: invokestatic  #95                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      16: areturn
      17: aload_1
      18: getstatic     #96                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      21: if_acmpne     29
      24: aload_0
      25: getfield      #62                 // Field subscription:Lorg/reactivestreams/Subscription;
      28: areturn
      29: aload_1
      30: getstatic     #97                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      33: if_acmpne     41
      36: aload_0
      37: getfield      #26                 // Field error:Ljava/lang/Throwable;
      40: areturn
      41: aload_1
      42: getstatic     #98                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      45: if_acmpne     54
      48: ldc           #100                // int 2147483647
      50: invokestatic  #101                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      53: areturn
      54: aload_1
      55: getstatic     #102                // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      58: if_acmpne     69
      61: aload_0
      62: invokevirtual #68                 // Method isCancelled:()Z
      65: invokestatic  #95                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      68: areturn
      69: aconst_null
      70: areturn

  final boolean isPending();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method isTerminated:()Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public final long downstreamCount();
    Code:
       0: aload_0
       1: getfield      #57                 // Field subscribers:[Lreactor/core/publisher/MonoProcessor$NextInner;
       4: arraylength
       5: i2l
       6: lreturn

  public final boolean hasDownstreams();
    Code:
       0: aload_0
       1: invokevirtual #103                // Method downstreamCount:()J
       4: lconst_0
       5: lcmp
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  boolean add(reactor.core.publisher.MonoProcessor$NextInner<O>);
    Code:
       0: aload_0
       1: getfield      #57                 // Field subscribers:[Lreactor/core/publisher/MonoProcessor$NextInner;
       4: astore_2
       5: aload_2
       6: getstatic     #21                 // Field TERMINATED:[Lreactor/core/publisher/MonoProcessor$NextInner;
       9: if_acmpne     14
      12: iconst_0
      13: ireturn
      14: aload_2
      15: arraylength
      16: istore_3
      17: iload_3
      18: iconst_1
      19: iadd
      20: anewarray     #84                 // class reactor/core/publisher/MonoProcessor$NextInner
      23: astore        4
      25: aload_2
      26: iconst_0
      27: aload         4
      29: iconst_0
      30: iload_3
      31: invokestatic  #104                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      34: aload         4
      36: iload_3
      37: aload_1
      38: aastore
      39: getstatic     #11                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      42: aload_0
      43: aload_2
      44: aload         4
      46: invokevirtual #91                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      49: ifeq          80
      52: aload_0
      53: getfield      #10                 // Field source:Lorg/reactivestreams/Publisher;
      56: astore        5
      58: aload         5
      60: ifnull        78
      63: aload_2
      64: getstatic     #12                 // Field EMPTY_WITH_SOURCE:[Lreactor/core/publisher/MonoProcessor$NextInner;
      67: if_acmpne     78
      70: aload         5
      72: aload_0
      73: invokeinterface #92,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      78: iconst_1
      79: ireturn
      80: goto          0

  void remove(reactor.core.publisher.MonoProcessor$NextInner<O>);
    Code:
       0: aload_0
       1: getfield      #57                 // Field subscribers:[Lreactor/core/publisher/MonoProcessor$NextInner;
       4: astore_2
       5: aload_2
       6: arraylength
       7: istore_3
       8: iload_3
       9: ifne          13
      12: return
      13: iconst_m1
      14: istore        4
      16: iconst_0
      17: istore        5
      19: iload         5
      21: iload_3
      22: if_icmpge     46
      25: aload_2
      26: iload         5
      28: aaload
      29: aload_1
      30: if_acmpne     40
      33: iload         5
      35: istore        4
      37: goto          46
      40: iinc          5, 1
      43: goto          19
      46: iload         4
      48: ifge          52
      51: return
      52: iload_3
      53: iconst_1
      54: if_icmpne     65
      57: getstatic     #13                 // Field EMPTY:[Lreactor/core/publisher/MonoProcessor$NextInner;
      60: astore        5
      62: goto          101
      65: iload_3
      66: iconst_1
      67: isub
      68: anewarray     #84                 // class reactor/core/publisher/MonoProcessor$NextInner
      71: astore        5
      73: aload_2
      74: iconst_0
      75: aload         5
      77: iconst_0
      78: iload         4
      80: invokestatic  #104                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      83: aload_2
      84: iload         4
      86: iconst_1
      87: iadd
      88: aload         5
      90: iload         4
      92: iload_3
      93: iload         4
      95: isub
      96: iconst_1
      97: isub
      98: invokestatic  #104                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     101: getstatic     #11                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     104: aload_0
     105: aload_2
     106: aload         5
     108: invokevirtual #91                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     111: ifeq          115
     114: return
     115: goto          0

  private static void lambda$block$0(long);
    Code:
       0: lload_0
       1: invokestatic  #32                 // Method java/lang/System.nanoTime:()J
       4: lcmp
       5: ifge          11
       8: invokestatic  #105                // Method reactor/util/concurrent/WaitStrategy.alert:()V
      11: return

  static {};
    Code:
       0: ldc           #1                  // class reactor/core/publisher/MonoProcessor
       2: ldc           #22                 // class "[Lreactor/core/publisher/MonoProcessor$NextInner;"
       4: ldc           #106                // String subscribers
       6: invokestatic  #107                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #11                 // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: iconst_0
      13: anewarray     #84                 // class reactor/core/publisher/MonoProcessor$NextInner
      16: putstatic     #13                 // Field EMPTY:[Lreactor/core/publisher/MonoProcessor$NextInner;
      19: iconst_0
      20: anewarray     #84                 // class reactor/core/publisher/MonoProcessor$NextInner
      23: putstatic     #21                 // Field TERMINATED:[Lreactor/core/publisher/MonoProcessor$NextInner;
      26: iconst_0
      27: anewarray     #84                 // class reactor/core/publisher/MonoProcessor$NextInner
      30: putstatic     #12                 // Field EMPTY_WITH_SOURCE:[Lreactor/core/publisher/MonoProcessor$NextInner;
      33: ldc           #1                  // class reactor/core/publisher/MonoProcessor
      35: ldc           #19                 // class org/reactivestreams/Subscription
      37: ldc           #108                // String subscription
      39: invokestatic  #107                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      42: putstatic     #16                 // Field UPSTREAM:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      45: return
}
