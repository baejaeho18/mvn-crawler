Compiled from "FluxDistinctUntilChanged.java"
final class reactor.core.publisher.FluxDistinctUntilChanged<T, K> extends reactor.core.publisher.FluxOperator<T, T> {
  final java.util.function.Function<? super T, K> keyExtractor;

  final java.util.function.BiPredicate<? super K, ? super K> keyComparator;

  reactor.core.publisher.FluxDistinctUntilChanged(reactor.core.publisher.Flux<? extends T>, java.util.function.Function<? super T, K>, java.util.function.BiPredicate<? super K, ? super K>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String keyExtractor
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/function/Function
      15: putfield      #5                  // Field keyExtractor:Ljava/util/function/Function;
      18: aload_0
      19: aload_3
      20: ldc           #6                  // String keyComparator
      22: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      25: checkcast     #7                  // class java/util/function/BiPredicate
      28: putfield      #8                  // Field keyComparator:Ljava/util/function/BiPredicate;
      31: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: instanceof    #9                  // class reactor/core/Fuseable$ConditionalSubscriber
       4: ifeq          36
       7: aload_0
       8: getfield      #10                 // Field source:Lreactor/core/publisher/Flux;
      11: new           #11                 // class reactor/core/publisher/FluxDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber
      14: dup
      15: aload_1
      16: checkcast     #9                  // class reactor/core/Fuseable$ConditionalSubscriber
      19: aload_0
      20: getfield      #5                  // Field keyExtractor:Ljava/util/function/Function;
      23: aload_0
      24: getfield      #8                  // Field keyComparator:Ljava/util/function/BiPredicate;
      27: invokespecial #12                 // Method reactor/core/publisher/FluxDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Ljava/util/function/Function;Ljava/util/function/BiPredicate;)V
      30: invokevirtual #13                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      33: goto          59
      36: aload_0
      37: getfield      #10                 // Field source:Lreactor/core/publisher/Flux;
      40: new           #14                 // class reactor/core/publisher/FluxDistinctUntilChanged$DistinctUntilChangedSubscriber
      43: dup
      44: aload_1
      45: aload_0
      46: getfield      #5                  // Field keyExtractor:Ljava/util/function/Function;
      49: aload_0
      50: getfield      #8                  // Field keyComparator:Ljava/util/function/BiPredicate;
      53: invokespecial #15                 // Method reactor/core/publisher/FluxDistinctUntilChanged$DistinctUntilChangedSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;Ljava/util/function/BiPredicate;)V
      56: invokevirtual #13                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      59: return
}
