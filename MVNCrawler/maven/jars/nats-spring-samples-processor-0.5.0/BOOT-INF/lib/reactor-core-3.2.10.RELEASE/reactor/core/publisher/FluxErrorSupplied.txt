Compiled from "FluxErrorSupplied.java"
final class reactor.core.publisher.FluxErrorSupplied<T> extends reactor.core.publisher.Flux<T> implements reactor.core.Fuseable$ScalarCallable, reactor.core.publisher.SourceProducer<T> {
  final java.util.function.Supplier<java.lang.Throwable> errorSupplier;

  reactor.core.publisher.FluxErrorSupplied(java.util.function.Supplier<java.lang.Throwable>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String errorSupplier
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class java/util/function/Supplier
      14: putfield      #5                  // Field errorSupplier:Ljava/util/function/Supplier;
      17: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field errorSupplier:Ljava/util/function/Supplier;
       4: invokeinterface #6,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       9: ldc           #7                  // String errorSupplier produced a null Throwable
      11: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      14: checkcast     #8                  // class java/lang/Throwable
      17: astore_2
      18: aload_1
      19: aload_2
      20: aload_1
      21: invokeinterface #9,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      26: invokestatic  #10                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      29: invokestatic  #11                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      32: return

  public java.lang.Object call() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #5                  // Field errorSupplier:Ljava/util/function/Supplier;
       4: invokeinterface #6,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       9: ldc           #7                  // String errorSupplier produced a null Throwable
      11: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      14: checkcast     #8                  // class java/lang/Throwable
      17: astore_1
      18: aload_1
      19: instanceof    #12                 // class java/lang/Exception
      22: ifeq          30
      25: aload_1
      26: checkcast     #12                 // class java/lang/Exception
      29: athrow
      30: aload_1
      31: invokestatic  #13                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      34: athrow

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aconst_null
       1: areturn
}
