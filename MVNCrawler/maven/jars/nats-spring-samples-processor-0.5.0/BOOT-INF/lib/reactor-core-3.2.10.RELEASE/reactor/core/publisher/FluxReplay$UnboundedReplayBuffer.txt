Compiled from "FluxReplay.java"
final class reactor.core.publisher.FluxReplay$UnboundedReplayBuffer<T> implements reactor.core.publisher.FluxReplay$ReplayBuffer<T> {
  final int batchSize;

  volatile int size;

  final java.lang.Object[] head;

  java.lang.Object[] tail;

  int tailIndex;

  volatile boolean done;

  java.lang.Throwable error;

  reactor.core.publisher.FluxReplay$UnboundedReplayBuffer(int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #3                  // Field batchSize:I
       9: iload_1
      10: iconst_1
      11: iadd
      12: anewarray     #4                  // class java/lang/Object
      15: astore_2
      16: aload_0
      17: aload_2
      18: putfield      #5                  // Field tail:[Ljava/lang/Object;
      21: aload_0
      22: aload_2
      23: putfield      #6                  // Field head:[Ljava/lang/Object;
      26: return

  public boolean isExpired();
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.Throwable getError();
    Code:
       0: aload_0
       1: getfield      #7                  // Field error:Ljava/lang/Throwable;
       4: areturn

  public int capacity();
    Code:
       0: ldc           #9                  // int 2147483647
       2: ireturn

  public void add(T);
    Code:
       0: aload_0
       1: getfield      #10                 // Field tailIndex:I
       4: istore_2
       5: aload_0
       6: getfield      #5                  // Field tail:[Ljava/lang/Object;
       9: astore_3
      10: iload_2
      11: aload_3
      12: arraylength
      13: iconst_1
      14: isub
      15: if_icmpne     49
      18: aload_3
      19: arraylength
      20: anewarray     #4                  // class java/lang/Object
      23: astore        4
      25: aload         4
      27: iconst_0
      28: aload_1
      29: aastore
      30: aload_0
      31: iconst_1
      32: putfield      #10                 // Field tailIndex:I
      35: aload_3
      36: iload_2
      37: aload         4
      39: aastore
      40: aload_0
      41: aload         4
      43: putfield      #5                  // Field tail:[Ljava/lang/Object;
      46: goto          60
      49: aload_3
      50: iload_2
      51: aload_1
      52: aastore
      53: aload_0
      54: iload_2
      55: iconst_1
      56: iadd
      57: putfield      #10                 // Field tailIndex:I
      60: aload_0
      61: dup
      62: getfield      #11                 // Field size:I
      65: iconst_1
      66: iadd
      67: putfield      #11                 // Field size:I
      70: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: iconst_1
       7: putfield      #12                 // Field done:Z
      10: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #12                 // Field done:Z
       5: return

  void replayNormal(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_1
       3: invokeinterface #13,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.actual:()Lreactor/core/CoreSubscriber;
       8: astore_3
       9: aload_0
      10: getfield      #3                  // Field batchSize:I
      13: istore        4
      15: aload_1
      16: invokeinterface #14,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.requested:()J
      21: lstore        5
      23: lconst_0
      24: lstore        7
      26: aload_1
      27: invokeinterface #15,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:()Ljava/lang/Object;
      32: checkcast     #16                 // class "[Ljava/lang/Object;"
      35: checkcast     #16                 // class "[Ljava/lang/Object;"
      38: astore        9
      40: aload         9
      42: ifnonnull     51
      45: aload_0
      46: getfield      #6                  // Field head:[Ljava/lang/Object;
      49: astore        9
      51: aload_1
      52: invokeinterface #17,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.tailIndex:()I
      57: istore        10
      59: aload_1
      60: invokeinterface #18,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.index:()I
      65: istore        11
      67: lload         7
      69: lload         5
      71: lcmp
      72: ifeq          221
      75: aload_1
      76: invokeinterface #19,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.isCancelled:()Z
      81: ifeq          92
      84: aload_1
      85: aconst_null
      86: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
      91: return
      92: aload_0
      93: getfield      #12                 // Field done:Z
      96: istore        12
      98: iload         11
     100: aload_0
     101: getfield      #11                 // Field size:I
     104: if_icmpne     111
     107: iconst_1
     108: goto          112
     111: iconst_0
     112: istore        13
     114: iload         12
     116: ifeq          160
     119: iload         13
     121: ifeq          160
     124: aload_1
     125: aconst_null
     126: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
     131: aload_0
     132: getfield      #7                  // Field error:Ljava/lang/Throwable;
     135: astore        14
     137: aload         14
     139: ifnull        153
     142: aload_3
     143: aload         14
     145: invokeinterface #21,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     150: goto          159
     153: aload_3
     154: invokeinterface #22,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     159: return
     160: iload         13
     162: ifeq          168
     165: goto          221
     168: iload         10
     170: iload         4
     172: if_icmpne     191
     175: aload         9
     177: iload         10
     179: aaload
     180: checkcast     #16                 // class "[Ljava/lang/Object;"
     183: checkcast     #16                 // class "[Ljava/lang/Object;"
     186: astore        9
     188: iconst_0
     189: istore        10
     191: aload         9
     193: iload         10
     195: aaload
     196: astore        14
     198: aload_3
     199: aload         14
     201: invokeinterface #23,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     206: lload         7
     208: lconst_1
     209: ladd
     210: lstore        7
     212: iinc          10, 1
     215: iinc          11, 1
     218: goto          67
     221: lload         7
     223: lload         5
     225: lcmp
     226: ifne          314
     229: aload_1
     230: invokeinterface #19,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.isCancelled:()Z
     235: ifeq          246
     238: aload_1
     239: aconst_null
     240: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
     245: return
     246: aload_0
     247: getfield      #12                 // Field done:Z
     250: istore        12
     252: iload         11
     254: aload_0
     255: getfield      #11                 // Field size:I
     258: if_icmpne     265
     261: iconst_1
     262: goto          266
     265: iconst_0
     266: istore        13
     268: iload         12
     270: ifeq          314
     273: iload         13
     275: ifeq          314
     278: aload_1
     279: aconst_null
     280: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
     285: aload_0
     286: getfield      #7                  // Field error:Ljava/lang/Throwable;
     289: astore        14
     291: aload         14
     293: ifnull        307
     296: aload_3
     297: aload         14
     299: invokeinterface #21,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     304: goto          313
     307: aload_3
     308: invokeinterface #22,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     313: return
     314: lload         7
     316: lconst_0
     317: lcmp
     318: ifeq          338
     321: lload         5
     323: ldc2_w        #25                 // long 9223372036854775807l
     326: lcmp
     327: ifeq          338
     330: aload_1
     331: lload         7
     333: invokeinterface #27,  3           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.produced:(J)V
     338: aload_1
     339: iload         11
     341: invokeinterface #28,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.index:(I)V
     346: aload_1
     347: iload         10
     349: invokeinterface #29,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.tailIndex:(I)V
     354: aload_1
     355: aload         9
     357: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
     362: aload_1
     363: iload_2
     364: invokeinterface #30,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.leave:(I)I
     369: istore_2
     370: iload_2
     371: ifne          377
     374: goto          380
     377: goto          15
     380: return

  void replayFused(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_1
       3: invokeinterface #13,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.actual:()Lreactor/core/CoreSubscriber;
       8: astore_3
       9: aload_1
      10: invokeinterface #19,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.isCancelled:()Z
      15: ifeq          26
      18: aload_1
      19: aconst_null
      20: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
      25: return
      26: aload_0
      27: getfield      #12                 // Field done:Z
      30: istore        4
      32: aload_3
      33: aconst_null
      34: invokeinterface #23,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      39: iload         4
      41: ifeq          73
      44: aload_0
      45: getfield      #7                  // Field error:Ljava/lang/Throwable;
      48: astore        5
      50: aload         5
      52: ifnull        66
      55: aload_3
      56: aload         5
      58: invokeinterface #21,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      63: goto          72
      66: aload_3
      67: invokeinterface #22,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      72: return
      73: aload_1
      74: iload_2
      75: invokeinterface #30,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.leave:(I)I
      80: istore_2
      81: iload_2
      82: ifne          88
      85: goto          91
      88: goto          9
      91: return

  public void replay(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_1
       1: invokeinterface #31,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.enter:()Z
       6: ifne          10
       9: return
      10: aload_1
      11: invokeinterface #32,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.fusionMode:()I
      16: ifne          27
      19: aload_0
      20: aload_1
      21: invokevirtual #33                 // Method replayNormal:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      24: goto          32
      27: aload_0
      28: aload_1
      29: invokevirtual #34                 // Method replayFused:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      32: return

  public boolean isDone();
    Code:
       0: aload_0
       1: getfield      #12                 // Field done:Z
       4: ireturn

  public T poll(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_1
       1: invokeinterface #18,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.index:()I
       6: istore_2
       7: iload_2
       8: aload_0
       9: getfield      #11                 // Field size:I
      12: if_icmpne     17
      15: aconst_null
      16: areturn
      17: aload_1
      18: invokeinterface #15,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:()Ljava/lang/Object;
      23: checkcast     #16                 // class "[Ljava/lang/Object;"
      26: checkcast     #16                 // class "[Ljava/lang/Object;"
      29: astore_3
      30: aload_3
      31: ifnonnull     46
      34: aload_0
      35: getfield      #6                  // Field head:[Ljava/lang/Object;
      38: astore_3
      39: aload_1
      40: aload_3
      41: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
      46: aload_1
      47: invokeinterface #17,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.tailIndex:()I
      52: istore        4
      54: iload         4
      56: aload_0
      57: getfield      #3                  // Field batchSize:I
      60: if_icmpne     84
      63: aload_3
      64: iload         4
      66: aaload
      67: checkcast     #16                 // class "[Ljava/lang/Object;"
      70: checkcast     #16                 // class "[Ljava/lang/Object;"
      73: astore_3
      74: iconst_0
      75: istore        4
      77: aload_1
      78: aload_3
      79: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
      84: aload_3
      85: iload         4
      87: aaload
      88: astore        5
      90: aload_1
      91: iload_2
      92: iconst_1
      93: iadd
      94: invokeinterface #28,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.index:(I)V
      99: aload_1
     100: iload         4
     102: iconst_1
     103: iadd
     104: invokeinterface #29,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.tailIndex:(I)V
     109: aload         5
     111: areturn

  public void clear(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_1
       1: aconst_null
       2: invokeinterface #20,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
       7: return

  public boolean isEmpty(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_1
       1: invokeinterface #18,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.index:()I
       6: aload_0
       7: getfield      #11                 // Field size:I
      10: if_icmpne     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public int size(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_0
       1: getfield      #11                 // Field size:I
       4: aload_1
       5: invokeinterface #18,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.index:()I
      10: isub
      11: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #11                 // Field size:I
       4: ireturn
}
