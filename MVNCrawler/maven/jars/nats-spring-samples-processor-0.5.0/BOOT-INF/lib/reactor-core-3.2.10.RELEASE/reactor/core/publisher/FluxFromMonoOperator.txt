Compiled from "FluxFromMonoOperator.java"
abstract class reactor.core.publisher.FluxFromMonoOperator<I, O> extends reactor.core.publisher.Flux<O> implements reactor.core.Scannable {
  protected final reactor.core.publisher.Mono<? extends I> source;

  protected reactor.core.publisher.FluxFromMonoOperator(reactor.core.publisher.Mono<? extends I>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #2                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #3                  // class reactor/core/publisher/Mono
      12: putfield      #4                  // Field source:Lreactor/core/publisher/Mono;
      15: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #5                  // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #6                  // Method getPrefetch:()I
      11: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: areturn
      15: aload_1
      16: getstatic     #8                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #4                  // Field source:Lreactor/core/publisher/Mono;
      26: areturn
      27: aconst_null
      28: areturn
}
