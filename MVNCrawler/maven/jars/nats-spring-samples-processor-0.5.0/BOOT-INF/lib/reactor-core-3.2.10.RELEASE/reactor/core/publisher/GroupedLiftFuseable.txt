Compiled from "GroupedLiftFuseable.java"
final class reactor.core.publisher.GroupedLiftFuseable<K, I, O> extends reactor.core.publisher.GroupedFlux<K, O> implements reactor.core.Scannable, reactor.core.Fuseable {
  final java.util.function.BiFunction<org.reactivestreams.Publisher, ? super reactor.core.CoreSubscriber<? super O>, ? extends reactor.core.CoreSubscriber<? super I>> lifter;

  final reactor.core.publisher.GroupedFlux<K, I> source;

  reactor.core.publisher.GroupedLiftFuseable(reactor.core.publisher.GroupedFlux<K, I>, java.util.function.BiFunction<org.reactivestreams.Publisher, ? super reactor.core.CoreSubscriber<? super O>, ? extends reactor.core.CoreSubscriber<? super I>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/GroupedFlux."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String source
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class reactor/core/publisher/GroupedFlux
      14: putfield      #5                  // Field source:Lreactor/core/publisher/GroupedFlux;
      17: aload_0
      18: aload_2
      19: putfield      #6                  // Field lifter:Ljava/util/function/BiFunction;
      22: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #5                  // Field source:Lreactor/core/publisher/GroupedFlux;
       4: invokevirtual #7                  // Method reactor/core/publisher/GroupedFlux.getPrefetch:()I
       7: ireturn

  public K key();
    Code:
       0: aload_0
       1: getfield      #5                  // Field source:Lreactor/core/publisher/GroupedFlux;
       4: invokevirtual #8                  // Method reactor/core/publisher/GroupedFlux.key:()Ljava/lang/Object;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #9                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #5                  // Field source:Lreactor/core/publisher/GroupedFlux;
      11: areturn
      12: aload_1
      13: getstatic     #10                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #11                 // Method getPrefetch:()I
      23: invokestatic  #12                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aconst_null
      28: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super O>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field lifter:Ljava/util/function/BiFunction;
       4: aload_0
       5: getfield      #5                  // Field source:Lreactor/core/publisher/GroupedFlux;
       8: aload_1
       9: invokeinterface #13,  3           // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #14                 // class reactor/core/CoreSubscriber
      17: astore_2
      18: aload_2
      19: ldc           #15                 // String Lifted subscriber MUST NOT be null
      21: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      24: pop
      25: aload_1
      26: instanceof    #16                 // class reactor/core/Fuseable$QueueSubscription
      29: ifeq          48
      32: aload_2
      33: instanceof    #16                 // class reactor/core/Fuseable$QueueSubscription
      36: ifne          48
      39: new           #17                 // class reactor/core/publisher/FluxHide$SuppressFuseableSubscriber
      42: dup
      43: aload_2
      44: invokespecial #18                 // Method reactor/core/publisher/FluxHide$SuppressFuseableSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
      47: astore_2
      48: aload_0
      49: getfield      #5                  // Field source:Lreactor/core/publisher/GroupedFlux;
      52: aload_2
      53: invokevirtual #19                 // Method reactor/core/publisher/GroupedFlux.subscribe:(Lreactor/core/CoreSubscriber;)V
      56: return
}
