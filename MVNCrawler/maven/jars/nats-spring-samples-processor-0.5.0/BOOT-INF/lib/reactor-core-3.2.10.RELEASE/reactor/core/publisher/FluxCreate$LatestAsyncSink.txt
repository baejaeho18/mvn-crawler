Compiled from "FluxCreate.java"
final class reactor.core.publisher.FluxCreate$LatestAsyncSink<T> extends reactor.core.publisher.FluxCreate$BaseSink<T> {
  final java.util.concurrent.atomic.AtomicReference<T> queue;

  java.lang.Throwable error;

  volatile boolean done;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxCreate$LatestAsyncSink> WIP;

  reactor.core.publisher.FluxCreate$LatestAsyncSink(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxCreate$BaseSink."<init>":(Lreactor/core/CoreSubscriber;)V
       5: aload_0
       6: new           #2                  // class java/util/concurrent/atomic/AtomicReference
       9: dup
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      13: putfield      #4                  // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
      16: return

  public reactor.core.publisher.FluxSink<T> next(T);
    Code:
       0: aload_0
       1: getfield      #4                  // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
       8: astore_2
       9: aload_2
      10: aload_0
      11: getfield      #6                  // Field ctx:Lreactor/util/context/Context;
      14: invokestatic  #7                  // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      17: aload_0
      18: invokevirtual #8                  // Method drain:()V
      21: aload_0
      22: areturn

  public void error(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: iconst_1
       7: putfield      #10                 // Field done:Z
      10: aload_0
      11: invokevirtual #8                  // Method drain:()V
      14: return

  public void complete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #10                 // Field done:Z
       5: aload_0
       6: invokevirtual #8                  // Method drain:()V
       9: return

  void onRequestedFromDownstream();
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method drain:()V
       4: return

  void onCancel();
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method drain:()V
       4: return

  void drain();
    Code:
       0: getstatic     #11                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #13                 // Field actual:Lreactor/core/CoreSubscriber;
      15: astore_1
      16: aload_0
      17: getfield      #4                  // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
      20: astore_2
      21: aload_0
      22: getfield      #14                 // Field requested:J
      25: lstore_3
      26: lconst_0
      27: lstore        5
      29: lload         5
      31: lload_3
      32: lcmp
      33: ifeq          158
      36: aload_0
      37: invokevirtual #15                 // Method isCancelled:()Z
      40: ifeq          73
      43: aload_2
      44: aconst_null
      45: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      48: astore        7
      50: aload         7
      52: aload_0
      53: getfield      #6                  // Field ctx:Lreactor/util/context/Context;
      56: invokestatic  #7                  // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      59: getstatic     #11                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      62: aload_0
      63: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      66: ifeq          72
      69: goto          29
      72: return
      73: aload_0
      74: getfield      #10                 // Field done:Z
      77: istore        7
      79: aload_2
      80: aconst_null
      81: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      84: astore        8
      86: aload         8
      88: ifnonnull     95
      91: iconst_1
      92: goto          96
      95: iconst_0
      96: istore        9
      98: iload         7
     100: ifeq          133
     103: iload         9
     105: ifeq          133
     108: aload_0
     109: getfield      #9                  // Field error:Ljava/lang/Throwable;
     112: astore        10
     114: aload         10
     116: ifnull        128
     119: aload_0
     120: aload         10
     122: invokespecial #17                 // Method reactor/core/publisher/FluxCreate$BaseSink.error:(Ljava/lang/Throwable;)V
     125: goto          132
     128: aload_0
     129: invokespecial #18                 // Method reactor/core/publisher/FluxCreate$BaseSink.complete:()V
     132: return
     133: iload         9
     135: ifeq          141
     138: goto          158
     141: aload_1
     142: aload         8
     144: invokeinterface #19,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     149: lload         5
     151: lconst_1
     152: ladd
     153: lstore        5
     155: goto          29
     158: lload         5
     160: lload_3
     161: lcmp
     162: ifne          257
     165: aload_0
     166: invokevirtual #15                 // Method isCancelled:()Z
     169: ifeq          202
     172: aload_2
     173: aconst_null
     174: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
     177: astore        7
     179: aload         7
     181: aload_0
     182: getfield      #6                  // Field ctx:Lreactor/util/context/Context;
     185: invokestatic  #7                  // Method reactor/core/publisher/Operators.onDiscard:(Ljava/lang/Object;Lreactor/util/context/Context;)V
     188: getstatic     #11                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     191: aload_0
     192: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     195: ifeq          201
     198: goto          21
     201: return
     202: aload_0
     203: getfield      #10                 // Field done:Z
     206: istore        7
     208: aload_2
     209: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     212: ifnonnull     219
     215: iconst_1
     216: goto          220
     219: iconst_0
     220: istore        8
     222: iload         7
     224: ifeq          257
     227: iload         8
     229: ifeq          257
     232: aload_0
     233: getfield      #9                  // Field error:Ljava/lang/Throwable;
     236: astore        9
     238: aload         9
     240: ifnull        252
     243: aload_0
     244: aload         9
     246: invokespecial #17                 // Method reactor/core/publisher/FluxCreate$BaseSink.error:(Ljava/lang/Throwable;)V
     249: goto          256
     252: aload_0
     253: invokespecial #18                 // Method reactor/core/publisher/FluxCreate$BaseSink.complete:()V
     256: return
     257: lload         5
     259: lconst_0
     260: lcmp
     261: ifeq          274
     264: getstatic     #21                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     267: aload_0
     268: lload         5
     270: invokestatic  #22                 // Method reactor/core/publisher/Operators.produced:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
     273: pop2
     274: getstatic     #11                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     277: aload_0
     278: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     281: ifne          287
     284: goto          290
     287: goto          21
     290: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #23                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     26
       7: aload_0
       8: getfield      #4                  // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
      11: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      14: ifnonnull     21
      17: iconst_0
      18: goto          22
      21: iconst_1
      22: invokestatic  #24                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      25: areturn
      26: aload_1
      27: getstatic     #25                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      30: if_acmpne     41
      33: aload_0
      34: getfield      #10                 // Field done:Z
      37: invokestatic  #26                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      40: areturn
      41: aload_1
      42: getstatic     #27                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      45: if_acmpne     53
      48: aload_0
      49: getfield      #9                  // Field error:Ljava/lang/Throwable;
      52: areturn
      53: aload_0
      54: aload_1
      55: invokespecial #28                 // Method reactor/core/publisher/FluxCreate$BaseSink.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      58: areturn

  public java.lang.String toString();
    Code:
       0: new           #29                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #30                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #31                 // String FluxSink(
       9: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: getstatic     #33                 // Field reactor/core/publisher/FluxSink$OverflowStrategy.LATEST:Lreactor/core/publisher/FluxSink$OverflowStrategy;
      15: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      18: ldc           #35                 // String )
      20: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      26: areturn

  static {};
    Code:
       0: ldc           #37                 // class reactor/core/publisher/FluxCreate$LatestAsyncSink
       2: ldc           #38                 // String wip
       4: invokestatic  #39                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #11                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
