Compiled from "Mono.java"
public abstract class reactor.core.publisher.Mono<T> implements org.reactivestreams.Publisher<T> {
  static final java.util.function.BiPredicate EQUALS_BIPREDICATE;

  public reactor.core.publisher.Mono();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static <T> reactor.core.publisher.Mono<T> create(java.util.function.Consumer<reactor.core.publisher.MonoSink<T>>);
    Code:
       0: new           #2                  // class reactor/core/publisher/MonoCreate
       3: dup
       4: aload_0
       5: invokespecial #3                  // Method reactor/core/publisher/MonoCreate."<init>":(Ljava/util/function/Consumer;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public static <T> reactor.core.publisher.Mono<T> defer(java.util.function.Supplier<? extends reactor.core.publisher.Mono<? extends T>>);
    Code:
       0: new           #5                  // class reactor/core/publisher/MonoDefer
       3: dup
       4: aload_0
       5: invokespecial #6                  // Method reactor/core/publisher/MonoDefer."<init>":(Ljava/util/function/Supplier;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public static reactor.core.publisher.Mono<java.lang.Long> delay(java.time.Duration);
    Code:
       0: aload_0
       1: invokestatic  #7                  // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       4: invokestatic  #8                  // Method delay:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       7: areturn

  public static reactor.core.publisher.Mono<java.lang.Long> delay(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: new           #9                  // class reactor/core/publisher/MonoDelay
       3: dup
       4: aload_0
       5: invokevirtual #10                 // Method java/time/Duration.toMillis:()J
       8: getstatic     #11                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      11: aload_1
      12: invokespecial #12                 // Method reactor/core/publisher/MonoDelay."<init>":(JLjava/util/concurrent/TimeUnit;Lreactor/core/scheduler/Scheduler;)V
      15: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      18: areturn

  public static <T> reactor.core.publisher.Mono<T> empty();
    Code:
       0: invokestatic  #13                 // Method reactor/core/publisher/MonoEmpty.instance:()Lreactor/core/publisher/Mono;
       3: areturn

  public static <T> reactor.core.publisher.Mono<T> error(java.lang.Throwable);
    Code:
       0: new           #14                 // class reactor/core/publisher/MonoError
       3: dup
       4: aload_0
       5: invokespecial #15                 // Method reactor/core/publisher/MonoError."<init>":(Ljava/lang/Throwable;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public static <T> reactor.core.publisher.Mono<T> error(java.util.function.Supplier<java.lang.Throwable>);
    Code:
       0: new           #16                 // class reactor/core/publisher/MonoErrorSupplied
       3: dup
       4: aload_0
       5: invokespecial #17                 // Method reactor/core/publisher/MonoErrorSupplied."<init>":(Ljava/util/function/Supplier;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public static <T> reactor.core.publisher.Mono<T> first(reactor.core.publisher.Mono<? extends T>...);
    Code:
       0: new           #18                 // class reactor/core/publisher/MonoFirst
       3: dup
       4: aload_0
       5: invokespecial #19                 // Method reactor/core/publisher/MonoFirst."<init>":([Lreactor/core/publisher/Mono;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public static <T> reactor.core.publisher.Mono<T> first(java.lang.Iterable<? extends reactor.core.publisher.Mono<? extends T>>);
    Code:
       0: new           #18                 // class reactor/core/publisher/MonoFirst
       3: dup
       4: aload_0
       5: invokespecial #20                 // Method reactor/core/publisher/MonoFirst."<init>":(Ljava/lang/Iterable;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public static <T> reactor.core.publisher.Mono<T> from(org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_0
       1: instanceof    #21                 // class reactor/core/publisher/Mono
       4: ifeq          14
       7: aload_0
       8: checkcast     #21                 // class reactor/core/publisher/Mono
      11: astore_1
      12: aload_1
      13: areturn
      14: aload_0
      15: instanceof    #22                 // class reactor/core/publisher/FluxSourceMono
      18: ifne          28
      21: aload_0
      22: instanceof    #23                 // class reactor/core/publisher/FluxSourceMonoFuseable
      25: ifeq          40
      28: aload_0
      29: checkcast     #24                 // class reactor/core/publisher/FluxFromMonoOperator
      32: astore_1
      33: aload_1
      34: getfield      #25                 // Field reactor/core/publisher/FluxFromMonoOperator.source:Lreactor/core/publisher/Mono;
      37: astore_2
      38: aload_2
      39: areturn
      40: aload_0
      41: instanceof    #26                 // class reactor/core/publisher/Flux
      44: ifeq          57
      47: aload_0
      48: checkcast     #26                 // class reactor/core/publisher/Flux
      51: astore_1
      52: aload_1
      53: invokevirtual #27                 // Method reactor/core/publisher/Flux.next:()Lreactor/core/publisher/Mono;
      56: areturn
      57: new           #28                 // class reactor/core/publisher/MonoFromPublisher
      60: dup
      61: aload_0
      62: invokespecial #29                 // Method reactor/core/publisher/MonoFromPublisher."<init>":(Lorg/reactivestreams/Publisher;)V
      65: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      68: areturn

  public static <T> reactor.core.publisher.Mono<T> fromCallable(java.util.concurrent.Callable<? extends T>);
    Code:
       0: new           #30                 // class reactor/core/publisher/MonoCallable
       3: dup
       4: aload_0
       5: invokespecial #31                 // Method reactor/core/publisher/MonoCallable."<init>":(Ljava/util/concurrent/Callable;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public static <T> reactor.core.publisher.Mono<T> fromCompletionStage(java.util.concurrent.CompletionStage<? extends T>);
    Code:
       0: new           #32                 // class reactor/core/publisher/MonoCompletionStage
       3: dup
       4: aload_0
       5: invokespecial #33                 // Method reactor/core/publisher/MonoCompletionStage."<init>":(Ljava/util/concurrent/CompletionStage;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public static <T> reactor.core.publisher.Mono<T> fromCompletionStage(java.util.function.Supplier<? extends java.util.concurrent.CompletionStage<? extends T>>);
    Code:
       0: aload_0
       1: invokedynamic #34,  0             // InvokeDynamic #0:get:(Ljava/util/function/Supplier;)Ljava/util/function/Supplier;
       6: invokestatic  #35                 // Method defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
       9: areturn

  public static <I> reactor.core.publisher.Mono<I> fromDirect(org.reactivestreams.Publisher<? extends I>);
    Code:
       0: aload_0
       1: instanceof    #21                 // class reactor/core/publisher/Mono
       4: ifeq          14
       7: aload_0
       8: checkcast     #21                 // class reactor/core/publisher/Mono
      11: astore_1
      12: aload_1
      13: areturn
      14: aload_0
      15: instanceof    #26                 // class reactor/core/publisher/Flux
      18: ifeq          57
      21: aload_0
      22: checkcast     #26                 // class reactor/core/publisher/Flux
      25: astore_1
      26: aload_0
      27: instanceof    #36                 // class reactor/core/Fuseable
      30: ifeq          45
      33: new           #37                 // class reactor/core/publisher/MonoSourceFluxFuseable
      36: dup
      37: aload_1
      38: invokespecial #38                 // Method reactor/core/publisher/MonoSourceFluxFuseable."<init>":(Lreactor/core/publisher/Flux;)V
      41: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      44: areturn
      45: new           #39                 // class reactor/core/publisher/MonoSourceFlux
      48: dup
      49: aload_1
      50: invokespecial #40                 // Method reactor/core/publisher/MonoSourceFlux."<init>":(Lreactor/core/publisher/Flux;)V
      53: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      56: areturn
      57: aload_0
      58: instanceof    #36                 // class reactor/core/Fuseable
      61: ifeq          76
      64: new           #41                 // class reactor/core/publisher/MonoSourceFuseable
      67: dup
      68: aload_0
      69: invokespecial #42                 // Method reactor/core/publisher/MonoSourceFuseable."<init>":(Lorg/reactivestreams/Publisher;)V
      72: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      75: areturn
      76: new           #43                 // class reactor/core/publisher/MonoSource
      79: dup
      80: aload_0
      81: invokespecial #44                 // Method reactor/core/publisher/MonoSource."<init>":(Lorg/reactivestreams/Publisher;)V
      84: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      87: areturn

  public static <T> reactor.core.publisher.Mono<T> fromFuture(java.util.concurrent.CompletableFuture<? extends T>);
    Code:
       0: new           #32                 // class reactor/core/publisher/MonoCompletionStage
       3: dup
       4: aload_0
       5: invokespecial #33                 // Method reactor/core/publisher/MonoCompletionStage."<init>":(Ljava/util/concurrent/CompletionStage;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public static <T> reactor.core.publisher.Mono<T> fromFuture(java.util.function.Supplier<? extends java.util.concurrent.CompletableFuture<? extends T>>);
    Code:
       0: aload_0
       1: invokedynamic #45,  0             // InvokeDynamic #1:get:(Ljava/util/function/Supplier;)Ljava/util/function/Supplier;
       6: invokestatic  #35                 // Method defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
       9: areturn

  public static <T> reactor.core.publisher.Mono<T> fromRunnable(java.lang.Runnable);
    Code:
       0: new           #46                 // class reactor/core/publisher/MonoRunnable
       3: dup
       4: aload_0
       5: invokespecial #47                 // Method reactor/core/publisher/MonoRunnable."<init>":(Ljava/lang/Runnable;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public static <T> reactor.core.publisher.Mono<T> fromSupplier(java.util.function.Supplier<? extends T>);
    Code:
       0: new           #48                 // class reactor/core/publisher/MonoSupplier
       3: dup
       4: aload_0
       5: invokespecial #49                 // Method reactor/core/publisher/MonoSupplier."<init>":(Ljava/util/function/Supplier;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public static <T> reactor.core.publisher.Mono<T> ignoreElements(org.reactivestreams.Publisher<T>);
    Code:
       0: new           #50                 // class reactor/core/publisher/MonoIgnorePublisher
       3: dup
       4: aload_0
       5: invokespecial #51                 // Method reactor/core/publisher/MonoIgnorePublisher."<init>":(Lorg/reactivestreams/Publisher;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public static <T> reactor.core.publisher.Mono<T> just(T);
    Code:
       0: new           #52                 // class reactor/core/publisher/MonoJust
       3: dup
       4: aload_0
       5: invokespecial #53                 // Method reactor/core/publisher/MonoJust."<init>":(Ljava/lang/Object;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public static <T> reactor.core.publisher.Mono<T> justOrEmpty(java.util.Optional<? extends T>);
    Code:
       0: aload_0
       1: ifnull        21
       4: aload_0
       5: invokevirtual #54                 // Method java/util/Optional.isPresent:()Z
       8: ifeq          21
      11: aload_0
      12: invokevirtual #55                 // Method java/util/Optional.get:()Ljava/lang/Object;
      15: invokestatic  #56                 // Method just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      18: goto          24
      21: invokestatic  #57                 // Method empty:()Lreactor/core/publisher/Mono;
      24: areturn

  public static <T> reactor.core.publisher.Mono<T> justOrEmpty(T);
    Code:
       0: aload_0
       1: ifnull        11
       4: aload_0
       5: invokestatic  #56                 // Method just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       8: goto          14
      11: invokestatic  #57                 // Method empty:()Lreactor/core/publisher/Mono;
      14: areturn

  public static <T> reactor.core.publisher.Mono<T> never();
    Code:
       0: invokestatic  #58                 // Method reactor/core/publisher/MonoNever.instance:()Lreactor/core/publisher/Mono;
       3: areturn

  public static <T> reactor.core.publisher.Mono<java.lang.Boolean> sequenceEqual(org.reactivestreams.Publisher<? extends T>, org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #59                 // Method equalsBiPredicate:()Ljava/util/function/BiPredicate;
       5: getstatic     #60                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       8: invokestatic  #61                 // Method sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Ljava/util/function/BiPredicate;I)Lreactor/core/publisher/Mono;
      11: areturn

  public static <T> reactor.core.publisher.Mono<java.lang.Boolean> sequenceEqual(org.reactivestreams.Publisher<? extends T>, org.reactivestreams.Publisher<? extends T>, java.util.function.BiPredicate<? super T, ? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #60                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       6: invokestatic  #61                 // Method sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Ljava/util/function/BiPredicate;I)Lreactor/core/publisher/Mono;
       9: areturn

  public static <T> reactor.core.publisher.Mono<java.lang.Boolean> sequenceEqual(org.reactivestreams.Publisher<? extends T>, org.reactivestreams.Publisher<? extends T>, java.util.function.BiPredicate<? super T, ? super T>, int);
    Code:
       0: new           #62                 // class reactor/core/publisher/MonoSequenceEqual
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: iload_3
       8: invokespecial #63                 // Method reactor/core/publisher/MonoSequenceEqual."<init>":(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Ljava/util/function/BiPredicate;I)V
      11: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      14: areturn

  public static reactor.core.publisher.Mono<reactor.util.context.Context> subscriberContext();
    Code:
       0: getstatic     #64                 // Field reactor/core/publisher/MonoCurrentContext.INSTANCE:Lreactor/core/publisher/MonoCurrentContext;
       3: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
       6: areturn

  public static <T, D> reactor.core.publisher.Mono<T> using(java.util.concurrent.Callable<? extends D>, java.util.function.Function<? super D, ? extends reactor.core.publisher.Mono<? extends T>>, java.util.function.Consumer<? super D>, boolean);
    Code:
       0: new           #65                 // class reactor/core/publisher/MonoUsing
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: iload_3
       8: invokespecial #66                 // Method reactor/core/publisher/MonoUsing."<init>":(Ljava/util/concurrent/Callable;Ljava/util/function/Function;Ljava/util/function/Consumer;Z)V
      11: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      14: areturn

  public static <T, D> reactor.core.publisher.Mono<T> using(java.util.concurrent.Callable<? extends D>, java.util.function.Function<? super D, ? extends reactor.core.publisher.Mono<? extends T>>, java.util.function.Consumer<? super D>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_1
       4: invokestatic  #67                 // Method using:(Ljava/util/concurrent/Callable;Ljava/util/function/Function;Ljava/util/function/Consumer;Z)Lreactor/core/publisher/Mono;
       7: areturn

  public static <T, D> reactor.core.publisher.Mono<T> usingWhen(org.reactivestreams.Publisher<D>, java.util.function.Function<? super D, ? extends reactor.core.publisher.Mono<? extends T>>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: new           #68                 // class reactor/core/publisher/MonoUsingWhen
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_3
       8: aconst_null
       9: invokespecial #69                 // Method reactor/core/publisher/MonoUsingWhen."<init>":(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;)V
      12: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      15: areturn

  public static <T, D> reactor.core.publisher.Mono<T> usingWhen(org.reactivestreams.Publisher<D>, java.util.function.Function<? super D, ? extends reactor.core.publisher.Mono<? extends T>>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<?>>, java.util.function.Function<? super D, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: new           #68                 // class reactor/core/publisher/MonoUsingWhen
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_3
       8: aload         4
      10: invokespecial #69                 // Method reactor/core/publisher/MonoUsingWhen."<init>":(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;)V
      13: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      16: areturn

  public static reactor.core.publisher.Mono<java.lang.Void> when(org.reactivestreams.Publisher<?>...);
    Code:
       0: aload_0
       1: arraylength
       2: ifne          9
       5: invokestatic  #57                 // Method empty:()Lreactor/core/publisher/Mono;
       8: areturn
       9: aload_0
      10: arraylength
      11: iconst_1
      12: if_icmpne     22
      15: aload_0
      16: iconst_0
      17: aaload
      18: invokestatic  #70                 // Method empty:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      21: areturn
      22: new           #71                 // class reactor/core/publisher/MonoWhen
      25: dup
      26: iconst_0
      27: aload_0
      28: invokespecial #72                 // Method reactor/core/publisher/MonoWhen."<init>":(Z[Lorg/reactivestreams/Publisher;)V
      31: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      34: areturn

  public static reactor.core.publisher.Mono<java.lang.Void> when(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: new           #71                 // class reactor/core/publisher/MonoWhen
       3: dup
       4: iconst_0
       5: aload_0
       6: invokespecial #73                 // Method reactor/core/publisher/MonoWhen."<init>":(ZLjava/lang/Iterable;)V
       9: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public static reactor.core.publisher.Mono<java.lang.Void> whenDelayError(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: new           #71                 // class reactor/core/publisher/MonoWhen
       3: dup
       4: iconst_1
       5: aload_0
       6: invokespecial #73                 // Method reactor/core/publisher/MonoWhen."<init>":(ZLjava/lang/Iterable;)V
       9: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public static reactor.core.publisher.Mono<java.lang.Void> whenDelayError(org.reactivestreams.Publisher<?>...);
    Code:
       0: aload_0
       1: arraylength
       2: ifne          9
       5: invokestatic  #57                 // Method empty:()Lreactor/core/publisher/Mono;
       8: areturn
       9: aload_0
      10: arraylength
      11: iconst_1
      12: if_icmpne     22
      15: aload_0
      16: iconst_0
      17: aaload
      18: invokestatic  #70                 // Method empty:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      21: areturn
      22: new           #71                 // class reactor/core/publisher/MonoWhen
      25: dup
      26: iconst_1
      27: aload_0
      28: invokespecial #72                 // Method reactor/core/publisher/MonoWhen."<init>":(Z[Lorg/reactivestreams/Publisher;)V
      31: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      34: areturn

  public static <T1, T2> reactor.core.publisher.Mono<reactor.util.function.Tuple2<T1, T2>> zip(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #74                 // Method reactor/core/publisher/Flux.tuple2Function:()Ljava/util/function/BiFunction;
       5: invokestatic  #75                 // Method zip:(Lreactor/core/publisher/Mono;Lreactor/core/publisher/Mono;Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
       8: areturn

  public static <T1, T2, O> reactor.core.publisher.Mono<O> zip(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>, java.util.function.BiFunction<? super T1, ? super T2, ? extends O>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_0
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokespecial #77                 // Method reactor/core/publisher/MonoZip."<init>":(ZLorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Ljava/util/function/BiFunction;)V
      11: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      14: areturn

  public static <T1, T2, T3> reactor.core.publisher.Mono<reactor.util.function.Tuple3<T1, T2, T3>> zip(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>, reactor.core.publisher.Mono<? extends T3>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_0
       5: invokedynamic #78,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      10: iconst_3
      11: anewarray     #79                 // class org/reactivestreams/Publisher
      14: dup
      15: iconst_0
      16: aload_0
      17: aastore
      18: dup
      19: iconst_1
      20: aload_1
      21: aastore
      22: dup
      23: iconst_2
      24: aload_2
      25: aastore
      26: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      29: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      32: areturn

  public static <T1, T2, T3, T4> reactor.core.publisher.Mono<reactor.util.function.Tuple4<T1, T2, T3, T4>> zip(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>, reactor.core.publisher.Mono<? extends T3>, reactor.core.publisher.Mono<? extends T4>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_0
       5: invokedynamic #81,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      10: iconst_4
      11: anewarray     #79                 // class org/reactivestreams/Publisher
      14: dup
      15: iconst_0
      16: aload_0
      17: aastore
      18: dup
      19: iconst_1
      20: aload_1
      21: aastore
      22: dup
      23: iconst_2
      24: aload_2
      25: aastore
      26: dup
      27: iconst_3
      28: aload_3
      29: aastore
      30: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      33: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      36: areturn

  public static <T1, T2, T3, T4, T5> reactor.core.publisher.Mono<reactor.util.function.Tuple5<T1, T2, T3, T4, T5>> zip(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>, reactor.core.publisher.Mono<? extends T3>, reactor.core.publisher.Mono<? extends T4>, reactor.core.publisher.Mono<? extends T5>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_0
       5: invokedynamic #82,  0             // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      10: iconst_5
      11: anewarray     #79                 // class org/reactivestreams/Publisher
      14: dup
      15: iconst_0
      16: aload_0
      17: aastore
      18: dup
      19: iconst_1
      20: aload_1
      21: aastore
      22: dup
      23: iconst_2
      24: aload_2
      25: aastore
      26: dup
      27: iconst_3
      28: aload_3
      29: aastore
      30: dup
      31: iconst_4
      32: aload         4
      34: aastore
      35: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      38: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      41: areturn

  public static <T1, T2, T3, T4, T5, T6> reactor.core.publisher.Mono<reactor.util.function.Tuple6<T1, T2, T3, T4, T5, T6>> zip(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>, reactor.core.publisher.Mono<? extends T3>, reactor.core.publisher.Mono<? extends T4>, reactor.core.publisher.Mono<? extends T5>, reactor.core.publisher.Mono<? extends T6>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_0
       5: invokedynamic #83,  0             // InvokeDynamic #5:apply:()Ljava/util/function/Function;
      10: bipush        6
      12: anewarray     #79                 // class org/reactivestreams/Publisher
      15: dup
      16: iconst_0
      17: aload_0
      18: aastore
      19: dup
      20: iconst_1
      21: aload_1
      22: aastore
      23: dup
      24: iconst_2
      25: aload_2
      26: aastore
      27: dup
      28: iconst_3
      29: aload_3
      30: aastore
      31: dup
      32: iconst_4
      33: aload         4
      35: aastore
      36: dup
      37: iconst_5
      38: aload         5
      40: aastore
      41: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      44: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      47: areturn

  public static <T1, T2, T3, T4, T5, T6, T7> reactor.core.publisher.Mono<reactor.util.function.Tuple7<T1, T2, T3, T4, T5, T6, T7>> zip(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>, reactor.core.publisher.Mono<? extends T3>, reactor.core.publisher.Mono<? extends T4>, reactor.core.publisher.Mono<? extends T5>, reactor.core.publisher.Mono<? extends T6>, reactor.core.publisher.Mono<? extends T7>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_0
       5: invokedynamic #84,  0             // InvokeDynamic #6:apply:()Ljava/util/function/Function;
      10: bipush        7
      12: anewarray     #79                 // class org/reactivestreams/Publisher
      15: dup
      16: iconst_0
      17: aload_0
      18: aastore
      19: dup
      20: iconst_1
      21: aload_1
      22: aastore
      23: dup
      24: iconst_2
      25: aload_2
      26: aastore
      27: dup
      28: iconst_3
      29: aload_3
      30: aastore
      31: dup
      32: iconst_4
      33: aload         4
      35: aastore
      36: dup
      37: iconst_5
      38: aload         5
      40: aastore
      41: dup
      42: bipush        6
      44: aload         6
      46: aastore
      47: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      50: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      53: areturn

  public static <T1, T2, T3, T4, T5, T6, T7, T8> reactor.core.publisher.Mono<reactor.util.function.Tuple8<T1, T2, T3, T4, T5, T6, T7, T8>> zip(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>, reactor.core.publisher.Mono<? extends T3>, reactor.core.publisher.Mono<? extends T4>, reactor.core.publisher.Mono<? extends T5>, reactor.core.publisher.Mono<? extends T6>, reactor.core.publisher.Mono<? extends T7>, reactor.core.publisher.Mono<? extends T8>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_0
       5: invokedynamic #85,  0             // InvokeDynamic #7:apply:()Ljava/util/function/Function;
      10: bipush        8
      12: anewarray     #79                 // class org/reactivestreams/Publisher
      15: dup
      16: iconst_0
      17: aload_0
      18: aastore
      19: dup
      20: iconst_1
      21: aload_1
      22: aastore
      23: dup
      24: iconst_2
      25: aload_2
      26: aastore
      27: dup
      28: iconst_3
      29: aload_3
      30: aastore
      31: dup
      32: iconst_4
      33: aload         4
      35: aastore
      36: dup
      37: iconst_5
      38: aload         5
      40: aastore
      41: dup
      42: bipush        6
      44: aload         6
      46: aastore
      47: dup
      48: bipush        7
      50: aload         7
      52: aastore
      53: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      56: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      59: areturn

  public static <R> reactor.core.publisher.Mono<R> zip(java.lang.Iterable<? extends reactor.core.publisher.Mono<?>>, java.util.function.Function<? super java.lang.Object[], ? extends R>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_0
       5: aload_1
       6: aload_0
       7: invokespecial #86                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;Ljava/lang/Iterable;)V
      10: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      13: areturn

  public static <R> reactor.core.publisher.Mono<R> zip(java.util.function.Function<? super java.lang.Object[], ? extends R>, reactor.core.publisher.Mono<?>...);
    Code:
       0: aload_1
       1: arraylength
       2: ifne          9
       5: invokestatic  #57                 // Method empty:()Lreactor/core/publisher/Mono;
       8: areturn
       9: aload_1
      10: arraylength
      11: iconst_1
      12: if_icmpne     28
      15: aload_1
      16: iconst_0
      17: aaload
      18: aload_0
      19: invokedynamic #87,  0             // InvokeDynamic #8:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
      24: invokevirtual #88                 // Method map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      27: areturn
      28: new           #76                 // class reactor/core/publisher/MonoZip
      31: dup
      32: iconst_0
      33: aload_0
      34: aload_1
      35: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      38: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      41: areturn

  public static <T1, T2> reactor.core.publisher.Mono<reactor.util.function.Tuple2<T1, T2>> zipDelayError(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_1
       5: invokedynamic #89,  0             // InvokeDynamic #9:apply:()Ljava/util/function/Function;
      10: iconst_2
      11: anewarray     #79                 // class org/reactivestreams/Publisher
      14: dup
      15: iconst_0
      16: aload_0
      17: aastore
      18: dup
      19: iconst_1
      20: aload_1
      21: aastore
      22: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      25: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      28: areturn

  public static <T1, T2, T3> reactor.core.publisher.Mono<reactor.util.function.Tuple3<T1, T2, T3>> zipDelayError(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>, reactor.core.publisher.Mono<? extends T3>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_1
       5: invokedynamic #90,  0             // InvokeDynamic #10:apply:()Ljava/util/function/Function;
      10: iconst_3
      11: anewarray     #79                 // class org/reactivestreams/Publisher
      14: dup
      15: iconst_0
      16: aload_0
      17: aastore
      18: dup
      19: iconst_1
      20: aload_1
      21: aastore
      22: dup
      23: iconst_2
      24: aload_2
      25: aastore
      26: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      29: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      32: areturn

  public static <T1, T2, T3, T4> reactor.core.publisher.Mono<reactor.util.function.Tuple4<T1, T2, T3, T4>> zipDelayError(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>, reactor.core.publisher.Mono<? extends T3>, reactor.core.publisher.Mono<? extends T4>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_1
       5: invokedynamic #91,  0             // InvokeDynamic #11:apply:()Ljava/util/function/Function;
      10: iconst_4
      11: anewarray     #79                 // class org/reactivestreams/Publisher
      14: dup
      15: iconst_0
      16: aload_0
      17: aastore
      18: dup
      19: iconst_1
      20: aload_1
      21: aastore
      22: dup
      23: iconst_2
      24: aload_2
      25: aastore
      26: dup
      27: iconst_3
      28: aload_3
      29: aastore
      30: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      33: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      36: areturn

  public static <T1, T2, T3, T4, T5> reactor.core.publisher.Mono<reactor.util.function.Tuple5<T1, T2, T3, T4, T5>> zipDelayError(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>, reactor.core.publisher.Mono<? extends T3>, reactor.core.publisher.Mono<? extends T4>, reactor.core.publisher.Mono<? extends T5>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_1
       5: invokedynamic #92,  0             // InvokeDynamic #12:apply:()Ljava/util/function/Function;
      10: iconst_5
      11: anewarray     #79                 // class org/reactivestreams/Publisher
      14: dup
      15: iconst_0
      16: aload_0
      17: aastore
      18: dup
      19: iconst_1
      20: aload_1
      21: aastore
      22: dup
      23: iconst_2
      24: aload_2
      25: aastore
      26: dup
      27: iconst_3
      28: aload_3
      29: aastore
      30: dup
      31: iconst_4
      32: aload         4
      34: aastore
      35: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      38: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      41: areturn

  public static <T1, T2, T3, T4, T5, T6> reactor.core.publisher.Mono<reactor.util.function.Tuple6<T1, T2, T3, T4, T5, T6>> zipDelayError(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>, reactor.core.publisher.Mono<? extends T3>, reactor.core.publisher.Mono<? extends T4>, reactor.core.publisher.Mono<? extends T5>, reactor.core.publisher.Mono<? extends T6>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_1
       5: invokedynamic #93,  0             // InvokeDynamic #13:apply:()Ljava/util/function/Function;
      10: bipush        6
      12: anewarray     #79                 // class org/reactivestreams/Publisher
      15: dup
      16: iconst_0
      17: aload_0
      18: aastore
      19: dup
      20: iconst_1
      21: aload_1
      22: aastore
      23: dup
      24: iconst_2
      25: aload_2
      26: aastore
      27: dup
      28: iconst_3
      29: aload_3
      30: aastore
      31: dup
      32: iconst_4
      33: aload         4
      35: aastore
      36: dup
      37: iconst_5
      38: aload         5
      40: aastore
      41: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      44: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      47: areturn

  public static <T1, T2, T3, T4, T5, T6, T7> reactor.core.publisher.Mono<reactor.util.function.Tuple7<T1, T2, T3, T4, T5, T6, T7>> zipDelayError(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>, reactor.core.publisher.Mono<? extends T3>, reactor.core.publisher.Mono<? extends T4>, reactor.core.publisher.Mono<? extends T5>, reactor.core.publisher.Mono<? extends T6>, reactor.core.publisher.Mono<? extends T7>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_1
       5: invokedynamic #94,  0             // InvokeDynamic #14:apply:()Ljava/util/function/Function;
      10: bipush        7
      12: anewarray     #79                 // class org/reactivestreams/Publisher
      15: dup
      16: iconst_0
      17: aload_0
      18: aastore
      19: dup
      20: iconst_1
      21: aload_1
      22: aastore
      23: dup
      24: iconst_2
      25: aload_2
      26: aastore
      27: dup
      28: iconst_3
      29: aload_3
      30: aastore
      31: dup
      32: iconst_4
      33: aload         4
      35: aastore
      36: dup
      37: iconst_5
      38: aload         5
      40: aastore
      41: dup
      42: bipush        6
      44: aload         6
      46: aastore
      47: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      50: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      53: areturn

  public static <T1, T2, T3, T4, T5, T6, T7, T8> reactor.core.publisher.Mono<reactor.util.function.Tuple8<T1, T2, T3, T4, T5, T6, T7, T8>> zipDelayError(reactor.core.publisher.Mono<? extends T1>, reactor.core.publisher.Mono<? extends T2>, reactor.core.publisher.Mono<? extends T3>, reactor.core.publisher.Mono<? extends T4>, reactor.core.publisher.Mono<? extends T5>, reactor.core.publisher.Mono<? extends T6>, reactor.core.publisher.Mono<? extends T7>, reactor.core.publisher.Mono<? extends T8>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_1
       5: invokedynamic #95,  0             // InvokeDynamic #15:apply:()Ljava/util/function/Function;
      10: bipush        8
      12: anewarray     #79                 // class org/reactivestreams/Publisher
      15: dup
      16: iconst_0
      17: aload_0
      18: aastore
      19: dup
      20: iconst_1
      21: aload_1
      22: aastore
      23: dup
      24: iconst_2
      25: aload_2
      26: aastore
      27: dup
      28: iconst_3
      29: aload_3
      30: aastore
      31: dup
      32: iconst_4
      33: aload         4
      35: aastore
      36: dup
      37: iconst_5
      38: aload         5
      40: aastore
      41: dup
      42: bipush        6
      44: aload         6
      46: aastore
      47: dup
      48: bipush        7
      50: aload         7
      52: aastore
      53: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      56: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      59: areturn

  public static <R> reactor.core.publisher.Mono<R> zipDelayError(java.lang.Iterable<? extends reactor.core.publisher.Mono<?>>, java.util.function.Function<? super java.lang.Object[], ? extends R>);
    Code:
       0: new           #76                 // class reactor/core/publisher/MonoZip
       3: dup
       4: iconst_1
       5: aload_1
       6: aload_0
       7: invokespecial #86                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;Ljava/lang/Iterable;)V
      10: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      13: areturn

  public static <R> reactor.core.publisher.Mono<R> zipDelayError(java.util.function.Function<? super java.lang.Object[], ? extends R>, reactor.core.publisher.Mono<?>...);
    Code:
       0: aload_1
       1: arraylength
       2: ifne          9
       5: invokestatic  #57                 // Method empty:()Lreactor/core/publisher/Mono;
       8: areturn
       9: aload_1
      10: arraylength
      11: iconst_1
      12: if_icmpne     28
      15: aload_1
      16: iconst_0
      17: aaload
      18: aload_0
      19: invokedynamic #96,  0             // InvokeDynamic #16:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
      24: invokevirtual #88                 // Method map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      27: areturn
      28: new           #76                 // class reactor/core/publisher/MonoZip
      31: dup
      32: iconst_1
      33: aload_0
      34: aload_1
      35: invokespecial #80                 // Method reactor/core/publisher/MonoZip."<init>":(ZLjava/util/function/Function;[Lorg/reactivestreams/Publisher;)V
      38: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      41: areturn

  public final <P> P as(java.util.function.Function<? super reactor.core.publisher.Mono<T>, P>);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #97,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final reactor.core.publisher.Mono<java.lang.Void> and(org.reactivestreams.Publisher<?>);
    Code:
       0: aload_0
       1: instanceof    #71                 // class reactor/core/publisher/MonoWhen
       4: ifeq          24
       7: aload_0
       8: checkcast     #71                 // class reactor/core/publisher/MonoWhen
      11: astore_2
      12: aload_2
      13: aload_1
      14: invokevirtual #98                 // Method reactor/core/publisher/MonoWhen.whenAdditionalSource:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      17: astore_3
      18: aload_3
      19: ifnull        24
      22: aload_3
      23: areturn
      24: iconst_2
      25: anewarray     #79                 // class org/reactivestreams/Publisher
      28: dup
      29: iconst_0
      30: aload_0
      31: aastore
      32: dup
      33: iconst_1
      34: aload_1
      35: aastore
      36: invokestatic  #99                 // Method when:([Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      39: areturn

  public T block();
    Code:
       0: new           #100                // class reactor/core/publisher/BlockingMonoSubscriber
       3: dup
       4: invokespecial #101                // Method reactor/core/publisher/BlockingMonoSubscriber."<init>":()V
       7: astore_1
       8: aload_0
       9: invokestatic  #102                // Method onLastAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: aload_1
      13: invokestatic  #103                // Method reactor/core/publisher/Operators.toCoreSubscriber:(Lorg/reactivestreams/Subscriber;)Lreactor/core/CoreSubscriber;
      16: invokevirtual #104                // Method subscribe:(Lreactor/core/CoreSubscriber;)V
      19: aload_1
      20: invokevirtual #105                // Method reactor/core/publisher/BlockingMonoSubscriber.blockingGet:()Ljava/lang/Object;
      23: areturn

  public T block(java.time.Duration);
    Code:
       0: new           #100                // class reactor/core/publisher/BlockingMonoSubscriber
       3: dup
       4: invokespecial #101                // Method reactor/core/publisher/BlockingMonoSubscriber."<init>":()V
       7: astore_2
       8: aload_0
       9: invokestatic  #102                // Method onLastAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: aload_2
      13: invokestatic  #103                // Method reactor/core/publisher/Operators.toCoreSubscriber:(Lorg/reactivestreams/Subscriber;)Lreactor/core/CoreSubscriber;
      16: invokevirtual #104                // Method subscribe:(Lreactor/core/CoreSubscriber;)V
      19: aload_2
      20: aload_1
      21: invokevirtual #10                 // Method java/time/Duration.toMillis:()J
      24: getstatic     #11                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      27: invokevirtual #106                // Method reactor/core/publisher/BlockingMonoSubscriber.blockingGet:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;
      30: areturn

  public java.util.Optional<T> blockOptional();
    Code:
       0: new           #107                // class reactor/core/publisher/BlockingOptionalMonoSubscriber
       3: dup
       4: invokespecial #108                // Method reactor/core/publisher/BlockingOptionalMonoSubscriber."<init>":()V
       7: astore_1
       8: aload_0
       9: invokestatic  #102                // Method onLastAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: aload_1
      13: invokestatic  #103                // Method reactor/core/publisher/Operators.toCoreSubscriber:(Lorg/reactivestreams/Subscriber;)Lreactor/core/CoreSubscriber;
      16: invokevirtual #104                // Method subscribe:(Lreactor/core/CoreSubscriber;)V
      19: aload_1
      20: invokevirtual #109                // Method reactor/core/publisher/BlockingOptionalMonoSubscriber.blockingGet:()Ljava/util/Optional;
      23: areturn

  public java.util.Optional<T> blockOptional(java.time.Duration);
    Code:
       0: new           #107                // class reactor/core/publisher/BlockingOptionalMonoSubscriber
       3: dup
       4: invokespecial #108                // Method reactor/core/publisher/BlockingOptionalMonoSubscriber."<init>":()V
       7: astore_2
       8: aload_0
       9: invokestatic  #102                // Method onLastAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: aload_2
      13: invokestatic  #103                // Method reactor/core/publisher/Operators.toCoreSubscriber:(Lorg/reactivestreams/Subscriber;)Lreactor/core/CoreSubscriber;
      16: invokevirtual #104                // Method subscribe:(Lreactor/core/CoreSubscriber;)V
      19: aload_2
      20: aload_1
      21: invokevirtual #10                 // Method java/time/Duration.toMillis:()J
      24: getstatic     #11                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      27: invokevirtual #110                // Method reactor/core/publisher/BlockingOptionalMonoSubscriber.blockingGet:(JLjava/util/concurrent/TimeUnit;)Ljava/util/Optional;
      30: areturn

  public final <E> reactor.core.publisher.Mono<E> cast(java.lang.Class<E>);
    Code:
       0: aload_1
       1: ldc           #111                // String clazz
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: dup
      10: invokevirtual #113                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      13: pop
      14: invokedynamic #114,  0            // InvokeDynamic #17:apply:(Ljava/lang/Class;)Ljava/util/function/Function;
      19: invokevirtual #88                 // Method map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      22: areturn

  public final reactor.core.publisher.Mono<T> cache();
    Code:
       0: new           #115                // class reactor/core/publisher/MonoProcessor
       3: dup
       4: aload_0
       5: invokespecial #116                // Method reactor/core/publisher/MonoProcessor."<init>":(Lorg/reactivestreams/Publisher;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public final reactor.core.publisher.Mono<T> cache(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #7                  // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokevirtual #117                // Method cache:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       8: areturn

  public final reactor.core.publisher.Mono<T> cache(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: new           #118                // class reactor/core/publisher/MonoCacheTime
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #119                // Method reactor/core/publisher/MonoCacheTime."<init>":(Lreactor/core/publisher/Mono;Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)V
      10: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      13: areturn

  public final reactor.core.publisher.Mono<T> cache(java.util.function.Function<? super T, java.time.Duration>, java.util.function.Function<java.lang.Throwable, java.time.Duration>, java.util.function.Supplier<java.time.Duration>);
    Code:
       0: new           #118                // class reactor/core/publisher/MonoCacheTime
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_3
       8: invokestatic  #7                  // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
      11: invokespecial #120                // Method reactor/core/publisher/MonoCacheTime."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Supplier;Lreactor/core/scheduler/Scheduler;)V
      14: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      17: areturn

  public final reactor.core.publisher.Mono<T> cancelOn(reactor.core.scheduler.Scheduler);
    Code:
       0: new           #121                // class reactor/core/publisher/MonoCancelOn
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #122                // Method reactor/core/publisher/MonoCancelOn."<init>":(Lreactor/core/publisher/Mono;Lreactor/core/scheduler/Scheduler;)V
       9: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public final reactor.core.publisher.Mono<T> checkpoint();
    Code:
       0: aload_0
       1: aconst_null
       2: iconst_1
       3: invokevirtual #123                // Method checkpoint:(Ljava/lang/String;Z)Lreactor/core/publisher/Mono;
       6: areturn

  public final reactor.core.publisher.Mono<T> checkpoint(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #124                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #125                // class java/lang/String
       8: iconst_0
       9: invokevirtual #123                // Method checkpoint:(Ljava/lang/String;Z)Lreactor/core/publisher/Mono;
      12: areturn

  public final reactor.core.publisher.Mono<T> checkpoint(java.lang.String, boolean);
    Code:
       0: iload_2
       1: ifne          16
       4: new           #126                // class reactor/core/publisher/FluxOnAssembly$AssemblyLightSnapshot
       7: dup
       8: aload_1
       9: invokespecial #127                // Method reactor/core/publisher/FluxOnAssembly$AssemblyLightSnapshot."<init>":(Ljava/lang/String;)V
      12: astore_3
      13: goto          36
      16: new           #128                // class reactor/core/publisher/FluxOnAssembly$AssemblySnapshot
      19: dup
      20: aload_1
      21: getstatic     #129                // Field reactor/core/publisher/Traces.callSiteSupplierFactory:Ljava/util/function/Supplier;
      24: invokeinterface #130,  1          // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      29: checkcast     #131                // class java/util/function/Supplier
      32: invokespecial #132                // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshot."<init>":(Ljava/lang/String;Ljava/util/function/Supplier;)V
      35: astore_3
      36: new           #133                // class reactor/core/publisher/MonoOnAssembly
      39: dup
      40: aload_0
      41: aload_3
      42: invokespecial #134                // Method reactor/core/publisher/MonoOnAssembly."<init>":(Lreactor/core/publisher/Mono;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;)V
      45: areturn

  public final <V> reactor.core.publisher.Mono<V> compose(java.util.function.Function<? super reactor.core.publisher.Mono<T>, ? extends org.reactivestreams.Publisher<V>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #135,  0            // InvokeDynamic #18:get:(Lreactor/core/publisher/Mono;Ljava/util/function/Function;)Ljava/util/function/Supplier;
       7: invokestatic  #35                 // Method defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      10: areturn

  public final reactor.core.publisher.Flux<T> concatWith(org.reactivestreams.Publisher<? extends T>);
    Code:
       0: iconst_2
       1: anewarray     #79                 // class org/reactivestreams/Publisher
       4: dup
       5: iconst_0
       6: aload_0
       7: aastore
       8: dup
       9: iconst_1
      10: aload_1
      11: aastore
      12: invokestatic  #136                // Method reactor/core/publisher/Flux.concat:([Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      15: areturn

  public final reactor.core.publisher.Mono<T> defaultIfEmpty(T);
    Code:
       0: aload_0
       1: instanceof    #137                // class reactor/core/Fuseable$ScalarCallable
       4: ifeq          27
       7: aload_0
       8: invokevirtual #138                // Method block:()Ljava/lang/Object;
      11: astore_2
      12: aload_2
      13: ifnonnull     21
      16: aload_1
      17: invokestatic  #56                 // Method just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      20: areturn
      21: goto          25
      24: astore_2
      25: aload_0
      26: areturn
      27: new           #140                // class reactor/core/publisher/MonoDefaultIfEmpty
      30: dup
      31: aload_0
      32: aload_1
      33: invokespecial #141                // Method reactor/core/publisher/MonoDefaultIfEmpty."<init>":(Lreactor/core/publisher/Mono;Ljava/lang/Object;)V
      36: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      39: areturn
    Exception table:
       from    to  target type
           7    20    24   Class java/lang/Throwable

  public final reactor.core.publisher.Mono<T> delayElement(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #7                  // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokevirtual #142                // Method delayElement:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       8: areturn

  public final reactor.core.publisher.Mono<T> delayElement(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: new           #143                // class reactor/core/publisher/MonoDelayElement
       3: dup
       4: aload_0
       5: aload_1
       6: invokevirtual #10                 // Method java/time/Duration.toMillis:()J
       9: getstatic     #11                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      12: aload_2
      13: invokespecial #144                // Method reactor/core/publisher/MonoDelayElement."<init>":(Lreactor/core/publisher/Mono;JLjava/util/concurrent/TimeUnit;Lreactor/core/scheduler/Scheduler;)V
      16: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      19: areturn

  public final reactor.core.publisher.Mono<T> delayUntil(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: aload_1
       1: ldc           #145                // String triggerProvider required
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: instanceof    #146                // class reactor/core/publisher/MonoDelayUntil
      11: ifeq          24
      14: aload_0
      15: checkcast     #146                // class reactor/core/publisher/MonoDelayUntil
      18: iconst_0
      19: aload_1
      20: invokevirtual #147                // Method reactor/core/publisher/MonoDelayUntil.copyWithNewTriggerGenerator:(ZLjava/util/function/Function;)Lreactor/core/publisher/MonoDelayUntil;
      23: areturn
      24: new           #146                // class reactor/core/publisher/MonoDelayUntil
      27: dup
      28: aload_0
      29: aload_1
      30: invokespecial #148                // Method reactor/core/publisher/MonoDelayUntil."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;)V
      33: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      36: areturn

  public final reactor.core.publisher.Mono<T> delaySubscription(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #7                  // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokevirtual #149                // Method delaySubscription:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       8: areturn

  public final reactor.core.publisher.Mono<T> delaySubscription(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #8                  // Method delay:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       6: invokevirtual #150                // Method delaySubscription:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       9: areturn

  public final <U> reactor.core.publisher.Mono<T> delaySubscription(org.reactivestreams.Publisher<U>);
    Code:
       0: new           #151                // class reactor/core/publisher/MonoDelaySubscription
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #152                // Method reactor/core/publisher/MonoDelaySubscription."<init>":(Lreactor/core/publisher/Mono;Lorg/reactivestreams/Publisher;)V
       9: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public final <X> reactor.core.publisher.Mono<X> dematerialize();
    Code:
       0: aload_0
       1: astore_1
       2: new           #153                // class reactor/core/publisher/MonoDematerialize
       5: dup
       6: aload_1
       7: invokespecial #154                // Method reactor/core/publisher/MonoDematerialize."<init>":(Lreactor/core/publisher/Mono;)V
      10: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      13: areturn

  public final reactor.core.publisher.Mono<T> doAfterSuccessOrError(java.util.function.BiConsumer<? super T, java.lang.Throwable>);
    Code:
       0: new           #155                // class reactor/core/publisher/MonoPeekTerminal
       3: dup
       4: aload_0
       5: aconst_null
       6: aconst_null
       7: aload_1
       8: invokespecial #156                // Method reactor/core/publisher/MonoPeekTerminal."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;Ljava/util/function/BiConsumer;Ljava/util/function/BiConsumer;)V
      11: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      14: areturn

  public final reactor.core.publisher.Mono<T> doAfterTerminate(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc           #157                // String afterTerminate
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: invokedynamic #158,  0            // InvokeDynamic #19:accept:(Ljava/lang/Runnable;)Ljava/util/function/BiConsumer;
      14: invokevirtual #159                // Method doAfterSuccessOrError:(Ljava/util/function/BiConsumer;)Lreactor/core/publisher/Mono;
      17: areturn

  public final reactor.core.publisher.Mono<T> doFirst(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc           #160                // String onFirst
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: instanceof    #36                 // class reactor/core/Fuseable
      11: ifeq          27
      14: new           #161                // class reactor/core/publisher/MonoDoFirstFuseable
      17: dup
      18: aload_0
      19: aload_1
      20: invokespecial #162                // Method reactor/core/publisher/MonoDoFirstFuseable."<init>":(Lreactor/core/publisher/Mono;Ljava/lang/Runnable;)V
      23: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      26: areturn
      27: new           #163                // class reactor/core/publisher/MonoDoFirst
      30: dup
      31: aload_0
      32: aload_1
      33: invokespecial #164                // Method reactor/core/publisher/MonoDoFirst."<init>":(Lreactor/core/publisher/Mono;Ljava/lang/Runnable;)V
      36: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      39: areturn

  public final reactor.core.publisher.Mono<T> doFinally(java.util.function.Consumer<reactor.core.publisher.SignalType>);
    Code:
       0: aload_1
       1: ldc           #165                // String onFinally
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: instanceof    #36                 // class reactor/core/Fuseable
      11: ifeq          27
      14: new           #166                // class reactor/core/publisher/MonoDoFinallyFuseable
      17: dup
      18: aload_0
      19: aload_1
      20: invokespecial #167                // Method reactor/core/publisher/MonoDoFinallyFuseable."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;)V
      23: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      26: areturn
      27: new           #168                // class reactor/core/publisher/MonoDoFinally
      30: dup
      31: aload_0
      32: aload_1
      33: invokespecial #169                // Method reactor/core/publisher/MonoDoFinally."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;)V
      36: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      39: areturn

  public final reactor.core.publisher.Mono<T> doOnCancel(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc           #170                // String onCancel
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aconst_null
       9: aconst_null
      10: aconst_null
      11: aconst_null
      12: aconst_null
      13: aload_1
      14: invokestatic  #171                // Method doOnSignal:(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/Mono;
      17: areturn

  public final <R> reactor.core.publisher.Mono<T> doOnDiscard(java.lang.Class<R>, java.util.function.Consumer<? super R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #172                // Method reactor/core/publisher/Operators.discardLocalAdapter:(Ljava/lang/Class;Ljava/util/function/Consumer;)Ljava/util/function/Function;
       6: invokevirtual #173                // Method subscriberContext:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
       9: areturn

  public final reactor.core.publisher.Mono<T> doOnNext(java.util.function.Consumer<? super T>);
    Code:
       0: aload_1
       1: ldc           #174                // String onNext
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aconst_null
       9: aload_1
      10: aconst_null
      11: aconst_null
      12: aconst_null
      13: aconst_null
      14: invokestatic  #171                // Method doOnSignal:(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/Mono;
      17: areturn

  public final reactor.core.publisher.Mono<T> doOnSuccess(java.util.function.Consumer<? super T>);
    Code:
       0: aload_1
       1: ldc           #175                // String onSuccess
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #155                // class reactor/core/publisher/MonoPeekTerminal
      10: dup
      11: aload_0
      12: aload_1
      13: aconst_null
      14: aconst_null
      15: invokespecial #156                // Method reactor/core/publisher/MonoPeekTerminal."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;Ljava/util/function/BiConsumer;Ljava/util/function/BiConsumer;)V
      18: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      21: areturn

  public final reactor.core.publisher.Mono<T> doOnEach(java.util.function.Consumer<? super reactor.core.publisher.Signal<T>>);
    Code:
       0: aload_1
       1: ldc           #176                // String signalConsumer
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: instanceof    #36                 // class reactor/core/Fuseable
      11: ifeq          27
      14: new           #177                // class reactor/core/publisher/MonoDoOnEachFuseable
      17: dup
      18: aload_0
      19: aload_1
      20: invokespecial #178                // Method reactor/core/publisher/MonoDoOnEachFuseable."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;)V
      23: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      26: areturn
      27: new           #179                // class reactor/core/publisher/MonoDoOnEach
      30: dup
      31: aload_0
      32: aload_1
      33: invokespecial #180                // Method reactor/core/publisher/MonoDoOnEach."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;)V
      36: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      39: areturn

  public final reactor.core.publisher.Mono<T> doOnError(java.util.function.Consumer<? super java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #181                // String onError
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aconst_null
       9: aconst_null
      10: aload_1
      11: aconst_null
      12: aconst_null
      13: aconst_null
      14: invokestatic  #171                // Method doOnSignal:(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/Mono;
      17: areturn

  public final <E extends java.lang.Throwable> reactor.core.publisher.Mono<T> doOnError(java.lang.Class<E>, java.util.function.Consumer<? super E>);
    Code:
       0: aload_1
       1: ldc           #182                // String type
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_2
       8: astore_3
       9: aload_0
      10: aload_1
      11: dup
      12: invokevirtual #113                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: pop
      16: invokedynamic #183,  0            // InvokeDynamic #20:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      21: aload_3
      22: invokevirtual #184                // Method doOnError:(Ljava/util/function/Predicate;Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      25: areturn

  public final reactor.core.publisher.Mono<T> doOnError(java.util.function.Predicate<? super java.lang.Throwable>, java.util.function.Consumer<? super java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #185                // String predicate
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: aload_2
      10: invokedynamic #186,  0            // InvokeDynamic #21:accept:(Ljava/util/function/Predicate;Ljava/util/function/Consumer;)Ljava/util/function/Consumer;
      15: invokevirtual #187                // Method doOnError:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      18: areturn

  public final reactor.core.publisher.Mono<T> doOnRequest(java.util.function.LongConsumer);
    Code:
       0: aload_1
       1: ldc           #188                // String consumer
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aconst_null
       9: aconst_null
      10: aconst_null
      11: aconst_null
      12: aload_1
      13: aconst_null
      14: invokestatic  #171                // Method doOnSignal:(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/Mono;
      17: areturn

  public final reactor.core.publisher.Mono<T> doOnSubscribe(java.util.function.Consumer<? super org.reactivestreams.Subscription>);
    Code:
       0: aload_1
       1: ldc           #189                // String onSubscribe
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: aconst_null
      10: aconst_null
      11: aconst_null
      12: aconst_null
      13: aconst_null
      14: invokestatic  #171                // Method doOnSignal:(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/Mono;
      17: areturn

  public final reactor.core.publisher.Mono<T> doOnSuccessOrError(java.util.function.BiConsumer<? super T, java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #190                // String onSuccessOrError
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #155                // class reactor/core/publisher/MonoPeekTerminal
      10: dup
      11: aload_0
      12: aconst_null
      13: aload_1
      14: aconst_null
      15: invokespecial #156                // Method reactor/core/publisher/MonoPeekTerminal."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;Ljava/util/function/BiConsumer;Ljava/util/function/BiConsumer;)V
      18: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      21: areturn

  public final reactor.core.publisher.Mono<T> doOnTerminate(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc           #191                // String onTerminate
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aconst_null
       9: aconst_null
      10: aload_1
      11: invokedynamic #192,  0            // InvokeDynamic #22:accept:(Ljava/lang/Runnable;)Ljava/util/function/Consumer;
      16: aload_1
      17: aconst_null
      18: aconst_null
      19: invokestatic  #171                // Method doOnSignal:(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/Mono;
      22: areturn

  public final reactor.core.publisher.Mono<reactor.util.function.Tuple2<java.lang.Long, T>> elapsed();
    Code:
       0: aload_0
       1: invokestatic  #7                  // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       4: invokevirtual #193                // Method elapsed:(Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       7: areturn

  public final reactor.core.publisher.Mono<reactor.util.function.Tuple2<java.lang.Long, T>> elapsed(reactor.core.scheduler.Scheduler);
    Code:
       0: aload_1
       1: ldc           #194                // String scheduler
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #195                // class reactor/core/publisher/MonoElapsed
      10: dup
      11: aload_0
      12: aload_1
      13: invokespecial #196                // Method reactor/core/publisher/MonoElapsed."<init>":(Lreactor/core/publisher/Mono;Lreactor/core/scheduler/Scheduler;)V
      16: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      19: areturn

  public final reactor.core.publisher.Flux<T> expandDeep(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends T>>, int);
    Code:
       0: new           #197                // class reactor/core/publisher/MonoExpand
       3: dup
       4: aload_0
       5: aload_1
       6: iconst_0
       7: iload_2
       8: invokespecial #198                // Method reactor/core/publisher/MonoExpand."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;ZI)V
      11: invokestatic  #199                // Method reactor/core/publisher/Flux.onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      14: areturn

  public final reactor.core.publisher.Flux<T> expandDeep(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #60                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: invokevirtual #200                // Method expandDeep:(Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> expand(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends T>>, int);
    Code:
       0: new           #197                // class reactor/core/publisher/MonoExpand
       3: dup
       4: aload_0
       5: aload_1
       6: iconst_1
       7: iload_2
       8: invokespecial #198                // Method reactor/core/publisher/MonoExpand."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;ZI)V
      11: invokestatic  #199                // Method reactor/core/publisher/Flux.onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      14: areturn

  public final reactor.core.publisher.Flux<T> expand(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #60                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: invokevirtual #201                // Method expand:(Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Mono<T> filter(java.util.function.Predicate<? super T>);
    Code:
       0: aload_0
       1: instanceof    #36                 // class reactor/core/Fuseable
       4: ifeq          20
       7: new           #202                // class reactor/core/publisher/MonoFilterFuseable
      10: dup
      11: aload_0
      12: aload_1
      13: invokespecial #203                // Method reactor/core/publisher/MonoFilterFuseable."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Predicate;)V
      16: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      19: areturn
      20: new           #204                // class reactor/core/publisher/MonoFilter
      23: dup
      24: aload_0
      25: aload_1
      26: invokespecial #205                // Method reactor/core/publisher/MonoFilter."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Predicate;)V
      29: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      32: areturn

  public final reactor.core.publisher.Mono<T> filterWhen(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<java.lang.Boolean>>);
    Code:
       0: new           #206                // class reactor/core/publisher/MonoFilterWhen
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #207                // Method reactor/core/publisher/MonoFilterWhen."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;)V
       9: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public final <R> reactor.core.publisher.Mono<R> flatMap(java.util.function.Function<? super T, ? extends reactor.core.publisher.Mono<? extends R>>);
    Code:
       0: new           #208                // class reactor/core/publisher/MonoFlatMap
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #209                // Method reactor/core/publisher/MonoFlatMap."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;)V
       9: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public final <R> reactor.core.publisher.Flux<R> flatMapMany(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>);
    Code:
       0: new           #210                // class reactor/core/publisher/MonoFlatMapMany
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #211                // Method reactor/core/publisher/MonoFlatMapMany."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;)V
       9: invokestatic  #199                // Method reactor/core/publisher/Flux.onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final <R> reactor.core.publisher.Flux<R> flatMapMany(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, java.util.function.Function<? super java.lang.Throwable, ? extends org.reactivestreams.Publisher<? extends R>>, java.util.function.Supplier<? extends org.reactivestreams.Publisher<? extends R>>);
    Code:
       0: aload_0
       1: invokevirtual #212                // Method flux:()Lreactor/core/publisher/Flux;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #213                // Method reactor/core/publisher/Flux.flatMap:(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
      10: areturn

  public final <R> reactor.core.publisher.Flux<R> flatMapIterable(java.util.function.Function<? super T, ? extends java.lang.Iterable<? extends R>>);
    Code:
       0: new           #214                // class reactor/core/publisher/MonoFlattenIterable
       3: dup
       4: aload_0
       5: aload_1
       6: ldc           #216                // int 2147483647
       8: invokestatic  #217                // Method reactor/util/concurrent/Queues.one:()Ljava/util/function/Supplier;
      11: invokespecial #218                // Method reactor/core/publisher/MonoFlattenIterable."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;ILjava/util/function/Supplier;)V
      14: invokestatic  #199                // Method reactor/core/publisher/Flux.onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      17: areturn

  public final reactor.core.publisher.Flux<T> flux();
    Code:
       0: aload_0
       1: instanceof    #219                // class java/util/concurrent/Callable
       4: ifeq          58
       7: aload_0
       8: instanceof    #137                // class reactor/core/Fuseable$ScalarCallable
      11: ifeq          41
      14: aload_0
      15: invokevirtual #138                // Method block:()Ljava/lang/Object;
      18: astore_1
      19: goto          28
      22: astore_2
      23: aload_2
      24: invokestatic  #220                // Method reactor/core/publisher/Flux.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Flux;
      27: areturn
      28: aload_1
      29: ifnonnull     36
      32: invokestatic  #221                // Method reactor/core/publisher/Flux.empty:()Lreactor/core/publisher/Flux;
      35: areturn
      36: aload_1
      37: invokestatic  #222                // Method reactor/core/publisher/Flux.just:(Ljava/lang/Object;)Lreactor/core/publisher/Flux;
      40: areturn
      41: aload_0
      42: checkcast     #219                // class java/util/concurrent/Callable
      45: astore_1
      46: new           #223                // class reactor/core/publisher/FluxCallable
      49: dup
      50: aload_1
      51: invokespecial #224                // Method reactor/core/publisher/FluxCallable."<init>":(Ljava/util/concurrent/Callable;)V
      54: invokestatic  #199                // Method reactor/core/publisher/Flux.onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      57: areturn
      58: aload_0
      59: invokestatic  #225                // Method reactor/core/publisher/Flux.wrap:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      62: areturn
    Exception table:
       from    to  target type
          14    19    22   Class java/lang/Throwable

  public final reactor.core.publisher.Mono<java.lang.Boolean> hasElement();
    Code:
       0: new           #226                // class reactor/core/publisher/MonoHasElement
       3: dup
       4: aload_0
       5: invokespecial #227                // Method reactor/core/publisher/MonoHasElement."<init>":(Lreactor/core/publisher/Mono;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public final <R> reactor.core.publisher.Mono<R> handle(java.util.function.BiConsumer<? super T, reactor.core.publisher.SynchronousSink<R>>);
    Code:
       0: aload_0
       1: instanceof    #36                 // class reactor/core/Fuseable
       4: ifeq          20
       7: new           #228                // class reactor/core/publisher/MonoHandleFuseable
      10: dup
      11: aload_0
      12: aload_1
      13: invokespecial #229                // Method reactor/core/publisher/MonoHandleFuseable."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/BiConsumer;)V
      16: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      19: areturn
      20: new           #230                // class reactor/core/publisher/MonoHandle
      23: dup
      24: aload_0
      25: aload_1
      26: invokespecial #231                // Method reactor/core/publisher/MonoHandle."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/BiConsumer;)V
      29: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      32: areturn

  public final reactor.core.publisher.Mono<T> hide();
    Code:
       0: new           #232                // class reactor/core/publisher/MonoHide
       3: dup
       4: aload_0
       5: invokespecial #233                // Method reactor/core/publisher/MonoHide."<init>":(Lreactor/core/publisher/Mono;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public final reactor.core.publisher.Mono<T> ignoreElement();
    Code:
       0: new           #234                // class reactor/core/publisher/MonoIgnoreElement
       3: dup
       4: aload_0
       5: invokespecial #235                // Method reactor/core/publisher/MonoIgnoreElement."<init>":(Lreactor/core/publisher/Mono;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public final reactor.core.publisher.Mono<T> log();
    Code:
       0: aload_0
       1: aconst_null
       2: getstatic     #236                // Field java/util/logging/Level.INFO:Ljava/util/logging/Level;
       5: iconst_0
       6: anewarray     #237                // class reactor/core/publisher/SignalType
       9: invokevirtual #238                // Method log:(Ljava/lang/String;Ljava/util/logging/Level;[Lreactor/core/publisher/SignalType;)Lreactor/core/publisher/Mono;
      12: areturn

  public final reactor.core.publisher.Mono<T> log(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #236                // Field java/util/logging/Level.INFO:Ljava/util/logging/Level;
       5: iconst_0
       6: anewarray     #237                // class reactor/core/publisher/SignalType
       9: invokevirtual #238                // Method log:(Ljava/lang/String;Ljava/util/logging/Level;[Lreactor/core/publisher/SignalType;)Lreactor/core/publisher/Mono;
      12: areturn

  public final reactor.core.publisher.Mono<T> log(java.lang.String, java.util.logging.Level, reactor.core.publisher.SignalType...);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: aload_3
       5: invokevirtual #239                // Method log:(Ljava/lang/String;Ljava/util/logging/Level;Z[Lreactor/core/publisher/SignalType;)Lreactor/core/publisher/Mono;
       8: areturn

  public final reactor.core.publisher.Mono<T> log(java.lang.String, java.util.logging.Level, boolean, reactor.core.publisher.SignalType...);
    Code:
       0: new           #240                // class reactor/core/publisher/SignalLogger
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: iload_3
       8: aload         4
      10: invokespecial #241                // Method reactor/core/publisher/SignalLogger."<init>":(Lorg/reactivestreams/Publisher;Ljava/lang/String;Ljava/util/logging/Level;Z[Lreactor/core/publisher/SignalType;)V
      13: astore        5
      15: aload_0
      16: instanceof    #36                 // class reactor/core/Fuseable
      19: ifeq          36
      22: new           #242                // class reactor/core/publisher/MonoLogFuseable
      25: dup
      26: aload_0
      27: aload         5
      29: invokespecial #243                // Method reactor/core/publisher/MonoLogFuseable."<init>":(Lreactor/core/publisher/Mono;Lreactor/core/publisher/SignalPeek;)V
      32: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      35: areturn
      36: new           #244                // class reactor/core/publisher/MonoLog
      39: dup
      40: aload_0
      41: aload         5
      43: invokespecial #245                // Method reactor/core/publisher/MonoLog."<init>":(Lreactor/core/publisher/Mono;Lreactor/core/publisher/SignalPeek;)V
      46: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      49: areturn

  public final reactor.core.publisher.Mono<T> log(reactor.util.Logger);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #236                // Field java/util/logging/Level.INFO:Ljava/util/logging/Level;
       5: iconst_0
       6: iconst_0
       7: anewarray     #237                // class reactor/core/publisher/SignalType
      10: invokevirtual #246                // Method log:(Lreactor/util/Logger;Ljava/util/logging/Level;Z[Lreactor/core/publisher/SignalType;)Lreactor/core/publisher/Mono;
      13: areturn

  public final reactor.core.publisher.Mono<T> log(reactor.util.Logger, java.util.logging.Level, boolean, reactor.core.publisher.SignalType...);
    Code:
       0: new           #240                // class reactor/core/publisher/SignalLogger
       3: dup
       4: aload_0
       5: ldc           #247                // String IGNORED
       7: aload_2
       8: iload_3
       9: aload_1
      10: invokedynamic #248,  0            // InvokeDynamic #23:apply:(Lreactor/util/Logger;)Ljava/util/function/Function;
      15: aload         4
      17: invokespecial #249                // Method reactor/core/publisher/SignalLogger."<init>":(Lorg/reactivestreams/Publisher;Ljava/lang/String;Ljava/util/logging/Level;ZLjava/util/function/Function;[Lreactor/core/publisher/SignalType;)V
      20: astore        5
      22: aload_0
      23: instanceof    #36                 // class reactor/core/Fuseable
      26: ifeq          43
      29: new           #242                // class reactor/core/publisher/MonoLogFuseable
      32: dup
      33: aload_0
      34: aload         5
      36: invokespecial #243                // Method reactor/core/publisher/MonoLogFuseable."<init>":(Lreactor/core/publisher/Mono;Lreactor/core/publisher/SignalPeek;)V
      39: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      42: areturn
      43: new           #244                // class reactor/core/publisher/MonoLog
      46: dup
      47: aload_0
      48: aload         5
      50: invokespecial #245                // Method reactor/core/publisher/MonoLog."<init>":(Lreactor/core/publisher/Mono;Lreactor/core/publisher/SignalPeek;)V
      53: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      56: areturn

  public final <R> reactor.core.publisher.Mono<R> map(java.util.function.Function<? super T, ? extends R>);
    Code:
       0: aload_0
       1: instanceof    #36                 // class reactor/core/Fuseable
       4: ifeq          20
       7: new           #250                // class reactor/core/publisher/MonoMapFuseable
      10: dup
      11: aload_0
      12: aload_1
      13: invokespecial #251                // Method reactor/core/publisher/MonoMapFuseable."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;)V
      16: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      19: areturn
      20: new           #252                // class reactor/core/publisher/MonoMap
      23: dup
      24: aload_0
      25: aload_1
      26: invokespecial #253                // Method reactor/core/publisher/MonoMap."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;)V
      29: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      32: areturn

  public final reactor.core.publisher.Mono<reactor.core.publisher.Signal<T>> materialize();
    Code:
       0: new           #254                // class reactor/core/publisher/MonoMaterialize
       3: dup
       4: aload_0
       5: invokespecial #255                // Method reactor/core/publisher/MonoMaterialize."<init>":(Lreactor/core/publisher/Mono;)V
       8: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      11: areturn

  public final reactor.core.publisher.Flux<T> mergeWith(org.reactivestreams.Publisher<? extends T>);
    Code:
       0: iconst_2
       1: anewarray     #79                 // class org/reactivestreams/Publisher
       4: dup
       5: iconst_0
       6: aload_0
       7: aastore
       8: dup
       9: iconst_1
      10: aload_1
      11: aastore
      12: invokestatic  #256                // Method reactor/core/publisher/Flux.merge:([Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      15: areturn

  public final reactor.core.publisher.Mono<T> metrics();
    Code:
       0: invokestatic  #257                // Method reactor/util/Metrics.isInstrumentationAvailable:()Z
       3: ifne          8
       6: aload_0
       7: areturn
       8: aload_0
       9: instanceof    #36                 // class reactor/core/Fuseable
      12: ifeq          27
      15: new           #258                // class reactor/core/publisher/MonoMetricsFuseable
      18: dup
      19: aload_0
      20: invokespecial #259                // Method reactor/core/publisher/MonoMetricsFuseable."<init>":(Lreactor/core/publisher/Mono;)V
      23: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      26: areturn
      27: new           #260                // class reactor/core/publisher/MonoMetrics
      30: dup
      31: aload_0
      32: invokespecial #261                // Method reactor/core/publisher/MonoMetrics."<init>":(Lreactor/core/publisher/Mono;)V
      35: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      38: areturn

  public final reactor.core.publisher.Mono<T> name(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #262                // Method reactor/core/publisher/MonoName.createOrAppend:(Lreactor/core/publisher/Mono;Ljava/lang/String;)Lreactor/core/publisher/Mono;
       5: areturn

  public final reactor.core.publisher.Mono<T> or(reactor.core.publisher.Mono<? extends T>);
    Code:
       0: aload_0
       1: instanceof    #18                 // class reactor/core/publisher/MonoFirst
       4: ifeq          24
       7: aload_0
       8: checkcast     #18                 // class reactor/core/publisher/MonoFirst
      11: astore_2
      12: aload_2
      13: aload_1
      14: invokevirtual #263                // Method reactor/core/publisher/MonoFirst.orAdditionalSource:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      17: astore_3
      18: aload_3
      19: ifnull        24
      22: aload_3
      23: areturn
      24: iconst_2
      25: anewarray     #21                 // class reactor/core/publisher/Mono
      28: dup
      29: iconst_0
      30: aload_0
      31: aastore
      32: dup
      33: iconst_1
      34: aload_1
      35: aastore
      36: invokestatic  #264                // Method first:([Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      39: areturn

  public final <U> reactor.core.publisher.Mono<U> ofType(java.lang.Class<U>);
    Code:
       0: aload_1
       1: ldc           #111                // String clazz
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: invokedynamic #265,  0            // InvokeDynamic #24:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      14: invokevirtual #266                // Method filter:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Mono;
      17: aload_1
      18: invokevirtual #267                // Method cast:(Ljava/lang/Class;)Lreactor/core/publisher/Mono;
      21: areturn

  public final reactor.core.publisher.Mono<T> onErrorContinue(java.util.function.BiConsumer<java.lang.Throwable, java.lang.Object>);
    Code:
       0: aload_1
       1: astore_2
       2: aload_0
       3: ldc_w         #269                // String reactor.onNextError.localStrategy
       6: aload_2
       7: invokestatic  #270                // InterfaceMethod reactor/core/publisher/OnNextFailureStrategy.resume:(Ljava/util/function/BiConsumer;)Lreactor/core/publisher/OnNextFailureStrategy;
      10: invokestatic  #271                // InterfaceMethod reactor/util/context/Context.of:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/util/context/Context;
      13: invokevirtual #272                // Method subscriberContext:(Lreactor/util/context/Context;)Lreactor/core/publisher/Mono;
      16: areturn

  public final <E extends java.lang.Throwable> reactor.core.publisher.Mono<T> onErrorContinue(java.lang.Class<E>, java.util.function.BiConsumer<java.lang.Throwable, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: dup
       3: invokevirtual #113                // Method java/lang/Object.getClass:()Ljava/lang/Class;
       6: pop
       7: invokedynamic #183,  0            // InvokeDynamic #20:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      12: aload_2
      13: invokevirtual #273                // Method onErrorContinue:(Ljava/util/function/Predicate;Ljava/util/function/BiConsumer;)Lreactor/core/publisher/Mono;
      16: areturn

  public final <E extends java.lang.Throwable> reactor.core.publisher.Mono<T> onErrorContinue(java.util.function.Predicate<E>, java.util.function.BiConsumer<java.lang.Throwable, java.lang.Object>);
    Code:
       0: aload_1
       1: astore_3
       2: aload_2
       3: astore        4
       5: aload_0
       6: ldc_w         #269                // String reactor.onNextError.localStrategy
       9: aload_3
      10: aload         4
      12: invokestatic  #274                // InterfaceMethod reactor/core/publisher/OnNextFailureStrategy.resumeIf:(Ljava/util/function/Predicate;Ljava/util/function/BiConsumer;)Lreactor/core/publisher/OnNextFailureStrategy;
      15: invokestatic  #271                // InterfaceMethod reactor/util/context/Context.of:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/util/context/Context;
      18: invokevirtual #272                // Method subscriberContext:(Lreactor/util/context/Context;)Lreactor/core/publisher/Mono;
      21: areturn

  public final reactor.core.publisher.Mono<T> onErrorStop();
    Code:
       0: aload_0
       1: ldc_w         #269                // String reactor.onNextError.localStrategy
       4: invokestatic  #275                // InterfaceMethod reactor/core/publisher/OnNextFailureStrategy.stop:()Lreactor/core/publisher/OnNextFailureStrategy;
       7: invokestatic  #271                // InterfaceMethod reactor/util/context/Context.of:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/util/context/Context;
      10: invokevirtual #272                // Method subscriberContext:(Lreactor/util/context/Context;)Lreactor/core/publisher/Mono;
      13: areturn

  public final reactor.core.publisher.Mono<T> onErrorMap(java.util.function.Predicate<? super java.lang.Throwable>, java.util.function.Function<? super java.lang.Throwable, ? extends java.lang.Throwable>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #276,  0            // InvokeDynamic #25:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
       8: invokevirtual #277                // Method onErrorResume:(Ljava/util/function/Predicate;Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      11: areturn

  public final reactor.core.publisher.Mono<T> onErrorMap(java.util.function.Function<? super java.lang.Throwable, ? extends java.lang.Throwable>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #278,  0            // InvokeDynamic #26:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
       7: invokevirtual #279                // Method onErrorResume:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      10: areturn

  public final <E extends java.lang.Throwable> reactor.core.publisher.Mono<T> onErrorMap(java.lang.Class<E>, java.util.function.Function<? super E, ? extends java.lang.Throwable>);
    Code:
       0: aload_2
       1: astore_3
       2: aload_0
       3: aload_1
       4: dup
       5: invokevirtual #113                // Method java/lang/Object.getClass:()Ljava/lang/Class;
       8: pop
       9: invokedynamic #183,  0            // InvokeDynamic #20:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      14: aload_3
      15: invokevirtual #280                // Method onErrorMap:(Ljava/util/function/Predicate;Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      18: areturn

  public final reactor.core.publisher.Mono<T> onErrorResume(java.util.function.Function<? super java.lang.Throwable, ? extends reactor.core.publisher.Mono<? extends T>>);
    Code:
       0: new           #281                // class reactor/core/publisher/MonoOnErrorResume
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #282                // Method reactor/core/publisher/MonoOnErrorResume."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;)V
       9: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public final <E extends java.lang.Throwable> reactor.core.publisher.Mono<T> onErrorResume(java.lang.Class<E>, java.util.function.Function<? super E, ? extends reactor.core.publisher.Mono<? extends T>>);
    Code:
       0: aload_1
       1: ldc           #182                // String type
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_2
       8: astore_3
       9: aload_0
      10: aload_1
      11: dup
      12: invokevirtual #113                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: pop
      16: invokedynamic #183,  0            // InvokeDynamic #20:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      21: aload_3
      22: invokevirtual #277                // Method onErrorResume:(Ljava/util/function/Predicate;Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      25: areturn

  public final reactor.core.publisher.Mono<T> onErrorResume(java.util.function.Predicate<? super java.lang.Throwable>, java.util.function.Function<? super java.lang.Throwable, ? extends reactor.core.publisher.Mono<? extends T>>);
    Code:
       0: aload_1
       1: ldc           #185                // String predicate
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: aload_2
      10: invokedynamic #283,  0            // InvokeDynamic #27:apply:(Ljava/util/function/Predicate;Ljava/util/function/Function;)Ljava/util/function/Function;
      15: invokevirtual #279                // Method onErrorResume:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      18: areturn

  public final reactor.core.publisher.Mono<T> onErrorReturn(T);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #284,  0            // InvokeDynamic #28:apply:(Ljava/lang/Object;)Ljava/util/function/Function;
       7: invokevirtual #279                // Method onErrorResume:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      10: areturn

  public final <E extends java.lang.Throwable> reactor.core.publisher.Mono<T> onErrorReturn(java.lang.Class<E>, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #285,  0            // InvokeDynamic #29:apply:(Ljava/lang/Object;)Ljava/util/function/Function;
       8: invokevirtual #286                // Method onErrorResume:(Ljava/lang/Class;Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      11: areturn

  public final reactor.core.publisher.Mono<T> onErrorReturn(java.util.function.Predicate<? super java.lang.Throwable>, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #287,  0            // InvokeDynamic #30:apply:(Ljava/lang/Object;)Ljava/util/function/Function;
       8: invokevirtual #277                // Method onErrorResume:(Ljava/util/function/Predicate;Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      11: areturn

  public final reactor.core.publisher.Mono<T> onTerminateDetach();
    Code:
       0: new           #288                // class reactor/core/publisher/MonoDetach
       3: dup
       4: aload_0
       5: invokespecial #289                // Method reactor/core/publisher/MonoDetach."<init>":(Lreactor/core/publisher/Mono;)V
       8: areturn

  public final <R> reactor.core.publisher.Mono<R> publish(java.util.function.Function<? super reactor.core.publisher.Mono<T>, ? extends reactor.core.publisher.Mono<? extends R>>);
    Code:
       0: new           #290                // class reactor/core/publisher/MonoPublishMulticast
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #291                // Method reactor/core/publisher/MonoPublishMulticast."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;)V
       9: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public final reactor.core.publisher.Mono<T> publishOn(reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: instanceof    #219                // class java/util/concurrent/Callable
       4: ifeq          51
       7: aload_0
       8: instanceof    #137                // class reactor/core/Fuseable$ScalarCallable
      11: ifeq          33
      14: aload_0
      15: invokevirtual #138                // Method block:()Ljava/lang/Object;
      18: astore_2
      19: new           #292                // class reactor/core/publisher/MonoSubscribeOnValue
      22: dup
      23: aload_2
      24: aload_1
      25: invokespecial #293                // Method reactor/core/publisher/MonoSubscribeOnValue."<init>":(Ljava/lang/Object;Lreactor/core/scheduler/Scheduler;)V
      28: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      31: areturn
      32: astore_2
      33: aload_0
      34: checkcast     #219                // class java/util/concurrent/Callable
      37: astore_2
      38: new           #294                // class reactor/core/publisher/MonoSubscribeOnCallable
      41: dup
      42: aload_2
      43: aload_1
      44: invokespecial #295                // Method reactor/core/publisher/MonoSubscribeOnCallable."<init>":(Ljava/util/concurrent/Callable;Lreactor/core/scheduler/Scheduler;)V
      47: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      50: areturn
      51: new           #296                // class reactor/core/publisher/MonoPublishOn
      54: dup
      55: aload_0
      56: aload_1
      57: invokespecial #297                // Method reactor/core/publisher/MonoPublishOn."<init>":(Lreactor/core/publisher/Mono;Lreactor/core/scheduler/Scheduler;)V
      60: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      63: areturn
    Exception table:
       from    to  target type
          14    31    32   Class java/lang/Throwable

  public final reactor.core.publisher.Flux<T> repeat();
    Code:
       0: aload_0
       1: getstatic     #298                // Field reactor/core/publisher/Flux.ALWAYS_BOOLEAN_SUPPLIER:Ljava/util/function/BooleanSupplier;
       4: invokevirtual #299                // Method repeat:(Ljava/util/function/BooleanSupplier;)Lreactor/core/publisher/Flux;
       7: areturn

  public final reactor.core.publisher.Flux<T> repeat(java.util.function.BooleanSupplier);
    Code:
       0: new           #300                // class reactor/core/publisher/MonoRepeatPredicate
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #301                // Method reactor/core/publisher/MonoRepeatPredicate."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/BooleanSupplier;)V
       9: invokestatic  #199                // Method reactor/core/publisher/Flux.onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> repeat(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifne          11
       6: aload_0
       7: invokevirtual #212                // Method flux:()Lreactor/core/publisher/Flux;
      10: areturn
      11: new           #302                // class reactor/core/publisher/MonoRepeat
      14: dup
      15: aload_0
      16: lload_1
      17: invokespecial #303                // Method reactor/core/publisher/MonoRepeat."<init>":(Lreactor/core/publisher/Mono;J)V
      20: invokestatic  #199                // Method reactor/core/publisher/Flux.onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      23: areturn

  public final reactor.core.publisher.Flux<T> repeat(long, java.util.function.BooleanSupplier);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          17
       6: new           #304                // class java/lang/IllegalArgumentException
       9: dup
      10: ldc_w         #305                // String numRepeat >= 0 required
      13: invokespecial #306                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: lload_1
      18: lconst_0
      19: lcmp
      20: ifne          28
      23: aload_0
      24: invokevirtual #212                // Method flux:()Lreactor/core/publisher/Flux;
      27: areturn
      28: aload_0
      29: aload_3
      30: lload_1
      31: invokedynamic #307,  0            // InvokeDynamic #31:get:(Lreactor/core/publisher/Mono;Ljava/util/function/BooleanSupplier;J)Ljava/util/function/Supplier;
      36: invokestatic  #308                // Method reactor/core/publisher/Flux.defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
      39: areturn

  public final reactor.core.publisher.Flux<T> repeatWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: new           #309                // class reactor/core/publisher/MonoRepeatWhen
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #310                // Method reactor/core/publisher/MonoRepeatWhen."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;)V
       9: invokestatic  #199                // Method reactor/core/publisher/Flux.onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Mono<T> repeatWhenEmpty(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: aload_0
       1: ldc           #216                // int 2147483647
       3: aload_1
       4: invokevirtual #311                // Method repeatWhenEmpty:(ILjava/util/function/Function;)Lreactor/core/publisher/Mono;
       7: areturn

  public final reactor.core.publisher.Mono<T> repeatWhenEmpty(int, java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokedynamic #312,  0            // InvokeDynamic #32:get:(Lreactor/core/publisher/Mono;ILjava/util/function/Function;)Ljava/util/function/Supplier;
       8: invokestatic  #35                 // Method defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      11: areturn

  public final reactor.core.publisher.Mono<T> retry();
    Code:
       0: aload_0
       1: ldc2_w        #314                // long 9223372036854775807l
       4: invokevirtual #316                // Method retry:(J)Lreactor/core/publisher/Mono;
       7: areturn

  public final reactor.core.publisher.Mono<T> retry(long);
    Code:
       0: new           #317                // class reactor/core/publisher/MonoRetry
       3: dup
       4: aload_0
       5: lload_1
       6: invokespecial #318                // Method reactor/core/publisher/MonoRetry."<init>":(Lreactor/core/publisher/Mono;J)V
       9: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public final reactor.core.publisher.Mono<T> retry(java.util.function.Predicate<? super java.lang.Throwable>);
    Code:
       0: new           #319                // class reactor/core/publisher/MonoRetryPredicate
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #320                // Method reactor/core/publisher/MonoRetryPredicate."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Predicate;)V
       9: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public final reactor.core.publisher.Mono<T> retry(long, java.util.function.Predicate<? super java.lang.Throwable>);
    Code:
       0: aload_0
       1: aload_3
       2: lload_1
       3: invokedynamic #321,  0            // InvokeDynamic #33:get:(Lreactor/core/publisher/Mono;Ljava/util/function/Predicate;J)Ljava/util/function/Supplier;
       8: invokestatic  #35                 // Method defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      11: areturn

  public final reactor.core.publisher.Mono<T> retryWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Throwable>, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: new           #322                // class reactor/core/publisher/MonoRetryWhen
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #323                // Method reactor/core/publisher/MonoRetryWhen."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;)V
       9: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public final reactor.core.publisher.Mono<T> retryBackoff(long, java.time.Duration);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: ldc2_w        #314                // long 9223372036854775807l
       6: invokestatic  #324                // Method java/time/Duration.ofMillis:(J)Ljava/time/Duration;
       9: ldc2_w        #325                // double 0.5d
      12: invokevirtual #327                // Method retryBackoff:(JLjava/time/Duration;Ljava/time/Duration;D)Lreactor/core/publisher/Mono;
      15: areturn

  public final reactor.core.publisher.Mono<T> retryBackoff(long, java.time.Duration, java.time.Duration);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: aload         4
       5: ldc2_w        #325                // double 0.5d
       8: invokevirtual #327                // Method retryBackoff:(JLjava/time/Duration;Ljava/time/Duration;D)Lreactor/core/publisher/Mono;
      11: areturn

  public final reactor.core.publisher.Mono<T> retryBackoff(long, java.time.Duration, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: aload         4
       5: ldc2_w        #325                // double 0.5d
       8: aload         5
      10: invokevirtual #328                // Method retryBackoff:(JLjava/time/Duration;Ljava/time/Duration;DLreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
      13: areturn

  public final reactor.core.publisher.Mono<T> retryBackoff(long, java.time.Duration, java.time.Duration, double);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: aload         4
       5: dload         5
       7: invokestatic  #7                  // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
      10: invokevirtual #328                // Method retryBackoff:(JLjava/time/Duration;Ljava/time/Duration;DLreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
      13: areturn

  public final reactor.core.publisher.Mono<T> retryBackoff(long, java.time.Duration, java.time.Duration, double, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: aload         4
       5: dload         5
       7: aload         7
       9: invokestatic  #329                // Method reactor/core/publisher/FluxRetryWhen.randomExponentialBackoffFunction:(JLjava/time/Duration;Ljava/time/Duration;DLreactor/core/scheduler/Scheduler;)Ljava/util/function/Function;
      12: invokevirtual #330                // Method retryWhen:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      15: areturn

  public final reactor.core.publisher.Mono<T> single();
    Code:
       0: aload_0
       1: instanceof    #219                // class java/util/concurrent/Callable
       4: ifeq          75
       7: aload_0
       8: instanceof    #137                // class reactor/core/Fuseable$ScalarCallable
      11: ifeq          58
      14: aload_0
      15: checkcast     #137                // class reactor/core/Fuseable$ScalarCallable
      18: astore_1
      19: aload_1
      20: invokeinterface #331,  1          // InterfaceMethod reactor/core/Fuseable$ScalarCallable.call:()Ljava/lang/Object;
      25: astore_2
      26: goto          35
      29: astore_3
      30: aload_3
      31: invokestatic  #333                // Method error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      34: areturn
      35: aload_2
      36: ifnonnull     53
      39: new           #334                // class java/util/NoSuchElementException
      42: dup
      43: ldc_w         #335                // String Source was a (constant) empty
      46: invokespecial #336                // Method java/util/NoSuchElementException."<init>":(Ljava/lang/String;)V
      49: invokestatic  #333                // Method error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      52: areturn
      53: aload_2
      54: invokestatic  #56                 // Method just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      57: areturn
      58: aload_0
      59: checkcast     #219                // class java/util/concurrent/Callable
      62: astore_1
      63: new           #30                 // class reactor/core/publisher/MonoCallable
      66: dup
      67: aload_1
      68: invokespecial #31                 // Method reactor/core/publisher/MonoCallable."<init>":(Ljava/util/concurrent/Callable;)V
      71: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      74: areturn
      75: new           #337                // class reactor/core/publisher/MonoSingleMono
      78: dup
      79: aload_0
      80: invokespecial #338                // Method reactor/core/publisher/MonoSingleMono."<init>":(Lreactor/core/publisher/Mono;)V
      83: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      86: areturn
    Exception table:
       from    to  target type
          19    26    29   Class java/lang/Exception

  public final reactor.core.Disposable subscribe();
    Code:
       0: aload_0
       1: instanceof    #115                // class reactor/core/publisher/MonoProcessor
       4: ifeq          18
       7: aload_0
       8: checkcast     #115                // class reactor/core/publisher/MonoProcessor
      11: astore_1
      12: aload_1
      13: invokevirtual #339                // Method reactor/core/publisher/MonoProcessor.connect:()V
      16: aload_1
      17: areturn
      18: aload_0
      19: new           #340                // class reactor/core/publisher/LambdaMonoSubscriber
      22: dup
      23: aconst_null
      24: aconst_null
      25: aconst_null
      26: aconst_null
      27: invokespecial #341                // Method reactor/core/publisher/LambdaMonoSubscriber."<init>":(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/Consumer;)V
      30: invokevirtual #342                // Method subscribeWith:(Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;
      33: checkcast     #343                // class reactor/core/Disposable
      36: areturn

  public final reactor.core.Disposable subscribe(java.util.function.Consumer<? super T>);
    Code:
       0: aload_1
       1: ldc           #188                // String consumer
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: aconst_null
      10: aconst_null
      11: invokevirtual #344                // Method subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;)Lreactor/core/Disposable;
      14: areturn

  public final reactor.core.Disposable subscribe(java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>);
    Code:
       0: aload_2
       1: ldc_w         #345                // String errorConsumer
       4: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: aload_1
      10: aload_2
      11: aconst_null
      12: invokevirtual #344                // Method subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;)Lreactor/core/Disposable;
      15: areturn

  public final reactor.core.Disposable subscribe(java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aconst_null
       5: invokevirtual #346                // Method subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/Consumer;)Lreactor/core/Disposable;
       8: areturn

  public final reactor.core.Disposable subscribe(java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable, java.util.function.Consumer<? super org.reactivestreams.Subscription>);
    Code:
       0: aload_0
       1: new           #340                // class reactor/core/publisher/LambdaMonoSubscriber
       4: dup
       5: aload_1
       6: aload_2
       7: aload_3
       8: aload         4
      10: invokespecial #341                // Method reactor/core/publisher/LambdaMonoSubscriber."<init>":(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/Consumer;)V
      13: invokevirtual #342                // Method subscribeWith:(Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;
      16: checkcast     #343                // class reactor/core/Disposable
      19: areturn

  public final void subscribe(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_0
       1: invokestatic  #102                // Method onLastAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
       4: aload_1
       5: invokestatic  #103                // Method reactor/core/publisher/Operators.toCoreSubscriber:(Lorg/reactivestreams/Subscriber;)Lreactor/core/CoreSubscriber;
       8: invokevirtual #104                // Method subscribe:(Lreactor/core/CoreSubscriber;)V
      11: return

  public abstract void subscribe(reactor.core.CoreSubscriber<? super T>);

  public final reactor.core.publisher.Mono<T> subscriberContext(reactor.util.context.Context);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #347,  0            // InvokeDynamic #34:apply:(Lreactor/util/context/Context;)Ljava/util/function/Function;
       7: invokevirtual #173                // Method subscriberContext:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      10: areturn

  public final reactor.core.publisher.Mono<T> subscriberContext(java.util.function.Function<reactor.util.context.Context, reactor.util.context.Context>);
    Code:
       0: new           #348                // class reactor/core/publisher/MonoSubscriberContext
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #349                // Method reactor/core/publisher/MonoSubscriberContext."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Function;)V
       9: areturn

  public final reactor.core.publisher.Mono<T> subscribeOn(reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: instanceof    #219                // class java/util/concurrent/Callable
       4: ifeq          51
       7: aload_0
       8: instanceof    #137                // class reactor/core/Fuseable$ScalarCallable
      11: ifeq          33
      14: aload_0
      15: invokevirtual #138                // Method block:()Ljava/lang/Object;
      18: astore_2
      19: new           #292                // class reactor/core/publisher/MonoSubscribeOnValue
      22: dup
      23: aload_2
      24: aload_1
      25: invokespecial #293                // Method reactor/core/publisher/MonoSubscribeOnValue."<init>":(Ljava/lang/Object;Lreactor/core/scheduler/Scheduler;)V
      28: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      31: areturn
      32: astore_2
      33: aload_0
      34: checkcast     #219                // class java/util/concurrent/Callable
      37: astore_2
      38: new           #294                // class reactor/core/publisher/MonoSubscribeOnCallable
      41: dup
      42: aload_2
      43: aload_1
      44: invokespecial #295                // Method reactor/core/publisher/MonoSubscribeOnCallable."<init>":(Ljava/util/concurrent/Callable;Lreactor/core/scheduler/Scheduler;)V
      47: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      50: areturn
      51: new           #350                // class reactor/core/publisher/MonoSubscribeOn
      54: dup
      55: aload_0
      56: aload_1
      57: invokespecial #351                // Method reactor/core/publisher/MonoSubscribeOn."<init>":(Lreactor/core/publisher/Mono;Lreactor/core/scheduler/Scheduler;)V
      60: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      63: areturn
    Exception table:
       from    to  target type
          14    31    32   Class java/lang/Throwable

  public final <E extends org.reactivestreams.Subscriber<? super T>> E subscribeWith(E);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #352                // Method subscribe:(Lorg/reactivestreams/Subscriber;)V
       5: aload_1
       6: areturn

  public final reactor.core.publisher.Mono<T> switchIfEmpty(reactor.core.publisher.Mono<? extends T>);
    Code:
       0: new           #353                // class reactor/core/publisher/MonoSwitchIfEmpty
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #354                // Method reactor/core/publisher/MonoSwitchIfEmpty."<init>":(Lreactor/core/publisher/Mono;Lreactor/core/publisher/Mono;)V
       9: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public final reactor.core.publisher.Mono<T> tag(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #355                // Method reactor/core/publisher/MonoName.createOrAppend:(Lreactor/core/publisher/Mono;Ljava/lang/String;Ljava/lang/String;)Lreactor/core/publisher/Mono;
       6: areturn

  public final reactor.core.publisher.Mono<T> take(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #7                  // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokevirtual #356                // Method take:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       8: areturn

  public final reactor.core.publisher.Mono<T> take(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #8                  // Method delay:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       6: invokevirtual #357                // Method takeUntilOther:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       9: areturn

  public final reactor.core.publisher.Mono<T> takeUntilOther(org.reactivestreams.Publisher<?>);
    Code:
       0: new           #358                // class reactor/core/publisher/MonoTakeUntilOther
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #359                // Method reactor/core/publisher/MonoTakeUntilOther."<init>":(Lreactor/core/publisher/Mono;Lorg/reactivestreams/Publisher;)V
       9: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      12: areturn

  public final reactor.core.publisher.Mono<java.lang.Void> then();
    Code:
       0: aload_0
       1: invokestatic  #70                 // Method empty:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       4: areturn

  public final <V> reactor.core.publisher.Mono<V> then(reactor.core.publisher.Mono<V>);
    Code:
       0: aload_0
       1: instanceof    #360                // class reactor/core/publisher/MonoIgnoreThen
       4: ifeq          18
       7: aload_0
       8: checkcast     #360                // class reactor/core/publisher/MonoIgnoreThen
      11: astore_2
      12: aload_2
      13: aload_1
      14: invokevirtual #361                // Method reactor/core/publisher/MonoIgnoreThen.shift:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/MonoIgnoreThen;
      17: areturn
      18: new           #360                // class reactor/core/publisher/MonoIgnoreThen
      21: dup
      22: iconst_1
      23: anewarray     #79                 // class org/reactivestreams/Publisher
      26: dup
      27: iconst_0
      28: aload_0
      29: aastore
      30: aload_1
      31: invokespecial #362                // Method reactor/core/publisher/MonoIgnoreThen."<init>":([Lorg/reactivestreams/Publisher;Lreactor/core/publisher/Mono;)V
      34: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      37: areturn

  public final <V> reactor.core.publisher.Mono<V> thenReturn(V);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #56                 // Method just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       5: invokevirtual #363                // Method then:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
       8: areturn

  public final reactor.core.publisher.Mono<java.lang.Void> thenEmpty(org.reactivestreams.Publisher<java.lang.Void>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #364                // Method fromDirect:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       5: invokevirtual #363                // Method then:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
       8: areturn

  public final <V> reactor.core.publisher.Flux<V> thenMany(org.reactivestreams.Publisher<V>);
    Code:
       0: iconst_2
       1: anewarray     #79                 // class org/reactivestreams/Publisher
       4: dup
       5: iconst_0
       6: aload_0
       7: invokevirtual #365                // Method ignoreElement:()Lreactor/core/publisher/Mono;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_1
      14: aastore
      15: invokestatic  #136                // Method reactor/core/publisher/Flux.concat:([Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      18: astore_2
      19: aload_2
      20: invokestatic  #199                // Method reactor/core/publisher/Flux.onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      23: areturn

  public final reactor.core.publisher.Mono<T> timeout(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #7                  // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       5: invokevirtual #366                // Method timeout:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       8: areturn

  public final reactor.core.publisher.Mono<T> timeout(java.time.Duration, reactor.core.publisher.Mono<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #7                  // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       6: invokevirtual #367                // Method timeout:(Ljava/time/Duration;Lreactor/core/publisher/Mono;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       9: areturn

  public final reactor.core.publisher.Mono<T> timeout(java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aload_2
       4: invokevirtual #367                // Method timeout:(Ljava/time/Duration;Lreactor/core/publisher/Mono;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       7: areturn

  public final reactor.core.publisher.Mono<T> timeout(java.time.Duration, reactor.core.publisher.Mono<? extends T>, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_1
       1: aload_3
       2: invokestatic  #8                  // Method delay:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       5: lconst_0
       6: invokestatic  #368                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       9: invokevirtual #369                // Method onErrorReturn:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      12: astore        4
      14: aload_2
      15: ifnonnull     55
      18: new           #370                // class reactor/core/publisher/MonoTimeout
      21: dup
      22: aload_0
      23: aload         4
      25: new           #371                // class java/lang/StringBuilder
      28: dup
      29: invokespecial #372                // Method java/lang/StringBuilder."<init>":()V
      32: aload_1
      33: invokevirtual #10                 // Method java/time/Duration.toMillis:()J
      36: invokevirtual #373                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      39: ldc_w         #374                // String ms
      42: invokevirtual #375                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: invokevirtual #376                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: invokespecial #377                // Method reactor/core/publisher/MonoTimeout."<init>":(Lreactor/core/publisher/Mono;Lorg/reactivestreams/Publisher;Ljava/lang/String;)V
      51: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      54: areturn
      55: new           #370                // class reactor/core/publisher/MonoTimeout
      58: dup
      59: aload_0
      60: aload         4
      62: aload_2
      63: invokespecial #378                // Method reactor/core/publisher/MonoTimeout."<init>":(Lreactor/core/publisher/Mono;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)V
      66: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      69: areturn

  public final <U> reactor.core.publisher.Mono<T> timeout(org.reactivestreams.Publisher<U>);
    Code:
       0: new           #370                // class reactor/core/publisher/MonoTimeout
       3: dup
       4: aload_0
       5: aload_1
       6: ldc_w         #379                // String first signal from a Publisher
       9: invokespecial #377                // Method reactor/core/publisher/MonoTimeout."<init>":(Lreactor/core/publisher/Mono;Lorg/reactivestreams/Publisher;Ljava/lang/String;)V
      12: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      15: areturn

  public final <U> reactor.core.publisher.Mono<T> timeout(org.reactivestreams.Publisher<U>, reactor.core.publisher.Mono<? extends T>);
    Code:
       0: new           #370                // class reactor/core/publisher/MonoTimeout
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #378                // Method reactor/core/publisher/MonoTimeout."<init>":(Lreactor/core/publisher/Mono;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)V
      10: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      13: areturn

  public final reactor.core.publisher.Mono<reactor.util.function.Tuple2<java.lang.Long, T>> timestamp();
    Code:
       0: aload_0
       1: invokestatic  #7                  // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       4: invokevirtual #380                // Method timestamp:(Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
       7: areturn

  public final reactor.core.publisher.Mono<reactor.util.function.Tuple2<java.lang.Long, T>> timestamp(reactor.core.scheduler.Scheduler);
    Code:
       0: aload_1
       1: ldc           #194                // String scheduler
       3: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: invokedynamic #381,  0            // InvokeDynamic #35:apply:(Lreactor/core/scheduler/Scheduler;)Ljava/util/function/Function;
      14: invokevirtual #88                 // Method map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      17: areturn

  public final java.util.concurrent.CompletableFuture<T> toFuture();
    Code:
       0: aload_0
       1: new           #382                // class reactor/core/publisher/MonoToCompletableFuture
       4: dup
       5: invokespecial #383                // Method reactor/core/publisher/MonoToCompletableFuture."<init>":()V
       8: invokevirtual #342                // Method subscribeWith:(Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;
      11: checkcast     #384                // class java/util/concurrent/CompletableFuture
      14: areturn

  public final reactor.core.publisher.MonoProcessor<T> toProcessor();
    Code:
       0: aload_0
       1: instanceof    #115                // class reactor/core/publisher/MonoProcessor
       4: ifeq          15
       7: aload_0
       8: checkcast     #115                // class reactor/core/publisher/MonoProcessor
      11: astore_1
      12: goto          24
      15: new           #115                // class reactor/core/publisher/MonoProcessor
      18: dup
      19: aload_0
      20: invokespecial #116                // Method reactor/core/publisher/MonoProcessor."<init>":(Lorg/reactivestreams/Publisher;)V
      23: astore_1
      24: aload_1
      25: invokevirtual #339                // Method reactor/core/publisher/MonoProcessor.connect:()V
      28: aload_1
      29: areturn

  public final <V> reactor.core.publisher.Mono<V> transform(java.util.function.Function<? super reactor.core.publisher.Mono<T>, ? extends org.reactivestreams.Publisher<V>>);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #97,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #79                 // class org/reactivestreams/Publisher
      10: invokestatic  #385                // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      13: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      16: areturn

  public final <T2> reactor.core.publisher.Mono<reactor.util.function.Tuple2<T, T2>> zipWhen(java.util.function.Function<T, reactor.core.publisher.Mono<? extends T2>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #386,  0            // InvokeDynamic #36:apply:()Ljava/util/function/BiFunction;
       7: invokevirtual #387                // Method zipWhen:(Ljava/util/function/Function;Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
      10: areturn

  public final <T2, O> reactor.core.publisher.Mono<O> zipWhen(java.util.function.Function<T, reactor.core.publisher.Mono<? extends T2>>, java.util.function.BiFunction<T, T2, O>);
    Code:
       0: aload_1
       1: ldc_w         #388                // String rightGenerator function is mandatory to get the right-hand side Mono
       4: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload_2
       9: ldc_w         #389                // String combinator function is mandatory to combine results from both Monos
      12: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      15: pop
      16: aload_0
      17: aload_1
      18: aload_2
      19: invokedynamic #390,  0            // InvokeDynamic #37:apply:(Ljava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/util/function/Function;
      24: invokevirtual #391                // Method flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      27: areturn

  public final <T2> reactor.core.publisher.Mono<reactor.util.function.Tuple2<T, T2>> zipWith(reactor.core.publisher.Mono<? extends T2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #74                 // Method reactor/core/publisher/Flux.tuple2Function:()Ljava/util/function/BiFunction;
       5: invokevirtual #392                // Method zipWith:(Lreactor/core/publisher/Mono;Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
       8: areturn

  public final <T2, O> reactor.core.publisher.Mono<O> zipWith(reactor.core.publisher.Mono<? extends T2>, java.util.function.BiFunction<? super T, ? super T2, ? extends O>);
    Code:
       0: aload_0
       1: instanceof    #76                 // class reactor/core/publisher/MonoZip
       4: ifeq          28
       7: aload_0
       8: checkcast     #76                 // class reactor/core/publisher/MonoZip
      11: astore_3
      12: aload_3
      13: aload_1
      14: aload_2
      15: invokevirtual #393                // Method reactor/core/publisher/MonoZip.zipAdditionalSource:(Lorg/reactivestreams/Publisher;Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
      18: astore        4
      20: aload         4
      22: ifnull        28
      25: aload         4
      27: areturn
      28: aload_0
      29: aload_1
      30: aload_2
      31: invokestatic  #75                 // Method zip:(Lreactor/core/publisher/Mono;Lreactor/core/publisher/Mono;Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
      34: areturn

  protected static <T> reactor.core.publisher.Mono<T> onAssembly(reactor.core.publisher.Mono<T>);
    Code:
       0: getstatic     #394                // Field reactor/core/publisher/Hooks.onEachOperatorHook:Ljava/util/function/Function;
       3: astore_1
       4: aload_1
       5: ifnull        19
       8: aload_1
       9: aload_0
      10: invokeinterface #97,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #21                 // class reactor/core/publisher/Mono
      18: astore_0
      19: getstatic     #395                // Field reactor/core/publisher/Hooks.GLOBAL_TRACE:Z
      22: ifeq          54
      25: new           #128                // class reactor/core/publisher/FluxOnAssembly$AssemblySnapshot
      28: dup
      29: aconst_null
      30: getstatic     #129                // Field reactor/core/publisher/Traces.callSiteSupplierFactory:Ljava/util/function/Supplier;
      33: invokeinterface #130,  1          // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      38: checkcast     #131                // class java/util/function/Supplier
      41: invokespecial #132                // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshot."<init>":(Ljava/lang/String;Ljava/util/function/Supplier;)V
      44: astore_2
      45: aload_0
      46: aload_2
      47: invokestatic  #396                // Method reactor/core/publisher/Hooks.addAssemblyInfo:(Lorg/reactivestreams/Publisher;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshot;)Lorg/reactivestreams/Publisher;
      50: checkcast     #21                 // class reactor/core/publisher/Mono
      53: astore_0
      54: aload_0
      55: areturn

  protected static <T> reactor.core.publisher.Mono<T> onLastAssembly(reactor.core.publisher.Mono<T>);
    Code:
       0: getstatic     #397                // Field reactor/core/publisher/Hooks.onLastOperatorHook:Ljava/util/function/Function;
       3: astore_1
       4: aload_1
       5: ifnonnull     10
       8: aload_0
       9: areturn
      10: aload_1
      11: aload_0
      12: invokeinterface #97,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      17: ldc_w         #398                // String LastOperator hook returned null
      20: invokestatic  #112                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      23: checkcast     #21                 // class reactor/core/publisher/Mono
      26: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #113                // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: invokevirtual #399                // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
       7: areturn

  static <T> reactor.core.publisher.Mono<java.lang.Void> empty(org.reactivestreams.Publisher<T>);
    Code:
       0: aload_0
       1: invokestatic  #400                // Method ignoreElements:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       4: astore_1
       5: aload_1
       6: areturn

  static <T> reactor.core.publisher.Mono<T> doOnSignal(reactor.core.publisher.Mono<T>, java.util.function.Consumer<? super org.reactivestreams.Subscription>, java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable, java.util.function.LongConsumer, java.lang.Runnable);
    Code:
       0: aload_0
       1: instanceof    #36                 // class reactor/core/Fuseable
       4: ifeq          28
       7: new           #401                // class reactor/core/publisher/MonoPeekFuseable
      10: dup
      11: aload_0
      12: aload_1
      13: aload_2
      14: aload_3
      15: aload         4
      17: aload         5
      19: aload         6
      21: invokespecial #402                // Method reactor/core/publisher/MonoPeekFuseable."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)V
      24: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      27: areturn
      28: new           #403                // class reactor/core/publisher/MonoPeek
      31: dup
      32: aload_0
      33: aload_1
      34: aload_2
      35: aload_3
      36: aload         4
      38: aload         5
      40: aload         6
      42: invokespecial #404                // Method reactor/core/publisher/MonoPeek."<init>":(Lreactor/core/publisher/Mono;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)V
      45: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      48: areturn

  static <T> java.util.function.BiPredicate<? super T, ? super T> equalsBiPredicate();
    Code:
       0: getstatic     #405                // Field EQUALS_BIPREDICATE:Ljava/util/function/BiPredicate;
       3: areturn

  private static reactor.core.publisher.Mono lambda$zipWhen$37(java.util.function.Function, java.util.function.BiFunction, java.lang.Object);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #97,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #21                 // class reactor/core/publisher/Mono
      10: aload_1
      11: aload_2
      12: invokedynamic #406,  0            // InvokeDynamic #38:apply:(Ljava/util/function/BiFunction;Ljava/lang/Object;)Ljava/util/function/Function;
      17: invokevirtual #88                 // Method map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      20: areturn

  private static java.lang.Object lambda$null$36(java.util.function.BiFunction, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #407,  3          // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  private static reactor.util.function.Tuple2 lambda$timestamp$35(reactor.core.scheduler.Scheduler, java.lang.Object);
    Code:
       0: aload_0
       1: getstatic     #11                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       4: invokeinterface #408,  2          // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
       9: invokestatic  #368                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      12: aload_1
      13: invokestatic  #409                // Method reactor/util/function/Tuples.of:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      16: areturn

  private static reactor.util.context.Context lambda$subscriberContext$34(reactor.util.context.Context, reactor.util.context.Context);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #410,  2          // InterfaceMethod reactor/util/context/Context.putAll:(Lreactor/util/context/Context;)Lreactor/util/context/Context;
       7: areturn

  private reactor.core.publisher.Mono lambda$retry$33(java.util.function.Predicate, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: invokestatic  #411                // Method reactor/core/publisher/Flux.countingPredicate:(Ljava/util/function/Predicate;J)Ljava/util/function/Predicate;
       6: invokevirtual #412                // Method retry:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Mono;
       9: areturn

  private reactor.core.publisher.Mono lambda$repeatWhenEmpty$32(int, java.util.function.Function);
    Code:
       0: iload_1
       1: ldc           #216                // int 2147483647
       3: if_icmpne     25
       6: lconst_0
       7: ldc2_w        #314                // long 9223372036854775807l
      10: invokestatic  #413                // InterfaceMethod java/util/stream/LongStream.range:(JJ)Ljava/util/stream/LongStream;
      13: invokeinterface #414,  1          // InterfaceMethod java/util/stream/LongStream.boxed:()Ljava/util/stream/Stream;
      18: invokestatic  #415                // Method reactor/core/publisher/Flux.fromStream:(Ljava/util/stream/Stream;)Lreactor/core/publisher/Flux;
      21: astore_3
      22: goto          56
      25: iconst_0
      26: iload_1
      27: invokestatic  #416                // Method reactor/core/publisher/Flux.range:(II)Lreactor/core/publisher/Flux;
      30: invokedynamic #417,  0            // InvokeDynamic #39:apply:()Ljava/util/function/Function;
      35: invokevirtual #418                // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      38: new           #419                // class java/lang/IllegalStateException
      41: dup
      42: ldc_w         #420                // String Exceeded maximum number of repeats
      45: invokespecial #421                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      48: iconst_1
      49: invokestatic  #422                // Method reactor/core/publisher/Flux.error:(Ljava/lang/Throwable;Z)Lreactor/core/publisher/Flux;
      52: invokevirtual #423                // Method reactor/core/publisher/Flux.concatWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      55: astore_3
      56: aload_0
      57: aload_2
      58: aload_3
      59: invokedynamic #424,  0            // InvokeDynamic #40:apply:(Ljava/util/function/Function;Lreactor/core/publisher/Flux;)Ljava/util/function/Function;
      64: invokevirtual #425                // Method repeatWhen:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      67: invokevirtual #27                 // Method reactor/core/publisher/Flux.next:()Lreactor/core/publisher/Mono;
      70: areturn

  private static org.reactivestreams.Publisher lambda$null$31(java.util.function.Function, reactor.core.publisher.Flux, reactor.core.publisher.Flux);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: iconst_1
       4: invokedynamic #426,  0            // InvokeDynamic #41:apply:()Ljava/util/function/BiFunction;
       9: invokevirtual #427                // Method reactor/core/publisher/Flux.zipWith:(Lorg/reactivestreams/Publisher;ILjava/util/function/BiFunction;)Lreactor/core/publisher/Flux;
      12: invokeinterface #97,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #79                 // class org/reactivestreams/Publisher
      20: areturn

  private static java.lang.Long lambda$null$30(java.lang.Long, java.lang.Long);
    Code:
       0: aload_1
       1: areturn

  private org.reactivestreams.Publisher lambda$repeat$29(java.util.function.BooleanSupplier, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: invokestatic  #428                // Method reactor/core/publisher/Flux.countingBooleanSupplier:(Ljava/util/function/BooleanSupplier;J)Ljava/util/function/BooleanSupplier;
       6: invokevirtual #299                // Method repeat:(Ljava/util/function/BooleanSupplier;)Lreactor/core/publisher/Flux;
       9: areturn

  private static reactor.core.publisher.Mono lambda$onErrorReturn$28(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: invokestatic  #56                 // Method just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       4: areturn

  private static reactor.core.publisher.Mono lambda$onErrorReturn$27(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: invokestatic  #56                 // Method just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       4: areturn

  private static reactor.core.publisher.Mono lambda$onErrorReturn$26(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: invokestatic  #56                 // Method just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       4: areturn

  private static reactor.core.publisher.Mono lambda$onErrorResume$25(java.util.function.Predicate, java.util.function.Function, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #429,  2          // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
       7: ifeq          23
      10: aload_1
      11: aload_2
      12: invokeinterface #97,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #21                 // class reactor/core/publisher/Mono
      20: goto          27
      23: aload_2
      24: invokestatic  #333                // Method error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      27: areturn

  private static reactor.core.publisher.Mono lambda$onErrorMap$24(java.util.function.Function, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #97,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #139                // class java/lang/Throwable
      10: invokestatic  #333                // Method error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      13: areturn

  private static reactor.core.publisher.Mono lambda$onErrorMap$23(java.util.function.Function, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #97,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #139                // class java/lang/Throwable
      10: invokestatic  #333                // Method error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      13: areturn

  private static boolean lambda$ofType$22(java.lang.Class, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #113                // Method java/lang/Object.getClass:()Ljava/lang/Class;
       5: invokevirtual #430                // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
       8: ireturn

  private static reactor.util.Logger lambda$log$21(reactor.util.Logger, java.lang.String);
    Code:
       0: aload_0
       1: areturn

  private static void lambda$doOnTerminate$20(java.lang.Runnable, java.lang.Throwable);
    Code:
       0: aload_0
       1: invokeinterface #431,  1          // InterfaceMethod java/lang/Runnable.run:()V
       6: return

  private static void lambda$doOnError$19(java.util.function.Predicate, java.util.function.Consumer, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #429,  2          // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
       7: ifeq          17
      10: aload_1
      11: aload_2
      12: invokeinterface #432,  2          // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      17: return

  private static void lambda$doAfterTerminate$18(java.lang.Runnable, java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: invokeinterface #431,  1          // InterfaceMethod java/lang/Runnable.run:()V
       6: return

  private reactor.core.publisher.Mono lambda$compose$17(java.util.function.Function);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #97,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #79                 // class org/reactivestreams/Publisher
      10: invokestatic  #385                // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      13: areturn

  private static java.lang.Object lambda$zipDelayError$16(java.util.function.Function, java.lang.Object);
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #433                // class java/lang/Object
       5: dup
       6: iconst_0
       7: aload_1
       8: aastore
       9: invokeinterface #97,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      14: areturn

  private static java.lang.Object lambda$zipDelayError$15(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #434                // class "[Ljava/lang/Object;"
       4: checkcast     #434                // class "[Ljava/lang/Object;"
       7: invokestatic  #435                // Method reactor/util/function/Tuples.fromArray:([Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      10: areturn

  private static java.lang.Object lambda$zipDelayError$14(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #434                // class "[Ljava/lang/Object;"
       4: checkcast     #434                // class "[Ljava/lang/Object;"
       7: invokestatic  #435                // Method reactor/util/function/Tuples.fromArray:([Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      10: areturn

  private static java.lang.Object lambda$zipDelayError$13(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #434                // class "[Ljava/lang/Object;"
       4: checkcast     #434                // class "[Ljava/lang/Object;"
       7: invokestatic  #435                // Method reactor/util/function/Tuples.fromArray:([Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      10: areturn

  private static java.lang.Object lambda$zipDelayError$12(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #434                // class "[Ljava/lang/Object;"
       4: checkcast     #434                // class "[Ljava/lang/Object;"
       7: invokestatic  #435                // Method reactor/util/function/Tuples.fromArray:([Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      10: areturn

  private static java.lang.Object lambda$zipDelayError$11(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #434                // class "[Ljava/lang/Object;"
       4: checkcast     #434                // class "[Ljava/lang/Object;"
       7: invokestatic  #435                // Method reactor/util/function/Tuples.fromArray:([Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      10: areturn

  private static java.lang.Object lambda$zipDelayError$10(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #434                // class "[Ljava/lang/Object;"
       4: checkcast     #434                // class "[Ljava/lang/Object;"
       7: invokestatic  #435                // Method reactor/util/function/Tuples.fromArray:([Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      10: areturn

  private static java.lang.Object lambda$zipDelayError$9(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #434                // class "[Ljava/lang/Object;"
       4: checkcast     #434                // class "[Ljava/lang/Object;"
       7: invokestatic  #435                // Method reactor/util/function/Tuples.fromArray:([Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      10: areturn

  private static java.lang.Object lambda$zip$8(java.util.function.Function, java.lang.Object);
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #433                // class java/lang/Object
       5: dup
       6: iconst_0
       7: aload_1
       8: aastore
       9: invokeinterface #97,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      14: areturn

  private static java.lang.Object lambda$zip$7(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #434                // class "[Ljava/lang/Object;"
       4: checkcast     #434                // class "[Ljava/lang/Object;"
       7: invokestatic  #435                // Method reactor/util/function/Tuples.fromArray:([Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      10: areturn

  private static java.lang.Object lambda$zip$6(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #434                // class "[Ljava/lang/Object;"
       4: checkcast     #434                // class "[Ljava/lang/Object;"
       7: invokestatic  #435                // Method reactor/util/function/Tuples.fromArray:([Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      10: areturn

  private static java.lang.Object lambda$zip$5(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #434                // class "[Ljava/lang/Object;"
       4: checkcast     #434                // class "[Ljava/lang/Object;"
       7: invokestatic  #435                // Method reactor/util/function/Tuples.fromArray:([Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      10: areturn

  private static java.lang.Object lambda$zip$4(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #434                // class "[Ljava/lang/Object;"
       4: checkcast     #434                // class "[Ljava/lang/Object;"
       7: invokestatic  #435                // Method reactor/util/function/Tuples.fromArray:([Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      10: areturn

  private static java.lang.Object lambda$zip$3(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #434                // class "[Ljava/lang/Object;"
       4: checkcast     #434                // class "[Ljava/lang/Object;"
       7: invokestatic  #435                // Method reactor/util/function/Tuples.fromArray:([Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      10: areturn

  private static java.lang.Object lambda$zip$2(java.lang.Object);
    Code:
       0: aload_0
       1: checkcast     #434                // class "[Ljava/lang/Object;"
       4: checkcast     #434                // class "[Ljava/lang/Object;"
       7: invokestatic  #435                // Method reactor/util/function/Tuples.fromArray:([Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      10: areturn

  private static reactor.core.publisher.Mono lambda$fromFuture$1(java.util.function.Supplier);
    Code:
       0: new           #32                 // class reactor/core/publisher/MonoCompletionStage
       3: dup
       4: aload_0
       5: invokeinterface #130,  1          // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      10: checkcast     #436                // class java/util/concurrent/CompletionStage
      13: invokespecial #33                 // Method reactor/core/publisher/MonoCompletionStage."<init>":(Ljava/util/concurrent/CompletionStage;)V
      16: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      19: areturn

  private static reactor.core.publisher.Mono lambda$fromCompletionStage$0(java.util.function.Supplier);
    Code:
       0: new           #32                 // class reactor/core/publisher/MonoCompletionStage
       3: dup
       4: aload_0
       5: invokeinterface #130,  1          // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      10: checkcast     #436                // class java/util/concurrent/CompletionStage
      13: invokespecial #33                 // Method reactor/core/publisher/MonoCompletionStage."<init>":(Ljava/util/concurrent/CompletionStage;)V
      16: invokestatic  #4                  // Method onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      19: areturn

  static {};
    Code:
       0: invokedynamic #437,  0            // InvokeDynamic #42:test:()Ljava/util/function/BiPredicate;
       5: putstatic     #405                // Field EQUALS_BIPREDICATE:Ljava/util/function/BiPredicate;
       8: return
}
