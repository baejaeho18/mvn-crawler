Compiled from "FluxConcatIterable.java"
final class reactor.core.publisher.FluxConcatIterable$ConcatIterableSubscriber<T> extends reactor.core.publisher.Operators$MultiSubscriptionSubscriber<T, T> {
  final java.util.Iterator<? extends org.reactivestreams.Publisher<? extends T>> it;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxConcatIterable$ConcatIterableSubscriber> WIP;

  long produced;

  reactor.core.publisher.FluxConcatIterable$ConcatIterableSubscriber(reactor.core.CoreSubscriber<? super T>, java.util.Iterator<? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/Operators$MultiSubscriptionSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field it:Ljava/util/Iterator;
      10: return

  public void onNext(T);
    Code:
       0: aload_0
       1: dup
       2: getfield      #3                  // Field produced:J
       5: lconst_1
       6: ladd
       7: putfield      #3                  // Field produced:J
      10: aload_0
      11: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      14: aload_1
      15: invokeinterface #5,  2            // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      20: return

  public void onComplete();
    Code:
       0: getstatic     #6                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          180
      10: aload_0
      11: getfield      #2                  // Field it:Ljava/util/Iterator;
      14: astore_1
      15: aload_0
      16: invokevirtual #8                  // Method isCancelled:()Z
      19: ifeq          23
      22: return
      23: aload_1
      24: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: istore_2
      30: goto          53
      33: astore_3
      34: aload_0
      35: aload_0
      36: aload_3
      37: aload_0
      38: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      41: invokeinterface #11,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      46: invokestatic  #12                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      49: invokevirtual #13                 // Method onError:(Ljava/lang/Throwable;)V
      52: return
      53: aload_0
      54: invokevirtual #8                  // Method isCancelled:()Z
      57: ifeq          61
      60: return
      61: iload_2
      62: ifne          75
      65: aload_0
      66: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      69: invokeinterface #14,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      74: return
      75: aload_0
      76: getfield      #2                  // Field it:Ljava/util/Iterator;
      79: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      84: ldc           #16                 // String The Publisher returned by the iterator is null
      86: invokestatic  #17                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      89: checkcast     #18                 // class org/reactivestreams/Publisher
      92: astore_3
      93: goto          123
      96: astore        4
      98: aload_0
      99: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
     102: aload_0
     103: aload         4
     105: aload_0
     106: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
     109: invokeinterface #11,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     114: invokestatic  #12                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     117: invokeinterface #19,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     122: return
     123: aload_0
     124: invokevirtual #8                  // Method isCancelled:()Z
     127: ifeq          131
     130: return
     131: aload_0
     132: getfield      #3                  // Field produced:J
     135: lstore        4
     137: lload         4
     139: lconst_0
     140: lcmp
     141: ifeq          155
     144: aload_0
     145: lconst_0
     146: putfield      #3                  // Field produced:J
     149: aload_0
     150: lload         4
     152: invokevirtual #20                 // Method produced:(J)V
     155: aload_3
     156: aload_0
     157: invokeinterface #21,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     162: aload_0
     163: invokevirtual #8                  // Method isCancelled:()Z
     166: ifeq          170
     169: return
     170: getstatic     #6                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     173: aload_0
     174: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     177: ifne          15
     180: return
    Exception table:
       from    to  target type
          23    30    33   Class java/lang/Throwable
          75    93    96   Class java/lang/Throwable

  static {};
    Code:
       0: ldc           #23                 // class reactor/core/publisher/FluxConcatIterable$ConcatIterableSubscriber
       2: ldc           #24                 // String wip
       4: invokestatic  #25                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #6                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
