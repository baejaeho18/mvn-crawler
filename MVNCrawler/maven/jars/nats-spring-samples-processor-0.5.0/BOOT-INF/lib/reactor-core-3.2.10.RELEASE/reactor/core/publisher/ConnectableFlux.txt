Compiled from "ConnectableFlux.java"
public abstract class reactor.core.publisher.ConnectableFlux<T> extends reactor.core.publisher.Flux<T> {
  static final java.util.function.Consumer<reactor.core.Disposable> NOOP_DISCONNECT;

  public reactor.core.publisher.ConnectableFlux();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: return

  public final reactor.core.publisher.Flux<T> autoConnect();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #2                  // Method autoConnect:(I)Lreactor/core/publisher/Flux;
       5: areturn

  public final reactor.core.publisher.Flux<T> autoConnect(int);
    Code:
       0: aload_0
       1: iload_1
       2: getstatic     #3                  // Field NOOP_DISCONNECT:Ljava/util/function/Consumer;
       5: invokevirtual #4                  // Method autoConnect:(ILjava/util/function/Consumer;)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> autoConnect(int, java.util.function.Consumer<? super reactor.core.Disposable>);
    Code:
       0: iload_1
       1: ifne          11
       4: aload_0
       5: aload_2
       6: invokevirtual #5                  // Method connect:(Ljava/util/function/Consumer;)V
       9: aload_0
      10: areturn
      11: aload_0
      12: instanceof    #6                  // class reactor/core/Fuseable
      15: ifeq          32
      18: new           #7                  // class reactor/core/publisher/FluxAutoConnectFuseable
      21: dup
      22: aload_0
      23: iload_1
      24: aload_2
      25: invokespecial #8                  // Method reactor/core/publisher/FluxAutoConnectFuseable."<init>":(Lreactor/core/publisher/ConnectableFlux;ILjava/util/function/Consumer;)V
      28: invokestatic  #9                  // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      31: areturn
      32: new           #10                 // class reactor/core/publisher/FluxAutoConnect
      35: dup
      36: aload_0
      37: iload_1
      38: aload_2
      39: invokespecial #11                 // Method reactor/core/publisher/FluxAutoConnect."<init>":(Lreactor/core/publisher/ConnectableFlux;ILjava/util/function/Consumer;)V
      42: invokestatic  #9                  // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      45: areturn

  public final reactor.core.Disposable connect();
    Code:
       0: iconst_1
       1: anewarray     #12                 // class reactor/core/Disposable
       4: dup
       5: iconst_0
       6: aconst_null
       7: aastore
       8: astore_1
       9: aload_0
      10: aload_1
      11: invokedynamic #13,  0             // InvokeDynamic #0:accept:([Lreactor/core/Disposable;)Ljava/util/function/Consumer;
      16: invokevirtual #5                  // Method connect:(Ljava/util/function/Consumer;)V
      19: aload_1
      20: iconst_0
      21: aaload
      22: areturn

  public abstract void connect(java.util.function.Consumer<? super reactor.core.Disposable>);

  public final reactor.core.publisher.Flux<T> refCount();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #14                 // Method refCount:(I)Lreactor/core/publisher/Flux;
       5: areturn

  public final reactor.core.publisher.Flux<T> refCount(int);
    Code:
       0: new           #15                 // class reactor/core/publisher/FluxRefCount
       3: dup
       4: aload_0
       5: iload_1
       6: invokespecial #16                 // Method reactor/core/publisher/FluxRefCount."<init>":(Lreactor/core/publisher/ConnectableFlux;I)V
       9: invokestatic  #9                  // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      12: areturn

  public final reactor.core.publisher.Flux<T> refCount(int, java.time.Duration);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokestatic  #17                 // Method reactor/core/scheduler/Schedulers.parallel:()Lreactor/core/scheduler/Scheduler;
       6: invokevirtual #18                 // Method refCount:(ILjava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
       9: areturn

  public final reactor.core.publisher.Flux<T> refCount(int, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: new           #19                 // class reactor/core/publisher/FluxRefCountGrace
       3: dup
       4: aload_0
       5: iload_1
       6: aload_2
       7: aload_3
       8: invokespecial #20                 // Method reactor/core/publisher/FluxRefCountGrace."<init>":(Lreactor/core/publisher/ConnectableFlux;ILjava/time/Duration;Lreactor/core/scheduler/Scheduler;)V
      11: invokestatic  #9                  // Method onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      14: areturn

  private static void lambda$static$1(reactor.core.Disposable);
    Code:
       0: return

  private static void lambda$connect$0(reactor.core.Disposable[], reactor.core.Disposable);
    Code:
       0: aload_0
       1: iconst_0
       2: aload_1
       3: aastore
       4: return

  static {};
    Code:
       0: invokedynamic #21,  0             // InvokeDynamic #1:accept:()Ljava/util/function/Consumer;
       5: putstatic     #3                  // Field NOOP_DISCONNECT:Ljava/util/function/Consumer;
       8: return
}
