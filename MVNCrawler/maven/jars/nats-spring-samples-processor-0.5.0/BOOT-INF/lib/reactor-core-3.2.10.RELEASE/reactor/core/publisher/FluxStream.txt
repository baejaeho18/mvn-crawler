Compiled from "FluxStream.java"
final class reactor.core.publisher.FluxStream<T> extends reactor.core.publisher.Flux<T> implements reactor.core.Fuseable, reactor.core.publisher.SourceProducer<T> {
  final java.util.function.Supplier<? extends java.util.stream.Stream<? extends T>> streamSupplier;

  reactor.core.publisher.FluxStream(java.util.function.Supplier<? extends java.util.stream.Stream<? extends T>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String streamSupplier
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class java/util/function/Supplier
      14: putfield      #5                  // Field streamSupplier:Ljava/util/function/Supplier;
      17: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field streamSupplier:Ljava/util/function/Supplier;
       4: invokeinterface #6,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       9: ldc           #7                  // String The stream supplier returned a null Stream
      11: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      14: checkcast     #8                  // class java/util/stream/Stream
      17: astore_2
      18: goto          37
      21: astore_3
      22: aload_1
      23: aload_3
      24: aload_1
      25: invokeinterface #10,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      30: invokestatic  #11                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      33: invokestatic  #12                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      36: return
      37: aload_2
      38: invokeinterface #13,  1           // InterfaceMethod java/util/stream/Stream.iterator:()Ljava/util/Iterator;
      43: ldc           #14                 // String The stream returned a null Iterator
      45: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      48: checkcast     #15                 // class java/util/Iterator
      51: astore_3
      52: goto          73
      55: astore        4
      57: aload_1
      58: aload         4
      60: aload_1
      61: invokeinterface #10,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      66: invokestatic  #11                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      69: invokestatic  #12                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      72: return
      73: aload_1
      74: aload_3
      75: aload_2
      76: dup
      77: invokevirtual #16                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      80: pop
      81: invokedynamic #17,  0             // InvokeDynamic #0:run:(Ljava/util/stream/Stream;)Ljava/lang/Runnable;
      86: invokestatic  #18                 // Method reactor/core/publisher/FluxIterable.subscribe:(Lreactor/core/CoreSubscriber;Ljava/util/Iterator;Ljava/lang/Runnable;)V
      89: return
    Exception table:
       from    to  target type
           0    18    21   Class java/lang/Throwable
          37    52    55   Class java/lang/Throwable

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aconst_null
       1: areturn
}
