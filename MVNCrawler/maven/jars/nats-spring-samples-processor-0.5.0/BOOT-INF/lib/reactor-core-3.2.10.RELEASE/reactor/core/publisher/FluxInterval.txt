Compiled from "FluxInterval.java"
final class reactor.core.publisher.FluxInterval extends reactor.core.publisher.Flux<java.lang.Long> implements reactor.core.publisher.SourceProducer<java.lang.Long> {
  final reactor.core.scheduler.Scheduler timedScheduler;

  final long initialDelay;

  final long period;

  final java.util.concurrent.TimeUnit unit;

  reactor.core.publisher.FluxInterval(long, long, java.util.concurrent.TimeUnit, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: lload_3
       5: lconst_0
       6: lcmp
       7: ifge          37
      10: new           #2                  // class java/lang/IllegalArgumentException
      13: dup
      14: new           #3                  // class java/lang/StringBuilder
      17: dup
      18: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #5                  // String period >= 0 required but it was
      23: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: lload_3
      27: invokevirtual #7                  // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      30: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: aload_0
      38: lload_1
      39: putfield      #10                 // Field initialDelay:J
      42: aload_0
      43: lload_3
      44: putfield      #11                 // Field period:J
      47: aload_0
      48: aload         5
      50: ldc           #12                 // String unit
      52: invokestatic  #13                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      55: checkcast     #14                 // class java/util/concurrent/TimeUnit
      58: putfield      #15                 // Field unit:Ljava/util/concurrent/TimeUnit;
      61: aload_0
      62: aload         6
      64: ldc           #16                 // String timedScheduler
      66: invokestatic  #13                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      69: checkcast     #17                 // class reactor/core/scheduler/Scheduler
      72: putfield      #18                 // Field timedScheduler:Lreactor/core/scheduler/Scheduler;
      75: return

  public void subscribe(reactor.core.CoreSubscriber<? super java.lang.Long>);
    Code:
       0: aload_0
       1: getfield      #18                 // Field timedScheduler:Lreactor/core/scheduler/Scheduler;
       4: invokeinterface #19,  1           // InterfaceMethod reactor/core/scheduler/Scheduler.createWorker:()Lreactor/core/scheduler/Scheduler$Worker;
       9: astore_2
      10: new           #20                 // class reactor/core/publisher/FluxInterval$IntervalRunnable
      13: dup
      14: aload_1
      15: aload_2
      16: invokespecial #21                 // Method reactor/core/publisher/FluxInterval$IntervalRunnable."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/scheduler/Scheduler$Worker;)V
      19: astore_3
      20: aload_1
      21: aload_3
      22: invokeinterface #22,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      27: aload_2
      28: aload_3
      29: aload_0
      30: getfield      #10                 // Field initialDelay:J
      33: aload_0
      34: getfield      #11                 // Field period:J
      37: aload_0
      38: getfield      #15                 // Field unit:Ljava/util/concurrent/TimeUnit;
      41: invokeinterface #23,  7           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      46: pop
      47: goto          79
      50: astore        4
      52: aload_3
      53: getfield      #25                 // Field reactor/core/publisher/FluxInterval$IntervalRunnable.cancelled:Z
      56: ifne          79
      59: aload_1
      60: aload         4
      62: aload_3
      63: aconst_null
      64: aconst_null
      65: aload_1
      66: invokeinterface #26,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      71: invokestatic  #27                 // Method reactor/core/publisher/Operators.onRejectedExecution:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
      74: invokeinterface #28,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      79: return
    Exception table:
       from    to  target type
          27    47    50   Class java/util/concurrent/RejectedExecutionException

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #29                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #18                 // Field timedScheduler:Lreactor/core/scheduler/Scheduler;
      11: areturn
      12: aconst_null
      13: areturn
}
