Compiled from "FluxCombineLatest.java"
final class reactor.core.publisher.FluxCombineLatest$CombineLatestInner<T> implements reactor.core.publisher.InnerConsumer<T> {
  final reactor.core.publisher.FluxCombineLatest$CombineLatestCoordinator<T, ?> parent;

  final int index;

  final int prefetch;

  final int limit;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxCombineLatest$CombineLatestInner, org.reactivestreams.Subscription> S;

  int produced;

  reactor.core.publisher.FluxCombineLatest$CombineLatestInner(reactor.core.publisher.FluxCombineLatest$CombineLatestCoordinator<T, ?>, int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/FluxCombineLatest$CombineLatestCoordinator;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field index:I
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field prefetch:I
      19: aload_0
      20: iload_3
      21: invokestatic  #5                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      24: putfield      #6                  // Field limit:I
      27: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxCombineLatest$CombineLatestCoordinator;
       4: getfield      #7                  // Field reactor/core/publisher/FluxCombineLatest$CombineLatestCoordinator.actual:Lreactor/core/CoreSubscriber;
       7: invokeinterface #8,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      12: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #9                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #10                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          24
      11: aload_1
      12: aload_0
      13: getfield      #4                  // Field prefetch:I
      16: invokestatic  #11                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      19: invokeinterface #12,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      24: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxCombineLatest$CombineLatestCoordinator;
       4: aload_0
       5: getfield      #3                  // Field index:I
       8: aload_1
       9: invokevirtual #13                 // Method reactor/core/publisher/FluxCombineLatest$CombineLatestCoordinator.innerValue:(ILjava/lang/Object;)V
      12: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxCombineLatest$CombineLatestCoordinator;
       4: aload_1
       5: invokevirtual #14                 // Method reactor/core/publisher/FluxCombineLatest$CombineLatestCoordinator.innerError:(Ljava/lang/Throwable;)V
       8: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxCombineLatest$CombineLatestCoordinator;
       4: aload_0
       5: getfield      #3                  // Field index:I
       8: invokevirtual #15                 // Method reactor/core/publisher/FluxCombineLatest$CombineLatestCoordinator.innerComplete:(I)V
      11: return

  public void cancel();
    Code:
       0: getstatic     #9                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #16                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  void requestOne();
    Code:
       0: aload_0
       1: getfield      #17                 // Field produced:I
       4: iconst_1
       5: iadd
       6: istore_1
       7: iload_1
       8: aload_0
       9: getfield      #6                  // Field limit:I
      12: if_icmpne     34
      15: aload_0
      16: iconst_0
      17: putfield      #17                 // Field produced:I
      20: aload_0
      21: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
      24: iload_1
      25: i2l
      26: invokeinterface #12,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      31: goto          39
      34: aload_0
      35: iload_1
      36: putfield      #17                 // Field produced:I
      39: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #19                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #20                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxCombineLatest$CombineLatestCoordinator;
      23: areturn
      24: aload_1
      25: getstatic     #21                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      28: if_acmpne     50
      31: aload_0
      32: getfield      #18                 // Field s:Lorg/reactivestreams/Subscription;
      35: invokestatic  #22                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      38: if_acmpne     45
      41: iconst_1
      42: goto          46
      45: iconst_0
      46: invokestatic  #23                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      49: areturn
      50: aload_1
      51: getstatic     #24                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      54: if_acmpne     65
      57: aload_0
      58: getfield      #4                  // Field prefetch:I
      61: invokestatic  #25                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      64: areturn
      65: aconst_null
      66: areturn

  static {};
    Code:
       0: ldc           #26                 // class reactor/core/publisher/FluxCombineLatest$CombineLatestInner
       2: ldc           #27                 // class org/reactivestreams/Subscription
       4: ldc           #28                 // String s
       6: invokestatic  #29                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #9                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
