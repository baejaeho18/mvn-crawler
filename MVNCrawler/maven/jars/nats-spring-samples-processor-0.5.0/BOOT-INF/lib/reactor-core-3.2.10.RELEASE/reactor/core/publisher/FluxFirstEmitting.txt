Compiled from "FluxFirstEmitting.java"
final class reactor.core.publisher.FluxFirstEmitting<T> extends reactor.core.publisher.Flux<T> implements reactor.core.publisher.SourceProducer<T> {
  final org.reactivestreams.Publisher<? extends T>[] array;

  final java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>> iterable;

  reactor.core.publisher.FluxFirstEmitting(org.reactivestreams.Publisher<? extends T>...);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String array
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class "[Lorg/reactivestreams/Publisher;"
      14: putfield      #5                  // Field array:[Lorg/reactivestreams/Publisher;
      17: aload_0
      18: aconst_null
      19: putfield      #6                  // Field iterable:Ljava/lang/Iterable;
      22: return

  reactor.core.publisher.FluxFirstEmitting(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #5                  // Field array:[Lorg/reactivestreams/Publisher;
       9: aload_0
      10: aload_1
      11: invokestatic  #7                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #8                  // class java/lang/Iterable
      17: putfield      #6                  // Field iterable:Ljava/lang/Iterable;
      20: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field array:[Lorg/reactivestreams/Publisher;
       4: astore_2
       5: aload_2
       6: ifnonnull     175
       9: iconst_0
      10: istore_3
      11: bipush        8
      13: anewarray     #9                  // class org/reactivestreams/Publisher
      16: astore_2
      17: aload_0
      18: getfield      #6                  // Field iterable:Ljava/lang/Iterable;
      21: invokeinterface #10,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      26: ldc           #11                 // String The iterator returned is null
      28: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      31: checkcast     #12                 // class java/util/Iterator
      34: astore        4
      36: goto          57
      39: astore        5
      41: aload_1
      42: aload         5
      44: aload_1
      45: invokeinterface #14,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      50: invokestatic  #15                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      53: invokestatic  #16                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      56: return
      57: aload         4
      59: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      64: istore        5
      66: goto          87
      69: astore        6
      71: aload_1
      72: aload         6
      74: aload_1
      75: invokeinterface #14,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      80: invokestatic  #15                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      83: invokestatic  #16                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      86: return
      87: iload         5
      89: ifne          95
      92: goto          172
      95: aload         4
      97: invokeinterface #18,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     102: ldc           #19                 // String The Publisher returned by the iterator is null
     104: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
     107: checkcast     #9                  // class org/reactivestreams/Publisher
     110: astore        6
     112: goto          133
     115: astore        7
     117: aload_1
     118: aload         7
     120: aload_1
     121: invokeinterface #14,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     126: invokestatic  #15                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     129: invokestatic  #16                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
     132: return
     133: iload_3
     134: aload_2
     135: arraylength
     136: if_icmpne     161
     139: iload_3
     140: iload_3
     141: iconst_2
     142: ishr
     143: iadd
     144: anewarray     #9                  // class org/reactivestreams/Publisher
     147: astore        7
     149: aload_2
     150: iconst_0
     151: aload         7
     153: iconst_0
     154: iload_3
     155: invokestatic  #20                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     158: aload         7
     160: astore_2
     161: aload_2
     162: iload_3
     163: iinc          3, 1
     166: aload         6
     168: aastore
     169: goto          57
     172: goto          178
     175: aload_2
     176: arraylength
     177: istore_3
     178: iload_3
     179: ifne          187
     182: aload_1
     183: invokestatic  #21                 // Method reactor/core/publisher/Operators.complete:(Lorg/reactivestreams/Subscriber;)V
     186: return
     187: iload_3
     188: iconst_1
     189: if_icmpne     227
     192: aload_2
     193: iconst_0
     194: aaload
     195: astore        4
     197: aload         4
     199: ifnonnull     218
     202: aload_1
     203: new           #22                 // class java/lang/NullPointerException
     206: dup
     207: ldc           #23                 // String The single source Publisher is null
     209: invokespecial #24                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
     212: invokestatic  #16                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
     215: goto          226
     218: aload         4
     220: aload_1
     221: invokeinterface #25,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     226: return
     227: new           #26                 // class reactor/core/publisher/FluxFirstEmitting$RaceCoordinator
     230: dup
     231: iload_3
     232: invokespecial #27                 // Method reactor/core/publisher/FluxFirstEmitting$RaceCoordinator."<init>":(I)V
     235: astore        4
     237: aload         4
     239: aload_2
     240: iload_3
     241: aload_1
     242: invokevirtual #28                 // Method reactor/core/publisher/FluxFirstEmitting$RaceCoordinator.subscribe:([Lorg/reactivestreams/Publisher;ILreactor/core/CoreSubscriber;)V
     245: return
    Exception table:
       from    to  target type
          17    36    39   Class java/lang/Throwable
          57    66    69   Class java/lang/Throwable
          95   112   115   Class java/lang/Throwable

  reactor.core.publisher.FluxFirstEmitting<T> ambAdditionalSource(org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field array:[Lorg/reactivestreams/Publisher;
       4: ifnull        44
       7: aload_0
       8: getfield      #5                  // Field array:[Lorg/reactivestreams/Publisher;
      11: arraylength
      12: istore_2
      13: iload_2
      14: iconst_1
      15: iadd
      16: anewarray     #9                  // class org/reactivestreams/Publisher
      19: astore_3
      20: aload_0
      21: getfield      #5                  // Field array:[Lorg/reactivestreams/Publisher;
      24: iconst_0
      25: aload_3
      26: iconst_0
      27: iload_2
      28: invokestatic  #20                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      31: aload_3
      32: iload_2
      33: aload_1
      34: aastore
      35: new           #29                 // class reactor/core/publisher/FluxFirstEmitting
      38: dup
      39: aload_3
      40: invokespecial #30                 // Method "<init>":([Lorg/reactivestreams/Publisher;)V
      43: areturn
      44: aconst_null
      45: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aconst_null
       1: areturn
}
