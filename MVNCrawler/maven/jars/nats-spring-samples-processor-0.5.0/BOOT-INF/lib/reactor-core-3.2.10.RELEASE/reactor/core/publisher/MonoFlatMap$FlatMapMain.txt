Compiled from "MonoFlatMap.java"
final class reactor.core.publisher.MonoFlatMap$FlatMapMain<T, R> extends reactor.core.publisher.Operators$MonoSubscriber<T, R> {
  final java.util.function.Function<? super T, ? extends reactor.core.publisher.Mono<? extends R>> mapper;

  final reactor.core.publisher.MonoFlatMap$FlatMapInner<R> second;

  boolean done;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoFlatMap$FlatMapMain, org.reactivestreams.Subscription> S;

  reactor.core.publisher.MonoFlatMap$FlatMapMain(reactor.core.CoreSubscriber<? super R>, java.util.function.Function<? super T, ? extends reactor.core.publisher.Mono<? extends R>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/Operators$MonoSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field mapper:Ljava/util/function/Function;
      10: aload_0
      11: new           #3                  // class reactor/core/publisher/MonoFlatMap$FlatMapInner
      14: dup
      15: aload_0
      16: invokespecial #4                  // Method reactor/core/publisher/MonoFlatMap$FlatMapInner."<init>":(Lreactor/core/publisher/MonoFlatMap$FlatMapMain;)V
      19: putfield      #5                  // Field second:Lreactor/core/publisher/MonoFlatMap$FlatMapInner;
      22: return

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #5                  // Field second:Lreactor/core/publisher/MonoFlatMap$FlatMapInner;
       4: invokestatic  #6                  // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #7                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #9                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     38
      19: aload_0
      20: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
      23: invokestatic  #10                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      26: if_acmpne     33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: invokestatic  #11                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      37: areturn
      38: aload_1
      39: getstatic     #12                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      42: if_acmpne     53
      45: aload_0
      46: getfield      #13                 // Field done:Z
      49: invokestatic  #11                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      52: areturn
      53: aload_0
      54: aload_1
      55: invokespecial #14                 // Method reactor/core/publisher/Operators$MonoSubscriber.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      58: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #15                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #16                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          20
      11: aload_1
      12: ldc2_w        #18                 // long 9223372036854775807l
      15: invokeinterface #20,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      20: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #13                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #22,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #23                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: iconst_1
      23: putfield      #13                 // Field done:Z
      26: aload_0
      27: getfield      #2                  // Field mapper:Ljava/util/function/Function;
      30: aload_1
      31: invokeinterface #24,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      36: ldc           #25                 // String The mapper returned a null Mono
      38: invokestatic  #26                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      41: checkcast     #27                 // class reactor/core/publisher/Mono
      44: astore_2
      45: goto          77
      48: astore_3
      49: aload_0
      50: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
      53: aload_0
      54: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
      57: aload_3
      58: aload_1
      59: aload_0
      60: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
      63: invokeinterface #22,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      68: invokestatic  #29                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      71: invokeinterface #30,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      76: return
      77: aload_2
      78: instanceof    #31                 // class java/util/concurrent/Callable
      81: ifeq          155
      84: aload_2
      85: checkcast     #31                 // class java/util/concurrent/Callable
      88: astore_3
      89: aload_3
      90: invokeinterface #32,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      95: astore        4
      97: goto          131
     100: astore        5
     102: aload_0
     103: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
     106: aload_0
     107: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
     110: aload         5
     112: aload_1
     113: aload_0
     114: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
     117: invokeinterface #22,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     122: invokestatic  #29                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     125: invokeinterface #30,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     130: return
     131: aload         4
     133: ifnonnull     148
     136: aload_0
     137: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
     140: invokeinterface #33,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     145: goto          154
     148: aload_0
     149: aload         4
     151: invokevirtual #34                 // Method complete:(Ljava/lang/Object;)V
     154: return
     155: aload_2
     156: aload_0
     157: getfield      #5                  // Field second:Lreactor/core/publisher/MonoFlatMap$FlatMapInner;
     160: invokevirtual #35                 // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
     163: goto          191
     166: astore_3
     167: aload_0
     168: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
     171: aload_0
     172: aload_3
     173: aload_1
     174: aload_0
     175: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
     178: invokeinterface #22,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     183: invokestatic  #29                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     186: invokeinterface #30,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     191: return
    Exception table:
       from    to  target type
          26    45    48   Class java/lang/Throwable
          89    97   100   Class java/lang/Throwable
         155   163   166   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #13                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #22,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #36                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: iconst_1
      23: putfield      #13                 // Field done:Z
      26: aload_0
      27: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
      30: aload_1
      31: invokeinterface #30,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      36: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #13                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #13                 // Field done:Z
      13: aload_0
      14: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
      17: invokeinterface #33,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      22: return

  public void cancel();
    Code:
       0: aload_0
       1: invokespecial #37                 // Method reactor/core/publisher/Operators$MonoSubscriber.cancel:()V
       4: getstatic     #15                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       7: aload_0
       8: invokestatic  #38                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      11: pop
      12: aload_0
      13: getfield      #5                  // Field second:Lreactor/core/publisher/MonoFlatMap$FlatMapInner;
      16: invokevirtual #39                 // Method reactor/core/publisher/MonoFlatMap$FlatMapInner.cancel:()V
      19: return

  void secondError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #30,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      10: return

  void secondComplete();
    Code:
       0: aload_0
       1: getfield      #21                 // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #33,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
       9: return

  static {};
    Code:
       0: ldc           #40                 // class reactor/core/publisher/MonoFlatMap$FlatMapMain
       2: ldc           #41                 // class org/reactivestreams/Subscription
       4: ldc           #42                 // String s
       6: invokestatic  #43                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #15                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
