Compiled from "ExecutorScheduler.java"
final class reactor.core.scheduler.ExecutorScheduler implements reactor.core.scheduler.Scheduler,reactor.core.Scannable {
  final java.util.concurrent.Executor executor;

  final boolean trampoline;

  volatile boolean terminated;

  reactor.core.scheduler.ExecutorScheduler(java.util.concurrent.Executor, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field executor:Ljava/util/concurrent/Executor;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field trampoline:Z
      14: return

  public reactor.core.Disposable schedule(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #4                  // Field terminated:Z
       4: ifeq          11
       7: invokestatic  #5                  // Method reactor/core/Exceptions.failWithRejected:()Ljava/util/concurrent/RejectedExecutionException;
      10: athrow
      11: aload_1
      12: ldc           #6                  // String task
      14: invokestatic  #7                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      17: pop
      18: new           #8                  // class reactor/core/scheduler/ExecutorScheduler$ExecutorPlainRunnable
      21: dup
      22: aload_1
      23: invokespecial #9                  // Method reactor/core/scheduler/ExecutorScheduler$ExecutorPlainRunnable."<init>":(Ljava/lang/Runnable;)V
      26: astore_2
      27: aload_0
      28: getfield      #2                  // Field executor:Ljava/util/concurrent/Executor;
      31: aload_2
      32: invokeinterface #10,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      37: goto          80
      40: astore_3
      41: aload_0
      42: getfield      #2                  // Field executor:Ljava/util/concurrent/Executor;
      45: instanceof    #12                 // class java/util/concurrent/ExecutorService
      48: ifeq          71
      51: aload_0
      52: getfield      #2                  // Field executor:Ljava/util/concurrent/Executor;
      55: checkcast     #12                 // class java/util/concurrent/ExecutorService
      58: invokeinterface #13,  1           // InterfaceMethod java/util/concurrent/ExecutorService.isShutdown:()Z
      63: ifeq          71
      66: aload_0
      67: iconst_1
      68: putfield      #4                  // Field terminated:Z
      71: aload_3
      72: invokestatic  #14                 // Method reactor/core/scheduler/Schedulers.handleError:(Ljava/lang/Throwable;)V
      75: aload_3
      76: invokestatic  #15                 // Method reactor/core/Exceptions.failWithRejected:(Ljava/lang/Throwable;)Ljava/util/concurrent/RejectedExecutionException;
      79: athrow
      80: aload_2
      81: areturn
    Exception table:
       from    to  target type
          27    37    40   Class java/lang/Throwable

  public void dispose();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #4                  // Field terminated:Z
       5: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #4                  // Field terminated:Z
       4: ireturn

  public reactor.core.scheduler.Scheduler$Worker createWorker();
    Code:
       0: aload_0
       1: getfield      #3                  // Field trampoline:Z
       4: ifeq          21
       7: new           #16                 // class reactor/core/scheduler/ExecutorScheduler$ExecutorSchedulerTrampolineWorker
      10: dup
      11: aload_0
      12: getfield      #2                  // Field executor:Ljava/util/concurrent/Executor;
      15: invokespecial #17                 // Method reactor/core/scheduler/ExecutorScheduler$ExecutorSchedulerTrampolineWorker."<init>":(Ljava/util/concurrent/Executor;)V
      18: goto          32
      21: new           #18                 // class reactor/core/scheduler/ExecutorScheduler$ExecutorSchedulerWorker
      24: dup
      25: aload_0
      26: getfield      #2                  // Field executor:Ljava/util/concurrent/Executor;
      29: invokespecial #19                 // Method reactor/core/scheduler/ExecutorScheduler$ExecutorSchedulerWorker."<init>":(Ljava/util/concurrent/Executor;)V
      32: areturn

  public java.lang.String toString();
    Code:
       0: new           #20                 // class java/lang/StringBuilder
       3: dup
       4: ldc           #22                 // String fromExecutor
       6: invokespecial #23                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
       9: bipush        40
      11: invokevirtual #24                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      14: aload_0
      15: getfield      #2                  // Field executor:Ljava/util/concurrent/Executor;
      18: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      21: astore_1
      22: aload_0
      23: getfield      #3                  // Field trampoline:Z
      26: ifeq          36
      29: aload_1
      30: ldc           #26                 // String ,trampolining
      32: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: pop
      36: aload_1
      37: bipush        41
      39: invokevirtual #24                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      42: pop
      43: aload_1
      44: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #29                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpeq     14
       7: aload_1
       8: getstatic     #30                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      11: if_acmpne     22
      14: aload_0
      15: invokevirtual #31                 // Method isDisposed:()Z
      18: invokestatic  #32                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      21: areturn
      22: aload_1
      23: getstatic     #33                 // Field reactor/core/Scannable$Attr.NAME:Lreactor/core/Scannable$Attr;
      26: if_acmpne     34
      29: aload_0
      30: invokevirtual #34                 // Method toString:()Ljava/lang/String;
      33: areturn
      34: aconst_null
      35: areturn
}
