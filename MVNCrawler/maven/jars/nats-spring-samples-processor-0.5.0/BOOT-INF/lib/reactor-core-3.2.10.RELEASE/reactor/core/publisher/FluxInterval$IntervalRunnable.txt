Compiled from "FluxInterval.java"
final class reactor.core.publisher.FluxInterval$IntervalRunnable implements java.lang.Runnable, org.reactivestreams.Subscription, reactor.core.publisher.InnerProducer<java.lang.Long> {
  final reactor.core.CoreSubscriber<? super java.lang.Long> actual;

  final reactor.core.scheduler.Scheduler$Worker worker;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxInterval$IntervalRunnable> REQUESTED;

  long count;

  volatile boolean cancelled;

  reactor.core.publisher.FluxInterval$IntervalRunnable(reactor.core.CoreSubscriber<? super java.lang.Long>, reactor.core.scheduler.Scheduler$Worker);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      14: return

  public reactor.core.CoreSubscriber<? super java.lang.Long> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #4                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #5                  // Field cancelled:Z
      11: invokestatic  #6                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aload_1
      16: getstatic     #7                  // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #3                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      26: areturn
      27: aload_0
      28: aload_1
      29: invokespecial #8                  // InterfaceMethod reactor/core/publisher/InnerProducer.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      32: areturn

  public void run();
    Code:
       0: aload_0
       1: getfield      #5                  // Field cancelled:Z
       4: ifne          104
       7: aload_0
       8: getfield      #9                  // Field requested:J
      11: lconst_0
      12: lcmp
      13: ifeq          61
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: dup
      22: getfield      #10                 // Field count:J
      25: dup2_x1
      26: lconst_1
      27: ladd
      28: putfield      #10                 // Field count:J
      31: invokestatic  #11                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      34: invokeinterface #12,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      39: aload_0
      40: getfield      #9                  // Field requested:J
      43: ldc2_w        #14                 // long 9223372036854775807l
      46: lcmp
      47: ifeq          104
      50: getstatic     #16                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      53: aload_0
      54: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
      57: pop2
      58: goto          104
      61: aload_0
      62: invokevirtual #18                 // Method cancel:()V
      65: aload_0
      66: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      69: new           #19                 // class java/lang/StringBuilder
      72: dup
      73: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      76: ldc           #21                 // String Could not emit tick
      78: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: aload_0
      82: getfield      #10                 // Field count:J
      85: invokevirtual #23                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      88: ldc           #24                 // String  due to lack of requests (interval doesn\'t support small downstream requests that replenish slower than the ticks)
      90: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      96: invokestatic  #26                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      99: invokeinterface #27,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     104: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #28                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          16
       7: getstatic     #16                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #29                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #5                  // Field cancelled:Z
       4: ifne          21
       7: aload_0
       8: iconst_1
       9: putfield      #5                  // Field cancelled:Z
      12: aload_0
      13: getfield      #3                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      16: invokeinterface #30,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      21: return

  static {};
    Code:
       0: ldc           #31                 // class reactor/core/publisher/FluxInterval$IntervalRunnable
       2: ldc           #32                 // String requested
       4: invokestatic  #33                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       7: putstatic     #16                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: return
}
