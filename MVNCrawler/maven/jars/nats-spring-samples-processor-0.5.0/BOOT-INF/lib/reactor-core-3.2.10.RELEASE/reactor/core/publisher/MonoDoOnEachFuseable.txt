Compiled from "MonoDoOnEachFuseable.java"
final class reactor.core.publisher.MonoDoOnEachFuseable<T> extends reactor.core.publisher.MonoOperator<T, T> implements reactor.core.Fuseable {
  final java.util.function.Consumer<? super reactor.core.publisher.Signal<T>> onSignal;

  reactor.core.publisher.MonoDoOnEachFuseable(reactor.core.publisher.Mono<? extends T>, java.util.function.Consumer<? super reactor.core.publisher.Signal<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String onSignal
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/function/Consumer
      15: putfield      #5                  // Field onSignal:Ljava/util/function/Consumer;
      18: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field source:Lreactor/core/publisher/Mono;
       4: aload_1
       5: aload_0
       6: getfield      #5                  // Field onSignal:Ljava/util/function/Consumer;
       9: iconst_1
      10: iconst_1
      11: invokestatic  #7                  // Method reactor/core/publisher/FluxDoOnEach.createSubscriber:(Lreactor/core/CoreSubscriber;Ljava/util/function/Consumer;ZZ)Lreactor/core/publisher/FluxDoOnEach$DoOnEachSubscriber;
      14: invokevirtual #8                  // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      17: return
}
