Compiled from "SchedulerMetricDecorator.java"
final class reactor.core.scheduler.SchedulerMetricDecorator implements java.util.function.BiFunction<reactor.core.scheduler.Scheduler, java.util.concurrent.ScheduledExecutorService, java.util.concurrent.ScheduledExecutorService>, reactor.core.Disposable {
  static final java.lang.String TAG_SCHEDULER_ID;

  static final java.lang.String METRICS_DECORATOR_KEY;

  final java.util.WeakHashMap<reactor.core.scheduler.Scheduler, java.lang.String> seenSchedulers;

  final java.util.Map<java.lang.String, java.util.concurrent.atomic.AtomicInteger> schedulerDifferentiator;

  final java.util.WeakHashMap<reactor.core.scheduler.Scheduler, java.util.concurrent.atomic.AtomicInteger> executorDifferentiator;

  reactor.core.scheduler.SchedulerMetricDecorator();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/WeakHashMap
       8: dup
       9: invokespecial #3                  // Method java/util/WeakHashMap."<init>":()V
      12: putfield      #4                  // Field seenSchedulers:Ljava/util/WeakHashMap;
      15: aload_0
      16: new           #5                  // class java/util/HashMap
      19: dup
      20: invokespecial #6                  // Method java/util/HashMap."<init>":()V
      23: putfield      #7                  // Field schedulerDifferentiator:Ljava/util/Map;
      26: aload_0
      27: new           #2                  // class java/util/WeakHashMap
      30: dup
      31: invokespecial #3                  // Method java/util/WeakHashMap."<init>":()V
      34: putfield      #8                  // Field executorDifferentiator:Ljava/util/WeakHashMap;
      37: return

  public synchronized java.util.concurrent.ScheduledExecutorService apply(reactor.core.scheduler.Scheduler, java.util.concurrent.ScheduledExecutorService);
    Code:
       0: aload_1
       1: invokestatic  #9                  // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
       4: getstatic     #10                 // Field reactor/core/Scannable$Attr.NAME:Lreactor/core/Scannable$Attr;
       7: aload_1
       8: invokevirtual #11                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: invokevirtual #12                 // Method java/lang/Class.getName:()Ljava/lang/String;
      14: invokeinterface #13,  3           // InterfaceMethod reactor/core/Scannable.scanOrDefault:(Lreactor/core/Scannable$Attr;Ljava/lang/Object;)Ljava/lang/Object;
      19: checkcast     #14                 // class java/lang/String
      22: astore_3
      23: aload_0
      24: getfield      #4                  // Field seenSchedulers:Ljava/util/WeakHashMap;
      27: aload_1
      28: aload_0
      29: aload_3
      30: invokedynamic #15,  0             // InvokeDynamic #0:apply:(Lreactor/core/scheduler/SchedulerMetricDecorator;Ljava/lang/String;)Ljava/util/function/Function;
      35: invokevirtual #16                 // Method java/util/WeakHashMap.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      38: checkcast     #14                 // class java/lang/String
      41: astore        4
      43: new           #17                 // class java/lang/StringBuilder
      46: dup
      47: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      50: aload         4
      52: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: ldc           #20                 // String -
      57: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: aload_0
      61: getfield      #8                  // Field executorDifferentiator:Ljava/util/WeakHashMap;
      64: aload_1
      65: invokedynamic #21,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      70: invokevirtual #16                 // Method java/util/WeakHashMap.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      73: checkcast     #22                 // class java/util/concurrent/atomic/AtomicInteger
      76: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      79: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      82: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      85: astore        5
      87: getstatic     #26                 // Field io/micrometer/core/instrument/Metrics.globalRegistry:Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;
      90: aload_2
      91: aload         5
      93: iconst_1
      94: anewarray     #27                 // class io/micrometer/core/instrument/Tag
      97: dup
      98: iconst_0
      99: ldc           #29                 // String reactor.scheduler.id
     101: aload         4
     103: invokestatic  #30                 // InterfaceMethod io/micrometer/core/instrument/Tag.of:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Tag;
     106: aastore
     107: invokestatic  #31                 // Method io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetrics.monitor:(Lio/micrometer/core/instrument/MeterRegistry;Ljava/util/concurrent/ExecutorService;Ljava/lang/String;[Lio/micrometer/core/instrument/Tag;)Ljava/util/concurrent/ExecutorService;
     110: pop
     111: aload_2
     112: areturn

  public void dispose();
    Code:
       0: getstatic     #26                 // Field io/micrometer/core/instrument/Metrics.globalRegistry:Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;
       3: invokestatic  #32                 // Method io/micrometer/core/instrument/search/Search.in:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/search/Search;
       6: iconst_1
       7: anewarray     #14                 // class java/lang/String
      10: dup
      11: iconst_0
      12: ldc           #29                 // String reactor.scheduler.id
      14: aastore
      15: invokevirtual #33                 // Method io/micrometer/core/instrument/search/Search.tagKeys:([Ljava/lang/String;)Lio/micrometer/core/instrument/search/Search;
      18: invokevirtual #34                 // Method io/micrometer/core/instrument/search/Search.meters:()Ljava/util/Collection;
      21: getstatic     #26                 // Field io/micrometer/core/instrument/Metrics.globalRegistry:Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;
      24: dup
      25: invokevirtual #11                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      28: pop
      29: invokedynamic #35,  0             // InvokeDynamic #2:accept:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;)Ljava/util/function/Consumer;
      34: invokeinterface #36,  2           // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
      39: aload_0
      40: getfield      #4                  // Field seenSchedulers:Ljava/util/WeakHashMap;
      43: invokevirtual #37                 // Method java/util/WeakHashMap.clear:()V
      46: aload_0
      47: getfield      #7                  // Field schedulerDifferentiator:Ljava/util/Map;
      50: invokeinterface #38,  1           // InterfaceMethod java/util/Map.clear:()V
      55: aload_0
      56: getfield      #8                  // Field executorDifferentiator:Ljava/util/WeakHashMap;
      59: invokevirtual #37                 // Method java/util/WeakHashMap.clear:()V
      62: return

  public java.lang.Object apply(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #39                 // class reactor/core/scheduler/Scheduler
       5: aload_2
       6: checkcast     #40                 // class java/util/concurrent/ScheduledExecutorService
       9: invokevirtual #41                 // Method apply:(Lreactor/core/scheduler/Scheduler;Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;
      12: areturn

  private static java.util.concurrent.atomic.AtomicInteger lambda$apply$2(reactor.core.scheduler.Scheduler);
    Code:
       0: new           #22                 // class java/util/concurrent/atomic/AtomicInteger
       3: dup
       4: iconst_0
       5: invokespecial #42                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
       8: areturn

  private java.lang.String lambda$apply$1(java.lang.String, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: getfield      #7                  // Field schedulerDifferentiator:Ljava/util/Map;
       4: aload_1
       5: invokedynamic #43,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      10: invokeinterface #44,  3           // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      15: checkcast     #22                 // class java/util/concurrent/atomic/AtomicInteger
      18: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      21: istore_3
      22: iload_3
      23: ifne          30
      26: aload_1
      27: goto          53
      30: new           #17                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      37: aload_1
      38: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: ldc           #45                 // String #
      43: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: iload_3
      47: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      50: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      53: areturn

  private static java.util.concurrent.atomic.AtomicInteger lambda$null$0(java.lang.String);
    Code:
       0: new           #22                 // class java/util/concurrent/atomic/AtomicInteger
       3: dup
       4: iconst_0
       5: invokespecial #42                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
       8: areturn
}
