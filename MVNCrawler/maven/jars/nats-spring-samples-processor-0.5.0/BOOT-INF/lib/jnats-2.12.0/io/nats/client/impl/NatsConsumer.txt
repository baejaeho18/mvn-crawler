Compiled from "NatsConsumer.java"
abstract class io.nats.client.impl.NatsConsumer implements io.nats.client.Consumer {
  io.nats.client.impl.NatsConnection connection;

  private java.util.concurrent.atomic.AtomicLong maxMessages;

  private java.util.concurrent.atomic.AtomicLong maxBytes;

  private java.util.concurrent.atomic.AtomicLong droppedMessages;

  private java.util.concurrent.atomic.AtomicLong messagesDelivered;

  private java.util.concurrent.atomic.AtomicBoolean slow;

  private java.util.concurrent.atomic.AtomicReference<java.util.concurrent.CompletableFuture<java.lang.Boolean>> drainingFuture;

  io.nats.client.impl.NatsConsumer(io.nats.client.impl.NatsConnection);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field connection:Lio/nats/client/impl/NatsConnection;
       9: aload_0
      10: new           #3                  // class java/util/concurrent/atomic/AtomicLong
      13: dup
      14: ldc2_w        #5                  // long 65536l
      17: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      20: putfield      #8                  // Field maxMessages:Ljava/util/concurrent/atomic/AtomicLong;
      23: aload_0
      24: new           #3                  // class java/util/concurrent/atomic/AtomicLong
      27: dup
      28: ldc2_w        #9                  // long 67108864l
      31: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      34: putfield      #11                 // Field maxBytes:Ljava/util/concurrent/atomic/AtomicLong;
      37: aload_0
      38: new           #3                  // class java/util/concurrent/atomic/AtomicLong
      41: dup
      42: invokespecial #12                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      45: putfield      #13                 // Field droppedMessages:Ljava/util/concurrent/atomic/AtomicLong;
      48: aload_0
      49: new           #3                  // class java/util/concurrent/atomic/AtomicLong
      52: dup
      53: lconst_0
      54: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      57: putfield      #14                 // Field messagesDelivered:Ljava/util/concurrent/atomic/AtomicLong;
      60: aload_0
      61: new           #15                 // class java/util/concurrent/atomic/AtomicBoolean
      64: dup
      65: iconst_0
      66: invokespecial #16                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      69: putfield      #17                 // Field slow:Ljava/util/concurrent/atomic/AtomicBoolean;
      72: aload_0
      73: new           #18                 // class java/util/concurrent/atomic/AtomicReference
      76: dup
      77: invokespecial #19                 // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      80: putfield      #20                 // Field drainingFuture:Ljava/util/concurrent/atomic/AtomicReference;
      83: return

  public void setPendingLimits(long, long);
    Code:
       0: aload_0
       1: getfield      #8                  // Field maxMessages:Ljava/util/concurrent/atomic/AtomicLong;
       4: lload_1
       5: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
       8: aload_0
       9: getfield      #11                 // Field maxBytes:Ljava/util/concurrent/atomic/AtomicLong;
      12: lload_3
      13: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      16: return

  public long getPendingMessageLimit();
    Code:
       0: aload_0
       1: getfield      #8                  // Field maxMessages:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long getPendingByteLimit();
    Code:
       0: aload_0
       1: getfield      #11                 // Field maxBytes:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long getPendingMessageCount();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method getMessageQueue:()Lio/nats/client/impl/MessageQueue;
       4: ifnull        17
       7: aload_0
       8: invokevirtual #23                 // Method getMessageQueue:()Lio/nats/client/impl/MessageQueue;
      11: invokevirtual #24                 // Method io/nats/client/impl/MessageQueue.length:()J
      14: goto          18
      17: lconst_0
      18: lreturn

  public long getPendingByteCount();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method getMessageQueue:()Lio/nats/client/impl/MessageQueue;
       4: ifnull        17
       7: aload_0
       8: invokevirtual #23                 // Method getMessageQueue:()Lio/nats/client/impl/MessageQueue;
      11: invokevirtual #25                 // Method io/nats/client/impl/MessageQueue.sizeInBytes:()J
      14: goto          18
      17: lconst_0
      18: lreturn

  public long getDeliveredCount();
    Code:
       0: aload_0
       1: getfield      #14                 // Field messagesDelivered:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  void incrementDeliveredCount();
    Code:
       0: aload_0
       1: getfield      #14                 // Field messagesDelivered:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
       7: pop2
       8: return

  void incrementDroppedCount();
    Code:
       0: aload_0
       1: getfield      #13                 // Field droppedMessages:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
       7: pop2
       8: return

  public long getDroppedCount();
    Code:
       0: aload_0
       1: getfield      #13                 // Field droppedMessages:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public void clearDroppedCount();
    Code:
       0: aload_0
       1: getfield      #13                 // Field droppedMessages:Ljava/util/concurrent/atomic/AtomicLong;
       4: lconst_0
       5: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
       8: return

  void markSlow();
    Code:
       0: aload_0
       1: getfield      #17                 // Field slow:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: invokevirtual #27                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       8: return

  void markNotSlow();
    Code:
       0: aload_0
       1: getfield      #17                 // Field slow:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: invokevirtual #27                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       8: return

  boolean isMarkedSlow();
    Code:
       0: aload_0
       1: getfield      #17                 // Field slow:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  boolean hasReachedPendingLimits();
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method getPendingByteCount:()J
       4: aload_0
       5: invokevirtual #30                 // Method getPendingByteLimit:()J
       8: lcmp
       9: iflt          21
      12: aload_0
      13: invokevirtual #30                 // Method getPendingByteLimit:()J
      16: lconst_0
      17: lcmp
      18: ifgt          42
      21: aload_0
      22: invokevirtual #31                 // Method getPendingMessageCount:()J
      25: aload_0
      26: invokevirtual #32                 // Method getPendingMessageLimit:()J
      29: lcmp
      30: iflt          46
      33: aload_0
      34: invokevirtual #32                 // Method getPendingMessageLimit:()J
      37: lconst_0
      38: lcmp
      39: ifle          46
      42: iconst_1
      43: goto          47
      46: iconst_0
      47: ireturn

  void markDraining(java.util.concurrent.CompletableFuture<java.lang.Boolean>);
    Code:
       0: aload_0
       1: getfield      #20                 // Field drainingFuture:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
       8: return

  void markUnsubedForDrain();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method getMessageQueue:()Lio/nats/client/impl/MessageQueue;
       4: ifnull        14
       7: aload_0
       8: invokevirtual #23                 // Method getMessageQueue:()Lio/nats/client/impl/MessageQueue;
      11: invokevirtual #34                 // Method io/nats/client/impl/MessageQueue.drain:()V
      14: return

  java.util.concurrent.CompletableFuture<java.lang.Boolean> getDrainingFuture();
    Code:
       0: aload_0
       1: getfield      #20                 // Field drainingFuture:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #35                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #36                 // class java/util/concurrent/CompletableFuture
      10: areturn

  boolean isDraining();
    Code:
       0: aload_0
       1: getfield      #20                 // Field drainingFuture:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #35                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: ifnull        14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  boolean isDrained();
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method isDraining:()Z
       4: ifeq          20
       7: aload_0
       8: invokevirtual #31                 // Method getPendingMessageCount:()J
      11: lconst_0
      12: lcmp
      13: ifne          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  public java.util.concurrent.CompletableFuture<java.lang.Boolean> drain(java.time.Duration) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method isActive:()Z
       4: ifeq          14
       7: aload_0
       8: getfield      #2                  // Field connection:Lio/nats/client/impl/NatsConnection;
      11: ifnonnull     24
      14: new           #39                 // class java/lang/IllegalStateException
      17: dup
      18: ldc           #40                 // String Consumer is closed
      20: invokespecial #41                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: invokevirtual #37                 // Method isDraining:()Z
      28: ifeq          36
      31: aload_0
      32: invokevirtual #42                 // Method getDrainingFuture:()Ljava/util/concurrent/CompletableFuture;
      35: areturn
      36: invokestatic  #43                 // Method java/time/Instant.now:()Ljava/time/Instant;
      39: astore_2
      40: new           #36                 // class java/util/concurrent/CompletableFuture
      43: dup
      44: invokespecial #44                 // Method java/util/concurrent/CompletableFuture."<init>":()V
      47: astore_3
      48: aload_0
      49: aload_3
      50: invokevirtual #45                 // Method markDraining:(Ljava/util/concurrent/CompletableFuture;)V
      53: aload_0
      54: invokevirtual #46                 // Method sendUnsubForDrain:()V
      57: aload_0
      58: getfield      #2                  // Field connection:Lio/nats/client/impl/NatsConnection;
      61: aload_1
      62: invokevirtual #47                 // Method io/nats/client/impl/NatsConnection.flush:(Ljava/time/Duration;)V
      65: goto          79
      68: astore        4
      70: aload_0
      71: getfield      #2                  // Field connection:Lio/nats/client/impl/NatsConnection;
      74: aload         4
      76: invokevirtual #49                 // Method io/nats/client/impl/NatsConnection.processException:(Ljava/lang/Exception;)V
      79: aload_0
      80: invokevirtual #50                 // Method markUnsubedForDrain:()V
      83: aload_0
      84: getfield      #2                  // Field connection:Lio/nats/client/impl/NatsConnection;
      87: invokevirtual #51                 // Method io/nats/client/impl/NatsConnection.getExecutor:()Ljava/util/concurrent/ExecutorService;
      90: aload_0
      91: aload_1
      92: aload_2
      93: aload_3
      94: invokedynamic #52,  0             // InvokeDynamic #0:run:(Lio/nats/client/impl/NatsConsumer;Ljava/time/Duration;Ljava/time/Instant;Ljava/util/concurrent/CompletableFuture;)Ljava/lang/Runnable;
      99: invokeinterface #53,  2           // InterfaceMethod java/util/concurrent/ExecutorService.submit:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;
     104: pop
     105: aload_0
     106: invokevirtual #42                 // Method getDrainingFuture:()Ljava/util/concurrent/CompletableFuture;
     109: areturn
    Exception table:
       from    to  target type
          57    65    68   Class java/util/concurrent/TimeoutException

  public abstract boolean isActive();

  abstract io.nats.client.impl.MessageQueue getMessageQueue();

  abstract void sendUnsubForDrain();

  abstract void cleanUpAfterDrain();

  private void lambda$drain$0(java.time.Duration, java.time.Instant, java.util.concurrent.CompletableFuture);
    Code:
       0: invokestatic  #43                 // Method java/time/Instant.now:()Ljava/time/Instant;
       3: astore        4
       5: aload_1
       6: ifnull        32
       9: aload_1
      10: getstatic     #54                 // Field java/time/Duration.ZERO:Ljava/time/Duration;
      13: invokevirtual #55                 // Method java/time/Duration.equals:(Ljava/lang/Object;)Z
      16: ifne          32
      19: aload_2
      20: aload         4
      22: invokestatic  #56                 // Method java/time/Duration.between:(Ljava/time/temporal/Temporal;Ljava/time/temporal/Temporal;)Ljava/time/Duration;
      25: aload_1
      26: invokevirtual #57                 // Method java/time/Duration.compareTo:(Ljava/time/Duration;)I
      29: ifge          54
      32: aload_0
      33: invokevirtual #58                 // Method isDrained:()Z
      36: ifeq          42
      39: goto          54
      42: lconst_1
      43: invokestatic  #59                 // Method java/lang/Thread.sleep:(J)V
      46: invokestatic  #43                 // Method java/time/Instant.now:()Ljava/time/Instant;
      49: astore        4
      51: goto          5
      54: aload_0
      55: invokevirtual #60                 // Method cleanUpAfterDrain:()V
      58: aload_3
      59: aload_0
      60: invokevirtual #58                 // Method isDrained:()Z
      63: invokestatic  #61                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      66: invokevirtual #62                 // Method java/util/concurrent/CompletableFuture.complete:(Ljava/lang/Object;)Z
      69: pop
      70: goto          116
      73: astore        4
      75: aload_0
      76: getfield      #2                  // Field connection:Lio/nats/client/impl/NatsConnection;
      79: aload         4
      81: invokevirtual #49                 // Method io/nats/client/impl/NatsConnection.processException:(Ljava/lang/Exception;)V
      84: aload_3
      85: aload_0
      86: invokevirtual #58                 // Method isDrained:()Z
      89: invokestatic  #61                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      92: invokevirtual #62                 // Method java/util/concurrent/CompletableFuture.complete:(Ljava/lang/Object;)Z
      95: pop
      96: goto          116
      99: astore        5
     101: aload_3
     102: aload_0
     103: invokevirtual #58                 // Method isDrained:()Z
     106: invokestatic  #61                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     109: invokevirtual #62                 // Method java/util/concurrent/CompletableFuture.complete:(Ljava/lang/Object;)Z
     112: pop
     113: aload         5
     115: athrow
     116: return
    Exception table:
       from    to  target type
           0    58    73   Class java/lang/InterruptedException
           0    58    99   any
          73    84    99   any
          99   101    99   any
}
