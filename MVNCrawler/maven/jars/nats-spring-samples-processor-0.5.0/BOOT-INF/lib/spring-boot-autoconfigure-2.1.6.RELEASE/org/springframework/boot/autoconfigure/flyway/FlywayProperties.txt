Compiled from "FlywayProperties.java"
public class org.springframework.boot.autoconfigure.flyway.FlywayProperties {
  private boolean enabled;

  private boolean checkLocation;

  private java.util.List<java.lang.String> locations;

  private java.nio.charset.Charset encoding;

  private int connectRetries;

  private java.util.List<java.lang.String> schemas;

  private java.lang.String table;

  private java.lang.String baselineDescription;

  private java.lang.String baselineVersion;

  private java.lang.String installedBy;

  private java.util.Map<java.lang.String, java.lang.String> placeholders;

  private java.lang.String placeholderPrefix;

  private java.lang.String placeholderSuffix;

  private boolean placeholderReplacement;

  private java.lang.String sqlMigrationPrefix;

  private java.util.List<java.lang.String> sqlMigrationSuffixes;

  private java.lang.String sqlMigrationSeparator;

  private java.lang.String repeatableSqlMigrationPrefix;

  private java.lang.String target;

  private java.lang.String url;

  private java.lang.String user;

  private java.lang.String password;

  private java.util.List<java.lang.String> initSqls;

  private boolean baselineOnMigrate;

  private boolean cleanDisabled;

  private boolean cleanOnValidationError;

  private boolean group;

  private boolean ignoreMissingMigrations;

  private boolean ignoreIgnoredMigrations;

  private boolean ignorePendingMigrations;

  private boolean ignoreFutureMigrations;

  private boolean mixed;

  private boolean outOfOrder;

  private boolean skipDefaultCallbacks;

  private boolean skipDefaultResolvers;

  private boolean validateOnMigrate;

  public org.springframework.boot.autoconfigure.flyway.FlywayProperties();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field enabled:Z
       9: aload_0
      10: iconst_1
      11: putfield      #3                  // Field checkLocation:Z
      14: aload_0
      15: new           #4                  // class java/util/ArrayList
      18: dup
      19: ldc           #5                  // String classpath:db/migration
      21: invokestatic  #6                  // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      24: invokespecial #7                  // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      27: putfield      #8                  // Field locations:Ljava/util/List;
      30: aload_0
      31: getstatic     #9                  // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      34: putfield      #10                 // Field encoding:Ljava/nio/charset/Charset;
      37: aload_0
      38: new           #4                  // class java/util/ArrayList
      41: dup
      42: invokespecial #11                 // Method java/util/ArrayList."<init>":()V
      45: putfield      #12                 // Field schemas:Ljava/util/List;
      48: aload_0
      49: ldc           #13                 // String flyway_schema_history
      51: putfield      #14                 // Field table:Ljava/lang/String;
      54: aload_0
      55: ldc           #15                 // String << Flyway Baseline >>
      57: putfield      #16                 // Field baselineDescription:Ljava/lang/String;
      60: aload_0
      61: ldc           #17                 // String 1
      63: putfield      #18                 // Field baselineVersion:Ljava/lang/String;
      66: aload_0
      67: new           #19                 // class java/util/HashMap
      70: dup
      71: invokespecial #20                 // Method java/util/HashMap."<init>":()V
      74: putfield      #21                 // Field placeholders:Ljava/util/Map;
      77: aload_0
      78: ldc           #22                 // String ${
      80: putfield      #23                 // Field placeholderPrefix:Ljava/lang/String;
      83: aload_0
      84: ldc           #24                 // String }
      86: putfield      #25                 // Field placeholderSuffix:Ljava/lang/String;
      89: aload_0
      90: iconst_1
      91: putfield      #26                 // Field placeholderReplacement:Z
      94: aload_0
      95: ldc           #27                 // String V
      97: putfield      #28                 // Field sqlMigrationPrefix:Ljava/lang/String;
     100: aload_0
     101: new           #4                  // class java/util/ArrayList
     104: dup
     105: ldc           #29                 // String .sql
     107: invokestatic  #30                 // Method java/util/Collections.singleton:(Ljava/lang/Object;)Ljava/util/Set;
     110: invokespecial #7                  // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
     113: putfield      #31                 // Field sqlMigrationSuffixes:Ljava/util/List;
     116: aload_0
     117: ldc           #32                 // String __
     119: putfield      #33                 // Field sqlMigrationSeparator:Ljava/lang/String;
     122: aload_0
     123: ldc           #34                 // String R
     125: putfield      #35                 // Field repeatableSqlMigrationPrefix:Ljava/lang/String;
     128: aload_0
     129: new           #4                  // class java/util/ArrayList
     132: dup
     133: invokespecial #11                 // Method java/util/ArrayList."<init>":()V
     136: putfield      #36                 // Field initSqls:Ljava/util/List;
     139: aload_0
     140: iconst_1
     141: putfield      #37                 // Field ignoreFutureMigrations:Z
     144: aload_0
     145: iconst_1
     146: putfield      #38                 // Field validateOnMigrate:Z
     149: return

  public boolean isEnabled();
    Code:
       0: aload_0
       1: getfield      #2                  // Field enabled:Z
       4: ireturn

  public void setEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field enabled:Z
       5: return

  public boolean isCheckLocation();
    Code:
       0: aload_0
       1: getfield      #3                  // Field checkLocation:Z
       4: ireturn

  public void setCheckLocation(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field checkLocation:Z
       5: return

  public java.util.List<java.lang.String> getLocations();
    Code:
       0: aload_0
       1: getfield      #8                  // Field locations:Ljava/util/List;
       4: areturn

  public void setLocations(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field locations:Ljava/util/List;
       5: return

  public java.nio.charset.Charset getEncoding();
    Code:
       0: aload_0
       1: getfield      #10                 // Field encoding:Ljava/nio/charset/Charset;
       4: areturn

  public void setEncoding(java.nio.charset.Charset);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field encoding:Ljava/nio/charset/Charset;
       5: return

  public int getConnectRetries();
    Code:
       0: aload_0
       1: getfield      #39                 // Field connectRetries:I
       4: ireturn

  public void setConnectRetries(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #39                 // Field connectRetries:I
       5: return

  public java.util.List<java.lang.String> getSchemas();
    Code:
       0: aload_0
       1: getfield      #12                 // Field schemas:Ljava/util/List;
       4: areturn

  public void setSchemas(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field schemas:Ljava/util/List;
       5: return

  public java.lang.String getTable();
    Code:
       0: aload_0
       1: getfield      #14                 // Field table:Ljava/lang/String;
       4: areturn

  public void setTable(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field table:Ljava/lang/String;
       5: return

  public java.lang.String getBaselineDescription();
    Code:
       0: aload_0
       1: getfield      #16                 // Field baselineDescription:Ljava/lang/String;
       4: areturn

  public void setBaselineDescription(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field baselineDescription:Ljava/lang/String;
       5: return

  public java.lang.String getBaselineVersion();
    Code:
       0: aload_0
       1: getfield      #18                 // Field baselineVersion:Ljava/lang/String;
       4: areturn

  public void setBaselineVersion(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #18                 // Field baselineVersion:Ljava/lang/String;
       5: return

  public java.lang.String getInstalledBy();
    Code:
       0: aload_0
       1: getfield      #40                 // Field installedBy:Ljava/lang/String;
       4: areturn

  public void setInstalledBy(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #40                 // Field installedBy:Ljava/lang/String;
       5: return

  public java.util.Map<java.lang.String, java.lang.String> getPlaceholders();
    Code:
       0: aload_0
       1: getfield      #21                 // Field placeholders:Ljava/util/Map;
       4: areturn

  public void setPlaceholders(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #21                 // Field placeholders:Ljava/util/Map;
       5: return

  public java.lang.String getPlaceholderPrefix();
    Code:
       0: aload_0
       1: getfield      #23                 // Field placeholderPrefix:Ljava/lang/String;
       4: areturn

  public void setPlaceholderPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field placeholderPrefix:Ljava/lang/String;
       5: return

  public java.lang.String getPlaceholderSuffix();
    Code:
       0: aload_0
       1: getfield      #25                 // Field placeholderSuffix:Ljava/lang/String;
       4: areturn

  public void setPlaceholderSuffix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #25                 // Field placeholderSuffix:Ljava/lang/String;
       5: return

  public boolean isPlaceholderReplacement();
    Code:
       0: aload_0
       1: getfield      #26                 // Field placeholderReplacement:Z
       4: ireturn

  public void setPlaceholderReplacement(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field placeholderReplacement:Z
       5: return

  public java.lang.String getSqlMigrationPrefix();
    Code:
       0: aload_0
       1: getfield      #28                 // Field sqlMigrationPrefix:Ljava/lang/String;
       4: areturn

  public void setSqlMigrationPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field sqlMigrationPrefix:Ljava/lang/String;
       5: return

  public java.util.List<java.lang.String> getSqlMigrationSuffixes();
    Code:
       0: aload_0
       1: getfield      #31                 // Field sqlMigrationSuffixes:Ljava/util/List;
       4: areturn

  public void setSqlMigrationSuffixes(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #31                 // Field sqlMigrationSuffixes:Ljava/util/List;
       5: return

  public java.lang.String getSqlMigrationSeparator();
    Code:
       0: aload_0
       1: getfield      #33                 // Field sqlMigrationSeparator:Ljava/lang/String;
       4: areturn

  public void setSqlMigrationSeparator(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #33                 // Field sqlMigrationSeparator:Ljava/lang/String;
       5: return

  public java.lang.String getRepeatableSqlMigrationPrefix();
    Code:
       0: aload_0
       1: getfield      #35                 // Field repeatableSqlMigrationPrefix:Ljava/lang/String;
       4: areturn

  public void setRepeatableSqlMigrationPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #35                 // Field repeatableSqlMigrationPrefix:Ljava/lang/String;
       5: return

  public java.lang.String getTarget();
    Code:
       0: aload_0
       1: getfield      #41                 // Field target:Ljava/lang/String;
       4: areturn

  public void setTarget(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #41                 // Field target:Ljava/lang/String;
       5: return

  public boolean isCreateDataSource();
    Code:
       0: aload_0
       1: getfield      #42                 // Field url:Ljava/lang/String;
       4: ifnonnull     14
       7: aload_0
       8: getfield      #43                 // Field user:Ljava/lang/String;
      11: ifnull        18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public java.lang.String getUrl();
    Code:
       0: aload_0
       1: getfield      #42                 // Field url:Ljava/lang/String;
       4: areturn

  public void setUrl(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #42                 // Field url:Ljava/lang/String;
       5: return

  public java.lang.String getUser();
    Code:
       0: aload_0
       1: getfield      #43                 // Field user:Ljava/lang/String;
       4: areturn

  public void setUser(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #43                 // Field user:Ljava/lang/String;
       5: return

  public java.lang.String getPassword();
    Code:
       0: aload_0
       1: getfield      #44                 // Field password:Ljava/lang/String;
       4: ifnull        14
       7: aload_0
       8: getfield      #44                 // Field password:Ljava/lang/String;
      11: goto          16
      14: ldc           #45                 // String
      16: areturn

  public void setPassword(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #44                 // Field password:Ljava/lang/String;
       5: return

  public java.util.List<java.lang.String> getInitSqls();
    Code:
       0: aload_0
       1: getfield      #36                 // Field initSqls:Ljava/util/List;
       4: areturn

  public void setInitSqls(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #36                 // Field initSqls:Ljava/util/List;
       5: return

  public boolean isBaselineOnMigrate();
    Code:
       0: aload_0
       1: getfield      #46                 // Field baselineOnMigrate:Z
       4: ireturn

  public void setBaselineOnMigrate(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #46                 // Field baselineOnMigrate:Z
       5: return

  public boolean isCleanDisabled();
    Code:
       0: aload_0
       1: getfield      #47                 // Field cleanDisabled:Z
       4: ireturn

  public void setCleanDisabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #47                 // Field cleanDisabled:Z
       5: return

  public boolean isCleanOnValidationError();
    Code:
       0: aload_0
       1: getfield      #48                 // Field cleanOnValidationError:Z
       4: ireturn

  public void setCleanOnValidationError(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #48                 // Field cleanOnValidationError:Z
       5: return

  public boolean isGroup();
    Code:
       0: aload_0
       1: getfield      #49                 // Field group:Z
       4: ireturn

  public void setGroup(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #49                 // Field group:Z
       5: return

  public boolean isIgnoreMissingMigrations();
    Code:
       0: aload_0
       1: getfield      #50                 // Field ignoreMissingMigrations:Z
       4: ireturn

  public void setIgnoreMissingMigrations(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #50                 // Field ignoreMissingMigrations:Z
       5: return

  public boolean isIgnoreIgnoredMigrations();
    Code:
       0: aload_0
       1: getfield      #51                 // Field ignoreIgnoredMigrations:Z
       4: ireturn

  public void setIgnoreIgnoredMigrations(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #51                 // Field ignoreIgnoredMigrations:Z
       5: return

  public boolean isIgnorePendingMigrations();
    Code:
       0: aload_0
       1: getfield      #52                 // Field ignorePendingMigrations:Z
       4: ireturn

  public void setIgnorePendingMigrations(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #52                 // Field ignorePendingMigrations:Z
       5: return

  public boolean isIgnoreFutureMigrations();
    Code:
       0: aload_0
       1: getfield      #37                 // Field ignoreFutureMigrations:Z
       4: ireturn

  public void setIgnoreFutureMigrations(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #37                 // Field ignoreFutureMigrations:Z
       5: return

  public boolean isMixed();
    Code:
       0: aload_0
       1: getfield      #53                 // Field mixed:Z
       4: ireturn

  public void setMixed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #53                 // Field mixed:Z
       5: return

  public boolean isOutOfOrder();
    Code:
       0: aload_0
       1: getfield      #54                 // Field outOfOrder:Z
       4: ireturn

  public void setOutOfOrder(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #54                 // Field outOfOrder:Z
       5: return

  public boolean isSkipDefaultCallbacks();
    Code:
       0: aload_0
       1: getfield      #55                 // Field skipDefaultCallbacks:Z
       4: ireturn

  public void setSkipDefaultCallbacks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #55                 // Field skipDefaultCallbacks:Z
       5: return

  public boolean isSkipDefaultResolvers();
    Code:
       0: aload_0
       1: getfield      #56                 // Field skipDefaultResolvers:Z
       4: ireturn

  public void setSkipDefaultResolvers(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #56                 // Field skipDefaultResolvers:Z
       5: return

  public boolean isValidateOnMigrate();
    Code:
       0: aload_0
       1: getfield      #38                 // Field validateOnMigrate:Z
       4: ireturn

  public void setValidateOnMigrate(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #38                 // Field validateOnMigrate:Z
       5: return
}
