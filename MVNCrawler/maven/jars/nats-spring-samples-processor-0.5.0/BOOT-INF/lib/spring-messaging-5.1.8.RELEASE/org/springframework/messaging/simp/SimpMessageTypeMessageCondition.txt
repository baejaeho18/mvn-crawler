Compiled from "SimpMessageTypeMessageCondition.java"
public class org.springframework.messaging.simp.SimpMessageTypeMessageCondition extends org.springframework.messaging.handler.AbstractMessageCondition<org.springframework.messaging.simp.SimpMessageTypeMessageCondition> {
  public static final org.springframework.messaging.simp.SimpMessageTypeMessageCondition MESSAGE;

  public static final org.springframework.messaging.simp.SimpMessageTypeMessageCondition SUBSCRIBE;

  private final org.springframework.messaging.simp.SimpMessageType messageType;

  public org.springframework.messaging.simp.SimpMessageTypeMessageCondition(org.springframework.messaging.simp.SimpMessageType);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/messaging/handler/AbstractMessageCondition."<init>":()V
       4: aload_1
       5: ldc           #2                  // String MessageType must not be null
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: putfield      #4                  // Field messageType:Lorg/springframework/messaging/simp/SimpMessageType;
      15: return

  public org.springframework.messaging.simp.SimpMessageType getMessageType();
    Code:
       0: aload_0
       1: getfield      #4                  // Field messageType:Lorg/springframework/messaging/simp/SimpMessageType;
       4: areturn

  protected java.util.Collection<?> getContent();
    Code:
       0: aload_0
       1: getfield      #4                  // Field messageType:Lorg/springframework/messaging/simp/SimpMessageType;
       4: invokestatic  #5                  // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
       7: areturn

  protected java.lang.String getToStringInfix();
    Code:
       0: ldc           #6                  // String  ||
       2: areturn

  public org.springframework.messaging.simp.SimpMessageTypeMessageCondition combine(org.springframework.messaging.simp.SimpMessageTypeMessageCondition);
    Code:
       0: aload_1
       1: areturn

  public org.springframework.messaging.simp.SimpMessageTypeMessageCondition getMatchingCondition(org.springframework.messaging.Message<?>);
    Code:
       0: aload_1
       1: invokeinterface #7,  1            // InterfaceMethod org/springframework/messaging/Message.getHeaders:()Lorg/springframework/messaging/MessageHeaders;
       6: invokestatic  #8                  // Method org/springframework/messaging/simp/SimpMessageHeaderAccessor.getMessageType:(Ljava/util/Map;)Lorg/springframework/messaging/simp/SimpMessageType;
       9: astore_2
      10: aload_2
      11: ifnull        29
      14: aload_2
      15: aload_0
      16: getfield      #4                  // Field messageType:Lorg/springframework/messaging/simp/SimpMessageType;
      19: invokevirtual #9                  // Method org/springframework/messaging/simp/SimpMessageType.equals:(Ljava/lang/Object;)Z
      22: ifeq          29
      25: aload_0
      26: goto          30
      29: aconst_null
      30: areturn

  public int compareTo(org.springframework.messaging.simp.SimpMessageTypeMessageCondition, org.springframework.messaging.Message<?>);
    Code:
       0: aload_2
       1: invokeinterface #7,  1            // InterfaceMethod org/springframework/messaging/Message.getHeaders:()Lorg/springframework/messaging/MessageHeaders;
       6: invokestatic  #8                  // Method org/springframework/messaging/simp/SimpMessageHeaderAccessor.getMessageType:(Ljava/util/Map;)Lorg/springframework/messaging/simp/SimpMessageType;
       9: astore_3
      10: aload_3
      11: ifnull        64
      14: aload_3
      15: aload_0
      16: getfield      #4                  // Field messageType:Lorg/springframework/messaging/simp/SimpMessageType;
      19: invokevirtual #10                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      22: ifeq          38
      25: aload_3
      26: aload_1
      27: invokevirtual #11                 // Method getMessageType:()Lorg/springframework/messaging/simp/SimpMessageType;
      30: invokevirtual #10                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      33: ifeq          38
      36: iconst_0
      37: ireturn
      38: aload_3
      39: aload_0
      40: getfield      #4                  // Field messageType:Lorg/springframework/messaging/simp/SimpMessageType;
      43: invokevirtual #10                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      46: ifeq          51
      49: iconst_m1
      50: ireturn
      51: aload_3
      52: aload_1
      53: invokevirtual #11                 // Method getMessageType:()Lorg/springframework/messaging/simp/SimpMessageType;
      56: invokevirtual #10                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      59: ifeq          64
      62: iconst_1
      63: ireturn
      64: iconst_0
      65: ireturn

  public int compareTo(java.lang.Object, org.springframework.messaging.Message);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #12                 // class org/springframework/messaging/simp/SimpMessageTypeMessageCondition
       5: aload_2
       6: invokevirtual #13                 // Method compareTo:(Lorg/springframework/messaging/simp/SimpMessageTypeMessageCondition;Lorg/springframework/messaging/Message;)I
       9: ireturn

  public java.lang.Object getMatchingCondition(org.springframework.messaging.Message);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #14                 // Method getMatchingCondition:(Lorg/springframework/messaging/Message;)Lorg/springframework/messaging/simp/SimpMessageTypeMessageCondition;
       5: areturn

  public java.lang.Object combine(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #12                 // class org/springframework/messaging/simp/SimpMessageTypeMessageCondition
       5: invokevirtual #15                 // Method combine:(Lorg/springframework/messaging/simp/SimpMessageTypeMessageCondition;)Lorg/springframework/messaging/simp/SimpMessageTypeMessageCondition;
       8: areturn

  static {};
    Code:
       0: new           #12                 // class org/springframework/messaging/simp/SimpMessageTypeMessageCondition
       3: dup
       4: getstatic     #16                 // Field org/springframework/messaging/simp/SimpMessageType.MESSAGE:Lorg/springframework/messaging/simp/SimpMessageType;
       7: invokespecial #17                 // Method "<init>":(Lorg/springframework/messaging/simp/SimpMessageType;)V
      10: putstatic     #18                 // Field MESSAGE:Lorg/springframework/messaging/simp/SimpMessageTypeMessageCondition;
      13: new           #12                 // class org/springframework/messaging/simp/SimpMessageTypeMessageCondition
      16: dup
      17: getstatic     #19                 // Field org/springframework/messaging/simp/SimpMessageType.SUBSCRIBE:Lorg/springframework/messaging/simp/SimpMessageType;
      20: invokespecial #17                 // Method "<init>":(Lorg/springframework/messaging/simp/SimpMessageType;)V
      23: putstatic     #20                 // Field SUBSCRIBE:Lorg/springframework/messaging/simp/SimpMessageTypeMessageCondition;
      26: return
}
