Compiled from "AbstractMessageConverter.java"
public abstract class org.springframework.messaging.converter.AbstractMessageConverter implements org.springframework.messaging.converter.SmartMessageConverter {
  protected final org.apache.commons.logging.Log logger;

  private final java.util.List<org.springframework.util.MimeType> supportedMimeTypes;

  private org.springframework.messaging.converter.ContentTypeResolver contentTypeResolver;

  private boolean strictContentTypeMatch;

  private java.lang.Class<?> serializedPayloadClass;

  protected org.springframework.messaging.converter.AbstractMessageConverter(org.springframework.util.MimeType);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: new           #5                  // class org/springframework/messaging/converter/DefaultContentTypeResolver
      19: dup
      20: invokespecial #6                  // Method org/springframework/messaging/converter/DefaultContentTypeResolver."<init>":()V
      23: putfield      #7                  // Field contentTypeResolver:Lorg/springframework/messaging/converter/ContentTypeResolver;
      26: aload_0
      27: iconst_0
      28: putfield      #8                  // Field strictContentTypeMatch:Z
      31: aload_0
      32: ldc           #9                  // class "[B"
      34: putfield      #10                 // Field serializedPayloadClass:Ljava/lang/Class;
      37: aload_1
      38: ldc           #11                 // String supportedMimeType is required
      40: invokestatic  #12                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      43: aload_0
      44: aload_1
      45: invokestatic  #13                 // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      48: putfield      #14                 // Field supportedMimeTypes:Ljava/util/List;
      51: return

  protected org.springframework.messaging.converter.AbstractMessageConverter(java.util.Collection<org.springframework.util.MimeType>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: new           #5                  // class org/springframework/messaging/converter/DefaultContentTypeResolver
      19: dup
      20: invokespecial #6                  // Method org/springframework/messaging/converter/DefaultContentTypeResolver."<init>":()V
      23: putfield      #7                  // Field contentTypeResolver:Lorg/springframework/messaging/converter/ContentTypeResolver;
      26: aload_0
      27: iconst_0
      28: putfield      #8                  // Field strictContentTypeMatch:Z
      31: aload_0
      32: ldc           #9                  // class "[B"
      34: putfield      #10                 // Field serializedPayloadClass:Ljava/lang/Class;
      37: aload_1
      38: ldc           #15                 // String supportedMimeTypes must not be null
      40: invokestatic  #12                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      43: aload_0
      44: new           #16                 // class java/util/ArrayList
      47: dup
      48: aload_1
      49: invokespecial #17                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      52: putfield      #14                 // Field supportedMimeTypes:Ljava/util/List;
      55: return

  public java.util.List<org.springframework.util.MimeType> getSupportedMimeTypes();
    Code:
       0: aload_0
       1: getfield      #14                 // Field supportedMimeTypes:Ljava/util/List;
       4: invokestatic  #18                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
       7: areturn

  public void setContentTypeResolver(org.springframework.messaging.converter.ContentTypeResolver);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field contentTypeResolver:Lorg/springframework/messaging/converter/ContentTypeResolver;
       5: return

  public org.springframework.messaging.converter.ContentTypeResolver getContentTypeResolver();
    Code:
       0: aload_0
       1: getfield      #7                  // Field contentTypeResolver:Lorg/springframework/messaging/converter/ContentTypeResolver;
       4: areturn

  public void setStrictContentTypeMatch(boolean);
    Code:
       0: iload_1
       1: ifeq          22
       4: aload_0
       5: invokevirtual #19                 // Method getSupportedMimeTypes:()Ljava/util/List;
       8: ldc           #20                 // String Strict match requires non-empty list of supported mime types
      10: invokestatic  #21                 // Method org/springframework/util/Assert.notEmpty:(Ljava/util/Collection;Ljava/lang/String;)V
      13: aload_0
      14: invokevirtual #22                 // Method getContentTypeResolver:()Lorg/springframework/messaging/converter/ContentTypeResolver;
      17: ldc           #23                 // String Strict match requires ContentTypeResolver
      19: invokestatic  #12                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      22: aload_0
      23: iload_1
      24: putfield      #8                  // Field strictContentTypeMatch:Z
      27: return

  public boolean isStrictContentTypeMatch();
    Code:
       0: aload_0
       1: getfield      #8                  // Field strictContentTypeMatch:Z
       4: ireturn

  public void setSerializedPayloadClass(java.lang.Class<?>);
    Code:
       0: ldc           #9                  // class "[B"
       2: aload_1
       3: if_acmpeq     12
       6: ldc           #24                 // class java/lang/String
       8: aload_1
       9: if_acmpne     16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: aload_1
      18: invokedynamic #25,  0             // InvokeDynamic #0:get:(Ljava/lang/Class;)Ljava/util/function/Supplier;
      23: invokestatic  #26                 // Method org/springframework/util/Assert.isTrue:(ZLjava/util/function/Supplier;)V
      26: aload_0
      27: aload_1
      28: putfield      #10                 // Field serializedPayloadClass:Ljava/lang/Class;
      31: return

  public java.lang.Class<?> getSerializedPayloadClass();
    Code:
       0: aload_0
       1: getfield      #10                 // Field serializedPayloadClass:Ljava/lang/Class;
       4: areturn

  protected org.springframework.util.MimeType getDefaultContentType(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getSupportedMimeTypes:()Ljava/util/List;
       4: astore_2
       5: aload_2
       6: invokeinterface #27,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      11: ifne          27
      14: aload_2
      15: iconst_0
      16: invokeinterface #28,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      21: checkcast     #29                 // class org/springframework/util/MimeType
      24: goto          28
      27: aconst_null
      28: areturn

  public final java.lang.Object fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: invokevirtual #30                 // Method fromMessage:(Lorg/springframework/messaging/Message;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final java.lang.Object fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #31                 // Method canConvertFrom:(Lorg/springframework/messaging/Message;Ljava/lang/Class;)Z
       6: ifne          11
       9: aconst_null
      10: areturn
      11: aload_0
      12: aload_1
      13: aload_2
      14: aload_3
      15: invokevirtual #32                 // Method convertFromInternal:(Lorg/springframework/messaging/Message;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;
      18: areturn

  protected boolean canConvertFrom(org.springframework.messaging.Message<?>, java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #33                 // Method supports:(Ljava/lang/Class;)Z
       5: ifeq          25
       8: aload_0
       9: aload_1
      10: invokeinterface #34,  1           // InterfaceMethod org/springframework/messaging/Message.getHeaders:()Lorg/springframework/messaging/MessageHeaders;
      15: invokevirtual #35                 // Method supportsMimeType:(Lorg/springframework/messaging/MessageHeaders;)Z
      18: ifeq          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  public final org.springframework.messaging.Message<?> toMessage(java.lang.Object, org.springframework.messaging.MessageHeaders);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: invokevirtual #36                 // Method toMessage:(Ljava/lang/Object;Lorg/springframework/messaging/MessageHeaders;Ljava/lang/Object;)Lorg/springframework/messaging/Message;
       7: areturn

  public final org.springframework.messaging.Message<?> toMessage(java.lang.Object, org.springframework.messaging.MessageHeaders, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #37                 // Method canConvertTo:(Ljava/lang/Object;Lorg/springframework/messaging/MessageHeaders;)Z
       6: ifne          11
       9: aconst_null
      10: areturn
      11: aload_0
      12: aload_1
      13: aload_2
      14: aload_3
      15: invokevirtual #38                 // Method convertToInternal:(Ljava/lang/Object;Lorg/springframework/messaging/MessageHeaders;Ljava/lang/Object;)Ljava/lang/Object;
      18: astore        4
      20: aload         4
      22: ifnonnull     27
      25: aconst_null
      26: areturn
      27: aload_0
      28: aload         4
      30: invokevirtual #39                 // Method getDefaultContentType:(Ljava/lang/Object;)Lorg/springframework/util/MimeType;
      33: astore        5
      35: aload_2
      36: ifnull        85
      39: aload_2
      40: ldc           #40                 // class org/springframework/messaging/support/MessageHeaderAccessor
      42: invokestatic  #41                 // Method org/springframework/messaging/support/MessageHeaderAccessor.getAccessor:(Lorg/springframework/messaging/MessageHeaders;Ljava/lang/Class;)Lorg/springframework/messaging/support/MessageHeaderAccessor;
      45: astore        6
      47: aload         6
      49: ifnull        85
      52: aload         6
      54: invokevirtual #42                 // Method org/springframework/messaging/support/MessageHeaderAccessor.isMutable:()Z
      57: ifeq          85
      60: aload         5
      62: ifnull        74
      65: aload         6
      67: ldc           #44                 // String contentType
      69: aload         5
      71: invokevirtual #45                 // Method org/springframework/messaging/support/MessageHeaderAccessor.setHeaderIfAbsent:(Ljava/lang/String;Ljava/lang/Object;)V
      74: aload         4
      76: aload         6
      78: invokevirtual #46                 // Method org/springframework/messaging/support/MessageHeaderAccessor.getMessageHeaders:()Lorg/springframework/messaging/MessageHeaders;
      81: invokestatic  #47                 // Method org/springframework/messaging/support/MessageBuilder.createMessage:(Ljava/lang/Object;Lorg/springframework/messaging/MessageHeaders;)Lorg/springframework/messaging/Message;
      84: areturn
      85: aload         4
      87: invokestatic  #48                 // Method org/springframework/messaging/support/MessageBuilder.withPayload:(Ljava/lang/Object;)Lorg/springframework/messaging/support/MessageBuilder;
      90: astore        6
      92: aload_2
      93: ifnull        103
      96: aload         6
      98: aload_2
      99: invokevirtual #49                 // Method org/springframework/messaging/support/MessageBuilder.copyHeaders:(Ljava/util/Map;)Lorg/springframework/messaging/support/MessageBuilder;
     102: pop
     103: aload         5
     105: ifnull        118
     108: aload         6
     110: ldc           #44                 // String contentType
     112: aload         5
     114: invokevirtual #50                 // Method org/springframework/messaging/support/MessageBuilder.setHeaderIfAbsent:(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/messaging/support/MessageBuilder;
     117: pop
     118: aload         6
     120: invokevirtual #51                 // Method org/springframework/messaging/support/MessageBuilder.build:()Lorg/springframework/messaging/Message;
     123: areturn

  protected boolean canConvertTo(java.lang.Object, org.springframework.messaging.MessageHeaders);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       5: invokevirtual #33                 // Method supports:(Ljava/lang/Class;)Z
       8: ifeq          23
      11: aload_0
      12: aload_2
      13: invokevirtual #35                 // Method supportsMimeType:(Lorg/springframework/messaging/MessageHeaders;)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  protected boolean supportsMimeType(org.springframework.messaging.MessageHeaders);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getSupportedMimeTypes:()Ljava/util/List;
       4: invokeinterface #27,  1           // InterfaceMethod java/util/List.isEmpty:()Z
       9: ifeq          14
      12: iconst_1
      13: ireturn
      14: aload_0
      15: aload_1
      16: invokevirtual #52                 // Method getMimeType:(Lorg/springframework/messaging/MessageHeaders;)Lorg/springframework/util/MimeType;
      19: astore_2
      20: aload_2
      21: ifnonnull     37
      24: aload_0
      25: invokevirtual #53                 // Method isStrictContentTypeMatch:()Z
      28: ifne          35
      31: iconst_1
      32: goto          36
      35: iconst_0
      36: ireturn
      37: aload_0
      38: invokevirtual #19                 // Method getSupportedMimeTypes:()Ljava/util/List;
      41: invokeinterface #54,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      46: astore_3
      47: aload_3
      48: invokeinterface #55,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      53: ifeq          102
      56: aload_3
      57: invokeinterface #56,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      62: checkcast     #29                 // class org/springframework/util/MimeType
      65: astore        4
      67: aload         4
      69: invokevirtual #57                 // Method org/springframework/util/MimeType.getType:()Ljava/lang/String;
      72: aload_2
      73: invokevirtual #57                 // Method org/springframework/util/MimeType.getType:()Ljava/lang/String;
      76: invokevirtual #58                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      79: ifeq          99
      82: aload         4
      84: invokevirtual #59                 // Method org/springframework/util/MimeType.getSubtype:()Ljava/lang/String;
      87: aload_2
      88: invokevirtual #59                 // Method org/springframework/util/MimeType.getSubtype:()Ljava/lang/String;
      91: invokevirtual #58                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      94: ifeq          99
      97: iconst_1
      98: ireturn
      99: goto          47
     102: iconst_0
     103: ireturn

  protected org.springframework.util.MimeType getMimeType(org.springframework.messaging.MessageHeaders);
    Code:
       0: aload_1
       1: ifnull        24
       4: aload_0
       5: getfield      #7                  // Field contentTypeResolver:Lorg/springframework/messaging/converter/ContentTypeResolver;
       8: ifnull        24
      11: aload_0
      12: getfield      #7                  // Field contentTypeResolver:Lorg/springframework/messaging/converter/ContentTypeResolver;
      15: aload_1
      16: invokeinterface #60,  2           // InterfaceMethod org/springframework/messaging/converter/ContentTypeResolver.resolve:(Lorg/springframework/messaging/MessageHeaders;)Lorg/springframework/util/MimeType;
      21: goto          25
      24: aconst_null
      25: areturn

  protected abstract boolean supports(java.lang.Class<?>);

  protected java.lang.Object convertFromInternal(org.springframework.messaging.Message<?>, java.lang.Class<?>, java.lang.Object);
    Code:
       0: aconst_null
       1: areturn

  protected java.lang.Object convertToInternal(java.lang.Object, org.springframework.messaging.MessageHeaders, java.lang.Object);
    Code:
       0: aconst_null
       1: areturn

  private static java.lang.String lambda$setSerializedPayloadClass$0(java.lang.Class);
    Code:
       0: new           #61                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #62                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #63                 // String Payload class must be byte[] or String:
       9: invokevirtual #64                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokevirtual #65                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      16: invokevirtual #66                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      19: areturn
}
