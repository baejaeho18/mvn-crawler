Compiled from "ReactorNettyTcpClient.java"
public class org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient<P> implements org.springframework.messaging.tcp.TcpOperations<P> {
  private static final int PUBLISH_ON_BUFFER_SIZE;

  private final reactor.netty.tcp.TcpClient tcpClient;

  private final org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P> codec;

  private final io.netty.channel.group.ChannelGroup channelGroup;

  private final reactor.netty.resources.LoopResources loopResources;

  private final reactor.netty.resources.ConnectionProvider poolResources;

  private final reactor.core.scheduler.Scheduler scheduler;

  private org.apache.commons.logging.Log logger;

  private volatile boolean stopping;

  public org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient(java.lang.String, int, org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P>);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #5                  // String tcp-client-scheduler
       7: invokestatic  #6                  // Method reactor/core/scheduler/Schedulers.newParallel:(Ljava/lang/String;)Lreactor/core/scheduler/Scheduler;
      10: putfield      #2                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      13: aload_0
      14: ldc           #7                  // class org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient
      16: invokestatic  #8                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      19: putfield      #1                  // Field logger:Lorg/apache/commons/logging/Log;
      22: aload_0
      23: iconst_0
      24: putfield      #9                  // Field stopping:Z
      27: aload_1
      28: ldc           #10                 // String host is required
      30: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      33: aload_3
      34: ldc           #12                 // String ReactorNettyCodec is required
      36: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      39: aload_0
      40: new           #13                 // class io/netty/channel/group/DefaultChannelGroup
      43: dup
      44: getstatic     #14                 // Field io/netty/util/concurrent/ImmediateEventExecutor.INSTANCE:Lio/netty/util/concurrent/ImmediateEventExecutor;
      47: invokespecial #15                 // Method io/netty/channel/group/DefaultChannelGroup."<init>":(Lio/netty/util/concurrent/EventExecutor;)V
      50: putfield      #16                 // Field channelGroup:Lio/netty/channel/group/ChannelGroup;
      53: aload_0
      54: ldc           #17                 // String tcp-client-loop
      56: invokestatic  #18                 // InterfaceMethod reactor/netty/resources/LoopResources.create:(Ljava/lang/String;)Lreactor/netty/resources/LoopResources;
      59: putfield      #19                 // Field loopResources:Lreactor/netty/resources/LoopResources;
      62: aload_0
      63: ldc           #20                 // String tcp-client-pool
      65: invokestatic  #21                 // InterfaceMethod reactor/netty/resources/ConnectionProvider.elastic:(Ljava/lang/String;)Lreactor/netty/resources/ConnectionProvider;
      68: putfield      #22                 // Field poolResources:Lreactor/netty/resources/ConnectionProvider;
      71: aload_0
      72: aload_3
      73: putfield      #3                  // Field codec:Lorg/springframework/messaging/tcp/reactor/ReactorNettyCodec;
      76: aload_0
      77: aload_0
      78: getfield      #22                 // Field poolResources:Lreactor/netty/resources/ConnectionProvider;
      81: invokestatic  #23                 // Method reactor/netty/tcp/TcpClient.create:(Lreactor/netty/resources/ConnectionProvider;)Lreactor/netty/tcp/TcpClient;
      84: aload_1
      85: invokevirtual #24                 // Method reactor/netty/tcp/TcpClient.host:(Ljava/lang/String;)Lreactor/netty/tcp/TcpClient;
      88: iload_2
      89: invokevirtual #25                 // Method reactor/netty/tcp/TcpClient.port:(I)Lreactor/netty/tcp/TcpClient;
      92: aload_0
      93: getfield      #19                 // Field loopResources:Lreactor/netty/resources/LoopResources;
      96: iconst_0
      97: invokevirtual #26                 // Method reactor/netty/tcp/TcpClient.runOn:(Lreactor/netty/resources/LoopResources;Z)Lreactor/netty/tcp/TcpClient;
     100: aload_0
     101: invokedynamic #27,  0             // InvokeDynamic #0:accept:(Lorg/springframework/messaging/tcp/reactor/ReactorNettyTcpClient;)Ljava/util/function/Consumer;
     106: invokevirtual #28                 // Method reactor/netty/tcp/TcpClient.doOnConnected:(Ljava/util/function/Consumer;)Lreactor/netty/tcp/TcpClient;
     109: putfield      #29                 // Field tcpClient:Lreactor/netty/tcp/TcpClient;
     112: return

  public org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient(java.util.function.Function<reactor.netty.tcp.TcpClient, reactor.netty.tcp.TcpClient>, org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P>);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #5                  // String tcp-client-scheduler
       7: invokestatic  #6                  // Method reactor/core/scheduler/Schedulers.newParallel:(Ljava/lang/String;)Lreactor/core/scheduler/Scheduler;
      10: putfield      #2                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      13: aload_0
      14: ldc           #7                  // class org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient
      16: invokestatic  #8                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      19: putfield      #1                  // Field logger:Lorg/apache/commons/logging/Log;
      22: aload_0
      23: iconst_0
      24: putfield      #9                  // Field stopping:Z
      27: aload_2
      28: ldc           #12                 // String ReactorNettyCodec is required
      30: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      33: aload_0
      34: new           #13                 // class io/netty/channel/group/DefaultChannelGroup
      37: dup
      38: getstatic     #14                 // Field io/netty/util/concurrent/ImmediateEventExecutor.INSTANCE:Lio/netty/util/concurrent/ImmediateEventExecutor;
      41: invokespecial #15                 // Method io/netty/channel/group/DefaultChannelGroup."<init>":(Lio/netty/util/concurrent/EventExecutor;)V
      44: putfield      #16                 // Field channelGroup:Lio/netty/channel/group/ChannelGroup;
      47: aload_0
      48: ldc           #17                 // String tcp-client-loop
      50: invokestatic  #18                 // InterfaceMethod reactor/netty/resources/LoopResources.create:(Ljava/lang/String;)Lreactor/netty/resources/LoopResources;
      53: putfield      #19                 // Field loopResources:Lreactor/netty/resources/LoopResources;
      56: aload_0
      57: ldc           #20                 // String tcp-client-pool
      59: invokestatic  #21                 // InterfaceMethod reactor/netty/resources/ConnectionProvider.elastic:(Ljava/lang/String;)Lreactor/netty/resources/ConnectionProvider;
      62: putfield      #22                 // Field poolResources:Lreactor/netty/resources/ConnectionProvider;
      65: aload_0
      66: aload_2
      67: putfield      #3                  // Field codec:Lorg/springframework/messaging/tcp/reactor/ReactorNettyCodec;
      70: aload_0
      71: aload_1
      72: aload_0
      73: getfield      #22                 // Field poolResources:Lreactor/netty/resources/ConnectionProvider;
      76: invokestatic  #23                 // Method reactor/netty/tcp/TcpClient.create:(Lreactor/netty/resources/ConnectionProvider;)Lreactor/netty/tcp/TcpClient;
      79: aload_0
      80: getfield      #19                 // Field loopResources:Lreactor/netty/resources/LoopResources;
      83: iconst_0
      84: invokevirtual #26                 // Method reactor/netty/tcp/TcpClient.runOn:(Lreactor/netty/resources/LoopResources;Z)Lreactor/netty/tcp/TcpClient;
      87: aload_0
      88: invokedynamic #30,  0             // InvokeDynamic #1:accept:(Lorg/springframework/messaging/tcp/reactor/ReactorNettyTcpClient;)Ljava/util/function/Consumer;
      93: invokevirtual #28                 // Method reactor/netty/tcp/TcpClient.doOnConnected:(Ljava/util/function/Consumer;)Lreactor/netty/tcp/TcpClient;
      96: invokeinterface #31,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     101: checkcast     #32                 // class reactor/netty/tcp/TcpClient
     104: putfield      #29                 // Field tcpClient:Lreactor/netty/tcp/TcpClient;
     107: return

  public org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient(reactor.netty.tcp.TcpClient, org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P>);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #5                  // String tcp-client-scheduler
       7: invokestatic  #6                  // Method reactor/core/scheduler/Schedulers.newParallel:(Ljava/lang/String;)Lreactor/core/scheduler/Scheduler;
      10: putfield      #2                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      13: aload_0
      14: ldc           #7                  // class org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient
      16: invokestatic  #8                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      19: putfield      #1                  // Field logger:Lorg/apache/commons/logging/Log;
      22: aload_0
      23: iconst_0
      24: putfield      #9                  // Field stopping:Z
      27: aload_1
      28: ldc           #33                 // String TcpClient is required
      30: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      33: aload_2
      34: ldc           #12                 // String ReactorNettyCodec is required
      36: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      39: aload_0
      40: aload_1
      41: putfield      #29                 // Field tcpClient:Lreactor/netty/tcp/TcpClient;
      44: aload_0
      45: aload_2
      46: putfield      #3                  // Field codec:Lorg/springframework/messaging/tcp/reactor/ReactorNettyCodec;
      49: aload_0
      50: aconst_null
      51: putfield      #16                 // Field channelGroup:Lio/netty/channel/group/ChannelGroup;
      54: aload_0
      55: aconst_null
      56: putfield      #19                 // Field loopResources:Lreactor/netty/resources/LoopResources;
      59: aload_0
      60: aconst_null
      61: putfield      #22                 // Field poolResources:Lreactor/netty/resources/ConnectionProvider;
      64: return

  public void setLogger(org.apache.commons.logging.Log);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field logger:Lorg/apache/commons/logging/Log;
       5: return

  public org.apache.commons.logging.Log getLogger();
    Code:
       0: aload_0
       1: getfield      #1                  // Field logger:Lorg/apache/commons/logging/Log;
       4: areturn

  public org.springframework.util.concurrent.ListenableFuture<java.lang.Void> connect(org.springframework.messaging.tcp.TcpConnectionHandler<P>);
    Code:
       0: aload_1
       1: ldc           #34                 // String TcpConnectionHandler is required
       3: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #9                  // Field stopping:Z
      10: ifeq          19
      13: aload_0
      14: aload_1
      15: invokespecial #35                 // Method handleShuttingDownConnectFailure:(Lorg/springframework/messaging/tcp/TcpConnectionHandler;)Lorg/springframework/util/concurrent/ListenableFuture;
      18: areturn
      19: aload_0
      20: getfield      #29                 // Field tcpClient:Lreactor/netty/tcp/TcpClient;
      23: new           #36                 // class org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient$ReactorNettyHandler
      26: dup
      27: aload_0
      28: aload_1
      29: invokespecial #37                 // Method org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient$ReactorNettyHandler."<init>":(Lorg/springframework/messaging/tcp/reactor/ReactorNettyTcpClient;Lorg/springframework/messaging/tcp/TcpConnectionHandler;)V
      32: invokevirtual #38                 // Method reactor/netty/tcp/TcpClient.handle:(Ljava/util/function/BiFunction;)Lreactor/netty/tcp/TcpClient;
      35: invokevirtual #39                 // Method reactor/netty/tcp/TcpClient.connect:()Lreactor/core/publisher/Mono;
      38: aload_1
      39: dup
      40: invokevirtual #40                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      43: pop
      44: invokedynamic #41,  0             // InvokeDynamic #2:accept:(Lorg/springframework/messaging/tcp/TcpConnectionHandler;)Ljava/util/function/Consumer;
      49: invokevirtual #42                 // Method reactor/core/publisher/Mono.doOnError:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      52: invokevirtual #43                 // Method reactor/core/publisher/Mono.then:()Lreactor/core/publisher/Mono;
      55: astore_2
      56: new           #44                 // class org/springframework/util/concurrent/MonoToListenableFutureAdapter
      59: dup
      60: aload_2
      61: invokespecial #45                 // Method org/springframework/util/concurrent/MonoToListenableFutureAdapter."<init>":(Lreactor/core/publisher/Mono;)V
      64: areturn

  public org.springframework.util.concurrent.ListenableFuture<java.lang.Void> connect(org.springframework.messaging.tcp.TcpConnectionHandler<P>, org.springframework.messaging.tcp.ReconnectStrategy);
    Code:
       0: aload_1
       1: ldc           #34                 // String TcpConnectionHandler is required
       3: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_2
       7: ldc           #46                 // String ReconnectStrategy is required
       9: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: getfield      #9                  // Field stopping:Z
      16: ifeq          25
      19: aload_0
      20: aload_1
      21: invokespecial #35                 // Method handleShuttingDownConnectFailure:(Lorg/springframework/messaging/tcp/TcpConnectionHandler;)Lorg/springframework/util/concurrent/ListenableFuture;
      24: areturn
      25: invokestatic  #47                 // Method reactor/core/publisher/MonoProcessor.create:()Lreactor/core/publisher/MonoProcessor;
      28: astore_3
      29: aload_0
      30: getfield      #29                 // Field tcpClient:Lreactor/netty/tcp/TcpClient;
      33: new           #36                 // class org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient$ReactorNettyHandler
      36: dup
      37: aload_0
      38: aload_1
      39: invokespecial #37                 // Method org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient$ReactorNettyHandler."<init>":(Lorg/springframework/messaging/tcp/reactor/ReactorNettyTcpClient;Lorg/springframework/messaging/tcp/TcpConnectionHandler;)V
      42: invokevirtual #38                 // Method reactor/netty/tcp/TcpClient.handle:(Ljava/util/function/BiFunction;)Lreactor/netty/tcp/TcpClient;
      45: invokevirtual #39                 // Method reactor/netty/tcp/TcpClient.connect:()Lreactor/core/publisher/Mono;
      48: aload_0
      49: aload_3
      50: invokespecial #48                 // Method updateConnectMono:(Lreactor/core/publisher/MonoProcessor;)Ljava/util/function/Consumer;
      53: invokevirtual #49                 // Method reactor/core/publisher/Mono.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      56: aload_0
      57: aload_3
      58: invokespecial #48                 // Method updateConnectMono:(Lreactor/core/publisher/MonoProcessor;)Ljava/util/function/Consumer;
      61: invokevirtual #42                 // Method reactor/core/publisher/Mono.doOnError:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      64: aload_1
      65: dup
      66: invokevirtual #40                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      69: pop
      70: invokedynamic #41,  0             // InvokeDynamic #2:accept:(Lorg/springframework/messaging/tcp/TcpConnectionHandler;)Ljava/util/function/Consumer;
      75: invokevirtual #42                 // Method reactor/core/publisher/Mono.doOnError:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      78: invokedynamic #50,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      83: invokevirtual #51                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      86: aload_0
      87: aload_2
      88: invokespecial #52                 // Method reconnectFunction:(Lorg/springframework/messaging/tcp/ReconnectStrategy;)Ljava/util/function/Function;
      91: invokevirtual #53                 // Method reactor/core/publisher/Mono.retryWhen:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      94: aload_0
      95: aload_2
      96: invokespecial #52                 // Method reconnectFunction:(Lorg/springframework/messaging/tcp/ReconnectStrategy;)Ljava/util/function/Function;
      99: invokevirtual #54                 // Method reactor/core/publisher/Mono.repeatWhen:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
     102: invokevirtual #55                 // Method reactor/core/publisher/Flux.subscribe:()Lreactor/core/Disposable;
     105: pop
     106: new           #44                 // class org/springframework/util/concurrent/MonoToListenableFutureAdapter
     109: dup
     110: aload_3
     111: invokespecial #45                 // Method org/springframework/util/concurrent/MonoToListenableFutureAdapter."<init>":(Lreactor/core/publisher/Mono;)V
     114: areturn

  private org.springframework.util.concurrent.ListenableFuture<java.lang.Void> handleShuttingDownConnectFailure(org.springframework.messaging.tcp.TcpConnectionHandler<P>);
    Code:
       0: new           #56                 // class java/lang/IllegalStateException
       3: dup
       4: ldc           #57                 // String Shutting down.
       6: invokespecial #58                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: astore_2
      10: aload_1
      11: aload_2
      12: invokeinterface #59,  2           // InterfaceMethod org/springframework/messaging/tcp/TcpConnectionHandler.afterConnectFailure:(Ljava/lang/Throwable;)V
      17: new           #44                 // class org/springframework/util/concurrent/MonoToListenableFutureAdapter
      20: dup
      21: aload_2
      22: invokestatic  #60                 // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      25: invokespecial #45                 // Method org/springframework/util/concurrent/MonoToListenableFutureAdapter."<init>":(Lreactor/core/publisher/Mono;)V
      28: areturn

  private <T> java.util.function.Consumer<T> updateConnectMono(reactor.core.publisher.MonoProcessor<java.lang.Void>);
    Code:
       0: aload_1
       1: invokedynamic #61,  0             // InvokeDynamic #4:accept:(Lreactor/core/publisher/MonoProcessor;)Ljava/util/function/Consumer;
       6: areturn

  private <T> java.util.function.Function<reactor.core.publisher.Flux<T>, org.reactivestreams.Publisher<?>> reconnectFunction(org.springframework.messaging.tcp.ReconnectStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #62,  0             // InvokeDynamic #5:apply:(Lorg/springframework/messaging/tcp/reactor/ReactorNettyTcpClient;Lorg/springframework/messaging/tcp/ReconnectStrategy;)Ljava/util/function/Function;
       7: areturn

  public org.springframework.util.concurrent.ListenableFuture<java.lang.Void> shutdown();
    Code:
       0: aload_0
       1: getfield      #9                  // Field stopping:Z
       4: ifeq          23
       7: new           #63                 // class org/springframework/util/concurrent/SettableListenableFuture
      10: dup
      11: invokespecial #64                 // Method org/springframework/util/concurrent/SettableListenableFuture."<init>":()V
      14: astore_1
      15: aload_1
      16: aconst_null
      17: invokevirtual #65                 // Method org/springframework/util/concurrent/SettableListenableFuture.set:(Ljava/lang/Object;)Z
      20: pop
      21: aload_1
      22: areturn
      23: aload_0
      24: iconst_1
      25: putfield      #9                  // Field stopping:Z
      28: aload_0
      29: getfield      #16                 // Field channelGroup:Lio/netty/channel/group/ChannelGroup;
      32: ifnull        126
      35: aload_0
      36: getfield      #16                 // Field channelGroup:Lio/netty/channel/group/ChannelGroup;
      39: invokeinterface #66,  1           // InterfaceMethod io/netty/channel/group/ChannelGroup.close:()Lio/netty/channel/group/ChannelGroupFuture;
      44: invokestatic  #67                 // Method reactor/netty/FutureMono.from:(Lio/netty/util/concurrent/Future;)Lreactor/core/publisher/Mono;
      47: astore_1
      48: aload_0
      49: getfield      #19                 // Field loopResources:Lreactor/netty/resources/LoopResources;
      52: ifnull        77
      55: aload_1
      56: invokedynamic #68,  0             // InvokeDynamic #6:apply:()Ljava/util/function/Function;
      61: invokevirtual #69                 // Method reactor/core/publisher/Mono.onErrorResume:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      64: aload_0
      65: getfield      #19                 // Field loopResources:Lreactor/netty/resources/LoopResources;
      68: invokeinterface #70,  1           // InterfaceMethod reactor/netty/resources/LoopResources.disposeLater:()Lreactor/core/publisher/Mono;
      73: invokevirtual #71                 // Method reactor/core/publisher/Mono.then:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      76: astore_1
      77: aload_0
      78: getfield      #22                 // Field poolResources:Lreactor/netty/resources/ConnectionProvider;
      81: ifnull        106
      84: aload_1
      85: invokedynamic #72,  0             // InvokeDynamic #7:apply:()Ljava/util/function/Function;
      90: invokevirtual #69                 // Method reactor/core/publisher/Mono.onErrorResume:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      93: aload_0
      94: getfield      #22                 // Field poolResources:Lreactor/netty/resources/ConnectionProvider;
      97: invokeinterface #73,  1           // InterfaceMethod reactor/netty/resources/ConnectionProvider.disposeLater:()Lreactor/core/publisher/Mono;
     102: invokevirtual #71                 // Method reactor/core/publisher/Mono.then:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
     105: astore_1
     106: aload_1
     107: invokedynamic #74,  0             // InvokeDynamic #8:apply:()Ljava/util/function/Function;
     112: invokevirtual #69                 // Method reactor/core/publisher/Mono.onErrorResume:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
     115: aload_0
     116: invokespecial #75                 // Method stopScheduler:()Lreactor/core/publisher/Mono;
     119: invokevirtual #71                 // Method reactor/core/publisher/Mono.then:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
     122: astore_1
     123: goto          131
     126: aload_0
     127: invokespecial #75                 // Method stopScheduler:()Lreactor/core/publisher/Mono;
     130: astore_1
     131: new           #44                 // class org/springframework/util/concurrent/MonoToListenableFutureAdapter
     134: dup
     135: aload_1
     136: invokespecial #45                 // Method org/springframework/util/concurrent/MonoToListenableFutureAdapter."<init>":(Lreactor/core/publisher/Mono;)V
     139: areturn

  private reactor.core.publisher.Mono<java.lang.Void> stopScheduler();
    Code:
       0: aload_0
       1: invokedynamic #76,  0             // InvokeDynamic #9:run:(Lorg/springframework/messaging/tcp/reactor/ReactorNettyTcpClient;)Ljava/lang/Runnable;
       6: invokestatic  #77                 // Method reactor/core/publisher/Mono.fromRunnable:(Ljava/lang/Runnable;)Lreactor/core/publisher/Mono;
       9: areturn

  public java.lang.String toString();
    Code:
       0: new           #78                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #79                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #80                 // String ReactorNettyTcpClient[
       9: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #29                 // Field tcpClient:Lreactor/netty/tcp/TcpClient;
      16: invokevirtual #82                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #83                 // String ]
      21: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #84                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn

  private void lambda$stopScheduler$10();
    Code:
       0: aload_0
       1: getfield      #2                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
       4: invokeinterface #85,  1           // InterfaceMethod reactor/core/scheduler/Scheduler.dispose:()V
       9: iconst_0
      10: istore_1
      11: iload_1
      12: bipush        20
      14: if_icmpge     51
      17: aload_0
      18: getfield      #2                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      21: invokeinterface #86,  1           // InterfaceMethod reactor/core/scheduler/Scheduler.isDisposed:()Z
      26: ifeq          32
      29: goto          51
      32: ldc2_w        #87                 // long 100l
      35: invokestatic  #89                 // Method java/lang/Thread.sleep:(J)V
      38: goto          45
      41: astore_2
      42: goto          51
      45: iinc          1, 1
      48: goto          11
      51: return
    Exception table:
       from    to  target type
          32    38    41   Class java/lang/Throwable

  private static reactor.core.publisher.Mono lambda$shutdown$9(java.lang.Throwable);
    Code:
       0: invokestatic  #91                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
       3: areturn

  private static reactor.core.publisher.Mono lambda$shutdown$8(java.lang.Throwable);
    Code:
       0: invokestatic  #91                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
       3: areturn

  private static reactor.core.publisher.Mono lambda$shutdown$7(java.lang.Throwable);
    Code:
       0: invokestatic  #91                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
       3: areturn

  private org.reactivestreams.Publisher lambda$reconnectFunction$6(org.springframework.messaging.tcp.ReconnectStrategy, reactor.core.publisher.Flux);
    Code:
       0: aload_2
       1: iconst_1
       2: invokestatic  #92                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       5: invokedynamic #93,  0             // InvokeDynamic #10:apply:()Ljava/util/function/BiFunction;
      10: invokevirtual #94                 // Method reactor/core/publisher/Flux.scan:(Ljava/lang/Object;Ljava/util/function/BiFunction;)Lreactor/core/publisher/Flux;
      13: aload_0
      14: aload_1
      15: invokedynamic #95,  0             // InvokeDynamic #11:apply:(Lorg/springframework/messaging/tcp/reactor/ReactorNettyTcpClient;Lorg/springframework/messaging/tcp/ReconnectStrategy;)Ljava/util/function/Function;
      20: invokevirtual #96                 // Method reactor/core/publisher/Flux.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      23: areturn

  private org.reactivestreams.Publisher lambda$null$5(org.springframework.messaging.tcp.ReconnectStrategy, java.lang.Integer);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #97                 // Method java/lang/Integer.intValue:()I
       5: invokeinterface #98,  2           // InterfaceMethod org/springframework/messaging/tcp/ReconnectStrategy.getTimeToNextAttempt:(I)Ljava/lang/Long;
      10: invokestatic  #99                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      13: aload_0
      14: invokedynamic #100,  0            // InvokeDynamic #12:apply:(Lorg/springframework/messaging/tcp/reactor/ReactorNettyTcpClient;)Ljava/util/function/Function;
      19: invokevirtual #101                // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      22: invokestatic  #91                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      25: invokevirtual #102                // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      28: checkcast     #103                // class reactor/core/publisher/Mono
      31: areturn

  private reactor.core.publisher.Mono lambda$null$4(java.lang.Long);
    Code:
       0: aload_1
       1: invokevirtual #104                // Method java/lang/Long.longValue:()J
       4: invokestatic  #105                // Method java/time/Duration.ofMillis:(J)Ljava/time/Duration;
       7: aload_0
       8: getfield      #2                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      11: invokestatic  #106                // Method reactor/core/publisher/Mono.delay:(Ljava/time/Duration;Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
      14: areturn

  private static java.lang.Integer lambda$null$3(java.lang.Integer, java.lang.Object);
    Code:
       0: aload_0
       1: astore_2
       2: aload_0
       3: invokevirtual #97                 // Method java/lang/Integer.intValue:()I
       6: iconst_1
       7: iadd
       8: invokestatic  #92                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      11: dup
      12: astore_0
      13: astore_3
      14: aload_2
      15: areturn

  private static void lambda$updateConnectMono$2(reactor.core.publisher.MonoProcessor, java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #107                // Method reactor/core/publisher/MonoProcessor.isTerminated:()Z
       4: ifne          29
       7: aload_1
       8: instanceof    #90                 // class java/lang/Throwable
      11: ifeq          25
      14: aload_0
      15: aload_1
      16: checkcast     #90                 // class java/lang/Throwable
      19: invokevirtual #108                // Method reactor/core/publisher/MonoProcessor.onError:(Ljava/lang/Throwable;)V
      22: goto          29
      25: aload_0
      26: invokevirtual #109                // Method reactor/core/publisher/MonoProcessor.onComplete:()V
      29: return

  private void lambda$new$1(reactor.netty.Connection);
    Code:
       0: aload_0
       1: getfield      #16                 // Field channelGroup:Lio/netty/channel/group/ChannelGroup;
       4: aload_1
       5: invokeinterface #110,  1          // InterfaceMethod reactor/netty/Connection.channel:()Lio/netty/channel/Channel;
      10: invokeinterface #111,  2          // InterfaceMethod io/netty/channel/group/ChannelGroup.add:(Ljava/lang/Object;)Z
      15: pop
      16: return

  private void lambda$new$0(reactor.netty.Connection);
    Code:
       0: aload_0
       1: getfield      #16                 // Field channelGroup:Lio/netty/channel/group/ChannelGroup;
       4: aload_1
       5: invokeinterface #110,  1          // InterfaceMethod reactor/netty/Connection.channel:()Lio/netty/channel/Channel;
      10: invokeinterface #111,  2          // InterfaceMethod io/netty/channel/group/ChannelGroup.add:(Ljava/lang/Object;)Z
      15: pop
      16: return

  static org.springframework.messaging.tcp.reactor.ReactorNettyCodec access$000(org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient);
    Code:
       0: aload_0
       1: getfield      #3                  // Field codec:Lorg/springframework/messaging/tcp/reactor/ReactorNettyCodec;
       4: areturn

  static reactor.core.scheduler.Scheduler access$100(org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient);
    Code:
       0: aload_0
       1: getfield      #2                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
       4: areturn

  static org.apache.commons.logging.Log access$200(org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient);
    Code:
       0: aload_0
       1: getfield      #1                  // Field logger:Lorg/apache/commons/logging/Log;
       4: areturn
}
