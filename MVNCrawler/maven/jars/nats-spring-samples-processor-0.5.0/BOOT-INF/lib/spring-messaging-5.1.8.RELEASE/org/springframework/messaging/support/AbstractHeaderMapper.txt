Compiled from "AbstractHeaderMapper.java"
public abstract class org.springframework.messaging.support.AbstractHeaderMapper<T> implements org.springframework.messaging.support.HeaderMapper<T> {
  protected final org.apache.commons.logging.Log logger;

  private java.lang.String inboundPrefix;

  private java.lang.String outboundPrefix;

  public org.springframework.messaging.support.AbstractHeaderMapper();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: ldc           #5                  // String
      18: putfield      #6                  // Field inboundPrefix:Ljava/lang/String;
      21: aload_0
      22: ldc           #5                  // String
      24: putfield      #7                  // Field outboundPrefix:Ljava/lang/String;
      27: return

  public void setInboundPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: ifnull        9
       5: aload_1
       6: goto          11
       9: ldc           #5                  // String
      11: putfield      #6                  // Field inboundPrefix:Ljava/lang/String;
      14: return

  public void setOutboundPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: ifnull        9
       5: aload_1
       6: goto          11
       9: ldc           #5                  // String
      11: putfield      #7                  // Field outboundPrefix:Ljava/lang/String;
      14: return

  protected java.lang.String fromHeaderName(java.lang.String);
    Code:
       0: aload_1
       1: astore_2
       2: aload_0
       3: getfield      #7                  // Field outboundPrefix:Ljava/lang/String;
       6: invokestatic  #8                  // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
       9: ifeq          45
      12: aload_2
      13: aload_0
      14: getfield      #7                  // Field outboundPrefix:Ljava/lang/String;
      17: invokevirtual #9                  // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      20: ifne          45
      23: new           #10                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      30: aload_0
      31: getfield      #7                  // Field outboundPrefix:Ljava/lang/String;
      34: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: aload_1
      38: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      44: astore_2
      45: aload_2
      46: areturn

  protected java.lang.String toHeaderName(java.lang.String);
    Code:
       0: aload_1
       1: astore_2
       2: aload_0
       3: getfield      #6                  // Field inboundPrefix:Ljava/lang/String;
       6: invokestatic  #8                  // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
       9: ifeq          45
      12: aload_2
      13: aload_0
      14: getfield      #6                  // Field inboundPrefix:Ljava/lang/String;
      17: invokevirtual #9                  // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      20: ifne          45
      23: new           #10                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      30: aload_0
      31: getfield      #6                  // Field inboundPrefix:Ljava/lang/String;
      34: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: aload_1
      38: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      44: astore_2
      45: aload_2
      46: areturn

  protected <V> V getHeaderIfAvailable(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, java.lang.Class<V>);
    Code:
       0: aload_1
       1: aload_2
       2: invokeinterface #14,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       7: astore        4
       9: aload         4
      11: ifnonnull     16
      14: aconst_null
      15: areturn
      16: aload_3
      17: aload         4
      19: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      22: invokevirtual #15                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      25: ifne          97
      28: aload_0
      29: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      32: invokeinterface #16,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      37: ifeq          95
      40: aload_0
      41: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      44: new           #10                 // class java/lang/StringBuilder
      47: dup
      48: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      51: ldc           #17                 // String Skipping header \'
      53: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: aload_2
      57: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: ldc           #18                 // String \': expected type [
      62: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      65: aload_3
      66: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      69: ldc           #20                 // String ], but got [
      71: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: aload         4
      76: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      79: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      82: ldc           #21                 // String ]
      84: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      90: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      95: aconst_null
      96: areturn
      97: aload_3
      98: aload         4
     100: invokevirtual #23                 // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
     103: areturn
}
