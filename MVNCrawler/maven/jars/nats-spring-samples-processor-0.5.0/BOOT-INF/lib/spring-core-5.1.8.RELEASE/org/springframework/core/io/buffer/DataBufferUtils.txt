Compiled from "DataBufferUtils.java"
public abstract class org.springframework.core.io.buffer.DataBufferUtils {
  private static final java.util.function.Consumer<org.springframework.core.io.buffer.DataBuffer> RELEASE_CONSUMER;

  public org.springframework.core.io.buffer.DataBufferUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readInputStream(java.util.concurrent.Callable<java.io.InputStream>, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: ldc           #2                  // String \'inputStreamSupplier\' must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokedynamic #4,  0              // InvokeDynamic #0:call:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;
      12: aload_1
      13: iload_2
      14: invokestatic  #5                  // Method readByteChannel:(Ljava/util/concurrent/Callable;Lorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
      17: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readByteChannel(java.util.concurrent.Callable<java.nio.channels.ReadableByteChannel>, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: ldc           #6                  // String \'channelSupplier\' must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #7                  // String \'dataBufferFactory\' must not be null
       9: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: iload_2
      13: ifle          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ldc           #8                  // String \'bufferSize\' must be > 0
      23: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      26: aload_0
      27: aload_1
      28: iload_2
      29: invokedynamic #10,  0             // InvokeDynamic #1:apply:(Lorg/springframework/core/io/buffer/DataBufferFactory;I)Ljava/util/function/Function;
      34: invokedynamic #11,  0             // InvokeDynamic #2:accept:()Ljava/util/function/Consumer;
      39: invokestatic  #12                 // Method reactor/core/publisher/Flux.using:(Ljava/util/concurrent/Callable;Ljava/util/function/Function;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      42: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readAsynchronousFileChannel(java.util.concurrent.Callable<java.nio.channels.AsynchronousFileChannel>, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: lconst_0
       2: aload_1
       3: iload_2
       4: invokestatic  #13                 // Method readAsynchronousFileChannel:(Ljava/util/concurrent/Callable;JLorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
       7: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readAsynchronousFileChannel(java.util.concurrent.Callable<java.nio.channels.AsynchronousFileChannel>, long, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: ldc           #6                  // String \'channelSupplier\' must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_3
       7: ldc           #7                  // String \'dataBufferFactory\' must not be null
       9: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: lload_1
      13: lconst_0
      14: lcmp
      15: iflt          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ldc           #14                 // String \'position\' must be >= 0
      25: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      28: iload         4
      30: ifle          37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: ldc           #8                  // String \'bufferSize\' must be > 0
      40: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      43: aload_0
      44: lload_1
      45: aload_3
      46: iload         4
      48: invokedynamic #15,  0             // InvokeDynamic #3:apply:(JLorg/springframework/core/io/buffer/DataBufferFactory;I)Ljava/util/function/Function;
      53: invokedynamic #16,  0             // InvokeDynamic #4:accept:()Ljava/util/function/Consumer;
      58: invokestatic  #12                 // Method reactor/core/publisher/Flux.using:(Ljava/util/concurrent/Callable;Ljava/util/function/Function;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      61: astore        5
      63: aload         5
      65: ldc           #17                 // class org/springframework/core/io/buffer/PooledDataBuffer
      67: invokedynamic #18,  0             // InvokeDynamic #5:accept:()Ljava/util/function/Consumer;
      72: invokevirtual #19                 // Method reactor/core/publisher/Flux.doOnDiscard:(Ljava/lang/Class;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      75: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> read(org.springframework.core.io.Resource, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: lconst_0
       2: aload_1
       3: iload_2
       4: invokestatic  #20                 // Method read:(Lorg/springframework/core/io/Resource;JLorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
       7: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> read(org.springframework.core.io.Resource, long, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: invokeinterface #21,  1           // InterfaceMethod org/springframework/core/io/Resource.isFile:()Z
       6: ifeq          32
       9: aload_0
      10: invokeinterface #22,  1           // InterfaceMethod org/springframework/core/io/Resource.getFile:()Ljava/io/File;
      15: astore        5
      17: aload         5
      19: invokedynamic #23,  0             // InvokeDynamic #6:call:(Ljava/io/File;)Ljava/util/concurrent/Callable;
      24: lload_1
      25: aload_3
      26: iload         4
      28: invokestatic  #13                 // Method readAsynchronousFileChannel:(Ljava/util/concurrent/Callable;JLorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
      31: areturn
      32: goto          37
      35: astore        5
      37: aload_0
      38: dup
      39: invokevirtual #25                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      42: pop
      43: invokedynamic #26,  0             // InvokeDynamic #7:call:(Lorg/springframework/core/io/Resource;)Ljava/util/concurrent/Callable;
      48: aload_3
      49: iload         4
      51: invokestatic  #5                  // Method readByteChannel:(Ljava/util/concurrent/Callable;Lorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
      54: astore        5
      56: lload_1
      57: lconst_0
      58: lcmp
      59: ifne          67
      62: aload         5
      64: goto          73
      67: aload         5
      69: lload_1
      70: invokestatic  #27                 // Method skipUntilByteCount:(Lorg/reactivestreams/Publisher;J)Lreactor/core/publisher/Flux;
      73: areturn
    Exception table:
       from    to  target type
           0    31    35   Class java/io/IOException

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.io.OutputStream);
    Code:
       0: aload_0
       1: ldc           #28                 // String \'source\' must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #29                 // String \'outputStream\' must not be null
       9: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_1
      13: invokestatic  #30                 // Method java/nio/channels/Channels.newChannel:(Ljava/io/OutputStream;)Ljava/nio/channels/WritableByteChannel;
      16: astore_2
      17: aload_0
      18: aload_2
      19: invokestatic  #31                 // Method write:(Lorg/reactivestreams/Publisher;Ljava/nio/channels/WritableByteChannel;)Lreactor/core/publisher/Flux;
      22: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.WritableByteChannel);
    Code:
       0: aload_0
       1: ldc           #28                 // String \'source\' must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #32                 // String \'channel\' must not be null
       9: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: invokestatic  #33                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      16: astore_2
      17: aload_1
      18: aload_2
      19: invokedynamic #34,  0             // InvokeDynamic #8:accept:(Ljava/nio/channels/WritableByteChannel;Lreactor/core/publisher/Flux;)Ljava/util/function/Consumer;
      24: invokestatic  #35                 // Method reactor/core/publisher/Flux.create:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      27: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.AsynchronousFileChannel);
    Code:
       0: aload_0
       1: aload_1
       2: lconst_0
       3: invokestatic  #36                 // Method write:(Lorg/reactivestreams/Publisher;Ljava/nio/channels/AsynchronousFileChannel;J)Lreactor/core/publisher/Flux;
       6: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.AsynchronousFileChannel, long);
    Code:
       0: aload_0
       1: ldc           #28                 // String \'source\' must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #32                 // String \'channel\' must not be null
       9: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: lload_2
      13: lconst_0
      14: lcmp
      15: iflt          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ldc           #14                 // String \'position\' must be >= 0
      25: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      28: aload_0
      29: invokestatic  #33                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      32: astore        4
      34: aload_1
      35: lload_2
      36: aload         4
      38: invokedynamic #37,  0             // InvokeDynamic #9:accept:(Ljava/nio/channels/AsynchronousFileChannel;JLreactor/core/publisher/Flux;)Ljava/util/function/Consumer;
      43: invokestatic  #35                 // Method reactor/core/publisher/Flux.create:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      46: areturn

  static void closeChannel(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: ifnull        23
       4: aload_0
       5: invokeinterface #38,  1           // InterfaceMethod java/nio/channels/Channel.isOpen:()Z
      10: ifeq          23
      13: aload_0
      14: invokeinterface #39,  1           // InterfaceMethod java/nio/channels/Channel.close:()V
      19: goto          23
      22: astore_1
      23: return
    Exception table:
       from    to  target type
          13    19    22   Class java/io/IOException

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> takeUntilByteCount(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, long);
    Code:
       0: aload_0
       1: ldc           #40                 // String Publisher must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: lload_1
       7: lconst_0
       8: lcmp
       9: iflt          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ldc           #41                 // String \'maxByteCount\' must be a positive number
      19: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      22: new           #42                 // class java/util/concurrent/atomic/AtomicLong
      25: dup
      26: lload_1
      27: invokespecial #43                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      30: astore_3
      31: aload_0
      32: invokestatic  #33                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      35: aload_3
      36: invokedynamic #44,  0             // InvokeDynamic #10:apply:(Ljava/util/concurrent/atomic/AtomicLong;)Ljava/util/function/Function;
      41: invokevirtual #45                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      44: aload_3
      45: invokedynamic #46,  0             // InvokeDynamic #11:test:(Ljava/util/concurrent/atomic/AtomicLong;)Ljava/util/function/Predicate;
      50: invokevirtual #47                 // Method reactor/core/publisher/Flux.takeUntil:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Flux;
      53: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> skipUntilByteCount(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, long);
    Code:
       0: aload_0
       1: ldc           #40                 // String Publisher must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: lload_1
       7: lconst_0
       8: lcmp
       9: iflt          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ldc           #41                 // String \'maxByteCount\' must be a positive number
      19: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      22: lload_1
      23: aload_0
      24: invokedynamic #48,  0             // InvokeDynamic #12:get:(JLorg/reactivestreams/Publisher;)Ljava/util/function/Supplier;
      29: invokestatic  #49                 // Method reactor/core/publisher/Flux.defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
      32: ldc           #17                 // class org/springframework/core/io/buffer/PooledDataBuffer
      34: invokedynamic #18,  0             // InvokeDynamic #5:accept:()Ljava/util/function/Consumer;
      39: invokevirtual #19                 // Method reactor/core/publisher/Flux.doOnDiscard:(Ljava/lang/Class;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      42: areturn

  public static <T extends org.springframework.core.io.buffer.DataBuffer> T retain(T);
    Code:
       0: aload_0
       1: instanceof    #17                 // class org/springframework/core/io/buffer/PooledDataBuffer
       4: ifeq          17
       7: aload_0
       8: checkcast     #17                 // class org/springframework/core/io/buffer/PooledDataBuffer
      11: invokeinterface #50,  1           // InterfaceMethod org/springframework/core/io/buffer/PooledDataBuffer.retain:()Lorg/springframework/core/io/buffer/PooledDataBuffer;
      16: areturn
      17: aload_0
      18: areturn

  public static boolean release(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: instanceof    #17                 // class org/springframework/core/io/buffer/PooledDataBuffer
       4: ifeq          28
       7: aload_0
       8: checkcast     #17                 // class org/springframework/core/io/buffer/PooledDataBuffer
      11: astore_1
      12: aload_1
      13: invokeinterface #51,  1           // InterfaceMethod org/springframework/core/io/buffer/PooledDataBuffer.isAllocated:()Z
      18: ifeq          28
      21: aload_1
      22: invokeinterface #52,  1           // InterfaceMethod org/springframework/core/io/buffer/PooledDataBuffer.release:()Z
      27: ireturn
      28: iconst_0
      29: ireturn

  public static java.util.function.Consumer<org.springframework.core.io.buffer.DataBuffer> releaseConsumer();
    Code:
       0: getstatic     #53                 // Field RELEASE_CONSUMER:Ljava/util/function/Consumer;
       3: areturn

  public static reactor.core.publisher.Mono<org.springframework.core.io.buffer.DataBuffer> join(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_0
       1: ldc           #54                 // String \'dataBuffers\' must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokestatic  #33                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      10: invokevirtual #55                 // Method reactor/core/publisher/Flux.collectList:()Lreactor/core/publisher/Mono;
      13: invokedynamic #56,  0             // InvokeDynamic #13:test:()Ljava/util/function/Predicate;
      18: invokevirtual #57                 // Method reactor/core/publisher/Mono.filter:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Mono;
      21: invokedynamic #58,  0             // InvokeDynamic #14:apply:()Ljava/util/function/Function;
      26: invokevirtual #59                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      29: ldc           #17                 // class org/springframework/core/io/buffer/PooledDataBuffer
      31: invokedynamic #18,  0             // InvokeDynamic #5:accept:()Ljava/util/function/Consumer;
      36: invokevirtual #60                 // Method reactor/core/publisher/Mono.doOnDiscard:(Ljava/lang/Class;Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      39: areturn

  private static org.springframework.core.io.buffer.DataBuffer lambda$join$14(java.util.List);
    Code:
       0: aload_0
       1: iconst_0
       2: invokeinterface #61,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
       7: checkcast     #62                 // class org/springframework/core/io/buffer/DataBuffer
      10: invokeinterface #63,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.factory:()Lorg/springframework/core/io/buffer/DataBufferFactory;
      15: aload_0
      16: invokeinterface #64,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.join:(Ljava/util/List;)Lorg/springframework/core/io/buffer/DataBuffer;
      21: areturn

  private static boolean lambda$join$13(java.util.List);
    Code:
       0: aload_0
       1: invokeinterface #65,  1           // InterfaceMethod java/util/List.isEmpty:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private static org.reactivestreams.Publisher lambda$skipUntilByteCount$12(long, org.reactivestreams.Publisher);
    Code:
       0: new           #42                 // class java/util/concurrent/atomic/AtomicLong
       3: dup
       4: lload_0
       5: invokespecial #43                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
       8: astore_3
       9: aload_2
      10: invokestatic  #33                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      13: aload_3
      14: invokedynamic #66,  0             // InvokeDynamic #15:test:(Ljava/util/concurrent/atomic/AtomicLong;)Ljava/util/function/Predicate;
      19: invokevirtual #67                 // Method reactor/core/publisher/Flux.skipUntil:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Flux;
      22: aload_3
      23: invokedynamic #68,  0             // InvokeDynamic #16:apply:(Ljava/util/concurrent/atomic/AtomicLong;)Ljava/util/function/Function;
      28: invokevirtual #45                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      31: areturn

  private static org.springframework.core.io.buffer.DataBuffer lambda$null$11(java.util.concurrent.atomic.AtomicLong, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       4: lstore_2
       5: lload_2
       6: lconst_0
       7: lcmp
       8: ifge          43
      11: aload_0
      12: lconst_0
      13: invokevirtual #70                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      16: aload_1
      17: invokeinterface #71,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
      22: lload_2
      23: l2i
      24: iadd
      25: istore        4
      27: lload_2
      28: lneg
      29: l2i
      30: istore        5
      32: aload_1
      33: iload         4
      35: iload         5
      37: invokeinterface #72,  3           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.slice:(II)Lorg/springframework/core/io/buffer/DataBuffer;
      42: areturn
      43: aload_1
      44: areturn

  private static boolean lambda$null$10(java.util.concurrent.atomic.AtomicLong, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #71,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
       7: ineg
       8: i2l
       9: invokevirtual #73                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      12: lstore_2
      13: lload_2
      14: lconst_0
      15: lcmp
      16: ifge          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  private static boolean lambda$takeUntilByteCount$9(java.util.concurrent.atomic.AtomicLong, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       4: lconst_0
       5: lcmp
       6: ifgt          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private static org.springframework.core.io.buffer.DataBuffer lambda$takeUntilByteCount$8(java.util.concurrent.atomic.AtomicLong, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #71,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
       7: ineg
       8: i2l
       9: invokevirtual #73                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      12: lstore_2
      13: lload_2
      14: lconst_0
      15: lcmp
      16: ifge          40
      19: aload_1
      20: invokeinterface #71,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
      25: lload_2
      26: l2i
      27: iadd
      28: istore        4
      30: aload_1
      31: iconst_0
      32: iload         4
      34: invokeinterface #72,  3           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.slice:(II)Lorg/springframework/core/io/buffer/DataBuffer;
      39: areturn
      40: aload_1
      41: areturn

  private static void lambda$write$7(java.nio.channels.AsynchronousFileChannel, long, reactor.core.publisher.Flux, reactor.core.publisher.FluxSink);
    Code:
       0: new           #74                 // class org/springframework/core/io/buffer/DataBufferUtils$WriteCompletionHandler
       3: dup
       4: aload         4
       6: aload_0
       7: lload_1
       8: invokespecial #75                 // Method org/springframework/core/io/buffer/DataBufferUtils$WriteCompletionHandler."<init>":(Lreactor/core/publisher/FluxSink;Ljava/nio/channels/AsynchronousFileChannel;J)V
      11: astore        5
      13: aload         4
      15: aload         5
      17: invokeinterface #76,  2           // InterfaceMethod reactor/core/publisher/FluxSink.onDispose:(Lreactor/core/Disposable;)Lreactor/core/publisher/FluxSink;
      22: pop
      23: aload_3
      24: aload         5
      26: invokevirtual #77                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      29: return

  private static void lambda$write$6(java.nio.channels.WritableByteChannel, reactor.core.publisher.Flux, reactor.core.publisher.FluxSink);
    Code:
       0: new           #78                 // class org/springframework/core/io/buffer/DataBufferUtils$WritableByteChannelSubscriber
       3: dup
       4: aload_2
       5: aload_0
       6: invokespecial #79                 // Method org/springframework/core/io/buffer/DataBufferUtils$WritableByteChannelSubscriber."<init>":(Lreactor/core/publisher/FluxSink;Ljava/nio/channels/WritableByteChannel;)V
       9: astore_3
      10: aload_2
      11: aload_3
      12: invokeinterface #76,  2           // InterfaceMethod reactor/core/publisher/FluxSink.onDispose:(Lreactor/core/Disposable;)Lreactor/core/publisher/FluxSink;
      17: pop
      18: aload_1
      19: aload_3
      20: invokevirtual #77                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      23: return

  private static java.nio.channels.AsynchronousFileChannel lambda$read$5(java.io.File) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #80                 // Method java/io/File.toPath:()Ljava/nio/file/Path;
       4: iconst_1
       5: anewarray     #81                 // class java/nio/file/OpenOption
       8: dup
       9: iconst_0
      10: getstatic     #82                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;
      13: aastore
      14: invokestatic  #83                 // Method java/nio/channels/AsynchronousFileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/AsynchronousFileChannel;
      17: areturn

  private static void lambda$readAsynchronousFileChannel$4(java.nio.channels.AsynchronousFileChannel);
    Code:
       0: return

  private static org.reactivestreams.Publisher lambda$readAsynchronousFileChannel$3(long, org.springframework.core.io.buffer.DataBufferFactory, int, java.nio.channels.AsynchronousFileChannel);
    Code:
       0: aload         4
       2: lload_0
       3: aload_2
       4: iload_3
       5: invokedynamic #84,  0             // InvokeDynamic #17:accept:(Ljava/nio/channels/AsynchronousFileChannel;JLorg/springframework/core/io/buffer/DataBufferFactory;I)Ljava/util/function/Consumer;
      10: invokestatic  #35                 // Method reactor/core/publisher/Flux.create:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      13: areturn

  private static void lambda$null$2(java.nio.channels.AsynchronousFileChannel, long, org.springframework.core.io.buffer.DataBufferFactory, int, reactor.core.publisher.FluxSink);
    Code:
       0: new           #85                 // class org/springframework/core/io/buffer/DataBufferUtils$ReadCompletionHandler
       3: dup
       4: aload_0
       5: aload         5
       7: lload_1
       8: aload_3
       9: iload         4
      11: invokespecial #86                 // Method org/springframework/core/io/buffer/DataBufferUtils$ReadCompletionHandler."<init>":(Ljava/nio/channels/AsynchronousFileChannel;Lreactor/core/publisher/FluxSink;JLorg/springframework/core/io/buffer/DataBufferFactory;I)V
      14: astore        6
      16: aload         5
      18: aload         6
      20: dup
      21: invokevirtual #25                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      24: pop
      25: invokedynamic #87,  0             // InvokeDynamic #18:dispose:(Lorg/springframework/core/io/buffer/DataBufferUtils$ReadCompletionHandler;)Lreactor/core/Disposable;
      30: invokeinterface #76,  2           // InterfaceMethod reactor/core/publisher/FluxSink.onDispose:(Lreactor/core/Disposable;)Lreactor/core/publisher/FluxSink;
      35: pop
      36: aload_3
      37: iload         4
      39: invokeinterface #88,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.allocateBuffer:(I)Lorg/springframework/core/io/buffer/DataBuffer;
      44: astore        7
      46: aload         7
      48: iconst_0
      49: iload         4
      51: invokeinterface #89,  3           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asByteBuffer:(II)Ljava/nio/ByteBuffer;
      56: astore        8
      58: aload_0
      59: aload         8
      61: lload_1
      62: aload         7
      64: aload         6
      66: invokevirtual #90                 // Method java/nio/channels/AsynchronousFileChannel.read:(Ljava/nio/ByteBuffer;JLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V
      69: return

  private static org.reactivestreams.Publisher lambda$readByteChannel$1(org.springframework.core.io.buffer.DataBufferFactory, int, java.nio.channels.ReadableByteChannel);
    Code:
       0: new           #91                 // class org/springframework/core/io/buffer/DataBufferUtils$ReadableByteChannelGenerator
       3: dup
       4: aload_2
       5: aload_0
       6: iload_1
       7: invokespecial #92                 // Method org/springframework/core/io/buffer/DataBufferUtils$ReadableByteChannelGenerator."<init>":(Ljava/nio/channels/ReadableByteChannel;Lorg/springframework/core/io/buffer/DataBufferFactory;I)V
      10: invokestatic  #93                 // Method reactor/core/publisher/Flux.generate:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      13: areturn

  private static java.nio.channels.ReadableByteChannel lambda$readInputStream$0(java.util.concurrent.Callable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokeinterface #94,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
       6: checkcast     #95                 // class java/io/InputStream
       9: invokestatic  #96                 // Method java/nio/channels/Channels.newChannel:(Ljava/io/InputStream;)Ljava/nio/channels/ReadableByteChannel;
      12: areturn

  static {};
    Code:
       0: invokedynamic #97,  0             // InvokeDynamic #19:accept:()Ljava/util/function/Consumer;
       5: putstatic     #53                 // Field RELEASE_CONSUMER:Ljava/util/function/Consumer;
       8: return
}
