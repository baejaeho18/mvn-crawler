Compiled from "AbstractMessageSplitter.java"
public abstract class org.springframework.integration.splitter.AbstractMessageSplitter extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler {
  private boolean applySequence;

  public org.springframework.integration.splitter.AbstractMessageSplitter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/integration/handler/AbstractReplyProducingMessageHandler."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field applySequence:Z
       9: return

  public void setApplySequence(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field applySequence:Z
       5: return

  protected final java.lang.Object handleRequestMessage(org.springframework.messaging.Message<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method splitMessage:(Lorg/springframework/messaging/Message;)Ljava/lang/Object;
       5: astore_2
       6: aload_2
       7: ifnonnull     12
      10: aconst_null
      11: areturn
      12: aload_0
      13: invokevirtual #4                  // Method getOutputChannel:()Lorg/springframework/messaging/MessageChannel;
      16: instanceof    #5                  // class org/springframework/integration/channel/ReactiveStreamsSubscribableChannel
      19: istore_3
      20: aload_0
      21: iload_3
      22: invokevirtual #6                  // Method setAsync:(Z)V
      25: aconst_null
      26: astore        4
      28: aconst_null
      29: astore        5
      31: aload_2
      32: instanceof    #7                  // class java/lang/Iterable
      35: ifeq          78
      38: aload_2
      39: checkcast     #7                  // class java/lang/Iterable
      42: astore        7
      44: aload_0
      45: aload         7
      47: invokevirtual #8                  // Method obtainSizeIfPossible:(Ljava/lang/Iterable;)I
      50: istore        6
      52: iload_3
      53: ifeq          66
      56: aload         7
      58: invokestatic  #9                  // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      61: astore        5
      63: goto          75
      66: aload         7
      68: invokeinterface #10,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      73: astore        4
      75: goto          294
      78: aload_2
      79: invokevirtual #11                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      82: invokevirtual #12                 // Method java/lang/Class.isArray:()Z
      85: ifeq          128
      88: aload_2
      89: invokestatic  #13                 // Method org/springframework/util/ObjectUtils.toObjectArray:(Ljava/lang/Object;)[Ljava/lang/Object;
      92: astore        7
      94: aload         7
      96: arraylength
      97: istore        6
      99: iload_3
     100: ifeq          113
     103: aload         7
     105: invokestatic  #14                 // Method reactor/core/publisher/Flux.fromArray:([Ljava/lang/Object;)Lreactor/core/publisher/Flux;
     108: astore        5
     110: goto          125
     113: aload         7
     115: invokestatic  #15                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
     118: invokeinterface #16,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     123: astore        4
     125: goto          294
     128: aload_2
     129: instanceof    #17                 // class java/util/Iterator
     132: ifeq          175
     135: aload_2
     136: checkcast     #17                 // class java/util/Iterator
     139: astore        7
     141: aload_0
     142: aload         7
     144: invokevirtual #18                 // Method obtainSizeIfPossible:(Ljava/util/Iterator;)I
     147: istore        6
     149: iload_3
     150: ifeq          168
     153: aload         7
     155: invokedynamic #19,  0             // InvokeDynamic #0:iterator:(Ljava/util/Iterator;)Ljava/lang/Iterable;
     160: invokestatic  #9                  // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
     163: astore        5
     165: goto          172
     168: aload         7
     170: astore        4
     172: goto          294
     175: aload_2
     176: instanceof    #20                 // class java/util/stream/Stream
     179: ifeq          217
     182: aload_2
     183: checkcast     #20                 // class java/util/stream/Stream
     186: astore        7
     188: iconst_0
     189: istore        6
     191: iload_3
     192: ifeq          205
     195: aload         7
     197: invokestatic  #21                 // Method reactor/core/publisher/Flux.fromStream:(Ljava/util/stream/Stream;)Lreactor/core/publisher/Flux;
     200: astore        5
     202: goto          214
     205: aload         7
     207: invokeinterface #22,  1           // InterfaceMethod java/util/stream/Stream.iterator:()Ljava/util/Iterator;
     212: astore        4
     214: goto          294
     217: aload_2
     218: instanceof    #23                 // class org/reactivestreams/Publisher
     221: ifeq          267
     224: aload_2
     225: checkcast     #23                 // class org/reactivestreams/Publisher
     228: astore        7
     230: iconst_0
     231: istore        6
     233: iload_3
     234: ifeq          247
     237: aload         7
     239: invokestatic  #24                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
     242: astore        5
     244: goto          264
     247: aload_2
     248: checkcast     #23                 // class org/reactivestreams/Publisher
     251: invokestatic  #24                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
     254: invokevirtual #25                 // Method reactor/core/publisher/Flux.toIterable:()Ljava/lang/Iterable;
     257: invokeinterface #10,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
     262: astore        4
     264: goto          294
     267: iconst_1
     268: istore        6
     270: iload_3
     271: ifeq          283
     274: aload_2
     275: invokestatic  #26                 // Method reactor/core/publisher/Flux.just:(Ljava/lang/Object;)Lreactor/core/publisher/Flux;
     278: astore        5
     280: goto          294
     283: aload_2
     284: invokestatic  #27                 // Method java/util/Collections.singleton:(Ljava/lang/Object;)Ljava/util/Set;
     287: invokeinterface #28,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     292: astore        4
     294: aload         4
     296: ifnull        311
     299: aload         4
     301: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     306: ifne          311
     309: aconst_null
     310: areturn
     311: aload_1
     312: invokeinterface #30,  1           // InterfaceMethod org/springframework/messaging/Message.getHeaders:()Lorg/springframework/messaging/MessageHeaders;
     317: astore        7
     319: aload_0
     320: aload_1
     321: invokevirtual #31                 // Method willAddHeaders:(Lorg/springframework/messaging/Message;)Z
     324: ifeq          345
     327: new           #32                 // class java/util/HashMap
     330: dup
     331: aload         7
     333: invokespecial #33                 // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
     336: astore        7
     338: aload_0
     339: aload_1
     340: aload         7
     342: invokevirtual #34                 // Method addHeaders:(Lorg/springframework/messaging/Message;Ljava/util/Map;)V
     345: aload         7
     347: astore        8
     349: aload_1
     350: invokeinterface #30,  1           // InterfaceMethod org/springframework/messaging/Message.getHeaders:()Lorg/springframework/messaging/MessageHeaders;
     355: invokevirtual #35                 // Method org/springframework/messaging/MessageHeaders.getId:()Ljava/util/UUID;
     358: astore        9
     360: new           #36                 // class java/util/concurrent/atomic/AtomicInteger
     363: dup
     364: iconst_1
     365: invokespecial #37                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
     368: astore        10
     370: aload_0
     371: aload         8
     373: aload         9
     375: aload         10
     377: iload         6
     379: invokedynamic #38,  0             // InvokeDynamic #1:apply:(Lorg/springframework/integration/splitter/AbstractMessageSplitter;Ljava/util/Map;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;I)Ljava/util/function/Function;
     384: astore        11
     386: iload_3
     387: ifeq          398
     390: aload         5
     392: aload         11
     394: invokevirtual #39                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
     397: areturn
     398: new           #40                 // class org/springframework/integration/util/FunctionIterator
     401: dup
     402: aload_2
     403: instanceof    #41                 // class java/lang/AutoCloseable
     406: ifeq          425
     409: aload_2
     410: aload         4
     412: invokevirtual #42                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     415: ifne          425
     418: aload_2
     419: checkcast     #41                 // class java/lang/AutoCloseable
     422: goto          426
     425: aconst_null
     426: aload         4
     428: aload         11
     430: invokespecial #43                 // Method org/springframework/integration/util/FunctionIterator."<init>":(Ljava/lang/AutoCloseable;Ljava/util/Iterator;Ljava/util/function/Function;)V
     433: areturn

  protected int obtainSizeIfPossible(java.lang.Iterable<?>);
    Code:
       0: aload_1
       1: instanceof    #44                 // class java/util/Collection
       4: ifeq          17
       7: aload_1
       8: checkcast     #44                 // class java/util/Collection
      11: invokeinterface #45,  1           // InterfaceMethod java/util/Collection.size:()I
      16: ireturn
      17: invokestatic  #46                 // Method org/springframework/integration/support/json/JacksonPresent.isJackson2Present:()Z
      20: ifeq          35
      23: aload_1
      24: invokestatic  #47                 // Method org/springframework/integration/splitter/AbstractMessageSplitter$JacksonNodeHelper.access$000:(Ljava/lang/Object;)Z
      27: ifeq          35
      30: aload_1
      31: invokestatic  #48                 // Method org/springframework/integration/splitter/AbstractMessageSplitter$JacksonNodeHelper.access$100:(Ljava/lang/Object;)I
      34: ireturn
      35: iconst_0
      36: ireturn

  protected int obtainSizeIfPossible(java.util.Iterator<?>);
    Code:
       0: iconst_0
       1: ireturn

  private org.springframework.integration.support.AbstractIntegrationMessageBuilder<?> createBuilder(java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Object, int, int);
    Code:
       0: aload_1
       1: instanceof    #49                 // class org/springframework/messaging/Message
       4: ifeq          25
       7: aload_0
       8: invokevirtual #50                 // Method getMessageBuilderFactory:()Lorg/springframework/integration/support/MessageBuilderFactory;
      11: aload_1
      12: checkcast     #49                 // class org/springframework/messaging/Message
      15: invokeinterface #51,  2           // InterfaceMethod org/springframework/integration/support/MessageBuilderFactory.fromMessage:(Lorg/springframework/messaging/Message;)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
      20: astore        6
      22: goto          53
      25: aload_1
      26: instanceof    #52                 // class org/springframework/integration/support/AbstractIntegrationMessageBuilder
      29: ifeq          41
      32: aload_1
      33: checkcast     #52                 // class org/springframework/integration/support/AbstractIntegrationMessageBuilder
      36: astore        6
      38: goto          53
      41: aload_0
      42: invokevirtual #50                 // Method getMessageBuilderFactory:()Lorg/springframework/integration/support/MessageBuilderFactory;
      45: aload_1
      46: invokeinterface #53,  2           // InterfaceMethod org/springframework/integration/support/MessageBuilderFactory.withPayload:(Ljava/lang/Object;)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
      51: astore        6
      53: aload         6
      55: aload_2
      56: invokevirtual #54                 // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder.copyHeadersIfAbsent:(Ljava/util/Map;)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
      59: pop
      60: aload_0
      61: getfield      #2                  // Field applySequence:Z
      64: ifeq          78
      67: aload         6
      69: aload_3
      70: iload         4
      72: iload         5
      74: invokevirtual #55                 // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder.pushSequenceDetails:(Ljava/lang/Object;II)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
      77: pop
      78: aload         6
      80: areturn

  protected boolean willAddHeaders(org.springframework.messaging.Message<?>);
    Code:
       0: iconst_0
       1: ireturn

  protected void addHeaders(org.springframework.messaging.Message<?>, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: return

  protected boolean shouldCopyRequestHeaders();
    Code:
       0: iconst_0
       1: ireturn

  protected void produceOutput(java.lang.Object, org.springframework.messaging.Message<?>);
    Code:
       0: aload_1
       1: instanceof    #17                 // class java/util/Iterator
       4: ifeq          88
       7: aload_1
       8: checkcast     #17                 // class java/util/Iterator
      11: astore_3
      12: aload_3
      13: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          35
      21: aload_0
      22: aload_3
      23: invokeinterface #56,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      28: aload_2
      29: invokespecial #57                 // Method org/springframework/integration/handler/AbstractReplyProducingMessageHandler.produceOutput:(Ljava/lang/Object;Lorg/springframework/messaging/Message;)V
      32: goto          12
      35: aload_3
      36: instanceof    #41                 // class java/lang/AutoCloseable
      39: ifeq          85
      42: aload_3
      43: checkcast     #41                 // class java/lang/AutoCloseable
      46: invokeinterface #58,  1           // InterfaceMethod java/lang/AutoCloseable.close:()V
      51: goto          85
      54: astore        4
      56: goto          85
      59: astore        5
      61: aload_3
      62: instanceof    #41                 // class java/lang/AutoCloseable
      65: ifeq          82
      68: aload_3
      69: checkcast     #41                 // class java/lang/AutoCloseable
      72: invokeinterface #58,  1           // InterfaceMethod java/lang/AutoCloseable.close:()V
      77: goto          82
      80: astore        6
      82: aload         5
      84: athrow
      85: goto          94
      88: aload_0
      89: aload_1
      90: aload_2
      91: invokespecial #57                 // Method org/springframework/integration/handler/AbstractReplyProducingMessageHandler.produceOutput:(Ljava/lang/Object;Lorg/springframework/messaging/Message;)V
      94: return
    Exception table:
       from    to  target type
          42    51    54   Class java/lang/Exception
          12    35    59   any
          68    77    80   Class java/lang/Exception
          59    61    59   any

  public java.lang.String getComponentType();
    Code:
       0: ldc           #60                 // String splitter
       2: areturn

  protected abstract java.lang.Object splitMessage(org.springframework.messaging.Message<?>);

  private org.springframework.integration.support.AbstractIntegrationMessageBuilder lambda$handleRequestMessage$1(java.util.Map, java.lang.Object, java.util.concurrent.atomic.AtomicInteger, int, java.lang.Object);
    Code:
       0: aload_0
       1: aload         5
       3: aload_1
       4: aload_2
       5: aload_3
       6: invokevirtual #61                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
       9: iload         4
      11: invokespecial #62                 // Method createBuilder:(Ljava/lang/Object;Ljava/util/Map;Ljava/lang/Object;II)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
      14: areturn

  private static java.util.Iterator lambda$handleRequestMessage$0(java.util.Iterator);
    Code:
       0: aload_0
       1: areturn
}
