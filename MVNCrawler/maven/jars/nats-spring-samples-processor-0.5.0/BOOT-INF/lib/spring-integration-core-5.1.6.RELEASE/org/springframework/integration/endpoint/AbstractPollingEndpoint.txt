Compiled from "AbstractPollingEndpoint.java"
public abstract class org.springframework.integration.endpoint.AbstractPollingEndpoint extends org.springframework.integration.endpoint.AbstractEndpoint implements org.springframework.beans.factory.BeanClassLoaderAware {
  private final java.lang.Object initializationMonitor;

  private java.util.concurrent.Executor taskExecutor;

  private boolean syncExecutor;

  private java.lang.ClassLoader beanClassLoader;

  private org.springframework.scheduling.Trigger trigger;

  private long maxMessagesPerPoll;

  private org.springframework.util.ErrorHandler errorHandler;

  private boolean errorHandlerIsDefault;

  private java.util.List<org.aopalliance.aop.Advice> adviceChain;

  private org.springframework.integration.transaction.TransactionSynchronizationFactory transactionSynchronizationFactory;

  private volatile java.util.concurrent.Callable<org.springframework.messaging.Message<?>> pollingTask;

  private volatile reactor.core.publisher.Flux<org.springframework.messaging.Message<?>> pollingFlux;

  private volatile org.reactivestreams.Subscription subscription;

  private volatile java.util.concurrent.ScheduledFuture<?> runningTask;

  private volatile boolean initialized;

  public org.springframework.integration.endpoint.AbstractPollingEndpoint();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/integration/endpoint/AbstractEndpoint."<init>":()V
       4: aload_0
       5: new           #2                  // class java/lang/Object
       8: dup
       9: invokespecial #3                  // Method java/lang/Object."<init>":()V
      12: putfield      #4                  // Field initializationMonitor:Ljava/lang/Object;
      15: aload_0
      16: new           #5                  // class org/springframework/core/task/SyncTaskExecutor
      19: dup
      20: invokespecial #6                  // Method org/springframework/core/task/SyncTaskExecutor."<init>":()V
      23: putfield      #7                  // Field taskExecutor:Ljava/util/concurrent/Executor;
      26: aload_0
      27: iconst_1
      28: putfield      #8                  // Field syncExecutor:Z
      31: aload_0
      32: invokestatic  #9                  // Method org/springframework/util/ClassUtils.getDefaultClassLoader:()Ljava/lang/ClassLoader;
      35: putfield      #10                 // Field beanClassLoader:Ljava/lang/ClassLoader;
      38: aload_0
      39: new           #11                 // class org/springframework/scheduling/support/PeriodicTrigger
      42: dup
      43: ldc2_w        #12                 // long 10l
      46: invokespecial #14                 // Method org/springframework/scheduling/support/PeriodicTrigger."<init>":(J)V
      49: putfield      #15                 // Field trigger:Lorg/springframework/scheduling/Trigger;
      52: aload_0
      53: ldc2_w        #16                 // long -1l
      56: putfield      #18                 // Field maxMessagesPerPoll:J
      59: aload_0
      60: ldc           #20                 // int 1073741823
      62: invokevirtual #21                 // Method setPhase:(I)V
      65: return

  public void setTaskExecutor(java.util.concurrent.Executor);
    Code:
       0: aload_0
       1: aload_1
       2: ifnull        9
       5: aload_1
       6: goto          16
       9: new           #5                  // class org/springframework/core/task/SyncTaskExecutor
      12: dup
      13: invokespecial #6                  // Method org/springframework/core/task/SyncTaskExecutor."<init>":()V
      16: putfield      #7                  // Field taskExecutor:Ljava/util/concurrent/Executor;
      19: aload_0
      20: aload_0
      21: getfield      #7                  // Field taskExecutor:Ljava/util/concurrent/Executor;
      24: instanceof    #5                  // class org/springframework/core/task/SyncTaskExecutor
      27: ifne          53
      30: aload_0
      31: getfield      #7                  // Field taskExecutor:Ljava/util/concurrent/Executor;
      34: instanceof    #22                 // class org/springframework/integration/util/ErrorHandlingTaskExecutor
      37: ifeq          57
      40: aload_0
      41: getfield      #7                  // Field taskExecutor:Ljava/util/concurrent/Executor;
      44: checkcast     #22                 // class org/springframework/integration/util/ErrorHandlingTaskExecutor
      47: invokevirtual #23                 // Method org/springframework/integration/util/ErrorHandlingTaskExecutor.isSyncExecutor:()Z
      50: ifeq          57
      53: iconst_1
      54: goto          58
      57: iconst_0
      58: putfield      #8                  // Field syncExecutor:Z
      61: return

  protected java.util.concurrent.Executor getTaskExecutor();
    Code:
       0: aload_0
       1: getfield      #7                  // Field taskExecutor:Ljava/util/concurrent/Executor;
       4: areturn

  protected boolean isSyncExecutor();
    Code:
       0: aload_0
       1: getfield      #8                  // Field syncExecutor:Z
       4: ireturn

  public void setTrigger(org.springframework.scheduling.Trigger);
    Code:
       0: aload_0
       1: aload_1
       2: ifnull        9
       5: aload_1
       6: goto          19
       9: new           #11                 // class org/springframework/scheduling/support/PeriodicTrigger
      12: dup
      13: ldc2_w        #12                 // long 10l
      16: invokespecial #14                 // Method org/springframework/scheduling/support/PeriodicTrigger."<init>":(J)V
      19: putfield      #15                 // Field trigger:Lorg/springframework/scheduling/Trigger;
      22: return

  public void setAdviceChain(java.util.List<org.aopalliance.aop.Advice>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #24                 // Field adviceChain:Ljava/util/List;
       5: return

  public void setMaxMessagesPerPoll(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #18                 // Field maxMessagesPerPoll:J
       5: return

  public void setErrorHandler(org.springframework.util.ErrorHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #25                 // Field errorHandler:Lorg/springframework/util/ErrorHandler;
       5: return

  public void setBeanClassLoader(java.lang.ClassLoader);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field beanClassLoader:Ljava/lang/ClassLoader;
       5: return

  public void setTransactionSynchronizationFactory(org.springframework.integration.transaction.TransactionSynchronizationFactory);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #26                 // Field transactionSynchronizationFactory:Lorg/springframework/integration/transaction/TransactionSynchronizationFactory;
       5: return

  public org.springframework.messaging.MessageChannel getDefaultErrorChannel();
    Code:
       0: aload_0
       1: getfield      #27                 // Field errorHandlerIsDefault:Z
       4: ifne          28
       7: aload_0
       8: getfield      #25                 // Field errorHandler:Lorg/springframework/util/ErrorHandler;
      11: instanceof    #28                 // class org/springframework/integration/channel/MessagePublishingErrorHandler
      14: ifeq          28
      17: aload_0
      18: getfield      #25                 // Field errorHandler:Lorg/springframework/util/ErrorHandler;
      21: checkcast     #28                 // class org/springframework/integration/channel/MessagePublishingErrorHandler
      24: invokevirtual #29                 // Method org/springframework/integration/channel/MessagePublishingErrorHandler.getDefaultErrorChannel:()Lorg/springframework/messaging/MessageChannel;
      27: areturn
      28: aconst_null
      29: areturn

  protected java.lang.ClassLoader getBeanClassLoader();
    Code:
       0: aload_0
       1: getfield      #10                 // Field beanClassLoader:Ljava/lang/ClassLoader;
       4: areturn

  protected boolean isReceiveOnlyAdvice(org.aopalliance.aop.Advice);
    Code:
       0: iconst_0
       1: ireturn

  protected void applyReceiveOnlyAdviceChain(java.util.Collection<org.aopalliance.aop.Advice>);
    Code:
       0: return

  protected boolean isReactive();
    Code:
       0: iconst_0
       1: ireturn

  protected reactor.core.publisher.Flux<org.springframework.messaging.Message<?>> getPollingFlux();
    Code:
       0: aload_0
       1: getfield      #30                 // Field pollingFlux:Lreactor/core/publisher/Flux;
       4: areturn

  protected void onInit();
    Code:
       0: aload_0
       1: getfield      #4                  // Field initializationMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #31                 // Field initialized:Z
      11: ifeq          17
      14: aload_1
      15: monitorexit
      16: return
      17: aload_0
      18: getfield      #15                 // Field trigger:Lorg/springframework/scheduling/Trigger;
      21: ldc           #32                 // String Trigger is required
      23: invokestatic  #33                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      26: aload_0
      27: getfield      #7                  // Field taskExecutor:Ljava/util/concurrent/Executor;
      30: ifnull        105
      33: aload_0
      34: getfield      #7                  // Field taskExecutor:Ljava/util/concurrent/Executor;
      37: instanceof    #22                 // class org/springframework/integration/util/ErrorHandlingTaskExecutor
      40: ifne          105
      43: aload_0
      44: getfield      #25                 // Field errorHandler:Lorg/springframework/util/ErrorHandler;
      47: ifnonnull     86
      50: aload_0
      51: invokevirtual #34                 // Method getBeanFactory:()Lorg/springframework/beans/factory/BeanFactory;
      54: ldc           #35                 // String BeanFactory is required
      56: invokestatic  #33                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      59: aload_0
      60: new           #28                 // class org/springframework/integration/channel/MessagePublishingErrorHandler
      63: dup
      64: new           #36                 // class org/springframework/integration/support/channel/BeanFactoryChannelResolver
      67: dup
      68: aload_0
      69: invokevirtual #34                 // Method getBeanFactory:()Lorg/springframework/beans/factory/BeanFactory;
      72: invokespecial #37                 // Method org/springframework/integration/support/channel/BeanFactoryChannelResolver."<init>":(Lorg/springframework/beans/factory/BeanFactory;)V
      75: invokespecial #38                 // Method org/springframework/integration/channel/MessagePublishingErrorHandler."<init>":(Lorg/springframework/messaging/core/DestinationResolver;)V
      78: putfield      #25                 // Field errorHandler:Lorg/springframework/util/ErrorHandler;
      81: aload_0
      82: iconst_1
      83: putfield      #27                 // Field errorHandlerIsDefault:Z
      86: aload_0
      87: new           #22                 // class org/springframework/integration/util/ErrorHandlingTaskExecutor
      90: dup
      91: aload_0
      92: getfield      #7                  // Field taskExecutor:Ljava/util/concurrent/Executor;
      95: aload_0
      96: getfield      #25                 // Field errorHandler:Lorg/springframework/util/ErrorHandler;
      99: invokespecial #39                 // Method org/springframework/integration/util/ErrorHandlingTaskExecutor."<init>":(Ljava/util/concurrent/Executor;Lorg/springframework/util/ErrorHandler;)V
     102: putfield      #7                  // Field taskExecutor:Ljava/util/concurrent/Executor;
     105: aload_0
     106: getfield      #26                 // Field transactionSynchronizationFactory:Lorg/springframework/integration/transaction/TransactionSynchronizationFactory;
     109: ifnonnull     159
     112: aload_0
     113: getfield      #24                 // Field adviceChain:Ljava/util/List;
     116: ifnull        159
     119: aload_0
     120: getfield      #24                 // Field adviceChain:Ljava/util/List;
     123: invokeinterface #40,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
     128: ldc           #41                 // class org/springframework/transaction/interceptor/TransactionInterceptor
     130: dup
     131: invokevirtual #42                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     134: pop
     135: invokedynamic #43,  0             // InvokeDynamic #0:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
     140: invokeinterface #44,  2           // InterfaceMethod java/util/stream/Stream.anyMatch:(Ljava/util/function/Predicate;)Z
     145: ifeq          159
     148: aload_0
     149: new           #45                 // class org/springframework/integration/transaction/PassThroughTransactionSynchronizationFactory
     152: dup
     153: invokespecial #46                 // Method org/springframework/integration/transaction/PassThroughTransactionSynchronizationFactory."<init>":()V
     156: putfield      #26                 // Field transactionSynchronizationFactory:Lorg/springframework/integration/transaction/TransactionSynchronizationFactory;
     159: aload_0
     160: iconst_1
     161: putfield      #31                 // Field initialized:Z
     164: aload_1
     165: monitorexit
     166: goto          174
     169: astore_2
     170: aload_1
     171: monitorexit
     172: aload_2
     173: athrow
     174: aload_0
     175: invokespecial #47                 // Method org/springframework/integration/endpoint/AbstractEndpoint.onInit:()V
     178: goto          210
     181: astore_1
     182: new           #49                 // class org/springframework/beans/factory/BeanInitializationException
     185: dup
     186: new           #50                 // class java/lang/StringBuilder
     189: dup
     190: invokespecial #51                 // Method java/lang/StringBuilder."<init>":()V
     193: ldc           #52                 // String Cannot initialize:
     195: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     198: aload_0
     199: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     202: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     205: aload_1
     206: invokespecial #56                 // Method org/springframework/beans/factory/BeanInitializationException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     209: athrow
     210: return
    Exception table:
       from    to  target type
           7    16   169   any
          17   166   169   any
         169   172   169   any
         174   178   181   Class java/lang/Exception

  protected void doStart();
    Code:
       0: aload_0
       1: getfield      #31                 // Field initialized:Z
       4: ifne          11
       7: aload_0
       8: invokevirtual #57                 // Method onInit:()V
      11: aload_0
      12: aload_0
      13: invokespecial #58                 // Method createPollingTask:()Ljava/util/concurrent/Callable;
      16: putfield      #59                 // Field pollingTask:Ljava/util/concurrent/Callable;
      19: aload_0
      20: invokevirtual #60                 // Method isReactive:()Z
      23: ifeq          37
      26: aload_0
      27: aload_0
      28: invokespecial #61                 // Method createFluxGenerator:()Lreactor/core/publisher/Flux;
      31: putfield      #30                 // Field pollingFlux:Lreactor/core/publisher/Flux;
      34: goto          75
      37: aload_0
      38: invokevirtual #62                 // Method getTaskScheduler:()Lorg/springframework/scheduling/TaskScheduler;
      41: ifnull        48
      44: iconst_1
      45: goto          49
      48: iconst_0
      49: ldc           #63                 // String unable to start polling, no taskScheduler available
      51: invokestatic  #64                 // Method org/springframework/util/Assert.state:(ZLjava/lang/String;)V
      54: aload_0
      55: aload_0
      56: invokevirtual #62                 // Method getTaskScheduler:()Lorg/springframework/scheduling/TaskScheduler;
      59: aload_0
      60: invokespecial #65                 // Method createPoller:()Ljava/lang/Runnable;
      63: aload_0
      64: getfield      #15                 // Field trigger:Lorg/springframework/scheduling/Trigger;
      67: invokeinterface #66,  3           // InterfaceMethod org/springframework/scheduling/TaskScheduler.schedule:(Ljava/lang/Runnable;Lorg/springframework/scheduling/Trigger;)Ljava/util/concurrent/ScheduledFuture;
      72: putfield      #67                 // Field runningTask:Ljava/util/concurrent/ScheduledFuture;
      75: return

  private java.util.concurrent.Callable<org.springframework.messaging.Message<?>> createPollingTask();
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #24                 // Field adviceChain:Ljava/util/List;
       6: invokestatic  #68                 // Method org/springframework/util/CollectionUtils.isEmpty:(Ljava/util/Collection;)Z
       9: ifne          44
      12: aload_0
      13: getfield      #24                 // Field adviceChain:Ljava/util/List;
      16: invokeinterface #40,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      21: aload_0
      22: invokedynamic #69,  0             // InvokeDynamic #1:test:(Lorg/springframework/integration/endpoint/AbstractPollingEndpoint;)Ljava/util/function/Predicate;
      27: invokeinterface #70,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      32: invokestatic  #71                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      35: invokeinterface #72,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      40: checkcast     #73                 // class java/util/List
      43: astore_1
      44: aload_0
      45: invokedynamic #74,  0             // InvokeDynamic #2:call:(Lorg/springframework/integration/endpoint/AbstractPollingEndpoint;)Ljava/util/concurrent/Callable;
      50: astore_2
      51: aload_0
      52: getfield      #24                 // Field adviceChain:Ljava/util/List;
      55: astore_3
      56: aload_3
      57: invokestatic  #68                 // Method org/springframework/util/CollectionUtils.isEmpty:(Ljava/util/Collection;)Z
      60: ifne          127
      63: new           #75                 // class org/springframework/aop/framework/ProxyFactory
      66: dup
      67: aload_2
      68: invokespecial #76                 // Method org/springframework/aop/framework/ProxyFactory."<init>":(Ljava/lang/Object;)V
      71: astore        4
      73: aload_3
      74: invokestatic  #68                 // Method org/springframework/util/CollectionUtils.isEmpty:(Ljava/util/Collection;)Z
      77: ifne          114
      80: aload_3
      81: invokeinterface #40,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      86: aload_0
      87: invokedynamic #77,  0             // InvokeDynamic #3:test:(Lorg/springframework/integration/endpoint/AbstractPollingEndpoint;)Ljava/util/function/Predicate;
      92: invokeinterface #70,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      97: aload         4
      99: dup
     100: invokevirtual #42                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     103: pop
     104: invokedynamic #78,  0             // InvokeDynamic #4:accept:(Lorg/springframework/aop/framework/ProxyFactory;)Ljava/util/function/Consumer;
     109: invokeinterface #79,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
     114: aload         4
     116: aload_0
     117: getfield      #10                 // Field beanClassLoader:Ljava/lang/ClassLoader;
     120: invokevirtual #80                 // Method org/springframework/aop/framework/ProxyFactory.getProxy:(Ljava/lang/ClassLoader;)Ljava/lang/Object;
     123: checkcast     #81                 // class java/util/concurrent/Callable
     126: astore_2
     127: aload_1
     128: invokestatic  #68                 // Method org/springframework/util/CollectionUtils.isEmpty:(Ljava/util/Collection;)Z
     131: ifne          139
     134: aload_0
     135: aload_1
     136: invokevirtual #82                 // Method applyReceiveOnlyAdviceChain:(Ljava/util/Collection;)V
     139: aload_2
     140: areturn

  private java.lang.Runnable createPoller();
    Code:
       0: aload_0
       1: invokedynamic #83,  0             // InvokeDynamic #5:run:(Lorg/springframework/integration/endpoint/AbstractPollingEndpoint;)Ljava/lang/Runnable;
       6: areturn

  private reactor.core.publisher.Flux<org.springframework.messaging.Message<?>> createFluxGenerator();
    Code:
       0: new           #84                 // class org/springframework/scheduling/support/SimpleTriggerContext
       3: dup
       4: invokespecial #85                 // Method org/springframework/scheduling/support/SimpleTriggerContext."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_1
      10: invokedynamic #86,  0             // InvokeDynamic #6:accept:(Lorg/springframework/integration/endpoint/AbstractPollingEndpoint;Lorg/springframework/scheduling/support/SimpleTriggerContext;)Ljava/util/function/Consumer;
      15: invokestatic  #87                 // Method reactor/core/publisher/Flux.generate:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      18: aload_0
      19: aload_1
      20: invokedynamic #88,  0             // InvokeDynamic #7:apply:(Lorg/springframework/integration/endpoint/AbstractPollingEndpoint;Lorg/springframework/scheduling/support/SimpleTriggerContext;)Ljava/util/function/Function;
      25: iconst_1
      26: invokevirtual #89                 // Method reactor/core/publisher/Flux.concatMap:(Ljava/util/function/Function;I)Lreactor/core/publisher/Flux;
      29: aload_0
      30: invokedynamic #90,  0             // InvokeDynamic #8:getAsBoolean:(Lorg/springframework/integration/endpoint/AbstractPollingEndpoint;)Ljava/util/function/BooleanSupplier;
      35: invokevirtual #91                 // Method reactor/core/publisher/Flux.repeat:(Ljava/util/function/BooleanSupplier;)Lreactor/core/publisher/Flux;
      38: aload_0
      39: invokedynamic #92,  0             // InvokeDynamic #9:accept:(Lorg/springframework/integration/endpoint/AbstractPollingEndpoint;)Ljava/util/function/Consumer;
      44: invokevirtual #93                 // Method reactor/core/publisher/Flux.doOnSubscribe:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      47: areturn

  private org.springframework.messaging.Message<?> pollForMessage();
    Code:
       0: aload_0
       1: getfield      #59                 // Field pollingTask:Ljava/util/concurrent/Callable;
       4: invokeinterface #94,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
       9: checkcast     #95                 // class org/springframework/messaging/Message
      12: astore_1
      13: aload_0
      14: getfield      #26                 // Field transactionSynchronizationFactory:Lorg/springframework/integration/transaction/TransactionSynchronizationFactory;
      17: ifnull        37
      20: aload_0
      21: invokevirtual #96                 // Method getResourceToBind:()Ljava/lang/Object;
      24: astore_2
      25: aload_2
      26: invokestatic  #97                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.hasResource:(Ljava/lang/Object;)Z
      29: ifeq          37
      32: aload_2
      33: invokestatic  #98                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.unbindResource:(Ljava/lang/Object;)Ljava/lang/Object;
      36: pop
      37: aload_1
      38: areturn
      39: astore_1
      40: aload_1
      41: instanceof    #99                 // class org/springframework/messaging/MessagingException
      44: ifeq          52
      47: aload_1
      48: checkcast     #99                 // class org/springframework/messaging/MessagingException
      51: athrow
      52: aconst_null
      53: astore_2
      54: aload_0
      55: getfield      #26                 // Field transactionSynchronizationFactory:Lorg/springframework/integration/transaction/TransactionSynchronizationFactory;
      58: ifnull        84
      61: aload_0
      62: invokevirtual #96                 // Method getResourceToBind:()Ljava/lang/Object;
      65: invokestatic  #100                // Method org/springframework/transaction/support/TransactionSynchronizationManager.getResource:(Ljava/lang/Object;)Ljava/lang/Object;
      68: astore_3
      69: aload_3
      70: instanceof    #101                // class org/springframework/integration/transaction/IntegrationResourceHolder
      73: ifeq          84
      76: aload_3
      77: checkcast     #101                // class org/springframework/integration/transaction/IntegrationResourceHolder
      80: invokevirtual #102                // Method org/springframework/integration/transaction/IntegrationResourceHolder.getMessage:()Lorg/springframework/messaging/Message;
      83: astore_2
      84: new           #99                 // class org/springframework/messaging/MessagingException
      87: dup
      88: aload_2
      89: aload_1
      90: invokespecial #103                // Method org/springframework/messaging/MessagingException."<init>":(Lorg/springframework/messaging/Message;Ljava/lang/Throwable;)V
      93: athrow
      94: astore        4
      96: aload_0
      97: getfield      #26                 // Field transactionSynchronizationFactory:Lorg/springframework/integration/transaction/TransactionSynchronizationFactory;
     100: ifnull        123
     103: aload_0
     104: invokevirtual #96                 // Method getResourceToBind:()Ljava/lang/Object;
     107: astore        5
     109: aload         5
     111: invokestatic  #97                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.hasResource:(Ljava/lang/Object;)Z
     114: ifeq          123
     117: aload         5
     119: invokestatic  #98                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.unbindResource:(Ljava/lang/Object;)Ljava/lang/Object;
     122: pop
     123: aload         4
     125: athrow
    Exception table:
       from    to  target type
           0    13    39   Class java/lang/Exception
           0    13    94   any
          39    96    94   any

  private org.springframework.messaging.Message<?> doPoll();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #104                // Method getResourceKey:()Ljava/lang/String;
       5: aload_0
       6: invokevirtual #96                 // Method getResourceToBind:()Ljava/lang/Object;
       9: invokespecial #105                // Method bindResourceHolderIfNecessary:(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/integration/transaction/IntegrationResourceHolder;
      12: astore_1
      13: aload_0
      14: invokevirtual #106                // Method receiveMessage:()Lorg/springframework/messaging/Message;
      17: astore_2
      18: goto          78
      21: astore_3
      22: invokestatic  #107                // Method java/lang/Thread.interrupted:()Z
      25: ifeq          73
      28: aload_0
      29: getfield      #108                // Field logger:Lorg/apache/commons/logging/Log;
      32: invokeinterface #109,  1          // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      37: ifeq          71
      40: aload_0
      41: getfield      #108                // Field logger:Lorg/apache/commons/logging/Log;
      44: new           #50                 // class java/lang/StringBuilder
      47: dup
      48: invokespecial #51                 // Method java/lang/StringBuilder."<init>":()V
      51: ldc           #110                // String Poll interrupted - during stop()? :
      53: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: aload_3
      57: invokevirtual #111                // Method java/lang/Exception.getMessage:()Ljava/lang/String;
      60: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      63: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      66: invokeinterface #112,  2          // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      71: aconst_null
      72: areturn
      73: aload_3
      74: checkcast     #113                // class java/lang/RuntimeException
      77: athrow
      78: aload_2
      79: ifnonnull     107
      82: aload_0
      83: getfield      #108                // Field logger:Lorg/apache/commons/logging/Log;
      86: invokeinterface #109,  1          // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      91: ifeq          105
      94: aload_0
      95: getfield      #108                // Field logger:Lorg/apache/commons/logging/Log;
      98: ldc           #114                // String Received no Message during the poll, returning \'false\'
     100: invokeinterface #112,  2          // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     105: aconst_null
     106: areturn
     107: aload_0
     108: getfield      #108                // Field logger:Lorg/apache/commons/logging/Log;
     111: invokeinterface #109,  1          // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
     116: ifeq          147
     119: aload_0
     120: getfield      #108                // Field logger:Lorg/apache/commons/logging/Log;
     123: new           #50                 // class java/lang/StringBuilder
     126: dup
     127: invokespecial #51                 // Method java/lang/StringBuilder."<init>":()V
     130: ldc           #115                // String Poll resulted in Message:
     132: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     135: aload_2
     136: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     139: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     142: invokeinterface #112,  2          // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     147: aload_1
     148: ifnull        156
     151: aload_1
     152: aload_2
     153: invokevirtual #116                // Method org/springframework/integration/transaction/IntegrationResourceHolder.setMessage:(Lorg/springframework/messaging/Message;)V
     156: aload_0
     157: invokevirtual #60                 // Method isReactive:()Z
     160: ifne          202
     163: aload_0
     164: aload_2
     165: invokevirtual #117                // Method handleMessage:(Lorg/springframework/messaging/Message;)V
     168: goto          202
     171: astore_3
     172: aload_3
     173: instanceof    #99                 // class org/springframework/messaging/MessagingException
     176: ifeq          192
     179: new           #118                // class org/springframework/integration/support/MessagingExceptionWrapper
     182: dup
     183: aload_2
     184: aload_3
     185: checkcast     #99                 // class org/springframework/messaging/MessagingException
     188: invokespecial #119                // Method org/springframework/integration/support/MessagingExceptionWrapper."<init>":(Lorg/springframework/messaging/Message;Lorg/springframework/messaging/MessagingException;)V
     191: athrow
     192: new           #99                 // class org/springframework/messaging/MessagingException
     195: dup
     196: aload_2
     197: aload_3
     198: invokespecial #103                // Method org/springframework/messaging/MessagingException."<init>":(Lorg/springframework/messaging/Message;Ljava/lang/Throwable;)V
     201: athrow
     202: aload_2
     203: areturn
    Exception table:
       from    to  target type
          13    18    21   Class java/lang/Exception
         163   168   171   Class java/lang/Exception

  protected void doStop();
    Code:
       0: aload_0
       1: getfield      #67                 // Field runningTask:Ljava/util/concurrent/ScheduledFuture;
       4: ifnull        18
       7: aload_0
       8: getfield      #67                 // Field runningTask:Ljava/util/concurrent/ScheduledFuture;
      11: iconst_1
      12: invokeinterface #120,  2          // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      17: pop
      18: aload_0
      19: aconst_null
      20: putfield      #67                 // Field runningTask:Ljava/util/concurrent/ScheduledFuture;
      23: aload_0
      24: getfield      #121                // Field subscription:Lorg/reactivestreams/Subscription;
      27: ifnull        39
      30: aload_0
      31: getfield      #121                // Field subscription:Lorg/reactivestreams/Subscription;
      34: invokeinterface #122,  1          // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      39: return

  protected abstract org.springframework.messaging.Message<?> receiveMessage();

  protected abstract void handleMessage(org.springframework.messaging.Message<?>);

  protected java.lang.Object getResourceToBind();
    Code:
       0: aconst_null
       1: areturn

  protected java.lang.String getResourceKey();
    Code:
       0: aconst_null
       1: areturn

  private org.springframework.integration.transaction.IntegrationResourceHolder bindResourceHolderIfNecessary(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #26                 // Field transactionSynchronizationFactory:Lorg/springframework/integration/transaction/TransactionSynchronizationFactory;
       4: ifnull        106
       7: aload_2
       8: ifnull        106
      11: invokestatic  #123                // Method org/springframework/transaction/support/TransactionSynchronizationManager.isActualTransactionActive:()Z
      14: ifeq          106
      17: aload_0
      18: getfield      #26                 // Field transactionSynchronizationFactory:Lorg/springframework/integration/transaction/TransactionSynchronizationFactory;
      21: aload_2
      22: invokeinterface #124,  2          // InterfaceMethod org/springframework/integration/transaction/TransactionSynchronizationFactory.create:(Ljava/lang/Object;)Lorg/springframework/transaction/support/TransactionSynchronization;
      27: astore_3
      28: aload_3
      29: ifnull        71
      32: aload_3
      33: invokestatic  #125                // Method org/springframework/transaction/support/TransactionSynchronizationManager.registerSynchronization:(Lorg/springframework/transaction/support/TransactionSynchronization;)V
      36: aload_3
      37: instanceof    #126                // class org/springframework/integration/transaction/IntegrationResourceHolderSynchronization
      40: ifeq          71
      43: aload_3
      44: checkcast     #126                // class org/springframework/integration/transaction/IntegrationResourceHolderSynchronization
      47: astore        4
      49: aload         4
      51: iconst_0
      52: invokevirtual #127                // Method org/springframework/integration/transaction/IntegrationResourceHolderSynchronization.setShouldUnbindAtCompletion:(Z)V
      55: aload_2
      56: invokestatic  #97                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.hasResource:(Ljava/lang/Object;)Z
      59: ifne          71
      62: aload_2
      63: aload         4
      65: invokevirtual #128                // Method org/springframework/integration/transaction/IntegrationResourceHolderSynchronization.getResourceHolder:()Lorg/springframework/integration/transaction/IntegrationResourceHolder;
      68: invokestatic  #129                // Method org/springframework/transaction/support/TransactionSynchronizationManager.bindResource:(Ljava/lang/Object;Ljava/lang/Object;)V
      71: aload_2
      72: invokestatic  #100                // Method org/springframework/transaction/support/TransactionSynchronizationManager.getResource:(Ljava/lang/Object;)Ljava/lang/Object;
      75: astore        4
      77: aload         4
      79: instanceof    #101                // class org/springframework/integration/transaction/IntegrationResourceHolder
      82: ifeq          106
      85: aload         4
      87: checkcast     #101                // class org/springframework/integration/transaction/IntegrationResourceHolder
      90: astore        5
      92: aload_1
      93: ifnull        103
      96: aload         5
      98: aload_1
      99: aload_2
     100: invokevirtual #130                // Method org/springframework/integration/transaction/IntegrationResourceHolder.addAttribute:(Ljava/lang/String;Ljava/lang/Object;)V
     103: aload         5
     105: areturn
     106: aconst_null
     107: areturn

  private void lambda$createFluxGenerator$9(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #121                // Field subscription:Lorg/reactivestreams/Subscription;
       5: return

  private org.reactivestreams.Publisher lambda$createFluxGenerator$8(org.springframework.scheduling.support.SimpleTriggerContext, java.time.Duration);
    Code:
       0: aload_2
       1: invokestatic  #131                // Method reactor/core/publisher/Mono.delay:(Ljava/time/Duration;)Lreactor/core/publisher/Mono;
       4: aload_1
       5: invokedynamic #132,  0            // InvokeDynamic #10:accept:(Lorg/springframework/scheduling/support/SimpleTriggerContext;)Ljava/util/function/Consumer;
      10: invokevirtual #133                // Method reactor/core/publisher/Mono.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      13: aload_0
      14: aload_1
      15: invokedynamic #134,  0            // InvokeDynamic #11:apply:(Lorg/springframework/integration/endpoint/AbstractPollingEndpoint;Lorg/springframework/scheduling/support/SimpleTriggerContext;)Ljava/util/function/Function;
      20: invokevirtual #135                // Method reactor/core/publisher/Mono.flatMapMany:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      23: areturn

  private org.reactivestreams.Publisher lambda$null$7(org.springframework.scheduling.support.SimpleTriggerContext, java.lang.Long);
    Code:
       0: aload_0
       1: invokedynamic #136,  0            // InvokeDynamic #12:accept:(Lorg/springframework/integration/endpoint/AbstractPollingEndpoint;)Ljava/util/function/Consumer;
       6: invokestatic  #87                 // Method reactor/core/publisher/Flux.generate:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
       9: aload_0
      10: getfield      #18                 // Field maxMessagesPerPoll:J
      13: invokevirtual #137                // Method reactor/core/publisher/Flux.take:(J)Lreactor/core/publisher/Flux;
      16: aload_0
      17: getfield      #7                  // Field taskExecutor:Ljava/util/concurrent/Executor;
      20: invokestatic  #138                // Method reactor/core/scheduler/Schedulers.fromExecutor:(Ljava/util/concurrent/Executor;)Lreactor/core/scheduler/Scheduler;
      23: invokevirtual #139                // Method reactor/core/publisher/Flux.subscribeOn:(Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
      26: aload_1
      27: invokedynamic #140,  0            // InvokeDynamic #13:run:(Lorg/springframework/scheduling/support/SimpleTriggerContext;)Ljava/lang/Runnable;
      32: invokevirtual #141                // Method reactor/core/publisher/Flux.doOnComplete:(Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      35: areturn

  private static void lambda$null$6(org.springframework.scheduling.support.SimpleTriggerContext);
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #142                // Method org/springframework/scheduling/support/SimpleTriggerContext.lastScheduledExecutionTime:()Ljava/util/Date;
       5: aload_0
       6: invokevirtual #143                // Method org/springframework/scheduling/support/SimpleTriggerContext.lastActualExecutionTime:()Ljava/util/Date;
       9: new           #144                // class java/util/Date
      12: dup
      13: invokespecial #145                // Method java/util/Date."<init>":()V
      16: invokevirtual #146                // Method org/springframework/scheduling/support/SimpleTriggerContext.update:(Ljava/util/Date;Ljava/util/Date;Ljava/util/Date;)V
      19: return

  private void lambda$null$5(reactor.core.publisher.SynchronousSink);
    Code:
       0: aload_0
       1: invokespecial #147                // Method pollForMessage:()Lorg/springframework/messaging/Message;
       4: astore_2
       5: aload_2
       6: ifnull        19
       9: aload_1
      10: aload_2
      11: invokeinterface #148,  2          // InterfaceMethod reactor/core/publisher/SynchronousSink.next:(Ljava/lang/Object;)V
      16: goto          25
      19: aload_1
      20: invokeinterface #149,  1          // InterfaceMethod reactor/core/publisher/SynchronousSink.complete:()V
      25: return

  private static void lambda$null$4(org.springframework.scheduling.support.SimpleTriggerContext, java.lang.Long);
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #142                // Method org/springframework/scheduling/support/SimpleTriggerContext.lastScheduledExecutionTime:()Ljava/util/Date;
       5: new           #144                // class java/util/Date
       8: dup
       9: invokespecial #145                // Method java/util/Date."<init>":()V
      12: aconst_null
      13: invokevirtual #146                // Method org/springframework/scheduling/support/SimpleTriggerContext.update:(Ljava/util/Date;Ljava/util/Date;Ljava/util/Date;)V
      16: return

  private void lambda$createFluxGenerator$3(org.springframework.scheduling.support.SimpleTriggerContext, reactor.core.publisher.SynchronousSink);
    Code:
       0: aload_0
       1: getfield      #15                 // Field trigger:Lorg/springframework/scheduling/Trigger;
       4: aload_1
       5: invokeinterface #150,  2          // InterfaceMethod org/springframework/scheduling/Trigger.nextExecutionTime:(Lorg/springframework/scheduling/TriggerContext;)Ljava/util/Date;
      10: astore_3
      11: aload_3
      12: ifnull        46
      15: aload_1
      16: aload_3
      17: aconst_null
      18: aconst_null
      19: invokevirtual #146                // Method org/springframework/scheduling/support/SimpleTriggerContext.update:(Ljava/util/Date;Ljava/util/Date;Ljava/util/Date;)V
      22: aload_3
      23: invokevirtual #151                // Method java/util/Date.getTime:()J
      26: invokestatic  #152                // Method java/lang/System.currentTimeMillis:()J
      29: lsub
      30: lstore        4
      32: aload_2
      33: lload         4
      35: invokestatic  #153                // Method java/time/Duration.ofMillis:(J)Ljava/time/Duration;
      38: invokeinterface #148,  2          // InterfaceMethod reactor/core/publisher/SynchronousSink.next:(Ljava/lang/Object;)V
      43: goto          52
      46: aload_2
      47: invokeinterface #149,  1          // InterfaceMethod reactor/core/publisher/SynchronousSink.complete:()V
      52: return

  private void lambda$createPoller$2();
    Code:
       0: aload_0
       1: getfield      #7                  // Field taskExecutor:Ljava/util/concurrent/Executor;
       4: aload_0
       5: invokedynamic #154,  0            // InvokeDynamic #14:run:(Lorg/springframework/integration/endpoint/AbstractPollingEndpoint;)Ljava/lang/Runnable;
      10: invokeinterface #155,  2          // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      15: return

  private void lambda$null$1();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #31                 // Field initialized:Z
       6: ifeq          44
       9: aload_0
      10: getfield      #18                 // Field maxMessagesPerPoll:J
      13: lconst_0
      14: lcmp
      15: ifle          28
      18: iload_1
      19: i2l
      20: aload_0
      21: getfield      #18                 // Field maxMessagesPerPoll:J
      24: lcmp
      25: ifge          44
      28: aload_0
      29: invokespecial #147                // Method pollForMessage:()Lorg/springframework/messaging/Message;
      32: ifnonnull     38
      35: goto          44
      38: iinc          1, 1
      41: goto          2
      44: return

  private boolean lambda$createPollingTask$0(org.aopalliance.aop.Advice);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #156                // Method isReceiveOnlyAdvice:(Lorg/aopalliance/aop/Advice;)Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn
}
