Compiled from "FluxMessageChannel.java"
public class org.springframework.integration.channel.FluxMessageChannel extends org.springframework.integration.channel.AbstractMessageChannel implements org.reactivestreams.Publisher<org.springframework.messaging.Message<?>>, org.springframework.integration.channel.ReactiveStreamsSubscribableChannel {
  private final java.util.List<org.reactivestreams.Subscriber<? super org.springframework.messaging.Message<?>>> subscribers;

  private final java.util.Map<org.reactivestreams.Publisher<org.springframework.messaging.Message<?>>, reactor.core.publisher.ConnectableFlux<?>> publishers;

  private final reactor.core.publisher.Flux<org.springframework.messaging.Message<?>> flux;

  private reactor.core.publisher.FluxSink<org.springframework.messaging.Message<?>> sink;

  public org.springframework.integration.channel.FluxMessageChannel();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/integration/channel/AbstractMessageChannel."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #4                  // Field subscribers:Ljava/util/List;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/ConcurrentHashMap
      19: dup
      20: invokespecial #6                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      23: putfield      #7                  // Field publishers:Ljava/util/Map;
      26: aload_0
      27: aload_0
      28: invokedynamic #8,  0              // InvokeDynamic #0:accept:(Lorg/springframework/integration/channel/FluxMessageChannel;)Ljava/util/function/Consumer;
      33: getstatic     #9                  // Field reactor/core/publisher/FluxSink$OverflowStrategy.IGNORE:Lreactor/core/publisher/FluxSink$OverflowStrategy;
      36: invokestatic  #10                 // Method reactor/core/publisher/Flux.create:(Ljava/util/function/Consumer;Lreactor/core/publisher/FluxSink$OverflowStrategy;)Lreactor/core/publisher/Flux;
      39: invokevirtual #11                 // Method reactor/core/publisher/Flux.publish:()Lreactor/core/publisher/ConnectableFlux;
      42: invokevirtual #12                 // Method reactor/core/publisher/ConnectableFlux.autoConnect:()Lreactor/core/publisher/Flux;
      45: putfield      #13                 // Field flux:Lreactor/core/publisher/Flux;
      48: return

  protected boolean doSend(org.springframework.messaging.Message<?>, long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field subscribers:Ljava/util/List;
       4: invokeinterface #14,  1           // InterfaceMethod java/util/List.size:()I
       9: ifle          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: aload_0
      18: invokedynamic #15,  0             // InvokeDynamic #1:get:(Lorg/springframework/integration/channel/FluxMessageChannel;)Ljava/util/function/Supplier;
      23: invokestatic  #16                 // Method org/springframework/util/Assert.state:(ZLjava/util/function/Supplier;)V
      26: aload_0
      27: getfield      #17                 // Field sink:Lreactor/core/publisher/FluxSink;
      30: aload_1
      31: invokeinterface #18,  2           // InterfaceMethod reactor/core/publisher/FluxSink.next:(Ljava/lang/Object;)Lreactor/core/publisher/FluxSink;
      36: pop
      37: iconst_1
      38: ireturn

  public void subscribe(org.reactivestreams.Subscriber<? super org.springframework.messaging.Message<?>>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field subscribers:Ljava/util/List;
       4: aload_1
       5: invokeinterface #19,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: getfield      #13                 // Field flux:Lreactor/core/publisher/Flux;
      15: aload_0
      16: aload_1
      17: invokedynamic #20,  0             // InvokeDynamic #2:run:(Lorg/springframework/integration/channel/FluxMessageChannel;Lorg/reactivestreams/Subscriber;)Ljava/lang/Runnable;
      22: invokevirtual #21                 // Method reactor/core/publisher/Flux.doOnCancel:(Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      25: invokevirtual #22                 // Method reactor/core/publisher/Flux.retry:()Lreactor/core/publisher/Flux;
      28: aload_1
      29: invokevirtual #23                 // Method reactor/core/publisher/Flux.subscribe:(Lorg/reactivestreams/Subscriber;)V
      32: aload_0
      33: getfield      #7                  // Field publishers:Ljava/util/Map;
      36: invokeinterface #24,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      41: invokedynamic #25,  0             // InvokeDynamic #3:accept:()Ljava/util/function/Consumer;
      46: invokeinterface #26,  2           // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
      51: return

  public void subscribeTo(org.reactivestreams.Publisher<org.springframework.messaging.Message<?>>);
    Code:
       0: aload_1
       1: invokestatic  #27                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       4: aload_0
       5: invokedynamic #28,  0             // InvokeDynamic #4:accept:(Lorg/springframework/integration/channel/FluxMessageChannel;)Ljava/util/function/BiConsumer;
      10: invokevirtual #29                 // Method reactor/core/publisher/Flux.handle:(Ljava/util/function/BiConsumer;)Lreactor/core/publisher/Flux;
      13: aload_0
      14: invokedynamic #30,  0             // InvokeDynamic #5:accept:(Lorg/springframework/integration/channel/FluxMessageChannel;)Ljava/util/function/BiConsumer;
      19: invokevirtual #31                 // Method reactor/core/publisher/Flux.onErrorContinue:(Ljava/util/function/BiConsumer;)Lreactor/core/publisher/Flux;
      22: aload_0
      23: aload_1
      24: invokedynamic #32,  0             // InvokeDynamic #6:run:(Lorg/springframework/integration/channel/FluxMessageChannel;Lorg/reactivestreams/Publisher;)Ljava/lang/Runnable;
      29: invokevirtual #33                 // Method reactor/core/publisher/Flux.doOnComplete:(Ljava/lang/Runnable;)Lreactor/core/publisher/Flux;
      32: invokevirtual #11                 // Method reactor/core/publisher/Flux.publish:()Lreactor/core/publisher/ConnectableFlux;
      35: astore_2
      36: aload_0
      37: getfield      #7                  // Field publishers:Ljava/util/Map;
      40: aload_1
      41: aload_2
      42: invokeinterface #34,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      47: pop
      48: aload_0
      49: getfield      #4                  // Field subscribers:Ljava/util/List;
      52: invokeinterface #35,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      57: ifne          65
      60: aload_2
      61: invokevirtual #36                 // Method reactor/core/publisher/ConnectableFlux.connect:()Lreactor/core/Disposable;
      64: pop
      65: return

  private void lambda$subscribeTo$5(org.reactivestreams.Publisher);
    Code:
       0: aload_0
       1: getfield      #7                  // Field publishers:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #37,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #38                 // class reactor/core/publisher/ConnectableFlux
      13: pop
      14: return

  private void lambda$subscribeTo$4(java.lang.Throwable, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #39                 // Field logger:Lorg/apache/commons/logging/Log;
       4: new           #40                 // class java/lang/StringBuilder
       7: dup
       8: invokespecial #41                 // Method java/lang/StringBuilder."<init>":()V
      11: ldc           #42                 // String Error during processing event:
      13: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_2
      17: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      20: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      23: aload_1
      24: invokeinterface #46,  3           // InterfaceMethod org/apache/commons/logging/Log.warn:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      29: return

  private void lambda$subscribeTo$3(org.springframework.messaging.Message, reactor.core.publisher.SynchronousSink);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokevirtual #47                 // Method send:(Lorg/springframework/messaging/Message;)Z
       6: invokestatic  #48                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       9: invokeinterface #49,  2           // InterfaceMethod reactor/core/publisher/SynchronousSink.next:(Ljava/lang/Object;)V
      14: return

  private void lambda$subscribe$2(org.reactivestreams.Subscriber);
    Code:
       0: aload_0
       1: getfield      #4                  // Field subscribers:Ljava/util/List;
       4: aload_1
       5: invokeinterface #50,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      10: pop
      11: return

  private java.lang.String lambda$doSend$1();
    Code:
       0: new           #40                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #41                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #51                 // String The [
       9: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      16: ldc           #52                 // String ] doesn\'t have subscribers to accept messages
      18: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      24: areturn

  private void lambda$new$0(reactor.core.publisher.FluxSink);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field sink:Lreactor/core/publisher/FluxSink;
       5: return
}
