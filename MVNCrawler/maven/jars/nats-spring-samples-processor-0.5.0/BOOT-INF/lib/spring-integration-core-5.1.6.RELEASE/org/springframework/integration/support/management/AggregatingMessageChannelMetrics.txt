Compiled from "AggregatingMessageChannelMetrics.java"
public class org.springframework.integration.support.management.AggregatingMessageChannelMetrics extends org.springframework.integration.support.management.DefaultMessageChannelMetrics {
  private static final int DEFAULT_SAMPLE_SIZE;

  private final int sampleSize;

  private long start;

  public org.springframework.integration.support.management.AggregatingMessageChannelMetrics();
    Code:
       0: aload_0
       1: aconst_null
       2: sipush        1000
       5: invokespecial #2                  // Method "<init>":(Ljava/lang/String;I)V
       8: return

  public org.springframework.integration.support.management.AggregatingMessageChannelMetrics(java.lang.String, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method org/springframework/integration/support/management/DefaultMessageChannelMetrics."<init>":(Ljava/lang/String;)V
       5: aload_0
       6: iload_2
       7: putfield      #4                  // Field sampleSize:I
      10: return

  public org.springframework.integration.support.management.AggregatingMessageChannelMetrics(java.lang.String, org.springframework.integration.support.management.ExponentialMovingAverage, org.springframework.integration.support.management.ExponentialMovingAverageRate, org.springframework.integration.support.management.ExponentialMovingAverageRatio, org.springframework.integration.support.management.ExponentialMovingAverageRate, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: invokespecial #5                  // Method org/springframework/integration/support/management/DefaultMessageChannelMetrics."<init>":(Ljava/lang/String;Lorg/springframework/integration/support/management/ExponentialMovingAverage;Lorg/springframework/integration/support/management/ExponentialMovingAverageRate;Lorg/springframework/integration/support/management/ExponentialMovingAverageRatio;Lorg/springframework/integration/support/management/ExponentialMovingAverageRate;)V
      11: aload_0
      12: iload         6
      14: putfield      #4                  // Field sampleSize:I
      17: return

  public synchronized org.springframework.integration.support.management.MetricsContext beforeSend();
    Code:
       0: aload_0
       1: getfield      #6                  // Field sendCount:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicLong.getAndIncrement:()J
       7: lstore_1
       8: aload_0
       9: invokevirtual #8                  // Method isFullStatsEnabled:()Z
      12: ifeq          45
      15: lload_1
      16: aload_0
      17: getfield      #4                  // Field sampleSize:I
      20: i2l
      21: lrem
      22: lconst_0
      23: lcmp
      24: ifne          45
      27: aload_0
      28: invokestatic  #9                  // Method java/lang/System.nanoTime:()J
      31: putfield      #10                 // Field start:J
      34: aload_0
      35: getfield      #11                 // Field sendRate:Lorg/springframework/integration/support/management/ExponentialMovingAverageRate;
      38: aload_0
      39: getfield      #10                 // Field start:J
      42: invokevirtual #12                 // Method org/springframework/integration/support/management/ExponentialMovingAverageRate.increment:(J)V
      45: new           #13                 // class org/springframework/integration/support/management/AggregatingMessageChannelMetrics$AggregatingChannelMetricsContext
      48: dup
      49: aload_0
      50: getfield      #10                 // Field start:J
      53: lload_1
      54: lconst_1
      55: ladd
      56: invokespecial #14                 // Method org/springframework/integration/support/management/AggregatingMessageChannelMetrics$AggregatingChannelMetricsContext."<init>":(JJ)V
      59: areturn

  public void afterSend(org.springframework.integration.support.management.MetricsContext, boolean);
    Code:
       0: aload_1
       1: checkcast     #13                 // class org/springframework/integration/support/management/AggregatingMessageChannelMetrics$AggregatingChannelMetricsContext
       4: astore_3
       5: aload_3
       6: getfield      #15                 // Field org/springframework/integration/support/management/AggregatingMessageChannelMetrics$AggregatingChannelMetricsContext.newCount:J
       9: lstore        4
      11: iload_2
      12: ifeq          67
      15: aload_0
      16: invokevirtual #8                  // Method isFullStatsEnabled:()Z
      19: ifeq          118
      22: lload         4
      24: aload_0
      25: getfield      #4                  // Field sampleSize:I
      28: i2l
      29: lrem
      30: lconst_0
      31: lcmp
      32: ifne          118
      35: invokestatic  #9                  // Method java/lang/System.nanoTime:()J
      38: lstore        6
      40: aload_0
      41: getfield      #16                 // Field sendSuccessRatio:Lorg/springframework/integration/support/management/ExponentialMovingAverageRatio;
      44: lload         6
      46: invokevirtual #17                 // Method org/springframework/integration/support/management/ExponentialMovingAverageRatio.success:(J)V
      49: aload_0
      50: getfield      #18                 // Field sendDuration:Lorg/springframework/integration/support/management/ExponentialMovingAverage;
      53: lload         6
      55: aload_3
      56: getfield      #19                 // Field org/springframework/integration/support/management/AggregatingMessageChannelMetrics$AggregatingChannelMetricsContext.start:J
      59: lsub
      60: l2d
      61: invokevirtual #20                 // Method org/springframework/integration/support/management/ExponentialMovingAverage.append:(D)V
      64: goto          118
      67: aload_0
      68: invokevirtual #8                  // Method isFullStatsEnabled:()Z
      71: ifeq          110
      74: lload         4
      76: aload_0
      77: getfield      #4                  // Field sampleSize:I
      80: i2l
      81: lrem
      82: lconst_0
      83: lcmp
      84: ifne          110
      87: invokestatic  #9                  // Method java/lang/System.nanoTime:()J
      90: lstore        6
      92: aload_0
      93: getfield      #16                 // Field sendSuccessRatio:Lorg/springframework/integration/support/management/ExponentialMovingAverageRatio;
      96: lload         6
      98: invokevirtual #21                 // Method org/springframework/integration/support/management/ExponentialMovingAverageRatio.failure:(J)V
     101: aload_0
     102: getfield      #22                 // Field sendErrorRate:Lorg/springframework/integration/support/management/ExponentialMovingAverageRate;
     105: lload         6
     107: invokevirtual #12                 // Method org/springframework/integration/support/management/ExponentialMovingAverageRate.increment:(J)V
     110: aload_0
     111: getfield      #23                 // Field sendErrorCount:Ljava/util/concurrent/atomic/AtomicLong;
     114: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
     117: pop2
     118: return
}
