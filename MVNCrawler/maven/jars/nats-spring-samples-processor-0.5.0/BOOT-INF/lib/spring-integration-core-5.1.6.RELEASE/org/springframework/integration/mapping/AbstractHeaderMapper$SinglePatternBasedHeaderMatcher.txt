Compiled from "AbstractHeaderMapper.java"
public class org.springframework.integration.mapping.AbstractHeaderMapper$SinglePatternBasedHeaderMatcher implements org.springframework.integration.mapping.AbstractHeaderMapper$HeaderMatcher {
  private static final org.apache.commons.logging.Log logger;

  private final java.lang.String pattern;

  private final boolean negate;

  public org.springframework.integration.mapping.AbstractHeaderMapper$SinglePatternBasedHeaderMatcher(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokespecial #1                  // Method "<init>":(Ljava/lang/String;Z)V
       6: return

  public org.springframework.integration.mapping.AbstractHeaderMapper$SinglePatternBasedHeaderMatcher(java.lang.String, boolean);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #3                  // String Pattern must no be null
       7: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: invokevirtual #5                  // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      15: putfield      #6                  // Field pattern:Ljava/lang/String;
      18: aload_0
      19: iload_2
      20: putfield      #7                  // Field negate:Z
      23: return

  public boolean matchHeader(java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #5                  // Method java/lang/String.toLowerCase:()Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: getfield      #6                  // Field pattern:Ljava/lang/String;
       9: aload_2
      10: invokestatic  #8                  // Method org/springframework/util/PatternMatchUtils.simpleMatch:(Ljava/lang/String;Ljava/lang/String;)Z
      13: ifeq          57
      16: getstatic     #9                  // Field logger:Lorg/apache/commons/logging/Log;
      19: invokeinterface #10,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      24: ifeq          55
      27: getstatic     #9                  // Field logger:Lorg/apache/commons/logging/Log;
      30: ldc           #11                 // String headerName=[{0}] WILL be mapped, matched pattern={1}
      32: iconst_2
      33: anewarray     #12                 // class java/lang/Object
      36: dup
      37: iconst_0
      38: aload_1
      39: aastore
      40: dup
      41: iconst_1
      42: aload_0
      43: getfield      #6                  // Field pattern:Ljava/lang/String;
      46: aastore
      47: invokestatic  #13                 // Method java/text/MessageFormat.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      50: invokeinterface #14,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      55: iconst_1
      56: ireturn
      57: iconst_0
      58: ireturn

  public boolean isNegated();
    Code:
       0: aload_0
       1: getfield      #7                  // Field negate:Z
       4: ireturn

  static {};
    Code:
       0: ldc           #15                 // class org/springframework/integration/mapping/AbstractHeaderMapper$HeaderMatcher
       2: invokestatic  #16                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #9                  // Field logger:Lorg/apache/commons/logging/Log;
       8: return
}
