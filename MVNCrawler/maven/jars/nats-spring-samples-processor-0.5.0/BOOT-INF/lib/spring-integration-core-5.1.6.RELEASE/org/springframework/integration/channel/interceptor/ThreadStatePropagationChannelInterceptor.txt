Compiled from "ThreadStatePropagationChannelInterceptor.java"
public abstract class org.springframework.integration.channel.interceptor.ThreadStatePropagationChannelInterceptor<S> implements org.springframework.messaging.support.ChannelInterceptor, org.springframework.messaging.support.ExecutorChannelInterceptor {
  public org.springframework.integration.channel.interceptor.ThreadStatePropagationChannelInterceptor();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public final org.springframework.messaging.Message<?> preSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #2                  // Method obtainPropagatingContext:(Lorg/springframework/messaging/Message;Lorg/springframework/messaging/MessageChannel;)Ljava/lang/Object;
       6: astore_3
       7: aload_3
       8: ifnull        21
      11: new           #3                  // class org/springframework/integration/channel/interceptor/ThreadStatePropagationChannelInterceptor$MessageWithThreadState
      14: dup
      15: aload_1
      16: aload_3
      17: invokespecial #4                  // Method org/springframework/integration/channel/interceptor/ThreadStatePropagationChannelInterceptor$MessageWithThreadState."<init>":(Lorg/springframework/messaging/Message;Ljava/lang/Object;)V
      20: areturn
      21: aload_1
      22: areturn

  public final org.springframework.messaging.Message<?> postReceive(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel);
    Code:
       0: aload_1
       1: instanceof    #3                  // class org/springframework/integration/channel/interceptor/ThreadStatePropagationChannelInterceptor$MessageWithThreadState
       4: ifeq          32
       7: aload_1
       8: checkcast     #3                  // class org/springframework/integration/channel/interceptor/ThreadStatePropagationChannelInterceptor$MessageWithThreadState
      11: astore_3
      12: aload_3
      13: invokestatic  #5                  // Method org/springframework/integration/channel/interceptor/ThreadStatePropagationChannelInterceptor$MessageWithThreadState.access$000:(Lorg/springframework/integration/channel/interceptor/ThreadStatePropagationChannelInterceptor$MessageWithThreadState;)Lorg/springframework/messaging/Message;
      16: astore        4
      18: aload_0
      19: aload_3
      20: invokestatic  #6                  // Method org/springframework/integration/channel/interceptor/ThreadStatePropagationChannelInterceptor$MessageWithThreadState.access$100:(Lorg/springframework/integration/channel/interceptor/ThreadStatePropagationChannelInterceptor$MessageWithThreadState;)Ljava/lang/Object;
      23: aload         4
      25: aload_2
      26: invokevirtual #7                  // Method populatePropagatedContext:(Ljava/lang/Object;Lorg/springframework/messaging/Message;Lorg/springframework/messaging/MessageChannel;)V
      29: aload         4
      31: areturn
      32: aload_1
      33: areturn

  public final org.springframework.messaging.Message<?> beforeHandle(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, org.springframework.messaging.MessageHandler);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #8                  // Method postReceive:(Lorg/springframework/messaging/Message;Lorg/springframework/messaging/MessageChannel;)Lorg/springframework/messaging/Message;
       6: areturn

  public void afterMessageHandled(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, org.springframework.messaging.MessageHandler, java.lang.Exception);
    Code:
       0: return

  protected abstract S obtainPropagatingContext(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel);

  protected abstract void populatePropagatedContext(S, org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel);
}
