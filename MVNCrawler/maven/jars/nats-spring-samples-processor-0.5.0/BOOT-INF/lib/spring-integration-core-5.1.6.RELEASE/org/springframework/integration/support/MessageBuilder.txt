Compiled from "MessageBuilder.java"
public final class org.springframework.integration.support.MessageBuilder<T> extends org.springframework.integration.support.AbstractIntegrationMessageBuilder<T> {
  private static final org.apache.commons.logging.Log logger;

  private final T payload;

  private final org.springframework.integration.IntegrationMessageHeaderAccessor headerAccessor;

  private final org.springframework.messaging.Message<T> originalMessage;

  private volatile boolean modified;

  private java.lang.String[] readOnlyHeaders;

  private org.springframework.integration.support.MessageBuilder(T, org.springframework.messaging.Message<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder."<init>":()V
       4: aload_1
       5: ldc           #2                  // String payload must not be null
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: putfield      #4                  // Field payload:Ljava/lang/Object;
      15: aload_0
      16: aload_2
      17: putfield      #5                  // Field originalMessage:Lorg/springframework/messaging/Message;
      20: aload_0
      21: new           #6                  // class org/springframework/integration/IntegrationMessageHeaderAccessor
      24: dup
      25: aload_2
      26: invokespecial #7                  // Method org/springframework/integration/IntegrationMessageHeaderAccessor."<init>":(Lorg/springframework/messaging/Message;)V
      29: putfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
      32: aload_2
      33: ifnull        61
      36: aload_0
      37: aload_0
      38: getfield      #4                  // Field payload:Ljava/lang/Object;
      41: aload_2
      42: invokeinterface #9,  1            // InterfaceMethod org/springframework/messaging/Message.getPayload:()Ljava/lang/Object;
      47: invokevirtual #10                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      50: ifne          57
      53: iconst_1
      54: goto          58
      57: iconst_0
      58: putfield      #11                 // Field modified:Z
      61: return

  public T getPayload();
    Code:
       0: aload_0
       1: getfield      #4                  // Field payload:Ljava/lang/Object;
       4: areturn

  public java.util.Map<java.lang.String, java.lang.Object> getHeaders();
    Code:
       0: aload_0
       1: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
       4: invokevirtual #12                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.toMap:()Ljava/util/Map;
       7: areturn

  public static <T> org.springframework.integration.support.MessageBuilder<T> fromMessage(org.springframework.messaging.Message<T>);
    Code:
       0: aload_0
       1: ldc           #13                 // String message must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: new           #14                 // class org/springframework/integration/support/MessageBuilder
       9: dup
      10: aload_0
      11: invokeinterface #9,  1            // InterfaceMethod org/springframework/messaging/Message.getPayload:()Ljava/lang/Object;
      16: aload_0
      17: invokespecial #15                 // Method "<init>":(Ljava/lang/Object;Lorg/springframework/messaging/Message;)V
      20: areturn

  public static <T> org.springframework.integration.support.MessageBuilder<T> withPayload(T);
    Code:
       0: new           #14                 // class org/springframework/integration/support/MessageBuilder
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #15                 // Method "<init>":(Ljava/lang/Object;Lorg/springframework/messaging/Message;)V
       9: areturn

  public org.springframework.integration.support.MessageBuilder<T> setHeader(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
       4: aload_1
       5: aload_2
       6: invokevirtual #16                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.setHeader:(Ljava/lang/String;Ljava/lang/Object;)V
       9: aload_0
      10: areturn

  public org.springframework.integration.support.MessageBuilder<T> setHeaderIfAbsent(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
       4: aload_1
       5: aload_2
       6: invokevirtual #17                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.setHeaderIfAbsent:(Ljava/lang/String;Ljava/lang/Object;)V
       9: aload_0
      10: areturn

  public org.springframework.integration.support.MessageBuilder<T> removeHeaders(java.lang.String...);
    Code:
       0: aload_0
       1: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
       4: aload_1
       5: invokevirtual #18                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.removeHeaders:([Ljava/lang/String;)V
       8: aload_0
       9: areturn

  public org.springframework.integration.support.MessageBuilder<T> removeHeader(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
       4: aload_1
       5: invokevirtual #19                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.isReadOnly:(Ljava/lang/String;)Z
       8: ifne          22
      11: aload_0
      12: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
      15: aload_1
      16: invokevirtual #20                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.removeHeader:(Ljava/lang/String;)V
      19: goto          65
      22: getstatic     #21                 // Field logger:Lorg/apache/commons/logging/Log;
      25: invokeinterface #22,  1           // InterfaceMethod org/apache/commons/logging/Log.isInfoEnabled:()Z
      30: ifeq          65
      33: getstatic     #21                 // Field logger:Lorg/apache/commons/logging/Log;
      36: new           #23                 // class java/lang/StringBuilder
      39: dup
      40: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
      43: ldc           #25                 // String The header [
      45: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_1
      49: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: ldc           #27                 // String ] is ignored for removal because it is is readOnly.
      54: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      60: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      65: aload_0
      66: areturn

  public org.springframework.integration.support.MessageBuilder<T> copyHeaders(java.util.Map<java.lang.String, ?>);
    Code:
       0: aload_0
       1: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
       4: aload_1
       5: invokevirtual #30                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.copyHeaders:(Ljava/util/Map;)V
       8: aload_0
       9: areturn

  public org.springframework.integration.support.MessageBuilder<T> copyHeadersIfAbsent(java.util.Map<java.lang.String, ?>);
    Code:
       0: aload_1
       1: ifnull        76
       4: aload_1
       5: invokeinterface #31,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      10: invokeinterface #32,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          76
      25: aload_2
      26: invokeinterface #34,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #35                 // class java/util/Map$Entry
      34: astore_3
      35: aload_3
      36: invokeinterface #36,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      41: checkcast     #37                 // class java/lang/String
      44: astore        4
      46: aload_0
      47: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
      50: aload         4
      52: invokevirtual #19                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.isReadOnly:(Ljava/lang/String;)Z
      55: ifne          73
      58: aload_0
      59: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
      62: aload         4
      64: aload_3
      65: invokeinterface #38,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      70: invokevirtual #17                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.setHeaderIfAbsent:(Ljava/lang/String;Ljava/lang/Object;)V
      73: goto          16
      76: aload_0
      77: areturn

  protected java.util.List<java.util.List<java.lang.Object>> getSequenceDetails();
    Code:
       0: aload_0
       1: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
       4: ldc           #39                 // String sequenceDetails
       6: invokevirtual #40                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.getHeader:(Ljava/lang/String;)Ljava/lang/Object;
       9: checkcast     #41                 // class java/util/List
      12: areturn

  protected java.lang.Object getCorrelationId();
    Code:
       0: aload_0
       1: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
       4: invokevirtual #42                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.getCorrelationId:()Ljava/lang/Object;
       7: areturn

  protected java.lang.Object getSequenceNumber();
    Code:
       0: aload_0
       1: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
       4: invokevirtual #43                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.getSequenceNumber:()I
       7: invokestatic  #44                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      10: areturn

  protected java.lang.Object getSequenceSize();
    Code:
       0: aload_0
       1: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
       4: invokevirtual #45                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.getSequenceSize:()I
       7: invokestatic  #44                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      10: areturn

  public org.springframework.integration.support.MessageBuilder<T> pushSequenceDetails(java.lang.Object, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokespecial #46                 // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder.pushSequenceDetails:(Ljava/lang/Object;II)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
       7: pop
       8: aload_0
       9: areturn

  public org.springframework.integration.support.MessageBuilder<T> popSequenceDetails();
    Code:
       0: aload_0
       1: invokespecial #47                 // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder.popSequenceDetails:()Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
       4: pop
       5: aload_0
       6: areturn

  public org.springframework.integration.support.MessageBuilder<T> setExpirationDate(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #48                 // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder.setExpirationDate:(Ljava/lang/Long;)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
       5: pop
       6: aload_0
       7: areturn

  public org.springframework.integration.support.MessageBuilder<T> setExpirationDate(java.util.Date);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #49                 // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder.setExpirationDate:(Ljava/util/Date;)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
       5: pop
       6: aload_0
       7: areturn

  public org.springframework.integration.support.MessageBuilder<T> setCorrelationId(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #50                 // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder.setCorrelationId:(Ljava/lang/Object;)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
       5: pop
       6: aload_0
       7: areturn

  public org.springframework.integration.support.MessageBuilder<T> setReplyChannel(org.springframework.messaging.MessageChannel);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #51                 // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder.setReplyChannel:(Lorg/springframework/messaging/MessageChannel;)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
       5: pop
       6: aload_0
       7: areturn

  public org.springframework.integration.support.MessageBuilder<T> setReplyChannelName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #52                 // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder.setReplyChannelName:(Ljava/lang/String;)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
       5: pop
       6: aload_0
       7: areturn

  public org.springframework.integration.support.MessageBuilder<T> setErrorChannel(org.springframework.messaging.MessageChannel);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #53                 // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder.setErrorChannel:(Lorg/springframework/messaging/MessageChannel;)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
       5: pop
       6: aload_0
       7: areturn

  public org.springframework.integration.support.MessageBuilder<T> setErrorChannelName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #54                 // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder.setErrorChannelName:(Ljava/lang/String;)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
       5: pop
       6: aload_0
       7: areturn

  public org.springframework.integration.support.MessageBuilder<T> setSequenceNumber(java.lang.Integer);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #55                 // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder.setSequenceNumber:(Ljava/lang/Integer;)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
       5: pop
       6: aload_0
       7: areturn

  public org.springframework.integration.support.MessageBuilder<T> setSequenceSize(java.lang.Integer);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #56                 // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder.setSequenceSize:(Ljava/lang/Integer;)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
       5: pop
       6: aload_0
       7: areturn

  public org.springframework.integration.support.MessageBuilder<T> setPriority(java.lang.Integer);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #57                 // Method org/springframework/integration/support/AbstractIntegrationMessageBuilder.setPriority:(Ljava/lang/Integer;)Lorg/springframework/integration/support/AbstractIntegrationMessageBuilder;
       5: pop
       6: aload_0
       7: areturn

  public org.springframework.integration.support.MessageBuilder<T> readOnlyHeaders(java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #58                 // Field readOnlyHeaders:[Ljava/lang/String;
       5: aload_0
       6: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
       9: aload_1
      10: invokevirtual #59                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.setReadOnlyHeaders:([Ljava/lang/String;)V
      13: aload_0
      14: areturn

  public org.springframework.messaging.Message<T> build();
    Code:
       0: aload_0
       1: getfield      #11                 // Field modified:Z
       4: ifne          45
       7: aload_0
       8: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
      11: invokevirtual #60                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.isModified:()Z
      14: ifne          45
      17: aload_0
      18: getfield      #5                  // Field originalMessage:Lorg/springframework/messaging/Message;
      21: ifnull        45
      24: aload_0
      25: aload_0
      26: getfield      #5                  // Field originalMessage:Lorg/springframework/messaging/Message;
      29: invokeinterface #61,  1           // InterfaceMethod org/springframework/messaging/Message.getHeaders:()Lorg/springframework/messaging/MessageHeaders;
      34: invokespecial #62                 // Method containsReadOnly:(Lorg/springframework/messaging/MessageHeaders;)Z
      37: ifne          45
      40: aload_0
      41: getfield      #5                  // Field originalMessage:Lorg/springframework/messaging/Message;
      44: areturn
      45: aload_0
      46: getfield      #4                  // Field payload:Ljava/lang/Object;
      49: instanceof    #63                 // class java/lang/Throwable
      52: ifeq          77
      55: new           #64                 // class org/springframework/messaging/support/ErrorMessage
      58: dup
      59: aload_0
      60: getfield      #4                  // Field payload:Ljava/lang/Object;
      63: checkcast     #63                 // class java/lang/Throwable
      66: aload_0
      67: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
      70: invokevirtual #12                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.toMap:()Ljava/util/Map;
      73: invokespecial #65                 // Method org/springframework/messaging/support/ErrorMessage."<init>":(Ljava/lang/Throwable;Ljava/util/Map;)V
      76: areturn
      77: new           #66                 // class org/springframework/messaging/support/GenericMessage
      80: dup
      81: aload_0
      82: getfield      #4                  // Field payload:Ljava/lang/Object;
      85: aload_0
      86: getfield      #8                  // Field headerAccessor:Lorg/springframework/integration/IntegrationMessageHeaderAccessor;
      89: invokevirtual #12                 // Method org/springframework/integration/IntegrationMessageHeaderAccessor.toMap:()Ljava/util/Map;
      92: invokespecial #67                 // Method org/springframework/messaging/support/GenericMessage."<init>":(Ljava/lang/Object;Ljava/util/Map;)V
      95: areturn

  private boolean containsReadOnly(org.springframework.messaging.MessageHeaders);
    Code:
       0: aload_0
       1: getfield      #58                 // Field readOnlyHeaders:[Ljava/lang/String;
       4: invokestatic  #68                 // Method org/springframework/util/ObjectUtils.isEmpty:([Ljava/lang/Object;)Z
       7: ifne          50
      10: aload_0
      11: getfield      #58                 // Field readOnlyHeaders:[Ljava/lang/String;
      14: astore_2
      15: aload_2
      16: arraylength
      17: istore_3
      18: iconst_0
      19: istore        4
      21: iload         4
      23: iload_3
      24: if_icmpge     50
      27: aload_2
      28: iload         4
      30: aaload
      31: astore        5
      33: aload_1
      34: aload         5
      36: invokevirtual #69                 // Method org/springframework/messaging/MessageHeaders.containsKey:(Ljava/lang/Object;)Z
      39: ifeq          44
      42: iconst_1
      43: ireturn
      44: iinc          4, 1
      47: goto          21
      50: iconst_0
      51: ireturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder copyHeadersIfAbsent(java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #70                 // Method copyHeadersIfAbsent:(Ljava/util/Map;)Lorg/springframework/integration/support/MessageBuilder;
       5: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder copyHeaders(java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #71                 // Method copyHeaders:(Ljava/util/Map;)Lorg/springframework/integration/support/MessageBuilder;
       5: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder removeHeader(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #72                 // Method removeHeader:(Ljava/lang/String;)Lorg/springframework/integration/support/MessageBuilder;
       5: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder removeHeaders(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #73                 // Method removeHeaders:([Ljava/lang/String;)Lorg/springframework/integration/support/MessageBuilder;
       5: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder setHeaderIfAbsent(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #74                 // Method setHeaderIfAbsent:(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/integration/support/MessageBuilder;
       6: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder setHeader(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #75                 // Method setHeader:(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/integration/support/MessageBuilder;
       6: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder setPriority(java.lang.Integer);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #76                 // Method setPriority:(Ljava/lang/Integer;)Lorg/springframework/integration/support/MessageBuilder;
       5: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder setSequenceSize(java.lang.Integer);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #77                 // Method setSequenceSize:(Ljava/lang/Integer;)Lorg/springframework/integration/support/MessageBuilder;
       5: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder setSequenceNumber(java.lang.Integer);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #78                 // Method setSequenceNumber:(Ljava/lang/Integer;)Lorg/springframework/integration/support/MessageBuilder;
       5: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder setErrorChannelName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #79                 // Method setErrorChannelName:(Ljava/lang/String;)Lorg/springframework/integration/support/MessageBuilder;
       5: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder setErrorChannel(org.springframework.messaging.MessageChannel);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #80                 // Method setErrorChannel:(Lorg/springframework/messaging/MessageChannel;)Lorg/springframework/integration/support/MessageBuilder;
       5: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder setReplyChannelName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #81                 // Method setReplyChannelName:(Ljava/lang/String;)Lorg/springframework/integration/support/MessageBuilder;
       5: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder setReplyChannel(org.springframework.messaging.MessageChannel);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #82                 // Method setReplyChannel:(Lorg/springframework/messaging/MessageChannel;)Lorg/springframework/integration/support/MessageBuilder;
       5: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder popSequenceDetails();
    Code:
       0: aload_0
       1: invokevirtual #83                 // Method popSequenceDetails:()Lorg/springframework/integration/support/MessageBuilder;
       4: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder pushSequenceDetails(java.lang.Object, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #84                 // Method pushSequenceDetails:(Ljava/lang/Object;II)Lorg/springframework/integration/support/MessageBuilder;
       7: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder setCorrelationId(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #85                 // Method setCorrelationId:(Ljava/lang/Object;)Lorg/springframework/integration/support/MessageBuilder;
       5: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder setExpirationDate(java.util.Date);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #86                 // Method setExpirationDate:(Ljava/util/Date;)Lorg/springframework/integration/support/MessageBuilder;
       5: areturn

  public org.springframework.integration.support.AbstractIntegrationMessageBuilder setExpirationDate(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #87                 // Method setExpirationDate:(Ljava/lang/Long;)Lorg/springframework/integration/support/MessageBuilder;
       5: areturn

  static {};
    Code:
       0: ldc           #14                 // class org/springframework/integration/support/MessageBuilder
       2: invokestatic  #88                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #21                 // Field logger:Lorg/apache/commons/logging/Log;
       8: return
}
