Compiled from "MessageChannelReactiveUtils.java"
final class org.springframework.integration.channel.MessageChannelReactiveUtils$PollableChannelPublisherAdapter<T> implements org.reactivestreams.Publisher<org.springframework.messaging.Message<T>> {
  private final org.springframework.messaging.PollableChannel channel;

  org.springframework.integration.channel.MessageChannelReactiveUtils$PollableChannelPublisherAdapter(org.springframework.messaging.PollableChannel);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field channel:Lorg/springframework/messaging/PollableChannel;
       9: return

  public void subscribe(org.reactivestreams.Subscriber<? super org.springframework.messaging.Message<T>>);
    Code:
       0: aload_0
       1: invokedynamic #3,  0              // InvokeDynamic #0:accept:(Lorg/springframework/integration/channel/MessageChannelReactiveUtils$PollableChannelPublisherAdapter;)Ljava/util/function/Consumer;
       6: getstatic     #4                  // Field reactor/core/publisher/FluxSink$OverflowStrategy.IGNORE:Lreactor/core/publisher/FluxSink$OverflowStrategy;
       9: invokestatic  #5                  // Method reactor/core/publisher/Flux.create:(Ljava/util/function/Consumer;Lreactor/core/publisher/FluxSink$OverflowStrategy;)Lreactor/core/publisher/Flux;
      12: invokestatic  #6                  // Method reactor/core/scheduler/Schedulers.elastic:()Lreactor/core/scheduler/Scheduler;
      15: invokevirtual #7                  // Method reactor/core/publisher/Flux.subscribeOn:(Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Flux;
      18: aload_1
      19: invokevirtual #8                  // Method reactor/core/publisher/Flux.subscribe:(Lorg/reactivestreams/Subscriber;)V
      22: return

  private void lambda$subscribe$1(reactor.core.publisher.FluxSink);
    Code:
       0: aload_1
       1: aload_0
       2: aload_1
       3: invokedynamic #9,  0              // InvokeDynamic #1:accept:(Lorg/springframework/integration/channel/MessageChannelReactiveUtils$PollableChannelPublisherAdapter;Lreactor/core/publisher/FluxSink;)Ljava/util/function/LongConsumer;
       8: invokeinterface #10,  2           // InterfaceMethod reactor/core/publisher/FluxSink.onRequest:(Ljava/util/function/LongConsumer;)Lreactor/core/publisher/FluxSink;
      13: pop
      14: return

  private void lambda$null$0(reactor.core.publisher.FluxSink, long);
    Code:
       0: aload_1
       1: invokeinterface #11,  1           // InterfaceMethod reactor/core/publisher/FluxSink.isCancelled:()Z
       6: ifne          46
       9: lload_2
      10: dup2
      11: lconst_1
      12: lsub
      13: lstore_2
      14: lconst_0
      15: lcmp
      16: ifle          46
      19: aload_0
      20: getfield      #2                  // Field channel:Lorg/springframework/messaging/PollableChannel;
      23: invokeinterface #12,  1           // InterfaceMethod org/springframework/messaging/PollableChannel.receive:()Lorg/springframework/messaging/Message;
      28: dup
      29: astore        4
      31: ifnull        46
      34: aload_1
      35: aload         4
      37: invokeinterface #13,  2           // InterfaceMethod reactor/core/publisher/FluxSink.next:(Ljava/lang/Object;)Lreactor/core/publisher/FluxSink;
      42: pop
      43: goto          0
      46: return
}
