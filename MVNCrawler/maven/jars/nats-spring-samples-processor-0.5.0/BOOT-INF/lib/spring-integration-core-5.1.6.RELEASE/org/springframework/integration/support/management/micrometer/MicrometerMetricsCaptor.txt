Compiled from "MicrometerMetricsCaptor.java"
public class org.springframework.integration.support.management.micrometer.MicrometerMetricsCaptor implements org.springframework.integration.support.management.metrics.MetricsCaptor {
  public static final java.lang.String MICROMETER_CAPTOR_NAME;

  protected final io.micrometer.core.instrument.MeterRegistry meterRegistry;

  public org.springframework.integration.support.management.micrometer.MicrometerMetricsCaptor(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String meterRegistry cannot be null
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: putfield      #4                  // Field meterRegistry:Lio/micrometer/core/instrument/MeterRegistry;
      15: return

  public org.springframework.integration.support.management.metrics.MetricsCaptor$TimerBuilder timerBuilder(java.lang.String);
    Code:
       0: new           #5                  // class org/springframework/integration/support/management/micrometer/MicrometerMetricsCaptor$MicroTimerBuilder
       3: dup
       4: aload_0
       5: getfield      #4                  // Field meterRegistry:Lio/micrometer/core/instrument/MeterRegistry;
       8: aload_1
       9: invokespecial #6                  // Method org/springframework/integration/support/management/micrometer/MicrometerMetricsCaptor$MicroTimerBuilder."<init>":(Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/String;)V
      12: areturn

  public org.springframework.integration.support.management.metrics.MetricsCaptor$CounterBuilder counterBuilder(java.lang.String);
    Code:
       0: new           #7                  // class org/springframework/integration/support/management/micrometer/MicrometerMetricsCaptor$MicroCounterBuilder
       3: dup
       4: aload_0
       5: getfield      #4                  // Field meterRegistry:Lio/micrometer/core/instrument/MeterRegistry;
       8: aload_1
       9: invokespecial #8                  // Method org/springframework/integration/support/management/micrometer/MicrometerMetricsCaptor$MicroCounterBuilder."<init>":(Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/String;)V
      12: areturn

  public org.springframework.integration.support.management.metrics.MetricsCaptor$GaugeBuilder gaugeBuilder(java.lang.String, java.lang.Object, java.util.function.ToDoubleFunction<java.lang.Object>);
    Code:
       0: new           #9                  // class org/springframework/integration/support/management/micrometer/MicrometerMetricsCaptor$MicroGaugeBuilder
       3: dup
       4: aload_0
       5: getfield      #4                  // Field meterRegistry:Lio/micrometer/core/instrument/MeterRegistry;
       8: aload_1
       9: aload_2
      10: aload_3
      11: invokespecial #10                 // Method org/springframework/integration/support/management/micrometer/MicrometerMetricsCaptor$MicroGaugeBuilder."<init>":(Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/String;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)V
      14: areturn

  public org.springframework.integration.support.management.metrics.SampleFacade start();
    Code:
       0: new           #11                 // class org/springframework/integration/support/management/micrometer/MicrometerMetricsCaptor$MicroSample
       3: dup
       4: aload_0
       5: getfield      #4                  // Field meterRegistry:Lio/micrometer/core/instrument/MeterRegistry;
       8: invokestatic  #12                 // InterfaceMethod io/micrometer/core/instrument/Timer.start:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Timer$Sample;
      11: invokespecial #13                 // Method org/springframework/integration/support/management/micrometer/MicrometerMetricsCaptor$MicroSample."<init>":(Lio/micrometer/core/instrument/Timer$Sample;)V
      14: areturn

  public org.springframework.integration.support.management.metrics.MeterFacade removeMeter(org.springframework.integration.support.management.metrics.MeterFacade);
    Code:
       0: aload_1
       1: invokeinterface #14,  1           // InterfaceMethod org/springframework/integration/support/management/metrics/MeterFacade.remove:()Lorg/springframework/integration/support/management/metrics/MeterFacade;
       6: areturn

  public static org.springframework.integration.support.management.metrics.MetricsCaptor loadCaptor(org.springframework.context.ApplicationContext);
    Code:
       0: aload_0
       1: ldc           #15                 // class io/micrometer/core/instrument/MeterRegistry
       3: invokeinterface #16,  2           // InterfaceMethod org/springframework/context/ApplicationContext.getBean:(Ljava/lang/Class;)Ljava/lang/Object;
       8: checkcast     #15                 // class io/micrometer/core/instrument/MeterRegistry
      11: astore_1
      12: aload_0
      13: instanceof    #17                 // class org/springframework/context/support/GenericApplicationContext
      16: ifeq          51
      19: aload_0
      20: ldc           #19                 // String integrationMicrometerMetricsCaptor
      22: invokeinterface #20,  2           // InterfaceMethod org/springframework/context/ApplicationContext.containsBean:(Ljava/lang/String;)Z
      27: ifne          51
      30: aload_0
      31: checkcast     #17                 // class org/springframework/context/support/GenericApplicationContext
      34: ldc           #19                 // String integrationMicrometerMetricsCaptor
      36: ldc           #18                 // class org/springframework/integration/support/management/micrometer/MicrometerMetricsCaptor
      38: aload_1
      39: invokedynamic #21,  0             // InvokeDynamic #0:get:(Lio/micrometer/core/instrument/MeterRegistry;)Ljava/util/function/Supplier;
      44: iconst_0
      45: anewarray     #22                 // class org/springframework/beans/factory/config/BeanDefinitionCustomizer
      48: invokevirtual #23                 // Method org/springframework/context/support/GenericApplicationContext.registerBean:(Ljava/lang/String;Ljava/lang/Class;Ljava/util/function/Supplier;[Lorg/springframework/beans/factory/config/BeanDefinitionCustomizer;)V
      51: aload_0
      52: ldc           #19                 // String integrationMicrometerMetricsCaptor
      54: ldc           #24                 // class org/springframework/integration/support/management/metrics/MetricsCaptor
      56: invokeinterface #25,  3           // InterfaceMethod org/springframework/context/ApplicationContext.getBean:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
      61: checkcast     #24                 // class org/springframework/integration/support/management/metrics/MetricsCaptor
      64: areturn
      65: astore_1
      66: aconst_null
      67: areturn
    Exception table:
       from    to  target type
           0    64    65   Class org/springframework/beans/factory/NoSuchBeanDefinitionException

  private static org.springframework.integration.support.management.micrometer.MicrometerMetricsCaptor lambda$loadCaptor$0(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: new           #18                 // class org/springframework/integration/support/management/micrometer/MicrometerMetricsCaptor
       3: dup
       4: aload_0
       5: invokespecial #27                 // Method "<init>":(Lio/micrometer/core/instrument/MeterRegistry;)V
       8: areturn
}
