Compiled from "AbstractPlatformTransactionManager.java"
public abstract class org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.PlatformTransactionManager,java.io.Serializable {
  public static final int SYNCHRONIZATION_ALWAYS;

  public static final int SYNCHRONIZATION_ON_ACTUAL_TRANSACTION;

  public static final int SYNCHRONIZATION_NEVER;

  private static final org.springframework.core.Constants constants;

  protected transient org.apache.commons.logging.Log logger;

  private int transactionSynchronization;

  private int defaultTimeout;

  private boolean nestedTransactionAllowed;

  private boolean validateExistingTransaction;

  private boolean globalRollbackOnParticipationFailure;

  private boolean failEarlyOnGlobalRollbackOnly;

  private boolean rollbackOnCommitFailure;

  public org.springframework.transaction.support.AbstractPlatformTransactionManager();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: iconst_0
      17: putfield      #6                  // Field transactionSynchronization:I
      20: aload_0
      21: iconst_m1
      22: putfield      #8                  // Field defaultTimeout:I
      25: aload_0
      26: iconst_0
      27: putfield      #9                  // Field nestedTransactionAllowed:Z
      30: aload_0
      31: iconst_0
      32: putfield      #10                 // Field validateExistingTransaction:Z
      35: aload_0
      36: iconst_1
      37: putfield      #11                 // Field globalRollbackOnParticipationFailure:Z
      40: aload_0
      41: iconst_0
      42: putfield      #12                 // Field failEarlyOnGlobalRollbackOnly:Z
      45: aload_0
      46: iconst_0
      47: putfield      #13                 // Field rollbackOnCommitFailure:Z
      50: return

  public final void setTransactionSynchronizationName(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #14                 // Field constants:Lorg/springframework/core/Constants;
       4: aload_1
       5: invokevirtual #15                 // Method org/springframework/core/Constants.asNumber:(Ljava/lang/String;)Ljava/lang/Number;
       8: invokevirtual #16                 // Method java/lang/Number.intValue:()I
      11: invokevirtual #17                 // Method setTransactionSynchronization:(I)V
      14: return

  public final void setTransactionSynchronization(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field transactionSynchronization:I
       5: return

  public final int getTransactionSynchronization();
    Code:
       0: aload_0
       1: getfield      #6                  // Field transactionSynchronization:I
       4: ireturn

  public final void setDefaultTimeout(int);
    Code:
       0: iload_1
       1: iconst_m1
       2: if_icmpge     16
       5: new           #18                 // class org/springframework/transaction/InvalidTimeoutException
       8: dup
       9: ldc           #19                 // String Invalid default timeout
      11: iload_1
      12: invokespecial #20                 // Method org/springframework/transaction/InvalidTimeoutException."<init>":(Ljava/lang/String;I)V
      15: athrow
      16: aload_0
      17: iload_1
      18: putfield      #8                  // Field defaultTimeout:I
      21: return

  public final int getDefaultTimeout();
    Code:
       0: aload_0
       1: getfield      #8                  // Field defaultTimeout:I
       4: ireturn

  public final void setNestedTransactionAllowed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field nestedTransactionAllowed:Z
       5: return

  public final boolean isNestedTransactionAllowed();
    Code:
       0: aload_0
       1: getfield      #9                  // Field nestedTransactionAllowed:Z
       4: ireturn

  public final void setValidateExistingTransaction(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field validateExistingTransaction:Z
       5: return

  public final boolean isValidateExistingTransaction();
    Code:
       0: aload_0
       1: getfield      #10                 // Field validateExistingTransaction:Z
       4: ireturn

  public final void setGlobalRollbackOnParticipationFailure(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field globalRollbackOnParticipationFailure:Z
       5: return

  public final boolean isGlobalRollbackOnParticipationFailure();
    Code:
       0: aload_0
       1: getfield      #11                 // Field globalRollbackOnParticipationFailure:Z
       4: ireturn

  public final void setFailEarlyOnGlobalRollbackOnly(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field failEarlyOnGlobalRollbackOnly:Z
       5: return

  public final boolean isFailEarlyOnGlobalRollbackOnly();
    Code:
       0: aload_0
       1: getfield      #12                 // Field failEarlyOnGlobalRollbackOnly:Z
       4: ireturn

  public final void setRollbackOnCommitFailure(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field rollbackOnCommitFailure:Z
       5: return

  public final boolean isRollbackOnCommitFailure();
    Code:
       0: aload_0
       1: getfield      #13                 // Field rollbackOnCommitFailure:Z
       4: ireturn

  public final org.springframework.transaction.TransactionStatus getTransaction(org.springframework.transaction.TransactionDefinition) throws org.springframework.transaction.TransactionException;
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method doGetTransaction:()Ljava/lang/Object;
       4: astore_2
       5: aload_0
       6: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
       9: invokeinterface #22,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      14: istore_3
      15: aload_1
      16: ifnonnull     27
      19: new           #23                 // class org/springframework/transaction/support/DefaultTransactionDefinition
      22: dup
      23: invokespecial #24                 // Method org/springframework/transaction/support/DefaultTransactionDefinition."<init>":()V
      26: astore_1
      27: aload_0
      28: aload_2
      29: invokevirtual #25                 // Method isExistingTransaction:(Ljava/lang/Object;)Z
      32: ifeq          43
      35: aload_0
      36: aload_1
      37: aload_2
      38: iload_3
      39: invokespecial #26                 // Method handleExistingTransaction:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;Z)Lorg/springframework/transaction/TransactionStatus;
      42: areturn
      43: aload_1
      44: invokeinterface #27,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getTimeout:()I
      49: iconst_m1
      50: if_icmpge     69
      53: new           #18                 // class org/springframework/transaction/InvalidTimeoutException
      56: dup
      57: ldc           #28                 // String Invalid transaction timeout
      59: aload_1
      60: invokeinterface #27,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getTimeout:()I
      65: invokespecial #20                 // Method org/springframework/transaction/InvalidTimeoutException."<init>":(Ljava/lang/String;I)V
      68: athrow
      69: aload_1
      70: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
      75: iconst_2
      76: if_icmpne     89
      79: new           #30                 // class org/springframework/transaction/IllegalTransactionStateException
      82: dup
      83: ldc           #31                 // String No existing transaction found for transaction marked with propagation \'mandatory\'
      85: invokespecial #32                 // Method org/springframework/transaction/IllegalTransactionStateException."<init>":(Ljava/lang/String;)V
      88: athrow
      89: aload_1
      90: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
      95: ifeq          119
      98: aload_1
      99: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
     104: iconst_3
     105: if_icmpeq     119
     108: aload_1
     109: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
     114: bipush        6
     116: if_icmpne     229
     119: aload_0
     120: aconst_null
     121: invokevirtual #33                 // Method suspend:(Ljava/lang/Object;)Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;
     124: astore        4
     126: iload_3
     127: ifeq          172
     130: aload_0
     131: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     134: new           #34                 // class java/lang/StringBuilder
     137: dup
     138: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     141: ldc           #36                 // String Creating new transaction with name [
     143: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     146: aload_1
     147: invokeinterface #38,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getName:()Ljava/lang/String;
     152: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     155: ldc           #39                 // String ]:
     157: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     160: aload_1
     161: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     164: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     167: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     172: aload_0
     173: invokevirtual #43                 // Method getTransactionSynchronization:()I
     176: iconst_2
     177: if_icmpeq     184
     180: iconst_1
     181: goto          185
     184: iconst_0
     185: istore        5
     187: aload_0
     188: aload_1
     189: aload_2
     190: iconst_1
     191: iload         5
     193: iload_3
     194: aload         4
     196: invokevirtual #44                 // Method newTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
     199: astore        6
     201: aload_0
     202: aload_2
     203: aload_1
     204: invokevirtual #45                 // Method doBegin:(Ljava/lang/Object;Lorg/springframework/transaction/TransactionDefinition;)V
     207: aload_0
     208: aload         6
     210: aload_1
     211: invokevirtual #46                 // Method prepareSynchronization:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Lorg/springframework/transaction/TransactionDefinition;)V
     214: aload         6
     216: areturn
     217: astore        5
     219: aload_0
     220: aconst_null
     221: aload         4
     223: invokevirtual #49                 // Method resume:(Ljava/lang/Object;Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)V
     226: aload         5
     228: athrow
     229: aload_1
     230: invokeinterface #50,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getIsolationLevel:()I
     235: iconst_m1
     236: if_icmpeq     279
     239: aload_0
     240: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     243: invokeinterface #51,  1           // InterfaceMethod org/apache/commons/logging/Log.isWarnEnabled:()Z
     248: ifeq          279
     251: aload_0
     252: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     255: new           #34                 // class java/lang/StringBuilder
     258: dup
     259: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     262: ldc           #52                 // String Custom isolation level specified but no actual transaction initiated; isolation level will effectively be ignored:
     264: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     267: aload_1
     268: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     271: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     274: invokeinterface #53,  2           // InterfaceMethod org/apache/commons/logging/Log.warn:(Ljava/lang/Object;)V
     279: aload_0
     280: invokevirtual #43                 // Method getTransactionSynchronization:()I
     283: ifne          290
     286: iconst_1
     287: goto          291
     290: iconst_0
     291: istore        4
     293: aload_0
     294: aload_1
     295: aconst_null
     296: iconst_1
     297: iload         4
     299: iload_3
     300: aconst_null
     301: invokevirtual #54                 // Method prepareTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
     304: areturn
    Exception table:
       from    to  target type
         172   216   217   Class java/lang/RuntimeException
         172   216   217   Class java/lang/Error

  private org.springframework.transaction.TransactionStatus handleExistingTransaction(org.springframework.transaction.TransactionDefinition, java.lang.Object, boolean) throws org.springframework.transaction.TransactionException;
    Code:
       0: aload_1
       1: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
       6: iconst_5
       7: if_icmpne     20
      10: new           #30                 // class org/springframework/transaction/IllegalTransactionStateException
      13: dup
      14: ldc           #55                 // String Existing transaction found for transaction marked with propagation \'never\'
      16: invokespecial #32                 // Method org/springframework/transaction/IllegalTransactionStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_1
      21: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
      26: iconst_4
      27: if_icmpne     79
      30: iload_3
      31: ifeq          45
      34: aload_0
      35: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      38: ldc           #56                 // String Suspending current transaction
      40: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      45: aload_0
      46: aload_2
      47: invokevirtual #33                 // Method suspend:(Ljava/lang/Object;)Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;
      50: astore        4
      52: aload_0
      53: invokevirtual #43                 // Method getTransactionSynchronization:()I
      56: ifne          63
      59: iconst_1
      60: goto          64
      63: iconst_0
      64: istore        5
      66: aload_0
      67: aload_1
      68: aconst_null
      69: iconst_0
      70: iload         5
      72: iload_3
      73: aload         4
      75: invokevirtual #54                 // Method prepareTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
      78: areturn
      79: aload_1
      80: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
      85: iconst_3
      86: if_icmpne     197
      89: iload_3
      90: ifeq          131
      93: aload_0
      94: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      97: new           #34                 // class java/lang/StringBuilder
     100: dup
     101: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     104: ldc           #57                 // String Suspending current transaction, creating new transaction with name [
     106: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     109: aload_1
     110: invokeinterface #38,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getName:()Ljava/lang/String;
     115: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     118: ldc           #58                 // String ]
     120: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     123: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     126: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     131: aload_0
     132: aload_2
     133: invokevirtual #33                 // Method suspend:(Ljava/lang/Object;)Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;
     136: astore        4
     138: aload_0
     139: invokevirtual #43                 // Method getTransactionSynchronization:()I
     142: iconst_2
     143: if_icmpeq     150
     146: iconst_1
     147: goto          151
     150: iconst_0
     151: istore        5
     153: aload_0
     154: aload_1
     155: aload_2
     156: iconst_1
     157: iload         5
     159: iload_3
     160: aload         4
     162: invokevirtual #44                 // Method newTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
     165: astore        6
     167: aload_0
     168: aload_2
     169: aload_1
     170: invokevirtual #45                 // Method doBegin:(Ljava/lang/Object;Lorg/springframework/transaction/TransactionDefinition;)V
     173: aload_0
     174: aload         6
     176: aload_1
     177: invokevirtual #46                 // Method prepareSynchronization:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Lorg/springframework/transaction/TransactionDefinition;)V
     180: aload         6
     182: areturn
     183: astore        5
     185: aload_0
     186: aload_2
     187: aload         4
     189: aload         5
     191: invokespecial #59                 // Method resumeAfterBeginException:(Ljava/lang/Object;Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;Ljava/lang/Throwable;)V
     194: aload         5
     196: athrow
     197: aload_1
     198: invokeinterface #29,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getPropagationBehavior:()I
     203: bipush        6
     205: if_icmpne     338
     208: aload_0
     209: invokevirtual #60                 // Method isNestedTransactionAllowed:()Z
     212: ifne          225
     215: new           #61                 // class org/springframework/transaction/NestedTransactionNotSupportedException
     218: dup
     219: ldc           #62                 // String Transaction manager does not allow nested transactions by default - specify \'nestedTransactionAllowed\' property with value \'true\'
     221: invokespecial #63                 // Method org/springframework/transaction/NestedTransactionNotSupportedException."<init>":(Ljava/lang/String;)V
     224: athrow
     225: iload_3
     226: ifeq          267
     229: aload_0
     230: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     233: new           #34                 // class java/lang/StringBuilder
     236: dup
     237: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     240: ldc           #64                 // String Creating nested transaction with name [
     242: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     245: aload_1
     246: invokeinterface #38,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getName:()Ljava/lang/String;
     251: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     254: ldc           #58                 // String ]
     256: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     259: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     262: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     267: aload_0
     268: invokevirtual #65                 // Method useSavepointForNestedTransaction:()Z
     271: ifeq          294
     274: aload_0
     275: aload_1
     276: aload_2
     277: iconst_0
     278: iconst_0
     279: iload_3
     280: aconst_null
     281: invokevirtual #54                 // Method prepareTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
     284: astore        4
     286: aload         4
     288: invokevirtual #66                 // Method org/springframework/transaction/support/DefaultTransactionStatus.createAndHoldSavepoint:()V
     291: aload         4
     293: areturn
     294: aload_0
     295: invokevirtual #43                 // Method getTransactionSynchronization:()I
     298: iconst_2
     299: if_icmpeq     306
     302: iconst_1
     303: goto          307
     306: iconst_0
     307: istore        4
     309: aload_0
     310: aload_1
     311: aload_2
     312: iconst_1
     313: iload         4
     315: iload_3
     316: aconst_null
     317: invokevirtual #44                 // Method newTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
     320: astore        5
     322: aload_0
     323: aload_2
     324: aload_1
     325: invokevirtual #45                 // Method doBegin:(Ljava/lang/Object;Lorg/springframework/transaction/TransactionDefinition;)V
     328: aload_0
     329: aload         5
     331: aload_1
     332: invokevirtual #46                 // Method prepareSynchronization:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Lorg/springframework/transaction/TransactionDefinition;)V
     335: aload         5
     337: areturn
     338: iload_3
     339: ifeq          353
     342: aload_0
     343: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     346: ldc           #67                 // String Participating in existing transaction
     348: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     353: aload_0
     354: invokevirtual #68                 // Method isValidateExistingTransaction:()Z
     357: ifeq          500
     360: aload_1
     361: invokeinterface #50,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getIsolationLevel:()I
     366: iconst_m1
     367: if_icmpeq     453
     370: invokestatic  #69                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.getCurrentTransactionIsolationLevel:()Ljava/lang/Integer;
     373: astore        4
     375: aload         4
     377: ifnull        394
     380: aload         4
     382: invokevirtual #70                 // Method java/lang/Integer.intValue:()I
     385: aload_1
     386: invokeinterface #50,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getIsolationLevel:()I
     391: if_icmpeq     453
     394: getstatic     #71                 // Field org/springframework/transaction/support/DefaultTransactionDefinition.constants:Lorg/springframework/core/Constants;
     397: astore        5
     399: new           #30                 // class org/springframework/transaction/IllegalTransactionStateException
     402: dup
     403: new           #34                 // class java/lang/StringBuilder
     406: dup
     407: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     410: ldc           #72                 // String Participating transaction with definition [
     412: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     415: aload_1
     416: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     419: ldc           #73                 // String ] specifies isolation level which is incompatible with existing transaction:
     421: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     424: aload         4
     426: ifnull        441
     429: aload         5
     431: aload         4
     433: ldc           #74                 // String ISOLATION_
     435: invokevirtual #75                 // Method org/springframework/core/Constants.toCode:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;
     438: goto          443
     441: ldc           #76                 // String (unknown)
     443: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     446: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     449: invokespecial #32                 // Method org/springframework/transaction/IllegalTransactionStateException."<init>":(Ljava/lang/String;)V
     452: athrow
     453: aload_1
     454: invokeinterface #77,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.isReadOnly:()Z
     459: ifne          500
     462: invokestatic  #78                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.isCurrentTransactionReadOnly:()Z
     465: ifeq          500
     468: new           #30                 // class org/springframework/transaction/IllegalTransactionStateException
     471: dup
     472: new           #34                 // class java/lang/StringBuilder
     475: dup
     476: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     479: ldc           #72                 // String Participating transaction with definition [
     481: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     484: aload_1
     485: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     488: ldc           #79                 // String ] is not marked as read-only but existing transaction is
     490: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     493: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     496: invokespecial #32                 // Method org/springframework/transaction/IllegalTransactionStateException."<init>":(Ljava/lang/String;)V
     499: athrow
     500: aload_0
     501: invokevirtual #43                 // Method getTransactionSynchronization:()I
     504: iconst_2
     505: if_icmpeq     512
     508: iconst_1
     509: goto          513
     512: iconst_0
     513: istore        4
     515: aload_0
     516: aload_1
     517: aload_2
     518: iconst_0
     519: iload         4
     521: iload_3
     522: aconst_null
     523: invokevirtual #54                 // Method prepareTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
     526: areturn
    Exception table:
       from    to  target type
         138   182   183   Class java/lang/RuntimeException
         138   182   183   Class java/lang/Error

  protected final org.springframework.transaction.support.DefaultTransactionStatus prepareTransactionStatus(org.springframework.transaction.TransactionDefinition, java.lang.Object, boolean, boolean, boolean, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: iload         4
       6: iload         5
       8: aload         6
      10: invokevirtual #44                 // Method newTransactionStatus:(Lorg/springframework/transaction/TransactionDefinition;Ljava/lang/Object;ZZZLjava/lang/Object;)Lorg/springframework/transaction/support/DefaultTransactionStatus;
      13: astore        7
      15: aload_0
      16: aload         7
      18: aload_1
      19: invokevirtual #46                 // Method prepareSynchronization:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Lorg/springframework/transaction/TransactionDefinition;)V
      22: aload         7
      24: areturn

  protected org.springframework.transaction.support.DefaultTransactionStatus newTransactionStatus(org.springframework.transaction.TransactionDefinition, java.lang.Object, boolean, boolean, boolean, java.lang.Object);
    Code:
       0: iload         4
       2: ifeq          15
       5: invokestatic  #80                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.isSynchronizationActive:()Z
       8: ifne          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: istore        7
      18: new           #81                 // class org/springframework/transaction/support/DefaultTransactionStatus
      21: dup
      22: aload_2
      23: iload_3
      24: iload         7
      26: aload_1
      27: invokeinterface #77,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.isReadOnly:()Z
      32: iload         5
      34: aload         6
      36: invokespecial #82                 // Method org/springframework/transaction/support/DefaultTransactionStatus."<init>":(Ljava/lang/Object;ZZZZLjava/lang/Object;)V
      39: areturn

  protected void prepareSynchronization(org.springframework.transaction.support.DefaultTransactionStatus, org.springframework.transaction.TransactionDefinition);
    Code:
       0: aload_1
       1: invokevirtual #83                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewSynchronization:()Z
       4: ifeq          61
       7: aload_1
       8: invokevirtual #84                 // Method org/springframework/transaction/support/DefaultTransactionStatus.hasTransaction:()Z
      11: invokestatic  #85                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setActualTransactionActive:(Z)V
      14: aload_2
      15: invokeinterface #50,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getIsolationLevel:()I
      20: iconst_m1
      21: if_icmpeq     36
      24: aload_2
      25: invokeinterface #50,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getIsolationLevel:()I
      30: invokestatic  #86                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      33: goto          37
      36: aconst_null
      37: invokestatic  #87                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionIsolationLevel:(Ljava/lang/Integer;)V
      40: aload_2
      41: invokeinterface #77,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.isReadOnly:()Z
      46: invokestatic  #88                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionReadOnly:(Z)V
      49: aload_2
      50: invokeinterface #38,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getName:()Ljava/lang/String;
      55: invokestatic  #89                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionName:(Ljava/lang/String;)V
      58: invokestatic  #90                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.initSynchronization:()V
      61: return

  protected int determineTimeout(org.springframework.transaction.TransactionDefinition);
    Code:
       0: aload_1
       1: invokeinterface #27,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getTimeout:()I
       6: iconst_m1
       7: if_icmpeq     17
      10: aload_1
      11: invokeinterface #27,  1           // InterfaceMethod org/springframework/transaction/TransactionDefinition.getTimeout:()I
      16: ireturn
      17: aload_0
      18: invokevirtual #91                 // Method getDefaultTimeout:()I
      21: ireturn

  protected final org.springframework.transaction.support.AbstractPlatformTransactionManager$SuspendedResourcesHolder suspend(java.lang.Object) throws org.springframework.transaction.TransactionException;
    Code:
       0: invokestatic  #80                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.isSynchronizationActive:()Z
       3: ifeq          86
       6: aload_0
       7: invokespecial #92                 // Method doSuspendSynchronization:()Ljava/util/List;
      10: astore_2
      11: aconst_null
      12: astore_3
      13: aload_1
      14: ifnull        23
      17: aload_0
      18: aload_1
      19: invokevirtual #93                 // Method doSuspend:(Ljava/lang/Object;)Ljava/lang/Object;
      22: astore_3
      23: invokestatic  #94                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.getCurrentTransactionName:()Ljava/lang/String;
      26: astore        4
      28: aconst_null
      29: invokestatic  #89                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionName:(Ljava/lang/String;)V
      32: invokestatic  #78                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.isCurrentTransactionReadOnly:()Z
      35: istore        5
      37: iconst_0
      38: invokestatic  #88                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionReadOnly:(Z)V
      41: invokestatic  #69                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.getCurrentTransactionIsolationLevel:()Ljava/lang/Integer;
      44: astore        6
      46: aconst_null
      47: invokestatic  #87                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionIsolationLevel:(Ljava/lang/Integer;)V
      50: invokestatic  #95                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.isActualTransactionActive:()Z
      53: istore        7
      55: iconst_0
      56: invokestatic  #85                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setActualTransactionActive:(Z)V
      59: new           #96                 // class org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder
      62: dup
      63: aload_3
      64: aload_2
      65: aload         4
      67: iload         5
      69: aload         6
      71: iload         7
      73: aconst_null
      74: invokespecial #97                 // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder."<init>":(Ljava/lang/Object;Ljava/util/List;Ljava/lang/String;ZLjava/lang/Integer;ZLorg/springframework/transaction/support/AbstractPlatformTransactionManager$1;)V
      77: areturn
      78: astore_3
      79: aload_0
      80: aload_2
      81: invokespecial #98                 // Method doResumeSynchronization:(Ljava/util/List;)V
      84: aload_3
      85: athrow
      86: aload_1
      87: ifnull        106
      90: aload_0
      91: aload_1
      92: invokevirtual #93                 // Method doSuspend:(Ljava/lang/Object;)Ljava/lang/Object;
      95: astore_2
      96: new           #96                 // class org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder
      99: dup
     100: aload_2
     101: aconst_null
     102: invokespecial #99                 // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder."<init>":(Ljava/lang/Object;Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$1;)V
     105: areturn
     106: aconst_null
     107: areturn
    Exception table:
       from    to  target type
          11    77    78   Class java/lang/RuntimeException
          11    77    78   Class java/lang/Error

  protected final void resume(java.lang.Object, org.springframework.transaction.support.AbstractPlatformTransactionManager$SuspendedResourcesHolder) throws org.springframework.transaction.TransactionException;
    Code:
       0: aload_2
       1: ifnull        64
       4: aload_2
       5: invokestatic  #100                // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder.access$200:(Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)Ljava/lang/Object;
       8: astore_3
       9: aload_3
      10: ifnull        19
      13: aload_0
      14: aload_1
      15: aload_3
      16: invokevirtual #101                // Method doResume:(Ljava/lang/Object;Ljava/lang/Object;)V
      19: aload_2
      20: invokestatic  #102                // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder.access$300:(Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)Ljava/util/List;
      23: astore        4
      25: aload         4
      27: ifnull        64
      30: aload_2
      31: invokestatic  #103                // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder.access$400:(Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)Z
      34: invokestatic  #85                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setActualTransactionActive:(Z)V
      37: aload_2
      38: invokestatic  #104                // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder.access$500:(Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)Ljava/lang/Integer;
      41: invokestatic  #87                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionIsolationLevel:(Ljava/lang/Integer;)V
      44: aload_2
      45: invokestatic  #105                // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder.access$600:(Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)Z
      48: invokestatic  #88                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionReadOnly:(Z)V
      51: aload_2
      52: invokestatic  #106                // Method org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder.access$700:(Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)Ljava/lang/String;
      55: invokestatic  #89                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.setCurrentTransactionName:(Ljava/lang/String;)V
      58: aload_0
      59: aload         4
      61: invokespecial #98                 // Method doResumeSynchronization:(Ljava/util/List;)V
      64: return

  private void resumeAfterBeginException(java.lang.Object, org.springframework.transaction.support.AbstractPlatformTransactionManager$SuspendedResourcesHolder, java.lang.Throwable);
    Code:
       0: ldc           #107                // String Inner transaction begin exception overridden by outer transaction resume exception
       2: astore        4
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokevirtual #49                 // Method resume:(Ljava/lang/Object;Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)V
      10: goto          30
      13: astore        5
      15: aload_0
      16: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      19: aload         4
      21: aload_3
      22: invokeinterface #108,  3          // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      27: aload         5
      29: athrow
      30: return
    Exception table:
       from    to  target type
           4    10    13   Class java/lang/RuntimeException
           4    10    13   Class java/lang/Error

  private java.util.List<org.springframework.transaction.support.TransactionSynchronization> doSuspendSynchronization();
    Code:
       0: invokestatic  #109                // Method org/springframework/transaction/support/TransactionSynchronizationManager.getSynchronizations:()Ljava/util/List;
       3: astore_1
       4: aload_1
       5: invokeinterface #110,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      10: astore_2
      11: aload_2
      12: invokeinterface #111,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          39
      20: aload_2
      21: invokeinterface #112,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      26: checkcast     #113                // class org/springframework/transaction/support/TransactionSynchronization
      29: astore_3
      30: aload_3
      31: invokeinterface #114,  1          // InterfaceMethod org/springframework/transaction/support/TransactionSynchronization.suspend:()V
      36: goto          11
      39: invokestatic  #115                // Method org/springframework/transaction/support/TransactionSynchronizationManager.clearSynchronization:()V
      42: aload_1
      43: areturn

  private void doResumeSynchronization(java.util.List<org.springframework.transaction.support.TransactionSynchronization>);
    Code:
       0: invokestatic  #90                 // Method org/springframework/transaction/support/TransactionSynchronizationManager.initSynchronization:()V
       3: aload_1
       4: invokeinterface #110,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #111,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          42
      19: aload_2
      20: invokeinterface #112,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #113                // class org/springframework/transaction/support/TransactionSynchronization
      28: astore_3
      29: aload_3
      30: invokeinterface #116,  1          // InterfaceMethod org/springframework/transaction/support/TransactionSynchronization.resume:()V
      35: aload_3
      36: invokestatic  #117                // Method org/springframework/transaction/support/TransactionSynchronizationManager.registerSynchronization:(Lorg/springframework/transaction/support/TransactionSynchronization;)V
      39: goto          10
      42: return

  public final void commit(org.springframework.transaction.TransactionStatus) throws org.springframework.transaction.TransactionException;
    Code:
       0: aload_1
       1: invokeinterface #118,  1          // InterfaceMethod org/springframework/transaction/TransactionStatus.isCompleted:()Z
       6: ifeq          19
       9: new           #30                 // class org/springframework/transaction/IllegalTransactionStateException
      12: dup
      13: ldc           #119                // String Transaction is already completed - do not call commit or rollback more than once per transaction
      15: invokespecial #32                 // Method org/springframework/transaction/IllegalTransactionStateException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_1
      20: checkcast     #81                 // class org/springframework/transaction/support/DefaultTransactionStatus
      23: astore_2
      24: aload_2
      25: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isLocalRollbackOnly:()Z
      28: ifeq          56
      31: aload_2
      32: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      35: ifeq          49
      38: aload_0
      39: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      42: ldc           #122                // String Transactional code has requested rollback
      44: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      49: aload_0
      50: aload_2
      51: iconst_0
      52: invokespecial #123                // Method processRollback:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Z)V
      55: return
      56: aload_0
      57: invokevirtual #124                // Method shouldCommitOnGlobalRollbackOnly:()Z
      60: ifne          95
      63: aload_2
      64: invokevirtual #125                // Method org/springframework/transaction/support/DefaultTransactionStatus.isGlobalRollbackOnly:()Z
      67: ifeq          95
      70: aload_2
      71: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      74: ifeq          88
      77: aload_0
      78: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      81: ldc           #126                // String Global transaction is marked as rollback-only but transactional code requested commit
      83: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      88: aload_0
      89: aload_2
      90: iconst_1
      91: invokespecial #123                // Method processRollback:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Z)V
      94: return
      95: aload_0
      96: aload_2
      97: invokespecial #127                // Method processCommit:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     100: return

  private void processCommit(org.springframework.transaction.support.DefaultTransactionStatus) throws org.springframework.transaction.TransactionException;
    Code:
       0: iconst_0
       1: istore_2
       2: iconst_0
       3: istore_3
       4: aload_0
       5: aload_1
       6: invokevirtual #128                // Method prepareForCommit:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
       9: aload_0
      10: aload_1
      11: invokevirtual #129                // Method triggerBeforeCommit:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
      14: aload_0
      15: aload_1
      16: invokevirtual #130                // Method triggerBeforeCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
      19: iconst_1
      20: istore_2
      21: aload_1
      22: invokevirtual #131                // Method org/springframework/transaction/support/DefaultTransactionStatus.hasSavepoint:()Z
      25: ifeq          58
      28: aload_1
      29: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      32: ifeq          46
      35: aload_0
      36: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      39: ldc           #132                // String Releasing transaction savepoint
      41: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      46: aload_1
      47: invokevirtual #125                // Method org/springframework/transaction/support/DefaultTransactionStatus.isGlobalRollbackOnly:()Z
      50: istore_3
      51: aload_1
      52: invokevirtual #133                // Method org/springframework/transaction/support/DefaultTransactionStatus.releaseHeldSavepoint:()V
      55: goto          108
      58: aload_1
      59: invokevirtual #134                // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewTransaction:()Z
      62: ifeq          96
      65: aload_1
      66: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      69: ifeq          83
      72: aload_0
      73: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      76: ldc           #135                // String Initiating transaction commit
      78: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      83: aload_1
      84: invokevirtual #125                // Method org/springframework/transaction/support/DefaultTransactionStatus.isGlobalRollbackOnly:()Z
      87: istore_3
      88: aload_0
      89: aload_1
      90: invokevirtual #136                // Method doCommit:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
      93: goto          108
      96: aload_0
      97: invokevirtual #137                // Method isFailEarlyOnGlobalRollbackOnly:()Z
     100: ifeq          108
     103: aload_1
     104: invokevirtual #125                // Method org/springframework/transaction/support/DefaultTransactionStatus.isGlobalRollbackOnly:()Z
     107: istore_3
     108: iload_3
     109: ifeq          122
     112: new           #138                // class org/springframework/transaction/UnexpectedRollbackException
     115: dup
     116: ldc           #139                // String Transaction silently rolled back because it has been marked as rollback-only
     118: invokespecial #140                // Method org/springframework/transaction/UnexpectedRollbackException."<init>":(Ljava/lang/String;)V
     121: athrow
     122: goto          177
     125: astore_3
     126: aload_0
     127: aload_1
     128: iconst_1
     129: invokespecial #141                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     132: aload_3
     133: athrow
     134: astore_3
     135: aload_0
     136: invokevirtual #143                // Method isRollbackOnCommitFailure:()Z
     139: ifeq          151
     142: aload_0
     143: aload_1
     144: aload_3
     145: invokespecial #144                // Method doRollbackOnCommitException:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Ljava/lang/Throwable;)V
     148: goto          157
     151: aload_0
     152: aload_1
     153: iconst_2
     154: invokespecial #141                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     157: aload_3
     158: athrow
     159: astore_3
     160: iload_2
     161: ifne          169
     164: aload_0
     165: aload_1
     166: invokevirtual #130                // Method triggerBeforeCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     169: aload_0
     170: aload_1
     171: aload_3
     172: invokespecial #144                // Method doRollbackOnCommitException:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Ljava/lang/Throwable;)V
     175: aload_3
     176: athrow
     177: aload_0
     178: aload_1
     179: invokespecial #145                // Method triggerAfterCommit:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     182: aload_0
     183: aload_1
     184: iconst_0
     185: invokespecial #141                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     188: goto          202
     191: astore        4
     193: aload_0
     194: aload_1
     195: iconst_0
     196: invokespecial #141                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     199: aload         4
     201: athrow
     202: aload_0
     203: aload_1
     204: invokespecial #146                // Method cleanupAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     207: goto          220
     210: astore        5
     212: aload_0
     213: aload_1
     214: invokespecial #146                // Method cleanupAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     217: aload         5
     219: athrow
     220: return
    Exception table:
       from    to  target type
           2   122   125   Class org/springframework/transaction/UnexpectedRollbackException
           2   122   134   Class org/springframework/transaction/TransactionException
           2   122   159   Class java/lang/RuntimeException
           2   122   159   Class java/lang/Error
         177   182   191   any
         191   193   191   any
           0   202   210   any
         210   212   210   any

  public final void rollback(org.springframework.transaction.TransactionStatus) throws org.springframework.transaction.TransactionException;
    Code:
       0: aload_1
       1: invokeinterface #118,  1          // InterfaceMethod org/springframework/transaction/TransactionStatus.isCompleted:()Z
       6: ifeq          19
       9: new           #30                 // class org/springframework/transaction/IllegalTransactionStateException
      12: dup
      13: ldc           #119                // String Transaction is already completed - do not call commit or rollback more than once per transaction
      15: invokespecial #32                 // Method org/springframework/transaction/IllegalTransactionStateException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_1
      20: checkcast     #81                 // class org/springframework/transaction/support/DefaultTransactionStatus
      23: astore_2
      24: aload_0
      25: aload_2
      26: iconst_0
      27: invokespecial #123                // Method processRollback:(Lorg/springframework/transaction/support/DefaultTransactionStatus;Z)V
      30: return

  private void processRollback(org.springframework.transaction.support.DefaultTransactionStatus, boolean);
    Code:
       0: iload_2
       1: istore_3
       2: aload_0
       3: aload_1
       4: invokevirtual #130                // Method triggerBeforeCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
       7: aload_1
       8: invokevirtual #131                // Method org/springframework/transaction/support/DefaultTransactionStatus.hasSavepoint:()Z
      11: ifeq          39
      14: aload_1
      15: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      18: ifeq          32
      21: aload_0
      22: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      25: ldc           #147                // String Rolling back transaction to savepoint
      27: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      32: aload_1
      33: invokevirtual #148                // Method org/springframework/transaction/support/DefaultTransactionStatus.rollbackToHeldSavepoint:()V
      36: goto          160
      39: aload_1
      40: invokevirtual #134                // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewTransaction:()Z
      43: ifeq          72
      46: aload_1
      47: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      50: ifeq          64
      53: aload_0
      54: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      57: ldc           #149                // String Initiating transaction rollback
      59: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      64: aload_0
      65: aload_1
      66: invokevirtual #150                // Method doRollback:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
      69: goto          160
      72: aload_1
      73: invokevirtual #84                 // Method org/springframework/transaction/support/DefaultTransactionStatus.hasTransaction:()Z
      76: ifeq          140
      79: aload_1
      80: invokevirtual #120                // Method org/springframework/transaction/support/DefaultTransactionStatus.isLocalRollbackOnly:()Z
      83: ifne          93
      86: aload_0
      87: invokevirtual #151                // Method isGlobalRollbackOnParticipationFailure:()Z
      90: ifeq          119
      93: aload_1
      94: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      97: ifeq          111
     100: aload_0
     101: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     104: ldc           #152                // String Participating transaction failed - marking existing transaction as rollback-only
     106: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     111: aload_0
     112: aload_1
     113: invokevirtual #153                // Method doSetRollbackOnly:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     116: goto          151
     119: aload_1
     120: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
     123: ifeq          151
     126: aload_0
     127: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     130: ldc           #154                // String Participating transaction failed - letting transaction originator decide on rollback
     132: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     137: goto          151
     140: aload_0
     141: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
     144: ldc           #155                // String Should roll back transaction but cannot - no transaction available
     146: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     151: aload_0
     152: invokevirtual #137                // Method isFailEarlyOnGlobalRollbackOnly:()Z
     155: ifne          160
     158: iconst_0
     159: istore_3
     160: goto          174
     163: astore        4
     165: aload_0
     166: aload_1
     167: iconst_2
     168: invokespecial #141                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     171: aload         4
     173: athrow
     174: aload_0
     175: aload_1
     176: iconst_1
     177: invokespecial #141                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     180: iload_3
     181: ifeq          194
     184: new           #138                // class org/springframework/transaction/UnexpectedRollbackException
     187: dup
     188: ldc           #156                // String Transaction rolled back because it has been marked as rollback-only
     190: invokespecial #140                // Method org/springframework/transaction/UnexpectedRollbackException."<init>":(Ljava/lang/String;)V
     193: athrow
     194: aload_0
     195: aload_1
     196: invokespecial #146                // Method cleanupAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     199: goto          212
     202: astore        5
     204: aload_0
     205: aload_1
     206: invokespecial #146                // Method cleanupAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
     209: aload         5
     211: athrow
     212: return
    Exception table:
       from    to  target type
           2   160   163   Class java/lang/RuntimeException
           2   160   163   Class java/lang/Error
           0   194   202   any
         202   204   202   any

  private void doRollbackOnCommitException(org.springframework.transaction.support.DefaultTransactionStatus, java.lang.Throwable) throws org.springframework.transaction.TransactionException;
    Code:
       0: aload_1
       1: invokevirtual #134                // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewTransaction:()Z
       4: ifeq          34
       7: aload_1
       8: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      11: ifeq          26
      14: aload_0
      15: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      18: ldc           #157                // String Initiating transaction rollback after commit exception
      20: aload_2
      21: invokeinterface #158,  3          // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      26: aload_0
      27: aload_1
      28: invokevirtual #150                // Method doRollback:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
      31: goto          72
      34: aload_1
      35: invokevirtual #84                 // Method org/springframework/transaction/support/DefaultTransactionStatus.hasTransaction:()Z
      38: ifeq          72
      41: aload_0
      42: invokevirtual #151                // Method isGlobalRollbackOnParticipationFailure:()Z
      45: ifeq          72
      48: aload_1
      49: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      52: ifeq          67
      55: aload_0
      56: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      59: ldc           #159                // String Marking existing transaction as rollback-only after commit exception
      61: aload_2
      62: invokeinterface #158,  3          // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      67: aload_0
      68: aload_1
      69: invokevirtual #153                // Method doSetRollbackOnly:(Lorg/springframework/transaction/support/DefaultTransactionStatus;)V
      72: goto          96
      75: astore_3
      76: aload_0
      77: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      80: ldc           #160                // String Commit exception overridden by rollback exception
      82: aload_2
      83: invokeinterface #108,  3          // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      88: aload_0
      89: aload_1
      90: iconst_2
      91: invokespecial #141                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
      94: aload_3
      95: athrow
      96: aload_0
      97: aload_1
      98: iconst_1
      99: invokespecial #141                // Method triggerAfterCompletion:(Lorg/springframework/transaction/support/DefaultTransactionStatus;I)V
     102: return
    Exception table:
       from    to  target type
           0    72    75   Class java/lang/RuntimeException
           0    72    75   Class java/lang/Error

  protected final void triggerBeforeCommit(org.springframework.transaction.support.DefaultTransactionStatus);
    Code:
       0: aload_1
       1: invokevirtual #83                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewSynchronization:()Z
       4: ifeq          32
       7: aload_1
       8: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      11: ifeq          25
      14: aload_0
      15: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      18: ldc           #161                // String Triggering beforeCommit synchronization
      20: invokeinterface #162,  2          // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      25: aload_1
      26: invokevirtual #163                // Method org/springframework/transaction/support/DefaultTransactionStatus.isReadOnly:()Z
      29: invokestatic  #164                // Method org/springframework/transaction/support/TransactionSynchronizationUtils.triggerBeforeCommit:(Z)V
      32: return

  protected final void triggerBeforeCompletion(org.springframework.transaction.support.DefaultTransactionStatus);
    Code:
       0: aload_1
       1: invokevirtual #83                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewSynchronization:()Z
       4: ifeq          28
       7: aload_1
       8: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      11: ifeq          25
      14: aload_0
      15: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      18: ldc           #165                // String Triggering beforeCompletion synchronization
      20: invokeinterface #162,  2          // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      25: invokestatic  #166                // Method org/springframework/transaction/support/TransactionSynchronizationUtils.triggerBeforeCompletion:()V
      28: return

  private void triggerAfterCommit(org.springframework.transaction.support.DefaultTransactionStatus);
    Code:
       0: aload_1
       1: invokevirtual #83                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewSynchronization:()Z
       4: ifeq          28
       7: aload_1
       8: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      11: ifeq          25
      14: aload_0
      15: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      18: ldc           #167                // String Triggering afterCommit synchronization
      20: invokeinterface #162,  2          // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      25: invokestatic  #168                // Method org/springframework/transaction/support/TransactionSynchronizationUtils.triggerAfterCommit:()V
      28: return

  private void triggerAfterCompletion(org.springframework.transaction.support.DefaultTransactionStatus, int);
    Code:
       0: aload_1
       1: invokevirtual #83                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewSynchronization:()Z
       4: ifeq          73
       7: invokestatic  #109                // Method org/springframework/transaction/support/TransactionSynchronizationManager.getSynchronizations:()Ljava/util/List;
      10: astore_3
      11: invokestatic  #115                // Method org/springframework/transaction/support/TransactionSynchronizationManager.clearSynchronization:()V
      14: aload_1
      15: invokevirtual #84                 // Method org/springframework/transaction/support/DefaultTransactionStatus.hasTransaction:()Z
      18: ifeq          28
      21: aload_1
      22: invokevirtual #134                // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewTransaction:()Z
      25: ifeq          55
      28: aload_1
      29: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      32: ifeq          46
      35: aload_0
      36: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      39: ldc           #169                // String Triggering afterCompletion synchronization
      41: invokeinterface #162,  2          // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      46: aload_0
      47: aload_3
      48: iload_2
      49: invokevirtual #170                // Method invokeAfterCompletion:(Ljava/util/List;I)V
      52: goto          73
      55: aload_3
      56: invokeinterface #171,  1          // InterfaceMethod java/util/List.isEmpty:()Z
      61: ifne          73
      64: aload_0
      65: aload_1
      66: invokevirtual #172                // Method org/springframework/transaction/support/DefaultTransactionStatus.getTransaction:()Ljava/lang/Object;
      69: aload_3
      70: invokevirtual #173                // Method registerAfterCompletionWithExistingTransaction:(Ljava/lang/Object;Ljava/util/List;)V
      73: return

  protected final void invokeAfterCompletion(java.util.List<org.springframework.transaction.support.TransactionSynchronization>, int);
    Code:
       0: aload_1
       1: iload_2
       2: invokestatic  #174                // Method org/springframework/transaction/support/TransactionSynchronizationUtils.invokeAfterCompletion:(Ljava/util/List;I)V
       5: return

  private void cleanupAfterCompletion(org.springframework.transaction.support.DefaultTransactionStatus);
    Code:
       0: aload_1
       1: invokevirtual #175                // Method org/springframework/transaction/support/DefaultTransactionStatus.setCompleted:()V
       4: aload_1
       5: invokevirtual #83                 // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewSynchronization:()Z
       8: ifeq          14
      11: invokestatic  #176                // Method org/springframework/transaction/support/TransactionSynchronizationManager.clear:()V
      14: aload_1
      15: invokevirtual #134                // Method org/springframework/transaction/support/DefaultTransactionStatus.isNewTransaction:()Z
      18: ifeq          29
      21: aload_0
      22: aload_1
      23: invokevirtual #172                // Method org/springframework/transaction/support/DefaultTransactionStatus.getTransaction:()Ljava/lang/Object;
      26: invokevirtual #177                // Method doCleanupAfterCompletion:(Ljava/lang/Object;)V
      29: aload_1
      30: invokevirtual #178                // Method org/springframework/transaction/support/DefaultTransactionStatus.getSuspendedResources:()Ljava/lang/Object;
      33: ifnull        82
      36: aload_1
      37: invokevirtual #121                // Method org/springframework/transaction/support/DefaultTransactionStatus.isDebug:()Z
      40: ifeq          54
      43: aload_0
      44: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      47: ldc           #179                // String Resuming suspended transaction after completion of inner transaction
      49: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      54: aload_1
      55: invokevirtual #84                 // Method org/springframework/transaction/support/DefaultTransactionStatus.hasTransaction:()Z
      58: ifeq          68
      61: aload_1
      62: invokevirtual #172                // Method org/springframework/transaction/support/DefaultTransactionStatus.getTransaction:()Ljava/lang/Object;
      65: goto          69
      68: aconst_null
      69: astore_2
      70: aload_0
      71: aload_2
      72: aload_1
      73: invokevirtual #178                // Method org/springframework/transaction/support/DefaultTransactionStatus.getSuspendedResources:()Ljava/lang/Object;
      76: checkcast     #96                 // class org/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder
      79: invokevirtual #49                 // Method resume:(Ljava/lang/Object;Lorg/springframework/transaction/support/AbstractPlatformTransactionManager$SuspendedResourcesHolder;)V
      82: return

  protected abstract java.lang.Object doGetTransaction() throws org.springframework.transaction.TransactionException;

  protected boolean isExistingTransaction(java.lang.Object) throws org.springframework.transaction.TransactionException;
    Code:
       0: iconst_0
       1: ireturn

  protected boolean useSavepointForNestedTransaction();
    Code:
       0: iconst_1
       1: ireturn

  protected abstract void doBegin(java.lang.Object, org.springframework.transaction.TransactionDefinition) throws org.springframework.transaction.TransactionException;

  protected java.lang.Object doSuspend(java.lang.Object) throws org.springframework.transaction.TransactionException;
    Code:
       0: new           #180                // class org/springframework/transaction/TransactionSuspensionNotSupportedException
       3: dup
       4: new           #34                 // class java/lang/StringBuilder
       7: dup
       8: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      11: ldc           #181                // String Transaction manager [
      13: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_0
      17: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      20: invokevirtual #182                // Method java/lang/Class.getName:()Ljava/lang/String;
      23: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: ldc           #183                // String ] does not support transaction suspension
      28: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #184                // Method org/springframework/transaction/TransactionSuspensionNotSupportedException."<init>":(Ljava/lang/String;)V
      37: athrow

  protected void doResume(java.lang.Object, java.lang.Object) throws org.springframework.transaction.TransactionException;
    Code:
       0: new           #180                // class org/springframework/transaction/TransactionSuspensionNotSupportedException
       3: dup
       4: new           #34                 // class java/lang/StringBuilder
       7: dup
       8: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      11: ldc           #181                // String Transaction manager [
      13: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_0
      17: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      20: invokevirtual #182                // Method java/lang/Class.getName:()Ljava/lang/String;
      23: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: ldc           #183                // String ] does not support transaction suspension
      28: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #184                // Method org/springframework/transaction/TransactionSuspensionNotSupportedException."<init>":(Ljava/lang/String;)V
      37: athrow

  protected boolean shouldCommitOnGlobalRollbackOnly();
    Code:
       0: iconst_0
       1: ireturn

  protected void prepareForCommit(org.springframework.transaction.support.DefaultTransactionStatus);
    Code:
       0: return

  protected abstract void doCommit(org.springframework.transaction.support.DefaultTransactionStatus) throws org.springframework.transaction.TransactionException;

  protected abstract void doRollback(org.springframework.transaction.support.DefaultTransactionStatus) throws org.springframework.transaction.TransactionException;

  protected void doSetRollbackOnly(org.springframework.transaction.support.DefaultTransactionStatus) throws org.springframework.transaction.TransactionException;
    Code:
       0: new           #30                 // class org/springframework/transaction/IllegalTransactionStateException
       3: dup
       4: ldc           #185                // String Participating in existing transactions is not supported - when \'isExistingTransaction\' returns true, appropriate \'doSetRollbackOnly\' behavior must be provided
       6: invokespecial #32                 // Method org/springframework/transaction/IllegalTransactionStateException."<init>":(Ljava/lang/String;)V
       9: athrow

  protected void registerAfterCompletionWithExistingTransaction(java.lang.Object, java.util.List<org.springframework.transaction.support.TransactionSynchronization>) throws org.springframework.transaction.TransactionException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
       4: ldc           #186                // String Cannot register Spring after-completion synchronization with existing transaction - processing Spring after-completion callbacks immediately, with outcome status \'unknown\'
       6: invokeinterface #42,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      11: aload_0
      12: aload_2
      13: iconst_2
      14: invokevirtual #170                // Method invokeAfterCompletion:(Ljava/util/List;I)V
      17: return

  protected void doCleanupAfterCompletion(java.lang.Object);
    Code:
       0: return

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #187                // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: return

  static {};
    Code:
       0: new           #188                // class org/springframework/core/Constants
       3: dup
       4: ldc           #5                  // class org/springframework/transaction/support/AbstractPlatformTransactionManager
       6: invokespecial #189                // Method org/springframework/core/Constants."<init>":(Ljava/lang/Class;)V
       9: putstatic     #14                 // Field constants:Lorg/springframework/core/Constants;
      12: return
}
