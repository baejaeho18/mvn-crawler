Compiled from "DefaultSerializers.java"
public class com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer extends com.esotericsoftware.kryo.Serializer<java.math.BigDecimal> {
  private final com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer bigIntegerSerializer;

  public com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method com/esotericsoftware/kryo/Serializer."<init>":()V
       4: aload_0
       5: new           #3                  // class com/esotericsoftware/kryo/serializers/DefaultSerializers$BigIntegerSerializer
       8: dup
       9: invokespecial #4                  // Method com/esotericsoftware/kryo/serializers/DefaultSerializers$BigIntegerSerializer."<init>":()V
      12: putfield      #5                  // Field bigIntegerSerializer:Lcom/esotericsoftware/kryo/serializers/DefaultSerializers$BigIntegerSerializer;
      15: aload_0
      16: iconst_1
      17: invokevirtual #6                  // Method setAcceptsNull:(Z)V
      20: aload_0
      21: iconst_1
      22: invokevirtual #7                  // Method setImmutable:(Z)V
      25: return

  public void write(com.esotericsoftware.kryo.Kryo, com.esotericsoftware.kryo.io.Output, java.math.BigDecimal);
    Code:
       0: aload_3
       1: ifnonnull     12
       4: aload_2
       5: iconst_0
       6: iconst_1
       7: invokevirtual #8                  // Method com/esotericsoftware/kryo/io/Output.writeVarInt:(IZ)I
      10: pop
      11: return
      12: aload_3
      13: astore        4
      15: aload         4
      17: getstatic     #9                  // Field java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;
      20: if_acmpne     43
      23: aload_0
      24: getfield      #5                  // Field bigIntegerSerializer:Lcom/esotericsoftware/kryo/serializers/DefaultSerializers$BigIntegerSerializer;
      27: aload_1
      28: aload_2
      29: getstatic     #10                 // Field java/math/BigInteger.ZERO:Ljava/math/BigInteger;
      32: invokevirtual #11                 // Method com/esotericsoftware/kryo/serializers/DefaultSerializers$BigIntegerSerializer.write:(Lcom/esotericsoftware/kryo/Kryo;Lcom/esotericsoftware/kryo/io/Output;Ljava/math/BigInteger;)V
      35: aload_2
      36: iconst_0
      37: iconst_0
      38: invokevirtual #12                 // Method com/esotericsoftware/kryo/io/Output.writeInt:(IZ)I
      41: pop
      42: return
      43: aload_0
      44: getfield      #5                  // Field bigIntegerSerializer:Lcom/esotericsoftware/kryo/serializers/DefaultSerializers$BigIntegerSerializer;
      47: aload_1
      48: aload_2
      49: aload         4
      51: invokevirtual #13                 // Method java/math/BigDecimal.unscaledValue:()Ljava/math/BigInteger;
      54: invokevirtual #11                 // Method com/esotericsoftware/kryo/serializers/DefaultSerializers$BigIntegerSerializer.write:(Lcom/esotericsoftware/kryo/Kryo;Lcom/esotericsoftware/kryo/io/Output;Ljava/math/BigInteger;)V
      57: aload_2
      58: aload         4
      60: invokevirtual #14                 // Method java/math/BigDecimal.scale:()I
      63: iconst_0
      64: invokevirtual #12                 // Method com/esotericsoftware/kryo/io/Output.writeInt:(IZ)I
      67: pop
      68: return

  public java.math.BigDecimal read(com.esotericsoftware.kryo.Kryo, com.esotericsoftware.kryo.io.Input, java.lang.Class<java.math.BigDecimal>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field bigIntegerSerializer:Lcom/esotericsoftware/kryo/serializers/DefaultSerializers$BigIntegerSerializer;
       4: aload_1
       5: aload_2
       6: ldc           #15                 // class java/math/BigInteger
       8: invokevirtual #16                 // Method com/esotericsoftware/kryo/serializers/DefaultSerializers$BigIntegerSerializer.read:(Lcom/esotericsoftware/kryo/Kryo;Lcom/esotericsoftware/kryo/io/Input;Ljava/lang/Class;)Ljava/math/BigInteger;
      11: astore        4
      13: aload         4
      15: ifnonnull     20
      18: aconst_null
      19: areturn
      20: aload_2
      21: iconst_0
      22: invokevirtual #17                 // Method com/esotericsoftware/kryo/io/Input.readInt:(Z)I
      25: istore        5
      27: aload_3
      28: ldc           #18                 // class java/math/BigDecimal
      30: if_acmpeq     115
      33: aload_3
      34: ifnull        115
      37: aload_3
      38: iconst_2
      39: anewarray     #19                 // class java/lang/Class
      42: dup
      43: iconst_0
      44: ldc           #15                 // class java/math/BigInteger
      46: aastore
      47: dup
      48: iconst_1
      49: getstatic     #20                 // Field java/lang/Integer.TYPE:Ljava/lang/Class;
      52: aastore
      53: invokevirtual #21                 // Method java/lang/Class.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;
      56: astore        6
      58: aload         6
      60: invokevirtual #22                 // Method java/lang/reflect/Constructor.isAccessible:()Z
      63: ifne          77
      66: aload         6
      68: iconst_1
      69: invokevirtual #23                 // Method java/lang/reflect/Constructor.setAccessible:(Z)V
      72: goto          77
      75: astore        7
      77: aload         6
      79: iconst_2
      80: anewarray     #25                 // class java/lang/Object
      83: dup
      84: iconst_0
      85: aload         4
      87: aastore
      88: dup
      89: iconst_1
      90: iload         5
      92: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      95: aastore
      96: invokevirtual #27                 // Method java/lang/reflect/Constructor.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;
      99: checkcast     #18                 // class java/math/BigDecimal
     102: areturn
     103: astore        6
     105: new           #29                 // class com/esotericsoftware/kryo/KryoException
     108: dup
     109: aload         6
     111: invokespecial #30                 // Method com/esotericsoftware/kryo/KryoException."<init>":(Ljava/lang/Throwable;)V
     114: athrow
     115: aload         4
     117: getstatic     #10                 // Field java/math/BigInteger.ZERO:Ljava/math/BigInteger;
     120: if_acmpne     132
     123: iload         5
     125: ifne          132
     128: getstatic     #9                  // Field java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;
     131: areturn
     132: new           #18                 // class java/math/BigDecimal
     135: dup
     136: aload         4
     138: iload         5
     140: invokespecial #31                 // Method java/math/BigDecimal."<init>":(Ljava/math/BigInteger;I)V
     143: areturn
    Exception table:
       from    to  target type
          66    72    75   Class java/lang/SecurityException
          37   102   103   Class java/lang/Exception

  public java.lang.Object read(com.esotericsoftware.kryo.Kryo, com.esotericsoftware.kryo.io.Input, java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #32                 // Method read:(Lcom/esotericsoftware/kryo/Kryo;Lcom/esotericsoftware/kryo/io/Input;Ljava/lang/Class;)Ljava/math/BigDecimal;
       7: areturn

  public void write(com.esotericsoftware.kryo.Kryo, com.esotericsoftware.kryo.io.Output, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: checkcast     #18                 // class java/math/BigDecimal
       7: invokevirtual #33                 // Method write:(Lcom/esotericsoftware/kryo/Kryo;Lcom/esotericsoftware/kryo/io/Output;Ljava/math/BigDecimal;)V
      10: return
}
