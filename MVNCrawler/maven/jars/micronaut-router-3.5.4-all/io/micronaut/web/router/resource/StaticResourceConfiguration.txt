Compiled from "StaticResourceConfiguration.java"
public class io.micronaut.web.router.resource.StaticResourceConfiguration implements io.micronaut.core.util.Toggleable {
  public static final java.lang.String PREFIX;

  public static final boolean DEFAULT_ENABLED;

  public static final java.lang.String DEFAULT_MAPPING;

  private boolean enabled;

  private java.util.List<java.lang.String> paths;

  private java.lang.String mapping;

  private final io.micronaut.core.io.ResourceResolver resourceResolver;

  private final io.micronaut.http.context.ServerContextPathProvider contextPathProvider;

  public io.micronaut.web.router.resource.StaticResourceConfiguration(io.micronaut.core.io.ResourceResolver, io.micronaut.http.context.ServerContextPathProvider);
    Code:
       0: aload_0
       1: invokespecial #34                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #36                 // Field enabled:Z
       9: aload_0
      10: invokestatic  #42                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      13: putfield      #44                 // Field paths:Ljava/util/List;
      16: aload_0
      17: ldc           #19                 // String /**
      19: putfield      #46                 // Field mapping:Ljava/lang/String;
      22: aload_0
      23: aload_1
      24: putfield      #48                 // Field resourceResolver:Lio/micronaut/core/io/ResourceResolver;
      27: aload_0
      28: aload_2
      29: putfield      #50                 // Field contextPathProvider:Lio/micronaut/http/context/ServerContextPathProvider;
      32: return

  public boolean isEnabled();
    Code:
       0: aload_0
       1: getfield      #36                 // Field enabled:Z
       4: ireturn

  public java.util.List<io.micronaut.core.io.ResourceLoader> getResourceLoaders();
    Code:
       0: aload_0
       1: getfield      #36                 // Field enabled:Z
       4: ifeq          140
       7: new           #58                 // class java/util/ArrayList
      10: dup
      11: aload_0
      12: getfield      #44                 // Field paths:Ljava/util/List;
      15: invokeinterface #64,  1           // InterfaceMethod java/util/List.size:()I
      20: invokespecial #67                 // Method java/util/ArrayList."<init>":(I)V
      23: astore_1
      24: aload_0
      25: getfield      #44                 // Field paths:Ljava/util/List;
      28: invokeinterface #71,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      33: astore_2
      34: aload_2
      35: invokeinterface #76,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      40: ifeq          138
      43: aload_2
      44: invokeinterface #80,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      49: checkcast     #82                 // class java/lang/String
      52: astore_3
      53: aload_3
      54: ldc           #84                 // String classpath:
      56: invokevirtual #88                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      59: ifeq          72
      62: new           #90                 // class io/micronaut/context/exceptions/ConfigurationException
      65: dup
      66: ldc           #92                 // String A path value of [classpath:] will allow access to class files!
      68: invokespecial #95                 // Method io/micronaut/context/exceptions/ConfigurationException."<init>":(Ljava/lang/String;)V
      71: athrow
      72: aload_0
      73: getfield      #48                 // Field resourceResolver:Lio/micronaut/core/io/ResourceResolver;
      76: aload_3
      77: invokevirtual #101                // Method io/micronaut/core/io/ResourceResolver.getLoaderForBasePath:(Ljava/lang/String;)Ljava/util/Optional;
      80: astore        4
      82: aload         4
      84: invokevirtual #106                // Method java/util/Optional.isPresent:()Z
      87: ifeq          108
      90: aload_1
      91: aload         4
      93: invokevirtual #109                // Method java/util/Optional.get:()Ljava/lang/Object;
      96: checkcast     #111                // class io/micronaut/core/io/ResourceLoader
      99: invokeinterface #114,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     104: pop
     105: goto          135
     108: new           #90                 // class io/micronaut/context/exceptions/ConfigurationException
     111: dup
     112: new           #116                // class java/lang/StringBuilder
     115: dup
     116: invokespecial #117                // Method java/lang/StringBuilder."<init>":()V
     119: ldc           #119                // String Unrecognizable resource path:
     121: invokevirtual #123                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     124: aload_3
     125: invokevirtual #123                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     128: invokevirtual #127                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     131: invokespecial #95                 // Method io/micronaut/context/exceptions/ConfigurationException."<init>":(Ljava/lang/String;)V
     134: athrow
     135: goto          34
     138: aload_1
     139: areturn
     140: invokestatic  #42                 // Method java/util/Collections.emptyList:()Ljava/util/List;
     143: areturn

  public java.lang.String getMapping();
    Code:
       0: aload_0
       1: getfield      #46                 // Field mapping:Ljava/lang/String;
       4: areturn

  public void setEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #36                 // Field enabled:Z
       5: return

  public void setPaths(java.util.List<java.lang.String>);
    Code:
       0: aload_1
       1: invokestatic  #145                // Method io/micronaut/core/util/CollectionUtils.isNotEmpty:(Ljava/util/Collection;)Z
       4: ifeq          12
       7: aload_0
       8: aload_1
       9: putfield      #44                 // Field paths:Ljava/util/List;
      12: return

  public void setMapping(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #151                // Method io/micronaut/core/util/StringUtils.isNotEmpty:(Ljava/lang/CharSequence;)Z
       4: ifeq          57
       7: aload_0
       8: getfield      #50                 // Field contextPathProvider:Lio/micronaut/http/context/ServerContextPathProvider;
      11: ifnull        26
      14: aload_0
      15: getfield      #50                 // Field contextPathProvider:Lio/micronaut/http/context/ServerContextPathProvider;
      18: invokeinterface #156,  1          // InterfaceMethod io/micronaut/http/context/ServerContextPathProvider.getContextPath:()Ljava/lang/String;
      23: goto          27
      26: aconst_null
      27: astore_2
      28: aload_2
      29: ifnull        52
      32: aload_1
      33: aload_2
      34: invokevirtual #160                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      37: ifne          52
      40: aload_0
      41: aload_2
      42: aload_1
      43: invokestatic  #164                // Method io/micronaut/core/util/StringUtils.prependUri:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      46: putfield      #46                 // Field mapping:Ljava/lang/String;
      49: goto          57
      52: aload_0
      53: aload_1
      54: putfield      #46                 // Field mapping:Ljava/lang/String;
      57: return
}
