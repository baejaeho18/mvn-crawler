Compiled from "BasicObjectRouteMatch.java"
public class io.micronaut.web.router.BasicObjectRouteMatch implements io.micronaut.web.router.RouteMatch<java.lang.Object> {
  private final java.lang.Object object;

  public io.micronaut.web.router.BasicObjectRouteMatch(java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #15                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #17                 // Field object:Ljava/lang/Object;
       9: return

  public java.lang.Class<?> getDeclaringType();
    Code:
       0: aload_0
       1: getfield      #17                 // Field object:Ljava/lang/Object;
       4: invokevirtual #25                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       7: areturn

  public java.util.Map<java.lang.String, java.lang.Object> getVariableValues();
    Code:
       0: invokestatic  #33                 // Method java/util/Collections.emptyMap:()Ljava/util/Map;
       3: areturn

  public java.lang.Object execute(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #17                 // Field object:Ljava/lang/Object;
       4: areturn

  public io.micronaut.web.router.RouteMatch<java.lang.Object> fulfill(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: areturn

  public io.micronaut.web.router.RouteMatch<java.lang.Object> decorate(java.util.function.Function<io.micronaut.web.router.RouteMatch<java.lang.Object>, java.lang.Object>);
    Code:
       0: new           #2                  // class io/micronaut/web/router/BasicObjectRouteMatch
       3: dup
       4: aload_1
       5: aload_0
       6: invokeinterface #52,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      11: invokespecial #54                 // Method "<init>":(Ljava/lang/Object;)V
      14: areturn

  public java.util.Optional<io.micronaut.core.type.Argument<?>> getRequiredInput(java.lang.String);
    Code:
       0: invokestatic  #66                 // Method java/util/Optional.empty:()Ljava/util/Optional;
       3: areturn

  public java.util.Optional<io.micronaut.core.type.Argument<?>> getBodyArgument();
    Code:
       0: invokestatic  #66                 // Method java/util/Optional.empty:()Ljava/util/Optional;
       3: areturn

  public java.util.List<io.micronaut.http.MediaType> getProduces();
    Code:
       0: invokestatic  #75                 // Method java/util/Collections.emptyList:()Ljava/util/List;
       3: areturn

  public io.micronaut.core.type.ReturnType<?> getReturnType();
    Code:
       0: aload_0
       1: getfield      #17                 // Field object:Ljava/lang/Object;
       4: invokevirtual #25                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       7: iconst_0
       8: anewarray     #80                 // class io/micronaut/core/type/Argument
      11: invokestatic  #86                 // InterfaceMethod io/micronaut/core/type/ReturnType.of:(Ljava/lang/Class;[Lio/micronaut/core/type/Argument;)Lio/micronaut/core/type/ReturnType;
      14: areturn

  public boolean doesConsume(io.micronaut.http.MediaType);
    Code:
       0: iconst_1
       1: ireturn

  public boolean doesProduce(java.util.Collection<io.micronaut.http.MediaType>);
    Code:
       0: iconst_1
       1: ireturn

  public boolean doesProduce(io.micronaut.http.MediaType);
    Code:
       0: iconst_1
       1: ireturn

  public boolean test(io.micronaut.http.HttpRequest);
    Code:
       0: iconst_1
       1: ireturn

  public boolean test(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #105                // class io/micronaut/http/HttpRequest
       5: invokevirtual #107                // Method test:(Lio/micronaut/http/HttpRequest;)Z
       8: ireturn
}
