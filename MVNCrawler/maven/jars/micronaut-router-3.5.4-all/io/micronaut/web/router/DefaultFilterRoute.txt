Compiled from "DefaultFilterRoute.java"
class io.micronaut.web.router.DefaultFilterRoute implements io.micronaut.web.router.FilterRoute {
  private final java.util.List<java.lang.String> patterns;

  private final java.util.function.Supplier<io.micronaut.http.filter.HttpFilter> filterSupplier;

  private final io.micronaut.core.annotation.AnnotationMetadataResolver annotationMetadataResolver;

  private java.util.Set<io.micronaut.http.HttpMethod> httpMethods;

  private io.micronaut.http.filter.FilterPatternStyle patternStyle;

  private io.micronaut.http.filter.HttpFilter filter;

  private io.micronaut.core.annotation.AnnotationMetadata annotationMetadata;

  io.micronaut.web.router.DefaultFilterRoute(java.lang.String, java.util.function.Supplier<io.micronaut.http.filter.HttpFilter>, io.micronaut.core.annotation.AnnotationMetadataResolver);
    Code:
       0: aload_0
       1: invokespecial #31                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #33                 // class java/util/ArrayList
       8: dup
       9: iconst_1
      10: invokespecial #36                 // Method java/util/ArrayList."<init>":(I)V
      13: putfield      #38                 // Field patterns:Ljava/util/List;
      16: aload_1
      17: ldc           #40                 // String Pattern argument is required
      19: invokestatic  #46                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      22: pop
      23: aload_1
      24: ldc           #48                 // String HttpFilter argument is required
      26: invokestatic  #46                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      29: pop
      30: aload_0
      31: aload_2
      32: putfield      #50                 // Field filterSupplier:Ljava/util/function/Supplier;
      35: aload_0
      36: getfield      #38                 // Field patterns:Ljava/util/List;
      39: aload_1
      40: invokeinterface #56,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      45: pop
      46: aload_0
      47: aload_3
      48: putfield      #58                 // Field annotationMetadataResolver:Lio/micronaut/core/annotation/AnnotationMetadataResolver;
      51: return

  io.micronaut.web.router.DefaultFilterRoute(java.lang.String, java.util.function.Supplier<io.micronaut.http.filter.HttpFilter>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #68                 // Field io/micronaut/core/annotation/AnnotationMetadataResolver.DEFAULT:Lio/micronaut/core/annotation/AnnotationMetadataResolver;
       6: invokespecial #70                 // Method "<init>":(Ljava/lang/String;Ljava/util/function/Supplier;Lio/micronaut/core/annotation/AnnotationMetadataResolver;)V
       9: return

  public io.micronaut.core.annotation.AnnotationMetadata getAnnotationMetadata();
    Code:
       0: aload_0
       1: getfield      #75                 // Field annotationMetadata:Lio/micronaut/core/annotation/AnnotationMetadata;
       4: astore_1
       5: aload_1
       6: ifnonnull     51
       9: aload_0
      10: dup
      11: astore_2
      12: monitorenter
      13: aload_0
      14: getfield      #75                 // Field annotationMetadata:Lio/micronaut/core/annotation/AnnotationMetadata;
      17: astore_1
      18: aload_1
      19: ifnonnull     41
      22: aload_0
      23: getfield      #58                 // Field annotationMetadataResolver:Lio/micronaut/core/annotation/AnnotationMetadataResolver;
      26: aload_0
      27: invokevirtual #79                 // Method getFilter:()Lio/micronaut/http/filter/HttpFilter;
      30: invokeinterface #83,  2           // InterfaceMethod io/micronaut/core/annotation/AnnotationMetadataResolver.resolveMetadata:(Ljava/lang/Object;)Lio/micronaut/core/annotation/AnnotationMetadata;
      35: astore_1
      36: aload_0
      37: aload_1
      38: putfield      #75                 // Field annotationMetadata:Lio/micronaut/core/annotation/AnnotationMetadata;
      41: aload_2
      42: monitorexit
      43: goto          51
      46: astore_3
      47: aload_2
      48: monitorexit
      49: aload_3
      50: athrow
      51: aload_1
      52: areturn
    Exception table:
       from    to  target type
          13    43    46   any
          46    49    46   any

  public io.micronaut.http.filter.HttpFilter getFilter();
    Code:
       0: aload_0
       1: getfield      #89                 // Field filter:Lio/micronaut/http/filter/HttpFilter;
       4: astore_1
       5: aload_1
       6: ifnonnull     50
       9: aload_0
      10: dup
      11: astore_2
      12: monitorenter
      13: aload_0
      14: getfield      #89                 // Field filter:Lio/micronaut/http/filter/HttpFilter;
      17: astore_1
      18: aload_1
      19: ifnonnull     40
      22: aload_0
      23: getfield      #50                 // Field filterSupplier:Ljava/util/function/Supplier;
      26: invokeinterface #95,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      31: checkcast     #97                 // class io/micronaut/http/filter/HttpFilter
      34: astore_1
      35: aload_0
      36: aload_1
      37: putfield      #89                 // Field filter:Lio/micronaut/http/filter/HttpFilter;
      40: aload_2
      41: monitorexit
      42: goto          50
      45: astore_3
      46: aload_2
      47: monitorexit
      48: aload_3
      49: athrow
      50: aload_1
      51: areturn
    Exception table:
       from    to  target type
          13    42    45   any
          45    48    45   any

  public java.util.Set<io.micronaut.http.HttpMethod> getFilterMethods();
    Code:
       0: aload_0
       1: getfield      #102                // Field httpMethods:Ljava/util/Set;
       4: areturn

  public java.lang.String[] getPatterns();
    Code:
       0: aload_0
       1: getfield      #38                 // Field patterns:Ljava/util/List;
       4: getstatic     #110                // Field io/micronaut/core/util/StringUtils.EMPTY_STRING_ARRAY:[Ljava/lang/String;
       7: invokeinterface #114,  2          // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      12: checkcast     #115                // class "[Ljava/lang/String;"
      15: areturn

  public io.micronaut.http.filter.FilterPatternStyle getPatternStyle();
    Code:
       0: aload_0
       1: getfield      #119                // Field patternStyle:Lio/micronaut/http/filter/FilterPatternStyle;
       4: ifnull        14
       7: aload_0
       8: getfield      #119                // Field patternStyle:Lio/micronaut/http/filter/FilterPatternStyle;
      11: goto          17
      14: invokestatic  #124                // Method io/micronaut/http/filter/FilterPatternStyle.defaultStyle:()Lio/micronaut/http/filter/FilterPatternStyle;
      17: areturn

  public java.util.Optional<io.micronaut.http.filter.HttpFilter> match(io.micronaut.http.HttpMethod, java.net.URI);
    Code:
       0: aload_0
       1: getfield      #102                // Field httpMethods:Ljava/util/Set;
       4: ifnull        24
       7: aload_0
       8: getfield      #102                // Field httpMethods:Ljava/util/Set;
      11: aload_1
      12: invokeinterface #134,  2          // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      17: ifne          24
      20: invokestatic  #140                // Method java/util/Optional.empty:()Ljava/util/Optional;
      23: areturn
      24: aload_2
      25: invokevirtual #146                // Method java/net/URI.getPath:()Ljava/lang/String;
      28: astore_3
      29: aload_0
      30: invokevirtual #148                // Method getPatternStyle:()Lio/micronaut/http/filter/FilterPatternStyle;
      33: invokevirtual #152                // Method io/micronaut/http/filter/FilterPatternStyle.getPathMatcher:()Lio/micronaut/core/util/PathMatcher;
      36: astore        4
      38: aload_0
      39: getfield      #38                 // Field patterns:Ljava/util/List;
      42: invokeinterface #156,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      47: astore        5
      49: aload         5
      51: invokeinterface #166,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      56: ifeq          124
      59: aload         5
      61: invokeinterface #169,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      66: checkcast     #158                // class java/lang/String
      69: astore        6
      71: aload         4
      73: aload         6
      75: aload_3
      76: invokeinterface #173,  3          // InterfaceMethod io/micronaut/core/util/PathMatcher.matches:(Ljava/lang/String;Ljava/lang/String;)Z
      81: ifeq          121
      84: aload_0
      85: invokevirtual #79                 // Method getFilter:()Lio/micronaut/http/filter/HttpFilter;
      88: astore        7
      90: aload         7
      92: instanceof    #175                // class io/micronaut/core/util/Toggleable
      95: ifeq          115
      98: aload         7
     100: checkcast     #175                // class io/micronaut/core/util/Toggleable
     103: invokeinterface #178,  1          // InterfaceMethod io/micronaut/core/util/Toggleable.isEnabled:()Z
     108: ifne          115
     111: invokestatic  #140                // Method java/util/Optional.empty:()Ljava/util/Optional;
     114: areturn
     115: aload         7
     117: invokestatic  #182                // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
     120: areturn
     121: goto          49
     124: invokestatic  #140                // Method java/util/Optional.empty:()Ljava/util/Optional;
     127: areturn

  public io.micronaut.web.router.FilterRoute pattern(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #192                // Method io/micronaut/core/util/StringUtils.isNotEmpty:(Ljava/lang/CharSequence;)Z
       4: ifeq          18
       7: aload_0
       8: getfield      #38                 // Field patterns:Ljava/util/List;
      11: aload_1
      12: invokeinterface #56,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      17: pop
      18: aload_0
      19: areturn

  public io.micronaut.web.router.FilterRoute methods(io.micronaut.http.HttpMethod...);
    Code:
       0: aload_1
       1: invokestatic  #199                // Method io/micronaut/core/util/ArrayUtils.isNotEmpty:([Ljava/lang/Object;)Z
       4: ifeq          39
       7: aload_0
       8: getfield      #102                // Field httpMethods:Ljava/util/Set;
      11: ifnonnull     25
      14: aload_0
      15: new           #201                // class java/util/HashSet
      18: dup
      19: invokespecial #202                // Method java/util/HashSet."<init>":()V
      22: putfield      #102                // Field httpMethods:Ljava/util/Set;
      25: aload_0
      26: getfield      #102                // Field httpMethods:Ljava/util/Set;
      29: aload_1
      30: invokestatic  #208                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      33: invokeinterface #212,  2          // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      38: pop
      39: aload_0
      40: areturn

  public io.micronaut.web.router.FilterRoute patternStyle(io.micronaut.http.filter.FilterPatternStyle);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #119                // Field patternStyle:Lio/micronaut/http/filter/FilterPatternStyle;
       5: aload_0
       6: areturn

  public java.lang.Object getFilter();
    Code:
       0: aload_0
       1: invokevirtual #79                 // Method getFilter:()Lio/micronaut/http/filter/HttpFilter;
       4: areturn
}
