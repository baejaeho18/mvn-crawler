Compiled from "Router.java"
public interface io.micronaut.web.router.Router {
  public abstract <T, R> java.util.stream.Stream<io.micronaut.web.router.UriRouteMatch<T, R>> findAny(java.lang.CharSequence, io.micronaut.http.HttpRequest<?>);

  public abstract java.util.Set<java.lang.Integer> getExposedPorts();

  public abstract void applyDefaultPorts(java.util.List<java.lang.Integer>);

  public abstract <T, R> java.util.stream.Stream<io.micronaut.web.router.UriRouteMatch<T, R>> find(io.micronaut.http.HttpMethod, java.lang.CharSequence, io.micronaut.http.HttpRequest<?>);

  public default <T, R> java.util.stream.Stream<io.micronaut.web.router.UriRouteMatch<T, R>> find(io.micronaut.http.HttpMethod, java.net.URI, io.micronaut.http.HttpRequest<?>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #31                 // Method java/net/URI.toString:()Ljava/lang/String;
       6: aload_3
       7: invokeinterface #33,  4           // InterfaceMethod find:(Lio/micronaut/http/HttpMethod;Ljava/lang/CharSequence;Lio/micronaut/http/HttpRequest;)Ljava/util/stream/Stream;
      12: areturn

  public default <T, R> java.util.stream.Stream<io.micronaut.web.router.UriRouteMatch<T, R>> find(io.micronaut.http.HttpRequest<?>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_1
       3: invokeinterface #47,  1           // InterfaceMethod io/micronaut/http/HttpRequest.getPath:()Ljava/lang/String;
       8: invokeinterface #50,  3           // InterfaceMethod find:(Lio/micronaut/http/HttpRequest;Ljava/lang/CharSequence;)Ljava/util/stream/Stream;
      13: areturn

  public default <T, R> java.util.stream.Stream<io.micronaut.web.router.UriRouteMatch<T, R>> find(io.micronaut.http.HttpRequest<?>, java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #54,  1           // InterfaceMethod io/micronaut/http/HttpRequest.getMethodName:()Ljava/lang/String;
       7: invokestatic  #60                 // Method io/micronaut/http/HttpMethod.valueOf:(Ljava/lang/String;)Lio/micronaut/http/HttpMethod;
      10: aload_2
      11: aload_1
      12: invokeinterface #33,  4           // InterfaceMethod find:(Lio/micronaut/http/HttpMethod;Ljava/lang/CharSequence;Lio/micronaut/http/HttpRequest;)Ljava/util/stream/Stream;
      17: areturn

  public abstract <T, R> java.util.List<io.micronaut.web.router.UriRouteMatch<T, R>> findAllClosest(io.micronaut.http.HttpRequest<?>);

  public abstract java.util.stream.Stream<io.micronaut.web.router.UriRoute> uriRoutes();

  public abstract <T, R> java.util.Optional<io.micronaut.web.router.UriRouteMatch<T, R>> route(io.micronaut.http.HttpMethod, java.lang.CharSequence);

  public abstract <R> java.util.Optional<io.micronaut.web.router.RouteMatch<R>> route(io.micronaut.http.HttpStatus);

  public abstract <R> java.util.Optional<io.micronaut.web.router.RouteMatch<R>> route(java.lang.Class, io.micronaut.http.HttpStatus);

  public abstract <R> java.util.Optional<io.micronaut.web.router.RouteMatch<R>> route(java.lang.Throwable);

  public abstract <R> java.util.Optional<io.micronaut.web.router.RouteMatch<R>> route(java.lang.Class, java.lang.Throwable);

  public abstract <R> java.util.Optional<io.micronaut.web.router.RouteMatch<R>> findErrorRoute(java.lang.Class<?>, java.lang.Throwable, io.micronaut.http.HttpRequest<?>);

  public abstract <R> java.util.Optional<io.micronaut.web.router.RouteMatch<R>> findErrorRoute(java.lang.Throwable, io.micronaut.http.HttpRequest<?>);

  public abstract <R> java.util.Optional<io.micronaut.web.router.RouteMatch<R>> findStatusRoute(java.lang.Class<?>, io.micronaut.http.HttpStatus, io.micronaut.http.HttpRequest<?>);

  public abstract <R> java.util.Optional<io.micronaut.web.router.RouteMatch<R>> findStatusRoute(io.micronaut.http.HttpStatus, io.micronaut.http.HttpRequest<?>);

  public abstract java.util.List<io.micronaut.http.filter.HttpFilter> findFilters(io.micronaut.http.HttpRequest<?>);

  public default <T, R> java.util.Optional<io.micronaut.web.router.UriRouteMatch<T, R>> GET(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getstatic     #98                 // Field io/micronaut/http/HttpMethod.GET:Lio/micronaut/http/HttpMethod;
       4: aload_1
       5: invokeinterface #100,  3          // InterfaceMethod route:(Lio/micronaut/http/HttpMethod;Ljava/lang/CharSequence;)Ljava/util/Optional;
      10: areturn

  public default <T, R> java.util.Optional<io.micronaut.web.router.UriRouteMatch<T, R>> POST(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getstatic     #103                // Field io/micronaut/http/HttpMethod.POST:Lio/micronaut/http/HttpMethod;
       4: aload_1
       5: invokeinterface #100,  3          // InterfaceMethod route:(Lio/micronaut/http/HttpMethod;Ljava/lang/CharSequence;)Ljava/util/Optional;
      10: areturn

  public default <T, R> java.util.Optional<io.micronaut.web.router.UriRouteMatch<T, R>> PUT(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getstatic     #106                // Field io/micronaut/http/HttpMethod.PUT:Lio/micronaut/http/HttpMethod;
       4: aload_1
       5: invokeinterface #100,  3          // InterfaceMethod route:(Lio/micronaut/http/HttpMethod;Ljava/lang/CharSequence;)Ljava/util/Optional;
      10: areturn

  public default <T, R> java.util.Optional<io.micronaut.web.router.UriRouteMatch<T, R>> PATCH(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getstatic     #109                // Field io/micronaut/http/HttpMethod.PATCH:Lio/micronaut/http/HttpMethod;
       4: aload_1
       5: invokeinterface #100,  3          // InterfaceMethod route:(Lio/micronaut/http/HttpMethod;Ljava/lang/CharSequence;)Ljava/util/Optional;
      10: areturn

  public default <T, R> java.util.Optional<io.micronaut.web.router.UriRouteMatch<T, R>> DELETE(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getstatic     #112                // Field io/micronaut/http/HttpMethod.DELETE:Lio/micronaut/http/HttpMethod;
       4: aload_1
       5: invokeinterface #100,  3          // InterfaceMethod route:(Lio/micronaut/http/HttpMethod;Ljava/lang/CharSequence;)Ljava/util/Optional;
      10: areturn

  public default <T, R> java.util.Optional<io.micronaut.web.router.UriRouteMatch<T, R>> OPTIONS(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getstatic     #115                // Field io/micronaut/http/HttpMethod.OPTIONS:Lio/micronaut/http/HttpMethod;
       4: aload_1
       5: invokeinterface #100,  3          // InterfaceMethod route:(Lio/micronaut/http/HttpMethod;Ljava/lang/CharSequence;)Ljava/util/Optional;
      10: areturn

  public default <T, R> java.util.Optional<io.micronaut.web.router.UriRouteMatch<T, R>> HEAD(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getstatic     #118                // Field io/micronaut/http/HttpMethod.HEAD:Lio/micronaut/http/HttpMethod;
       4: aload_1
       5: invokeinterface #100,  3          // InterfaceMethod route:(Lio/micronaut/http/HttpMethod;Ljava/lang/CharSequence;)Ljava/util/Optional;
      10: areturn
}
