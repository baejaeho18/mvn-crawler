Compiled from "RouteVersionFilter.java"
public class io.micronaut.web.router.version.RouteVersionFilter implements io.micronaut.web.router.version.VersionRouteMatchFilter {
  private static final org.slf4j.Logger LOG;

  private final java.util.List<io.micronaut.web.router.version.resolution.RequestVersionResolver> resolvingStrategies;

  private final io.micronaut.web.router.version.DefaultVersionProvider defaultVersionProvider;

  public io.micronaut.web.router.version.RouteVersionFilter(java.util.List<io.micronaut.web.router.version.resolution.RequestVersionResolver>, io.micronaut.web.router.version.DefaultVersionProvider);
    Code:
       0: aload_0
       1: invokespecial #30                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #32                 // Field resolvingStrategies:Ljava/util/List;
       9: aload_0
      10: aload_2
      11: putfield      #34                 // Field defaultVersionProvider:Lio/micronaut/web/router/version/DefaultVersionProvider;
      14: return

  public <T, R> java.util.function.Predicate<io.micronaut.web.router.UriRouteMatch<T, R>> filter(io.micronaut.http.HttpRequest<?>);
    Code:
       0: ldc           #41                 // String request
       2: aload_1
       3: invokestatic  #47                 // Method io/micronaut/core/util/ArgumentUtils.requireNonNull:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #32                 // Field resolvingStrategies:Ljava/util/List;
      11: ifnull        26
      14: aload_0
      15: getfield      #32                 // Field resolvingStrategies:Ljava/util/List;
      18: invokeinterface #53,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      23: ifeq          32
      26: invokedynamic #72,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      31: areturn
      32: aload_0
      33: getfield      #34                 // Field defaultVersionProvider:Lio/micronaut/web/router/version/DefaultVersionProvider;
      36: ifnonnull     45
      39: invokestatic  #78                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      42: goto          57
      45: aload_0
      46: getfield      #34                 // Field defaultVersionProvider:Lio/micronaut/web/router/version/DefaultVersionProvider;
      49: invokeinterface #84,  1           // InterfaceMethod io/micronaut/web/router/version/DefaultVersionProvider.resolveDefaultVersion:()Ljava/lang/String;
      54: invokestatic  #88                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      57: astore_2
      58: aload_0
      59: aload_1
      60: invokevirtual #92                 // Method resolveVersion:(Lio/micronaut/http/HttpRequest;)Ljava/util/Optional;
      63: astore_3
      64: aload_0
      65: aload_1
      66: aload_3
      67: aload_2
      68: invokedynamic #100,  0            // InvokeDynamic #1:test:(Lio/micronaut/web/router/version/RouteVersionFilter;Lio/micronaut/http/HttpRequest;Ljava/util/Optional;Ljava/util/Optional;)Ljava/util/function/Predicate;
      73: areturn

  protected boolean matchIfRouteIsNotVersioned(io.micronaut.http.HttpRequest<?>, java.lang.String);
    Code:
       0: aload_2
       1: ifnull        34
       4: getstatic     #112                // Field LOG:Lorg/slf4j/Logger;
       7: invokeinterface #117,  1          // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
      12: ifeq          32
      15: getstatic     #112                // Field LOG:Lorg/slf4j/Logger;
      18: ldc           #119                // String Route does not specify a version but the version {} was resolved for request to URI {}
      20: aload_2
      21: aload_1
      22: invokeinterface #125,  1          // InterfaceMethod io/micronaut/http/HttpRequest.getUri:()Ljava/net/URI;
      27: invokeinterface #129,  4          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      32: iconst_0
      33: ireturn
      34: getstatic     #112                // Field LOG:Lorg/slf4j/Logger;
      37: invokeinterface #117,  1          // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
      42: ifeq          61
      45: getstatic     #112                // Field LOG:Lorg/slf4j/Logger;
      48: ldc           #131                // String Route does not specify a version and no version was resolved for request to URI {}
      50: aload_1
      51: invokeinterface #125,  1          // InterfaceMethod io/micronaut/http/HttpRequest.getUri:()Ljava/net/URI;
      56: invokeinterface #134,  3          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      61: iconst_1
      62: ireturn

  protected boolean matchIfRouteIsVersioned(io.micronaut.http.HttpRequest<?>, java.lang.String, java.lang.String);
    Code:
       0: aload_2
       1: ifnonnull     34
       4: getstatic     #112                // Field LOG:Lorg/slf4j/Logger;
       7: invokeinterface #117,  1          // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
      12: ifeq          32
      15: getstatic     #112                // Field LOG:Lorg/slf4j/Logger;
      18: ldc           #142                // String Route specifies a version {} and no version information resolved for request to URI {}
      20: aload_3
      21: aload_1
      22: invokeinterface #125,  1          // InterfaceMethod io/micronaut/http/HttpRequest.getUri:()Ljava/net/URI;
      27: invokeinterface #129,  4          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      32: iconst_1
      33: ireturn
      34: getstatic     #112                // Field LOG:Lorg/slf4j/Logger;
      37: invokeinterface #117,  1          // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
      42: ifeq          76
      45: getstatic     #112                // Field LOG:Lorg/slf4j/Logger;
      48: ldc           #144                // String Route specifies a version {} and the version {} was resolved for request to URI {}
      50: iconst_3
      51: anewarray     #4                  // class java/lang/Object
      54: dup
      55: iconst_0
      56: aload_3
      57: aastore
      58: dup
      59: iconst_1
      60: aload_2
      61: aastore
      62: dup
      63: iconst_2
      64: aload_1
      65: invokeinterface #125,  1          // InterfaceMethod io/micronaut/http/HttpRequest.getUri:()Ljava/net/URI;
      70: aastore
      71: invokeinterface #147,  3          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;[Ljava/lang/Object;)V
      76: aload_2
      77: aload_3
      78: invokevirtual #152                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      81: ireturn

  protected java.util.Optional<java.lang.String> resolveVersion(io.micronaut.http.HttpRequest<?>);
    Code:
       0: aload_0
       1: getfield      #32                 // Field resolvingStrategies:Ljava/util/List;
       4: invokeinterface #157,  1          // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
       9: aload_1
      10: invokedynamic #170,  0            // InvokeDynamic #2:apply:(Lio/micronaut/http/HttpRequest;)Ljava/util/function/Function;
      15: invokeinterface #176,  2          // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      20: invokedynamic #185,  0            // InvokeDynamic #3:test:()Ljava/util/function/Predicate;
      25: invokeinterface #188,  2          // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      30: invokeinterface #191,  1          // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      35: areturn

  protected <T, R> java.util.Optional<java.lang.String> getVersion(io.micronaut.web.router.UriRouteMatch<T, R>);
    Code:
       0: aload_1
       1: invokeinterface #201,  1          // InterfaceMethod io/micronaut/web/router/UriRouteMatch.getExecutableMethod:()Lio/micronaut/inject/ExecutableMethod;
       6: ldc           #203                // class io/micronaut/core/version/annotation/Version
       8: invokeinterface #209,  2          // InterfaceMethod io/micronaut/inject/ExecutableMethod.stringValue:(Ljava/lang/Class;)Ljava/util/Optional;
      13: areturn

  private static java.lang.String lambda$resolveVersion$2(io.micronaut.http.HttpRequest, io.micronaut.web.router.version.resolution.RequestVersionResolver);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #216,  2          // InterfaceMethod io/micronaut/web/router/version/resolution/RequestVersionResolver.resolve:(Ljava/lang/Object;)Ljava/util/Optional;
       7: aconst_null
       8: invokevirtual #219                // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #149                // class java/lang/String
      14: areturn

  private boolean lambda$filter$1(io.micronaut.http.HttpRequest, java.util.Optional, java.util.Optional, io.micronaut.web.router.UriRouteMatch);
    Code:
       0: aload_0
       1: aload         4
       3: invokevirtual #223                // Method getVersion:(Lio/micronaut/web/router/UriRouteMatch;)Ljava/util/Optional;
       6: astore        5
       8: aload         5
      10: invokevirtual #226                // Method java/util/Optional.isPresent:()Z
      13: ifeq          47
      16: aload_0
      17: aload_1
      18: aload_2
      19: aload_3
      20: aconst_null
      21: invokevirtual #219                // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #149                // class java/lang/String
      27: invokevirtual #219                // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #149                // class java/lang/String
      33: aload         5
      35: invokevirtual #230                // Method java/util/Optional.get:()Ljava/lang/Object;
      38: checkcast     #149                // class java/lang/String
      41: invokevirtual #232                // Method matchIfRouteIsVersioned:(Lio/micronaut/http/HttpRequest;Ljava/lang/String;Ljava/lang/String;)Z
      44: goto          60
      47: aload_0
      48: aload_1
      49: aload_2
      50: aconst_null
      51: invokevirtual #219                // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      54: checkcast     #149                // class java/lang/String
      57: invokevirtual #234                // Method matchIfRouteIsNotVersioned:(Lio/micronaut/http/HttpRequest;Ljava/lang/String;)Z
      60: ireturn

  private static boolean lambda$filter$0(io.micronaut.web.router.UriRouteMatch);
    Code:
       0: iconst_1
       1: ireturn

  static {};
    Code:
       0: ldc           #2                  // class io/micronaut/web/router/version/RouteVersionFilter
       2: invokestatic  #242                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #112                // Field LOG:Lorg/slf4j/Logger;
       8: return
}
