Compiled from "PatchElementProviderImpl.java"
public class org.jboss.as.patching.metadata.impl.PatchElementProviderImpl implements org.jboss.as.patching.metadata.PatchElementProvider,org.jboss.as.patching.metadata.impl.RequiresCallback,org.jboss.as.patching.metadata.impl.IncompatibleWithCallback {
  private final java.lang.String name;

  private final boolean isAddOn;

  private org.jboss.as.patching.metadata.Patch$PatchType patchType;

  private java.util.Collection<java.lang.String> incompatibleWith;

  private java.util.Collection<java.lang.String> requires;

  static final boolean $assertionsDisabled;

  public org.jboss.as.patching.metadata.impl.PatchElementProviderImpl(java.lang.String, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #2                  // Method java/util/Collections.emptyList:()Ljava/util/List;
       8: putfield      #3                  // Field incompatibleWith:Ljava/util/Collection;
      11: aload_0
      12: invokestatic  #2                  // Method java/util/Collections.emptyList:()Ljava/util/List;
      15: putfield      #4                  // Field requires:Ljava/util/Collection;
      18: getstatic     #5                  // Field $assertionsDisabled:Z
      21: ifne          36
      24: aload_1
      25: ifnonnull     36
      28: new           #6                  // class java/lang/AssertionError
      31: dup
      32: invokespecial #7                  // Method java/lang/AssertionError."<init>":()V
      35: athrow
      36: aload_0
      37: aload_1
      38: putfield      #8                  // Field name:Ljava/lang/String;
      41: aload_0
      42: iload_2
      43: putfield      #9                  // Field isAddOn:Z
      46: return

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #8                  // Field name:Ljava/lang/String;
       4: areturn

  public org.jboss.as.patching.metadata.Patch$PatchType getPatchType();
    Code:
       0: aload_0
       1: getfield      #10                 // Field patchType:Lorg/jboss/as/patching/metadata/Patch$PatchType;
       4: areturn

  public java.util.Collection<java.lang.String> getRequires();
    Code:
       0: aload_0
       1: getfield      #4                  // Field requires:Ljava/util/Collection;
       4: areturn

  public java.util.Collection<java.lang.String> getIncompatibleWith();
    Code:
       0: aload_0
       1: getfield      #3                  // Field incompatibleWith:Ljava/util/Collection;
       4: areturn

  public boolean isAddOn();
    Code:
       0: aload_0
       1: getfield      #9                  // Field isAddOn:Z
       4: ireturn

  public org.jboss.as.patching.metadata.LayerType getLayerType();
    Code:
       0: aload_0
       1: getfield      #9                  // Field isAddOn:Z
       4: ifeq          13
       7: getstatic     #11                 // Field org/jboss/as/patching/metadata/LayerType.AddOn:Lorg/jboss/as/patching/metadata/LayerType;
      10: goto          16
      13: getstatic     #12                 // Field org/jboss/as/patching/metadata/LayerType.Layer:Lorg/jboss/as/patching/metadata/LayerType;
      16: areturn

  public void upgrade();
    Code:
       0: aload_0
       1: getstatic     #13                 // Field org/jboss/as/patching/metadata/Patch$PatchType.CUMULATIVE:Lorg/jboss/as/patching/metadata/Patch$PatchType;
       4: putfield      #10                 // Field patchType:Lorg/jboss/as/patching/metadata/Patch$PatchType;
       7: return

  public void oneOffPatch();
    Code:
       0: aload_0
       1: getstatic     #14                 // Field org/jboss/as/patching/metadata/Patch$PatchType.ONE_OFF:Lorg/jboss/as/patching/metadata/Patch$PatchType;
       4: putfield      #10                 // Field patchType:Lorg/jboss/as/patching/metadata/Patch$PatchType;
       7: return

  public org.jboss.as.patching.metadata.impl.PatchElementProviderImpl incompatibleWith(java.lang.String);
    Code:
       0: getstatic     #5                  // Field $assertionsDisabled:Z
       3: ifne          18
       6: aload_1
       7: ifnonnull     18
      10: new           #6                  // class java/lang/AssertionError
      13: dup
      14: invokespecial #7                  // Method java/lang/AssertionError."<init>":()V
      17: athrow
      18: aload_0
      19: getfield      #3                  // Field incompatibleWith:Ljava/util/Collection;
      22: invokeinterface #15,  1           // InterfaceMethod java/util/Collection.isEmpty:()Z
      27: ifeq          41
      30: aload_0
      31: new           #16                 // class java/util/ArrayList
      34: dup
      35: invokespecial #17                 // Method java/util/ArrayList."<init>":()V
      38: putfield      #3                  // Field incompatibleWith:Ljava/util/Collection;
      41: aload_0
      42: getfield      #3                  // Field incompatibleWith:Ljava/util/Collection;
      45: aload_1
      46: invokeinterface #18,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      51: pop
      52: aload_0
      53: areturn

  public org.jboss.as.patching.metadata.impl.PatchElementProviderImpl require(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field requires:Ljava/util/Collection;
       4: invokeinterface #15,  1           // InterfaceMethod java/util/Collection.isEmpty:()Z
       9: ifeq          23
      12: aload_0
      13: new           #16                 // class java/util/ArrayList
      16: dup
      17: invokespecial #17                 // Method java/util/ArrayList."<init>":()V
      20: putfield      #4                  // Field requires:Ljava/util/Collection;
      23: aload_0
      24: getfield      #4                  // Field requires:Ljava/util/Collection;
      27: aload_1
      28: invokeinterface #18,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      33: pop
      34: aload_0
      35: areturn

  public <T extends org.jboss.as.patching.metadata.PatchElementProvider> T forType(org.jboss.as.patching.metadata.Patch$PatchType, java.lang.Class<T>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #10                 // Field patchType:Lorg/jboss/as/patching/metadata/Patch$PatchType;
       5: if_acmpeq     17
       8: getstatic     #19                 // Field org/jboss/as/patching/logging/PatchLogger.ROOT_LOGGER:Lorg/jboss/as/patching/logging/PatchLogger;
      11: invokeinterface #20,  1           // InterfaceMethod org/jboss/as/patching/logging/PatchLogger.patchTypesDontMatch:()Ljava/lang/IllegalStateException;
      16: athrow
      17: aload_2
      18: aload_0
      19: invokevirtual #21                 // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #22                 // class org/jboss/as/patching/metadata/PatchElementProvider
      25: areturn

  public org.jboss.as.patching.metadata.impl.RequiresCallback require(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #23                 // Method require:(Ljava/lang/String;)Lorg/jboss/as/patching/metadata/impl/PatchElementProviderImpl;
       5: areturn

  public org.jboss.as.patching.metadata.impl.IncompatibleWithCallback incompatibleWith(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #24                 // Method incompatibleWith:(Ljava/lang/String;)Lorg/jboss/as/patching/metadata/impl/PatchElementProviderImpl;
       5: areturn

  static {};
    Code:
       0: ldc           #25                 // class org/jboss/as/patching/metadata/impl/PatchElementProviderImpl
       2: invokevirtual #26                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #5                  // Field $assertionsDisabled:Z
      16: return
}
