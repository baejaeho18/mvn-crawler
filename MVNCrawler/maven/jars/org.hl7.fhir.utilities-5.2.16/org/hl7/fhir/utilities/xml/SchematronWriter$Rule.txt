Compiled from "SchematronWriter.java"
public class org.hl7.fhir.utilities.xml.SchematronWriter$Rule {
  private java.lang.String name;

  private java.util.List<org.hl7.fhir.utilities.xml.SchematronWriter$Assert> asserts;

  final org.hl7.fhir.utilities.xml.SchematronWriter this$0;

  public org.hl7.fhir.utilities.xml.SchematronWriter$Rule(org.hl7.fhir.utilities.xml.SchematronWriter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field this$0:Lorg/hl7/fhir/utilities/xml/SchematronWriter;
       5: aload_0
       6: invokespecial #4                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: new           #5                  // class java/util/ArrayList
      13: dup
      14: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      17: putfield      #1                  // Field asserts:Ljava/util/List;
      20: return

  public void assrt(java.lang.String, java.lang.String);
    Code:
       0: new           #7                  // class org/hl7/fhir/utilities/xml/SchematronWriter$Assert
       3: dup
       4: aload_0
       5: getfield      #3                  // Field this$0:Lorg/hl7/fhir/utilities/xml/SchematronWriter;
       8: invokespecial #8                  // Method org/hl7/fhir/utilities/xml/SchematronWriter$Assert."<init>":(Lorg/hl7/fhir/utilities/xml/SchematronWriter;)V
      11: astore_3
      12: aload_3
      13: aload_1
      14: invokestatic  #9                  // Method org/hl7/fhir/utilities/xml/SchematronWriter$Assert.access$002:(Lorg/hl7/fhir/utilities/xml/SchematronWriter$Assert;Ljava/lang/String;)Ljava/lang/String;
      17: pop
      18: aload_3
      19: aload_2
      20: invokestatic  #10                 // Method org/hl7/fhir/utilities/xml/SchematronWriter$Assert.access$102:(Lorg/hl7/fhir/utilities/xml/SchematronWriter$Assert;Ljava/lang/String;)Ljava/lang/String;
      23: pop
      24: aload_0
      25: getfield      #1                  // Field asserts:Ljava/util/List;
      28: aload_3
      29: invokeinterface #11,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      34: pop
      35: return

  public boolean isSpecial();
    Code:
       0: aload_0
       1: getfield      #2                  // Field name:Ljava/lang/String;
       4: ldc           #12                 // String *
       6: invokevirtual #13                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
       9: ifne          24
      12: aload_0
      13: getfield      #2                  // Field name:Ljava/lang/String;
      16: ldc           #14                 // String [
      18: invokevirtual #13                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  static java.lang.String access$200(org.hl7.fhir.utilities.xml.SchematronWriter$Rule);
    Code:
       0: aload_0
       1: getfield      #2                  // Field name:Ljava/lang/String;
       4: areturn

  static java.lang.String access$202(org.hl7.fhir.utilities.xml.SchematronWriter$Rule, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #2                  // Field name:Ljava/lang/String;
       6: areturn

  static java.util.List access$300(org.hl7.fhir.utilities.xml.SchematronWriter$Rule);
    Code:
       0: aload_0
       1: getfield      #1                  // Field asserts:Ljava/util/List;
       4: areturn
}
