Compiled from "CodegenConfig.java"
public interface io.swagger.codegen.v3.CodegenConfig {
  public abstract io.swagger.codegen.v3.CodegenType getTag();

  public abstract java.lang.String getName();

  public abstract java.lang.String getHelp();

  public abstract java.util.Map<java.lang.String, java.lang.Object> additionalProperties();

  public abstract java.util.Map<java.lang.String, java.lang.Object> vendorExtensions();

  public abstract java.lang.String testPackage();

  public abstract java.lang.String apiPackage();

  public abstract java.lang.String apiFileFolder();

  public abstract java.lang.String apiTestFileFolder();

  public abstract java.lang.String apiDocFileFolder();

  public abstract java.lang.String fileSuffix();

  public abstract java.lang.String outputFolder();

  public abstract java.lang.String templateDir();

  public abstract java.lang.String embeddedTemplateDir();

  public abstract java.lang.String customTemplateDir();

  public abstract java.lang.String getTemplateVersion();

  public abstract java.lang.String modelFileFolder();

  public abstract java.lang.String modelTestFileFolder();

  public abstract java.lang.String modelDocFileFolder();

  public abstract java.lang.String modelPackage();

  public abstract java.lang.String toApiName(java.lang.String);

  public abstract java.lang.String toApiVarName(java.lang.String);

  public abstract java.lang.String toModelName(java.lang.String);

  public abstract java.lang.String toParamName(java.lang.String);

  public abstract java.lang.String escapeText(java.lang.String);

  public abstract java.lang.String escapeUnsafeCharacters(java.lang.String);

  public abstract java.lang.String escapeReservedWord(java.lang.String);

  public abstract java.lang.String escapeQuotationMark(java.lang.String);

  public abstract java.lang.String getTypeDeclaration(io.swagger.v3.oas.models.media.Schema);

  public abstract java.lang.String getTypeDeclaration(java.lang.String);

  public abstract void processOpts();

  public abstract java.util.List<io.swagger.codegen.v3.CliOption> cliOptions();

  public abstract java.lang.String generateExamplePath(java.lang.String, io.swagger.v3.oas.models.Operation);

  public abstract java.util.Set<java.lang.String> reservedWords();

  public abstract java.util.List<io.swagger.codegen.v3.SupportingFile> supportingFiles();

  public abstract java.lang.String getInputSpec();

  public abstract void setInputSpec(java.lang.String);

  public abstract java.lang.String getInputURL();

  public abstract void setInputURL(java.lang.String);

  public abstract java.lang.String getOutputDir();

  public abstract void setOutputDir(java.lang.String);

  public abstract io.swagger.codegen.v3.CodegenModel fromModel(java.lang.String, io.swagger.v3.oas.models.media.Schema);

  public abstract io.swagger.codegen.v3.CodegenModel fromModel(java.lang.String, io.swagger.v3.oas.models.media.Schema, java.util.Map<java.lang.String, io.swagger.v3.oas.models.media.Schema>);

  public abstract io.swagger.codegen.v3.CodegenOperation fromOperation(java.lang.String, java.lang.String, io.swagger.v3.oas.models.Operation, java.util.Map<java.lang.String, io.swagger.v3.oas.models.media.Schema>, io.swagger.v3.oas.models.OpenAPI);

  public abstract io.swagger.codegen.v3.CodegenOperation fromOperation(java.lang.String, java.lang.String, io.swagger.v3.oas.models.Operation, java.util.Map<java.lang.String, io.swagger.v3.oas.models.media.Schema>);

  public abstract java.util.List<io.swagger.codegen.v3.CodegenSecurity> fromSecurity(java.util.Map<java.lang.String, io.swagger.v3.oas.models.security.SecurityScheme>);

  public abstract java.util.Set<java.lang.String> defaultIncludes();

  public abstract java.util.Map<java.lang.String, java.lang.String> typeMapping();

  public abstract java.util.Map<java.lang.String, java.lang.String> instantiationTypes();

  public abstract java.util.Map<java.lang.String, java.lang.String> importMapping();

  public abstract java.util.Map<java.lang.String, java.lang.String> apiTemplateFiles();

  public abstract java.util.Map<java.lang.String, java.lang.String> modelTemplateFiles();

  public abstract java.util.Map<java.lang.String, java.lang.String> apiTestTemplateFiles();

  public abstract java.util.Map<java.lang.String, java.lang.String> modelTestTemplateFiles();

  public abstract java.util.Map<java.lang.String, java.lang.String> apiDocTemplateFiles();

  public abstract java.util.Map<java.lang.String, java.lang.String> modelDocTemplateFiles();

  public abstract java.util.Set<java.lang.String> languageSpecificPrimitives();

  public abstract java.util.Map<java.lang.String, java.lang.String> reservedWordsMappings();

  public abstract void preprocessOpenAPI(io.swagger.v3.oas.models.OpenAPI);

  public abstract void processOpenAPI(io.swagger.v3.oas.models.OpenAPI);

  public abstract com.samskivert.mustache.Mustache$Compiler processCompiler(com.samskivert.mustache.Mustache$Compiler);

  public abstract io.swagger.codegen.v3.templates.TemplateEngine getTemplateEngine();

  public abstract java.lang.String sanitizeName(java.lang.String);

  public abstract java.lang.String sanitizeTag(java.lang.String);

  public abstract java.lang.String toApiFilename(java.lang.String);

  public abstract java.lang.String toModelFilename(java.lang.String);

  public abstract java.lang.String toApiTestFilename(java.lang.String);

  public abstract java.lang.String toModelTestFilename(java.lang.String);

  public abstract java.lang.String toApiDocFilename(java.lang.String);

  public abstract java.lang.String toModelDocFilename(java.lang.String);

  public abstract java.lang.String toModelImport(java.lang.String);

  public abstract java.lang.String toApiImport(java.lang.String);

  public abstract void addOperationToGroup(java.lang.String, java.lang.String, io.swagger.v3.oas.models.Operation, io.swagger.codegen.v3.CodegenOperation, java.util.Map<java.lang.String, java.util.List<io.swagger.codegen.v3.CodegenOperation>>);

  public abstract java.util.Map<java.lang.String, java.lang.Object> postProcessAllModels(java.util.Map<java.lang.String, java.lang.Object>);

  public abstract java.util.Map<java.lang.String, java.lang.Object> postProcessModels(java.util.Map<java.lang.String, java.lang.Object>);

  public abstract java.util.Map<java.lang.String, java.lang.Object> postProcessOperations(java.util.Map<java.lang.String, java.lang.Object>);

  public abstract java.util.Map<java.lang.String, java.lang.Object> postProcessOperationsWithModels(java.util.Map<java.lang.String, java.lang.Object>, java.util.List<java.lang.Object>);

  public abstract java.util.Map<java.lang.String, java.lang.Object> postProcessSupportingFileData(java.util.Map<java.lang.String, java.lang.Object>);

  public abstract void postProcessModelProperty(io.swagger.codegen.v3.CodegenModel, io.swagger.codegen.v3.CodegenProperty);

  public abstract void postProcessParameter(io.swagger.codegen.v3.CodegenParameter);

  public abstract java.lang.String apiFilename(java.lang.String, java.lang.String);

  public abstract java.lang.String apiTestFilename(java.lang.String, java.lang.String);

  public abstract java.lang.String apiDocFilename(java.lang.String, java.lang.String);

  public abstract boolean shouldOverwrite(java.lang.String);

  public abstract boolean isSkipOverwrite();

  public abstract void setSkipOverwrite(boolean);

  public abstract boolean isRemoveOperationIdPrefix();

  public abstract void setRemoveOperationIdPrefix(boolean);

  public abstract java.util.Map<java.lang.String, java.lang.String> supportedLibraries();

  public abstract void setLibrary(java.lang.String);

  public abstract java.lang.String getLibrary();

  public abstract void setGitUserId(java.lang.String);

  public abstract java.lang.String getGitUserId();

  public abstract void setGitRepoId(java.lang.String);

  public abstract java.lang.String getGitRepoId();

  public abstract void setGitRepoBaseURL(java.lang.String);

  public abstract java.lang.String getGitRepoBaseURL();

  public abstract void setReleaseNote(java.lang.String);

  public abstract java.lang.String getReleaseNote();

  public abstract void setHttpUserAgent(java.lang.String);

  public abstract java.lang.String getHttpUserAgent();

  public abstract java.lang.String getCommonTemplateDir();

  public abstract void setIgnoreFilePathOverride(java.lang.String);

  public abstract java.lang.String getIgnoreFilePathOverride();

  public abstract java.lang.String toBooleanGetter(java.lang.String);

  public abstract java.lang.String toSetter(java.lang.String);

  public abstract java.lang.String toGetter(java.lang.String);

  public abstract void addHandlebarHelpers(com.github.jknack.handlebars.Handlebars);

  public abstract java.util.List<io.swagger.codegen.v3.CodegenArgument> readLanguageArguments();

  public abstract java.util.List<io.swagger.codegen.v3.CodegenArgument> getLanguageArguments();

  public abstract void setLanguageArguments(java.util.List<io.swagger.codegen.v3.CodegenArgument>);

  public abstract boolean needsUnflattenedSpec();

  public abstract void setUnflattenedOpenAPI(io.swagger.v3.oas.models.OpenAPI);

  public abstract boolean getIgnoreImportMapping();

  public abstract void setIgnoreImportMapping(boolean);

  public abstract boolean defaultIgnoreImportMappingOption();

  public abstract io.swagger.codegen.v3.ISchemaHandler getSchemaHandler();

  public default boolean checkAliasModel();
    Code:
       0: iconst_0
       1: ireturn
}
