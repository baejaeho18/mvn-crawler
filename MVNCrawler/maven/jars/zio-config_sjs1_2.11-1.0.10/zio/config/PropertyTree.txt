Compiled from "PropertyTree.scala"
public interface zio.config.PropertyTree<K, V> {
  public abstract <K1, V1> scala.collection.immutable.Map<scala.collection.immutable.Vector<K1>, scala.collection.immutable.$colon$colon<V1>> flatten();

  public abstract <K1, V1> scala.collection.immutable.Map<java.lang.String, java.lang.String> flattenKeyAndValue(java.lang.String, java.lang.String, scala.Predef$$eq$colon$eq<K1, java.lang.String>);

  public abstract <K1, V1> java.lang.String flattenKeyAndValue$default$1();

  public abstract <K1, V1> java.lang.String flattenKeyAndValue$default$2();

  public abstract <K1, V1> scala.collection.immutable.Map<java.lang.String, scala.collection.immutable.$colon$colon<V1>> flattenKeyWith(scala.Function1<K1, java.lang.String>, java.lang.String);

  public abstract <K1, V1> scala.collection.immutable.Map<java.lang.String, scala.collection.immutable.$colon$colon<V1>> flattenString(java.lang.String, scala.Predef$$eq$colon$eq<K1, java.lang.String>);

  public abstract <K1, V1> java.lang.String flattenString$default$1();

  public abstract <K1, V1> zio.config.PropertyTree<K1, V1> getOrElse(scala.Function0<zio.config.PropertyTree<K1, V1>>);

  public abstract <K1> zio.config.PropertyTree<K1, V> getPath(scala.collection.immutable.List<K1>);

  public abstract boolean isEmpty();

  public abstract <V2> zio.config.PropertyTree<K, V2> map(scala.Function1<V, V2>);

  public abstract <K1, V1> zio.config.PropertyTree<K1, V1> mapEmpty(scala.Function1<scala.collection.immutable.Vector<scala.util.Either<java.lang.Object, K1>>, zio.config.PropertyTree<K1, V1>>);

  public abstract <E, V2> zio.config.PropertyTree<K, scala.util.Either<E, V>> mapEmptyToError(scala.Function0<E>);

  public abstract <K1, V1> zio.NonEmptyChunk<zio.config.PropertyTree<K1, V1>> merge(zio.config.PropertyTree<K1, V1>);

  public abstract boolean nonEmpty();

  public abstract <V1> zio.config.PropertyTree<K, V1> reduceInner(scala.Function2<V1, V1, V1>);

  public abstract <K1, V2, V3> zio.config.PropertyTree<K1, scala.Tuple2<V, V2>> zip(zio.config.PropertyTree<K1, V2>);

  public abstract <K1, V2, V3> zio.config.PropertyTree<K, V3> zipWith(zio.config.PropertyTree<K1, V2>, scala.Function2<V, V2, V3>);
}
