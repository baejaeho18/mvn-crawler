Compiled from "package.scala"
public final class eu.timepit.refined.scalaz.package$ {
  public static eu.timepit.refined.scalaz.package$ MODULE$;

  private final eu.timepit.refined.api.RefType<java.lang.Object> scalazTagRefType;

  public static {};
    Code:
       0: new           #2                  // class eu/timepit/refined/scalaz/package$
       3: invokespecial #17                 // Method "<init>":()V
       6: return

  public eu.timepit.refined.api.RefType<java.lang.Object> scalazTagRefType();
    Code:
       0: aload_0
       1: getfield      #21                 // Field scalazTagRefType:Leu/timepit/refined/api/RefType;
       4: areturn

  public <F, T, P> scalaz.Equal<F> refTypeEqual(scalaz.Equal<T>, eu.timepit.refined.api.RefType<F>);
    Code:
       0: getstatic     #32                 // Field eu/timepit/refined/scalaz/derivation$.MODULE$:Leu/timepit/refined/scalaz/derivation$;
       3: getstatic     #37                 // Field scalaz/Equal$.MODULE$:Lscalaz/Equal$;
       6: invokevirtual #41                 // Method scalaz/Equal$.equalContravariant:()Lscalaz/Divisible;
       9: aload_2
      10: aload_1
      11: invokevirtual #45                 // Method eu/timepit/refined/scalaz/derivation$.refTypeViaContravariant:(Lscalaz/Contravariant;Leu/timepit/refined/api/RefType;Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #47                 // class scalaz/Equal
      17: areturn

  public <F, T, P> scalaz.Show<F> refTypeShow(scalaz.Show<T>, eu.timepit.refined.api.RefType<F>);
    Code:
       0: getstatic     #32                 // Field eu/timepit/refined/scalaz/derivation$.MODULE$:Leu/timepit/refined/scalaz/derivation$;
       3: getstatic     #57                 // Field scalaz/Show$.MODULE$:Lscalaz/Show$;
       6: invokevirtual #61                 // Method scalaz/Show$.showContravariant:()Lscalaz/Contravariant;
       9: aload_2
      10: aload_1
      11: invokevirtual #45                 // Method eu/timepit/refined/scalaz/derivation$.refTypeViaContravariant:(Lscalaz/Contravariant;Leu/timepit/refined/api/RefType;Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #63                 // class scalaz/Show
      17: areturn

  public <R, F, A, B> F refTypeContravariant(scalaz.Contravariant<F>, eu.timepit.refined.api.RefType<R>, F);
    Code:
       0: getstatic     #32                 // Field eu/timepit/refined/scalaz/derivation$.MODULE$:Leu/timepit/refined/scalaz/derivation$;
       3: aload_1
       4: aload_2
       5: aload_3
       6: invokevirtual #45                 // Method eu/timepit/refined/scalaz/derivation$.refTypeViaContravariant:(Lscalaz/Contravariant;Leu/timepit/refined/api/RefType;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public <R, F, A, B> F refTypeMonadError(scalaz.MonadError<F, java.lang.String>, eu.timepit.refined.api.RefType<R>, eu.timepit.refined.api.Validate<A, B>, F);
    Code:
       0: getstatic     #32                 // Field eu/timepit/refined/scalaz/derivation$.MODULE$:Leu/timepit/refined/scalaz/derivation$;
       3: aload_1
       4: aload_2
       5: aload_3
       6: aload         4
       8: invokevirtual #79                 // Method eu/timepit/refined/scalaz/derivation$.refTypeViaMonadError:(Lscalaz/MonadError;Leu/timepit/refined/api/RefType;Leu/timepit/refined/api/Validate;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  private eu.timepit.refined.scalaz.package$();
    Code:
       0: aload_0
       1: invokespecial #82                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: putstatic     #84                 // Field MODULE$:Leu/timepit/refined/scalaz/package$;
       8: aload_0
       9: new           #7                  // class eu/timepit/refined/scalaz/package$$anon$1
      12: dup
      13: invokespecial #85                 // Method eu/timepit/refined/scalaz/package$$anon$1."<init>":()V
      16: putfield      #21                 // Field scalazTagRefType:Leu/timepit/refined/api/RefType;
      19: return
}
