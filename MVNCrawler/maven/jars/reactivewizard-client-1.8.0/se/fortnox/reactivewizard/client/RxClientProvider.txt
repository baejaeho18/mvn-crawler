Compiled from "RxClientProvider.java"
public class se.fortnox.reactivewizard.client.RxClientProvider {
  private final java.util.concurrent.ConcurrentHashMap<java.net.InetSocketAddress, io.reactivex.netty.protocol.http.client.HttpClient<io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf>> clients;

  private final se.fortnox.reactivewizard.client.HttpClientConfig config;

  private final se.fortnox.reactivewizard.metrics.HealthRecorder healthRecorder;

  public se.fortnox.reactivewizard.client.RxClientProvider(se.fortnox.reactivewizard.client.HttpClientConfig, se.fortnox.reactivewizard.metrics.HealthRecorder);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #4                  // Field clients:Ljava/util/concurrent/ConcurrentHashMap;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field config:Lse/fortnox/reactivewizard/client/HttpClientConfig;
      20: aload_0
      21: aload_2
      22: putfield      #6                  // Field healthRecorder:Lse/fortnox/reactivewizard/metrics/HealthRecorder;
      25: return

  public io.reactivex.netty.protocol.http.client.HttpClient<io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf> clientFor(java.net.InetSocketAddress);
    Code:
       0: aload_0
       1: getfield      #4                  // Field clients:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: aload_0
       6: invokedynamic #7,  0              // InvokeDynamic #0:apply:(Lse/fortnox/reactivewizard/client/RxClientProvider;)Ljava/util/function/Function;
      11: invokevirtual #8                  // Method java/util/concurrent/ConcurrentHashMap.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      14: checkcast     #9                  // class io/reactivex/netty/protocol/http/client/HttpClient
      17: areturn

  private io.reactivex.netty.protocol.http.client.HttpClient<io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf> configureSsl(io.reactivex.netty.protocol.http.client.HttpClient<io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf>, java.lang.String, int, boolean);
    Code:
       0: iload         4
       2: ifne          10
       5: aload_1
       6: invokevirtual #10                 // Method io/reactivex/netty/protocol/http/client/HttpClient.unsafeSecure:()Lio/reactivex/netty/protocol/http/client/HttpClient;
       9: areturn
      10: aload_1
      11: aload_0
      12: aload_2
      13: iload_3
      14: invokedynamic #11,  0             // InvokeDynamic #1:call:(Lse/fortnox/reactivewizard/client/RxClientProvider;Ljava/lang/String;I)Lrx/functions/Func1;
      19: invokevirtual #12                 // Method io/reactivex/netty/protocol/http/client/HttpClient.secure:(Lrx/functions/Func1;)Lio/reactivex/netty/protocol/http/client/HttpClient;
      22: areturn
      23: astore        5
      25: new           #14                 // class java/lang/RuntimeException
      28: dup
      29: ldc           #15                 // String Unable to create secure https client.
      31: aload         5
      33: invokespecial #16                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      36: athrow
    Exception table:
       from    to  target type
          10    22    23   Class java/lang/Throwable

  private io.reactivex.netty.protocol.http.client.HttpClient<io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf> buildClient(java.net.InetSocketAddress);
    Code:
       0: new           #17                 // class io/reactivex/netty/client/pool/PoolConfig
       3: dup
       4: invokespecial #18                 // Method io/reactivex/netty/client/pool/PoolConfig."<init>":()V
       7: astore_2
       8: aload_2
       9: new           #19                 // class se/fortnox/reactivewizard/client/RxClientProvider$MetricPublishingMaxConnectionsBasedStrategy
      12: dup
      13: aload_0
      14: getfield      #5                  // Field config:Lse/fortnox/reactivewizard/client/HttpClientConfig;
      17: invokevirtual #20                 // Method se/fortnox/reactivewizard/client/HttpClientConfig.getMaxConnections:()I
      20: aload_0
      21: getfield      #6                  // Field healthRecorder:Lse/fortnox/reactivewizard/metrics/HealthRecorder;
      24: invokespecial #21                 // Method se/fortnox/reactivewizard/client/RxClientProvider$MetricPublishingMaxConnectionsBasedStrategy."<init>":(ILse/fortnox/reactivewizard/metrics/HealthRecorder;)V
      27: invokevirtual #22                 // Method io/reactivex/netty/client/pool/PoolConfig.limitDeterminationStrategy:(Lio/reactivex/netty/client/pool/PoolLimitDeterminationStrategy;)Lio/reactivex/netty/client/pool/PoolConfig;
      30: pop
      31: aload_0
      32: aload_2
      33: invokevirtual #23                 // Method createConnectionProviderFactory:(Lio/reactivex/netty/client/pool/PoolConfig;)Lio/reactivex/netty/client/ConnectionProviderFactory;
      36: astore_3
      37: new           #24                 // class se/fortnox/reactivewizard/client/UnsubscribeAwareConnectionProviderFactory
      40: dup
      41: aload_3
      42: aload_2
      43: invokespecial #25                 // Method se/fortnox/reactivewizard/client/UnsubscribeAwareConnectionProviderFactory."<init>":(Lio/reactivex/netty/client/ConnectionProviderFactory;Lio/reactivex/netty/client/pool/PoolConfig;)V
      46: astore        4
      48: aload         4
      50: new           #26                 // class io/reactivex/netty/client/Host
      53: dup
      54: aload_1
      55: invokespecial #27                 // Method io/reactivex/netty/client/Host."<init>":(Ljava/net/SocketAddress;)V
      58: invokestatic  #28                 // Method rx/Observable.just:(Ljava/lang/Object;)Lrx/Observable;
      61: invokestatic  #29                 // Method io/reactivex/netty/protocol/http/client/HttpClient.newClient:(Lio/reactivex/netty/client/ConnectionProviderFactory;Lrx/Observable;)Lio/reactivex/netty/protocol/http/client/HttpClient;
      64: aload_0
      65: getfield      #5                  // Field config:Lse/fortnox/reactivewizard/client/HttpClientConfig;
      68: invokevirtual #30                 // Method se/fortnox/reactivewizard/client/HttpClientConfig.getReadTimeoutMs:()I
      71: getstatic     #31                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      74: invokevirtual #32                 // Method io/reactivex/netty/protocol/http/client/HttpClient.readTimeOut:(ILjava/util/concurrent/TimeUnit;)Lio/reactivex/netty/protocol/http/client/HttpClient;
      77: iconst_0
      78: invokevirtual #33                 // Method io/reactivex/netty/protocol/http/client/HttpClient.followRedirects:(Z)Lio/reactivex/netty/protocol/http/client/HttpClient;
      81: invokedynamic #34,  0             // InvokeDynamic #2:call:()Lrx/functions/Action1;
      86: invokevirtual #35                 // Method io/reactivex/netty/protocol/http/client/HttpClient.pipelineConfigurator:(Lrx/functions/Action1;)Lio/reactivex/netty/protocol/http/client/HttpClient;
      89: astore        5
      91: aload_0
      92: getfield      #5                  // Field config:Lse/fortnox/reactivewizard/client/HttpClientConfig;
      95: invokevirtual #36                 // Method se/fortnox/reactivewizard/client/HttpClientConfig.isHttps:()Z
      98: ifeq          129
     101: aload_0
     102: aload         5
     104: aload_0
     105: getfield      #5                  // Field config:Lse/fortnox/reactivewizard/client/HttpClientConfig;
     108: invokevirtual #37                 // Method se/fortnox/reactivewizard/client/HttpClientConfig.getHost:()Ljava/lang/String;
     111: aload_0
     112: getfield      #5                  // Field config:Lse/fortnox/reactivewizard/client/HttpClientConfig;
     115: invokevirtual #38                 // Method se/fortnox/reactivewizard/client/HttpClientConfig.getPort:()I
     118: aload_0
     119: getfield      #5                  // Field config:Lse/fortnox/reactivewizard/client/HttpClientConfig;
     122: invokevirtual #39                 // Method se/fortnox/reactivewizard/client/HttpClientConfig.isValidateCertificates:()Z
     125: invokespecial #40                 // Method configureSsl:(Lio/reactivex/netty/protocol/http/client/HttpClient;Ljava/lang/String;IZ)Lio/reactivex/netty/protocol/http/client/HttpClient;
     128: areturn
     129: aload         5
     131: areturn

  javax.net.ssl.SSLEngine configureSslEngine(java.lang.String, int);
    Code:
       0: invokestatic  #41                 // Method javax/net/ssl/SSLContext.getDefault:()Ljavax/net/ssl/SSLContext;
       3: aload_1
       4: iload_2
       5: invokevirtual #42                 // Method javax/net/ssl/SSLContext.createSSLEngine:(Ljava/lang/String;I)Ljavax/net/ssl/SSLEngine;
       8: areturn
       9: astore_3
      10: new           #14                 // class java/lang/RuntimeException
      13: dup
      14: ldc           #43                 // String Unable to configure secure client
      16: aload_3
      17: invokespecial #16                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      20: athrow
    Exception table:
       from    to  target type
           0     8     9   Class java/lang/Throwable

  protected io.reactivex.netty.client.ConnectionProviderFactory<io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf> createConnectionProviderFactory(io.reactivex.netty.client.pool.PoolConfig<io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf>);
    Code:
       0: aload_1
       1: invokestatic  #44                 // Method io/reactivex/netty/client/pool/SingleHostPoolingProviderFactory.create:(Lio/reactivex/netty/client/pool/PoolConfig;)Lio/reactivex/netty/client/pool/SingleHostPoolingProviderFactory;
       4: areturn

  private javax.net.ssl.SSLEngine createSslEngineForEachConnection(java.lang.String, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #45                 // Method configureSslEngine:(Ljava/lang/String;I)Ljavax/net/ssl/SSLEngine;
       6: astore_3
       7: aload_3
       8: iconst_1
       9: invokevirtual #46                 // Method javax/net/ssl/SSLEngine.setUseClientMode:(Z)V
      12: aload_3
      13: areturn

  private javax.net.ssl.SSLEngine lambda$configureSsl$0(java.lang.String, int, io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #47                 // Method createSslEngineForEachConnection:(Ljava/lang/String;I)Ljavax/net/ssl/SSLEngine;
       6: areturn
}
