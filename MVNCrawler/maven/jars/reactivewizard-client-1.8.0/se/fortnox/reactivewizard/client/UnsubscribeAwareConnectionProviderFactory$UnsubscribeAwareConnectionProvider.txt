Compiled from "UnsubscribeAwareConnectionProviderFactory.java"
class se.fortnox.reactivewizard.client.UnsubscribeAwareConnectionProviderFactory$UnsubscribeAwareConnectionProvider implements io.reactivex.netty.client.ConnectionProvider<io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf> {
  private final io.reactivex.netty.client.ConnectionProvider<io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf> wrapped;

  private final io.reactivex.netty.client.pool.PoolLimitDeterminationStrategy poolLimitDeterminationStrategy;

  public se.fortnox.reactivewizard.client.UnsubscribeAwareConnectionProviderFactory$UnsubscribeAwareConnectionProvider(io.reactivex.netty.client.ConnectionProvider<io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf>, io.reactivex.netty.client.pool.PoolLimitDeterminationStrategy);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field wrapped:Lio/reactivex/netty/client/ConnectionProvider;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field poolLimitDeterminationStrategy:Lio/reactivex/netty/client/pool/PoolLimitDeterminationStrategy;
      14: return

  public rx.Observable<io.reactivex.netty.channel.Connection<io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf>> newConnectionRequest();
    Code:
       0: new           #4                  // class java/util/concurrent/atomic/AtomicBoolean
       3: dup
       4: invokespecial #5                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #2                  // Field wrapped:Lio/reactivex/netty/client/ConnectionProvider;
      12: invokeinterface #6,  1            // InterfaceMethod io/reactivex/netty/client/ConnectionProvider.newConnectionRequest:()Lrx/Observable;
      17: aload_1
      18: invokedynamic #7,  0              // InvokeDynamic #0:call:(Ljava/util/concurrent/atomic/AtomicBoolean;)Lrx/functions/Action1;
      23: invokevirtual #8                  // Method rx/Observable.doOnNext:(Lrx/functions/Action1;)Lrx/Observable;
      26: aload_1
      27: invokedynamic #9,  0              // InvokeDynamic #1:call:(Ljava/util/concurrent/atomic/AtomicBoolean;)Lrx/functions/Action1;
      32: invokevirtual #10                 // Method rx/Observable.doOnError:(Lrx/functions/Action1;)Lrx/Observable;
      35: aload_0
      36: aload_1
      37: invokedynamic #11,  0             // InvokeDynamic #2:call:(Lse/fortnox/reactivewizard/client/UnsubscribeAwareConnectionProviderFactory$UnsubscribeAwareConnectionProvider;Ljava/util/concurrent/atomic/AtomicBoolean;)Lrx/functions/Action0;
      42: invokevirtual #12                 // Method rx/Observable.doOnUnsubscribe:(Lrx/functions/Action0;)Lrx/Observable;
      45: areturn

  private void lambda$newConnectionRequest$2(java.util.concurrent.atomic.AtomicBoolean);
    Code:
       0: aload_1
       1: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       4: ifne          16
       7: aload_0
       8: getfield      #3                  // Field poolLimitDeterminationStrategy:Lio/reactivex/netty/client/pool/PoolLimitDeterminationStrategy;
      11: invokeinterface #14,  1           // InterfaceMethod io/reactivex/netty/client/pool/PoolLimitDeterminationStrategy.releasePermit:()V
      16: return

  private static void lambda$newConnectionRequest$1(java.util.concurrent.atomic.AtomicBoolean, java.lang.Throwable);
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       5: return

  private static void lambda$newConnectionRequest$0(java.util.concurrent.atomic.AtomicBoolean, io.reactivex.netty.channel.Connection);
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       5: return
}
