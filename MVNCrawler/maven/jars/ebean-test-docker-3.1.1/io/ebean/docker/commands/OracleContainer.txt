Compiled from "OracleContainer.java"
public class io.ebean.docker.commands.OracleContainer extends io.ebean.docker.commands.DbContainer implements io.ebean.docker.container.Container {
  private static final org.slf4j.Logger log;

  private final io.ebean.docker.commands.OracleConfig oracleConfig;

  public static io.ebean.docker.commands.OracleContainer create(java.lang.String, java.util.Properties);
    Code:
       0: new           #1                  // class io/ebean/docker/commands/OracleContainer
       3: dup
       4: new           #2                  // class io/ebean/docker/commands/OracleConfig
       7: dup
       8: aload_0
       9: aload_1
      10: invokespecial #3                  // Method io/ebean/docker/commands/OracleConfig."<init>":(Ljava/lang/String;Ljava/util/Properties;)V
      13: invokespecial #4                  // Method "<init>":(Lio/ebean/docker/commands/OracleConfig;)V
      16: areturn

  public io.ebean.docker.commands.OracleContainer(io.ebean.docker.commands.OracleConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #5                  // Method io/ebean/docker/commands/DbContainer."<init>":(Lio/ebean/docker/commands/DbConfig;)V
       5: aload_0
       6: aload_1
       7: putfield      #6                  // Field oracleConfig:Lio/ebean/docker/commands/OracleConfig;
      10: aload_0
      11: iconst_1
      12: putfield      #7                  // Field checkConnectivityUsingAdmin:Z
      15: return

  protected java.lang.ProcessBuilder runProcess();
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method dockerRun:()Ljava/util/List;
       4: astore_1
       5: aload_1
       6: ldc           #9                  // String -p
       8: invokeinterface #10,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      13: pop
      14: aload_1
      15: new           #11                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      22: aload_0
      23: getfield      #6                  // Field oracleConfig:Lio/ebean/docker/commands/OracleConfig;
      26: invokevirtual #13                 // Method io/ebean/docker/commands/OracleConfig.getApexPort:()Ljava/lang/String;
      29: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: ldc           #15                 // String :
      34: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: aload_0
      38: getfield      #6                  // Field oracleConfig:Lio/ebean/docker/commands/OracleConfig;
      41: invokevirtual #16                 // Method io/ebean/docker/commands/OracleConfig.getInternalApexPort:()Ljava/lang/String;
      44: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: invokeinterface #10,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      55: pop
      56: aload_1
      57: aload_0
      58: getfield      #18                 // Field config:Lio/ebean/docker/commands/BaseConfig;
      61: invokevirtual #19                 // Method io/ebean/docker/commands/BaseConfig.getImage:()Ljava/lang/String;
      64: invokeinterface #10,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      69: pop
      70: aload_0
      71: aload_1
      72: invokevirtual #20                 // Method createProcessBuilder:(Ljava/util/List;)Ljava/lang/ProcessBuilder;
      75: areturn

  protected boolean isDatabaseAdminReady();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #21                 // Method checkConnectivity:(Z)Z
       5: ireturn

  boolean checkConnectivity();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #21                 // Method checkConnectivity:(Z)Z
       5: ireturn

  void runContainer();
    Code:
       0: getstatic     #22                 // Field log:Lorg/slf4j/Logger;
       3: ldc           #23                 // String Starting Oracle container, this will take some time ...
       5: invokeinterface #24,  2           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      10: aload_0
      11: invokevirtual #25                 // Method runProcess:()Ljava/lang/ProcessBuilder;
      14: invokestatic  #26                 // Method io/ebean/docker/commands/process/ProcessHandler.process:(Ljava/lang/ProcessBuilder;)Lio/ebean/docker/commands/process/ProcessResult;
      17: pop
      18: aload_0
      19: invokespecial #27                 // Method waitForOracle:()V
      22: return

  private void waitForOracle();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #21                 // Method checkConnectivity:(Z)Z
       5: ifne          18
       8: getstatic     #22                 // Field log:Lorg/slf4j/Logger;
      11: ldc           #28                 // String Ran out of time waiting for Oracle Database ready - probably not started.  Check via:  docker logs -f ut_oracle
      13: invokeinterface #29,  2           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;)V
      18: return

  protected boolean isDatabaseReady();
    Code:
       0: aload_0
       1: ldc           #30                 // String Starting Oracle Database
       3: aconst_null
       4: invokevirtual #31                 // Method logsContain:(Ljava/lang/String;Ljava/lang/String;)Z
       7: ireturn

  public boolean startWithCreate();
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method startIfNeeded:()Z
       4: pop
       5: aload_0
       6: invokevirtual #33                 // Method waitForDatabaseReady:()Z
       9: ifne          31
      12: getstatic     #22                 // Field log:Lorg/slf4j/Logger;
      15: ldc           #34                 // String Failed waitForDatabaseReady for container {}
      17: aload_0
      18: getfield      #18                 // Field config:Lio/ebean/docker/commands/BaseConfig;
      21: invokevirtual #35                 // Method io/ebean/docker/commands/BaseConfig.containerName:()Ljava/lang/String;
      24: invokeinterface #36,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      29: iconst_0
      30: ireturn
      31: aload_0
      32: invokevirtual #37                 // Method waitForConnectivity:()Z
      35: ifne          50
      38: getstatic     #22                 // Field log:Lorg/slf4j/Logger;
      41: ldc           #38                 // String Failed waiting for connectivity
      43: invokeinterface #39,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      48: iconst_0
      49: ireturn
      50: aload_0
      51: invokevirtual #40                 // Method createUserIfNeeded:()Z
      54: ireturn

  public boolean startWithDropCreate();
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method startIfNeeded:()Z
       4: pop
       5: aload_0
       6: invokevirtual #33                 // Method waitForDatabaseReady:()Z
       9: ifne          31
      12: getstatic     #22                 // Field log:Lorg/slf4j/Logger;
      15: ldc           #34                 // String Failed waitForDatabaseReady for container {}
      17: aload_0
      18: getfield      #18                 // Field config:Lio/ebean/docker/commands/BaseConfig;
      21: invokevirtual #35                 // Method io/ebean/docker/commands/BaseConfig.containerName:()Ljava/lang/String;
      24: invokeinterface #36,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      29: iconst_0
      30: ireturn
      31: aload_0
      32: invokevirtual #37                 // Method waitForConnectivity:()Z
      35: ifne          50
      38: getstatic     #22                 // Field log:Lorg/slf4j/Logger;
      41: ldc           #38                 // String Failed waiting for connectivity
      43: invokeinterface #39,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      48: iconst_0
      49: ireturn
      50: aload_0
      51: invokespecial #41                 // Method dropCreateUser:()Z
      54: ireturn

  private boolean dropCreateUser();
    Code:
       0: getstatic     #22                 // Field log:Lorg/slf4j/Logger;
       3: ldc           #42                 // String Drop and create database user {}
       5: aload_0
       6: getfield      #43                 // Field dbConfig:Lio/ebean/docker/commands/DbConfig;
       9: invokevirtual #44                 // Method io/ebean/docker/commands/DbConfig.getUsername:()Ljava/lang/String;
      12: invokeinterface #45,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
      17: aload_0
      18: aload_0
      19: invokedynamic #46,  0             // InvokeDynamic #0:accept:(Lio/ebean/docker/commands/OracleContainer;)Ljava/util/function/Consumer;
      24: invokevirtual #47                 // Method sqlProcess:(Ljava/util/function/Consumer;)V
      27: iconst_1
      28: ireturn

  public boolean createUserIfNeeded();
    Code:
       0: getstatic     #22                 // Field log:Lorg/slf4j/Logger;
       3: ldc           #48                 // String Create database user {} if not exists
       5: aload_0
       6: getfield      #43                 // Field dbConfig:Lio/ebean/docker/commands/DbConfig;
       9: invokevirtual #44                 // Method io/ebean/docker/commands/DbConfig.getUsername:()Ljava/lang/String;
      12: invokeinterface #45,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
      17: aload_0
      18: aload_0
      19: invokedynamic #49,  0             // InvokeDynamic #1:accept:(Lio/ebean/docker/commands/OracleContainer;)Ljava/util/function/Consumer;
      24: invokevirtual #47                 // Method sqlProcess:(Ljava/util/function/Consumer;)V
      27: iconst_1
      28: ireturn

  private boolean userExists(java.sql.Connection);
    Code:
       0: ldc           #50                 // String select count(*) from dba_users where lower(username) = ?
       2: astore_2
       3: getstatic     #22                 // Field log:Lorg/slf4j/Logger;
       6: new           #11                 // class java/lang/StringBuilder
       9: dup
      10: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      13: ldc           #51                 // String execute:
      15: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      18: aload_2
      19: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      25: invokeinterface #52,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      30: aload_1
      31: aload_2
      32: invokeinterface #53,  2           // InterfaceMethod java/sql/Connection.prepareStatement:(Ljava/lang/String;)Ljava/sql/PreparedStatement;
      37: astore_3
      38: aload_3
      39: iconst_1
      40: aload_0
      41: getfield      #43                 // Field dbConfig:Lio/ebean/docker/commands/DbConfig;
      44: invokevirtual #44                 // Method io/ebean/docker/commands/DbConfig.getUsername:()Ljava/lang/String;
      47: invokevirtual #54                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      50: invokeinterface #55,  3           // InterfaceMethod java/sql/PreparedStatement.setString:(ILjava/lang/String;)V
      55: aload_3
      56: invokeinterface #56,  1           // InterfaceMethod java/sql/PreparedStatement.executeQuery:()Ljava/sql/ResultSet;
      61: astore        4
      63: aload         4
      65: invokeinterface #57,  1           // InterfaceMethod java/sql/ResultSet.next:()Z
      70: ifeq          121
      73: aload         4
      75: iconst_1
      76: invokeinterface #58,  2           // InterfaceMethod java/sql/ResultSet.getInt:(I)I
      81: istore        5
      83: iload         5
      85: iconst_1
      86: if_icmpne     93
      89: iconst_1
      90: goto          94
      93: iconst_0
      94: istore        6
      96: aload         4
      98: ifnull        108
     101: aload         4
     103: invokeinterface #59,  1           // InterfaceMethod java/sql/ResultSet.close:()V
     108: aload_3
     109: ifnull        118
     112: aload_3
     113: invokeinterface #60,  1           // InterfaceMethod java/sql/PreparedStatement.close:()V
     118: iload         6
     120: ireturn
     121: iconst_0
     122: istore        5
     124: aload         4
     126: ifnull        136
     129: aload         4
     131: invokeinterface #59,  1           // InterfaceMethod java/sql/ResultSet.close:()V
     136: aload_3
     137: ifnull        146
     140: aload_3
     141: invokeinterface #60,  1           // InterfaceMethod java/sql/PreparedStatement.close:()V
     146: iload         5
     148: ireturn
     149: astore        5
     151: aload         4
     153: ifnull        175
     156: aload         4
     158: invokeinterface #59,  1           // InterfaceMethod java/sql/ResultSet.close:()V
     163: goto          175
     166: astore        6
     168: aload         5
     170: aload         6
     172: invokevirtual #62                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     175: aload         5
     177: athrow
     178: astore        4
     180: aload_3
     181: ifnull        202
     184: aload_3
     185: invokeinterface #60,  1           // InterfaceMethod java/sql/PreparedStatement.close:()V
     190: goto          202
     193: astore        5
     195: aload         4
     197: aload         5
     199: invokevirtual #62                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     202: aload         4
     204: athrow
     205: astore_3
     206: new           #64                 // class java/lang/IllegalStateException
     209: dup
     210: ldc           #65                 // String Failed to execute sql to check if user exists
     212: aload_3
     213: invokespecial #66                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     216: athrow
    Exception table:
       from    to  target type
          63    96   149   Class java/lang/Throwable
         121   124   149   Class java/lang/Throwable
         156   163   166   Class java/lang/Throwable
          38   108   178   Class java/lang/Throwable
         121   136   178   Class java/lang/Throwable
         149   178   178   Class java/lang/Throwable
         184   190   193   Class java/lang/Throwable
          30   118   205   Class java/sql/SQLException
         121   146   205   Class java/sql/SQLException
         149   205   205   Class java/sql/SQLException

  public boolean waitForDatabaseReady();
    Code:
       0: aload_0
       1: invokespecial #67                 // Method io/ebean/docker/commands/DbContainer.waitForDatabaseReady:()Z
       4: ireturn

  public boolean startContainerOnly();
    Code:
       0: aload_0
       1: invokespecial #68                 // Method io/ebean/docker/commands/DbContainer.startContainerOnly:()Z
       4: ireturn

  public boolean start();
    Code:
       0: aload_0
       1: invokespecial #69                 // Method io/ebean/docker/commands/DbContainer.start:()Z
       4: ireturn

  public java.sql.Connection createConnection() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokespecial #70                 // Method io/ebean/docker/commands/DbContainer.createConnection:()Ljava/sql/Connection;
       4: areturn

  public java.lang.String jdbcUrl();
    Code:
       0: aload_0
       1: invokespecial #71                 // Method io/ebean/docker/commands/DbContainer.jdbcUrl:()Ljava/lang/String;
       4: areturn

  public void stopOnly();
    Code:
       0: aload_0
       1: invokespecial #72                 // Method io/ebean/docker/commands/DbContainer.stopOnly:()V
       4: return

  public void stopRemove();
    Code:
       0: aload_0
       1: invokespecial #73                 // Method io/ebean/docker/commands/DbContainer.stopRemove:()V
       4: return

  public void stop();
    Code:
       0: aload_0
       1: invokespecial #74                 // Method io/ebean/docker/commands/DbContainer.stop:()V
       4: return

  public void registerShutdownHook();
    Code:
       0: aload_0
       1: invokespecial #75                 // Method io/ebean/docker/commands/DbContainer.registerShutdownHook:()V
       4: return

  public boolean isRunning();
    Code:
       0: aload_0
       1: invokespecial #76                 // Method io/ebean/docker/commands/DbContainer.isRunning:()Z
       4: ireturn

  public io.ebean.docker.container.ContainerConfig config();
    Code:
       0: aload_0
       1: invokespecial #77                 // Method io/ebean/docker/commands/DbContainer.config:()Lio/ebean/docker/container/ContainerConfig;
       4: areturn

  private void lambda$createUserIfNeeded$1(java.sql.Connection);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #78                 // Method userExists:(Ljava/sql/Connection;)Z
       5: ifne          83
       8: aload_0
       9: aload_1
      10: new           #11                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #79                 // String create user
      19: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_0
      23: getfield      #43                 // Field dbConfig:Lio/ebean/docker/commands/DbConfig;
      26: invokevirtual #44                 // Method io/ebean/docker/commands/DbConfig.getUsername:()Ljava/lang/String;
      29: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: ldc           #80                 // String  identified by
      34: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: aload_0
      38: getfield      #43                 // Field dbConfig:Lio/ebean/docker/commands/DbConfig;
      41: invokevirtual #81                 // Method io/ebean/docker/commands/DbConfig.getPassword:()Ljava/lang/String;
      44: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: invokevirtual #82                 // Method sqlRun:(Ljava/sql/Connection;Ljava/lang/String;)V
      53: aload_0
      54: aload_1
      55: new           #11                 // class java/lang/StringBuilder
      58: dup
      59: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      62: ldc           #83                 // String grant connect, resource, create view, unlimited tablespace to
      64: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: aload_0
      68: getfield      #43                 // Field dbConfig:Lio/ebean/docker/commands/DbConfig;
      71: invokevirtual #44                 // Method io/ebean/docker/commands/DbConfig.getUsername:()Ljava/lang/String;
      74: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      80: invokevirtual #82                 // Method sqlRun:(Ljava/sql/Connection;Ljava/lang/String;)V
      83: return

  private void lambda$dropCreateUser$0(java.sql.Connection);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #78                 // Method userExists:(Ljava/sql/Connection;)Z
       5: ifeq          43
       8: aload_0
       9: aload_1
      10: new           #11                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #84                 // String drop user
      19: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_0
      23: getfield      #43                 // Field dbConfig:Lio/ebean/docker/commands/DbConfig;
      26: invokevirtual #44                 // Method io/ebean/docker/commands/DbConfig.getUsername:()Ljava/lang/String;
      29: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: ldc           #85                 // String  cascade
      34: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      40: invokevirtual #82                 // Method sqlRun:(Ljava/sql/Connection;Ljava/lang/String;)V
      43: aload_0
      44: aload_1
      45: new           #11                 // class java/lang/StringBuilder
      48: dup
      49: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      52: ldc           #79                 // String create user
      54: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: aload_0
      58: getfield      #43                 // Field dbConfig:Lio/ebean/docker/commands/DbConfig;
      61: invokevirtual #44                 // Method io/ebean/docker/commands/DbConfig.getUsername:()Ljava/lang/String;
      64: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: ldc           #80                 // String  identified by
      69: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: aload_0
      73: getfield      #43                 // Field dbConfig:Lio/ebean/docker/commands/DbConfig;
      76: invokevirtual #81                 // Method io/ebean/docker/commands/DbConfig.getPassword:()Ljava/lang/String;
      79: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      85: invokevirtual #82                 // Method sqlRun:(Ljava/sql/Connection;Ljava/lang/String;)V
      88: aload_0
      89: aload_1
      90: new           #11                 // class java/lang/StringBuilder
      93: dup
      94: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      97: ldc           #86                 // String grant connect, resource,  create view, unlimited tablespace to
      99: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     102: aload_0
     103: getfield      #43                 // Field dbConfig:Lio/ebean/docker/commands/DbConfig;
     106: invokevirtual #44                 // Method io/ebean/docker/commands/DbConfig.getUsername:()Ljava/lang/String;
     109: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     112: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     115: invokevirtual #82                 // Method sqlRun:(Ljava/sql/Connection;Ljava/lang/String;)V
     118: return

  static {};
    Code:
       0: ldc           #87                 // class io/ebean/docker/commands/Commands
       2: invokestatic  #88                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #22                 // Field log:Lorg/slf4j/Logger;
       8: return
}
