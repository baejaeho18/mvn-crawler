Compiled from "Parser.scala"
public final class es.weso.shapepath.compact.Parser$ {
  public static es.weso.shapepath.compact.Parser$ MODULE$;

  public static {};
    Code:
       0: new           #2                  // class es/weso/shapepath/compact/Parser$
       3: invokespecial #50                 // Method "<init>":()V
       6: return

  public <A> cats.data.EitherT<cats.data.IndexedStateT, java.lang.String, A> ok(A);
    Code:
       0: getstatic     #57                 // Field cats/data/EitherT$PurePartiallyApplied$.MODULE$:Lcats/data/EitherT$PurePartiallyApplied$;
       3: getstatic     #62                 // Field cats/data/EitherT$.MODULE$:Lcats/data/EitherT$;
       6: invokevirtual #66                 // Method cats/data/EitherT$.pure:()Z
       9: aload_1
      10: getstatic     #71                 // Field cats/data/IndexedStateT$.MODULE$:Lcats/data/IndexedStateT$;
      13: getstatic     #76                 // Field cats/Eval$.MODULE$:Lcats/Eval$;
      16: invokevirtual #80                 // Method cats/Eval$.catsBimonadForEval:()Lcats/Bimonad;
      19: invokevirtual #84                 // Method cats/data/IndexedStateT$.catsDataMonadForIndexedStateT:(Lcats/Monad;)Lcats/Monad;
      22: invokevirtual #88                 // Method cats/data/EitherT$PurePartiallyApplied$.apply$extension:(ZLjava/lang/Object;Lcats/Applicative;)Lcats/data/EitherT;
      25: areturn

  public <A> cats.data.EitherT<cats.data.IndexedStateT, java.lang.String, A> err(java.lang.String);
    Code:
       0: getstatic     #97                 // Field cats/data/package$StateT$.MODULE$:Lcats/data/package$StateT$;
       3: aload_1
       4: getstatic     #76                 // Field cats/Eval$.MODULE$:Lcats/Eval$;
       7: invokevirtual #80                 // Method cats/Eval$.catsBimonadForEval:()Lcats/Bimonad;
      10: invokevirtual #100                // Method cats/data/package$StateT$.pure:(Ljava/lang/Object;Lcats/Applicative;)Lcats/data/IndexedStateT;
      13: astore_2
      14: getstatic     #103                // Field cats/data/EitherT$LeftPartiallyApplied$.MODULE$:Lcats/data/EitherT$LeftPartiallyApplied$;
      17: getstatic     #62                 // Field cats/data/EitherT$.MODULE$:Lcats/data/EitherT$;
      20: invokevirtual #106                // Method cats/data/EitherT$.left:()Z
      23: aload_2
      24: getstatic     #71                 // Field cats/data/IndexedStateT$.MODULE$:Lcats/data/IndexedStateT$;
      27: getstatic     #76                 // Field cats/Eval$.MODULE$:Lcats/Eval$;
      30: invokevirtual #80                 // Method cats/Eval$.catsBimonadForEval:()Lcats/Bimonad;
      33: invokevirtual #84                 // Method cats/data/IndexedStateT$.catsDataMonadForIndexedStateT:(Lcats/Monad;)Lcats/Monad;
      36: invokevirtual #109                // Method cats/data/EitherT$LeftPartiallyApplied$.apply$extension:(ZLjava/lang/Object;Lcats/Functor;)Lcats/data/EitherT;
      39: astore_3
      40: aload_3
      41: areturn

  public <A> cats.data.EitherT<cats.data.IndexedStateT, java.lang.String, A> fromEither(scala.util.Either<java.lang.String, A>);
    Code:
       0: aload_1
       1: invokedynamic #140,  0            // InvokeDynamic #0:apply:()Lscala/Function1;
       6: invokedynamic #146,  0            // InvokeDynamic #1:apply:()Lscala/Function1;
      11: invokevirtual #152                // Method scala/util/Either.fold:(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
      14: checkcast     #14                 // class cats/data/EitherT
      17: areturn

  public <A> cats.data.EitherT<cats.data.IndexedStateT, java.lang.String, scala.collection.immutable.List<A>> sequence(scala.collection.immutable.List<cats.data.EitherT<cats.data.IndexedStateT, java.lang.String, A>>);
    Code:
       0: getstatic     #162                // Field cats/implicits$.MODULE$:Lcats/implicits$;
       3: aload_1
       4: getstatic     #162                // Field cats/implicits$.MODULE$:Lcats/implicits$;
       7: invokevirtual #166                // Method cats/implicits$.catsStdInstancesForList:()Lcats/Traverse;
      10: invokevirtual #170                // Method cats/implicits$.toTraverseOps:(Ljava/lang/Object;Lcats/Traverse;)Lcats/Traverse$Ops;
      13: getstatic     #175                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      16: invokevirtual #179                // Method scala/Predef$.$conforms:()Lscala/Predef$$less$colon$less;
      19: getstatic     #62                 // Field cats/data/EitherT$.MODULE$:Lcats/data/EitherT$;
      22: getstatic     #71                 // Field cats/data/IndexedStateT$.MODULE$:Lcats/data/IndexedStateT$;
      25: getstatic     #76                 // Field cats/Eval$.MODULE$:Lcats/Eval$;
      28: invokevirtual #80                 // Method cats/Eval$.catsBimonadForEval:()Lcats/Bimonad;
      31: invokevirtual #84                 // Method cats/data/IndexedStateT$.catsDataMonadForIndexedStateT:(Lcats/Monad;)Lcats/Monad;
      34: invokevirtual #183                // Method cats/data/EitherT$.catsDataMonadErrorForEitherT:(Lcats/Monad;)Lcats/MonadError;
      37: invokeinterface #186,  3          // InterfaceMethod cats/Traverse$Ops.sequence:(Lscala/Predef$$less$colon$less;Lcats/Applicative;)Ljava/lang/Object;
      42: checkcast     #14                 // class cats/data/EitherT
      45: areturn

  public cats.data.EitherT<cats.data.IndexedStateT, java.lang.String, es.weso.rdf.PrefixMap> getPrefixMap();
    Code:
       0: aload_0
       1: invokevirtual #193                // Method getState:()Lcats/data/EitherT;
       4: invokedynamic #200,  0            // InvokeDynamic #2:apply:()Lscala/Function1;
       9: getstatic     #71                 // Field cats/data/IndexedStateT$.MODULE$:Lcats/data/IndexedStateT$;
      12: getstatic     #76                 // Field cats/Eval$.MODULE$:Lcats/Eval$;
      15: invokevirtual #80                 // Method cats/Eval$.catsBimonadForEval:()Lcats/Bimonad;
      18: invokevirtual #84                 // Method cats/data/IndexedStateT$.catsDataMonadForIndexedStateT:(Lcats/Monad;)Lcats/Monad;
      21: invokevirtual #204                // Method cats/data/EitherT.map:(Lscala/Function1;Lcats/Functor;)Lcats/data/EitherT;
      24: areturn

  public cats.data.EitherT<cats.data.IndexedStateT, java.lang.String, es.weso.shapepath.compact.Parser$BuilderState> getState();
    Code:
       0: getstatic     #62                 // Field cats/data/EitherT$.MODULE$:Lcats/data/EitherT$;
       3: getstatic     #97                 // Field cats/data/package$StateT$.MODULE$:Lcats/data/package$StateT$;
       6: invokedynamic #212,  0            // InvokeDynamic #3:apply:()Lscala/Function1;
      11: getstatic     #76                 // Field cats/Eval$.MODULE$:Lcats/Eval$;
      14: invokevirtual #80                 // Method cats/Eval$.catsBimonadForEval:()Lcats/Bimonad;
      17: invokevirtual #216                // Method cats/data/package$StateT$.inspect:(Lscala/Function1;Lcats/Applicative;)Lcats/data/IndexedStateT;
      20: getstatic     #71                 // Field cats/data/IndexedStateT$.MODULE$:Lcats/data/IndexedStateT$;
      23: getstatic     #76                 // Field cats/Eval$.MODULE$:Lcats/Eval$;
      26: invokevirtual #80                 // Method cats/Eval$.catsBimonadForEval:()Lcats/Bimonad;
      29: invokevirtual #84                 // Method cats/data/IndexedStateT$.catsDataMonadForIndexedStateT:(Lcats/Monad;)Lcats/Monad;
      32: invokevirtual #220                // Method cats/data/EitherT$.liftF:(Ljava/lang/Object;Lcats/Functor;)Lcats/data/EitherT;
      35: areturn

  public cats.data.EitherT<cats.data.IndexedStateT, java.lang.String, scala.Option<es.weso.rdf.nodes.IRI>> getBase();
    Code:
       0: aload_0
       1: invokevirtual #193                // Method getState:()Lcats/data/EitherT;
       4: invokedynamic #229,  0            // InvokeDynamic #4:apply:()Lscala/Function1;
       9: getstatic     #71                 // Field cats/data/IndexedStateT$.MODULE$:Lcats/data/IndexedStateT$;
      12: getstatic     #76                 // Field cats/Eval$.MODULE$:Lcats/Eval$;
      15: invokevirtual #80                 // Method cats/Eval$.catsBimonadForEval:()Lcats/Bimonad;
      18: invokevirtual #84                 // Method cats/data/IndexedStateT$.catsDataMonadForIndexedStateT:(Lcats/Monad;)Lcats/Monad;
      21: invokevirtual #204                // Method cats/data/EitherT.map:(Lscala/Function1;Lcats/Functor;)Lcats/data/EitherT;
      24: areturn

  public cats.data.EitherT<cats.data.IndexedStateT, java.lang.String, scala.runtime.BoxedUnit> addBase(es.weso.rdf.nodes.IRI);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #241,  0            // InvokeDynamic #5:apply:(Les/weso/rdf/nodes/IRI;)Lscala/Function1;
       7: invokevirtual #245                // Method updateState:(Lscala/Function1;)Lcats/data/EitherT;
      10: areturn

  public cats.data.EitherT<cats.data.IndexedStateT, java.lang.String, scala.runtime.BoxedUnit> updateState(scala.Function1<es.weso.shapepath.compact.Parser$BuilderState, es.weso.shapepath.compact.Parser$BuilderState>);
    Code:
       0: getstatic     #62                 // Field cats/data/EitherT$.MODULE$:Lcats/data/EitherT$;
       3: getstatic     #97                 // Field cats/data/package$StateT$.MODULE$:Lcats/data/package$StateT$;
       6: aload_1
       7: getstatic     #76                 // Field cats/Eval$.MODULE$:Lcats/Eval$;
      10: invokevirtual #80                 // Method cats/Eval$.catsBimonadForEval:()Lcats/Bimonad;
      13: invokevirtual #251                // Method cats/data/package$StateT$.modify:(Lscala/Function1;Lcats/Applicative;)Lcats/data/IndexedStateT;
      16: getstatic     #71                 // Field cats/data/IndexedStateT$.MODULE$:Lcats/data/IndexedStateT$;
      19: getstatic     #76                 // Field cats/Eval$.MODULE$:Lcats/Eval$;
      22: invokevirtual #80                 // Method cats/Eval$.catsBimonadForEval:()Lcats/Bimonad;
      25: invokevirtual #84                 // Method cats/data/IndexedStateT$.catsDataMonadForIndexedStateT:(Lcats/Monad;)Lcats/Monad;
      28: invokevirtual #220                // Method cats/data/EitherT$.liftF:(Ljava/lang/Object;Lcats/Functor;)Lcats/data/EitherT;
      31: areturn

  public cats.data.EitherT<cats.data.IndexedStateT, java.lang.String, scala.runtime.BoxedUnit> addPrefix(es.weso.rdf.Prefix, es.weso.rdf.nodes.IRI);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #265,  0            // InvokeDynamic #6:apply:(Les/weso/rdf/Prefix;Les/weso/rdf/nodes/IRI;)Lscala/Function1;
       8: invokevirtual #245                // Method updateState:(Lscala/Function1;)Lcats/data/EitherT;
      11: areturn

  public scala.util.Either<java.lang.String, es.weso.shapepath.ShapePath> parseShapePath(java.lang.String, scala.Option<es.weso.rdf.nodes.IRI>, es.weso.rdf.PrefixMap);
    Code:
       0: ldc_w         #273                // String ﻿
       3: astore        4
       5: aload_1
       6: aload         4
       8: invokevirtual #279                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      11: ifeq          22
      14: aload_1
      15: iconst_1
      16: invokevirtual #283                // Method java/lang/String.substring:(I)Ljava/lang/String;
      19: goto          23
      22: aload_1
      23: astore        5
      25: new           #285                // class java/io/InputStreamReader
      28: dup
      29: new           #287                // class java/io/ByteArrayInputStream
      32: dup
      33: aload         5
      35: getstatic     #293                // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      38: invokevirtual #297                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      41: invokespecial #300                // Method java/io/ByteArrayInputStream."<init>":([B)V
      44: invokespecial #303                // Method java/io/InputStreamReader."<init>":(Ljava/io/InputStream;)V
      47: astore        6
      49: aload_0
      50: aload         6
      52: aload_2
      53: aload_3
      54: invokevirtual #307                // Method parseReader:(Ljava/io/Reader;Lscala/Option;Les/weso/rdf/PrefixMap;)Lscala/util/Either;
      57: areturn

  public scala.util.Either<java.lang.String, es.weso.shapepath.ShapePath> parseShapePathFromFile(java.lang.String, scala.Option<es.weso.rdf.nodes.IRI>, es.weso.rdf.PrefixMap);
    Code:
       0: getstatic     #320                // Field es/weso/utils/FileUtils$.MODULE$:Les/weso/utils/FileUtils$;
       3: aload_1
       4: invokevirtual #324                // Method es/weso/utils/FileUtils$.getStream:(Ljava/lang/String;)Lscala/util/Either;
       7: aload_2
       8: aload_3
       9: invokedynamic #334,  0            // InvokeDynamic #7:apply:(Lscala/Option;Les/weso/rdf/PrefixMap;)Lscala/Function1;
      14: invokevirtual #338                // Method scala/util/Either.flatMap:(Lscala/Function1;)Lscala/util/Either;
      17: areturn

  public scala.util.Either<java.lang.String, es.weso.shapepath.ShapePath> parseReader(java.io.Reader, scala.Option<es.weso.rdf.nodes.IRI>, es.weso.rdf.PrefixMap);
    Code:
       0: aload_1
       1: invokestatic  #345                // Method org/antlr/v4/runtime/CharStreams.fromReader:(Ljava/io/Reader;)Lorg/antlr/v4/runtime/CodePointCharStream;
       4: astore        4
       6: new           #347                // class es/weso/shapepath/parser/ShapePathDocLexer
       9: dup
      10: aload         4
      12: invokespecial #350                // Method es/weso/shapepath/parser/ShapePathDocLexer."<init>":(Lorg/antlr/v4/runtime/CharStream;)V
      15: astore        5
      17: new           #352                // class org/antlr/v4/runtime/CommonTokenStream
      20: dup
      21: aload         5
      23: invokespecial #355                // Method org/antlr/v4/runtime/CommonTokenStream."<init>":(Lorg/antlr/v4/runtime/TokenSource;)V
      26: astore        6
      28: new           #32                 // class es/weso/shapepath/parser/ShapePathDocParser
      31: dup
      32: aload         6
      34: invokespecial #358                // Method es/weso/shapepath/parser/ShapePathDocParser."<init>":(Lorg/antlr/v4/runtime/TokenStream;)V
      37: astore        7
      39: new           #360                // class es/weso/shapepath/compact/ParserErrorListener
      42: dup
      43: invokespecial #361                // Method es/weso/shapepath/compact/ParserErrorListener."<init>":()V
      46: astore        8
      48: aload         5
      50: aload         8
      52: invokevirtual #365                // Method es/weso/shapepath/parser/ShapePathDocLexer.addErrorListener:(Lorg/antlr/v4/runtime/ANTLRErrorListener;)V
      55: aload         7
      57: aload         8
      59: invokevirtual #366                // Method es/weso/shapepath/parser/ShapePathDocParser.addErrorListener:(Lorg/antlr/v4/runtime/ANTLRErrorListener;)V
      62: new           #368                // class es/weso/shapepath/compact/ShapePathMaker
      65: dup
      66: invokespecial #369                // Method es/weso/shapepath/compact/ShapePathMaker."<init>":()V
      69: astore        9
      71: aload         9
      73: aload         7
      75: invokevirtual #373                // Method es/weso/shapepath/parser/ShapePathDocParser.shapePathDoc:()Les/weso/shapepath/parser/ShapePathDocParser$ShapePathDocContext;
      78: invokevirtual #377                // Method es/weso/shapepath/compact/ShapePathMaker.visit:(Lorg/antlr/v4/runtime/tree/ParseTree;)Ljava/lang/Object;
      81: checkcast     #14                 // class cats/data/EitherT
      84: astore        10
      86: aload         8
      88: invokevirtual #381                // Method es/weso/shapepath/compact/ParserErrorListener.getErrors:()Lscala/collection/immutable/List;
      91: astore        11
      93: aload         11
      95: invokevirtual #387                // Method scala/collection/immutable/List.length:()I
      98: iconst_0
      99: if_icmple     122
     102: getstatic     #392                // Field scala/package$.MODULE$:Lscala/package$;
     105: invokevirtual #396                // Method scala/package$.Left:()Lscala/util/Left$;
     108: aload         11
     110: ldc_w         #398                // String \n
     113: invokevirtual #402                // Method scala/collection/immutable/List.mkString:(Ljava/lang/String;)Ljava/lang/String;
     116: invokevirtual #407                // Method scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
     119: goto          136
     122: aload_0
     123: aload         10
     125: aload_2
     126: aload_3
     127: invokevirtual #411                // Method run:(Lcats/data/EitherT;Lscala/Option;Les/weso/rdf/PrefixMap;)Lscala/Tuple2;
     130: invokevirtual #417                // Method scala/Tuple2._2:()Ljava/lang/Object;
     133: checkcast     #148                // class scala/util/Either
     136: areturn

  public <A> scala.Tuple2<es.weso.shapepath.compact.Parser$BuilderState, scala.util.Either<java.lang.String, A>> run(cats.data.EitherT<cats.data.IndexedStateT, java.lang.String, A>, scala.Option<es.weso.rdf.nodes.IRI>, es.weso.rdf.PrefixMap);
    Code:
       0: aload_1
       1: invokevirtual #444                // Method cats/data/EitherT.value:()Ljava/lang/Object;
       4: checkcast     #446                // class cats/data/IndexedStateT
       7: aload_0
       8: aload_2
       9: aload_3
      10: invokevirtual #450                // Method initialState:(Lscala/Option;Les/weso/rdf/PrefixMap;)Les/weso/shapepath/compact/Parser$BuilderState;
      13: getstatic     #76                 // Field cats/Eval$.MODULE$:Lcats/Eval$;
      16: invokevirtual #80                 // Method cats/Eval$.catsBimonadForEval:()Lcats/Bimonad;
      19: invokevirtual #453                // Method cats/data/IndexedStateT.run:(Ljava/lang/Object;Lcats/FlatMap;)Ljava/lang/Object;
      22: checkcast     #455                // class cats/Eval
      25: invokevirtual #456                // Method cats/Eval.value:()Ljava/lang/Object;
      28: checkcast     #413                // class scala/Tuple2
      31: areturn

  public es.weso.shapepath.compact.Parser$BuilderState initialState(scala.Option<es.weso.rdf.nodes.IRI>, es.weso.rdf.PrefixMap);
    Code:
       0: new           #25                 // class es/weso/shapepath/compact/Parser$BuilderState
       3: dup
       4: aload_2
       5: aload_1
       6: invokespecial #460                // Method es/weso/shapepath/compact/Parser$BuilderState."<init>":(Les/weso/rdf/PrefixMap;Lscala/Option;)V
       9: areturn

  public static final cats.data.EitherT $anonfun$fromEither$1(java.lang.String);
    Code:
       0: getstatic     #462                // Field MODULE$:Les/weso/shapepath/compact/Parser$;
       3: aload_0
       4: invokevirtual #464                // Method err:(Ljava/lang/String;)Lcats/data/EitherT;
       7: areturn

  public static final cats.data.EitherT $anonfun$fromEither$2(java.lang.Object);
    Code:
       0: getstatic     #462                // Field MODULE$:Les/weso/shapepath/compact/Parser$;
       3: aload_0
       4: invokevirtual #467                // Method ok:(Ljava/lang/Object;)Lcats/data/EitherT;
       7: areturn

  public static final es.weso.rdf.PrefixMap $anonfun$getPrefixMap$1(es.weso.shapepath.compact.Parser$BuilderState);
    Code:
       0: aload_0
       1: invokevirtual #471                // Method es/weso/shapepath/compact/Parser$BuilderState.prefixMap:()Les/weso/rdf/PrefixMap;
       4: areturn

  public static final es.weso.shapepath.compact.Parser$BuilderState $anonfun$getState$1(es.weso.shapepath.compact.Parser$BuilderState);
    Code:
       0: getstatic     #175                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       3: aload_0
       4: invokevirtual #475                // Method scala/Predef$.identity:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #25                 // class es/weso/shapepath/compact/Parser$BuilderState
      10: areturn

  public static final scala.Option $anonfun$getBase$1(es.weso.shapepath.compact.Parser$BuilderState);
    Code:
       0: aload_0
       1: invokevirtual #479                // Method es/weso/shapepath/compact/Parser$BuilderState.base:()Lscala/Option;
       4: areturn

  public static final es.weso.shapepath.compact.Parser$BuilderState $anonfun$addBase$1(es.weso.rdf.nodes.IRI, es.weso.shapepath.compact.Parser$BuilderState);
    Code:
       0: new           #483                // class scala/Some
       3: dup
       4: aload_0
       5: invokespecial #486                // Method scala/Some."<init>":(Ljava/lang/Object;)V
       8: astore_2
       9: aload_1
      10: invokevirtual #489                // Method es/weso/shapepath/compact/Parser$BuilderState.copy$default$1:()Les/weso/rdf/PrefixMap;
      13: astore_3
      14: aload_1
      15: aload_3
      16: aload_2
      17: invokevirtual #493                // Method es/weso/shapepath/compact/Parser$BuilderState.copy:(Les/weso/rdf/PrefixMap;Lscala/Option;)Les/weso/shapepath/compact/Parser$BuilderState;
      20: areturn

  public static final es.weso.shapepath.compact.Parser$BuilderState $anonfun$addPrefix$1(es.weso.rdf.Prefix, es.weso.rdf.nodes.IRI, es.weso.shapepath.compact.Parser$BuilderState);
    Code:
       0: aload_2
       1: aload_2
       2: invokevirtual #471                // Method es/weso/shapepath/compact/Parser$BuilderState.prefixMap:()Les/weso/rdf/PrefixMap;
       5: aload_0
       6: aload_1
       7: invokevirtual #499                // Method es/weso/rdf/PrefixMap.addPrefix:(Les/weso/rdf/Prefix;Les/weso/rdf/nodes/IRI;)Les/weso/rdf/PrefixMap;
      10: aload_2
      11: invokevirtual #502                // Method es/weso/shapepath/compact/Parser$BuilderState.copy$default$2:()Lscala/Option;
      14: invokevirtual #493                // Method es/weso/shapepath/compact/Parser$BuilderState.copy:(Les/weso/rdf/PrefixMap;Lscala/Option;)Les/weso/shapepath/compact/Parser$BuilderState;
      17: astore_3
      18: aload_3
      19: areturn

  public static final es.weso.shapepath.ShapePath $anonfun$parseShapePathFromFile$2(es.weso.shapepath.ShapePath);
    Code:
       0: aload_0
       1: areturn

  public static final scala.util.Either $anonfun$parseShapePathFromFile$1(scala.Option, es.weso.rdf.PrefixMap, java.io.InputStreamReader);
    Code:
       0: getstatic     #462                // Field MODULE$:Les/weso/shapepath/compact/Parser$;
       3: aload_2
       4: aload_0
       5: aload_1
       6: invokevirtual #307                // Method parseReader:(Ljava/io/Reader;Lscala/Option;Les/weso/rdf/PrefixMap;)Lscala/util/Either;
       9: invokedynamic #514,  0            // InvokeDynamic #8:apply:()Lscala/Function1;
      14: invokevirtual #516                // Method scala/util/Either.map:(Lscala/Function1;)Lscala/util/Either;
      17: areturn

  private es.weso.shapepath.compact.Parser$();
    Code:
       0: aload_0
       1: invokespecial #518                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: putstatic     #462                // Field MODULE$:Les/weso/shapepath/compact/Parser$;
       8: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #530,  0            // InvokeDynamic #9:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
