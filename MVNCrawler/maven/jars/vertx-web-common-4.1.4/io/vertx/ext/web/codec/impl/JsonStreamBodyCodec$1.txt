Compiled from "JsonStreamBodyCodec.java"
class io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1 implements io.vertx.core.streams.WriteStream<io.vertx.core.buffer.Buffer> {
  final io.vertx.core.parsetools.JsonParser val$parser;

  final io.vertx.ext.web.codec.impl.JsonStreamBodyCodec this$0;

  io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1(io.vertx.ext.web.codec.impl.JsonStreamBodyCodec, io.vertx.core.parsetools.JsonParser);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/vertx/ext/web/codec/impl/JsonStreamBodyCodec;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$parser:Lio/vertx/core/parsetools/JsonParser;
      10: aload_0
      11: invokespecial #3                  // Method java/lang/Object."<init>":()V
      14: return

  public io.vertx.core.streams.WriteStream<io.vertx.core.buffer.Buffer> exceptionHandler(io.vertx.core.Handler<java.lang.Throwable>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$parser:Lio/vertx/core/parsetools/JsonParser;
       4: aload_1
       5: invokeinterface #4,  2            // InterfaceMethod io/vertx/core/parsetools/JsonParser.exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/core/parsetools/JsonParser;
      10: pop
      11: aload_0
      12: areturn

  public io.vertx.core.Future<java.lang.Void> write(io.vertx.core.buffer.Buffer);
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$parser:Lio/vertx/core/parsetools/JsonParser;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod io/vertx/core/parsetools/JsonParser.handle:(Ljava/lang/Object;)V
      10: invokestatic  #6                  // InterfaceMethod io/vertx/core/Future.succeededFuture:()Lio/vertx/core/Future;
      13: areturn

  public void write(io.vertx.core.buffer.Buffer, io.vertx.core.Handler<io.vertx.core.AsyncResult<java.lang.Void>>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$parser:Lio/vertx/core/parsetools/JsonParser;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod io/vertx/core/parsetools/JsonParser.handle:(Ljava/lang/Object;)V
      10: aload_2
      11: ifnull        23
      14: aload_2
      15: invokestatic  #6                  // InterfaceMethod io/vertx/core/Future.succeededFuture:()Lio/vertx/core/Future;
      18: invokeinterface #7,  2            // InterfaceMethod io/vertx/core/Handler.handle:(Ljava/lang/Object;)V
      23: return

  public void end(io.vertx.core.Handler<io.vertx.core.AsyncResult<java.lang.Void>>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$parser:Lio/vertx/core/parsetools/JsonParser;
       4: invokeinterface #8,  1            // InterfaceMethod io/vertx/core/parsetools/JsonParser.end:()V
       9: aload_1
      10: ifnull        22
      13: aload_1
      14: invokestatic  #6                  // InterfaceMethod io/vertx/core/Future.succeededFuture:()Lio/vertx/core/Future;
      17: invokeinterface #7,  2            // InterfaceMethod io/vertx/core/Handler.handle:(Ljava/lang/Object;)V
      22: return

  public io.vertx.core.streams.WriteStream<io.vertx.core.buffer.Buffer> setWriteQueueMaxSize(int);
    Code:
       0: aload_0
       1: areturn

  public boolean writeQueueFull();
    Code:
       0: iconst_0
       1: ireturn

  public io.vertx.core.streams.WriteStream<io.vertx.core.buffer.Buffer> drainHandler(io.vertx.core.Handler<java.lang.Void>);
    Code:
       0: aload_0
       1: areturn

  public void write(java.lang.Object, io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #9                  // class io/vertx/core/buffer/Buffer
       5: aload_2
       6: invokevirtual #10                 // Method write:(Lio/vertx/core/buffer/Buffer;Lio/vertx/core/Handler;)V
       9: return

  public io.vertx.core.Future write(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #9                  // class io/vertx/core/buffer/Buffer
       5: invokevirtual #11                 // Method write:(Lio/vertx/core/buffer/Buffer;)Lio/vertx/core/Future;
       8: areturn

  public io.vertx.core.streams.StreamBase exceptionHandler(io.vertx.core.Handler);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #12                 // Method exceptionHandler:(Lio/vertx/core/Handler;)Lio/vertx/core/streams/WriteStream;
       5: areturn
}
