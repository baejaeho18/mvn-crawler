Compiled from "RuleTagFormat.java"
public class org.sonar.api.server.rule.RuleTagFormat {
  private static final java.lang.String ERROR_MESSAGE_SUFFIX;

  private static final java.lang.String VALID_CHARACTERS_REGEX;

  private org.sonar.api.server.rule.RuleTagFormat();
    Code:
       0: aload_0
       1: invokespecial #21                 // Method java/lang/Object."<init>":()V
       4: return

  public static boolean isValid(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #30                 // Method org/sonar/api/internal/apachecommons/lang/StringUtils.isNotBlank:(Ljava/lang/String;)Z
       4: ifeq          20
       7: aload_0
       8: ldc           #17                 // String ^[a-z0-9\\+#\\-\\.]+$
      10: invokevirtual #35                 // Method java/lang/String.matches:(Ljava/lang/String;)Z
      13: ifeq          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  public static java.lang.String validate(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #40                 // Method isValid:(Ljava/lang/String;)Z
       4: ifne          33
       7: new           #42                 // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #44                 // String Tag \'%s\' is invalid. %s
      13: iconst_2
      14: anewarray     #4                  // class java/lang/Object
      17: dup
      18: iconst_0
      19: aload_0
      20: aastore
      21: dup
      22: iconst_1
      23: ldc           #14                 // String Rule tags accept only the characters: a-z, 0-9, \'+\', \'-\', \'#\', \'.\'
      25: aastore
      26: invokestatic  #48                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      29: invokespecial #51                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: aload_0
      34: areturn

  public static java.util.Set<java.lang.String> validate(java.util.Collection<java.lang.String>);
    Code:
       0: aload_0
       1: invokeinterface #59,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
       6: invokedynamic #79,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      11: invokeinterface #85,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      16: invokedynamic #90,  0             // InvokeDynamic #1:test:()Ljava/util/function/Predicate;
      21: invokeinterface #85,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      26: invokedynamic #101,  0            // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      31: invokeinterface #105,  2          // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      36: invokestatic  #111                // Method java/util/stream/Collectors.toSet:()Ljava/util/stream/Collector;
      39: invokeinterface #115,  2          // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      44: checkcast     #117                // class java/util/Set
      47: astore_1
      48: aload_1
      49: invokeinterface #118,  1          // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      54: invokedynamic #123,  0            // InvokeDynamic #3:test:()Ljava/util/function/Predicate;
      59: invokeinterface #85,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      64: invokestatic  #111                // Method java/util/stream/Collectors.toSet:()Ljava/util/stream/Collector;
      67: invokeinterface #115,  2          // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      72: checkcast     #117                // class java/util/Set
      75: astore_2
      76: aload_2
      77: invokeinterface #127,  1          // InterfaceMethod java/util/Set.isEmpty:()Z
      82: ifeq          87
      85: aload_1
      86: areturn
      87: new           #42                 // class java/lang/IllegalArgumentException
      90: dup
      91: ldc           #129                // String Tags \'%s\' are invalid. %s
      93: iconst_2
      94: anewarray     #4                  // class java/lang/Object
      97: dup
      98: iconst_0
      99: ldc           #131                // String ,
     101: aload_2
     102: invokestatic  #135                // Method java/lang/String.join:(Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/String;
     105: aastore
     106: dup
     107: iconst_1
     108: ldc           #14                 // String Rule tags accept only the characters: a-z, 0-9, \'+\', \'-\', \'#\', \'.\'
     110: aastore
     111: invokestatic  #48                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     114: invokespecial #51                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     117: athrow

  private static boolean lambda$validate$2(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #40                 // Method isValid:(Ljava/lang/String;)Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  private static java.lang.String lambda$validate$1(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #148                // Field java/util/Locale.ENGLISH:Ljava/util/Locale;
       4: invokevirtual #152                // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
       7: areturn

  private static boolean lambda$validate$0(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #153                // Method java/lang/String.isEmpty:()Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn
}
