Compiled from "AbstractByteArrayOutputStream.java"
public abstract class org.sonar.api.internal.apachecommons.io.output.AbstractByteArrayOutputStream extends java.io.OutputStream {
  static final int DEFAULT_SIZE;

  private static final byte[] EMPTY_BYTE_ARRAY;

  private final java.util.List<byte[]> buffers;

  private int currentBufferIndex;

  private int filledBufferSum;

  private byte[] currentBuffer;

  protected int count;

  private boolean reuseBuffers;

  public org.sonar.api.internal.apachecommons.io.output.AbstractByteArrayOutputStream();
    Code:
       0: aload_0
       1: invokespecial #26                 // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: new           #28                 // class java/util/ArrayList
       8: dup
       9: invokespecial #29                 // Method java/util/ArrayList."<init>":()V
      12: putfield      #31                 // Field buffers:Ljava/util/List;
      15: aload_0
      16: iconst_1
      17: putfield      #33                 // Field reuseBuffers:Z
      20: return

  protected void needNewBuffer(int);
    Code:
       0: aload_0
       1: getfield      #39                 // Field currentBufferIndex:I
       4: aload_0
       5: getfield      #31                 // Field buffers:Ljava/util/List;
       8: invokeinterface #45,  1           // InterfaceMethod java/util/List.size:()I
      13: iconst_1
      14: isub
      15: if_icmpge     65
      18: aload_0
      19: dup
      20: getfield      #47                 // Field filledBufferSum:I
      23: aload_0
      24: getfield      #49                 // Field currentBuffer:[B
      27: arraylength
      28: iadd
      29: putfield      #47                 // Field filledBufferSum:I
      32: aload_0
      33: dup
      34: getfield      #39                 // Field currentBufferIndex:I
      37: iconst_1
      38: iadd
      39: putfield      #39                 // Field currentBufferIndex:I
      42: aload_0
      43: aload_0
      44: getfield      #31                 // Field buffers:Ljava/util/List;
      47: aload_0
      48: getfield      #39                 // Field currentBufferIndex:I
      51: invokeinterface #53,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      56: checkcast     #54                 // class "[B"
      59: putfield      #49                 // Field currentBuffer:[B
      62: goto          144
      65: aload_0
      66: getfield      #49                 // Field currentBuffer:[B
      69: ifnonnull     82
      72: iload_1
      73: istore_2
      74: aload_0
      75: iconst_0
      76: putfield      #47                 // Field filledBufferSum:I
      79: goto          113
      82: aload_0
      83: getfield      #49                 // Field currentBuffer:[B
      86: arraylength
      87: iconst_1
      88: ishl
      89: iload_1
      90: aload_0
      91: getfield      #47                 // Field filledBufferSum:I
      94: isub
      95: invokestatic  #60                 // Method java/lang/Math.max:(II)I
      98: istore_2
      99: aload_0
     100: dup
     101: getfield      #47                 // Field filledBufferSum:I
     104: aload_0
     105: getfield      #49                 // Field currentBuffer:[B
     108: arraylength
     109: iadd
     110: putfield      #47                 // Field filledBufferSum:I
     113: aload_0
     114: dup
     115: getfield      #39                 // Field currentBufferIndex:I
     118: iconst_1
     119: iadd
     120: putfield      #39                 // Field currentBufferIndex:I
     123: aload_0
     124: iload_2
     125: newarray       byte
     127: putfield      #49                 // Field currentBuffer:[B
     130: aload_0
     131: getfield      #31                 // Field buffers:Ljava/util/List;
     134: aload_0
     135: getfield      #49                 // Field currentBuffer:[B
     138: invokeinterface #64,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     143: pop
     144: return

  public abstract void write(byte[], int, int);

  protected void writeImpl(byte[], int, int);
    Code:
       0: aload_0
       1: getfield      #71                 // Field count:I
       4: iload_3
       5: iadd
       6: istore        4
       8: iload_3
       9: istore        5
      11: aload_0
      12: getfield      #71                 // Field count:I
      15: aload_0
      16: getfield      #47                 // Field filledBufferSum:I
      19: isub
      20: istore        6
      22: iload         5
      24: ifle          84
      27: iload         5
      29: aload_0
      30: getfield      #49                 // Field currentBuffer:[B
      33: arraylength
      34: iload         6
      36: isub
      37: invokestatic  #74                 // Method java/lang/Math.min:(II)I
      40: istore        7
      42: aload_1
      43: iload_2
      44: iload_3
      45: iadd
      46: iload         5
      48: isub
      49: aload_0
      50: getfield      #49                 // Field currentBuffer:[B
      53: iload         6
      55: iload         7
      57: invokestatic  #80                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      60: iload         5
      62: iload         7
      64: isub
      65: istore        5
      67: iload         5
      69: ifle          81
      72: aload_0
      73: iload         4
      75: invokevirtual #82                 // Method needNewBuffer:(I)V
      78: iconst_0
      79: istore        6
      81: goto          22
      84: aload_0
      85: iload         4
      87: putfield      #71                 // Field count:I
      90: return

  public abstract void write(int);

  protected void writeImpl(int);
    Code:
       0: aload_0
       1: getfield      #71                 // Field count:I
       4: aload_0
       5: getfield      #47                 // Field filledBufferSum:I
       8: isub
       9: istore_2
      10: iload_2
      11: aload_0
      12: getfield      #49                 // Field currentBuffer:[B
      15: arraylength
      16: if_icmpne     31
      19: aload_0
      20: aload_0
      21: getfield      #71                 // Field count:I
      24: iconst_1
      25: iadd
      26: invokevirtual #82                 // Method needNewBuffer:(I)V
      29: iconst_0
      30: istore_2
      31: aload_0
      32: getfield      #49                 // Field currentBuffer:[B
      35: iload_2
      36: iload_1
      37: i2b
      38: bastore
      39: aload_0
      40: dup
      41: getfield      #71                 // Field count:I
      44: iconst_1
      45: iadd
      46: putfield      #71                 // Field count:I
      49: return

  public abstract int write(java.io.InputStream) throws java.io.IOException;

  protected int writeImpl(java.io.InputStream) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #71                 // Field count:I
       6: aload_0
       7: getfield      #47                 // Field filledBufferSum:I
      10: isub
      11: istore_3
      12: aload_1
      13: aload_0
      14: getfield      #49                 // Field currentBuffer:[B
      17: iload_3
      18: aload_0
      19: getfield      #49                 // Field currentBuffer:[B
      22: arraylength
      23: iload_3
      24: isub
      25: invokevirtual #97                 // Method java/io/InputStream.read:([BII)I
      28: istore        4
      30: iload         4
      32: iconst_m1
      33: if_icmpeq     98
      36: iload_2
      37: iload         4
      39: iadd
      40: istore_2
      41: iload_3
      42: iload         4
      44: iadd
      45: istore_3
      46: aload_0
      47: dup
      48: getfield      #71                 // Field count:I
      51: iload         4
      53: iadd
      54: putfield      #71                 // Field count:I
      57: iload_3
      58: aload_0
      59: getfield      #49                 // Field currentBuffer:[B
      62: arraylength
      63: if_icmpne     77
      66: aload_0
      67: aload_0
      68: getfield      #49                 // Field currentBuffer:[B
      71: arraylength
      72: invokevirtual #82                 // Method needNewBuffer:(I)V
      75: iconst_0
      76: istore_3
      77: aload_1
      78: aload_0
      79: getfield      #49                 // Field currentBuffer:[B
      82: iload_3
      83: aload_0
      84: getfield      #49                 // Field currentBuffer:[B
      87: arraylength
      88: iload_3
      89: isub
      90: invokevirtual #97                 // Method java/io/InputStream.read:([BII)I
      93: istore        4
      95: goto          30
      98: iload_2
      99: ireturn

  public abstract int size();

  public void close() throws java.io.IOException;
    Code:
       0: return

  public abstract void reset();

  protected void resetImpl();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #71                 // Field count:I
       5: aload_0
       6: iconst_0
       7: putfield      #47                 // Field filledBufferSum:I
      10: aload_0
      11: iconst_0
      12: putfield      #39                 // Field currentBufferIndex:I
      15: aload_0
      16: getfield      #33                 // Field reuseBuffers:Z
      19: ifeq          45
      22: aload_0
      23: aload_0
      24: getfield      #31                 // Field buffers:Ljava/util/List;
      27: aload_0
      28: getfield      #39                 // Field currentBufferIndex:I
      31: invokeinterface #53,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      36: checkcast     #54                 // class "[B"
      39: putfield      #49                 // Field currentBuffer:[B
      42: goto          84
      45: aload_0
      46: aconst_null
      47: putfield      #49                 // Field currentBuffer:[B
      50: aload_0
      51: getfield      #31                 // Field buffers:Ljava/util/List;
      54: iconst_0
      55: invokeinterface #53,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      60: checkcast     #54                 // class "[B"
      63: arraylength
      64: istore_1
      65: aload_0
      66: getfield      #31                 // Field buffers:Ljava/util/List;
      69: invokeinterface #107,  1          // InterfaceMethod java/util/List.clear:()V
      74: aload_0
      75: iload_1
      76: invokevirtual #82                 // Method needNewBuffer:(I)V
      79: aload_0
      80: iconst_1
      81: putfield      #33                 // Field reuseBuffers:Z
      84: return

  public abstract void writeTo(java.io.OutputStream) throws java.io.IOException;

  protected void writeToImpl(java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #71                 // Field count:I
       4: istore_2
       5: aload_0
       6: getfield      #31                 // Field buffers:Ljava/util/List;
       9: invokeinterface #114,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #120,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          68
      24: aload_3
      25: invokeinterface #124,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #54                 // class "[B"
      33: astore        4
      35: aload         4
      37: arraylength
      38: iload_2
      39: invokestatic  #74                 // Method java/lang/Math.min:(II)I
      42: istore        5
      44: aload_1
      45: aload         4
      47: iconst_0
      48: iload         5
      50: invokevirtual #126                // Method java/io/OutputStream.write:([BII)V
      53: iload_2
      54: iload         5
      56: isub
      57: istore_2
      58: iload_2
      59: ifne          65
      62: goto          68
      65: goto          15
      68: return

  public abstract java.io.InputStream toInputStream();

  protected <T extends java.io.InputStream> java.io.InputStream toInputStream(org.sonar.api.internal.apachecommons.io.output.AbstractByteArrayOutputStream$InputStreamConstructor<T>);
    Code:
       0: aload_0
       1: getfield      #71                 // Field count:I
       4: istore_2
       5: iload_2
       6: ifne          13
       9: getstatic     #140                // Field org/sonar/api/internal/apachecommons/io/input/ClosedInputStream.CLOSED_INPUT_STREAM:Lorg/sonar/api/internal/apachecommons/io/input/ClosedInputStream;
      12: areturn
      13: new           #28                 // class java/util/ArrayList
      16: dup
      17: aload_0
      18: getfield      #31                 // Field buffers:Ljava/util/List;
      21: invokeinterface #45,  1           // InterfaceMethod java/util/List.size:()I
      26: invokespecial #142                // Method java/util/ArrayList."<init>":(I)V
      29: astore_3
      30: aload_0
      31: getfield      #31                 // Field buffers:Ljava/util/List;
      34: invokeinterface #114,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      39: astore        4
      41: aload         4
      43: invokeinterface #120,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      48: ifeq          105
      51: aload         4
      53: invokeinterface #124,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      58: checkcast     #54                 // class "[B"
      61: astore        5
      63: aload         5
      65: arraylength
      66: iload_2
      67: invokestatic  #74                 // Method java/lang/Math.min:(II)I
      70: istore        6
      72: aload_3
      73: aload_1
      74: aload         5
      76: iconst_0
      77: iload         6
      79: invokeinterface #146,  4          // InterfaceMethod org/sonar/api/internal/apachecommons/io/output/AbstractByteArrayOutputStream$InputStreamConstructor.construct:([BII)Ljava/io/InputStream;
      84: invokeinterface #64,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      89: pop
      90: iload_2
      91: iload         6
      93: isub
      94: istore_2
      95: iload_2
      96: ifne          102
      99: goto          105
     102: goto          41
     105: aload_0
     106: iconst_0
     107: putfield      #33                 // Field reuseBuffers:Z
     110: new           #148                // class java/io/SequenceInputStream
     113: dup
     114: aload_3
     115: invokestatic  #154                // Method java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;
     118: invokespecial #157                // Method java/io/SequenceInputStream."<init>":(Ljava/util/Enumeration;)V
     121: areturn

  public abstract byte[] toByteArray();

  protected byte[] toByteArrayImpl();
    Code:
       0: aload_0
       1: getfield      #71                 // Field count:I
       4: istore_1
       5: iload_1
       6: ifne          13
       9: getstatic     #167                // Field EMPTY_BYTE_ARRAY:[B
      12: areturn
      13: iload_1
      14: newarray       byte
      16: astore_2
      17: iconst_0
      18: istore_3
      19: aload_0
      20: getfield      #31                 // Field buffers:Ljava/util/List;
      23: invokeinterface #114,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      28: astore        4
      30: aload         4
      32: invokeinterface #120,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      37: ifeq          91
      40: aload         4
      42: invokeinterface #124,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      47: checkcast     #54                 // class "[B"
      50: astore        5
      52: aload         5
      54: arraylength
      55: iload_1
      56: invokestatic  #74                 // Method java/lang/Math.min:(II)I
      59: istore        6
      61: aload         5
      63: iconst_0
      64: aload_2
      65: iload_3
      66: iload         6
      68: invokestatic  #80                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      71: iload_3
      72: iload         6
      74: iadd
      75: istore_3
      76: iload_1
      77: iload         6
      79: isub
      80: istore_1
      81: iload_1
      82: ifne          88
      85: goto          91
      88: goto          30
      91: aload_2
      92: areturn

  public java.lang.String toString();
    Code:
       0: new           #174                // class java/lang/String
       3: dup
       4: aload_0
       5: invokevirtual #176                // Method toByteArray:()[B
       8: invokestatic  #182                // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;
      11: invokespecial #185                // Method java/lang/String."<init>":([BLjava/nio/charset/Charset;)V
      14: areturn

  public java.lang.String toString(java.lang.String) throws java.io.UnsupportedEncodingException;
    Code:
       0: new           #174                // class java/lang/String
       3: dup
       4: aload_0
       5: invokevirtual #176                // Method toByteArray:()[B
       8: aload_1
       9: invokespecial #191                // Method java/lang/String."<init>":([BLjava/lang/String;)V
      12: areturn

  public java.lang.String toString(java.nio.charset.Charset);
    Code:
       0: new           #174                // class java/lang/String
       3: dup
       4: aload_0
       5: invokevirtual #176                // Method toByteArray:()[B
       8: aload_1
       9: invokespecial #185                // Method java/lang/String."<init>":([BLjava/nio/charset/Charset;)V
      12: areturn

  static {};
    Code:
       0: iconst_0
       1: newarray       byte
       3: putstatic     #167                // Field EMPTY_BYTE_ARRAY:[B
       6: return
}
