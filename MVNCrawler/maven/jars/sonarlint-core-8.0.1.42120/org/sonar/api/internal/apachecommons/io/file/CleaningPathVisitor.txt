Compiled from "CleaningPathVisitor.java"
public class org.sonar.api.internal.apachecommons.io.file.CleaningPathVisitor extends org.sonar.api.internal.apachecommons.io.file.CountingPathVisitor {
  private final java.lang.String[] skip;

  private final boolean overrideReadOnly;

  public static org.sonar.api.internal.apachecommons.io.file.CountingPathVisitor withBigIntegerCounters();
    Code:
       0: new           #2                  // class org/sonar/api/internal/apachecommons/io/file/CleaningPathVisitor
       3: dup
       4: invokestatic  #20                 // Method org/sonar/api/internal/apachecommons/io/file/Counters.bigIntegerPathCounters:()Lorg/sonar/api/internal/apachecommons/io/file/Counters$PathCounters;
       7: iconst_0
       8: anewarray     #22                 // class java/lang/String
      11: invokespecial #26                 // Method "<init>":(Lorg/sonar/api/internal/apachecommons/io/file/Counters$PathCounters;[Ljava/lang/String;)V
      14: areturn

  public static org.sonar.api.internal.apachecommons.io.file.CountingPathVisitor withLongCounters();
    Code:
       0: new           #2                  // class org/sonar/api/internal/apachecommons/io/file/CleaningPathVisitor
       3: dup
       4: invokestatic  #30                 // Method org/sonar/api/internal/apachecommons/io/file/Counters.longPathCounters:()Lorg/sonar/api/internal/apachecommons/io/file/Counters$PathCounters;
       7: iconst_0
       8: anewarray     #22                 // class java/lang/String
      11: invokespecial #26                 // Method "<init>":(Lorg/sonar/api/internal/apachecommons/io/file/Counters$PathCounters;[Ljava/lang/String;)V
      14: areturn

  public org.sonar.api.internal.apachecommons.io.file.CleaningPathVisitor(org.sonar.api.internal.apachecommons.io.file.Counters$PathCounters, org.sonar.api.internal.apachecommons.io.file.DeleteOption[], java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #34                 // Method org/sonar/api/internal/apachecommons/io/file/CountingPathVisitor."<init>":(Lorg/sonar/api/internal/apachecommons/io/file/Counters$PathCounters;)V
       5: aload_3
       6: ifnull        19
       9: aload_3
      10: invokevirtual #39                 // Method "[Ljava/lang/String;".clone:()Ljava/lang/Object;
      13: checkcast     #35                 // class "[Ljava/lang/String;"
      16: goto          22
      19: getstatic     #44                 // Field EMPTY_STRING_ARRAY:[Ljava/lang/String;
      22: astore        4
      24: aload         4
      26: invokestatic  #50                 // Method java/util/Arrays.sort:([Ljava/lang/Object;)V
      29: aload_0
      30: aload         4
      32: putfield      #52                 // Field skip:[Ljava/lang/String;
      35: aload_0
      36: aload_2
      37: invokestatic  #57                 // Method org/sonar/api/internal/apachecommons/io/file/StandardDeleteOption.overrideReadOnly:([Lorg/sonar/api/internal/apachecommons/io/file/DeleteOption;)Z
      40: putfield      #59                 // Field overrideReadOnly:Z
      43: return

  public org.sonar.api.internal.apachecommons.io.file.CleaningPathVisitor(org.sonar.api.internal.apachecommons.io.file.Counters$PathCounters, java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #70                 // Field org/sonar/api/internal/apachecommons/io/file/PathUtils.EMPTY_DELETE_OPTION_ARRAY:[Lorg/sonar/api/internal/apachecommons/io/file/DeleteOption;
       5: aload_2
       6: invokespecial #72                 // Method "<init>":(Lorg/sonar/api/internal/apachecommons/io/file/Counters$PathCounters;[Lorg/sonar/api/internal/apachecommons/io/file/DeleteOption;[Ljava/lang/String;)V
       9: return

  private boolean accept(java.nio.file.Path);
    Code:
       0: aload_0
       1: getfield      #52                 // Field skip:[Ljava/lang/String;
       4: aload_1
       5: invokeinterface #80,  1           // InterfaceMethod java/nio/file/Path.getFileName:()Ljava/nio/file/Path;
      10: aconst_null
      11: invokestatic  #86                 // Method java/util/Objects.toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;
      14: invokestatic  #90                 // Method java/util/Arrays.binarySearch:([Ljava/lang/Object;Ljava/lang/Object;)I
      17: ifge          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_0
       8: aload_1
       9: invokespecial #96                 // Method org/sonar/api/internal/apachecommons/io/file/CountingPathVisitor.equals:(Ljava/lang/Object;)Z
      12: ifne          17
      15: iconst_0
      16: ireturn
      17: aload_0
      18: invokevirtual #102                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: aload_1
      22: invokevirtual #102                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      25: if_acmpeq     30
      28: iconst_0
      29: ireturn
      30: aload_1
      31: checkcast     #2                  // class org/sonar/api/internal/apachecommons/io/file/CleaningPathVisitor
      34: astore_2
      35: aload_0
      36: getfield      #59                 // Field overrideReadOnly:Z
      39: aload_2
      40: getfield      #59                 // Field overrideReadOnly:Z
      43: if_icmpne     64
      46: aload_0
      47: getfield      #52                 // Field skip:[Ljava/lang/String;
      50: aload_2
      51: getfield      #52                 // Field skip:[Ljava/lang/String;
      54: invokestatic  #105                // Method java/util/Arrays.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z
      57: ifeq          64
      60: iconst_1
      61: goto          65
      64: iconst_0
      65: ireturn

  public int hashCode();
    Code:
       0: bipush        31
       2: istore_1
       3: aload_0
       4: invokespecial #112                // Method org/sonar/api/internal/apachecommons/io/file/CountingPathVisitor.hashCode:()I
       7: istore_2
       8: bipush        31
      10: iload_2
      11: imul
      12: aload_0
      13: getfield      #52                 // Field skip:[Ljava/lang/String;
      16: invokestatic  #115                // Method java/util/Arrays.hashCode:([Ljava/lang/Object;)I
      19: iadd
      20: istore_2
      21: bipush        31
      23: iload_2
      24: imul
      25: iconst_1
      26: anewarray     #98                 // class java/lang/Object
      29: dup
      30: iconst_0
      31: aload_0
      32: getfield      #59                 // Field overrideReadOnly:Z
      35: invokestatic  #121                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      38: aastore
      39: invokestatic  #124                // Method java/util/Objects.hash:([Ljava/lang/Object;)I
      42: iadd
      43: istore_2
      44: iload_2
      45: ireturn

  public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #134                // Method org/sonar/api/internal/apachecommons/io/file/CountingPathVisitor.preVisitDirectory:(Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;
       6: pop
       7: aload_0
       8: aload_1
       9: invokespecial #136                // Method accept:(Ljava/nio/file/Path;)Z
      12: ifeq          21
      15: getstatic     #142                // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;
      18: goto          24
      21: getstatic     #145                // Field java/nio/file/FileVisitResult.SKIP_SUBTREE:Ljava/nio/file/FileVisitResult;
      24: areturn

  public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #136                // Method accept:(Ljava/nio/file/Path;)Z
       5: ifeq          53
       8: aload_1
       9: iconst_1
      10: anewarray     #151                // class java/nio/file/LinkOption
      13: dup
      14: iconst_0
      15: getstatic     #155                // Field java/nio/file/LinkOption.NOFOLLOW_LINKS:Ljava/nio/file/LinkOption;
      18: aastore
      19: invokestatic  #161                // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      22: ifeq          53
      25: aload_0
      26: getfield      #59                 // Field overrideReadOnly:Z
      29: ifeq          48
      32: aload_1
      33: iconst_0
      34: iconst_1
      35: anewarray     #151                // class java/nio/file/LinkOption
      38: dup
      39: iconst_0
      40: getstatic     #155                // Field java/nio/file/LinkOption.NOFOLLOW_LINKS:Ljava/nio/file/LinkOption;
      43: aastore
      44: invokestatic  #165                // Method org/sonar/api/internal/apachecommons/io/file/PathUtils.setReadOnly:(Ljava/nio/file/Path;Z[Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;
      47: pop
      48: aload_1
      49: invokestatic  #168                // Method java/nio/file/Files.deleteIfExists:(Ljava/nio/file/Path;)Z
      52: pop
      53: aload_0
      54: aload_1
      55: aload_2
      56: invokevirtual #172                // Method updateFileCounters:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)V
      59: getstatic     #142                // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;
      62: areturn

  public java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #76                 // class java/nio/file/Path
       5: aload_2
       6: invokevirtual #175                // Method visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;
       9: areturn

  public java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #76                 // class java/nio/file/Path
       5: aload_2
       6: invokevirtual #177                // Method preVisitDirectory:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;
       9: areturn
}
