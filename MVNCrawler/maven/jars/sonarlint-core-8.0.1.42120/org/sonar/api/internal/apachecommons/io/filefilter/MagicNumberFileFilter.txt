Compiled from "MagicNumberFileFilter.java"
public class org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter extends org.sonar.api.internal.apachecommons.io.filefilter.AbstractFileFilter implements java.io.Serializable {
  private static final long serialVersionUID;

  private final byte[] magicNumbers;

  private final long byteOffset;

  public org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: lconst_0
       3: invokespecial #19                 // Method "<init>":([BJ)V
       6: return

  public org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: lconst_0
       3: invokespecial #26                 // Method "<init>":(Ljava/lang/String;J)V
       6: return

  public org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(java.lang.String, long);
    Code:
       0: aload_0
       1: invokespecial #30                 // Method org/sonar/api/internal/apachecommons/io/filefilter/AbstractFileFilter."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #32                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #34                 // String The magic number cannot be null
      14: invokespecial #36                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_1
      19: invokevirtual #42                 // Method java/lang/String.isEmpty:()Z
      22: ifeq          35
      25: new           #32                 // class java/lang/IllegalArgumentException
      28: dup
      29: ldc           #44                 // String The magic number must contain at least one byte
      31: invokespecial #36                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: lload_2
      36: lconst_0
      37: lcmp
      38: ifge          51
      41: new           #32                 // class java/lang/IllegalArgumentException
      44: dup
      45: ldc           #46                 // String The offset cannot be negative
      47: invokespecial #36                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      50: athrow
      51: aload_0
      52: aload_1
      53: invokestatic  #52                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;
      56: invokevirtual #56                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      59: putfield      #58                 // Field magicNumbers:[B
      62: aload_0
      63: lload_2
      64: putfield      #60                 // Field byteOffset:J
      67: return

  public org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(byte[], long);
    Code:
       0: aload_0
       1: invokespecial #30                 // Method org/sonar/api/internal/apachecommons/io/filefilter/AbstractFileFilter."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #32                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #34                 // String The magic number cannot be null
      14: invokespecial #36                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_1
      19: arraylength
      20: ifne          33
      23: new           #32                 // class java/lang/IllegalArgumentException
      26: dup
      27: ldc           #44                 // String The magic number must contain at least one byte
      29: invokespecial #36                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: lload_2
      34: lconst_0
      35: lcmp
      36: ifge          49
      39: new           #32                 // class java/lang/IllegalArgumentException
      42: dup
      43: ldc           #46                 // String The offset cannot be negative
      45: invokespecial #36                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      48: athrow
      49: aload_0
      50: aload_1
      51: arraylength
      52: newarray       byte
      54: putfield      #58                 // Field magicNumbers:[B
      57: aload_1
      58: iconst_0
      59: aload_0
      60: getfield      #58                 // Field magicNumbers:[B
      63: iconst_0
      64: aload_1
      65: arraylength
      66: invokestatic  #68                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      69: aload_0
      70: lload_2
      71: putfield      #60                 // Field byteOffset:J
      74: return

  public boolean accept(java.io.File);
    Code:
       0: aload_1
       1: ifnull        190
       4: aload_1
       5: invokevirtual #79                 // Method java/io/File.isFile:()Z
       8: ifeq          190
      11: aload_1
      12: invokevirtual #82                 // Method java/io/File.canRead:()Z
      15: ifeq          190
      18: new           #84                 // class java/io/RandomAccessFile
      21: dup
      22: aload_1
      23: ldc           #86                 // String r
      25: invokespecial #89                 // Method java/io/RandomAccessFile."<init>":(Ljava/io/File;Ljava/lang/String;)V
      28: astore_2
      29: aconst_null
      30: astore_3
      31: aload_0
      32: getfield      #58                 // Field magicNumbers:[B
      35: arraylength
      36: newarray       byte
      38: astore        4
      40: aload_2
      41: aload_0
      42: getfield      #60                 // Field byteOffset:J
      45: invokevirtual #93                 // Method java/io/RandomAccessFile.seek:(J)V
      48: aload_2
      49: aload         4
      51: invokevirtual #97                 // Method java/io/RandomAccessFile.read:([B)I
      54: istore        5
      56: iload         5
      58: aload_0
      59: getfield      #58                 // Field magicNumbers:[B
      62: arraylength
      63: if_icmpeq     102
      66: iconst_0
      67: istore        6
      69: aload_2
      70: ifnull        99
      73: aload_3
      74: ifnull        95
      77: aload_2
      78: invokevirtual #100                // Method java/io/RandomAccessFile.close:()V
      81: goto          99
      84: astore        7
      86: aload_3
      87: aload         7
      89: invokevirtual #104                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      92: goto          99
      95: aload_2
      96: invokevirtual #100                // Method java/io/RandomAccessFile.close:()V
      99: iload         6
     101: ireturn
     102: aload_0
     103: getfield      #58                 // Field magicNumbers:[B
     106: aload         4
     108: invokestatic  #110                // Method java/util/Arrays.equals:([B[B)Z
     111: istore        6
     113: aload_2
     114: ifnull        143
     117: aload_3
     118: ifnull        139
     121: aload_2
     122: invokevirtual #100                // Method java/io/RandomAccessFile.close:()V
     125: goto          143
     128: astore        7
     130: aload_3
     131: aload         7
     133: invokevirtual #104                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     136: goto          143
     139: aload_2
     140: invokevirtual #100                // Method java/io/RandomAccessFile.close:()V
     143: iload         6
     145: ireturn
     146: astore        4
     148: aload         4
     150: astore_3
     151: aload         4
     153: athrow
     154: astore        8
     156: aload_2
     157: ifnull        186
     160: aload_3
     161: ifnull        182
     164: aload_2
     165: invokevirtual #100                // Method java/io/RandomAccessFile.close:()V
     168: goto          186
     171: astore        9
     173: aload_3
     174: aload         9
     176: invokevirtual #104                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     179: goto          186
     182: aload_2
     183: invokevirtual #100                // Method java/io/RandomAccessFile.close:()V
     186: aload         8
     188: athrow
     189: astore_2
     190: iconst_0
     191: ireturn
    Exception table:
       from    to  target type
          77    81    84   Class java/lang/Throwable
         121   125   128   Class java/lang/Throwable
          31    69   146   Class java/lang/Throwable
         102   113   146   Class java/lang/Throwable
          31    69   154   any
         102   113   154   any
         164   168   171   Class java/lang/Throwable
         146   156   154   any
          18    99   189   Class java/io/IOException
         102   143   189   Class java/io/IOException
         146   189   189   Class java/io/IOException

  public java.lang.String toString();
    Code:
       0: new           #120                // class java/lang/StringBuilder
       3: dup
       4: aload_0
       5: invokespecial #122                // Method org/sonar/api/internal/apachecommons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;
       8: invokespecial #123                // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      11: astore_1
      12: aload_1
      13: ldc           #125                // String (
      15: invokevirtual #129                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      18: pop
      19: aload_1
      20: new           #38                 // class java/lang/String
      23: dup
      24: aload_0
      25: getfield      #58                 // Field magicNumbers:[B
      28: invokestatic  #52                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;
      31: invokespecial #132                // Method java/lang/String."<init>":([BLjava/nio/charset/Charset;)V
      34: invokevirtual #129                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: pop
      38: aload_1
      39: ldc           #134                // String ,
      41: invokevirtual #129                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: pop
      45: aload_1
      46: aload_0
      47: getfield      #60                 // Field byteOffset:J
      50: invokevirtual #137                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      53: pop
      54: aload_1
      55: ldc           #139                // String )
      57: invokevirtual #129                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: pop
      61: aload_1
      62: invokevirtual #140                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      65: areturn
}
