Compiled from "UnsynchronizedByteArrayInputStream.java"
public class org.sonarsource.sonarlint.shaded.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream extends java.io.InputStream {
  public static final int END_OF_STREAM;

  private final byte[] data;

  private final int eod;

  private int offset;

  private int markedOffset;

  public org.sonarsource.sonarlint.shaded.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream(byte[]);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #19                 // String data
       8: invokestatic  #25                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #26                 // class "[B"
      14: putfield      #28                 // Field data:[B
      17: aload_0
      18: iconst_0
      19: putfield      #30                 // Field offset:I
      22: aload_0
      23: aload_1
      24: arraylength
      25: putfield      #32                 // Field eod:I
      28: aload_0
      29: aload_0
      30: getfield      #30                 // Field offset:I
      33: putfield      #34                 // Field markedOffset:I
      36: return

  public org.sonarsource.sonarlint.shaded.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream(byte[], int);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method java/io/InputStream."<init>":()V
       4: aload_1
       5: ldc           #19                 // String data
       7: invokestatic  #25                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      10: pop
      11: iload_2
      12: ifge          25
      15: new           #39                 // class java/lang/IllegalArgumentException
      18: dup
      19: ldc           #41                 // String offset cannot be negative
      21: invokespecial #44                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      24: athrow
      25: aload_0
      26: aload_1
      27: putfield      #28                 // Field data:[B
      30: aload_0
      31: iload_2
      32: aload_1
      33: arraylength
      34: ifle          42
      37: aload_1
      38: arraylength
      39: goto          43
      42: iload_2
      43: invokestatic  #50                 // Method java/lang/Math.min:(II)I
      46: putfield      #30                 // Field offset:I
      49: aload_0
      50: aload_1
      51: arraylength
      52: putfield      #32                 // Field eod:I
      55: aload_0
      56: aload_0
      57: getfield      #30                 // Field offset:I
      60: putfield      #34                 // Field markedOffset:I
      63: return

  public org.sonarsource.sonarlint.shaded.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream(byte[], int, int);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method java/io/InputStream."<init>":()V
       4: iload_2
       5: ifge          18
       8: new           #39                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #41                 // String offset cannot be negative
      14: invokespecial #44                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: iload_3
      19: ifge          32
      22: new           #39                 // class java/lang/IllegalArgumentException
      25: dup
      26: ldc           #53                 // String length cannot be negative
      28: invokespecial #44                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: aload_1
      34: ldc           #19                 // String data
      36: invokestatic  #25                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      39: checkcast     #26                 // class "[B"
      42: putfield      #28                 // Field data:[B
      45: aload_0
      46: iload_2
      47: aload_1
      48: arraylength
      49: ifle          57
      52: aload_1
      53: arraylength
      54: goto          58
      57: iload_2
      58: invokestatic  #50                 // Method java/lang/Math.min:(II)I
      61: putfield      #30                 // Field offset:I
      64: aload_0
      65: aload_0
      66: getfield      #30                 // Field offset:I
      69: iload_3
      70: iadd
      71: aload_1
      72: arraylength
      73: invokestatic  #50                 // Method java/lang/Math.min:(II)I
      76: putfield      #32                 // Field eod:I
      79: aload_0
      80: aload_0
      81: getfield      #30                 // Field offset:I
      84: putfield      #34                 // Field markedOffset:I
      87: return

  public int available();
    Code:
       0: aload_0
       1: getfield      #30                 // Field offset:I
       4: aload_0
       5: getfield      #32                 // Field eod:I
       8: if_icmpge     23
      11: aload_0
      12: getfield      #32                 // Field eod:I
      15: aload_0
      16: getfield      #30                 // Field offset:I
      19: isub
      20: goto          24
      23: iconst_0
      24: ireturn

  public int read();
    Code:
       0: aload_0
       1: getfield      #30                 // Field offset:I
       4: aload_0
       5: getfield      #32                 // Field eod:I
       8: if_icmpge     34
      11: aload_0
      12: getfield      #28                 // Field data:[B
      15: aload_0
      16: dup
      17: getfield      #30                 // Field offset:I
      20: dup_x1
      21: iconst_1
      22: iadd
      23: putfield      #30                 // Field offset:I
      26: baload
      27: sipush        255
      30: iand
      31: goto          35
      34: iconst_m1
      35: ireturn

  public int read(byte[]);
    Code:
       0: aload_1
       1: ldc           #60                 // String dest
       3: invokestatic  #25                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: iconst_0
      10: aload_1
      11: arraylength
      12: invokevirtual #63                 // Method read:([BII)I
      15: ireturn

  public int read(byte[], int, int);
    Code:
       0: aload_1
       1: ldc           #60                 // String dest
       3: invokestatic  #25                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: iload_2
       8: iflt          23
      11: iload_3
      12: iflt          23
      15: iload_2
      16: iload_3
      17: iadd
      18: aload_1
      19: arraylength
      20: if_icmple     31
      23: new           #65                 // class java/lang/IndexOutOfBoundsException
      26: dup
      27: invokespecial #66                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
      30: athrow
      31: aload_0
      32: getfield      #30                 // Field offset:I
      35: aload_0
      36: getfield      #32                 // Field eod:I
      39: if_icmplt     44
      42: iconst_m1
      43: ireturn
      44: aload_0
      45: getfield      #32                 // Field eod:I
      48: aload_0
      49: getfield      #30                 // Field offset:I
      52: isub
      53: istore        4
      55: iload_3
      56: iload         4
      58: if_icmpge     64
      61: iload_3
      62: istore        4
      64: iload         4
      66: ifgt          71
      69: iconst_0
      70: ireturn
      71: aload_0
      72: getfield      #28                 // Field data:[B
      75: aload_0
      76: getfield      #30                 // Field offset:I
      79: aload_1
      80: iload_2
      81: iload         4
      83: invokestatic  #72                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      86: aload_0
      87: dup
      88: getfield      #30                 // Field offset:I
      91: iload         4
      93: iadd
      94: putfield      #30                 // Field offset:I
      97: iload         4
      99: ireturn

  public long skip(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          16
       6: new           #39                 // class java/lang/IllegalArgumentException
       9: dup
      10: ldc           #79                 // String Skipping backward is not supported
      12: invokespecial #44                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: aload_0
      17: getfield      #32                 // Field eod:I
      20: aload_0
      21: getfield      #30                 // Field offset:I
      24: isub
      25: i2l
      26: lstore_3
      27: lload_1
      28: lload_3
      29: lcmp
      30: ifge          35
      33: lload_1
      34: lstore_3
      35: aload_0
      36: dup
      37: getfield      #30                 // Field offset:I
      40: i2l
      41: lload_3
      42: ladd
      43: l2i
      44: putfield      #30                 // Field offset:I
      47: lload_3
      48: lreturn

  public boolean markSupported();
    Code:
       0: iconst_1
       1: ireturn

  public void mark(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #30                 // Field offset:I
       5: putfield      #34                 // Field markedOffset:I
       8: return

  public void reset();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #34                 // Field markedOffset:I
       5: putfield      #30                 // Field offset:I
       8: return
}
