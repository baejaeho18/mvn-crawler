Compiled from "PluginsMinVersions.java"
public class org.sonarsource.sonarlint.core.plugin.commons.PluginsMinVersions {
  public static final java.lang.String MIN_VERSIONS_FILE;

  private final java.util.Properties minimalPluginVersions;

  public org.sonarsource.sonarlint.core.plugin.commons.PluginsMinVersions();
    Code:
       0: aload_0
       1: invokespecial #17                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #19                 // class java/util/Properties
       8: dup
       9: invokespecial #20                 // Method java/util/Properties."<init>":()V
      12: putfield      #22                 // Field minimalPluginVersions:Ljava/util/Properties;
      15: aload_0
      16: getfield      #22                 // Field minimalPluginVersions:Ljava/util/Properties;
      19: aload_0
      20: invokevirtual #26                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      23: ldc           #9                  // String /plugins_min_versions.txt
      25: invokevirtual #32                 // Method java/lang/Class.getResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;
      28: invokevirtual #36                 // Method java/util/Properties.load:(Ljava/io/InputStream;)V
      31: goto          46
      34: astore_1
      35: new           #38                 // class java/lang/IllegalStateException
      38: dup
      39: ldc           #40                 // String Failed to load minimum plugin versions
      41: aload_1
      42: invokespecial #43                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      45: athrow
      46: return
    Exception table:
       from    to  target type
          15    31    34   Class java/io/IOException

  public java.lang.String getMinimumVersion(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #22                 // Field minimalPluginVersions:Ljava/util/Properties;
       4: aload_1
       5: invokevirtual #53                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       8: areturn

  public boolean isVersionSupported(java.lang.String, java.lang.String);
    Code:
       0: aload_2
       1: ifnull        16
       4: aload_2
       5: invokestatic  #63                 // Method org/sonarsource/sonarlint/core/commons/Version.create:(Ljava/lang/String;)Lorg/sonarsource/sonarlint/core/commons/Version;
       8: astore_3
       9: aload_0
      10: aload_1
      11: aload_3
      12: invokevirtual #66                 // Method isVersionSupported:(Ljava/lang/String;Lorg/sonarsource/sonarlint/core/commons/Version;)Z
      15: ireturn
      16: iconst_1
      17: ireturn

  public boolean isVersionSupported(java.lang.String, org.sonarsource.sonarlint.core.commons.Version);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #71                 // Method getMinimumVersion:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_3
       6: aload_2
       7: ifnull        35
      10: aload_3
      11: ifnull        35
      14: aload_3
      15: invokestatic  #63                 // Method org/sonarsource/sonarlint/core/commons/Version.create:(Ljava/lang/String;)Lorg/sonarsource/sonarlint/core/commons/Version;
      18: astore        4
      20: aload_2
      21: aload         4
      23: invokevirtual #75                 // Method org/sonarsource/sonarlint/core/commons/Version.compareToIgnoreQualifier:(Lorg/sonarsource/sonarlint/core/commons/Version;)I
      26: iflt          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn
      35: iconst_1
      36: ireturn
}
