Compiled from "IssueExclusionsRegexpScanner.java"
public class org.sonarsource.sonarlint.core.analysis.container.analysis.issue.ignore.scanner.IssueExclusionsRegexpScanner extends org.sonarsource.sonarlint.core.analysis.container.analysis.filesystem.FileMetadata$CharHandler {
  private static final org.sonarsource.sonarlint.core.commons.log.SonarLintLogger LOG;

  private final java.lang.StringBuilder sb;

  private final java.util.List<java.util.regex.Pattern> allFilePatterns;

  private final java.util.List<org.sonarsource.sonarlint.core.analysis.container.analysis.issue.ignore.scanner.IssueExclusionsLoader$DoubleRegexpMatcher> blockMatchers;

  private final org.sonarsource.sonarlint.core.analysis.container.analysis.filesystem.SonarLintInputFile inputFile;

  private int lineIndex;

  private java.util.List<org.sonarsource.sonarlint.core.analysis.container.analysis.issue.ignore.scanner.IssueExclusionsRegexpScanner$LineExclusion> lineExclusions;

  private org.sonarsource.sonarlint.core.analysis.container.analysis.issue.ignore.scanner.IssueExclusionsRegexpScanner$LineExclusion currentLineExclusion;

  private int fileLength;

  private org.sonarsource.sonarlint.core.analysis.container.analysis.issue.ignore.scanner.IssueExclusionsLoader$DoubleRegexpMatcher currentMatcher;

  private boolean ignoreAllIssues;

  org.sonarsource.sonarlint.core.analysis.container.analysis.issue.ignore.scanner.IssueExclusionsRegexpScanner(org.sonarsource.sonarlint.core.analysis.container.analysis.filesystem.SonarLintInputFile, java.util.List<java.util.regex.Pattern>, java.util.List<org.sonarsource.sonarlint.core.analysis.container.analysis.issue.ignore.scanner.IssueExclusionsLoader$DoubleRegexpMatcher>);
    Code:
       0: aload_0
       1: invokespecial #49                 // Method org/sonarsource/sonarlint/core/analysis/container/analysis/filesystem/FileMetadata$CharHandler."<init>":()V
       4: aload_0
       5: new           #51                 // class java/lang/StringBuilder
       8: dup
       9: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
      12: putfield      #54                 // Field sb:Ljava/lang/StringBuilder;
      15: aload_0
      16: iconst_1
      17: putfield      #56                 // Field lineIndex:I
      20: aload_0
      21: new           #58                 // class java/util/ArrayList
      24: dup
      25: invokespecial #59                 // Method java/util/ArrayList."<init>":()V
      28: putfield      #61                 // Field lineExclusions:Ljava/util/List;
      31: aload_0
      32: aconst_null
      33: putfield      #63                 // Field currentLineExclusion:Lorg/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsRegexpScanner$LineExclusion;
      36: aload_0
      37: iconst_0
      38: putfield      #65                 // Field fileLength:I
      41: aload_0
      42: aload_2
      43: putfield      #67                 // Field allFilePatterns:Ljava/util/List;
      46: aload_0
      47: aload_3
      48: putfield      #69                 // Field blockMatchers:Ljava/util/List;
      51: aload_0
      52: aload_1
      53: putfield      #71                 // Field inputFile:Lorg/sonarsource/sonarlint/core/analysis/container/analysis/filesystem/SonarLintInputFile;
      56: getstatic     #73                 // Field LOG:Lorg/sonarsource/sonarlint/core/commons/log/SonarLintLogger;
      59: ldc           #75                 // String Evaluate issue exclusions for \'{}\'
      61: aload_1
      62: invokevirtual #81                 // Method org/sonarsource/sonarlint/core/analysis/container/analysis/filesystem/SonarLintInputFile.relativePath:()Ljava/lang/String;
      65: invokevirtual #87                 // Method org/sonarsource/sonarlint/core/commons/log/SonarLintLogger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      68: return

  public void handleIgnoreEoL(char);
    Code:
       0: aload_0
       1: getfield      #93                 // Field ignoreAllIssues:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #54                 // Field sb:Ljava/lang/StringBuilder;
      12: iload_1
      13: invokevirtual #97                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      16: pop
      17: return

  public void newLine();
    Code:
       0: aload_0
       1: getfield      #93                 // Field ignoreAllIssues:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: aload_0
      10: getfield      #54                 // Field sb:Ljava/lang/StringBuilder;
      13: invokevirtual #103                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      16: invokevirtual #107                // Method processLine:(Ljava/lang/String;)V
      19: aload_0
      20: getfield      #54                 // Field sb:Ljava/lang/StringBuilder;
      23: iconst_0
      24: invokevirtual #111                // Method java/lang/StringBuilder.setLength:(I)V
      27: aload_0
      28: dup
      29: getfield      #56                 // Field lineIndex:I
      32: iconst_1
      33: iadd
      34: putfield      #56                 // Field lineIndex:I
      37: return

  public void eof();
    Code:
       0: aload_0
       1: getfield      #93                 // Field ignoreAllIssues:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: aload_0
      10: getfield      #54                 // Field sb:Ljava/lang/StringBuilder;
      13: invokevirtual #103                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      16: invokevirtual #107                // Method processLine:(Ljava/lang/String;)V
      19: aload_0
      20: getfield      #114                // Field currentMatcher:Lorg/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsLoader$DoubleRegexpMatcher;
      23: ifnull        46
      26: aload_0
      27: getfield      #114                // Field currentMatcher:Lorg/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsLoader$DoubleRegexpMatcher;
      30: invokevirtual #118                // Method org/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsLoader$DoubleRegexpMatcher.hasSecondPattern:()Z
      33: ifne          46
      36: aload_0
      37: aload_0
      38: getfield      #56                 // Field lineIndex:I
      41: iconst_1
      42: iadd
      43: invokevirtual #121                // Method endExclusion:(I)V
      46: aload_0
      47: aload_0
      48: getfield      #56                 // Field lineIndex:I
      51: putfield      #65                 // Field fileLength:I
      54: aload_0
      55: getfield      #61                 // Field lineExclusions:Ljava/util/List;
      58: invokeinterface #126,  1          // InterfaceMethod java/util/List.isEmpty:()Z
      63: ifne          139
      66: aload_0
      67: invokevirtual #130                // Method convertLineExclusionsToLineRanges:()Ljava/util/Set;
      70: astore_1
      71: getstatic     #73                 // Field LOG:Lorg/sonarsource/sonarlint/core/commons/log/SonarLintLogger;
      74: ldc           #132                // String   - Line exclusions found: {}
      76: aload_1
      77: invokeinterface #138,  1          // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      82: invokedynamic #157,  0            // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      87: invokeinterface #163,  2          // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      92: ldc           #165                // String ,
      94: invokestatic  #171                // Method java/util/stream/Collectors.joining:(Ljava/lang/CharSequence;)Ljava/util/stream/Collector;
      97: invokeinterface #175,  2          // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
     102: invokevirtual #87                 // Method org/sonarsource/sonarlint/core/commons/log/SonarLintLogger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
     105: aload_0
     106: getfield      #71                 // Field inputFile:Lorg/sonarsource/sonarlint/core/analysis/container/analysis/filesystem/SonarLintInputFile;
     109: aload_1
     110: invokeinterface #138,  1          // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
     115: invokedynamic #182,  0            // InvokeDynamic #1:apply:()Ljava/util/function/Function;
     120: invokeinterface #163,  2          // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
     125: invokestatic  #186                // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
     128: invokeinterface #175,  2          // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
     133: checkcast     #188                // class java/util/Collection
     136: invokevirtual #192                // Method org/sonarsource/sonarlint/core/analysis/container/analysis/filesystem/SonarLintInputFile.addIgnoreIssuesOnLineRanges:(Ljava/util/Collection;)V
     139: return

  private void processLine(java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #200                // Method java/lang/String.trim:()Ljava/lang/String;
       4: invokevirtual #204                // Method java/lang/String.length:()I
       7: ifne          11
      10: return
      11: aload_0
      12: getfield      #67                 // Field allFilePatterns:Ljava/util/List;
      15: invokeinterface #208,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      20: astore_2
      21: aload_2
      22: invokeinterface #213,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          77
      30: aload_2
      31: invokeinterface #217,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #219                // class java/util/regex/Pattern
      39: astore_3
      40: aload_3
      41: aload_1
      42: invokevirtual #223                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      45: invokevirtual #228                // Method java/util/regex/Matcher.find:()Z
      48: ifeq          74
      51: getstatic     #73                 // Field LOG:Lorg/sonarsource/sonarlint/core/commons/log/SonarLintLogger;
      54: ldc           #230                // String   - Exclusion pattern \'{}\': all issues in this file will be ignored.
      56: aload_3
      57: invokevirtual #87                 // Method org/sonarsource/sonarlint/core/commons/log/SonarLintLogger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      60: aload_0
      61: iconst_1
      62: putfield      #93                 // Field ignoreAllIssues:Z
      65: aload_0
      66: getfield      #71                 // Field inputFile:Lorg/sonarsource/sonarlint/core/analysis/container/analysis/filesystem/SonarLintInputFile;
      69: iconst_1
      70: invokevirtual #234                // Method org/sonarsource/sonarlint/core/analysis/container/analysis/filesystem/SonarLintInputFile.setIgnoreAllIssues:(Z)V
      73: return
      74: goto          21
      77: aload_0
      78: aload_1
      79: aload_0
      80: getfield      #56                 // Field lineIndex:I
      83: invokevirtual #238                // Method checkDoubleRegexps:(Ljava/lang/String;I)V
      86: return

  private java.util.Set<org.sonarsource.sonarlint.core.analysis.container.analysis.issue.ignore.scanner.LineRange> convertLineExclusionsToLineRanges();
    Code:
       0: new           #245                // class java/util/HashSet
       3: dup
       4: aload_0
       5: getfield      #61                 // Field lineExclusions:Ljava/util/List;
       8: invokeinterface #248,  1          // InterfaceMethod java/util/List.size:()I
      13: invokespecial #250                // Method java/util/HashSet."<init>":(I)V
      16: astore_1
      17: aload_0
      18: getfield      #61                 // Field lineExclusions:Ljava/util/List;
      21: invokeinterface #208,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      26: astore_2
      27: aload_2
      28: invokeinterface #213,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      33: ifeq          64
      36: aload_2
      37: invokeinterface #217,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      42: checkcast     #7                  // class org/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsRegexpScanner$LineExclusion
      45: astore_3
      46: aload_1
      47: aload_3
      48: aload_0
      49: getfield      #65                 // Field fileLength:I
      52: invokevirtual #254                // Method org/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsRegexpScanner$LineExclusion.toLineRange:(I)Lorg/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/LineRange;
      55: invokeinterface #258,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      60: pop
      61: goto          27
      64: aload_1
      65: areturn

  private void checkDoubleRegexps(java.lang.String, int);
    Code:
       0: aload_0
       1: getfield      #114                // Field currentMatcher:Lorg/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsLoader$DoubleRegexpMatcher;
       4: ifnonnull     66
       7: aload_0
       8: getfield      #69                 // Field blockMatchers:Ljava/util/List;
      11: invokeinterface #208,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      16: astore_3
      17: aload_3
      18: invokeinterface #213,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          63
      26: aload_3
      27: invokeinterface #217,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #10                 // class org/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsLoader$DoubleRegexpMatcher
      35: astore        4
      37: aload         4
      39: aload_1
      40: invokevirtual #263                // Method org/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsLoader$DoubleRegexpMatcher.matchesFirstPattern:(Ljava/lang/String;)Z
      43: ifeq          60
      46: aload_0
      47: iload_2
      48: invokevirtual #266                // Method startExclusion:(I)V
      51: aload_0
      52: aload         4
      54: putfield      #114                // Field currentMatcher:Lorg/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsLoader$DoubleRegexpMatcher;
      57: goto          63
      60: goto          17
      63: goto          87
      66: aload_0
      67: getfield      #114                // Field currentMatcher:Lorg/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsLoader$DoubleRegexpMatcher;
      70: aload_1
      71: invokevirtual #269                // Method org/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsLoader$DoubleRegexpMatcher.matchesSecondPattern:(Ljava/lang/String;)Z
      74: ifeq          87
      77: aload_0
      78: iload_2
      79: invokevirtual #121                // Method endExclusion:(I)V
      82: aload_0
      83: aconst_null
      84: putfield      #114                // Field currentMatcher:Lorg/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsLoader$DoubleRegexpMatcher;
      87: return

  private void startExclusion(int);
    Code:
       0: aload_0
       1: new           #7                  // class org/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsRegexpScanner$LineExclusion
       4: dup
       5: iload_1
       6: invokespecial #270                // Method org/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsRegexpScanner$LineExclusion."<init>":(I)V
       9: putfield      #63                 // Field currentLineExclusion:Lorg/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsRegexpScanner$LineExclusion;
      12: aload_0
      13: getfield      #61                 // Field lineExclusions:Ljava/util/List;
      16: aload_0
      17: getfield      #63                 // Field currentLineExclusion:Lorg/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsRegexpScanner$LineExclusion;
      20: invokeinterface #271,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      25: pop
      26: return

  private void endExclusion(int);
    Code:
       0: aload_0
       1: getfield      #63                 // Field currentLineExclusion:Lorg/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsRegexpScanner$LineExclusion;
       4: iload_1
       5: invokevirtual #274                // Method org/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsRegexpScanner$LineExclusion.setEnd:(I)V
       8: aload_0
       9: aconst_null
      10: putfield      #63                 // Field currentLineExclusion:Lorg/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/IssueExclusionsRegexpScanner$LineExclusion;
      13: return

  private static int[] lambda$eof$0(org.sonarsource.sonarlint.core.analysis.container.analysis.issue.ignore.scanner.LineRange);
    Code:
       0: iconst_2
       1: newarray       int
       3: dup
       4: iconst_0
       5: aload_0
       6: invokevirtual #277                // Method org/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/LineRange.from:()I
       9: iastore
      10: dup
      11: iconst_1
      12: aload_0
      13: invokevirtual #280                // Method org/sonarsource/sonarlint/core/analysis/container/analysis/issue/ignore/scanner/LineRange.to:()I
      16: iastore
      17: areturn

  static {};
    Code:
       0: invokestatic  #287                // Method org/sonarsource/sonarlint/core/commons/log/SonarLintLogger.get:()Lorg/sonarsource/sonarlint/core/commons/log/SonarLintLogger;
       3: putstatic     #73                 // Field LOG:Lorg/sonarsource/sonarlint/core/commons/log/SonarLintLogger;
       6: return
}
