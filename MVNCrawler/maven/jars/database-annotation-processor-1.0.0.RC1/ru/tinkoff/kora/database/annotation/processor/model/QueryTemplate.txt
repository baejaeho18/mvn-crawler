Compiled from "QueryTemplate.java"
public class ru.tinkoff.kora.database.annotation.processor.model.QueryTemplate {
  public ru.tinkoff.kora.database.annotation.processor.model.QueryTemplate();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.lang.String processTemplate(javax.lang.model.util.Types, javax.lang.model.util.Elements, java.lang.String, javax.lang.model.element.ExecutableElement, javax.lang.model.type.ExecutableType, ru.tinkoff.kora.database.annotation.processor.model.QueryResult);
    Code:
       0: aload_2
       1: invokestatic  #7                  // Method ru/tinkoff/kora/database/annotation/processor/model/TemplateModel.detectTemplateParams:(Ljava/lang/String;)Ljava/util/List;
       4: astore        6
       6: aload         6
       8: invokeinterface #13,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      13: ifeq          18
      16: aload_2
      17: areturn
      18: aload_0
      19: aload_1
      20: aload         5
      22: invokestatic  #19                 // Method detectReturnTypeModel:(Ljavax/lang/model/util/Types;Ljavax/lang/model/util/Elements;Lru/tinkoff/kora/database/annotation/processor/model/QueryResult;)Lru/tinkoff/kora/database/annotation/processor/model/TemplateModel;
      25: astore        7
      27: aload         7
      29: ifnonnull     36
      32: aconst_null
      33: goto          42
      36: aload         7
      38: aconst_null
      39: invokevirtual #25                 // Method ru/tinkoff/kora/database/annotation/processor/model/TemplateModel.getTemplateParams:(Ljava/lang/String;)Ljava/util/Map;
      42: astore        8
      44: aload         6
      46: invokeinterface #29,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      51: invokedynamic #33,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      56: invokeinterface #37,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      61: invokedynamic #43,  0             // InvokeDynamic #1:test:()Ljava/util/function/Predicate;
      66: invokeinterface #47,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      71: invokeinterface #51,  1           // InterfaceMethod java/util/stream/Stream.distinct:()Ljava/util/stream/Stream;
      76: invokedynamic #54,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      81: aload_3
      82: aload         4
      84: aload_1
      85: aload_0
      86: aload_2
      87: invokedynamic #55,  0             // InvokeDynamic #3:apply:(Ljavax/lang/model/element/ExecutableElement;Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/util/Elements;Ljavax/lang/model/util/Types;Ljava/lang/String;)Ljava/util/function/Function;
      92: invokestatic  #58                 // Method java/util/stream/Collectors.toMap:(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/stream/Collector;
      95: invokeinterface #64,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
     100: checkcast     #68                 // class java/util/Map
     103: astore        9
     105: new           #70                 // class java/util/HashMap
     108: dup
     109: aload         9
     111: invokeinterface #72,  1           // InterfaceMethod java/util/Map.size:()I
     116: invokespecial #76                 // Method java/util/HashMap."<init>":(I)V
     119: astore        10
     121: aload         9
     123: aload         10
     125: invokedynamic #79,  0             // InvokeDynamic #4:accept:(Ljava/util/HashMap;)Ljava/util/function/BiConsumer;
     130: invokeinterface #83,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
     135: aload_2
     136: astore        11
     138: aload         6
     140: invokeinterface #87,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     145: astore        12
     147: aload         12
     149: invokeinterface #91,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     154: ifeq          268
     157: aload         12
     159: invokeinterface #96,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     164: checkcast     #100                // class ru/tinkoff/kora/database/annotation/processor/model/TemplateModel$TemplateParam
     167: astore        13
     169: aload         13
     171: invokevirtual #102                // Method ru/tinkoff/kora/database/annotation/processor/model/TemplateModel$TemplateParam.paramName:()Ljava/lang/String;
     174: astore        14
     176: aload         14
     178: ifnonnull     188
     181: aload         8
     183: astore        15
     185: goto          200
     188: aload         10
     190: aload         14
     192: invokevirtual #106                // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
     195: checkcast     #68                 // class java/util/Map
     198: astore        15
     200: aload         15
     202: aload         13
     204: invokevirtual #110                // Method ru/tinkoff/kora/database/annotation/processor/model/TemplateModel$TemplateParam.template:()Ljava/lang/String;
     207: invokeinterface #113,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     212: checkcast     #114                // class java/lang/String
     215: astore        16
     217: aload         16
     219: ifnonnull     251
     222: new           #116                // class java/lang/RuntimeException
     225: dup
     226: ldc           #118                // String Unknown template `%s` for query %s
     228: iconst_2
     229: anewarray     #2                  // class java/lang/Object
     232: dup
     233: iconst_0
     234: aload         13
     236: invokevirtual #120                // Method ru/tinkoff/kora/database/annotation/processor/model/TemplateModel$TemplateParam.rawTemplate:()Ljava/lang/String;
     239: aastore
     240: dup
     241: iconst_1
     242: aload_2
     243: aastore
     244: invokestatic  #123                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     247: invokespecial #127                // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
     250: athrow
     251: aload         11
     253: aload         13
     255: invokevirtual #120                // Method ru/tinkoff/kora/database/annotation/processor/model/TemplateModel$TemplateParam.rawTemplate:()Ljava/lang/String;
     258: aload         16
     260: invokevirtual #130                // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
     263: astore        11
     265: goto          147
     268: aload         11
     270: areturn

  private static ru.tinkoff.kora.database.annotation.processor.model.TemplateModel detectReturnTypeModel(javax.lang.model.util.Types, javax.lang.model.util.Elements, ru.tinkoff.kora.database.annotation.processor.model.QueryResult);
    Code:
       0: aconst_null
       1: areturn

  private static void lambda$processTemplate$5(java.util.HashMap, java.lang.String, ru.tinkoff.kora.database.annotation.processor.model.TemplateModel);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_1
       4: invokevirtual #25                 // Method ru/tinkoff/kora/database/annotation/processor/model/TemplateModel.getTemplateParams:(Ljava/lang/String;)Ljava/util/Map;
       7: invokevirtual #134                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: return

  private static ru.tinkoff.kora.database.annotation.processor.model.TemplateModel lambda$processTemplate$4(javax.lang.model.element.ExecutableElement, javax.lang.model.type.ExecutableType, javax.lang.model.util.Elements, javax.lang.model.util.Types, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: invokeinterface #138,  1          // InterfaceMethod javax/lang/model/element/ExecutableElement.getParameters:()Ljava/util/List;
       6: invokestatic  #144                // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
       9: aload_1
      10: invokeinterface #150,  1          // InterfaceMethod javax/lang/model/type/ExecutableType.getParameterTypes:()Ljava/util/List;
      15: invokestatic  #144                // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      18: invokestatic  #155                // Method reactor/core/publisher/Flux.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      21: invokevirtual #159                // Method reactor/core/publisher/Flux.toStream:()Ljava/util/stream/Stream;
      24: aload         5
      26: invokedynamic #162,  0            // InvokeDynamic #5:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
      31: invokeinterface #47,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      36: invokeinterface #165,  1          // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      41: aload_2
      42: aload_3
      43: invokedynamic #169,  0            // InvokeDynamic #6:apply:(Ljavax/lang/model/util/Elements;Ljavax/lang/model/util/Types;)Ljava/util/function/Function;
      48: invokevirtual #172                // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      51: aload         5
      53: aload         4
      55: invokedynamic #177,  0            // InvokeDynamic #7:get:(Ljava/lang/String;Ljava/lang/String;)Ljava/util/function/Supplier;
      60: invokevirtual #180                // Method java/util/Optional.orElseThrow:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      63: checkcast     #8                  // class ru/tinkoff/kora/database/annotation/processor/model/TemplateModel
      66: areturn

  private static java.lang.RuntimeException lambda$processTemplate$3(java.lang.String, java.lang.String);
    Code:
       0: new           #116                // class java/lang/RuntimeException
       3: dup
       4: ldc           #184                // String Unknown parameter \'%s\' for query `%s`
       6: iconst_2
       7: anewarray     #2                  // class java/lang/Object
      10: dup
      11: iconst_0
      12: aload_0
      13: aastore
      14: dup
      15: iconst_1
      16: aload_1
      17: aastore
      18: invokestatic  #123                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      21: invokespecial #127                // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      24: areturn

  private static ru.tinkoff.kora.database.annotation.processor.model.TemplateModel lambda$processTemplate$2(javax.lang.model.util.Elements, javax.lang.model.util.Types, reactor.util.function.Tuple2);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #186                // Method reactor/util/function/Tuple2.getT2:()Ljava/lang/Object;
       6: checkcast     #191                // class javax/lang/model/type/DeclaredType
       9: invokeinterface #193,  1          // InterfaceMethod javax/lang/model/type/DeclaredType.asElement:()Ljavax/lang/model/element/Element;
      14: checkcast     #197                // class javax/lang/model/element/TypeElement
      17: invokestatic  #199                // Method ru/tinkoff/kora/database/annotation/processor/model/TemplateModel.parseEntityModel:(Ljavax/lang/model/util/Elements;Ljavax/lang/model/util/Types;Ljavax/lang/model/element/TypeElement;)Lru/tinkoff/kora/database/annotation/processor/model/TemplateModel;
      20: areturn

  private static boolean lambda$processTemplate$1(java.lang.String, reactor.util.function.Tuple2);
    Code:
       0: aload_1
       1: invokevirtual #203                // Method reactor/util/function/Tuple2.getT1:()Ljava/lang/Object;
       4: checkcast     #206                // class javax/lang/model/element/VariableElement
       7: invokeinterface #208,  1          // InterfaceMethod javax/lang/model/element/VariableElement.getSimpleName:()Ljavax/lang/model/element/Name;
      12: invokevirtual #212                // Method java/lang/Object.toString:()Ljava/lang/String;
      15: aload_0
      16: invokevirtual #215                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      19: ifeq          59
      22: aload_1
      23: invokevirtual #186                // Method reactor/util/function/Tuple2.getT2:()Ljava/lang/Object;
      26: instanceof    #191                // class javax/lang/model/type/DeclaredType
      29: ifeq          59
      32: aload_1
      33: invokevirtual #186                // Method reactor/util/function/Tuple2.getT2:()Ljava/lang/Object;
      36: checkcast     #191                // class javax/lang/model/type/DeclaredType
      39: invokeinterface #193,  1          // InterfaceMethod javax/lang/model/type/DeclaredType.asElement:()Ljavax/lang/model/element/Element;
      44: invokeinterface #219,  1          // InterfaceMethod javax/lang/model/element/Element.getKind:()Ljavax/lang/model/element/ElementKind;
      49: invokevirtual #225                // Method javax/lang/model/element/ElementKind.isClass:()Z
      52: ifeq          59
      55: iconst_1
      56: goto          60
      59: iconst_0
      60: ireturn

  private static java.lang.String lambda$processTemplate$0(java.lang.String);
    Code:
       0: aload_0
       1: areturn
}
