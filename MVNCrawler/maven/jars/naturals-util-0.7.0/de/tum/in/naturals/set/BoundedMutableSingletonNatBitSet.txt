Compiled from "BoundedMutableSingletonNatBitSet.java"
class de.tum.in.naturals.set.BoundedMutableSingletonNatBitSet extends de.tum.in.naturals.set.AbstractBoundedNatBitSet {
  private static final int EMPTY;

  private final boolean complement;

  private final de.tum.in.naturals.set.BoundedMutableSingletonNatBitSet complementView;

  private final int[] store;

  static final boolean $assertionsDisabled;

  private de.tum.in.naturals.set.BoundedMutableSingletonNatBitSet(int, int, boolean);
    Code:
       0: aload_0
       1: iload_2
       2: invokespecial #2                  // Method de/tum/in/naturals/set/AbstractBoundedNatBitSet."<init>":(I)V
       5: aload_0
       6: iconst_1
       7: newarray       int
       9: dup
      10: iconst_0
      11: iload_1
      12: iastore
      13: putfield      #3                  // Field store:[I
      16: aload_0
      17: iload_3
      18: putfield      #4                  // Field complement:Z
      21: aload_0
      22: new           #5                  // class de/tum/in/naturals/set/BoundedMutableSingletonNatBitSet
      25: dup
      26: aload_0
      27: invokespecial #6                  // Method "<init>":(Lde/tum/in/naturals/set/BoundedMutableSingletonNatBitSet;)V
      30: putfield      #7                  // Field complementView:Lde/tum/in/naturals/set/BoundedMutableSingletonNatBitSet;
      33: return

  private de.tum.in.naturals.set.BoundedMutableSingletonNatBitSet(de.tum.in.naturals.set.BoundedMutableSingletonNatBitSet);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #8                  // Method domainSize:()I
       5: invokespecial #2                  // Method de/tum/in/naturals/set/AbstractBoundedNatBitSet."<init>":(I)V
       8: aload_0
       9: aload_1
      10: putfield      #7                  // Field complementView:Lde/tum/in/naturals/set/BoundedMutableSingletonNatBitSet;
      13: aload_0
      14: aload_1
      15: getfield      #4                  // Field complement:Z
      18: ifne          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: putfield      #4                  // Field complement:Z
      29: aload_0
      30: aload_1
      31: getfield      #3                  // Field store:[I
      34: putfield      #3                  // Field store:[I
      37: return

  de.tum.in.naturals.set.BoundedMutableSingletonNatBitSet(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iconst_0
       4: invokespecial #9                  // Method "<init>":(IIZ)V
       7: iload_1
       8: invokestatic  #10                 // Method de/tum/in/naturals/set/NatBitSetsUtil.checkNonNegative:(I)V
      11: return

  de.tum.in.naturals.set.BoundedMutableSingletonNatBitSet(int);
    Code:
       0: aload_0
       1: ldc           #11                 // int -2147483648
       3: iload_1
       4: iconst_0
       5: invokespecial #9                  // Method "<init>":(IIZ)V
       8: return

  private static java.lang.UnsupportedOperationException unsupportedOperation();
    Code:
       0: new           #12                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #13                 // String Singleton can hold at most one value
       6: invokespecial #14                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: areturn

  public void clear(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #15                 // Method checkInDomain:(I)V
       5: aload_0
       6: getfield      #4                  // Field complement:Z
       9: ifeq          41
      12: aload_0
      13: invokespecial #16                 // Method isStoreEmpty:()Z
      16: ifeq          27
      19: aload_0
      20: iload_1
      21: invokespecial #17                 // Method setStoreValue:(I)V
      24: goto          75
      27: iload_1
      28: aload_0
      29: getfield      #3                  // Field store:[I
      32: iconst_0
      33: iaload
      34: if_icmpeq     75
      37: invokestatic  #18                 // Method unsupportedOperation:()Ljava/lang/UnsupportedOperationException;
      40: athrow
      41: getstatic     #19                 // Field $assertionsDisabled:Z
      44: ifne          61
      47: iload_1
      48: ldc           #11                 // int -2147483648
      50: if_icmpne     61
      53: new           #20                 // class java/lang/AssertionError
      56: dup
      57: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      60: athrow
      61: iload_1
      62: aload_0
      63: getfield      #3                  // Field store:[I
      66: iconst_0
      67: iaload
      68: if_icmpne     75
      71: aload_0
      72: invokespecial #22                 // Method setStoreEmpty:()V
      75: return

  public void clear(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #23                 // Method checkInDomain:(II)V
       6: iload_1
       7: iload_2
       8: if_icmpne     12
      11: return
      12: aload_0
      13: invokevirtual #24                 // Method isEmpty:()Z
      16: ifeq          20
      19: return
      20: aload_0
      21: getfield      #4                  // Field complement:Z
      24: ifeq          67
      27: iload_1
      28: iconst_1
      29: iadd
      30: iload_2
      31: if_icmpeq     38
      34: invokestatic  #18                 // Method unsupportedOperation:()Ljava/lang/UnsupportedOperationException;
      37: athrow
      38: aload_0
      39: invokespecial #16                 // Method isStoreEmpty:()Z
      42: ifeq          53
      45: aload_0
      46: iload_1
      47: invokespecial #17                 // Method setStoreValue:(I)V
      50: goto          91
      53: iload_1
      54: aload_0
      55: getfield      #3                  // Field store:[I
      58: iconst_0
      59: iaload
      60: if_icmpeq     91
      63: invokestatic  #18                 // Method unsupportedOperation:()Ljava/lang/UnsupportedOperationException;
      66: athrow
      67: iload_1
      68: aload_0
      69: getfield      #3                  // Field store:[I
      72: iconst_0
      73: iaload
      74: if_icmpgt     91
      77: aload_0
      78: getfield      #3                  // Field store:[I
      81: iconst_0
      82: iaload
      83: iload_2
      84: if_icmpge     91
      87: aload_0
      88: invokespecial #22                 // Method setStoreEmpty:()V
      91: return

  public void clear();
    Code:
       0: aload_0
       1: getfield      #4                  // Field complement:Z
       4: ifeq          27
       7: aload_0
       8: invokevirtual #8                  // Method domainSize:()I
      11: iconst_1
      12: if_icmple     19
      15: invokestatic  #18                 // Method unsupportedOperation:()Ljava/lang/UnsupportedOperationException;
      18: athrow
      19: aload_0
      20: iconst_0
      21: invokespecial #17                 // Method setStoreValue:(I)V
      24: goto          31
      27: aload_0
      28: invokespecial #22                 // Method setStoreEmpty:()V
      31: return

  public de.tum.in.naturals.set.BoundedMutableSingletonNatBitSet clone();
    Code:
       0: aload_0
       1: invokespecial #25                 // Method de/tum/in/naturals/set/AbstractBoundedNatBitSet.clone:()Lde/tum/in/naturals/set/AbstractBoundedNatBitSet;
       4: checkcast     #5                  // class de/tum/in/naturals/set/BoundedMutableSingletonNatBitSet
       7: areturn

  public de.tum.in.naturals.set.BoundedNatBitSet complement();
    Code:
       0: aload_0
       1: getfield      #7                  // Field complementView:Lde/tum/in/naturals/set/BoundedMutableSingletonNatBitSet;
       4: areturn

  public boolean contains(int);
    Code:
       0: iload_1
       1: iflt          38
       4: aload_0
       5: getfield      #4                  // Field complement:Z
       8: ifeq          24
      11: aload_0
      12: getfield      #3                  // Field store:[I
      15: iconst_0
      16: iaload
      17: iload_1
      18: if_icmpeq     38
      21: goto          34
      24: aload_0
      25: getfield      #3                  // Field store:[I
      28: iconst_0
      29: iaload
      30: iload_1
      31: if_icmpne     38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: ireturn

  public int firstInt();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method isEmpty:()Z
       4: ifeq          15
       7: new           #26                 // class java/util/NoSuchElementException
      10: dup
      11: invokespecial #27                 // Method java/util/NoSuchElementException."<init>":()V
      14: athrow
      15: aload_0
      16: getfield      #4                  // Field complement:Z
      19: ifeq          37
      22: aload_0
      23: getfield      #3                  // Field store:[I
      26: iconst_0
      27: iaload
      28: ifne          35
      31: iconst_1
      32: goto          36
      35: iconst_0
      36: ireturn
      37: aload_0
      38: getfield      #3                  // Field store:[I
      41: iconst_0
      42: iaload
      43: ireturn

  public void flip(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #15                 // Method checkInDomain:(I)V
       5: iload_1
       6: aload_0
       7: getfield      #3                  // Field store:[I
      10: iconst_0
      11: iaload
      12: if_icmpne     22
      15: aload_0
      16: invokespecial #22                 // Method setStoreEmpty:()V
      19: goto          41
      22: aload_0
      23: invokespecial #16                 // Method isStoreEmpty:()Z
      26: ifeq          37
      29: aload_0
      30: iload_1
      31: invokespecial #17                 // Method setStoreValue:(I)V
      34: goto          41
      37: invokestatic  #18                 // Method unsupportedOperation:()Ljava/lang/UnsupportedOperationException;
      40: athrow
      41: return

  public void flip(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #23                 // Method checkInDomain:(II)V
       6: iload_1
       7: iload_2
       8: if_icmpne     12
      11: return
      12: iload_1
      13: iconst_1
      14: iadd
      15: iload_2
      16: if_icmpeq     23
      19: invokestatic  #18                 // Method unsupportedOperation:()Ljava/lang/UnsupportedOperationException;
      22: athrow
      23: aload_0
      24: iload_1
      25: invokevirtual #28                 // Method flip:(I)V
      28: return

  boolean isComplement();
    Code:
       0: aload_0
       1: getfield      #4                  // Field complement:Z
       4: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #4                  // Field complement:Z
       4: ifeq          30
       7: aload_0
       8: invokevirtual #8                  // Method domainSize:()I
      11: iconst_1
      12: if_icmpne     26
      15: aload_0
      16: invokespecial #16                 // Method isStoreEmpty:()Z
      19: ifne          26
      22: iconst_1
      23: goto          34
      26: iconst_0
      27: goto          34
      30: aload_0
      31: invokespecial #16                 // Method isStoreEmpty:()Z
      34: ireturn

  private boolean isStoreEmpty();
    Code:
       0: aload_0
       1: getfield      #3                  // Field store:[I
       4: iconst_0
       5: iaload
       6: ldc           #11                 // int -2147483648
       8: if_icmpne     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public it.unimi.dsi.fastutil.ints.IntIterator iterator();
    Code:
       0: aload_0
       1: invokespecial #16                 // Method isStoreEmpty:()Z
       4: ifeq          29
       7: aload_0
       8: getfield      #4                  // Field complement:Z
      11: ifeq          25
      14: iconst_0
      15: aload_0
      16: invokevirtual #8                  // Method domainSize:()I
      19: invokestatic  #29                 // Method it/unimi/dsi/fastutil/ints/IntIterators.fromTo:(II)Lit/unimi/dsi/fastutil/ints/IntListIterator;
      22: goto          28
      25: getstatic     #30                 // Field it/unimi/dsi/fastutil/ints/IntIterators.EMPTY_ITERATOR:Lit/unimi/dsi/fastutil/ints/IntIterators$EmptyIterator;
      28: areturn
      29: aload_0
      30: getfield      #4                  // Field complement:Z
      33: ifeq          79
      36: iconst_0
      37: aload_0
      38: getfield      #3                  // Field store:[I
      41: iconst_0
      42: iaload
      43: invokestatic  #29                 // Method it/unimi/dsi/fastutil/ints/IntIterators.fromTo:(II)Lit/unimi/dsi/fastutil/ints/IntListIterator;
      46: astore_1
      47: aload_0
      48: getfield      #3                  // Field store:[I
      51: iconst_0
      52: iaload
      53: iconst_1
      54: iadd
      55: aload_0
      56: invokevirtual #8                  // Method domainSize:()I
      59: invokestatic  #29                 // Method it/unimi/dsi/fastutil/ints/IntIterators.fromTo:(II)Lit/unimi/dsi/fastutil/ints/IntListIterator;
      62: astore_2
      63: iconst_2
      64: anewarray     #31                 // class it/unimi/dsi/fastutil/ints/IntIterator
      67: dup
      68: iconst_0
      69: aload_1
      70: aastore
      71: dup
      72: iconst_1
      73: aload_2
      74: aastore
      75: invokestatic  #32                 // Method it/unimi/dsi/fastutil/ints/IntIterators.concat:([Lit/unimi/dsi/fastutil/ints/IntIterator;)Lit/unimi/dsi/fastutil/ints/IntIterator;
      78: areturn
      79: aload_0
      80: getfield      #3                  // Field store:[I
      83: iconst_0
      84: iaload
      85: invokestatic  #33                 // Method it/unimi/dsi/fastutil/ints/IntIterators.singleton:(I)Lit/unimi/dsi/fastutil/ints/IntListIterator;
      88: areturn

  public int lastInt();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method isEmpty:()Z
       4: ifeq          15
       7: new           #26                 // class java/util/NoSuchElementException
      10: dup
      11: invokespecial #27                 // Method java/util/NoSuchElementException."<init>":()V
      14: athrow
      15: aload_0
      16: getfield      #4                  // Field complement:Z
      19: ifeq          47
      22: aload_0
      23: invokevirtual #8                  // Method domainSize:()I
      26: istore_1
      27: iload_1
      28: aload_0
      29: getfield      #3                  // Field store:[I
      32: iconst_0
      33: iaload
      34: iload_1
      35: iconst_1
      36: isub
      37: if_icmpne     44
      40: iconst_2
      41: goto          45
      44: iconst_1
      45: isub
      46: ireturn
      47: aload_0
      48: getfield      #3                  // Field store:[I
      51: iconst_0
      52: iaload
      53: ireturn

  public int nextAbsentIndex(int);
    Code:
       0: iload_1
       1: invokestatic  #10                 // Method de/tum/in/naturals/set/NatBitSetsUtil.checkNonNegative:(I)V
       4: aload_0
       5: getfield      #4                  // Field complement:Z
       8: ifeq          35
      11: iload_1
      12: aload_0
      13: getfield      #3                  // Field store:[I
      16: iconst_0
      17: iaload
      18: if_icmpgt     30
      21: aload_0
      22: getfield      #3                  // Field store:[I
      25: iconst_0
      26: iaload
      27: goto          34
      30: aload_0
      31: invokevirtual #8                  // Method domainSize:()I
      34: ireturn
      35: aload_0
      36: invokevirtual #24                 // Method isEmpty:()Z
      39: ifne          63
      42: iload_1
      43: aload_0
      44: getfield      #3                  // Field store:[I
      47: iconst_0
      48: iaload
      49: if_icmpne     63
      52: aload_0
      53: getfield      #3                  // Field store:[I
      56: iconst_0
      57: iaload
      58: iconst_1
      59: iadd
      60: goto          64
      63: iload_1
      64: ireturn

  public int nextPresentIndex(int);
    Code:
       0: iload_1
       1: invokestatic  #10                 // Method de/tum/in/naturals/set/NatBitSetsUtil.checkNonNegative:(I)V
       4: aload_0
       5: invokevirtual #24                 // Method isEmpty:()Z
       8: ifeq          13
      11: iconst_m1
      12: ireturn
      13: aload_0
      14: invokevirtual #8                  // Method domainSize:()I
      17: iload_1
      18: if_icmpgt     23
      21: iconst_m1
      22: ireturn
      23: aload_0
      24: getfield      #4                  // Field complement:Z
      27: ifeq          48
      30: iload_1
      31: aload_0
      32: getfield      #3                  // Field store:[I
      35: iconst_0
      36: iaload
      37: if_icmpne     46
      40: iload_1
      41: iconst_1
      42: iadd
      43: goto          47
      46: iload_1
      47: ireturn
      48: iload_1
      49: aload_0
      50: getfield      #3                  // Field store:[I
      53: iconst_0
      54: iaload
      55: if_icmpgt     67
      58: aload_0
      59: getfield      #3                  // Field store:[I
      62: iconst_0
      63: iaload
      64: goto          68
      67: iconst_m1
      68: ireturn

  public int previousAbsentIndex(int);
    Code:
       0: iload_1
       1: invokestatic  #10                 // Method de/tum/in/naturals/set/NatBitSetsUtil.checkNonNegative:(I)V
       4: aload_0
       5: invokevirtual #24                 // Method isEmpty:()Z
       8: ifeq          13
      11: iload_1
      12: ireturn
      13: aload_0
      14: getfield      #4                  // Field complement:Z
      17: ifeq          41
      20: iload_1
      21: aload_0
      22: getfield      #3                  // Field store:[I
      25: iconst_0
      26: iaload
      27: if_icmplt     39
      30: aload_0
      31: getfield      #3                  // Field store:[I
      34: iconst_0
      35: iaload
      36: goto          40
      39: iconst_m1
      40: ireturn
      41: iload_1
      42: aload_0
      43: getfield      #3                  // Field store:[I
      46: iconst_0
      47: iaload
      48: if_icmpne     62
      51: aload_0
      52: getfield      #3                  // Field store:[I
      55: iconst_0
      56: iaload
      57: iconst_1
      58: isub
      59: goto          63
      62: iload_1
      63: ireturn

  public int previousPresentIndex(int);
    Code:
       0: iload_1
       1: invokestatic  #10                 // Method de/tum/in/naturals/set/NatBitSetsUtil.checkNonNegative:(I)V
       4: aload_0
       5: invokevirtual #24                 // Method isEmpty:()Z
       8: ifeq          13
      11: iconst_m1
      12: ireturn
      13: aload_0
      14: getfield      #4                  // Field complement:Z
      17: ifeq          43
      20: iload_1
      21: aload_0
      22: getfield      #3                  // Field store:[I
      25: iconst_0
      26: iaload
      27: if_icmpne     41
      30: aload_0
      31: getfield      #3                  // Field store:[I
      34: iconst_0
      35: iaload
      36: iconst_1
      37: isub
      38: goto          42
      41: iload_1
      42: ireturn
      43: iload_1
      44: aload_0
      45: getfield      #3                  // Field store:[I
      48: iconst_0
      49: iaload
      50: if_icmplt     62
      53: aload_0
      54: getfield      #3                  // Field store:[I
      57: iconst_0
      58: iaload
      59: goto          63
      62: iconst_m1
      63: ireturn

  public it.unimi.dsi.fastutil.ints.IntIterator reverseIterator();
    Code:
       0: aload_0
       1: invokespecial #16                 // Method isStoreEmpty:()Z
       4: ifeq          33
       7: aload_0
       8: getfield      #4                  // Field complement:Z
      11: ifeq          29
      14: new           #34                 // class de/tum/in/naturals/set/ReverseRangeIterator
      17: dup
      18: iconst_0
      19: aload_0
      20: invokevirtual #8                  // Method domainSize:()I
      23: invokespecial #35                 // Method de/tum/in/naturals/set/ReverseRangeIterator."<init>":(II)V
      26: goto          32
      29: getstatic     #30                 // Field it/unimi/dsi/fastutil/ints/IntIterators.EMPTY_ITERATOR:Lit/unimi/dsi/fastutil/ints/IntIterators$EmptyIterator;
      32: areturn
      33: aload_0
      34: getfield      #4                  // Field complement:Z
      37: ifeq          91
      40: new           #34                 // class de/tum/in/naturals/set/ReverseRangeIterator
      43: dup
      44: aload_0
      45: getfield      #3                  // Field store:[I
      48: iconst_0
      49: iaload
      50: iconst_1
      51: iadd
      52: aload_0
      53: invokevirtual #8                  // Method domainSize:()I
      56: invokespecial #35                 // Method de/tum/in/naturals/set/ReverseRangeIterator."<init>":(II)V
      59: astore_1
      60: new           #34                 // class de/tum/in/naturals/set/ReverseRangeIterator
      63: dup
      64: iconst_0
      65: aload_0
      66: getfield      #3                  // Field store:[I
      69: iconst_0
      70: iaload
      71: invokespecial #35                 // Method de/tum/in/naturals/set/ReverseRangeIterator."<init>":(II)V
      74: astore_2
      75: iconst_2
      76: anewarray     #31                 // class it/unimi/dsi/fastutil/ints/IntIterator
      79: dup
      80: iconst_0
      81: aload_1
      82: aastore
      83: dup
      84: iconst_1
      85: aload_2
      86: aastore
      87: invokestatic  #32                 // Method it/unimi/dsi/fastutil/ints/IntIterators.concat:([Lit/unimi/dsi/fastutil/ints/IntIterator;)Lit/unimi/dsi/fastutil/ints/IntIterator;
      90: areturn
      91: aload_0
      92: getfield      #3                  // Field store:[I
      95: iconst_0
      96: iaload
      97: invokestatic  #33                 // Method it/unimi/dsi/fastutil/ints/IntIterators.singleton:(I)Lit/unimi/dsi/fastutil/ints/IntListIterator;
     100: areturn

  public void set(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #15                 // Method checkInDomain:(I)V
       5: aload_0
       6: getfield      #4                  // Field complement:Z
       9: ifeq          29
      12: iload_1
      13: aload_0
      14: getfield      #3                  // Field store:[I
      17: iconst_0
      18: iaload
      19: if_icmpne     60
      22: aload_0
      23: invokespecial #22                 // Method setStoreEmpty:()V
      26: goto          60
      29: aload_0
      30: invokespecial #16                 // Method isStoreEmpty:()Z
      33: ifeq          46
      36: aload_0
      37: getfield      #3                  // Field store:[I
      40: iconst_0
      41: iload_1
      42: iastore
      43: goto          60
      46: iload_1
      47: aload_0
      48: getfield      #3                  // Field store:[I
      51: iconst_0
      52: iaload
      53: if_icmpeq     60
      56: invokestatic  #18                 // Method unsupportedOperation:()Ljava/lang/UnsupportedOperationException;
      59: athrow
      60: return

  public void set(int, boolean);
    Code:
       0: iload_2
       1: ifeq          12
       4: aload_0
       5: iload_1
       6: invokevirtual #36                 // Method set:(I)V
       9: goto          17
      12: aload_0
      13: iload_1
      14: invokevirtual #37                 // Method clear:(I)V
      17: return

  public void set(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #23                 // Method checkInDomain:(II)V
       6: iload_1
       7: iload_2
       8: if_icmpne     12
      11: return
      12: iload_1
      13: iconst_1
      14: iadd
      15: iload_2
      16: if_icmpeq     23
      19: invokestatic  #18                 // Method unsupportedOperation:()Ljava/lang/UnsupportedOperationException;
      22: athrow
      23: aload_0
      24: iload_1
      25: invokevirtual #36                 // Method set:(I)V
      28: return

  private void setStoreEmpty();
    Code:
       0: aload_0
       1: getfield      #3                  // Field store:[I
       4: iconst_0
       5: ldc           #11                 // int -2147483648
       7: iastore
       8: return

  private void setStoreValue(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          25
       6: iload_1
       7: iflt          17
      10: aload_0
      11: invokevirtual #24                 // Method isEmpty:()Z
      14: ifne          25
      17: new           #20                 // class java/lang/AssertionError
      20: dup
      21: invokespecial #21                 // Method java/lang/AssertionError."<init>":()V
      24: athrow
      25: aload_0
      26: getfield      #3                  // Field store:[I
      29: iconst_0
      30: iload_1
      31: iastore
      32: return

  public int size();
    Code:
       0: aload_0
       1: getfield      #4                  // Field complement:Z
       4: ifeq          28
       7: aload_0
       8: invokespecial #16                 // Method isStoreEmpty:()Z
      11: ifeq          21
      14: aload_0
      15: invokevirtual #8                  // Method domainSize:()I
      18: goto          27
      21: aload_0
      22: invokevirtual #8                  // Method domainSize:()I
      25: iconst_1
      26: isub
      27: ireturn
      28: aload_0
      29: invokespecial #16                 // Method isStoreEmpty:()Z
      32: ifeq          39
      35: iconst_0
      36: goto          40
      39: iconst_1
      40: ireturn

  public de.tum.in.naturals.set.AbstractBoundedNatBitSet clone();
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method clone:()Lde/tum/in/naturals/set/BoundedMutableSingletonNatBitSet;
       4: areturn

  public de.tum.in.naturals.set.BoundedNatBitSet clone();
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method clone:()Lde/tum/in/naturals/set/BoundedMutableSingletonNatBitSet;
       4: areturn

  public de.tum.in.naturals.set.NatBitSet clone();
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method clone:()Lde/tum/in/naturals/set/BoundedMutableSingletonNatBitSet;
       4: areturn

  public java.util.Iterator iterator();
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method iterator:()Lit/unimi/dsi/fastutil/ints/IntIterator;
       4: areturn

  public de.tum.in.naturals.set.AbstractNatBitSet clone();
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method clone:()Lde/tum/in/naturals/set/BoundedMutableSingletonNatBitSet;
       4: areturn

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method clone:()Lde/tum/in/naturals/set/BoundedMutableSingletonNatBitSet;
       4: areturn

  static {};
    Code:
       0: ldc           #5                  // class de/tum/in/naturals/set/BoundedMutableSingletonNatBitSet
       2: invokevirtual #40                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #19                 // Field $assertionsDisabled:Z
      16: return
}
