Compiled from "ApiResult.kt"
public final class love.forte.simbot.kaiheila.api.RateLimit {
  public static final love.forte.simbot.kaiheila.api.RateLimit$Companion Companion;

  private final long limit;

  private final long remaining;

  private final long reset;

  private final java.lang.String bucket;

  private final boolean isGlobalLimit;

  public static final java.lang.String X_RATE_LIMIT_LIMIT;

  public static final java.lang.String X_RATE_LIMIT_REMAINING;

  public static final java.lang.String X_RATE_LIMIT_RESET;

  public static final java.lang.String X_RATE_LIMIT_BUCKET;

  public static final java.lang.String X_RATE_LIMIT_GLOBAL;

  private static final love.forte.simbot.kaiheila.api.RateLimit DEFAULT;

  public love.forte.simbot.kaiheila.api.RateLimit(long, long, long, java.lang.String, boolean);
    Code:
       0: aload         7
       2: ldc           #13                 // String bucket
       4: invokestatic  #19                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       7: aload_0
       8: invokespecial #22                 // Method java/lang/Object."<init>":()V
      11: aload_0
      12: lload_1
      13: putfield      #25                 // Field limit:J
      16: aload_0
      17: lload_3
      18: putfield      #27                 // Field remaining:J
      21: aload_0
      22: lload         5
      24: putfield      #29                 // Field reset:J
      27: aload_0
      28: aload         7
      30: putfield      #32                 // Field bucket:Ljava/lang/String;
      33: aload_0
      34: iload         8
      36: putfield      #35                 // Field isGlobalLimit:Z
      39: return

  public final long getLimit();
    Code:
       0: aload_0
       1: getfield      #25                 // Field limit:J
       4: lreturn

  public final long getRemaining();
    Code:
       0: aload_0
       1: getfield      #27                 // Field remaining:J
       4: lreturn

  public final long getReset();
    Code:
       0: aload_0
       1: getfield      #29                 // Field reset:J
       4: lreturn

  public final java.lang.String getBucket();
    Code:
       0: aload_0
       1: getfield      #32                 // Field bucket:Ljava/lang/String;
       4: areturn

  public final boolean isGlobalLimit();
    Code:
       0: aload_0
       1: getfield      #35                 // Field isGlobalLimit:Z
       4: ireturn

  public final long component1();
    Code:
       0: aload_0
       1: getfield      #25                 // Field limit:J
       4: lreturn

  public final long component2();
    Code:
       0: aload_0
       1: getfield      #27                 // Field remaining:J
       4: lreturn

  public final long component3();
    Code:
       0: aload_0
       1: getfield      #29                 // Field reset:J
       4: lreturn

  public final java.lang.String component4();
    Code:
       0: aload_0
       1: getfield      #32                 // Field bucket:Ljava/lang/String;
       4: areturn

  public final boolean component5();
    Code:
       0: aload_0
       1: getfield      #35                 // Field isGlobalLimit:Z
       4: ireturn

  public final love.forte.simbot.kaiheila.api.RateLimit copy(long, long, long, java.lang.String, boolean);
    Code:
       0: aload         7
       2: ldc           #13                 // String bucket
       4: invokestatic  #19                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       7: new           #2                  // class love/forte/simbot/kaiheila/api/RateLimit
      10: dup
      11: lload_1
      12: lload_3
      13: lload         5
      15: aload         7
      17: iload         8
      19: invokespecial #53                 // Method "<init>":(JJJLjava/lang/String;Z)V
      22: areturn

  public static love.forte.simbot.kaiheila.api.RateLimit copy$default(love.forte.simbot.kaiheila.api.RateLimit, long, long, long, java.lang.String, boolean, int, java.lang.Object);
    Code:
       0: iload         9
       2: iconst_1
       3: iand
       4: ifeq          12
       7: aload_0
       8: getfield      #25                 // Field limit:J
      11: lstore_1
      12: iload         9
      14: iconst_2
      15: iand
      16: ifeq          24
      19: aload_0
      20: getfield      #27                 // Field remaining:J
      23: lstore_3
      24: iload         9
      26: iconst_4
      27: iand
      28: ifeq          37
      31: aload_0
      32: getfield      #29                 // Field reset:J
      35: lstore        5
      37: iload         9
      39: bipush        8
      41: iand
      42: ifeq          51
      45: aload_0
      46: getfield      #32                 // Field bucket:Ljava/lang/String;
      49: astore        7
      51: iload         9
      53: bipush        16
      55: iand
      56: ifeq          65
      59: aload_0
      60: getfield      #35                 // Field isGlobalLimit:Z
      63: istore        8
      65: aload_0
      66: lload_1
      67: lload_3
      68: lload         5
      70: aload         7
      72: iload         8
      74: invokevirtual #57                 // Method copy:(JJJLjava/lang/String;Z)Llove/forte/simbot/kaiheila/api/RateLimit;
      77: areturn

  public java.lang.String toString();
    Code:
       0: new           #60                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #61                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #63                 // String RateLimit(limit=
       9: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #25                 // Field limit:J
      16: invokevirtual #70                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      19: ldc           #72                 // String , remaining=
      21: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #27                 // Field remaining:J
      28: invokevirtual #70                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      31: ldc           #74                 // String , reset=
      33: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #29                 // Field reset:J
      40: invokevirtual #70                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      43: ldc           #76                 // String , bucket=
      45: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_0
      49: getfield      #32                 // Field bucket:Ljava/lang/String;
      52: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: ldc           #78                 // String , isGlobalLimit=
      57: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: aload_0
      61: getfield      #35                 // Field isGlobalLimit:Z
      64: invokevirtual #81                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      67: bipush        41
      69: invokevirtual #84                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      72: invokevirtual #86                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      75: areturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #25                 // Field limit:J
       4: invokestatic  #93                 // Method java/lang/Long.hashCode:(J)I
       7: istore_1
       8: iload_1
       9: bipush        31
      11: imul
      12: aload_0
      13: getfield      #27                 // Field remaining:J
      16: invokestatic  #93                 // Method java/lang/Long.hashCode:(J)I
      19: iadd
      20: istore_1
      21: iload_1
      22: bipush        31
      24: imul
      25: aload_0
      26: getfield      #29                 // Field reset:J
      29: invokestatic  #93                 // Method java/lang/Long.hashCode:(J)I
      32: iadd
      33: istore_1
      34: iload_1
      35: bipush        31
      37: imul
      38: aload_0
      39: getfield      #32                 // Field bucket:Ljava/lang/String;
      42: invokevirtual #97                 // Method java/lang/String.hashCode:()I
      45: iadd
      46: istore_1
      47: iload_1
      48: bipush        31
      50: imul
      51: aload_0
      52: getfield      #35                 // Field isGlobalLimit:Z
      55: dup
      56: ifeq          61
      59: pop
      60: iconst_1
      61: iadd
      62: istore_1
      63: iload_1
      64: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #2                  // class love/forte/simbot/kaiheila/api/RateLimit
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #2                  // class love/forte/simbot/kaiheila/api/RateLimit
      20: astore_2
      21: aload_0
      22: getfield      #25                 // Field limit:J
      25: aload_2
      26: getfield      #25                 // Field limit:J
      29: lcmp
      30: ifeq          35
      33: iconst_0
      34: ireturn
      35: aload_0
      36: getfield      #27                 // Field remaining:J
      39: aload_2
      40: getfield      #27                 // Field remaining:J
      43: lcmp
      44: ifeq          49
      47: iconst_0
      48: ireturn
      49: aload_0
      50: getfield      #29                 // Field reset:J
      53: aload_2
      54: getfield      #29                 // Field reset:J
      57: lcmp
      58: ifeq          63
      61: iconst_0
      62: ireturn
      63: aload_0
      64: getfield      #32                 // Field bucket:Ljava/lang/String;
      67: aload_2
      68: getfield      #32                 // Field bucket:Ljava/lang/String;
      71: invokestatic  #107                // Method kotlin/jvm/internal/Intrinsics.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z
      74: ifne          79
      77: iconst_0
      78: ireturn
      79: aload_0
      80: getfield      #35                 // Field isGlobalLimit:Z
      83: aload_2
      84: getfield      #35                 // Field isGlobalLimit:Z
      87: if_icmpeq     92
      90: iconst_0
      91: ireturn
      92: iconst_1
      93: ireturn

  public static final void write$Self(love.forte.simbot.kaiheila.api.RateLimit, kotlinx.serialization.encoding.CompositeEncoder, kotlinx.serialization.descriptors.SerialDescriptor);
    Code:
       0: aload_0
       1: ldc           #115                // String self
       3: invokestatic  #19                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #116                // String output
       9: invokestatic  #19                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_2
      13: ldc           #117                // String serialDesc
      15: invokestatic  #19                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
      18: aload_1
      19: aload_2
      20: iconst_0
      21: aload_0
      22: getfield      #25                 // Field limit:J
      25: invokeinterface #123,  5          // InterfaceMethod kotlinx/serialization/encoding/CompositeEncoder.encodeLongElement:(Lkotlinx/serialization/descriptors/SerialDescriptor;IJ)V
      30: aload_1
      31: aload_2
      32: iconst_1
      33: aload_0
      34: getfield      #27                 // Field remaining:J
      37: invokeinterface #123,  5          // InterfaceMethod kotlinx/serialization/encoding/CompositeEncoder.encodeLongElement:(Lkotlinx/serialization/descriptors/SerialDescriptor;IJ)V
      42: aload_1
      43: aload_2
      44: iconst_2
      45: aload_0
      46: getfield      #29                 // Field reset:J
      49: invokeinterface #123,  5          // InterfaceMethod kotlinx/serialization/encoding/CompositeEncoder.encodeLongElement:(Lkotlinx/serialization/descriptors/SerialDescriptor;IJ)V
      54: aload_1
      55: aload_2
      56: iconst_3
      57: aload_0
      58: getfield      #32                 // Field bucket:Ljava/lang/String;
      61: invokeinterface #127,  4          // InterfaceMethod kotlinx/serialization/encoding/CompositeEncoder.encodeStringElement:(Lkotlinx/serialization/descriptors/SerialDescriptor;ILjava/lang/String;)V
      66: aload_1
      67: aload_2
      68: iconst_4
      69: aload_0
      70: getfield      #35                 // Field isGlobalLimit:Z
      73: invokeinterface #131,  4          // InterfaceMethod kotlinx/serialization/encoding/CompositeEncoder.encodeBooleanElement:(Lkotlinx/serialization/descriptors/SerialDescriptor;IZ)V
      78: return

  public love.forte.simbot.kaiheila.api.RateLimit(int, long, long, long, java.lang.String, boolean, kotlinx.serialization.internal.SerializationConstructorMarker);
    Code:
       0: bipush        31
       2: bipush        31
       4: iload_1
       5: iand
       6: if_icmpeq     21
       9: iload_1
      10: bipush        31
      12: getstatic     #151                // Field love/forte/simbot/kaiheila/api/RateLimit$$serializer.INSTANCE:Llove/forte/simbot/kaiheila/api/RateLimit$$serializer;
      15: invokevirtual #155                // Method love/forte/simbot/kaiheila/api/RateLimit$$serializer.getDescriptor:()Lkotlinx/serialization/descriptors/SerialDescriptor;
      18: invokestatic  #161                // Method kotlinx/serialization/internal/PluginExceptionsKt.throwMissingFieldException:(IILkotlinx/serialization/descriptors/SerialDescriptor;)V
      21: aload_0
      22: invokespecial #22                 // Method java/lang/Object."<init>":()V
      25: aload_0
      26: lload_2
      27: putfield      #25                 // Field limit:J
      30: aload_0
      31: lload         4
      33: putfield      #27                 // Field remaining:J
      36: aload_0
      37: lload         6
      39: putfield      #29                 // Field reset:J
      42: aload_0
      43: aload         8
      45: putfield      #32                 // Field bucket:Ljava/lang/String;
      48: aload_0
      49: iload         9
      51: putfield      #35                 // Field isGlobalLimit:Z
      54: return

  public static final love.forte.simbot.kaiheila.api.RateLimit access$getDEFAULT$cp();
    Code:
       0: getstatic     #169                // Field DEFAULT:Llove/forte/simbot/kaiheila/api/RateLimit;
       3: areturn

  static {};
    Code:
       0: new           #172                // class love/forte/simbot/kaiheila/api/RateLimit$Companion
       3: dup
       4: aconst_null
       5: invokespecial #175                // Method love/forte/simbot/kaiheila/api/RateLimit$Companion."<init>":(Lkotlin/jvm/internal/DefaultConstructorMarker;)V
       8: putstatic     #179                // Field Companion:Llove/forte/simbot/kaiheila/api/RateLimit$Companion;
      11: new           #2                  // class love/forte/simbot/kaiheila/api/RateLimit
      14: dup
      15: ldc2_w        #180                // long 99999l
      18: ldc2_w        #180                // long 99999l
      21: lconst_0
      22: ldc           #183                // String default/not-init
      24: iconst_0
      25: invokespecial #53                 // Method "<init>":(JJJLjava/lang/String;Z)V
      28: putstatic     #169                // Field DEFAULT:Llove/forte/simbot/kaiheila/api/RateLimit;
      31: return
}
