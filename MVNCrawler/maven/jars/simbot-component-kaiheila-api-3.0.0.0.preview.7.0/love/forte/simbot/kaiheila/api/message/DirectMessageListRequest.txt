Compiled from "DirectMessageListRequest.kt"
public final class love.forte.simbot.kaiheila.api.message.DirectMessageListRequest extends love.forte.simbot.kaiheila.api.KaiheilaGetRequest<love.forte.simbot.kaiheila.api.KaiheilaApiResult$ListData<? extends love.forte.simbot.kaiheila.api.message.DirectMessageDetails>> {
  public static final love.forte.simbot.kaiheila.api.message.DirectMessageListRequest$Key Key;

  private final love.forte.simbot.ID chatCode;

  private final love.forte.simbot.ID targetId;

  private final love.forte.simbot.ID msgId;

  private final love.forte.simbot.kaiheila.api.message.MessageListFlag flag;

  private love.forte.simbot.kaiheila.api.message.DirectMessageListRequest(love.forte.simbot.ID, love.forte.simbot.ID, love.forte.simbot.ID, love.forte.simbot.kaiheila.api.message.MessageListFlag);
    Code:
       0: aload_0
       1: invokespecial #14                 // Method love/forte/simbot/kaiheila/api/KaiheilaGetRequest."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #17                 // Field chatCode:Llove/forte/simbot/ID;
       9: aload_0
      10: aload_2
      11: putfield      #19                 // Field targetId:Llove/forte/simbot/ID;
      14: aload_0
      15: aload_3
      16: putfield      #21                 // Field msgId:Llove/forte/simbot/ID;
      19: aload_0
      20: aload         4
      22: putfield      #24                 // Field flag:Llove/forte/simbot/kaiheila/api/message/MessageListFlag;
      25: return

  love.forte.simbot.kaiheila.api.message.DirectMessageListRequest(love.forte.simbot.ID, love.forte.simbot.ID, love.forte.simbot.ID, love.forte.simbot.kaiheila.api.message.MessageListFlag, int, kotlin.jvm.internal.DefaultConstructorMarker);
    Code:
       0: iload         5
       2: iconst_4
       3: iand
       4: ifeq          9
       7: aconst_null
       8: astore_3
       9: iload         5
      11: bipush        8
      13: iand
      14: ifeq          20
      17: aconst_null
      18: astore        4
      20: aload_0
      21: aload_1
      22: aload_2
      23: aload_3
      24: aload         4
      26: invokespecial #29                 // Method "<init>":(Llove/forte/simbot/ID;Llove/forte/simbot/ID;Llove/forte/simbot/ID;Llove/forte/simbot/kaiheila/api/message/MessageListFlag;)V
      29: return

  public kotlinx.serialization.DeserializationStrategy<? extends love.forte.simbot.kaiheila.api.KaiheilaApiResult$ListData<love.forte.simbot.kaiheila.api.message.DirectMessageDetails>> getResultDeserializer();
    Code:
       0: getstatic     #39                 // Field love/forte/simbot/kaiheila/api/KaiheilaApiResult$ListData.Companion:Llove/forte/simbot/kaiheila/api/KaiheilaApiResult$ListData$Companion;
       3: getstatic     #44                 // Field love/forte/simbot/kaiheila/api/message/DirectMessageDetails.Companion:Llove/forte/simbot/kaiheila/api/message/DirectMessageDetails$Companion;
       6: invokevirtual #50                 // Method love/forte/simbot/kaiheila/api/message/DirectMessageDetails$Companion.getSerializer:()Lkotlinx/serialization/KSerializer;
       9: invokevirtual #56                 // Method love/forte/simbot/kaiheila/api/KaiheilaApiResult$ListData$Companion.serializer:(Lkotlinx/serialization/KSerializer;)Lkotlinx/serialization/KSerializer;
      12: checkcast     #58                 // class kotlinx/serialization/DeserializationStrategy
      15: areturn

  protected java.util.List<java.lang.String> getApiPaths();
    Code:
       0: getstatic     #65                 // Field Key:Llove/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key;
       3: invokevirtual #70                 // Method love/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key.getApiPathList:()Ljava/util/List;
       6: areturn

  protected void buildParameters(io.ktor.http.ParametersBuilder);
    Code:
       0: aload_1
       1: ldc           #75                 // String <this>
       3: invokestatic  #81                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: astore_2
       8: ldc           #83                 // String chat_code
      10: astore_3
      11: aload_0
      12: getfield      #17                 // Field chatCode:Llove/forte/simbot/ID;
      15: astore        4
      17: iconst_0
      18: istore        6
      20: aload         4
      22: dup
      23: ifnonnull     30
      26: pop
      27: goto          69
      30: astore        8
      32: iconst_0
      33: istore        9
      35: aload_2
      36: aload_3
      37: aload         8
      39: astore        10
      41: astore        12
      43: astore        11
      45: aload         10
      47: astore        10
      49: aload         10
      51: invokestatic  #89                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      54: astore        13
      56: aload         11
      58: aload         12
      60: aload         13
      62: invokeinterface #95,  3           // InterfaceMethod io/ktor/http/ParametersBuilder.append:(Ljava/lang/String;Ljava/lang/String;)V
      67: nop
      68: nop
      69: nop
      70: aload_1
      71: astore_2
      72: ldc           #97                 // String target_id
      74: astore_3
      75: aload_0
      76: getfield      #19                 // Field targetId:Llove/forte/simbot/ID;
      79: astore        4
      81: iconst_0
      82: istore        6
      84: aload         4
      86: dup
      87: ifnonnull     94
      90: pop
      91: goto          133
      94: astore        8
      96: iconst_0
      97: istore        9
      99: aload_2
     100: aload_3
     101: aload         8
     103: astore        10
     105: astore        12
     107: astore        11
     109: aload         10
     111: astore        10
     113: aload         10
     115: invokestatic  #89                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
     118: astore        13
     120: aload         11
     122: aload         12
     124: aload         13
     126: invokeinterface #95,  3           // InterfaceMethod io/ktor/http/ParametersBuilder.append:(Ljava/lang/String;Ljava/lang/String;)V
     131: nop
     132: nop
     133: nop
     134: aload_1
     135: astore_2
     136: ldc           #99                 // String msg_id
     138: astore_3
     139: aload_0
     140: getfield      #21                 // Field msgId:Llove/forte/simbot/ID;
     143: astore        4
     145: iconst_0
     146: istore        6
     148: aload         4
     150: dup
     151: ifnonnull     158
     154: pop
     155: goto          197
     158: astore        8
     160: iconst_0
     161: istore        9
     163: aload_2
     164: aload_3
     165: aload         8
     167: astore        10
     169: astore        12
     171: astore        11
     173: aload         10
     175: astore        10
     177: aload         10
     179: invokestatic  #89                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
     182: astore        13
     184: aload         11
     186: aload         12
     188: aload         13
     190: invokeinterface #95,  3           // InterfaceMethod io/ktor/http/ParametersBuilder.append:(Ljava/lang/String;Ljava/lang/String;)V
     195: nop
     196: nop
     197: nop
     198: aload_1
     199: astore_2
     200: ldc           #100                // String flag
     202: astore_3
     203: aload_0
     204: getfield      #24                 // Field flag:Llove/forte/simbot/kaiheila/api/message/MessageListFlag;
     207: astore        4
     209: iconst_0
     210: istore        5
     212: aload         4
     214: dup
     215: ifnonnull     222
     218: pop
     219: goto          273
     222: astore        7
     224: iconst_0
     225: istore        8
     227: aload_2
     228: aload_3
     229: aload         7
     231: astore        9
     233: astore        12
     235: astore        11
     237: iconst_0
     238: istore        10
     240: aload         9
     242: invokevirtual #106                // Method love/forte/simbot/kaiheila/api/message/MessageListFlag.name:()Ljava/lang/String;
     245: getstatic     #112                // Field java/util/Locale.ROOT:Ljava/util/Locale;
     248: invokevirtual #116                // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
     251: dup
     252: ldc           #118                // String this as java.lang.String).toLowerCase(Locale.ROOT)
     254: invokestatic  #121                // Method kotlin/jvm/internal/Intrinsics.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V
     257: nop
     258: astore        13
     260: aload         11
     262: aload         12
     264: aload         13
     266: invokeinterface #95,  3           // InterfaceMethod io/ktor/http/ParametersBuilder.append:(Ljava/lang/String;Ljava/lang/String;)V
     271: nop
     272: nop
     273: nop
     274: return

  public static final love.forte.simbot.kaiheila.api.message.DirectMessageListRequest getInstanceByChatCode(love.forte.simbot.ID, love.forte.simbot.ID, love.forte.simbot.kaiheila.api.message.MessageListFlag);
    Code:
       0: getstatic     #65                 // Field Key:Llove/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #144                // Method love/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key.getInstanceByChatCode:(Llove/forte/simbot/ID;Llove/forte/simbot/ID;Llove/forte/simbot/kaiheila/api/message/MessageListFlag;)Llove/forte/simbot/kaiheila/api/message/DirectMessageListRequest;
       9: areturn

  public static final love.forte.simbot.kaiheila.api.message.DirectMessageListRequest getInstanceByTargetId(love.forte.simbot.ID, love.forte.simbot.ID, love.forte.simbot.kaiheila.api.message.MessageListFlag);
    Code:
       0: getstatic     #65                 // Field Key:Llove/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #147                // Method love/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key.getInstanceByTargetId:(Llove/forte/simbot/ID;Llove/forte/simbot/ID;Llove/forte/simbot/kaiheila/api/message/MessageListFlag;)Llove/forte/simbot/kaiheila/api/message/DirectMessageListRequest;
       9: areturn

  public static final love.forte.simbot.kaiheila.api.message.DirectMessageListRequest getInstanceByChatCode(love.forte.simbot.ID, love.forte.simbot.ID);
    Code:
       0: getstatic     #65                 // Field Key:Llove/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key;
       3: aload_0
       4: aload_1
       5: invokevirtual #150                // Method love/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key.getInstanceByChatCode:(Llove/forte/simbot/ID;Llove/forte/simbot/ID;)Llove/forte/simbot/kaiheila/api/message/DirectMessageListRequest;
       8: areturn

  public static final love.forte.simbot.kaiheila.api.message.DirectMessageListRequest getInstanceByChatCode(love.forte.simbot.ID);
    Code:
       0: getstatic     #65                 // Field Key:Llove/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key;
       3: aload_0
       4: invokevirtual #153                // Method love/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key.getInstanceByChatCode:(Llove/forte/simbot/ID;)Llove/forte/simbot/kaiheila/api/message/DirectMessageListRequest;
       7: areturn

  public static final love.forte.simbot.kaiheila.api.message.DirectMessageListRequest getInstanceByTargetId(love.forte.simbot.ID, love.forte.simbot.ID);
    Code:
       0: getstatic     #65                 // Field Key:Llove/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key;
       3: aload_0
       4: aload_1
       5: invokevirtual #155                // Method love/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key.getInstanceByTargetId:(Llove/forte/simbot/ID;Llove/forte/simbot/ID;)Llove/forte/simbot/kaiheila/api/message/DirectMessageListRequest;
       8: areturn

  public static final love.forte.simbot.kaiheila.api.message.DirectMessageListRequest getInstanceByTargetId(love.forte.simbot.ID);
    Code:
       0: getstatic     #65                 // Field Key:Llove/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key;
       3: aload_0
       4: invokevirtual #157                // Method love/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key.getInstanceByTargetId:(Llove/forte/simbot/ID;)Llove/forte/simbot/kaiheila/api/message/DirectMessageListRequest;
       7: areturn

  public love.forte.simbot.kaiheila.api.message.DirectMessageListRequest(love.forte.simbot.ID, love.forte.simbot.ID, love.forte.simbot.ID, love.forte.simbot.kaiheila.api.message.MessageListFlag, kotlin.jvm.internal.DefaultConstructorMarker);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokespecial #29                 // Method "<init>":(Llove/forte/simbot/ID;Llove/forte/simbot/ID;Llove/forte/simbot/ID;Llove/forte/simbot/kaiheila/api/message/MessageListFlag;)V
       9: return

  static {};
    Code:
       0: new           #67                 // class love/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key
       3: dup
       4: aconst_null
       5: invokespecial #164                // Method love/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key."<init>":(Lkotlin/jvm/internal/DefaultConstructorMarker;)V
       8: putstatic     #65                 // Field Key:Llove/forte/simbot/kaiheila/api/message/DirectMessageListRequest$Key;
      11: return
}
