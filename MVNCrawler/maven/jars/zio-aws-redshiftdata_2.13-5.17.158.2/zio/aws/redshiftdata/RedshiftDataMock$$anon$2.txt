Compiled from "RedshiftDataMock.scala"
public final class zio.aws.redshiftdata.RedshiftDataMock$$anon$2 implements zio.aws.redshiftdata.RedshiftData {
  private final software.amazon.awssdk.services.redshiftdata.RedshiftDataAsyncClient api;

  private final zio.Runtime rts$1;

  private final zio.mock.Proxy proxy$1;

  public software.amazon.awssdk.services.redshiftdata.RedshiftDataAsyncClient api();
    Code:
       0: aload_0
       1: getfield      #130                // Field api:Lsoftware/amazon/awssdk/services/redshiftdata/RedshiftDataAsyncClient;
       4: areturn

  public <R1> zio.aws.redshiftdata.RedshiftData withAspect(zio.ZIOAspect<scala.runtime.Nothing$, R1, zio.aws.core.AwsError, zio.aws.core.AwsError, scala.runtime.Nothing$, zio.aws.core.aspects.package$Described<?>>, zio.ZEnvironment<R1>);
    Code:
       0: aload_0
       1: areturn

  public zio.stream.ZStream<java.lang.Object, zio.aws.core.AwsError, java.lang.String> listDatabases(zio.aws.redshiftdata.model.ListDatabasesRequest);
    Code:
       0: aload_0
       1: getfield      #145                // Field rts$1:Lzio/Runtime;
       4: aload_0
       5: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       8: getstatic     #151                // Field zio/aws/redshiftdata/RedshiftDataMock$ListDatabases$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$ListDatabases$;
      11: aload_1
      12: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      15: ldc           #159                // String zio.aws.redshiftdata.RedshiftDataMock.compose.$anon.listDatabases(RedshiftDataMock.scala:113)
      17: invokeinterface #165,  3          // InterfaceMethod zio/Runtime.unsafeRun:(Lzio/ZIO;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #167                // class zio/stream/ZStream
      25: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.redshiftdata.model.ListDatabasesResponse$ReadOnly> listDatabasesPaginated(zio.aws.redshiftdata.model.ListDatabasesRequest);
    Code:
       0: aload_0
       1: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #174                // Field zio/aws/redshiftdata/RedshiftDataMock$ListDatabasesPaginated$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$ListDatabasesPaginated$;
       7: aload_1
       8: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.redshiftdata.model.BatchExecuteStatementResponse$ReadOnly> batchExecuteStatement(zio.aws.redshiftdata.model.BatchExecuteStatementRequest);
    Code:
       0: aload_0
       1: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #180                // Field zio/aws/redshiftdata/RedshiftDataMock$BatchExecuteStatement$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$BatchExecuteStatement$;
       7: aload_1
       8: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.redshiftdata.model.ExecuteStatementResponse$ReadOnly> executeStatement(zio.aws.redshiftdata.model.ExecuteStatementRequest);
    Code:
       0: aload_0
       1: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #187                // Field zio/aws/redshiftdata/RedshiftDataMock$ExecuteStatement$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$ExecuteStatement$;
       7: aload_1
       8: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.stream.ZStream<java.lang.Object, zio.aws.core.AwsError, zio.aws.redshiftdata.model.StatementData$ReadOnly> listStatements(zio.aws.redshiftdata.model.ListStatementsRequest);
    Code:
       0: aload_0
       1: getfield      #145                // Field rts$1:Lzio/Runtime;
       4: aload_0
       5: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       8: getstatic     #194                // Field zio/aws/redshiftdata/RedshiftDataMock$ListStatements$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$ListStatements$;
      11: aload_1
      12: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      15: ldc           #196                // String zio.aws.redshiftdata.RedshiftDataMock.compose.$anon.listStatements(RedshiftDataMock.scala:130)
      17: invokeinterface #165,  3          // InterfaceMethod zio/Runtime.unsafeRun:(Lzio/ZIO;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #167                // class zio/stream/ZStream
      25: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.redshiftdata.model.ListStatementsResponse$ReadOnly> listStatementsPaginated(zio.aws.redshiftdata.model.ListStatementsRequest);
    Code:
       0: aload_0
       1: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #203                // Field zio/aws/redshiftdata/RedshiftDataMock$ListStatementsPaginated$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$ListStatementsPaginated$;
       7: aload_1
       8: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.stream.ZStream<java.lang.Object, zio.aws.core.AwsError, zio.aws.redshiftdata.model.TableMember$ReadOnly> listTables(zio.aws.redshiftdata.model.ListTablesRequest);
    Code:
       0: aload_0
       1: getfield      #145                // Field rts$1:Lzio/Runtime;
       4: aload_0
       5: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       8: getstatic     #209                // Field zio/aws/redshiftdata/RedshiftDataMock$ListTables$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$ListTables$;
      11: aload_1
      12: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      15: ldc           #211                // String zio.aws.redshiftdata.RedshiftDataMock.compose.$anon.listTables(RedshiftDataMock.scala:139)
      17: invokeinterface #165,  3          // InterfaceMethod zio/Runtime.unsafeRun:(Lzio/ZIO;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #167                // class zio/stream/ZStream
      25: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.redshiftdata.model.ListTablesResponse$ReadOnly> listTablesPaginated(zio.aws.redshiftdata.model.ListTablesRequest);
    Code:
       0: aload_0
       1: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #218                // Field zio/aws/redshiftdata/RedshiftDataMock$ListTablesPaginated$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$ListTablesPaginated$;
       7: aload_1
       8: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.core.StreamingOutputResult<java.lang.Object, zio.aws.redshiftdata.model.DescribeTableResponse$ReadOnly, zio.aws.redshiftdata.model.ColumnMetadata$ReadOnly>> describeTable(zio.aws.redshiftdata.model.DescribeTableRequest);
    Code:
       0: aload_0
       1: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #224                // Field zio/aws/redshiftdata/RedshiftDataMock$DescribeTable$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$DescribeTable$;
       7: aload_1
       8: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.redshiftdata.model.DescribeTableResponse$ReadOnly> describeTablePaginated(zio.aws.redshiftdata.model.DescribeTableRequest);
    Code:
       0: aload_0
       1: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #230                // Field zio/aws/redshiftdata/RedshiftDataMock$DescribeTablePaginated$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$DescribeTablePaginated$;
       7: aload_1
       8: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.redshiftdata.model.CancelStatementResponse$ReadOnly> cancelStatement(zio.aws.redshiftdata.model.CancelStatementRequest);
    Code:
       0: aload_0
       1: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #236                // Field zio/aws/redshiftdata/RedshiftDataMock$CancelStatement$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$CancelStatement$;
       7: aload_1
       8: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.stream.ZStream<java.lang.Object, zio.aws.core.AwsError, scala.collection.immutable.List<zio.aws.redshiftdata.model.Field$ReadOnly>> getStatementResult(zio.aws.redshiftdata.model.GetStatementResultRequest);
    Code:
       0: aload_0
       1: getfield      #145                // Field rts$1:Lzio/Runtime;
       4: aload_0
       5: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       8: getstatic     #243                // Field zio/aws/redshiftdata/RedshiftDataMock$GetStatementResult$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$GetStatementResult$;
      11: aload_1
      12: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      15: ldc           #245                // String zio.aws.redshiftdata.RedshiftDataMock.compose.$anon.getStatementResult(RedshiftDataMock.scala:162)
      17: invokeinterface #165,  3          // InterfaceMethod zio/Runtime.unsafeRun:(Lzio/ZIO;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #167                // class zio/stream/ZStream
      25: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.redshiftdata.model.GetStatementResultResponse$ReadOnly> getStatementResultPaginated(zio.aws.redshiftdata.model.GetStatementResultRequest);
    Code:
       0: aload_0
       1: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #252                // Field zio/aws/redshiftdata/RedshiftDataMock$GetStatementResultPaginated$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$GetStatementResultPaginated$;
       7: aload_1
       8: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.stream.ZStream<java.lang.Object, zio.aws.core.AwsError, java.lang.String> listSchemas(zio.aws.redshiftdata.model.ListSchemasRequest);
    Code:
       0: aload_0
       1: getfield      #145                // Field rts$1:Lzio/Runtime;
       4: aload_0
       5: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       8: getstatic     #258                // Field zio/aws/redshiftdata/RedshiftDataMock$ListSchemas$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$ListSchemas$;
      11: aload_1
      12: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      15: ldc_w         #260                // String zio.aws.redshiftdata.RedshiftDataMock.compose.$anon.listSchemas(RedshiftDataMock.scala:172)
      18: invokeinterface #165,  3          // InterfaceMethod zio/Runtime.unsafeRun:(Lzio/ZIO;Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #167                // class zio/stream/ZStream
      26: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.redshiftdata.model.ListSchemasResponse$ReadOnly> listSchemasPaginated(zio.aws.redshiftdata.model.ListSchemasRequest);
    Code:
       0: aload_0
       1: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #267                // Field zio/aws/redshiftdata/RedshiftDataMock$ListSchemasPaginated$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$ListSchemasPaginated$;
       7: aload_1
       8: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.redshiftdata.model.DescribeStatementResponse$ReadOnly> describeStatement(zio.aws.redshiftdata.model.DescribeStatementRequest);
    Code:
       0: aload_0
       1: getfield      #147                // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #273                // Field zio/aws/redshiftdata/RedshiftDataMock$DescribeStatement$.MODULE$:Lzio/aws/redshiftdata/RedshiftDataMock$DescribeStatement$;
       7: aload_1
       8: invokevirtual #157                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public java.lang.Object withAspect(zio.ZIOAspect, zio.ZEnvironment);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #277                // Method withAspect:(Lzio/ZIOAspect;Lzio/ZEnvironment;)Lzio/aws/redshiftdata/RedshiftData;
       6: areturn

  public zio.aws.redshiftdata.RedshiftDataMock$$anon$2(zio.Runtime, zio.mock.Proxy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #145                // Field rts$1:Lzio/Runtime;
       5: aload_0
       6: aload_2
       7: putfield      #147                // Field proxy$1:Lzio/mock/Proxy;
      10: aload_0
      11: invokespecial #282                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: aconst_null
      16: putfield      #130                // Field api:Lsoftware/amazon/awssdk/services/redshiftdata/RedshiftDataAsyncClient;
      19: return
}
