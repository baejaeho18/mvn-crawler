Compiled from "MessageConsumer.java"
public interface org.joyqueue.client.internal.consumer.MessageConsumer extends org.joyqueue.toolkit.lang.LifeCycle {
  public abstract void subscribe(java.lang.String);

  public abstract void unsubscribe();

  public abstract java.lang.String subscription();

  public abstract boolean isSubscribed();

  public abstract void subscribe(java.lang.String, org.joyqueue.client.internal.consumer.MessageListener);

  public abstract void subscribeBatch(java.lang.String, org.joyqueue.client.internal.consumer.BatchMessageListener);

  public abstract void resumeListen();

  public abstract void suspendListen();

  public abstract boolean isListenSuspended();

  public abstract void addInterceptor(org.joyqueue.client.internal.consumer.interceptor.ConsumerInterceptor);

  public abstract void removeInterceptor(org.joyqueue.client.internal.consumer.interceptor.ConsumerInterceptor);

  public abstract org.joyqueue.client.internal.consumer.domain.ConsumeMessage pollOnce();

  public abstract org.joyqueue.client.internal.consumer.domain.ConsumeMessage pollOnce(long, java.util.concurrent.TimeUnit);

  public abstract java.util.List<org.joyqueue.client.internal.consumer.domain.ConsumeMessage> poll();

  public abstract java.util.List<org.joyqueue.client.internal.consumer.domain.ConsumeMessage> poll(long, java.util.concurrent.TimeUnit);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.joyqueue.client.internal.consumer.domain.ConsumeMessage>> pollAsync();

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.joyqueue.client.internal.consumer.domain.ConsumeMessage>> pollAsync(long, java.util.concurrent.TimeUnit);

  public abstract org.joyqueue.client.internal.consumer.domain.ConsumeMessage pollPartitionOnce(short);

  public abstract org.joyqueue.client.internal.consumer.domain.ConsumeMessage pollPartitionOnce(short, long, java.util.concurrent.TimeUnit);

  public abstract org.joyqueue.client.internal.consumer.domain.ConsumeMessage pollPartitionOnce(short, long);

  public abstract org.joyqueue.client.internal.consumer.domain.ConsumeMessage pollPartitionOnce(short, long, long, java.util.concurrent.TimeUnit);

  public abstract java.util.List<org.joyqueue.client.internal.consumer.domain.ConsumeMessage> pollPartition(short);

  public abstract java.util.List<org.joyqueue.client.internal.consumer.domain.ConsumeMessage> pollPartition(short, long, java.util.concurrent.TimeUnit);

  public abstract java.util.List<org.joyqueue.client.internal.consumer.domain.ConsumeMessage> pollPartition(short, long);

  public abstract java.util.List<org.joyqueue.client.internal.consumer.domain.ConsumeMessage> pollPartition(short, long, long, java.util.concurrent.TimeUnit);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.joyqueue.client.internal.consumer.domain.ConsumeMessage>> pollPartitionAsync(short);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.joyqueue.client.internal.consumer.domain.ConsumeMessage>> pollPartitionAsync(short, long, java.util.concurrent.TimeUnit);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.joyqueue.client.internal.consumer.domain.ConsumeMessage>> pollPartitionAsync(short, long);

  public abstract java.util.concurrent.CompletableFuture<java.util.List<org.joyqueue.client.internal.consumer.domain.ConsumeMessage>> pollPartitionAsync(short, long, long, java.util.concurrent.TimeUnit);

  public abstract org.joyqueue.exception.JoyQueueCode reply(java.util.List<org.joyqueue.client.internal.consumer.domain.ConsumeReply>);

  public abstract org.joyqueue.exception.JoyQueueCode replyOnce(org.joyqueue.client.internal.consumer.domain.ConsumeReply);

  public abstract org.joyqueue.client.internal.consumer.domain.FetchIndexData fetchIndex(short);

  public abstract org.joyqueue.client.internal.metadata.domain.TopicMetadata getTopicMetadata(java.lang.String);
}
