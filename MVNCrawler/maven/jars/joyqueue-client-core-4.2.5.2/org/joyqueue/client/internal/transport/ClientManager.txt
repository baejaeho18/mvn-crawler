Compiled from "ClientManager.java"
public class org.joyqueue.client.internal.transport.ClientManager extends org.joyqueue.toolkit.service.Service {
  protected static final org.slf4j.Logger logger;

  private org.joyqueue.client.internal.transport.config.TransportConfig transportConfig;

  private org.joyqueue.client.internal.nameserver.NameServerConfig nameServerConfig;

  private org.joyqueue.network.transport.TransportClient transportClient;

  private org.joyqueue.client.internal.transport.ClientGroupManager clientGroupManager;

  private java.util.concurrent.ScheduledExecutorService heartbeatThreadScheduler;

  public org.joyqueue.client.internal.transport.ClientManager(org.joyqueue.client.internal.transport.config.TransportConfig, org.joyqueue.client.internal.nameserver.NameServerConfig);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method org/joyqueue/toolkit/service/Service."<init>":()V
       4: aload_1
       5: invokestatic  #5                  // Method org/joyqueue/client/internal/transport/config/TransportConfigChecker.check:(Lorg/joyqueue/client/internal/transport/config/TransportConfig;)V
       8: aload_2
       9: invokestatic  #6                  // Method org/joyqueue/client/internal/nameserver/NameServerConfigChecker.check:(Lorg/joyqueue/client/internal/nameserver/NameServerConfig;)V
      12: aload_0
      13: aload_1
      14: putfield      #3                  // Field transportConfig:Lorg/joyqueue/client/internal/transport/config/TransportConfig;
      17: aload_0
      18: aload_2
      19: putfield      #1                  // Field nameServerConfig:Lorg/joyqueue/client/internal/nameserver/NameServerConfig;
      22: return

  protected void validate() throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field transportConfig:Lorg/joyqueue/client/internal/transport/config/TransportConfig;
       5: invokevirtual #7                  // Method org/joyqueue/client/internal/transport/config/TransportConfig.copy:()Lorg/joyqueue/client/internal/transport/config/TransportConfig;
       8: putfield      #3                  // Field transportConfig:Lorg/joyqueue/client/internal/transport/config/TransportConfig;
      11: aload_0
      12: new           #8                  // class org/joyqueue/client/internal/transport/ClientGroupManager
      15: dup
      16: aload_0
      17: getfield      #3                  // Field transportConfig:Lorg/joyqueue/client/internal/transport/config/TransportConfig;
      20: invokespecial #9                  // Method org/joyqueue/client/internal/transport/ClientGroupManager."<init>":(Lorg/joyqueue/client/internal/transport/config/TransportConfig;)V
      23: putfield      #10                 // Field clientGroupManager:Lorg/joyqueue/client/internal/transport/ClientGroupManager;
      26: aload_0
      27: new           #11                 // class org/joyqueue/network/transport/support/DefaultTransportClientFactory
      30: dup
      31: invokespecial #12                 // Method org/joyqueue/network/transport/support/DefaultTransportClientFactory."<init>":()V
      34: aload_0
      35: aload_0
      36: getfield      #3                  // Field transportConfig:Lorg/joyqueue/client/internal/transport/config/TransportConfig;
      39: invokevirtual #13                 // Method convertToClientConfig:(Lorg/joyqueue/client/internal/transport/config/TransportConfig;)Lorg/joyqueue/network/transport/config/ClientConfig;
      42: invokevirtual #14                 // Method org/joyqueue/network/transport/support/DefaultTransportClientFactory.create:(Lorg/joyqueue/network/transport/config/ClientConfig;)Lorg/joyqueue/network/transport/TransportClient;
      45: putfield      #2                  // Field transportClient:Lorg/joyqueue/network/transport/TransportClient;
      48: aload_0
      49: iconst_1
      50: new           #15                 // class org/joyqueue/toolkit/concurrent/NamedThreadFactory
      53: dup
      54: ldc           #16                 // String joyqueue-client-heartbeat
      56: invokespecial #17                 // Method org/joyqueue/toolkit/concurrent/NamedThreadFactory."<init>":(Ljava/lang/String;)V
      59: invokestatic  #18                 // Method java/util/concurrent/Executors.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;
      62: putfield      #19                 // Field heartbeatThreadScheduler:Ljava/util/concurrent/ScheduledExecutorService;
      65: return

  protected void doStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #10                 // Field clientGroupManager:Lorg/joyqueue/client/internal/transport/ClientGroupManager;
       4: invokevirtual #20                 // Method org/joyqueue/client/internal/transport/ClientGroupManager.start:()V
       7: aload_0
       8: getfield      #19                 // Field heartbeatThreadScheduler:Ljava/util/concurrent/ScheduledExecutorService;
      11: new           #21                 // class org/joyqueue/client/internal/transport/ClientHeartbeatThread
      14: dup
      15: aload_0
      16: getfield      #3                  // Field transportConfig:Lorg/joyqueue/client/internal/transport/config/TransportConfig;
      19: aload_0
      20: getfield      #10                 // Field clientGroupManager:Lorg/joyqueue/client/internal/transport/ClientGroupManager;
      23: invokespecial #22                 // Method org/joyqueue/client/internal/transport/ClientHeartbeatThread."<init>":(Lorg/joyqueue/client/internal/transport/config/TransportConfig;Lorg/joyqueue/client/internal/transport/ClientGroupManager;)V
      26: aload_0
      27: getfield      #3                  // Field transportConfig:Lorg/joyqueue/client/internal/transport/config/TransportConfig;
      30: invokevirtual #23                 // Method org/joyqueue/client/internal/transport/config/TransportConfig.getHeartbeatInterval:()I
      33: i2l
      34: aload_0
      35: getfield      #3                  // Field transportConfig:Lorg/joyqueue/client/internal/transport/config/TransportConfig;
      38: invokevirtual #23                 // Method org/joyqueue/client/internal/transport/config/TransportConfig.getHeartbeatInterval:()I
      41: i2l
      42: getstatic     #24                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      45: invokeinterface #25,  7           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.scheduleWithFixedDelay:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      50: pop
      51: return

  protected void doStop();
    Code:
       0: aload_0
       1: getfield      #19                 // Field heartbeatThreadScheduler:Ljava/util/concurrent/ScheduledExecutorService;
       4: ifnull        16
       7: aload_0
       8: getfield      #19                 // Field heartbeatThreadScheduler:Ljava/util/concurrent/ScheduledExecutorService;
      11: invokeinterface #26,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdown:()V
      16: aload_0
      17: getfield      #10                 // Field clientGroupManager:Lorg/joyqueue/client/internal/transport/ClientGroupManager;
      20: ifnull        30
      23: aload_0
      24: getfield      #10                 // Field clientGroupManager:Lorg/joyqueue/client/internal/transport/ClientGroupManager;
      27: invokevirtual #27                 // Method org/joyqueue/client/internal/transport/ClientGroupManager.stop:()V
      30: aload_0
      31: getfield      #2                  // Field transportClient:Lorg/joyqueue/network/transport/TransportClient;
      34: ifnull        46
      37: aload_0
      38: getfield      #2                  // Field transportClient:Lorg/joyqueue/network/transport/TransportClient;
      41: invokeinterface #28,  1           // InterfaceMethod org/joyqueue/network/transport/TransportClient.stop:()V
      46: return

  public org.joyqueue.client.internal.transport.ClientGroup getClientGroup(org.joyqueue.network.domain.BrokerNode);
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method checkState:()V
       4: aload_0
       5: getfield      #10                 // Field clientGroupManager:Lorg/joyqueue/client/internal/transport/ClientGroupManager;
       8: aload_1
       9: invokevirtual #30                 // Method org/joyqueue/client/internal/transport/ClientGroupManager.getClientGroup:(Lorg/joyqueue/network/domain/BrokerNode;)Lorg/joyqueue/client/internal/transport/ClientGroup;
      12: areturn

  public org.joyqueue.client.internal.transport.Client createClient(org.joyqueue.network.domain.BrokerNode);
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method checkState:()V
       4: new           #31                 // class org/joyqueue/client/internal/transport/Client
       7: dup
       8: aload_1
       9: aload_0
      10: getfield      #3                  // Field transportConfig:Lorg/joyqueue/client/internal/transport/config/TransportConfig;
      13: aload_0
      14: getfield      #2                  // Field transportClient:Lorg/joyqueue/network/transport/TransportClient;
      17: aload_0
      18: getfield      #1                  // Field nameServerConfig:Lorg/joyqueue/client/internal/nameserver/NameServerConfig;
      21: invokespecial #32                 // Method org/joyqueue/client/internal/transport/Client."<init>":(Lorg/joyqueue/network/domain/BrokerNode;Lorg/joyqueue/client/internal/transport/config/TransportConfig;Lorg/joyqueue/network/transport/TransportClient;Lorg/joyqueue/client/internal/nameserver/NameServerConfig;)V
      24: astore_2
      25: aload_2
      26: invokevirtual #33                 // Method org/joyqueue/client/internal/transport/Client.start:()V
      29: aload_2
      30: areturn
      31: astore_2
      32: new           #35                 // class org/joyqueue/client/internal/exception/ClientException
      35: dup
      36: aload_2
      37: invokespecial #36                 // Method org/joyqueue/client/internal/exception/ClientException."<init>":(Ljava/lang/Throwable;)V
      40: athrow
    Exception table:
       from    to  target type
           4    30    31   Class java/lang/Exception

  public org.joyqueue.client.internal.transport.Client getOrCreateClient(org.joyqueue.network.domain.BrokerNode);
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method checkState:()V
       4: aload_0
       5: aload_1
       6: invokevirtual #37                 // Method doGetOrCreateClientGroup:(Lorg/joyqueue/network/domain/BrokerNode;)Lorg/joyqueue/client/internal/transport/ClientGroup;
       9: invokevirtual #38                 // Method org/joyqueue/client/internal/transport/ClientGroup.getClient:()Lorg/joyqueue/client/internal/transport/Client;
      12: areturn

  public org.joyqueue.client.internal.transport.Client doGetOrCreateClient(org.joyqueue.network.domain.BrokerNode);
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method checkState:()V
       4: aload_0
       5: aload_1
       6: invokevirtual #37                 // Method doGetOrCreateClientGroup:(Lorg/joyqueue/network/domain/BrokerNode;)Lorg/joyqueue/client/internal/transport/ClientGroup;
       9: invokevirtual #38                 // Method org/joyqueue/client/internal/transport/ClientGroup.getClient:()Lorg/joyqueue/client/internal/transport/Client;
      12: areturn

  protected org.joyqueue.client.internal.transport.ClientGroup doGetOrCreateClientGroup(org.joyqueue.network.domain.BrokerNode);
    Code:
       0: aload_0
       1: getfield      #10                 // Field clientGroupManager:Lorg/joyqueue/client/internal/transport/ClientGroupManager;
       4: aload_1
       5: new           #39                 // class org/joyqueue/client/internal/transport/ClientManager$1
       8: dup
       9: aload_0
      10: aload_1
      11: invokespecial #40                 // Method org/joyqueue/client/internal/transport/ClientManager$1."<init>":(Lorg/joyqueue/client/internal/transport/ClientManager;Lorg/joyqueue/network/domain/BrokerNode;)V
      14: invokevirtual #41                 // Method org/joyqueue/client/internal/transport/ClientGroupManager.getClientGroup:(Lorg/joyqueue/network/domain/BrokerNode;Ljava/util/concurrent/Callable;)Lorg/joyqueue/client/internal/transport/ClientGroup;
      17: areturn
      18: astore_2
      19: getstatic     #42                 // Field logger:Lorg/slf4j/Logger;
      22: ldc           #43                 // String get client exception, node: {}
      24: aload_1
      25: aload_2
      26: invokeinterface #44,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      31: new           #35                 // class org/joyqueue/client/internal/exception/ClientException
      34: dup
      35: aload_2
      36: invokespecial #36                 // Method org/joyqueue/client/internal/exception/ClientException."<init>":(Ljava/lang/Throwable;)V
      39: athrow
    Exception table:
       from    to  target type
           0    17    18   Class java/lang/Exception

  public org.joyqueue.client.internal.transport.Client tryGetClient(org.joyqueue.network.domain.BrokerNode);
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method checkState:()V
       4: aload_0
       5: getfield      #10                 // Field clientGroupManager:Lorg/joyqueue/client/internal/transport/ClientGroupManager;
       8: aload_1
       9: invokevirtual #45                 // Method org/joyqueue/client/internal/transport/ClientGroupManager.tryGetClientGroup:(Lorg/joyqueue/network/domain/BrokerNode;)Lorg/joyqueue/client/internal/transport/ClientGroup;
      12: astore_2
      13: aload_2
      14: ifnonnull     19
      17: aconst_null
      18: areturn
      19: aload_2
      20: invokevirtual #46                 // Method org/joyqueue/client/internal/transport/ClientGroup.tryGetClient:()Lorg/joyqueue/client/internal/transport/Client;
      23: areturn

  public org.joyqueue.client.internal.transport.Client getClient(org.joyqueue.network.domain.BrokerNode);
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method checkState:()V
       4: aload_0
       5: getfield      #10                 // Field clientGroupManager:Lorg/joyqueue/client/internal/transport/ClientGroupManager;
       8: aload_1
       9: invokevirtual #30                 // Method org/joyqueue/client/internal/transport/ClientGroupManager.getClientGroup:(Lorg/joyqueue/network/domain/BrokerNode;)Lorg/joyqueue/client/internal/transport/ClientGroup;
      12: astore_2
      13: aload_2
      14: ifnonnull     19
      17: aconst_null
      18: areturn
      19: aload_2
      20: invokevirtual #38                 // Method org/joyqueue/client/internal/transport/ClientGroup.getClient:()Lorg/joyqueue/client/internal/transport/Client;
      23: astore_3
      24: aload_3
      25: areturn

  public void closeClient(org.joyqueue.network.domain.BrokerNode);
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method checkState:()V
       4: aload_0
       5: getfield      #10                 // Field clientGroupManager:Lorg/joyqueue/client/internal/transport/ClientGroupManager;
       8: aload_1
       9: invokevirtual #30                 // Method org/joyqueue/client/internal/transport/ClientGroupManager.getClientGroup:(Lorg/joyqueue/network/domain/BrokerNode;)Lorg/joyqueue/client/internal/transport/ClientGroup;
      12: astore_2
      13: aload_2
      14: ifnonnull     18
      17: return
      18: aload_0
      19: getfield      #10                 // Field clientGroupManager:Lorg/joyqueue/client/internal/transport/ClientGroupManager;
      22: aload_2
      23: invokevirtual #47                 // Method org/joyqueue/client/internal/transport/ClientGroupManager.closeClientGroup:(Lorg/joyqueue/client/internal/transport/ClientGroup;)V
      26: return

  protected void checkState();
    Code:
       0: aload_0
       1: invokevirtual #48                 // Method isStarted:()Z
       4: ifne          23
       7: new           #35                 // class org/joyqueue/client/internal/exception/ClientException
      10: dup
      11: ldc           #49                 // String clientManager is not started
      13: getstatic     #50                 // Field org/joyqueue/exception/JoyQueueCode.CN_SERVICE_NOT_AVAILABLE:Lorg/joyqueue/exception/JoyQueueCode;
      16: invokevirtual #51                 // Method org/joyqueue/exception/JoyQueueCode.getCode:()I
      19: invokespecial #52                 // Method org/joyqueue/client/internal/exception/ClientException."<init>":(Ljava/lang/String;I)V
      22: athrow
      23: return

  protected org.joyqueue.network.transport.config.ClientConfig convertToClientConfig(org.joyqueue.client.internal.transport.config.TransportConfig);
    Code:
       0: new           #53                 // class org/joyqueue/network/transport/config/ClientConfig
       3: dup
       4: invokespecial #54                 // Method org/joyqueue/network/transport/config/ClientConfig."<init>":()V
       7: astore_2
       8: aload_2
       9: aload_1
      10: invokevirtual #55                 // Method org/joyqueue/client/internal/transport/config/TransportConfig.getSendTimeout:()I
      13: invokevirtual #56                 // Method org/joyqueue/network/transport/config/ClientConfig.setSendTimeout:(I)V
      16: aload_2
      17: aload_1
      18: invokevirtual #57                 // Method org/joyqueue/client/internal/transport/config/TransportConfig.getIoThreads:()I
      21: invokevirtual #58                 // Method org/joyqueue/network/transport/config/ClientConfig.setIoThread:(I)V
      24: aload_2
      25: aload_1
      26: invokevirtual #59                 // Method org/joyqueue/client/internal/transport/config/TransportConfig.getCallbackThreads:()I
      29: invokevirtual #60                 // Method org/joyqueue/network/transport/config/ClientConfig.setCallbackThreads:(I)V
      32: aload_2
      33: aload_1
      34: invokevirtual #61                 // Method org/joyqueue/client/internal/transport/config/TransportConfig.getSoLinger:()I
      37: invokevirtual #62                 // Method org/joyqueue/network/transport/config/ClientConfig.setSoLinger:(I)V
      40: aload_2
      41: aload_1
      42: invokevirtual #63                 // Method org/joyqueue/client/internal/transport/config/TransportConfig.isTcpNoDelay:()Z
      45: invokevirtual #64                 // Method org/joyqueue/network/transport/config/ClientConfig.setTcpNoDelay:(Z)V
      48: aload_2
      49: aload_1
      50: invokevirtual #65                 // Method org/joyqueue/client/internal/transport/config/TransportConfig.isKeepAlive:()Z
      53: invokevirtual #66                 // Method org/joyqueue/network/transport/config/ClientConfig.setKeepAlive:(Z)V
      56: aload_2
      57: aload_1
      58: invokevirtual #67                 // Method org/joyqueue/client/internal/transport/config/TransportConfig.getSoTimeout:()I
      61: invokevirtual #68                 // Method org/joyqueue/network/transport/config/ClientConfig.setSoTimeout:(I)V
      64: aload_2
      65: aload_1
      66: invokevirtual #69                 // Method org/joyqueue/client/internal/transport/config/TransportConfig.getSocketBufferSize:()I
      69: invokevirtual #70                 // Method org/joyqueue/network/transport/config/ClientConfig.setSocketBufferSize:(I)V
      72: aload_2
      73: aload_1
      74: invokevirtual #71                 // Method org/joyqueue/client/internal/transport/config/TransportConfig.getMaxOneway:()I
      77: invokevirtual #72                 // Method org/joyqueue/network/transport/config/ClientConfig.setMaxOneway:(I)V
      80: aload_2
      81: aload_1
      82: invokevirtual #73                 // Method org/joyqueue/client/internal/transport/config/TransportConfig.getMaxAsync:()I
      85: invokevirtual #74                 // Method org/joyqueue/network/transport/config/ClientConfig.setMaxAsync:(I)V
      88: aload_2
      89: aload_1
      90: invokevirtual #75                 // Method org/joyqueue/client/internal/transport/config/TransportConfig.getRetryPolicy:()Lorg/joyqueue/toolkit/retry/RetryPolicy;
      93: invokevirtual #76                 // Method org/joyqueue/network/transport/config/ClientConfig.setRetryPolicy:(Lorg/joyqueue/toolkit/retry/RetryPolicy;)V
      96: aload_2
      97: aload_1
      98: invokevirtual #77                 // Method org/joyqueue/client/internal/transport/config/TransportConfig.isNonBlockOneway:()Z
     101: invokevirtual #78                 // Method org/joyqueue/network/transport/config/ClientConfig.setNonBlockOneway:(Z)V
     104: aload_2
     105: ldc           #79                 // String joyqueue-client-io-eventLoop
     107: invokevirtual #80                 // Method org/joyqueue/network/transport/config/ClientConfig.setIoThreadName:(Ljava/lang/String;)V
     110: aload_2
     111: areturn

  static org.joyqueue.client.internal.transport.config.TransportConfig access$000(org.joyqueue.client.internal.transport.ClientManager);
    Code:
       0: aload_0
       1: getfield      #3                  // Field transportConfig:Lorg/joyqueue/client/internal/transport/config/TransportConfig;
       4: areturn

  static org.joyqueue.network.transport.TransportClient access$100(org.joyqueue.client.internal.transport.ClientManager);
    Code:
       0: aload_0
       1: getfield      #2                  // Field transportClient:Lorg/joyqueue/network/transport/TransportClient;
       4: areturn

  static org.joyqueue.client.internal.nameserver.NameServerConfig access$200(org.joyqueue.client.internal.transport.ClientManager);
    Code:
       0: aload_0
       1: getfield      #1                  // Field nameServerConfig:Lorg/joyqueue/client/internal/nameserver/NameServerConfig;
       4: areturn

  static {};
    Code:
       0: ldc           #81                 // class org/joyqueue/client/internal/transport/ClientManager
       2: invokestatic  #82                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #42                 // Field logger:Lorg/slf4j/Logger;
       8: return
}
