Compiled from "ProducerConfig.java"
public class org.joyqueue.client.internal.producer.config.ProducerConfig {
  public static final long NONE_PRODUCE_TIMEOUT;

  private java.lang.String app;

  private long timeout;

  private long produceTimeout;

  private long transactionTimeout;

  private boolean failover;

  private org.joyqueue.toolkit.retry.RetryPolicy retryPolicy;

  private org.joyqueue.domain.QosLevel qosLevel;

  private boolean compress;

  private java.lang.String compressType;

  private int compressThreshold;

  private boolean batch;

  private java.lang.String selectorType;

  private int businessIdLengthLimit;

  private int bodyLengthLimit;

  private int batchBodyLengthLimit;

  public org.joyqueue.client.internal.producer.config.ProducerConfig();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #2                  // long 3000l
       8: putfield      #4                  // Field timeout:J
      11: aload_0
      12: ldc2_w        #2                  // long 3000l
      15: putfield      #5                  // Field produceTimeout:J
      18: aload_0
      19: ldc2_w        #6                  // long 1800000l
      22: putfield      #8                  // Field transactionTimeout:J
      25: aload_0
      26: iconst_1
      27: putfield      #9                  // Field failover:Z
      30: aload_0
      31: new           #10                 // class org/joyqueue/toolkit/retry/RetryPolicy
      34: dup
      35: sipush        1000
      38: invokestatic  #11                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      41: iconst_2
      42: invokestatic  #11                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      45: invokespecial #12                 // Method org/joyqueue/toolkit/retry/RetryPolicy."<init>":(Ljava/lang/Integer;Ljava/lang/Integer;)V
      48: putfield      #13                 // Field retryPolicy:Lorg/joyqueue/toolkit/retry/RetryPolicy;
      51: aload_0
      52: getstatic     #14                 // Field org/joyqueue/domain/QosLevel.REPLICATION:Lorg/joyqueue/domain/QosLevel;
      55: putfield      #15                 // Field qosLevel:Lorg/joyqueue/domain/QosLevel;
      58: aload_0
      59: iconst_1
      60: putfield      #16                 // Field compress:Z
      63: aload_0
      64: ldc           #18                 // String zlib
      66: putfield      #19                 // Field compressType:Ljava/lang/String;
      69: aload_0
      70: bipush        100
      72: putfield      #20                 // Field compressThreshold:I
      75: aload_0
      76: iconst_1
      77: putfield      #21                 // Field batch:Z
      80: aload_0
      81: ldc           #23                 // String roundrobin
      83: putfield      #24                 // Field selectorType:Ljava/lang/String;
      86: aload_0
      87: bipush        100
      89: putfield      #25                 // Field businessIdLengthLimit:I
      92: aload_0
      93: ldc           #26                 // int 1048576
      95: putfield      #27                 // Field bodyLengthLimit:I
      98: aload_0
      99: ldc           #28                 // int 4194304
     101: putfield      #29                 // Field batchBodyLengthLimit:I
     104: return

  public org.joyqueue.client.internal.producer.config.ProducerConfig copy();
    Code:
       0: new           #30                 // class org/joyqueue/client/internal/producer/config/ProducerConfig
       3: dup
       4: invokespecial #31                 // Method "<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #32                 // Field app:Ljava/lang/String;
      13: invokevirtual #33                 // Method setApp:(Ljava/lang/String;)V
      16: aload_1
      17: aload_0
      18: getfield      #4                  // Field timeout:J
      21: invokevirtual #34                 // Method setTimeout:(J)V
      24: aload_1
      25: aload_0
      26: getfield      #5                  // Field produceTimeout:J
      29: invokevirtual #35                 // Method setProduceTimeout:(J)V
      32: aload_1
      33: aload_0
      34: getfield      #8                  // Field transactionTimeout:J
      37: invokevirtual #36                 // Method setTransactionTimeout:(J)V
      40: aload_1
      41: aload_0
      42: getfield      #9                  // Field failover:Z
      45: invokevirtual #37                 // Method setFailover:(Z)V
      48: aload_1
      49: aload_0
      50: getfield      #13                 // Field retryPolicy:Lorg/joyqueue/toolkit/retry/RetryPolicy;
      53: invokevirtual #38                 // Method setRetryPolicy:(Lorg/joyqueue/toolkit/retry/RetryPolicy;)V
      56: aload_1
      57: aload_0
      58: getfield      #15                 // Field qosLevel:Lorg/joyqueue/domain/QosLevel;
      61: invokevirtual #39                 // Method setQosLevel:(Lorg/joyqueue/domain/QosLevel;)V
      64: aload_1
      65: aload_0
      66: getfield      #16                 // Field compress:Z
      69: invokevirtual #40                 // Method setCompress:(Z)V
      72: aload_1
      73: aload_0
      74: getfield      #19                 // Field compressType:Ljava/lang/String;
      77: invokevirtual #41                 // Method setCompressType:(Ljava/lang/String;)V
      80: aload_1
      81: aload_0
      82: getfield      #20                 // Field compressThreshold:I
      85: invokevirtual #42                 // Method setCompressThreshold:(I)V
      88: aload_1
      89: aload_0
      90: getfield      #21                 // Field batch:Z
      93: invokevirtual #43                 // Method setBatch:(Z)V
      96: aload_1
      97: aload_0
      98: getfield      #24                 // Field selectorType:Ljava/lang/String;
     101: invokevirtual #44                 // Method setSelectorType:(Ljava/lang/String;)V
     104: aload_1
     105: aload_0
     106: getfield      #25                 // Field businessIdLengthLimit:I
     109: invokevirtual #45                 // Method setBusinessIdLengthLimit:(I)V
     112: aload_1
     113: aload_0
     114: getfield      #27                 // Field bodyLengthLimit:I
     117: invokevirtual #46                 // Method setBodyLengthLimit:(I)V
     120: aload_1
     121: aload_0
     122: getfield      #29                 // Field batchBodyLengthLimit:I
     125: invokevirtual #47                 // Method setBatchBodyLengthLimit:(I)V
     128: aload_1
     129: areturn

  public java.lang.String getApp();
    Code:
       0: aload_0
       1: getfield      #32                 // Field app:Ljava/lang/String;
       4: areturn

  public void setApp(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #32                 // Field app:Ljava/lang/String;
       5: return

  public long getTimeout();
    Code:
       0: aload_0
       1: getfield      #4                  // Field timeout:J
       4: lreturn

  public void setTimeout(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #4                  // Field timeout:J
       5: return

  public long getProduceTimeout();
    Code:
       0: aload_0
       1: getfield      #5                  // Field produceTimeout:J
       4: lreturn

  public void setProduceTimeout(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #5                  // Field produceTimeout:J
       5: return

  public long getTransactionTimeout();
    Code:
       0: aload_0
       1: getfield      #8                  // Field transactionTimeout:J
       4: lreturn

  public void setTransactionTimeout(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #8                  // Field transactionTimeout:J
       5: return

  public boolean isFailover();
    Code:
       0: aload_0
       1: getfield      #9                  // Field failover:Z
       4: ireturn

  public void setFailover(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field failover:Z
       5: return

  public org.joyqueue.toolkit.retry.RetryPolicy getRetryPolicy();
    Code:
       0: aload_0
       1: getfield      #13                 // Field retryPolicy:Lorg/joyqueue/toolkit/retry/RetryPolicy;
       4: areturn

  public void setRetryPolicy(org.joyqueue.toolkit.retry.RetryPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field retryPolicy:Lorg/joyqueue/toolkit/retry/RetryPolicy;
       5: return

  public org.joyqueue.domain.QosLevel getQosLevel();
    Code:
       0: aload_0
       1: getfield      #15                 // Field qosLevel:Lorg/joyqueue/domain/QosLevel;
       4: areturn

  public void setQosLevel(org.joyqueue.domain.QosLevel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field qosLevel:Lorg/joyqueue/domain/QosLevel;
       5: return

  public void setCompress(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #16                 // Field compress:Z
       5: return

  public boolean isCompress();
    Code:
       0: aload_0
       1: getfield      #16                 // Field compress:Z
       4: ireturn

  public void setCompressType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #19                 // Field compressType:Ljava/lang/String;
       5: return

  public java.lang.String getCompressType();
    Code:
       0: aload_0
       1: getfield      #19                 // Field compressType:Ljava/lang/String;
       4: areturn

  public void setCompressThreshold(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #20                 // Field compressThreshold:I
       5: return

  public int getCompressThreshold();
    Code:
       0: aload_0
       1: getfield      #20                 // Field compressThreshold:I
       4: ireturn

  public void setBatch(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #21                 // Field batch:Z
       5: return

  public boolean isBatch();
    Code:
       0: aload_0
       1: getfield      #21                 // Field batch:Z
       4: ireturn

  public java.lang.String getSelectorType();
    Code:
       0: aload_0
       1: getfield      #24                 // Field selectorType:Ljava/lang/String;
       4: areturn

  public void setSelectorType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #24                 // Field selectorType:Ljava/lang/String;
       5: return

  public int getBusinessIdLengthLimit();
    Code:
       0: aload_0
       1: getfield      #25                 // Field businessIdLengthLimit:I
       4: ireturn

  public void setBusinessIdLengthLimit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #25                 // Field businessIdLengthLimit:I
       5: return

  public int getBodyLengthLimit();
    Code:
       0: aload_0
       1: getfield      #27                 // Field bodyLengthLimit:I
       4: ireturn

  public void setBodyLengthLimit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #27                 // Field bodyLengthLimit:I
       5: return

  public int getBatchBodyLengthLimit();
    Code:
       0: aload_0
       1: getfield      #29                 // Field batchBodyLengthLimit:I
       4: ireturn

  public void setBatchBodyLengthLimit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #29                 // Field batchBodyLengthLimit:I
       5: return
}
