Compiled from "BaseStatement.java"
public abstract class cloud.agileframework.elasticsearch.BaseStatement implements java.sql.Statement {
  private cloud.agileframework.elasticsearch.ConnectionEnhanceImpl connection;

  private int fetchDirection;

  private int fetchSize;

  private int resultSetType;

  private int resultSetConcurrency;

  private int resultSetHoldability;

  private int maxFieldSize;

  private int maxRows;

  private int queryTimeout;

  private boolean escapeProcessing;

  private java.lang.String cursorName;

  private java.sql.SQLWarning warnings;

  private int updateCount;

  protected boolean closed;

  private boolean poolable;

  protected java.sql.ResultSet generatedKeys;

  protected java.sql.ResultSet resultSet;

  public cloud.agileframework.elasticsearch.BaseStatement(cloud.agileframework.elasticsearch.ConnectionEnhanceImpl);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field closed:Z
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field connection:Lcloud/agileframework/elasticsearch/ConnectionEnhanceImpl;
      14: return

  public cloud.agileframework.elasticsearch.ConnectionEnhanceImpl getConnection() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field connection:Lcloud/agileframework/elasticsearch/ConnectionEnhanceImpl;
       4: areturn

  public void setConnection(cloud.agileframework.elasticsearch.ConnectionEnhanceImpl);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field connection:Lcloud/agileframework/elasticsearch/ConnectionEnhanceImpl;
       5: return

  protected void checkOpen() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field closed:Z
       4: ifeq          15
       7: new           #4                  // class java/sql/SQLException
      10: dup
      11: invokespecial #5                  // Method java/sql/SQLException."<init>":()V
      14: athrow
      15: aload_0
      16: getfield      #3                  // Field connection:Lcloud/agileframework/elasticsearch/ConnectionEnhanceImpl;
      19: ifnull        42
      22: aload_0
      23: getfield      #3                  // Field connection:Lcloud/agileframework/elasticsearch/ConnectionEnhanceImpl;
      26: invokevirtual #6                  // Method cloud/agileframework/elasticsearch/ConnectionEnhanceImpl.isClosed:()Z
      29: ifeq          42
      32: new           #4                  // class java/sql/SQLException
      35: dup
      36: ldc           #7                  // String connection is closed
      38: invokespecial #8                  // Method java/sql/SQLException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: return

  public void setFetchDirection(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: iload_1
       6: putfield      #10                 // Field fetchDirection:I
       9: return

  public int getFetchDirection() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: getfield      #10                 // Field fetchDirection:I
       8: ireturn

  public void setFetchSize(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: iload_1
       6: putfield      #11                 // Field fetchSize:I
       9: return

  public int getFetchSize() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: getfield      #11                 // Field fetchSize:I
       8: ireturn

  public int getResultSetType() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: getfield      #12                 // Field resultSetType:I
       8: ireturn

  public void setResultSetType(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field resultSetType:I
       5: return

  public void setResultSetConcurrency(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field resultSetConcurrency:I
       5: return

  public int getResultSetConcurrency() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: getfield      #13                 // Field resultSetConcurrency:I
       8: ireturn

  public int getResultSetHoldability() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: getfield      #14                 // Field resultSetHoldability:I
       8: ireturn

  public void setResultSetHoldability(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #14                 // Field resultSetHoldability:I
       5: return

  public int getMaxFieldSize() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: getfield      #15                 // Field maxFieldSize:I
       8: ireturn

  public void setMaxFieldSize(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: iload_1
       6: putfield      #15                 // Field maxFieldSize:I
       9: return

  public int getMaxRows() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: getfield      #16                 // Field maxRows:I
       8: ireturn

  public void setMaxRows(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: iload_1
       6: putfield      #16                 // Field maxRows:I
       9: return

  public void setEscapeProcessing(boolean) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: iload_1
       6: putfield      #17                 // Field escapeProcessing:Z
       9: return

  public boolean isEscapeProcessing();
    Code:
       0: aload_0
       1: getfield      #17                 // Field escapeProcessing:Z
       4: ireturn

  public int getQueryTimeout() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: getfield      #18                 // Field queryTimeout:I
       8: ireturn

  public void setQueryTimeout(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: iload_1
       6: putfield      #18                 // Field queryTimeout:I
       9: return

  public void setCursorName(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: aload_1
       6: putfield      #19                 // Field cursorName:Ljava/lang/String;
       9: return

  public java.lang.String getCursorName();
    Code:
       0: aload_0
       1: getfield      #19                 // Field cursorName:Ljava/lang/String;
       4: areturn

  public java.sql.SQLWarning getWarnings() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: getfield      #20                 // Field warnings:Ljava/sql/SQLWarning;
       8: areturn

  public void clearWarnings() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: aconst_null
       6: putfield      #20                 // Field warnings:Ljava/sql/SQLWarning;
       9: return

  public void setWarning(java.sql.SQLWarning);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field warnings:Ljava/sql/SQLWarning;
       5: return

  public int getUpdateCount() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: getfield      #21                 // Field updateCount:I
       8: ireturn

  public void setUpdateCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #21                 // Field updateCount:I
       5: return

  public void close() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #2                  // Field closed:Z
       5: return

  public <T> T unwrap(java.lang.Class<T>) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #22                 // Method isWrapperFor:(Ljava/lang/Class;)Z
       5: ifeq          10
       8: aload_0
       9: areturn
      10: aconst_null
      11: areturn

  public boolean isWrapperFor(java.lang.Class<?>) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_1
       7: aload_0
       8: invokevirtual #23                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: if_acmpeq     22
      14: aload_1
      15: aload_0
      16: invokevirtual #24                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      19: ifeq          24
      22: iconst_1
      23: ireturn
      24: iconst_0
      25: ireturn

  public boolean isPoolable() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: getfield      #25                 // Field poolable:Z
       8: ireturn

  public void setPoolable(boolean) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: iload_1
       6: putfield      #25                 // Field poolable:Z
       9: return

  public void closeOnCompletion() throws java.sql.SQLException;
    Code:
       0: new           #26                 // class java/sql/SQLFeatureNotSupportedException
       3: dup
       4: invokespecial #27                 // Method java/sql/SQLFeatureNotSupportedException."<init>":()V
       7: athrow

  public boolean isCloseOnCompletion() throws java.sql.SQLException;
    Code:
       0: new           #26                 // class java/sql/SQLFeatureNotSupportedException
       3: dup
       4: invokespecial #27                 // Method java/sql/SQLFeatureNotSupportedException."<init>":()V
       7: athrow

  public boolean isClosed() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field closed:Z
       4: ireturn

  public boolean getMoreResults() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: iconst_0
       5: ireturn

  public void addBatch(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: return

  public void clearBatch() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: return

  public java.sql.ResultSet getGeneratedKeys() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: getfield      #28                 // Field generatedKeys:Ljava/sql/ResultSet;
       8: areturn

  public void setGeneratedKeys(java.sql.ResultSet);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field generatedKeys:Ljava/sql/ResultSet;
       5: return

  public int executeUpdate(java.lang.String, int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: iconst_0
       5: ireturn

  public int executeUpdate(java.lang.String, int[]) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: iconst_0
       5: ireturn

  public int executeUpdate(java.lang.String, java.lang.String[]) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: iconst_0
       5: ireturn

  public boolean execute(java.lang.String, int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: iconst_0
       5: ireturn

  public boolean execute(java.lang.String, int[]) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: iconst_0
       5: ireturn

  public boolean execute(java.lang.String, java.lang.String[]) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: iconst_0
       5: ireturn

  public java.sql.ResultSet getResultSet() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_0
       5: getfield      #29                 // Field resultSet:Ljava/sql/ResultSet;
       8: areturn

  public int[] executeBatch() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: iconst_0
       5: newarray       int
       7: areturn

  public boolean getMoreResults(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: iconst_0
       5: ireturn

  public void setWarnings(java.sql.SQLWarning);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field warnings:Ljava/sql/SQLWarning;
       5: return

  public void setResultSet(java.sql.ResultSet);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field resultSet:Ljava/sql/ResultSet;
       5: return

  public boolean execute(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: iconst_0
       5: ireturn

  public java.sql.ResultSet executeQuery(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_1
       5: aload_0
       6: invokestatic  #30                 // Method cloud/agileframework/elasticsearch/proxy/JdbcRequest.send:(Ljava/lang/String;Lcloud/agileframework/elasticsearch/BaseStatement;)Lcloud/agileframework/elasticsearch/proxy/JdbcResponse;
       9: astore_2
      10: goto          23
      13: astore_3
      14: new           #4                  // class java/sql/SQLException
      17: dup
      18: aload_3
      19: invokespecial #32                 // Method java/sql/SQLException."<init>":(Ljava/lang/Throwable;)V
      22: athrow
      23: aload_2
      24: invokeinterface #33,  1           // InterfaceMethod cloud/agileframework/elasticsearch/proxy/JdbcResponse.resultSet:()Ljava/sql/ResultSet;
      29: areturn
    Exception table:
       from    to  target type
           4    10    13   Class java/io/IOException

  public int executeUpdate(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: aload_1
       5: aload_0
       6: invokestatic  #30                 // Method cloud/agileframework/elasticsearch/proxy/JdbcRequest.send:(Ljava/lang/String;Lcloud/agileframework/elasticsearch/BaseStatement;)Lcloud/agileframework/elasticsearch/proxy/JdbcResponse;
       9: astore_2
      10: goto          23
      13: astore_3
      14: new           #4                  // class java/sql/SQLException
      17: dup
      18: aload_3
      19: invokespecial #32                 // Method java/sql/SQLException."<init>":(Ljava/lang/Throwable;)V
      22: athrow
      23: aload_2
      24: invokeinterface #34,  1           // InterfaceMethod cloud/agileframework/elasticsearch/proxy/JdbcResponse.count:()I
      29: ireturn
    Exception table:
       from    to  target type
           4    10    13   Class java/io/IOException

  public void cancel() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method checkOpen:()V
       4: return

  public java.sql.Connection getConnection() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method getConnection:()Lcloud/agileframework/elasticsearch/ConnectionEnhanceImpl;
       4: areturn
}
