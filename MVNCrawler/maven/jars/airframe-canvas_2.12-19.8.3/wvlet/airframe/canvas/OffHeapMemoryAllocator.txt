Compiled from "OffHeapMemoryAllocator.scala"
public class wvlet.airframe.canvas.OffHeapMemoryAllocator implements java.lang.AutoCloseable,wvlet.log.LogSupport {
  private final scala.collection.concurrent.Map<java.lang.Object, wvlet.airframe.canvas.MemoryRefHolder> allocatedMemoryAddresses;

  private final java.lang.ref.ReferenceQueue<wvlet.airframe.canvas.Memory> wvlet$airframe$canvas$OffHeapMemoryAllocator$$memoryQueue;

  private final java.util.concurrent.atomic.AtomicLong totalAllocatedMemorySize;

  private wvlet.log.Logger logger;

  private volatile boolean bitmap$0;

  private wvlet.log.Logger logger$lzycompute();
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #48                 // Field bitmap$0:Z
       8: ifne          24
      11: aload_0
      12: aload_0
      13: invokestatic  #54                 // InterfaceMethod wvlet/log/LazyLogger.logger$:(Lwvlet/log/LazyLogger;)Lwvlet/log/Logger;
      16: putfield      #56                 // Field logger:Lwvlet/log/Logger;
      19: aload_0
      20: iconst_1
      21: putfield      #48                 // Field bitmap$0:Z
      24: aload_1
      25: monitorexit
      26: goto          32
      29: aload_1
      30: monitorexit
      31: athrow
      32: aload_0
      33: getfield      #56                 // Field logger:Lwvlet/log/Logger;
      36: areturn
    Exception table:
       from    to  target type
           4    24    29   any

  public wvlet.log.Logger logger();
    Code:
       0: aload_0
       1: getfield      #48                 // Field bitmap$0:Z
       4: ifne          14
       7: aload_0
       8: invokespecial #62                 // Method logger$lzycompute:()Lwvlet/log/Logger;
      11: goto          18
      14: aload_0
      15: getfield      #56                 // Field logger:Lwvlet/log/Logger;
      18: areturn

  private scala.collection.concurrent.Map<java.lang.Object, wvlet.airframe.canvas.MemoryRefHolder> allocatedMemoryAddresses();
    Code:
       0: aload_0
       1: getfield      #68                 // Field allocatedMemoryAddresses:Lscala/collection/concurrent/Map;
       4: areturn

  public java.lang.ref.ReferenceQueue<wvlet.airframe.canvas.Memory> wvlet$airframe$canvas$OffHeapMemoryAllocator$$memoryQueue();
    Code:
       0: aload_0
       1: getfield      #72                 // Field wvlet$airframe$canvas$OffHeapMemoryAllocator$$memoryQueue:Ljava/lang/ref/ReferenceQueue;
       4: areturn

  private java.util.concurrent.atomic.AtomicLong totalAllocatedMemorySize();
    Code:
       0: aload_0
       1: getfield      #75                 // Field totalAllocatedMemorySize:Ljava/util/concurrent/atomic/AtomicLong;
       4: areturn

  public long allocatedMemorySize();
    Code:
       0: aload_0
       1: invokespecial #79                 // Method totalAllocatedMemorySize:()Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #84                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public wvlet.airframe.canvas.OffHeapMemory allocate(long);
    Code:
       0: getstatic     #93                 // Field wvlet/airframe/canvas/UnsafeUtil$.MODULE$:Lwvlet/airframe/canvas/UnsafeUtil$;
       3: invokevirtual #97                 // Method wvlet/airframe/canvas/UnsafeUtil$.unsafe:()Lsun/misc/Unsafe;
       6: lload_1
       7: invokevirtual #103                // Method sun/misc/Unsafe.allocateMemory:(J)J
      10: lstore_3
      11: new           #105                // class wvlet/airframe/canvas/OffHeapMemory
      14: dup
      15: lload_3
      16: lload_1
      17: aload_0
      18: invokespecial #109                // Method wvlet/airframe/canvas/OffHeapMemory."<init>":(JJLwvlet/airframe/canvas/OffHeapMemoryAllocator;)V
      21: astore        5
      23: aload_0
      24: aload         5
      26: invokespecial #113                // Method register:(Lwvlet/airframe/canvas/OffHeapMemory;)V
      29: aload         5
      31: areturn

  private void register(wvlet.airframe.canvas.OffHeapMemory);
    Code:
       0: new           #119                // class wvlet/airframe/canvas/MemoryReference
       3: dup
       4: aload_1
       5: aload_0
       6: invokevirtual #121                // Method wvlet$airframe$canvas$OffHeapMemoryAllocator$$memoryQueue:()Ljava/lang/ref/ReferenceQueue;
       9: invokespecial #124                // Method wvlet/airframe/canvas/MemoryReference."<init>":(Lwvlet/airframe/canvas/Memory;Ljava/lang/ref/ReferenceQueue;)V
      12: astore_2
      13: new           #126                // class wvlet/airframe/canvas/MemoryRefHolder
      16: dup
      17: aload_2
      18: aload_1
      19: invokevirtual #128                // Method wvlet/airframe/canvas/OffHeapMemory.size:()J
      22: invokespecial #131                // Method wvlet/airframe/canvas/MemoryRefHolder."<init>":(Lwvlet/airframe/canvas/MemoryReference;J)V
      25: astore_3
      26: aload_0
      27: invokespecial #133                // Method allocatedMemoryAddresses:()Lscala/collection/concurrent/Map;
      30: aload_1
      31: invokevirtual #135                // Method wvlet/airframe/canvas/OffHeapMemory.address:()J
      34: invokestatic  #141                // Method scala/runtime/BoxesRunTime.boxToLong:(J)Ljava/lang/Long;
      37: aload_3
      38: invokeinterface #147,  3          // InterfaceMethod scala/collection/concurrent/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Option;
      43: pop
      44: aload_0
      45: invokespecial #79                 // Method totalAllocatedMemorySize:()Ljava/util/concurrent/atomic/AtomicLong;
      48: aload_1
      49: invokevirtual #128                // Method wvlet/airframe/canvas/OffHeapMemory.size:()J
      52: invokevirtual #150                // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      55: pop2
      56: return

  public void release(wvlet.airframe.canvas.OffHeapMemory);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #135                // Method wvlet/airframe/canvas/OffHeapMemory.address:()J
       5: invokespecial #159                // Method releaseMemoryAt:(J)V
       8: return

  public void release(wvlet.airframe.canvas.MemoryReference);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #162                // Method wvlet/airframe/canvas/MemoryReference.address:()J
       5: invokespecial #159                // Method releaseMemoryAt:(J)V
       8: return

  private void releaseMemoryAt(long);
    Code:
       0: aload_0
       1: invokevirtual #164                // Method logger:()Lwvlet/log/Logger;
       4: getstatic     #167                // Field wvlet/log/LogLevel$DEBUG$.MODULE$:Lwvlet/log/LogLevel$DEBUG$;
       7: invokevirtual #171                // Method wvlet/log/Logger.isEnabled:(Lwvlet/log/LogLevel;)Z
      10: ifeq          77
      13: aload_0
      14: invokevirtual #164                // Method logger:()Lwvlet/log/Logger;
      17: getstatic     #167                // Field wvlet/log/LogLevel$DEBUG$.MODULE$:Lwvlet/log/LogLevel$DEBUG$;
      20: new           #173                // class wvlet/log/LogSource
      23: dup
      24: ldc           #175                // String /home/travis/build/wvlet/airframe/airframe-canvas/src/main/scala/wvlet/airframe/canvas/OffHeapMemoryAllocator.scala
      26: ldc           #176                // String OffHeapMemoryAllocator.scala
      28: bipush        77
      30: bipush        10
      32: invokespecial #179                // Method wvlet/log/LogSource."<init>":(Ljava/lang/String;Ljava/lang/String;II)V
      35: lload_1
      36: lstore        4
      38: new           #181                // class scala/collection/immutable/StringOps
      41: dup
      42: ldc           #183                // String Releasing memory at %x
      44: invokespecial #186                // Method scala/collection/immutable/StringOps."<init>":(Ljava/lang/String;)V
      47: getstatic     #191                // Field scala/Predef$.MODULE$:Lscala/Predef$;
      50: iconst_1
      51: anewarray     #4                  // class java/lang/Object
      54: dup
      55: iconst_0
      56: lload         4
      58: invokestatic  #141                // Method scala/runtime/BoxesRunTime.boxToLong:(J)Ljava/lang/Long;
      61: aastore
      62: invokevirtual #195                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
      65: invokevirtual #199                // Method scala/collection/immutable/StringOps.format:(Lscala/collection/Seq;)Ljava/lang/String;
      68: invokevirtual #203                // Method wvlet/log/Logger.log:(Lwvlet/log/LogLevel;Lwvlet/log/LogSource;Ljava/lang/Object;)V
      71: getstatic     #209                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      74: goto          80
      77: getstatic     #209                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
      80: pop
      81: aload_0
      82: invokespecial #133                // Method allocatedMemoryAddresses:()Lscala/collection/concurrent/Map;
      85: lload_1
      86: invokestatic  #141                // Method scala/runtime/BoxesRunTime.boxToLong:(J)Ljava/lang/Long;
      89: invokeinterface #212,  2          // InterfaceMethod scala/collection/concurrent/Map.get:(Ljava/lang/Object;)Lscala/Option;
      94: astore        6
      96: aload         6
      98: instanceof    #214                // class scala/Some
     101: ifeq          181
     104: aload         6
     106: checkcast     #214                // class scala/Some
     109: astore        7
     111: aload         7
     113: invokevirtual #218                // Method scala/Some.value:()Ljava/lang/Object;
     116: checkcast     #126                // class wvlet/airframe/canvas/MemoryRefHolder
     119: astore        8
     121: lload_1
     122: lconst_0
     123: lcmp
     124: ifeq          156
     127: getstatic     #93                 // Field wvlet/airframe/canvas/UnsafeUtil$.MODULE$:Lwvlet/airframe/canvas/UnsafeUtil$;
     130: invokevirtual #97                 // Method wvlet/airframe/canvas/UnsafeUtil$.unsafe:()Lsun/misc/Unsafe;
     133: lload_1
     134: invokevirtual #221                // Method sun/misc/Unsafe.freeMemory:(J)V
     137: aload_0
     138: invokespecial #79                 // Method totalAllocatedMemorySize:()Ljava/util/concurrent/atomic/AtomicLong;
     141: aload         8
     143: invokevirtual #222                // Method wvlet/airframe/canvas/MemoryRefHolder.size:()J
     146: lneg
     147: invokevirtual #225                // Method java/util/concurrent/atomic/AtomicLong.getAndAdd:(J)J
     150: invokestatic  #141                // Method scala/runtime/BoxesRunTime.boxToLong:(J)Ljava/lang/Long;
     153: goto          159
     156: getstatic     #209                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
     159: pop
     160: aload_0
     161: invokespecial #133                // Method allocatedMemoryAddresses:()Lscala/collection/concurrent/Map;
     164: lload_1
     165: invokestatic  #141                // Method scala/runtime/BoxesRunTime.boxToLong:(J)Ljava/lang/Long;
     168: invokeinterface #228,  2          // InterfaceMethod scala/collection/concurrent/Map.remove:(Ljava/lang/Object;)Lscala/Option;
     173: pop
     174: getstatic     #209                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
     177: astore_3
     178: goto          292
     181: goto          184
     184: getstatic     #233                // Field scala/None$.MODULE$:Lscala/None$;
     187: aload         6
     189: invokevirtual #237                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     192: ifeq          279
     195: aload_0
     196: invokevirtual #164                // Method logger:()Lwvlet/log/Logger;
     199: getstatic     #240                // Field wvlet/log/LogLevel$WARN$.MODULE$:Lwvlet/log/LogLevel$WARN$;
     202: invokevirtual #171                // Method wvlet/log/Logger.isEnabled:(Lwvlet/log/LogLevel;)Z
     205: ifeq          272
     208: aload_0
     209: invokevirtual #164                // Method logger:()Lwvlet/log/Logger;
     212: getstatic     #240                // Field wvlet/log/LogLevel$WARN$.MODULE$:Lwvlet/log/LogLevel$WARN$;
     215: new           #173                // class wvlet/log/LogSource
     218: dup
     219: ldc           #175                // String /home/travis/build/wvlet/airframe/airframe-canvas/src/main/scala/wvlet/airframe/canvas/OffHeapMemoryAllocator.scala
     221: ldc           #176                // String OffHeapMemoryAllocator.scala
     223: bipush        86
     225: bipush        13
     227: invokespecial #179                // Method wvlet/log/LogSource."<init>":(Ljava/lang/String;Ljava/lang/String;II)V
     230: lload_1
     231: lstore        9
     233: new           #181                // class scala/collection/immutable/StringOps
     236: dup
     237: ldc           #242                // String Unknown allocated memory address: %x
     239: invokespecial #186                // Method scala/collection/immutable/StringOps."<init>":(Ljava/lang/String;)V
     242: getstatic     #191                // Field scala/Predef$.MODULE$:Lscala/Predef$;
     245: iconst_1
     246: anewarray     #4                  // class java/lang/Object
     249: dup
     250: iconst_0
     251: lload         9
     253: invokestatic  #141                // Method scala/runtime/BoxesRunTime.boxToLong:(J)Ljava/lang/Long;
     256: aastore
     257: invokevirtual #195                // Method scala/Predef$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
     260: invokevirtual #199                // Method scala/collection/immutable/StringOps.format:(Lscala/collection/Seq;)Ljava/lang/String;
     263: invokevirtual #203                // Method wvlet/log/Logger.log:(Lwvlet/log/LogLevel;Lwvlet/log/LogSource;Ljava/lang/Object;)V
     266: getstatic     #209                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
     269: goto          275
     272: getstatic     #209                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
     275: astore_3
     276: goto          292
     279: goto          282
     282: new           #244                // class scala/MatchError
     285: dup
     286: aload         6
     288: invokespecial #247                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
     291: athrow
     292: return

  public void close();
    Code:
       0: aload_0
       1: invokespecial #133                // Method allocatedMemoryAddresses:()Lscala/collection/concurrent/Map;
       4: invokeinterface #258,  1          // InterfaceMethod scala/collection/concurrent/Map.keys:()Lscala/collection/Iterable;
       9: aload_0
      10: invokedynamic #279,  0            // InvokeDynamic #0:apply$mcVJ$sp:(Lwvlet/airframe/canvas/OffHeapMemoryAllocator;)Lscala/runtime/java8/JFunction1$mcVJ$sp;
      15: invokeinterface #285,  2          // InterfaceMethod scala/collection/Iterable.foreach:(Lscala/Function1;)V
      20: return

  public static final void $anonfun$close$1(wvlet.airframe.canvas.OffHeapMemoryAllocator, long);
    Code:
       0: aload_0
       1: lload_1
       2: invokespecial #159                // Method releaseMemoryAt:(J)V
       5: return

  public wvlet.airframe.canvas.OffHeapMemoryAllocator();
    Code:
       0: aload_0
       1: invokespecial #288                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #294                // InterfaceMethod wvlet/log/LoggingMethods.$init$:(Lwvlet/log/LoggingMethods;)V
       8: aload_0
       9: invokestatic  #297                // InterfaceMethod wvlet/log/LazyLogger.$init$:(Lwvlet/log/LazyLogger;)V
      12: aload_0
      13: getstatic     #302                // Field scala/jdk/CollectionConverters$.MODULE$:Lscala/jdk/CollectionConverters$;
      16: new           #304                // class java/util/concurrent/ConcurrentHashMap
      19: dup
      20: invokespecial #305                // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      23: invokevirtual #309                // Method scala/jdk/CollectionConverters$.mapAsScalaConcurrentMapConverter:(Ljava/util/concurrent/ConcurrentMap;)Lscala/collection/convert/Decorators$AsScala;
      26: invokevirtual #312                // Method scala/collection/convert/Decorators$AsScala.asScala:()Ljava/lang/Object;
      29: checkcast     #143                // class scala/collection/concurrent/Map
      32: putfield      #68                 // Field allocatedMemoryAddresses:Lscala/collection/concurrent/Map;
      35: aload_0
      36: new           #314                // class java/lang/ref/ReferenceQueue
      39: dup
      40: invokespecial #315                // Method java/lang/ref/ReferenceQueue."<init>":()V
      43: putfield      #72                 // Field wvlet$airframe$canvas$OffHeapMemoryAllocator$$memoryQueue:Ljava/lang/ref/ReferenceQueue;
      46: aload_0
      47: new           #81                 // class java/util/concurrent/atomic/AtomicLong
      50: dup
      51: lconst_0
      52: invokespecial #317                // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      55: putfield      #75                 // Field totalAllocatedMemorySize:Ljava/util/concurrent/atomic/AtomicLong;
      58: new           #319                // class java/lang/Thread
      61: dup
      62: new           #24                 // class wvlet/airframe/canvas/OffHeapMemoryAllocator$$anon$1
      65: dup
      66: aload_0
      67: invokespecial #322                // Method wvlet/airframe/canvas/OffHeapMemoryAllocator$$anon$1."<init>":(Lwvlet/airframe/canvas/OffHeapMemoryAllocator;)V
      70: invokespecial #325                // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;)V
      73: astore_1
      74: aload_1
      75: ldc_w         #327                // String AirframeCanvas-GC
      78: invokevirtual #330                // Method java/lang/Thread.setName:(Ljava/lang/String;)V
      81: aload_1
      82: iconst_1
      83: invokevirtual #334                // Method java/lang/Thread.setDaemon:(Z)V
      86: aload_0
      87: invokevirtual #164                // Method logger:()Lwvlet/log/Logger;
      90: getstatic     #167                // Field wvlet/log/LogLevel$DEBUG$.MODULE$:Lwvlet/log/LogLevel$DEBUG$;
      93: invokevirtual #171                // Method wvlet/log/Logger.isEnabled:(Lwvlet/log/LogLevel;)Z
      96: ifeq          133
      99: aload_0
     100: invokevirtual #164                // Method logger:()Lwvlet/log/Logger;
     103: getstatic     #167                // Field wvlet/log/LogLevel$DEBUG$.MODULE$:Lwvlet/log/LogLevel$DEBUG$;
     106: new           #173                // class wvlet/log/LogSource
     109: dup
     110: ldc           #175                // String /home/travis/build/wvlet/airframe/airframe-canvas/src/main/scala/wvlet/airframe/canvas/OffHeapMemoryAllocator.scala
     112: ldc           #176                // String OffHeapMemoryAllocator.scala
     114: bipush        45
     116: bipush        17
     118: invokespecial #179                // Method wvlet/log/LogSource."<init>":(Ljava/lang/String;Ljava/lang/String;II)V
     121: ldc_w         #336                // String Start Canvas-GC memory collector
     124: invokevirtual #203                // Method wvlet/log/Logger.log:(Lwvlet/log/LogLevel;Lwvlet/log/LogSource;Ljava/lang/Object;)V
     127: getstatic     #209                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
     130: goto          136
     133: getstatic     #209                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
     136: pop
     137: aload_1
     138: invokevirtual #339                // Method java/lang/Thread.start:()V
     141: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #353,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
