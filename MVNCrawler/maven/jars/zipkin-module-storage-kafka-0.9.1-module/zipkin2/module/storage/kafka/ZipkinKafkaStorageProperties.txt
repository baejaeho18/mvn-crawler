Compiled from "ZipkinKafkaStorageProperties.java"
public class zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties implements java.io.Serializable {
  private static final long serialVersionUID;

  private java.lang.String hostname;

  private java.lang.String storageDir;

  private java.lang.String bootstrapServers;

  private java.util.Map<java.lang.String, java.lang.String> overrides;

  private zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$SpanPartitioningProperties spanPartitioning;

  private zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$SpanAggregationProperties spanAggregation;

  private zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$TraceStorageProperties traceStorage;

  private zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$DependencyStorageProperties dependencyStorage;

  public zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/LinkedHashMap
       8: dup
       9: invokespecial #3                  // Method java/util/LinkedHashMap."<init>":()V
      12: putfield      #4                  // Field overrides:Ljava/util/Map;
      15: aload_0
      16: new           #5                  // class zipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$SpanPartitioningProperties
      19: dup
      20: invokespecial #6                  // Method zipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$SpanPartitioningProperties."<init>":()V
      23: putfield      #7                  // Field spanPartitioning:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$SpanPartitioningProperties;
      26: aload_0
      27: new           #8                  // class zipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$SpanAggregationProperties
      30: dup
      31: invokespecial #9                  // Method zipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$SpanAggregationProperties."<init>":()V
      34: putfield      #10                 // Field spanAggregation:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$SpanAggregationProperties;
      37: aload_0
      38: new           #11                 // class zipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$TraceStorageProperties
      41: dup
      42: invokespecial #12                 // Method zipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$TraceStorageProperties."<init>":()V
      45: putfield      #13                 // Field traceStorage:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$TraceStorageProperties;
      48: aload_0
      49: new           #14                 // class zipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$DependencyStorageProperties
      52: dup
      53: invokespecial #15                 // Method zipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$DependencyStorageProperties."<init>":()V
      56: putfield      #16                 // Field dependencyStorage:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$DependencyStorageProperties;
      59: return

  zipkin2.storage.kafka.KafkaStorageBuilder toBuilder();
    Code:
       0: invokestatic  #17                 // Method zipkin2/storage/kafka/KafkaStorage.newBuilder:()Lzipkin2/storage/kafka/KafkaStorageBuilder;
       3: astore_1
       4: aload_1
       5: aload_0
       6: getfield      #7                  // Field spanPartitioning:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$SpanPartitioningProperties;
       9: invokevirtual #18                 // Method zipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$SpanPartitioningProperties.toBuilder:()Lzipkin2/storage/kafka/KafkaStorageBuilder$SpanPartitioningBuilder;
      12: invokevirtual #19                 // Method zipkin2/storage/kafka/KafkaStorageBuilder.spanPartitioningBuilder:(Lzipkin2/storage/kafka/KafkaStorageBuilder$SpanPartitioningBuilder;)Lzipkin2/storage/kafka/KafkaStorageBuilder;
      15: pop
      16: aload_1
      17: aload_0
      18: getfield      #10                 // Field spanAggregation:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$SpanAggregationProperties;
      21: invokevirtual #20                 // Method zipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$SpanAggregationProperties.toBuilder:()Lzipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder;
      24: invokevirtual #21                 // Method zipkin2/storage/kafka/KafkaStorageBuilder.spanAggregationBuilder:(Lzipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder;)Lzipkin2/storage/kafka/KafkaStorageBuilder;
      27: pop
      28: aload_1
      29: aload_0
      30: getfield      #13                 // Field traceStorage:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$TraceStorageProperties;
      33: invokevirtual #22                 // Method zipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$TraceStorageProperties.toBuilder:()Lzipkin2/storage/kafka/KafkaStorageBuilder$TraceStorageBuilder;
      36: invokevirtual #23                 // Method zipkin2/storage/kafka/KafkaStorageBuilder.traceStorageBuilder:(Lzipkin2/storage/kafka/KafkaStorageBuilder$TraceStorageBuilder;)Lzipkin2/storage/kafka/KafkaStorageBuilder;
      39: pop
      40: aload_1
      41: aload_0
      42: getfield      #16                 // Field dependencyStorage:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$DependencyStorageProperties;
      45: invokevirtual #24                 // Method zipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$DependencyStorageProperties.toBuilder:()Lzipkin2/storage/kafka/KafkaStorageBuilder$DependencyStorageBuilder;
      48: invokevirtual #25                 // Method zipkin2/storage/kafka/KafkaStorageBuilder.dependencyStorageBuilder:(Lzipkin2/storage/kafka/KafkaStorageBuilder$DependencyStorageBuilder;)Lzipkin2/storage/kafka/KafkaStorageBuilder;
      51: pop
      52: aload_0
      53: getfield      #26                 // Field hostname:Ljava/lang/String;
      56: ifnull        68
      59: aload_1
      60: aload_0
      61: getfield      #26                 // Field hostname:Ljava/lang/String;
      64: invokevirtual #27                 // Method zipkin2/storage/kafka/KafkaStorageBuilder.hostname:(Ljava/lang/String;)Lzipkin2/storage/kafka/KafkaStorageBuilder;
      67: pop
      68: aload_0
      69: getfield      #28                 // Field storageDir:Ljava/lang/String;
      72: ifnull        84
      75: aload_1
      76: aload_0
      77: getfield      #28                 // Field storageDir:Ljava/lang/String;
      80: invokevirtual #29                 // Method zipkin2/storage/kafka/KafkaStorageBuilder.storageStateDir:(Ljava/lang/String;)Lzipkin2/storage/kafka/KafkaStorageBuilder;
      83: pop
      84: aload_0
      85: getfield      #30                 // Field bootstrapServers:Ljava/lang/String;
      88: ifnull        100
      91: aload_1
      92: aload_0
      93: getfield      #30                 // Field bootstrapServers:Ljava/lang/String;
      96: invokevirtual #31                 // Method zipkin2/storage/kafka/KafkaStorageBuilder.bootstrapServers:(Ljava/lang/String;)Lzipkin2/storage/kafka/KafkaStorageBuilder;
      99: pop
     100: aload_0
     101: getfield      #4                  // Field overrides:Ljava/util/Map;
     104: ifnull        116
     107: aload_1
     108: aload_0
     109: getfield      #4                  // Field overrides:Ljava/util/Map;
     112: invokevirtual #32                 // Method zipkin2/storage/kafka/KafkaStorageBuilder.overrides:(Ljava/util/Map;)Lzipkin2/storage/kafka/KafkaStorageBuilder;
     115: pop
     116: aload_1
     117: areturn

  public java.lang.String getHostname();
    Code:
       0: aload_0
       1: getfield      #26                 // Field hostname:Ljava/lang/String;
       4: areturn

  public void setHostname(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #26                 // Field hostname:Ljava/lang/String;
       5: return

  public java.lang.String getBootstrapServers();
    Code:
       0: aload_0
       1: getfield      #30                 // Field bootstrapServers:Ljava/lang/String;
       4: areturn

  public void setBootstrapServers(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field bootstrapServers:Ljava/lang/String;
       5: return

  public java.lang.String getStorageDir();
    Code:
       0: aload_0
       1: getfield      #28                 // Field storageDir:Ljava/lang/String;
       4: areturn

  public void setStorageDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field storageDir:Ljava/lang/String;
       5: return

  public java.util.Map<java.lang.String, java.lang.String> getOverrides();
    Code:
       0: aload_0
       1: getfield      #4                  // Field overrides:Ljava/util/Map;
       4: areturn

  public void setOverrides(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field overrides:Ljava/util/Map;
       5: return

  public zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$SpanPartitioningProperties getSpanPartitioning();
    Code:
       0: aload_0
       1: getfield      #7                  // Field spanPartitioning:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$SpanPartitioningProperties;
       4: areturn

  public void setSpanPartitioning(zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$SpanPartitioningProperties);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field spanPartitioning:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$SpanPartitioningProperties;
       5: return

  public zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$SpanAggregationProperties getSpanAggregation();
    Code:
       0: aload_0
       1: getfield      #10                 // Field spanAggregation:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$SpanAggregationProperties;
       4: areturn

  public void setSpanAggregation(zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$SpanAggregationProperties);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field spanAggregation:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$SpanAggregationProperties;
       5: return

  public zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$TraceStorageProperties getTraceStorage();
    Code:
       0: aload_0
       1: getfield      #13                 // Field traceStorage:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$TraceStorageProperties;
       4: areturn

  public void setTraceStorage(zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$TraceStorageProperties);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field traceStorage:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$TraceStorageProperties;
       5: return

  public zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$DependencyStorageProperties getDependencyStorage();
    Code:
       0: aload_0
       1: getfield      #16                 // Field dependencyStorage:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$DependencyStorageProperties;
       4: areturn

  public void setDependencyStorage(zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$DependencyStorageProperties);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field dependencyStorage:Lzipkin2/module/storage/kafka/ZipkinKafkaStorageProperties$DependencyStorageProperties;
       5: return
}
