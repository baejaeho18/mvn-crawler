Compiled from "ZipkinKafkaStorageProperties.java"
class zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$SpanAggregationProperties {
  private java.lang.Boolean enabled;

  private java.lang.String spansTopic;

  private java.lang.String traceTopic;

  private java.lang.String dependencyTopic;

  private java.lang.Long traceTimeout;

  private java.util.Map<java.lang.String, java.lang.String> overrides;

  zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$SpanAggregationProperties();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/LinkedHashMap
       8: dup
       9: invokespecial #3                  // Method java/util/LinkedHashMap."<init>":()V
      12: putfield      #4                  // Field overrides:Ljava/util/Map;
      15: return

  public java.lang.Boolean getEnabled();
    Code:
       0: aload_0
       1: getfield      #5                  // Field enabled:Ljava/lang/Boolean;
       4: areturn

  public void setEnabled(java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field enabled:Ljava/lang/Boolean;
       5: return

  public java.lang.String getSpansTopic();
    Code:
       0: aload_0
       1: getfield      #6                  // Field spansTopic:Ljava/lang/String;
       4: areturn

  public void setSpansTopic(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field spansTopic:Ljava/lang/String;
       5: return

  public java.lang.String getTraceTopic();
    Code:
       0: aload_0
       1: getfield      #7                  // Field traceTopic:Ljava/lang/String;
       4: areturn

  public void setTraceTopic(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field traceTopic:Ljava/lang/String;
       5: return

  public java.lang.String getDependencyTopic();
    Code:
       0: aload_0
       1: getfield      #8                  // Field dependencyTopic:Ljava/lang/String;
       4: areturn

  public void setDependencyTopic(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field dependencyTopic:Ljava/lang/String;
       5: return

  public java.lang.Long getTraceTimeout();
    Code:
       0: aload_0
       1: getfield      #9                  // Field traceTimeout:Ljava/lang/Long;
       4: areturn

  public void setTraceTimeout(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field traceTimeout:Ljava/lang/Long;
       5: return

  public java.util.Map<java.lang.String, java.lang.String> getOverrides();
    Code:
       0: aload_0
       1: getfield      #4                  // Field overrides:Ljava/util/Map;
       4: areturn

  public void setOverrides(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field overrides:Ljava/util/Map;
       5: return

  zipkin2.storage.kafka.KafkaStorageBuilder$SpanAggregationBuilder toBuilder();
    Code:
       0: new           #10                 // class zipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder
       3: dup
       4: invokespecial #11                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #5                  // Field enabled:Ljava/lang/Boolean;
      12: ifnull        27
      15: aload_1
      16: aload_0
      17: getfield      #5                  // Field enabled:Ljava/lang/Boolean;
      20: invokevirtual #12                 // Method java/lang/Boolean.booleanValue:()Z
      23: invokevirtual #13                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder.enabled:(Z)Lzipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder;
      26: pop
      27: aload_0
      28: getfield      #9                  // Field traceTimeout:Ljava/lang/Long;
      31: ifnull        49
      34: aload_1
      35: aload_0
      36: getfield      #9                  // Field traceTimeout:Ljava/lang/Long;
      39: invokevirtual #14                 // Method java/lang/Long.longValue:()J
      42: invokestatic  #15                 // Method java/time/Duration.ofMillis:(J)Ljava/time/Duration;
      45: invokevirtual #16                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder.traceTimeout:(Ljava/time/Duration;)Lzipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder;
      48: pop
      49: aload_0
      50: getfield      #6                  // Field spansTopic:Ljava/lang/String;
      53: ifnull        65
      56: aload_1
      57: aload_0
      58: getfield      #6                  // Field spansTopic:Ljava/lang/String;
      61: invokevirtual #17                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder.spansTopic:(Ljava/lang/String;)Lzipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder;
      64: pop
      65: aload_0
      66: getfield      #7                  // Field traceTopic:Ljava/lang/String;
      69: ifnull        81
      72: aload_1
      73: aload_0
      74: getfield      #7                  // Field traceTopic:Ljava/lang/String;
      77: invokevirtual #18                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder.traceTopic:(Ljava/lang/String;)Lzipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder;
      80: pop
      81: aload_0
      82: getfield      #8                  // Field dependencyTopic:Ljava/lang/String;
      85: ifnull        97
      88: aload_1
      89: aload_0
      90: getfield      #8                  // Field dependencyTopic:Ljava/lang/String;
      93: invokevirtual #19                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder.dependencyTopic:(Ljava/lang/String;)Lzipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder;
      96: pop
      97: aload_0
      98: getfield      #4                  // Field overrides:Ljava/util/Map;
     101: ifnull        113
     104: aload_1
     105: aload_0
     106: getfield      #4                  // Field overrides:Ljava/util/Map;
     109: invokevirtual #20                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder.overrides:(Ljava/util/Map;)Lzipkin2/storage/kafka/KafkaStorageBuilder$SpanAggregationBuilder;
     112: pop
     113: aload_1
     114: areturn
}
