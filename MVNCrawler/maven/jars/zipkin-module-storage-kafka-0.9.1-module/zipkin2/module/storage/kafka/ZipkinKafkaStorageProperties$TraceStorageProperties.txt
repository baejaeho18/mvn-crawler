Compiled from "ZipkinKafkaStorageProperties.java"
class zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$TraceStorageProperties {
  private java.lang.Boolean enabled;

  private java.lang.String spansTopic;

  private java.lang.Long ttlCheckInterval;

  private java.lang.Long ttl;

  private java.util.Map<java.lang.String, java.lang.String> overrides;

  zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$TraceStorageProperties();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/LinkedHashMap
       8: dup
       9: invokespecial #3                  // Method java/util/LinkedHashMap."<init>":()V
      12: putfield      #4                  // Field overrides:Ljava/util/Map;
      15: return

  public java.lang.Boolean getEnabled();
    Code:
       0: aload_0
       1: getfield      #5                  // Field enabled:Ljava/lang/Boolean;
       4: areturn

  public void setEnabled(java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field enabled:Ljava/lang/Boolean;
       5: return

  public java.lang.String getSpansTopic();
    Code:
       0: aload_0
       1: getfield      #6                  // Field spansTopic:Ljava/lang/String;
       4: areturn

  public void setSpansTopic(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field spansTopic:Ljava/lang/String;
       5: return

  public java.lang.Long getTtlCheckInterval();
    Code:
       0: aload_0
       1: getfield      #7                  // Field ttlCheckInterval:Ljava/lang/Long;
       4: areturn

  public void setTtlCheckInterval(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field ttlCheckInterval:Ljava/lang/Long;
       5: return

  public java.lang.Long getTtl();
    Code:
       0: aload_0
       1: getfield      #8                  // Field ttl:Ljava/lang/Long;
       4: areturn

  public void setTtl(java.lang.Long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field ttl:Ljava/lang/Long;
       5: return

  public java.util.Map<java.lang.String, java.lang.String> getOverrides();
    Code:
       0: aload_0
       1: getfield      #4                  // Field overrides:Ljava/util/Map;
       4: areturn

  public void setOverrides(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field overrides:Ljava/util/Map;
       5: return

  zipkin2.storage.kafka.KafkaStorageBuilder$TraceStorageBuilder toBuilder();
    Code:
       0: new           #9                  // class zipkin2/storage/kafka/KafkaStorageBuilder$TraceStorageBuilder
       3: dup
       4: invokespecial #10                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$TraceStorageBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #5                  // Field enabled:Ljava/lang/Boolean;
      12: ifnull        27
      15: aload_1
      16: aload_0
      17: getfield      #5                  // Field enabled:Ljava/lang/Boolean;
      20: invokevirtual #11                 // Method java/lang/Boolean.booleanValue:()Z
      23: invokevirtual #12                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$TraceStorageBuilder.enabled:(Z)Lzipkin2/storage/kafka/KafkaStorageBuilder$TraceStorageBuilder;
      26: pop
      27: aload_0
      28: getfield      #7                  // Field ttlCheckInterval:Ljava/lang/Long;
      31: ifnull        49
      34: aload_1
      35: aload_0
      36: getfield      #7                  // Field ttlCheckInterval:Ljava/lang/Long;
      39: invokevirtual #13                 // Method java/lang/Long.longValue:()J
      42: invokestatic  #14                 // Method java/time/Duration.ofMillis:(J)Ljava/time/Duration;
      45: invokevirtual #15                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$TraceStorageBuilder.ttlCheckInterval:(Ljava/time/Duration;)Lzipkin2/storage/kafka/KafkaStorageBuilder$TraceStorageBuilder;
      48: pop
      49: aload_0
      50: getfield      #8                  // Field ttl:Ljava/lang/Long;
      53: ifnull        71
      56: aload_1
      57: aload_0
      58: getfield      #8                  // Field ttl:Ljava/lang/Long;
      61: invokevirtual #13                 // Method java/lang/Long.longValue:()J
      64: invokestatic  #14                 // Method java/time/Duration.ofMillis:(J)Ljava/time/Duration;
      67: invokevirtual #16                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$TraceStorageBuilder.ttl:(Ljava/time/Duration;)Lzipkin2/storage/kafka/KafkaStorageBuilder$TraceStorageBuilder;
      70: pop
      71: aload_0
      72: getfield      #6                  // Field spansTopic:Ljava/lang/String;
      75: ifnull        87
      78: aload_1
      79: aload_0
      80: getfield      #6                  // Field spansTopic:Ljava/lang/String;
      83: invokevirtual #17                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$TraceStorageBuilder.spansTopic:(Ljava/lang/String;)Lzipkin2/storage/kafka/KafkaStorageBuilder$TraceStorageBuilder;
      86: pop
      87: aload_0
      88: getfield      #4                  // Field overrides:Ljava/util/Map;
      91: ifnull        103
      94: aload_1
      95: aload_0
      96: getfield      #4                  // Field overrides:Ljava/util/Map;
      99: invokevirtual #18                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$TraceStorageBuilder.overrides:(Ljava/util/Map;)Lzipkin2/storage/kafka/KafkaStorageBuilder$TraceStorageBuilder;
     102: pop
     103: aload_1
     104: areturn
}
