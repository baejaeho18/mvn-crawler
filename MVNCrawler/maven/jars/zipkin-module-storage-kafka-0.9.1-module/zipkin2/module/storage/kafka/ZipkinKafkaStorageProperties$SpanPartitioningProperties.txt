Compiled from "ZipkinKafkaStorageProperties.java"
class zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$SpanPartitioningProperties {
  private java.lang.Boolean enabled;

  private java.lang.String spansTopic;

  private java.util.Map<java.lang.String, java.lang.String> overrides;

  zipkin2.module.storage.kafka.ZipkinKafkaStorageProperties$SpanPartitioningProperties();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/LinkedHashMap
       8: dup
       9: invokespecial #3                  // Method java/util/LinkedHashMap."<init>":()V
      12: putfield      #4                  // Field overrides:Ljava/util/Map;
      15: return

  public java.lang.Boolean getEnabled();
    Code:
       0: aload_0
       1: getfield      #5                  // Field enabled:Ljava/lang/Boolean;
       4: areturn

  public void setEnabled(java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field enabled:Ljava/lang/Boolean;
       5: return

  public java.lang.String getSpansTopic();
    Code:
       0: aload_0
       1: getfield      #6                  // Field spansTopic:Ljava/lang/String;
       4: areturn

  public void setSpansTopic(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field spansTopic:Ljava/lang/String;
       5: return

  public java.util.Map<java.lang.String, java.lang.String> getOverrides();
    Code:
       0: aload_0
       1: getfield      #4                  // Field overrides:Ljava/util/Map;
       4: areturn

  public void setOverrides(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field overrides:Ljava/util/Map;
       5: return

  zipkin2.storage.kafka.KafkaStorageBuilder$SpanPartitioningBuilder toBuilder();
    Code:
       0: new           #7                  // class zipkin2/storage/kafka/KafkaStorageBuilder$SpanPartitioningBuilder
       3: dup
       4: invokespecial #8                  // Method zipkin2/storage/kafka/KafkaStorageBuilder$SpanPartitioningBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #5                  // Field enabled:Ljava/lang/Boolean;
      12: ifnull        27
      15: aload_1
      16: aload_0
      17: getfield      #5                  // Field enabled:Ljava/lang/Boolean;
      20: invokevirtual #9                  // Method java/lang/Boolean.booleanValue:()Z
      23: invokevirtual #10                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$SpanPartitioningBuilder.enabled:(Z)Lzipkin2/storage/kafka/KafkaStorageBuilder$SpanPartitioningBuilder;
      26: pop
      27: aload_0
      28: getfield      #6                  // Field spansTopic:Ljava/lang/String;
      31: ifnull        43
      34: aload_1
      35: aload_0
      36: getfield      #6                  // Field spansTopic:Ljava/lang/String;
      39: invokevirtual #11                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$SpanPartitioningBuilder.spansTopic:(Ljava/lang/String;)Lzipkin2/storage/kafka/KafkaStorageBuilder$SpanPartitioningBuilder;
      42: pop
      43: aload_0
      44: getfield      #4                  // Field overrides:Ljava/util/Map;
      47: ifnull        59
      50: aload_1
      51: aload_0
      52: getfield      #4                  // Field overrides:Ljava/util/Map;
      55: invokevirtual #12                 // Method zipkin2/storage/kafka/KafkaStorageBuilder$SpanPartitioningBuilder.overrides:(Ljava/util/Map;)Lzipkin2/storage/kafka/KafkaStorageBuilder$SpanPartitioningBuilder;
      58: pop
      59: aload_1
      60: areturn
}
