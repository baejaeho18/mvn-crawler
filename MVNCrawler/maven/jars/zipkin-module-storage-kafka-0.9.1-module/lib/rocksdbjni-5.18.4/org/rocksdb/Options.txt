Compiled from "Options.java"
public class org.rocksdb.Options extends org.rocksdb.RocksObject implements org.rocksdb.DBOptionsInterface<org.rocksdb.Options>, org.rocksdb.ColumnFamilyOptionsInterface<org.rocksdb.Options>, org.rocksdb.MutableColumnFamilyOptionsInterface<org.rocksdb.Options> {
  private org.rocksdb.Env env_;

  private org.rocksdb.MemTableConfig memTableConfig_;

  private org.rocksdb.TableFormatConfig tableFormatConfig_;

  private org.rocksdb.RateLimiter rateLimiter_;

  private org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>> comparator_;

  private org.rocksdb.CompactionOptionsUniversal compactionOptionsUniversal_;

  private org.rocksdb.CompactionOptionsFIFO compactionOptionsFIFO_;

  private org.rocksdb.CompressionOptions compressionOptions_;

  private org.rocksdb.Cache rowCache_;

  private org.rocksdb.WriteBufferManager writeBufferManager_;

  static final boolean $assertionsDisabled;

  public org.rocksdb.Options();
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method newOptions:()J
       4: invokespecial #2                  // Method org/rocksdb/RocksObject."<init>":(J)V
       7: aload_0
       8: invokestatic  #3                  // Method org/rocksdb/Env.getDefault:()Lorg/rocksdb/Env;
      11: putfield      #4                  // Field env_:Lorg/rocksdb/Env;
      14: return

  public org.rocksdb.Options(org.rocksdb.DBOptions, org.rocksdb.ColumnFamilyOptions);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #5                  // Field org/rocksdb/DBOptions.nativeHandle_:J
       5: aload_2
       6: getfield      #6                  // Field org/rocksdb/ColumnFamilyOptions.nativeHandle_:J
       9: invokestatic  #7                  // Method newOptions:(JJ)J
      12: invokespecial #2                  // Method org/rocksdb/RocksObject."<init>":(J)V
      15: aload_0
      16: invokestatic  #3                  // Method org/rocksdb/Env.getDefault:()Lorg/rocksdb/Env;
      19: putfield      #4                  // Field env_:Lorg/rocksdb/Env;
      22: return

  public org.rocksdb.Options(org.rocksdb.Options);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokestatic  #9                  // Method copyOptions:(J)J
       8: invokespecial #2                  // Method org/rocksdb/RocksObject."<init>":(J)V
      11: aload_0
      12: aload_1
      13: getfield      #4                  // Field env_:Lorg/rocksdb/Env;
      16: putfield      #4                  // Field env_:Lorg/rocksdb/Env;
      19: aload_0
      20: aload_1
      21: getfield      #10                 // Field memTableConfig_:Lorg/rocksdb/MemTableConfig;
      24: putfield      #10                 // Field memTableConfig_:Lorg/rocksdb/MemTableConfig;
      27: aload_0
      28: aload_1
      29: getfield      #11                 // Field tableFormatConfig_:Lorg/rocksdb/TableFormatConfig;
      32: putfield      #11                 // Field tableFormatConfig_:Lorg/rocksdb/TableFormatConfig;
      35: aload_0
      36: aload_1
      37: getfield      #12                 // Field rateLimiter_:Lorg/rocksdb/RateLimiter;
      40: putfield      #12                 // Field rateLimiter_:Lorg/rocksdb/RateLimiter;
      43: aload_0
      44: aload_1
      45: getfield      #13                 // Field comparator_:Lorg/rocksdb/AbstractComparator;
      48: putfield      #13                 // Field comparator_:Lorg/rocksdb/AbstractComparator;
      51: aload_0
      52: aload_1
      53: getfield      #14                 // Field compactionOptionsUniversal_:Lorg/rocksdb/CompactionOptionsUniversal;
      56: putfield      #14                 // Field compactionOptionsUniversal_:Lorg/rocksdb/CompactionOptionsUniversal;
      59: aload_0
      60: aload_1
      61: getfield      #15                 // Field compactionOptionsFIFO_:Lorg/rocksdb/CompactionOptionsFIFO;
      64: putfield      #15                 // Field compactionOptionsFIFO_:Lorg/rocksdb/CompactionOptionsFIFO;
      67: aload_0
      68: aload_1
      69: getfield      #16                 // Field compressionOptions_:Lorg/rocksdb/CompressionOptions;
      72: putfield      #16                 // Field compressionOptions_:Lorg/rocksdb/CompressionOptions;
      75: aload_0
      76: aload_1
      77: getfield      #17                 // Field rowCache_:Lorg/rocksdb/Cache;
      80: putfield      #17                 // Field rowCache_:Lorg/rocksdb/Cache;
      83: aload_0
      84: aload_1
      85: getfield      #18                 // Field writeBufferManager_:Lorg/rocksdb/WriteBufferManager;
      88: putfield      #18                 // Field writeBufferManager_:Lorg/rocksdb/WriteBufferManager;
      91: return

  public org.rocksdb.Options setIncreaseParallelism(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #23                 // Method setIncreaseParallelism:(JI)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setCreateIfMissing(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #24                 // Method setCreateIfMissing:(JZ)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setCreateMissingColumnFamilies(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #25                 // Method setCreateMissingColumnFamilies:(JZ)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setEnv(org.rocksdb.Env);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #26                 // Field org/rocksdb/Env.nativeHandle_:J
      30: invokespecial #27                 // Method setEnv:(JJ)V
      33: aload_0
      34: aload_1
      35: putfield      #4                  // Field env_:Lorg/rocksdb/Env;
      38: aload_0
      39: areturn

  public org.rocksdb.Env getEnv();
    Code:
       0: aload_0
       1: getfield      #4                  // Field env_:Lorg/rocksdb/Env;
       4: areturn

  public org.rocksdb.Options prepareForBulkLoad();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #28                 // Method prepareForBulkLoad:(J)V
       8: aload_0
       9: areturn

  public boolean createIfMissing();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #29                 // Method createIfMissing:(J)Z
      29: ireturn

  public boolean createMissingColumnFamilies();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #30                 // Method createMissingColumnFamilies:(J)Z
      29: ireturn

  public org.rocksdb.Options optimizeForSmallDb();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #31                 // Method optimizeForSmallDb:(J)V
       8: aload_0
       9: areturn

  public org.rocksdb.Options optimizeForPointLookup(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #32                 // Method optimizeForPointLookup:(JJ)V
       9: aload_0
      10: areturn

  public org.rocksdb.Options optimizeLevelStyleCompaction();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: ldc2_w        #33                 // long 536870912l
       8: invokespecial #35                 // Method optimizeLevelStyleCompaction:(JJ)V
      11: aload_0
      12: areturn

  public org.rocksdb.Options optimizeLevelStyleCompaction(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #35                 // Method optimizeLevelStyleCompaction:(JJ)V
       9: aload_0
      10: areturn

  public org.rocksdb.Options optimizeUniversalStyleCompaction();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: ldc2_w        #33                 // long 536870912l
       8: invokespecial #36                 // Method optimizeUniversalStyleCompaction:(JJ)V
      11: aload_0
      12: areturn

  public org.rocksdb.Options optimizeUniversalStyleCompaction(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #36                 // Method optimizeUniversalStyleCompaction:(JJ)V
       9: aload_0
      10: areturn

  public org.rocksdb.Options setComparator(org.rocksdb.BuiltinComparator);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: aload_1
      27: invokevirtual #37                 // Method org/rocksdb/BuiltinComparator.ordinal:()I
      30: invokespecial #38                 // Method setComparatorHandle:(JI)V
      33: aload_0
      34: areturn

  public org.rocksdb.Options setComparator(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #39                 // Field org/rocksdb/AbstractComparator.nativeHandle_:J
      30: aload_1
      31: invokevirtual #40                 // Method org/rocksdb/AbstractComparator.getComparatorType:()Lorg/rocksdb/ComparatorType;
      34: invokevirtual #41                 // Method org/rocksdb/ComparatorType.getValue:()B
      37: invokespecial #42                 // Method setComparatorHandle:(JJB)V
      40: aload_0
      41: aload_1
      42: putfield      #13                 // Field comparator_:Lorg/rocksdb/AbstractComparator;
      45: aload_0
      46: areturn

  public org.rocksdb.Options setMergeOperatorName(java.lang.String);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_1
      22: ifnonnull     35
      25: new           #43                 // class java/lang/IllegalArgumentException
      28: dup
      29: ldc           #44                 // String Merge operator name must not be null.
      31: invokespecial #45                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: aload_0
      37: getfield      #8                  // Field nativeHandle_:J
      40: aload_1
      41: invokespecial #46                 // Method setMergeOperatorName:(JLjava/lang/String;)V
      44: aload_0
      45: areturn

  public org.rocksdb.Options setMergeOperator(org.rocksdb.MergeOperator);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: aload_1
       6: getfield      #47                 // Field org/rocksdb/MergeOperator.nativeHandle_:J
       9: invokespecial #48                 // Method setMergeOperator:(JJ)V
      12: aload_0
      13: areturn

  public org.rocksdb.Options setWriteBufferSize(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #49                 // Method setWriteBufferSize:(JJ)V
      30: aload_0
      31: areturn

  public long writeBufferSize();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #50                 // Method writeBufferSize:(J)J
      29: lreturn

  public org.rocksdb.Options setMaxWriteBufferNumber(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #51                 // Method setMaxWriteBufferNumber:(JI)V
      30: aload_0
      31: areturn

  public int maxWriteBufferNumber();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #52                 // Method maxWriteBufferNumber:(J)I
      29: ireturn

  public boolean errorIfExists();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #53                 // Method errorIfExists:(J)Z
      29: ireturn

  public org.rocksdb.Options setErrorIfExists(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #54                 // Method setErrorIfExists:(JZ)V
      30: aload_0
      31: areturn

  public boolean paranoidChecks();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #55                 // Method paranoidChecks:(J)Z
      29: ireturn

  public org.rocksdb.Options setParanoidChecks(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #56                 // Method setParanoidChecks:(JZ)V
      30: aload_0
      31: areturn

  public int maxOpenFiles();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #57                 // Method maxOpenFiles:(J)I
      29: ireturn

  public org.rocksdb.Options setMaxFileOpeningThreads(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #58                 // Method setMaxFileOpeningThreads:(JI)V
      30: aload_0
      31: areturn

  public int maxFileOpeningThreads();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #59                 // Method maxFileOpeningThreads:(J)I
      29: ireturn

  public org.rocksdb.Options setMaxTotalWalSize(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #60                 // Method setMaxTotalWalSize:(JJ)V
      30: aload_0
      31: areturn

  public long maxTotalWalSize();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #61                 // Method maxTotalWalSize:(J)J
      29: lreturn

  public org.rocksdb.Options setMaxOpenFiles(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #62                 // Method setMaxOpenFiles:(JI)V
      30: aload_0
      31: areturn

  public boolean useFsync();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #63                 // Method useFsync:(J)Z
      29: ireturn

  public org.rocksdb.Options setUseFsync(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #64                 // Method setUseFsync:(JZ)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setDbPaths(java.util.Collection<org.rocksdb.DbPath>);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_1
      22: invokeinterface #65,  1           // InterfaceMethod java/util/Collection.size:()I
      27: istore_2
      28: iload_2
      29: anewarray     #66                 // class java/lang/String
      32: astore_3
      33: iload_2
      34: newarray       long
      36: astore        4
      38: iconst_0
      39: istore        5
      41: aload_1
      42: invokeinterface #67,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      47: astore        6
      49: aload         6
      51: invokeinterface #68,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      56: ifeq          101
      59: aload         6
      61: invokeinterface #69,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      66: checkcast     #70                 // class org/rocksdb/DbPath
      69: astore        7
      71: aload_3
      72: iload         5
      74: aload         7
      76: getfield      #71                 // Field org/rocksdb/DbPath.path:Ljava/nio/file/Path;
      79: invokeinterface #72,  1           // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;
      84: aastore
      85: aload         4
      87: iload         5
      89: aload         7
      91: getfield      #73                 // Field org/rocksdb/DbPath.targetSize:J
      94: lastore
      95: iinc          5, 1
      98: goto          49
     101: aload_0
     102: aload_0
     103: getfield      #8                  // Field nativeHandle_:J
     106: aload_3
     107: aload         4
     109: invokespecial #74                 // Method setDbPaths:(J[Ljava/lang/String;[J)V
     112: aload_0
     113: areturn

  public java.util.List<org.rocksdb.DbPath> dbPaths();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #75                 // Method dbPathsLen:(J)J
       8: l2i
       9: istore_1
      10: iload_1
      11: ifne          18
      14: invokestatic  #76                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      17: areturn
      18: iload_1
      19: anewarray     #66                 // class java/lang/String
      22: astore_2
      23: iload_1
      24: newarray       long
      26: astore_3
      27: aload_0
      28: aload_0
      29: getfield      #8                  // Field nativeHandle_:J
      32: aload_2
      33: aload_3
      34: invokespecial #77                 // Method dbPaths:(J[Ljava/lang/String;[J)V
      37: new           #78                 // class java/util/ArrayList
      40: dup
      41: invokespecial #79                 // Method java/util/ArrayList."<init>":()V
      44: astore        4
      46: iconst_0
      47: istore        5
      49: iload         5
      51: iload_1
      52: if_icmpge     91
      55: aload         4
      57: new           #70                 // class org/rocksdb/DbPath
      60: dup
      61: aload_2
      62: iload         5
      64: aaload
      65: iconst_0
      66: anewarray     #66                 // class java/lang/String
      69: invokestatic  #80                 // Method java/nio/file/Paths.get:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;
      72: aload_3
      73: iload         5
      75: laload
      76: invokespecial #81                 // Method org/rocksdb/DbPath."<init>":(Ljava/nio/file/Path;J)V
      79: invokeinterface #82,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      84: pop
      85: iinc          5, 1
      88: goto          49
      91: aload         4
      93: areturn

  public java.lang.String dbLogDir();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #83                 // Method dbLogDir:(J)Ljava/lang/String;
      29: areturn

  public org.rocksdb.Options setDbLogDir(java.lang.String);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: aload_1
      27: invokespecial #84                 // Method setDbLogDir:(JLjava/lang/String;)V
      30: aload_0
      31: areturn

  public java.lang.String walDir();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #85                 // Method walDir:(J)Ljava/lang/String;
      29: areturn

  public org.rocksdb.Options setWalDir(java.lang.String);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: aload_1
      27: invokespecial #86                 // Method setWalDir:(JLjava/lang/String;)V
      30: aload_0
      31: areturn

  public long deleteObsoleteFilesPeriodMicros();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #87                 // Method deleteObsoleteFilesPeriodMicros:(J)J
      29: lreturn

  public org.rocksdb.Options setDeleteObsoleteFilesPeriodMicros(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #88                 // Method setDeleteObsoleteFilesPeriodMicros:(JJ)V
      30: aload_0
      31: areturn

  public int maxBackgroundCompactions();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #89                 // Method maxBackgroundCompactions:(J)I
      29: ireturn

  public org.rocksdb.Options setStatistics(org.rocksdb.Statistics);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #90                 // Field org/rocksdb/Statistics.nativeHandle_:J
      30: invokespecial #91                 // Method setStatistics:(JJ)V
      33: aload_0
      34: areturn

  public org.rocksdb.Statistics statistics();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #92                 // Method statistics:(J)J
      29: lstore_1
      30: lload_1
      31: lconst_0
      32: lcmp
      33: ifne          38
      36: aconst_null
      37: areturn
      38: new           #93                 // class org/rocksdb/Statistics
      41: dup
      42: lload_1
      43: invokespecial #94                 // Method org/rocksdb/Statistics."<init>":(J)V
      46: areturn

  public void setBaseBackgroundCompactions(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #95                 // Method setBaseBackgroundCompactions:(JI)V
      30: return

  public int baseBackgroundCompactions();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #96                 // Method baseBackgroundCompactions:(J)I
      29: ireturn

  public org.rocksdb.Options setMaxBackgroundCompactions(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #97                 // Method setMaxBackgroundCompactions:(JI)V
      30: aload_0
      31: areturn

  public void setMaxSubcompactions(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #98                 // Method setMaxSubcompactions:(JI)V
      30: return

  public int maxSubcompactions();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #99                 // Method maxSubcompactions:(J)I
      29: ireturn

  public int maxBackgroundFlushes();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #100                // Method maxBackgroundFlushes:(J)I
      29: ireturn

  public org.rocksdb.Options setMaxBackgroundFlushes(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #101                // Method setMaxBackgroundFlushes:(JI)V
      30: aload_0
      31: areturn

  public int maxBackgroundJobs();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #102                // Method maxBackgroundJobs:(J)I
      29: ireturn

  public org.rocksdb.Options setMaxBackgroundJobs(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #103                // Method setMaxBackgroundJobs:(JI)V
      30: aload_0
      31: areturn

  public long maxLogFileSize();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #104                // Method maxLogFileSize:(J)J
      29: lreturn

  public org.rocksdb.Options setMaxLogFileSize(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #105                // Method setMaxLogFileSize:(JJ)V
      30: aload_0
      31: areturn

  public long logFileTimeToRoll();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #106                // Method logFileTimeToRoll:(J)J
      29: lreturn

  public org.rocksdb.Options setLogFileTimeToRoll(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #107                // Method setLogFileTimeToRoll:(JJ)V
      30: aload_0
      31: areturn

  public long keepLogFileNum();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #108                // Method keepLogFileNum:(J)J
      29: lreturn

  public org.rocksdb.Options setKeepLogFileNum(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #109                // Method setKeepLogFileNum:(JJ)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setRecycleLogFileNum(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #110                // Method setRecycleLogFileNum:(JJ)V
      30: aload_0
      31: areturn

  public long recycleLogFileNum();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #111                // Method recycleLogFileNum:(J)J
      29: lreturn

  public long maxManifestFileSize();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #112                // Method maxManifestFileSize:(J)J
      29: lreturn

  public org.rocksdb.Options setMaxManifestFileSize(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #113                // Method setMaxManifestFileSize:(JJ)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setMaxTableFilesSizeFIFO(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          20
       6: lload_1
       7: lconst_0
       8: lcmp
       9: ifgt          20
      12: new           #21                 // class java/lang/AssertionError
      15: dup
      16: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      19: athrow
      20: getstatic     #19                 // Field $assertionsDisabled:Z
      23: ifne          41
      26: aload_0
      27: invokevirtual #20                 // Method isOwningHandle:()Z
      30: ifne          41
      33: new           #21                 // class java/lang/AssertionError
      36: dup
      37: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      40: athrow
      41: aload_0
      42: aload_0
      43: getfield      #8                  // Field nativeHandle_:J
      46: lload_1
      47: invokespecial #114                // Method setMaxTableFilesSizeFIFO:(JJ)V
      50: aload_0
      51: areturn

  public long maxTableFilesSizeFIFO();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #115                // Method maxTableFilesSizeFIFO:(J)J
       8: lreturn

  public int tableCacheNumshardbits();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #116                // Method tableCacheNumshardbits:(J)I
      29: ireturn

  public org.rocksdb.Options setTableCacheNumshardbits(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #117                // Method setTableCacheNumshardbits:(JI)V
      30: aload_0
      31: areturn

  public long walTtlSeconds();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #118                // Method walTtlSeconds:(J)J
      29: lreturn

  public org.rocksdb.Options setWalTtlSeconds(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #119                // Method setWalTtlSeconds:(JJ)V
      30: aload_0
      31: areturn

  public long walSizeLimitMB();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #120                // Method walSizeLimitMB:(J)J
      29: lreturn

  public org.rocksdb.Options setWalSizeLimitMB(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #121                // Method setWalSizeLimitMB:(JJ)V
      30: aload_0
      31: areturn

  public long manifestPreallocationSize();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #122                // Method manifestPreallocationSize:(J)J
      29: lreturn

  public org.rocksdb.Options setManifestPreallocationSize(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #123                // Method setManifestPreallocationSize:(JJ)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setUseDirectReads(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #124                // Method setUseDirectReads:(JZ)V
      30: aload_0
      31: areturn

  public boolean useDirectReads();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #125                // Method useDirectReads:(J)Z
      29: ireturn

  public org.rocksdb.Options setUseDirectIoForFlushAndCompaction(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #126                // Method setUseDirectIoForFlushAndCompaction:(JZ)V
      30: aload_0
      31: areturn

  public boolean useDirectIoForFlushAndCompaction();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #127                // Method useDirectIoForFlushAndCompaction:(J)Z
      29: ireturn

  public org.rocksdb.Options setAllowFAllocate(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #128                // Method setAllowFAllocate:(JZ)V
      30: aload_0
      31: areturn

  public boolean allowFAllocate();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #129                // Method allowFAllocate:(J)Z
      29: ireturn

  public boolean allowMmapReads();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #130                // Method allowMmapReads:(J)Z
      29: ireturn

  public org.rocksdb.Options setAllowMmapReads(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #131                // Method setAllowMmapReads:(JZ)V
      30: aload_0
      31: areturn

  public boolean allowMmapWrites();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #132                // Method allowMmapWrites:(J)Z
      29: ireturn

  public org.rocksdb.Options setAllowMmapWrites(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #133                // Method setAllowMmapWrites:(JZ)V
      30: aload_0
      31: areturn

  public boolean isFdCloseOnExec();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #134                // Method isFdCloseOnExec:(J)Z
      29: ireturn

  public org.rocksdb.Options setIsFdCloseOnExec(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #135                // Method setIsFdCloseOnExec:(JZ)V
      30: aload_0
      31: areturn

  public int statsDumpPeriodSec();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #136                // Method statsDumpPeriodSec:(J)I
      29: ireturn

  public org.rocksdb.Options setStatsDumpPeriodSec(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #137                // Method setStatsDumpPeriodSec:(JI)V
      30: aload_0
      31: areturn

  public boolean adviseRandomOnOpen();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #138                // Method adviseRandomOnOpen:(J)Z
       8: ireturn

  public org.rocksdb.Options setAdviseRandomOnOpen(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #139                // Method setAdviseRandomOnOpen:(JZ)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setDbWriteBufferSize(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #140                // Method setDbWriteBufferSize:(JJ)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setWriteBufferManager(org.rocksdb.WriteBufferManager);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #141                // Field org/rocksdb/WriteBufferManager.nativeHandle_:J
      30: invokespecial #142                // Method setWriteBufferManager:(JJ)V
      33: aload_0
      34: aload_1
      35: putfield      #18                 // Field writeBufferManager_:Lorg/rocksdb/WriteBufferManager;
      38: aload_0
      39: areturn

  public org.rocksdb.WriteBufferManager writeBufferManager();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #18                 // Field writeBufferManager_:Lorg/rocksdb/WriteBufferManager;
      25: areturn

  public long dbWriteBufferSize();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #143                // Method dbWriteBufferSize:(J)J
      29: lreturn

  public org.rocksdb.Options setAccessHintOnCompactionStart(org.rocksdb.AccessHint);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: aload_1
      27: invokevirtual #144                // Method org/rocksdb/AccessHint.getValue:()B
      30: invokespecial #145                // Method setAccessHintOnCompactionStart:(JB)V
      33: aload_0
      34: areturn

  public org.rocksdb.AccessHint accessHintOnCompactionStart();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #146                // Method accessHintOnCompactionStart:(J)B
      29: invokestatic  #147                // Method org/rocksdb/AccessHint.getAccessHint:(B)Lorg/rocksdb/AccessHint;
      32: areturn

  public org.rocksdb.Options setNewTableReaderForCompactionInputs(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #148                // Method setNewTableReaderForCompactionInputs:(JZ)V
      30: aload_0
      31: areturn

  public boolean newTableReaderForCompactionInputs();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #149                // Method newTableReaderForCompactionInputs:(J)Z
      29: ireturn

  public org.rocksdb.Options setCompactionReadaheadSize(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #150                // Method setCompactionReadaheadSize:(JJ)V
      30: aload_0
      31: areturn

  public long compactionReadaheadSize();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #151                // Method compactionReadaheadSize:(J)J
      29: lreturn

  public org.rocksdb.Options setRandomAccessMaxBufferSize(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #152                // Method setRandomAccessMaxBufferSize:(JJ)V
      30: aload_0
      31: areturn

  public long randomAccessMaxBufferSize();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #153                // Method randomAccessMaxBufferSize:(J)J
      29: lreturn

  public org.rocksdb.Options setWritableFileMaxBufferSize(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #154                // Method setWritableFileMaxBufferSize:(JJ)V
      30: aload_0
      31: areturn

  public long writableFileMaxBufferSize();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #155                // Method writableFileMaxBufferSize:(J)J
      29: lreturn

  public boolean useAdaptiveMutex();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #156                // Method useAdaptiveMutex:(J)Z
      29: ireturn

  public org.rocksdb.Options setUseAdaptiveMutex(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #157                // Method setUseAdaptiveMutex:(JZ)V
      30: aload_0
      31: areturn

  public long bytesPerSync();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #158                // Method bytesPerSync:(J)J
       8: lreturn

  public org.rocksdb.Options setBytesPerSync(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #159                // Method setBytesPerSync:(JJ)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setWalBytesPerSync(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #160                // Method setWalBytesPerSync:(JJ)V
      30: aload_0
      31: areturn

  public long walBytesPerSync();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #161                // Method walBytesPerSync:(J)J
      29: lreturn

  public org.rocksdb.Options setEnableThreadTracking(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #162                // Method setEnableThreadTracking:(JZ)V
      30: aload_0
      31: areturn

  public boolean enableThreadTracking();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #163                // Method enableThreadTracking:(J)Z
      29: ireturn

  public org.rocksdb.Options setDelayedWriteRate(long);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #164                // Method setDelayedWriteRate:(JJ)V
      30: aload_0
      31: areturn

  public long delayedWriteRate();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #165                // Method delayedWriteRate:(J)J
       8: lreturn

  public org.rocksdb.Options setAllowConcurrentMemtableWrite(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #166                // Method setAllowConcurrentMemtableWrite:(JZ)V
       9: aload_0
      10: areturn

  public boolean allowConcurrentMemtableWrite();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #167                // Method allowConcurrentMemtableWrite:(J)Z
       8: ireturn

  public org.rocksdb.Options setEnableWriteThreadAdaptiveYield(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #168                // Method setEnableWriteThreadAdaptiveYield:(JZ)V
       9: aload_0
      10: areturn

  public boolean enableWriteThreadAdaptiveYield();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #169                // Method enableWriteThreadAdaptiveYield:(J)Z
       8: ireturn

  public org.rocksdb.Options setWriteThreadMaxYieldUsec(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #170                // Method setWriteThreadMaxYieldUsec:(JJ)V
       9: aload_0
      10: areturn

  public long writeThreadMaxYieldUsec();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #171                // Method writeThreadMaxYieldUsec:(J)J
       8: lreturn

  public org.rocksdb.Options setWriteThreadSlowYieldUsec(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #172                // Method setWriteThreadSlowYieldUsec:(JJ)V
       9: aload_0
      10: areturn

  public long writeThreadSlowYieldUsec();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #173                // Method writeThreadSlowYieldUsec:(J)J
       8: lreturn

  public org.rocksdb.Options setSkipStatsUpdateOnDbOpen(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #174                // Method setSkipStatsUpdateOnDbOpen:(JZ)V
      30: aload_0
      31: areturn

  public boolean skipStatsUpdateOnDbOpen();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #175                // Method skipStatsUpdateOnDbOpen:(J)Z
      29: ireturn

  public org.rocksdb.Options setWalRecoveryMode(org.rocksdb.WALRecoveryMode);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: aload_1
      27: invokevirtual #176                // Method org/rocksdb/WALRecoveryMode.getValue:()B
      30: invokespecial #177                // Method setWalRecoveryMode:(JB)V
      33: aload_0
      34: areturn

  public org.rocksdb.WALRecoveryMode walRecoveryMode();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #178                // Method walRecoveryMode:(J)B
      29: invokestatic  #179                // Method org/rocksdb/WALRecoveryMode.getWALRecoveryMode:(B)Lorg/rocksdb/WALRecoveryMode;
      32: areturn

  public org.rocksdb.Options setAllow2pc(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #180                // Method setAllow2pc:(JZ)V
      30: aload_0
      31: areturn

  public boolean allow2pc();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #181                // Method allow2pc:(J)Z
      29: ireturn

  public org.rocksdb.Options setRowCache(org.rocksdb.Cache);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #182                // Field org/rocksdb/Cache.nativeHandle_:J
      30: invokespecial #183                // Method setRowCache:(JJ)V
      33: aload_0
      34: aload_1
      35: putfield      #17                 // Field rowCache_:Lorg/rocksdb/Cache;
      38: aload_0
      39: areturn

  public org.rocksdb.Cache rowCache();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #17                 // Field rowCache_:Lorg/rocksdb/Cache;
      25: areturn

  public org.rocksdb.Options setFailIfOptionsFileError(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #184                // Method setFailIfOptionsFileError:(JZ)V
      30: aload_0
      31: areturn

  public boolean failIfOptionsFileError();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #185                // Method failIfOptionsFileError:(J)Z
      29: ireturn

  public org.rocksdb.Options setDumpMallocStats(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #186                // Method setDumpMallocStats:(JZ)V
      30: aload_0
      31: areturn

  public boolean dumpMallocStats();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #187                // Method dumpMallocStats:(J)Z
      29: ireturn

  public org.rocksdb.Options setAvoidFlushDuringRecovery(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #188                // Method setAvoidFlushDuringRecovery:(JZ)V
      30: aload_0
      31: areturn

  public boolean avoidFlushDuringRecovery();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #189                // Method avoidFlushDuringRecovery:(J)Z
      29: ireturn

  public org.rocksdb.Options setAvoidFlushDuringShutdown(boolean);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #190                // Method setAvoidFlushDuringShutdown:(JZ)V
      30: aload_0
      31: areturn

  public boolean avoidFlushDuringShutdown();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #191                // Method avoidFlushDuringShutdown:(J)Z
      29: ireturn

  public org.rocksdb.MemTableConfig memTableConfig();
    Code:
       0: aload_0
       1: getfield      #10                 // Field memTableConfig_:Lorg/rocksdb/MemTableConfig;
       4: areturn

  public org.rocksdb.Options setMemTableConfig(org.rocksdb.MemTableConfig);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field memTableConfig_:Lorg/rocksdb/MemTableConfig;
       5: aload_0
       6: aload_0
       7: getfield      #8                  // Field nativeHandle_:J
      10: aload_1
      11: invokevirtual #192                // Method org/rocksdb/MemTableConfig.newMemTableFactoryHandle:()J
      14: invokespecial #193                // Method setMemTableFactory:(JJ)V
      17: aload_0
      18: areturn

  public org.rocksdb.Options setRateLimiter(org.rocksdb.RateLimiter);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_1
      23: putfield      #12                 // Field rateLimiter_:Lorg/rocksdb/RateLimiter;
      26: aload_0
      27: aload_0
      28: getfield      #8                  // Field nativeHandle_:J
      31: aload_1
      32: getfield      #194                // Field org/rocksdb/RateLimiter.nativeHandle_:J
      35: invokespecial #195                // Method setRateLimiter:(JJ)V
      38: aload_0
      39: areturn

  public org.rocksdb.Options setSstFileManager(org.rocksdb.SstFileManager);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #196                // Field org/rocksdb/SstFileManager.nativeHandle_:J
      30: invokespecial #197                // Method setSstFileManager:(JJ)V
      33: aload_0
      34: areturn

  public org.rocksdb.Options setLogger(org.rocksdb.Logger);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #198                // Field org/rocksdb/Logger.nativeHandle_:J
      30: invokespecial #199                // Method setLogger:(JJ)V
      33: aload_0
      34: areturn

  public org.rocksdb.Options setInfoLogLevel(org.rocksdb.InfoLogLevel);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: aload_1
      27: invokevirtual #200                // Method org/rocksdb/InfoLogLevel.getValue:()B
      30: invokespecial #201                // Method setInfoLogLevel:(JB)V
      33: aload_0
      34: areturn

  public org.rocksdb.InfoLogLevel infoLogLevel();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #202                // Method infoLogLevel:(J)B
      29: invokestatic  #203                // Method org/rocksdb/InfoLogLevel.getInfoLogLevel:(B)Lorg/rocksdb/InfoLogLevel;
      32: areturn

  public java.lang.String memTableFactoryName();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #204                // Method memTableFactoryName:(J)Ljava/lang/String;
      29: areturn

  public org.rocksdb.TableFormatConfig tableFormatConfig();
    Code:
       0: aload_0
       1: getfield      #11                 // Field tableFormatConfig_:Lorg/rocksdb/TableFormatConfig;
       4: areturn

  public org.rocksdb.Options setTableFormatConfig(org.rocksdb.TableFormatConfig);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field tableFormatConfig_:Lorg/rocksdb/TableFormatConfig;
       5: aload_0
       6: aload_0
       7: getfield      #8                  // Field nativeHandle_:J
      10: aload_1
      11: invokevirtual #205                // Method org/rocksdb/TableFormatConfig.newTableFactoryHandle:()J
      14: invokespecial #206                // Method setTableFactory:(JJ)V
      17: aload_0
      18: areturn

  public java.lang.String tableFactoryName();
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: invokespecial #207                // Method tableFactoryName:(J)Ljava/lang/String;
      29: areturn

  public org.rocksdb.Options useFixedLengthPrefixExtractor(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #208                // Method useFixedLengthPrefixExtractor:(JI)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options useCappedPrefixExtractor(int);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #20                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #21                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #22                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #8                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #209                // Method useCappedPrefixExtractor:(JI)V
      30: aload_0
      31: areturn

  public org.rocksdb.CompressionType compressionType();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #210                // Method compressionType:(J)B
       8: invokestatic  #211                // Method org/rocksdb/CompressionType.getCompressionType:(B)Lorg/rocksdb/CompressionType;
      11: areturn

  public org.rocksdb.Options setCompressionPerLevel(java.util.List<org.rocksdb.CompressionType>);
    Code:
       0: aload_1
       1: invokeinterface #212,  1          // InterfaceMethod java/util/List.size:()I
       6: newarray       byte
       8: astore_2
       9: iconst_0
      10: istore_3
      11: iload_3
      12: aload_1
      13: invokeinterface #212,  1          // InterfaceMethod java/util/List.size:()I
      18: if_icmpge     43
      21: aload_2
      22: iload_3
      23: aload_1
      24: iload_3
      25: invokeinterface #213,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      30: checkcast     #214                // class org/rocksdb/CompressionType
      33: invokevirtual #215                // Method org/rocksdb/CompressionType.getValue:()B
      36: bastore
      37: iinc          3, 1
      40: goto          11
      43: aload_0
      44: aload_0
      45: getfield      #8                  // Field nativeHandle_:J
      48: aload_2
      49: invokespecial #216                // Method setCompressionPerLevel:(J[B)V
      52: aload_0
      53: areturn

  public java.util.List<org.rocksdb.CompressionType> compressionPerLevel();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #217                // Method compressionPerLevel:(J)[B
       8: astore_1
       9: new           #78                 // class java/util/ArrayList
      12: dup
      13: invokespecial #79                 // Method java/util/ArrayList."<init>":()V
      16: astore_2
      17: aload_1
      18: astore_3
      19: aload_3
      20: arraylength
      21: istore        4
      23: iconst_0
      24: istore        5
      26: iload         5
      28: iload         4
      30: if_icmpge     63
      33: aload_3
      34: iload         5
      36: baload
      37: invokestatic  #218                // Method java/lang/Byte.valueOf:(B)Ljava/lang/Byte;
      40: astore        6
      42: aload_2
      43: aload         6
      45: invokevirtual #219                // Method java/lang/Byte.byteValue:()B
      48: invokestatic  #211                // Method org/rocksdb/CompressionType.getCompressionType:(B)Lorg/rocksdb/CompressionType;
      51: invokeinterface #82,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      56: pop
      57: iinc          5, 1
      60: goto          26
      63: aload_2
      64: areturn

  public org.rocksdb.Options setCompressionType(org.rocksdb.CompressionType);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: aload_1
       6: invokevirtual #215                // Method org/rocksdb/CompressionType.getValue:()B
       9: invokespecial #220                // Method setCompressionType:(JB)V
      12: aload_0
      13: areturn

  public org.rocksdb.Options setBottommostCompressionType(org.rocksdb.CompressionType);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: aload_1
       6: invokevirtual #215                // Method org/rocksdb/CompressionType.getValue:()B
       9: invokespecial #221                // Method setBottommostCompressionType:(JB)V
      12: aload_0
      13: areturn

  public org.rocksdb.CompressionType bottommostCompressionType();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #222                // Method bottommostCompressionType:(J)B
       8: invokestatic  #211                // Method org/rocksdb/CompressionType.getCompressionType:(B)Lorg/rocksdb/CompressionType;
      11: areturn

  public org.rocksdb.Options setCompressionOptions(org.rocksdb.CompressionOptions);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: aload_1
       6: getfield      #223                // Field org/rocksdb/CompressionOptions.nativeHandle_:J
       9: invokespecial #224                // Method setCompressionOptions:(JJ)V
      12: aload_0
      13: aload_1
      14: putfield      #16                 // Field compressionOptions_:Lorg/rocksdb/CompressionOptions;
      17: aload_0
      18: areturn

  public org.rocksdb.CompressionOptions compressionOptions();
    Code:
       0: aload_0
       1: getfield      #16                 // Field compressionOptions_:Lorg/rocksdb/CompressionOptions;
       4: areturn

  public org.rocksdb.CompactionStyle compactionStyle();
    Code:
       0: invokestatic  #225                // Method org/rocksdb/CompactionStyle.values:()[Lorg/rocksdb/CompactionStyle;
       3: aload_0
       4: aload_0
       5: getfield      #8                  // Field nativeHandle_:J
       8: invokespecial #226                // Method compactionStyle:(J)B
      11: aaload
      12: areturn

  public org.rocksdb.Options setCompactionStyle(org.rocksdb.CompactionStyle);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: aload_1
       6: invokevirtual #227                // Method org/rocksdb/CompactionStyle.getValue:()B
       9: invokespecial #228                // Method setCompactionStyle:(JB)V
      12: aload_0
      13: areturn

  public int numLevels();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #229                // Method numLevels:(J)I
       8: ireturn

  public org.rocksdb.Options setNumLevels(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #230                // Method setNumLevels:(JI)V
       9: aload_0
      10: areturn

  public int levelZeroFileNumCompactionTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #231                // Method levelZeroFileNumCompactionTrigger:(J)I
       8: ireturn

  public org.rocksdb.Options setLevelZeroFileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #232                // Method setLevelZeroFileNumCompactionTrigger:(JI)V
       9: aload_0
      10: areturn

  public int levelZeroSlowdownWritesTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #233                // Method levelZeroSlowdownWritesTrigger:(J)I
       8: ireturn

  public org.rocksdb.Options setLevelZeroSlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #234                // Method setLevelZeroSlowdownWritesTrigger:(JI)V
       9: aload_0
      10: areturn

  public int levelZeroStopWritesTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #235                // Method levelZeroStopWritesTrigger:(J)I
       8: ireturn

  public org.rocksdb.Options setLevelZeroStopWritesTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #236                // Method setLevelZeroStopWritesTrigger:(JI)V
       9: aload_0
      10: areturn

  public long targetFileSizeBase();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #237                // Method targetFileSizeBase:(J)J
       8: lreturn

  public org.rocksdb.Options setTargetFileSizeBase(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #238                // Method setTargetFileSizeBase:(JJ)V
       9: aload_0
      10: areturn

  public int targetFileSizeMultiplier();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #239                // Method targetFileSizeMultiplier:(J)I
       8: ireturn

  public org.rocksdb.Options setTargetFileSizeMultiplier(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #240                // Method setTargetFileSizeMultiplier:(JI)V
       9: aload_0
      10: areturn

  public org.rocksdb.Options setMaxBytesForLevelBase(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #241                // Method setMaxBytesForLevelBase:(JJ)V
       9: aload_0
      10: areturn

  public long maxBytesForLevelBase();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #242                // Method maxBytesForLevelBase:(J)J
       8: lreturn

  public org.rocksdb.Options setLevelCompactionDynamicLevelBytes(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #243                // Method setLevelCompactionDynamicLevelBytes:(JZ)V
       9: aload_0
      10: areturn

  public boolean levelCompactionDynamicLevelBytes();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #244                // Method levelCompactionDynamicLevelBytes:(J)Z
       8: ireturn

  public double maxBytesForLevelMultiplier();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #245                // Method maxBytesForLevelMultiplier:(J)D
       8: dreturn

  public org.rocksdb.Options setMaxBytesForLevelMultiplier(double);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: dload_1
       6: invokespecial #246                // Method setMaxBytesForLevelMultiplier:(JD)V
       9: aload_0
      10: areturn

  public long maxCompactionBytes();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #247                // Method maxCompactionBytes:(J)J
       8: lreturn

  public org.rocksdb.Options setMaxCompactionBytes(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #248                // Method setMaxCompactionBytes:(JJ)V
       9: aload_0
      10: areturn

  public long arenaBlockSize();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #249                // Method arenaBlockSize:(J)J
       8: lreturn

  public org.rocksdb.Options setArenaBlockSize(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #250                // Method setArenaBlockSize:(JJ)V
       9: aload_0
      10: areturn

  public boolean disableAutoCompactions();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #251                // Method disableAutoCompactions:(J)Z
       8: ireturn

  public org.rocksdb.Options setDisableAutoCompactions(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #252                // Method setDisableAutoCompactions:(JZ)V
       9: aload_0
      10: areturn

  public long maxSequentialSkipInIterations();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #253                // Method maxSequentialSkipInIterations:(J)J
       8: lreturn

  public org.rocksdb.Options setMaxSequentialSkipInIterations(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #254                // Method setMaxSequentialSkipInIterations:(JJ)V
       9: aload_0
      10: areturn

  public boolean inplaceUpdateSupport();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #255                // Method inplaceUpdateSupport:(J)Z
       8: ireturn

  public org.rocksdb.Options setInplaceUpdateSupport(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #256                // Method setInplaceUpdateSupport:(JZ)V
       9: aload_0
      10: areturn

  public long inplaceUpdateNumLocks();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #257                // Method inplaceUpdateNumLocks:(J)J
       8: lreturn

  public org.rocksdb.Options setInplaceUpdateNumLocks(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #258                // Method setInplaceUpdateNumLocks:(JJ)V
       9: aload_0
      10: areturn

  public double memtablePrefixBloomSizeRatio();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #259                // Method memtablePrefixBloomSizeRatio:(J)D
       8: dreturn

  public org.rocksdb.Options setMemtablePrefixBloomSizeRatio(double);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: dload_1
       6: invokespecial #260                // Method setMemtablePrefixBloomSizeRatio:(JD)V
       9: aload_0
      10: areturn

  public int bloomLocality();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #261                // Method bloomLocality:(J)I
       8: ireturn

  public org.rocksdb.Options setBloomLocality(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #262                // Method setBloomLocality:(JI)V
       9: aload_0
      10: areturn

  public long maxSuccessiveMerges();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #263                // Method maxSuccessiveMerges:(J)J
       8: lreturn

  public org.rocksdb.Options setMaxSuccessiveMerges(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #264                // Method setMaxSuccessiveMerges:(JJ)V
       9: aload_0
      10: areturn

  public int minWriteBufferNumberToMerge();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #265                // Method minWriteBufferNumberToMerge:(J)I
       8: ireturn

  public org.rocksdb.Options setMinWriteBufferNumberToMerge(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #266                // Method setMinWriteBufferNumberToMerge:(JI)V
       9: aload_0
      10: areturn

  public org.rocksdb.Options setOptimizeFiltersForHits(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #267                // Method setOptimizeFiltersForHits:(JZ)V
       9: aload_0
      10: areturn

  public boolean optimizeFiltersForHits();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #268                // Method optimizeFiltersForHits:(J)Z
       8: ireturn

  public org.rocksdb.Options setMemtableHugePageSize(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #269                // Method setMemtableHugePageSize:(JJ)V
       9: aload_0
      10: areturn

  public long memtableHugePageSize();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #270                // Method memtableHugePageSize:(J)J
       8: lreturn

  public org.rocksdb.Options setSoftPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #271                // Method setSoftPendingCompactionBytesLimit:(JJ)V
       9: aload_0
      10: areturn

  public long softPendingCompactionBytesLimit();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #272                // Method softPendingCompactionBytesLimit:(J)J
       8: lreturn

  public org.rocksdb.Options setHardPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #273                // Method setHardPendingCompactionBytesLimit:(JJ)V
       9: aload_0
      10: areturn

  public long hardPendingCompactionBytesLimit();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #274                // Method hardPendingCompactionBytesLimit:(J)J
       8: lreturn

  public org.rocksdb.Options setLevel0FileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #275                // Method setLevel0FileNumCompactionTrigger:(JI)V
       9: aload_0
      10: areturn

  public int level0FileNumCompactionTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #276                // Method level0FileNumCompactionTrigger:(J)I
       8: ireturn

  public org.rocksdb.Options setLevel0SlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #277                // Method setLevel0SlowdownWritesTrigger:(JI)V
       9: aload_0
      10: areturn

  public int level0SlowdownWritesTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #278                // Method level0SlowdownWritesTrigger:(J)I
       8: ireturn

  public org.rocksdb.Options setLevel0StopWritesTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #279                // Method setLevel0StopWritesTrigger:(JI)V
       9: aload_0
      10: areturn

  public int level0StopWritesTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #280                // Method level0StopWritesTrigger:(J)I
       8: ireturn

  public org.rocksdb.Options setMaxBytesForLevelMultiplierAdditional(int[]);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: aload_1
       6: invokespecial #281                // Method setMaxBytesForLevelMultiplierAdditional:(J[I)V
       9: aload_0
      10: areturn

  public int[] maxBytesForLevelMultiplierAdditional();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #282                // Method maxBytesForLevelMultiplierAdditional:(J)[I
       8: areturn

  public org.rocksdb.Options setParanoidFileChecks(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #283                // Method setParanoidFileChecks:(JZ)V
       9: aload_0
      10: areturn

  public boolean paranoidFileChecks();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #284                // Method paranoidFileChecks:(J)Z
       8: ireturn

  public org.rocksdb.Options setMaxWriteBufferNumberToMaintain(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #285                // Method setMaxWriteBufferNumberToMaintain:(JI)V
       9: aload_0
      10: areturn

  public int maxWriteBufferNumberToMaintain();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #286                // Method maxWriteBufferNumberToMaintain:(J)I
       8: ireturn

  public org.rocksdb.Options setCompactionPriority(org.rocksdb.CompactionPriority);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: aload_1
       6: invokevirtual #287                // Method org/rocksdb/CompactionPriority.getValue:()B
       9: invokespecial #288                // Method setCompactionPriority:(JB)V
      12: aload_0
      13: areturn

  public org.rocksdb.CompactionPriority compactionPriority();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #289                // Method compactionPriority:(J)B
       8: invokestatic  #290                // Method org/rocksdb/CompactionPriority.getCompactionPriority:(B)Lorg/rocksdb/CompactionPriority;
      11: areturn

  public org.rocksdb.Options setReportBgIoStats(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #291                // Method setReportBgIoStats:(JZ)V
       9: aload_0
      10: areturn

  public boolean reportBgIoStats();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #292                // Method reportBgIoStats:(J)Z
       8: ireturn

  public org.rocksdb.Options setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: aload_1
       6: getfield      #293                // Field org/rocksdb/CompactionOptionsUniversal.nativeHandle_:J
       9: invokespecial #294                // Method setCompactionOptionsUniversal:(JJ)V
      12: aload_0
      13: aload_1
      14: putfield      #14                 // Field compactionOptionsUniversal_:Lorg/rocksdb/CompactionOptionsUniversal;
      17: aload_0
      18: areturn

  public org.rocksdb.CompactionOptionsUniversal compactionOptionsUniversal();
    Code:
       0: aload_0
       1: getfield      #14                 // Field compactionOptionsUniversal_:Lorg/rocksdb/CompactionOptionsUniversal;
       4: areturn

  public org.rocksdb.Options setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: aload_1
       6: getfield      #295                // Field org/rocksdb/CompactionOptionsFIFO.nativeHandle_:J
       9: invokespecial #296                // Method setCompactionOptionsFIFO:(JJ)V
      12: aload_0
      13: aload_1
      14: putfield      #15                 // Field compactionOptionsFIFO_:Lorg/rocksdb/CompactionOptionsFIFO;
      17: aload_0
      18: areturn

  public org.rocksdb.CompactionOptionsFIFO compactionOptionsFIFO();
    Code:
       0: aload_0
       1: getfield      #15                 // Field compactionOptionsFIFO_:Lorg/rocksdb/CompactionOptionsFIFO;
       4: areturn

  public org.rocksdb.Options setForceConsistencyChecks(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #297                // Method setForceConsistencyChecks:(JZ)V
       9: aload_0
      10: areturn

  public boolean forceConsistencyChecks();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field nativeHandle_:J
       5: invokespecial #298                // Method forceConsistencyChecks:(J)Z
       8: ireturn

  private static native long newOptions();

  private static native long newOptions(long, long);

  private static native long copyOptions(long);

  protected final native void disposeInternal(long);

  private native void setEnv(long, long);

  private native void prepareForBulkLoad(long);

  private native void setIncreaseParallelism(long, int);

  private native void setCreateIfMissing(long, boolean);

  private native boolean createIfMissing(long);

  private native void setCreateMissingColumnFamilies(long, boolean);

  private native boolean createMissingColumnFamilies(long);

  private native void setErrorIfExists(long, boolean);

  private native boolean errorIfExists(long);

  private native void setParanoidChecks(long, boolean);

  private native boolean paranoidChecks(long);

  private native void setRateLimiter(long, long);

  private native void setSstFileManager(long, long);

  private native void setLogger(long, long);

  private native void setInfoLogLevel(long, byte);

  private native byte infoLogLevel(long);

  private native void setMaxOpenFiles(long, int);

  private native int maxOpenFiles(long);

  private native void setMaxTotalWalSize(long, long);

  private native void setMaxFileOpeningThreads(long, int);

  private native int maxFileOpeningThreads(long);

  private native long maxTotalWalSize(long);

  private native void setStatistics(long, long);

  private native long statistics(long);

  private native boolean useFsync(long);

  private native void setUseFsync(long, boolean);

  private native void setDbPaths(long, java.lang.String[], long[]);

  private native long dbPathsLen(long);

  private native void dbPaths(long, java.lang.String[], long[]);

  private native void setDbLogDir(long, java.lang.String);

  private native java.lang.String dbLogDir(long);

  private native void setWalDir(long, java.lang.String);

  private native java.lang.String walDir(long);

  private native void setDeleteObsoleteFilesPeriodMicros(long, long);

  private native long deleteObsoleteFilesPeriodMicros(long);

  private native void setBaseBackgroundCompactions(long, int);

  private native int baseBackgroundCompactions(long);

  private native void setMaxBackgroundCompactions(long, int);

  private native int maxBackgroundCompactions(long);

  private native void setMaxSubcompactions(long, int);

  private native int maxSubcompactions(long);

  private native void setMaxBackgroundFlushes(long, int);

  private native int maxBackgroundFlushes(long);

  private native void setMaxBackgroundJobs(long, int);

  private native int maxBackgroundJobs(long);

  private native void setMaxLogFileSize(long, long) throws java.lang.IllegalArgumentException;

  private native long maxLogFileSize(long);

  private native void setLogFileTimeToRoll(long, long) throws java.lang.IllegalArgumentException;

  private native long logFileTimeToRoll(long);

  private native void setKeepLogFileNum(long, long) throws java.lang.IllegalArgumentException;

  private native long keepLogFileNum(long);

  private native void setRecycleLogFileNum(long, long);

  private native long recycleLogFileNum(long);

  private native void setMaxManifestFileSize(long, long);

  private native long maxManifestFileSize(long);

  private native void setMaxTableFilesSizeFIFO(long, long);

  private native long maxTableFilesSizeFIFO(long);

  private native void setTableCacheNumshardbits(long, int);

  private native int tableCacheNumshardbits(long);

  private native void setWalTtlSeconds(long, long);

  private native long walTtlSeconds(long);

  private native void setWalSizeLimitMB(long, long);

  private native long walSizeLimitMB(long);

  private native void setManifestPreallocationSize(long, long) throws java.lang.IllegalArgumentException;

  private native long manifestPreallocationSize(long);

  private native void setUseDirectReads(long, boolean);

  private native boolean useDirectReads(long);

  private native void setUseDirectIoForFlushAndCompaction(long, boolean);

  private native boolean useDirectIoForFlushAndCompaction(long);

  private native void setAllowFAllocate(long, boolean);

  private native boolean allowFAllocate(long);

  private native void setAllowMmapReads(long, boolean);

  private native boolean allowMmapReads(long);

  private native void setAllowMmapWrites(long, boolean);

  private native boolean allowMmapWrites(long);

  private native void setIsFdCloseOnExec(long, boolean);

  private native boolean isFdCloseOnExec(long);

  private native void setStatsDumpPeriodSec(long, int);

  private native int statsDumpPeriodSec(long);

  private native void setAdviseRandomOnOpen(long, boolean);

  private native boolean adviseRandomOnOpen(long);

  private native void setDbWriteBufferSize(long, long);

  private native void setWriteBufferManager(long, long);

  private native long dbWriteBufferSize(long);

  private native void setAccessHintOnCompactionStart(long, byte);

  private native byte accessHintOnCompactionStart(long);

  private native void setNewTableReaderForCompactionInputs(long, boolean);

  private native boolean newTableReaderForCompactionInputs(long);

  private native void setCompactionReadaheadSize(long, long);

  private native long compactionReadaheadSize(long);

  private native void setRandomAccessMaxBufferSize(long, long);

  private native long randomAccessMaxBufferSize(long);

  private native void setWritableFileMaxBufferSize(long, long);

  private native long writableFileMaxBufferSize(long);

  private native void setUseAdaptiveMutex(long, boolean);

  private native boolean useAdaptiveMutex(long);

  private native void setBytesPerSync(long, long);

  private native long bytesPerSync(long);

  private native void setWalBytesPerSync(long, long);

  private native long walBytesPerSync(long);

  private native void setEnableThreadTracking(long, boolean);

  private native boolean enableThreadTracking(long);

  private native void setDelayedWriteRate(long, long);

  private native long delayedWriteRate(long);

  private native void setAllowConcurrentMemtableWrite(long, boolean);

  private native boolean allowConcurrentMemtableWrite(long);

  private native void setEnableWriteThreadAdaptiveYield(long, boolean);

  private native boolean enableWriteThreadAdaptiveYield(long);

  private native void setWriteThreadMaxYieldUsec(long, long);

  private native long writeThreadMaxYieldUsec(long);

  private native void setWriteThreadSlowYieldUsec(long, long);

  private native long writeThreadSlowYieldUsec(long);

  private native void setSkipStatsUpdateOnDbOpen(long, boolean);

  private native boolean skipStatsUpdateOnDbOpen(long);

  private native void setWalRecoveryMode(long, byte);

  private native byte walRecoveryMode(long);

  private native void setAllow2pc(long, boolean);

  private native boolean allow2pc(long);

  private native void setRowCache(long, long);

  private native void setFailIfOptionsFileError(long, boolean);

  private native boolean failIfOptionsFileError(long);

  private native void setDumpMallocStats(long, boolean);

  private native boolean dumpMallocStats(long);

  private native void setAvoidFlushDuringRecovery(long, boolean);

  private native boolean avoidFlushDuringRecovery(long);

  private native void setAvoidFlushDuringShutdown(long, boolean);

  private native boolean avoidFlushDuringShutdown(long);

  private native void optimizeForSmallDb(long);

  private native void optimizeForPointLookup(long, long);

  private native void optimizeLevelStyleCompaction(long, long);

  private native void optimizeUniversalStyleCompaction(long, long);

  private native void setComparatorHandle(long, int);

  private native void setComparatorHandle(long, long, byte);

  private native void setMergeOperatorName(long, java.lang.String);

  private native void setMergeOperator(long, long);

  private native void setWriteBufferSize(long, long) throws java.lang.IllegalArgumentException;

  private native long writeBufferSize(long);

  private native void setMaxWriteBufferNumber(long, int);

  private native int maxWriteBufferNumber(long);

  private native void setMinWriteBufferNumberToMerge(long, int);

  private native int minWriteBufferNumberToMerge(long);

  private native void setCompressionType(long, byte);

  private native byte compressionType(long);

  private native void setCompressionPerLevel(long, byte[]);

  private native byte[] compressionPerLevel(long);

  private native void setBottommostCompressionType(long, byte);

  private native byte bottommostCompressionType(long);

  private native void setCompressionOptions(long, long);

  private native void useFixedLengthPrefixExtractor(long, int);

  private native void useCappedPrefixExtractor(long, int);

  private native void setNumLevels(long, int);

  private native int numLevels(long);

  private native void setLevelZeroFileNumCompactionTrigger(long, int);

  private native int levelZeroFileNumCompactionTrigger(long);

  private native void setLevelZeroSlowdownWritesTrigger(long, int);

  private native int levelZeroSlowdownWritesTrigger(long);

  private native void setLevelZeroStopWritesTrigger(long, int);

  private native int levelZeroStopWritesTrigger(long);

  private native void setTargetFileSizeBase(long, long);

  private native long targetFileSizeBase(long);

  private native void setTargetFileSizeMultiplier(long, int);

  private native int targetFileSizeMultiplier(long);

  private native void setMaxBytesForLevelBase(long, long);

  private native long maxBytesForLevelBase(long);

  private native void setLevelCompactionDynamicLevelBytes(long, boolean);

  private native boolean levelCompactionDynamicLevelBytes(long);

  private native void setMaxBytesForLevelMultiplier(long, double);

  private native double maxBytesForLevelMultiplier(long);

  private native void setMaxCompactionBytes(long, long);

  private native long maxCompactionBytes(long);

  private native void setArenaBlockSize(long, long) throws java.lang.IllegalArgumentException;

  private native long arenaBlockSize(long);

  private native void setDisableAutoCompactions(long, boolean);

  private native boolean disableAutoCompactions(long);

  private native void setCompactionStyle(long, byte);

  private native byte compactionStyle(long);

  private native void setMaxSequentialSkipInIterations(long, long);

  private native long maxSequentialSkipInIterations(long);

  private native void setMemTableFactory(long, long);

  private native java.lang.String memTableFactoryName(long);

  private native void setTableFactory(long, long);

  private native java.lang.String tableFactoryName(long);

  private native void setInplaceUpdateSupport(long, boolean);

  private native boolean inplaceUpdateSupport(long);

  private native void setInplaceUpdateNumLocks(long, long) throws java.lang.IllegalArgumentException;

  private native long inplaceUpdateNumLocks(long);

  private native void setMemtablePrefixBloomSizeRatio(long, double);

  private native double memtablePrefixBloomSizeRatio(long);

  private native void setBloomLocality(long, int);

  private native int bloomLocality(long);

  private native void setMaxSuccessiveMerges(long, long) throws java.lang.IllegalArgumentException;

  private native long maxSuccessiveMerges(long);

  private native void setOptimizeFiltersForHits(long, boolean);

  private native boolean optimizeFiltersForHits(long);

  private native void setMemtableHugePageSize(long, long);

  private native long memtableHugePageSize(long);

  private native void setSoftPendingCompactionBytesLimit(long, long);

  private native long softPendingCompactionBytesLimit(long);

  private native void setHardPendingCompactionBytesLimit(long, long);

  private native long hardPendingCompactionBytesLimit(long);

  private native void setLevel0FileNumCompactionTrigger(long, int);

  private native int level0FileNumCompactionTrigger(long);

  private native void setLevel0SlowdownWritesTrigger(long, int);

  private native int level0SlowdownWritesTrigger(long);

  private native void setLevel0StopWritesTrigger(long, int);

  private native int level0StopWritesTrigger(long);

  private native void setMaxBytesForLevelMultiplierAdditional(long, int[]);

  private native int[] maxBytesForLevelMultiplierAdditional(long);

  private native void setParanoidFileChecks(long, boolean);

  private native boolean paranoidFileChecks(long);

  private native void setMaxWriteBufferNumberToMaintain(long, int);

  private native int maxWriteBufferNumberToMaintain(long);

  private native void setCompactionPriority(long, byte);

  private native byte compactionPriority(long);

  private native void setReportBgIoStats(long, boolean);

  private native boolean reportBgIoStats(long);

  private native void setCompactionOptionsUniversal(long, long);

  private native void setCompactionOptionsFIFO(long, long);

  private native void setForceConsistencyChecks(long, boolean);

  private native boolean forceConsistencyChecks(long);

  public org.rocksdb.DBOptionsInterface setAvoidFlushDuringShutdown(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #299                // Method setAvoidFlushDuringShutdown:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAvoidFlushDuringRecovery(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #300                // Method setAvoidFlushDuringRecovery:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDumpMallocStats(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #301                // Method setDumpMallocStats:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setFailIfOptionsFileError(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #302                // Method setFailIfOptionsFileError:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setRowCache(org.rocksdb.Cache);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #303                // Method setRowCache:(Lorg/rocksdb/Cache;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllow2pc(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #304                // Method setAllow2pc:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalRecoveryMode(org.rocksdb.WALRecoveryMode);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #305                // Method setWalRecoveryMode:(Lorg/rocksdb/WALRecoveryMode;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setSkipStatsUpdateOnDbOpen(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #306                // Method setSkipStatsUpdateOnDbOpen:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWriteThreadSlowYieldUsec(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #307                // Method setWriteThreadSlowYieldUsec:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWriteThreadMaxYieldUsec(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #308                // Method setWriteThreadMaxYieldUsec:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setEnableWriteThreadAdaptiveYield(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #309                // Method setEnableWriteThreadAdaptiveYield:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllowConcurrentMemtableWrite(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #310                // Method setAllowConcurrentMemtableWrite:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDelayedWriteRate(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #311                // Method setDelayedWriteRate:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setEnableThreadTracking(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #312                // Method setEnableThreadTracking:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalBytesPerSync(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #313                // Method setWalBytesPerSync:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setBytesPerSync(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #314                // Method setBytesPerSync:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setUseAdaptiveMutex(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #315                // Method setUseAdaptiveMutex:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWritableFileMaxBufferSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #316                // Method setWritableFileMaxBufferSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setRandomAccessMaxBufferSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #317                // Method setRandomAccessMaxBufferSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setCompactionReadaheadSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #318                // Method setCompactionReadaheadSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setNewTableReaderForCompactionInputs(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #319                // Method setNewTableReaderForCompactionInputs:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAccessHintOnCompactionStart(org.rocksdb.AccessHint);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #320                // Method setAccessHintOnCompactionStart:(Lorg/rocksdb/AccessHint;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWriteBufferManager(org.rocksdb.WriteBufferManager);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #321                // Method setWriteBufferManager:(Lorg/rocksdb/WriteBufferManager;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDbWriteBufferSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #322                // Method setDbWriteBufferSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAdviseRandomOnOpen(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #323                // Method setAdviseRandomOnOpen:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setStatsDumpPeriodSec(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #324                // Method setStatsDumpPeriodSec:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setIsFdCloseOnExec(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #325                // Method setIsFdCloseOnExec:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllowMmapWrites(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #326                // Method setAllowMmapWrites:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllowMmapReads(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #327                // Method setAllowMmapReads:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllowFAllocate(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #328                // Method setAllowFAllocate:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setUseDirectIoForFlushAndCompaction(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #329                // Method setUseDirectIoForFlushAndCompaction:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setUseDirectReads(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #330                // Method setUseDirectReads:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setManifestPreallocationSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #331                // Method setManifestPreallocationSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalSizeLimitMB(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #332                // Method setWalSizeLimitMB:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalTtlSeconds(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #333                // Method setWalTtlSeconds:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setTableCacheNumshardbits(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #334                // Method setTableCacheNumshardbits:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxManifestFileSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #335                // Method setMaxManifestFileSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setRecycleLogFileNum(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #336                // Method setRecycleLogFileNum:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setKeepLogFileNum(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #337                // Method setKeepLogFileNum:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setLogFileTimeToRoll(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #338                // Method setLogFileTimeToRoll:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxLogFileSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #339                // Method setMaxLogFileSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxBackgroundJobs(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #340                // Method setMaxBackgroundJobs:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxBackgroundFlushes(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #341                // Method setMaxBackgroundFlushes:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxBackgroundCompactions(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #342                // Method setMaxBackgroundCompactions:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDeleteObsoleteFilesPeriodMicros(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #343                // Method setDeleteObsoleteFilesPeriodMicros:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #344                // Method setWalDir:(Ljava/lang/String;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDbLogDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #345                // Method setDbLogDir:(Ljava/lang/String;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDbPaths(java.util.Collection);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #346                // Method setDbPaths:(Ljava/util/Collection;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setUseFsync(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #347                // Method setUseFsync:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setStatistics(org.rocksdb.Statistics);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #348                // Method setStatistics:(Lorg/rocksdb/Statistics;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxTotalWalSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #349                // Method setMaxTotalWalSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxFileOpeningThreads(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #350                // Method setMaxFileOpeningThreads:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxOpenFiles(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #351                // Method setMaxOpenFiles:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setInfoLogLevel(org.rocksdb.InfoLogLevel);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #352                // Method setInfoLogLevel:(Lorg/rocksdb/InfoLogLevel;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setLogger(org.rocksdb.Logger);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #353                // Method setLogger:(Lorg/rocksdb/Logger;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setSstFileManager(org.rocksdb.SstFileManager);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #354                // Method setSstFileManager:(Lorg/rocksdb/SstFileManager;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setRateLimiter(org.rocksdb.RateLimiter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #355                // Method setRateLimiter:(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setParanoidChecks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #356                // Method setParanoidChecks:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setErrorIfExists(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #357                // Method setErrorIfExists:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setCreateMissingColumnFamilies(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #358                // Method setCreateMissingColumnFamilies:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setCreateIfMissing(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #359                // Method setCreateIfMissing:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setIncreaseParallelism(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #360                // Method setIncreaseParallelism:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setEnv(org.rocksdb.Env);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #361                // Method setEnv:(Lorg/rocksdb/Env;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface optimizeForSmallDb();
    Code:
       0: aload_0
       1: invokevirtual #362                // Method optimizeForSmallDb:()Lorg/rocksdb/Options;
       4: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setCompressionOptions(org.rocksdb.CompressionOptions);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #363                // Method setCompressionOptions:(Lorg/rocksdb/CompressionOptions;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setBottommostCompressionType(org.rocksdb.CompressionType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #364                // Method setBottommostCompressionType:(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setTableFormatConfig(org.rocksdb.TableFormatConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #365                // Method setTableFormatConfig:(Lorg/rocksdb/TableFormatConfig;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMemTableConfig(org.rocksdb.MemTableConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #366                // Method setMemTableConfig:(Lorg/rocksdb/MemTableConfig;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMaxTableFilesSizeFIFO(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #367                // Method setMaxTableFilesSizeFIFO:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMaxBytesForLevelMultiplier(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #368                // Method setMaxBytesForLevelMultiplier:(D)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroStopWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #369                // Method setLevelZeroStopWritesTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroSlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #370                // Method setLevelZeroSlowdownWritesTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroFileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #371                // Method setLevelZeroFileNumCompactionTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface useCappedPrefixExtractor(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #372                // Method useCappedPrefixExtractor:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface useFixedLengthPrefixExtractor(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #373                // Method useFixedLengthPrefixExtractor:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMergeOperator(org.rocksdb.MergeOperator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #374                // Method setMergeOperator:(Lorg/rocksdb/MergeOperator;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMergeOperatorName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #375                // Method setMergeOperatorName:(Ljava/lang/String;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setComparator(org.rocksdb.AbstractComparator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #376                // Method setComparator:(Lorg/rocksdb/AbstractComparator;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setComparator(org.rocksdb.BuiltinComparator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #377                // Method setComparator:(Lorg/rocksdb/BuiltinComparator;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeUniversalStyleCompaction(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #378                // Method optimizeUniversalStyleCompaction:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeUniversalStyleCompaction();
    Code:
       0: aload_0
       1: invokevirtual #379                // Method optimizeUniversalStyleCompaction:()Lorg/rocksdb/Options;
       4: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeLevelStyleCompaction(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #380                // Method optimizeLevelStyleCompaction:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeLevelStyleCompaction();
    Code:
       0: aload_0
       1: invokevirtual #381                // Method optimizeLevelStyleCompaction:()Lorg/rocksdb/Options;
       4: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeForPointLookup(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #382                // Method optimizeForPointLookup:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeForSmallDb();
    Code:
       0: aload_0
       1: invokevirtual #362                // Method optimizeForSmallDb:()Lorg/rocksdb/Options;
       4: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setForceConsistencyChecks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #383                // Method setForceConsistencyChecks:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setOptimizeFiltersForHits(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #384                // Method setOptimizeFiltersForHits:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #385                // Method setCompactionOptionsFIFO:(Lorg/rocksdb/CompactionOptionsFIFO;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #386                // Method setCompactionOptionsUniversal:(Lorg/rocksdb/CompactionOptionsUniversal;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionPriority(org.rocksdb.CompactionPriority);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #387                // Method setCompactionPriority:(Lorg/rocksdb/CompactionPriority;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setCompactionStyle(org.rocksdb.CompactionStyle);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #388                // Method setCompactionStyle:(Lorg/rocksdb/CompactionStyle;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMaxCompactionBytes(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #389                // Method setMaxCompactionBytes:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setLevelCompactionDynamicLevelBytes(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #390                // Method setLevelCompactionDynamicLevelBytes:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setNumLevels(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #391                // Method setNumLevels:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompressionPerLevel(java.util.List);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #392                // Method setCompressionPerLevel:(Ljava/util/List;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setBloomLocality(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #393                // Method setBloomLocality:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setInplaceUpdateSupport(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #394                // Method setInplaceUpdateSupport:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMaxWriteBufferNumberToMaintain(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #395                // Method setMaxWriteBufferNumberToMaintain:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMinWriteBufferNumberToMerge(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #396                // Method setMinWriteBufferNumberToMerge:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setCompressionType(org.rocksdb.CompressionType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #397                // Method setCompressionType:(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxBytesForLevelBase(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #398                // Method setMaxBytesForLevelBase:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxCompactionBytes(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #389                // Method setMaxCompactionBytes:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setLevel0FileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #399                // Method setLevel0FileNumCompactionTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setDisableAutoCompactions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #400                // Method setDisableAutoCompactions:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setWriteBufferSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #401                // Method setWriteBufferSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setReportBgIoStats(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #402                // Method setReportBgIoStats:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setParanoidFileChecks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #403                // Method setParanoidFileChecks:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxSuccessiveMerges(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #404                // Method setMaxSuccessiveMerges:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxSequentialSkipInIterations(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #405                // Method setMaxSequentialSkipInIterations:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setHardPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #406                // Method setHardPendingCompactionBytesLimit:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setSoftPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #407                // Method setSoftPendingCompactionBytesLimit:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxBytesForLevelMultiplierAdditional(int[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #408                // Method setMaxBytesForLevelMultiplierAdditional:([I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxBytesForLevelMultiplier(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #368                // Method setMaxBytesForLevelMultiplier:(D)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setTargetFileSizeMultiplier(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #409                // Method setTargetFileSizeMultiplier:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setTargetFileSizeBase(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #410                // Method setTargetFileSizeBase:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setLevel0StopWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #411                // Method setLevel0StopWritesTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setLevel0SlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #412                // Method setLevel0SlowdownWritesTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setArenaBlockSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #413                // Method setArenaBlockSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMemtableHugePageSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #414                // Method setMemtableHugePageSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMemtablePrefixBloomSizeRatio(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #415                // Method setMemtablePrefixBloomSizeRatio:(D)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setInplaceUpdateNumLocks(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #416                // Method setInplaceUpdateNumLocks:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxWriteBufferNumber(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #417                // Method setMaxWriteBufferNumber:(I)Lorg/rocksdb/Options;
       5: areturn

  static {};
    Code:
       0: ldc_w         #418                // class org/rocksdb/Options
       3: invokevirtual #419                // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #19                 // Field $assertionsDisabled:Z
      17: invokestatic  #420                // Method org/rocksdb/RocksDB.loadLibrary:()V
      20: return
}
