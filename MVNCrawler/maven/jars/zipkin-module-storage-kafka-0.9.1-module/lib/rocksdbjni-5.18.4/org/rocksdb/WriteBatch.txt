Compiled from "WriteBatch.java"
public class org.rocksdb.WriteBatch extends org.rocksdb.AbstractWriteBatch {
  public org.rocksdb.WriteBatch();
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #1                  // Method "<init>":(I)V
       5: return

  public org.rocksdb.WriteBatch(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #2                  // Method newWriteBatch:(I)J
       5: invokespecial #3                  // Method org/rocksdb/AbstractWriteBatch."<init>":(J)V
       8: return

  public org.rocksdb.WriteBatch(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_1
       3: arraylength
       4: invokestatic  #4                  // Method newWriteBatch:([BI)J
       7: invokespecial #3                  // Method org/rocksdb/AbstractWriteBatch."<init>":(J)V
      10: return

  public void iterate(org.rocksdb.WriteBatch$Handler) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: aload_1
       6: getfield      #6                  // Field org/rocksdb/WriteBatch$Handler.nativeHandle_:J
       9: invokespecial #7                  // Method iterate:(JJ)V
      12: return

  public byte[] data() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: invokespecial #8                  // Method data:(J)[B
       8: areturn

  public long getDataSize();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: invokespecial #9                  // Method getDataSize:(J)J
       8: lreturn

  public boolean hasPut();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: invokespecial #10                 // Method hasPut:(J)Z
       8: ireturn

  public boolean hasDelete();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: invokespecial #11                 // Method hasDelete:(J)Z
       8: ireturn

  public boolean hasSingleDelete();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: invokespecial #12                 // Method hasSingleDelete:(J)Z
       8: ireturn

  public boolean hasDeleteRange();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: invokespecial #13                 // Method hasDeleteRange:(J)Z
       8: ireturn

  public boolean hasMerge();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: invokespecial #14                 // Method hasMerge:(J)Z
       8: ireturn

  public boolean hasBeginPrepare();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: invokespecial #15                 // Method hasBeginPrepare:(J)Z
       8: ireturn

  public boolean hasEndPrepare();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: invokespecial #16                 // Method hasEndPrepare:(J)Z
       8: ireturn

  public boolean hasCommit();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: invokespecial #17                 // Method hasCommit:(J)Z
       8: ireturn

  public boolean hasRollback();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: invokespecial #18                 // Method hasRollback:(J)Z
       8: ireturn

  public org.rocksdb.WriteBatch getWriteBatch();
    Code:
       0: aload_0
       1: areturn

  public void markWalTerminationPoint();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: invokespecial #19                 // Method markWalTerminationPoint:(J)V
       8: return

  public org.rocksdb.WriteBatch$SavePoint getWalTerminationPoint();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: invokespecial #20                 // Method getWalTerminationPoint:(J)Lorg/rocksdb/WriteBatch$SavePoint;
       8: areturn

  org.rocksdb.WriteBatch getWriteBatch(long);
    Code:
       0: aload_0
       1: areturn

  org.rocksdb.WriteBatch(long);
    Code:
       0: aload_0
       1: lload_1
       2: iconst_0
       3: invokespecial #21                 // Method "<init>":(JZ)V
       6: return

  org.rocksdb.WriteBatch(long, boolean);
    Code:
       0: aload_0
       1: lload_1
       2: invokespecial #3                  // Method org/rocksdb/AbstractWriteBatch."<init>":(J)V
       5: iload_3
       6: ifne          13
       9: aload_0
      10: invokevirtual #22                 // Method disOwnNativeHandle:()V
      13: return

  protected final native void disposeInternal(long);

  final native int count0(long);

  final native void put(long, byte[], int, byte[], int);

  final native void put(long, byte[], int, byte[], int, long);

  final native void merge(long, byte[], int, byte[], int);

  final native void merge(long, byte[], int, byte[], int, long);

  final native void delete(long, byte[], int) throws org.rocksdb.RocksDBException;

  final native void delete(long, byte[], int, long) throws org.rocksdb.RocksDBException;

  final native void singleDelete(long, byte[], int) throws org.rocksdb.RocksDBException;

  final native void singleDelete(long, byte[], int, long) throws org.rocksdb.RocksDBException;

  final native void deleteRange(long, byte[], int, byte[], int);

  final native void deleteRange(long, byte[], int, byte[], int, long);

  final native void putLogData(long, byte[], int) throws org.rocksdb.RocksDBException;

  final native void clear0(long);

  final native void setSavePoint0(long);

  final native void rollbackToSavePoint0(long);

  final native void popSavePoint(long) throws org.rocksdb.RocksDBException;

  final native void setMaxBytes(long, long);

  private static native long newWriteBatch(int);

  private static native long newWriteBatch(byte[], int);

  private native void iterate(long, long) throws org.rocksdb.RocksDBException;

  private native byte[] data(long) throws org.rocksdb.RocksDBException;

  private native long getDataSize(long);

  private native boolean hasPut(long);

  private native boolean hasDelete(long);

  private native boolean hasSingleDelete(long);

  private native boolean hasDeleteRange(long);

  private native boolean hasMerge(long);

  private native boolean hasBeginPrepare(long);

  private native boolean hasEndPrepare(long);

  private native boolean hasCommit(long);

  private native boolean hasRollback(long);

  private native void markWalTerminationPoint(long);

  private native org.rocksdb.WriteBatch$SavePoint getWalTerminationPoint(long);
}
