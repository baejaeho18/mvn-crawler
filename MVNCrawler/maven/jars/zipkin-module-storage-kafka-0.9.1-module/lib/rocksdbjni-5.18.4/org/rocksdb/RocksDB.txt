Compiled from "RocksDB.java"
public class org.rocksdb.RocksDB extends org.rocksdb.RocksObject {
  public static final byte[] DEFAULT_COLUMN_FAMILY;

  public static final int NOT_FOUND;

  private static java.util.concurrent.atomic.AtomicReference<org.rocksdb.RocksDB$LibraryState> libraryLoaded;

  protected org.rocksdb.DBOptionsInterface options_;

  static final boolean $assertionsDisabled;

  public static void loadLibrary();
    Code:
       0: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
       3: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       6: getstatic     #3                  // Field org/rocksdb/RocksDB$LibraryState.LOADED:Lorg/rocksdb/RocksDB$LibraryState;
       9: if_acmpne     13
      12: return
      13: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
      16: getstatic     #4                  // Field org/rocksdb/RocksDB$LibraryState.NOT_LOADED:Lorg/rocksdb/RocksDB$LibraryState;
      19: getstatic     #5                  // Field org/rocksdb/RocksDB$LibraryState.LOADING:Lorg/rocksdb/RocksDB$LibraryState;
      22: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      25: ifeq          137
      28: ldc           #7                  // String ROCKSDB_SHAREDLIB_DIR
      30: invokestatic  #8                  // Method java/lang/System.getenv:(Ljava/lang/String;)Ljava/lang/String;
      33: astore_0
      34: invokestatic  #9                  // Method org/rocksdb/CompressionType.values:()[Lorg/rocksdb/CompressionType;
      37: astore_1
      38: aload_1
      39: arraylength
      40: istore_2
      41: iconst_0
      42: istore_3
      43: iload_3
      44: iload_2
      45: if_icmpge     80
      48: aload_1
      49: iload_3
      50: aaload
      51: astore        4
      53: aload         4
      55: invokevirtual #10                 // Method org/rocksdb/CompressionType.getLibraryName:()Ljava/lang/String;
      58: ifnull        69
      61: aload         4
      63: invokevirtual #10                 // Method org/rocksdb/CompressionType.getLibraryName:()Ljava/lang/String;
      66: invokestatic  #11                 // Method java/lang/System.loadLibrary:(Ljava/lang/String;)V
      69: goto          74
      72: astore        5
      74: iinc          3, 1
      77: goto          43
      80: invokestatic  #13                 // Method org/rocksdb/NativeLibraryLoader.getInstance:()Lorg/rocksdb/NativeLibraryLoader;
      83: aload_0
      84: invokevirtual #14                 // Method org/rocksdb/NativeLibraryLoader.loadLibrary:(Ljava/lang/String;)V
      87: goto          127
      90: astore_1
      91: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
      94: getstatic     #4                  // Field org/rocksdb/RocksDB$LibraryState.NOT_LOADED:Lorg/rocksdb/RocksDB$LibraryState;
      97: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     100: new           #17                 // class java/lang/RuntimeException
     103: dup
     104: new           #18                 // class java/lang/StringBuilder
     107: dup
     108: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
     111: ldc           #20                 // String Unable to load the RocksDB shared library
     113: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     116: aload_1
     117: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     120: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     123: invokespecial #24                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
     126: athrow
     127: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
     130: getstatic     #3                  // Field org/rocksdb/RocksDB$LibraryState.LOADED:Lorg/rocksdb/RocksDB$LibraryState;
     133: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     136: return
     137: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
     140: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     143: getstatic     #5                  // Field org/rocksdb/RocksDB$LibraryState.LOADING:Lorg/rocksdb/RocksDB$LibraryState;
     146: if_acmpne     162
     149: ldc2_w        #25                 // long 10l
     152: invokestatic  #27                 // Method java/lang/Thread.sleep:(J)V
     155: goto          137
     158: astore_0
     159: goto          137
     162: return
    Exception table:
       from    to  target type
          53    69    72   Class java/lang/UnsatisfiedLinkError
          80    87    90   Class java/io/IOException
         149   155   158   Class java/lang/InterruptedException

  public static void loadLibrary(java.util.List<java.lang.String>);
    Code:
       0: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
       3: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       6: getstatic     #3                  // Field org/rocksdb/RocksDB$LibraryState.LOADED:Lorg/rocksdb/RocksDB$LibraryState;
       9: if_acmpne     13
      12: return
      13: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
      16: getstatic     #4                  // Field org/rocksdb/RocksDB$LibraryState.NOT_LOADED:Lorg/rocksdb/RocksDB$LibraryState;
      19: getstatic     #5                  // Field org/rocksdb/RocksDB$LibraryState.LOADING:Lorg/rocksdb/RocksDB$LibraryState;
      22: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      25: ifeq          239
      28: invokestatic  #9                  // Method org/rocksdb/CompressionType.values:()[Lorg/rocksdb/CompressionType;
      31: astore_1
      32: aload_1
      33: arraylength
      34: istore_2
      35: iconst_0
      36: istore_3
      37: iload_3
      38: iload_2
      39: if_icmpge     139
      42: aload_1
      43: iload_3
      44: aaload
      45: astore        4
      47: aload         4
      49: getstatic     #29                 // Field org/rocksdb/CompressionType.NO_COMPRESSION:Lorg/rocksdb/CompressionType;
      52: invokevirtual #30                 // Method org/rocksdb/CompressionType.equals:(Ljava/lang/Object;)Z
      55: ifeq          61
      58: goto          133
      61: aload_0
      62: invokeinterface #31,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      67: astore        5
      69: aload         5
      71: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      76: ifeq          133
      79: aload         5
      81: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      86: checkcast     #34                 // class java/lang/String
      89: astore        6
      91: new           #18                 // class java/lang/StringBuilder
      94: dup
      95: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      98: aload         6
     100: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     103: ldc           #35                 // String /
     105: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     108: aload         4
     110: invokevirtual #10                 // Method org/rocksdb/CompressionType.getLibraryName:()Ljava/lang/String;
     113: invokestatic  #36                 // Method org/rocksdb/util/Environment.getSharedLibraryFileName:(Ljava/lang/String;)Ljava/lang/String;
     116: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     119: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     122: invokestatic  #37                 // Method java/lang/System.load:(Ljava/lang/String;)V
     125: goto          133
     128: astore        7
     130: goto          69
     133: iinc          3, 1
     136: goto          37
     139: iconst_0
     140: istore_1
     141: aconst_null
     142: astore_2
     143: aload_0
     144: invokeinterface #31,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     149: astore_3
     150: aload_3
     151: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     156: ifeq          214
     159: aload_3
     160: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     165: checkcast     #34                 // class java/lang/String
     168: astore        4
     170: new           #18                 // class java/lang/StringBuilder
     173: dup
     174: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
     177: aload         4
     179: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     182: ldc           #35                 // String /
     184: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     187: ldc           #38                 // String rocksdbjni
     189: invokestatic  #39                 // Method org/rocksdb/util/Environment.getJniLibraryFileName:(Ljava/lang/String;)Ljava/lang/String;
     192: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     195: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     198: invokestatic  #37                 // Method java/lang/System.load:(Ljava/lang/String;)V
     201: iconst_1
     202: istore_1
     203: goto          214
     206: astore        5
     208: aload         5
     210: astore_2
     211: goto          150
     214: iload_1
     215: ifne          229
     218: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
     221: getstatic     #4                  // Field org/rocksdb/RocksDB$LibraryState.NOT_LOADED:Lorg/rocksdb/RocksDB$LibraryState;
     224: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     227: aload_2
     228: athrow
     229: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
     232: getstatic     #3                  // Field org/rocksdb/RocksDB$LibraryState.LOADED:Lorg/rocksdb/RocksDB$LibraryState;
     235: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     238: return
     239: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
     242: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     245: getstatic     #5                  // Field org/rocksdb/RocksDB$LibraryState.LOADING:Lorg/rocksdb/RocksDB$LibraryState;
     248: if_acmpne     264
     251: ldc2_w        #25                 // long 10l
     254: invokestatic  #27                 // Method java/lang/Thread.sleep:(J)V
     257: goto          239
     260: astore_1
     261: goto          239
     264: return
    Exception table:
       from    to  target type
          91   125   128   Class java/lang/UnsatisfiedLinkError
         170   203   206   Class java/lang/UnsatisfiedLinkError
         251   257   260   Class java/lang/InterruptedException

  public static org.rocksdb.RocksDB open(java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #40                 // class org/rocksdb/Options
       3: dup
       4: invokespecial #41                 // Method org/rocksdb/Options."<init>":()V
       7: astore_1
       8: aload_1
       9: iconst_1
      10: invokevirtual #42                 // Method org/rocksdb/Options.setCreateIfMissing:(Z)Lorg/rocksdb/Options;
      13: pop
      14: aload_1
      15: aload_0
      16: invokestatic  #43                 // Method open:(Lorg/rocksdb/Options;Ljava/lang/String;)Lorg/rocksdb/RocksDB;
      19: areturn

  public static org.rocksdb.RocksDB open(java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #44                 // class org/rocksdb/DBOptions
       3: dup
       4: invokespecial #45                 // Method org/rocksdb/DBOptions."<init>":()V
       7: astore_3
       8: aload_3
       9: aload_0
      10: aload_1
      11: aload_2
      12: invokestatic  #46                 // Method open:(Lorg/rocksdb/DBOptions;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/RocksDB;
      15: areturn

  public static org.rocksdb.RocksDB open(org.rocksdb.Options, java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #47                 // class org/rocksdb/RocksDB
       3: dup
       4: aload_0
       5: getfield      #48                 // Field org/rocksdb/Options.nativeHandle_:J
       8: aload_1
       9: invokestatic  #49                 // Method open:(JLjava/lang/String;)J
      12: invokespecial #50                 // Method "<init>":(J)V
      15: astore_2
      16: aload_2
      17: aload_0
      18: invokevirtual #51                 // Method storeOptionsInstance:(Lorg/rocksdb/DBOptionsInterface;)V
      21: aload_2
      22: areturn

  public static org.rocksdb.RocksDB open(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_2
       1: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
       6: anewarray     #53                 // class "[B"
       9: astore        4
      11: aload_2
      12: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      17: newarray       long
      19: astore        5
      21: iconst_0
      22: istore        6
      24: iload         6
      26: aload_2
      27: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      32: if_icmpge     77
      35: aload_2
      36: iload         6
      38: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      43: checkcast     #55                 // class org/rocksdb/ColumnFamilyDescriptor
      46: astore        7
      48: aload         4
      50: iload         6
      52: aload         7
      54: invokevirtual #56                 // Method org/rocksdb/ColumnFamilyDescriptor.columnFamilyName:()[B
      57: aastore
      58: aload         5
      60: iload         6
      62: aload         7
      64: invokevirtual #57                 // Method org/rocksdb/ColumnFamilyDescriptor.columnFamilyOptions:()Lorg/rocksdb/ColumnFamilyOptions;
      67: getfield      #58                 // Field org/rocksdb/ColumnFamilyOptions.nativeHandle_:J
      70: lastore
      71: iinc          6, 1
      74: goto          24
      77: aload_0
      78: getfield      #59                 // Field org/rocksdb/DBOptions.nativeHandle_:J
      81: aload_1
      82: aload         4
      84: aload         5
      86: invokestatic  #60                 // Method open:(JLjava/lang/String;[[B[J)[J
      89: astore        6
      91: new           #47                 // class org/rocksdb/RocksDB
      94: dup
      95: aload         6
      97: iconst_0
      98: laload
      99: invokespecial #50                 // Method "<init>":(J)V
     102: astore        7
     104: aload         7
     106: aload_0
     107: invokevirtual #51                 // Method storeOptionsInstance:(Lorg/rocksdb/DBOptionsInterface;)V
     110: iconst_1
     111: istore        8
     113: iload         8
     115: aload         6
     117: arraylength
     118: if_icmpge     148
     121: aload_3
     122: new           #61                 // class org/rocksdb/ColumnFamilyHandle
     125: dup
     126: aload         7
     128: aload         6
     130: iload         8
     132: laload
     133: invokespecial #62                 // Method org/rocksdb/ColumnFamilyHandle."<init>":(Lorg/rocksdb/RocksDB;J)V
     136: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     141: pop
     142: iinc          8, 1
     145: goto          113
     148: aload         7
     150: areturn

  public static org.rocksdb.RocksDB openReadOnly(java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #40                 // class org/rocksdb/Options
       3: dup
       4: invokespecial #41                 // Method org/rocksdb/Options."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokestatic  #64                 // Method openReadOnly:(Lorg/rocksdb/Options;Ljava/lang/String;)Lorg/rocksdb/RocksDB;
      13: areturn

  public static org.rocksdb.RocksDB openReadOnly(java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #44                 // class org/rocksdb/DBOptions
       3: dup
       4: invokespecial #45                 // Method org/rocksdb/DBOptions."<init>":()V
       7: astore_3
       8: aload_3
       9: aload_0
      10: aload_1
      11: aload_2
      12: invokestatic  #65                 // Method openReadOnly:(Lorg/rocksdb/DBOptions;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/RocksDB;
      15: areturn

  public static org.rocksdb.RocksDB openReadOnly(org.rocksdb.Options, java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #47                 // class org/rocksdb/RocksDB
       3: dup
       4: aload_0
       5: getfield      #48                 // Field org/rocksdb/Options.nativeHandle_:J
       8: aload_1
       9: invokestatic  #66                 // Method openROnly:(JLjava/lang/String;)J
      12: invokespecial #50                 // Method "<init>":(J)V
      15: astore_2
      16: aload_2
      17: aload_0
      18: invokevirtual #51                 // Method storeOptionsInstance:(Lorg/rocksdb/DBOptionsInterface;)V
      21: aload_2
      22: areturn

  public static org.rocksdb.RocksDB openReadOnly(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_2
       1: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
       6: anewarray     #53                 // class "[B"
       9: astore        4
      11: aload_2
      12: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      17: newarray       long
      19: astore        5
      21: iconst_0
      22: istore        6
      24: iload         6
      26: aload_2
      27: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      32: if_icmpge     77
      35: aload_2
      36: iload         6
      38: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      43: checkcast     #55                 // class org/rocksdb/ColumnFamilyDescriptor
      46: astore        7
      48: aload         4
      50: iload         6
      52: aload         7
      54: invokevirtual #56                 // Method org/rocksdb/ColumnFamilyDescriptor.columnFamilyName:()[B
      57: aastore
      58: aload         5
      60: iload         6
      62: aload         7
      64: invokevirtual #57                 // Method org/rocksdb/ColumnFamilyDescriptor.columnFamilyOptions:()Lorg/rocksdb/ColumnFamilyOptions;
      67: getfield      #58                 // Field org/rocksdb/ColumnFamilyOptions.nativeHandle_:J
      70: lastore
      71: iinc          6, 1
      74: goto          24
      77: aload_0
      78: getfield      #59                 // Field org/rocksdb/DBOptions.nativeHandle_:J
      81: aload_1
      82: aload         4
      84: aload         5
      86: invokestatic  #67                 // Method openROnly:(JLjava/lang/String;[[B[J)[J
      89: astore        6
      91: new           #47                 // class org/rocksdb/RocksDB
      94: dup
      95: aload         6
      97: iconst_0
      98: laload
      99: invokespecial #50                 // Method "<init>":(J)V
     102: astore        7
     104: aload         7
     106: aload_0
     107: invokevirtual #51                 // Method storeOptionsInstance:(Lorg/rocksdb/DBOptionsInterface;)V
     110: iconst_1
     111: istore        8
     113: iload         8
     115: aload         6
     117: arraylength
     118: if_icmpge     148
     121: aload_3
     122: new           #61                 // class org/rocksdb/ColumnFamilyHandle
     125: dup
     126: aload         7
     128: aload         6
     130: iload         8
     132: laload
     133: invokespecial #62                 // Method org/rocksdb/ColumnFamilyHandle."<init>":(Lorg/rocksdb/RocksDB;J)V
     136: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     141: pop
     142: iinc          8, 1
     145: goto          113
     148: aload         7
     150: areturn

  public static java.util.List<byte[]> listColumnFamilies(org.rocksdb.Options, java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: getfield      #48                 // Field org/rocksdb/Options.nativeHandle_:J
       4: aload_1
       5: invokestatic  #68                 // Method listColumnFamilies:(JLjava/lang/String;)[[B
       8: invokestatic  #69                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      11: areturn

  protected void storeOptionsInstance(org.rocksdb.DBOptionsInterface);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #70                 // Field options_:Lorg/rocksdb/DBOptionsInterface;
       5: return

  private static void checkBounds(int, int, int);
    Code:
       0: iload_0
       1: iload_1
       2: ior
       3: iload_0
       4: iload_1
       5: iadd
       6: ior
       7: iload_2
       8: iload_0
       9: iload_1
      10: iadd
      11: isub
      12: ior
      13: ifge          54
      16: new           #71                 // class java/lang/IndexOutOfBoundsException
      19: dup
      20: ldc           #72                 // String offset(%d), len(%d), size(%d)
      22: iconst_3
      23: anewarray     #73                 // class java/lang/Object
      26: dup
      27: iconst_0
      28: iload_0
      29: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      32: aastore
      33: dup
      34: iconst_1
      35: iload_1
      36: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      39: aastore
      40: dup
      41: iconst_2
      42: iload_2
      43: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      46: aastore
      47: invokestatic  #75                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      50: invokespecial #76                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      53: athrow
      54: return

  public void put(byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: iconst_0
       7: aload_1
       8: arraylength
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: invokevirtual #78                 // Method put:(J[BII[BII)V
      16: return

  public void put(byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_2
       1: iload_3
       2: aload_1
       3: arraylength
       4: invokestatic  #79                 // Method checkBounds:(III)V
       7: iload         5
       9: iload         6
      11: aload         4
      13: arraylength
      14: invokestatic  #79                 // Method checkBounds:(III)V
      17: aload_0
      18: aload_0
      19: getfield      #77                 // Field nativeHandle_:J
      22: aload_1
      23: iload_2
      24: iload_3
      25: aload         4
      27: iload         5
      29: iload         6
      31: invokevirtual #78                 // Method put:(J[BII[BII)V
      34: return

  public void put(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: iconst_0
       7: aload_2
       8: arraylength
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload_1
      14: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokevirtual #81                 // Method put:(J[BII[BIIJ)V
      20: return

  public void put(org.rocksdb.ColumnFamilyHandle, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #79                 // Method checkBounds:(III)V
       8: iload         6
      10: iload         7
      12: aload         5
      14: arraylength
      15: invokestatic  #79                 // Method checkBounds:(III)V
      18: aload_0
      19: aload_0
      20: getfield      #77                 // Field nativeHandle_:J
      23: aload_2
      24: iload_3
      25: iload         4
      27: aload         5
      29: iload         6
      31: iload         7
      33: aload_1
      34: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      37: invokevirtual #81                 // Method put:(J[BII[BIIJ)V
      40: return

  public void put(org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: aload_3
      14: iconst_0
      15: aload_3
      16: arraylength
      17: invokevirtual #83                 // Method put:(JJ[BII[BII)V
      20: return

  public void put(org.rocksdb.WriteOptions, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #79                 // Method checkBounds:(III)V
       8: iload         6
      10: iload         7
      12: aload         5
      14: arraylength
      15: invokestatic  #79                 // Method checkBounds:(III)V
      18: aload_0
      19: aload_0
      20: getfield      #77                 // Field nativeHandle_:J
      23: aload_1
      24: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
      27: aload_2
      28: iload_3
      29: iload         4
      31: aload         5
      33: iload         6
      35: iload         7
      37: invokevirtual #83                 // Method put:(JJ[BII[BII)V
      40: return

  public void put(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload         4
      15: iconst_0
      16: aload         4
      18: arraylength
      19: aload_1
      20: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      23: invokevirtual #84                 // Method put:(JJ[BII[BIIJ)V
      26: return

  public void put(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload         4
       2: iload         5
       4: aload_3
       5: arraylength
       6: invokestatic  #79                 // Method checkBounds:(III)V
       9: iload         7
      11: iload         8
      13: aload         6
      15: arraylength
      16: invokestatic  #79                 // Method checkBounds:(III)V
      19: aload_0
      20: aload_0
      21: getfield      #77                 // Field nativeHandle_:J
      24: aload_2
      25: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
      28: aload_3
      29: iload         4
      31: iload         5
      33: aload         6
      35: iload         7
      37: iload         8
      39: aload_1
      40: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      43: invokevirtual #84                 // Method put:(JJ[BII[BIIJ)V
      46: return

  public boolean keyMayExist(byte[], java.lang.StringBuilder);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: iconst_0
       7: aload_1
       8: arraylength
       9: aload_2
      10: invokevirtual #85                 // Method keyMayExist:(J[BIILjava/lang/StringBuilder;)Z
      13: ireturn

  public boolean keyMayExist(byte[], int, int, java.lang.StringBuilder);
    Code:
       0: iload_2
       1: iload_3
       2: aload_1
       3: arraylength
       4: invokestatic  #79                 // Method checkBounds:(III)V
       7: aload_0
       8: aload_0
       9: getfield      #77                 // Field nativeHandle_:J
      12: aload_1
      13: iload_2
      14: iload_3
      15: aload         4
      17: invokevirtual #85                 // Method keyMayExist:(J[BIILjava/lang/StringBuilder;)Z
      20: ireturn

  public boolean keyMayExist(org.rocksdb.ColumnFamilyHandle, byte[], java.lang.StringBuilder);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: iconst_0
       7: aload_2
       8: arraylength
       9: aload_1
      10: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      13: aload_3
      14: invokevirtual #86                 // Method keyMayExist:(J[BIIJLjava/lang/StringBuilder;)Z
      17: ireturn

  public boolean keyMayExist(org.rocksdb.ColumnFamilyHandle, byte[], int, int, java.lang.StringBuilder);
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #79                 // Method checkBounds:(III)V
       8: aload_0
       9: aload_0
      10: getfield      #77                 // Field nativeHandle_:J
      13: aload_2
      14: iload_3
      15: iload         4
      17: aload_1
      18: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      21: aload         5
      23: invokevirtual #86                 // Method keyMayExist:(J[BIIJLjava/lang/StringBuilder;)Z
      26: ireturn

  public boolean keyMayExist(org.rocksdb.ReadOptions, byte[], java.lang.StringBuilder);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: aload_3
      14: invokevirtual #88                 // Method keyMayExist:(JJ[BIILjava/lang/StringBuilder;)Z
      17: ireturn

  public boolean keyMayExist(org.rocksdb.ReadOptions, byte[], int, int, java.lang.StringBuilder);
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #79                 // Method checkBounds:(III)V
       8: aload_0
       9: aload_0
      10: getfield      #77                 // Field nativeHandle_:J
      13: aload_1
      14: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
      17: aload_2
      18: iload_3
      19: iload         4
      21: aload         5
      23: invokevirtual #88                 // Method keyMayExist:(JJ[BIILjava/lang/StringBuilder;)Z
      26: ireturn

  public boolean keyMayExist(org.rocksdb.ReadOptions, org.rocksdb.ColumnFamilyHandle, byte[], java.lang.StringBuilder);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload_2
      14: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: aload         4
      19: invokevirtual #89                 // Method keyMayExist:(JJ[BIIJLjava/lang/StringBuilder;)Z
      22: ireturn

  public boolean keyMayExist(org.rocksdb.ReadOptions, org.rocksdb.ColumnFamilyHandle, byte[], int, int, java.lang.StringBuilder);
    Code:
       0: iload         4
       2: iload         5
       4: aload_3
       5: arraylength
       6: invokestatic  #79                 // Method checkBounds:(III)V
       9: aload_0
      10: aload_0
      11: getfield      #77                 // Field nativeHandle_:J
      14: aload_1
      15: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
      18: aload_3
      19: iload         4
      21: iload         5
      23: aload_2
      24: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      27: aload         6
      29: invokevirtual #89                 // Method keyMayExist:(JJ[BIIJLjava/lang/StringBuilder;)Z
      32: ireturn

  public void write(org.rocksdb.WriteOptions, org.rocksdb.WriteBatch) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: getfield      #90                 // Field org/rocksdb/WriteBatch.nativeHandle_:J
      13: invokevirtual #91                 // Method write0:(JJJ)V
      16: return

  public void write(org.rocksdb.WriteOptions, org.rocksdb.WriteBatchWithIndex) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: getfield      #92                 // Field org/rocksdb/WriteBatchWithIndex.nativeHandle_:J
      13: invokevirtual #93                 // Method write1:(JJJ)V
      16: return

  public void merge(byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: iconst_0
       7: aload_1
       8: arraylength
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: invokevirtual #94                 // Method merge:(J[BII[BII)V
      16: return

  public void merge(byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_2
       1: iload_3
       2: aload_1
       3: arraylength
       4: invokestatic  #79                 // Method checkBounds:(III)V
       7: iload         5
       9: iload         6
      11: aload         4
      13: arraylength
      14: invokestatic  #79                 // Method checkBounds:(III)V
      17: aload_0
      18: aload_0
      19: getfield      #77                 // Field nativeHandle_:J
      22: aload_1
      23: iload_2
      24: iload_3
      25: aload         4
      27: iload         5
      29: iload         6
      31: invokevirtual #94                 // Method merge:(J[BII[BII)V
      34: return

  public void merge(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: iconst_0
       7: aload_2
       8: arraylength
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload_1
      14: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokevirtual #95                 // Method merge:(J[BII[BIIJ)V
      20: return

  public void merge(org.rocksdb.ColumnFamilyHandle, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #79                 // Method checkBounds:(III)V
       8: iload         6
      10: iload         7
      12: aload         5
      14: arraylength
      15: invokestatic  #79                 // Method checkBounds:(III)V
      18: aload_0
      19: aload_0
      20: getfield      #77                 // Field nativeHandle_:J
      23: aload_2
      24: iload_3
      25: iload         4
      27: aload         5
      29: iload         6
      31: iload         7
      33: aload_1
      34: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      37: invokevirtual #95                 // Method merge:(J[BII[BIIJ)V
      40: return

  public void merge(org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: aload_3
      14: iconst_0
      15: aload_3
      16: arraylength
      17: invokevirtual #96                 // Method merge:(JJ[BII[BII)V
      20: return

  public void merge(org.rocksdb.WriteOptions, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #79                 // Method checkBounds:(III)V
       8: iload         6
      10: iload         7
      12: aload         5
      14: arraylength
      15: invokestatic  #79                 // Method checkBounds:(III)V
      18: aload_0
      19: aload_0
      20: getfield      #77                 // Field nativeHandle_:J
      23: aload_1
      24: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
      27: aload_2
      28: iload_3
      29: iload         4
      31: aload         5
      33: iload         6
      35: iload         7
      37: invokevirtual #96                 // Method merge:(JJ[BII[BII)V
      40: return

  public void merge(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload         4
      15: iconst_0
      16: aload         4
      18: arraylength
      19: aload_1
      20: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      23: invokevirtual #97                 // Method merge:(JJ[BII[BIIJ)V
      26: return

  public void merge(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload         4
       2: iload         5
       4: aload_3
       5: arraylength
       6: invokestatic  #79                 // Method checkBounds:(III)V
       9: iload         7
      11: iload         8
      13: aload         6
      15: arraylength
      16: invokestatic  #79                 // Method checkBounds:(III)V
      19: aload_0
      20: aload_0
      21: getfield      #77                 // Field nativeHandle_:J
      24: aload_2
      25: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
      28: aload_3
      29: iload         4
      31: iload         5
      33: aload         6
      35: iload         7
      37: iload         8
      39: aload_1
      40: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      43: invokevirtual #97                 // Method merge:(JJ[BII[BIIJ)V
      46: return

  public int get(byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: iconst_0
       7: aload_1
       8: arraylength
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: invokevirtual #98                 // Method get:(J[BII[BII)I
      16: ireturn

  public int get(byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_2
       1: iload_3
       2: aload_1
       3: arraylength
       4: invokestatic  #79                 // Method checkBounds:(III)V
       7: iload         5
       9: iload         6
      11: aload         4
      13: arraylength
      14: invokestatic  #79                 // Method checkBounds:(III)V
      17: aload_0
      18: aload_0
      19: getfield      #77                 // Field nativeHandle_:J
      22: aload_1
      23: iload_2
      24: iload_3
      25: aload         4
      27: iload         5
      29: iload         6
      31: invokevirtual #98                 // Method get:(J[BII[BII)I
      34: ireturn

  public int get(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException, java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: iconst_0
       7: aload_2
       8: arraylength
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload_1
      14: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokevirtual #99                 // Method get:(J[BII[BIIJ)I
      20: ireturn

  public int get(org.rocksdb.ColumnFamilyHandle, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException, java.lang.IllegalArgumentException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #79                 // Method checkBounds:(III)V
       8: iload         6
      10: iload         7
      12: aload         5
      14: arraylength
      15: invokestatic  #79                 // Method checkBounds:(III)V
      18: aload_0
      19: aload_0
      20: getfield      #77                 // Field nativeHandle_:J
      23: aload_2
      24: iload_3
      25: iload         4
      27: aload         5
      29: iload         6
      31: iload         7
      33: aload_1
      34: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      37: invokevirtual #99                 // Method get:(J[BII[BIIJ)I
      40: ireturn

  public int get(org.rocksdb.ReadOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: aload_3
      14: iconst_0
      15: aload_3
      16: arraylength
      17: invokevirtual #100                // Method get:(JJ[BII[BII)I
      20: ireturn

  public int get(org.rocksdb.ReadOptions, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #79                 // Method checkBounds:(III)V
       8: iload         6
      10: iload         7
      12: aload         5
      14: arraylength
      15: invokestatic  #79                 // Method checkBounds:(III)V
      18: aload_0
      19: aload_0
      20: getfield      #77                 // Field nativeHandle_:J
      23: aload_1
      24: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
      27: aload_2
      28: iload_3
      29: iload         4
      31: aload         5
      33: iload         6
      35: iload         7
      37: invokevirtual #100                // Method get:(JJ[BII[BII)I
      40: ireturn

  public int get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload         4
      15: iconst_0
      16: aload         4
      18: arraylength
      19: aload_1
      20: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      23: invokevirtual #101                // Method get:(JJ[BII[BIIJ)I
      26: ireturn

  public int get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload         4
       2: iload         5
       4: aload_3
       5: arraylength
       6: invokestatic  #79                 // Method checkBounds:(III)V
       9: iload         7
      11: iload         8
      13: aload         6
      15: arraylength
      16: invokestatic  #79                 // Method checkBounds:(III)V
      19: aload_0
      20: aload_0
      21: getfield      #77                 // Field nativeHandle_:J
      24: aload_2
      25: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
      28: aload_3
      29: iload         4
      31: iload         5
      33: aload         6
      35: iload         7
      37: iload         8
      39: aload_1
      40: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      43: invokevirtual #101                // Method get:(JJ[BII[BIIJ)I
      46: ireturn

  public byte[] get(byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: iconst_0
       7: aload_1
       8: arraylength
       9: invokevirtual #102                // Method get:(J[BII)[B
      12: areturn

  public byte[] get(byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_2
       1: iload_3
       2: aload_1
       3: arraylength
       4: invokestatic  #79                 // Method checkBounds:(III)V
       7: aload_0
       8: aload_0
       9: getfield      #77                 // Field nativeHandle_:J
      12: aload_1
      13: iload_2
      14: iload_3
      15: invokevirtual #102                // Method get:(J[BII)[B
      18: areturn

  public byte[] get(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: iconst_0
       7: aload_2
       8: arraylength
       9: aload_1
      10: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      13: invokevirtual #103                // Method get:(J[BIIJ)[B
      16: areturn

  public byte[] get(org.rocksdb.ColumnFamilyHandle, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #79                 // Method checkBounds:(III)V
       8: aload_0
       9: aload_0
      10: getfield      #77                 // Field nativeHandle_:J
      13: aload_2
      14: iload_3
      15: iload         4
      17: aload_1
      18: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      21: invokevirtual #103                // Method get:(J[BIIJ)[B
      24: areturn

  public byte[] get(org.rocksdb.ReadOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: invokevirtual #104                // Method get:(JJ[BII)[B
      16: areturn

  public byte[] get(org.rocksdb.ReadOptions, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #79                 // Method checkBounds:(III)V
       8: aload_0
       9: aload_0
      10: getfield      #77                 // Field nativeHandle_:J
      13: aload_1
      14: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
      17: aload_2
      18: iload_3
      19: iload         4
      21: invokevirtual #104                // Method get:(JJ[BII)[B
      24: areturn

  public byte[] get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload_1
      14: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokevirtual #105                // Method get:(JJ[BIIJ)[B
      20: areturn

  public byte[] get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload         4
       2: iload         5
       4: aload_3
       5: arraylength
       6: invokestatic  #79                 // Method checkBounds:(III)V
       9: aload_0
      10: aload_0
      11: getfield      #77                 // Field nativeHandle_:J
      14: aload_2
      15: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
      18: aload_3
      19: iload         4
      21: iload         5
      23: aload_1
      24: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      27: invokevirtual #105                // Method get:(JJ[BIIJ)[B
      30: areturn

  public java.util.Map<byte[], byte[]> multiGet(java.util.List<byte[]>) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #106                // Field $assertionsDisabled:Z
       3: ifne          23
       6: aload_1
       7: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      12: ifne          23
      15: new           #107                // class java/lang/AssertionError
      18: dup
      19: invokespecial #108                // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_1
      24: aload_1
      25: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      30: anewarray     #53                 // class "[B"
      33: invokeinterface #109,  2          // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      38: checkcast     #110                // class "[[B"
      41: astore_2
      42: aload_2
      43: arraylength
      44: newarray       int
      46: astore_3
      47: aload_2
      48: arraylength
      49: newarray       int
      51: astore        4
      53: iconst_0
      54: istore        5
      56: iload         5
      58: aload         4
      60: arraylength
      61: if_icmpge     80
      64: aload         4
      66: iload         5
      68: aload_2
      69: iload         5
      71: aaload
      72: arraylength
      73: iastore
      74: iinc          5, 1
      77: goto          56
      80: aload_0
      81: aload_0
      82: getfield      #77                 // Field nativeHandle_:J
      85: aload_2
      86: aload_3
      87: aload         4
      89: invokevirtual #111                // Method multiGet:(J[[B[I[I)[[B
      92: astore        5
      94: new           #112                // class java/util/HashMap
      97: dup
      98: aload         5
     100: arraylength
     101: invokestatic  #113                // Method computeCapacityHint:(I)I
     104: invokespecial #114                // Method java/util/HashMap."<init>":(I)V
     107: astore        6
     109: iconst_0
     110: istore        7
     112: iload         7
     114: aload         5
     116: arraylength
     117: if_icmpge     158
     120: aload         5
     122: iload         7
     124: aaload
     125: ifnonnull     131
     128: goto          152
     131: aload         6
     133: aload_1
     134: iload         7
     136: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     141: aload         5
     143: iload         7
     145: aaload
     146: invokeinterface #115,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     151: pop
     152: iinc          7, 1
     155: goto          112
     158: aload         6
     160: areturn

  private static int computeCapacityHint(int);
    Code:
       0: iload_0
       1: i2d
       2: ldc2_w        #116                // double 1.5d
       5: dmul
       6: dconst_1
       7: dadd
       8: invokestatic  #118                // Method java/lang/Math.ceil:(D)D
      11: d2i
      12: ireturn

  public java.util.Map<byte[], byte[]> multiGet(java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<byte[]>) throws org.rocksdb.RocksDBException, java.lang.IllegalArgumentException;
    Code:
       0: getstatic     #106                // Field $assertionsDisabled:Z
       3: ifne          23
       6: aload_2
       7: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      12: ifne          23
      15: new           #107                // class java/lang/AssertionError
      18: dup
      19: invokespecial #108                // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_2
      24: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      29: aload_1
      30: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      35: if_icmpeq     48
      38: new           #119                // class java/lang/IllegalArgumentException
      41: dup
      42: ldc           #120                // String For each key there must be a ColumnFamilyHandle.
      44: invokespecial #121                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: aload_1
      49: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      54: newarray       long
      56: astore_3
      57: iconst_0
      58: istore        4
      60: iload         4
      62: aload_1
      63: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      68: if_icmpge     95
      71: aload_3
      72: iload         4
      74: aload_1
      75: iload         4
      77: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      82: checkcast     #61                 // class org/rocksdb/ColumnFamilyHandle
      85: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      88: lastore
      89: iinc          4, 1
      92: goto          60
      95: aload_2
      96: aload_2
      97: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
     102: anewarray     #53                 // class "[B"
     105: invokeinterface #109,  2          // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     110: checkcast     #110                // class "[[B"
     113: astore        4
     115: aload         4
     117: arraylength
     118: newarray       int
     120: astore        5
     122: aload         4
     124: arraylength
     125: newarray       int
     127: astore        6
     129: iconst_0
     130: istore        7
     132: iload         7
     134: aload         6
     136: arraylength
     137: if_icmpge     157
     140: aload         6
     142: iload         7
     144: aload         4
     146: iload         7
     148: aaload
     149: arraylength
     150: iastore
     151: iinc          7, 1
     154: goto          132
     157: aload_0
     158: aload_0
     159: getfield      #77                 // Field nativeHandle_:J
     162: aload         4
     164: aload         5
     166: aload         6
     168: aload_3
     169: invokevirtual #122                // Method multiGet:(J[[B[I[I[J)[[B
     172: astore        7
     174: new           #112                // class java/util/HashMap
     177: dup
     178: aload         7
     180: arraylength
     181: invokestatic  #113                // Method computeCapacityHint:(I)I
     184: invokespecial #114                // Method java/util/HashMap."<init>":(I)V
     187: astore        8
     189: iconst_0
     190: istore        9
     192: iload         9
     194: aload         7
     196: arraylength
     197: if_icmpge     238
     200: aload         7
     202: iload         9
     204: aaload
     205: ifnonnull     211
     208: goto          232
     211: aload         8
     213: aload_2
     214: iload         9
     216: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     221: aload         7
     223: iload         9
     225: aaload
     226: invokeinterface #115,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     231: pop
     232: iinc          9, 1
     235: goto          192
     238: aload         8
     240: areturn

  public java.util.Map<byte[], byte[]> multiGet(org.rocksdb.ReadOptions, java.util.List<byte[]>) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #106                // Field $assertionsDisabled:Z
       3: ifne          23
       6: aload_2
       7: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      12: ifne          23
      15: new           #107                // class java/lang/AssertionError
      18: dup
      19: invokespecial #108                // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_2
      24: aload_2
      25: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      30: anewarray     #53                 // class "[B"
      33: invokeinterface #109,  2          // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      38: checkcast     #110                // class "[[B"
      41: astore_3
      42: aload_3
      43: arraylength
      44: newarray       int
      46: astore        4
      48: aload_3
      49: arraylength
      50: newarray       int
      52: astore        5
      54: iconst_0
      55: istore        6
      57: iload         6
      59: aload         5
      61: arraylength
      62: if_icmpge     81
      65: aload         5
      67: iload         6
      69: aload_3
      70: iload         6
      72: aaload
      73: arraylength
      74: iastore
      75: iinc          6, 1
      78: goto          57
      81: aload_0
      82: aload_0
      83: getfield      #77                 // Field nativeHandle_:J
      86: aload_1
      87: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
      90: aload_3
      91: aload         4
      93: aload         5
      95: invokevirtual #123                // Method multiGet:(JJ[[B[I[I)[[B
      98: astore        6
     100: new           #112                // class java/util/HashMap
     103: dup
     104: aload         6
     106: arraylength
     107: invokestatic  #113                // Method computeCapacityHint:(I)I
     110: invokespecial #114                // Method java/util/HashMap."<init>":(I)V
     113: astore        7
     115: iconst_0
     116: istore        8
     118: iload         8
     120: aload         6
     122: arraylength
     123: if_icmpge     164
     126: aload         6
     128: iload         8
     130: aaload
     131: ifnonnull     137
     134: goto          158
     137: aload         7
     139: aload_2
     140: iload         8
     142: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     147: aload         6
     149: iload         8
     151: aaload
     152: invokeinterface #115,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     157: pop
     158: iinc          8, 1
     161: goto          118
     164: aload         7
     166: areturn

  public java.util.Map<byte[], byte[]> multiGet(org.rocksdb.ReadOptions, java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<byte[]>) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #106                // Field $assertionsDisabled:Z
       3: ifne          23
       6: aload_3
       7: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      12: ifne          23
      15: new           #107                // class java/lang/AssertionError
      18: dup
      19: invokespecial #108                // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_3
      24: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      29: aload_2
      30: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      35: if_icmpeq     48
      38: new           #119                // class java/lang/IllegalArgumentException
      41: dup
      42: ldc           #120                // String For each key there must be a ColumnFamilyHandle.
      44: invokespecial #121                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: aload_2
      49: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      54: newarray       long
      56: astore        4
      58: iconst_0
      59: istore        5
      61: iload         5
      63: aload_2
      64: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      69: if_icmpge     97
      72: aload         4
      74: iload         5
      76: aload_2
      77: iload         5
      79: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      84: checkcast     #61                 // class org/rocksdb/ColumnFamilyHandle
      87: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      90: lastore
      91: iinc          5, 1
      94: goto          61
      97: aload_3
      98: aload_3
      99: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
     104: anewarray     #53                 // class "[B"
     107: invokeinterface #109,  2          // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     112: checkcast     #110                // class "[[B"
     115: astore        5
     117: aload         5
     119: arraylength
     120: newarray       int
     122: astore        6
     124: aload         5
     126: arraylength
     127: newarray       int
     129: astore        7
     131: iconst_0
     132: istore        8
     134: iload         8
     136: aload         7
     138: arraylength
     139: if_icmpge     159
     142: aload         7
     144: iload         8
     146: aload         5
     148: iload         8
     150: aaload
     151: arraylength
     152: iastore
     153: iinc          8, 1
     156: goto          134
     159: aload_0
     160: aload_0
     161: getfield      #77                 // Field nativeHandle_:J
     164: aload_1
     165: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
     168: aload         5
     170: aload         6
     172: aload         7
     174: aload         4
     176: invokevirtual #124                // Method multiGet:(JJ[[B[I[I[J)[[B
     179: astore        8
     181: new           #112                // class java/util/HashMap
     184: dup
     185: aload         8
     187: arraylength
     188: invokestatic  #113                // Method computeCapacityHint:(I)I
     191: invokespecial #114                // Method java/util/HashMap."<init>":(I)V
     194: astore        9
     196: iconst_0
     197: istore        10
     199: iload         10
     201: aload         8
     203: arraylength
     204: if_icmpge     245
     207: aload         8
     209: iload         10
     211: aaload
     212: ifnonnull     218
     215: goto          239
     218: aload         9
     220: aload_3
     221: iload         10
     223: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     228: aload         8
     230: iload         10
     232: aaload
     233: invokeinterface #115,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     238: pop
     239: iinc          10, 1
     242: goto          199
     245: aload         9
     247: areturn

  public void remove(byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #125                // Method delete:([B)V
       5: return

  public void delete(byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: iconst_0
       7: aload_1
       8: arraylength
       9: invokevirtual #126                // Method delete:(J[BII)V
      12: return

  public void delete(byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: iload_2
       7: iload_3
       8: invokevirtual #126                // Method delete:(J[BII)V
      11: return

  public void remove(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #127                // Method delete:(Lorg/rocksdb/ColumnFamilyHandle;[B)V
       6: return

  public void delete(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: iconst_0
       7: aload_2
       8: arraylength
       9: aload_1
      10: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      13: invokevirtual #128                // Method delete:(J[BIIJ)V
      16: return

  public void delete(org.rocksdb.ColumnFamilyHandle, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: iload_3
       7: iload         4
       9: aload_1
      10: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      13: invokevirtual #128                // Method delete:(J[BIIJ)V
      16: return

  public void remove(org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #129                // Method delete:(Lorg/rocksdb/WriteOptions;[B)V
       6: return

  public void delete(org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: invokevirtual #130                // Method delete:(JJ[BII)V
      16: return

  public void delete(org.rocksdb.WriteOptions, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: iload_3
      11: iload         4
      13: invokevirtual #130                // Method delete:(JJ[BII)V
      16: return

  public void remove(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #131                // Method delete:(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;[B)V
       7: return

  public void delete(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload_1
      14: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokevirtual #132                // Method delete:(JJ[BIIJ)V
      20: return

  public void delete(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_3
      10: iload         4
      12: iload         5
      14: aload_1
      15: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      18: invokevirtual #132                // Method delete:(JJ[BIIJ)V
      21: return

  public void singleDelete(byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: aload_1
       7: arraylength
       8: invokevirtual #133                // Method singleDelete:(J[BI)V
      11: return

  public void singleDelete(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: aload_2
       7: arraylength
       8: aload_1
       9: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      12: invokevirtual #134                // Method singleDelete:(J[BIJ)V
      15: return

  public void singleDelete(org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: aload_2
      11: arraylength
      12: invokevirtual #135                // Method singleDelete:(JJ[BI)V
      15: return

  public void singleDelete(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_3
      10: aload_3
      11: arraylength
      12: aload_1
      13: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      16: invokevirtual #136                // Method singleDelete:(JJ[BIJ)V
      19: return

  public java.lang.String getProperty(org.rocksdb.ColumnFamilyHandle, java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
       9: aload_2
      10: aload_2
      11: invokevirtual #137                // Method java/lang/String.length:()I
      14: invokevirtual #138                // Method getProperty0:(JJLjava/lang/String;I)Ljava/lang/String;
      17: areturn

  public void deleteRange(byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: iconst_0
       7: aload_1
       8: arraylength
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: invokevirtual #139                // Method deleteRange:(J[BII[BII)V
      16: return

  public void deleteRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: iconst_0
       7: aload_2
       8: arraylength
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload_1
      14: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokevirtual #140                // Method deleteRange:(J[BII[BIIJ)V
      20: return

  public void deleteRange(org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: aload_3
      14: iconst_0
      15: aload_3
      16: arraylength
      17: invokevirtual #141                // Method deleteRange:(JJ[BII[BII)V
      20: return

  public void deleteRange(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #82                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload         4
      15: iconst_0
      16: aload         4
      18: arraylength
      19: aload_1
      20: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      23: invokevirtual #142                // Method deleteRange:(JJ[BII[BIIJ)V
      26: return

  public java.lang.String getProperty(java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: aload_1
       7: invokevirtual #137                // Method java/lang/String.length:()I
      10: invokevirtual #143                // Method getProperty0:(JLjava/lang/String;I)Ljava/lang/String;
      13: areturn

  public long getLongProperty(java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: aload_1
       7: invokevirtual #137                // Method java/lang/String.length:()I
      10: invokevirtual #144                // Method getLongProperty:(JLjava/lang/String;I)J
      13: lreturn

  public long getLongProperty(org.rocksdb.ColumnFamilyHandle, java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
       9: aload_2
      10: aload_2
      11: invokevirtual #137                // Method java/lang/String.length:()I
      14: invokevirtual #145                // Method getLongProperty:(JJLjava/lang/String;I)J
      17: lreturn

  public long getAggregatedLongProperty(java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: aload_1
       7: invokevirtual #137                // Method java/lang/String.length:()I
      10: invokevirtual #146                // Method getAggregatedLongProperty:(JLjava/lang/String;I)J
      13: lreturn

  public org.rocksdb.RocksIterator newIterator();
    Code:
       0: new           #147                // class org/rocksdb/RocksIterator
       3: dup
       4: aload_0
       5: aload_0
       6: aload_0
       7: getfield      #77                 // Field nativeHandle_:J
      10: invokevirtual #148                // Method iterator:(J)J
      13: invokespecial #149                // Method org/rocksdb/RocksIterator."<init>":(Lorg/rocksdb/RocksDB;J)V
      16: areturn

  public org.rocksdb.RocksIterator newIterator(org.rocksdb.ReadOptions);
    Code:
       0: new           #147                // class org/rocksdb/RocksIterator
       3: dup
       4: aload_0
       5: aload_0
       6: aload_0
       7: getfield      #77                 // Field nativeHandle_:J
      10: aload_1
      11: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
      14: invokevirtual #150                // Method iterator:(JJ)J
      17: invokespecial #149                // Method org/rocksdb/RocksIterator."<init>":(Lorg/rocksdb/RocksDB;J)V
      20: areturn

  public org.rocksdb.Snapshot getSnapshot();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: invokevirtual #151                // Method getSnapshot:(J)J
       8: lstore_1
       9: lload_1
      10: lconst_0
      11: lcmp
      12: ifeq          24
      15: new           #152                // class org/rocksdb/Snapshot
      18: dup
      19: lload_1
      20: invokespecial #153                // Method org/rocksdb/Snapshot."<init>":(J)V
      23: areturn
      24: aconst_null
      25: areturn

  public void releaseSnapshot(org.rocksdb.Snapshot);
    Code:
       0: aload_1
       1: ifnull        16
       4: aload_0
       5: aload_0
       6: getfield      #77                 // Field nativeHandle_:J
       9: aload_1
      10: getfield      #154                // Field org/rocksdb/Snapshot.nativeHandle_:J
      13: invokevirtual #155                // Method releaseSnapshot:(JJ)V
      16: return

  public org.rocksdb.RocksIterator newIterator(org.rocksdb.ColumnFamilyHandle);
    Code:
       0: new           #147                // class org/rocksdb/RocksIterator
       3: dup
       4: aload_0
       5: aload_0
       6: aload_0
       7: getfield      #77                 // Field nativeHandle_:J
      10: aload_1
      11: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      14: invokevirtual #156                // Method iteratorCF:(JJ)J
      17: invokespecial #149                // Method org/rocksdb/RocksIterator."<init>":(Lorg/rocksdb/RocksDB;J)V
      20: areturn

  public org.rocksdb.RocksIterator newIterator(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions);
    Code:
       0: new           #147                // class org/rocksdb/RocksIterator
       3: dup
       4: aload_0
       5: aload_0
       6: aload_0
       7: getfield      #77                 // Field nativeHandle_:J
      10: aload_1
      11: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      14: aload_2
      15: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
      18: invokevirtual #157                // Method iteratorCF:(JJJ)J
      21: invokespecial #149                // Method org/rocksdb/RocksIterator."<init>":(Lorg/rocksdb/RocksDB;J)V
      24: areturn

  public java.util.List<org.rocksdb.RocksIterator> newIterators(java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: new           #158                // class org/rocksdb/ReadOptions
       5: dup
       6: invokespecial #159                // Method org/rocksdb/ReadOptions."<init>":()V
       9: invokevirtual #160                // Method newIterators:(Ljava/util/List;Lorg/rocksdb/ReadOptions;)Ljava/util/List;
      12: areturn

  public java.util.List<org.rocksdb.RocksIterator> newIterators(java.util.List<org.rocksdb.ColumnFamilyHandle>, org.rocksdb.ReadOptions) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_1
       1: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
       6: newarray       long
       8: astore_3
       9: iconst_0
      10: istore        4
      12: iload         4
      14: aload_1
      15: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      20: if_icmpge     47
      23: aload_3
      24: iload         4
      26: aload_1
      27: iload         4
      29: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      34: checkcast     #61                 // class org/rocksdb/ColumnFamilyHandle
      37: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      40: lastore
      41: iinc          4, 1
      44: goto          12
      47: aload_0
      48: aload_0
      49: getfield      #77                 // Field nativeHandle_:J
      52: aload_3
      53: aload_2
      54: getfield      #87                 // Field org/rocksdb/ReadOptions.nativeHandle_:J
      57: invokevirtual #161                // Method iterators:(J[JJ)[J
      60: astore        4
      62: new           #162                // class java/util/ArrayList
      65: dup
      66: aload_1
      67: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      72: invokespecial #163                // Method java/util/ArrayList."<init>":(I)V
      75: astore        5
      77: iconst_0
      78: istore        6
      80: iload         6
      82: aload_1
      83: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      88: if_icmpge     118
      91: aload         5
      93: new           #147                // class org/rocksdb/RocksIterator
      96: dup
      97: aload_0
      98: aload         4
     100: iload         6
     102: laload
     103: invokespecial #149                // Method org/rocksdb/RocksIterator."<init>":(Lorg/rocksdb/RocksDB;J)V
     106: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     111: pop
     112: iinc          6, 1
     115: goto          80
     118: aload         5
     120: areturn

  public org.rocksdb.ColumnFamilyHandle getDefaultColumnFamily();
    Code:
       0: new           #61                 // class org/rocksdb/ColumnFamilyHandle
       3: dup
       4: aload_0
       5: aload_0
       6: aload_0
       7: getfield      #77                 // Field nativeHandle_:J
      10: invokespecial #164                // Method getDefaultColumnFamily:(J)J
      13: invokespecial #62                 // Method org/rocksdb/ColumnFamilyHandle."<init>":(Lorg/rocksdb/RocksDB;J)V
      16: astore_1
      17: aload_1
      18: invokevirtual #165                // Method org/rocksdb/ColumnFamilyHandle.disOwnNativeHandle:()V
      21: aload_1
      22: areturn

  public org.rocksdb.ColumnFamilyHandle createColumnFamily(org.rocksdb.ColumnFamilyDescriptor) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #61                 // class org/rocksdb/ColumnFamilyHandle
       3: dup
       4: aload_0
       5: aload_0
       6: aload_0
       7: getfield      #77                 // Field nativeHandle_:J
      10: aload_1
      11: invokevirtual #56                 // Method org/rocksdb/ColumnFamilyDescriptor.columnFamilyName:()[B
      14: aload_1
      15: invokevirtual #57                 // Method org/rocksdb/ColumnFamilyDescriptor.columnFamilyOptions:()Lorg/rocksdb/ColumnFamilyOptions;
      18: getfield      #58                 // Field org/rocksdb/ColumnFamilyOptions.nativeHandle_:J
      21: invokespecial #166                // Method createColumnFamily:(J[BJ)J
      24: invokespecial #62                 // Method org/rocksdb/ColumnFamilyHandle."<init>":(Lorg/rocksdb/RocksDB;J)V
      27: areturn

  public void dropColumnFamily(org.rocksdb.ColumnFamilyHandle) throws org.rocksdb.RocksDBException, java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
       9: invokespecial #167                // Method dropColumnFamily:(JJ)V
      12: aload_1
      13: invokevirtual #165                // Method org/rocksdb/ColumnFamilyHandle.disOwnNativeHandle:()V
      16: return

  public void flush(org.rocksdb.FlushOptions) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #168                // Field org/rocksdb/FlushOptions.nativeHandle_:J
       9: invokespecial #169                // Method flush:(JJ)V
      12: return

  public void flush(org.rocksdb.FlushOptions, org.rocksdb.ColumnFamilyHandle) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #168                // Field org/rocksdb/FlushOptions.nativeHandle_:J
       9: aload_2
      10: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      13: invokespecial #170                // Method flush:(JJJ)V
      16: return

  public void compactRange() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: iconst_0
       6: iconst_m1
       7: iconst_0
       8: invokespecial #171                // Method compactRange0:(JZII)V
      11: return

  public void compactRange(byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: aload_1
       7: arraylength
       8: aload_2
       9: aload_2
      10: arraylength
      11: iconst_0
      12: iconst_m1
      13: iconst_0
      14: invokespecial #172                // Method compactRange0:(J[BI[BIZII)V
      17: return

  public void compactRange(boolean, int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: iload_1
       6: iload_2
       7: iload_3
       8: invokespecial #171                // Method compactRange0:(JZII)V
      11: return

  public void compactRange(byte[], byte[], boolean, int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: aload_1
       7: arraylength
       8: aload_2
       9: aload_2
      10: arraylength
      11: iload_3
      12: iload         4
      14: iload         5
      16: invokespecial #172                // Method compactRange0:(J[BI[BIZII)V
      19: return

  public void compactRange(org.rocksdb.ColumnFamilyHandle) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: iconst_0
       6: iconst_m1
       7: iconst_0
       8: aload_1
       9: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      12: invokespecial #173                // Method compactRange:(JZIIJ)V
      15: return

  public void compactRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: aload_2
       7: arraylength
       8: aload_3
       9: aload_3
      10: arraylength
      11: iconst_0
      12: iconst_m1
      13: iconst_0
      14: aload_1
      15: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      18: invokespecial #174                // Method compactRange:(J[BI[BIZIIJ)V
      21: return

  public void compactRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[], org.rocksdb.CompactRangeOptions) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: aload_2
       7: arraylength
       8: aload_3
       9: aload_3
      10: arraylength
      11: aload         4
      13: getfield      #175                // Field org/rocksdb/CompactRangeOptions.nativeHandle_:J
      16: aload_1
      17: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      20: invokespecial #176                // Method compactRange:(J[BI[BIJJ)V
      23: return

  public void compactRange(org.rocksdb.ColumnFamilyHandle, boolean, int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: iload_2
       6: iload_3
       7: iload         4
       9: aload_1
      10: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      13: invokespecial #173                // Method compactRange:(JZIIJ)V
      16: return

  public void compactRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[], boolean, int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_2
       6: aload_2
       7: arraylength
       8: aload_3
       9: aload_3
      10: arraylength
      11: iload         4
      13: iload         5
      15: iload         6
      17: aload_1
      18: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      21: invokespecial #174                // Method compactRange:(J[BI[BIZIIJ)V
      24: return

  public void pauseBackgroundWork() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: invokespecial #177                // Method pauseBackgroundWork:(J)V
       8: return

  public void continueBackgroundWork() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: invokespecial #178                // Method continueBackgroundWork:(J)V
       8: return

  public long getLatestSequenceNumber();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: invokespecial #179                // Method getLatestSequenceNumber:(J)J
       8: lreturn

  public void disableFileDeletions() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: invokespecial #180                // Method disableFileDeletions:(J)V
       8: return

  public void enableFileDeletions(boolean) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #181                // Method enableFileDeletions:(JZ)V
       9: return

  public org.rocksdb.TransactionLogIterator getUpdatesSince(long) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #182                // class org/rocksdb/TransactionLogIterator
       3: dup
       4: aload_0
       5: aload_0
       6: getfield      #77                 // Field nativeHandle_:J
       9: lload_1
      10: invokespecial #183                // Method getUpdatesSince:(JJ)J
      13: invokespecial #184                // Method org/rocksdb/TransactionLogIterator."<init>":(J)V
      16: areturn

  public void setOptions(org.rocksdb.ColumnFamilyHandle, org.rocksdb.MutableColumnFamilyOptions) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
       9: aload_2
      10: invokevirtual #185                // Method org/rocksdb/MutableColumnFamilyOptions.getKeys:()[Ljava/lang/String;
      13: aload_2
      14: invokevirtual #186                // Method org/rocksdb/MutableColumnFamilyOptions.getValues:()[Ljava/lang/String;
      17: invokespecial #187                // Method setOptions:(JJ[Ljava/lang/String;[Ljava/lang/String;)V
      20: return

  private long[] toNativeHandleList(java.util.List<? extends org.rocksdb.RocksObject>);
    Code:
       0: aload_1
       1: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
       6: istore_2
       7: iload_2
       8: newarray       long
      10: astore_3
      11: iconst_0
      12: istore        4
      14: iload         4
      16: iload_2
      17: if_icmpge     44
      20: aload_3
      21: iload         4
      23: aload_1
      24: iload         4
      26: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      31: checkcast     #188                // class org/rocksdb/RocksObject
      34: getfield      #189                // Field org/rocksdb/RocksObject.nativeHandle_:J
      37: lastore
      38: iinc          4, 1
      41: goto          14
      44: aload_3
      45: areturn

  public void ingestExternalFile(java.util.List<java.lang.String>, org.rocksdb.IngestExternalFileOptions) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_0
       6: invokevirtual #190                // Method getDefaultColumnFamily:()Lorg/rocksdb/ColumnFamilyHandle;
       9: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      12: aload_1
      13: aload_1
      14: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      19: anewarray     #34                 // class java/lang/String
      22: invokeinterface #109,  2          // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      27: checkcast     #191                // class "[Ljava/lang/String;"
      30: aload_1
      31: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      36: aload_2
      37: getfield      #192                // Field org/rocksdb/IngestExternalFileOptions.nativeHandle_:J
      40: invokespecial #193                // Method ingestExternalFile:(JJ[Ljava/lang/String;IJ)V
      43: return

  public void ingestExternalFile(org.rocksdb.ColumnFamilyHandle, java.util.List<java.lang.String>, org.rocksdb.IngestExternalFileOptions) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #77                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #80                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
       9: aload_2
      10: aload_2
      11: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      16: anewarray     #34                 // class java/lang/String
      19: invokeinterface #109,  2          // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      24: checkcast     #191                // class "[Ljava/lang/String;"
      27: aload_2
      28: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      33: aload_3
      34: getfield      #192                // Field org/rocksdb/IngestExternalFileOptions.nativeHandle_:J
      37: invokespecial #193                // Method ingestExternalFile:(JJ[Ljava/lang/String;IJ)V
      40: return

  public static void destroyDB(java.lang.String, org.rocksdb.Options) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #48                 // Field org/rocksdb/Options.nativeHandle_:J
       5: invokestatic  #194                // Method destroyDB:(Ljava/lang/String;J)V
       8: return

  protected org.rocksdb.RocksDB(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokespecial #195                // Method org/rocksdb/RocksObject."<init>":(J)V
       5: return

  protected static native long open(long, java.lang.String) throws org.rocksdb.RocksDBException;

  protected static native long[] open(long, java.lang.String, byte[][], long[]) throws org.rocksdb.RocksDBException;

  protected static native long openROnly(long, java.lang.String) throws org.rocksdb.RocksDBException;

  protected static native long[] openROnly(long, java.lang.String, byte[][], long[]) throws org.rocksdb.RocksDBException;

  protected static native byte[][] listColumnFamilies(long, java.lang.String) throws org.rocksdb.RocksDBException;

  protected native void put(long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  protected native void put(long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  protected native void put(long, long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  protected native void put(long, long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  protected native void write0(long, long, long) throws org.rocksdb.RocksDBException;

  protected native void write1(long, long, long) throws org.rocksdb.RocksDBException;

  protected native boolean keyMayExist(long, byte[], int, int, java.lang.StringBuilder);

  protected native boolean keyMayExist(long, byte[], int, int, long, java.lang.StringBuilder);

  protected native boolean keyMayExist(long, long, byte[], int, int, java.lang.StringBuilder);

  protected native boolean keyMayExist(long, long, byte[], int, int, long, java.lang.StringBuilder);

  protected native void merge(long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  protected native void merge(long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  protected native void merge(long, long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  protected native void merge(long, long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  protected native int get(long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  protected native int get(long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  protected native int get(long, long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  protected native int get(long, long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  protected native byte[][] multiGet(long, byte[][], int[], int[]);

  protected native byte[][] multiGet(long, byte[][], int[], int[], long[]);

  protected native byte[][] multiGet(long, long, byte[][], int[], int[]);

  protected native byte[][] multiGet(long, long, byte[][], int[], int[], long[]);

  protected native byte[] get(long, byte[], int, int) throws org.rocksdb.RocksDBException;

  protected native byte[] get(long, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  protected native byte[] get(long, long, byte[], int, int) throws org.rocksdb.RocksDBException;

  protected native byte[] get(long, long, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  protected native void delete(long, byte[], int, int) throws org.rocksdb.RocksDBException;

  protected native void delete(long, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  protected native void delete(long, long, byte[], int, int) throws org.rocksdb.RocksDBException;

  protected native void delete(long, long, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  protected native void singleDelete(long, byte[], int) throws org.rocksdb.RocksDBException;

  protected native void singleDelete(long, byte[], int, long) throws org.rocksdb.RocksDBException;

  protected native void singleDelete(long, long, byte[], int) throws org.rocksdb.RocksDBException;

  protected native void singleDelete(long, long, byte[], int, long) throws org.rocksdb.RocksDBException;

  protected native void deleteRange(long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  protected native void deleteRange(long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  protected native void deleteRange(long, long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  protected native void deleteRange(long, long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  protected native java.lang.String getProperty0(long, java.lang.String, int) throws org.rocksdb.RocksDBException;

  protected native java.lang.String getProperty0(long, long, java.lang.String, int) throws org.rocksdb.RocksDBException;

  protected native long getLongProperty(long, java.lang.String, int) throws org.rocksdb.RocksDBException;

  protected native long getLongProperty(long, long, java.lang.String, int) throws org.rocksdb.RocksDBException;

  protected native long getAggregatedLongProperty(long, java.lang.String, int) throws org.rocksdb.RocksDBException;

  protected native long iterator(long);

  protected native long iterator(long, long);

  protected native long iteratorCF(long, long);

  protected native long iteratorCF(long, long, long);

  protected native long[] iterators(long, long[], long) throws org.rocksdb.RocksDBException;

  protected native long getSnapshot(long);

  protected native void releaseSnapshot(long, long);

  protected native void disposeInternal(long);

  private native long getDefaultColumnFamily(long);

  private native long createColumnFamily(long, byte[], long) throws org.rocksdb.RocksDBException;

  private native void dropColumnFamily(long, long) throws org.rocksdb.RocksDBException;

  private native void flush(long, long) throws org.rocksdb.RocksDBException;

  private native void flush(long, long, long) throws org.rocksdb.RocksDBException;

  private native void compactRange0(long, boolean, int, int) throws org.rocksdb.RocksDBException;

  private native void compactRange0(long, byte[], int, byte[], int, boolean, int, int) throws org.rocksdb.RocksDBException;

  private native void compactRange(long, byte[], int, byte[], int, long, long) throws org.rocksdb.RocksDBException;

  private native void compactRange(long, boolean, int, int, long) throws org.rocksdb.RocksDBException;

  private native void compactRange(long, byte[], int, byte[], int, boolean, int, int, long) throws org.rocksdb.RocksDBException;

  private native void pauseBackgroundWork(long) throws org.rocksdb.RocksDBException;

  private native void continueBackgroundWork(long) throws org.rocksdb.RocksDBException;

  private native long getLatestSequenceNumber(long);

  private native void disableFileDeletions(long) throws org.rocksdb.RocksDBException;

  private native void enableFileDeletions(long, boolean) throws org.rocksdb.RocksDBException;

  private native long getUpdatesSince(long, long) throws org.rocksdb.RocksDBException;

  private native void setOptions(long, long, java.lang.String[], java.lang.String[]) throws org.rocksdb.RocksDBException;

  private native void ingestExternalFile(long, long, java.lang.String[], int, long) throws org.rocksdb.RocksDBException;

  private static native void destroyDB(java.lang.String, long) throws org.rocksdb.RocksDBException;

  static {};
    Code:
       0: ldc_w         #47                 // class org/rocksdb/RocksDB
       3: invokevirtual #196                // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #106                // Field $assertionsDisabled:Z
      17: ldc           #197                // String default
      19: invokevirtual #198                // Method java/lang/String.getBytes:()[B
      22: putstatic     #199                // Field DEFAULT_COLUMN_FAMILY:[B
      25: new           #200                // class java/util/concurrent/atomic/AtomicReference
      28: dup
      29: getstatic     #4                  // Field org/rocksdb/RocksDB$LibraryState.NOT_LOADED:Lorg/rocksdb/RocksDB$LibraryState;
      32: invokespecial #201                // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      35: putstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
      38: invokestatic  #202                // Method loadLibrary:()V
      41: return
}
