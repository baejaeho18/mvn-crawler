Compiled from "BlockBasedTableConfig.java"
public class org.rocksdb.BlockBasedTableConfig extends org.rocksdb.TableFormatConfig {
  private boolean cacheIndexAndFilterBlocks_;

  private boolean cacheIndexAndFilterBlocksWithHighPriority_;

  private boolean pinL0FilterAndIndexBlocksInCache_;

  private boolean partitionFilters_;

  private long metadataBlockSize_;

  private boolean pinTopLevelIndexAndFilter_;

  private org.rocksdb.IndexType indexType_;

  private boolean hashIndexAllowCollision_;

  private org.rocksdb.ChecksumType checksumType_;

  private boolean noBlockCache_;

  private long blockSize_;

  private long blockCacheSize_;

  private int blockCacheNumShardBits_;

  private org.rocksdb.Cache blockCache_;

  private long blockCacheCompressedSize_;

  private int blockCacheCompressedNumShardBits_;

  private int blockSizeDeviation_;

  private int blockRestartInterval_;

  private org.rocksdb.Filter filter_;

  private boolean wholeKeyFiltering_;

  private int formatVersion_;

  static final boolean $assertionsDisabled;

  public org.rocksdb.BlockBasedTableConfig();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/rocksdb/TableFormatConfig."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field noBlockCache_:Z
       9: aload_0
      10: ldc2_w        #3                  // long 8388608l
      13: putfield      #5                  // Field blockCacheSize_:J
      16: aload_0
      17: iconst_0
      18: putfield      #6                  // Field blockCacheNumShardBits_:I
      21: aload_0
      22: aconst_null
      23: putfield      #7                  // Field blockCache_:Lorg/rocksdb/Cache;
      26: aload_0
      27: ldc2_w        #8                  // long 4096l
      30: putfield      #10                 // Field blockSize_:J
      33: aload_0
      34: bipush        10
      36: putfield      #11                 // Field blockSizeDeviation_:I
      39: aload_0
      40: bipush        16
      42: putfield      #12                 // Field blockRestartInterval_:I
      45: aload_0
      46: iconst_1
      47: putfield      #13                 // Field wholeKeyFiltering_:Z
      50: aload_0
      51: aconst_null
      52: putfield      #14                 // Field filter_:Lorg/rocksdb/Filter;
      55: aload_0
      56: iconst_0
      57: putfield      #15                 // Field cacheIndexAndFilterBlocks_:Z
      60: aload_0
      61: iconst_0
      62: putfield      #16                 // Field cacheIndexAndFilterBlocksWithHighPriority_:Z
      65: aload_0
      66: iconst_0
      67: putfield      #17                 // Field pinL0FilterAndIndexBlocksInCache_:Z
      70: aload_0
      71: iconst_0
      72: putfield      #18                 // Field partitionFilters_:Z
      75: aload_0
      76: ldc2_w        #8                  // long 4096l
      79: putfield      #19                 // Field metadataBlockSize_:J
      82: aload_0
      83: iconst_1
      84: putfield      #20                 // Field pinTopLevelIndexAndFilter_:Z
      87: aload_0
      88: iconst_1
      89: putfield      #21                 // Field hashIndexAllowCollision_:Z
      92: aload_0
      93: lconst_0
      94: putfield      #22                 // Field blockCacheCompressedSize_:J
      97: aload_0
      98: iconst_0
      99: putfield      #23                 // Field blockCacheCompressedNumShardBits_:I
     102: aload_0
     103: getstatic     #24                 // Field org/rocksdb/ChecksumType.kCRC32c:Lorg/rocksdb/ChecksumType;
     106: putfield      #25                 // Field checksumType_:Lorg/rocksdb/ChecksumType;
     109: aload_0
     110: getstatic     #26                 // Field org/rocksdb/IndexType.kBinarySearch:Lorg/rocksdb/IndexType;
     113: putfield      #27                 // Field indexType_:Lorg/rocksdb/IndexType;
     116: aload_0
     117: iconst_0
     118: putfield      #28                 // Field formatVersion_:I
     121: return

  public org.rocksdb.BlockBasedTableConfig setNoBlockCache(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field noBlockCache_:Z
       5: aload_0
       6: areturn

  public boolean noBlockCache();
    Code:
       0: aload_0
       1: getfield      #2                  // Field noBlockCache_:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setBlockCacheSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #5                  // Field blockCacheSize_:J
       5: aload_0
       6: areturn

  public long blockCacheSize();
    Code:
       0: aload_0
       1: getfield      #5                  // Field blockCacheSize_:J
       4: lreturn

  public org.rocksdb.BlockBasedTableConfig setBlockCache(org.rocksdb.Cache);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field blockCache_:Lorg/rocksdb/Cache;
       5: aload_0
       6: areturn

  public org.rocksdb.BlockBasedTableConfig setCacheNumShardBits(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field blockCacheNumShardBits_:I
       5: aload_0
       6: areturn

  public int cacheNumShardBits();
    Code:
       0: aload_0
       1: getfield      #6                  // Field blockCacheNumShardBits_:I
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setBlockSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #10                 // Field blockSize_:J
       5: aload_0
       6: areturn

  public long blockSize();
    Code:
       0: aload_0
       1: getfield      #10                 // Field blockSize_:J
       4: lreturn

  public org.rocksdb.BlockBasedTableConfig setBlockSizeDeviation(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field blockSizeDeviation_:I
       5: aload_0
       6: areturn

  public int blockSizeDeviation();
    Code:
       0: aload_0
       1: getfield      #11                 // Field blockSizeDeviation_:I
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setBlockRestartInterval(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field blockRestartInterval_:I
       5: aload_0
       6: areturn

  public int blockRestartInterval();
    Code:
       0: aload_0
       1: getfield      #12                 // Field blockRestartInterval_:I
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setWholeKeyFiltering(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field wholeKeyFiltering_:Z
       5: aload_0
       6: areturn

  public boolean wholeKeyFiltering();
    Code:
       0: aload_0
       1: getfield      #13                 // Field wholeKeyFiltering_:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setFilter(org.rocksdb.Filter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field filter_:Lorg/rocksdb/Filter;
       5: aload_0
       6: areturn

  public boolean cacheIndexAndFilterBlocks();
    Code:
       0: aload_0
       1: getfield      #15                 // Field cacheIndexAndFilterBlocks_:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setCacheIndexAndFilterBlocks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #15                 // Field cacheIndexAndFilterBlocks_:Z
       5: aload_0
       6: areturn

  public boolean cacheIndexAndFilterBlocksWithHighPriority();
    Code:
       0: aload_0
       1: getfield      #16                 // Field cacheIndexAndFilterBlocksWithHighPriority_:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setCacheIndexAndFilterBlocksWithHighPriority(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #16                 // Field cacheIndexAndFilterBlocksWithHighPriority_:Z
       5: aload_0
       6: areturn

  public boolean pinL0FilterAndIndexBlocksInCache();
    Code:
       0: aload_0
       1: getfield      #17                 // Field pinL0FilterAndIndexBlocksInCache_:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setPinL0FilterAndIndexBlocksInCache(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #17                 // Field pinL0FilterAndIndexBlocksInCache_:Z
       5: aload_0
       6: areturn

  public boolean partitionFilters();
    Code:
       0: aload_0
       1: getfield      #18                 // Field partitionFilters_:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setPartitionFilters(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field partitionFilters_:Z
       5: aload_0
       6: areturn

  public long metadataBlockSize();
    Code:
       0: aload_0
       1: getfield      #19                 // Field metadataBlockSize_:J
       4: lreturn

  public org.rocksdb.BlockBasedTableConfig setMetadataBlockSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #19                 // Field metadataBlockSize_:J
       5: aload_0
       6: areturn

  public boolean pinTopLevelIndexAndFilter();
    Code:
       0: aload_0
       1: getfield      #20                 // Field pinTopLevelIndexAndFilter_:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setPinTopLevelIndexAndFilter(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #20                 // Field pinTopLevelIndexAndFilter_:Z
       5: aload_0
       6: areturn

  public boolean hashIndexAllowCollision();
    Code:
       0: aload_0
       1: getfield      #21                 // Field hashIndexAllowCollision_:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setHashIndexAllowCollision(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #21                 // Field hashIndexAllowCollision_:Z
       5: aload_0
       6: areturn

  public long blockCacheCompressedSize();
    Code:
       0: aload_0
       1: getfield      #22                 // Field blockCacheCompressedSize_:J
       4: lreturn

  public org.rocksdb.BlockBasedTableConfig setBlockCacheCompressedSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #22                 // Field blockCacheCompressedSize_:J
       5: aload_0
       6: areturn

  public int blockCacheCompressedNumShardBits();
    Code:
       0: aload_0
       1: getfield      #23                 // Field blockCacheCompressedNumShardBits_:I
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setBlockCacheCompressedNumShardBits(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field blockCacheCompressedNumShardBits_:I
       5: aload_0
       6: areturn

  public org.rocksdb.BlockBasedTableConfig setChecksumType(org.rocksdb.ChecksumType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #25                 // Field checksumType_:Lorg/rocksdb/ChecksumType;
       5: aload_0
       6: areturn

  public org.rocksdb.ChecksumType checksumType();
    Code:
       0: aload_0
       1: getfield      #25                 // Field checksumType_:Lorg/rocksdb/ChecksumType;
       4: areturn

  public org.rocksdb.BlockBasedTableConfig setIndexType(org.rocksdb.IndexType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #27                 // Field indexType_:Lorg/rocksdb/IndexType;
       5: aload_0
       6: areturn

  public org.rocksdb.IndexType indexType();
    Code:
       0: aload_0
       1: getfield      #27                 // Field indexType_:Lorg/rocksdb/IndexType;
       4: areturn

  public org.rocksdb.BlockBasedTableConfig setFormatVersion(int);
    Code:
       0: getstatic     #29                 // Field $assertionsDisabled:Z
       3: ifne          23
       6: iload_1
       7: iflt          15
      10: iload_1
      11: iconst_2
      12: if_icmple     23
      15: new           #30                 // class java/lang/AssertionError
      18: dup
      19: invokespecial #31                 // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_0
      24: iload_1
      25: putfield      #28                 // Field formatVersion_:I
      28: aload_0
      29: areturn

  public int formatVersion();
    Code:
       0: aload_0
       1: getfield      #28                 // Field formatVersion_:I
       4: ireturn

  protected long newTableFactoryHandle();
    Code:
       0: lconst_0
       1: lstore_1
       2: aload_0
       3: getfield      #14                 // Field filter_:Lorg/rocksdb/Filter;
       6: ifnull        17
       9: aload_0
      10: getfield      #14                 // Field filter_:Lorg/rocksdb/Filter;
      13: getfield      #32                 // Field org/rocksdb/Filter.nativeHandle_:J
      16: lstore_1
      17: lconst_0
      18: lstore_3
      19: aload_0
      20: getfield      #7                  // Field blockCache_:Lorg/rocksdb/Cache;
      23: ifnull        34
      26: aload_0
      27: getfield      #7                  // Field blockCache_:Lorg/rocksdb/Cache;
      30: getfield      #33                 // Field org/rocksdb/Cache.nativeHandle_:J
      33: lstore_3
      34: aload_0
      35: aload_0
      36: getfield      #2                  // Field noBlockCache_:Z
      39: aload_0
      40: getfield      #5                  // Field blockCacheSize_:J
      43: aload_0
      44: getfield      #6                  // Field blockCacheNumShardBits_:I
      47: lload_3
      48: aload_0
      49: getfield      #10                 // Field blockSize_:J
      52: aload_0
      53: getfield      #11                 // Field blockSizeDeviation_:I
      56: aload_0
      57: getfield      #12                 // Field blockRestartInterval_:I
      60: aload_0
      61: getfield      #13                 // Field wholeKeyFiltering_:Z
      64: lload_1
      65: aload_0
      66: getfield      #15                 // Field cacheIndexAndFilterBlocks_:Z
      69: aload_0
      70: getfield      #16                 // Field cacheIndexAndFilterBlocksWithHighPriority_:Z
      73: aload_0
      74: getfield      #17                 // Field pinL0FilterAndIndexBlocksInCache_:Z
      77: aload_0
      78: getfield      #18                 // Field partitionFilters_:Z
      81: aload_0
      82: getfield      #19                 // Field metadataBlockSize_:J
      85: aload_0
      86: getfield      #20                 // Field pinTopLevelIndexAndFilter_:Z
      89: aload_0
      90: getfield      #21                 // Field hashIndexAllowCollision_:Z
      93: aload_0
      94: getfield      #22                 // Field blockCacheCompressedSize_:J
      97: aload_0
      98: getfield      #23                 // Field blockCacheCompressedNumShardBits_:I
     101: aload_0
     102: getfield      #25                 // Field checksumType_:Lorg/rocksdb/ChecksumType;
     105: invokevirtual #34                 // Method org/rocksdb/ChecksumType.getValue:()B
     108: aload_0
     109: getfield      #27                 // Field indexType_:Lorg/rocksdb/IndexType;
     112: invokevirtual #35                 // Method org/rocksdb/IndexType.getValue:()B
     115: aload_0
     116: getfield      #28                 // Field formatVersion_:I
     119: invokespecial #36                 // Method newTableFactoryHandle:(ZJIJJIIZJZZZZJZZJIBBI)J
     122: lreturn

  private native long newTableFactoryHandle(boolean, long, int, long, long, int, int, boolean, long, boolean, boolean, boolean, boolean, long, boolean, boolean, long, int, byte, byte, int);

  static {};
    Code:
       0: ldc_w         #37                 // class org/rocksdb/BlockBasedTableConfig
       3: invokevirtual #38                 // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #29                 // Field $assertionsDisabled:Z
      17: return
}
