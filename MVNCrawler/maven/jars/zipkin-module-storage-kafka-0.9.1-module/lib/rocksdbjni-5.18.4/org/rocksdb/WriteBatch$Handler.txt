Compiled from "WriteBatch.java"
public abstract class org.rocksdb.WriteBatch$Handler extends org.rocksdb.RocksCallbackObject {
  public org.rocksdb.WriteBatch$Handler();
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #1                  // Method org/rocksdb/RocksCallbackObject."<init>":([J)V
       5: return

  protected long initializeNative(long...);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method createNewHandler0:()J
       4: lreturn

  public abstract void put(int, byte[], byte[]) throws org.rocksdb.RocksDBException;

  public abstract void put(byte[], byte[]);

  public abstract void merge(int, byte[], byte[]) throws org.rocksdb.RocksDBException;

  public abstract void merge(byte[], byte[]);

  public abstract void delete(int, byte[]) throws org.rocksdb.RocksDBException;

  public abstract void delete(byte[]);

  public abstract void singleDelete(int, byte[]) throws org.rocksdb.RocksDBException;

  public abstract void singleDelete(byte[]);

  public abstract void deleteRange(int, byte[], byte[]) throws org.rocksdb.RocksDBException;

  public abstract void deleteRange(byte[], byte[]);

  public abstract void logData(byte[]);

  public abstract void putBlobIndex(int, byte[], byte[]) throws org.rocksdb.RocksDBException;

  public abstract void markBeginPrepare() throws org.rocksdb.RocksDBException;

  public abstract void markEndPrepare(byte[]) throws org.rocksdb.RocksDBException;

  public abstract void markNoop(boolean) throws org.rocksdb.RocksDBException;

  public abstract void markRollback(byte[]) throws org.rocksdb.RocksDBException;

  public abstract void markCommit(byte[]) throws org.rocksdb.RocksDBException;

  public boolean shouldContinue();
    Code:
       0: iconst_1
       1: ireturn

  private native long createNewHandler0();
}
