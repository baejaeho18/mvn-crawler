Compiled from "ColumnFamilyOptions.java"
public class org.rocksdb.ColumnFamilyOptions extends org.rocksdb.RocksObject implements org.rocksdb.ColumnFamilyOptionsInterface<org.rocksdb.ColumnFamilyOptions>, org.rocksdb.MutableColumnFamilyOptionsInterface<org.rocksdb.ColumnFamilyOptions> {
  private org.rocksdb.MemTableConfig memTableConfig_;

  private org.rocksdb.TableFormatConfig tableFormatConfig_;

  private org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>> comparator_;

  private org.rocksdb.AbstractCompactionFilter<? extends org.rocksdb.AbstractSlice<?>> compactionFilter_;

  org.rocksdb.AbstractCompactionFilterFactory<? extends org.rocksdb.AbstractCompactionFilter<?>> compactionFilterFactory_;

  private org.rocksdb.CompactionOptionsUniversal compactionOptionsUniversal_;

  private org.rocksdb.CompactionOptionsFIFO compactionOptionsFIFO_;

  private org.rocksdb.CompressionOptions compressionOptions_;

  static final boolean $assertionsDisabled;

  public org.rocksdb.ColumnFamilyOptions();
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method newColumnFamilyOptions:()J
       4: invokespecial #2                  // Method org/rocksdb/RocksObject."<init>":(J)V
       7: return

  public org.rocksdb.ColumnFamilyOptions(org.rocksdb.ColumnFamilyOptions);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokestatic  #4                  // Method copyColumnFamilyOptions:(J)J
       8: invokespecial #2                  // Method org/rocksdb/RocksObject."<init>":(J)V
      11: aload_0
      12: aload_1
      13: getfield      #5                  // Field memTableConfig_:Lorg/rocksdb/MemTableConfig;
      16: putfield      #5                  // Field memTableConfig_:Lorg/rocksdb/MemTableConfig;
      19: aload_0
      20: aload_1
      21: getfield      #6                  // Field tableFormatConfig_:Lorg/rocksdb/TableFormatConfig;
      24: putfield      #6                  // Field tableFormatConfig_:Lorg/rocksdb/TableFormatConfig;
      27: aload_0
      28: aload_1
      29: getfield      #7                  // Field comparator_:Lorg/rocksdb/AbstractComparator;
      32: putfield      #7                  // Field comparator_:Lorg/rocksdb/AbstractComparator;
      35: aload_0
      36: aload_1
      37: getfield      #8                  // Field compactionFilter_:Lorg/rocksdb/AbstractCompactionFilter;
      40: putfield      #8                  // Field compactionFilter_:Lorg/rocksdb/AbstractCompactionFilter;
      43: aload_0
      44: aload_1
      45: getfield      #9                  // Field compactionFilterFactory_:Lorg/rocksdb/AbstractCompactionFilterFactory;
      48: putfield      #9                  // Field compactionFilterFactory_:Lorg/rocksdb/AbstractCompactionFilterFactory;
      51: aload_0
      52: aload_1
      53: getfield      #10                 // Field compactionOptionsUniversal_:Lorg/rocksdb/CompactionOptionsUniversal;
      56: putfield      #10                 // Field compactionOptionsUniversal_:Lorg/rocksdb/CompactionOptionsUniversal;
      59: aload_0
      60: aload_1
      61: getfield      #11                 // Field compactionOptionsFIFO_:Lorg/rocksdb/CompactionOptionsFIFO;
      64: putfield      #11                 // Field compactionOptionsFIFO_:Lorg/rocksdb/CompactionOptionsFIFO;
      67: aload_0
      68: aload_1
      69: getfield      #12                 // Field compressionOptions_:Lorg/rocksdb/CompressionOptions;
      72: putfield      #12                 // Field compressionOptions_:Lorg/rocksdb/CompressionOptions;
      75: return

  org.rocksdb.ColumnFamilyOptions(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokespecial #2                  // Method org/rocksdb/RocksObject."<init>":(J)V
       5: return

  public static org.rocksdb.ColumnFamilyOptions getColumnFamilyOptionsFromProps(java.util.Properties);
    Code:
       0: aload_0
       1: ifnull        11
       4: aload_0
       5: invokevirtual #13                 // Method java/util/Properties.size:()I
       8: ifne          21
      11: new           #14                 // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #15                 // String Properties value must contain at least one value.
      17: invokespecial #16                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aconst_null
      22: astore_1
      23: new           #17                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      30: astore_2
      31: aload_0
      32: invokevirtual #19                 // Method java/util/Properties.stringPropertyNames:()Ljava/util/Set;
      35: invokeinterface #20,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      40: astore_3
      41: aload_3
      42: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      47: ifeq          96
      50: aload_3
      51: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      56: checkcast     #23                 // class java/lang/String
      59: astore        4
      61: aload_2
      62: aload         4
      64: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: pop
      68: aload_2
      69: ldc           #25                 // String =
      71: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: pop
      75: aload_2
      76: aload_0
      77: aload         4
      79: invokevirtual #26                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      82: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: pop
      86: aload_2
      87: ldc           #27                 // String ;
      89: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      92: pop
      93: goto          41
      96: aload_2
      97: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     100: invokestatic  #29                 // Method getColumnFamilyOptionsFromProps:(Ljava/lang/String;)J
     103: lstore_3
     104: lload_3
     105: lconst_0
     106: lcmp
     107: ifeq          119
     110: new           #30                 // class org/rocksdb/ColumnFamilyOptions
     113: dup
     114: lload_3
     115: invokespecial #31                 // Method "<init>":(J)V
     118: astore_1
     119: aload_1
     120: areturn

  public org.rocksdb.ColumnFamilyOptions optimizeForSmallDb();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #32                 // Method optimizeForSmallDb:(J)V
       8: aload_0
       9: areturn

  public org.rocksdb.ColumnFamilyOptions optimizeForPointLookup(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #33                 // Method optimizeForPointLookup:(JJ)V
       9: aload_0
      10: areturn

  public org.rocksdb.ColumnFamilyOptions optimizeLevelStyleCompaction();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: ldc2_w        #34                 // long 536870912l
       8: invokespecial #36                 // Method optimizeLevelStyleCompaction:(JJ)V
      11: aload_0
      12: areturn

  public org.rocksdb.ColumnFamilyOptions optimizeLevelStyleCompaction(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #36                 // Method optimizeLevelStyleCompaction:(JJ)V
       9: aload_0
      10: areturn

  public org.rocksdb.ColumnFamilyOptions optimizeUniversalStyleCompaction();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: ldc2_w        #34                 // long 536870912l
       8: invokespecial #37                 // Method optimizeUniversalStyleCompaction:(JJ)V
      11: aload_0
      12: areturn

  public org.rocksdb.ColumnFamilyOptions optimizeUniversalStyleCompaction(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #37                 // Method optimizeUniversalStyleCompaction:(JJ)V
       9: aload_0
      10: areturn

  public org.rocksdb.ColumnFamilyOptions setComparator(org.rocksdb.BuiltinComparator);
    Code:
       0: getstatic     #38                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #39                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #40                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #3                  // Field nativeHandle_:J
      26: aload_1
      27: invokevirtual #42                 // Method org/rocksdb/BuiltinComparator.ordinal:()I
      30: invokespecial #43                 // Method setComparatorHandle:(JI)V
      33: aload_0
      34: areturn

  public org.rocksdb.ColumnFamilyOptions setComparator(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>);
    Code:
       0: getstatic     #38                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #39                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #40                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #3                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #44                 // Field org/rocksdb/AbstractComparator.nativeHandle_:J
      30: aload_1
      31: invokevirtual #45                 // Method org/rocksdb/AbstractComparator.getComparatorType:()Lorg/rocksdb/ComparatorType;
      34: invokevirtual #46                 // Method org/rocksdb/ComparatorType.getValue:()B
      37: invokespecial #47                 // Method setComparatorHandle:(JJB)V
      40: aload_0
      41: aload_1
      42: putfield      #7                  // Field comparator_:Lorg/rocksdb/AbstractComparator;
      45: aload_0
      46: areturn

  public org.rocksdb.ColumnFamilyOptions setMergeOperatorName(java.lang.String);
    Code:
       0: getstatic     #38                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #39                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #40                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_1
      22: ifnonnull     35
      25: new           #14                 // class java/lang/IllegalArgumentException
      28: dup
      29: ldc           #48                 // String Merge operator name must not be null.
      31: invokespecial #16                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: aload_0
      37: getfield      #3                  // Field nativeHandle_:J
      40: aload_1
      41: invokespecial #49                 // Method setMergeOperatorName:(JLjava/lang/String;)V
      44: aload_0
      45: areturn

  public org.rocksdb.ColumnFamilyOptions setMergeOperator(org.rocksdb.MergeOperator);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: aload_1
       6: getfield      #50                 // Field org/rocksdb/MergeOperator.nativeHandle_:J
       9: invokespecial #51                 // Method setMergeOperator:(JJ)V
      12: aload_0
      13: areturn

  public org.rocksdb.ColumnFamilyOptions setCompactionFilter(org.rocksdb.AbstractCompactionFilter<? extends org.rocksdb.AbstractSlice<?>>);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: aload_1
       6: getfield      #52                 // Field org/rocksdb/AbstractCompactionFilter.nativeHandle_:J
       9: invokespecial #53                 // Method setCompactionFilterHandle:(JJ)V
      12: aload_0
      13: aload_1
      14: putfield      #8                  // Field compactionFilter_:Lorg/rocksdb/AbstractCompactionFilter;
      17: aload_0
      18: areturn

  public org.rocksdb.ColumnFamilyOptions setCompactionFilterFactory(org.rocksdb.AbstractCompactionFilterFactory<? extends org.rocksdb.AbstractCompactionFilter<?>>);
    Code:
       0: getstatic     #38                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #39                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #40                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #3                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #54                 // Field org/rocksdb/AbstractCompactionFilterFactory.nativeHandle_:J
      30: invokespecial #55                 // Method setCompactionFilterFactoryHandle:(JJ)V
      33: aload_0
      34: aload_1
      35: putfield      #9                  // Field compactionFilterFactory_:Lorg/rocksdb/AbstractCompactionFilterFactory;
      38: aload_0
      39: areturn

  public org.rocksdb.ColumnFamilyOptions setWriteBufferSize(long);
    Code:
       0: getstatic     #38                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #39                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #40                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #3                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #56                 // Method setWriteBufferSize:(JJ)V
      30: aload_0
      31: areturn

  public long writeBufferSize();
    Code:
       0: getstatic     #38                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #39                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #40                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #3                  // Field nativeHandle_:J
      26: invokespecial #57                 // Method writeBufferSize:(J)J
      29: lreturn

  public org.rocksdb.ColumnFamilyOptions setMaxWriteBufferNumber(int);
    Code:
       0: getstatic     #38                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #39                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #40                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #3                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #58                 // Method setMaxWriteBufferNumber:(JI)V
      30: aload_0
      31: areturn

  public int maxWriteBufferNumber();
    Code:
       0: getstatic     #38                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #39                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #40                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #3                  // Field nativeHandle_:J
      26: invokespecial #59                 // Method maxWriteBufferNumber:(J)I
      29: ireturn

  public org.rocksdb.ColumnFamilyOptions setMinWriteBufferNumberToMerge(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #60                 // Method setMinWriteBufferNumberToMerge:(JI)V
       9: aload_0
      10: areturn

  public int minWriteBufferNumberToMerge();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #61                 // Method minWriteBufferNumberToMerge:(J)I
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions useFixedLengthPrefixExtractor(int);
    Code:
       0: getstatic     #38                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #39                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #40                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #3                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #62                 // Method useFixedLengthPrefixExtractor:(JI)V
      30: aload_0
      31: areturn

  public org.rocksdb.ColumnFamilyOptions useCappedPrefixExtractor(int);
    Code:
       0: getstatic     #38                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #39                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #40                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #3                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #63                 // Method useCappedPrefixExtractor:(JI)V
      30: aload_0
      31: areturn

  public org.rocksdb.ColumnFamilyOptions setCompressionType(org.rocksdb.CompressionType);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: aload_1
       6: invokevirtual #64                 // Method org/rocksdb/CompressionType.getValue:()B
       9: invokespecial #65                 // Method setCompressionType:(JB)V
      12: aload_0
      13: areturn

  public org.rocksdb.CompressionType compressionType();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #66                 // Method compressionType:(J)B
       8: invokestatic  #67                 // Method org/rocksdb/CompressionType.getCompressionType:(B)Lorg/rocksdb/CompressionType;
      11: areturn

  public org.rocksdb.ColumnFamilyOptions setCompressionPerLevel(java.util.List<org.rocksdb.CompressionType>);
    Code:
       0: aload_1
       1: invokeinterface #68,  1           // InterfaceMethod java/util/List.size:()I
       6: newarray       byte
       8: astore_2
       9: iconst_0
      10: istore_3
      11: iload_3
      12: aload_1
      13: invokeinterface #68,  1           // InterfaceMethod java/util/List.size:()I
      18: if_icmpge     43
      21: aload_2
      22: iload_3
      23: aload_1
      24: iload_3
      25: invokeinterface #69,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      30: checkcast     #70                 // class org/rocksdb/CompressionType
      33: invokevirtual #64                 // Method org/rocksdb/CompressionType.getValue:()B
      36: bastore
      37: iinc          3, 1
      40: goto          11
      43: aload_0
      44: aload_0
      45: getfield      #3                  // Field nativeHandle_:J
      48: aload_2
      49: invokespecial #71                 // Method setCompressionPerLevel:(J[B)V
      52: aload_0
      53: areturn

  public java.util.List<org.rocksdb.CompressionType> compressionPerLevel();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #72                 // Method compressionPerLevel:(J)[B
       8: astore_1
       9: new           #73                 // class java/util/ArrayList
      12: dup
      13: invokespecial #74                 // Method java/util/ArrayList."<init>":()V
      16: astore_2
      17: aload_1
      18: astore_3
      19: aload_3
      20: arraylength
      21: istore        4
      23: iconst_0
      24: istore        5
      26: iload         5
      28: iload         4
      30: if_icmpge     63
      33: aload_3
      34: iload         5
      36: baload
      37: invokestatic  #75                 // Method java/lang/Byte.valueOf:(B)Ljava/lang/Byte;
      40: astore        6
      42: aload_2
      43: aload         6
      45: invokevirtual #76                 // Method java/lang/Byte.byteValue:()B
      48: invokestatic  #67                 // Method org/rocksdb/CompressionType.getCompressionType:(B)Lorg/rocksdb/CompressionType;
      51: invokeinterface #77,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      56: pop
      57: iinc          5, 1
      60: goto          26
      63: aload_2
      64: areturn

  public org.rocksdb.ColumnFamilyOptions setBottommostCompressionType(org.rocksdb.CompressionType);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: aload_1
       6: invokevirtual #64                 // Method org/rocksdb/CompressionType.getValue:()B
       9: invokespecial #78                 // Method setBottommostCompressionType:(JB)V
      12: aload_0
      13: areturn

  public org.rocksdb.CompressionType bottommostCompressionType();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #79                 // Method bottommostCompressionType:(J)B
       8: invokestatic  #67                 // Method org/rocksdb/CompressionType.getCompressionType:(B)Lorg/rocksdb/CompressionType;
      11: areturn

  public org.rocksdb.ColumnFamilyOptions setCompressionOptions(org.rocksdb.CompressionOptions);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: aload_1
       6: getfield      #80                 // Field org/rocksdb/CompressionOptions.nativeHandle_:J
       9: invokespecial #81                 // Method setCompressionOptions:(JJ)V
      12: aload_0
      13: aload_1
      14: putfield      #12                 // Field compressionOptions_:Lorg/rocksdb/CompressionOptions;
      17: aload_0
      18: areturn

  public org.rocksdb.CompressionOptions compressionOptions();
    Code:
       0: aload_0
       1: getfield      #12                 // Field compressionOptions_:Lorg/rocksdb/CompressionOptions;
       4: areturn

  public org.rocksdb.ColumnFamilyOptions setNumLevels(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #82                 // Method setNumLevels:(JI)V
       9: aload_0
      10: areturn

  public int numLevels();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #83                 // Method numLevels:(J)I
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setLevelZeroFileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #84                 // Method setLevelZeroFileNumCompactionTrigger:(JI)V
       9: aload_0
      10: areturn

  public int levelZeroFileNumCompactionTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #85                 // Method levelZeroFileNumCompactionTrigger:(J)I
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setLevelZeroSlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #86                 // Method setLevelZeroSlowdownWritesTrigger:(JI)V
       9: aload_0
      10: areturn

  public int levelZeroSlowdownWritesTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #87                 // Method levelZeroSlowdownWritesTrigger:(J)I
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setLevelZeroStopWritesTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #88                 // Method setLevelZeroStopWritesTrigger:(JI)V
       9: aload_0
      10: areturn

  public int levelZeroStopWritesTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #89                 // Method levelZeroStopWritesTrigger:(J)I
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setTargetFileSizeBase(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #90                 // Method setTargetFileSizeBase:(JJ)V
       9: aload_0
      10: areturn

  public long targetFileSizeBase();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #91                 // Method targetFileSizeBase:(J)J
       8: lreturn

  public org.rocksdb.ColumnFamilyOptions setTargetFileSizeMultiplier(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #92                 // Method setTargetFileSizeMultiplier:(JI)V
       9: aload_0
      10: areturn

  public int targetFileSizeMultiplier();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #93                 // Method targetFileSizeMultiplier:(J)I
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setMaxBytesForLevelBase(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #94                 // Method setMaxBytesForLevelBase:(JJ)V
       9: aload_0
      10: areturn

  public long maxBytesForLevelBase();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #95                 // Method maxBytesForLevelBase:(J)J
       8: lreturn

  public org.rocksdb.ColumnFamilyOptions setLevelCompactionDynamicLevelBytes(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #96                 // Method setLevelCompactionDynamicLevelBytes:(JZ)V
       9: aload_0
      10: areturn

  public boolean levelCompactionDynamicLevelBytes();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #97                 // Method levelCompactionDynamicLevelBytes:(J)Z
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setMaxBytesForLevelMultiplier(double);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: dload_1
       6: invokespecial #98                 // Method setMaxBytesForLevelMultiplier:(JD)V
       9: aload_0
      10: areturn

  public double maxBytesForLevelMultiplier();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #99                 // Method maxBytesForLevelMultiplier:(J)D
       8: dreturn

  public org.rocksdb.ColumnFamilyOptions setMaxCompactionBytes(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #100                // Method setMaxCompactionBytes:(JJ)V
       9: aload_0
      10: areturn

  public long maxCompactionBytes();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #101                // Method maxCompactionBytes:(J)J
       8: lreturn

  public org.rocksdb.ColumnFamilyOptions setArenaBlockSize(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #102                // Method setArenaBlockSize:(JJ)V
       9: aload_0
      10: areturn

  public long arenaBlockSize();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #103                // Method arenaBlockSize:(J)J
       8: lreturn

  public org.rocksdb.ColumnFamilyOptions setDisableAutoCompactions(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #104                // Method setDisableAutoCompactions:(JZ)V
       9: aload_0
      10: areturn

  public boolean disableAutoCompactions();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #105                // Method disableAutoCompactions:(J)Z
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setCompactionStyle(org.rocksdb.CompactionStyle);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: aload_1
       6: invokevirtual #106                // Method org/rocksdb/CompactionStyle.getValue:()B
       9: invokespecial #107                // Method setCompactionStyle:(JB)V
      12: aload_0
      13: areturn

  public org.rocksdb.CompactionStyle compactionStyle();
    Code:
       0: invokestatic  #108                // Method org/rocksdb/CompactionStyle.values:()[Lorg/rocksdb/CompactionStyle;
       3: aload_0
       4: aload_0
       5: getfield      #3                  // Field nativeHandle_:J
       8: invokespecial #109                // Method compactionStyle:(J)B
      11: aaload
      12: areturn

  public org.rocksdb.ColumnFamilyOptions setMaxTableFilesSizeFIFO(long);
    Code:
       0: getstatic     #38                 // Field $assertionsDisabled:Z
       3: ifne          20
       6: lload_1
       7: lconst_0
       8: lcmp
       9: ifgt          20
      12: new           #40                 // class java/lang/AssertionError
      15: dup
      16: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      19: athrow
      20: getstatic     #38                 // Field $assertionsDisabled:Z
      23: ifne          41
      26: aload_0
      27: invokevirtual #39                 // Method isOwningHandle:()Z
      30: ifne          41
      33: new           #40                 // class java/lang/AssertionError
      36: dup
      37: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      40: athrow
      41: aload_0
      42: aload_0
      43: getfield      #3                  // Field nativeHandle_:J
      46: lload_1
      47: invokespecial #110                // Method setMaxTableFilesSizeFIFO:(JJ)V
      50: aload_0
      51: areturn

  public long maxTableFilesSizeFIFO();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #111                // Method maxTableFilesSizeFIFO:(J)J
       8: lreturn

  public org.rocksdb.ColumnFamilyOptions setMaxSequentialSkipInIterations(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #112                // Method setMaxSequentialSkipInIterations:(JJ)V
       9: aload_0
      10: areturn

  public long maxSequentialSkipInIterations();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #113                // Method maxSequentialSkipInIterations:(J)J
       8: lreturn

  public org.rocksdb.MemTableConfig memTableConfig();
    Code:
       0: aload_0
       1: getfield      #5                  // Field memTableConfig_:Lorg/rocksdb/MemTableConfig;
       4: areturn

  public org.rocksdb.ColumnFamilyOptions setMemTableConfig(org.rocksdb.MemTableConfig);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: aload_1
       6: invokevirtual #114                // Method org/rocksdb/MemTableConfig.newMemTableFactoryHandle:()J
       9: invokespecial #115                // Method setMemTableFactory:(JJ)V
      12: aload_0
      13: aload_1
      14: putfield      #5                  // Field memTableConfig_:Lorg/rocksdb/MemTableConfig;
      17: aload_0
      18: areturn

  public java.lang.String memTableFactoryName();
    Code:
       0: getstatic     #38                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #39                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #40                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #3                  // Field nativeHandle_:J
      26: invokespecial #116                // Method memTableFactoryName:(J)Ljava/lang/String;
      29: areturn

  public org.rocksdb.TableFormatConfig tableFormatConfig();
    Code:
       0: aload_0
       1: getfield      #6                  // Field tableFormatConfig_:Lorg/rocksdb/TableFormatConfig;
       4: areturn

  public org.rocksdb.ColumnFamilyOptions setTableFormatConfig(org.rocksdb.TableFormatConfig);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: aload_1
       6: invokevirtual #117                // Method org/rocksdb/TableFormatConfig.newTableFactoryHandle:()J
       9: invokespecial #118                // Method setTableFactory:(JJ)V
      12: aload_0
      13: aload_1
      14: putfield      #6                  // Field tableFormatConfig_:Lorg/rocksdb/TableFormatConfig;
      17: aload_0
      18: areturn

  public java.lang.String tableFactoryName();
    Code:
       0: getstatic     #38                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #39                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #40                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #3                  // Field nativeHandle_:J
      26: invokespecial #119                // Method tableFactoryName:(J)Ljava/lang/String;
      29: areturn

  public org.rocksdb.ColumnFamilyOptions setInplaceUpdateSupport(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #120                // Method setInplaceUpdateSupport:(JZ)V
       9: aload_0
      10: areturn

  public boolean inplaceUpdateSupport();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #121                // Method inplaceUpdateSupport:(J)Z
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setInplaceUpdateNumLocks(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #122                // Method setInplaceUpdateNumLocks:(JJ)V
       9: aload_0
      10: areturn

  public long inplaceUpdateNumLocks();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #123                // Method inplaceUpdateNumLocks:(J)J
       8: lreturn

  public org.rocksdb.ColumnFamilyOptions setMemtablePrefixBloomSizeRatio(double);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: dload_1
       6: invokespecial #124                // Method setMemtablePrefixBloomSizeRatio:(JD)V
       9: aload_0
      10: areturn

  public double memtablePrefixBloomSizeRatio();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #125                // Method memtablePrefixBloomSizeRatio:(J)D
       8: dreturn

  public org.rocksdb.ColumnFamilyOptions setBloomLocality(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #126                // Method setBloomLocality:(JI)V
       9: aload_0
      10: areturn

  public int bloomLocality();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #127                // Method bloomLocality:(J)I
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setMaxSuccessiveMerges(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #128                // Method setMaxSuccessiveMerges:(JJ)V
       9: aload_0
      10: areturn

  public long maxSuccessiveMerges();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #129                // Method maxSuccessiveMerges:(J)J
       8: lreturn

  public org.rocksdb.ColumnFamilyOptions setOptimizeFiltersForHits(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #130                // Method setOptimizeFiltersForHits:(JZ)V
       9: aload_0
      10: areturn

  public boolean optimizeFiltersForHits();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #131                // Method optimizeFiltersForHits:(J)Z
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setMemtableHugePageSize(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #132                // Method setMemtableHugePageSize:(JJ)V
       9: aload_0
      10: areturn

  public long memtableHugePageSize();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #133                // Method memtableHugePageSize:(J)J
       8: lreturn

  public org.rocksdb.ColumnFamilyOptions setSoftPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #134                // Method setSoftPendingCompactionBytesLimit:(JJ)V
       9: aload_0
      10: areturn

  public long softPendingCompactionBytesLimit();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #135                // Method softPendingCompactionBytesLimit:(J)J
       8: lreturn

  public org.rocksdb.ColumnFamilyOptions setHardPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #136                // Method setHardPendingCompactionBytesLimit:(JJ)V
       9: aload_0
      10: areturn

  public long hardPendingCompactionBytesLimit();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #137                // Method hardPendingCompactionBytesLimit:(J)J
       8: lreturn

  public org.rocksdb.ColumnFamilyOptions setLevel0FileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #138                // Method setLevel0FileNumCompactionTrigger:(JI)V
       9: aload_0
      10: areturn

  public int level0FileNumCompactionTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #139                // Method level0FileNumCompactionTrigger:(J)I
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setLevel0SlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #140                // Method setLevel0SlowdownWritesTrigger:(JI)V
       9: aload_0
      10: areturn

  public int level0SlowdownWritesTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #141                // Method level0SlowdownWritesTrigger:(J)I
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setLevel0StopWritesTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #142                // Method setLevel0StopWritesTrigger:(JI)V
       9: aload_0
      10: areturn

  public int level0StopWritesTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #143                // Method level0StopWritesTrigger:(J)I
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setMaxBytesForLevelMultiplierAdditional(int[]);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: aload_1
       6: invokespecial #144                // Method setMaxBytesForLevelMultiplierAdditional:(J[I)V
       9: aload_0
      10: areturn

  public int[] maxBytesForLevelMultiplierAdditional();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #145                // Method maxBytesForLevelMultiplierAdditional:(J)[I
       8: areturn

  public org.rocksdb.ColumnFamilyOptions setParanoidFileChecks(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #146                // Method setParanoidFileChecks:(JZ)V
       9: aload_0
      10: areturn

  public boolean paranoidFileChecks();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #147                // Method paranoidFileChecks:(J)Z
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setMaxWriteBufferNumberToMaintain(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #148                // Method setMaxWriteBufferNumberToMaintain:(JI)V
       9: aload_0
      10: areturn

  public int maxWriteBufferNumberToMaintain();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #149                // Method maxWriteBufferNumberToMaintain:(J)I
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setCompactionPriority(org.rocksdb.CompactionPriority);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: aload_1
       6: invokevirtual #150                // Method org/rocksdb/CompactionPriority.getValue:()B
       9: invokespecial #151                // Method setCompactionPriority:(JB)V
      12: aload_0
      13: areturn

  public org.rocksdb.CompactionPriority compactionPriority();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #152                // Method compactionPriority:(J)B
       8: invokestatic  #153                // Method org/rocksdb/CompactionPriority.getCompactionPriority:(B)Lorg/rocksdb/CompactionPriority;
      11: areturn

  public org.rocksdb.ColumnFamilyOptions setReportBgIoStats(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #154                // Method setReportBgIoStats:(JZ)V
       9: aload_0
      10: areturn

  public boolean reportBgIoStats();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #155                // Method reportBgIoStats:(J)Z
       8: ireturn

  public org.rocksdb.ColumnFamilyOptions setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: aload_1
       6: getfield      #156                // Field org/rocksdb/CompactionOptionsUniversal.nativeHandle_:J
       9: invokespecial #157                // Method setCompactionOptionsUniversal:(JJ)V
      12: aload_0
      13: aload_1
      14: putfield      #10                 // Field compactionOptionsUniversal_:Lorg/rocksdb/CompactionOptionsUniversal;
      17: aload_0
      18: areturn

  public org.rocksdb.CompactionOptionsUniversal compactionOptionsUniversal();
    Code:
       0: aload_0
       1: getfield      #10                 // Field compactionOptionsUniversal_:Lorg/rocksdb/CompactionOptionsUniversal;
       4: areturn

  public org.rocksdb.ColumnFamilyOptions setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: aload_1
       6: getfield      #158                // Field org/rocksdb/CompactionOptionsFIFO.nativeHandle_:J
       9: invokespecial #159                // Method setCompactionOptionsFIFO:(JJ)V
      12: aload_0
      13: aload_1
      14: putfield      #11                 // Field compactionOptionsFIFO_:Lorg/rocksdb/CompactionOptionsFIFO;
      17: aload_0
      18: areturn

  public org.rocksdb.CompactionOptionsFIFO compactionOptionsFIFO();
    Code:
       0: aload_0
       1: getfield      #11                 // Field compactionOptionsFIFO_:Lorg/rocksdb/CompactionOptionsFIFO;
       4: areturn

  public org.rocksdb.ColumnFamilyOptions setForceConsistencyChecks(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #160                // Method setForceConsistencyChecks:(JZ)V
       9: aload_0
      10: areturn

  public boolean forceConsistencyChecks();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field nativeHandle_:J
       5: invokespecial #161                // Method forceConsistencyChecks:(J)Z
       8: ireturn

  private static native long getColumnFamilyOptionsFromProps(java.lang.String);

  private static native long newColumnFamilyOptions();

  private static native long copyColumnFamilyOptions(long);

  protected final native void disposeInternal(long);

  private native void optimizeForSmallDb(long);

  private native void optimizeForPointLookup(long, long);

  private native void optimizeLevelStyleCompaction(long, long);

  private native void optimizeUniversalStyleCompaction(long, long);

  private native void setComparatorHandle(long, int);

  private native void setComparatorHandle(long, long, byte);

  private native void setMergeOperatorName(long, java.lang.String);

  private native void setMergeOperator(long, long);

  private native void setCompactionFilterHandle(long, long);

  private native void setCompactionFilterFactoryHandle(long, long);

  private native void setWriteBufferSize(long, long) throws java.lang.IllegalArgumentException;

  private native long writeBufferSize(long);

  private native void setMaxWriteBufferNumber(long, int);

  private native int maxWriteBufferNumber(long);

  private native void setMinWriteBufferNumberToMerge(long, int);

  private native int minWriteBufferNumberToMerge(long);

  private native void setCompressionType(long, byte);

  private native byte compressionType(long);

  private native void setCompressionPerLevel(long, byte[]);

  private native byte[] compressionPerLevel(long);

  private native void setBottommostCompressionType(long, byte);

  private native byte bottommostCompressionType(long);

  private native void setCompressionOptions(long, long);

  private native void useFixedLengthPrefixExtractor(long, int);

  private native void useCappedPrefixExtractor(long, int);

  private native void setNumLevels(long, int);

  private native int numLevels(long);

  private native void setLevelZeroFileNumCompactionTrigger(long, int);

  private native int levelZeroFileNumCompactionTrigger(long);

  private native void setLevelZeroSlowdownWritesTrigger(long, int);

  private native int levelZeroSlowdownWritesTrigger(long);

  private native void setLevelZeroStopWritesTrigger(long, int);

  private native int levelZeroStopWritesTrigger(long);

  private native void setTargetFileSizeBase(long, long);

  private native long targetFileSizeBase(long);

  private native void setTargetFileSizeMultiplier(long, int);

  private native int targetFileSizeMultiplier(long);

  private native void setMaxBytesForLevelBase(long, long);

  private native long maxBytesForLevelBase(long);

  private native void setLevelCompactionDynamicLevelBytes(long, boolean);

  private native boolean levelCompactionDynamicLevelBytes(long);

  private native void setMaxBytesForLevelMultiplier(long, double);

  private native double maxBytesForLevelMultiplier(long);

  private native void setMaxCompactionBytes(long, long);

  private native long maxCompactionBytes(long);

  private native void setArenaBlockSize(long, long) throws java.lang.IllegalArgumentException;

  private native long arenaBlockSize(long);

  private native void setDisableAutoCompactions(long, boolean);

  private native boolean disableAutoCompactions(long);

  private native void setCompactionStyle(long, byte);

  private native byte compactionStyle(long);

  private native void setMaxTableFilesSizeFIFO(long, long);

  private native long maxTableFilesSizeFIFO(long);

  private native void setMaxSequentialSkipInIterations(long, long);

  private native long maxSequentialSkipInIterations(long);

  private native void setMemTableFactory(long, long);

  private native java.lang.String memTableFactoryName(long);

  private native void setTableFactory(long, long);

  private native java.lang.String tableFactoryName(long);

  private native void setInplaceUpdateSupport(long, boolean);

  private native boolean inplaceUpdateSupport(long);

  private native void setInplaceUpdateNumLocks(long, long) throws java.lang.IllegalArgumentException;

  private native long inplaceUpdateNumLocks(long);

  private native void setMemtablePrefixBloomSizeRatio(long, double);

  private native double memtablePrefixBloomSizeRatio(long);

  private native void setBloomLocality(long, int);

  private native int bloomLocality(long);

  private native void setMaxSuccessiveMerges(long, long) throws java.lang.IllegalArgumentException;

  private native long maxSuccessiveMerges(long);

  private native void setOptimizeFiltersForHits(long, boolean);

  private native boolean optimizeFiltersForHits(long);

  private native void setMemtableHugePageSize(long, long);

  private native long memtableHugePageSize(long);

  private native void setSoftPendingCompactionBytesLimit(long, long);

  private native long softPendingCompactionBytesLimit(long);

  private native void setHardPendingCompactionBytesLimit(long, long);

  private native long hardPendingCompactionBytesLimit(long);

  private native void setLevel0FileNumCompactionTrigger(long, int);

  private native int level0FileNumCompactionTrigger(long);

  private native void setLevel0SlowdownWritesTrigger(long, int);

  private native int level0SlowdownWritesTrigger(long);

  private native void setLevel0StopWritesTrigger(long, int);

  private native int level0StopWritesTrigger(long);

  private native void setMaxBytesForLevelMultiplierAdditional(long, int[]);

  private native int[] maxBytesForLevelMultiplierAdditional(long);

  private native void setParanoidFileChecks(long, boolean);

  private native boolean paranoidFileChecks(long);

  private native void setMaxWriteBufferNumberToMaintain(long, int);

  private native int maxWriteBufferNumberToMaintain(long);

  private native void setCompactionPriority(long, byte);

  private native byte compactionPriority(long);

  private native void setReportBgIoStats(long, boolean);

  private native boolean reportBgIoStats(long);

  private native void setCompactionOptionsUniversal(long, long);

  private native void setCompactionOptionsFIFO(long, long);

  private native void setForceConsistencyChecks(long, boolean);

  private native boolean forceConsistencyChecks(long);

  public org.rocksdb.ColumnFamilyOptionsInterface setCompressionOptions(org.rocksdb.CompressionOptions);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #162                // Method setCompressionOptions:(Lorg/rocksdb/CompressionOptions;)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setBottommostCompressionType(org.rocksdb.CompressionType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #163                // Method setBottommostCompressionType:(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setTableFormatConfig(org.rocksdb.TableFormatConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #164                // Method setTableFormatConfig:(Lorg/rocksdb/TableFormatConfig;)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMemTableConfig(org.rocksdb.MemTableConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #165                // Method setMemTableConfig:(Lorg/rocksdb/MemTableConfig;)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMaxTableFilesSizeFIFO(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #166                // Method setMaxTableFilesSizeFIFO:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMaxBytesForLevelMultiplier(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #167                // Method setMaxBytesForLevelMultiplier:(D)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroStopWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #168                // Method setLevelZeroStopWritesTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroSlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #169                // Method setLevelZeroSlowdownWritesTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroFileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #170                // Method setLevelZeroFileNumCompactionTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface useCappedPrefixExtractor(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #171                // Method useCappedPrefixExtractor:(I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface useFixedLengthPrefixExtractor(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #172                // Method useFixedLengthPrefixExtractor:(I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMergeOperator(org.rocksdb.MergeOperator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #173                // Method setMergeOperator:(Lorg/rocksdb/MergeOperator;)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMergeOperatorName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #174                // Method setMergeOperatorName:(Ljava/lang/String;)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setComparator(org.rocksdb.AbstractComparator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #175                // Method setComparator:(Lorg/rocksdb/AbstractComparator;)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setComparator(org.rocksdb.BuiltinComparator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #176                // Method setComparator:(Lorg/rocksdb/BuiltinComparator;)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeUniversalStyleCompaction(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #177                // Method optimizeUniversalStyleCompaction:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeUniversalStyleCompaction();
    Code:
       0: aload_0
       1: invokevirtual #178                // Method optimizeUniversalStyleCompaction:()Lorg/rocksdb/ColumnFamilyOptions;
       4: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeLevelStyleCompaction(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #179                // Method optimizeLevelStyleCompaction:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeLevelStyleCompaction();
    Code:
       0: aload_0
       1: invokevirtual #180                // Method optimizeLevelStyleCompaction:()Lorg/rocksdb/ColumnFamilyOptions;
       4: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeForPointLookup(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #181                // Method optimizeForPointLookup:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeForSmallDb();
    Code:
       0: aload_0
       1: invokevirtual #182                // Method optimizeForSmallDb:()Lorg/rocksdb/ColumnFamilyOptions;
       4: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setForceConsistencyChecks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #183                // Method setForceConsistencyChecks:(Z)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setOptimizeFiltersForHits(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #184                // Method setOptimizeFiltersForHits:(Z)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #185                // Method setCompactionOptionsFIFO:(Lorg/rocksdb/CompactionOptionsFIFO;)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #186                // Method setCompactionOptionsUniversal:(Lorg/rocksdb/CompactionOptionsUniversal;)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionPriority(org.rocksdb.CompactionPriority);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #187                // Method setCompactionPriority:(Lorg/rocksdb/CompactionPriority;)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setCompactionStyle(org.rocksdb.CompactionStyle);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #188                // Method setCompactionStyle:(Lorg/rocksdb/CompactionStyle;)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMaxCompactionBytes(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #189                // Method setMaxCompactionBytes:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setLevelCompactionDynamicLevelBytes(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #190                // Method setLevelCompactionDynamicLevelBytes:(Z)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setNumLevels(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #191                // Method setNumLevels:(I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompressionPerLevel(java.util.List);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #192                // Method setCompressionPerLevel:(Ljava/util/List;)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setBloomLocality(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #193                // Method setBloomLocality:(I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setInplaceUpdateSupport(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #194                // Method setInplaceUpdateSupport:(Z)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMaxWriteBufferNumberToMaintain(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #195                // Method setMaxWriteBufferNumberToMaintain:(I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMinWriteBufferNumberToMerge(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #196                // Method setMinWriteBufferNumberToMerge:(I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setCompressionType(org.rocksdb.CompressionType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #197                // Method setCompressionType:(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxBytesForLevelBase(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #198                // Method setMaxBytesForLevelBase:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxCompactionBytes(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #189                // Method setMaxCompactionBytes:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setLevel0FileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #199                // Method setLevel0FileNumCompactionTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setDisableAutoCompactions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #200                // Method setDisableAutoCompactions:(Z)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setWriteBufferSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #201                // Method setWriteBufferSize:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setReportBgIoStats(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #202                // Method setReportBgIoStats:(Z)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setParanoidFileChecks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #203                // Method setParanoidFileChecks:(Z)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxSuccessiveMerges(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #204                // Method setMaxSuccessiveMerges:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxSequentialSkipInIterations(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #205                // Method setMaxSequentialSkipInIterations:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setHardPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #206                // Method setHardPendingCompactionBytesLimit:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setSoftPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #207                // Method setSoftPendingCompactionBytesLimit:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxBytesForLevelMultiplierAdditional(int[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #208                // Method setMaxBytesForLevelMultiplierAdditional:([I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxBytesForLevelMultiplier(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #167                // Method setMaxBytesForLevelMultiplier:(D)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setTargetFileSizeMultiplier(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #209                // Method setTargetFileSizeMultiplier:(I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setTargetFileSizeBase(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #210                // Method setTargetFileSizeBase:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setLevel0StopWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #211                // Method setLevel0StopWritesTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setLevel0SlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #212                // Method setLevel0SlowdownWritesTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setArenaBlockSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #213                // Method setArenaBlockSize:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMemtableHugePageSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #214                // Method setMemtableHugePageSize:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMemtablePrefixBloomSizeRatio(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #215                // Method setMemtablePrefixBloomSizeRatio:(D)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setInplaceUpdateNumLocks(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #216                // Method setInplaceUpdateNumLocks:(J)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxWriteBufferNumber(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #217                // Method setMaxWriteBufferNumber:(I)Lorg/rocksdb/ColumnFamilyOptions;
       5: areturn

  static {};
    Code:
       0: ldc_w         #30                 // class org/rocksdb/ColumnFamilyOptions
       3: invokevirtual #218                // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #38                 // Field $assertionsDisabled:Z
      17: invokestatic  #219                // Method org/rocksdb/RocksDB.loadLibrary:()V
      20: return
}
