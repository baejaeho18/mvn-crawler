Compiled from "KafkaSpanStore.java"
final class zipkin2.storage.kafka.KafkaSpanStore$GetTraceCall extends zipkin2.storage.kafka.internal.KafkaStoreSingleKeyListCall<zipkin2.Span> {
  final org.apache.kafka.streams.KafkaStreams traceStoreStream;

  final java.util.function.BiFunction<java.lang.String, java.lang.Integer, java.lang.String> httpBaseUrl;

  final java.lang.String traceId;

  zipkin2.storage.kafka.KafkaSpanStore$GetTraceCall(org.apache.kafka.streams.KafkaStreams, java.util.function.BiFunction<java.lang.String, java.lang.Integer, java.lang.String>, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #2                  // String zipkin-traces
       4: aload_2
       5: ldc           #3                  // String /traces/%s
       7: iconst_1
       8: anewarray     #4                  // class java/lang/Object
      11: dup
      12: iconst_0
      13: aload_3
      14: aastore
      15: invokestatic  #5                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      18: aload_3
      19: invokespecial #6                  // Method zipkin2/storage/kafka/internal/KafkaStoreSingleKeyListCall."<init>":(Lorg/apache/kafka/streams/KafkaStreams;Ljava/lang/String;Ljava/util/function/BiFunction;Ljava/lang/String;Ljava/lang/String;)V
      22: aload_0
      23: aload_1
      24: putfield      #7                  // Field traceStoreStream:Lorg/apache/kafka/streams/KafkaStreams;
      27: aload_0
      28: aload_2
      29: putfield      #8                  // Field httpBaseUrl:Ljava/util/function/BiFunction;
      32: aload_0
      33: aload_3
      34: putfield      #9                  // Field traceId:Ljava/lang/String;
      37: return

  protected zipkin2.Span parseItem(com.fasterxml.jackson.databind.JsonNode) throws com.fasterxml.jackson.core.JsonProcessingException;
    Code:
       0: getstatic     #10                 // Field zipkin2/codec/SpanBytesDecoder.JSON_V2:Lzipkin2/codec/SpanBytesDecoder;
       3: getstatic     #11                 // Field zipkin2/storage/kafka/KafkaSpanStore.MAPPER:Lcom/fasterxml/jackson/databind/ObjectMapper;
       6: aload_1
       7: invokevirtual #12                 // Method com/fasterxml/jackson/databind/ObjectMapper.writeValueAsBytes:(Ljava/lang/Object;)[B
      10: invokevirtual #13                 // Method zipkin2/codec/SpanBytesDecoder.decodeOne:([B)Ljava/lang/Object;
      13: checkcast     #14                 // class zipkin2/Span
      16: areturn

  public zipkin2.Call<java.util.List<zipkin2.Span>> clone();
    Code:
       0: new           #15                 // class zipkin2/storage/kafka/KafkaSpanStore$GetTraceCall
       3: dup
       4: aload_0
       5: getfield      #7                  // Field traceStoreStream:Lorg/apache/kafka/streams/KafkaStreams;
       8: aload_0
       9: getfield      #8                  // Field httpBaseUrl:Ljava/util/function/BiFunction;
      12: aload_0
      13: getfield      #9                  // Field traceId:Ljava/lang/String;
      16: invokespecial #16                 // Method "<init>":(Lorg/apache/kafka/streams/KafkaStreams;Ljava/util/function/BiFunction;Ljava/lang/String;)V
      19: areturn

  protected java.lang.Object parseItem(com.fasterxml.jackson.databind.JsonNode) throws com.fasterxml.jackson.core.JsonProcessingException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #17                 // Method parseItem:(Lcom/fasterxml/jackson/databind/JsonNode;)Lzipkin2/Span;
       5: areturn

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method clone:()Lzipkin2/Call;
       4: areturn
}
