Compiled from "KafkaSpanConsumer.java"
class zipkin2.storage.kafka.KafkaSpanConsumer$KafkaProducerCall extends zipkin2.Call$Base<java.lang.Void> {
  final org.apache.kafka.clients.producer.Producer<java.lang.String, byte[]> kafkaProducer;

  final java.lang.String topic;

  final java.lang.String key;

  final byte[] value;

  zipkin2.storage.kafka.KafkaSpanConsumer$KafkaProducerCall(org.apache.kafka.clients.producer.Producer<java.lang.String, byte[]>, java.lang.String, java.lang.String, byte[]);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method zipkin2/Call$Base."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field kafkaProducer:Lorg/apache/kafka/clients/producer/Producer;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field topic:Ljava/lang/String;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field key:Ljava/lang/String;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field value:[B
      25: return

  static zipkin2.Call<java.lang.Void> create(org.apache.kafka.clients.producer.Producer<java.lang.String, byte[]>, java.lang.String, java.lang.String, byte[]);
    Code:
       0: new           #6                  // class zipkin2/storage/kafka/KafkaSpanConsumer$KafkaProducerCall
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_3
       8: invokespecial #7                  // Method "<init>":(Lorg/apache/kafka/clients/producer/Producer;Ljava/lang/String;Ljava/lang/String;[B)V
      11: areturn

  protected java.lang.Void doExecute();
    Code:
       0: new           #8                  // class zipkin2/storage/kafka/internal/AwaitableCallback
       3: dup
       4: invokespecial #9                  // Method zipkin2/storage/kafka/internal/AwaitableCallback."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #2                  // Field kafkaProducer:Lorg/apache/kafka/clients/producer/Producer;
      12: new           #10                 // class org/apache/kafka/clients/producer/ProducerRecord
      15: dup
      16: aload_0
      17: getfield      #3                  // Field topic:Ljava/lang/String;
      20: aload_0
      21: getfield      #4                  // Field key:Ljava/lang/String;
      24: aload_0
      25: getfield      #5                  // Field value:[B
      28: invokespecial #11                 // Method org/apache/kafka/clients/producer/ProducerRecord."<init>":(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      31: new           #12                 // class zipkin2/storage/kafka/KafkaSpanConsumer$KafkaProducerCall$CallbackAdapter
      34: dup
      35: aload_1
      36: invokespecial #13                 // Method zipkin2/storage/kafka/KafkaSpanConsumer$KafkaProducerCall$CallbackAdapter."<init>":(Lzipkin2/Callback;)V
      39: invokeinterface #14,  3           // InterfaceMethod org/apache/kafka/clients/producer/Producer.send:(Lorg/apache/kafka/clients/producer/ProducerRecord;Lorg/apache/kafka/clients/producer/Callback;)Ljava/util/concurrent/Future;
      44: pop
      45: aload_1
      46: invokevirtual #15                 // Method zipkin2/storage/kafka/internal/AwaitableCallback.await:()V
      49: aconst_null
      50: areturn

  protected void doEnqueue(zipkin2.Callback<java.lang.Void>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field kafkaProducer:Lorg/apache/kafka/clients/producer/Producer;
       4: new           #10                 // class org/apache/kafka/clients/producer/ProducerRecord
       7: dup
       8: aload_0
       9: getfield      #3                  // Field topic:Ljava/lang/String;
      12: aload_0
      13: getfield      #4                  // Field key:Ljava/lang/String;
      16: aload_0
      17: getfield      #5                  // Field value:[B
      20: invokespecial #11                 // Method org/apache/kafka/clients/producer/ProducerRecord."<init>":(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      23: new           #12                 // class zipkin2/storage/kafka/KafkaSpanConsumer$KafkaProducerCall$CallbackAdapter
      26: dup
      27: aload_1
      28: invokespecial #13                 // Method zipkin2/storage/kafka/KafkaSpanConsumer$KafkaProducerCall$CallbackAdapter."<init>":(Lzipkin2/Callback;)V
      31: invokeinterface #14,  3           // InterfaceMethod org/apache/kafka/clients/producer/Producer.send:(Lorg/apache/kafka/clients/producer/ProducerRecord;Lorg/apache/kafka/clients/producer/Callback;)Ljava/util/concurrent/Future;
      36: pop
      37: return

  public zipkin2.Call<java.lang.Void> clone();
    Code:
       0: new           #6                  // class zipkin2/storage/kafka/KafkaSpanConsumer$KafkaProducerCall
       3: dup
       4: aload_0
       5: getfield      #2                  // Field kafkaProducer:Lorg/apache/kafka/clients/producer/Producer;
       8: aload_0
       9: getfield      #3                  // Field topic:Ljava/lang/String;
      12: aload_0
      13: getfield      #4                  // Field key:Ljava/lang/String;
      16: aload_0
      17: getfield      #5                  // Field value:[B
      20: invokespecial #7                  // Method "<init>":(Lorg/apache/kafka/clients/producer/Producer;Ljava/lang/String;Ljava/lang/String;[B)V
      23: areturn

  protected java.lang.Object doExecute() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method doExecute:()Ljava/lang/Void;
       4: areturn

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method clone:()Lzipkin2/Call;
       4: areturn
}
