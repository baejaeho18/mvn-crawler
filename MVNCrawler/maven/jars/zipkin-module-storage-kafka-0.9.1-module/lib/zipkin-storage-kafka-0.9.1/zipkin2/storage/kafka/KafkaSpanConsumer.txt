Compiled from "KafkaSpanConsumer.java"
final class zipkin2.storage.kafka.KafkaSpanConsumer implements zipkin2.storage.SpanConsumer {
  final java.lang.String spansTopicName;

  final org.apache.kafka.clients.producer.Producer<java.lang.String, byte[]> producer;

  zipkin2.storage.kafka.KafkaSpanConsumer(zipkin2.storage.kafka.KafkaStorage);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #2                  // Field zipkin2/storage/kafka/KafkaStorage.partitioningSpansTopic:Ljava/lang/String;
       9: putfield      #3                  // Field spansTopicName:Ljava/lang/String;
      12: aload_0
      13: aload_1
      14: invokevirtual #4                  // Method zipkin2/storage/kafka/KafkaStorage.getProducer:()Lorg/apache/kafka/clients/producer/Producer;
      17: putfield      #5                  // Field producer:Lorg/apache/kafka/clients/producer/Producer;
      20: return

  public zipkin2.Call<java.lang.Void> accept(java.util.List<zipkin2.Span>);
    Code:
       0: aload_1
       1: invokeinterface #6,  1            // InterfaceMethod java/util/List.isEmpty:()Z
       6: ifeq          14
       9: aconst_null
      10: invokestatic  #7                  // Method zipkin2/Call.create:(Ljava/lang/Object;)Lzipkin2/Call;
      13: areturn
      14: iconst_1
      15: invokestatic  #8                  // Method zipkin2/storage/GroupByTraceId.create:(Z)Lzipkin2/Call$Mapper;
      18: aload_1
      19: invokeinterface #9,  2            // InterfaceMethod zipkin2/Call$Mapper.map:(Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #10                 // class java/util/List
      27: astore_2
      28: new           #11                 // class java/util/ArrayList
      31: dup
      32: invokespecial #12                 // Method java/util/ArrayList."<init>":()V
      35: astore_3
      36: aload_2
      37: invokeinterface #13,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      42: astore        4
      44: aload         4
      46: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      51: ifeq          127
      54: aload         4
      56: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      61: checkcast     #10                 // class java/util/List
      64: astore        5
      66: aload         5
      68: invokeinterface #6,  1            // InterfaceMethod java/util/List.isEmpty:()Z
      73: ifne          124
      76: getstatic     #16                 // Field zipkin2/codec/SpanBytesEncoder.PROTO3:Lzipkin2/codec/SpanBytesEncoder;
      79: aload         5
      81: invokevirtual #17                 // Method zipkin2/codec/SpanBytesEncoder.encodeList:(Ljava/util/List;)[B
      84: astore        6
      86: aload         5
      88: iconst_0
      89: invokeinterface #18,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      94: checkcast     #19                 // class zipkin2/Span
      97: invokevirtual #20                 // Method zipkin2/Span.traceId:()Ljava/lang/String;
     100: astore        7
     102: aload_3
     103: aload_0
     104: getfield      #5                  // Field producer:Lorg/apache/kafka/clients/producer/Producer;
     107: aload_0
     108: getfield      #3                  // Field spansTopicName:Ljava/lang/String;
     111: aload         7
     113: aload         6
     115: invokestatic  #21                 // Method zipkin2/storage/kafka/KafkaSpanConsumer$KafkaProducerCall.create:(Lorg/apache/kafka/clients/producer/Producer;Ljava/lang/String;Ljava/lang/String;[B)Lzipkin2/Call;
     118: invokeinterface #22,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     123: pop
     124: goto          44
     127: aload_3
     128: invokestatic  #23                 // Method zipkin2/internal/AggregateCall.newVoidCall:(Ljava/util/List;)Lzipkin2/Call;
     131: areturn
}
