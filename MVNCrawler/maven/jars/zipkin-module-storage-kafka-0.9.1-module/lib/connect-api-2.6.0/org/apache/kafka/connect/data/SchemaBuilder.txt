Compiled from "SchemaBuilder.java"
public class org.apache.kafka.connect.data.SchemaBuilder implements org.apache.kafka.connect.data.Schema {
  private static final java.lang.String TYPE_FIELD;

  private static final java.lang.String OPTIONAL_FIELD;

  private static final java.lang.String DEFAULT_FIELD;

  private static final java.lang.String NAME_FIELD;

  private static final java.lang.String VERSION_FIELD;

  private static final java.lang.String DOC_FIELD;

  private final org.apache.kafka.connect.data.Schema$Type type;

  private java.lang.Boolean optional;

  private java.lang.Object defaultValue;

  private java.util.Map<java.lang.String, org.apache.kafka.connect.data.Field> fields;

  private org.apache.kafka.connect.data.Schema keySchema;

  private org.apache.kafka.connect.data.Schema valueSchema;

  private java.lang.String name;

  private java.lang.Integer version;

  private java.lang.String doc;

  private java.util.Map<java.lang.String, java.lang.String> parameters;

  public org.apache.kafka.connect.data.SchemaBuilder(org.apache.kafka.connect.data.Schema$Type);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field optional:Ljava/lang/Boolean;
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field defaultValue:Ljava/lang/Object;
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field fields:Ljava/util/Map;
      19: aload_0
      20: aconst_null
      21: putfield      #5                  // Field keySchema:Lorg/apache/kafka/connect/data/Schema;
      24: aload_0
      25: aconst_null
      26: putfield      #6                  // Field valueSchema:Lorg/apache/kafka/connect/data/Schema;
      29: aconst_null
      30: aload_1
      31: if_acmpne     44
      34: new           #7                  // class org/apache/kafka/connect/errors/SchemaBuilderException
      37: dup
      38: ldc           #8                  // String type cannot be null
      40: invokespecial #9                  // Method org/apache/kafka/connect/errors/SchemaBuilderException."<init>":(Ljava/lang/String;)V
      43: athrow
      44: aload_0
      45: aload_1
      46: putfield      #10                 // Field type:Lorg/apache/kafka/connect/data/Schema$Type;
      49: aload_1
      50: getstatic     #11                 // Field org/apache/kafka/connect/data/Schema$Type.STRUCT:Lorg/apache/kafka/connect/data/Schema$Type;
      53: if_acmpne     67
      56: aload_0
      57: new           #12                 // class java/util/LinkedHashMap
      60: dup
      61: invokespecial #13                 // Method java/util/LinkedHashMap."<init>":()V
      64: putfield      #4                  // Field fields:Ljava/util/Map;
      67: return

  public boolean isOptional();
    Code:
       0: aload_0
       1: getfield      #2                  // Field optional:Ljava/lang/Boolean;
       4: ifnonnull     11
       7: iconst_0
       8: goto          18
      11: aload_0
      12: getfield      #2                  // Field optional:Ljava/lang/Boolean;
      15: invokevirtual #14                 // Method java/lang/Boolean.booleanValue:()Z
      18: ireturn

  public org.apache.kafka.connect.data.SchemaBuilder optional();
    Code:
       0: ldc           #16                 // String optional
       2: aload_0
       3: getfield      #2                  // Field optional:Ljava/lang/Boolean;
       6: iconst_1
       7: invokestatic  #17                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      10: invokestatic  #18                 // Method checkCanSet:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      13: aload_0
      14: iconst_1
      15: invokestatic  #17                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      18: putfield      #2                  // Field optional:Ljava/lang/Boolean;
      21: aload_0
      22: areturn

  public org.apache.kafka.connect.data.SchemaBuilder required();
    Code:
       0: ldc           #16                 // String optional
       2: aload_0
       3: getfield      #2                  // Field optional:Ljava/lang/Boolean;
       6: iconst_0
       7: invokestatic  #17                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      10: invokestatic  #18                 // Method checkCanSet:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      13: aload_0
      14: iconst_0
      15: invokestatic  #17                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      18: putfield      #2                  // Field optional:Ljava/lang/Boolean;
      21: aload_0
      22: areturn

  public java.lang.Object defaultValue();
    Code:
       0: aload_0
       1: getfield      #3                  // Field defaultValue:Ljava/lang/Object;
       4: areturn

  public org.apache.kafka.connect.data.SchemaBuilder defaultValue(java.lang.Object);
    Code:
       0: ldc           #19                 // String default
       2: aload_0
       3: getfield      #3                  // Field defaultValue:Ljava/lang/Object;
       6: aload_1
       7: invokestatic  #18                 // Method checkCanSet:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      10: ldc           #20                 // String type
      12: aload_0
      13: getfield      #10                 // Field type:Lorg/apache/kafka/connect/data/Schema$Type;
      16: ldc           #19                 // String default
      18: invokestatic  #21                 // Method checkNotNull:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;)V
      21: aload_0
      22: aload_1
      23: invokestatic  #22                 // Method org/apache/kafka/connect/data/ConnectSchema.validateValue:(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)V
      26: goto          41
      29: astore_2
      30: new           #7                  // class org/apache/kafka/connect/errors/SchemaBuilderException
      33: dup
      34: ldc           #24                 // String Invalid default value
      36: aload_2
      37: invokespecial #25                 // Method org/apache/kafka/connect/errors/SchemaBuilderException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      40: athrow
      41: aload_0
      42: aload_1
      43: putfield      #3                  // Field defaultValue:Ljava/lang/Object;
      46: aload_0
      47: areturn
    Exception table:
       from    to  target type
          21    26    29   Class org/apache/kafka/connect/errors/DataException

  public java.lang.String name();
    Code:
       0: aload_0
       1: getfield      #26                 // Field name:Ljava/lang/String;
       4: areturn

  public org.apache.kafka.connect.data.SchemaBuilder name(java.lang.String);
    Code:
       0: ldc           #27                 // String name
       2: aload_0
       3: getfield      #26                 // Field name:Ljava/lang/String;
       6: aload_1
       7: invokestatic  #18                 // Method checkCanSet:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      10: aload_0
      11: aload_1
      12: putfield      #26                 // Field name:Ljava/lang/String;
      15: aload_0
      16: areturn

  public java.lang.Integer version();
    Code:
       0: aload_0
       1: getfield      #28                 // Field version:Ljava/lang/Integer;
       4: areturn

  public org.apache.kafka.connect.data.SchemaBuilder version(java.lang.Integer);
    Code:
       0: ldc           #29                 // String version
       2: aload_0
       3: getfield      #28                 // Field version:Ljava/lang/Integer;
       6: aload_1
       7: invokestatic  #18                 // Method checkCanSet:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      10: aload_0
      11: aload_1
      12: putfield      #28                 // Field version:Ljava/lang/Integer;
      15: aload_0
      16: areturn

  public java.lang.String doc();
    Code:
       0: aload_0
       1: getfield      #30                 // Field doc:Ljava/lang/String;
       4: areturn

  public org.apache.kafka.connect.data.SchemaBuilder doc(java.lang.String);
    Code:
       0: ldc           #31                 // String doc
       2: aload_0
       3: getfield      #30                 // Field doc:Ljava/lang/String;
       6: aload_1
       7: invokestatic  #18                 // Method checkCanSet:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      10: aload_0
      11: aload_1
      12: putfield      #30                 // Field doc:Ljava/lang/String;
      15: aload_0
      16: areturn

  public java.util.Map<java.lang.String, java.lang.String> parameters();
    Code:
       0: aload_0
       1: getfield      #32                 // Field parameters:Ljava/util/Map;
       4: ifnonnull     11
       7: aconst_null
       8: goto          18
      11: aload_0
      12: getfield      #32                 // Field parameters:Ljava/util/Map;
      15: invokestatic  #33                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
      18: areturn

  public org.apache.kafka.connect.data.SchemaBuilder parameter(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #32                 // Field parameters:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #12                 // class java/util/LinkedHashMap
      11: dup
      12: invokespecial #13                 // Method java/util/LinkedHashMap."<init>":()V
      15: putfield      #32                 // Field parameters:Ljava/util/Map;
      18: aload_0
      19: getfield      #32                 // Field parameters:Ljava/util/Map;
      22: aload_1
      23: aload_2
      24: invokeinterface #34,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      29: pop
      30: aload_0
      31: areturn

  public org.apache.kafka.connect.data.SchemaBuilder parameters(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_1
       1: invokeinterface #35,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
       6: ifeq          11
       9: aload_0
      10: areturn
      11: aload_0
      12: getfield      #32                 // Field parameters:Ljava/util/Map;
      15: ifnonnull     29
      18: aload_0
      19: new           #12                 // class java/util/LinkedHashMap
      22: dup
      23: invokespecial #13                 // Method java/util/LinkedHashMap."<init>":()V
      26: putfield      #32                 // Field parameters:Ljava/util/Map;
      29: aload_0
      30: getfield      #32                 // Field parameters:Ljava/util/Map;
      33: aload_1
      34: invokeinterface #36,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      39: aload_0
      40: areturn

  public org.apache.kafka.connect.data.Schema$Type type();
    Code:
       0: aload_0
       1: getfield      #10                 // Field type:Lorg/apache/kafka/connect/data/Schema$Type;
       4: areturn

  public static org.apache.kafka.connect.data.SchemaBuilder type(org.apache.kafka.connect.data.Schema$Type);
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: aload_0
       5: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
       8: areturn

  public static org.apache.kafka.connect.data.SchemaBuilder int8();
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: getstatic     #38                 // Field org/apache/kafka/connect/data/Schema$Type.INT8:Lorg/apache/kafka/connect/data/Schema$Type;
       7: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      10: areturn

  public static org.apache.kafka.connect.data.SchemaBuilder int16();
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: getstatic     #39                 // Field org/apache/kafka/connect/data/Schema$Type.INT16:Lorg/apache/kafka/connect/data/Schema$Type;
       7: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      10: areturn

  public static org.apache.kafka.connect.data.SchemaBuilder int32();
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: getstatic     #40                 // Field org/apache/kafka/connect/data/Schema$Type.INT32:Lorg/apache/kafka/connect/data/Schema$Type;
       7: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      10: areturn

  public static org.apache.kafka.connect.data.SchemaBuilder int64();
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: getstatic     #41                 // Field org/apache/kafka/connect/data/Schema$Type.INT64:Lorg/apache/kafka/connect/data/Schema$Type;
       7: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      10: areturn

  public static org.apache.kafka.connect.data.SchemaBuilder float32();
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: getstatic     #42                 // Field org/apache/kafka/connect/data/Schema$Type.FLOAT32:Lorg/apache/kafka/connect/data/Schema$Type;
       7: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      10: areturn

  public static org.apache.kafka.connect.data.SchemaBuilder float64();
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: getstatic     #43                 // Field org/apache/kafka/connect/data/Schema$Type.FLOAT64:Lorg/apache/kafka/connect/data/Schema$Type;
       7: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      10: areturn

  public static org.apache.kafka.connect.data.SchemaBuilder bool();
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: getstatic     #44                 // Field org/apache/kafka/connect/data/Schema$Type.BOOLEAN:Lorg/apache/kafka/connect/data/Schema$Type;
       7: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      10: areturn

  public static org.apache.kafka.connect.data.SchemaBuilder string();
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: getstatic     #45                 // Field org/apache/kafka/connect/data/Schema$Type.STRING:Lorg/apache/kafka/connect/data/Schema$Type;
       7: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      10: areturn

  public static org.apache.kafka.connect.data.SchemaBuilder bytes();
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: getstatic     #46                 // Field org/apache/kafka/connect/data/Schema$Type.BYTES:Lorg/apache/kafka/connect/data/Schema$Type;
       7: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      10: areturn

  public static org.apache.kafka.connect.data.SchemaBuilder struct();
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: getstatic     #11                 // Field org/apache/kafka/connect/data/Schema$Type.STRUCT:Lorg/apache/kafka/connect/data/Schema$Type;
       7: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      10: areturn

  public org.apache.kafka.connect.data.SchemaBuilder field(java.lang.String, org.apache.kafka.connect.data.Schema);
    Code:
       0: aload_0
       1: getfield      #10                 // Field type:Lorg/apache/kafka/connect/data/Schema$Type;
       4: getstatic     #11                 // Field org/apache/kafka/connect/data/Schema$Type.STRUCT:Lorg/apache/kafka/connect/data/Schema$Type;
       7: if_acmpeq     40
      10: new           #7                  // class org/apache/kafka/connect/errors/SchemaBuilderException
      13: dup
      14: new           #47                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #49                 // String Cannot create fields on type
      23: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: getfield      #10                 // Field type:Lorg/apache/kafka/connect/data/Schema$Type;
      30: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      33: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #9                  // Method org/apache/kafka/connect/errors/SchemaBuilderException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aconst_null
      41: aload_1
      42: if_acmpeq     52
      45: aload_1
      46: invokevirtual #53                 // Method java/lang/String.isEmpty:()Z
      49: ifeq          62
      52: new           #7                  // class org/apache/kafka/connect/errors/SchemaBuilderException
      55: dup
      56: ldc           #54                 // String fieldName cannot be null.
      58: invokespecial #9                  // Method org/apache/kafka/connect/errors/SchemaBuilderException."<init>":(Ljava/lang/String;)V
      61: athrow
      62: aconst_null
      63: aload_2
      64: if_acmpne     99
      67: new           #7                  // class org/apache/kafka/connect/errors/SchemaBuilderException
      70: dup
      71: new           #47                 // class java/lang/StringBuilder
      74: dup
      75: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
      78: ldc           #55                 // String fieldSchema for field
      80: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: aload_1
      84: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: ldc           #56                 // String  cannot be null.
      89: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      92: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      95: invokespecial #9                  // Method org/apache/kafka/connect/errors/SchemaBuilderException."<init>":(Ljava/lang/String;)V
      98: athrow
      99: aload_0
     100: getfield      #4                  // Field fields:Ljava/util/Map;
     103: invokeinterface #57,  1           // InterfaceMethod java/util/Map.size:()I
     108: istore_3
     109: aload_0
     110: getfield      #4                  // Field fields:Ljava/util/Map;
     113: aload_1
     114: invokeinterface #58,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
     119: ifeq          149
     122: new           #7                  // class org/apache/kafka/connect/errors/SchemaBuilderException
     125: dup
     126: new           #47                 // class java/lang/StringBuilder
     129: dup
     130: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
     133: ldc           #59                 // String Cannot create field because of field name duplication
     135: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     138: aload_1
     139: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     142: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     145: invokespecial #9                  // Method org/apache/kafka/connect/errors/SchemaBuilderException."<init>":(Ljava/lang/String;)V
     148: athrow
     149: aload_0
     150: getfield      #4                  // Field fields:Ljava/util/Map;
     153: aload_1
     154: new           #60                 // class org/apache/kafka/connect/data/Field
     157: dup
     158: aload_1
     159: iload_3
     160: aload_2
     161: invokespecial #61                 // Method org/apache/kafka/connect/data/Field."<init>":(Ljava/lang/String;ILorg/apache/kafka/connect/data/Schema;)V
     164: invokeinterface #34,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     169: pop
     170: aload_0
     171: areturn

  public java.util.List<org.apache.kafka.connect.data.Field> fields();
    Code:
       0: aload_0
       1: getfield      #10                 // Field type:Lorg/apache/kafka/connect/data/Schema$Type;
       4: getstatic     #11                 // Field org/apache/kafka/connect/data/Schema$Type.STRUCT:Lorg/apache/kafka/connect/data/Schema$Type;
       7: if_acmpeq     20
      10: new           #23                 // class org/apache/kafka/connect/errors/DataException
      13: dup
      14: ldc           #62                 // String Cannot list fields on non-struct type
      16: invokespecial #63                 // Method org/apache/kafka/connect/errors/DataException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: new           #64                 // class java/util/ArrayList
      23: dup
      24: aload_0
      25: getfield      #4                  // Field fields:Ljava/util/Map;
      28: invokeinterface #65,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      33: invokespecial #66                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      36: areturn

  public org.apache.kafka.connect.data.Field field(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #10                 // Field type:Lorg/apache/kafka/connect/data/Schema$Type;
       4: getstatic     #11                 // Field org/apache/kafka/connect/data/Schema$Type.STRUCT:Lorg/apache/kafka/connect/data/Schema$Type;
       7: if_acmpeq     20
      10: new           #23                 // class org/apache/kafka/connect/errors/DataException
      13: dup
      14: ldc           #67                 // String Cannot look up fields on non-struct type
      16: invokespecial #63                 // Method org/apache/kafka/connect/errors/DataException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: getfield      #4                  // Field fields:Ljava/util/Map;
      24: aload_1
      25: invokeinterface #68,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #60                 // class org/apache/kafka/connect/data/Field
      33: areturn

  public static org.apache.kafka.connect.data.SchemaBuilder array(org.apache.kafka.connect.data.Schema);
    Code:
       0: aconst_null
       1: aload_0
       2: if_acmpne     15
       5: new           #7                  // class org/apache/kafka/connect/errors/SchemaBuilderException
       8: dup
       9: ldc           #69                 // String valueSchema cannot be null.
      11: invokespecial #9                  // Method org/apache/kafka/connect/errors/SchemaBuilderException."<init>":(Ljava/lang/String;)V
      14: athrow
      15: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
      18: dup
      19: getstatic     #70                 // Field org/apache/kafka/connect/data/Schema$Type.ARRAY:Lorg/apache/kafka/connect/data/Schema$Type;
      22: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      25: astore_1
      26: aload_1
      27: aload_0
      28: putfield      #6                  // Field valueSchema:Lorg/apache/kafka/connect/data/Schema;
      31: aload_1
      32: areturn

  public static org.apache.kafka.connect.data.SchemaBuilder map(org.apache.kafka.connect.data.Schema, org.apache.kafka.connect.data.Schema);
    Code:
       0: aconst_null
       1: aload_0
       2: if_acmpne     15
       5: new           #7                  // class org/apache/kafka/connect/errors/SchemaBuilderException
       8: dup
       9: ldc           #71                 // String keySchema cannot be null.
      11: invokespecial #9                  // Method org/apache/kafka/connect/errors/SchemaBuilderException."<init>":(Ljava/lang/String;)V
      14: athrow
      15: aconst_null
      16: aload_1
      17: if_acmpne     30
      20: new           #7                  // class org/apache/kafka/connect/errors/SchemaBuilderException
      23: dup
      24: ldc           #69                 // String valueSchema cannot be null.
      26: invokespecial #9                  // Method org/apache/kafka/connect/errors/SchemaBuilderException."<init>":(Ljava/lang/String;)V
      29: athrow
      30: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
      33: dup
      34: getstatic     #72                 // Field org/apache/kafka/connect/data/Schema$Type.MAP:Lorg/apache/kafka/connect/data/Schema$Type;
      37: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      40: astore_2
      41: aload_2
      42: aload_0
      43: putfield      #5                  // Field keySchema:Lorg/apache/kafka/connect/data/Schema;
      46: aload_2
      47: aload_1
      48: putfield      #6                  // Field valueSchema:Lorg/apache/kafka/connect/data/Schema;
      51: aload_2
      52: areturn

  static org.apache.kafka.connect.data.SchemaBuilder arrayOfNull();
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: getstatic     #70                 // Field org/apache/kafka/connect/data/Schema$Type.ARRAY:Lorg/apache/kafka/connect/data/Schema$Type;
       7: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      10: areturn

  static org.apache.kafka.connect.data.SchemaBuilder mapOfNull();
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: getstatic     #72                 // Field org/apache/kafka/connect/data/Schema$Type.MAP:Lorg/apache/kafka/connect/data/Schema$Type;
       7: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      10: areturn

  static org.apache.kafka.connect.data.SchemaBuilder mapWithNullKeys(org.apache.kafka.connect.data.Schema);
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: getstatic     #72                 // Field org/apache/kafka/connect/data/Schema$Type.MAP:Lorg/apache/kafka/connect/data/Schema$Type;
       7: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      10: astore_1
      11: aload_1
      12: aload_0
      13: putfield      #6                  // Field valueSchema:Lorg/apache/kafka/connect/data/Schema;
      16: aload_1
      17: areturn

  static org.apache.kafka.connect.data.SchemaBuilder mapWithNullValues(org.apache.kafka.connect.data.Schema);
    Code:
       0: new           #15                 // class org/apache/kafka/connect/data/SchemaBuilder
       3: dup
       4: getstatic     #72                 // Field org/apache/kafka/connect/data/Schema$Type.MAP:Lorg/apache/kafka/connect/data/Schema$Type;
       7: invokespecial #37                 // Method "<init>":(Lorg/apache/kafka/connect/data/Schema$Type;)V
      10: astore_1
      11: aload_1
      12: aload_0
      13: putfield      #5                  // Field keySchema:Lorg/apache/kafka/connect/data/Schema;
      16: aload_1
      17: areturn

  public org.apache.kafka.connect.data.Schema keySchema();
    Code:
       0: aload_0
       1: getfield      #5                  // Field keySchema:Lorg/apache/kafka/connect/data/Schema;
       4: areturn

  public org.apache.kafka.connect.data.Schema valueSchema();
    Code:
       0: aload_0
       1: getfield      #6                  // Field valueSchema:Lorg/apache/kafka/connect/data/Schema;
       4: areturn

  public org.apache.kafka.connect.data.Schema build();
    Code:
       0: new           #73                 // class org/apache/kafka/connect/data/ConnectSchema
       3: dup
       4: aload_0
       5: getfield      #10                 // Field type:Lorg/apache/kafka/connect/data/Schema$Type;
       8: aload_0
       9: invokevirtual #74                 // Method isOptional:()Z
      12: aload_0
      13: getfield      #3                  // Field defaultValue:Ljava/lang/Object;
      16: aload_0
      17: getfield      #26                 // Field name:Ljava/lang/String;
      20: aload_0
      21: getfield      #28                 // Field version:Ljava/lang/Integer;
      24: aload_0
      25: getfield      #30                 // Field doc:Ljava/lang/String;
      28: aload_0
      29: getfield      #32                 // Field parameters:Ljava/util/Map;
      32: ifnonnull     39
      35: aconst_null
      36: goto          46
      39: aload_0
      40: getfield      #32                 // Field parameters:Ljava/util/Map;
      43: invokestatic  #33                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
      46: aload_0
      47: getfield      #4                  // Field fields:Ljava/util/Map;
      50: ifnonnull     57
      53: aconst_null
      54: goto          76
      57: new           #64                 // class java/util/ArrayList
      60: dup
      61: aload_0
      62: getfield      #4                  // Field fields:Ljava/util/Map;
      65: invokeinterface #65,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      70: invokespecial #66                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      73: invokestatic  #75                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      76: aload_0
      77: getfield      #5                  // Field keySchema:Lorg/apache/kafka/connect/data/Schema;
      80: aload_0
      81: getfield      #6                  // Field valueSchema:Lorg/apache/kafka/connect/data/Schema;
      84: invokespecial #76                 // Method org/apache/kafka/connect/data/ConnectSchema."<init>":(Lorg/apache/kafka/connect/data/Schema$Type;ZLjava/lang/Object;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/String;Ljava/util/Map;Ljava/util/List;Lorg/apache/kafka/connect/data/Schema;Lorg/apache/kafka/connect/data/Schema;)V
      87: areturn

  public org.apache.kafka.connect.data.Schema schema();
    Code:
       0: aload_0
       1: invokevirtual #77                 // Method build:()Lorg/apache/kafka/connect/data/Schema;
       4: areturn

  private static void checkCanSet(java.lang.String, java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        41
       4: aload_1
       5: aload_2
       6: if_acmpeq     41
       9: new           #7                  // class org/apache/kafka/connect/errors/SchemaBuilderException
      12: dup
      13: new           #47                 // class java/lang/StringBuilder
      16: dup
      17: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
      20: ldc           #78                 // String Invalid SchemaBuilder call:
      22: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: aload_0
      26: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: ldc           #79                 // String  has already been set.
      31: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: invokespecial #9                  // Method org/apache/kafka/connect/errors/SchemaBuilderException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: return

  private static void checkNotNull(java.lang.String, java.lang.Object, java.lang.String);
    Code:
       0: aload_1
       1: ifnonnull     40
       4: new           #7                  // class org/apache/kafka/connect/errors/SchemaBuilderException
       7: dup
       8: new           #47                 // class java/lang/StringBuilder
      11: dup
      12: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
      15: ldc           #78                 // String Invalid SchemaBuilder call:
      17: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: aload_0
      21: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: ldc           #80                 // String  must be specified to set
      26: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_2
      30: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #9                  // Method org/apache/kafka/connect/errors/SchemaBuilderException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: return
}
