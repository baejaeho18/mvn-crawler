Compiled from "ProcessorContextImpl.java"
public class org.apache.kafka.streams.processor.internals.ProcessorContextImpl extends org.apache.kafka.streams.processor.internals.AbstractProcessorContext implements org.apache.kafka.streams.processor.internals.RecordCollector$Supplier {
  private org.apache.kafka.streams.processor.internals.StreamTask streamTask;

  private org.apache.kafka.streams.processor.internals.RecordCollector collector;

  private final org.apache.kafka.streams.processor.internals.ToInternal toInternal;

  private static final org.apache.kafka.streams.processor.To SEND_TO_ALL;

  final java.util.Map<java.lang.String, java.lang.String> storeToChangelogTopic;

  final java.util.Map<java.lang.String, org.apache.kafka.streams.state.internals.ThreadCache$DirtyEntryFlushListener> cacheNameToFlushListener;

  public org.apache.kafka.streams.processor.internals.ProcessorContextImpl(org.apache.kafka.streams.processor.TaskId, org.apache.kafka.streams.StreamsConfig, org.apache.kafka.streams.processor.internals.ProcessorStateManager, org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl, org.apache.kafka.streams.state.internals.ThreadCache);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload         4
       5: aload_3
       6: aload         5
       8: invokespecial #1                  // Method org/apache/kafka/streams/processor/internals/AbstractProcessorContext."<init>":(Lorg/apache/kafka/streams/processor/TaskId;Lorg/apache/kafka/streams/StreamsConfig;Lorg/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl;Lorg/apache/kafka/streams/processor/internals/StateManager;Lorg/apache/kafka/streams/state/internals/ThreadCache;)V
      11: aload_0
      12: new           #2                  // class org/apache/kafka/streams/processor/internals/ToInternal
      15: dup
      16: invokespecial #3                  // Method org/apache/kafka/streams/processor/internals/ToInternal."<init>":()V
      19: putfield      #4                  // Field toInternal:Lorg/apache/kafka/streams/processor/internals/ToInternal;
      22: aload_0
      23: new           #5                  // class java/util/HashMap
      26: dup
      27: invokespecial #6                  // Method java/util/HashMap."<init>":()V
      30: putfield      #7                  // Field storeToChangelogTopic:Ljava/util/Map;
      33: aload_0
      34: new           #5                  // class java/util/HashMap
      37: dup
      38: invokespecial #6                  // Method java/util/HashMap."<init>":()V
      41: putfield      #8                  // Field cacheNameToFlushListener:Ljava/util/Map;
      44: return

  public void transitionToActive(org.apache.kafka.streams.processor.internals.StreamTask, org.apache.kafka.streams.processor.internals.RecordCollector, org.apache.kafka.streams.state.internals.ThreadCache);
    Code:
       0: aload_0
       1: getfield      #9                  // Field stateManager:Lorg/apache/kafka/streams/processor/internals/StateManager;
       4: invokeinterface #10,  1           // InterfaceMethod org/apache/kafka/streams/processor/internals/StateManager.taskType:()Lorg/apache/kafka/streams/processor/internals/Task$TaskType;
       9: getstatic     #11                 // Field org/apache/kafka/streams/processor/internals/Task$TaskType.ACTIVE:Lorg/apache/kafka/streams/processor/internals/Task$TaskType;
      12: if_acmpeq     50
      15: new           #12                 // class java/lang/IllegalStateException
      18: dup
      19: new           #13                 // class java/lang/StringBuilder
      22: dup
      23: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      26: ldc           #15                 // String Tried to transition processor context to active but the state manager\'s type was
      28: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: aload_0
      32: getfield      #9                  // Field stateManager:Lorg/apache/kafka/streams/processor/internals/StateManager;
      35: invokeinterface #10,  1           // InterfaceMethod org/apache/kafka/streams/processor/internals/StateManager.taskType:()Lorg/apache/kafka/streams/processor/internals/Task$TaskType;
      40: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      43: invokevirtual #18                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: invokespecial #19                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      49: athrow
      50: aload_0
      51: aload_1
      52: putfield      #20                 // Field streamTask:Lorg/apache/kafka/streams/processor/internals/StreamTask;
      55: aload_0
      56: aload_2
      57: putfield      #21                 // Field collector:Lorg/apache/kafka/streams/processor/internals/RecordCollector;
      60: aload_0
      61: aload_3
      62: putfield      #22                 // Field cache:Lorg/apache/kafka/streams/state/internals/ThreadCache;
      65: aload_0
      66: invokespecial #23                 // Method addAllFlushListenersToNewCache:()V
      69: return

  public void transitionToStandby(org.apache.kafka.streams.state.internals.ThreadCache);
    Code:
       0: aload_0
       1: getfield      #9                  // Field stateManager:Lorg/apache/kafka/streams/processor/internals/StateManager;
       4: invokeinterface #10,  1           // InterfaceMethod org/apache/kafka/streams/processor/internals/StateManager.taskType:()Lorg/apache/kafka/streams/processor/internals/Task$TaskType;
       9: getstatic     #24                 // Field org/apache/kafka/streams/processor/internals/Task$TaskType.STANDBY:Lorg/apache/kafka/streams/processor/internals/Task$TaskType;
      12: if_acmpeq     50
      15: new           #12                 // class java/lang/IllegalStateException
      18: dup
      19: new           #13                 // class java/lang/StringBuilder
      22: dup
      23: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      26: ldc           #25                 // String Tried to transition processor context to standby but the state manager\'s type was
      28: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: aload_0
      32: getfield      #9                  // Field stateManager:Lorg/apache/kafka/streams/processor/internals/StateManager;
      35: invokeinterface #10,  1           // InterfaceMethod org/apache/kafka/streams/processor/internals/StateManager.taskType:()Lorg/apache/kafka/streams/processor/internals/Task$TaskType;
      40: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      43: invokevirtual #18                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: invokespecial #19                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      49: athrow
      50: aload_0
      51: aconst_null
      52: putfield      #20                 // Field streamTask:Lorg/apache/kafka/streams/processor/internals/StreamTask;
      55: aload_0
      56: aconst_null
      57: putfield      #21                 // Field collector:Lorg/apache/kafka/streams/processor/internals/RecordCollector;
      60: aload_0
      61: aload_1
      62: putfield      #22                 // Field cache:Lorg/apache/kafka/streams/state/internals/ThreadCache;
      65: aload_0
      66: invokespecial #23                 // Method addAllFlushListenersToNewCache:()V
      69: return

  public void registerCacheFlushListener(java.lang.String, org.apache.kafka.streams.state.internals.ThreadCache$DirtyEntryFlushListener);
    Code:
       0: aload_0
       1: getfield      #8                  // Field cacheNameToFlushListener:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #26,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: aload_0
      13: getfield      #22                 // Field cache:Lorg/apache/kafka/streams/state/internals/ThreadCache;
      16: aload_1
      17: aload_2
      18: invokevirtual #27                 // Method org/apache/kafka/streams/state/internals/ThreadCache.addDirtyEntryFlushListener:(Ljava/lang/String;Lorg/apache/kafka/streams/state/internals/ThreadCache$DirtyEntryFlushListener;)V
      21: return

  private void addAllFlushListenersToNewCache();
    Code:
       0: aload_0
       1: getfield      #8                  // Field cacheNameToFlushListener:Ljava/util/Map;
       4: invokeinterface #28,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       9: invokeinterface #29,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          62
      24: aload_1
      25: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #32                 // class java/util/Map$Entry
      33: astore_2
      34: aload_0
      35: getfield      #22                 // Field cache:Lorg/apache/kafka/streams/state/internals/ThreadCache;
      38: aload_2
      39: invokeinterface #33,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      44: checkcast     #34                 // class java/lang/String
      47: aload_2
      48: invokeinterface #35,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      53: checkcast     #36                 // class org/apache/kafka/streams/state/internals/ThreadCache$DirtyEntryFlushListener
      56: invokevirtual #27                 // Method org/apache/kafka/streams/state/internals/ThreadCache.addDirtyEntryFlushListener:(Ljava/lang/String;Lorg/apache/kafka/streams/state/internals/ThreadCache$DirtyEntryFlushListener;)V
      59: goto          15
      62: return

  public org.apache.kafka.streams.processor.internals.ProcessorStateManager stateManager();
    Code:
       0: aload_0
       1: getfield      #9                  // Field stateManager:Lorg/apache/kafka/streams/processor/internals/StateManager;
       4: checkcast     #37                 // class org/apache/kafka/streams/processor/internals/ProcessorStateManager
       7: areturn

  public void register(org.apache.kafka.streams.processor.StateStore, org.apache.kafka.streams.processor.StateRestoreCallback);
    Code:
       0: aload_0
       1: getfield      #7                  // Field storeToChangelogTopic:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #38,  1           // InterfaceMethod org/apache/kafka/streams/processor/StateStore.name:()Ljava/lang/String;
      10: aload_0
      11: invokevirtual #39                 // Method applicationId:()Ljava/lang/String;
      14: aload_1
      15: invokeinterface #38,  1           // InterfaceMethod org/apache/kafka/streams/processor/StateStore.name:()Ljava/lang/String;
      20: invokestatic  #40                 // Method org/apache/kafka/streams/processor/internals/ProcessorStateManager.storeChangelogTopic:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      23: invokeinterface #26,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      28: pop
      29: aload_0
      30: aload_1
      31: aload_2
      32: invokespecial #41                 // Method org/apache/kafka/streams/processor/internals/AbstractProcessorContext.register:(Lorg/apache/kafka/streams/processor/StateStore;Lorg/apache/kafka/streams/processor/StateRestoreCallback;)V
      35: return

  public org.apache.kafka.streams.processor.internals.RecordCollector recordCollector();
    Code:
       0: aload_0
       1: getfield      #21                 // Field collector:Lorg/apache/kafka/streams/processor/internals/RecordCollector;
       4: areturn

  public void logChange(java.lang.String, org.apache.kafka.common.utils.Bytes, byte[], long);
    Code:
       0: aload_0
       1: ldc           #42                 // String logChange
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_0
       7: getfield      #21                 // Field collector:Lorg/apache/kafka/streams/processor/internals/RecordCollector;
      10: aload_0
      11: getfield      #7                  // Field storeToChangelogTopic:Ljava/util/Map;
      14: aload_1
      15: invokeinterface #44,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      20: checkcast     #34                 // class java/lang/String
      23: aload_2
      24: aload_3
      25: aconst_null
      26: aload_0
      27: invokevirtual #45                 // Method taskId:()Lorg/apache/kafka/streams/processor/TaskId;
      30: getfield      #46                 // Field org/apache/kafka/streams/processor/TaskId.partition:I
      33: invokestatic  #47                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      36: lload         4
      38: invokestatic  #48                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      41: getstatic     #49                 // Field BYTES_KEY_SERIALIZER:Lorg/apache/kafka/common/serialization/BytesSerializer;
      44: getstatic     #50                 // Field BYTEARRAY_VALUE_SERIALIZER:Lorg/apache/kafka/common/serialization/ByteArraySerializer;
      47: invokeinterface #51,  9           // InterfaceMethod org/apache/kafka/streams/processor/internals/RecordCollector.send:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/kafka/common/header/Headers;Ljava/lang/Integer;Ljava/lang/Long;Lorg/apache/kafka/common/serialization/Serializer;Lorg/apache/kafka/common/serialization/Serializer;)V
      52: return

  public org.apache.kafka.streams.processor.StateStore getStateStore(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #52                 // String getStateStore
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #53                 // Method currentNode:()Lorg/apache/kafka/streams/processor/internals/ProcessorNode;
      10: ifnonnull     23
      13: new           #54                 // class org/apache/kafka/streams/errors/StreamsException
      16: dup
      17: ldc           #55                 // String Accessing from an unknown node
      19: invokespecial #56                 // Method org/apache/kafka/streams/errors/StreamsException."<init>":(Ljava/lang/String;)V
      22: athrow
      23: aload_0
      24: getfield      #9                  // Field stateManager:Lorg/apache/kafka/streams/processor/internals/StateManager;
      27: aload_1
      28: invokeinterface #57,  2           // InterfaceMethod org/apache/kafka/streams/processor/internals/StateManager.getGlobalStore:(Ljava/lang/String;)Lorg/apache/kafka/streams/processor/StateStore;
      33: astore_2
      34: aload_2
      35: ifnull        43
      38: aload_2
      39: invokestatic  #58                 // Method org/apache/kafka/streams/processor/internals/AbstractReadOnlyDecorator.getReadOnlyStore:(Lorg/apache/kafka/streams/processor/StateStore;)Lorg/apache/kafka/streams/processor/StateStore;
      42: areturn
      43: aload_0
      44: invokevirtual #53                 // Method currentNode:()Lorg/apache/kafka/streams/processor/internals/ProcessorNode;
      47: getfield      #59                 // Field org/apache/kafka/streams/processor/internals/ProcessorNode.stateStores:Ljava/util/Set;
      50: aload_1
      51: invokeinterface #60,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      56: ifne          106
      59: new           #54                 // class org/apache/kafka/streams/errors/StreamsException
      62: dup
      63: new           #13                 // class java/lang/StringBuilder
      66: dup
      67: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      70: ldc           #61                 // String Processor
      72: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      75: aload_0
      76: invokevirtual #53                 // Method currentNode:()Lorg/apache/kafka/streams/processor/internals/ProcessorNode;
      79: invokevirtual #62                 // Method org/apache/kafka/streams/processor/internals/ProcessorNode.name:()Ljava/lang/String;
      82: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: ldc           #63                 // String  has no access to StateStore
      87: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      90: aload_1
      91: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      94: ldc           #64                 // String  as the store is not connected to the processor. If you add stores manually via \'.addStateStore()\' make sure to connect the added store to the processor by providing the processor name to \'.addStateStore()\' or connect them via \'.connectProcessorAndStateStores()\'. DSL users need to provide the store name to \'.process()\', \'.transform()\', or \'.transformValues()\' to connect the store to the corresponding operator, or they can provide a StoreBuilder by implementing the stores() method on the Supplier itself. If you do not add stores manually, please file a bug report at https://issues.apache.org/jira/projects/KAFKA.
      96: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      99: invokevirtual #18                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     102: invokespecial #56                 // Method org/apache/kafka/streams/errors/StreamsException."<init>":(Ljava/lang/String;)V
     105: athrow
     106: aload_0
     107: getfield      #9                  // Field stateManager:Lorg/apache/kafka/streams/processor/internals/StateManager;
     110: aload_1
     111: invokeinterface #65,  2           // InterfaceMethod org/apache/kafka/streams/processor/internals/StateManager.getStore:(Ljava/lang/String;)Lorg/apache/kafka/streams/processor/StateStore;
     116: astore_3
     117: aload_3
     118: invokestatic  #66                 // Method org/apache/kafka/streams/processor/internals/AbstractReadWriteDecorator.getReadWriteStore:(Lorg/apache/kafka/streams/processor/StateStore;)Lorg/apache/kafka/streams/processor/StateStore;
     121: areturn

  public <K, V> void forward(K, V);
    Code:
       0: aload_0
       1: ldc           #67                 // String forward
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: aload_2
       9: getstatic     #68                 // Field SEND_TO_ALL:Lorg/apache/kafka/streams/processor/To;
      12: invokevirtual #69                 // Method forward:(Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/kafka/streams/processor/To;)V
      15: return

  public <K, V> void forward(K, V, int);
    Code:
       0: aload_0
       1: ldc           #67                 // String forward
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: aload_2
       9: aload_0
      10: invokevirtual #53                 // Method currentNode:()Lorg/apache/kafka/streams/processor/internals/ProcessorNode;
      13: invokevirtual #70                 // Method org/apache/kafka/streams/processor/internals/ProcessorNode.children:()Ljava/util/List;
      16: iload_3
      17: invokeinterface #71,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      22: checkcast     #72                 // class org/apache/kafka/streams/processor/internals/ProcessorNode
      25: invokevirtual #62                 // Method org/apache/kafka/streams/processor/internals/ProcessorNode.name:()Ljava/lang/String;
      28: invokestatic  #73                 // Method org/apache/kafka/streams/processor/To.child:(Ljava/lang/String;)Lorg/apache/kafka/streams/processor/To;
      31: invokevirtual #69                 // Method forward:(Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/kafka/streams/processor/To;)V
      34: return

  public <K, V> void forward(K, V, java.lang.String);
    Code:
       0: aload_0
       1: ldc           #67                 // String forward
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: aload_2
       9: aload_3
      10: invokestatic  #73                 // Method org/apache/kafka/streams/processor/To.child:(Ljava/lang/String;)Lorg/apache/kafka/streams/processor/To;
      13: invokevirtual #69                 // Method forward:(Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/kafka/streams/processor/To;)V
      16: return

  public <K, V> void forward(K, V, org.apache.kafka.streams.processor.To);
    Code:
       0: aload_0
       1: ldc           #67                 // String forward
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #53                 // Method currentNode:()Lorg/apache/kafka/streams/processor/internals/ProcessorNode;
      10: astore        4
      12: aload_0
      13: getfield      #74                 // Field recordContext:Lorg/apache/kafka/streams/processor/internals/ProcessorRecordContext;
      16: astore        5
      18: aload_0
      19: getfield      #4                  // Field toInternal:Lorg/apache/kafka/streams/processor/internals/ToInternal;
      22: aload_3
      23: invokevirtual #75                 // Method org/apache/kafka/streams/processor/internals/ToInternal.update:(Lorg/apache/kafka/streams/processor/To;)V
      26: aload_0
      27: getfield      #4                  // Field toInternal:Lorg/apache/kafka/streams/processor/internals/ToInternal;
      30: invokevirtual #76                 // Method org/apache/kafka/streams/processor/internals/ToInternal.hasTimestamp:()Z
      33: ifeq          82
      36: aload_0
      37: new           #77                 // class org/apache/kafka/streams/processor/internals/ProcessorRecordContext
      40: dup
      41: aload_0
      42: getfield      #4                  // Field toInternal:Lorg/apache/kafka/streams/processor/internals/ToInternal;
      45: invokevirtual #78                 // Method org/apache/kafka/streams/processor/internals/ToInternal.timestamp:()J
      48: aload_0
      49: getfield      #74                 // Field recordContext:Lorg/apache/kafka/streams/processor/internals/ProcessorRecordContext;
      52: invokevirtual #79                 // Method org/apache/kafka/streams/processor/internals/ProcessorRecordContext.offset:()J
      55: aload_0
      56: getfield      #74                 // Field recordContext:Lorg/apache/kafka/streams/processor/internals/ProcessorRecordContext;
      59: invokevirtual #80                 // Method org/apache/kafka/streams/processor/internals/ProcessorRecordContext.partition:()I
      62: aload_0
      63: getfield      #74                 // Field recordContext:Lorg/apache/kafka/streams/processor/internals/ProcessorRecordContext;
      66: invokevirtual #81                 // Method org/apache/kafka/streams/processor/internals/ProcessorRecordContext.topic:()Ljava/lang/String;
      69: aload_0
      70: getfield      #74                 // Field recordContext:Lorg/apache/kafka/streams/processor/internals/ProcessorRecordContext;
      73: invokevirtual #82                 // Method org/apache/kafka/streams/processor/internals/ProcessorRecordContext.headers:()Lorg/apache/kafka/common/header/Headers;
      76: invokespecial #83                 // Method org/apache/kafka/streams/processor/internals/ProcessorRecordContext."<init>":(JJILjava/lang/String;Lorg/apache/kafka/common/header/Headers;)V
      79: putfield      #74                 // Field recordContext:Lorg/apache/kafka/streams/processor/internals/ProcessorRecordContext;
      82: aload_0
      83: getfield      #4                  // Field toInternal:Lorg/apache/kafka/streams/processor/internals/ToInternal;
      86: invokevirtual #84                 // Method org/apache/kafka/streams/processor/internals/ToInternal.child:()Ljava/lang/String;
      89: astore        6
      91: aload         6
      93: ifnonnull     150
      96: aload_0
      97: invokevirtual #53                 // Method currentNode:()Lorg/apache/kafka/streams/processor/internals/ProcessorNode;
     100: invokevirtual #70                 // Method org/apache/kafka/streams/processor/internals/ProcessorNode.children:()Ljava/util/List;
     103: astore        7
     105: aload         7
     107: invokeinterface #85,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     112: astore        8
     114: aload         8
     116: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     121: ifeq          147
     124: aload         8
     126: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     131: checkcast     #72                 // class org/apache/kafka/streams/processor/internals/ProcessorNode
     134: astore        9
     136: aload_0
     137: aload         9
     139: aload_1
     140: aload_2
     141: invokespecial #86                 // Method forward:(Lorg/apache/kafka/streams/processor/internals/ProcessorNode;Ljava/lang/Object;Ljava/lang/Object;)V
     144: goto          114
     147: goto          207
     150: aload_0
     151: invokevirtual #53                 // Method currentNode:()Lorg/apache/kafka/streams/processor/internals/ProcessorNode;
     154: aload         6
     156: invokevirtual #87                 // Method org/apache/kafka/streams/processor/internals/ProcessorNode.getChild:(Ljava/lang/String;)Lorg/apache/kafka/streams/processor/internals/ProcessorNode;
     159: astore        7
     161: aload         7
     163: ifnonnull     199
     166: new           #54                 // class org/apache/kafka/streams/errors/StreamsException
     169: dup
     170: new           #13                 // class java/lang/StringBuilder
     173: dup
     174: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
     177: ldc           #88                 // String Unknown downstream node:
     179: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     182: aload         6
     184: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     187: ldc           #89                 // String  either does not exist or is not connected to this processor.
     189: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     192: invokevirtual #18                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     195: invokespecial #56                 // Method org/apache/kafka/streams/errors/StreamsException."<init>":(Ljava/lang/String;)V
     198: athrow
     199: aload_0
     200: aload         7
     202: aload_1
     203: aload_2
     204: invokespecial #86                 // Method forward:(Lorg/apache/kafka/streams/processor/internals/ProcessorNode;Ljava/lang/Object;Ljava/lang/Object;)V
     207: aload_0
     208: aload         5
     210: putfield      #74                 // Field recordContext:Lorg/apache/kafka/streams/processor/internals/ProcessorRecordContext;
     213: aload_0
     214: aload         4
     216: invokevirtual #90                 // Method setCurrentNode:(Lorg/apache/kafka/streams/processor/internals/ProcessorNode;)V
     219: goto          239
     222: astore        10
     224: aload_0
     225: aload         5
     227: putfield      #74                 // Field recordContext:Lorg/apache/kafka/streams/processor/internals/ProcessorRecordContext;
     230: aload_0
     231: aload         4
     233: invokevirtual #90                 // Method setCurrentNode:(Lorg/apache/kafka/streams/processor/internals/ProcessorNode;)V
     236: aload         10
     238: athrow
     239: return
    Exception table:
       from    to  target type
          18   207   222   any
         222   224   222   any

  private <K, V> void forward(org.apache.kafka.streams.processor.internals.ProcessorNode<K, V>, K, V);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #90                 // Method setCurrentNode:(Lorg/apache/kafka/streams/processor/internals/ProcessorNode;)V
       5: aload_1
       6: aload_2
       7: aload_3
       8: invokevirtual #91                 // Method org/apache/kafka/streams/processor/internals/ProcessorNode.process:(Ljava/lang/Object;Ljava/lang/Object;)V
      11: aload_1
      12: invokevirtual #92                 // Method org/apache/kafka/streams/processor/internals/ProcessorNode.isTerminalNode:()Z
      15: ifeq          37
      18: aload_0
      19: getfield      #20                 // Field streamTask:Lorg/apache/kafka/streams/processor/internals/StreamTask;
      22: aload_0
      23: invokevirtual #93                 // Method timestamp:()J
      26: aload_0
      27: invokevirtual #94                 // Method currentSystemTimeMs:()J
      30: aload_1
      31: invokevirtual #62                 // Method org/apache/kafka/streams/processor/internals/ProcessorNode.name:()Ljava/lang/String;
      34: invokevirtual #95                 // Method org/apache/kafka/streams/processor/internals/StreamTask.maybeRecordE2ELatency:(JJLjava/lang/String;)V
      37: return

  public void commit();
    Code:
       0: aload_0
       1: ldc           #96                 // String commit
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_0
       7: getfield      #20                 // Field streamTask:Lorg/apache/kafka/streams/processor/internals/StreamTask;
      10: invokevirtual #97                 // Method org/apache/kafka/streams/processor/internals/StreamTask.requestCommit:()V
      13: return

  public org.apache.kafka.streams.processor.Cancellable schedule(long, org.apache.kafka.streams.processor.PunctuationType, org.apache.kafka.streams.processor.Punctuator);
    Code:
       0: aload_0
       1: ldc           #98                 // String schedule
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: lload_1
       7: lconst_1
       8: lcmp
       9: ifge          22
      12: new           #99                 // class java/lang/IllegalArgumentException
      15: dup
      16: ldc           #100                // String The minimum supported scheduling interval is 1 millisecond.
      18: invokespecial #101                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      21: athrow
      22: aload_0
      23: getfield      #20                 // Field streamTask:Lorg/apache/kafka/streams/processor/internals/StreamTask;
      26: lload_1
      27: aload_3
      28: aload         4
      30: invokevirtual #102                // Method org/apache/kafka/streams/processor/internals/StreamTask.schedule:(JLorg/apache/kafka/streams/processor/PunctuationType;Lorg/apache/kafka/streams/processor/Punctuator;)Lorg/apache/kafka/streams/processor/Cancellable;
      33: areturn

  public org.apache.kafka.streams.processor.Cancellable schedule(java.time.Duration, org.apache.kafka.streams.processor.PunctuationType, org.apache.kafka.streams.processor.Punctuator) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: ldc           #98                 // String schedule
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_1
       7: ldc           #103                // String interval
       9: invokestatic  #104                // Method org/apache/kafka/streams/internals/ApiUtils.prepareMillisCheckFailMsgPrefix:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;
      12: astore        4
      14: aload_0
      15: aload_1
      16: aload         4
      18: invokestatic  #105                // Method org/apache/kafka/streams/internals/ApiUtils.validateMillisecondDuration:(Ljava/time/Duration;Ljava/lang/String;)J
      21: aload_2
      22: aload_3
      23: invokevirtual #106                // Method schedule:(JLorg/apache/kafka/streams/processor/PunctuationType;Lorg/apache/kafka/streams/processor/Punctuator;)Lorg/apache/kafka/streams/processor/Cancellable;
      26: areturn

  public java.lang.String topic();
    Code:
       0: aload_0
       1: ldc           #107                // String topic
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_0
       7: invokespecial #108                // Method org/apache/kafka/streams/processor/internals/AbstractProcessorContext.topic:()Ljava/lang/String;
      10: areturn

  public int partition();
    Code:
       0: aload_0
       1: ldc           #109                // String partition
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_0
       7: invokespecial #110                // Method org/apache/kafka/streams/processor/internals/AbstractProcessorContext.partition:()I
      10: ireturn

  public long offset();
    Code:
       0: aload_0
       1: ldc           #111                // String offset
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_0
       7: invokespecial #112                // Method org/apache/kafka/streams/processor/internals/AbstractProcessorContext.offset:()J
      10: lreturn

  public long timestamp();
    Code:
       0: aload_0
       1: ldc           #113                // String timestamp
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_0
       7: invokespecial #114                // Method org/apache/kafka/streams/processor/internals/AbstractProcessorContext.timestamp:()J
      10: lreturn

  public org.apache.kafka.streams.processor.internals.ProcessorNode<?, ?> currentNode();
    Code:
       0: aload_0
       1: ldc           #115                // String currentNode
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_0
       7: invokespecial #116                // Method org/apache/kafka/streams/processor/internals/AbstractProcessorContext.currentNode:()Lorg/apache/kafka/streams/processor/internals/ProcessorNode;
      10: areturn

  public void setRecordContext(org.apache.kafka.streams.processor.internals.ProcessorRecordContext);
    Code:
       0: aload_0
       1: ldc           #117                // String setRecordContext
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokespecial #118                // Method org/apache/kafka/streams/processor/internals/AbstractProcessorContext.setRecordContext:(Lorg/apache/kafka/streams/processor/internals/ProcessorRecordContext;)V
      11: return

  public org.apache.kafka.streams.processor.internals.ProcessorRecordContext recordContext();
    Code:
       0: aload_0
       1: ldc           #119                // String recordContext
       3: invokespecial #43                 // Method throwUnsupportedOperationExceptionIfStandby:(Ljava/lang/String;)V
       6: aload_0
       7: invokespecial #120                // Method org/apache/kafka/streams/processor/internals/AbstractProcessorContext.recordContext:()Lorg/apache/kafka/streams/processor/internals/ProcessorRecordContext;
      10: areturn

  private void throwUnsupportedOperationExceptionIfStandby(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #121                // Method taskType:()Lorg/apache/kafka/streams/processor/internals/Task$TaskType;
       4: getstatic     #24                 // Field org/apache/kafka/streams/processor/internals/Task$TaskType.STANDBY:Lorg/apache/kafka/streams/processor/internals/Task$TaskType;
       7: if_acmpne     42
      10: new           #122                // class java/lang/UnsupportedOperationException
      13: dup
      14: new           #13                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #123                // String this should not happen:
      23: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_1
      27: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: ldc           #124                // String () is not supported in standby tasks.
      32: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: invokevirtual #18                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      38: invokespecial #125                // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: return

  static {};
    Code:
       0: invokestatic  #126                // Method org/apache/kafka/streams/processor/To.all:()Lorg/apache/kafka/streams/processor/To;
       3: putstatic     #68                 // Field SEND_TO_ALL:Lorg/apache/kafka/streams/processor/To;
       6: return
}
