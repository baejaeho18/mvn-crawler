Compiled from "AbstractStream.java"
public abstract class org.apache.kafka.streams.kstream.internals.AbstractStream<K, V> {
  protected final java.lang.String name;

  protected final org.apache.kafka.common.serialization.Serde<K> keySerde;

  protected final org.apache.kafka.common.serialization.Serde<V> valSerde;

  protected final java.util.Set<java.lang.String> subTopologySourceNodes;

  protected final org.apache.kafka.streams.kstream.internals.graph.StreamsGraphNode streamsGraphNode;

  protected final org.apache.kafka.streams.kstream.internals.InternalStreamsBuilder builder;

  public org.apache.kafka.streams.kstream.internals.AbstractStream(org.apache.kafka.streams.kstream.internals.AbstractStream<K, V>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #2                  // Field name:Ljava/lang/String;
       9: putfield      #2                  // Field name:Ljava/lang/String;
      12: aload_0
      13: aload_1
      14: getfield      #3                  // Field builder:Lorg/apache/kafka/streams/kstream/internals/InternalStreamsBuilder;
      17: putfield      #3                  // Field builder:Lorg/apache/kafka/streams/kstream/internals/InternalStreamsBuilder;
      20: aload_0
      21: aload_1
      22: getfield      #4                  // Field keySerde:Lorg/apache/kafka/common/serialization/Serde;
      25: putfield      #4                  // Field keySerde:Lorg/apache/kafka/common/serialization/Serde;
      28: aload_0
      29: aload_1
      30: getfield      #5                  // Field valSerde:Lorg/apache/kafka/common/serialization/Serde;
      33: putfield      #5                  // Field valSerde:Lorg/apache/kafka/common/serialization/Serde;
      36: aload_0
      37: aload_1
      38: getfield      #6                  // Field subTopologySourceNodes:Ljava/util/Set;
      41: putfield      #6                  // Field subTopologySourceNodes:Ljava/util/Set;
      44: aload_0
      45: aload_1
      46: getfield      #7                  // Field streamsGraphNode:Lorg/apache/kafka/streams/kstream/internals/graph/StreamsGraphNode;
      49: putfield      #7                  // Field streamsGraphNode:Lorg/apache/kafka/streams/kstream/internals/graph/StreamsGraphNode;
      52: return

  org.apache.kafka.streams.kstream.internals.AbstractStream(java.lang.String, org.apache.kafka.common.serialization.Serde<K>, org.apache.kafka.common.serialization.Serde<V>, java.util.Set<java.lang.String>, org.apache.kafka.streams.kstream.internals.graph.StreamsGraphNode, org.apache.kafka.streams.kstream.internals.InternalStreamsBuilder);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload         4
       6: ifnull        19
       9: aload         4
      11: invokeinterface #8,  1            // InterfaceMethod java/util/Set.isEmpty:()Z
      16: ifeq          29
      19: new           #9                  // class java/lang/IllegalArgumentException
      22: dup
      23: ldc           #10                 // String parameter <sourceNodes> must not be null or empty
      25: invokespecial #11                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: aload_0
      30: aload_1
      31: putfield      #2                  // Field name:Ljava/lang/String;
      34: aload_0
      35: aload         6
      37: putfield      #3                  // Field builder:Lorg/apache/kafka/streams/kstream/internals/InternalStreamsBuilder;
      40: aload_0
      41: aload_2
      42: putfield      #4                  // Field keySerde:Lorg/apache/kafka/common/serialization/Serde;
      45: aload_0
      46: aload_3
      47: putfield      #5                  // Field valSerde:Lorg/apache/kafka/common/serialization/Serde;
      50: aload_0
      51: aload         4
      53: putfield      #6                  // Field subTopologySourceNodes:Ljava/util/Set;
      56: aload_0
      57: aload         5
      59: putfield      #7                  // Field streamsGraphNode:Lorg/apache/kafka/streams/kstream/internals/graph/StreamsGraphNode;
      62: return

  protected org.apache.kafka.streams.processor.internals.InternalTopologyBuilder internalTopologyBuilder();
    Code:
       0: aload_0
       1: getfield      #3                  // Field builder:Lorg/apache/kafka/streams/kstream/internals/InternalStreamsBuilder;
       4: getfield      #12                 // Field org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.internalTopologyBuilder:Lorg/apache/kafka/streams/processor/internals/InternalTopologyBuilder;
       7: areturn

  java.util.Set<java.lang.String> ensureCopartitionWith(java.util.Collection<? extends org.apache.kafka.streams.kstream.internals.AbstractStream<K, ?>>);
    Code:
       0: new           #13                 // class java/util/HashSet
       3: dup
       4: aload_0
       5: getfield      #6                  // Field subTopologySourceNodes:Ljava/util/Set;
       8: invokespecial #14                 // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      11: astore_2
      12: aload_1
      13: invokeinterface #15,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      18: astore_3
      19: aload_3
      20: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      25: ifeq          54
      28: aload_3
      29: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      34: checkcast     #18                 // class org/apache/kafka/streams/kstream/internals/AbstractStream
      37: astore        4
      39: aload_2
      40: aload         4
      42: getfield      #6                  // Field subTopologySourceNodes:Ljava/util/Set;
      45: invokeinterface #19,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      50: pop
      51: goto          19
      54: aload_0
      55: getfield      #3                  // Field builder:Lorg/apache/kafka/streams/kstream/internals/InternalStreamsBuilder;
      58: getfield      #12                 // Field org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.internalTopologyBuilder:Lorg/apache/kafka/streams/processor/internals/InternalTopologyBuilder;
      61: aload_2
      62: invokevirtual #20                 // Method org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.copartitionSources:(Ljava/util/Collection;)V
      65: aload_2
      66: areturn

  static <T2, T1, R> org.apache.kafka.streams.kstream.ValueJoiner<T2, T1, R> reverseJoiner(org.apache.kafka.streams.kstream.ValueJoiner<T1, T2, R>);
    Code:
       0: aload_0
       1: invokedynamic #21,  0             // InvokeDynamic #0:apply:(Lorg/apache/kafka/streams/kstream/ValueJoiner;)Lorg/apache/kafka/streams/kstream/ValueJoiner;
       6: areturn

  static <K, V, VR> org.apache.kafka.streams.kstream.ValueMapperWithKey<K, V, VR> withKey(org.apache.kafka.streams.kstream.ValueMapper<V, VR>);
    Code:
       0: aload_0
       1: ldc           #22                 // String valueMapper can\'t be null
       3: invokestatic  #23                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: invokedynamic #24,  0             // InvokeDynamic #1:apply:(Lorg/apache/kafka/streams/kstream/ValueMapper;)Lorg/apache/kafka/streams/kstream/ValueMapperWithKey;
      13: areturn

  static <K, V, VR> org.apache.kafka.streams.kstream.ValueTransformerWithKeySupplier<K, V, VR> toValueTransformerWithKeySupplier(org.apache.kafka.streams.kstream.ValueTransformerSupplier<V, VR>);
    Code:
       0: aload_0
       1: ldc           #25                 // String valueTransformerSupplier can\'t be null
       3: invokestatic  #23                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #26                 // class org/apache/kafka/streams/kstream/internals/AbstractStream$1
      10: dup
      11: aload_0
      12: invokespecial #27                 // Method org/apache/kafka/streams/kstream/internals/AbstractStream$1."<init>":(Lorg/apache/kafka/streams/kstream/ValueTransformerSupplier;)V
      15: areturn

  public org.apache.kafka.common.serialization.Serde<K> keySerde();
    Code:
       0: aload_0
       1: getfield      #4                  // Field keySerde:Lorg/apache/kafka/common/serialization/Serde;
       4: areturn

  public org.apache.kafka.common.serialization.Serde<V> valueSerde();
    Code:
       0: aload_0
       1: getfield      #5                  // Field valSerde:Lorg/apache/kafka/common/serialization/Serde;
       4: areturn

  private static java.lang.Object lambda$withKey$1(org.apache.kafka.streams.kstream.ValueMapper, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #28,  2           // InterfaceMethod org/apache/kafka/streams/kstream/ValueMapper.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  private static java.lang.Object lambda$reverseJoiner$0(org.apache.kafka.streams.kstream.ValueJoiner, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokeinterface #29,  3           // InterfaceMethod org/apache/kafka/streams/kstream/ValueJoiner.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn
}
