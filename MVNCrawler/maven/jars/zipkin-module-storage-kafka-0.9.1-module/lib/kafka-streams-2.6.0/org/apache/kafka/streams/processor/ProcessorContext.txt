Compiled from "ProcessorContext.java"
public interface org.apache.kafka.streams.processor.ProcessorContext {
  public abstract java.lang.String applicationId();

  public abstract org.apache.kafka.streams.processor.TaskId taskId();

  public abstract org.apache.kafka.common.serialization.Serde<?> keySerde();

  public abstract org.apache.kafka.common.serialization.Serde<?> valueSerde();

  public abstract java.io.File stateDir();

  public abstract org.apache.kafka.streams.StreamsMetrics metrics();

  public abstract void register(org.apache.kafka.streams.processor.StateStore, org.apache.kafka.streams.processor.StateRestoreCallback);

  public abstract org.apache.kafka.streams.processor.StateStore getStateStore(java.lang.String);

  public abstract org.apache.kafka.streams.processor.Cancellable schedule(long, org.apache.kafka.streams.processor.PunctuationType, org.apache.kafka.streams.processor.Punctuator);

  public abstract org.apache.kafka.streams.processor.Cancellable schedule(java.time.Duration, org.apache.kafka.streams.processor.PunctuationType, org.apache.kafka.streams.processor.Punctuator) throws java.lang.IllegalArgumentException;

  public abstract <K, V> void forward(K, V);

  public abstract <K, V> void forward(K, V, org.apache.kafka.streams.processor.To);

  public abstract <K, V> void forward(K, V, int);

  public abstract <K, V> void forward(K, V, java.lang.String);

  public abstract void commit();

  public abstract java.lang.String topic();

  public abstract int partition();

  public abstract long offset();

  public abstract org.apache.kafka.common.header.Headers headers();

  public abstract long timestamp();

  public abstract java.util.Map<java.lang.String, java.lang.Object> appConfigs();

  public abstract java.util.Map<java.lang.String, java.lang.Object> appConfigsWithPrefix(java.lang.String);
}
