Compiled from "KafkaStreams.java"
final class org.apache.kafka.streams.KafkaStreams$StreamStateListener implements org.apache.kafka.streams.processor.internals.StreamThread$StateListener {
  private final java.util.Map<java.lang.Long, org.apache.kafka.streams.processor.internals.StreamThread$State> threadState;

  private org.apache.kafka.streams.processor.internals.GlobalStreamThread$State globalThreadState;

  private final java.lang.Object threadStatesLock;

  final org.apache.kafka.streams.KafkaStreams this$0;

  org.apache.kafka.streams.KafkaStreams$StreamStateListener(java.util.Map<java.lang.Long, org.apache.kafka.streams.processor.internals.StreamThread$State>, org.apache.kafka.streams.processor.internals.GlobalStreamThread$State);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/apache/kafka/streams/KafkaStreams;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field threadState:Ljava/util/Map;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field globalThreadState:Lorg/apache/kafka/streams/processor/internals/GlobalStreamThread$State;
      19: aload_0
      20: new           #5                  // class java/lang/Object
      23: dup
      24: invokespecial #2                  // Method java/lang/Object."<init>":()V
      27: putfield      #6                  // Field threadStatesLock:Ljava/lang/Object;
      30: return

  private void maybeSetError();
    Code:
       0: aload_0
       1: getfield      #3                  // Field threadState:Ljava/util/Map;
       4: invokeinterface #7,  1            // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: invokeinterface #8,  1            // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          45
      24: aload_1
      25: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #11                 // class org/apache/kafka/streams/processor/internals/StreamThread$State
      33: astore_2
      34: aload_2
      35: getstatic     #12                 // Field org/apache/kafka/streams/processor/internals/StreamThread$State.DEAD:Lorg/apache/kafka/streams/processor/internals/StreamThread$State;
      38: if_acmpeq     42
      41: return
      42: goto          15
      45: aload_0
      46: getfield      #1                  // Field this$0:Lorg/apache/kafka/streams/KafkaStreams;
      49: getstatic     #13                 // Field org/apache/kafka/streams/KafkaStreams$State.ERROR:Lorg/apache/kafka/streams/KafkaStreams$State;
      52: invokestatic  #14                 // Method org/apache/kafka/streams/KafkaStreams.access$000:(Lorg/apache/kafka/streams/KafkaStreams;Lorg/apache/kafka/streams/KafkaStreams$State;)Z
      55: ifeq          72
      58: aload_0
      59: getfield      #1                  // Field this$0:Lorg/apache/kafka/streams/KafkaStreams;
      62: invokestatic  #15                 // Method org/apache/kafka/streams/KafkaStreams.access$100:(Lorg/apache/kafka/streams/KafkaStreams;)Lorg/slf4j/Logger;
      65: ldc           #16                 // String All stream threads have died. The instance will be in error state and should be closed.
      67: invokeinterface #17,  2           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;)V
      72: return

  private void maybeSetRunning();
    Code:
       0: aload_0
       1: getfield      #3                  // Field threadState:Ljava/util/Map;
       4: invokeinterface #7,  1            // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: invokeinterface #8,  1            // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          52
      24: aload_1
      25: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #11                 // class org/apache/kafka/streams/processor/internals/StreamThread$State
      33: astore_2
      34: aload_2
      35: getstatic     #18                 // Field org/apache/kafka/streams/processor/internals/StreamThread$State.RUNNING:Lorg/apache/kafka/streams/processor/internals/StreamThread$State;
      38: if_acmpeq     49
      41: aload_2
      42: getstatic     #12                 // Field org/apache/kafka/streams/processor/internals/StreamThread$State.DEAD:Lorg/apache/kafka/streams/processor/internals/StreamThread$State;
      45: if_acmpeq     49
      48: return
      49: goto          15
      52: aload_0
      53: getfield      #4                  // Field globalThreadState:Lorg/apache/kafka/streams/processor/internals/GlobalStreamThread$State;
      56: ifnull        70
      59: aload_0
      60: getfield      #4                  // Field globalThreadState:Lorg/apache/kafka/streams/processor/internals/GlobalStreamThread$State;
      63: getstatic     #19                 // Field org/apache/kafka/streams/processor/internals/GlobalStreamThread$State.RUNNING:Lorg/apache/kafka/streams/processor/internals/GlobalStreamThread$State;
      66: if_acmpeq     70
      69: return
      70: aload_0
      71: getfield      #1                  // Field this$0:Lorg/apache/kafka/streams/KafkaStreams;
      74: getstatic     #20                 // Field org/apache/kafka/streams/KafkaStreams$State.RUNNING:Lorg/apache/kafka/streams/KafkaStreams$State;
      77: invokestatic  #14                 // Method org/apache/kafka/streams/KafkaStreams.access$000:(Lorg/apache/kafka/streams/KafkaStreams;Lorg/apache/kafka/streams/KafkaStreams$State;)Z
      80: pop
      81: return

  public synchronized void onChange(java.lang.Thread, org.apache.kafka.streams.processor.internals.ThreadStateTransitionValidator, org.apache.kafka.streams.processor.internals.ThreadStateTransitionValidator);
    Code:
       0: aload_0
       1: getfield      #6                  // Field threadStatesLock:Ljava/lang/Object;
       4: dup
       5: astore        4
       7: monitorenter
       8: aload_1
       9: instanceof    #21                 // class org/apache/kafka/streams/processor/internals/StreamThread
      12: ifeq          100
      15: aload_2
      16: checkcast     #11                 // class org/apache/kafka/streams/processor/internals/StreamThread$State
      19: astore        5
      21: aload_0
      22: getfield      #3                  // Field threadState:Ljava/util/Map;
      25: aload_1
      26: invokevirtual #22                 // Method java/lang/Thread.getId:()J
      29: invokestatic  #23                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      32: aload         5
      34: invokeinterface #24,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      39: pop
      40: aload         5
      42: getstatic     #25                 // Field org/apache/kafka/streams/processor/internals/StreamThread$State.PARTITIONS_REVOKED:Lorg/apache/kafka/streams/processor/internals/StreamThread$State;
      45: if_acmpeq     56
      48: aload         5
      50: getstatic     #26                 // Field org/apache/kafka/streams/processor/internals/StreamThread$State.PARTITIONS_ASSIGNED:Lorg/apache/kafka/streams/processor/internals/StreamThread$State;
      53: if_acmpne     70
      56: aload_0
      57: getfield      #1                  // Field this$0:Lorg/apache/kafka/streams/KafkaStreams;
      60: getstatic     #27                 // Field org/apache/kafka/streams/KafkaStreams$State.REBALANCING:Lorg/apache/kafka/streams/KafkaStreams$State;
      63: invokestatic  #14                 // Method org/apache/kafka/streams/KafkaStreams.access$000:(Lorg/apache/kafka/streams/KafkaStreams;Lorg/apache/kafka/streams/KafkaStreams$State;)Z
      66: pop
      67: goto          97
      70: aload         5
      72: getstatic     #18                 // Field org/apache/kafka/streams/processor/internals/StreamThread$State.RUNNING:Lorg/apache/kafka/streams/processor/internals/StreamThread$State;
      75: if_acmpne     85
      78: aload_0
      79: invokespecial #28                 // Method maybeSetRunning:()V
      82: goto          97
      85: aload         5
      87: getstatic     #12                 // Field org/apache/kafka/streams/processor/internals/StreamThread$State.DEAD:Lorg/apache/kafka/streams/processor/internals/StreamThread$State;
      90: if_acmpne     97
      93: aload_0
      94: invokespecial #29                 // Method maybeSetError:()V
      97: goto          169
     100: aload_1
     101: instanceof    #30                 // class org/apache/kafka/streams/processor/internals/GlobalStreamThread
     104: ifeq          169
     107: aload_2
     108: checkcast     #31                 // class org/apache/kafka/streams/processor/internals/GlobalStreamThread$State
     111: astore        5
     113: aload_0
     114: aload         5
     116: putfield      #4                  // Field globalThreadState:Lorg/apache/kafka/streams/processor/internals/GlobalStreamThread$State;
     119: aload         5
     121: getstatic     #19                 // Field org/apache/kafka/streams/processor/internals/GlobalStreamThread$State.RUNNING:Lorg/apache/kafka/streams/processor/internals/GlobalStreamThread$State;
     124: if_acmpne     134
     127: aload_0
     128: invokespecial #28                 // Method maybeSetRunning:()V
     131: goto          169
     134: aload         5
     136: getstatic     #32                 // Field org/apache/kafka/streams/processor/internals/GlobalStreamThread$State.DEAD:Lorg/apache/kafka/streams/processor/internals/GlobalStreamThread$State;
     139: if_acmpne     169
     142: aload_0
     143: getfield      #1                  // Field this$0:Lorg/apache/kafka/streams/KafkaStreams;
     146: getstatic     #13                 // Field org/apache/kafka/streams/KafkaStreams$State.ERROR:Lorg/apache/kafka/streams/KafkaStreams$State;
     149: invokestatic  #14                 // Method org/apache/kafka/streams/KafkaStreams.access$000:(Lorg/apache/kafka/streams/KafkaStreams;Lorg/apache/kafka/streams/KafkaStreams$State;)Z
     152: ifeq          169
     155: aload_0
     156: getfield      #1                  // Field this$0:Lorg/apache/kafka/streams/KafkaStreams;
     159: invokestatic  #15                 // Method org/apache/kafka/streams/KafkaStreams.access$100:(Lorg/apache/kafka/streams/KafkaStreams;)Lorg/slf4j/Logger;
     162: ldc           #33                 // String Global thread has died. The instance will be in error state and should be closed.
     164: invokeinterface #17,  2           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;)V
     169: aload         4
     171: monitorexit
     172: goto          183
     175: astore        6
     177: aload         4
     179: monitorexit
     180: aload         6
     182: athrow
     183: return
    Exception table:
       from    to  target type
           8   172   175   any
         175   180   175   any
}
