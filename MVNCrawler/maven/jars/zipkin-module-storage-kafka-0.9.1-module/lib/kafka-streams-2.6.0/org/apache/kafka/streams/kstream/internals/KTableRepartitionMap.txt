Compiled from "KTableRepartitionMap.java"
public class org.apache.kafka.streams.kstream.internals.KTableRepartitionMap<K, V, K1, V1> implements org.apache.kafka.streams.kstream.internals.KTableProcessorSupplier<K, V, org.apache.kafka.streams.KeyValue<K1, V1>> {
  private final org.apache.kafka.streams.kstream.internals.KTableImpl<K, ?, V> parent;

  private final org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, org.apache.kafka.streams.KeyValue<K1, V1>> mapper;

  org.apache.kafka.streams.kstream.internals.KTableRepartitionMap(org.apache.kafka.streams.kstream.internals.KTableImpl<K, ?, V>, org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, org.apache.kafka.streams.KeyValue<K1, V1>>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field parent:Lorg/apache/kafka/streams/kstream/internals/KTableImpl;
       9: aload_0
      10: aload_2
      11: putfield      #1                  // Field mapper:Lorg/apache/kafka/streams/kstream/KeyValueMapper;
      14: return

  public org.apache.kafka.streams.processor.Processor<K, org.apache.kafka.streams.kstream.internals.Change<V>> get();
    Code:
       0: new           #4                  // class org/apache/kafka/streams/kstream/internals/KTableRepartitionMap$KTableMapProcessor
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #5                  // Method org/apache/kafka/streams/kstream/internals/KTableRepartitionMap$KTableMapProcessor."<init>":(Lorg/apache/kafka/streams/kstream/internals/KTableRepartitionMap;Lorg/apache/kafka/streams/kstream/internals/KTableRepartitionMap$1;)V
       9: areturn

  public org.apache.kafka.streams.kstream.internals.KTableValueGetterSupplier<K, org.apache.kafka.streams.KeyValue<K1, V1>> view();
    Code:
       0: aload_0
       1: getfield      #3                  // Field parent:Lorg/apache/kafka/streams/kstream/internals/KTableImpl;
       4: invokevirtual #6                  // Method org/apache/kafka/streams/kstream/internals/KTableImpl.valueGetterSupplier:()Lorg/apache/kafka/streams/kstream/internals/KTableValueGetterSupplier;
       7: astore_1
       8: new           #7                  // class org/apache/kafka/streams/kstream/internals/KTableRepartitionMap$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #8                  // Method org/apache/kafka/streams/kstream/internals/KTableRepartitionMap$1."<init>":(Lorg/apache/kafka/streams/kstream/internals/KTableRepartitionMap;Lorg/apache/kafka/streams/kstream/internals/KTableValueGetterSupplier;)V
      17: areturn

  public void enableSendingOldValues();
    Code:
       0: new           #9                  // class java/lang/IllegalStateException
       3: dup
       4: ldc           #10                 // String KTableRepartitionMap should always require sending old values.
       6: invokespecial #11                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: athrow

  static org.apache.kafka.streams.kstream.KeyValueMapper access$100(org.apache.kafka.streams.kstream.internals.KTableRepartitionMap);
    Code:
       0: aload_0
       1: getfield      #1                  // Field mapper:Lorg/apache/kafka/streams/kstream/KeyValueMapper;
       4: areturn
}
