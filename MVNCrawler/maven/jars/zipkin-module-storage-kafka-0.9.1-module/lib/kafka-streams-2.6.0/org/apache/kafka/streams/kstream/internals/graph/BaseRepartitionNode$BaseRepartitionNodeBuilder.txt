Compiled from "BaseRepartitionNode.java"
public abstract class org.apache.kafka.streams.kstream.internals.graph.BaseRepartitionNode$BaseRepartitionNodeBuilder<K, V, T extends org.apache.kafka.streams.kstream.internals.graph.BaseRepartitionNode<K, V>> {
  protected java.lang.String nodeName;

  protected org.apache.kafka.streams.kstream.internals.graph.ProcessorParameters<K, V> processorParameters;

  protected org.apache.kafka.common.serialization.Serde<K> keySerde;

  protected org.apache.kafka.common.serialization.Serde<V> valueSerde;

  protected java.lang.String sinkName;

  protected java.lang.String sourceName;

  protected java.lang.String repartitionTopic;

  protected org.apache.kafka.streams.processor.StreamPartitioner<K, V> partitioner;

  protected org.apache.kafka.streams.processor.internals.InternalTopicProperties internalTopicProperties;

  public org.apache.kafka.streams.kstream.internals.graph.BaseRepartitionNode$BaseRepartitionNodeBuilder();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #2                  // Method org/apache/kafka/streams/processor/internals/InternalTopicProperties.empty:()Lorg/apache/kafka/streams/processor/internals/InternalTopicProperties;
       8: putfield      #3                  // Field internalTopicProperties:Lorg/apache/kafka/streams/processor/internals/InternalTopicProperties;
      11: return

  public org.apache.kafka.streams.kstream.internals.graph.BaseRepartitionNode$BaseRepartitionNodeBuilder<K, V, T> withProcessorParameters(org.apache.kafka.streams.kstream.internals.graph.ProcessorParameters<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field processorParameters:Lorg/apache/kafka/streams/kstream/internals/graph/ProcessorParameters;
       5: aload_0
       6: areturn

  public org.apache.kafka.streams.kstream.internals.graph.BaseRepartitionNode$BaseRepartitionNodeBuilder<K, V, T> withKeySerde(org.apache.kafka.common.serialization.Serde<K>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field keySerde:Lorg/apache/kafka/common/serialization/Serde;
       5: aload_0
       6: areturn

  public org.apache.kafka.streams.kstream.internals.graph.BaseRepartitionNode$BaseRepartitionNodeBuilder<K, V, T> withValueSerde(org.apache.kafka.common.serialization.Serde<V>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field valueSerde:Lorg/apache/kafka/common/serialization/Serde;
       5: aload_0
       6: areturn

  public org.apache.kafka.streams.kstream.internals.graph.BaseRepartitionNode$BaseRepartitionNodeBuilder<K, V, T> withSinkName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field sinkName:Ljava/lang/String;
       5: aload_0
       6: areturn

  public org.apache.kafka.streams.kstream.internals.graph.BaseRepartitionNode$BaseRepartitionNodeBuilder<K, V, T> withSourceName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field sourceName:Ljava/lang/String;
       5: aload_0
       6: areturn

  public org.apache.kafka.streams.kstream.internals.graph.BaseRepartitionNode$BaseRepartitionNodeBuilder<K, V, T> withRepartitionTopic(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field repartitionTopic:Ljava/lang/String;
       5: aload_0
       6: areturn

  public org.apache.kafka.streams.kstream.internals.graph.BaseRepartitionNode$BaseRepartitionNodeBuilder<K, V, T> withStreamPartitioner(org.apache.kafka.streams.processor.StreamPartitioner<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field partitioner:Lorg/apache/kafka/streams/processor/StreamPartitioner;
       5: aload_0
       6: areturn

  public org.apache.kafka.streams.kstream.internals.graph.BaseRepartitionNode$BaseRepartitionNodeBuilder<K, V, T> withNodeName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field nodeName:Ljava/lang/String;
       5: aload_0
       6: areturn

  public org.apache.kafka.streams.kstream.internals.graph.BaseRepartitionNode$BaseRepartitionNodeBuilder<K, V, T> withInternalTopicProperties(org.apache.kafka.streams.processor.internals.InternalTopicProperties);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field internalTopicProperties:Lorg/apache/kafka/streams/processor/internals/InternalTopicProperties;
       5: aload_0
       6: areturn

  public abstract T build();
}
