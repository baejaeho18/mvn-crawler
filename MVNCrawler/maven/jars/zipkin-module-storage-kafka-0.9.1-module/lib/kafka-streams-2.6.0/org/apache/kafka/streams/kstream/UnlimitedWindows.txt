Compiled from "UnlimitedWindows.java"
public final class org.apache.kafka.streams.kstream.UnlimitedWindows extends org.apache.kafka.streams.kstream.Windows<org.apache.kafka.streams.kstream.internals.UnlimitedWindow> {
  private static final long DEFAULT_START_TIMESTAMP_MS;

  public final long startMs;

  private org.apache.kafka.streams.kstream.UnlimitedWindows(long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/kafka/streams/kstream/Windows."<init>":()V
       4: aload_0
       5: lload_1
       6: putfield      #2                  // Field startMs:J
       9: return

  public static org.apache.kafka.streams.kstream.UnlimitedWindows of();
    Code:
       0: new           #3                  // class org/apache/kafka/streams/kstream/UnlimitedWindows
       3: dup
       4: lconst_0
       5: invokespecial #4                  // Method "<init>":(J)V
       8: areturn

  public org.apache.kafka.streams.kstream.UnlimitedWindows startOn(long) throws java.lang.IllegalArgumentException;
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          16
       6: new           #5                  // class java/lang/IllegalArgumentException
       9: dup
      10: ldc           #6                  // String Window start time (startMs) cannot be negative.
      12: invokespecial #7                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: new           #3                  // class org/apache/kafka/streams/kstream/UnlimitedWindows
      19: dup
      20: lload_1
      21: invokespecial #4                  // Method "<init>":(J)V
      24: areturn

  public org.apache.kafka.streams.kstream.UnlimitedWindows startOn(java.time.Instant) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_1
       1: ldc           #8                  // String start
       3: invokestatic  #9                  // Method org/apache/kafka/streams/internals/ApiUtils.prepareMillisCheckFailMsgPrefix:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;
       6: astore_2
       7: aload_0
       8: aload_1
       9: aload_2
      10: invokestatic  #10                 // Method org/apache/kafka/streams/internals/ApiUtils.validateMillisecondInstant:(Ljava/time/Instant;Ljava/lang/String;)J
      13: invokevirtual #11                 // Method startOn:(J)Lorg/apache/kafka/streams/kstream/UnlimitedWindows;
      16: areturn

  public java.util.Map<java.lang.Long, org.apache.kafka.streams.kstream.internals.UnlimitedWindow> windowsFor(long);
    Code:
       0: new           #12                 // class java/util/HashMap
       3: dup
       4: invokespecial #13                 // Method java/util/HashMap."<init>":()V
       7: astore_3
       8: lload_1
       9: aload_0
      10: getfield      #2                  // Field startMs:J
      13: lcmp
      14: iflt          42
      17: aload_3
      18: aload_0
      19: getfield      #2                  // Field startMs:J
      22: invokestatic  #14                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      25: new           #15                 // class org/apache/kafka/streams/kstream/internals/UnlimitedWindow
      28: dup
      29: aload_0
      30: getfield      #2                  // Field startMs:J
      33: invokespecial #16                 // Method org/apache/kafka/streams/kstream/internals/UnlimitedWindow."<init>":(J)V
      36: invokeinterface #17,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      41: pop
      42: aload_3
      43: areturn

  public long size();
    Code:
       0: ldc2_w        #19                 // long 9223372036854775807l
       3: lreturn

  public org.apache.kafka.streams.kstream.UnlimitedWindows until(long);
    Code:
       0: new           #5                  // class java/lang/IllegalArgumentException
       3: dup
       4: ldc           #21                 // String Window retention time (durationMs) cannot be set for UnlimitedWindows.
       6: invokespecial #7                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
       9: athrow

  public long maintainMs();
    Code:
       0: ldc2_w        #19                 // long 9223372036854775807l
       3: lreturn

  public long gracePeriodMs();
    Code:
       0: lconst_0
       1: lreturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #22                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #22                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #3                  // class org/apache/kafka/streams/kstream/UnlimitedWindows
      28: astore_2
      29: aload_0
      30: getfield      #2                  // Field startMs:J
      33: aload_2
      34: getfield      #2                  // Field startMs:J
      37: lcmp
      38: ifne          56
      41: aload_0
      42: getfield      #23                 // Field segments:I
      45: aload_2
      46: getfield      #23                 // Field segments:I
      49: if_icmpne     56
      52: iconst_1
      53: goto          57
      56: iconst_0
      57: ireturn

  public int hashCode();
    Code:
       0: iconst_2
       1: anewarray     #24                 // class java/lang/Object
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #2                  // Field startMs:J
      10: invokestatic  #14                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      13: aastore
      14: dup
      15: iconst_1
      16: aload_0
      17: getfield      #23                 // Field segments:I
      20: invokestatic  #25                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      23: aastore
      24: invokestatic  #26                 // Method java/util/Objects.hash:([Ljava/lang/Object;)I
      27: ireturn

  public java.lang.String toString();
    Code:
       0: new           #27                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #29                 // String UnlimitedWindows{startMs=
       9: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #2                  // Field startMs:J
      16: invokevirtual #31                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      19: ldc           #32                 // String , segments=
      21: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #23                 // Field segments:I
      28: invokevirtual #33                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: bipush        125
      33: invokevirtual #34                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      36: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: areturn

  public org.apache.kafka.streams.kstream.Windows until(long) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #36                 // Method until:(J)Lorg/apache/kafka/streams/kstream/UnlimitedWindows;
       5: areturn
}
