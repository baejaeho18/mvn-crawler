Compiled from "KStream.java"
public interface org.apache.kafka.streams.kstream.KStream<K, V> {
  public abstract org.apache.kafka.streams.kstream.KStream<K, V> filter(org.apache.kafka.streams.kstream.Predicate<? super K, ? super V>);

  public abstract org.apache.kafka.streams.kstream.KStream<K, V> filter(org.apache.kafka.streams.kstream.Predicate<? super K, ? super V>, org.apache.kafka.streams.kstream.Named);

  public abstract org.apache.kafka.streams.kstream.KStream<K, V> filterNot(org.apache.kafka.streams.kstream.Predicate<? super K, ? super V>);

  public abstract org.apache.kafka.streams.kstream.KStream<K, V> filterNot(org.apache.kafka.streams.kstream.Predicate<? super K, ? super V>, org.apache.kafka.streams.kstream.Named);

  public abstract <KR> org.apache.kafka.streams.kstream.KStream<KR, V> selectKey(org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, ? extends KR>);

  public abstract <KR> org.apache.kafka.streams.kstream.KStream<KR, V> selectKey(org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, ? extends KR>, org.apache.kafka.streams.kstream.Named);

  public abstract <KR, VR> org.apache.kafka.streams.kstream.KStream<KR, VR> map(org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, ? extends org.apache.kafka.streams.KeyValue<? extends KR, ? extends VR>>);

  public abstract <KR, VR> org.apache.kafka.streams.kstream.KStream<KR, VR> map(org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, ? extends org.apache.kafka.streams.KeyValue<? extends KR, ? extends VR>>, org.apache.kafka.streams.kstream.Named);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> mapValues(org.apache.kafka.streams.kstream.ValueMapper<? super V, ? extends VR>);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> mapValues(org.apache.kafka.streams.kstream.ValueMapper<? super V, ? extends VR>, org.apache.kafka.streams.kstream.Named);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> mapValues(org.apache.kafka.streams.kstream.ValueMapperWithKey<? super K, ? super V, ? extends VR>);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> mapValues(org.apache.kafka.streams.kstream.ValueMapperWithKey<? super K, ? super V, ? extends VR>, org.apache.kafka.streams.kstream.Named);

  public abstract <KR, VR> org.apache.kafka.streams.kstream.KStream<KR, VR> flatMap(org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, ? extends java.lang.Iterable<? extends org.apache.kafka.streams.KeyValue<? extends KR, ? extends VR>>>);

  public abstract <KR, VR> org.apache.kafka.streams.kstream.KStream<KR, VR> flatMap(org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, ? extends java.lang.Iterable<? extends org.apache.kafka.streams.KeyValue<? extends KR, ? extends VR>>>, org.apache.kafka.streams.kstream.Named);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> flatMapValues(org.apache.kafka.streams.kstream.ValueMapper<? super V, ? extends java.lang.Iterable<? extends VR>>);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> flatMapValues(org.apache.kafka.streams.kstream.ValueMapper<? super V, ? extends java.lang.Iterable<? extends VR>>, org.apache.kafka.streams.kstream.Named);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> flatMapValues(org.apache.kafka.streams.kstream.ValueMapperWithKey<? super K, ? super V, ? extends java.lang.Iterable<? extends VR>>);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> flatMapValues(org.apache.kafka.streams.kstream.ValueMapperWithKey<? super K, ? super V, ? extends java.lang.Iterable<? extends VR>>, org.apache.kafka.streams.kstream.Named);

  public abstract void print(org.apache.kafka.streams.kstream.Printed<K, V>);

  public abstract void foreach(org.apache.kafka.streams.kstream.ForeachAction<? super K, ? super V>);

  public abstract void foreach(org.apache.kafka.streams.kstream.ForeachAction<? super K, ? super V>, org.apache.kafka.streams.kstream.Named);

  public abstract org.apache.kafka.streams.kstream.KStream<K, V> peek(org.apache.kafka.streams.kstream.ForeachAction<? super K, ? super V>);

  public abstract org.apache.kafka.streams.kstream.KStream<K, V> peek(org.apache.kafka.streams.kstream.ForeachAction<? super K, ? super V>, org.apache.kafka.streams.kstream.Named);

  public abstract org.apache.kafka.streams.kstream.KStream<K, V>[] branch(org.apache.kafka.streams.kstream.Predicate<? super K, ? super V>...);

  public abstract org.apache.kafka.streams.kstream.KStream<K, V>[] branch(org.apache.kafka.streams.kstream.Named, org.apache.kafka.streams.kstream.Predicate<? super K, ? super V>...);

  public abstract org.apache.kafka.streams.kstream.KStream<K, V> merge(org.apache.kafka.streams.kstream.KStream<K, V>);

  public abstract org.apache.kafka.streams.kstream.KStream<K, V> merge(org.apache.kafka.streams.kstream.KStream<K, V>, org.apache.kafka.streams.kstream.Named);

  public abstract org.apache.kafka.streams.kstream.KStream<K, V> through(java.lang.String);

  public abstract org.apache.kafka.streams.kstream.KStream<K, V> through(java.lang.String, org.apache.kafka.streams.kstream.Produced<K, V>);

  public abstract org.apache.kafka.streams.kstream.KStream<K, V> repartition();

  public abstract org.apache.kafka.streams.kstream.KStream<K, V> repartition(org.apache.kafka.streams.kstream.Repartitioned<K, V>);

  public abstract void to(java.lang.String);

  public abstract void to(java.lang.String, org.apache.kafka.streams.kstream.Produced<K, V>);

  public abstract void to(org.apache.kafka.streams.processor.TopicNameExtractor<K, V>);

  public abstract void to(org.apache.kafka.streams.processor.TopicNameExtractor<K, V>, org.apache.kafka.streams.kstream.Produced<K, V>);

  public abstract org.apache.kafka.streams.kstream.KTable<K, V> toTable();

  public abstract org.apache.kafka.streams.kstream.KTable<K, V> toTable(org.apache.kafka.streams.kstream.Named);

  public abstract org.apache.kafka.streams.kstream.KTable<K, V> toTable(org.apache.kafka.streams.kstream.Materialized<K, V, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract org.apache.kafka.streams.kstream.KTable<K, V> toTable(org.apache.kafka.streams.kstream.Named, org.apache.kafka.streams.kstream.Materialized<K, V, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract <KR> org.apache.kafka.streams.kstream.KGroupedStream<KR, V> groupBy(org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, KR>);

  public abstract <KR> org.apache.kafka.streams.kstream.KGroupedStream<KR, V> groupBy(org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, KR>, org.apache.kafka.streams.kstream.Serialized<KR, V>);

  public abstract <KR> org.apache.kafka.streams.kstream.KGroupedStream<KR, V> groupBy(org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, KR>, org.apache.kafka.streams.kstream.Grouped<KR, V>);

  public abstract org.apache.kafka.streams.kstream.KGroupedStream<K, V> groupByKey();

  public abstract org.apache.kafka.streams.kstream.KGroupedStream<K, V> groupByKey(org.apache.kafka.streams.kstream.Serialized<K, V>);

  public abstract org.apache.kafka.streams.kstream.KGroupedStream<K, V> groupByKey(org.apache.kafka.streams.kstream.Grouped<K, V>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KStream<K, VR> join(org.apache.kafka.streams.kstream.KStream<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.JoinWindows);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KStream<K, VR> join(org.apache.kafka.streams.kstream.KStream<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.JoinWindows, org.apache.kafka.streams.kstream.Joined<K, V, VO>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KStream<K, VR> join(org.apache.kafka.streams.kstream.KStream<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.JoinWindows, org.apache.kafka.streams.kstream.StreamJoined<K, V, VO>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KStream<K, VR> leftJoin(org.apache.kafka.streams.kstream.KStream<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.JoinWindows);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KStream<K, VR> leftJoin(org.apache.kafka.streams.kstream.KStream<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.JoinWindows, org.apache.kafka.streams.kstream.Joined<K, V, VO>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KStream<K, VR> leftJoin(org.apache.kafka.streams.kstream.KStream<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.JoinWindows, org.apache.kafka.streams.kstream.StreamJoined<K, V, VO>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KStream<K, VR> outerJoin(org.apache.kafka.streams.kstream.KStream<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.JoinWindows);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KStream<K, VR> outerJoin(org.apache.kafka.streams.kstream.KStream<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.JoinWindows, org.apache.kafka.streams.kstream.Joined<K, V, VO>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KStream<K, VR> outerJoin(org.apache.kafka.streams.kstream.KStream<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.JoinWindows, org.apache.kafka.streams.kstream.StreamJoined<K, V, VO>);

  public abstract <VT, VR> org.apache.kafka.streams.kstream.KStream<K, VR> join(org.apache.kafka.streams.kstream.KTable<K, VT>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VT, ? extends VR>);

  public abstract <VT, VR> org.apache.kafka.streams.kstream.KStream<K, VR> join(org.apache.kafka.streams.kstream.KTable<K, VT>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VT, ? extends VR>, org.apache.kafka.streams.kstream.Joined<K, V, VT>);

  public abstract <VT, VR> org.apache.kafka.streams.kstream.KStream<K, VR> leftJoin(org.apache.kafka.streams.kstream.KTable<K, VT>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VT, ? extends VR>);

  public abstract <VT, VR> org.apache.kafka.streams.kstream.KStream<K, VR> leftJoin(org.apache.kafka.streams.kstream.KTable<K, VT>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VT, ? extends VR>, org.apache.kafka.streams.kstream.Joined<K, V, VT>);

  public abstract <GK, GV, RV> org.apache.kafka.streams.kstream.KStream<K, RV> join(org.apache.kafka.streams.kstream.GlobalKTable<GK, GV>, org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, ? extends GK>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super GV, ? extends RV>);

  public abstract <GK, GV, RV> org.apache.kafka.streams.kstream.KStream<K, RV> join(org.apache.kafka.streams.kstream.GlobalKTable<GK, GV>, org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, ? extends GK>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super GV, ? extends RV>, org.apache.kafka.streams.kstream.Named);

  public abstract <GK, GV, RV> org.apache.kafka.streams.kstream.KStream<K, RV> leftJoin(org.apache.kafka.streams.kstream.GlobalKTable<GK, GV>, org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, ? extends GK>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super GV, ? extends RV>);

  public abstract <GK, GV, RV> org.apache.kafka.streams.kstream.KStream<K, RV> leftJoin(org.apache.kafka.streams.kstream.GlobalKTable<GK, GV>, org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, ? extends GK>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super GV, ? extends RV>, org.apache.kafka.streams.kstream.Named);

  public abstract <K1, V1> org.apache.kafka.streams.kstream.KStream<K1, V1> transform(org.apache.kafka.streams.kstream.TransformerSupplier<? super K, ? super V, org.apache.kafka.streams.KeyValue<K1, V1>>, java.lang.String...);

  public abstract <K1, V1> org.apache.kafka.streams.kstream.KStream<K1, V1> transform(org.apache.kafka.streams.kstream.TransformerSupplier<? super K, ? super V, org.apache.kafka.streams.KeyValue<K1, V1>>, org.apache.kafka.streams.kstream.Named, java.lang.String...);

  public abstract <K1, V1> org.apache.kafka.streams.kstream.KStream<K1, V1> flatTransform(org.apache.kafka.streams.kstream.TransformerSupplier<? super K, ? super V, java.lang.Iterable<org.apache.kafka.streams.KeyValue<K1, V1>>>, java.lang.String...);

  public abstract <K1, V1> org.apache.kafka.streams.kstream.KStream<K1, V1> flatTransform(org.apache.kafka.streams.kstream.TransformerSupplier<? super K, ? super V, java.lang.Iterable<org.apache.kafka.streams.KeyValue<K1, V1>>>, org.apache.kafka.streams.kstream.Named, java.lang.String...);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> transformValues(org.apache.kafka.streams.kstream.ValueTransformerSupplier<? super V, ? extends VR>, java.lang.String...);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> transformValues(org.apache.kafka.streams.kstream.ValueTransformerSupplier<? super V, ? extends VR>, org.apache.kafka.streams.kstream.Named, java.lang.String...);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> transformValues(org.apache.kafka.streams.kstream.ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR>, java.lang.String...);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> transformValues(org.apache.kafka.streams.kstream.ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR>, org.apache.kafka.streams.kstream.Named, java.lang.String...);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> flatTransformValues(org.apache.kafka.streams.kstream.ValueTransformerSupplier<? super V, java.lang.Iterable<VR>>, java.lang.String...);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> flatTransformValues(org.apache.kafka.streams.kstream.ValueTransformerSupplier<? super V, java.lang.Iterable<VR>>, org.apache.kafka.streams.kstream.Named, java.lang.String...);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> flatTransformValues(org.apache.kafka.streams.kstream.ValueTransformerWithKeySupplier<? super K, ? super V, java.lang.Iterable<VR>>, java.lang.String...);

  public abstract <VR> org.apache.kafka.streams.kstream.KStream<K, VR> flatTransformValues(org.apache.kafka.streams.kstream.ValueTransformerWithKeySupplier<? super K, ? super V, java.lang.Iterable<VR>>, org.apache.kafka.streams.kstream.Named, java.lang.String...);

  public abstract void process(org.apache.kafka.streams.processor.ProcessorSupplier<? super K, ? super V>, java.lang.String...);

  public abstract void process(org.apache.kafka.streams.processor.ProcessorSupplier<? super K, ? super V>, org.apache.kafka.streams.kstream.Named, java.lang.String...);
}
