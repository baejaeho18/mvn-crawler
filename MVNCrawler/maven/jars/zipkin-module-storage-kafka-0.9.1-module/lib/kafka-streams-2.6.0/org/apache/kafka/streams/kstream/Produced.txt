Compiled from "Produced.java"
public class org.apache.kafka.streams.kstream.Produced<K, V> implements org.apache.kafka.streams.kstream.NamedOperation<org.apache.kafka.streams.kstream.Produced<K, V>> {
  protected org.apache.kafka.common.serialization.Serde<K> keySerde;

  protected org.apache.kafka.common.serialization.Serde<V> valueSerde;

  protected org.apache.kafka.streams.processor.StreamPartitioner<? super K, ? super V> partitioner;

  protected java.lang.String processorName;

  private org.apache.kafka.streams.kstream.Produced(org.apache.kafka.common.serialization.Serde<K>, org.apache.kafka.common.serialization.Serde<V>, org.apache.kafka.streams.processor.StreamPartitioner<? super K, ? super V>, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field keySerde:Lorg/apache/kafka/common/serialization/Serde;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field valueSerde:Lorg/apache/kafka/common/serialization/Serde;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field partitioner:Lorg/apache/kafka/streams/processor/StreamPartitioner;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field processorName:Ljava/lang/String;
      25: return

  protected org.apache.kafka.streams.kstream.Produced(org.apache.kafka.streams.kstream.Produced<K, V>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #2                  // Field keySerde:Lorg/apache/kafka/common/serialization/Serde;
       9: putfield      #2                  // Field keySerde:Lorg/apache/kafka/common/serialization/Serde;
      12: aload_0
      13: aload_1
      14: getfield      #3                  // Field valueSerde:Lorg/apache/kafka/common/serialization/Serde;
      17: putfield      #3                  // Field valueSerde:Lorg/apache/kafka/common/serialization/Serde;
      20: aload_0
      21: aload_1
      22: getfield      #4                  // Field partitioner:Lorg/apache/kafka/streams/processor/StreamPartitioner;
      25: putfield      #4                  // Field partitioner:Lorg/apache/kafka/streams/processor/StreamPartitioner;
      28: aload_0
      29: aload_1
      30: getfield      #5                  // Field processorName:Ljava/lang/String;
      33: putfield      #5                  // Field processorName:Ljava/lang/String;
      36: return

  public static <K, V> org.apache.kafka.streams.kstream.Produced<K, V> with(org.apache.kafka.common.serialization.Serde<K>, org.apache.kafka.common.serialization.Serde<V>);
    Code:
       0: new           #6                  // class org/apache/kafka/streams/kstream/Produced
       3: dup
       4: aload_0
       5: aload_1
       6: aconst_null
       7: aconst_null
       8: invokespecial #7                  // Method "<init>":(Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/streams/processor/StreamPartitioner;Ljava/lang/String;)V
      11: areturn

  public static <K, V> org.apache.kafka.streams.kstream.Produced<K, V> with(org.apache.kafka.common.serialization.Serde<K>, org.apache.kafka.common.serialization.Serde<V>, org.apache.kafka.streams.processor.StreamPartitioner<? super K, ? super V>);
    Code:
       0: new           #6                  // class org/apache/kafka/streams/kstream/Produced
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aconst_null
       8: invokespecial #7                  // Method "<init>":(Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/streams/processor/StreamPartitioner;Ljava/lang/String;)V
      11: areturn

  public static <K, V> org.apache.kafka.streams.kstream.Produced<K, V> as(java.lang.String);
    Code:
       0: new           #6                  // class org/apache/kafka/streams/kstream/Produced
       3: dup
       4: aconst_null
       5: aconst_null
       6: aconst_null
       7: aload_0
       8: invokespecial #7                  // Method "<init>":(Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/streams/processor/StreamPartitioner;Ljava/lang/String;)V
      11: areturn

  public static <K, V> org.apache.kafka.streams.kstream.Produced<K, V> keySerde(org.apache.kafka.common.serialization.Serde<K>);
    Code:
       0: new           #6                  // class org/apache/kafka/streams/kstream/Produced
       3: dup
       4: aload_0
       5: aconst_null
       6: aconst_null
       7: aconst_null
       8: invokespecial #7                  // Method "<init>":(Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/streams/processor/StreamPartitioner;Ljava/lang/String;)V
      11: areturn

  public static <K, V> org.apache.kafka.streams.kstream.Produced<K, V> valueSerde(org.apache.kafka.common.serialization.Serde<V>);
    Code:
       0: new           #6                  // class org/apache/kafka/streams/kstream/Produced
       3: dup
       4: aconst_null
       5: aload_0
       6: aconst_null
       7: aconst_null
       8: invokespecial #7                  // Method "<init>":(Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/streams/processor/StreamPartitioner;Ljava/lang/String;)V
      11: areturn

  public static <K, V> org.apache.kafka.streams.kstream.Produced<K, V> streamPartitioner(org.apache.kafka.streams.processor.StreamPartitioner<? super K, ? super V>);
    Code:
       0: new           #6                  // class org/apache/kafka/streams/kstream/Produced
       3: dup
       4: aconst_null
       5: aconst_null
       6: aload_0
       7: aconst_null
       8: invokespecial #7                  // Method "<init>":(Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/streams/processor/StreamPartitioner;Ljava/lang/String;)V
      11: areturn

  public org.apache.kafka.streams.kstream.Produced<K, V> withStreamPartitioner(org.apache.kafka.streams.processor.StreamPartitioner<? super K, ? super V>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field partitioner:Lorg/apache/kafka/streams/processor/StreamPartitioner;
       5: aload_0
       6: areturn

  public org.apache.kafka.streams.kstream.Produced<K, V> withValueSerde(org.apache.kafka.common.serialization.Serde<V>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field valueSerde:Lorg/apache/kafka/common/serialization/Serde;
       5: aload_0
       6: areturn

  public org.apache.kafka.streams.kstream.Produced<K, V> withKeySerde(org.apache.kafka.common.serialization.Serde<K>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field keySerde:Lorg/apache/kafka/common/serialization/Serde;
       5: aload_0
       6: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #8                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #8                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #6                  // class org/apache/kafka/streams/kstream/Produced
      28: astore_2
      29: aload_0
      30: getfield      #2                  // Field keySerde:Lorg/apache/kafka/common/serialization/Serde;
      33: aload_2
      34: getfield      #2                  // Field keySerde:Lorg/apache/kafka/common/serialization/Serde;
      37: invokestatic  #9                  // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      40: ifeq          75
      43: aload_0
      44: getfield      #3                  // Field valueSerde:Lorg/apache/kafka/common/serialization/Serde;
      47: aload_2
      48: getfield      #3                  // Field valueSerde:Lorg/apache/kafka/common/serialization/Serde;
      51: invokestatic  #9                  // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      54: ifeq          75
      57: aload_0
      58: getfield      #4                  // Field partitioner:Lorg/apache/kafka/streams/processor/StreamPartitioner;
      61: aload_2
      62: getfield      #4                  // Field partitioner:Lorg/apache/kafka/streams/processor/StreamPartitioner;
      65: invokestatic  #9                  // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      68: ifeq          75
      71: iconst_1
      72: goto          76
      75: iconst_0
      76: ireturn

  public int hashCode();
    Code:
       0: iconst_3
       1: anewarray     #10                 // class java/lang/Object
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #2                  // Field keySerde:Lorg/apache/kafka/common/serialization/Serde;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: getfield      #3                  // Field valueSerde:Lorg/apache/kafka/common/serialization/Serde;
      17: aastore
      18: dup
      19: iconst_2
      20: aload_0
      21: getfield      #4                  // Field partitioner:Lorg/apache/kafka/streams/processor/StreamPartitioner;
      24: aastore
      25: invokestatic  #11                 // Method java/util/Objects.hash:([Ljava/lang/Object;)I
      28: ireturn

  public org.apache.kafka.streams.kstream.Produced<K, V> withName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field processorName:Ljava/lang/String;
       5: aload_0
       6: areturn

  public org.apache.kafka.streams.kstream.NamedOperation withName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #12                 // Method withName:(Ljava/lang/String;)Lorg/apache/kafka/streams/kstream/Produced;
       5: areturn
}
