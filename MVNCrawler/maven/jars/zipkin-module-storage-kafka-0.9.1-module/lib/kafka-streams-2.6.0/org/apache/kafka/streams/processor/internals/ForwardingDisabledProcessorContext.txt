Compiled from "ForwardingDisabledProcessorContext.java"
public final class org.apache.kafka.streams.processor.internals.ForwardingDisabledProcessorContext implements org.apache.kafka.streams.processor.ProcessorContext {
  private final org.apache.kafka.streams.processor.ProcessorContext delegate;

  private static final java.lang.String EXPLANATION;

  public org.apache.kafka.streams.processor.internals.ForwardingDisabledProcessorContext(org.apache.kafka.streams.processor.ProcessorContext);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String delegate
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class org/apache/kafka/streams/processor/ProcessorContext
      14: putfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
      17: return

  public java.lang.String applicationId();
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: invokeinterface #6,  1            // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.applicationId:()Ljava/lang/String;
       9: areturn

  public org.apache.kafka.streams.processor.TaskId taskId();
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: invokeinterface #7,  1            // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.taskId:()Lorg/apache/kafka/streams/processor/TaskId;
       9: areturn

  public org.apache.kafka.common.serialization.Serde<?> keySerde();
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: invokeinterface #8,  1            // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.keySerde:()Lorg/apache/kafka/common/serialization/Serde;
       9: areturn

  public org.apache.kafka.common.serialization.Serde<?> valueSerde();
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: invokeinterface #9,  1            // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.valueSerde:()Lorg/apache/kafka/common/serialization/Serde;
       9: areturn

  public java.io.File stateDir();
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: invokeinterface #10,  1           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.stateDir:()Ljava/io/File;
       9: areturn

  public org.apache.kafka.streams.StreamsMetrics metrics();
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: invokeinterface #11,  1           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.metrics:()Lorg/apache/kafka/streams/StreamsMetrics;
       9: areturn

  public void register(org.apache.kafka.streams.processor.StateStore, org.apache.kafka.streams.processor.StateRestoreCallback);
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: aload_1
       5: aload_2
       6: invokeinterface #12,  3           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.register:(Lorg/apache/kafka/streams/processor/StateStore;Lorg/apache/kafka/streams/processor/StateRestoreCallback;)V
      11: return

  public org.apache.kafka.streams.processor.StateStore getStateStore(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: aload_1
       5: invokeinterface #13,  2           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.getStateStore:(Ljava/lang/String;)Lorg/apache/kafka/streams/processor/StateStore;
      10: areturn

  public org.apache.kafka.streams.processor.Cancellable schedule(long, org.apache.kafka.streams.processor.PunctuationType, org.apache.kafka.streams.processor.Punctuator);
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: lload_1
       5: aload_3
       6: aload         4
       8: invokeinterface #14,  5           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.schedule:(JLorg/apache/kafka/streams/processor/PunctuationType;Lorg/apache/kafka/streams/processor/Punctuator;)Lorg/apache/kafka/streams/processor/Cancellable;
      13: areturn

  public org.apache.kafka.streams.processor.Cancellable schedule(java.time.Duration, org.apache.kafka.streams.processor.PunctuationType, org.apache.kafka.streams.processor.Punctuator) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokeinterface #15,  4           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.schedule:(Ljava/time/Duration;Lorg/apache/kafka/streams/processor/PunctuationType;Lorg/apache/kafka/streams/processor/Punctuator;)Lorg/apache/kafka/streams/processor/Cancellable;
      12: areturn

  public <K, V> void forward(K, V);
    Code:
       0: new           #16                 // class org/apache/kafka/streams/errors/StreamsException
       3: dup
       4: ldc           #18                 // String ProcessorContext#forward() is not supported from this context, as the framework must ensure the key is not changed (#forward allows changing the key on messages which are sent). Try another function, which doesn\'t allow the key to be changed (for example - #tranformValues).
       6: invokespecial #19                 // Method org/apache/kafka/streams/errors/StreamsException."<init>":(Ljava/lang/String;)V
       9: athrow

  public <K, V> void forward(K, V, org.apache.kafka.streams.processor.To);
    Code:
       0: new           #16                 // class org/apache/kafka/streams/errors/StreamsException
       3: dup
       4: ldc           #18                 // String ProcessorContext#forward() is not supported from this context, as the framework must ensure the key is not changed (#forward allows changing the key on messages which are sent). Try another function, which doesn\'t allow the key to be changed (for example - #tranformValues).
       6: invokespecial #19                 // Method org/apache/kafka/streams/errors/StreamsException."<init>":(Ljava/lang/String;)V
       9: athrow

  public <K, V> void forward(K, V, int);
    Code:
       0: new           #16                 // class org/apache/kafka/streams/errors/StreamsException
       3: dup
       4: ldc           #18                 // String ProcessorContext#forward() is not supported from this context, as the framework must ensure the key is not changed (#forward allows changing the key on messages which are sent). Try another function, which doesn\'t allow the key to be changed (for example - #tranformValues).
       6: invokespecial #19                 // Method org/apache/kafka/streams/errors/StreamsException."<init>":(Ljava/lang/String;)V
       9: athrow

  public <K, V> void forward(K, V, java.lang.String);
    Code:
       0: new           #16                 // class org/apache/kafka/streams/errors/StreamsException
       3: dup
       4: ldc           #18                 // String ProcessorContext#forward() is not supported from this context, as the framework must ensure the key is not changed (#forward allows changing the key on messages which are sent). Try another function, which doesn\'t allow the key to be changed (for example - #tranformValues).
       6: invokespecial #19                 // Method org/apache/kafka/streams/errors/StreamsException."<init>":(Ljava/lang/String;)V
       9: athrow

  public void commit();
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: invokeinterface #20,  1           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.commit:()V
       9: return

  public java.lang.String topic();
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: invokeinterface #21,  1           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.topic:()Ljava/lang/String;
       9: areturn

  public int partition();
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: invokeinterface #22,  1           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.partition:()I
       9: ireturn

  public long offset();
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: invokeinterface #23,  1           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.offset:()J
       9: lreturn

  public org.apache.kafka.common.header.Headers headers();
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: invokeinterface #24,  1           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.headers:()Lorg/apache/kafka/common/header/Headers;
       9: areturn

  public long timestamp();
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: invokeinterface #25,  1           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.timestamp:()J
       9: lreturn

  public java.util.Map<java.lang.String, java.lang.Object> appConfigs();
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: invokeinterface #26,  1           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.appConfigs:()Ljava/util/Map;
       9: areturn

  public java.util.Map<java.lang.String, java.lang.Object> appConfigsWithPrefix(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field delegate:Lorg/apache/kafka/streams/processor/ProcessorContext;
       4: aload_1
       5: invokeinterface #27,  2           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.appConfigsWithPrefix:(Ljava/lang/String;)Ljava/util/Map;
      10: areturn
}
