Compiled from "MemoryLRUCache.java"
public class org.apache.kafka.streams.state.internals.MemoryLRUCache implements org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]> {
  private final java.lang.String name;

  protected final java.util.Map<org.apache.kafka.common.utils.Bytes, byte[]> map;

  private boolean restoring;

  private volatile boolean open;

  private org.apache.kafka.streams.state.internals.MemoryLRUCache$EldestEntryRemovalListener listener;

  org.apache.kafka.streams.state.internals.MemoryLRUCache(java.lang.String, int);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field restoring:Z
       9: aload_0
      10: iconst_1
      11: putfield      #4                  // Field open:Z
      14: aload_0
      15: aload_1
      16: putfield      #5                  // Field name:Ljava/lang/String;
      19: aload_0
      20: new           #6                  // class org/apache/kafka/streams/state/internals/MemoryLRUCache$1
      23: dup
      24: aload_0
      25: iload_2
      26: iconst_1
      27: iadd
      28: ldc           #7                  // float 1.01f
      30: iconst_1
      31: iload_2
      32: invokespecial #8                  // Method org/apache/kafka/streams/state/internals/MemoryLRUCache$1."<init>":(Lorg/apache/kafka/streams/state/internals/MemoryLRUCache;IFZI)V
      35: putfield      #9                  // Field map:Ljava/util/Map;
      38: return

  void setWhenEldestRemoved(org.apache.kafka.streams.state.internals.MemoryLRUCache$EldestEntryRemovalListener);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field listener:Lorg/apache/kafka/streams/state/internals/MemoryLRUCache$EldestEntryRemovalListener;
       5: return

  public java.lang.String name();
    Code:
       0: aload_0
       1: getfield      #5                  // Field name:Ljava/lang/String;
       4: areturn

  public void init(org.apache.kafka.streams.processor.ProcessorContext, org.apache.kafka.streams.processor.StateStore);
    Code:
       0: aload_1
       1: aload_2
       2: aload_0
       3: invokedynamic #10,  0             // InvokeDynamic #0:restore:(Lorg/apache/kafka/streams/state/internals/MemoryLRUCache;)Lorg/apache/kafka/streams/processor/StateRestoreCallback;
       8: invokeinterface #11,  3           // InterfaceMethod org/apache/kafka/streams/processor/ProcessorContext.register:(Lorg/apache/kafka/streams/processor/StateStore;Lorg/apache/kafka/streams/processor/StateRestoreCallback;)V
      13: return

  public boolean persistent();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #4                  // Field open:Z
       4: ireturn

  public synchronized byte[] get(org.apache.kafka.common.utils.Bytes);
    Code:
       0: aload_1
       1: invokestatic  #12                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: getfield      #9                  // Field map:Ljava/util/Map;
       9: aload_1
      10: invokeinterface #13,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #14                 // class "[B"
      18: areturn

  public synchronized void put(org.apache.kafka.common.utils.Bytes, byte[]);
    Code:
       0: aload_1
       1: invokestatic  #12                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_2
       6: ifnonnull     18
       9: aload_0
      10: aload_1
      11: invokevirtual #15                 // Method delete:(Lorg/apache/kafka/common/utils/Bytes;)[B
      14: pop
      15: goto          30
      18: aload_0
      19: getfield      #9                  // Field map:Ljava/util/Map;
      22: aload_1
      23: aload_2
      24: invokeinterface #16,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      29: pop
      30: return

  public synchronized byte[] putIfAbsent(org.apache.kafka.common.utils.Bytes, byte[]);
    Code:
       0: aload_1
       1: invokestatic  #12                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: aload_1
       7: invokevirtual #17                 // Method get:(Lorg/apache/kafka/common/utils/Bytes;)[B
      10: astore_3
      11: aload_3
      12: ifnonnull     21
      15: aload_0
      16: aload_1
      17: aload_2
      18: invokevirtual #18                 // Method put:(Lorg/apache/kafka/common/utils/Bytes;[B)V
      21: aload_3
      22: areturn

  public void putAll(java.util.List<org.apache.kafka.streams.KeyValue<org.apache.kafka.common.utils.Bytes, byte[]>>);
    Code:
       0: aload_1
       1: invokeinterface #19,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          47
      16: aload_2
      17: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #22                 // class org/apache/kafka/streams/KeyValue
      25: astore_3
      26: aload_0
      27: aload_3
      28: getfield      #23                 // Field org/apache/kafka/streams/KeyValue.key:Ljava/lang/Object;
      31: checkcast     #24                 // class org/apache/kafka/common/utils/Bytes
      34: aload_3
      35: getfield      #25                 // Field org/apache/kafka/streams/KeyValue.value:Ljava/lang/Object;
      38: checkcast     #14                 // class "[B"
      41: invokevirtual #18                 // Method put:(Lorg/apache/kafka/common/utils/Bytes;[B)V
      44: goto          7
      47: return

  public synchronized byte[] delete(org.apache.kafka.common.utils.Bytes);
    Code:
       0: aload_1
       1: invokestatic  #12                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: getfield      #9                  // Field map:Ljava/util/Map;
       9: aload_1
      10: invokeinterface #26,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #14                 // class "[B"
      18: areturn

  public org.apache.kafka.streams.state.KeyValueIterator<org.apache.kafka.common.utils.Bytes, byte[]> range(org.apache.kafka.common.utils.Bytes, org.apache.kafka.common.utils.Bytes);
    Code:
       0: new           #27                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #28                 // String MemoryLRUCache does not support range() function.
       6: invokespecial #29                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public org.apache.kafka.streams.state.KeyValueIterator<org.apache.kafka.common.utils.Bytes, byte[]> all();
    Code:
       0: new           #27                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #30                 // String MemoryLRUCache does not support all() function.
       6: invokespecial #29                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public long approximateNumEntries();
    Code:
       0: aload_0
       1: getfield      #9                  // Field map:Ljava/util/Map;
       4: invokeinterface #31,  1           // InterfaceMethod java/util/Map.size:()I
       9: i2l
      10: lreturn

  public void flush();
    Code:
       0: return

  public void close();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #4                  // Field open:Z
       5: return

  public int size();
    Code:
       0: aload_0
       1: getfield      #9                  // Field map:Ljava/util/Map;
       4: invokeinterface #31,  1           // InterfaceMethod java/util/Map.size:()I
       9: ireturn

  public java.lang.Object delete(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #24                 // class org/apache/kafka/common/utils/Bytes
       5: invokevirtual #15                 // Method delete:(Lorg/apache/kafka/common/utils/Bytes;)[B
       8: areturn

  public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #24                 // class org/apache/kafka/common/utils/Bytes
       5: aload_2
       6: checkcast     #14                 // class "[B"
       9: invokevirtual #32                 // Method putIfAbsent:(Lorg/apache/kafka/common/utils/Bytes;[B)[B
      12: areturn

  public void put(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #24                 // class org/apache/kafka/common/utils/Bytes
       5: aload_2
       6: checkcast     #14                 // class "[B"
       9: invokevirtual #18                 // Method put:(Lorg/apache/kafka/common/utils/Bytes;[B)V
      12: return

  public org.apache.kafka.streams.state.KeyValueIterator range(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #24                 // class org/apache/kafka/common/utils/Bytes
       5: aload_2
       6: checkcast     #24                 // class org/apache/kafka/common/utils/Bytes
       9: invokevirtual #33                 // Method range:(Lorg/apache/kafka/common/utils/Bytes;Lorg/apache/kafka/common/utils/Bytes;)Lorg/apache/kafka/streams/state/KeyValueIterator;
      12: areturn

  public java.lang.Object get(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #24                 // class org/apache/kafka/common/utils/Bytes
       5: invokevirtual #17                 // Method get:(Lorg/apache/kafka/common/utils/Bytes;)[B
       8: areturn

  private void lambda$init$0(byte[], byte[]);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #2                  // Field restoring:Z
       5: aload_0
       6: aload_1
       7: invokestatic  #34                 // Method org/apache/kafka/common/utils/Bytes.wrap:([B)Lorg/apache/kafka/common/utils/Bytes;
      10: aload_2
      11: invokevirtual #18                 // Method put:(Lorg/apache/kafka/common/utils/Bytes;[B)V
      14: aload_0
      15: iconst_0
      16: putfield      #2                  // Field restoring:Z
      19: return

  static boolean access$000(org.apache.kafka.streams.state.internals.MemoryLRUCache);
    Code:
       0: aload_0
       1: getfield      #2                  // Field restoring:Z
       4: ireturn

  static org.apache.kafka.streams.state.internals.MemoryLRUCache$EldestEntryRemovalListener access$100(org.apache.kafka.streams.state.internals.MemoryLRUCache);
    Code:
       0: aload_0
       1: getfield      #1                  // Field listener:Lorg/apache/kafka/streams/state/internals/MemoryLRUCache$EldestEntryRemovalListener;
       4: areturn
}
