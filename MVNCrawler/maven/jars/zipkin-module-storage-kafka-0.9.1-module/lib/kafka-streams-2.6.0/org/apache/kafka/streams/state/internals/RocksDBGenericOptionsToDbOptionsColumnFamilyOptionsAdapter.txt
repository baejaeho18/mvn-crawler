Compiled from "RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter.java"
public class org.apache.kafka.streams.state.internals.RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter extends org.rocksdb.Options {
  private final org.rocksdb.DBOptions dbOptions;

  private final org.rocksdb.ColumnFamilyOptions columnFamilyOptions;

  private static final org.slf4j.Logger LOG;

  org.apache.kafka.streams.state.internals.RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter(org.rocksdb.DBOptions, org.rocksdb.ColumnFamilyOptions);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/rocksdb/Options."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
      14: return

  public org.rocksdb.Options setIncreaseParallelism(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #4                  // Method org/rocksdb/DBOptions.setIncreaseParallelism:(I)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setCreateIfMissing(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #5                  // Method org/rocksdb/DBOptions.setCreateIfMissing:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setCreateMissingColumnFamilies(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #6                  // Method org/rocksdb/DBOptions.setCreateMissingColumnFamilies:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setEnv(org.rocksdb.Env);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: aload_1
       5: invokevirtual #7                  // Method org/rocksdb/DBOptions.setEnv:(Lorg/rocksdb/Env;)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Env getEnv();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #8                  // Method org/rocksdb/DBOptions.getEnv:()Lorg/rocksdb/Env;
       7: areturn

  public org.rocksdb.Options prepareForBulkLoad();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iconst_4
       5: invokevirtual #9                  // Method org/rocksdb/DBOptions.setMaxBackgroundFlushes:(I)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
      13: iconst_1
      14: invokevirtual #10                 // Method org/rocksdb/ColumnFamilyOptions.setDisableAutoCompactions:(Z)Lorg/rocksdb/ColumnFamilyOptions;
      17: pop
      18: aload_0
      19: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
      22: ldc           #11                 // int 1073741824
      24: invokevirtual #12                 // Method org/rocksdb/ColumnFamilyOptions.setLevel0FileNumCompactionTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
      27: pop
      28: aload_0
      29: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
      32: ldc           #11                 // int 1073741824
      34: invokevirtual #13                 // Method org/rocksdb/ColumnFamilyOptions.setLevel0SlowdownWritesTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
      37: pop
      38: aload_0
      39: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
      42: ldc           #11                 // int 1073741824
      44: invokevirtual #14                 // Method org/rocksdb/ColumnFamilyOptions.setLevel0StopWritesTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
      47: pop
      48: aload_0
      49: areturn

  public boolean createIfMissing();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #15                 // Method org/rocksdb/DBOptions.createIfMissing:()Z
       7: ireturn

  public boolean createMissingColumnFamilies();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #16                 // Method org/rocksdb/DBOptions.createMissingColumnFamilies:()Z
       7: ireturn

  public org.rocksdb.Options optimizeForSmallDb();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #17                 // Method org/rocksdb/DBOptions.optimizeForSmallDb:()Lorg/rocksdb/DBOptions;
       7: pop
       8: aload_0
       9: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
      12: invokevirtual #18                 // Method org/rocksdb/ColumnFamilyOptions.optimizeForSmallDb:()Lorg/rocksdb/ColumnFamilyOptions;
      15: pop
      16: aload_0
      17: areturn

  public org.rocksdb.Options optimizeForPointLookup(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #19                 // Method org/rocksdb/ColumnFamilyOptions.optimizeForPointLookup:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options optimizeLevelStyleCompaction();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #20                 // Method org/rocksdb/ColumnFamilyOptions.optimizeLevelStyleCompaction:()Lorg/rocksdb/ColumnFamilyOptions;
       7: pop
       8: aload_0
       9: areturn

  public org.rocksdb.Options optimizeLevelStyleCompaction(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #21                 // Method org/rocksdb/ColumnFamilyOptions.optimizeLevelStyleCompaction:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options optimizeUniversalStyleCompaction();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #22                 // Method org/rocksdb/ColumnFamilyOptions.optimizeUniversalStyleCompaction:()Lorg/rocksdb/ColumnFamilyOptions;
       7: pop
       8: aload_0
       9: areturn

  public org.rocksdb.Options optimizeUniversalStyleCompaction(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #23                 // Method org/rocksdb/ColumnFamilyOptions.optimizeUniversalStyleCompaction:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setComparator(org.rocksdb.BuiltinComparator);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #24                 // Method org/rocksdb/ColumnFamilyOptions.setComparator:(Lorg/rocksdb/BuiltinComparator;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setComparator(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #25                 // Method org/rocksdb/ColumnFamilyOptions.setComparator:(Lorg/rocksdb/AbstractComparator;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setMergeOperatorName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #26                 // Method org/rocksdb/ColumnFamilyOptions.setMergeOperatorName:(Ljava/lang/String;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setMergeOperator(org.rocksdb.MergeOperator);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #27                 // Method org/rocksdb/ColumnFamilyOptions.setMergeOperator:(Lorg/rocksdb/MergeOperator;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setWriteBufferSize(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #28                 // Method org/rocksdb/ColumnFamilyOptions.setWriteBufferSize:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public long writeBufferSize();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #29                 // Method org/rocksdb/ColumnFamilyOptions.writeBufferSize:()J
       7: lreturn

  public org.rocksdb.Options setMaxWriteBufferNumber(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #30                 // Method org/rocksdb/ColumnFamilyOptions.setMaxWriteBufferNumber:(I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public int maxWriteBufferNumber();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #31                 // Method org/rocksdb/ColumnFamilyOptions.maxWriteBufferNumber:()I
       7: ireturn

  public boolean errorIfExists();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #32                 // Method org/rocksdb/DBOptions.errorIfExists:()Z
       7: ireturn

  public org.rocksdb.Options setErrorIfExists(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #33                 // Method org/rocksdb/DBOptions.setErrorIfExists:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean paranoidChecks();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #34                 // Method org/rocksdb/ColumnFamilyOptions.paranoidFileChecks:()Z
       7: istore_1
       8: aload_0
       9: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
      12: invokevirtual #35                 // Method org/rocksdb/DBOptions.paranoidChecks:()Z
      15: istore_2
      16: iload_1
      17: iload_2
      18: if_icmpeq     31
      21: new           #36                 // class java/lang/IllegalStateException
      24: dup
      25: ldc           #37                 // String Config for paranoid checks for RockDB and ColumnFamilies should be the same.
      27: invokespecial #38                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: iload_2
      32: ireturn

  public org.rocksdb.Options setParanoidChecks(boolean);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #34                 // Method org/rocksdb/ColumnFamilyOptions.paranoidFileChecks:()Z
       7: pop
       8: aload_0
       9: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
      12: iload_1
      13: invokevirtual #39                 // Method org/rocksdb/DBOptions.setParanoidChecks:(Z)Lorg/rocksdb/DBOptions;
      16: pop
      17: aload_0
      18: areturn

  public int maxOpenFiles();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #40                 // Method org/rocksdb/DBOptions.maxOpenFiles:()I
       7: ireturn

  public org.rocksdb.Options setMaxFileOpeningThreads(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #41                 // Method org/rocksdb/DBOptions.setMaxFileOpeningThreads:(I)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public int maxFileOpeningThreads();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #42                 // Method org/rocksdb/DBOptions.maxFileOpeningThreads:()I
       7: ireturn

  public org.rocksdb.Options setMaxTotalWalSize(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #43                 // Method org/rocksdb/DBOptions.setMaxTotalWalSize:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long maxTotalWalSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #44                 // Method org/rocksdb/DBOptions.maxTotalWalSize:()J
       7: lreturn

  public org.rocksdb.Options setMaxOpenFiles(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #45                 // Method org/rocksdb/DBOptions.setMaxOpenFiles:(I)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean useFsync();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #46                 // Method org/rocksdb/DBOptions.useFsync:()Z
       7: ireturn

  public org.rocksdb.Options setUseFsync(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #47                 // Method org/rocksdb/DBOptions.setUseFsync:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setDbPaths(java.util.Collection<org.rocksdb.DbPath>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: aload_1
       5: invokevirtual #48                 // Method org/rocksdb/DBOptions.setDbPaths:(Ljava/util/Collection;)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public java.util.List<org.rocksdb.DbPath> dbPaths();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #49                 // Method org/rocksdb/DBOptions.dbPaths:()Ljava/util/List;
       7: areturn

  public java.lang.String dbLogDir();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #50                 // Method org/rocksdb/DBOptions.dbLogDir:()Ljava/lang/String;
       7: areturn

  public org.rocksdb.Options setDbLogDir(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: aload_1
       5: invokevirtual #51                 // Method org/rocksdb/DBOptions.setDbLogDir:(Ljava/lang/String;)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public java.lang.String walDir();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #52                 // Method org/rocksdb/DBOptions.walDir:()Ljava/lang/String;
       7: areturn

  public org.rocksdb.Options setWalDir(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: aload_1
       5: invokevirtual #53                 // Method org/rocksdb/DBOptions.setWalDir:(Ljava/lang/String;)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long deleteObsoleteFilesPeriodMicros();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #54                 // Method org/rocksdb/DBOptions.deleteObsoleteFilesPeriodMicros:()J
       7: lreturn

  public org.rocksdb.Options setDeleteObsoleteFilesPeriodMicros(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #55                 // Method org/rocksdb/DBOptions.setDeleteObsoleteFilesPeriodMicros:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public int maxBackgroundCompactions();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #56                 // Method org/rocksdb/DBOptions.maxBackgroundCompactions:()I
       7: ireturn

  public org.rocksdb.Options setStatistics(org.rocksdb.Statistics);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: aload_1
       5: invokevirtual #57                 // Method org/rocksdb/DBOptions.setStatistics:(Lorg/rocksdb/Statistics;)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Statistics statistics();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #58                 // Method org/rocksdb/DBOptions.statistics:()Lorg/rocksdb/Statistics;
       7: areturn

  public void setBaseBackgroundCompactions(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #59                 // Method org/rocksdb/DBOptions.setBaseBackgroundCompactions:(I)V
       8: return

  public int baseBackgroundCompactions();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #60                 // Method org/rocksdb/DBOptions.baseBackgroundCompactions:()I
       7: ireturn

  public org.rocksdb.Options setMaxBackgroundCompactions(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #61                 // Method org/rocksdb/DBOptions.setMaxBackgroundCompactions:(I)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public void setMaxSubcompactions(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #62                 // Method org/rocksdb/DBOptions.setMaxSubcompactions:(I)V
       8: return

  public int maxSubcompactions();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #63                 // Method org/rocksdb/DBOptions.maxSubcompactions:()I
       7: ireturn

  public int maxBackgroundFlushes();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #64                 // Method org/rocksdb/DBOptions.maxBackgroundFlushes:()I
       7: ireturn

  public org.rocksdb.Options setMaxBackgroundFlushes(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #9                  // Method org/rocksdb/DBOptions.setMaxBackgroundFlushes:(I)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public int maxBackgroundJobs();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #65                 // Method org/rocksdb/DBOptions.maxBackgroundJobs:()I
       7: ireturn

  public org.rocksdb.Options setMaxBackgroundJobs(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #66                 // Method org/rocksdb/DBOptions.setMaxBackgroundJobs:(I)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long maxLogFileSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #67                 // Method org/rocksdb/DBOptions.maxLogFileSize:()J
       7: lreturn

  public org.rocksdb.Options setMaxLogFileSize(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #68                 // Method org/rocksdb/DBOptions.setMaxLogFileSize:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long logFileTimeToRoll();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #69                 // Method org/rocksdb/DBOptions.logFileTimeToRoll:()J
       7: lreturn

  public org.rocksdb.Options setLogFileTimeToRoll(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #70                 // Method org/rocksdb/DBOptions.setLogFileTimeToRoll:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long keepLogFileNum();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #71                 // Method org/rocksdb/DBOptions.keepLogFileNum:()J
       7: lreturn

  public org.rocksdb.Options setKeepLogFileNum(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #72                 // Method org/rocksdb/DBOptions.setKeepLogFileNum:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setRecycleLogFileNum(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #73                 // Method org/rocksdb/DBOptions.setRecycleLogFileNum:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long recycleLogFileNum();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #74                 // Method org/rocksdb/DBOptions.recycleLogFileNum:()J
       7: lreturn

  public long maxManifestFileSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #75                 // Method org/rocksdb/DBOptions.maxManifestFileSize:()J
       7: lreturn

  public org.rocksdb.Options setMaxManifestFileSize(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #76                 // Method org/rocksdb/DBOptions.setMaxManifestFileSize:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setMaxTableFilesSizeFIFO(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #77                 // Method org/rocksdb/ColumnFamilyOptions.setMaxTableFilesSizeFIFO:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public long maxTableFilesSizeFIFO();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #78                 // Method org/rocksdb/ColumnFamilyOptions.maxTableFilesSizeFIFO:()J
       7: lreturn

  public int tableCacheNumshardbits();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #79                 // Method org/rocksdb/DBOptions.tableCacheNumshardbits:()I
       7: ireturn

  public org.rocksdb.Options setTableCacheNumshardbits(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #80                 // Method org/rocksdb/DBOptions.setTableCacheNumshardbits:(I)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long walTtlSeconds();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #81                 // Method org/rocksdb/DBOptions.walTtlSeconds:()J
       7: lreturn

  public org.rocksdb.Options setWalTtlSeconds(long);
    Code:
       0: getstatic     #82                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #83                 // String option walTtlSeconds will be ignored: Streams does not expose RocksDB ttl functionality
       5: invokeinterface #84,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      10: aload_0
      11: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
      14: lload_1
      15: invokevirtual #85                 // Method org/rocksdb/DBOptions.setWalTtlSeconds:(J)Lorg/rocksdb/DBOptions;
      18: pop
      19: aload_0
      20: areturn

  public long walSizeLimitMB();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #86                 // Method org/rocksdb/DBOptions.walSizeLimitMB:()J
       7: lreturn

  public org.rocksdb.Options setWalSizeLimitMB(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #87                 // Method org/rocksdb/DBOptions.setWalSizeLimitMB:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long manifestPreallocationSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #88                 // Method org/rocksdb/DBOptions.manifestPreallocationSize:()J
       7: lreturn

  public org.rocksdb.Options setManifestPreallocationSize(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #89                 // Method org/rocksdb/DBOptions.setManifestPreallocationSize:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setUseDirectReads(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #90                 // Method org/rocksdb/DBOptions.setUseDirectReads:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean useDirectReads();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #91                 // Method org/rocksdb/DBOptions.useDirectReads:()Z
       7: ireturn

  public org.rocksdb.Options setUseDirectIoForFlushAndCompaction(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #92                 // Method org/rocksdb/DBOptions.setUseDirectIoForFlushAndCompaction:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean useDirectIoForFlushAndCompaction();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #93                 // Method org/rocksdb/DBOptions.useDirectIoForFlushAndCompaction:()Z
       7: ireturn

  public org.rocksdb.Options setAllowFAllocate(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #94                 // Method org/rocksdb/DBOptions.setAllowFAllocate:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean allowFAllocate();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #95                 // Method org/rocksdb/DBOptions.allowFAllocate:()Z
       7: ireturn

  public boolean allowMmapReads();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #96                 // Method org/rocksdb/DBOptions.allowMmapReads:()Z
       7: ireturn

  public org.rocksdb.Options setAllowMmapReads(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #97                 // Method org/rocksdb/DBOptions.setAllowMmapReads:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean allowMmapWrites();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #98                 // Method org/rocksdb/DBOptions.allowMmapWrites:()Z
       7: ireturn

  public org.rocksdb.Options setAllowMmapWrites(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #99                 // Method org/rocksdb/DBOptions.setAllowMmapWrites:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean isFdCloseOnExec();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #100                // Method org/rocksdb/DBOptions.isFdCloseOnExec:()Z
       7: ireturn

  public org.rocksdb.Options setIsFdCloseOnExec(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #101                // Method org/rocksdb/DBOptions.setIsFdCloseOnExec:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public int statsDumpPeriodSec();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #102                // Method org/rocksdb/DBOptions.statsDumpPeriodSec:()I
       7: ireturn

  public org.rocksdb.Options setStatsDumpPeriodSec(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #103                // Method org/rocksdb/DBOptions.setStatsDumpPeriodSec:(I)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean adviseRandomOnOpen();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #104                // Method org/rocksdb/DBOptions.adviseRandomOnOpen:()Z
       7: ireturn

  public org.rocksdb.Options setAdviseRandomOnOpen(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #105                // Method org/rocksdb/DBOptions.setAdviseRandomOnOpen:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setDbWriteBufferSize(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #106                // Method org/rocksdb/DBOptions.setDbWriteBufferSize:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long dbWriteBufferSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #107                // Method org/rocksdb/DBOptions.dbWriteBufferSize:()J
       7: lreturn

  public org.rocksdb.Options setAccessHintOnCompactionStart(org.rocksdb.AccessHint);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: aload_1
       5: invokevirtual #108                // Method org/rocksdb/DBOptions.setAccessHintOnCompactionStart:(Lorg/rocksdb/AccessHint;)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.AccessHint accessHintOnCompactionStart();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #109                // Method org/rocksdb/DBOptions.accessHintOnCompactionStart:()Lorg/rocksdb/AccessHint;
       7: areturn

  public org.rocksdb.Options setNewTableReaderForCompactionInputs(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #110                // Method org/rocksdb/DBOptions.setNewTableReaderForCompactionInputs:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean newTableReaderForCompactionInputs();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #111                // Method org/rocksdb/DBOptions.newTableReaderForCompactionInputs:()Z
       7: ireturn

  public org.rocksdb.Options setCompactionReadaheadSize(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #112                // Method org/rocksdb/DBOptions.setCompactionReadaheadSize:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long compactionReadaheadSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #113                // Method org/rocksdb/DBOptions.compactionReadaheadSize:()J
       7: lreturn

  public org.rocksdb.Options setRandomAccessMaxBufferSize(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #114                // Method org/rocksdb/DBOptions.setRandomAccessMaxBufferSize:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long randomAccessMaxBufferSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #115                // Method org/rocksdb/DBOptions.randomAccessMaxBufferSize:()J
       7: lreturn

  public org.rocksdb.Options setWritableFileMaxBufferSize(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #116                // Method org/rocksdb/DBOptions.setWritableFileMaxBufferSize:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long writableFileMaxBufferSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #117                // Method org/rocksdb/DBOptions.writableFileMaxBufferSize:()J
       7: lreturn

  public boolean useAdaptiveMutex();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #118                // Method org/rocksdb/DBOptions.useAdaptiveMutex:()Z
       7: ireturn

  public org.rocksdb.Options setUseAdaptiveMutex(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #119                // Method org/rocksdb/DBOptions.setUseAdaptiveMutex:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long bytesPerSync();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #120                // Method org/rocksdb/DBOptions.bytesPerSync:()J
       7: lreturn

  public org.rocksdb.Options setBytesPerSync(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #121                // Method org/rocksdb/DBOptions.setBytesPerSync:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setWalBytesPerSync(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #122                // Method org/rocksdb/DBOptions.setWalBytesPerSync:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long walBytesPerSync();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #123                // Method org/rocksdb/DBOptions.walBytesPerSync:()J
       7: lreturn

  public org.rocksdb.Options setEnableThreadTracking(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #124                // Method org/rocksdb/DBOptions.setEnableThreadTracking:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean enableThreadTracking();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #125                // Method org/rocksdb/DBOptions.enableThreadTracking:()Z
       7: ireturn

  public org.rocksdb.Options setDelayedWriteRate(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #126                // Method org/rocksdb/DBOptions.setDelayedWriteRate:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long delayedWriteRate();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #127                // Method org/rocksdb/DBOptions.delayedWriteRate:()J
       7: lreturn

  public org.rocksdb.Options setAllowConcurrentMemtableWrite(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #128                // Method org/rocksdb/DBOptions.setAllowConcurrentMemtableWrite:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean allowConcurrentMemtableWrite();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #129                // Method org/rocksdb/DBOptions.allowConcurrentMemtableWrite:()Z
       7: ireturn

  public org.rocksdb.Options setEnableWriteThreadAdaptiveYield(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #130                // Method org/rocksdb/DBOptions.setEnableWriteThreadAdaptiveYield:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean enableWriteThreadAdaptiveYield();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #131                // Method org/rocksdb/DBOptions.enableWriteThreadAdaptiveYield:()Z
       7: ireturn

  public org.rocksdb.Options setWriteThreadMaxYieldUsec(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #132                // Method org/rocksdb/DBOptions.setWriteThreadMaxYieldUsec:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long writeThreadMaxYieldUsec();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #133                // Method org/rocksdb/DBOptions.writeThreadMaxYieldUsec:()J
       7: lreturn

  public org.rocksdb.Options setWriteThreadSlowYieldUsec(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: lload_1
       5: invokevirtual #134                // Method org/rocksdb/DBOptions.setWriteThreadSlowYieldUsec:(J)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public long writeThreadSlowYieldUsec();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #135                // Method org/rocksdb/DBOptions.writeThreadSlowYieldUsec:()J
       7: lreturn

  public org.rocksdb.Options setSkipStatsUpdateOnDbOpen(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #136                // Method org/rocksdb/DBOptions.setSkipStatsUpdateOnDbOpen:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean skipStatsUpdateOnDbOpen();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #137                // Method org/rocksdb/DBOptions.skipStatsUpdateOnDbOpen:()Z
       7: ireturn

  public org.rocksdb.Options setWalRecoveryMode(org.rocksdb.WALRecoveryMode);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: aload_1
       5: invokevirtual #138                // Method org/rocksdb/DBOptions.setWalRecoveryMode:(Lorg/rocksdb/WALRecoveryMode;)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.WALRecoveryMode walRecoveryMode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #139                // Method org/rocksdb/DBOptions.walRecoveryMode:()Lorg/rocksdb/WALRecoveryMode;
       7: areturn

  public org.rocksdb.Options setAllow2pc(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #140                // Method org/rocksdb/DBOptions.setAllow2pc:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean allow2pc();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #141                // Method org/rocksdb/DBOptions.allow2pc:()Z
       7: ireturn

  public org.rocksdb.Options setRowCache(org.rocksdb.Cache);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: aload_1
       5: invokevirtual #142                // Method org/rocksdb/DBOptions.setRowCache:(Lorg/rocksdb/Cache;)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Cache rowCache();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #143                // Method org/rocksdb/DBOptions.rowCache:()Lorg/rocksdb/Cache;
       7: areturn

  public org.rocksdb.Options setFailIfOptionsFileError(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #144                // Method org/rocksdb/DBOptions.setFailIfOptionsFileError:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean failIfOptionsFileError();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #145                // Method org/rocksdb/DBOptions.failIfOptionsFileError:()Z
       7: ireturn

  public org.rocksdb.Options setDumpMallocStats(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #146                // Method org/rocksdb/DBOptions.setDumpMallocStats:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean dumpMallocStats();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #147                // Method org/rocksdb/DBOptions.dumpMallocStats:()Z
       7: ireturn

  public org.rocksdb.Options setAvoidFlushDuringRecovery(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #148                // Method org/rocksdb/DBOptions.setAvoidFlushDuringRecovery:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean avoidFlushDuringRecovery();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #149                // Method org/rocksdb/DBOptions.avoidFlushDuringRecovery:()Z
       7: ireturn

  public org.rocksdb.Options setAvoidFlushDuringShutdown(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: iload_1
       5: invokevirtual #150                // Method org/rocksdb/DBOptions.setAvoidFlushDuringShutdown:(Z)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean avoidFlushDuringShutdown();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #151                // Method org/rocksdb/DBOptions.avoidFlushDuringShutdown:()Z
       7: ireturn

  public org.rocksdb.MemTableConfig memTableConfig();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #152                // Method org/rocksdb/ColumnFamilyOptions.memTableConfig:()Lorg/rocksdb/MemTableConfig;
       7: areturn

  public org.rocksdb.Options setMemTableConfig(org.rocksdb.MemTableConfig);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #153                // Method org/rocksdb/ColumnFamilyOptions.setMemTableConfig:(Lorg/rocksdb/MemTableConfig;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setRateLimiter(org.rocksdb.RateLimiter);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: aload_1
       5: invokevirtual #154                // Method org/rocksdb/DBOptions.setRateLimiter:(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setSstFileManager(org.rocksdb.SstFileManager);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: aload_1
       5: invokevirtual #155                // Method org/rocksdb/DBOptions.setSstFileManager:(Lorg/rocksdb/SstFileManager;)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setLogger(org.rocksdb.Logger);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: aload_1
       5: invokevirtual #156                // Method org/rocksdb/DBOptions.setLogger:(Lorg/rocksdb/Logger;)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setInfoLogLevel(org.rocksdb.InfoLogLevel);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: aload_1
       5: invokevirtual #157                // Method org/rocksdb/DBOptions.setInfoLogLevel:(Lorg/rocksdb/InfoLogLevel;)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.InfoLogLevel infoLogLevel();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #158                // Method org/rocksdb/DBOptions.infoLogLevel:()Lorg/rocksdb/InfoLogLevel;
       7: areturn

  public java.lang.String memTableFactoryName();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #159                // Method org/rocksdb/ColumnFamilyOptions.memTableFactoryName:()Ljava/lang/String;
       7: areturn

  public org.rocksdb.TableFormatConfig tableFormatConfig();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #160                // Method org/rocksdb/ColumnFamilyOptions.tableFormatConfig:()Lorg/rocksdb/TableFormatConfig;
       7: areturn

  public org.rocksdb.Options setTableFormatConfig(org.rocksdb.TableFormatConfig);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #161                // Method org/rocksdb/ColumnFamilyOptions.setTableFormatConfig:(Lorg/rocksdb/TableFormatConfig;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public java.lang.String tableFactoryName();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #162                // Method org/rocksdb/ColumnFamilyOptions.tableFactoryName:()Ljava/lang/String;
       7: areturn

  public org.rocksdb.Options useFixedLengthPrefixExtractor(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #163                // Method org/rocksdb/ColumnFamilyOptions.useFixedLengthPrefixExtractor:(I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options useCappedPrefixExtractor(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #164                // Method org/rocksdb/ColumnFamilyOptions.useCappedPrefixExtractor:(I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.CompressionType compressionType();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #165                // Method org/rocksdb/ColumnFamilyOptions.compressionType:()Lorg/rocksdb/CompressionType;
       7: areturn

  public org.rocksdb.Options setCompressionPerLevel(java.util.List<org.rocksdb.CompressionType>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #166                // Method org/rocksdb/ColumnFamilyOptions.setCompressionPerLevel:(Ljava/util/List;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public java.util.List<org.rocksdb.CompressionType> compressionPerLevel();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #167                // Method org/rocksdb/ColumnFamilyOptions.compressionPerLevel:()Ljava/util/List;
       7: areturn

  public org.rocksdb.Options setCompressionType(org.rocksdb.CompressionType);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #168                // Method org/rocksdb/ColumnFamilyOptions.setCompressionType:(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setBottommostCompressionType(org.rocksdb.CompressionType);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #169                // Method org/rocksdb/ColumnFamilyOptions.setBottommostCompressionType:(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.CompressionType bottommostCompressionType();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #170                // Method org/rocksdb/ColumnFamilyOptions.bottommostCompressionType:()Lorg/rocksdb/CompressionType;
       7: areturn

  public org.rocksdb.Options setCompressionOptions(org.rocksdb.CompressionOptions);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #171                // Method org/rocksdb/ColumnFamilyOptions.setCompressionOptions:(Lorg/rocksdb/CompressionOptions;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.CompressionOptions compressionOptions();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #172                // Method org/rocksdb/ColumnFamilyOptions.compressionOptions:()Lorg/rocksdb/CompressionOptions;
       7: areturn

  public org.rocksdb.CompactionStyle compactionStyle();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #173                // Method org/rocksdb/ColumnFamilyOptions.compactionStyle:()Lorg/rocksdb/CompactionStyle;
       7: areturn

  public org.rocksdb.Options setCompactionStyle(org.rocksdb.CompactionStyle);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #174                // Method org/rocksdb/ColumnFamilyOptions.setCompactionStyle:(Lorg/rocksdb/CompactionStyle;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public int numLevels();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #175                // Method org/rocksdb/ColumnFamilyOptions.numLevels:()I
       7: ireturn

  public org.rocksdb.Options setNumLevels(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #176                // Method org/rocksdb/ColumnFamilyOptions.setNumLevels:(I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public int levelZeroFileNumCompactionTrigger();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #177                // Method org/rocksdb/ColumnFamilyOptions.levelZeroFileNumCompactionTrigger:()I
       7: ireturn

  public org.rocksdb.Options setLevelZeroFileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #178                // Method org/rocksdb/ColumnFamilyOptions.setLevelZeroFileNumCompactionTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public int levelZeroSlowdownWritesTrigger();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #179                // Method org/rocksdb/ColumnFamilyOptions.levelZeroSlowdownWritesTrigger:()I
       7: ireturn

  public org.rocksdb.Options setLevelZeroSlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #180                // Method org/rocksdb/ColumnFamilyOptions.setLevelZeroSlowdownWritesTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public int levelZeroStopWritesTrigger();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #181                // Method org/rocksdb/ColumnFamilyOptions.levelZeroStopWritesTrigger:()I
       7: ireturn

  public org.rocksdb.Options setLevelZeroStopWritesTrigger(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #182                // Method org/rocksdb/ColumnFamilyOptions.setLevelZeroStopWritesTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public long targetFileSizeBase();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #183                // Method org/rocksdb/ColumnFamilyOptions.targetFileSizeBase:()J
       7: lreturn

  public org.rocksdb.Options setTargetFileSizeBase(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #184                // Method org/rocksdb/ColumnFamilyOptions.setTargetFileSizeBase:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public int targetFileSizeMultiplier();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #185                // Method org/rocksdb/ColumnFamilyOptions.targetFileSizeMultiplier:()I
       7: ireturn

  public org.rocksdb.Options setTargetFileSizeMultiplier(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #186                // Method org/rocksdb/ColumnFamilyOptions.setTargetFileSizeMultiplier:(I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setMaxBytesForLevelBase(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #187                // Method org/rocksdb/ColumnFamilyOptions.setMaxBytesForLevelBase:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public long maxBytesForLevelBase();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #188                // Method org/rocksdb/ColumnFamilyOptions.maxBytesForLevelBase:()J
       7: lreturn

  public org.rocksdb.Options setLevelCompactionDynamicLevelBytes(boolean);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #189                // Method org/rocksdb/ColumnFamilyOptions.setLevelCompactionDynamicLevelBytes:(Z)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean levelCompactionDynamicLevelBytes();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #190                // Method org/rocksdb/ColumnFamilyOptions.levelCompactionDynamicLevelBytes:()Z
       7: ireturn

  public double maxBytesForLevelMultiplier();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #191                // Method org/rocksdb/ColumnFamilyOptions.maxBytesForLevelMultiplier:()D
       7: dreturn

  public org.rocksdb.Options setMaxBytesForLevelMultiplier(double);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: dload_1
       5: invokevirtual #192                // Method org/rocksdb/ColumnFamilyOptions.setMaxBytesForLevelMultiplier:(D)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public long maxCompactionBytes();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #193                // Method org/rocksdb/ColumnFamilyOptions.maxCompactionBytes:()J
       7: lreturn

  public org.rocksdb.Options setMaxCompactionBytes(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #194                // Method org/rocksdb/ColumnFamilyOptions.setMaxCompactionBytes:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public long arenaBlockSize();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #195                // Method org/rocksdb/ColumnFamilyOptions.arenaBlockSize:()J
       7: lreturn

  public org.rocksdb.Options setArenaBlockSize(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #196                // Method org/rocksdb/ColumnFamilyOptions.setArenaBlockSize:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean disableAutoCompactions();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #197                // Method org/rocksdb/ColumnFamilyOptions.disableAutoCompactions:()Z
       7: ireturn

  public org.rocksdb.Options setDisableAutoCompactions(boolean);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #10                 // Method org/rocksdb/ColumnFamilyOptions.setDisableAutoCompactions:(Z)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public long maxSequentialSkipInIterations();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #198                // Method org/rocksdb/ColumnFamilyOptions.maxSequentialSkipInIterations:()J
       7: lreturn

  public org.rocksdb.Options setMaxSequentialSkipInIterations(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #199                // Method org/rocksdb/ColumnFamilyOptions.setMaxSequentialSkipInIterations:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean inplaceUpdateSupport();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #200                // Method org/rocksdb/ColumnFamilyOptions.inplaceUpdateSupport:()Z
       7: ireturn

  public org.rocksdb.Options setInplaceUpdateSupport(boolean);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #201                // Method org/rocksdb/ColumnFamilyOptions.setInplaceUpdateSupport:(Z)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public long inplaceUpdateNumLocks();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #202                // Method org/rocksdb/ColumnFamilyOptions.inplaceUpdateNumLocks:()J
       7: lreturn

  public org.rocksdb.Options setInplaceUpdateNumLocks(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #203                // Method org/rocksdb/ColumnFamilyOptions.setInplaceUpdateNumLocks:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public double memtablePrefixBloomSizeRatio();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #204                // Method org/rocksdb/ColumnFamilyOptions.memtablePrefixBloomSizeRatio:()D
       7: dreturn

  public org.rocksdb.Options setMemtablePrefixBloomSizeRatio(double);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: dload_1
       5: invokevirtual #205                // Method org/rocksdb/ColumnFamilyOptions.setMemtablePrefixBloomSizeRatio:(D)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public int bloomLocality();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #206                // Method org/rocksdb/ColumnFamilyOptions.bloomLocality:()I
       7: ireturn

  public org.rocksdb.Options setBloomLocality(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #207                // Method org/rocksdb/ColumnFamilyOptions.setBloomLocality:(I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public long maxSuccessiveMerges();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #208                // Method org/rocksdb/ColumnFamilyOptions.maxSuccessiveMerges:()J
       7: lreturn

  public org.rocksdb.Options setMaxSuccessiveMerges(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #209                // Method org/rocksdb/ColumnFamilyOptions.setMaxSuccessiveMerges:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public int minWriteBufferNumberToMerge();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #210                // Method org/rocksdb/ColumnFamilyOptions.minWriteBufferNumberToMerge:()I
       7: ireturn

  public org.rocksdb.Options setMinWriteBufferNumberToMerge(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #211                // Method org/rocksdb/ColumnFamilyOptions.setMinWriteBufferNumberToMerge:(I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setOptimizeFiltersForHits(boolean);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #212                // Method org/rocksdb/ColumnFamilyOptions.setOptimizeFiltersForHits:(Z)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean optimizeFiltersForHits();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #213                // Method org/rocksdb/ColumnFamilyOptions.optimizeFiltersForHits:()Z
       7: ireturn

  public org.rocksdb.Options setMemtableHugePageSize(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #214                // Method org/rocksdb/ColumnFamilyOptions.setMemtableHugePageSize:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public long memtableHugePageSize();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #215                // Method org/rocksdb/ColumnFamilyOptions.memtableHugePageSize:()J
       7: lreturn

  public org.rocksdb.Options setSoftPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #216                // Method org/rocksdb/ColumnFamilyOptions.setSoftPendingCompactionBytesLimit:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public long softPendingCompactionBytesLimit();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #217                // Method org/rocksdb/ColumnFamilyOptions.softPendingCompactionBytesLimit:()J
       7: lreturn

  public org.rocksdb.Options setHardPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: lload_1
       5: invokevirtual #218                // Method org/rocksdb/ColumnFamilyOptions.setHardPendingCompactionBytesLimit:(J)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public long hardPendingCompactionBytesLimit();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #219                // Method org/rocksdb/ColumnFamilyOptions.hardPendingCompactionBytesLimit:()J
       7: lreturn

  public org.rocksdb.Options setLevel0FileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #12                 // Method org/rocksdb/ColumnFamilyOptions.setLevel0FileNumCompactionTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public int level0FileNumCompactionTrigger();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #220                // Method org/rocksdb/ColumnFamilyOptions.level0FileNumCompactionTrigger:()I
       7: ireturn

  public org.rocksdb.Options setLevel0SlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #13                 // Method org/rocksdb/ColumnFamilyOptions.setLevel0SlowdownWritesTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public int level0SlowdownWritesTrigger();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #221                // Method org/rocksdb/ColumnFamilyOptions.level0SlowdownWritesTrigger:()I
       7: ireturn

  public org.rocksdb.Options setLevel0StopWritesTrigger(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #14                 // Method org/rocksdb/ColumnFamilyOptions.setLevel0StopWritesTrigger:(I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public int level0StopWritesTrigger();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #222                // Method org/rocksdb/ColumnFamilyOptions.level0StopWritesTrigger:()I
       7: ireturn

  public org.rocksdb.Options setMaxBytesForLevelMultiplierAdditional(int[]);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #223                // Method org/rocksdb/ColumnFamilyOptions.setMaxBytesForLevelMultiplierAdditional:([I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public int[] maxBytesForLevelMultiplierAdditional();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #224                // Method org/rocksdb/ColumnFamilyOptions.maxBytesForLevelMultiplierAdditional:()[I
       7: areturn

  public org.rocksdb.Options setParanoidFileChecks(boolean);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #225                // Method org/rocksdb/ColumnFamilyOptions.setParanoidFileChecks:(Z)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean paranoidFileChecks();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #34                 // Method org/rocksdb/ColumnFamilyOptions.paranoidFileChecks:()Z
       7: ireturn

  public org.rocksdb.Options setMaxWriteBufferNumberToMaintain(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #226                // Method org/rocksdb/ColumnFamilyOptions.setMaxWriteBufferNumberToMaintain:(I)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public int maxWriteBufferNumberToMaintain();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #227                // Method org/rocksdb/ColumnFamilyOptions.maxWriteBufferNumberToMaintain:()I
       7: ireturn

  public org.rocksdb.Options setCompactionPriority(org.rocksdb.CompactionPriority);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #228                // Method org/rocksdb/ColumnFamilyOptions.setCompactionPriority:(Lorg/rocksdb/CompactionPriority;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.CompactionPriority compactionPriority();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #229                // Method org/rocksdb/ColumnFamilyOptions.compactionPriority:()Lorg/rocksdb/CompactionPriority;
       7: areturn

  public org.rocksdb.Options setReportBgIoStats(boolean);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #230                // Method org/rocksdb/ColumnFamilyOptions.setReportBgIoStats:(Z)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean reportBgIoStats();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #231                // Method org/rocksdb/ColumnFamilyOptions.reportBgIoStats:()Z
       7: ireturn

  public org.rocksdb.Options setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #232                // Method org/rocksdb/ColumnFamilyOptions.setCompactionOptionsUniversal:(Lorg/rocksdb/CompactionOptionsUniversal;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.CompactionOptionsUniversal compactionOptionsUniversal();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #233                // Method org/rocksdb/ColumnFamilyOptions.compactionOptionsUniversal:()Lorg/rocksdb/CompactionOptionsUniversal;
       7: areturn

  public org.rocksdb.Options setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO);
    Code:
       0: getstatic     #82                 // Field LOG:Lorg/slf4j/Logger;
       3: invokestatic  #234                // Method logWarning:(Lorg/slf4j/Logger;)V
       6: aload_0
       7: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
      10: aload_1
      11: invokevirtual #235                // Method org/rocksdb/ColumnFamilyOptions.setCompactionOptionsFIFO:(Lorg/rocksdb/CompactionOptionsFIFO;)Lorg/rocksdb/ColumnFamilyOptions;
      14: pop
      15: aload_0
      16: areturn

  public org.rocksdb.CompactionOptionsFIFO compactionOptionsFIFO();
    Code:
       0: getstatic     #82                 // Field LOG:Lorg/slf4j/Logger;
       3: invokestatic  #234                // Method logWarning:(Lorg/slf4j/Logger;)V
       6: aload_0
       7: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
      10: invokevirtual #236                // Method org/rocksdb/ColumnFamilyOptions.compactionOptionsFIFO:()Lorg/rocksdb/CompactionOptionsFIFO;
      13: areturn

  public static void logWarning(org.slf4j.Logger);
    Code:
       0: aload_0
       1: ldc           #237                // String RocksDB\'s version will be bumped to version 6+ via KAFKA-8897 in a future release. If you use `org.rocksdb.CompactionOptionsFIFO#setTtl(long)` or `#ttl()` you will need to rewrite your code after KAFKA-8897 is resolved and set TTL via `org.rocksdb.Options` (or `org.rocksdb.ColumnFamilyOptions`).
       3: invokeinterface #84,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
       8: return

  public org.rocksdb.Options setForceConsistencyChecks(boolean);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: iload_1
       5: invokevirtual #238                // Method org/rocksdb/ColumnFamilyOptions.setForceConsistencyChecks:(Z)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public boolean forceConsistencyChecks();
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: invokevirtual #239                // Method org/rocksdb/ColumnFamilyOptions.forceConsistencyChecks:()Z
       7: ireturn

  public org.rocksdb.Options setWriteBufferManager(org.rocksdb.WriteBufferManager);
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: aload_1
       5: invokevirtual #240                // Method org/rocksdb/DBOptions.setWriteBufferManager:(Lorg/rocksdb/WriteBufferManager;)Lorg/rocksdb/DBOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.WriteBufferManager writeBufferManager();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #241                // Method org/rocksdb/DBOptions.writeBufferManager:()Lorg/rocksdb/WriteBufferManager;
       7: areturn

  public org.rocksdb.Options setCompactionFilter(org.rocksdb.AbstractCompactionFilter<? extends org.rocksdb.AbstractSlice<?>>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #242                // Method org/rocksdb/ColumnFamilyOptions.setCompactionFilter:(Lorg/rocksdb/AbstractCompactionFilter;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public org.rocksdb.Options setCompactionFilterFactory(org.rocksdb.AbstractCompactionFilterFactory<? extends org.rocksdb.AbstractCompactionFilter<?>>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
       4: aload_1
       5: invokevirtual #243                // Method org/rocksdb/ColumnFamilyOptions.setCompactionFilterFactory:(Lorg/rocksdb/AbstractCompactionFilterFactory;)Lorg/rocksdb/ColumnFamilyOptions;
       8: pop
       9: aload_0
      10: areturn

  public void close();
    Code:
       0: aload_0
       1: getfield      #2                  // Field dbOptions:Lorg/rocksdb/DBOptions;
       4: invokevirtual #244                // Method org/rocksdb/DBOptions.close:()V
       7: aload_0
       8: getfield      #3                  // Field columnFamilyOptions:Lorg/rocksdb/ColumnFamilyOptions;
      11: invokevirtual #245                // Method org/rocksdb/ColumnFamilyOptions.close:()V
      14: return

  public org.rocksdb.DBOptionsInterface setAvoidFlushDuringShutdown(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #246                // Method setAvoidFlushDuringShutdown:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAvoidFlushDuringRecovery(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #247                // Method setAvoidFlushDuringRecovery:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDumpMallocStats(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #248                // Method setDumpMallocStats:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setFailIfOptionsFileError(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #249                // Method setFailIfOptionsFileError:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setRowCache(org.rocksdb.Cache);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #250                // Method setRowCache:(Lorg/rocksdb/Cache;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllow2pc(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #251                // Method setAllow2pc:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalRecoveryMode(org.rocksdb.WALRecoveryMode);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #252                // Method setWalRecoveryMode:(Lorg/rocksdb/WALRecoveryMode;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setSkipStatsUpdateOnDbOpen(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #253                // Method setSkipStatsUpdateOnDbOpen:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWriteThreadSlowYieldUsec(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #254                // Method setWriteThreadSlowYieldUsec:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWriteThreadMaxYieldUsec(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #255                // Method setWriteThreadMaxYieldUsec:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setEnableWriteThreadAdaptiveYield(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #256                // Method setEnableWriteThreadAdaptiveYield:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllowConcurrentMemtableWrite(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #257                // Method setAllowConcurrentMemtableWrite:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDelayedWriteRate(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #258                // Method setDelayedWriteRate:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setEnableThreadTracking(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #259                // Method setEnableThreadTracking:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalBytesPerSync(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #260                // Method setWalBytesPerSync:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setBytesPerSync(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #261                // Method setBytesPerSync:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setUseAdaptiveMutex(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #262                // Method setUseAdaptiveMutex:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWritableFileMaxBufferSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #263                // Method setWritableFileMaxBufferSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setRandomAccessMaxBufferSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #264                // Method setRandomAccessMaxBufferSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setCompactionReadaheadSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #265                // Method setCompactionReadaheadSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setNewTableReaderForCompactionInputs(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #266                // Method setNewTableReaderForCompactionInputs:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAccessHintOnCompactionStart(org.rocksdb.AccessHint);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #267                // Method setAccessHintOnCompactionStart:(Lorg/rocksdb/AccessHint;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWriteBufferManager(org.rocksdb.WriteBufferManager);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #268                // Method setWriteBufferManager:(Lorg/rocksdb/WriteBufferManager;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDbWriteBufferSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #269                // Method setDbWriteBufferSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAdviseRandomOnOpen(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #270                // Method setAdviseRandomOnOpen:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setStatsDumpPeriodSec(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #271                // Method setStatsDumpPeriodSec:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setIsFdCloseOnExec(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #272                // Method setIsFdCloseOnExec:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllowMmapWrites(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #273                // Method setAllowMmapWrites:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllowMmapReads(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #274                // Method setAllowMmapReads:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllowFAllocate(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #275                // Method setAllowFAllocate:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setUseDirectIoForFlushAndCompaction(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #276                // Method setUseDirectIoForFlushAndCompaction:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setUseDirectReads(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #277                // Method setUseDirectReads:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setManifestPreallocationSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #278                // Method setManifestPreallocationSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalSizeLimitMB(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #279                // Method setWalSizeLimitMB:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalTtlSeconds(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #280                // Method setWalTtlSeconds:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setTableCacheNumshardbits(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #281                // Method setTableCacheNumshardbits:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxManifestFileSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #282                // Method setMaxManifestFileSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setRecycleLogFileNum(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #283                // Method setRecycleLogFileNum:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setKeepLogFileNum(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #284                // Method setKeepLogFileNum:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setLogFileTimeToRoll(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #285                // Method setLogFileTimeToRoll:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxLogFileSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #286                // Method setMaxLogFileSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxBackgroundJobs(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #287                // Method setMaxBackgroundJobs:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxBackgroundFlushes(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #288                // Method setMaxBackgroundFlushes:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxBackgroundCompactions(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #289                // Method setMaxBackgroundCompactions:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDeleteObsoleteFilesPeriodMicros(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #290                // Method setDeleteObsoleteFilesPeriodMicros:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #291                // Method setWalDir:(Ljava/lang/String;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDbLogDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #292                // Method setDbLogDir:(Ljava/lang/String;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDbPaths(java.util.Collection);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #293                // Method setDbPaths:(Ljava/util/Collection;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setUseFsync(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #294                // Method setUseFsync:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setStatistics(org.rocksdb.Statistics);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #295                // Method setStatistics:(Lorg/rocksdb/Statistics;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxTotalWalSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #296                // Method setMaxTotalWalSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxFileOpeningThreads(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #297                // Method setMaxFileOpeningThreads:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxOpenFiles(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #298                // Method setMaxOpenFiles:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setInfoLogLevel(org.rocksdb.InfoLogLevel);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #299                // Method setInfoLogLevel:(Lorg/rocksdb/InfoLogLevel;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setLogger(org.rocksdb.Logger);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #300                // Method setLogger:(Lorg/rocksdb/Logger;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setSstFileManager(org.rocksdb.SstFileManager);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #301                // Method setSstFileManager:(Lorg/rocksdb/SstFileManager;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setRateLimiter(org.rocksdb.RateLimiter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #302                // Method setRateLimiter:(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setParanoidChecks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #303                // Method setParanoidChecks:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setErrorIfExists(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #304                // Method setErrorIfExists:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setCreateMissingColumnFamilies(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #305                // Method setCreateMissingColumnFamilies:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setCreateIfMissing(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #306                // Method setCreateIfMissing:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setIncreaseParallelism(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #307                // Method setIncreaseParallelism:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface setEnv(org.rocksdb.Env);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #308                // Method setEnv:(Lorg/rocksdb/Env;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.DBOptionsInterface optimizeForSmallDb();
    Code:
       0: aload_0
       1: invokevirtual #309                // Method optimizeForSmallDb:()Lorg/rocksdb/Options;
       4: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setCompressionOptions(org.rocksdb.CompressionOptions);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #310                // Method setCompressionOptions:(Lorg/rocksdb/CompressionOptions;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setBottommostCompressionType(org.rocksdb.CompressionType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #311                // Method setBottommostCompressionType:(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setTableFormatConfig(org.rocksdb.TableFormatConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #312                // Method setTableFormatConfig:(Lorg/rocksdb/TableFormatConfig;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMemTableConfig(org.rocksdb.MemTableConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #313                // Method setMemTableConfig:(Lorg/rocksdb/MemTableConfig;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMaxTableFilesSizeFIFO(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #314                // Method setMaxTableFilesSizeFIFO:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMaxBytesForLevelMultiplier(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #315                // Method setMaxBytesForLevelMultiplier:(D)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroStopWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #316                // Method setLevelZeroStopWritesTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroSlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #317                // Method setLevelZeroSlowdownWritesTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroFileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #318                // Method setLevelZeroFileNumCompactionTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface useCappedPrefixExtractor(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #319                // Method useCappedPrefixExtractor:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface useFixedLengthPrefixExtractor(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #320                // Method useFixedLengthPrefixExtractor:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMergeOperator(org.rocksdb.MergeOperator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #321                // Method setMergeOperator:(Lorg/rocksdb/MergeOperator;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setMergeOperatorName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #322                // Method setMergeOperatorName:(Ljava/lang/String;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setComparator(org.rocksdb.AbstractComparator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #323                // Method setComparator:(Lorg/rocksdb/AbstractComparator;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setComparator(org.rocksdb.BuiltinComparator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #324                // Method setComparator:(Lorg/rocksdb/BuiltinComparator;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeUniversalStyleCompaction(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #325                // Method optimizeUniversalStyleCompaction:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeUniversalStyleCompaction();
    Code:
       0: aload_0
       1: invokevirtual #326                // Method optimizeUniversalStyleCompaction:()Lorg/rocksdb/Options;
       4: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeLevelStyleCompaction(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #327                // Method optimizeLevelStyleCompaction:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeLevelStyleCompaction();
    Code:
       0: aload_0
       1: invokevirtual #328                // Method optimizeLevelStyleCompaction:()Lorg/rocksdb/Options;
       4: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeForPointLookup(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #329                // Method optimizeForPointLookup:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeForSmallDb();
    Code:
       0: aload_0
       1: invokevirtual #309                // Method optimizeForSmallDb:()Lorg/rocksdb/Options;
       4: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setForceConsistencyChecks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #330                // Method setForceConsistencyChecks:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setOptimizeFiltersForHits(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #331                // Method setOptimizeFiltersForHits:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #332                // Method setCompactionOptionsFIFO:(Lorg/rocksdb/CompactionOptionsFIFO;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #333                // Method setCompactionOptionsUniversal:(Lorg/rocksdb/CompactionOptionsUniversal;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionPriority(org.rocksdb.CompactionPriority);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #334                // Method setCompactionPriority:(Lorg/rocksdb/CompactionPriority;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface setCompactionStyle(org.rocksdb.CompactionStyle);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #335                // Method setCompactionStyle:(Lorg/rocksdb/CompactionStyle;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMaxCompactionBytes(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #336                // Method setMaxCompactionBytes:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setLevelCompactionDynamicLevelBytes(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #337                // Method setLevelCompactionDynamicLevelBytes:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setNumLevels(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #338                // Method setNumLevels:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompressionPerLevel(java.util.List);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #339                // Method setCompressionPerLevel:(Ljava/util/List;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setBloomLocality(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #340                // Method setBloomLocality:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setInplaceUpdateSupport(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #341                // Method setInplaceUpdateSupport:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMaxWriteBufferNumberToMaintain(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #342                // Method setMaxWriteBufferNumberToMaintain:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMinWriteBufferNumberToMerge(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #343                // Method setMinWriteBufferNumberToMerge:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setCompressionType(org.rocksdb.CompressionType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #344                // Method setCompressionType:(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxBytesForLevelBase(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #345                // Method setMaxBytesForLevelBase:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxCompactionBytes(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #336                // Method setMaxCompactionBytes:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setLevel0FileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #346                // Method setLevel0FileNumCompactionTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setDisableAutoCompactions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #347                // Method setDisableAutoCompactions:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setWriteBufferSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #348                // Method setWriteBufferSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setReportBgIoStats(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #349                // Method setReportBgIoStats:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setParanoidFileChecks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #350                // Method setParanoidFileChecks:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxSuccessiveMerges(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #351                // Method setMaxSuccessiveMerges:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxSequentialSkipInIterations(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #352                // Method setMaxSequentialSkipInIterations:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setHardPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #353                // Method setHardPendingCompactionBytesLimit:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setSoftPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #354                // Method setSoftPendingCompactionBytesLimit:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxBytesForLevelMultiplierAdditional(int[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #355                // Method setMaxBytesForLevelMultiplierAdditional:([I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxBytesForLevelMultiplier(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #315                // Method setMaxBytesForLevelMultiplier:(D)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setTargetFileSizeMultiplier(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #356                // Method setTargetFileSizeMultiplier:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setTargetFileSizeBase(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #357                // Method setTargetFileSizeBase:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setLevel0StopWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #358                // Method setLevel0StopWritesTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setLevel0SlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #359                // Method setLevel0SlowdownWritesTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setArenaBlockSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #360                // Method setArenaBlockSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMemtableHugePageSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #361                // Method setMemtableHugePageSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMemtablePrefixBloomSizeRatio(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #362                // Method setMemtablePrefixBloomSizeRatio:(D)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setInplaceUpdateNumLocks(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #363                // Method setInplaceUpdateNumLocks:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxWriteBufferNumber(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #364                // Method setMaxWriteBufferNumber:(I)Lorg/rocksdb/Options;
       5: areturn

  static {};
    Code:
       0: ldc_w         #365                // class org/apache/kafka/streams/state/internals/RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter
       3: invokestatic  #366                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       6: putstatic     #82                 // Field LOG:Lorg/slf4j/Logger;
       9: return
}
