Compiled from "GroupedStreamAggregateBuilder.java"
class org.apache.kafka.streams.kstream.internals.GroupedStreamAggregateBuilder<K, V> {
  private final org.apache.kafka.streams.kstream.internals.InternalStreamsBuilder builder;

  private final org.apache.kafka.common.serialization.Serde<K> keySerde;

  private final org.apache.kafka.common.serialization.Serde<V> valueSerde;

  private final boolean repartitionRequired;

  private final java.lang.String userProvidedRepartitionTopicName;

  private final java.util.Set<java.lang.String> subTopologySourceNodes;

  private final java.lang.String name;

  private final org.apache.kafka.streams.kstream.internals.graph.StreamsGraphNode streamsGraphNode;

  private org.apache.kafka.streams.kstream.internals.graph.StreamsGraphNode repartitionNode;

  final org.apache.kafka.streams.kstream.Initializer<java.lang.Long> countInitializer;

  final org.apache.kafka.streams.kstream.Aggregator<K, V, java.lang.Long> countAggregator;

  final org.apache.kafka.streams.kstream.Initializer<V> reduceInitializer;

  static final boolean $assertionsDisabled;

  org.apache.kafka.streams.kstream.internals.GroupedStreamAggregateBuilder(org.apache.kafka.streams.kstream.internals.InternalStreamsBuilder, org.apache.kafka.streams.kstream.internals.GroupedInternal<K, V>, boolean, java.util.Set<java.lang.String>, java.lang.String, org.apache.kafka.streams.kstream.internals.graph.StreamsGraphNode);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokedynamic #2,  0              // InvokeDynamic #0:apply:()Lorg/apache/kafka/streams/kstream/Initializer;
      10: putfield      #3                  // Field countInitializer:Lorg/apache/kafka/streams/kstream/Initializer;
      13: aload_0
      14: invokedynamic #4,  0              // InvokeDynamic #1:apply:()Lorg/apache/kafka/streams/kstream/Aggregator;
      19: putfield      #5                  // Field countAggregator:Lorg/apache/kafka/streams/kstream/Aggregator;
      22: aload_0
      23: invokedynamic #6,  0              // InvokeDynamic #2:apply:()Lorg/apache/kafka/streams/kstream/Initializer;
      28: putfield      #7                  // Field reduceInitializer:Lorg/apache/kafka/streams/kstream/Initializer;
      31: aload_0
      32: aload_1
      33: putfield      #8                  // Field builder:Lorg/apache/kafka/streams/kstream/internals/InternalStreamsBuilder;
      36: aload_0
      37: aload_2
      38: invokevirtual #9                  // Method org/apache/kafka/streams/kstream/internals/GroupedInternal.keySerde:()Lorg/apache/kafka/common/serialization/Serde;
      41: putfield      #10                 // Field keySerde:Lorg/apache/kafka/common/serialization/Serde;
      44: aload_0
      45: aload_2
      46: invokevirtual #11                 // Method org/apache/kafka/streams/kstream/internals/GroupedInternal.valueSerde:()Lorg/apache/kafka/common/serialization/Serde;
      49: putfield      #12                 // Field valueSerde:Lorg/apache/kafka/common/serialization/Serde;
      52: aload_0
      53: iload_3
      54: putfield      #13                 // Field repartitionRequired:Z
      57: aload_0
      58: aload         4
      60: putfield      #14                 // Field subTopologySourceNodes:Ljava/util/Set;
      63: aload_0
      64: aload         5
      66: putfield      #15                 // Field name:Ljava/lang/String;
      69: aload_0
      70: aload         6
      72: putfield      #16                 // Field streamsGraphNode:Lorg/apache/kafka/streams/kstream/internals/graph/StreamsGraphNode;
      75: aload_0
      76: aload_2
      77: invokevirtual #17                 // Method org/apache/kafka/streams/kstream/internals/GroupedInternal.name:()Ljava/lang/String;
      80: putfield      #18                 // Field userProvidedRepartitionTopicName:Ljava/lang/String;
      83: return

  <KR, VR> org.apache.kafka.streams.kstream.KTable<KR, VR> build(org.apache.kafka.streams.kstream.internals.NamedInternal, org.apache.kafka.streams.state.StoreBuilder<?>, org.apache.kafka.streams.kstream.internals.KStreamAggProcessorSupplier<K, KR, V, VR>, java.lang.String, org.apache.kafka.common.serialization.Serde<KR>, org.apache.kafka.common.serialization.Serde<VR>);
    Code:
       0: getstatic     #19                 // Field $assertionsDisabled:Z
       3: ifne          33
       6: aload         4
       8: ifnull        33
      11: aload         4
      13: aload_2
      14: invokeinterface #20,  1           // InterfaceMethod org/apache/kafka/streams/state/StoreBuilder.name:()Ljava/lang/String;
      19: invokevirtual #21                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      22: ifne          33
      25: new           #22                 // class java/lang/AssertionError
      28: dup
      29: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      32: athrow
      33: aload_1
      34: invokevirtual #24                 // Method org/apache/kafka/streams/kstream/internals/NamedInternal.name:()Ljava/lang/String;
      37: astore        7
      39: aload_0
      40: getfield      #15                 // Field name:Ljava/lang/String;
      43: astore        8
      45: aload_0
      46: getfield      #16                 // Field streamsGraphNode:Lorg/apache/kafka/streams/kstream/internals/graph/StreamsGraphNode;
      49: astore        9
      51: aload_0
      52: getfield      #13                 // Field repartitionRequired:Z
      55: ifeq          137
      58: invokestatic  #25                 // Method org/apache/kafka/streams/kstream/internals/graph/OptimizableRepartitionNode.optimizableRepartitionNodeBuilder:()Lorg/apache/kafka/streams/kstream/internals/graph/OptimizableRepartitionNode$OptimizableRepartitionNodeBuilder;
      61: astore        10
      63: aload_0
      64: getfield      #18                 // Field userProvidedRepartitionTopicName:Ljava/lang/String;
      67: ifnull        77
      70: aload_0
      71: getfield      #18                 // Field userProvidedRepartitionTopicName:Ljava/lang/String;
      74: goto          83
      77: aload_2
      78: invokeinterface #20,  1           // InterfaceMethod org/apache/kafka/streams/state/StoreBuilder.name:()Ljava/lang/String;
      83: astore        11
      85: aload_0
      86: aload         11
      88: aload         10
      90: invokespecial #26                 // Method createRepartitionSource:(Ljava/lang/String;Lorg/apache/kafka/streams/kstream/internals/graph/OptimizableRepartitionNode$OptimizableRepartitionNodeBuilder;)Ljava/lang/String;
      93: astore        8
      95: aload_0
      96: getfield      #27                 // Field repartitionNode:Lorg/apache/kafka/streams/kstream/internals/graph/StreamsGraphNode;
      99: ifnull        109
     102: aload_0
     103: getfield      #18                 // Field userProvidedRepartitionTopicName:Ljava/lang/String;
     106: ifnonnull     118
     109: aload_0
     110: aload         10
     112: invokevirtual #28                 // Method org/apache/kafka/streams/kstream/internals/graph/OptimizableRepartitionNode$OptimizableRepartitionNodeBuilder.build:()Lorg/apache/kafka/streams/kstream/internals/graph/OptimizableRepartitionNode;
     115: putfield      #27                 // Field repartitionNode:Lorg/apache/kafka/streams/kstream/internals/graph/StreamsGraphNode;
     118: aload_0
     119: getfield      #8                  // Field builder:Lorg/apache/kafka/streams/kstream/internals/InternalStreamsBuilder;
     122: aload         9
     124: aload_0
     125: getfield      #27                 // Field repartitionNode:Lorg/apache/kafka/streams/kstream/internals/graph/StreamsGraphNode;
     128: invokevirtual #29                 // Method org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.addGraphNode:(Lorg/apache/kafka/streams/kstream/internals/graph/StreamsGraphNode;Lorg/apache/kafka/streams/kstream/internals/graph/StreamsGraphNode;)V
     131: aload_0
     132: getfield      #27                 // Field repartitionNode:Lorg/apache/kafka/streams/kstream/internals/graph/StreamsGraphNode;
     135: astore        9
     137: new           #30                 // class org/apache/kafka/streams/kstream/internals/graph/StatefulProcessorNode
     140: dup
     141: aload         7
     143: new           #31                 // class org/apache/kafka/streams/kstream/internals/graph/ProcessorParameters
     146: dup
     147: aload_3
     148: aload         7
     150: invokespecial #32                 // Method org/apache/kafka/streams/kstream/internals/graph/ProcessorParameters."<init>":(Lorg/apache/kafka/streams/processor/ProcessorSupplier;Ljava/lang/String;)V
     153: aload_2
     154: invokespecial #33                 // Method org/apache/kafka/streams/kstream/internals/graph/StatefulProcessorNode."<init>":(Ljava/lang/String;Lorg/apache/kafka/streams/kstream/internals/graph/ProcessorParameters;Lorg/apache/kafka/streams/state/StoreBuilder;)V
     157: astore        10
     159: aload_0
     160: getfield      #8                  // Field builder:Lorg/apache/kafka/streams/kstream/internals/InternalStreamsBuilder;
     163: aload         9
     165: aload         10
     167: invokevirtual #29                 // Method org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.addGraphNode:(Lorg/apache/kafka/streams/kstream/internals/graph/StreamsGraphNode;Lorg/apache/kafka/streams/kstream/internals/graph/StreamsGraphNode;)V
     170: new           #34                 // class org/apache/kafka/streams/kstream/internals/KTableImpl
     173: dup
     174: aload         7
     176: aload         5
     178: aload         6
     180: aload         8
     182: aload_0
     183: getfield      #15                 // Field name:Ljava/lang/String;
     186: invokevirtual #21                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     189: ifeq          199
     192: aload_0
     193: getfield      #14                 // Field subTopologySourceNodes:Ljava/util/Set;
     196: goto          204
     199: aload         8
     201: invokestatic  #35                 // Method java/util/Collections.singleton:(Ljava/lang/Object;)Ljava/util/Set;
     204: aload         4
     206: aload_3
     207: aload         10
     209: aload_0
     210: getfield      #8                  // Field builder:Lorg/apache/kafka/streams/kstream/internals/InternalStreamsBuilder;
     213: invokespecial #36                 // Method org/apache/kafka/streams/kstream/internals/KTableImpl."<init>":(Ljava/lang/String;Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;Ljava/util/Set;Ljava/lang/String;Lorg/apache/kafka/streams/processor/ProcessorSupplier;Lorg/apache/kafka/streams/kstream/internals/graph/StreamsGraphNode;Lorg/apache/kafka/streams/kstream/internals/InternalStreamsBuilder;)V
     216: areturn

  private java.lang.String createRepartitionSource(java.lang.String, org.apache.kafka.streams.kstream.internals.graph.OptimizableRepartitionNode$OptimizableRepartitionNodeBuilder<K, V>);
    Code:
       0: aload_0
       1: getfield      #8                  // Field builder:Lorg/apache/kafka/streams/kstream/internals/InternalStreamsBuilder;
       4: aload_0
       5: getfield      #10                 // Field keySerde:Lorg/apache/kafka/common/serialization/Serde;
       8: aload_0
       9: getfield      #12                 // Field valueSerde:Lorg/apache/kafka/common/serialization/Serde;
      12: aload_1
      13: aconst_null
      14: aload_2
      15: invokestatic  #37                 // Method org/apache/kafka/streams/kstream/internals/KStreamImpl.createRepartitionedSource:(Lorg/apache/kafka/streams/kstream/internals/InternalStreamsBuilder;Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;Ljava/lang/String;Lorg/apache/kafka/streams/processor/StreamPartitioner;Lorg/apache/kafka/streams/kstream/internals/graph/BaseRepartitionNode$BaseRepartitionNodeBuilder;)Ljava/lang/String;
      18: areturn

  private static java.lang.Object lambda$new$2();
    Code:
       0: aconst_null
       1: areturn

  private static java.lang.Long lambda$new$1(java.lang.Object, java.lang.Object, java.lang.Long);
    Code:
       0: aload_2
       1: invokevirtual #38                 // Method java/lang/Long.longValue:()J
       4: lconst_1
       5: ladd
       6: invokestatic  #39                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       9: areturn

  private static java.lang.Long lambda$new$0();
    Code:
       0: lconst_0
       1: invokestatic  #39                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       4: areturn

  static {};
    Code:
       0: ldc           #40                 // class org/apache/kafka/streams/kstream/internals/GroupedStreamAggregateBuilder
       2: invokevirtual #41                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #19                 // Field $assertionsDisabled:Z
      16: return
}
