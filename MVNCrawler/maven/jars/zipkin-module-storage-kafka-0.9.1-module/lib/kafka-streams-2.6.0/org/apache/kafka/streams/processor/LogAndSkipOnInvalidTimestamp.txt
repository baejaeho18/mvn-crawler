Compiled from "LogAndSkipOnInvalidTimestamp.java"
public class org.apache.kafka.streams.processor.LogAndSkipOnInvalidTimestamp extends org.apache.kafka.streams.processor.ExtractRecordMetadataTimestamp {
  private static final org.slf4j.Logger log;

  public org.apache.kafka.streams.processor.LogAndSkipOnInvalidTimestamp();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/kafka/streams/processor/ExtractRecordMetadataTimestamp."<init>":()V
       4: return

  public long onInvalidTimestamp(org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object>, long, long);
    Code:
       0: getstatic     #2                  // Field log:Lorg/slf4j/Logger;
       3: ldc           #3                  // String Input record {} will be dropped because it has an invalid (negative) timestamp.
       5: aload_1
       6: invokeinterface #4,  3            // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      11: lload_2
      12: lreturn

  public long extract(org.apache.kafka.clients.consumer.ConsumerRecord, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: invokespecial #5                  // Method org/apache/kafka/streams/processor/ExtractRecordMetadataTimestamp.extract:(Lorg/apache/kafka/clients/consumer/ConsumerRecord;J)J
       6: lreturn

  static {};
    Code:
       0: ldc           #6                  // class org/apache/kafka/streams/processor/LogAndSkipOnInvalidTimestamp
       2: invokestatic  #7                  // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #2                  // Field log:Lorg/slf4j/Logger;
       8: return
}
