Compiled from "KTable.java"
public interface org.apache.kafka.streams.kstream.KTable<K, V> {
  public abstract org.apache.kafka.streams.kstream.KTable<K, V> filter(org.apache.kafka.streams.kstream.Predicate<? super K, ? super V>);

  public abstract org.apache.kafka.streams.kstream.KTable<K, V> filter(org.apache.kafka.streams.kstream.Predicate<? super K, ? super V>, org.apache.kafka.streams.kstream.Named);

  public abstract org.apache.kafka.streams.kstream.KTable<K, V> filter(org.apache.kafka.streams.kstream.Predicate<? super K, ? super V>, org.apache.kafka.streams.kstream.Materialized<K, V, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract org.apache.kafka.streams.kstream.KTable<K, V> filter(org.apache.kafka.streams.kstream.Predicate<? super K, ? super V>, org.apache.kafka.streams.kstream.Named, org.apache.kafka.streams.kstream.Materialized<K, V, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract org.apache.kafka.streams.kstream.KTable<K, V> filterNot(org.apache.kafka.streams.kstream.Predicate<? super K, ? super V>);

  public abstract org.apache.kafka.streams.kstream.KTable<K, V> filterNot(org.apache.kafka.streams.kstream.Predicate<? super K, ? super V>, org.apache.kafka.streams.kstream.Named);

  public abstract org.apache.kafka.streams.kstream.KTable<K, V> filterNot(org.apache.kafka.streams.kstream.Predicate<? super K, ? super V>, org.apache.kafka.streams.kstream.Materialized<K, V, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract org.apache.kafka.streams.kstream.KTable<K, V> filterNot(org.apache.kafka.streams.kstream.Predicate<? super K, ? super V>, org.apache.kafka.streams.kstream.Named, org.apache.kafka.streams.kstream.Materialized<K, V, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract <VR> org.apache.kafka.streams.kstream.KTable<K, VR> mapValues(org.apache.kafka.streams.kstream.ValueMapper<? super V, ? extends VR>);

  public abstract <VR> org.apache.kafka.streams.kstream.KTable<K, VR> mapValues(org.apache.kafka.streams.kstream.ValueMapper<? super V, ? extends VR>, org.apache.kafka.streams.kstream.Named);

  public abstract <VR> org.apache.kafka.streams.kstream.KTable<K, VR> mapValues(org.apache.kafka.streams.kstream.ValueMapperWithKey<? super K, ? super V, ? extends VR>);

  public abstract <VR> org.apache.kafka.streams.kstream.KTable<K, VR> mapValues(org.apache.kafka.streams.kstream.ValueMapperWithKey<? super K, ? super V, ? extends VR>, org.apache.kafka.streams.kstream.Named);

  public abstract <VR> org.apache.kafka.streams.kstream.KTable<K, VR> mapValues(org.apache.kafka.streams.kstream.ValueMapper<? super V, ? extends VR>, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract <VR> org.apache.kafka.streams.kstream.KTable<K, VR> mapValues(org.apache.kafka.streams.kstream.ValueMapper<? super V, ? extends VR>, org.apache.kafka.streams.kstream.Named, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract <VR> org.apache.kafka.streams.kstream.KTable<K, VR> mapValues(org.apache.kafka.streams.kstream.ValueMapperWithKey<? super K, ? super V, ? extends VR>, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract <VR> org.apache.kafka.streams.kstream.KTable<K, VR> mapValues(org.apache.kafka.streams.kstream.ValueMapperWithKey<? super K, ? super V, ? extends VR>, org.apache.kafka.streams.kstream.Named, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract org.apache.kafka.streams.kstream.KStream<K, V> toStream();

  public abstract org.apache.kafka.streams.kstream.KStream<K, V> toStream(org.apache.kafka.streams.kstream.Named);

  public abstract <KR> org.apache.kafka.streams.kstream.KStream<KR, V> toStream(org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, ? extends KR>);

  public abstract <KR> org.apache.kafka.streams.kstream.KStream<KR, V> toStream(org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, ? extends KR>, org.apache.kafka.streams.kstream.Named);

  public abstract org.apache.kafka.streams.kstream.KTable<K, V> suppress(org.apache.kafka.streams.kstream.Suppressed<? super K>);

  public abstract <VR> org.apache.kafka.streams.kstream.KTable<K, VR> transformValues(org.apache.kafka.streams.kstream.ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR>, java.lang.String...);

  public abstract <VR> org.apache.kafka.streams.kstream.KTable<K, VR> transformValues(org.apache.kafka.streams.kstream.ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR>, org.apache.kafka.streams.kstream.Named, java.lang.String...);

  public abstract <VR> org.apache.kafka.streams.kstream.KTable<K, VR> transformValues(org.apache.kafka.streams.kstream.ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR>, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>, java.lang.String...);

  public abstract <VR> org.apache.kafka.streams.kstream.KTable<K, VR> transformValues(org.apache.kafka.streams.kstream.ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR>, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>, org.apache.kafka.streams.kstream.Named, java.lang.String...);

  public abstract <KR, VR> org.apache.kafka.streams.kstream.KGroupedTable<KR, VR> groupBy(org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, org.apache.kafka.streams.KeyValue<KR, VR>>);

  public abstract <KR, VR> org.apache.kafka.streams.kstream.KGroupedTable<KR, VR> groupBy(org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, org.apache.kafka.streams.KeyValue<KR, VR>>, org.apache.kafka.streams.kstream.Serialized<KR, VR>);

  public abstract <KR, VR> org.apache.kafka.streams.kstream.KGroupedTable<KR, VR> groupBy(org.apache.kafka.streams.kstream.KeyValueMapper<? super K, ? super V, org.apache.kafka.streams.KeyValue<KR, VR>>, org.apache.kafka.streams.kstream.Grouped<KR, VR>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KTable<K, VR> join(org.apache.kafka.streams.kstream.KTable<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KTable<K, VR> join(org.apache.kafka.streams.kstream.KTable<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.Named);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KTable<K, VR> join(org.apache.kafka.streams.kstream.KTable<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KTable<K, VR> join(org.apache.kafka.streams.kstream.KTable<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.Named, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KTable<K, VR> leftJoin(org.apache.kafka.streams.kstream.KTable<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KTable<K, VR> leftJoin(org.apache.kafka.streams.kstream.KTable<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.Named);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KTable<K, VR> leftJoin(org.apache.kafka.streams.kstream.KTable<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KTable<K, VR> leftJoin(org.apache.kafka.streams.kstream.KTable<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.Named, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KTable<K, VR> outerJoin(org.apache.kafka.streams.kstream.KTable<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KTable<K, VR> outerJoin(org.apache.kafka.streams.kstream.KTable<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.Named);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KTable<K, VR> outerJoin(org.apache.kafka.streams.kstream.KTable<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract <VO, VR> org.apache.kafka.streams.kstream.KTable<K, VR> outerJoin(org.apache.kafka.streams.kstream.KTable<K, VO>, org.apache.kafka.streams.kstream.ValueJoiner<? super V, ? super VO, ? extends VR>, org.apache.kafka.streams.kstream.Named, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract <VR, KO, VO> org.apache.kafka.streams.kstream.KTable<K, VR> join(org.apache.kafka.streams.kstream.KTable<KO, VO>, java.util.function.Function<V, KO>, org.apache.kafka.streams.kstream.ValueJoiner<V, VO, VR>);

  public abstract <VR, KO, VO> org.apache.kafka.streams.kstream.KTable<K, VR> join(org.apache.kafka.streams.kstream.KTable<KO, VO>, java.util.function.Function<V, KO>, org.apache.kafka.streams.kstream.ValueJoiner<V, VO, VR>, org.apache.kafka.streams.kstream.Named);

  public abstract <VR, KO, VO> org.apache.kafka.streams.kstream.KTable<K, VR> join(org.apache.kafka.streams.kstream.KTable<KO, VO>, java.util.function.Function<V, KO>, org.apache.kafka.streams.kstream.ValueJoiner<V, VO, VR>, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract <VR, KO, VO> org.apache.kafka.streams.kstream.KTable<K, VR> join(org.apache.kafka.streams.kstream.KTable<KO, VO>, java.util.function.Function<V, KO>, org.apache.kafka.streams.kstream.ValueJoiner<V, VO, VR>, org.apache.kafka.streams.kstream.Named, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract <VR, KO, VO> org.apache.kafka.streams.kstream.KTable<K, VR> leftJoin(org.apache.kafka.streams.kstream.KTable<KO, VO>, java.util.function.Function<V, KO>, org.apache.kafka.streams.kstream.ValueJoiner<V, VO, VR>);

  public abstract <VR, KO, VO> org.apache.kafka.streams.kstream.KTable<K, VR> leftJoin(org.apache.kafka.streams.kstream.KTable<KO, VO>, java.util.function.Function<V, KO>, org.apache.kafka.streams.kstream.ValueJoiner<V, VO, VR>, org.apache.kafka.streams.kstream.Named);

  public abstract <VR, KO, VO> org.apache.kafka.streams.kstream.KTable<K, VR> leftJoin(org.apache.kafka.streams.kstream.KTable<KO, VO>, java.util.function.Function<V, KO>, org.apache.kafka.streams.kstream.ValueJoiner<V, VO, VR>, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract <VR, KO, VO> org.apache.kafka.streams.kstream.KTable<K, VR> leftJoin(org.apache.kafka.streams.kstream.KTable<KO, VO>, java.util.function.Function<V, KO>, org.apache.kafka.streams.kstream.ValueJoiner<V, VO, VR>, org.apache.kafka.streams.kstream.Named, org.apache.kafka.streams.kstream.Materialized<K, VR, org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>);

  public abstract java.lang.String queryableStoreName();
}
