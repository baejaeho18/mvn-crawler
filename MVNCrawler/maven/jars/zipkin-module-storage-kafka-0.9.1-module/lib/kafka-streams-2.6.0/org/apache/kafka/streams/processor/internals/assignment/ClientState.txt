Compiled from "ClientState.java"
public class org.apache.kafka.streams.processor.internals.assignment.ClientState {
  private static final org.slf4j.Logger LOG;

  public static final java.util.Comparator<org.apache.kafka.common.TopicPartition> TOPIC_PARTITION_COMPARATOR;

  private final java.util.Set<org.apache.kafka.streams.processor.TaskId> activeTasks;

  private final java.util.Set<org.apache.kafka.streams.processor.TaskId> standbyTasks;

  private final java.util.Set<org.apache.kafka.streams.processor.TaskId> prevActiveTasks;

  private final java.util.Set<org.apache.kafka.streams.processor.TaskId> prevStandbyTasks;

  private final java.util.Map<java.lang.String, java.util.Set<org.apache.kafka.streams.processor.TaskId>> consumerToPreviousStatefulTaskIds;

  private final java.util.Map<org.apache.kafka.common.TopicPartition, java.lang.String> ownedPartitions;

  private final java.util.Map<org.apache.kafka.streams.processor.TaskId, java.lang.Long> taskOffsetSums;

  private final java.util.Map<org.apache.kafka.streams.processor.TaskId, java.lang.Long> taskLagTotals;

  private int capacity;

  public org.apache.kafka.streams.processor.internals.assignment.ClientState();
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #2                  // Method "<init>":(I)V
       5: return

  org.apache.kafka.streams.processor.internals.assignment.ClientState(int);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #4                  // class java/util/TreeSet
       8: dup
       9: invokespecial #5                  // Method java/util/TreeSet."<init>":()V
      12: putfield      #6                  // Field activeTasks:Ljava/util/Set;
      15: aload_0
      16: new           #4                  // class java/util/TreeSet
      19: dup
      20: invokespecial #5                  // Method java/util/TreeSet."<init>":()V
      23: putfield      #7                  // Field standbyTasks:Ljava/util/Set;
      26: aload_0
      27: new           #4                  // class java/util/TreeSet
      30: dup
      31: invokespecial #5                  // Method java/util/TreeSet."<init>":()V
      34: putfield      #8                  // Field prevActiveTasks:Ljava/util/Set;
      37: aload_0
      38: new           #4                  // class java/util/TreeSet
      41: dup
      42: invokespecial #5                  // Method java/util/TreeSet."<init>":()V
      45: putfield      #9                  // Field prevStandbyTasks:Ljava/util/Set;
      48: aload_0
      49: new           #10                 // class java/util/TreeMap
      52: dup
      53: invokespecial #11                 // Method java/util/TreeMap."<init>":()V
      56: putfield      #12                 // Field consumerToPreviousStatefulTaskIds:Ljava/util/Map;
      59: aload_0
      60: new           #10                 // class java/util/TreeMap
      63: dup
      64: getstatic     #13                 // Field TOPIC_PARTITION_COMPARATOR:Ljava/util/Comparator;
      67: invokespecial #14                 // Method java/util/TreeMap."<init>":(Ljava/util/Comparator;)V
      70: putfield      #15                 // Field ownedPartitions:Ljava/util/Map;
      73: aload_0
      74: new           #10                 // class java/util/TreeMap
      77: dup
      78: invokespecial #11                 // Method java/util/TreeMap."<init>":()V
      81: putfield      #16                 // Field taskOffsetSums:Ljava/util/Map;
      84: aload_0
      85: new           #10                 // class java/util/TreeMap
      88: dup
      89: invokespecial #11                 // Method java/util/TreeMap."<init>":()V
      92: putfield      #17                 // Field taskLagTotals:Ljava/util/Map;
      95: aload_0
      96: iload_1
      97: putfield      #18                 // Field capacity:I
     100: return

  private org.apache.kafka.streams.processor.internals.assignment.ClientState(java.util.Set<org.apache.kafka.streams.processor.TaskId>, java.util.Set<org.apache.kafka.streams.processor.TaskId>, java.util.Set<org.apache.kafka.streams.processor.TaskId>, java.util.Set<org.apache.kafka.streams.processor.TaskId>, java.util.Map<java.lang.String, java.util.Set<org.apache.kafka.streams.processor.TaskId>>, java.util.SortedMap<org.apache.kafka.common.TopicPartition, java.lang.String>, java.util.Map<org.apache.kafka.streams.processor.TaskId, java.lang.Long>, java.util.Map<org.apache.kafka.streams.processor.TaskId, java.lang.Long>, int);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #6                  // Field activeTasks:Ljava/util/Set;
       9: aload_0
      10: aload_2
      11: putfield      #7                  // Field standbyTasks:Ljava/util/Set;
      14: aload_0
      15: aload_3
      16: putfield      #8                  // Field prevActiveTasks:Ljava/util/Set;
      19: aload_0
      20: aload         4
      22: putfield      #9                  // Field prevStandbyTasks:Ljava/util/Set;
      25: aload_0
      26: aload         5
      28: putfield      #12                 // Field consumerToPreviousStatefulTaskIds:Ljava/util/Map;
      31: aload_0
      32: aload         6
      34: putfield      #15                 // Field ownedPartitions:Ljava/util/Map;
      37: aload_0
      38: aload         7
      40: putfield      #16                 // Field taskOffsetSums:Ljava/util/Map;
      43: aload_0
      44: aload         8
      46: putfield      #17                 // Field taskLagTotals:Ljava/util/Map;
      49: aload_0
      50: iload         9
      52: putfield      #18                 // Field capacity:I
      55: return

  public org.apache.kafka.streams.processor.internals.assignment.ClientState(java.util.Set<org.apache.kafka.streams.processor.TaskId>, java.util.Set<org.apache.kafka.streams.processor.TaskId>, java.util.Map<org.apache.kafka.streams.processor.TaskId, java.lang.Long>, int);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #4                  // class java/util/TreeSet
       8: dup
       9: invokespecial #5                  // Method java/util/TreeSet."<init>":()V
      12: putfield      #6                  // Field activeTasks:Ljava/util/Set;
      15: aload_0
      16: new           #4                  // class java/util/TreeSet
      19: dup
      20: invokespecial #5                  // Method java/util/TreeSet."<init>":()V
      23: putfield      #7                  // Field standbyTasks:Ljava/util/Set;
      26: aload_0
      27: new           #4                  // class java/util/TreeSet
      30: dup
      31: aload_1
      32: invokespecial #19                 // Method java/util/TreeSet."<init>":(Ljava/util/Collection;)V
      35: invokestatic  #20                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
      38: putfield      #8                  // Field prevActiveTasks:Ljava/util/Set;
      41: aload_0
      42: new           #4                  // class java/util/TreeSet
      45: dup
      46: aload_2
      47: invokespecial #19                 // Method java/util/TreeSet."<init>":(Ljava/util/Collection;)V
      50: invokestatic  #20                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
      53: putfield      #9                  // Field prevStandbyTasks:Ljava/util/Set;
      56: aload_0
      57: new           #10                 // class java/util/TreeMap
      60: dup
      61: invokespecial #11                 // Method java/util/TreeMap."<init>":()V
      64: putfield      #12                 // Field consumerToPreviousStatefulTaskIds:Ljava/util/Map;
      67: aload_0
      68: new           #10                 // class java/util/TreeMap
      71: dup
      72: getstatic     #13                 // Field TOPIC_PARTITION_COMPARATOR:Ljava/util/Comparator;
      75: invokespecial #14                 // Method java/util/TreeMap."<init>":(Ljava/util/Comparator;)V
      78: putfield      #15                 // Field ownedPartitions:Ljava/util/Map;
      81: aload_0
      82: invokestatic  #21                 // Method java/util/Collections.emptyMap:()Ljava/util/Map;
      85: putfield      #16                 // Field taskOffsetSums:Ljava/util/Map;
      88: aload_0
      89: aload_3
      90: invokestatic  #22                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
      93: putfield      #17                 // Field taskLagTotals:Ljava/util/Map;
      96: aload_0
      97: iload         4
      99: putfield      #18                 // Field capacity:I
     102: return

  public org.apache.kafka.streams.processor.internals.assignment.ClientState copy();
    Code:
       0: new           #10                 // class java/util/TreeMap
       3: dup
       4: getstatic     #13                 // Field TOPIC_PARTITION_COMPARATOR:Ljava/util/Comparator;
       7: invokespecial #14                 // Method java/util/TreeMap."<init>":(Ljava/util/Comparator;)V
      10: astore_1
      11: aload_1
      12: aload_0
      13: getfield      #15                 // Field ownedPartitions:Ljava/util/Map;
      16: invokevirtual #23                 // Method java/util/TreeMap.putAll:(Ljava/util/Map;)V
      19: new           #24                 // class org/apache/kafka/streams/processor/internals/assignment/ClientState
      22: dup
      23: new           #4                  // class java/util/TreeSet
      26: dup
      27: aload_0
      28: getfield      #6                  // Field activeTasks:Ljava/util/Set;
      31: invokespecial #19                 // Method java/util/TreeSet."<init>":(Ljava/util/Collection;)V
      34: new           #4                  // class java/util/TreeSet
      37: dup
      38: aload_0
      39: getfield      #7                  // Field standbyTasks:Ljava/util/Set;
      42: invokespecial #19                 // Method java/util/TreeSet."<init>":(Ljava/util/Collection;)V
      45: new           #4                  // class java/util/TreeSet
      48: dup
      49: aload_0
      50: getfield      #8                  // Field prevActiveTasks:Ljava/util/Set;
      53: invokespecial #19                 // Method java/util/TreeSet."<init>":(Ljava/util/Collection;)V
      56: new           #4                  // class java/util/TreeSet
      59: dup
      60: aload_0
      61: getfield      #9                  // Field prevStandbyTasks:Ljava/util/Set;
      64: invokespecial #19                 // Method java/util/TreeSet."<init>":(Ljava/util/Collection;)V
      67: new           #10                 // class java/util/TreeMap
      70: dup
      71: aload_0
      72: getfield      #12                 // Field consumerToPreviousStatefulTaskIds:Ljava/util/Map;
      75: invokespecial #25                 // Method java/util/TreeMap."<init>":(Ljava/util/Map;)V
      78: aload_1
      79: new           #10                 // class java/util/TreeMap
      82: dup
      83: aload_0
      84: getfield      #16                 // Field taskOffsetSums:Ljava/util/Map;
      87: invokespecial #25                 // Method java/util/TreeMap."<init>":(Ljava/util/Map;)V
      90: new           #10                 // class java/util/TreeMap
      93: dup
      94: aload_0
      95: getfield      #17                 // Field taskLagTotals:Ljava/util/Map;
      98: invokespecial #25                 // Method java/util/TreeMap."<init>":(Ljava/util/Map;)V
     101: aload_0
     102: getfield      #18                 // Field capacity:I
     105: invokespecial #26                 // Method "<init>":(Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;Ljava/util/Map;Ljava/util/SortedMap;Ljava/util/Map;Ljava/util/Map;I)V
     108: areturn

  int capacity();
    Code:
       0: aload_0
       1: getfield      #18                 // Field capacity:I
       4: ireturn

  public void incrementCapacity();
    Code:
       0: aload_0
       1: dup
       2: getfield      #18                 // Field capacity:I
       5: iconst_1
       6: iadd
       7: putfield      #18                 // Field capacity:I
      10: return

  boolean reachedCapacity();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method assignedTaskCount:()I
       4: aload_0
       5: getfield      #18                 // Field capacity:I
       8: if_icmplt     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public java.util.Set<org.apache.kafka.streams.processor.TaskId> activeTasks();
    Code:
       0: aload_0
       1: getfield      #6                  // Field activeTasks:Ljava/util/Set;
       4: invokestatic  #20                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
       7: areturn

  public int activeTaskCount();
    Code:
       0: aload_0
       1: getfield      #6                  // Field activeTasks:Ljava/util/Set;
       4: invokeinterface #28,  1           // InterfaceMethod java/util/Set.size:()I
       9: ireturn

  double activeTaskLoad();
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method activeTaskCount:()I
       4: i2d
       5: aload_0
       6: getfield      #18                 // Field capacity:I
       9: i2d
      10: ddiv
      11: dreturn

  public void assignActiveTasks(java.util.Collection<org.apache.kafka.streams.processor.TaskId>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field activeTasks:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #30,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      10: pop
      11: return

  public void assignActive(org.apache.kafka.streams.processor.TaskId);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #31                 // Method assertNotAssigned:(Lorg/apache/kafka/streams/processor/TaskId;)V
       5: aload_0
       6: getfield      #6                  // Field activeTasks:Ljava/util/Set;
       9: aload_1
      10: invokeinterface #32,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      15: pop
      16: return

  public void unassignActive(org.apache.kafka.streams.processor.TaskId);
    Code:
       0: aload_0
       1: getfield      #6                  // Field activeTasks:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #33,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      10: ifne          49
      13: new           #34                 // class java/lang/IllegalArgumentException
      16: dup
      17: new           #35                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
      24: ldc           #37                 // String Tried to unassign active task
      26: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_1
      30: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      33: ldc           #40                 // String , but it is not currently assigned:
      35: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: aload_0
      39: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      42: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: invokespecial #42                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      48: athrow
      49: aload_0
      50: getfield      #6                  // Field activeTasks:Ljava/util/Set;
      53: aload_1
      54: invokeinterface #43,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      59: pop
      60: return

  public java.util.Set<org.apache.kafka.streams.processor.TaskId> standbyTasks();
    Code:
       0: aload_0
       1: getfield      #7                  // Field standbyTasks:Ljava/util/Set;
       4: invokestatic  #20                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
       7: areturn

  boolean hasStandbyTask(org.apache.kafka.streams.processor.TaskId);
    Code:
       0: aload_0
       1: getfield      #7                  // Field standbyTasks:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #33,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      10: ireturn

  int standbyTaskCount();
    Code:
       0: aload_0
       1: getfield      #7                  // Field standbyTasks:Ljava/util/Set;
       4: invokeinterface #28,  1           // InterfaceMethod java/util/Set.size:()I
       9: ireturn

  public void assignStandby(org.apache.kafka.streams.processor.TaskId);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #31                 // Method assertNotAssigned:(Lorg/apache/kafka/streams/processor/TaskId;)V
       5: aload_0
       6: getfield      #7                  // Field standbyTasks:Ljava/util/Set;
       9: aload_1
      10: invokeinterface #32,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      15: pop
      16: return

  void unassignStandby(org.apache.kafka.streams.processor.TaskId);
    Code:
       0: aload_0
       1: getfield      #7                  // Field standbyTasks:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #33,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      10: ifne          49
      13: new           #34                 // class java/lang/IllegalArgumentException
      16: dup
      17: new           #35                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
      24: ldc           #44                 // String Tried to unassign standby task
      26: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_1
      30: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      33: ldc           #40                 // String , but it is not currently assigned:
      35: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: aload_0
      39: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      42: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: invokespecial #42                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      48: athrow
      49: aload_0
      50: getfield      #7                  // Field standbyTasks:Ljava/util/Set;
      53: aload_1
      54: invokeinterface #43,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      59: pop
      60: return

  java.util.Set<org.apache.kafka.streams.processor.TaskId> assignedTasks();
    Code:
       0: aload_0
       1: invokedynamic #45,  0             // InvokeDynamic #0:get:(Lorg/apache/kafka/streams/processor/internals/assignment/ClientState;)Ljava/util/function/Supplier;
       6: iconst_2
       7: anewarray     #46                 // class java/util/Set
      10: dup
      11: iconst_0
      12: aload_0
      13: getfield      #6                  // Field activeTasks:Ljava/util/Set;
      16: aastore
      17: dup
      18: iconst_1
      19: aload_0
      20: getfield      #7                  // Field standbyTasks:Ljava/util/Set;
      23: aastore
      24: invokestatic  #47                 // Method org/apache/kafka/common/utils/Utils.union:(Ljava/util/function/Supplier;[Ljava/util/Set;)Ljava/util/Set;
      27: invokestatic  #20                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
      30: areturn

  public int assignedTaskCount();
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method activeTaskCount:()I
       4: aload_0
       5: invokevirtual #48                 // Method standbyTaskCount:()I
       8: iadd
       9: ireturn

  double assignedTaskLoad();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method assignedTaskCount:()I
       4: i2d
       5: aload_0
       6: getfield      #18                 // Field capacity:I
       9: i2d
      10: ddiv
      11: dreturn

  boolean hasAssignedTask(org.apache.kafka.streams.processor.TaskId);
    Code:
       0: aload_0
       1: getfield      #6                  // Field activeTasks:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #33,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      10: ifne          26
      13: aload_0
      14: getfield      #7                  // Field standbyTasks:Ljava/util/Set;
      17: aload_1
      18: invokeinterface #33,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      23: ifeq          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  java.util.Set<org.apache.kafka.streams.processor.TaskId> prevActiveTasks();
    Code:
       0: aload_0
       1: getfield      #8                  // Field prevActiveTasks:Ljava/util/Set;
       4: invokestatic  #20                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
       7: areturn

  private void addPreviousActiveTask(org.apache.kafka.streams.processor.TaskId);
    Code:
       0: aload_0
       1: getfield      #8                  // Field prevActiveTasks:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #32,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  void addPreviousActiveTasks(java.util.Set<org.apache.kafka.streams.processor.TaskId>);
    Code:
       0: aload_0
       1: getfield      #8                  // Field prevActiveTasks:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #30,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      10: pop
      11: return

  java.util.Set<org.apache.kafka.streams.processor.TaskId> prevStandbyTasks();
    Code:
       0: aload_0
       1: getfield      #9                  // Field prevStandbyTasks:Ljava/util/Set;
       4: invokestatic  #20                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
       7: areturn

  private void addPreviousStandbyTask(org.apache.kafka.streams.processor.TaskId);
    Code:
       0: aload_0
       1: getfield      #9                  // Field prevStandbyTasks:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #32,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  void addPreviousStandbyTasks(java.util.Set<org.apache.kafka.streams.processor.TaskId>);
    Code:
       0: aload_0
       1: getfield      #9                  // Field prevStandbyTasks:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #30,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      10: pop
      11: return

  java.util.Set<org.apache.kafka.streams.processor.TaskId> previousAssignedTasks();
    Code:
       0: aload_0
       1: invokedynamic #49,  0             // InvokeDynamic #1:get:(Lorg/apache/kafka/streams/processor/internals/assignment/ClientState;)Ljava/util/function/Supplier;
       6: iconst_2
       7: anewarray     #46                 // class java/util/Set
      10: dup
      11: iconst_0
      12: aload_0
      13: getfield      #8                  // Field prevActiveTasks:Ljava/util/Set;
      16: aastore
      17: dup
      18: iconst_1
      19: aload_0
      20: getfield      #9                  // Field prevStandbyTasks:Ljava/util/Set;
      23: aastore
      24: invokestatic  #47                 // Method org/apache/kafka/common/utils/Utils.union:(Ljava/util/function/Supplier;[Ljava/util/Set;)Ljava/util/Set;
      27: areturn

  public java.lang.String previousOwnerForPartition(org.apache.kafka.common.TopicPartition);
    Code:
       0: aload_0
       1: getfield      #15                 // Field ownedPartitions:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #50,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #51                 // class java/lang/String
      13: areturn

  public void addOwnedPartitions(java.util.Collection<org.apache.kafka.common.TopicPartition>, java.lang.String);
    Code:
       0: aload_1
       1: invokeinterface #52,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
       6: astore_3
       7: aload_3
       8: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          43
      16: aload_3
      17: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #55                 // class org/apache/kafka/common/TopicPartition
      25: astore        4
      27: aload_0
      28: getfield      #15                 // Field ownedPartitions:Ljava/util/Map;
      31: aload         4
      33: aload_2
      34: invokeinterface #56,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      39: pop
      40: goto          7
      43: return

  public void addPreviousTasksAndOffsetSums(java.lang.String, java.util.Map<org.apache.kafka.streams.processor.TaskId, java.lang.Long>);
    Code:
       0: aload_0
       1: getfield      #16                 // Field taskOffsetSums:Ljava/util/Map;
       4: aload_2
       5: invokeinterface #57,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      10: aload_0
      11: getfield      #12                 // Field consumerToPreviousStatefulTaskIds:Ljava/util/Map;
      14: aload_1
      15: aload_2
      16: invokeinterface #58,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      21: invokeinterface #56,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      26: pop
      27: return

  public void initializePrevTasks(java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.kafka.streams.processor.TaskId>);
    Code:
       0: aload_0
       1: getfield      #8                  // Field prevActiveTasks:Ljava/util/Set;
       4: invokeinterface #59,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
       9: ifeq          24
      12: aload_0
      13: getfield      #9                  // Field prevStandbyTasks:Ljava/util/Set;
      16: invokeinterface #59,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
      21: ifne          34
      24: new           #60                 // class java/lang/IllegalStateException
      27: dup
      28: ldc           #61                 // String Already added previous tasks to this client state.
      30: invokespecial #62                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: aload_1
      36: invokespecial #63                 // Method initializePrevActiveTasksFromOwnedPartitions:(Ljava/util/Map;)V
      39: aload_0
      40: invokespecial #64                 // Method initializeRemainingPrevTasksFromTaskOffsetSums:()V
      43: return

  public void computeTaskLags(java.util.UUID, java.util.Map<org.apache.kafka.streams.processor.TaskId, java.lang.Long>);
    Code:
       0: aload_0
       1: getfield      #17                 // Field taskLagTotals:Ljava/util/Map;
       4: invokeinterface #65,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
       9: ifne          22
      12: new           #60                 // class java/lang/IllegalStateException
      15: dup
      16: ldc           #66                 // String Already computed task lags for this client.
      18: invokespecial #62                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      21: athrow
      22: aload_2
      23: invokeinterface #67,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      28: invokeinterface #68,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      33: astore_3
      34: aload_3
      35: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      40: ifeq          286
      43: aload_3
      44: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      49: checkcast     #69                 // class java/util/Map$Entry
      52: astore        4
      54: aload         4
      56: invokeinterface #70,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      61: checkcast     #71                 // class org/apache/kafka/streams/processor/TaskId
      64: astore        5
      66: aload         4
      68: invokeinterface #72,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      73: checkcast     #73                 // class java/lang/Long
      76: astore        6
      78: aload_0
      79: getfield      #16                 // Field taskOffsetSums:Ljava/util/Map;
      82: aload         5
      84: lconst_0
      85: invokestatic  #74                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      88: invokeinterface #75,  3           // InterfaceMethod java/util/Map.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      93: checkcast     #73                 // class java/lang/Long
      96: astore        7
      98: aload         6
     100: invokevirtual #76                 // Method java/lang/Long.longValue:()J
     103: aload         7
     105: invokevirtual #76                 // Method java/lang/Long.longValue:()J
     108: lcmp
     109: ifge          191
     112: getstatic     #77                 // Field LOG:Lorg/slf4j/Logger;
     115: new           #35                 // class java/lang/StringBuilder
     118: dup
     119: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
     122: ldc           #78                 // String Task
     124: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     127: aload         5
     129: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     132: ldc           #79                 // String  had endOffsetSum=
     134: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     137: aload         6
     139: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     142: ldc           #80                 // String  smaller than offsetSum=
     144: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     147: aload         7
     149: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     152: ldc           #81                 // String  on member
     154: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     157: aload_1
     158: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     161: ldc           #82                 // String . This probably means the task is corrupted, which in turn indicates that it will need to restore from scratch if it gets assigned. The assignor will de-prioritize returning this task to this member in the hopes that some other member may be able to re-use its state.
     163: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     166: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     169: invokeinterface #83,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
     174: aload_0
     175: getfield      #17                 // Field taskLagTotals:Ljava/util/Map;
     178: aload         5
     180: aload         6
     182: invokeinterface #56,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     187: pop
     188: goto          283
     191: aload         7
     193: invokevirtual #76                 // Method java/lang/Long.longValue:()J
     196: ldc2_w        #85                 // long -2l
     199: lcmp
     200: ifne          224
     203: aload_0
     204: getfield      #17                 // Field taskLagTotals:Ljava/util/Map;
     207: aload         5
     209: ldc2_w        #85                 // long -2l
     212: invokestatic  #74                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     215: invokeinterface #56,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     220: pop
     221: goto          283
     224: aload         7
     226: invokevirtual #76                 // Method java/lang/Long.longValue:()J
     229: ldc2_w        #87                 // long -3l
     232: lcmp
     233: ifne          257
     236: aload_0
     237: getfield      #17                 // Field taskLagTotals:Ljava/util/Map;
     240: aload         5
     242: ldc2_w        #87                 // long -3l
     245: invokestatic  #74                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     248: invokeinterface #56,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     253: pop
     254: goto          283
     257: aload_0
     258: getfield      #17                 // Field taskLagTotals:Ljava/util/Map;
     261: aload         5
     263: aload         6
     265: invokevirtual #76                 // Method java/lang/Long.longValue:()J
     268: aload         7
     270: invokevirtual #76                 // Method java/lang/Long.longValue:()J
     273: lsub
     274: invokestatic  #74                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     277: invokeinterface #56,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     282: pop
     283: goto          34
     286: return

  public long lagFor(org.apache.kafka.streams.processor.TaskId);
    Code:
       0: aload_0
       1: getfield      #17                 // Field taskLagTotals:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #50,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #73                 // class java/lang/Long
      13: astore_2
      14: aload_2
      15: ifnonnull     45
      18: new           #60                 // class java/lang/IllegalStateException
      21: dup
      22: new           #35                 // class java/lang/StringBuilder
      25: dup
      26: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
      29: ldc           #89                 // String Tried to lookup lag for unknown task
      31: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: aload_1
      35: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      38: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: invokespecial #62                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      44: athrow
      45: aload_2
      46: invokevirtual #76                 // Method java/lang/Long.longValue:()J
      49: lreturn

  public java.util.Set<org.apache.kafka.streams.processor.TaskId> statefulActiveTasks();
    Code:
       0: aload_0
       1: getfield      #6                  // Field activeTasks:Ljava/util/Set;
       4: invokeinterface #90,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
       9: aload_0
      10: invokedynamic #91,  0             // InvokeDynamic #2:test:(Lorg/apache/kafka/streams/processor/internals/assignment/ClientState;)Ljava/util/function/Predicate;
      15: invokeinterface #92,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      20: invokestatic  #93                 // Method java/util/stream/Collectors.toSet:()Ljava/util/stream/Collector;
      23: invokeinterface #94,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      28: checkcast     #46                 // class java/util/Set
      31: areturn

  public java.util.Set<org.apache.kafka.streams.processor.TaskId> statelessActiveTasks();
    Code:
       0: aload_0
       1: getfield      #6                  // Field activeTasks:Ljava/util/Set;
       4: invokeinterface #90,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
       9: aload_0
      10: invokedynamic #95,  0             // InvokeDynamic #3:test:(Lorg/apache/kafka/streams/processor/internals/assignment/ClientState;)Ljava/util/function/Predicate;
      15: invokeinterface #92,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      20: invokestatic  #93                 // Method java/util/stream/Collectors.toSet:()Ljava/util/stream/Collector;
      23: invokeinterface #94,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      28: checkcast     #46                 // class java/util/Set
      31: areturn

  public java.util.Set<org.apache.kafka.streams.processor.TaskId> previousTasksForConsumer(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #12                 // Field consumerToPreviousStatefulTaskIds:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #50,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #46                 // class java/util/Set
      13: areturn

  boolean hasUnfulfilledQuota(int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field activeTasks:Ljava/util/Set;
       4: invokeinterface #28,  1           // InterfaceMethod java/util/Set.size:()I
       9: aload_0
      10: getfield      #18                 // Field capacity:I
      13: iload_1
      14: imul
      15: if_icmpge     22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  boolean hasMoreAvailableCapacityThan(org.apache.kafka.streams.processor.internals.assignment.ClientState);
    Code:
       0: aload_0
       1: getfield      #18                 // Field capacity:I
       4: ifgt          17
       7: new           #60                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #96                 // String Capacity of this ClientState must be greater than 0.
      13: invokespecial #62                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_1
      18: getfield      #18                 // Field capacity:I
      21: ifgt          34
      24: new           #60                 // class java/lang/IllegalStateException
      27: dup
      28: ldc           #97                 // String Capacity of other ClientState must be greater than 0
      30: invokespecial #62                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_1
      35: invokevirtual #27                 // Method assignedTaskCount:()I
      38: i2d
      39: aload_1
      40: getfield      #18                 // Field capacity:I
      43: i2d
      44: ddiv
      45: dstore_2
      46: aload_0
      47: invokevirtual #27                 // Method assignedTaskCount:()I
      50: i2d
      51: aload_0
      52: getfield      #18                 // Field capacity:I
      55: i2d
      56: ddiv
      57: dstore        4
      59: dload         4
      61: dload_2
      62: dcmpg
      63: ifge          68
      66: iconst_1
      67: ireturn
      68: dload         4
      70: dload_2
      71: dcmpl
      72: ifle          77
      75: iconst_0
      76: ireturn
      77: aload_0
      78: getfield      #18                 // Field capacity:I
      81: aload_1
      82: getfield      #18                 // Field capacity:I
      85: if_icmple     92
      88: iconst_1
      89: goto          93
      92: iconst_0
      93: ireturn

  public java.lang.String toString();
    Code:
       0: new           #35                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #98                 // String [activeTasks: (
       9: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #6                  // Field activeTasks:Ljava/util/Set;
      16: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #99                 // String ) standbyTasks: (
      21: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #7                  // Field standbyTasks:Ljava/util/Set;
      28: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      31: ldc           #100                // String ) prevActiveTasks: (
      33: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #8                  // Field prevActiveTasks:Ljava/util/Set;
      40: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      43: ldc           #101                // String ) prevStandbyTasks: (
      45: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_0
      49: getfield      #9                  // Field prevStandbyTasks:Ljava/util/Set;
      52: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      55: ldc           #102                // String ) prevOwnedPartitionsByConsumerId: (
      57: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: aload_0
      61: getfield      #15                 // Field ownedPartitions:Ljava/util/Map;
      64: invokeinterface #58,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      69: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      72: ldc           #103                // String ) changelogOffsetTotalsByTask: (
      74: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: aload_0
      78: getfield      #16                 // Field taskOffsetSums:Ljava/util/Map;
      81: invokeinterface #67,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      86: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      89: ldc           #104                // String ) taskLagTotals: (
      91: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      94: aload_0
      95: getfield      #17                 // Field taskLagTotals:Ljava/util/Map;
      98: invokeinterface #67,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     103: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     106: ldc           #105                // String ) capacity:
     108: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     111: aload_0
     112: getfield      #18                 // Field capacity:I
     115: invokevirtual #106                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     118: ldc           #107                // String  assigned:
     120: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     123: aload_0
     124: invokevirtual #27                 // Method assignedTaskCount:()I
     127: invokevirtual #106                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     130: ldc           #108                // String ]
     132: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     135: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     138: areturn

  private boolean isStateful(org.apache.kafka.streams.processor.TaskId);
    Code:
       0: aload_0
       1: getfield      #17                 // Field taskLagTotals:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #109,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      10: ireturn

  private void initializePrevActiveTasksFromOwnedPartitions(java.util.Map<org.apache.kafka.common.TopicPartition, org.apache.kafka.streams.processor.TaskId>);
    Code:
       0: aload_0
       1: getfield      #15                 // Field ownedPartitions:Ljava/util/Map;
       4: invokeinterface #67,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       9: invokeinterface #68,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_2
      15: aload_2
      16: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          87
      24: aload_2
      25: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #69                 // class java/util/Map$Entry
      33: astore_3
      34: aload_3
      35: invokeinterface #70,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      40: checkcast     #55                 // class org/apache/kafka/common/TopicPartition
      43: astore        4
      45: aload_1
      46: aload         4
      48: invokeinterface #50,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      53: checkcast     #71                 // class org/apache/kafka/streams/processor/TaskId
      56: astore        5
      58: aload         5
      60: ifnull        72
      63: aload_0
      64: aload         5
      66: invokespecial #110                // Method addPreviousActiveTask:(Lorg/apache/kafka/streams/processor/TaskId;)V
      69: goto          84
      72: getstatic     #77                 // Field LOG:Lorg/slf4j/Logger;
      75: ldc           #111                // String No task found for topic partition {}
      77: aload         4
      79: invokeinterface #112,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;)V
      84: goto          15
      87: return

  private void initializeRemainingPrevTasksFromTaskOffsetSums();
    Code:
       0: aload_0
       1: getfield      #8                  // Field prevActiveTasks:Ljava/util/Set;
       4: invokeinterface #59,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
       9: ifeq          48
      12: aload_0
      13: getfield      #15                 // Field ownedPartitions:Ljava/util/Map;
      16: invokeinterface #65,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
      21: ifne          48
      24: getstatic     #77                 // Field LOG:Lorg/slf4j/Logger;
      27: ldc           #113                // String Tried to process tasks in offset sum map before processing tasks from ownedPartitions = {}
      29: aload_0
      30: getfield      #15                 // Field ownedPartitions:Ljava/util/Map;
      33: invokeinterface #112,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;)V
      38: new           #60                 // class java/lang/IllegalStateException
      41: dup
      42: ldc           #114                // String Must initialize prevActiveTasks from ownedPartitions before initializing remaining tasks.
      44: invokespecial #62                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: aload_0
      49: getfield      #16                 // Field taskOffsetSums:Ljava/util/Map;
      52: invokeinterface #67,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      57: invokeinterface #68,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      62: astore_1
      63: aload_1
      64: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      69: ifeq          144
      72: aload_1
      73: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      78: checkcast     #69                 // class java/util/Map$Entry
      81: astore_2
      82: aload_2
      83: invokeinterface #70,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      88: checkcast     #71                 // class org/apache/kafka/streams/processor/TaskId
      91: astore_3
      92: aload_0
      93: getfield      #8                  // Field prevActiveTasks:Ljava/util/Set;
      96: aload_3
      97: invokeinterface #33,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
     102: ifne          141
     105: aload_2
     106: invokeinterface #72,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     111: checkcast     #73                 // class java/lang/Long
     114: invokevirtual #76                 // Method java/lang/Long.longValue:()J
     117: lstore        4
     119: lload         4
     121: ldc2_w        #85                 // long -2l
     124: lcmp
     125: ifne          136
     128: aload_0
     129: aload_3
     130: invokespecial #110                // Method addPreviousActiveTask:(Lorg/apache/kafka/streams/processor/TaskId;)V
     133: goto          141
     136: aload_0
     137: aload_3
     138: invokespecial #115                // Method addPreviousStandbyTask:(Lorg/apache/kafka/streams/processor/TaskId;)V
     141: goto          63
     144: return

  private void assertNotAssigned(org.apache.kafka.streams.processor.TaskId);
    Code:
       0: aload_0
       1: getfield      #7                  // Field standbyTasks:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #33,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      10: ifne          26
      13: aload_0
      14: getfield      #6                  // Field activeTasks:Ljava/util/Set;
      17: aload_1
      18: invokeinterface #33,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      23: ifeq          62
      26: new           #34                 // class java/lang/IllegalArgumentException
      29: dup
      30: new           #35                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
      37: ldc           #116                // String Tried to assign task
      39: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: aload_1
      43: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      46: ldc           #117                // String , but it is already assigned:
      48: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: aload_0
      52: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      55: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      58: invokespecial #42                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      61: athrow
      62: return

  private boolean lambda$statelessActiveTasks$2(org.apache.kafka.streams.processor.TaskId);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #118                // Method isStateful:(Lorg/apache/kafka/streams/processor/TaskId;)Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  private java.util.Set lambda$previousAssignedTasks$1();
    Code:
       0: new           #119                // class java/util/HashSet
       3: dup
       4: aload_0
       5: getfield      #8                  // Field prevActiveTasks:Ljava/util/Set;
       8: invokeinterface #28,  1           // InterfaceMethod java/util/Set.size:()I
      13: aload_0
      14: getfield      #9                  // Field prevStandbyTasks:Ljava/util/Set;
      17: invokeinterface #28,  1           // InterfaceMethod java/util/Set.size:()I
      22: iadd
      23: invokespecial #120                // Method java/util/HashSet."<init>":(I)V
      26: areturn

  private java.util.Set lambda$assignedTasks$0();
    Code:
       0: new           #119                // class java/util/HashSet
       3: dup
       4: aload_0
       5: getfield      #6                  // Field activeTasks:Ljava/util/Set;
       8: invokeinterface #28,  1           // InterfaceMethod java/util/Set.size:()I
      13: aload_0
      14: getfield      #7                  // Field standbyTasks:Ljava/util/Set;
      17: invokeinterface #28,  1           // InterfaceMethod java/util/Set.size:()I
      22: iadd
      23: invokespecial #120                // Method java/util/HashSet."<init>":(I)V
      26: areturn

  static {};
    Code:
       0: ldc           #24                 // class org/apache/kafka/streams/processor/internals/assignment/ClientState
       2: invokestatic  #121                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #77                 // Field LOG:Lorg/slf4j/Logger;
       8: invokedynamic #122,  0            // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      13: invokestatic  #123                // InterfaceMethod java/util/Comparator.comparing:(Ljava/util/function/Function;)Ljava/util/Comparator;
      16: invokedynamic #124,  0            // InvokeDynamic #5:apply:()Ljava/util/function/Function;
      21: invokeinterface #125,  2          // InterfaceMethod java/util/Comparator.thenComparing:(Ljava/util/function/Function;)Ljava/util/Comparator;
      26: putstatic     #13                 // Field TOPIC_PARTITION_COMPARATOR:Ljava/util/Comparator;
      29: return
}
