Compiled from "PersistentVolumeClaimSpecFluent.java"
public interface io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent<A extends io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToAccessModes(int, java.lang.String);

  public abstract A setToAccessModes(int, java.lang.String);

  public abstract A addToAccessModes(java.lang.String...);

  public abstract A addAllToAccessModes(java.util.Collection<java.lang.String>);

  public abstract A removeFromAccessModes(java.lang.String...);

  public abstract A removeAllFromAccessModes(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getAccessModes();

  public abstract java.lang.String getAccessMode(int);

  public abstract java.lang.String getFirstAccessMode();

  public abstract java.lang.String getLastAccessMode();

  public abstract java.lang.String getMatchingAccessMode(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingAccessMode(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withAccessModes(java.util.List<java.lang.String>);

  public abstract A withAccessModes(java.lang.String...);

  public abstract java.lang.Boolean hasAccessModes();

  public abstract A addNewAccessMode(java.lang.String);

  public abstract A addNewAccessMode(java.lang.StringBuilder);

  public abstract A addNewAccessMode(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.TypedLocalObjectReference getDataSource();

  public abstract io.fabric8.kubernetes.api.model.TypedLocalObjectReference buildDataSource();

  public abstract A withDataSource(io.fabric8.kubernetes.api.model.TypedLocalObjectReference);

  public abstract java.lang.Boolean hasDataSource();

  public abstract A withNewDataSource(java.lang.String, java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$DataSourceNested<A> withNewDataSource();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$DataSourceNested<A> withNewDataSourceLike(io.fabric8.kubernetes.api.model.TypedLocalObjectReference);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$DataSourceNested<A> editDataSource();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$DataSourceNested<A> editOrNewDataSource();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$DataSourceNested<A> editOrNewDataSourceLike(io.fabric8.kubernetes.api.model.TypedLocalObjectReference);

  public abstract io.fabric8.kubernetes.api.model.ResourceRequirements getResources();

  public abstract io.fabric8.kubernetes.api.model.ResourceRequirements buildResources();

  public abstract A withResources(io.fabric8.kubernetes.api.model.ResourceRequirements);

  public abstract java.lang.Boolean hasResources();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$ResourcesNested<A> withNewResources();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$ResourcesNested<A> withNewResourcesLike(io.fabric8.kubernetes.api.model.ResourceRequirements);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$ResourcesNested<A> editResources();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$ResourcesNested<A> editOrNewResources();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$ResourcesNested<A> editOrNewResourcesLike(io.fabric8.kubernetes.api.model.ResourceRequirements);

  public abstract io.fabric8.kubernetes.api.model.LabelSelector getSelector();

  public abstract io.fabric8.kubernetes.api.model.LabelSelector buildSelector();

  public abstract A withSelector(io.fabric8.kubernetes.api.model.LabelSelector);

  public abstract java.lang.Boolean hasSelector();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$SelectorNested<A> withNewSelector();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$SelectorNested<A> withNewSelectorLike(io.fabric8.kubernetes.api.model.LabelSelector);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$SelectorNested<A> editSelector();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$SelectorNested<A> editOrNewSelector();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimSpecFluent$SelectorNested<A> editOrNewSelectorLike(io.fabric8.kubernetes.api.model.LabelSelector);

  public abstract java.lang.String getStorageClassName();

  public abstract A withStorageClassName(java.lang.String);

  public abstract java.lang.Boolean hasStorageClassName();

  public abstract A withNewStorageClassName(java.lang.String);

  public abstract A withNewStorageClassName(java.lang.StringBuilder);

  public abstract A withNewStorageClassName(java.lang.StringBuffer);

  public abstract java.lang.String getVolumeMode();

  public abstract A withVolumeMode(java.lang.String);

  public abstract java.lang.Boolean hasVolumeMode();

  public abstract A withNewVolumeMode(java.lang.String);

  public abstract A withNewVolumeMode(java.lang.StringBuilder);

  public abstract A withNewVolumeMode(java.lang.StringBuffer);

  public abstract java.lang.String getVolumeName();

  public abstract A withVolumeName(java.lang.String);

  public abstract java.lang.Boolean hasVolumeName();

  public abstract A withNewVolumeName(java.lang.String);

  public abstract A withNewVolumeName(java.lang.StringBuilder);

  public abstract A withNewVolumeName(java.lang.StringBuffer);
}
