Compiled from "ServiceSpecFluent.java"
public interface io.fabric8.kubernetes.api.model.ServiceSpecFluent<A extends io.fabric8.kubernetes.api.model.ServiceSpecFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getClusterIP();

  public abstract A withClusterIP(java.lang.String);

  public abstract java.lang.Boolean hasClusterIP();

  public abstract A withNewClusterIP(java.lang.String);

  public abstract A withNewClusterIP(java.lang.StringBuilder);

  public abstract A withNewClusterIP(java.lang.StringBuffer);

  public abstract A addToExternalIPs(int, java.lang.String);

  public abstract A setToExternalIPs(int, java.lang.String);

  public abstract A addToExternalIPs(java.lang.String...);

  public abstract A addAllToExternalIPs(java.util.Collection<java.lang.String>);

  public abstract A removeFromExternalIPs(java.lang.String...);

  public abstract A removeAllFromExternalIPs(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getExternalIPs();

  public abstract java.lang.String getExternalIP(int);

  public abstract java.lang.String getFirstExternalIP();

  public abstract java.lang.String getLastExternalIP();

  public abstract java.lang.String getMatchingExternalIP(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingExternalIP(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withExternalIPs(java.util.List<java.lang.String>);

  public abstract A withExternalIPs(java.lang.String...);

  public abstract java.lang.Boolean hasExternalIPs();

  public abstract A addNewExternalIP(java.lang.String);

  public abstract A addNewExternalIP(java.lang.StringBuilder);

  public abstract A addNewExternalIP(java.lang.StringBuffer);

  public abstract java.lang.String getExternalName();

  public abstract A withExternalName(java.lang.String);

  public abstract java.lang.Boolean hasExternalName();

  public abstract A withNewExternalName(java.lang.String);

  public abstract A withNewExternalName(java.lang.StringBuilder);

  public abstract A withNewExternalName(java.lang.StringBuffer);

  public abstract java.lang.String getExternalTrafficPolicy();

  public abstract A withExternalTrafficPolicy(java.lang.String);

  public abstract java.lang.Boolean hasExternalTrafficPolicy();

  public abstract A withNewExternalTrafficPolicy(java.lang.String);

  public abstract A withNewExternalTrafficPolicy(java.lang.StringBuilder);

  public abstract A withNewExternalTrafficPolicy(java.lang.StringBuffer);

  public abstract java.lang.Integer getHealthCheckNodePort();

  public abstract A withHealthCheckNodePort(java.lang.Integer);

  public abstract java.lang.Boolean hasHealthCheckNodePort();

  public abstract java.lang.String getIpFamily();

  public abstract A withIpFamily(java.lang.String);

  public abstract java.lang.Boolean hasIpFamily();

  public abstract A withNewIpFamily(java.lang.String);

  public abstract A withNewIpFamily(java.lang.StringBuilder);

  public abstract A withNewIpFamily(java.lang.StringBuffer);

  public abstract java.lang.String getLoadBalancerIP();

  public abstract A withLoadBalancerIP(java.lang.String);

  public abstract java.lang.Boolean hasLoadBalancerIP();

  public abstract A withNewLoadBalancerIP(java.lang.String);

  public abstract A withNewLoadBalancerIP(java.lang.StringBuilder);

  public abstract A withNewLoadBalancerIP(java.lang.StringBuffer);

  public abstract A addToLoadBalancerSourceRanges(int, java.lang.String);

  public abstract A setToLoadBalancerSourceRanges(int, java.lang.String);

  public abstract A addToLoadBalancerSourceRanges(java.lang.String...);

  public abstract A addAllToLoadBalancerSourceRanges(java.util.Collection<java.lang.String>);

  public abstract A removeFromLoadBalancerSourceRanges(java.lang.String...);

  public abstract A removeAllFromLoadBalancerSourceRanges(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getLoadBalancerSourceRanges();

  public abstract java.lang.String getLoadBalancerSourceRange(int);

  public abstract java.lang.String getFirstLoadBalancerSourceRange();

  public abstract java.lang.String getLastLoadBalancerSourceRange();

  public abstract java.lang.String getMatchingLoadBalancerSourceRange(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingLoadBalancerSourceRange(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withLoadBalancerSourceRanges(java.util.List<java.lang.String>);

  public abstract A withLoadBalancerSourceRanges(java.lang.String...);

  public abstract java.lang.Boolean hasLoadBalancerSourceRanges();

  public abstract A addNewLoadBalancerSourceRange(java.lang.String);

  public abstract A addNewLoadBalancerSourceRange(java.lang.StringBuilder);

  public abstract A addNewLoadBalancerSourceRange(java.lang.StringBuffer);

  public abstract A addToPorts(int, io.fabric8.kubernetes.api.model.ServicePort);

  public abstract A setToPorts(int, io.fabric8.kubernetes.api.model.ServicePort);

  public abstract A addToPorts(io.fabric8.kubernetes.api.model.ServicePort...);

  public abstract A addAllToPorts(java.util.Collection<io.fabric8.kubernetes.api.model.ServicePort>);

  public abstract A removeFromPorts(io.fabric8.kubernetes.api.model.ServicePort...);

  public abstract A removeAllFromPorts(java.util.Collection<io.fabric8.kubernetes.api.model.ServicePort>);

  public abstract A removeMatchingFromPorts(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ServicePortBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.ServicePort> getPorts();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.ServicePort> buildPorts();

  public abstract io.fabric8.kubernetes.api.model.ServicePort buildPort(int);

  public abstract io.fabric8.kubernetes.api.model.ServicePort buildFirstPort();

  public abstract io.fabric8.kubernetes.api.model.ServicePort buildLastPort();

  public abstract io.fabric8.kubernetes.api.model.ServicePort buildMatchingPort(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ServicePortBuilder>);

  public abstract java.lang.Boolean hasMatchingPort(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ServicePortBuilder>);

  public abstract A withPorts(java.util.List<io.fabric8.kubernetes.api.model.ServicePort>);

  public abstract A withPorts(io.fabric8.kubernetes.api.model.ServicePort...);

  public abstract java.lang.Boolean hasPorts();

  public abstract io.fabric8.kubernetes.api.model.ServiceSpecFluent$PortsNested<A> addNewPort();

  public abstract io.fabric8.kubernetes.api.model.ServiceSpecFluent$PortsNested<A> addNewPortLike(io.fabric8.kubernetes.api.model.ServicePort);

  public abstract io.fabric8.kubernetes.api.model.ServiceSpecFluent$PortsNested<A> setNewPortLike(int, io.fabric8.kubernetes.api.model.ServicePort);

  public abstract io.fabric8.kubernetes.api.model.ServiceSpecFluent$PortsNested<A> editPort(int);

  public abstract io.fabric8.kubernetes.api.model.ServiceSpecFluent$PortsNested<A> editFirstPort();

  public abstract io.fabric8.kubernetes.api.model.ServiceSpecFluent$PortsNested<A> editLastPort();

  public abstract io.fabric8.kubernetes.api.model.ServiceSpecFluent$PortsNested<A> editMatchingPort(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ServicePortBuilder>);

  public abstract java.lang.Boolean isPublishNotReadyAddresses();

  public abstract A withPublishNotReadyAddresses(java.lang.Boolean);

  public abstract java.lang.Boolean hasPublishNotReadyAddresses();

  public abstract A withNewPublishNotReadyAddresses(java.lang.String);

  public abstract A withNewPublishNotReadyAddresses(boolean);

  public abstract A addToSelector(java.lang.String, java.lang.String);

  public abstract A addToSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract A removeFromSelector(java.lang.String);

  public abstract A removeFromSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.Map<java.lang.String, java.lang.String> getSelector();

  public abstract A withSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.Boolean hasSelector();

  public abstract java.lang.String getSessionAffinity();

  public abstract A withSessionAffinity(java.lang.String);

  public abstract java.lang.Boolean hasSessionAffinity();

  public abstract A withNewSessionAffinity(java.lang.String);

  public abstract A withNewSessionAffinity(java.lang.StringBuilder);

  public abstract A withNewSessionAffinity(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.SessionAffinityConfig getSessionAffinityConfig();

  public abstract io.fabric8.kubernetes.api.model.SessionAffinityConfig buildSessionAffinityConfig();

  public abstract A withSessionAffinityConfig(io.fabric8.kubernetes.api.model.SessionAffinityConfig);

  public abstract java.lang.Boolean hasSessionAffinityConfig();

  public abstract io.fabric8.kubernetes.api.model.ServiceSpecFluent$SessionAffinityConfigNested<A> withNewSessionAffinityConfig();

  public abstract io.fabric8.kubernetes.api.model.ServiceSpecFluent$SessionAffinityConfigNested<A> withNewSessionAffinityConfigLike(io.fabric8.kubernetes.api.model.SessionAffinityConfig);

  public abstract io.fabric8.kubernetes.api.model.ServiceSpecFluent$SessionAffinityConfigNested<A> editSessionAffinityConfig();

  public abstract io.fabric8.kubernetes.api.model.ServiceSpecFluent$SessionAffinityConfigNested<A> editOrNewSessionAffinityConfig();

  public abstract io.fabric8.kubernetes.api.model.ServiceSpecFluent$SessionAffinityConfigNested<A> editOrNewSessionAffinityConfigLike(io.fabric8.kubernetes.api.model.SessionAffinityConfig);

  public abstract A addToTopologyKeys(int, java.lang.String);

  public abstract A setToTopologyKeys(int, java.lang.String);

  public abstract A addToTopologyKeys(java.lang.String...);

  public abstract A addAllToTopologyKeys(java.util.Collection<java.lang.String>);

  public abstract A removeFromTopologyKeys(java.lang.String...);

  public abstract A removeAllFromTopologyKeys(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getTopologyKeys();

  public abstract java.lang.String getTopologyKey(int);

  public abstract java.lang.String getFirstTopologyKey();

  public abstract java.lang.String getLastTopologyKey();

  public abstract java.lang.String getMatchingTopologyKey(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingTopologyKey(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withTopologyKeys(java.util.List<java.lang.String>);

  public abstract A withTopologyKeys(java.lang.String...);

  public abstract java.lang.Boolean hasTopologyKeys();

  public abstract A addNewTopologyKey(java.lang.String);

  public abstract A addNewTopologyKey(java.lang.StringBuilder);

  public abstract A addNewTopologyKey(java.lang.StringBuffer);

  public abstract java.lang.String getType();

  public abstract A withType(java.lang.String);

  public abstract java.lang.Boolean hasType();

  public abstract A withNewType(java.lang.String);

  public abstract A withNewType(java.lang.StringBuilder);

  public abstract A withNewType(java.lang.StringBuffer);
}
