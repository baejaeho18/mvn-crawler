Compiled from "ManagedFieldsEntryFluent.java"
public interface io.fabric8.kubernetes.api.model.ManagedFieldsEntryFluent<A extends io.fabric8.kubernetes.api.model.ManagedFieldsEntryFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract java.lang.String getFieldsType();

  public abstract A withFieldsType(java.lang.String);

  public abstract java.lang.Boolean hasFieldsType();

  public abstract A withNewFieldsType(java.lang.String);

  public abstract A withNewFieldsType(java.lang.StringBuilder);

  public abstract A withNewFieldsType(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.FieldsV1 getFieldsV1();

  public abstract io.fabric8.kubernetes.api.model.FieldsV1 buildFieldsV1();

  public abstract A withFieldsV1(io.fabric8.kubernetes.api.model.FieldsV1);

  public abstract java.lang.Boolean hasFieldsV1();

  public abstract io.fabric8.kubernetes.api.model.ManagedFieldsEntryFluent$FieldsV1Nested<A> withNewFieldsV1();

  public abstract io.fabric8.kubernetes.api.model.ManagedFieldsEntryFluent$FieldsV1Nested<A> withNewFieldsV1Like(io.fabric8.kubernetes.api.model.FieldsV1);

  public abstract io.fabric8.kubernetes.api.model.ManagedFieldsEntryFluent$FieldsV1Nested<A> editFieldsV1();

  public abstract io.fabric8.kubernetes.api.model.ManagedFieldsEntryFluent$FieldsV1Nested<A> editOrNewFieldsV1();

  public abstract io.fabric8.kubernetes.api.model.ManagedFieldsEntryFluent$FieldsV1Nested<A> editOrNewFieldsV1Like(io.fabric8.kubernetes.api.model.FieldsV1);

  public abstract java.lang.String getManager();

  public abstract A withManager(java.lang.String);

  public abstract java.lang.Boolean hasManager();

  public abstract A withNewManager(java.lang.String);

  public abstract A withNewManager(java.lang.StringBuilder);

  public abstract A withNewManager(java.lang.StringBuffer);

  public abstract java.lang.String getOperation();

  public abstract A withOperation(java.lang.String);

  public abstract java.lang.Boolean hasOperation();

  public abstract A withNewOperation(java.lang.String);

  public abstract A withNewOperation(java.lang.StringBuilder);

  public abstract A withNewOperation(java.lang.StringBuffer);

  public abstract java.lang.String getTime();

  public abstract A withTime(java.lang.String);

  public abstract java.lang.Boolean hasTime();

  public abstract A withNewTime(java.lang.String);

  public abstract A withNewTime(java.lang.StringBuilder);

  public abstract A withNewTime(java.lang.StringBuffer);
}
