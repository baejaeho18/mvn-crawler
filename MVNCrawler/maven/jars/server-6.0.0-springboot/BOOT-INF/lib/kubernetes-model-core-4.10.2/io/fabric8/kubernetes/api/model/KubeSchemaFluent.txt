Compiled from "KubeSchemaFluent.java"
public interface io.fabric8.kubernetes.api.model.KubeSchemaFluent<A extends io.fabric8.kubernetes.api.model.KubeSchemaFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract io.fabric8.kubernetes.api.model.APIGroup getAPIGroup();

  public abstract io.fabric8.kubernetes.api.model.APIGroup buildAPIGroup();

  public abstract A withAPIGroup(io.fabric8.kubernetes.api.model.APIGroup);

  public abstract java.lang.Boolean hasAPIGroup();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$APIGroupNested<A> withNewAPIGroup();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$APIGroupNested<A> withNewAPIGroupLike(io.fabric8.kubernetes.api.model.APIGroup);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$APIGroupNested<A> editAPIGroup();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$APIGroupNested<A> editOrNewAPIGroup();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$APIGroupNested<A> editOrNewAPIGroupLike(io.fabric8.kubernetes.api.model.APIGroup);

  public abstract io.fabric8.kubernetes.api.model.APIGroupList getAPIGroupList();

  public abstract io.fabric8.kubernetes.api.model.APIGroupList buildAPIGroupList();

  public abstract A withAPIGroupList(io.fabric8.kubernetes.api.model.APIGroupList);

  public abstract java.lang.Boolean hasAPIGroupList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$APIGroupListNested<A> withNewAPIGroupList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$APIGroupListNested<A> withNewAPIGroupListLike(io.fabric8.kubernetes.api.model.APIGroupList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$APIGroupListNested<A> editAPIGroupList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$APIGroupListNested<A> editOrNewAPIGroupList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$APIGroupListNested<A> editOrNewAPIGroupListLike(io.fabric8.kubernetes.api.model.APIGroupList);

  public abstract io.fabric8.kubernetes.api.model.BaseKubernetesList getBaseKubernetesList();

  public abstract io.fabric8.kubernetes.api.model.BaseKubernetesList buildBaseKubernetesList();

  public abstract A withBaseKubernetesList(io.fabric8.kubernetes.api.model.BaseKubernetesList);

  public abstract java.lang.Boolean hasBaseKubernetesList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$BaseKubernetesListNested<A> withNewBaseKubernetesList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$BaseKubernetesListNested<A> withNewBaseKubernetesListLike(io.fabric8.kubernetes.api.model.BaseKubernetesList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$BaseKubernetesListNested<A> editBaseKubernetesList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$BaseKubernetesListNested<A> editOrNewBaseKubernetesList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$BaseKubernetesListNested<A> editOrNewBaseKubernetesListLike(io.fabric8.kubernetes.api.model.BaseKubernetesList);

  public abstract io.fabric8.kubernetes.api.model.Binding getBinding();

  public abstract io.fabric8.kubernetes.api.model.Binding buildBinding();

  public abstract A withBinding(io.fabric8.kubernetes.api.model.Binding);

  public abstract java.lang.Boolean hasBinding();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$BindingNested<A> withNewBinding();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$BindingNested<A> withNewBindingLike(io.fabric8.kubernetes.api.model.Binding);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$BindingNested<A> editBinding();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$BindingNested<A> editOrNewBinding();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$BindingNested<A> editOrNewBindingLike(io.fabric8.kubernetes.api.model.Binding);

  public abstract io.fabric8.kubernetes.api.model.ComponentStatus getComponentStatus();

  public abstract io.fabric8.kubernetes.api.model.ComponentStatus buildComponentStatus();

  public abstract A withComponentStatus(io.fabric8.kubernetes.api.model.ComponentStatus);

  public abstract java.lang.Boolean hasComponentStatus();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ComponentStatusNested<A> withNewComponentStatus();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ComponentStatusNested<A> withNewComponentStatusLike(io.fabric8.kubernetes.api.model.ComponentStatus);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ComponentStatusNested<A> editComponentStatus();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ComponentStatusNested<A> editOrNewComponentStatus();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ComponentStatusNested<A> editOrNewComponentStatusLike(io.fabric8.kubernetes.api.model.ComponentStatus);

  public abstract io.fabric8.kubernetes.api.model.ComponentStatusList getComponentStatusList();

  public abstract io.fabric8.kubernetes.api.model.ComponentStatusList buildComponentStatusList();

  public abstract A withComponentStatusList(io.fabric8.kubernetes.api.model.ComponentStatusList);

  public abstract java.lang.Boolean hasComponentStatusList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ComponentStatusListNested<A> withNewComponentStatusList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ComponentStatusListNested<A> withNewComponentStatusListLike(io.fabric8.kubernetes.api.model.ComponentStatusList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ComponentStatusListNested<A> editComponentStatusList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ComponentStatusListNested<A> editOrNewComponentStatusList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ComponentStatusListNested<A> editOrNewComponentStatusListLike(io.fabric8.kubernetes.api.model.ComponentStatusList);

  public abstract io.fabric8.kubernetes.api.model.Config getConfig();

  public abstract io.fabric8.kubernetes.api.model.Config buildConfig();

  public abstract A withConfig(io.fabric8.kubernetes.api.model.Config);

  public abstract java.lang.Boolean hasConfig();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigNested<A> withNewConfig();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigNested<A> withNewConfigLike(io.fabric8.kubernetes.api.model.Config);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigNested<A> editConfig();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigNested<A> editOrNewConfig();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigNested<A> editOrNewConfigLike(io.fabric8.kubernetes.api.model.Config);

  public abstract io.fabric8.kubernetes.api.model.ConfigMap getConfigMap();

  public abstract io.fabric8.kubernetes.api.model.ConfigMap buildConfigMap();

  public abstract A withConfigMap(io.fabric8.kubernetes.api.model.ConfigMap);

  public abstract java.lang.Boolean hasConfigMap();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigMapNested<A> withNewConfigMap();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigMapNested<A> withNewConfigMapLike(io.fabric8.kubernetes.api.model.ConfigMap);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigMapNested<A> editConfigMap();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigMapNested<A> editOrNewConfigMap();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigMapNested<A> editOrNewConfigMapLike(io.fabric8.kubernetes.api.model.ConfigMap);

  public abstract io.fabric8.kubernetes.api.model.ConfigMapList getConfigMapList();

  public abstract io.fabric8.kubernetes.api.model.ConfigMapList buildConfigMapList();

  public abstract A withConfigMapList(io.fabric8.kubernetes.api.model.ConfigMapList);

  public abstract java.lang.Boolean hasConfigMapList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigMapListNested<A> withNewConfigMapList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigMapListNested<A> withNewConfigMapListLike(io.fabric8.kubernetes.api.model.ConfigMapList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigMapListNested<A> editConfigMapList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigMapListNested<A> editOrNewConfigMapList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ConfigMapListNested<A> editOrNewConfigMapListLike(io.fabric8.kubernetes.api.model.ConfigMapList);

  public abstract io.fabric8.kubernetes.api.model.ContainerStatus getContainerStatus();

  public abstract io.fabric8.kubernetes.api.model.ContainerStatus buildContainerStatus();

  public abstract A withContainerStatus(io.fabric8.kubernetes.api.model.ContainerStatus);

  public abstract java.lang.Boolean hasContainerStatus();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ContainerStatusNested<A> withNewContainerStatus();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ContainerStatusNested<A> withNewContainerStatusLike(io.fabric8.kubernetes.api.model.ContainerStatus);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ContainerStatusNested<A> editContainerStatus();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ContainerStatusNested<A> editOrNewContainerStatus();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ContainerStatusNested<A> editOrNewContainerStatusLike(io.fabric8.kubernetes.api.model.ContainerStatus);

  public abstract io.fabric8.kubernetes.api.model.CreateOptions getCreateOptions();

  public abstract io.fabric8.kubernetes.api.model.CreateOptions buildCreateOptions();

  public abstract A withCreateOptions(io.fabric8.kubernetes.api.model.CreateOptions);

  public abstract java.lang.Boolean hasCreateOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$CreateOptionsNested<A> withNewCreateOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$CreateOptionsNested<A> withNewCreateOptionsLike(io.fabric8.kubernetes.api.model.CreateOptions);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$CreateOptionsNested<A> editCreateOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$CreateOptionsNested<A> editOrNewCreateOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$CreateOptionsNested<A> editOrNewCreateOptionsLike(io.fabric8.kubernetes.api.model.CreateOptions);

  public abstract io.fabric8.kubernetes.api.model.DeleteOptions getDeleteOptions();

  public abstract io.fabric8.kubernetes.api.model.DeleteOptions buildDeleteOptions();

  public abstract A withDeleteOptions(io.fabric8.kubernetes.api.model.DeleteOptions);

  public abstract java.lang.Boolean hasDeleteOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$DeleteOptionsNested<A> withNewDeleteOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$DeleteOptionsNested<A> withNewDeleteOptionsLike(io.fabric8.kubernetes.api.model.DeleteOptions);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$DeleteOptionsNested<A> editDeleteOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$DeleteOptionsNested<A> editOrNewDeleteOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$DeleteOptionsNested<A> editOrNewDeleteOptionsLike(io.fabric8.kubernetes.api.model.DeleteOptions);

  public abstract io.fabric8.kubernetes.api.model.EndpointPort getEndpointPort();

  public abstract io.fabric8.kubernetes.api.model.EndpointPort buildEndpointPort();

  public abstract A withEndpointPort(io.fabric8.kubernetes.api.model.EndpointPort);

  public abstract java.lang.Boolean hasEndpointPort();

  public abstract A withNewEndpointPort(java.lang.String, java.lang.String, java.lang.Integer, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointPortNested<A> withNewEndpointPort();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointPortNested<A> withNewEndpointPortLike(io.fabric8.kubernetes.api.model.EndpointPort);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointPortNested<A> editEndpointPort();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointPortNested<A> editOrNewEndpointPort();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointPortNested<A> editOrNewEndpointPortLike(io.fabric8.kubernetes.api.model.EndpointPort);

  public abstract io.fabric8.kubernetes.api.model.Endpoints getEndpoints();

  public abstract io.fabric8.kubernetes.api.model.Endpoints buildEndpoints();

  public abstract A withEndpoints(io.fabric8.kubernetes.api.model.Endpoints);

  public abstract java.lang.Boolean hasEndpoints();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointsNested<A> withNewEndpoints();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointsNested<A> withNewEndpointsLike(io.fabric8.kubernetes.api.model.Endpoints);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointsNested<A> editEndpoints();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointsNested<A> editOrNewEndpoints();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointsNested<A> editOrNewEndpointsLike(io.fabric8.kubernetes.api.model.Endpoints);

  public abstract io.fabric8.kubernetes.api.model.EndpointsList getEndpointsList();

  public abstract io.fabric8.kubernetes.api.model.EndpointsList buildEndpointsList();

  public abstract A withEndpointsList(io.fabric8.kubernetes.api.model.EndpointsList);

  public abstract java.lang.Boolean hasEndpointsList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointsListNested<A> withNewEndpointsList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointsListNested<A> withNewEndpointsListLike(io.fabric8.kubernetes.api.model.EndpointsList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointsListNested<A> editEndpointsList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointsListNested<A> editOrNewEndpointsList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EndpointsListNested<A> editOrNewEndpointsListLike(io.fabric8.kubernetes.api.model.EndpointsList);

  public abstract io.fabric8.kubernetes.api.model.EnvVar getEnvVar();

  public abstract io.fabric8.kubernetes.api.model.EnvVar buildEnvVar();

  public abstract A withEnvVar(io.fabric8.kubernetes.api.model.EnvVar);

  public abstract java.lang.Boolean hasEnvVar();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EnvVarNested<A> withNewEnvVar();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EnvVarNested<A> withNewEnvVarLike(io.fabric8.kubernetes.api.model.EnvVar);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EnvVarNested<A> editEnvVar();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EnvVarNested<A> editOrNewEnvVar();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EnvVarNested<A> editOrNewEnvVarLike(io.fabric8.kubernetes.api.model.EnvVar);

  public abstract io.fabric8.kubernetes.api.model.Event getEvent();

  public abstract io.fabric8.kubernetes.api.model.Event buildEvent();

  public abstract A withEvent(io.fabric8.kubernetes.api.model.Event);

  public abstract java.lang.Boolean hasEvent();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventNested<A> withNewEvent();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventNested<A> withNewEventLike(io.fabric8.kubernetes.api.model.Event);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventNested<A> editEvent();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventNested<A> editOrNewEvent();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventNested<A> editOrNewEventLike(io.fabric8.kubernetes.api.model.Event);

  public abstract io.fabric8.kubernetes.api.model.EventList getEventList();

  public abstract io.fabric8.kubernetes.api.model.EventList buildEventList();

  public abstract A withEventList(io.fabric8.kubernetes.api.model.EventList);

  public abstract java.lang.Boolean hasEventList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventListNested<A> withNewEventList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventListNested<A> withNewEventListLike(io.fabric8.kubernetes.api.model.EventList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventListNested<A> editEventList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventListNested<A> editOrNewEventList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventListNested<A> editOrNewEventListLike(io.fabric8.kubernetes.api.model.EventList);

  public abstract io.fabric8.kubernetes.api.model.EventSeries getEventSeries();

  public abstract io.fabric8.kubernetes.api.model.EventSeries buildEventSeries();

  public abstract A withEventSeries(io.fabric8.kubernetes.api.model.EventSeries);

  public abstract java.lang.Boolean hasEventSeries();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventSeriesNested<A> withNewEventSeries();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventSeriesNested<A> withNewEventSeriesLike(io.fabric8.kubernetes.api.model.EventSeries);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventSeriesNested<A> editEventSeries();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventSeriesNested<A> editOrNewEventSeries();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventSeriesNested<A> editOrNewEventSeriesLike(io.fabric8.kubernetes.api.model.EventSeries);

  public abstract io.fabric8.kubernetes.api.model.EventSource getEventSource();

  public abstract io.fabric8.kubernetes.api.model.EventSource buildEventSource();

  public abstract A withEventSource(io.fabric8.kubernetes.api.model.EventSource);

  public abstract java.lang.Boolean hasEventSource();

  public abstract A withNewEventSource(java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventSourceNested<A> withNewEventSource();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventSourceNested<A> withNewEventSourceLike(io.fabric8.kubernetes.api.model.EventSource);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventSourceNested<A> editEventSource();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventSourceNested<A> editOrNewEventSource();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$EventSourceNested<A> editOrNewEventSourceLike(io.fabric8.kubernetes.api.model.EventSource);

  public abstract io.fabric8.kubernetes.api.model.GetOptions getGetOptions();

  public abstract io.fabric8.kubernetes.api.model.GetOptions buildGetOptions();

  public abstract A withGetOptions(io.fabric8.kubernetes.api.model.GetOptions);

  public abstract java.lang.Boolean hasGetOptions();

  public abstract A withNewGetOptions(java.lang.String, java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GetOptionsNested<A> withNewGetOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GetOptionsNested<A> withNewGetOptionsLike(io.fabric8.kubernetes.api.model.GetOptions);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GetOptionsNested<A> editGetOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GetOptionsNested<A> editOrNewGetOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GetOptionsNested<A> editOrNewGetOptionsLike(io.fabric8.kubernetes.api.model.GetOptions);

  public abstract io.fabric8.kubernetes.api.model.GroupVersionKind getGroupVersionKind();

  public abstract io.fabric8.kubernetes.api.model.GroupVersionKind buildGroupVersionKind();

  public abstract A withGroupVersionKind(io.fabric8.kubernetes.api.model.GroupVersionKind);

  public abstract java.lang.Boolean hasGroupVersionKind();

  public abstract A withNewGroupVersionKind(java.lang.String, java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GroupVersionKindNested<A> withNewGroupVersionKind();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GroupVersionKindNested<A> withNewGroupVersionKindLike(io.fabric8.kubernetes.api.model.GroupVersionKind);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GroupVersionKindNested<A> editGroupVersionKind();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GroupVersionKindNested<A> editOrNewGroupVersionKind();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GroupVersionKindNested<A> editOrNewGroupVersionKindLike(io.fabric8.kubernetes.api.model.GroupVersionKind);

  public abstract io.fabric8.kubernetes.api.model.GroupVersionResource getGroupVersionResource();

  public abstract io.fabric8.kubernetes.api.model.GroupVersionResource buildGroupVersionResource();

  public abstract A withGroupVersionResource(io.fabric8.kubernetes.api.model.GroupVersionResource);

  public abstract java.lang.Boolean hasGroupVersionResource();

  public abstract A withNewGroupVersionResource(java.lang.String, java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GroupVersionResourceNested<A> withNewGroupVersionResource();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GroupVersionResourceNested<A> withNewGroupVersionResourceLike(io.fabric8.kubernetes.api.model.GroupVersionResource);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GroupVersionResourceNested<A> editGroupVersionResource();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GroupVersionResourceNested<A> editOrNewGroupVersionResource();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$GroupVersionResourceNested<A> editOrNewGroupVersionResourceLike(io.fabric8.kubernetes.api.model.GroupVersionResource);

  public abstract io.fabric8.kubernetes.api.model.version.Info getInfo();

  public abstract io.fabric8.kubernetes.api.model.version.Info buildInfo();

  public abstract A withInfo(io.fabric8.kubernetes.api.model.version.Info);

  public abstract java.lang.Boolean hasInfo();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$InfoNested<A> withNewInfo();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$InfoNested<A> withNewInfoLike(io.fabric8.kubernetes.api.model.version.Info);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$InfoNested<A> editInfo();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$InfoNested<A> editOrNewInfo();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$InfoNested<A> editOrNewInfoLike(io.fabric8.kubernetes.api.model.version.Info);

  public abstract io.fabric8.kubernetes.api.model.LimitRangeList getLimitRangeList();

  public abstract io.fabric8.kubernetes.api.model.LimitRangeList buildLimitRangeList();

  public abstract A withLimitRangeList(io.fabric8.kubernetes.api.model.LimitRangeList);

  public abstract java.lang.Boolean hasLimitRangeList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$LimitRangeListNested<A> withNewLimitRangeList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$LimitRangeListNested<A> withNewLimitRangeListLike(io.fabric8.kubernetes.api.model.LimitRangeList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$LimitRangeListNested<A> editLimitRangeList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$LimitRangeListNested<A> editOrNewLimitRangeList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$LimitRangeListNested<A> editOrNewLimitRangeListLike(io.fabric8.kubernetes.api.model.LimitRangeList);

  public abstract io.fabric8.kubernetes.api.model.ListOptions getListOptions();

  public abstract io.fabric8.kubernetes.api.model.ListOptions buildListOptions();

  public abstract A withListOptions(io.fabric8.kubernetes.api.model.ListOptions);

  public abstract java.lang.Boolean hasListOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ListOptionsNested<A> withNewListOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ListOptionsNested<A> withNewListOptionsLike(io.fabric8.kubernetes.api.model.ListOptions);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ListOptionsNested<A> editListOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ListOptionsNested<A> editOrNewListOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ListOptionsNested<A> editOrNewListOptionsLike(io.fabric8.kubernetes.api.model.ListOptions);

  public abstract io.fabric8.kubernetes.api.model.MicroTime getMicroTime();

  public abstract io.fabric8.kubernetes.api.model.MicroTime buildMicroTime();

  public abstract A withMicroTime(io.fabric8.kubernetes.api.model.MicroTime);

  public abstract java.lang.Boolean hasMicroTime();

  public abstract A withNewMicroTime(java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$MicroTimeNested<A> withNewMicroTime();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$MicroTimeNested<A> withNewMicroTimeLike(io.fabric8.kubernetes.api.model.MicroTime);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$MicroTimeNested<A> editMicroTime();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$MicroTimeNested<A> editOrNewMicroTime();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$MicroTimeNested<A> editOrNewMicroTimeLike(io.fabric8.kubernetes.api.model.MicroTime);

  public abstract io.fabric8.kubernetes.api.model.Namespace getNamespace();

  public abstract io.fabric8.kubernetes.api.model.Namespace buildNamespace();

  public abstract A withNamespace(io.fabric8.kubernetes.api.model.Namespace);

  public abstract java.lang.Boolean hasNamespace();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NamespaceNested<A> withNewNamespace();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NamespaceNested<A> withNewNamespaceLike(io.fabric8.kubernetes.api.model.Namespace);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NamespaceNested<A> editNamespace();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NamespaceNested<A> editOrNewNamespace();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NamespaceNested<A> editOrNewNamespaceLike(io.fabric8.kubernetes.api.model.Namespace);

  public abstract io.fabric8.kubernetes.api.model.NamespaceList getNamespaceList();

  public abstract io.fabric8.kubernetes.api.model.NamespaceList buildNamespaceList();

  public abstract A withNamespaceList(io.fabric8.kubernetes.api.model.NamespaceList);

  public abstract java.lang.Boolean hasNamespaceList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NamespaceListNested<A> withNewNamespaceList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NamespaceListNested<A> withNewNamespaceListLike(io.fabric8.kubernetes.api.model.NamespaceList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NamespaceListNested<A> editNamespaceList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NamespaceListNested<A> editOrNewNamespaceList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NamespaceListNested<A> editOrNewNamespaceListLike(io.fabric8.kubernetes.api.model.NamespaceList);

  public abstract io.fabric8.kubernetes.api.model.Node getNode();

  public abstract io.fabric8.kubernetes.api.model.Node buildNode();

  public abstract A withNode(io.fabric8.kubernetes.api.model.Node);

  public abstract java.lang.Boolean hasNode();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NodeNested<A> withNewNode();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NodeNested<A> withNewNodeLike(io.fabric8.kubernetes.api.model.Node);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NodeNested<A> editNode();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NodeNested<A> editOrNewNode();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NodeNested<A> editOrNewNodeLike(io.fabric8.kubernetes.api.model.Node);

  public abstract io.fabric8.kubernetes.api.model.NodeList getNodeList();

  public abstract io.fabric8.kubernetes.api.model.NodeList buildNodeList();

  public abstract A withNodeList(io.fabric8.kubernetes.api.model.NodeList);

  public abstract java.lang.Boolean hasNodeList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NodeListNested<A> withNewNodeList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NodeListNested<A> withNewNodeListLike(io.fabric8.kubernetes.api.model.NodeList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NodeListNested<A> editNodeList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NodeListNested<A> editOrNewNodeList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$NodeListNested<A> editOrNewNodeListLike(io.fabric8.kubernetes.api.model.NodeList);

  public abstract io.fabric8.kubernetes.api.model.ObjectMeta getObjectMeta();

  public abstract io.fabric8.kubernetes.api.model.ObjectMeta buildObjectMeta();

  public abstract A withObjectMeta(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Boolean hasObjectMeta();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ObjectMetaNested<A> withNewObjectMeta();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ObjectMetaNested<A> withNewObjectMetaLike(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ObjectMetaNested<A> editObjectMeta();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ObjectMetaNested<A> editOrNewObjectMeta();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ObjectMetaNested<A> editOrNewObjectMetaLike(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract io.fabric8.kubernetes.api.model.Patch getPatch();

  public abstract io.fabric8.kubernetes.api.model.Patch buildPatch();

  public abstract A withPatch(io.fabric8.kubernetes.api.model.Patch);

  public abstract java.lang.Boolean hasPatch();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PatchNested<A> withNewPatch();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PatchNested<A> withNewPatchLike(io.fabric8.kubernetes.api.model.Patch);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PatchNested<A> editPatch();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PatchNested<A> editOrNewPatch();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PatchNested<A> editOrNewPatchLike(io.fabric8.kubernetes.api.model.Patch);

  public abstract io.fabric8.kubernetes.api.model.PatchOptions getPatchOptions();

  public abstract io.fabric8.kubernetes.api.model.PatchOptions buildPatchOptions();

  public abstract A withPatchOptions(io.fabric8.kubernetes.api.model.PatchOptions);

  public abstract java.lang.Boolean hasPatchOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PatchOptionsNested<A> withNewPatchOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PatchOptionsNested<A> withNewPatchOptionsLike(io.fabric8.kubernetes.api.model.PatchOptions);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PatchOptionsNested<A> editPatchOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PatchOptionsNested<A> editOrNewPatchOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PatchOptionsNested<A> editOrNewPatchOptionsLike(io.fabric8.kubernetes.api.model.PatchOptions);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolume getPersistentVolume();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolume buildPersistentVolume();

  public abstract A withPersistentVolume(io.fabric8.kubernetes.api.model.PersistentVolume);

  public abstract java.lang.Boolean hasPersistentVolume();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeNested<A> withNewPersistentVolume();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeNested<A> withNewPersistentVolumeLike(io.fabric8.kubernetes.api.model.PersistentVolume);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeNested<A> editPersistentVolume();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeNested<A> editOrNewPersistentVolume();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeNested<A> editOrNewPersistentVolumeLike(io.fabric8.kubernetes.api.model.PersistentVolume);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaim getPersistentVolumeClaim();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaim buildPersistentVolumeClaim();

  public abstract A withPersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim);

  public abstract java.lang.Boolean hasPersistentVolumeClaim();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimNested<A> withNewPersistentVolumeClaim();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimNested<A> withNewPersistentVolumeClaimLike(io.fabric8.kubernetes.api.model.PersistentVolumeClaim);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimNested<A> editPersistentVolumeClaim();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimNested<A> editOrNewPersistentVolumeClaim();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimNested<A> editOrNewPersistentVolumeClaimLike(io.fabric8.kubernetes.api.model.PersistentVolumeClaim);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimList getPersistentVolumeClaimList();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeClaimList buildPersistentVolumeClaimList();

  public abstract A withPersistentVolumeClaimList(io.fabric8.kubernetes.api.model.PersistentVolumeClaimList);

  public abstract java.lang.Boolean hasPersistentVolumeClaimList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimListNested<A> withNewPersistentVolumeClaimList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimListNested<A> withNewPersistentVolumeClaimListLike(io.fabric8.kubernetes.api.model.PersistentVolumeClaimList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimListNested<A> editPersistentVolumeClaimList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimListNested<A> editOrNewPersistentVolumeClaimList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimListNested<A> editOrNewPersistentVolumeClaimListLike(io.fabric8.kubernetes.api.model.PersistentVolumeClaimList);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeList getPersistentVolumeList();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeList buildPersistentVolumeList();

  public abstract A withPersistentVolumeList(io.fabric8.kubernetes.api.model.PersistentVolumeList);

  public abstract java.lang.Boolean hasPersistentVolumeList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeListNested<A> withNewPersistentVolumeList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeListNested<A> withNewPersistentVolumeListLike(io.fabric8.kubernetes.api.model.PersistentVolumeList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeListNested<A> editPersistentVolumeList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeListNested<A> editOrNewPersistentVolumeList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeListNested<A> editOrNewPersistentVolumeListLike(io.fabric8.kubernetes.api.model.PersistentVolumeList);

  public abstract io.fabric8.kubernetes.api.model.PodList getPodList();

  public abstract io.fabric8.kubernetes.api.model.PodList buildPodList();

  public abstract A withPodList(io.fabric8.kubernetes.api.model.PodList);

  public abstract java.lang.Boolean hasPodList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PodListNested<A> withNewPodList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PodListNested<A> withNewPodListLike(io.fabric8.kubernetes.api.model.PodList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PodListNested<A> editPodList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PodListNested<A> editOrNewPodList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PodListNested<A> editOrNewPodListLike(io.fabric8.kubernetes.api.model.PodList);

  public abstract io.fabric8.kubernetes.api.model.PodTemplateList getPodTemplateList();

  public abstract io.fabric8.kubernetes.api.model.PodTemplateList buildPodTemplateList();

  public abstract A withPodTemplateList(io.fabric8.kubernetes.api.model.PodTemplateList);

  public abstract java.lang.Boolean hasPodTemplateList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PodTemplateListNested<A> withNewPodTemplateList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PodTemplateListNested<A> withNewPodTemplateListLike(io.fabric8.kubernetes.api.model.PodTemplateList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PodTemplateListNested<A> editPodTemplateList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PodTemplateListNested<A> editOrNewPodTemplateList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$PodTemplateListNested<A> editOrNewPodTemplateListLike(io.fabric8.kubernetes.api.model.PodTemplateList);

  public abstract io.fabric8.kubernetes.api.model.Quantity getQuantity();

  public abstract io.fabric8.kubernetes.api.model.Quantity buildQuantity();

  public abstract A withQuantity(io.fabric8.kubernetes.api.model.Quantity);

  public abstract java.lang.Boolean hasQuantity();

  public abstract A withNewQuantity(java.lang.String, java.lang.String);

  public abstract A withNewQuantity(java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$QuantityNested<A> withNewQuantity();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$QuantityNested<A> withNewQuantityLike(io.fabric8.kubernetes.api.model.Quantity);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$QuantityNested<A> editQuantity();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$QuantityNested<A> editOrNewQuantity();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$QuantityNested<A> editOrNewQuantityLike(io.fabric8.kubernetes.api.model.Quantity);

  public abstract io.fabric8.kubernetes.api.model.ReplicationControllerList getReplicationControllerList();

  public abstract io.fabric8.kubernetes.api.model.ReplicationControllerList buildReplicationControllerList();

  public abstract A withReplicationControllerList(io.fabric8.kubernetes.api.model.ReplicationControllerList);

  public abstract java.lang.Boolean hasReplicationControllerList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ReplicationControllerListNested<A> withNewReplicationControllerList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ReplicationControllerListNested<A> withNewReplicationControllerListLike(io.fabric8.kubernetes.api.model.ReplicationControllerList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ReplicationControllerListNested<A> editReplicationControllerList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ReplicationControllerListNested<A> editOrNewReplicationControllerList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ReplicationControllerListNested<A> editOrNewReplicationControllerListLike(io.fabric8.kubernetes.api.model.ReplicationControllerList);

  public abstract io.fabric8.kubernetes.api.model.ResourceQuota getResourceQuota();

  public abstract io.fabric8.kubernetes.api.model.ResourceQuota buildResourceQuota();

  public abstract A withResourceQuota(io.fabric8.kubernetes.api.model.ResourceQuota);

  public abstract java.lang.Boolean hasResourceQuota();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaNested<A> withNewResourceQuota();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaNested<A> withNewResourceQuotaLike(io.fabric8.kubernetes.api.model.ResourceQuota);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaNested<A> editResourceQuota();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaNested<A> editOrNewResourceQuota();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaNested<A> editOrNewResourceQuotaLike(io.fabric8.kubernetes.api.model.ResourceQuota);

  public abstract io.fabric8.kubernetes.api.model.ResourceQuotaList getResourceQuotaList();

  public abstract io.fabric8.kubernetes.api.model.ResourceQuotaList buildResourceQuotaList();

  public abstract A withResourceQuotaList(io.fabric8.kubernetes.api.model.ResourceQuotaList);

  public abstract java.lang.Boolean hasResourceQuotaList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaListNested<A> withNewResourceQuotaList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaListNested<A> withNewResourceQuotaListLike(io.fabric8.kubernetes.api.model.ResourceQuotaList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaListNested<A> editResourceQuotaList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaListNested<A> editOrNewResourceQuotaList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaListNested<A> editOrNewResourceQuotaListLike(io.fabric8.kubernetes.api.model.ResourceQuotaList);

  public abstract io.fabric8.kubernetes.api.model.RootPaths getRootPaths();

  public abstract io.fabric8.kubernetes.api.model.RootPaths buildRootPaths();

  public abstract A withRootPaths(io.fabric8.kubernetes.api.model.RootPaths);

  public abstract java.lang.Boolean hasRootPaths();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$RootPathsNested<A> withNewRootPaths();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$RootPathsNested<A> withNewRootPathsLike(io.fabric8.kubernetes.api.model.RootPaths);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$RootPathsNested<A> editRootPaths();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$RootPathsNested<A> editOrNewRootPaths();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$RootPathsNested<A> editOrNewRootPathsLike(io.fabric8.kubernetes.api.model.RootPaths);

  public abstract io.fabric8.kubernetes.api.model.Secret getSecret();

  public abstract io.fabric8.kubernetes.api.model.Secret buildSecret();

  public abstract A withSecret(io.fabric8.kubernetes.api.model.Secret);

  public abstract java.lang.Boolean hasSecret();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$SecretNested<A> withNewSecret();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$SecretNested<A> withNewSecretLike(io.fabric8.kubernetes.api.model.Secret);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$SecretNested<A> editSecret();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$SecretNested<A> editOrNewSecret();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$SecretNested<A> editOrNewSecretLike(io.fabric8.kubernetes.api.model.Secret);

  public abstract io.fabric8.kubernetes.api.model.SecretList getSecretList();

  public abstract io.fabric8.kubernetes.api.model.SecretList buildSecretList();

  public abstract A withSecretList(io.fabric8.kubernetes.api.model.SecretList);

  public abstract java.lang.Boolean hasSecretList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$SecretListNested<A> withNewSecretList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$SecretListNested<A> withNewSecretListLike(io.fabric8.kubernetes.api.model.SecretList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$SecretListNested<A> editSecretList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$SecretListNested<A> editOrNewSecretList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$SecretListNested<A> editOrNewSecretListLike(io.fabric8.kubernetes.api.model.SecretList);

  public abstract io.fabric8.kubernetes.api.model.ServiceAccount getServiceAccount();

  public abstract io.fabric8.kubernetes.api.model.ServiceAccount buildServiceAccount();

  public abstract A withServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount);

  public abstract java.lang.Boolean hasServiceAccount();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceAccountNested<A> withNewServiceAccount();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceAccountNested<A> withNewServiceAccountLike(io.fabric8.kubernetes.api.model.ServiceAccount);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceAccountNested<A> editServiceAccount();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceAccountNested<A> editOrNewServiceAccount();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceAccountNested<A> editOrNewServiceAccountLike(io.fabric8.kubernetes.api.model.ServiceAccount);

  public abstract io.fabric8.kubernetes.api.model.ServiceAccountList getServiceAccountList();

  public abstract io.fabric8.kubernetes.api.model.ServiceAccountList buildServiceAccountList();

  public abstract A withServiceAccountList(io.fabric8.kubernetes.api.model.ServiceAccountList);

  public abstract java.lang.Boolean hasServiceAccountList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceAccountListNested<A> withNewServiceAccountList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceAccountListNested<A> withNewServiceAccountListLike(io.fabric8.kubernetes.api.model.ServiceAccountList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceAccountListNested<A> editServiceAccountList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceAccountListNested<A> editOrNewServiceAccountList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceAccountListNested<A> editOrNewServiceAccountListLike(io.fabric8.kubernetes.api.model.ServiceAccountList);

  public abstract io.fabric8.kubernetes.api.model.ServiceList getServiceList();

  public abstract io.fabric8.kubernetes.api.model.ServiceList buildServiceList();

  public abstract A withServiceList(io.fabric8.kubernetes.api.model.ServiceList);

  public abstract java.lang.Boolean hasServiceList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceListNested<A> withNewServiceList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceListNested<A> withNewServiceListLike(io.fabric8.kubernetes.api.model.ServiceList);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceListNested<A> editServiceList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceListNested<A> editOrNewServiceList();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$ServiceListNested<A> editOrNewServiceListLike(io.fabric8.kubernetes.api.model.ServiceList);

  public abstract io.fabric8.kubernetes.api.model.Status getStatus();

  public abstract io.fabric8.kubernetes.api.model.Status buildStatus();

  public abstract A withStatus(io.fabric8.kubernetes.api.model.Status);

  public abstract java.lang.Boolean hasStatus();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$StatusNested<A> withNewStatus();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$StatusNested<A> withNewStatusLike(io.fabric8.kubernetes.api.model.Status);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$StatusNested<A> editStatus();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$StatusNested<A> editOrNewStatus();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$StatusNested<A> editOrNewStatusLike(io.fabric8.kubernetes.api.model.Status);

  public abstract java.lang.String getTime();

  public abstract A withTime(java.lang.String);

  public abstract java.lang.Boolean hasTime();

  public abstract A withNewTime(java.lang.String);

  public abstract A withNewTime(java.lang.StringBuilder);

  public abstract A withNewTime(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.Toleration getToleration();

  public abstract io.fabric8.kubernetes.api.model.Toleration buildToleration();

  public abstract A withToleration(io.fabric8.kubernetes.api.model.Toleration);

  public abstract java.lang.Boolean hasToleration();

  public abstract A withNewToleration(java.lang.String, java.lang.String, java.lang.String, java.lang.Long, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TolerationNested<A> withNewToleration();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TolerationNested<A> withNewTolerationLike(io.fabric8.kubernetes.api.model.Toleration);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TolerationNested<A> editToleration();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TolerationNested<A> editOrNewToleration();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TolerationNested<A> editOrNewTolerationLike(io.fabric8.kubernetes.api.model.Toleration);

  public abstract io.fabric8.kubernetes.api.model.TopologySelectorTerm getTopologySelectorTerm();

  public abstract io.fabric8.kubernetes.api.model.TopologySelectorTerm buildTopologySelectorTerm();

  public abstract A withTopologySelectorTerm(io.fabric8.kubernetes.api.model.TopologySelectorTerm);

  public abstract java.lang.Boolean hasTopologySelectorTerm();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TopologySelectorTermNested<A> withNewTopologySelectorTerm();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TopologySelectorTermNested<A> withNewTopologySelectorTermLike(io.fabric8.kubernetes.api.model.TopologySelectorTerm);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TopologySelectorTermNested<A> editTopologySelectorTerm();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TopologySelectorTermNested<A> editOrNewTopologySelectorTerm();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TopologySelectorTermNested<A> editOrNewTopologySelectorTermLike(io.fabric8.kubernetes.api.model.TopologySelectorTerm);

  public abstract io.fabric8.kubernetes.api.model.TypeMeta getTypeMeta();

  public abstract io.fabric8.kubernetes.api.model.TypeMeta buildTypeMeta();

  public abstract A withTypeMeta(io.fabric8.kubernetes.api.model.TypeMeta);

  public abstract java.lang.Boolean hasTypeMeta();

  public abstract A withNewTypeMeta(java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TypeMetaNested<A> withNewTypeMeta();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TypeMetaNested<A> withNewTypeMetaLike(io.fabric8.kubernetes.api.model.TypeMeta);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TypeMetaNested<A> editTypeMeta();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TypeMetaNested<A> editOrNewTypeMeta();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$TypeMetaNested<A> editOrNewTypeMetaLike(io.fabric8.kubernetes.api.model.TypeMeta);

  public abstract io.fabric8.kubernetes.api.model.UpdateOptions getUpdateOptions();

  public abstract io.fabric8.kubernetes.api.model.UpdateOptions buildUpdateOptions();

  public abstract A withUpdateOptions(io.fabric8.kubernetes.api.model.UpdateOptions);

  public abstract java.lang.Boolean hasUpdateOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$UpdateOptionsNested<A> withNewUpdateOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$UpdateOptionsNested<A> withNewUpdateOptionsLike(io.fabric8.kubernetes.api.model.UpdateOptions);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$UpdateOptionsNested<A> editUpdateOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$UpdateOptionsNested<A> editOrNewUpdateOptions();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$UpdateOptionsNested<A> editOrNewUpdateOptionsLike(io.fabric8.kubernetes.api.model.UpdateOptions);

  public abstract io.fabric8.kubernetes.api.model.WatchEvent getWatchEvent();

  public abstract io.fabric8.kubernetes.api.model.WatchEvent buildWatchEvent();

  public abstract A withWatchEvent(io.fabric8.kubernetes.api.model.WatchEvent);

  public abstract java.lang.Boolean hasWatchEvent();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$WatchEventNested<A> withNewWatchEvent();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$WatchEventNested<A> withNewWatchEventLike(io.fabric8.kubernetes.api.model.WatchEvent);

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$WatchEventNested<A> editWatchEvent();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$WatchEventNested<A> editOrNewWatchEvent();

  public abstract io.fabric8.kubernetes.api.model.KubeSchemaFluent$WatchEventNested<A> editOrNewWatchEventLike(io.fabric8.kubernetes.api.model.WatchEvent);
}
