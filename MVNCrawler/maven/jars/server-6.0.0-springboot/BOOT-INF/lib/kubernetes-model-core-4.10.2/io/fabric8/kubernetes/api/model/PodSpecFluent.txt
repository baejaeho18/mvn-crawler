Compiled from "PodSpecFluent.java"
public interface io.fabric8.kubernetes.api.model.PodSpecFluent<A extends io.fabric8.kubernetes.api.model.PodSpecFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Long getActiveDeadlineSeconds();

  public abstract A withActiveDeadlineSeconds(java.lang.Long);

  public abstract java.lang.Boolean hasActiveDeadlineSeconds();

  public abstract io.fabric8.kubernetes.api.model.Affinity getAffinity();

  public abstract io.fabric8.kubernetes.api.model.Affinity buildAffinity();

  public abstract A withAffinity(io.fabric8.kubernetes.api.model.Affinity);

  public abstract java.lang.Boolean hasAffinity();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$AffinityNested<A> withNewAffinity();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$AffinityNested<A> withNewAffinityLike(io.fabric8.kubernetes.api.model.Affinity);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$AffinityNested<A> editAffinity();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$AffinityNested<A> editOrNewAffinity();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$AffinityNested<A> editOrNewAffinityLike(io.fabric8.kubernetes.api.model.Affinity);

  public abstract java.lang.Boolean isAutomountServiceAccountToken();

  public abstract A withAutomountServiceAccountToken(java.lang.Boolean);

  public abstract java.lang.Boolean hasAutomountServiceAccountToken();

  public abstract A withNewAutomountServiceAccountToken(java.lang.String);

  public abstract A withNewAutomountServiceAccountToken(boolean);

  public abstract A addToContainers(int, io.fabric8.kubernetes.api.model.Container);

  public abstract A setToContainers(int, io.fabric8.kubernetes.api.model.Container);

  public abstract A addToContainers(io.fabric8.kubernetes.api.model.Container...);

  public abstract A addAllToContainers(java.util.Collection<io.fabric8.kubernetes.api.model.Container>);

  public abstract A removeFromContainers(io.fabric8.kubernetes.api.model.Container...);

  public abstract A removeAllFromContainers(java.util.Collection<io.fabric8.kubernetes.api.model.Container>);

  public abstract A removeMatchingFromContainers(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ContainerBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.Container> getContainers();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.Container> buildContainers();

  public abstract io.fabric8.kubernetes.api.model.Container buildContainer(int);

  public abstract io.fabric8.kubernetes.api.model.Container buildFirstContainer();

  public abstract io.fabric8.kubernetes.api.model.Container buildLastContainer();

  public abstract io.fabric8.kubernetes.api.model.Container buildMatchingContainer(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ContainerBuilder>);

  public abstract java.lang.Boolean hasMatchingContainer(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ContainerBuilder>);

  public abstract A withContainers(java.util.List<io.fabric8.kubernetes.api.model.Container>);

  public abstract A withContainers(io.fabric8.kubernetes.api.model.Container...);

  public abstract java.lang.Boolean hasContainers();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ContainersNested<A> addNewContainer();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ContainersNested<A> addNewContainerLike(io.fabric8.kubernetes.api.model.Container);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ContainersNested<A> setNewContainerLike(int, io.fabric8.kubernetes.api.model.Container);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ContainersNested<A> editContainer(int);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ContainersNested<A> editFirstContainer();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ContainersNested<A> editLastContainer();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ContainersNested<A> editMatchingContainer(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ContainerBuilder>);

  public abstract io.fabric8.kubernetes.api.model.PodDNSConfig getDnsConfig();

  public abstract io.fabric8.kubernetes.api.model.PodDNSConfig buildDnsConfig();

  public abstract A withDnsConfig(io.fabric8.kubernetes.api.model.PodDNSConfig);

  public abstract java.lang.Boolean hasDnsConfig();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$DnsConfigNested<A> withNewDnsConfig();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$DnsConfigNested<A> withNewDnsConfigLike(io.fabric8.kubernetes.api.model.PodDNSConfig);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$DnsConfigNested<A> editDnsConfig();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$DnsConfigNested<A> editOrNewDnsConfig();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$DnsConfigNested<A> editOrNewDnsConfigLike(io.fabric8.kubernetes.api.model.PodDNSConfig);

  public abstract java.lang.String getDnsPolicy();

  public abstract A withDnsPolicy(java.lang.String);

  public abstract java.lang.Boolean hasDnsPolicy();

  public abstract A withNewDnsPolicy(java.lang.String);

  public abstract A withNewDnsPolicy(java.lang.StringBuilder);

  public abstract A withNewDnsPolicy(java.lang.StringBuffer);

  public abstract java.lang.Boolean isEnableServiceLinks();

  public abstract A withEnableServiceLinks(java.lang.Boolean);

  public abstract java.lang.Boolean hasEnableServiceLinks();

  public abstract A withNewEnableServiceLinks(java.lang.String);

  public abstract A withNewEnableServiceLinks(boolean);

  public abstract A addToEphemeralContainers(int, io.fabric8.kubernetes.api.model.EphemeralContainer);

  public abstract A setToEphemeralContainers(int, io.fabric8.kubernetes.api.model.EphemeralContainer);

  public abstract A addToEphemeralContainers(io.fabric8.kubernetes.api.model.EphemeralContainer...);

  public abstract A addAllToEphemeralContainers(java.util.Collection<io.fabric8.kubernetes.api.model.EphemeralContainer>);

  public abstract A removeFromEphemeralContainers(io.fabric8.kubernetes.api.model.EphemeralContainer...);

  public abstract A removeAllFromEphemeralContainers(java.util.Collection<io.fabric8.kubernetes.api.model.EphemeralContainer>);

  public abstract A removeMatchingFromEphemeralContainers(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EphemeralContainerBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.EphemeralContainer> getEphemeralContainers();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.EphemeralContainer> buildEphemeralContainers();

  public abstract io.fabric8.kubernetes.api.model.EphemeralContainer buildEphemeralContainer(int);

  public abstract io.fabric8.kubernetes.api.model.EphemeralContainer buildFirstEphemeralContainer();

  public abstract io.fabric8.kubernetes.api.model.EphemeralContainer buildLastEphemeralContainer();

  public abstract io.fabric8.kubernetes.api.model.EphemeralContainer buildMatchingEphemeralContainer(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EphemeralContainerBuilder>);

  public abstract java.lang.Boolean hasMatchingEphemeralContainer(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EphemeralContainerBuilder>);

  public abstract A withEphemeralContainers(java.util.List<io.fabric8.kubernetes.api.model.EphemeralContainer>);

  public abstract A withEphemeralContainers(io.fabric8.kubernetes.api.model.EphemeralContainer...);

  public abstract java.lang.Boolean hasEphemeralContainers();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$EphemeralContainersNested<A> addNewEphemeralContainer();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$EphemeralContainersNested<A> addNewEphemeralContainerLike(io.fabric8.kubernetes.api.model.EphemeralContainer);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$EphemeralContainersNested<A> setNewEphemeralContainerLike(int, io.fabric8.kubernetes.api.model.EphemeralContainer);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$EphemeralContainersNested<A> editEphemeralContainer(int);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$EphemeralContainersNested<A> editFirstEphemeralContainer();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$EphemeralContainersNested<A> editLastEphemeralContainer();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$EphemeralContainersNested<A> editMatchingEphemeralContainer(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EphemeralContainerBuilder>);

  public abstract A addToHostAliases(int, io.fabric8.kubernetes.api.model.HostAlias);

  public abstract A setToHostAliases(int, io.fabric8.kubernetes.api.model.HostAlias);

  public abstract A addToHostAliases(io.fabric8.kubernetes.api.model.HostAlias...);

  public abstract A addAllToHostAliases(java.util.Collection<io.fabric8.kubernetes.api.model.HostAlias>);

  public abstract A removeFromHostAliases(io.fabric8.kubernetes.api.model.HostAlias...);

  public abstract A removeAllFromHostAliases(java.util.Collection<io.fabric8.kubernetes.api.model.HostAlias>);

  public abstract A removeMatchingFromHostAliases(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.HostAliasBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.HostAlias> getHostAliases();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.HostAlias> buildHostAliases();

  public abstract io.fabric8.kubernetes.api.model.HostAlias buildHostAlias(int);

  public abstract io.fabric8.kubernetes.api.model.HostAlias buildFirstHostAlias();

  public abstract io.fabric8.kubernetes.api.model.HostAlias buildLastHostAlias();

  public abstract io.fabric8.kubernetes.api.model.HostAlias buildMatchingHostAlias(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.HostAliasBuilder>);

  public abstract java.lang.Boolean hasMatchingHostAlias(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.HostAliasBuilder>);

  public abstract A withHostAliases(java.util.List<io.fabric8.kubernetes.api.model.HostAlias>);

  public abstract A withHostAliases(io.fabric8.kubernetes.api.model.HostAlias...);

  public abstract java.lang.Boolean hasHostAliases();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$HostAliasesNested<A> addNewHostAlias();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$HostAliasesNested<A> addNewHostAliasLike(io.fabric8.kubernetes.api.model.HostAlias);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$HostAliasesNested<A> setNewHostAliasLike(int, io.fabric8.kubernetes.api.model.HostAlias);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$HostAliasesNested<A> editHostAlias(int);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$HostAliasesNested<A> editFirstHostAlias();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$HostAliasesNested<A> editLastHostAlias();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$HostAliasesNested<A> editMatchingHostAlias(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.HostAliasBuilder>);

  public abstract java.lang.Boolean isHostIPC();

  public abstract A withHostIPC(java.lang.Boolean);

  public abstract java.lang.Boolean hasHostIPC();

  public abstract A withNewHostIPC(java.lang.String);

  public abstract A withNewHostIPC(boolean);

  public abstract java.lang.Boolean isHostNetwork();

  public abstract A withHostNetwork(java.lang.Boolean);

  public abstract java.lang.Boolean hasHostNetwork();

  public abstract A withNewHostNetwork(java.lang.String);

  public abstract A withNewHostNetwork(boolean);

  public abstract java.lang.Boolean isHostPID();

  public abstract A withHostPID(java.lang.Boolean);

  public abstract java.lang.Boolean hasHostPID();

  public abstract A withNewHostPID(java.lang.String);

  public abstract A withNewHostPID(boolean);

  public abstract java.lang.String getHostname();

  public abstract A withHostname(java.lang.String);

  public abstract java.lang.Boolean hasHostname();

  public abstract A withNewHostname(java.lang.String);

  public abstract A withNewHostname(java.lang.StringBuilder);

  public abstract A withNewHostname(java.lang.StringBuffer);

  public abstract A addToImagePullSecrets(int, io.fabric8.kubernetes.api.model.LocalObjectReference);

  public abstract A setToImagePullSecrets(int, io.fabric8.kubernetes.api.model.LocalObjectReference);

  public abstract A addToImagePullSecrets(io.fabric8.kubernetes.api.model.LocalObjectReference...);

  public abstract A addAllToImagePullSecrets(java.util.Collection<io.fabric8.kubernetes.api.model.LocalObjectReference>);

  public abstract A removeFromImagePullSecrets(io.fabric8.kubernetes.api.model.LocalObjectReference...);

  public abstract A removeAllFromImagePullSecrets(java.util.Collection<io.fabric8.kubernetes.api.model.LocalObjectReference>);

  public abstract A removeMatchingFromImagePullSecrets(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.LocalObjectReferenceBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.LocalObjectReference> getImagePullSecrets();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.LocalObjectReference> buildImagePullSecrets();

  public abstract io.fabric8.kubernetes.api.model.LocalObjectReference buildImagePullSecret(int);

  public abstract io.fabric8.kubernetes.api.model.LocalObjectReference buildFirstImagePullSecret();

  public abstract io.fabric8.kubernetes.api.model.LocalObjectReference buildLastImagePullSecret();

  public abstract io.fabric8.kubernetes.api.model.LocalObjectReference buildMatchingImagePullSecret(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.LocalObjectReferenceBuilder>);

  public abstract java.lang.Boolean hasMatchingImagePullSecret(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.LocalObjectReferenceBuilder>);

  public abstract A withImagePullSecrets(java.util.List<io.fabric8.kubernetes.api.model.LocalObjectReference>);

  public abstract A withImagePullSecrets(io.fabric8.kubernetes.api.model.LocalObjectReference...);

  public abstract java.lang.Boolean hasImagePullSecrets();

  public abstract A addNewImagePullSecret(java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ImagePullSecretsNested<A> addNewImagePullSecret();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ImagePullSecretsNested<A> addNewImagePullSecretLike(io.fabric8.kubernetes.api.model.LocalObjectReference);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ImagePullSecretsNested<A> setNewImagePullSecretLike(int, io.fabric8.kubernetes.api.model.LocalObjectReference);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ImagePullSecretsNested<A> editImagePullSecret(int);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ImagePullSecretsNested<A> editFirstImagePullSecret();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ImagePullSecretsNested<A> editLastImagePullSecret();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ImagePullSecretsNested<A> editMatchingImagePullSecret(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.LocalObjectReferenceBuilder>);

  public abstract A addToInitContainers(int, io.fabric8.kubernetes.api.model.Container);

  public abstract A setToInitContainers(int, io.fabric8.kubernetes.api.model.Container);

  public abstract A addToInitContainers(io.fabric8.kubernetes.api.model.Container...);

  public abstract A addAllToInitContainers(java.util.Collection<io.fabric8.kubernetes.api.model.Container>);

  public abstract A removeFromInitContainers(io.fabric8.kubernetes.api.model.Container...);

  public abstract A removeAllFromInitContainers(java.util.Collection<io.fabric8.kubernetes.api.model.Container>);

  public abstract A removeMatchingFromInitContainers(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ContainerBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.Container> getInitContainers();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.Container> buildInitContainers();

  public abstract io.fabric8.kubernetes.api.model.Container buildInitContainer(int);

  public abstract io.fabric8.kubernetes.api.model.Container buildFirstInitContainer();

  public abstract io.fabric8.kubernetes.api.model.Container buildLastInitContainer();

  public abstract io.fabric8.kubernetes.api.model.Container buildMatchingInitContainer(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ContainerBuilder>);

  public abstract java.lang.Boolean hasMatchingInitContainer(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ContainerBuilder>);

  public abstract A withInitContainers(java.util.List<io.fabric8.kubernetes.api.model.Container>);

  public abstract A withInitContainers(io.fabric8.kubernetes.api.model.Container...);

  public abstract java.lang.Boolean hasInitContainers();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$InitContainersNested<A> addNewInitContainer();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$InitContainersNested<A> addNewInitContainerLike(io.fabric8.kubernetes.api.model.Container);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$InitContainersNested<A> setNewInitContainerLike(int, io.fabric8.kubernetes.api.model.Container);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$InitContainersNested<A> editInitContainer(int);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$InitContainersNested<A> editFirstInitContainer();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$InitContainersNested<A> editLastInitContainer();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$InitContainersNested<A> editMatchingInitContainer(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ContainerBuilder>);

  public abstract java.lang.String getNodeName();

  public abstract A withNodeName(java.lang.String);

  public abstract java.lang.Boolean hasNodeName();

  public abstract A withNewNodeName(java.lang.String);

  public abstract A withNewNodeName(java.lang.StringBuilder);

  public abstract A withNewNodeName(java.lang.StringBuffer);

  public abstract A addToNodeSelector(java.lang.String, java.lang.String);

  public abstract A addToNodeSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract A removeFromNodeSelector(java.lang.String);

  public abstract A removeFromNodeSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.Map<java.lang.String, java.lang.String> getNodeSelector();

  public abstract A withNodeSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.Boolean hasNodeSelector();

  public abstract A addToOverhead(java.lang.String, io.fabric8.kubernetes.api.model.Quantity);

  public abstract A addToOverhead(java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity>);

  public abstract A removeFromOverhead(java.lang.String);

  public abstract A removeFromOverhead(java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity>);

  public abstract java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity> getOverhead();

  public abstract A withOverhead(java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity>);

  public abstract java.lang.Boolean hasOverhead();

  public abstract java.lang.String getPreemptionPolicy();

  public abstract A withPreemptionPolicy(java.lang.String);

  public abstract java.lang.Boolean hasPreemptionPolicy();

  public abstract A withNewPreemptionPolicy(java.lang.String);

  public abstract A withNewPreemptionPolicy(java.lang.StringBuilder);

  public abstract A withNewPreemptionPolicy(java.lang.StringBuffer);

  public abstract java.lang.Integer getPriority();

  public abstract A withPriority(java.lang.Integer);

  public abstract java.lang.Boolean hasPriority();

  public abstract java.lang.String getPriorityClassName();

  public abstract A withPriorityClassName(java.lang.String);

  public abstract java.lang.Boolean hasPriorityClassName();

  public abstract A withNewPriorityClassName(java.lang.String);

  public abstract A withNewPriorityClassName(java.lang.StringBuilder);

  public abstract A withNewPriorityClassName(java.lang.StringBuffer);

  public abstract A addToReadinessGates(int, io.fabric8.kubernetes.api.model.PodReadinessGate);

  public abstract A setToReadinessGates(int, io.fabric8.kubernetes.api.model.PodReadinessGate);

  public abstract A addToReadinessGates(io.fabric8.kubernetes.api.model.PodReadinessGate...);

  public abstract A addAllToReadinessGates(java.util.Collection<io.fabric8.kubernetes.api.model.PodReadinessGate>);

  public abstract A removeFromReadinessGates(io.fabric8.kubernetes.api.model.PodReadinessGate...);

  public abstract A removeAllFromReadinessGates(java.util.Collection<io.fabric8.kubernetes.api.model.PodReadinessGate>);

  public abstract A removeMatchingFromReadinessGates(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.PodReadinessGateBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.PodReadinessGate> getReadinessGates();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.PodReadinessGate> buildReadinessGates();

  public abstract io.fabric8.kubernetes.api.model.PodReadinessGate buildReadinessGate(int);

  public abstract io.fabric8.kubernetes.api.model.PodReadinessGate buildFirstReadinessGate();

  public abstract io.fabric8.kubernetes.api.model.PodReadinessGate buildLastReadinessGate();

  public abstract io.fabric8.kubernetes.api.model.PodReadinessGate buildMatchingReadinessGate(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.PodReadinessGateBuilder>);

  public abstract java.lang.Boolean hasMatchingReadinessGate(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.PodReadinessGateBuilder>);

  public abstract A withReadinessGates(java.util.List<io.fabric8.kubernetes.api.model.PodReadinessGate>);

  public abstract A withReadinessGates(io.fabric8.kubernetes.api.model.PodReadinessGate...);

  public abstract java.lang.Boolean hasReadinessGates();

  public abstract A addNewReadinessGate(java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ReadinessGatesNested<A> addNewReadinessGate();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ReadinessGatesNested<A> addNewReadinessGateLike(io.fabric8.kubernetes.api.model.PodReadinessGate);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ReadinessGatesNested<A> setNewReadinessGateLike(int, io.fabric8.kubernetes.api.model.PodReadinessGate);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ReadinessGatesNested<A> editReadinessGate(int);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ReadinessGatesNested<A> editFirstReadinessGate();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ReadinessGatesNested<A> editLastReadinessGate();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$ReadinessGatesNested<A> editMatchingReadinessGate(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.PodReadinessGateBuilder>);

  public abstract java.lang.String getRestartPolicy();

  public abstract A withRestartPolicy(java.lang.String);

  public abstract java.lang.Boolean hasRestartPolicy();

  public abstract A withNewRestartPolicy(java.lang.String);

  public abstract A withNewRestartPolicy(java.lang.StringBuilder);

  public abstract A withNewRestartPolicy(java.lang.StringBuffer);

  public abstract java.lang.String getRuntimeClassName();

  public abstract A withRuntimeClassName(java.lang.String);

  public abstract java.lang.Boolean hasRuntimeClassName();

  public abstract A withNewRuntimeClassName(java.lang.String);

  public abstract A withNewRuntimeClassName(java.lang.StringBuilder);

  public abstract A withNewRuntimeClassName(java.lang.StringBuffer);

  public abstract java.lang.String getSchedulerName();

  public abstract A withSchedulerName(java.lang.String);

  public abstract java.lang.Boolean hasSchedulerName();

  public abstract A withNewSchedulerName(java.lang.String);

  public abstract A withNewSchedulerName(java.lang.StringBuilder);

  public abstract A withNewSchedulerName(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.PodSecurityContext getSecurityContext();

  public abstract io.fabric8.kubernetes.api.model.PodSecurityContext buildSecurityContext();

  public abstract A withSecurityContext(io.fabric8.kubernetes.api.model.PodSecurityContext);

  public abstract java.lang.Boolean hasSecurityContext();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$SecurityContextNested<A> withNewSecurityContext();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$SecurityContextNested<A> withNewSecurityContextLike(io.fabric8.kubernetes.api.model.PodSecurityContext);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$SecurityContextNested<A> editSecurityContext();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$SecurityContextNested<A> editOrNewSecurityContext();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$SecurityContextNested<A> editOrNewSecurityContextLike(io.fabric8.kubernetes.api.model.PodSecurityContext);

  public abstract java.lang.String getServiceAccount();

  public abstract A withServiceAccount(java.lang.String);

  public abstract java.lang.Boolean hasServiceAccount();

  public abstract A withNewServiceAccount(java.lang.String);

  public abstract A withNewServiceAccount(java.lang.StringBuilder);

  public abstract A withNewServiceAccount(java.lang.StringBuffer);

  public abstract java.lang.String getServiceAccountName();

  public abstract A withServiceAccountName(java.lang.String);

  public abstract java.lang.Boolean hasServiceAccountName();

  public abstract A withNewServiceAccountName(java.lang.String);

  public abstract A withNewServiceAccountName(java.lang.StringBuilder);

  public abstract A withNewServiceAccountName(java.lang.StringBuffer);

  public abstract java.lang.Boolean isShareProcessNamespace();

  public abstract A withShareProcessNamespace(java.lang.Boolean);

  public abstract java.lang.Boolean hasShareProcessNamespace();

  public abstract A withNewShareProcessNamespace(java.lang.String);

  public abstract A withNewShareProcessNamespace(boolean);

  public abstract java.lang.String getSubdomain();

  public abstract A withSubdomain(java.lang.String);

  public abstract java.lang.Boolean hasSubdomain();

  public abstract A withNewSubdomain(java.lang.String);

  public abstract A withNewSubdomain(java.lang.StringBuilder);

  public abstract A withNewSubdomain(java.lang.StringBuffer);

  public abstract java.lang.Long getTerminationGracePeriodSeconds();

  public abstract A withTerminationGracePeriodSeconds(java.lang.Long);

  public abstract java.lang.Boolean hasTerminationGracePeriodSeconds();

  public abstract A addToTolerations(int, io.fabric8.kubernetes.api.model.Toleration);

  public abstract A setToTolerations(int, io.fabric8.kubernetes.api.model.Toleration);

  public abstract A addToTolerations(io.fabric8.kubernetes.api.model.Toleration...);

  public abstract A addAllToTolerations(java.util.Collection<io.fabric8.kubernetes.api.model.Toleration>);

  public abstract A removeFromTolerations(io.fabric8.kubernetes.api.model.Toleration...);

  public abstract A removeAllFromTolerations(java.util.Collection<io.fabric8.kubernetes.api.model.Toleration>);

  public abstract A removeMatchingFromTolerations(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.TolerationBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.Toleration> getTolerations();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.Toleration> buildTolerations();

  public abstract io.fabric8.kubernetes.api.model.Toleration buildToleration(int);

  public abstract io.fabric8.kubernetes.api.model.Toleration buildFirstToleration();

  public abstract io.fabric8.kubernetes.api.model.Toleration buildLastToleration();

  public abstract io.fabric8.kubernetes.api.model.Toleration buildMatchingToleration(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.TolerationBuilder>);

  public abstract java.lang.Boolean hasMatchingToleration(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.TolerationBuilder>);

  public abstract A withTolerations(java.util.List<io.fabric8.kubernetes.api.model.Toleration>);

  public abstract A withTolerations(io.fabric8.kubernetes.api.model.Toleration...);

  public abstract java.lang.Boolean hasTolerations();

  public abstract A addNewToleration(java.lang.String, java.lang.String, java.lang.String, java.lang.Long, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$TolerationsNested<A> addNewToleration();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$TolerationsNested<A> addNewTolerationLike(io.fabric8.kubernetes.api.model.Toleration);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$TolerationsNested<A> setNewTolerationLike(int, io.fabric8.kubernetes.api.model.Toleration);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$TolerationsNested<A> editToleration(int);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$TolerationsNested<A> editFirstToleration();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$TolerationsNested<A> editLastToleration();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$TolerationsNested<A> editMatchingToleration(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.TolerationBuilder>);

  public abstract A addToTopologySpreadConstraints(int, io.fabric8.kubernetes.api.model.TopologySpreadConstraint);

  public abstract A setToTopologySpreadConstraints(int, io.fabric8.kubernetes.api.model.TopologySpreadConstraint);

  public abstract A addToTopologySpreadConstraints(io.fabric8.kubernetes.api.model.TopologySpreadConstraint...);

  public abstract A addAllToTopologySpreadConstraints(java.util.Collection<io.fabric8.kubernetes.api.model.TopologySpreadConstraint>);

  public abstract A removeFromTopologySpreadConstraints(io.fabric8.kubernetes.api.model.TopologySpreadConstraint...);

  public abstract A removeAllFromTopologySpreadConstraints(java.util.Collection<io.fabric8.kubernetes.api.model.TopologySpreadConstraint>);

  public abstract A removeMatchingFromTopologySpreadConstraints(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.TopologySpreadConstraintBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.TopologySpreadConstraint> getTopologySpreadConstraints();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.TopologySpreadConstraint> buildTopologySpreadConstraints();

  public abstract io.fabric8.kubernetes.api.model.TopologySpreadConstraint buildTopologySpreadConstraint(int);

  public abstract io.fabric8.kubernetes.api.model.TopologySpreadConstraint buildFirstTopologySpreadConstraint();

  public abstract io.fabric8.kubernetes.api.model.TopologySpreadConstraint buildLastTopologySpreadConstraint();

  public abstract io.fabric8.kubernetes.api.model.TopologySpreadConstraint buildMatchingTopologySpreadConstraint(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.TopologySpreadConstraintBuilder>);

  public abstract java.lang.Boolean hasMatchingTopologySpreadConstraint(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.TopologySpreadConstraintBuilder>);

  public abstract A withTopologySpreadConstraints(java.util.List<io.fabric8.kubernetes.api.model.TopologySpreadConstraint>);

  public abstract A withTopologySpreadConstraints(io.fabric8.kubernetes.api.model.TopologySpreadConstraint...);

  public abstract java.lang.Boolean hasTopologySpreadConstraints();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$TopologySpreadConstraintsNested<A> addNewTopologySpreadConstraint();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$TopologySpreadConstraintsNested<A> addNewTopologySpreadConstraintLike(io.fabric8.kubernetes.api.model.TopologySpreadConstraint);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$TopologySpreadConstraintsNested<A> setNewTopologySpreadConstraintLike(int, io.fabric8.kubernetes.api.model.TopologySpreadConstraint);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$TopologySpreadConstraintsNested<A> editTopologySpreadConstraint(int);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$TopologySpreadConstraintsNested<A> editFirstTopologySpreadConstraint();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$TopologySpreadConstraintsNested<A> editLastTopologySpreadConstraint();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$TopologySpreadConstraintsNested<A> editMatchingTopologySpreadConstraint(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.TopologySpreadConstraintBuilder>);

  public abstract A addToVolumes(int, io.fabric8.kubernetes.api.model.Volume);

  public abstract A setToVolumes(int, io.fabric8.kubernetes.api.model.Volume);

  public abstract A addToVolumes(io.fabric8.kubernetes.api.model.Volume...);

  public abstract A addAllToVolumes(java.util.Collection<io.fabric8.kubernetes.api.model.Volume>);

  public abstract A removeFromVolumes(io.fabric8.kubernetes.api.model.Volume...);

  public abstract A removeAllFromVolumes(java.util.Collection<io.fabric8.kubernetes.api.model.Volume>);

  public abstract A removeMatchingFromVolumes(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.VolumeBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.Volume> getVolumes();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.Volume> buildVolumes();

  public abstract io.fabric8.kubernetes.api.model.Volume buildVolume(int);

  public abstract io.fabric8.kubernetes.api.model.Volume buildFirstVolume();

  public abstract io.fabric8.kubernetes.api.model.Volume buildLastVolume();

  public abstract io.fabric8.kubernetes.api.model.Volume buildMatchingVolume(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.VolumeBuilder>);

  public abstract java.lang.Boolean hasMatchingVolume(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.VolumeBuilder>);

  public abstract A withVolumes(java.util.List<io.fabric8.kubernetes.api.model.Volume>);

  public abstract A withVolumes(io.fabric8.kubernetes.api.model.Volume...);

  public abstract java.lang.Boolean hasVolumes();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$VolumesNested<A> addNewVolume();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$VolumesNested<A> addNewVolumeLike(io.fabric8.kubernetes.api.model.Volume);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$VolumesNested<A> setNewVolumeLike(int, io.fabric8.kubernetes.api.model.Volume);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$VolumesNested<A> editVolume(int);

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$VolumesNested<A> editFirstVolume();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$VolumesNested<A> editLastVolume();

  public abstract io.fabric8.kubernetes.api.model.PodSpecFluent$VolumesNested<A> editMatchingVolume(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.VolumeBuilder>);
}
