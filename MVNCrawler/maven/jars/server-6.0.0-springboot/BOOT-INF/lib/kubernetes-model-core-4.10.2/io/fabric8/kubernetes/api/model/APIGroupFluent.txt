Compiled from "APIGroupFluent.java"
public interface io.fabric8.kubernetes.api.model.APIGroupFluent<A extends io.fabric8.kubernetes.api.model.APIGroupFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();

  public abstract A withNewName(java.lang.String);

  public abstract A withNewName(java.lang.StringBuilder);

  public abstract A withNewName(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.GroupVersionForDiscovery getPreferredVersion();

  public abstract io.fabric8.kubernetes.api.model.GroupVersionForDiscovery buildPreferredVersion();

  public abstract A withPreferredVersion(io.fabric8.kubernetes.api.model.GroupVersionForDiscovery);

  public abstract java.lang.Boolean hasPreferredVersion();

  public abstract A withNewPreferredVersion(java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$PreferredVersionNested<A> withNewPreferredVersion();

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$PreferredVersionNested<A> withNewPreferredVersionLike(io.fabric8.kubernetes.api.model.GroupVersionForDiscovery);

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$PreferredVersionNested<A> editPreferredVersion();

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$PreferredVersionNested<A> editOrNewPreferredVersion();

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$PreferredVersionNested<A> editOrNewPreferredVersionLike(io.fabric8.kubernetes.api.model.GroupVersionForDiscovery);

  public abstract A addToServerAddressByClientCIDRs(int, io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR);

  public abstract A setToServerAddressByClientCIDRs(int, io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR);

  public abstract A addToServerAddressByClientCIDRs(io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR...);

  public abstract A addAllToServerAddressByClientCIDRs(java.util.Collection<io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR>);

  public abstract A removeFromServerAddressByClientCIDRs(io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR...);

  public abstract A removeAllFromServerAddressByClientCIDRs(java.util.Collection<io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR>);

  public abstract A removeMatchingFromServerAddressByClientCIDRs(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ServerAddressByClientCIDRBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR> getServerAddressByClientCIDRs();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR> buildServerAddressByClientCIDRs();

  public abstract io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR buildServerAddressByClientCIDR(int);

  public abstract io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR buildFirstServerAddressByClientCIDR();

  public abstract io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR buildLastServerAddressByClientCIDR();

  public abstract io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR buildMatchingServerAddressByClientCIDR(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ServerAddressByClientCIDRBuilder>);

  public abstract java.lang.Boolean hasMatchingServerAddressByClientCIDR(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ServerAddressByClientCIDRBuilder>);

  public abstract A withServerAddressByClientCIDRs(java.util.List<io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR>);

  public abstract A withServerAddressByClientCIDRs(io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR...);

  public abstract java.lang.Boolean hasServerAddressByClientCIDRs();

  public abstract A addNewServerAddressByClientCIDR(java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$ServerAddressByClientCIDRsNested<A> addNewServerAddressByClientCIDR();

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$ServerAddressByClientCIDRsNested<A> addNewServerAddressByClientCIDRLike(io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR);

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$ServerAddressByClientCIDRsNested<A> setNewServerAddressByClientCIDRLike(int, io.fabric8.kubernetes.api.model.ServerAddressByClientCIDR);

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$ServerAddressByClientCIDRsNested<A> editServerAddressByClientCIDR(int);

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$ServerAddressByClientCIDRsNested<A> editFirstServerAddressByClientCIDR();

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$ServerAddressByClientCIDRsNested<A> editLastServerAddressByClientCIDR();

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$ServerAddressByClientCIDRsNested<A> editMatchingServerAddressByClientCIDR(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ServerAddressByClientCIDRBuilder>);

  public abstract A addToVersions(int, io.fabric8.kubernetes.api.model.GroupVersionForDiscovery);

  public abstract A setToVersions(int, io.fabric8.kubernetes.api.model.GroupVersionForDiscovery);

  public abstract A addToVersions(io.fabric8.kubernetes.api.model.GroupVersionForDiscovery...);

  public abstract A addAllToVersions(java.util.Collection<io.fabric8.kubernetes.api.model.GroupVersionForDiscovery>);

  public abstract A removeFromVersions(io.fabric8.kubernetes.api.model.GroupVersionForDiscovery...);

  public abstract A removeAllFromVersions(java.util.Collection<io.fabric8.kubernetes.api.model.GroupVersionForDiscovery>);

  public abstract A removeMatchingFromVersions(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.GroupVersionForDiscoveryBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.GroupVersionForDiscovery> getVersions();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.GroupVersionForDiscovery> buildVersions();

  public abstract io.fabric8.kubernetes.api.model.GroupVersionForDiscovery buildVersion(int);

  public abstract io.fabric8.kubernetes.api.model.GroupVersionForDiscovery buildFirstVersion();

  public abstract io.fabric8.kubernetes.api.model.GroupVersionForDiscovery buildLastVersion();

  public abstract io.fabric8.kubernetes.api.model.GroupVersionForDiscovery buildMatchingVersion(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.GroupVersionForDiscoveryBuilder>);

  public abstract java.lang.Boolean hasMatchingVersion(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.GroupVersionForDiscoveryBuilder>);

  public abstract A withVersions(java.util.List<io.fabric8.kubernetes.api.model.GroupVersionForDiscovery>);

  public abstract A withVersions(io.fabric8.kubernetes.api.model.GroupVersionForDiscovery...);

  public abstract java.lang.Boolean hasVersions();

  public abstract A addNewVersion(java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$VersionsNested<A> addNewVersion();

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$VersionsNested<A> addNewVersionLike(io.fabric8.kubernetes.api.model.GroupVersionForDiscovery);

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$VersionsNested<A> setNewVersionLike(int, io.fabric8.kubernetes.api.model.GroupVersionForDiscovery);

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$VersionsNested<A> editVersion(int);

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$VersionsNested<A> editFirstVersion();

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$VersionsNested<A> editLastVersion();

  public abstract io.fabric8.kubernetes.api.model.APIGroupFluent$VersionsNested<A> editMatchingVersion(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.GroupVersionForDiscoveryBuilder>);
}
