Compiled from "ProjectedVolumeSourceFluent.java"
public interface io.fabric8.kubernetes.api.model.ProjectedVolumeSourceFluent<A extends io.fabric8.kubernetes.api.model.ProjectedVolumeSourceFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Integer getDefaultMode();

  public abstract A withDefaultMode(java.lang.Integer);

  public abstract java.lang.Boolean hasDefaultMode();

  public abstract A addToSources(int, io.fabric8.kubernetes.api.model.VolumeProjection);

  public abstract A setToSources(int, io.fabric8.kubernetes.api.model.VolumeProjection);

  public abstract A addToSources(io.fabric8.kubernetes.api.model.VolumeProjection...);

  public abstract A addAllToSources(java.util.Collection<io.fabric8.kubernetes.api.model.VolumeProjection>);

  public abstract A removeFromSources(io.fabric8.kubernetes.api.model.VolumeProjection...);

  public abstract A removeAllFromSources(java.util.Collection<io.fabric8.kubernetes.api.model.VolumeProjection>);

  public abstract A removeMatchingFromSources(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.VolumeProjectionBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.VolumeProjection> getSources();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.VolumeProjection> buildSources();

  public abstract io.fabric8.kubernetes.api.model.VolumeProjection buildSource(int);

  public abstract io.fabric8.kubernetes.api.model.VolumeProjection buildFirstSource();

  public abstract io.fabric8.kubernetes.api.model.VolumeProjection buildLastSource();

  public abstract io.fabric8.kubernetes.api.model.VolumeProjection buildMatchingSource(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.VolumeProjectionBuilder>);

  public abstract java.lang.Boolean hasMatchingSource(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.VolumeProjectionBuilder>);

  public abstract A withSources(java.util.List<io.fabric8.kubernetes.api.model.VolumeProjection>);

  public abstract A withSources(io.fabric8.kubernetes.api.model.VolumeProjection...);

  public abstract java.lang.Boolean hasSources();

  public abstract io.fabric8.kubernetes.api.model.ProjectedVolumeSourceFluent$SourcesNested<A> addNewSource();

  public abstract io.fabric8.kubernetes.api.model.ProjectedVolumeSourceFluent$SourcesNested<A> addNewSourceLike(io.fabric8.kubernetes.api.model.VolumeProjection);

  public abstract io.fabric8.kubernetes.api.model.ProjectedVolumeSourceFluent$SourcesNested<A> setNewSourceLike(int, io.fabric8.kubernetes.api.model.VolumeProjection);

  public abstract io.fabric8.kubernetes.api.model.ProjectedVolumeSourceFluent$SourcesNested<A> editSource(int);

  public abstract io.fabric8.kubernetes.api.model.ProjectedVolumeSourceFluent$SourcesNested<A> editFirstSource();

  public abstract io.fabric8.kubernetes.api.model.ProjectedVolumeSourceFluent$SourcesNested<A> editLastSource();

  public abstract io.fabric8.kubernetes.api.model.ProjectedVolumeSourceFluent$SourcesNested<A> editMatchingSource(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.VolumeProjectionBuilder>);
}
