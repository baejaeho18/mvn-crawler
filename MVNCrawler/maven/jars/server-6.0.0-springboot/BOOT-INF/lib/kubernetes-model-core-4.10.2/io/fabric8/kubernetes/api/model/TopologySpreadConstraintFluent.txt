Compiled from "TopologySpreadConstraintFluent.java"
public interface io.fabric8.kubernetes.api.model.TopologySpreadConstraintFluent<A extends io.fabric8.kubernetes.api.model.TopologySpreadConstraintFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract io.fabric8.kubernetes.api.model.LabelSelector getLabelSelector();

  public abstract io.fabric8.kubernetes.api.model.LabelSelector buildLabelSelector();

  public abstract A withLabelSelector(io.fabric8.kubernetes.api.model.LabelSelector);

  public abstract java.lang.Boolean hasLabelSelector();

  public abstract io.fabric8.kubernetes.api.model.TopologySpreadConstraintFluent$LabelSelectorNested<A> withNewLabelSelector();

  public abstract io.fabric8.kubernetes.api.model.TopologySpreadConstraintFluent$LabelSelectorNested<A> withNewLabelSelectorLike(io.fabric8.kubernetes.api.model.LabelSelector);

  public abstract io.fabric8.kubernetes.api.model.TopologySpreadConstraintFluent$LabelSelectorNested<A> editLabelSelector();

  public abstract io.fabric8.kubernetes.api.model.TopologySpreadConstraintFluent$LabelSelectorNested<A> editOrNewLabelSelector();

  public abstract io.fabric8.kubernetes.api.model.TopologySpreadConstraintFluent$LabelSelectorNested<A> editOrNewLabelSelectorLike(io.fabric8.kubernetes.api.model.LabelSelector);

  public abstract java.lang.Integer getMaxSkew();

  public abstract A withMaxSkew(java.lang.Integer);

  public abstract java.lang.Boolean hasMaxSkew();

  public abstract java.lang.String getTopologyKey();

  public abstract A withTopologyKey(java.lang.String);

  public abstract java.lang.Boolean hasTopologyKey();

  public abstract A withNewTopologyKey(java.lang.String);

  public abstract A withNewTopologyKey(java.lang.StringBuilder);

  public abstract A withNewTopologyKey(java.lang.StringBuffer);

  public abstract java.lang.String getWhenUnsatisfiable();

  public abstract A withWhenUnsatisfiable(java.lang.String);

  public abstract java.lang.Boolean hasWhenUnsatisfiable();

  public abstract A withNewWhenUnsatisfiable(java.lang.String);

  public abstract A withNewWhenUnsatisfiable(java.lang.StringBuilder);

  public abstract A withNewWhenUnsatisfiable(java.lang.StringBuffer);
}
