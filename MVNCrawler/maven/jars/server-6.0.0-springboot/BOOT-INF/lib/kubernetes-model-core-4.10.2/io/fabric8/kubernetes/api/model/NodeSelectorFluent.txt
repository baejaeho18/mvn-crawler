Compiled from "NodeSelectorFluent.java"
public interface io.fabric8.kubernetes.api.model.NodeSelectorFluent<A extends io.fabric8.kubernetes.api.model.NodeSelectorFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToNodeSelectorTerms(int, io.fabric8.kubernetes.api.model.NodeSelectorTerm);

  public abstract A setToNodeSelectorTerms(int, io.fabric8.kubernetes.api.model.NodeSelectorTerm);

  public abstract A addToNodeSelectorTerms(io.fabric8.kubernetes.api.model.NodeSelectorTerm...);

  public abstract A addAllToNodeSelectorTerms(java.util.Collection<io.fabric8.kubernetes.api.model.NodeSelectorTerm>);

  public abstract A removeFromNodeSelectorTerms(io.fabric8.kubernetes.api.model.NodeSelectorTerm...);

  public abstract A removeAllFromNodeSelectorTerms(java.util.Collection<io.fabric8.kubernetes.api.model.NodeSelectorTerm>);

  public abstract A removeMatchingFromNodeSelectorTerms(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.NodeSelectorTermBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.NodeSelectorTerm> getNodeSelectorTerms();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.NodeSelectorTerm> buildNodeSelectorTerms();

  public abstract io.fabric8.kubernetes.api.model.NodeSelectorTerm buildNodeSelectorTerm(int);

  public abstract io.fabric8.kubernetes.api.model.NodeSelectorTerm buildFirstNodeSelectorTerm();

  public abstract io.fabric8.kubernetes.api.model.NodeSelectorTerm buildLastNodeSelectorTerm();

  public abstract io.fabric8.kubernetes.api.model.NodeSelectorTerm buildMatchingNodeSelectorTerm(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.NodeSelectorTermBuilder>);

  public abstract java.lang.Boolean hasMatchingNodeSelectorTerm(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.NodeSelectorTermBuilder>);

  public abstract A withNodeSelectorTerms(java.util.List<io.fabric8.kubernetes.api.model.NodeSelectorTerm>);

  public abstract A withNodeSelectorTerms(io.fabric8.kubernetes.api.model.NodeSelectorTerm...);

  public abstract java.lang.Boolean hasNodeSelectorTerms();

  public abstract io.fabric8.kubernetes.api.model.NodeSelectorFluent$NodeSelectorTermsNested<A> addNewNodeSelectorTerm();

  public abstract io.fabric8.kubernetes.api.model.NodeSelectorFluent$NodeSelectorTermsNested<A> addNewNodeSelectorTermLike(io.fabric8.kubernetes.api.model.NodeSelectorTerm);

  public abstract io.fabric8.kubernetes.api.model.NodeSelectorFluent$NodeSelectorTermsNested<A> setNewNodeSelectorTermLike(int, io.fabric8.kubernetes.api.model.NodeSelectorTerm);

  public abstract io.fabric8.kubernetes.api.model.NodeSelectorFluent$NodeSelectorTermsNested<A> editNodeSelectorTerm(int);

  public abstract io.fabric8.kubernetes.api.model.NodeSelectorFluent$NodeSelectorTermsNested<A> editFirstNodeSelectorTerm();

  public abstract io.fabric8.kubernetes.api.model.NodeSelectorFluent$NodeSelectorTermsNested<A> editLastNodeSelectorTerm();

  public abstract io.fabric8.kubernetes.api.model.NodeSelectorFluent$NodeSelectorTermsNested<A> editMatchingNodeSelectorTerm(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.NodeSelectorTermBuilder>);
}
