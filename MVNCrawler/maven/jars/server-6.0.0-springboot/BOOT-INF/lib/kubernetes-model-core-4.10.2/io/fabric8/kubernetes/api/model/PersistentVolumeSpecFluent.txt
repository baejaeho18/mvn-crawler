Compiled from "PersistentVolumeSpecFluent.java"
public interface io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent<A extends io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToAccessModes(int, java.lang.String);

  public abstract A setToAccessModes(int, java.lang.String);

  public abstract A addToAccessModes(java.lang.String...);

  public abstract A addAllToAccessModes(java.util.Collection<java.lang.String>);

  public abstract A removeFromAccessModes(java.lang.String...);

  public abstract A removeAllFromAccessModes(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getAccessModes();

  public abstract java.lang.String getAccessMode(int);

  public abstract java.lang.String getFirstAccessMode();

  public abstract java.lang.String getLastAccessMode();

  public abstract java.lang.String getMatchingAccessMode(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingAccessMode(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withAccessModes(java.util.List<java.lang.String>);

  public abstract A withAccessModes(java.lang.String...);

  public abstract java.lang.Boolean hasAccessModes();

  public abstract A addNewAccessMode(java.lang.String);

  public abstract A addNewAccessMode(java.lang.StringBuilder);

  public abstract A addNewAccessMode(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.AWSElasticBlockStoreVolumeSource getAwsElasticBlockStore();

  public abstract io.fabric8.kubernetes.api.model.AWSElasticBlockStoreVolumeSource buildAwsElasticBlockStore();

  public abstract A withAwsElasticBlockStore(io.fabric8.kubernetes.api.model.AWSElasticBlockStoreVolumeSource);

  public abstract java.lang.Boolean hasAwsElasticBlockStore();

  public abstract A withNewAwsElasticBlockStore(java.lang.String, java.lang.Integer, java.lang.Boolean, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AwsElasticBlockStoreNested<A> withNewAwsElasticBlockStore();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AwsElasticBlockStoreNested<A> withNewAwsElasticBlockStoreLike(io.fabric8.kubernetes.api.model.AWSElasticBlockStoreVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AwsElasticBlockStoreNested<A> editAwsElasticBlockStore();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AwsElasticBlockStoreNested<A> editOrNewAwsElasticBlockStore();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AwsElasticBlockStoreNested<A> editOrNewAwsElasticBlockStoreLike(io.fabric8.kubernetes.api.model.AWSElasticBlockStoreVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.AzureDiskVolumeSource getAzureDisk();

  public abstract io.fabric8.kubernetes.api.model.AzureDiskVolumeSource buildAzureDisk();

  public abstract A withAzureDisk(io.fabric8.kubernetes.api.model.AzureDiskVolumeSource);

  public abstract java.lang.Boolean hasAzureDisk();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AzureDiskNested<A> withNewAzureDisk();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AzureDiskNested<A> withNewAzureDiskLike(io.fabric8.kubernetes.api.model.AzureDiskVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AzureDiskNested<A> editAzureDisk();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AzureDiskNested<A> editOrNewAzureDisk();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AzureDiskNested<A> editOrNewAzureDiskLike(io.fabric8.kubernetes.api.model.AzureDiskVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.AzureFilePersistentVolumeSource getAzureFile();

  public abstract io.fabric8.kubernetes.api.model.AzureFilePersistentVolumeSource buildAzureFile();

  public abstract A withAzureFile(io.fabric8.kubernetes.api.model.AzureFilePersistentVolumeSource);

  public abstract java.lang.Boolean hasAzureFile();

  public abstract A withNewAzureFile(java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AzureFileNested<A> withNewAzureFile();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AzureFileNested<A> withNewAzureFileLike(io.fabric8.kubernetes.api.model.AzureFilePersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AzureFileNested<A> editAzureFile();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AzureFileNested<A> editOrNewAzureFile();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$AzureFileNested<A> editOrNewAzureFileLike(io.fabric8.kubernetes.api.model.AzureFilePersistentVolumeSource);

  public abstract A addToCapacity(java.lang.String, io.fabric8.kubernetes.api.model.Quantity);

  public abstract A addToCapacity(java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity>);

  public abstract A removeFromCapacity(java.lang.String);

  public abstract A removeFromCapacity(java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity>);

  public abstract java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity> getCapacity();

  public abstract A withCapacity(java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity>);

  public abstract java.lang.Boolean hasCapacity();

  public abstract io.fabric8.kubernetes.api.model.CephFSPersistentVolumeSource getCephfs();

  public abstract io.fabric8.kubernetes.api.model.CephFSPersistentVolumeSource buildCephfs();

  public abstract A withCephfs(io.fabric8.kubernetes.api.model.CephFSPersistentVolumeSource);

  public abstract java.lang.Boolean hasCephfs();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CephfsNested<A> withNewCephfs();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CephfsNested<A> withNewCephfsLike(io.fabric8.kubernetes.api.model.CephFSPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CephfsNested<A> editCephfs();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CephfsNested<A> editOrNewCephfs();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CephfsNested<A> editOrNewCephfsLike(io.fabric8.kubernetes.api.model.CephFSPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.CinderPersistentVolumeSource getCinder();

  public abstract io.fabric8.kubernetes.api.model.CinderPersistentVolumeSource buildCinder();

  public abstract A withCinder(io.fabric8.kubernetes.api.model.CinderPersistentVolumeSource);

  public abstract java.lang.Boolean hasCinder();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CinderNested<A> withNewCinder();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CinderNested<A> withNewCinderLike(io.fabric8.kubernetes.api.model.CinderPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CinderNested<A> editCinder();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CinderNested<A> editOrNewCinder();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CinderNested<A> editOrNewCinderLike(io.fabric8.kubernetes.api.model.CinderPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.ObjectReference getClaimRef();

  public abstract io.fabric8.kubernetes.api.model.ObjectReference buildClaimRef();

  public abstract A withClaimRef(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract java.lang.Boolean hasClaimRef();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$ClaimRefNested<A> withNewClaimRef();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$ClaimRefNested<A> withNewClaimRefLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$ClaimRefNested<A> editClaimRef();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$ClaimRefNested<A> editOrNewClaimRef();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$ClaimRefNested<A> editOrNewClaimRefLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract io.fabric8.kubernetes.api.model.CSIPersistentVolumeSource getCsi();

  public abstract io.fabric8.kubernetes.api.model.CSIPersistentVolumeSource buildCsi();

  public abstract A withCsi(io.fabric8.kubernetes.api.model.CSIPersistentVolumeSource);

  public abstract java.lang.Boolean hasCsi();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CsiNested<A> withNewCsi();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CsiNested<A> withNewCsiLike(io.fabric8.kubernetes.api.model.CSIPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CsiNested<A> editCsi();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CsiNested<A> editOrNewCsi();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$CsiNested<A> editOrNewCsiLike(io.fabric8.kubernetes.api.model.CSIPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.FCVolumeSource getFc();

  public abstract io.fabric8.kubernetes.api.model.FCVolumeSource buildFc();

  public abstract A withFc(io.fabric8.kubernetes.api.model.FCVolumeSource);

  public abstract java.lang.Boolean hasFc();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FcNested<A> withNewFc();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FcNested<A> withNewFcLike(io.fabric8.kubernetes.api.model.FCVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FcNested<A> editFc();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FcNested<A> editOrNewFc();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FcNested<A> editOrNewFcLike(io.fabric8.kubernetes.api.model.FCVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.FlexPersistentVolumeSource getFlexVolume();

  public abstract io.fabric8.kubernetes.api.model.FlexPersistentVolumeSource buildFlexVolume();

  public abstract A withFlexVolume(io.fabric8.kubernetes.api.model.FlexPersistentVolumeSource);

  public abstract java.lang.Boolean hasFlexVolume();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FlexVolumeNested<A> withNewFlexVolume();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FlexVolumeNested<A> withNewFlexVolumeLike(io.fabric8.kubernetes.api.model.FlexPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FlexVolumeNested<A> editFlexVolume();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FlexVolumeNested<A> editOrNewFlexVolume();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FlexVolumeNested<A> editOrNewFlexVolumeLike(io.fabric8.kubernetes.api.model.FlexPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.FlockerVolumeSource getFlocker();

  public abstract io.fabric8.kubernetes.api.model.FlockerVolumeSource buildFlocker();

  public abstract A withFlocker(io.fabric8.kubernetes.api.model.FlockerVolumeSource);

  public abstract java.lang.Boolean hasFlocker();

  public abstract A withNewFlocker(java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FlockerNested<A> withNewFlocker();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FlockerNested<A> withNewFlockerLike(io.fabric8.kubernetes.api.model.FlockerVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FlockerNested<A> editFlocker();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FlockerNested<A> editOrNewFlocker();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$FlockerNested<A> editOrNewFlockerLike(io.fabric8.kubernetes.api.model.FlockerVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.GCEPersistentDiskVolumeSource getGcePersistentDisk();

  public abstract io.fabric8.kubernetes.api.model.GCEPersistentDiskVolumeSource buildGcePersistentDisk();

  public abstract A withGcePersistentDisk(io.fabric8.kubernetes.api.model.GCEPersistentDiskVolumeSource);

  public abstract java.lang.Boolean hasGcePersistentDisk();

  public abstract A withNewGcePersistentDisk(java.lang.String, java.lang.Integer, java.lang.String, java.lang.Boolean);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$GcePersistentDiskNested<A> withNewGcePersistentDisk();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$GcePersistentDiskNested<A> withNewGcePersistentDiskLike(io.fabric8.kubernetes.api.model.GCEPersistentDiskVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$GcePersistentDiskNested<A> editGcePersistentDisk();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$GcePersistentDiskNested<A> editOrNewGcePersistentDisk();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$GcePersistentDiskNested<A> editOrNewGcePersistentDiskLike(io.fabric8.kubernetes.api.model.GCEPersistentDiskVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.GlusterfsPersistentVolumeSource getGlusterfs();

  public abstract io.fabric8.kubernetes.api.model.GlusterfsPersistentVolumeSource buildGlusterfs();

  public abstract A withGlusterfs(io.fabric8.kubernetes.api.model.GlusterfsPersistentVolumeSource);

  public abstract java.lang.Boolean hasGlusterfs();

  public abstract A withNewGlusterfs(java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$GlusterfsNested<A> withNewGlusterfs();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$GlusterfsNested<A> withNewGlusterfsLike(io.fabric8.kubernetes.api.model.GlusterfsPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$GlusterfsNested<A> editGlusterfs();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$GlusterfsNested<A> editOrNewGlusterfs();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$GlusterfsNested<A> editOrNewGlusterfsLike(io.fabric8.kubernetes.api.model.GlusterfsPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.HostPathVolumeSource getHostPath();

  public abstract io.fabric8.kubernetes.api.model.HostPathVolumeSource buildHostPath();

  public abstract A withHostPath(io.fabric8.kubernetes.api.model.HostPathVolumeSource);

  public abstract java.lang.Boolean hasHostPath();

  public abstract A withNewHostPath(java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$HostPathNested<A> withNewHostPath();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$HostPathNested<A> withNewHostPathLike(io.fabric8.kubernetes.api.model.HostPathVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$HostPathNested<A> editHostPath();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$HostPathNested<A> editOrNewHostPath();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$HostPathNested<A> editOrNewHostPathLike(io.fabric8.kubernetes.api.model.HostPathVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.ISCSIPersistentVolumeSource getIscsi();

  public abstract io.fabric8.kubernetes.api.model.ISCSIPersistentVolumeSource buildIscsi();

  public abstract A withIscsi(io.fabric8.kubernetes.api.model.ISCSIPersistentVolumeSource);

  public abstract java.lang.Boolean hasIscsi();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$IscsiNested<A> withNewIscsi();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$IscsiNested<A> withNewIscsiLike(io.fabric8.kubernetes.api.model.ISCSIPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$IscsiNested<A> editIscsi();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$IscsiNested<A> editOrNewIscsi();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$IscsiNested<A> editOrNewIscsiLike(io.fabric8.kubernetes.api.model.ISCSIPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.LocalVolumeSource getLocal();

  public abstract io.fabric8.kubernetes.api.model.LocalVolumeSource buildLocal();

  public abstract A withLocal(io.fabric8.kubernetes.api.model.LocalVolumeSource);

  public abstract java.lang.Boolean hasLocal();

  public abstract A withNewLocal(java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$LocalNested<A> withNewLocal();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$LocalNested<A> withNewLocalLike(io.fabric8.kubernetes.api.model.LocalVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$LocalNested<A> editLocal();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$LocalNested<A> editOrNewLocal();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$LocalNested<A> editOrNewLocalLike(io.fabric8.kubernetes.api.model.LocalVolumeSource);

  public abstract A addToMountOptions(int, java.lang.String);

  public abstract A setToMountOptions(int, java.lang.String);

  public abstract A addToMountOptions(java.lang.String...);

  public abstract A addAllToMountOptions(java.util.Collection<java.lang.String>);

  public abstract A removeFromMountOptions(java.lang.String...);

  public abstract A removeAllFromMountOptions(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getMountOptions();

  public abstract java.lang.String getMountOption(int);

  public abstract java.lang.String getFirstMountOption();

  public abstract java.lang.String getLastMountOption();

  public abstract java.lang.String getMatchingMountOption(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingMountOption(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withMountOptions(java.util.List<java.lang.String>);

  public abstract A withMountOptions(java.lang.String...);

  public abstract java.lang.Boolean hasMountOptions();

  public abstract A addNewMountOption(java.lang.String);

  public abstract A addNewMountOption(java.lang.StringBuilder);

  public abstract A addNewMountOption(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.NFSVolumeSource getNfs();

  public abstract io.fabric8.kubernetes.api.model.NFSVolumeSource buildNfs();

  public abstract A withNfs(io.fabric8.kubernetes.api.model.NFSVolumeSource);

  public abstract java.lang.Boolean hasNfs();

  public abstract A withNewNfs(java.lang.String, java.lang.Boolean, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$NfsNested<A> withNewNfs();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$NfsNested<A> withNewNfsLike(io.fabric8.kubernetes.api.model.NFSVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$NfsNested<A> editNfs();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$NfsNested<A> editOrNewNfs();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$NfsNested<A> editOrNewNfsLike(io.fabric8.kubernetes.api.model.NFSVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.VolumeNodeAffinity getNodeAffinity();

  public abstract io.fabric8.kubernetes.api.model.VolumeNodeAffinity buildNodeAffinity();

  public abstract A withNodeAffinity(io.fabric8.kubernetes.api.model.VolumeNodeAffinity);

  public abstract java.lang.Boolean hasNodeAffinity();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$NodeAffinityNested<A> withNewNodeAffinity();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$NodeAffinityNested<A> withNewNodeAffinityLike(io.fabric8.kubernetes.api.model.VolumeNodeAffinity);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$NodeAffinityNested<A> editNodeAffinity();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$NodeAffinityNested<A> editOrNewNodeAffinity();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$NodeAffinityNested<A> editOrNewNodeAffinityLike(io.fabric8.kubernetes.api.model.VolumeNodeAffinity);

  public abstract java.lang.String getPersistentVolumeReclaimPolicy();

  public abstract A withPersistentVolumeReclaimPolicy(java.lang.String);

  public abstract java.lang.Boolean hasPersistentVolumeReclaimPolicy();

  public abstract A withNewPersistentVolumeReclaimPolicy(java.lang.String);

  public abstract A withNewPersistentVolumeReclaimPolicy(java.lang.StringBuilder);

  public abstract A withNewPersistentVolumeReclaimPolicy(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.PhotonPersistentDiskVolumeSource getPhotonPersistentDisk();

  public abstract io.fabric8.kubernetes.api.model.PhotonPersistentDiskVolumeSource buildPhotonPersistentDisk();

  public abstract A withPhotonPersistentDisk(io.fabric8.kubernetes.api.model.PhotonPersistentDiskVolumeSource);

  public abstract java.lang.Boolean hasPhotonPersistentDisk();

  public abstract A withNewPhotonPersistentDisk(java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$PhotonPersistentDiskNested<A> withNewPhotonPersistentDisk();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$PhotonPersistentDiskNested<A> withNewPhotonPersistentDiskLike(io.fabric8.kubernetes.api.model.PhotonPersistentDiskVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$PhotonPersistentDiskNested<A> editPhotonPersistentDisk();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$PhotonPersistentDiskNested<A> editOrNewPhotonPersistentDisk();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$PhotonPersistentDiskNested<A> editOrNewPhotonPersistentDiskLike(io.fabric8.kubernetes.api.model.PhotonPersistentDiskVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PortworxVolumeSource getPortworxVolume();

  public abstract io.fabric8.kubernetes.api.model.PortworxVolumeSource buildPortworxVolume();

  public abstract A withPortworxVolume(io.fabric8.kubernetes.api.model.PortworxVolumeSource);

  public abstract java.lang.Boolean hasPortworxVolume();

  public abstract A withNewPortworxVolume(java.lang.String, java.lang.Boolean, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$PortworxVolumeNested<A> withNewPortworxVolume();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$PortworxVolumeNested<A> withNewPortworxVolumeLike(io.fabric8.kubernetes.api.model.PortworxVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$PortworxVolumeNested<A> editPortworxVolume();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$PortworxVolumeNested<A> editOrNewPortworxVolume();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$PortworxVolumeNested<A> editOrNewPortworxVolumeLike(io.fabric8.kubernetes.api.model.PortworxVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.QuobyteVolumeSource getQuobyte();

  public abstract io.fabric8.kubernetes.api.model.QuobyteVolumeSource buildQuobyte();

  public abstract A withQuobyte(io.fabric8.kubernetes.api.model.QuobyteVolumeSource);

  public abstract java.lang.Boolean hasQuobyte();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$QuobyteNested<A> withNewQuobyte();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$QuobyteNested<A> withNewQuobyteLike(io.fabric8.kubernetes.api.model.QuobyteVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$QuobyteNested<A> editQuobyte();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$QuobyteNested<A> editOrNewQuobyte();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$QuobyteNested<A> editOrNewQuobyteLike(io.fabric8.kubernetes.api.model.QuobyteVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.RBDPersistentVolumeSource getRbd();

  public abstract io.fabric8.kubernetes.api.model.RBDPersistentVolumeSource buildRbd();

  public abstract A withRbd(io.fabric8.kubernetes.api.model.RBDPersistentVolumeSource);

  public abstract java.lang.Boolean hasRbd();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$RbdNested<A> withNewRbd();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$RbdNested<A> withNewRbdLike(io.fabric8.kubernetes.api.model.RBDPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$RbdNested<A> editRbd();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$RbdNested<A> editOrNewRbd();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$RbdNested<A> editOrNewRbdLike(io.fabric8.kubernetes.api.model.RBDPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.ScaleIOPersistentVolumeSource getScaleIO();

  public abstract io.fabric8.kubernetes.api.model.ScaleIOPersistentVolumeSource buildScaleIO();

  public abstract A withScaleIO(io.fabric8.kubernetes.api.model.ScaleIOPersistentVolumeSource);

  public abstract java.lang.Boolean hasScaleIO();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$ScaleIONested<A> withNewScaleIO();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$ScaleIONested<A> withNewScaleIOLike(io.fabric8.kubernetes.api.model.ScaleIOPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$ScaleIONested<A> editScaleIO();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$ScaleIONested<A> editOrNewScaleIO();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$ScaleIONested<A> editOrNewScaleIOLike(io.fabric8.kubernetes.api.model.ScaleIOPersistentVolumeSource);

  public abstract java.lang.String getStorageClassName();

  public abstract A withStorageClassName(java.lang.String);

  public abstract java.lang.Boolean hasStorageClassName();

  public abstract A withNewStorageClassName(java.lang.String);

  public abstract A withNewStorageClassName(java.lang.StringBuilder);

  public abstract A withNewStorageClassName(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.StorageOSPersistentVolumeSource getStorageos();

  public abstract io.fabric8.kubernetes.api.model.StorageOSPersistentVolumeSource buildStorageos();

  public abstract A withStorageos(io.fabric8.kubernetes.api.model.StorageOSPersistentVolumeSource);

  public abstract java.lang.Boolean hasStorageos();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$StorageosNested<A> withNewStorageos();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$StorageosNested<A> withNewStorageosLike(io.fabric8.kubernetes.api.model.StorageOSPersistentVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$StorageosNested<A> editStorageos();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$StorageosNested<A> editOrNewStorageos();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$StorageosNested<A> editOrNewStorageosLike(io.fabric8.kubernetes.api.model.StorageOSPersistentVolumeSource);

  public abstract java.lang.String getVolumeMode();

  public abstract A withVolumeMode(java.lang.String);

  public abstract java.lang.Boolean hasVolumeMode();

  public abstract A withNewVolumeMode(java.lang.String);

  public abstract A withNewVolumeMode(java.lang.StringBuilder);

  public abstract A withNewVolumeMode(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.VsphereVirtualDiskVolumeSource getVsphereVolume();

  public abstract io.fabric8.kubernetes.api.model.VsphereVirtualDiskVolumeSource buildVsphereVolume();

  public abstract A withVsphereVolume(io.fabric8.kubernetes.api.model.VsphereVirtualDiskVolumeSource);

  public abstract java.lang.Boolean hasVsphereVolume();

  public abstract A withNewVsphereVolume(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$VsphereVolumeNested<A> withNewVsphereVolume();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$VsphereVolumeNested<A> withNewVsphereVolumeLike(io.fabric8.kubernetes.api.model.VsphereVirtualDiskVolumeSource);

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$VsphereVolumeNested<A> editVsphereVolume();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$VsphereVolumeNested<A> editOrNewVsphereVolume();

  public abstract io.fabric8.kubernetes.api.model.PersistentVolumeSpecFluent$VsphereVolumeNested<A> editOrNewVsphereVolumeLike(io.fabric8.kubernetes.api.model.VsphereVirtualDiskVolumeSource);
}
