Compiled from "NodeStatusFluent.java"
public interface io.fabric8.kubernetes.api.model.NodeStatusFluent<A extends io.fabric8.kubernetes.api.model.NodeStatusFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToAddresses(int, io.fabric8.kubernetes.api.model.NodeAddress);

  public abstract A setToAddresses(int, io.fabric8.kubernetes.api.model.NodeAddress);

  public abstract A addToAddresses(io.fabric8.kubernetes.api.model.NodeAddress...);

  public abstract A addAllToAddresses(java.util.Collection<io.fabric8.kubernetes.api.model.NodeAddress>);

  public abstract A removeFromAddresses(io.fabric8.kubernetes.api.model.NodeAddress...);

  public abstract A removeAllFromAddresses(java.util.Collection<io.fabric8.kubernetes.api.model.NodeAddress>);

  public abstract A removeMatchingFromAddresses(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.NodeAddressBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.NodeAddress> getAddresses();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.NodeAddress> buildAddresses();

  public abstract io.fabric8.kubernetes.api.model.NodeAddress buildAddress(int);

  public abstract io.fabric8.kubernetes.api.model.NodeAddress buildFirstAddress();

  public abstract io.fabric8.kubernetes.api.model.NodeAddress buildLastAddress();

  public abstract io.fabric8.kubernetes.api.model.NodeAddress buildMatchingAddress(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.NodeAddressBuilder>);

  public abstract java.lang.Boolean hasMatchingAddress(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.NodeAddressBuilder>);

  public abstract A withAddresses(java.util.List<io.fabric8.kubernetes.api.model.NodeAddress>);

  public abstract A withAddresses(io.fabric8.kubernetes.api.model.NodeAddress...);

  public abstract java.lang.Boolean hasAddresses();

  public abstract A addNewAddress(java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$AddressesNested<A> addNewAddress();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$AddressesNested<A> addNewAddressLike(io.fabric8.kubernetes.api.model.NodeAddress);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$AddressesNested<A> setNewAddressLike(int, io.fabric8.kubernetes.api.model.NodeAddress);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$AddressesNested<A> editAddress(int);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$AddressesNested<A> editFirstAddress();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$AddressesNested<A> editLastAddress();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$AddressesNested<A> editMatchingAddress(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.NodeAddressBuilder>);

  public abstract A addToAllocatable(java.lang.String, io.fabric8.kubernetes.api.model.Quantity);

  public abstract A addToAllocatable(java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity>);

  public abstract A removeFromAllocatable(java.lang.String);

  public abstract A removeFromAllocatable(java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity>);

  public abstract java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity> getAllocatable();

  public abstract A withAllocatable(java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity>);

  public abstract java.lang.Boolean hasAllocatable();

  public abstract A addToCapacity(java.lang.String, io.fabric8.kubernetes.api.model.Quantity);

  public abstract A addToCapacity(java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity>);

  public abstract A removeFromCapacity(java.lang.String);

  public abstract A removeFromCapacity(java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity>);

  public abstract java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity> getCapacity();

  public abstract A withCapacity(java.util.Map<java.lang.String, io.fabric8.kubernetes.api.model.Quantity>);

  public abstract java.lang.Boolean hasCapacity();

  public abstract A addToConditions(int, io.fabric8.kubernetes.api.model.NodeCondition);

  public abstract A setToConditions(int, io.fabric8.kubernetes.api.model.NodeCondition);

  public abstract A addToConditions(io.fabric8.kubernetes.api.model.NodeCondition...);

  public abstract A addAllToConditions(java.util.Collection<io.fabric8.kubernetes.api.model.NodeCondition>);

  public abstract A removeFromConditions(io.fabric8.kubernetes.api.model.NodeCondition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.fabric8.kubernetes.api.model.NodeCondition>);

  public abstract A removeMatchingFromConditions(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.NodeConditionBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.NodeCondition> getConditions();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.NodeCondition> buildConditions();

  public abstract io.fabric8.kubernetes.api.model.NodeCondition buildCondition(int);

  public abstract io.fabric8.kubernetes.api.model.NodeCondition buildFirstCondition();

  public abstract io.fabric8.kubernetes.api.model.NodeCondition buildLastCondition();

  public abstract io.fabric8.kubernetes.api.model.NodeCondition buildMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.NodeConditionBuilder>);

  public abstract java.lang.Boolean hasMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.NodeConditionBuilder>);

  public abstract A withConditions(java.util.List<io.fabric8.kubernetes.api.model.NodeCondition>);

  public abstract A withConditions(io.fabric8.kubernetes.api.model.NodeCondition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ConditionsNested<A> addNewCondition();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ConditionsNested<A> addNewConditionLike(io.fabric8.kubernetes.api.model.NodeCondition);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ConditionsNested<A> setNewConditionLike(int, io.fabric8.kubernetes.api.model.NodeCondition);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ConditionsNested<A> editCondition(int);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ConditionsNested<A> editFirstCondition();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ConditionsNested<A> editLastCondition();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ConditionsNested<A> editMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.NodeConditionBuilder>);

  public abstract io.fabric8.kubernetes.api.model.NodeConfigStatus getConfig();

  public abstract io.fabric8.kubernetes.api.model.NodeConfigStatus buildConfig();

  public abstract A withConfig(io.fabric8.kubernetes.api.model.NodeConfigStatus);

  public abstract java.lang.Boolean hasConfig();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ConfigNested<A> withNewConfig();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ConfigNested<A> withNewConfigLike(io.fabric8.kubernetes.api.model.NodeConfigStatus);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ConfigNested<A> editConfig();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ConfigNested<A> editOrNewConfig();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ConfigNested<A> editOrNewConfigLike(io.fabric8.kubernetes.api.model.NodeConfigStatus);

  public abstract io.fabric8.kubernetes.api.model.NodeDaemonEndpoints getDaemonEndpoints();

  public abstract io.fabric8.kubernetes.api.model.NodeDaemonEndpoints buildDaemonEndpoints();

  public abstract A withDaemonEndpoints(io.fabric8.kubernetes.api.model.NodeDaemonEndpoints);

  public abstract java.lang.Boolean hasDaemonEndpoints();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$DaemonEndpointsNested<A> withNewDaemonEndpoints();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$DaemonEndpointsNested<A> withNewDaemonEndpointsLike(io.fabric8.kubernetes.api.model.NodeDaemonEndpoints);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$DaemonEndpointsNested<A> editDaemonEndpoints();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$DaemonEndpointsNested<A> editOrNewDaemonEndpoints();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$DaemonEndpointsNested<A> editOrNewDaemonEndpointsLike(io.fabric8.kubernetes.api.model.NodeDaemonEndpoints);

  public abstract A addToImages(int, io.fabric8.kubernetes.api.model.ContainerImage);

  public abstract A setToImages(int, io.fabric8.kubernetes.api.model.ContainerImage);

  public abstract A addToImages(io.fabric8.kubernetes.api.model.ContainerImage...);

  public abstract A addAllToImages(java.util.Collection<io.fabric8.kubernetes.api.model.ContainerImage>);

  public abstract A removeFromImages(io.fabric8.kubernetes.api.model.ContainerImage...);

  public abstract A removeAllFromImages(java.util.Collection<io.fabric8.kubernetes.api.model.ContainerImage>);

  public abstract A removeMatchingFromImages(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ContainerImageBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.ContainerImage> getImages();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.ContainerImage> buildImages();

  public abstract io.fabric8.kubernetes.api.model.ContainerImage buildImage(int);

  public abstract io.fabric8.kubernetes.api.model.ContainerImage buildFirstImage();

  public abstract io.fabric8.kubernetes.api.model.ContainerImage buildLastImage();

  public abstract io.fabric8.kubernetes.api.model.ContainerImage buildMatchingImage(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ContainerImageBuilder>);

  public abstract java.lang.Boolean hasMatchingImage(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ContainerImageBuilder>);

  public abstract A withImages(java.util.List<io.fabric8.kubernetes.api.model.ContainerImage>);

  public abstract A withImages(io.fabric8.kubernetes.api.model.ContainerImage...);

  public abstract java.lang.Boolean hasImages();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ImagesNested<A> addNewImage();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ImagesNested<A> addNewImageLike(io.fabric8.kubernetes.api.model.ContainerImage);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ImagesNested<A> setNewImageLike(int, io.fabric8.kubernetes.api.model.ContainerImage);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ImagesNested<A> editImage(int);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ImagesNested<A> editFirstImage();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ImagesNested<A> editLastImage();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$ImagesNested<A> editMatchingImage(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ContainerImageBuilder>);

  public abstract io.fabric8.kubernetes.api.model.NodeSystemInfo getNodeInfo();

  public abstract io.fabric8.kubernetes.api.model.NodeSystemInfo buildNodeInfo();

  public abstract A withNodeInfo(io.fabric8.kubernetes.api.model.NodeSystemInfo);

  public abstract java.lang.Boolean hasNodeInfo();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$NodeInfoNested<A> withNewNodeInfo();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$NodeInfoNested<A> withNewNodeInfoLike(io.fabric8.kubernetes.api.model.NodeSystemInfo);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$NodeInfoNested<A> editNodeInfo();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$NodeInfoNested<A> editOrNewNodeInfo();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$NodeInfoNested<A> editOrNewNodeInfoLike(io.fabric8.kubernetes.api.model.NodeSystemInfo);

  public abstract java.lang.String getPhase();

  public abstract A withPhase(java.lang.String);

  public abstract java.lang.Boolean hasPhase();

  public abstract A withNewPhase(java.lang.String);

  public abstract A withNewPhase(java.lang.StringBuilder);

  public abstract A withNewPhase(java.lang.StringBuffer);

  public abstract A addToVolumesAttached(int, io.fabric8.kubernetes.api.model.AttachedVolume);

  public abstract A setToVolumesAttached(int, io.fabric8.kubernetes.api.model.AttachedVolume);

  public abstract A addToVolumesAttached(io.fabric8.kubernetes.api.model.AttachedVolume...);

  public abstract A addAllToVolumesAttached(java.util.Collection<io.fabric8.kubernetes.api.model.AttachedVolume>);

  public abstract A removeFromVolumesAttached(io.fabric8.kubernetes.api.model.AttachedVolume...);

  public abstract A removeAllFromVolumesAttached(java.util.Collection<io.fabric8.kubernetes.api.model.AttachedVolume>);

  public abstract A removeMatchingFromVolumesAttached(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.AttachedVolumeBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.AttachedVolume> getVolumesAttached();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.AttachedVolume> buildVolumesAttached();

  public abstract io.fabric8.kubernetes.api.model.AttachedVolume buildVolumesAttached(int);

  public abstract io.fabric8.kubernetes.api.model.AttachedVolume buildFirstVolumesAttached();

  public abstract io.fabric8.kubernetes.api.model.AttachedVolume buildLastVolumesAttached();

  public abstract io.fabric8.kubernetes.api.model.AttachedVolume buildMatchingVolumesAttached(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.AttachedVolumeBuilder>);

  public abstract java.lang.Boolean hasMatchingVolumesAttached(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.AttachedVolumeBuilder>);

  public abstract A withVolumesAttached(java.util.List<io.fabric8.kubernetes.api.model.AttachedVolume>);

  public abstract A withVolumesAttached(io.fabric8.kubernetes.api.model.AttachedVolume...);

  public abstract java.lang.Boolean hasVolumesAttached();

  public abstract A addNewVolumesAttached(java.lang.String, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$VolumesAttachedNested<A> addNewVolumesAttached();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$VolumesAttachedNested<A> addNewVolumesAttachedLike(io.fabric8.kubernetes.api.model.AttachedVolume);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$VolumesAttachedNested<A> setNewVolumesAttachedLike(int, io.fabric8.kubernetes.api.model.AttachedVolume);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$VolumesAttachedNested<A> editVolumesAttached(int);

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$VolumesAttachedNested<A> editFirstVolumesAttached();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$VolumesAttachedNested<A> editLastVolumesAttached();

  public abstract io.fabric8.kubernetes.api.model.NodeStatusFluent$VolumesAttachedNested<A> editMatchingVolumesAttached(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.AttachedVolumeBuilder>);

  public abstract A addToVolumesInUse(int, java.lang.String);

  public abstract A setToVolumesInUse(int, java.lang.String);

  public abstract A addToVolumesInUse(java.lang.String...);

  public abstract A addAllToVolumesInUse(java.util.Collection<java.lang.String>);

  public abstract A removeFromVolumesInUse(java.lang.String...);

  public abstract A removeAllFromVolumesInUse(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getVolumesInUse();

  public abstract java.lang.String getVolumesInUse(int);

  public abstract java.lang.String getFirstVolumesInUse();

  public abstract java.lang.String getLastVolumesInUse();

  public abstract java.lang.String getMatchingVolumesInUse(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingVolumesInUse(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withVolumesInUse(java.util.List<java.lang.String>);

  public abstract A withVolumesInUse(java.lang.String...);

  public abstract java.lang.Boolean hasVolumesInUse();

  public abstract A addNewVolumesInUse(java.lang.String);

  public abstract A addNewVolumesInUse(java.lang.StringBuilder);

  public abstract A addNewVolumesInUse(java.lang.StringBuffer);
}
