Compiled from "ScopeSelectorFluent.java"
public interface io.fabric8.kubernetes.api.model.ScopeSelectorFluent<A extends io.fabric8.kubernetes.api.model.ScopeSelectorFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToMatchExpressions(int, io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement);

  public abstract A setToMatchExpressions(int, io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement);

  public abstract A addToMatchExpressions(io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement...);

  public abstract A addAllToMatchExpressions(java.util.Collection<io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement>);

  public abstract A removeFromMatchExpressions(io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement...);

  public abstract A removeAllFromMatchExpressions(java.util.Collection<io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement>);

  public abstract A removeMatchingFromMatchExpressions(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirementBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement> getMatchExpressions();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement> buildMatchExpressions();

  public abstract io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement buildMatchExpression(int);

  public abstract io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement buildFirstMatchExpression();

  public abstract io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement buildLastMatchExpression();

  public abstract io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement buildMatchingMatchExpression(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirementBuilder>);

  public abstract java.lang.Boolean hasMatchingMatchExpression(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirementBuilder>);

  public abstract A withMatchExpressions(java.util.List<io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement>);

  public abstract A withMatchExpressions(io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement...);

  public abstract java.lang.Boolean hasMatchExpressions();

  public abstract io.fabric8.kubernetes.api.model.ScopeSelectorFluent$MatchExpressionsNested<A> addNewMatchExpression();

  public abstract io.fabric8.kubernetes.api.model.ScopeSelectorFluent$MatchExpressionsNested<A> addNewMatchExpressionLike(io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement);

  public abstract io.fabric8.kubernetes.api.model.ScopeSelectorFluent$MatchExpressionsNested<A> setNewMatchExpressionLike(int, io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirement);

  public abstract io.fabric8.kubernetes.api.model.ScopeSelectorFluent$MatchExpressionsNested<A> editMatchExpression(int);

  public abstract io.fabric8.kubernetes.api.model.ScopeSelectorFluent$MatchExpressionsNested<A> editFirstMatchExpression();

  public abstract io.fabric8.kubernetes.api.model.ScopeSelectorFluent$MatchExpressionsNested<A> editLastMatchExpression();

  public abstract io.fabric8.kubernetes.api.model.ScopeSelectorFluent$MatchExpressionsNested<A> editMatchingMatchExpression(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.ScopedResourceSelectorRequirementBuilder>);
}
