Compiled from "EndpointFluent.java"
public interface io.fabric8.kubernetes.api.model.discovery.EndpointFluent<A extends io.fabric8.kubernetes.api.model.discovery.EndpointFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToAddresses(int, java.lang.String);

  public abstract A setToAddresses(int, java.lang.String);

  public abstract A addToAddresses(java.lang.String...);

  public abstract A addAllToAddresses(java.util.Collection<java.lang.String>);

  public abstract A removeFromAddresses(java.lang.String...);

  public abstract A removeAllFromAddresses(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getAddresses();

  public abstract java.lang.String getAddress(int);

  public abstract java.lang.String getFirstAddress();

  public abstract java.lang.String getLastAddress();

  public abstract java.lang.String getMatchingAddress(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingAddress(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withAddresses(java.util.List<java.lang.String>);

  public abstract A withAddresses(java.lang.String...);

  public abstract java.lang.Boolean hasAddresses();

  public abstract A addNewAddress(java.lang.String);

  public abstract A addNewAddress(java.lang.StringBuilder);

  public abstract A addNewAddress(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointConditions getConditions();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointConditions buildConditions();

  public abstract A withConditions(io.fabric8.kubernetes.api.model.discovery.EndpointConditions);

  public abstract java.lang.Boolean hasConditions();

  public abstract A withNewConditions(java.lang.Boolean);

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointFluent$ConditionsNested<A> withNewConditions();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointFluent$ConditionsNested<A> withNewConditionsLike(io.fabric8.kubernetes.api.model.discovery.EndpointConditions);

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointFluent$ConditionsNested<A> editConditions();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointFluent$ConditionsNested<A> editOrNewConditions();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointFluent$ConditionsNested<A> editOrNewConditionsLike(io.fabric8.kubernetes.api.model.discovery.EndpointConditions);

  public abstract java.lang.String getHostname();

  public abstract A withHostname(java.lang.String);

  public abstract java.lang.Boolean hasHostname();

  public abstract A withNewHostname(java.lang.String);

  public abstract A withNewHostname(java.lang.StringBuilder);

  public abstract A withNewHostname(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.ObjectReference getTargetRef();

  public abstract io.fabric8.kubernetes.api.model.ObjectReference buildTargetRef();

  public abstract A withTargetRef(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract java.lang.Boolean hasTargetRef();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointFluent$TargetRefNested<A> withNewTargetRef();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointFluent$TargetRefNested<A> withNewTargetRefLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointFluent$TargetRefNested<A> editTargetRef();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointFluent$TargetRefNested<A> editOrNewTargetRef();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointFluent$TargetRefNested<A> editOrNewTargetRefLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract A addToTopology(java.lang.String, java.lang.String);

  public abstract A addToTopology(java.util.Map<java.lang.String, java.lang.String>);

  public abstract A removeFromTopology(java.lang.String);

  public abstract A removeFromTopology(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.Map<java.lang.String, java.lang.String> getTopology();

  public abstract A withTopology(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.Boolean hasTopology();
}
