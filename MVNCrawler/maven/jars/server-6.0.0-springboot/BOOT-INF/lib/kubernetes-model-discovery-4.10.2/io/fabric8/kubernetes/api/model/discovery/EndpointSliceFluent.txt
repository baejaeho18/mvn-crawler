Compiled from "EndpointSliceFluent.java"
public interface io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent<A extends io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getAddressType();

  public abstract A withAddressType(java.lang.String);

  public abstract java.lang.Boolean hasAddressType();

  public abstract A withNewAddressType(java.lang.String);

  public abstract A withNewAddressType(java.lang.StringBuilder);

  public abstract A withNewAddressType(java.lang.StringBuffer);

  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract A addToEndpoints(int, io.fabric8.kubernetes.api.model.discovery.Endpoint);

  public abstract A setToEndpoints(int, io.fabric8.kubernetes.api.model.discovery.Endpoint);

  public abstract A addToEndpoints(io.fabric8.kubernetes.api.model.discovery.Endpoint...);

  public abstract A addAllToEndpoints(java.util.Collection<io.fabric8.kubernetes.api.model.discovery.Endpoint>);

  public abstract A removeFromEndpoints(io.fabric8.kubernetes.api.model.discovery.Endpoint...);

  public abstract A removeAllFromEndpoints(java.util.Collection<io.fabric8.kubernetes.api.model.discovery.Endpoint>);

  public abstract A removeMatchingFromEndpoints(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.discovery.EndpointBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.discovery.Endpoint> getEndpoints();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.discovery.Endpoint> buildEndpoints();

  public abstract io.fabric8.kubernetes.api.model.discovery.Endpoint buildEndpoint(int);

  public abstract io.fabric8.kubernetes.api.model.discovery.Endpoint buildFirstEndpoint();

  public abstract io.fabric8.kubernetes.api.model.discovery.Endpoint buildLastEndpoint();

  public abstract io.fabric8.kubernetes.api.model.discovery.Endpoint buildMatchingEndpoint(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.discovery.EndpointBuilder>);

  public abstract java.lang.Boolean hasMatchingEndpoint(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.discovery.EndpointBuilder>);

  public abstract A withEndpoints(java.util.List<io.fabric8.kubernetes.api.model.discovery.Endpoint>);

  public abstract A withEndpoints(io.fabric8.kubernetes.api.model.discovery.Endpoint...);

  public abstract java.lang.Boolean hasEndpoints();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$EndpointsNested<A> addNewEndpoint();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$EndpointsNested<A> addNewEndpointLike(io.fabric8.kubernetes.api.model.discovery.Endpoint);

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$EndpointsNested<A> setNewEndpointLike(int, io.fabric8.kubernetes.api.model.discovery.Endpoint);

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$EndpointsNested<A> editEndpoint(int);

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$EndpointsNested<A> editFirstEndpoint();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$EndpointsNested<A> editLastEndpoint();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$EndpointsNested<A> editMatchingEndpoint(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.discovery.EndpointBuilder>);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.ObjectMeta getMetadata();

  public abstract io.fabric8.kubernetes.api.model.ObjectMeta buildMetadata();

  public abstract A withMetadata(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Boolean hasMetadata();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$MetadataNested<A> withNewMetadata();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$MetadataNested<A> withNewMetadataLike(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$MetadataNested<A> editMetadata();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$MetadataNested<A> editOrNewMetadata();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$MetadataNested<A> editOrNewMetadataLike(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract A addToPorts(int, io.fabric8.kubernetes.api.model.discovery.EndpointPort);

  public abstract A setToPorts(int, io.fabric8.kubernetes.api.model.discovery.EndpointPort);

  public abstract A addToPorts(io.fabric8.kubernetes.api.model.discovery.EndpointPort...);

  public abstract A addAllToPorts(java.util.Collection<io.fabric8.kubernetes.api.model.discovery.EndpointPort>);

  public abstract A removeFromPorts(io.fabric8.kubernetes.api.model.discovery.EndpointPort...);

  public abstract A removeAllFromPorts(java.util.Collection<io.fabric8.kubernetes.api.model.discovery.EndpointPort>);

  public abstract A removeMatchingFromPorts(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.discovery.EndpointPortBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.discovery.EndpointPort> getPorts();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.discovery.EndpointPort> buildPorts();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointPort buildPort(int);

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointPort buildFirstPort();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointPort buildLastPort();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointPort buildMatchingPort(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.discovery.EndpointPortBuilder>);

  public abstract java.lang.Boolean hasMatchingPort(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.discovery.EndpointPortBuilder>);

  public abstract A withPorts(java.util.List<io.fabric8.kubernetes.api.model.discovery.EndpointPort>);

  public abstract A withPorts(io.fabric8.kubernetes.api.model.discovery.EndpointPort...);

  public abstract java.lang.Boolean hasPorts();

  public abstract A addNewPort(java.lang.String, java.lang.String, java.lang.Integer, java.lang.String);

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$PortsNested<A> addNewPort();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$PortsNested<A> addNewPortLike(io.fabric8.kubernetes.api.model.discovery.EndpointPort);

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$PortsNested<A> setNewPortLike(int, io.fabric8.kubernetes.api.model.discovery.EndpointPort);

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$PortsNested<A> editPort(int);

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$PortsNested<A> editFirstPort();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$PortsNested<A> editLastPort();

  public abstract io.fabric8.kubernetes.api.model.discovery.EndpointSliceFluent$PortsNested<A> editMatchingPort(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.discovery.EndpointPortBuilder>);
}
