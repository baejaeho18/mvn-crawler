Compiled from "TransactionSynchronizationUtils.java"
abstract class org.springframework.transaction.reactive.TransactionSynchronizationUtils {
  private static final org.apache.commons.logging.Log logger;

  private static final boolean aopAvailable;

  org.springframework.transaction.reactive.TransactionSynchronizationUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  static java.lang.Object unwrapResourceIfNecessary(java.lang.Object);
    Code:
       0: aload_0
       1: ldc           #2                  // String Resource must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: astore_1
       8: aload_1
       9: instanceof    #4                  // class org/springframework/core/InfrastructureProxy
      12: ifeq          25
      15: aload_1
      16: checkcast     #4                  // class org/springframework/core/InfrastructureProxy
      19: invokeinterface #5,  1            // InterfaceMethod org/springframework/core/InfrastructureProxy.getWrappedObject:()Ljava/lang/Object;
      24: astore_1
      25: getstatic     #6                  // Field aopAvailable:Z
      28: ifeq          36
      31: aload_1
      32: invokestatic  #7                  // Method org/springframework/transaction/reactive/TransactionSynchronizationUtils$ScopedProxyUnwrapper.unwrapIfNecessary:(Ljava/lang/Object;)Ljava/lang/Object;
      35: astore_1
      36: aload_1
      37: areturn

  public static reactor.core.publisher.Mono<java.lang.Void> triggerBeforeCommit(java.util.Collection<org.springframework.transaction.reactive.TransactionSynchronization>, boolean);
    Code:
       0: aload_0
       1: invokestatic  #8                  // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
       4: iload_1
       5: invokedynamic #9,  0              // InvokeDynamic #0:apply:(Z)Ljava/util/function/Function;
      10: invokevirtual #10                 // Method reactor/core/publisher/Flux.concatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      13: invokevirtual #11                 // Method reactor/core/publisher/Flux.then:()Lreactor/core/publisher/Mono;
      16: areturn

  public static reactor.core.publisher.Mono<java.lang.Void> triggerBeforeCompletion(java.util.Collection<org.springframework.transaction.reactive.TransactionSynchronization>);
    Code:
       0: aload_0
       1: invokestatic  #8                  // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
       4: invokedynamic #12,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
       9: invokevirtual #10                 // Method reactor/core/publisher/Flux.concatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      12: invokedynamic #13,  0             // InvokeDynamic #2:accept:()Ljava/util/function/BiConsumer;
      17: invokevirtual #14                 // Method reactor/core/publisher/Flux.onErrorContinue:(Ljava/util/function/BiConsumer;)Lreactor/core/publisher/Flux;
      20: invokevirtual #11                 // Method reactor/core/publisher/Flux.then:()Lreactor/core/publisher/Mono;
      23: areturn

  public static reactor.core.publisher.Mono<java.lang.Void> invokeAfterCommit(java.util.Collection<org.springframework.transaction.reactive.TransactionSynchronization>);
    Code:
       0: aload_0
       1: invokestatic  #8                  // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
       4: invokedynamic #15,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
       9: invokevirtual #10                 // Method reactor/core/publisher/Flux.concatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      12: invokevirtual #11                 // Method reactor/core/publisher/Flux.then:()Lreactor/core/publisher/Mono;
      15: areturn

  public static reactor.core.publisher.Mono<java.lang.Void> invokeAfterCompletion(java.util.Collection<org.springframework.transaction.reactive.TransactionSynchronization>, int);
    Code:
       0: aload_0
       1: invokestatic  #8                  // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
       4: iload_1
       5: invokedynamic #16,  0             // InvokeDynamic #4:apply:(I)Ljava/util/function/Function;
      10: invokevirtual #10                 // Method reactor/core/publisher/Flux.concatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      13: invokedynamic #17,  0             // InvokeDynamic #5:accept:()Ljava/util/function/BiConsumer;
      18: invokevirtual #14                 // Method reactor/core/publisher/Flux.onErrorContinue:(Ljava/util/function/BiConsumer;)Lreactor/core/publisher/Flux;
      21: invokevirtual #11                 // Method reactor/core/publisher/Flux.then:()Lreactor/core/publisher/Mono;
      24: areturn

  private static void lambda$invokeAfterCompletion$3(java.lang.Throwable, java.lang.Object);
    Code:
       0: getstatic     #18                 // Field logger:Lorg/apache/commons/logging/Log;
       3: ldc           #19                 // String TransactionSynchronization.afterCompletion threw exception
       5: aload_0
       6: invokeinterface #20,  3           // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      11: return

  private static org.reactivestreams.Publisher lambda$invokeAfterCompletion$2(int, org.springframework.transaction.reactive.TransactionSynchronization);
    Code:
       0: aload_1
       1: iload_0
       2: invokeinterface #21,  2           // InterfaceMethod org/springframework/transaction/reactive/TransactionSynchronization.afterCompletion:(I)Lreactor/core/publisher/Mono;
       7: areturn

  private static void lambda$triggerBeforeCompletion$1(java.lang.Throwable, java.lang.Object);
    Code:
       0: getstatic     #18                 // Field logger:Lorg/apache/commons/logging/Log;
       3: ldc           #22                 // String TransactionSynchronization.beforeCompletion threw exception
       5: aload_0
       6: invokeinterface #20,  3           // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      11: return

  private static org.reactivestreams.Publisher lambda$triggerBeforeCommit$0(boolean, org.springframework.transaction.reactive.TransactionSynchronization);
    Code:
       0: aload_1
       1: iload_0
       2: invokeinterface #23,  2           // InterfaceMethod org/springframework/transaction/reactive/TransactionSynchronization.beforeCommit:(Z)Lreactor/core/publisher/Mono;
       7: areturn

  static {};
    Code:
       0: ldc           #24                 // class org/springframework/transaction/reactive/TransactionSynchronizationUtils
       2: invokestatic  #25                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #18                 // Field logger:Lorg/apache/commons/logging/Log;
       8: ldc           #26                 // String org.springframework.aop.scope.ScopedObject
      10: ldc           #24                 // class org/springframework/transaction/reactive/TransactionSynchronizationUtils
      12: invokevirtual #27                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
      15: invokestatic  #28                 // Method org/springframework/util/ClassUtils.isPresent:(Ljava/lang/String;Ljava/lang/ClassLoader;)Z
      18: putstatic     #6                  // Field aopAvailable:Z
      21: return
}
