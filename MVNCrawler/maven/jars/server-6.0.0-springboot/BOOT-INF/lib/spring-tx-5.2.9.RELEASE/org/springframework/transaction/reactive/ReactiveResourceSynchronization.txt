Compiled from "ReactiveResourceSynchronization.java"
public abstract class org.springframework.transaction.reactive.ReactiveResourceSynchronization<O, K> implements org.springframework.transaction.reactive.TransactionSynchronization {
  private final O resourceObject;

  private final K resourceKey;

  private final org.springframework.transaction.reactive.TransactionSynchronizationManager synchronizationManager;

  private volatile boolean holderActive;

  public org.springframework.transaction.reactive.ReactiveResourceSynchronization(O, K, org.springframework.transaction.reactive.TransactionSynchronizationManager);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field holderActive:Z
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field resourceObject:Ljava/lang/Object;
      14: aload_0
      15: aload_2
      16: putfield      #4                  // Field resourceKey:Ljava/lang/Object;
      19: aload_0
      20: aload_3
      21: putfield      #5                  // Field synchronizationManager:Lorg/springframework/transaction/reactive/TransactionSynchronizationManager;
      24: return

  public reactor.core.publisher.Mono<java.lang.Void> suspend();
    Code:
       0: aload_0
       1: getfield      #2                  // Field holderActive:Z
       4: ifeq          19
       7: aload_0
       8: getfield      #5                  // Field synchronizationManager:Lorg/springframework/transaction/reactive/TransactionSynchronizationManager;
      11: aload_0
      12: getfield      #4                  // Field resourceKey:Ljava/lang/Object;
      15: invokevirtual #6                  // Method org/springframework/transaction/reactive/TransactionSynchronizationManager.unbindResource:(Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: invokestatic  #7                  // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      22: areturn

  public reactor.core.publisher.Mono<java.lang.Void> resume();
    Code:
       0: aload_0
       1: getfield      #2                  // Field holderActive:Z
       4: ifeq          22
       7: aload_0
       8: getfield      #5                  // Field synchronizationManager:Lorg/springframework/transaction/reactive/TransactionSynchronizationManager;
      11: aload_0
      12: getfield      #4                  // Field resourceKey:Ljava/lang/Object;
      15: aload_0
      16: getfield      #3                  // Field resourceObject:Ljava/lang/Object;
      19: invokevirtual #8                  // Method org/springframework/transaction/reactive/TransactionSynchronizationManager.bindResource:(Ljava/lang/Object;Ljava/lang/Object;)V
      22: invokestatic  #7                  // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      25: areturn

  public reactor.core.publisher.Mono<java.lang.Void> beforeCommit(boolean);
    Code:
       0: invokestatic  #7                  // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
       3: areturn

  public reactor.core.publisher.Mono<java.lang.Void> beforeCompletion();
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method shouldUnbindAtCompletion:()Z
       4: ifeq          44
       7: aload_0
       8: getfield      #5                  // Field synchronizationManager:Lorg/springframework/transaction/reactive/TransactionSynchronizationManager;
      11: aload_0
      12: getfield      #4                  // Field resourceKey:Ljava/lang/Object;
      15: invokevirtual #6                  // Method org/springframework/transaction/reactive/TransactionSynchronizationManager.unbindResource:(Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: aload_0
      20: iconst_0
      21: putfield      #2                  // Field holderActive:Z
      24: aload_0
      25: invokevirtual #10                 // Method shouldReleaseBeforeCompletion:()Z
      28: ifeq          44
      31: aload_0
      32: aload_0
      33: getfield      #3                  // Field resourceObject:Ljava/lang/Object;
      36: aload_0
      37: getfield      #4                  // Field resourceKey:Ljava/lang/Object;
      40: invokevirtual #11                 // Method releaseResource:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      43: areturn
      44: invokestatic  #7                  // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      47: areturn

  public reactor.core.publisher.Mono<java.lang.Void> afterCommit();
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method shouldReleaseBeforeCompletion:()Z
       4: ifne          16
       7: aload_0
       8: aload_0
       9: getfield      #3                  // Field resourceObject:Ljava/lang/Object;
      12: invokevirtual #12                 // Method processResourceAfterCommit:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      15: areturn
      16: invokestatic  #7                  // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      19: areturn

  public reactor.core.publisher.Mono<java.lang.Void> afterCompletion(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokedynamic #13,  0             // InvokeDynamic #0:get:(Lorg/springframework/transaction/reactive/ReactiveResourceSynchronization;I)Ljava/util/function/Supplier;
       7: invokestatic  #14                 // Method reactor/core/publisher/Mono.defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      10: areturn

  protected boolean shouldUnbindAtCompletion();
    Code:
       0: iconst_1
       1: ireturn

  protected boolean shouldReleaseBeforeCompletion();
    Code:
       0: iconst_1
       1: ireturn

  protected boolean shouldReleaseAfterCompletion(O);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method shouldReleaseBeforeCompletion:()Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  protected reactor.core.publisher.Mono<java.lang.Void> processResourceAfterCommit(O);
    Code:
       0: invokestatic  #7                  // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
       3: areturn

  protected reactor.core.publisher.Mono<java.lang.Void> releaseResource(O, K);
    Code:
       0: invokestatic  #7                  // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
       3: areturn

  protected reactor.core.publisher.Mono<java.lang.Void> cleanupResource(O, K, boolean);
    Code:
       0: invokestatic  #7                  // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
       3: areturn

  private reactor.core.publisher.Mono lambda$afterCompletion$0(int);
    Code:
       0: invokestatic  #7                  // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
       3: astore_2
       4: aload_0
       5: invokevirtual #9                  // Method shouldUnbindAtCompletion:()Z
       8: ifeq          71
      11: iconst_0
      12: istore_3
      13: aload_0
      14: getfield      #2                  // Field holderActive:Z
      17: ifeq          42
      20: aload_0
      21: iconst_0
      22: putfield      #2                  // Field holderActive:Z
      25: aload_0
      26: getfield      #5                  // Field synchronizationManager:Lorg/springframework/transaction/reactive/TransactionSynchronizationManager;
      29: aload_0
      30: getfield      #4                  // Field resourceKey:Ljava/lang/Object;
      33: invokevirtual #15                 // Method org/springframework/transaction/reactive/TransactionSynchronizationManager.unbindResourceIfPossible:(Ljava/lang/Object;)Ljava/lang/Object;
      36: pop
      37: iconst_1
      38: istore_3
      39: goto          51
      42: aload_0
      43: aload_0
      44: getfield      #3                  // Field resourceObject:Ljava/lang/Object;
      47: invokevirtual #16                 // Method shouldReleaseAfterCompletion:(Ljava/lang/Object;)Z
      50: istore_3
      51: iload_3
      52: ifeq          68
      55: aload_0
      56: aload_0
      57: getfield      #3                  // Field resourceObject:Ljava/lang/Object;
      60: aload_0
      61: getfield      #4                  // Field resourceKey:Ljava/lang/Object;
      64: invokevirtual #11                 // Method releaseResource:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      67: astore_2
      68: goto          93
      71: aload_0
      72: aload_0
      73: getfield      #3                  // Field resourceObject:Ljava/lang/Object;
      76: aload_0
      77: getfield      #4                  // Field resourceKey:Ljava/lang/Object;
      80: iload_1
      81: ifne          88
      84: iconst_1
      85: goto          89
      88: iconst_0
      89: invokevirtual #17                 // Method cleanupResource:(Ljava/lang/Object;Ljava/lang/Object;Z)Lreactor/core/publisher/Mono;
      92: astore_2
      93: aload_2
      94: areturn
}
