Compiled from "TransactionalOperatorImpl.java"
final class org.springframework.transaction.reactive.TransactionalOperatorImpl implements org.springframework.transaction.reactive.TransactionalOperator {
  private static final org.apache.commons.logging.Log logger;

  private final org.springframework.transaction.ReactiveTransactionManager transactionManager;

  private final org.springframework.transaction.TransactionDefinition transactionDefinition;

  org.springframework.transaction.reactive.TransactionalOperatorImpl(org.springframework.transaction.ReactiveTransactionManager, org.springframework.transaction.TransactionDefinition);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String ReactiveTransactionManager must not be null
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_1
      11: ldc           #4                  // String TransactionDefinition must not be null
      13: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      16: aload_0
      17: aload_1
      18: putfield      #5                  // Field transactionManager:Lorg/springframework/transaction/ReactiveTransactionManager;
      21: aload_0
      22: aload_2
      23: putfield      #6                  // Field transactionDefinition:Lorg/springframework/transaction/TransactionDefinition;
      26: return

  public org.springframework.transaction.ReactiveTransactionManager getTransactionManager();
    Code:
       0: aload_0
       1: getfield      #5                  // Field transactionManager:Lorg/springframework/transaction/ReactiveTransactionManager;
       4: areturn

  public <T> reactor.core.publisher.Mono<T> transactional(reactor.core.publisher.Mono<T>);
    Code:
       0: invokestatic  #7                  // Method org/springframework/transaction/reactive/TransactionContextManager.currentContext:()Lreactor/core/publisher/Mono;
       3: aload_0
       4: aload_1
       5: invokedynamic #8,  0              // InvokeDynamic #0:apply:(Lorg/springframework/transaction/reactive/TransactionalOperatorImpl;Lreactor/core/publisher/Mono;)Ljava/util/function/Function;
      10: invokevirtual #9                  // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      13: invokestatic  #10                 // Method org/springframework/transaction/reactive/TransactionContextManager.getOrCreateContext:()Ljava/util/function/Function;
      16: invokevirtual #11                 // Method reactor/core/publisher/Mono.subscriberContext:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      19: invokestatic  #12                 // Method org/springframework/transaction/reactive/TransactionContextManager.getOrCreateContextHolder:()Ljava/util/function/Function;
      22: invokevirtual #11                 // Method reactor/core/publisher/Mono.subscriberContext:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      25: areturn

  public <T> reactor.core.publisher.Flux<T> execute(org.springframework.transaction.reactive.TransactionCallback<T>) throws org.springframework.transaction.TransactionException;
    Code:
       0: invokestatic  #7                  // Method org/springframework/transaction/reactive/TransactionContextManager.currentContext:()Lreactor/core/publisher/Mono;
       3: aload_0
       4: aload_1
       5: invokedynamic #13,  0             // InvokeDynamic #1:apply:(Lorg/springframework/transaction/reactive/TransactionalOperatorImpl;Lorg/springframework/transaction/reactive/TransactionCallback;)Ljava/util/function/Function;
      10: invokevirtual #14                 // Method reactor/core/publisher/Mono.flatMapMany:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      13: invokestatic  #10                 // Method org/springframework/transaction/reactive/TransactionContextManager.getOrCreateContext:()Ljava/util/function/Function;
      16: invokevirtual #15                 // Method reactor/core/publisher/Flux.subscriberContext:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      19: invokestatic  #12                 // Method org/springframework/transaction/reactive/TransactionContextManager.getOrCreateContextHolder:()Ljava/util/function/Function;
      22: invokevirtual #15                 // Method reactor/core/publisher/Flux.subscriberContext:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      25: areturn

  private reactor.core.publisher.Mono<java.lang.Void> rollbackOnException(org.springframework.transaction.ReactiveTransaction, java.lang.Throwable) throws org.springframework.transaction.TransactionException;
    Code:
       0: getstatic     #16                 // Field logger:Lorg/apache/commons/logging/Log;
       3: ldc           #17                 // String Initiating transaction rollback on application exception
       5: aload_2
       6: invokeinterface #18,  3           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      11: aload_0
      12: getfield      #5                  // Field transactionManager:Lorg/springframework/transaction/ReactiveTransactionManager;
      15: aload_1
      16: invokeinterface #19,  2           // InterfaceMethod org/springframework/transaction/ReactiveTransactionManager.rollback:(Lorg/springframework/transaction/ReactiveTransaction;)Lreactor/core/publisher/Mono;
      21: aload_2
      22: invokedynamic #20,  0             // InvokeDynamic #2:apply:(Ljava/lang/Throwable;)Ljava/util/function/Function;
      27: invokevirtual #21                 // Method reactor/core/publisher/Mono.onErrorMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      30: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     34
       5: aload_0
       6: aload_1
       7: invokespecial #22                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      10: ifeq          38
      13: aload_1
      14: instanceof    #23                 // class org/springframework/transaction/reactive/TransactionalOperatorImpl
      17: ifeq          34
      20: aload_0
      21: invokevirtual #24                 // Method getTransactionManager:()Lorg/springframework/transaction/ReactiveTransactionManager;
      24: aload_1
      25: checkcast     #23                 // class org/springframework/transaction/reactive/TransactionalOperatorImpl
      28: invokevirtual #24                 // Method getTransactionManager:()Lorg/springframework/transaction/ReactiveTransactionManager;
      31: if_acmpne     38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method getTransactionManager:()Lorg/springframework/transaction/ReactiveTransactionManager;
       4: invokevirtual #25                 // Method java/lang/Object.hashCode:()I
       7: ireturn

  private static java.lang.Throwable lambda$rollbackOnException$9(java.lang.Throwable, java.lang.Throwable);
    Code:
       0: getstatic     #16                 // Field logger:Lorg/apache/commons/logging/Log;
       3: ldc           #26                 // String Application exception overridden by rollback exception
       5: aload_0
       6: invokeinterface #27,  3           // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      11: aload_1
      12: instanceof    #28                 // class org/springframework/transaction/TransactionSystemException
      15: ifeq          26
      18: aload_1
      19: checkcast     #28                 // class org/springframework/transaction/TransactionSystemException
      22: aload_0
      23: invokevirtual #29                 // Method org/springframework/transaction/TransactionSystemException.initApplicationException:(Ljava/lang/Throwable;)V
      26: aload_1
      27: areturn

  private org.reactivestreams.Publisher lambda$execute$8(org.springframework.transaction.reactive.TransactionCallback, org.springframework.transaction.reactive.TransactionContext);
    Code:
       0: aload_0
       1: getfield      #5                  // Field transactionManager:Lorg/springframework/transaction/ReactiveTransactionManager;
       4: aload_0
       5: getfield      #6                  // Field transactionDefinition:Lorg/springframework/transaction/TransactionDefinition;
       8: invokeinterface #30,  2           // InterfaceMethod org/springframework/transaction/ReactiveTransactionManager.getReactiveTransaction:(Lorg/springframework/transaction/TransactionDefinition;)Lreactor/core/publisher/Mono;
      13: astore_3
      14: aload_3
      15: aload_0
      16: aload_1
      17: invokedynamic #31,  0             // InvokeDynamic #3:apply:(Lorg/springframework/transaction/reactive/TransactionalOperatorImpl;Lorg/springframework/transaction/reactive/TransactionCallback;)Ljava/util/function/Function;
      22: invokevirtual #14                 // Method reactor/core/publisher/Mono.flatMapMany:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      25: areturn

  private org.reactivestreams.Publisher lambda$null$7(org.springframework.transaction.reactive.TransactionCallback, org.springframework.transaction.ReactiveTransaction);
    Code:
       0: aload_2
       1: invokestatic  #32                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       4: aload_1
       5: dup
       6: invokevirtual #33                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: pop
      10: invokedynamic #34,  0             // InvokeDynamic #4:apply:(Lorg/springframework/transaction/reactive/TransactionCallback;)Ljava/util/function/Function;
      15: aload_0
      16: getfield      #5                  // Field transactionManager:Lorg/springframework/transaction/ReactiveTransactionManager;
      19: dup
      20: invokevirtual #33                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      23: pop
      24: invokedynamic #35,  0             // InvokeDynamic #5:apply:(Lorg/springframework/transaction/ReactiveTransactionManager;)Ljava/util/function/Function;
      29: invokedynamic #36,  0             // InvokeDynamic #6:apply:()Ljava/util/function/BiFunction;
      34: aload_0
      35: getfield      #5                  // Field transactionManager:Lorg/springframework/transaction/ReactiveTransactionManager;
      38: dup
      39: invokevirtual #33                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      42: pop
      43: invokedynamic #35,  0             // InvokeDynamic #5:apply:(Lorg/springframework/transaction/ReactiveTransactionManager;)Ljava/util/function/Function;
      48: invokestatic  #37                 // Method reactor/core/publisher/Flux.usingWhen:(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BiFunction;Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      51: aload_0
      52: aload_2
      53: invokedynamic #38,  0             // InvokeDynamic #7:apply:(Lorg/springframework/transaction/reactive/TransactionalOperatorImpl;Lorg/springframework/transaction/ReactiveTransaction;)Ljava/util/function/Function;
      58: invokevirtual #39                 // Method reactor/core/publisher/Flux.onErrorResume:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      61: areturn

  private org.reactivestreams.Publisher lambda$null$6(org.springframework.transaction.ReactiveTransaction, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #40                 // Method rollbackOnException:(Lorg/springframework/transaction/ReactiveTransaction;Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
       6: aload_2
       7: invokestatic  #41                 // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      10: invokevirtual #42                 // Method reactor/core/publisher/Mono.then:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      13: areturn

  private static org.reactivestreams.Publisher lambda$null$5(org.springframework.transaction.ReactiveTransaction, java.lang.Throwable);
    Code:
       0: invokestatic  #43                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
       3: areturn

  private reactor.core.publisher.Mono lambda$transactional$4(reactor.core.publisher.Mono, org.springframework.transaction.reactive.TransactionContext);
    Code:
       0: aload_0
       1: getfield      #5                  // Field transactionManager:Lorg/springframework/transaction/ReactiveTransactionManager;
       4: aload_0
       5: getfield      #6                  // Field transactionDefinition:Lorg/springframework/transaction/TransactionDefinition;
       8: invokeinterface #30,  2           // InterfaceMethod org/springframework/transaction/ReactiveTransactionManager.getReactiveTransaction:(Lorg/springframework/transaction/TransactionDefinition;)Lreactor/core/publisher/Mono;
      13: astore_3
      14: aload_3
      15: aload_0
      16: aload_1
      17: invokedynamic #44,  0             // InvokeDynamic #8:apply:(Lorg/springframework/transaction/reactive/TransactionalOperatorImpl;Lreactor/core/publisher/Mono;)Ljava/util/function/Function;
      22: invokevirtual #9                  // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      25: areturn

  private reactor.core.publisher.Mono lambda$null$3(reactor.core.publisher.Mono, org.springframework.transaction.ReactiveTransaction);
    Code:
       0: aload_2
       1: invokestatic  #32                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       4: aload_1
       5: invokedynamic #45,  0             // InvokeDynamic #9:apply:(Lreactor/core/publisher/Mono;)Ljava/util/function/Function;
      10: aload_0
      11: getfield      #5                  // Field transactionManager:Lorg/springframework/transaction/ReactiveTransactionManager;
      14: dup
      15: invokevirtual #33                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      18: pop
      19: invokedynamic #35,  0             // InvokeDynamic #5:apply:(Lorg/springframework/transaction/ReactiveTransactionManager;)Ljava/util/function/Function;
      24: invokedynamic #46,  0             // InvokeDynamic #10:apply:()Ljava/util/function/BiFunction;
      29: aload_0
      30: getfield      #5                  // Field transactionManager:Lorg/springframework/transaction/ReactiveTransactionManager;
      33: dup
      34: invokevirtual #33                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      37: pop
      38: invokedynamic #35,  0             // InvokeDynamic #5:apply:(Lorg/springframework/transaction/ReactiveTransactionManager;)Ljava/util/function/Function;
      43: invokestatic  #47                 // Method reactor/core/publisher/Mono.usingWhen:(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BiFunction;Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      46: aload_0
      47: aload_2
      48: invokedynamic #48,  0             // InvokeDynamic #11:apply:(Lorg/springframework/transaction/reactive/TransactionalOperatorImpl;Lorg/springframework/transaction/ReactiveTransaction;)Ljava/util/function/Function;
      53: invokevirtual #49                 // Method reactor/core/publisher/Mono.onErrorResume:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      56: areturn

  private reactor.core.publisher.Mono lambda$null$2(org.springframework.transaction.ReactiveTransaction, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #40                 // Method rollbackOnException:(Lorg/springframework/transaction/ReactiveTransaction;Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
       6: aload_2
       7: invokestatic  #41                 // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      10: invokevirtual #42                 // Method reactor/core/publisher/Mono.then:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      13: areturn

  private static org.reactivestreams.Publisher lambda$null$1(org.springframework.transaction.ReactiveTransaction, java.lang.Throwable);
    Code:
       0: invokestatic  #43                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
       3: areturn

  private static reactor.core.publisher.Mono lambda$null$0(reactor.core.publisher.Mono, org.springframework.transaction.ReactiveTransaction);
    Code:
       0: aload_0
       1: areturn

  static {};
    Code:
       0: ldc           #23                 // class org/springframework/transaction/reactive/TransactionalOperatorImpl
       2: invokestatic  #50                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #16                 // Field logger:Lorg/apache/commons/logging/Log;
       8: return
}
