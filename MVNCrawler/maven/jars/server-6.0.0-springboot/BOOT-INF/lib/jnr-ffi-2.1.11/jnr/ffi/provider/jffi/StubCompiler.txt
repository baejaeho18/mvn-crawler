Compiled from "StubCompiler.java"
abstract class jnr.ffi.provider.jffi.StubCompiler {
  static final long errnoFunctionAddress;

  static final boolean hasPageManager;

  static final boolean hasAssembler;

  jnr.ffi.provider.jffi.StubCompiler();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static jnr.ffi.provider.jffi.StubCompiler newCompiler(jnr.ffi.Runtime);
    Code:
       0: getstatic     #2                  // Field errnoFunctionAddress:J
       3: lconst_0
       4: lcmp
       5: ifeq          123
       8: getstatic     #3                  // Field hasPageManager:Z
      11: ifeq          123
      14: getstatic     #4                  // Field hasAssembler:Z
      17: ifeq          123
      20: getstatic     #5                  // Field jnr/ffi/provider/jffi/StubCompiler$1.$SwitchMap$com$kenai$jffi$Platform$CPU:[I
      23: invokestatic  #6                  // Method com/kenai/jffi/Platform.getPlatform:()Lcom/kenai/jffi/Platform;
      26: invokevirtual #7                  // Method com/kenai/jffi/Platform.getCPU:()Lcom/kenai/jffi/Platform$CPU;
      29: invokevirtual #8                  // Method com/kenai/jffi/Platform$CPU.ordinal:()I
      32: iaload
      33: tableswitch   { // 1 to 3
                     1: 60
                     2: 81
                     3: 102
               default: 123
          }
      60: invokestatic  #6                  // Method com/kenai/jffi/Platform.getPlatform:()Lcom/kenai/jffi/Platform;
      63: invokevirtual #9                  // Method com/kenai/jffi/Platform.getOS:()Lcom/kenai/jffi/Platform$OS;
      66: getstatic     #10                 // Field com/kenai/jffi/Platform$OS.WINDOWS:Lcom/kenai/jffi/Platform$OS;
      69: if_acmpeq     123
      72: new           #11                 // class jnr/ffi/provider/jffi/X86_32StubCompiler
      75: dup
      76: aload_0
      77: invokespecial #12                 // Method jnr/ffi/provider/jffi/X86_32StubCompiler."<init>":(Ljnr/ffi/Runtime;)V
      80: areturn
      81: invokestatic  #6                  // Method com/kenai/jffi/Platform.getPlatform:()Lcom/kenai/jffi/Platform;
      84: invokevirtual #9                  // Method com/kenai/jffi/Platform.getOS:()Lcom/kenai/jffi/Platform$OS;
      87: getstatic     #10                 // Field com/kenai/jffi/Platform$OS.WINDOWS:Lcom/kenai/jffi/Platform$OS;
      90: if_acmpeq     123
      93: new           #13                 // class jnr/ffi/provider/jffi/X86_64StubCompiler
      96: dup
      97: aload_0
      98: invokespecial #14                 // Method jnr/ffi/provider/jffi/X86_64StubCompiler."<init>":(Ljnr/ffi/Runtime;)V
     101: areturn
     102: invokestatic  #6                  // Method com/kenai/jffi/Platform.getPlatform:()Lcom/kenai/jffi/Platform;
     105: invokevirtual #9                  // Method com/kenai/jffi/Platform.getOS:()Lcom/kenai/jffi/Platform$OS;
     108: getstatic     #10                 // Field com/kenai/jffi/Platform$OS.WINDOWS:Lcom/kenai/jffi/Platform$OS;
     111: if_acmpeq     123
     114: new           #15                 // class jnr/ffi/provider/jffi/ARM_64StubCompiler
     117: dup
     118: aload_0
     119: invokespecial #16                 // Method jnr/ffi/provider/jffi/ARM_64StubCompiler."<init>":(Ljnr/ffi/Runtime;)V
     122: areturn
     123: new           #17                 // class jnr/ffi/provider/jffi/StubCompiler$DummyStubCompiler
     126: dup
     127: invokespecial #18                 // Method jnr/ffi/provider/jffi/StubCompiler$DummyStubCompiler."<init>":()V
     130: areturn

  abstract boolean canCompile(jnr.ffi.provider.ResultType, jnr.ffi.provider.ParameterType[], jnr.ffi.CallingConvention);

  abstract void compile(com.kenai.jffi.Function, java.lang.String, jnr.ffi.provider.ResultType, jnr.ffi.provider.ParameterType[], java.lang.Class, java.lang.Class[], jnr.ffi.CallingConvention, boolean);

  abstract void attach(java.lang.Class);

  private static long getErrnoSaveFunction();
    Code:
       0: invokestatic  #19                 // Method com/kenai/jffi/Internals.getErrnoSaveFunction:()J
       3: lreturn
       4: astore_0
       5: lconst_0
       6: lreturn
    Exception table:
       from    to  target type
           0     3     4   Class java/lang/Throwable

  private static boolean hasPageManager();
    Code:
       0: invokestatic  #21                 // Method com/kenai/jffi/PageManager.getInstance:()Lcom/kenai/jffi/PageManager;
       3: iconst_1
       4: iconst_3
       5: invokevirtual #23                 // Method com/kenai/jffi/PageManager.allocatePages:(II)J
       8: lstore_0
       9: invokestatic  #21                 // Method com/kenai/jffi/PageManager.getInstance:()Lcom/kenai/jffi/PageManager;
      12: lload_0
      13: iconst_1
      14: invokevirtual #24                 // Method com/kenai/jffi/PageManager.freePages:(JI)V
      17: iconst_1
      18: ireturn
      19: astore_0
      20: iconst_0
      21: ireturn
    Exception table:
       from    to  target type
           0    18    19   Class java/lang/Throwable

  private static boolean hasAssembler();
    Code:
       0: getstatic     #5                  // Field jnr/ffi/provider/jffi/StubCompiler$1.$SwitchMap$com$kenai$jffi$Platform$CPU:[I
       3: invokestatic  #6                  // Method com/kenai/jffi/Platform.getPlatform:()Lcom/kenai/jffi/Platform;
       6: invokevirtual #7                  // Method com/kenai/jffi/Platform.getCPU:()Lcom/kenai/jffi/Platform$CPU;
       9: invokevirtual #8                  // Method com/kenai/jffi/Platform$CPU.ordinal:()I
      12: iaload
      13: tableswitch   { // 1 to 3
                     1: 40
                     2: 53
                     3: 66
               default: 79
          }
      40: new           #25                 // class jnr/x86asm/Assembler
      43: dup
      44: getstatic     #26                 // Field jnr/x86asm/CPU.X86_32:Ljnr/x86asm/CPU;
      47: invokespecial #27                 // Method jnr/x86asm/Assembler."<init>":(Ljnr/x86asm/CPU;)V
      50: pop
      51: iconst_1
      52: ireturn
      53: new           #25                 // class jnr/x86asm/Assembler
      56: dup
      57: getstatic     #28                 // Field jnr/x86asm/CPU.X86_64:Ljnr/x86asm/CPU;
      60: invokespecial #27                 // Method jnr/x86asm/Assembler."<init>":(Ljnr/x86asm/CPU;)V
      63: pop
      64: iconst_1
      65: ireturn
      66: new           #29                 // class jnr/a64asm/Assembler_A64
      69: dup
      70: getstatic     #30                 // Field jnr/a64asm/CPU_A64.A64:Ljnr/a64asm/CPU_A64;
      73: invokespecial #31                 // Method jnr/a64asm/Assembler_A64."<init>":(Ljnr/a64asm/CPU_A64;)V
      76: pop
      77: iconst_1
      78: ireturn
      79: iconst_0
      80: ireturn
      81: astore_0
      82: iconst_0
      83: ireturn
    Exception table:
       from    to  target type
           0    52    81   Class java/lang/Throwable
          53    65    81   Class java/lang/Throwable
          66    78    81   Class java/lang/Throwable
          79    80    81   Class java/lang/Throwable

  static {};
    Code:
       0: invokestatic  #32                 // Method getErrnoSaveFunction:()J
       3: putstatic     #2                  // Field errnoFunctionAddress:J
       6: invokestatic  #33                 // Method hasPageManager:()Z
       9: putstatic     #3                  // Field hasPageManager:Z
      12: invokestatic  #34                 // Method hasAssembler:()Z
      15: putstatic     #4                  // Field hasAssembler:Z
      18: return
}
