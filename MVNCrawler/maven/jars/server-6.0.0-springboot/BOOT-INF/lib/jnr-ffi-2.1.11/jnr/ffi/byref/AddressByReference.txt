Compiled from "AddressByReference.java"
public final class jnr.ffi.byref.AddressByReference extends jnr.ffi.byref.AbstractReference<jnr.ffi.Address> {
  public jnr.ffi.byref.AddressByReference();
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #1                  // Method jnr/ffi/Address.valueOf:(I)Ljnr/ffi/Address;
       5: invokespecial #2                  // Method jnr/ffi/byref/AbstractReference."<init>":(Ljava/lang/Object;)V
       8: return

  public jnr.ffi.byref.AddressByReference(jnr.ffi.Address);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #3                  // Method checkNull:(Ljava/lang/Object;)Ljava/lang/Object;
       5: invokespecial #2                  // Method jnr/ffi/byref/AbstractReference."<init>":(Ljava/lang/Object;)V
       8: return

  public void toNative(jnr.ffi.Runtime, jnr.ffi.Pointer, long);
    Code:
       0: aload_2
       1: lload_3
       2: aload_0
       3: getfield      #4                  // Field value:Ljava/lang/Object;
       6: checkcast     #5                  // class jnr/ffi/Address
       9: invokevirtual #6                  // Method jnr/ffi/Address.nativeAddress:()J
      12: invokevirtual #7                  // Method jnr/ffi/Pointer.putAddress:(JJ)V
      15: return

  public void fromNative(jnr.ffi.Runtime, jnr.ffi.Pointer, long);
    Code:
       0: aload_0
       1: aload_2
       2: lload_3
       3: invokevirtual #8                  // Method jnr/ffi/Pointer.getAddress:(J)J
       6: invokestatic  #9                  // Method jnr/ffi/Address.valueOf:(J)Ljnr/ffi/Address;
       9: putfield      #4                  // Field value:Ljava/lang/Object;
      12: return

  public int nativeSize(jnr.ffi.Runtime);
    Code:
       0: aload_1
       1: invokevirtual #10                 // Method jnr/ffi/Runtime.addressSize:()I
       4: ireturn
}
