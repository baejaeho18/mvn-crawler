Compiled from "Platform.java"
public abstract class jnr.ffi.Platform {
  private static final java.util.Locale LOCALE;

  private final jnr.ffi.Platform$OS os;

  private final jnr.ffi.Platform$CPU cpu;

  private final int addressSize;

  private final int longSize;

  protected final java.util.regex.Pattern libPattern;

  private static jnr.ffi.Platform$OS determineOS();
    Code:
       0: ldc           #4                  // String os.name
       2: invokestatic  #5                  // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: ldc           #6                  // String
       7: invokevirtual #7                  // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
      10: iconst_0
      11: aaload
      12: astore_0
      13: aload_0
      14: ldc           #8                  // String mac
      16: invokestatic  #9                  // Method startsWithIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      19: ifne          31
      22: aload_0
      23: ldc           #10                 // String darwin
      25: invokestatic  #9                  // Method startsWithIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      28: ifeq          35
      31: getstatic     #11                 // Field jnr/ffi/Platform$OS.DARWIN:Ljnr/ffi/Platform$OS;
      34: areturn
      35: aload_0
      36: ldc           #12                 // String linux
      38: invokestatic  #9                  // Method startsWithIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      41: ifeq          48
      44: getstatic     #13                 // Field jnr/ffi/Platform$OS.LINUX:Ljnr/ffi/Platform$OS;
      47: areturn
      48: aload_0
      49: ldc           #14                 // String sunos
      51: invokestatic  #9                  // Method startsWithIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      54: ifne          66
      57: aload_0
      58: ldc           #15                 // String solaris
      60: invokestatic  #9                  // Method startsWithIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      63: ifeq          70
      66: getstatic     #16                 // Field jnr/ffi/Platform$OS.SOLARIS:Ljnr/ffi/Platform$OS;
      69: areturn
      70: aload_0
      71: ldc           #17                 // String aix
      73: invokestatic  #9                  // Method startsWithIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      76: ifeq          83
      79: getstatic     #18                 // Field jnr/ffi/Platform$OS.AIX:Ljnr/ffi/Platform$OS;
      82: areturn
      83: aload_0
      84: ldc           #19                 // String openbsd
      86: invokestatic  #9                  // Method startsWithIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      89: ifeq          96
      92: getstatic     #20                 // Field jnr/ffi/Platform$OS.OPENBSD:Ljnr/ffi/Platform$OS;
      95: areturn
      96: aload_0
      97: ldc           #21                 // String freebsd
      99: invokestatic  #9                  // Method startsWithIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
     102: ifeq          109
     105: getstatic     #22                 // Field jnr/ffi/Platform$OS.FREEBSD:Ljnr/ffi/Platform$OS;
     108: areturn
     109: aload_0
     110: ldc           #23                 // String dragonfly
     112: invokestatic  #9                  // Method startsWithIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
     115: ifeq          122
     118: getstatic     #24                 // Field jnr/ffi/Platform$OS.DRAGONFLY:Ljnr/ffi/Platform$OS;
     121: areturn
     122: aload_0
     123: ldc           #25                 // String windows
     125: invokestatic  #9                  // Method startsWithIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
     128: ifeq          135
     131: getstatic     #26                 // Field jnr/ffi/Platform$OS.WINDOWS:Ljnr/ffi/Platform$OS;
     134: areturn
     135: getstatic     #27                 // Field jnr/ffi/Platform$OS.UNKNOWN:Ljnr/ffi/Platform$OS;
     138: areturn

  private static jnr.ffi.Platform determinePlatform(jnr.ffi.Platform$OS);
    Code:
       0: getstatic     #28                 // Field jnr/ffi/Platform$1.$SwitchMap$jnr$ffi$Platform$OS:[I
       3: aload_0
       4: invokevirtual #29                 // Method jnr/ffi/Platform$OS.ordinal:()I
       7: iaload
       8: tableswitch   { // 1 to 4
                     1: 40
                     2: 48
                     3: 56
                     4: 64
               default: 73
          }
      40: new           #30                 // class jnr/ffi/Platform$Darwin
      43: dup
      44: invokespecial #31                 // Method jnr/ffi/Platform$Darwin."<init>":()V
      47: areturn
      48: new           #32                 // class jnr/ffi/Platform$Linux
      51: dup
      52: invokespecial #33                 // Method jnr/ffi/Platform$Linux."<init>":()V
      55: areturn
      56: new           #34                 // class jnr/ffi/Platform$Windows
      59: dup
      60: invokespecial #35                 // Method jnr/ffi/Platform$Windows."<init>":()V
      63: areturn
      64: new           #36                 // class jnr/ffi/Platform$Unsupported
      67: dup
      68: aload_0
      69: invokespecial #37                 // Method jnr/ffi/Platform$Unsupported."<init>":(Ljnr/ffi/Platform$OS;)V
      72: areturn
      73: new           #38                 // class jnr/ffi/Platform$Default
      76: dup
      77: aload_0
      78: invokespecial #39                 // Method jnr/ffi/Platform$Default."<init>":(Ljnr/ffi/Platform$OS;)V
      81: areturn

  private static jnr.ffi.Platform determinePlatform();
    Code:
       0: ldc           #40                 // String jnr.ffi.provider
       2: invokestatic  #5                  // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_0
       6: new           #41                 // class java/lang/StringBuilder
       9: dup
      10: invokespecial #42                 // Method java/lang/StringBuilder."<init>":()V
      13: aload_0
      14: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: ldc           #44                 // String $Platform
      19: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      25: invokestatic  #46                 // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
      28: astore_1
      29: aload_1
      30: invokevirtual #47                 // Method java/lang/Class.newInstance:()Ljava/lang/Object;
      33: checkcast     #48                 // class jnr/ffi/Platform
      36: areturn
      37: astore_1
      38: invokestatic  #50                 // Method determineOS:()Ljnr/ffi/Platform$OS;
      41: invokestatic  #51                 // Method determinePlatform:(Ljnr/ffi/Platform$OS;)Ljnr/ffi/Platform;
      44: areturn
      45: astore_1
      46: new           #53                 // class java/lang/ExceptionInInitializerError
      49: dup
      50: aload_1
      51: invokespecial #54                 // Method java/lang/ExceptionInInitializerError."<init>":(Ljava/lang/Throwable;)V
      54: athrow
      55: astore_1
      56: new           #53                 // class java/lang/ExceptionInInitializerError
      59: dup
      60: aload_1
      61: invokespecial #54                 // Method java/lang/ExceptionInInitializerError."<init>":(Ljava/lang/Throwable;)V
      64: athrow
    Exception table:
       from    to  target type
           6    36    37   Class java/lang/ClassNotFoundException
           6    36    45   Class java/lang/IllegalAccessException
           6    36    55   Class java/lang/InstantiationException

  private static jnr.ffi.Platform$CPU determineCPU();
    Code:
       0: ldc           #56                 // String os.arch
       2: invokestatic  #5                  // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_0
       6: ldc           #57                 // String x86
       8: aload_0
       9: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      12: ifne          42
      15: ldc           #59                 // String i386
      17: aload_0
      18: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      21: ifne          42
      24: ldc           #60                 // String i86pc
      26: aload_0
      27: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      30: ifne          42
      33: ldc           #61                 // String i686
      35: aload_0
      36: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      39: ifeq          46
      42: getstatic     #62                 // Field jnr/ffi/Platform$CPU.I386:Ljnr/ffi/Platform$CPU;
      45: areturn
      46: ldc           #63                 // String x86_64
      48: aload_0
      49: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      52: ifne          64
      55: ldc           #64                 // String amd64
      57: aload_0
      58: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      61: ifeq          68
      64: getstatic     #65                 // Field jnr/ffi/Platform$CPU.X86_64:Ljnr/ffi/Platform$CPU;
      67: areturn
      68: ldc           #66                 // String ppc
      70: aload_0
      71: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      74: ifne          86
      77: ldc           #67                 // String powerpc
      79: aload_0
      80: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      83: ifeq          90
      86: getstatic     #68                 // Field jnr/ffi/Platform$CPU.PPC:Ljnr/ffi/Platform$CPU;
      89: areturn
      90: ldc           #69                 // String ppc64
      92: aload_0
      93: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
      96: ifne          108
      99: ldc           #70                 // String powerpc64
     101: aload_0
     102: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
     105: ifeq          129
     108: ldc           #71                 // String little
     110: ldc           #72                 // String sun.cpu.endian
     112: invokestatic  #5                  // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     115: invokevirtual #73                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     118: ifeq          125
     121: getstatic     #74                 // Field jnr/ffi/Platform$CPU.PPC64LE:Ljnr/ffi/Platform$CPU;
     124: areturn
     125: getstatic     #75                 // Field jnr/ffi/Platform$CPU.PPC64:Ljnr/ffi/Platform$CPU;
     128: areturn
     129: ldc           #76                 // String ppc64le
     131: aload_0
     132: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
     135: ifne          147
     138: ldc           #77                 // String powerpc64le
     140: aload_0
     141: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
     144: ifeq          151
     147: getstatic     #74                 // Field jnr/ffi/Platform$CPU.PPC64LE:Ljnr/ffi/Platform$CPU;
     150: areturn
     151: ldc           #78                 // String s390
     153: aload_0
     154: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
     157: ifne          169
     160: ldc           #79                 // String s390x
     162: aload_0
     163: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
     166: ifeq          173
     169: getstatic     #80                 // Field jnr/ffi/Platform$CPU.S390X:Ljnr/ffi/Platform$CPU;
     172: areturn
     173: ldc           #81                 // String aarch64
     175: aload_0
     176: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
     179: ifeq          186
     182: getstatic     #82                 // Field jnr/ffi/Platform$CPU.AARCH64:Ljnr/ffi/Platform$CPU;
     185: areturn
     186: ldc           #83                 // String arm
     188: aload_0
     189: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
     192: ifne          204
     195: ldc           #84                 // String armv7l
     197: aload_0
     198: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
     201: ifeq          208
     204: getstatic     #85                 // Field jnr/ffi/Platform$CPU.ARM:Ljnr/ffi/Platform$CPU;
     207: areturn
     208: invokestatic  #86                 // Method jnr/ffi/Platform$CPU.values:()[Ljnr/ffi/Platform$CPU;
     211: astore_1
     212: aload_1
     213: arraylength
     214: istore_2
     215: iconst_0
     216: istore_3
     217: iload_3
     218: iload_2
     219: if_icmpge     248
     222: aload_1
     223: iload_3
     224: aaload
     225: astore        4
     227: aload         4
     229: invokevirtual #87                 // Method jnr/ffi/Platform$CPU.name:()Ljava/lang/String;
     232: aload_0
     233: invokestatic  #58                 // Method equalsIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z
     236: ifeq          242
     239: aload         4
     241: areturn
     242: iinc          3, 1
     245: goto          217
     248: getstatic     #88                 // Field jnr/ffi/Platform$CPU.UNKNOWN:Ljnr/ffi/Platform$CPU;
     251: areturn

  public jnr.ffi.Platform(jnr.ffi.Platform$OS, jnr.ffi.Platform$CPU, int, int, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #89                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #90                 // Field os:Ljnr/ffi/Platform$OS;
       9: aload_0
      10: aload_2
      11: putfield      #91                 // Field cpu:Ljnr/ffi/Platform$CPU;
      14: aload_0
      15: iload_3
      16: putfield      #92                 // Field addressSize:I
      19: aload_0
      20: iload         4
      22: putfield      #93                 // Field longSize:I
      25: aload_0
      26: aload         5
      28: invokestatic  #94                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      31: putfield      #95                 // Field libPattern:Ljava/util/regex/Pattern;
      34: return

  private jnr.ffi.Platform(jnr.ffi.Platform$OS);
    Code:
       0: aload_0
       1: invokespecial #89                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #90                 // Field os:Ljnr/ffi/Platform$OS;
       9: aload_0
      10: invokestatic  #96                 // Method determineCPU:()Ljnr/ffi/Platform$CPU;
      13: putfield      #91                 // Field cpu:Ljnr/ffi/Platform$CPU;
      16: getstatic     #28                 // Field jnr/ffi/Platform$1.$SwitchMap$jnr$ffi$Platform$OS:[I
      19: aload_1
      20: invokevirtual #29                 // Method jnr/ffi/Platform$OS.ordinal:()I
      23: iaload
      24: lookupswitch  { // 2
                     1: 58
                     3: 52
               default: 64
          }
      52: ldc           #97                 // String .*\\.dll$
      54: astore_2
      55: goto          67
      58: ldc           #98                 // String lib.*\\.(dylib|jnilib)$
      60: astore_2
      61: goto          67
      64: ldc           #99                 // String lib.*\\.so.*$
      66: astore_2
      67: aload_0
      68: aload_2
      69: invokestatic  #94                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      72: putfield      #95                 // Field libPattern:Ljava/util/regex/Pattern;
      75: aload_0
      76: aload_0
      77: getfield      #91                 // Field cpu:Ljnr/ffi/Platform$CPU;
      80: invokestatic  #100                // Method calculateAddressSize:(Ljnr/ffi/Platform$CPU;)I
      83: putfield      #92                 // Field addressSize:I
      86: aload_0
      87: aload_1
      88: getstatic     #26                 // Field jnr/ffi/Platform$OS.WINDOWS:Ljnr/ffi/Platform$OS;
      91: if_acmpne     99
      94: bipush        32
      96: goto          103
      99: aload_0
     100: getfield      #92                 // Field addressSize:I
     103: putfield      #93                 // Field longSize:I
     106: return

  private static int calculateAddressSize(jnr.ffi.Platform$CPU);
    Code:
       0: ldc           #101                // String sun.arch.data.model
       2: invokestatic  #102                // Method java/lang/Integer.getInteger:(Ljava/lang/String;)Ljava/lang/Integer;
       5: astore_1
       6: aload_1
       7: ifnull        28
      10: aload_1
      11: invokevirtual #103                // Method java/lang/Integer.intValue:()I
      14: bipush        32
      16: if_icmpeq     116
      19: aload_1
      20: invokevirtual #103                // Method java/lang/Integer.intValue:()I
      23: bipush        64
      25: if_icmpeq     116
      28: getstatic     #104                // Field jnr/ffi/Platform$1.$SwitchMap$jnr$ffi$Platform$CPU:[I
      31: aload_0
      32: invokevirtual #105                // Method jnr/ffi/Platform$CPU.ordinal:()I
      35: iaload
      36: tableswitch   { // 1 to 9
                     1: 88
                     2: 88
                     3: 88
                     4: 97
                     5: 97
                     6: 97
                     7: 97
                     8: 97
                     9: 97
               default: 106
          }
      88: bipush        32
      90: invokestatic  #106                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      93: astore_1
      94: goto          116
      97: bipush        64
      99: invokestatic  #106                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     102: astore_1
     103: goto          116
     106: new           #53                 // class java/lang/ExceptionInInitializerError
     109: dup
     110: ldc           #107                // String Cannot determine cpu address size
     112: invokespecial #108                // Method java/lang/ExceptionInInitializerError."<init>":(Ljava/lang/String;)V
     115: athrow
     116: aload_1
     117: invokevirtual #103                // Method java/lang/Integer.intValue:()I
     120: ireturn

  public static jnr.ffi.Platform getNativePlatform();
    Code:
       0: getstatic     #109                // Field jnr/ffi/Platform$SingletonHolder.PLATFORM:Ljnr/ffi/Platform;
       3: areturn

  public static jnr.ffi.Platform getPlatform();
    Code:
       0: getstatic     #109                // Field jnr/ffi/Platform$SingletonHolder.PLATFORM:Ljnr/ffi/Platform;
       3: areturn

  public final jnr.ffi.Platform$OS getOS();
    Code:
       0: aload_0
       1: getfield      #90                 // Field os:Ljnr/ffi/Platform$OS;
       4: areturn

  public final jnr.ffi.Platform$CPU getCPU();
    Code:
       0: aload_0
       1: getfield      #91                 // Field cpu:Ljnr/ffi/Platform$CPU;
       4: areturn

  public final boolean isBSD();
    Code:
       0: aload_0
       1: getfield      #90                 // Field os:Ljnr/ffi/Platform$OS;
       4: getstatic     #22                 // Field jnr/ffi/Platform$OS.FREEBSD:Ljnr/ffi/Platform$OS;
       7: if_acmpeq     50
      10: aload_0
      11: getfield      #90                 // Field os:Ljnr/ffi/Platform$OS;
      14: getstatic     #20                 // Field jnr/ffi/Platform$OS.OPENBSD:Ljnr/ffi/Platform$OS;
      17: if_acmpeq     50
      20: aload_0
      21: getfield      #90                 // Field os:Ljnr/ffi/Platform$OS;
      24: getstatic     #110                // Field jnr/ffi/Platform$OS.NETBSD:Ljnr/ffi/Platform$OS;
      27: if_acmpeq     50
      30: aload_0
      31: getfield      #90                 // Field os:Ljnr/ffi/Platform$OS;
      34: getstatic     #11                 // Field jnr/ffi/Platform$OS.DARWIN:Ljnr/ffi/Platform$OS;
      37: if_acmpeq     50
      40: aload_0
      41: getfield      #90                 // Field os:Ljnr/ffi/Platform$OS;
      44: getstatic     #24                 // Field jnr/ffi/Platform$OS.DRAGONFLY:Ljnr/ffi/Platform$OS;
      47: if_acmpne     54
      50: iconst_1
      51: goto          55
      54: iconst_0
      55: ireturn

  public final boolean isUnix();
    Code:
       0: aload_0
       1: getfield      #90                 // Field os:Ljnr/ffi/Platform$OS;
       4: getstatic     #26                 // Field jnr/ffi/Platform$OS.WINDOWS:Ljnr/ffi/Platform$OS;
       7: if_acmpeq     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public final int longSize();
    Code:
       0: aload_0
       1: getfield      #93                 // Field longSize:I
       4: ireturn

  public final int addressSize();
    Code:
       0: aload_0
       1: getfield      #92                 // Field addressSize:I
       4: ireturn

  public java.lang.String getName();
    Code:
       0: new           #41                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #42                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: getfield      #91                 // Field cpu:Ljnr/ffi/Platform$CPU;
      11: invokevirtual #111                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      14: ldc           #112                // String -
      16: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: aload_0
      20: getfield      #90                 // Field os:Ljnr/ffi/Platform$OS;
      23: invokevirtual #111                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      26: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: areturn

  public java.lang.String getStandardCLibraryName();
    Code:
       0: getstatic     #28                 // Field jnr/ffi/Platform$1.$SwitchMap$jnr$ffi$Platform$OS:[I
       3: aload_0
       4: getfield      #90                 // Field os:Ljnr/ffi/Platform$OS;
       7: invokevirtual #29                 // Method jnr/ffi/Platform$OS.ordinal:()I
      10: iaload
      11: tableswitch   { // 2 to 9
                     2: 56
                     3: 82
                     4: 85
                     5: 59
                     6: 62
                     7: 62
                     8: 62
                     9: 65
               default: 85
          }
      56: ldc           #113                // String libc.so.6
      58: areturn
      59: ldc           #114                // String c
      61: areturn
      62: ldc           #114                // String c
      64: areturn
      65: aload_0
      66: getfield      #92                 // Field addressSize:I
      69: bipush        32
      71: if_icmpne     79
      74: ldc           #115                // String libc.a(shr.o)
      76: goto          81
      79: ldc           #116                // String libc.a(shr_64.o)
      81: areturn
      82: ldc           #117                // String msvcrt
      84: areturn
      85: ldc           #114                // String c
      87: areturn

  public java.lang.String mapLibraryName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #95                 // Field libPattern:Ljava/util/regex/Pattern;
       4: aload_1
       5: invokevirtual #118                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
       8: invokevirtual #119                // Method java/util/regex/Matcher.find:()Z
      11: ifeq          16
      14: aload_1
      15: areturn
      16: aload_1
      17: invokestatic  #120                // Method java/lang/System.mapLibraryName:(Ljava/lang/String;)Ljava/lang/String;
      20: areturn

  public java.lang.String locateLibrary(java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #121                // Method mapLibraryName:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_3
       6: aload_2
       7: invokeinterface #122,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      12: astore        4
      14: aload         4
      16: invokeinterface #123,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          65
      24: aload         4
      26: invokeinterface #124,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #125                // class java/lang/String
      34: astore        5
      36: new           #126                // class java/io/File
      39: dup
      40: aload         5
      42: aload_3
      43: invokespecial #127                // Method java/io/File."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      46: astore        6
      48: aload         6
      50: invokevirtual #128                // Method java/io/File.exists:()Z
      53: ifeq          62
      56: aload         6
      58: invokevirtual #129                // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
      61: areturn
      62: goto          14
      65: aload_3
      66: areturn

  private static boolean startsWithIgnoreCase(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #130                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       5: ifne          48
       8: aload_0
       9: getstatic     #2                  // Field LOCALE:Ljava/util/Locale;
      12: invokevirtual #131                // Method java/lang/String.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;
      15: aload_1
      16: getstatic     #2                  // Field LOCALE:Ljava/util/Locale;
      19: invokevirtual #131                // Method java/lang/String.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;
      22: invokevirtual #130                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      25: ifne          48
      28: aload_0
      29: getstatic     #2                  // Field LOCALE:Ljava/util/Locale;
      32: invokevirtual #132                // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      35: aload_1
      36: getstatic     #2                  // Field LOCALE:Ljava/util/Locale;
      39: invokevirtual #132                // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      42: invokevirtual #130                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      45: ifeq          52
      48: iconst_1
      49: goto          53
      52: iconst_0
      53: ireturn

  private static boolean equalsIgnoreCase(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #133                // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       5: ifne          48
       8: aload_0
       9: getstatic     #2                  // Field LOCALE:Ljava/util/Locale;
      12: invokevirtual #131                // Method java/lang/String.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;
      15: aload_1
      16: getstatic     #2                  // Field LOCALE:Ljava/util/Locale;
      19: invokevirtual #131                // Method java/lang/String.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;
      22: invokevirtual #73                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      25: ifne          48
      28: aload_0
      29: getstatic     #2                  // Field LOCALE:Ljava/util/Locale;
      32: invokevirtual #132                // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      35: aload_1
      36: getstatic     #2                  // Field LOCALE:Ljava/util/Locale;
      39: invokevirtual #132                // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      42: invokevirtual #73                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      45: ifeq          52
      48: iconst_1
      49: goto          53
      52: iconst_0
      53: ireturn

  static jnr.ffi.Platform access$000();
    Code:
       0: invokestatic  #3                  // Method determinePlatform:()Ljnr/ffi/Platform;
       3: areturn

  static java.util.Locale access$100();
    Code:
       0: getstatic     #2                  // Field LOCALE:Ljava/util/Locale;
       3: areturn

  jnr.ffi.Platform(jnr.ffi.Platform$OS, jnr.ffi.Platform$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Ljnr/ffi/Platform$OS;)V
       5: return

  static {};
    Code:
       0: getstatic     #134                // Field java/util/Locale.ENGLISH:Ljava/util/Locale;
       3: putstatic     #2                  // Field LOCALE:Ljava/util/Locale;
       6: return
}
