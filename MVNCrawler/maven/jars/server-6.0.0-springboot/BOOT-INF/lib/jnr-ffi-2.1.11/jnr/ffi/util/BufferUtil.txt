Compiled from "BufferUtil.java"
public final class jnr.ffi.util.BufferUtil {
  private jnr.ffi.util.BufferUtil();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static void putString(java.nio.ByteBuffer, java.nio.charset.Charset, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #2                  // Method putCharSequence:(Ljava/nio/ByteBuffer;Ljava/nio/charset/Charset;Ljava/lang/CharSequence;)V
       6: return

  public static java.lang.String getString(java.nio.ByteBuffer, java.nio.charset.Charset);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #3                  // Method getCharSequence:(Ljava/nio/ByteBuffer;Ljava/nio/charset/Charset;)Ljava/lang/CharSequence;
       5: invokeinterface #4,  1            // InterfaceMethod java/lang/CharSequence.toString:()Ljava/lang/String;
      10: areturn

  public static void putCharSequence(java.nio.ByteBuffer, java.nio.charset.Charset, java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #5                  // Method java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;
       5: aload_2
       6: invokestatic  #6                  // Method putCharSequence:(Ljava/nio/ByteBuffer;Ljava/nio/charset/CharsetEncoder;Ljava/lang/CharSequence;)V
       9: return

  public static void putCharSequence(java.nio.ByteBuffer, java.nio.charset.CharsetEncoder, java.lang.CharSequence);
    Code:
       0: aload_1
       1: invokevirtual #7                  // Method java/nio/charset/CharsetEncoder.reset:()Ljava/nio/charset/CharsetEncoder;
       4: getstatic     #8                  // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;
       7: invokevirtual #9                  // Method java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;
      10: getstatic     #8                  // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;
      13: invokevirtual #10                 // Method java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;
      16: aload_2
      17: invokestatic  #11                 // Method java/nio/CharBuffer.wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;
      20: aload_0
      21: iconst_1
      22: invokevirtual #12                 // Method java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;
      25: pop
      26: aload_1
      27: aload_0
      28: invokevirtual #13                 // Method java/nio/charset/CharsetEncoder.flush:(Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;
      31: pop
      32: aload_1
      33: invokevirtual #14                 // Method java/nio/charset/CharsetEncoder.maxBytesPerChar:()F
      36: invokestatic  #15                 // Method java/lang/Math.round:(F)I
      39: istore_3
      40: iload_3
      41: iconst_4
      42: if_icmpne     54
      45: aload_0
      46: iconst_0
      47: invokevirtual #16                 // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;
      50: pop
      51: goto          79
      54: iload_3
      55: iconst_2
      56: if_icmpne     68
      59: aload_0
      60: iconst_0
      61: invokevirtual #17                 // Method java/nio/ByteBuffer.putShort:(S)Ljava/nio/ByteBuffer;
      64: pop
      65: goto          79
      68: iload_3
      69: iconst_1
      70: if_icmpne     79
      73: aload_0
      74: iconst_0
      75: invokevirtual #18                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      78: pop
      79: return

  public static java.lang.CharSequence getCharSequence(java.nio.ByteBuffer, java.nio.charset.Charset);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
       4: astore_2
       5: aload_2
       6: iconst_0
       7: invokestatic  #20                 // Method indexOf:(Ljava/nio/ByteBuffer;B)I
      10: istore_3
      11: iload_3
      12: ifge          20
      15: aload_2
      16: invokevirtual #21                 // Method java/nio/ByteBuffer.limit:()I
      19: istore_3
      20: aload_2
      21: iconst_0
      22: invokevirtual #22                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      25: iload_3
      26: invokevirtual #23                 // Method java/nio/Buffer.limit:(I)Ljava/nio/Buffer;
      29: pop
      30: aload_1
      31: aload_2
      32: invokevirtual #24                 // Method java/nio/charset/Charset.decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;
      35: areturn

  public static java.lang.CharSequence getCharSequence(java.nio.ByteBuffer, java.nio.charset.CharsetDecoder);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
       4: astore_2
       5: aload_2
       6: iconst_0
       7: invokestatic  #20                 // Method indexOf:(Ljava/nio/ByteBuffer;B)I
      10: istore_3
      11: iload_3
      12: ifge          20
      15: aload_2
      16: invokevirtual #21                 // Method java/nio/ByteBuffer.limit:()I
      19: istore_3
      20: aload_2
      21: iconst_0
      22: invokevirtual #22                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      25: iload_3
      26: invokevirtual #23                 // Method java/nio/Buffer.limit:(I)Ljava/nio/Buffer;
      29: pop
      30: aload_1
      31: invokevirtual #25                 // Method java/nio/charset/CharsetDecoder.reset:()Ljava/nio/charset/CharsetDecoder;
      34: getstatic     #8                  // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;
      37: invokevirtual #26                 // Method java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;
      40: getstatic     #8                  // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;
      43: invokevirtual #27                 // Method java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;
      46: aload_2
      47: invokevirtual #28                 // Method java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;
      50: areturn
      51: astore        4
      53: new           #30                 // class java/lang/Error
      56: dup
      57: ldc           #31                 // String Illegal character data in native string
      59: aload         4
      61: invokespecial #32                 // Method java/lang/Error."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      64: athrow
    Exception table:
       from    to  target type
          30    50    51   Class java/nio/charset/CharacterCodingException

  public static int positionOf(java.nio.ByteBuffer, byte);
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method java/nio/ByteBuffer.hasArray:()Z
       4: ifeq          58
       7: aload_0
       8: invokevirtual #34                 // Method java/nio/ByteBuffer.array:()[B
      11: astore_2
      12: aload_0
      13: invokevirtual #35                 // Method java/nio/ByteBuffer.arrayOffset:()I
      16: istore_3
      17: aload_0
      18: invokevirtual #21                 // Method java/nio/ByteBuffer.limit:()I
      21: istore        4
      23: aload_0
      24: invokevirtual #36                 // Method java/nio/ByteBuffer.position:()I
      27: istore        5
      29: iload         5
      31: iload         4
      33: if_icmpge     55
      36: aload_2
      37: iload_3
      38: iload         5
      40: iadd
      41: baload
      42: iload_1
      43: if_icmpne     49
      46: iload         5
      48: ireturn
      49: iinc          5, 1
      52: goto          29
      55: goto          90
      58: aload_0
      59: invokevirtual #21                 // Method java/nio/ByteBuffer.limit:()I
      62: istore_2
      63: aload_0
      64: invokevirtual #36                 // Method java/nio/ByteBuffer.position:()I
      67: istore_3
      68: iload_3
      69: iload_2
      70: if_icmpge     90
      73: aload_0
      74: iload_3
      75: invokevirtual #37                 // Method java/nio/ByteBuffer.get:(I)B
      78: iload_1
      79: if_icmpne     84
      82: iload_3
      83: ireturn
      84: iinc          3, 1
      87: goto          68
      90: iconst_m1
      91: ireturn

  public static int indexOf(java.nio.ByteBuffer, byte);
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method java/nio/ByteBuffer.hasArray:()Z
       4: ifeq          71
       7: aload_0
       8: invokevirtual #34                 // Method java/nio/ByteBuffer.array:()[B
      11: astore_2
      12: aload_0
      13: invokevirtual #35                 // Method java/nio/ByteBuffer.arrayOffset:()I
      16: aload_0
      17: invokevirtual #36                 // Method java/nio/ByteBuffer.position:()I
      20: iadd
      21: istore_3
      22: aload_0
      23: invokevirtual #35                 // Method java/nio/ByteBuffer.arrayOffset:()I
      26: aload_0
      27: invokevirtual #21                 // Method java/nio/ByteBuffer.limit:()I
      30: iadd
      31: istore        4
      33: iconst_0
      34: istore        5
      36: iload         5
      38: iload         4
      40: if_icmpge     68
      43: iload         5
      45: iconst_m1
      46: if_icmple     68
      49: aload_2
      50: iload_3
      51: iload         5
      53: iadd
      54: baload
      55: iload_1
      56: if_icmpne     62
      59: iload         5
      61: ireturn
      62: iinc          5, 1
      65: goto          36
      68: goto          105
      71: aload_0
      72: invokevirtual #36                 // Method java/nio/ByteBuffer.position:()I
      75: istore_2
      76: iconst_0
      77: istore_3
      78: iload_3
      79: aload_0
      80: invokevirtual #21                 // Method java/nio/ByteBuffer.limit:()I
      83: if_icmpge     105
      86: aload_0
      87: iload_2
      88: iload_3
      89: iadd
      90: invokevirtual #37                 // Method java/nio/ByteBuffer.get:(I)B
      93: iload_1
      94: if_icmpne     99
      97: iload_3
      98: ireturn
      99: iinc          3, 1
     102: goto          78
     105: iconst_m1
     106: ireturn

  public static int indexOf(java.nio.ByteBuffer, int, byte);
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method java/nio/ByteBuffer.hasArray:()Z
       4: ifeq          75
       7: aload_0
       8: invokevirtual #34                 // Method java/nio/ByteBuffer.array:()[B
      11: astore_3
      12: aload_0
      13: invokevirtual #35                 // Method java/nio/ByteBuffer.arrayOffset:()I
      16: aload_0
      17: invokevirtual #36                 // Method java/nio/ByteBuffer.position:()I
      20: iadd
      21: iload_1
      22: iadd
      23: istore        4
      25: aload_0
      26: invokevirtual #35                 // Method java/nio/ByteBuffer.arrayOffset:()I
      29: aload_0
      30: invokevirtual #21                 // Method java/nio/ByteBuffer.limit:()I
      33: iadd
      34: istore        5
      36: iconst_0
      37: istore        6
      39: iload         6
      41: iload         5
      43: if_icmpge     72
      46: iload         6
      48: iconst_m1
      49: if_icmple     72
      52: aload_3
      53: iload         4
      55: iload         6
      57: iadd
      58: baload
      59: iload_2
      60: if_icmpne     66
      63: iload         6
      65: ireturn
      66: iinc          6, 1
      69: goto          39
      72: goto          113
      75: aload_0
      76: invokevirtual #36                 // Method java/nio/ByteBuffer.position:()I
      79: istore_3
      80: iconst_0
      81: istore        4
      83: iload         4
      85: aload_0
      86: invokevirtual #21                 // Method java/nio/ByteBuffer.limit:()I
      89: if_icmpge     113
      92: aload_0
      93: iload_3
      94: iload         4
      96: iadd
      97: invokevirtual #37                 // Method java/nio/ByteBuffer.get:(I)B
     100: iload_2
     101: if_icmpne     107
     104: iload         4
     106: ireturn
     107: iinc          4, 1
     110: goto          83
     113: iconst_m1
     114: ireturn

  public static java.nio.ByteBuffer slice(java.nio.ByteBuffer, int);
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method java/nio/ByteBuffer.duplicate:()Ljava/nio/ByteBuffer;
       4: astore_2
       5: aload_2
       6: iload_1
       7: invokevirtual #22                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      10: pop
      11: aload_2
      12: invokevirtual #19                 // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
      15: areturn

  public static java.nio.ByteBuffer slice(java.nio.ByteBuffer, int, int);
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method java/nio/ByteBuffer.duplicate:()Ljava/nio/ByteBuffer;
       4: astore_3
       5: aload_3
       6: iload_1
       7: invokevirtual #22                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      10: iload_1
      11: iload_2
      12: iadd
      13: invokevirtual #23                 // Method java/nio/Buffer.limit:(I)Ljava/nio/Buffer;
      16: pop
      17: aload_3
      18: invokevirtual #19                 // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
      21: areturn
}
