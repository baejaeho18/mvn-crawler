Compiled from "LibraryLoader.java"
public abstract class jnr.ffi.LibraryLoader<T> {
  private final java.util.List<java.lang.String> searchPaths;

  private final java.util.List<java.lang.String> libraryNames;

  private final java.util.List<jnr.ffi.mapper.SignatureTypeMapper> typeMappers;

  private final java.util.List<jnr.ffi.mapper.FunctionMapper> functionMappers;

  private final java.util.Map<jnr.ffi.LibraryOption, java.lang.Object> optionMap;

  private final jnr.ffi.mapper.TypeMapper$Builder typeMapperBuilder;

  private final jnr.ffi.mapper.FunctionMapper$Builder functionMapperBuilder;

  private final java.lang.Class<T> interfaceClass;

  private boolean failImmediately;

  public static <T> jnr.ffi.LibraryLoader<T> create(java.lang.Class<T>);
    Code:
       0: invokestatic  #2                  // Method jnr/ffi/provider/FFIProvider.getSystemProvider:()Ljnr/ffi/provider/FFIProvider;
       3: aload_0
       4: invokevirtual #3                  // Method jnr/ffi/provider/FFIProvider.createLibraryLoader:(Ljava/lang/Class;)Ljnr/ffi/LibraryLoader;
       7: areturn

  protected jnr.ffi.LibraryLoader(java.lang.Class<T>);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #5                  // class java/util/ArrayList
       8: dup
       9: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #7                  // Field searchPaths:Ljava/util/List;
      15: aload_0
      16: new           #5                  // class java/util/ArrayList
      19: dup
      20: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      23: putfield      #8                  // Field libraryNames:Ljava/util/List;
      26: aload_0
      27: new           #5                  // class java/util/ArrayList
      30: dup
      31: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      34: putfield      #9                  // Field typeMappers:Ljava/util/List;
      37: aload_0
      38: new           #5                  // class java/util/ArrayList
      41: dup
      42: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      45: putfield      #10                 // Field functionMappers:Ljava/util/List;
      48: aload_0
      49: new           #11                 // class java/util/EnumMap
      52: dup
      53: ldc           #12                 // class jnr/ffi/LibraryOption
      55: invokespecial #13                 // Method java/util/EnumMap."<init>":(Ljava/lang/Class;)V
      58: putfield      #14                 // Field optionMap:Ljava/util/Map;
      61: aload_0
      62: new           #15                 // class jnr/ffi/mapper/TypeMapper$Builder
      65: dup
      66: invokespecial #16                 // Method jnr/ffi/mapper/TypeMapper$Builder."<init>":()V
      69: putfield      #17                 // Field typeMapperBuilder:Ljnr/ffi/mapper/TypeMapper$Builder;
      72: aload_0
      73: new           #18                 // class jnr/ffi/mapper/FunctionMapper$Builder
      76: dup
      77: invokespecial #19                 // Method jnr/ffi/mapper/FunctionMapper$Builder."<init>":()V
      80: putfield      #20                 // Field functionMapperBuilder:Ljnr/ffi/mapper/FunctionMapper$Builder;
      83: aload_0
      84: iconst_0
      85: putfield      #21                 // Field failImmediately:Z
      88: aload_0
      89: aload_1
      90: putfield      #22                 // Field interfaceClass:Ljava/lang/Class;
      93: return

  public static boolean saveError(java.util.Map<jnr.ffi.LibraryOption, ?>, boolean, boolean);
    Code:
       0: aload_0
       1: getstatic     #23                 // Field jnr/ffi/LibraryOption.SaveError:Ljnr/ffi/LibraryOption;
       4: invokeinterface #24,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
       9: ifne          24
      12: aload_0
      13: getstatic     #25                 // Field jnr/ffi/LibraryOption.IgnoreError:Ljnr/ffi/LibraryOption;
      16: invokeinterface #24,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      21: ifne          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: istore_3
      30: iload_3
      31: ifeq          47
      34: iload_2
      35: ifeq          53
      38: iload_1
      39: ifne          53
      42: iconst_0
      43: istore_3
      44: goto          53
      47: iload_1
      48: ifeq          53
      51: iconst_1
      52: istore_3
      53: iload_3
      54: ireturn

  public jnr.ffi.LibraryLoader<T> library(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #8                  // Field libraryNames:Ljava/util/List;
       4: aload_1
       5: invokeinterface #26,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: areturn

  public jnr.ffi.LibraryLoader<T> search(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field searchPaths:Ljava/util/List;
       4: aload_1
       5: invokeinterface #26,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: areturn

  public jnr.ffi.LibraryLoader<T> option(jnr.ffi.LibraryOption, java.lang.Object);
    Code:
       0: getstatic     #27                 // Field jnr/ffi/LibraryLoader$2.$SwitchMap$jnr$ffi$LibraryOption:[I
       3: aload_1
       4: invokevirtual #28                 // Method jnr/ffi/LibraryOption.ordinal:()I
       7: iaload
       8: lookupswitch  { // 2
                     1: 36
                     2: 108
               default: 120
          }
      36: aload_2
      37: instanceof    #29                 // class jnr/ffi/mapper/SignatureTypeMapper
      40: ifeq          55
      43: aload_0
      44: aload_2
      45: checkcast     #29                 // class jnr/ffi/mapper/SignatureTypeMapper
      48: invokevirtual #30                 // Method mapper:(Ljnr/ffi/mapper/SignatureTypeMapper;)Ljnr/ffi/LibraryLoader;
      51: pop
      52: goto          132
      55: aload_2
      56: instanceof    #31                 // class jnr/ffi/mapper/TypeMapper
      59: ifeq          74
      62: aload_0
      63: aload_2
      64: checkcast     #31                 // class jnr/ffi/mapper/TypeMapper
      67: invokevirtual #32                 // Method mapper:(Ljnr/ffi/mapper/TypeMapper;)Ljnr/ffi/LibraryLoader;
      70: pop
      71: goto          132
      74: aload_2
      75: ifnull        132
      78: new           #33                 // class java/lang/IllegalArgumentException
      81: dup
      82: new           #34                 // class java/lang/StringBuilder
      85: dup
      86: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      89: ldc           #36                 // String invalid TypeMapper:
      91: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      94: aload_2
      95: invokevirtual #38                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      98: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     101: invokevirtual #40                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     104: invokespecial #41                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     107: athrow
     108: aload_0
     109: aload_2
     110: checkcast     #42                 // class jnr/ffi/mapper/FunctionMapper
     113: invokevirtual #43                 // Method mapper:(Ljnr/ffi/mapper/FunctionMapper;)Ljnr/ffi/LibraryLoader;
     116: pop
     117: goto          132
     120: aload_0
     121: getfield      #14                 // Field optionMap:Ljava/util/Map;
     124: aload_1
     125: aload_2
     126: invokeinterface #44,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     131: pop
     132: aload_0
     133: areturn

  public jnr.ffi.LibraryLoader<T> mapper(jnr.ffi.mapper.TypeMapper);
    Code:
       0: aload_0
       1: getfield      #9                  // Field typeMappers:Ljava/util/List;
       4: new           #45                 // class jnr/ffi/mapper/SignatureTypeMapperAdapter
       7: dup
       8: aload_1
       9: invokespecial #46                 // Method jnr/ffi/mapper/SignatureTypeMapperAdapter."<init>":(Ljnr/ffi/mapper/TypeMapper;)V
      12: invokeinterface #26,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      17: pop
      18: aload_0
      19: areturn

  public jnr.ffi.LibraryLoader<T> mapper(jnr.ffi.mapper.SignatureTypeMapper);
    Code:
       0: aload_0
       1: getfield      #9                  // Field typeMappers:Ljava/util/List;
       4: aload_1
       5: invokeinterface #26,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: areturn

  public <J> jnr.ffi.LibraryLoader<T> map(java.lang.Class<? extends J>, jnr.ffi.mapper.ToNativeConverter<? extends J, ?>);
    Code:
       0: aload_0
       1: getfield      #17                 // Field typeMapperBuilder:Ljnr/ffi/mapper/TypeMapper$Builder;
       4: aload_1
       5: aload_2
       6: invokevirtual #47                 // Method jnr/ffi/mapper/TypeMapper$Builder.map:(Ljava/lang/Class;Ljnr/ffi/mapper/ToNativeConverter;)Ljnr/ffi/mapper/TypeMapper$Builder;
       9: pop
      10: aload_0
      11: areturn

  public <J> jnr.ffi.LibraryLoader<T> map(java.lang.Class<? extends J>, jnr.ffi.mapper.FromNativeConverter<? extends J, ?>);
    Code:
       0: aload_0
       1: getfield      #17                 // Field typeMapperBuilder:Ljnr/ffi/mapper/TypeMapper$Builder;
       4: aload_1
       5: aload_2
       6: invokevirtual #48                 // Method jnr/ffi/mapper/TypeMapper$Builder.map:(Ljava/lang/Class;Ljnr/ffi/mapper/FromNativeConverter;)Ljnr/ffi/mapper/TypeMapper$Builder;
       9: pop
      10: aload_0
      11: areturn

  public <J> jnr.ffi.LibraryLoader<T> map(java.lang.Class<? extends J>, jnr.ffi.mapper.DataConverter<? extends J, ?>);
    Code:
       0: aload_0
       1: getfield      #17                 // Field typeMapperBuilder:Ljnr/ffi/mapper/TypeMapper$Builder;
       4: aload_1
       5: aload_2
       6: invokevirtual #49                 // Method jnr/ffi/mapper/TypeMapper$Builder.map:(Ljava/lang/Class;Ljnr/ffi/mapper/DataConverter;)Ljnr/ffi/mapper/TypeMapper$Builder;
       9: pop
      10: aload_0
      11: areturn

  public jnr.ffi.LibraryLoader<T> mapper(jnr.ffi.mapper.FunctionMapper);
    Code:
       0: aload_0
       1: getfield      #10                 // Field functionMappers:Ljava/util/List;
       4: aload_1
       5: invokeinterface #26,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: areturn

  public jnr.ffi.LibraryLoader<T> map(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #20                 // Field functionMapperBuilder:Ljnr/ffi/mapper/FunctionMapper$Builder;
       4: aload_1
       5: aload_2
       6: invokevirtual #50                 // Method jnr/ffi/mapper/FunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/ffi/mapper/FunctionMapper$Builder;
       9: pop
      10: aload_0
      11: areturn

  public jnr.ffi.LibraryLoader<T> convention(jnr.ffi.CallingConvention);
    Code:
       0: aload_0
       1: getfield      #14                 // Field optionMap:Ljava/util/Map;
       4: getstatic     #51                 // Field jnr/ffi/LibraryOption.CallingConvention:Ljnr/ffi/LibraryOption;
       7: aload_1
       8: invokeinterface #44,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: aload_0
      15: areturn

  public final jnr.ffi.LibraryLoader<T> stdcall();
    Code:
       0: aload_0
       1: getstatic     #52                 // Field jnr/ffi/CallingConvention.STDCALL:Ljnr/ffi/CallingConvention;
       4: invokevirtual #53                 // Method convention:(Ljnr/ffi/CallingConvention;)Ljnr/ffi/LibraryLoader;
       7: areturn

  public final jnr.ffi.LibraryLoader<T> failImmediately();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #21                 // Field failImmediately:Z
       5: aload_0
       6: areturn

  public T load(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #54                 // Method library:(Ljava/lang/String;)Ljnr/ffi/LibraryLoader;
       5: invokevirtual #55                 // Method load:()Ljava/lang/Object;
       8: areturn

  public T load();
    Code:
       0: aload_0
       1: getfield      #8                  // Field libraryNames:Ljava/util/List;
       4: invokeinterface #56,  1           // InterfaceMethod java/util/List.isEmpty:()Z
       9: ifeq          22
      12: new           #57                 // class java/lang/UnsatisfiedLinkError
      15: dup
      16: ldc           #58                 // String no library names specified
      18: invokespecial #59                 // Method java/lang/UnsatisfiedLinkError."<init>":(Ljava/lang/String;)V
      21: athrow
      22: aload_0
      23: getfield      #9                  // Field typeMappers:Ljava/util/List;
      26: iconst_0
      27: new           #45                 // class jnr/ffi/mapper/SignatureTypeMapperAdapter
      30: dup
      31: aload_0
      32: getfield      #17                 // Field typeMapperBuilder:Ljnr/ffi/mapper/TypeMapper$Builder;
      35: invokevirtual #60                 // Method jnr/ffi/mapper/TypeMapper$Builder.build:()Ljnr/ffi/mapper/TypeMapper;
      38: invokespecial #46                 // Method jnr/ffi/mapper/SignatureTypeMapperAdapter."<init>":(Ljnr/ffi/mapper/TypeMapper;)V
      41: invokeinterface #61,  3           // InterfaceMethod java/util/List.add:(ILjava/lang/Object;)V
      46: aload_0
      47: getfield      #14                 // Field optionMap:Ljava/util/Map;
      50: getstatic     #62                 // Field jnr/ffi/LibraryOption.TypeMapper:Ljnr/ffi/LibraryOption;
      53: aload_0
      54: getfield      #9                  // Field typeMappers:Ljava/util/List;
      57: invokeinterface #63,  1           // InterfaceMethod java/util/List.size:()I
      62: iconst_1
      63: if_icmple     80
      66: new           #64                 // class jnr/ffi/mapper/CompositeTypeMapper
      69: dup
      70: aload_0
      71: getfield      #9                  // Field typeMappers:Ljava/util/List;
      74: invokespecial #65                 // Method jnr/ffi/mapper/CompositeTypeMapper."<init>":(Ljava/util/Collection;)V
      77: goto          93
      80: aload_0
      81: getfield      #9                  // Field typeMappers:Ljava/util/List;
      84: iconst_0
      85: invokeinterface #66,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      90: checkcast     #29                 // class jnr/ffi/mapper/SignatureTypeMapper
      93: invokeinterface #44,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      98: pop
      99: aload_0
     100: getfield      #10                 // Field functionMappers:Ljava/util/List;
     103: iconst_0
     104: aload_0
     105: getfield      #20                 // Field functionMapperBuilder:Ljnr/ffi/mapper/FunctionMapper$Builder;
     108: invokevirtual #67                 // Method jnr/ffi/mapper/FunctionMapper$Builder.build:()Ljnr/ffi/mapper/FunctionMapper;
     111: invokeinterface #61,  3           // InterfaceMethod java/util/List.add:(ILjava/lang/Object;)V
     116: aload_0
     117: getfield      #14                 // Field optionMap:Ljava/util/Map;
     120: getstatic     #68                 // Field jnr/ffi/LibraryOption.FunctionMapper:Ljnr/ffi/LibraryOption;
     123: aload_0
     124: getfield      #10                 // Field functionMappers:Ljava/util/List;
     127: invokeinterface #63,  1           // InterfaceMethod java/util/List.size:()I
     132: iconst_1
     133: if_icmple     150
     136: new           #69                 // class jnr/ffi/mapper/CompositeFunctionMapper
     139: dup
     140: aload_0
     141: getfield      #10                 // Field functionMappers:Ljava/util/List;
     144: invokespecial #70                 // Method jnr/ffi/mapper/CompositeFunctionMapper."<init>":(Ljava/util/Collection;)V
     147: goto          163
     150: aload_0
     151: getfield      #10                 // Field functionMappers:Ljava/util/List;
     154: iconst_0
     155: invokeinterface #66,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     160: checkcast     #42                 // class jnr/ffi/mapper/FunctionMapper
     163: invokeinterface #44,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     168: pop
     169: aload_0
     170: aload_0
     171: getfield      #22                 // Field interfaceClass:Ljava/lang/Class;
     174: aload_0
     175: getfield      #8                  // Field libraryNames:Ljava/util/List;
     178: invokestatic  #71                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
     181: aload_0
     182: invokespecial #72                 // Method getSearchPaths:()Ljava/util/Collection;
     185: aload_0
     186: getfield      #14                 // Field optionMap:Ljava/util/Map;
     189: invokestatic  #73                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
     192: invokevirtual #74                 // Method loadLibrary:(Ljava/lang/Class;Ljava/util/Collection;Ljava/util/Collection;Ljava/util/Map;)Ljava/lang/Object;
     195: areturn
     196: astore_1
     197: aload_0
     198: getfield      #21                 // Field failImmediately:Z
     201: ifeq          206
     204: aload_1
     205: athrow
     206: aload_0
     207: aload_1
     208: invokespecial #76                 // Method createErrorProxy:(Ljava/lang/Throwable;)Ljava/lang/Object;
     211: areturn
     212: astore_1
     213: aload_1
     214: instanceof    #78                 // class java/lang/RuntimeException
     217: ifeq          227
     220: aload_1
     221: checkcast     #78                 // class java/lang/RuntimeException
     224: goto          235
     227: new           #78                 // class java/lang/RuntimeException
     230: dup
     231: aload_1
     232: invokespecial #79                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     235: astore_2
     236: aload_0
     237: getfield      #21                 // Field failImmediately:Z
     240: ifeq          245
     243: aload_2
     244: athrow
     245: aload_0
     246: aload_2
     247: invokespecial #76                 // Method createErrorProxy:(Ljava/lang/Throwable;)Ljava/lang/Object;
     250: areturn
    Exception table:
       from    to  target type
         169   195   196   Class java/lang/LinkageError
         169   195   212   Class java/lang/Exception

  private T createErrorProxy(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #22                 // Field interfaceClass:Ljava/lang/Class;
       4: aload_0
       5: getfield      #22                 // Field interfaceClass:Ljava/lang/Class;
       8: invokevirtual #80                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
      11: iconst_2
      12: anewarray     #81                 // class java/lang/Class
      15: dup
      16: iconst_0
      17: aload_0
      18: getfield      #22                 // Field interfaceClass:Ljava/lang/Class;
      21: aastore
      22: dup
      23: iconst_1
      24: ldc           #82                 // class jnr/ffi/provider/LoadedLibrary
      26: aastore
      27: new           #83                 // class jnr/ffi/LibraryLoader$1
      30: dup
      31: aload_0
      32: aload_1
      33: invokespecial #84                 // Method jnr/ffi/LibraryLoader$1."<init>":(Ljnr/ffi/LibraryLoader;Ljava/lang/Throwable;)V
      36: invokestatic  #85                 // Method java/lang/reflect/Proxy.newProxyInstance:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;
      39: invokevirtual #86                 // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      42: areturn

  private java.util.Collection<java.lang.String> getSearchPaths();
    Code:
       0: new           #5                  // class java/util/ArrayList
       3: dup
       4: aload_0
       5: getfield      #7                  // Field searchPaths:Ljava/util/List;
       8: invokespecial #87                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      11: astore_1
      12: aload_1
      13: invokestatic  #88                 // Method jnr/ffi/LibraryLoader$StaticDataHolder.access$000:()Ljava/util/List;
      16: invokeinterface #89,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      21: pop
      22: aload_1
      23: invokestatic  #71                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      26: areturn

  protected abstract T loadLibrary(java.lang.Class<T>, java.util.Collection<java.lang.String>, java.util.Collection<java.lang.String>, java.util.Map<jnr.ffi.LibraryOption, java.lang.Object>);

  private static java.util.List<java.lang.String> getPropertyPaths(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #90                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: ifnull        29
       9: aload_1
      10: getstatic     #91                 // Field java/io/File.pathSeparator:Ljava/lang/String;
      13: invokevirtual #92                 // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
      16: astore_2
      17: new           #5                  // class java/util/ArrayList
      20: dup
      21: aload_2
      22: invokestatic  #93                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      25: invokespecial #87                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      28: areturn
      29: invokestatic  #94                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      32: areturn

  static java.util.List access$100(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method getPropertyPaths:(Ljava/lang/String;)Ljava/util/List;
       4: areturn
}
