Compiled from "AbstractArrayMemoryIO.java"
public abstract class jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO {
  protected jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO getArrayIO(jnr.ffi.Runtime);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method jnr/ffi/Runtime.byteOrder:()Ljava/nio/ByteOrder;
       4: getstatic     #3                  // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
       7: invokevirtual #4                  // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      10: ifeq          32
      13: aload_0
      14: invokevirtual #5                  // Method jnr/ffi/Runtime.addressSize:()I
      17: bipush        8
      19: if_icmpne     28
      22: getstatic     #6                  // Field jnr/ffi/provider/AbstractArrayMemoryIO$BE64ArrayIO.INSTANCE:Ljnr/ffi/provider/AbstractArrayMemoryIO$ArrayIO;
      25: goto          31
      28: getstatic     #7                  // Field jnr/ffi/provider/AbstractArrayMemoryIO$BE32ArrayIO.INSTANCE:Ljnr/ffi/provider/AbstractArrayMemoryIO$ArrayIO;
      31: areturn
      32: aload_0
      33: invokevirtual #5                  // Method jnr/ffi/Runtime.addressSize:()I
      36: bipush        8
      38: if_icmpne     47
      41: getstatic     #8                  // Field jnr/ffi/provider/AbstractArrayMemoryIO$LE64ArrayIO.INSTANCE:Ljnr/ffi/provider/AbstractArrayMemoryIO$ArrayIO;
      44: goto          50
      47: getstatic     #9                  // Field jnr/ffi/provider/AbstractArrayMemoryIO$LE32ArrayIO.INSTANCE:Ljnr/ffi/provider/AbstractArrayMemoryIO$ArrayIO;
      50: areturn

  public abstract short getInt16(byte[], int);

  public abstract int getInt32(byte[], int);

  public abstract long getInt64(byte[], int);

  public abstract long getAddress(byte[], int);

  public abstract void putInt16(byte[], int, int);

  public abstract void putInt32(byte[], int, int);

  public abstract void putInt64(byte[], int, long);

  public abstract void putAddress(byte[], int, long);

  public final float getFloat32(byte[], int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #10                 // Method getInt32:([BI)I
       6: invokestatic  #11                 // Method java/lang/Float.intBitsToFloat:(I)F
       9: freturn

  public final void putFloat32(byte[], int, float);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: fload_3
       4: invokestatic  #12                 // Method java/lang/Float.floatToRawIntBits:(F)I
       7: invokevirtual #13                 // Method putInt32:([BII)V
      10: return

  public final double getFloat64(byte[], int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #14                 // Method getInt64:([BI)J
       6: invokestatic  #15                 // Method java/lang/Double.longBitsToDouble:(J)D
       9: dreturn

  public final void putFloat64(byte[], int, double);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: dload_3
       4: invokestatic  #16                 // Method java/lang/Double.doubleToRawLongBits:(D)J
       7: invokevirtual #17                 // Method putInt64:([BIJ)V
      10: return
}
