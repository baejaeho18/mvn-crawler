Compiled from "AbstractMemoryIO.java"
public abstract class jnr.ffi.provider.AbstractMemoryIO extends jnr.ffi.Pointer {
  protected static void checkBounds(long, long, long);
    Code:
       0: lload_2
       1: lload         4
       3: lor
       4: lload_2
       5: lload         4
       7: ladd
       8: lor
       9: lload_0
      10: lload_2
      11: lload         4
      13: ladd
      14: lsub
      15: lor
      16: lconst_0
      17: lcmp
      18: ifge          29
      21: new           #1                  // class java/lang/IndexOutOfBoundsException
      24: dup
      25: invokespecial #2                  // Method java/lang/IndexOutOfBoundsException."<init>":()V
      28: athrow
      29: return

  protected jnr.ffi.provider.AbstractMemoryIO(jnr.ffi.Runtime, long, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: iload         4
       5: invokespecial #3                  // Method jnr/ffi/Pointer."<init>":(Ljnr/ffi/Runtime;JZ)V
       8: return

  public int indexOf(long, byte);
    Code:
       0: aload_0
       1: lload_1
       2: iload_3
       3: ldc           #5                  // int 2147483647
       5: invokevirtual #6                  // Method indexOf:(JBI)I
       8: ireturn

  public long getAddress(long);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method getRuntime:()Ljnr/ffi/Runtime;
       4: invokevirtual #8                  // Method jnr/ffi/Runtime.addressSize:()I
       7: iconst_4
       8: if_icmpne     20
      11: aload_0
      12: lload_1
      13: invokevirtual #9                  // Method getInt:(J)I
      16: i2l
      17: goto          25
      20: aload_0
      21: lload_1
      22: invokevirtual #10                 // Method getLongLong:(J)J
      25: lreturn

  public void putAddress(long, long);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method getRuntime:()Ljnr/ffi/Runtime;
       4: invokevirtual #8                  // Method jnr/ffi/Runtime.addressSize:()I
       7: iconst_4
       8: if_icmpne     21
      11: aload_0
      12: lload_1
      13: lload_3
      14: l2i
      15: invokevirtual #11                 // Method putInt:(JI)V
      18: goto          27
      21: aload_0
      22: lload_1
      23: lload_3
      24: invokevirtual #12                 // Method putLongLong:(JJ)V
      27: return

  public void checkBounds(long, long);
    Code:
       0: return

  public void putAddress(long, jnr.ffi.Address);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method getRuntime:()Ljnr/ffi/Runtime;
       4: invokevirtual #8                  // Method jnr/ffi/Runtime.addressSize:()I
       7: iconst_4
       8: if_icmpne     23
      11: aload_0
      12: lload_1
      13: aload_3
      14: invokevirtual #13                 // Method jnr/ffi/Address.intValue:()I
      17: invokevirtual #11                 // Method putInt:(JI)V
      20: goto          32
      23: aload_0
      24: lload_1
      25: aload_3
      26: invokevirtual #14                 // Method jnr/ffi/Address.longValue:()J
      29: invokevirtual #12                 // Method putLongLong:(JJ)V
      32: return

  public final long getNativeLong(long);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method getRuntime:()Ljnr/ffi/Runtime;
       4: invokevirtual #15                 // Method jnr/ffi/Runtime.longSize:()I
       7: iconst_4
       8: if_icmpne     20
      11: aload_0
      12: lload_1
      13: invokevirtual #9                  // Method getInt:(J)I
      16: i2l
      17: goto          25
      20: aload_0
      21: lload_1
      22: invokevirtual #10                 // Method getLongLong:(J)J
      25: lreturn

  public void putNativeLong(long, long);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method getRuntime:()Ljnr/ffi/Runtime;
       4: invokevirtual #15                 // Method jnr/ffi/Runtime.longSize:()I
       7: iconst_4
       8: if_icmpne     21
      11: aload_0
      12: lload_1
      13: lload_3
      14: l2i
      15: invokevirtual #11                 // Method putInt:(JI)V
      18: goto          27
      21: aload_0
      22: lload_1
      23: lload_3
      24: invokevirtual #12                 // Method putLongLong:(JJ)V
      27: return

  public long getLong(long);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method getRuntime:()Ljnr/ffi/Runtime;
       4: invokevirtual #15                 // Method jnr/ffi/Runtime.longSize:()I
       7: iconst_4
       8: if_icmpne     20
      11: aload_0
      12: lload_1
      13: invokevirtual #9                  // Method getInt:(J)I
      16: i2l
      17: goto          25
      20: aload_0
      21: lload_1
      22: invokevirtual #10                 // Method getLongLong:(J)J
      25: lreturn

  public void putLong(long, long);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method getRuntime:()Ljnr/ffi/Runtime;
       4: invokevirtual #15                 // Method jnr/ffi/Runtime.longSize:()I
       7: iconst_4
       8: if_icmpne     21
      11: aload_0
      12: lload_1
      13: lload_3
      14: l2i
      15: invokevirtual #11                 // Method putInt:(JI)V
      18: goto          27
      21: aload_0
      22: lload_1
      23: lload_3
      24: invokevirtual #12                 // Method putLongLong:(JJ)V
      27: return

  public void putInt(jnr.ffi.Type, long, long);
    Code:
       0: getstatic     #16                 // Field jnr/ffi/provider/AbstractMemoryIO$1.$SwitchMap$jnr$ffi$NativeType:[I
       3: aload_1
       4: invokevirtual #17                 // Method jnr/ffi/Type.getNativeType:()Ljnr/ffi/NativeType;
       7: invokevirtual #18                 // Method jnr/ffi/NativeType.ordinal:()I
      10: iaload
      11: tableswitch   { // 1 to 10
                     1: 64
                     2: 64
                     3: 76
                     4: 76
                     5: 88
                     6: 88
                     7: 99
                     8: 99
                     9: 109
                    10: 109
               default: 119
          }
      64: aload_0
      65: lload_2
      66: lload         4
      68: l2i
      69: i2b
      70: invokevirtual #19                 // Method putByte:(JB)V
      73: goto          149
      76: aload_0
      77: lload_2
      78: lload         4
      80: l2i
      81: i2s
      82: invokevirtual #20                 // Method putShort:(JS)V
      85: goto          149
      88: aload_0
      89: lload_2
      90: lload         4
      92: l2i
      93: invokevirtual #11                 // Method putInt:(JI)V
      96: goto          149
      99: aload_0
     100: lload_2
     101: lload         4
     103: invokevirtual #21                 // Method putNativeLong:(JJ)V
     106: goto          149
     109: aload_0
     110: lload_2
     111: lload         4
     113: invokevirtual #12                 // Method putLongLong:(JJ)V
     116: goto          149
     119: new           #22                 // class java/lang/IllegalArgumentException
     122: dup
     123: new           #23                 // class java/lang/StringBuilder
     126: dup
     127: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
     130: ldc           #25                 // String unsupported integer type:
     132: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     135: aload_1
     136: invokevirtual #17                 // Method jnr/ffi/Type.getNativeType:()Ljnr/ffi/NativeType;
     139: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     142: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     145: invokespecial #29                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     148: athrow
     149: return

  public long getInt(jnr.ffi.Type, long);
    Code:
       0: getstatic     #16                 // Field jnr/ffi/provider/AbstractMemoryIO$1.$SwitchMap$jnr$ffi$NativeType:[I
       3: aload_1
       4: invokevirtual #17                 // Method jnr/ffi/Type.getNativeType:()Ljnr/ffi/NativeType;
       7: invokevirtual #18                 // Method jnr/ffi/NativeType.ordinal:()I
      10: iaload
      11: tableswitch   { // 1 to 10
                     1: 64
                     2: 64
                     3: 71
                     4: 71
                     5: 78
                     6: 78
                     7: 85
                     8: 85
                     9: 91
                    10: 91
               default: 97
          }
      64: aload_0
      65: lload_2
      66: invokevirtual #30                 // Method getByte:(J)B
      69: i2l
      70: lreturn
      71: aload_0
      72: lload_2
      73: invokevirtual #31                 // Method getShort:(J)S
      76: i2l
      77: lreturn
      78: aload_0
      79: lload_2
      80: invokevirtual #9                  // Method getInt:(J)I
      83: i2l
      84: lreturn
      85: aload_0
      86: lload_2
      87: invokevirtual #32                 // Method getNativeLong:(J)J
      90: lreturn
      91: aload_0
      92: lload_2
      93: invokevirtual #10                 // Method getLongLong:(J)J
      96: lreturn
      97: new           #22                 // class java/lang/IllegalArgumentException
     100: dup
     101: new           #23                 // class java/lang/StringBuilder
     104: dup
     105: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
     108: ldc           #25                 // String unsupported integer type:
     110: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     113: aload_1
     114: invokevirtual #17                 // Method jnr/ffi/Type.getNativeType:()Ljnr/ffi/NativeType;
     117: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     120: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     123: invokespecial #29                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     126: athrow

  public jnr.ffi.provider.AbstractMemoryIO slice(long);
    Code:
       0: new           #33                 // class jnr/ffi/provider/ShareMemoryIO
       3: dup
       4: aload_0
       5: lload_1
       6: invokespecial #34                 // Method jnr/ffi/provider/ShareMemoryIO."<init>":(Ljnr/ffi/Pointer;J)V
       9: areturn

  public jnr.ffi.provider.AbstractMemoryIO slice(long, long);
    Code:
       0: new           #35                 // class jnr/ffi/provider/BoundedMemoryIO
       3: dup
       4: aload_0
       5: lload_1
       6: lload_3
       7: invokespecial #36                 // Method jnr/ffi/provider/BoundedMemoryIO."<init>":(Ljnr/ffi/Pointer;JJ)V
      10: areturn

  public void transferTo(long, jnr.ffi.Pointer, long, long);
    Code:
       0: aload_3
       1: instanceof    #37                 // class jnr/ffi/provider/DelegatingMemoryIO
       4: ifeq          19
       7: aload_3
       8: checkcast     #37                 // class jnr/ffi/provider/DelegatingMemoryIO
      11: invokeinterface #38,  1           // InterfaceMethod jnr/ffi/provider/DelegatingMemoryIO.getDelegatedMemoryIO:()Ljnr/ffi/Pointer;
      16: goto          20
      19: aload_3
      20: astore        8
      22: aload         8
      24: lload         4
      26: lload         6
      28: invokevirtual #39                 // Method jnr/ffi/Pointer.checkBounds:(JJ)V
      31: aload         8
      33: instanceof    #40                 // class jnr/ffi/provider/AbstractArrayMemoryIO
      36: ifeq          71
      39: aload         8
      41: checkcast     #40                 // class jnr/ffi/provider/AbstractArrayMemoryIO
      44: astore        9
      46: aload_0
      47: lload_1
      48: aload         9
      50: invokevirtual #41                 // Method jnr/ffi/provider/AbstractArrayMemoryIO.array:()[B
      53: aload         9
      55: invokevirtual #42                 // Method jnr/ffi/provider/AbstractArrayMemoryIO.offset:()I
      58: lload         4
      60: l2i
      61: iadd
      62: lload         6
      64: l2i
      65: invokevirtual #43                 // Method get:(J[BII)V
      68: goto          171
      71: aload         8
      73: instanceof    #44                 // class jnr/ffi/provider/AbstractBufferMemoryIO
      76: ifeq          134
      79: aload         8
      81: checkcast     #44                 // class jnr/ffi/provider/AbstractBufferMemoryIO
      84: invokevirtual #45                 // Method jnr/ffi/provider/AbstractBufferMemoryIO.getByteBuffer:()Ljava/nio/ByteBuffer;
      87: invokevirtual #46                 // Method java/nio/ByteBuffer.hasArray:()Z
      90: ifeq          134
      93: aload         8
      95: checkcast     #44                 // class jnr/ffi/provider/AbstractBufferMemoryIO
      98: invokevirtual #45                 // Method jnr/ffi/provider/AbstractBufferMemoryIO.getByteBuffer:()Ljava/nio/ByteBuffer;
     101: astore        9
     103: aload_0
     104: lload_1
     105: aload         9
     107: invokevirtual #47                 // Method java/nio/ByteBuffer.array:()[B
     110: aload         9
     112: invokevirtual #48                 // Method java/nio/ByteBuffer.arrayOffset:()I
     115: aload         9
     117: invokevirtual #49                 // Method java/nio/ByteBuffer.position:()I
     120: iadd
     121: lload         4
     123: l2i
     124: iadd
     125: lload         6
     127: l2i
     128: invokevirtual #43                 // Method get:(J[BII)V
     131: goto          171
     134: lconst_0
     135: lstore        9
     137: lload         9
     139: lload         6
     141: lcmp
     142: ifge          171
     145: aload_3
     146: lload         4
     148: lload         9
     150: ladd
     151: aload_0
     152: lload_1
     153: lload         9
     155: ladd
     156: invokevirtual #30                 // Method getByte:(J)B
     159: invokevirtual #50                 // Method jnr/ffi/Pointer.putByte:(JB)V
     162: lload         9
     164: lconst_1
     165: ladd
     166: lstore        9
     168: goto          137
     171: return

  public void transferFrom(long, jnr.ffi.Pointer, long, long);
    Code:
       0: aload_3
       1: instanceof    #37                 // class jnr/ffi/provider/DelegatingMemoryIO
       4: ifeq          19
       7: aload_3
       8: checkcast     #37                 // class jnr/ffi/provider/DelegatingMemoryIO
      11: invokeinterface #38,  1           // InterfaceMethod jnr/ffi/provider/DelegatingMemoryIO.getDelegatedMemoryIO:()Ljnr/ffi/Pointer;
      16: goto          20
      19: aload_3
      20: astore        8
      22: aload         8
      24: lload         4
      26: lload         6
      28: invokevirtual #39                 // Method jnr/ffi/Pointer.checkBounds:(JJ)V
      31: aload         8
      33: instanceof    #40                 // class jnr/ffi/provider/AbstractArrayMemoryIO
      36: ifeq          71
      39: aload         8
      41: checkcast     #40                 // class jnr/ffi/provider/AbstractArrayMemoryIO
      44: astore        9
      46: aload_0
      47: lload_1
      48: aload         9
      50: invokevirtual #41                 // Method jnr/ffi/provider/AbstractArrayMemoryIO.array:()[B
      53: aload         9
      55: invokevirtual #42                 // Method jnr/ffi/provider/AbstractArrayMemoryIO.offset:()I
      58: lload         4
      60: l2i
      61: iadd
      62: lload         6
      64: l2i
      65: invokevirtual #51                 // Method put:(J[BII)V
      68: goto          171
      71: aload         8
      73: instanceof    #44                 // class jnr/ffi/provider/AbstractBufferMemoryIO
      76: ifeq          134
      79: aload         8
      81: checkcast     #44                 // class jnr/ffi/provider/AbstractBufferMemoryIO
      84: invokevirtual #45                 // Method jnr/ffi/provider/AbstractBufferMemoryIO.getByteBuffer:()Ljava/nio/ByteBuffer;
      87: invokevirtual #46                 // Method java/nio/ByteBuffer.hasArray:()Z
      90: ifeq          134
      93: aload         8
      95: checkcast     #44                 // class jnr/ffi/provider/AbstractBufferMemoryIO
      98: invokevirtual #45                 // Method jnr/ffi/provider/AbstractBufferMemoryIO.getByteBuffer:()Ljava/nio/ByteBuffer;
     101: astore        9
     103: aload_0
     104: lload_1
     105: aload         9
     107: invokevirtual #47                 // Method java/nio/ByteBuffer.array:()[B
     110: aload         9
     112: invokevirtual #48                 // Method java/nio/ByteBuffer.arrayOffset:()I
     115: aload         9
     117: invokevirtual #49                 // Method java/nio/ByteBuffer.position:()I
     120: iadd
     121: lload         4
     123: l2i
     124: iadd
     125: lload         6
     127: l2i
     128: invokevirtual #51                 // Method put:(J[BII)V
     131: goto          171
     134: lconst_0
     135: lstore        9
     137: lload         9
     139: lload         6
     141: lcmp
     142: ifge          171
     145: aload_0
     146: lload_1
     147: lload         9
     149: ladd
     150: aload_3
     151: lload         4
     153: lload         9
     155: ladd
     156: invokevirtual #52                 // Method jnr/ffi/Pointer.getByte:(J)B
     159: invokevirtual #19                 // Method putByte:(JB)V
     162: lload         9
     164: lconst_1
     165: ladd
     166: lstore        9
     168: goto          137
     171: return

  public jnr.ffi.Pointer slice(long, long);
    Code:
       0: aload_0
       1: lload_1
       2: lload_3
       3: invokevirtual #53                 // Method slice:(JJ)Ljnr/ffi/provider/AbstractMemoryIO;
       6: areturn

  public jnr.ffi.Pointer slice(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #54                 // Method slice:(J)Ljnr/ffi/provider/AbstractMemoryIO;
       5: areturn
}
