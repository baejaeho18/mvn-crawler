Compiled from "StructArrayParameterConverter.java"
public class jnr.ffi.provider.converters.StructArrayParameterConverter implements jnr.ffi.mapper.ToNativeConverter<jnr.ffi.Struct[], jnr.ffi.Pointer> {
  protected final jnr.ffi.Runtime runtime;

  protected final int parameterFlags;

  public static jnr.ffi.mapper.ToNativeConverter<jnr.ffi.Struct[], jnr.ffi.Pointer> getInstance(jnr.ffi.mapper.ToNativeContext, java.lang.Class);
    Code:
       0: aload_0
       1: invokeinterface #2,  1            // InterfaceMethod jnr/ffi/mapper/ToNativeContext.getAnnotations:()Ljava/util/Collection;
       6: invokestatic  #3                  // Method jnr/ffi/provider/ParameterFlags.parse:(Ljava/util/Collection;)I
       9: istore_2
      10: iload_2
      11: invokestatic  #4                  // Method jnr/ffi/provider/ParameterFlags.isOut:(I)Z
      14: ifne          34
      17: new           #5                  // class jnr/ffi/provider/converters/StructArrayParameterConverter
      20: dup
      21: aload_0
      22: invokeinterface #6,  1            // InterfaceMethod jnr/ffi/mapper/ToNativeContext.getRuntime:()Ljnr/ffi/Runtime;
      27: iload_2
      28: invokespecial #7                  // Method "<init>":(Ljnr/ffi/Runtime;I)V
      31: goto          54
      34: new           #8                  // class jnr/ffi/provider/converters/StructArrayParameterConverter$Out
      37: dup
      38: aload_0
      39: invokeinterface #6,  1            // InterfaceMethod jnr/ffi/mapper/ToNativeContext.getRuntime:()Ljnr/ffi/Runtime;
      44: aload_1
      45: ldc           #9                  // class jnr/ffi/Struct
      47: invokevirtual #10                 // Method java/lang/Class.asSubclass:(Ljava/lang/Class;)Ljava/lang/Class;
      50: iload_2
      51: invokespecial #11                 // Method jnr/ffi/provider/converters/StructArrayParameterConverter$Out."<init>":(Ljnr/ffi/Runtime;Ljava/lang/Class;I)V
      54: areturn

  jnr.ffi.provider.converters.StructArrayParameterConverter(jnr.ffi.Runtime, int);
    Code:
       0: aload_0
       1: invokespecial #12                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #13                 // Field runtime:Ljnr/ffi/Runtime;
       9: aload_0
      10: iload_2
      11: putfield      #14                 // Field parameterFlags:I
      14: return

  public java.lang.Class<jnr.ffi.Pointer> nativeType();
    Code:
       0: ldc           #15                 // class jnr/ffi/Pointer
       2: areturn

  public jnr.ffi.Pointer toNative(jnr.ffi.Struct[], jnr.ffi.mapper.ToNativeContext);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_1
       7: iconst_0
       8: aaload
       9: aload_0
      10: getfield      #14                 // Field parameterFlags:I
      13: invokestatic  #16                 // Method jnr/ffi/Struct.getMemory:(Ljnr/ffi/Struct;I)Ljnr/ffi/Pointer;
      16: astore_3
      17: aload_3
      18: instanceof    #17                 // class jnr/ffi/provider/DelegatingMemoryIO
      21: ifne          34
      24: new           #18                 // class java/lang/RuntimeException
      27: dup
      28: ldc           #19                 // String Struct array must be backed by contiguous array
      30: invokespecial #20                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_3
      35: checkcast     #17                 // class jnr/ffi/provider/DelegatingMemoryIO
      38: invokeinterface #21,  1           // InterfaceMethod jnr/ffi/provider/DelegatingMemoryIO.getDelegatedMemoryIO:()Ljnr/ffi/Pointer;
      43: areturn

  private static int align(int, int);
    Code:
       0: iload_0
       1: iload_1
       2: iadd
       3: iconst_1
       4: isub
       5: iload_1
       6: iconst_1
       7: isub
       8: iconst_m1
       9: ixor
      10: iand
      11: ireturn

  public java.lang.Object toNative(java.lang.Object, jnr.ffi.mapper.ToNativeContext);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #22                 // class "[Ljnr/ffi/Struct;"
       5: aload_2
       6: invokevirtual #23                 // Method toNative:([Ljnr/ffi/Struct;Ljnr/ffi/mapper/ToNativeContext;)Ljnr/ffi/Pointer;
       9: areturn

  static int access$000(int, int);
    Code:
       0: iload_0
       1: iload_1
       2: invokestatic  #1                  // Method align:(II)I
       5: ireturn
}
