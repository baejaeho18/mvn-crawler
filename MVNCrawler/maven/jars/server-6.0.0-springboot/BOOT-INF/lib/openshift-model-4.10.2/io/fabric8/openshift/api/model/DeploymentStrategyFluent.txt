Compiled from "DeploymentStrategyFluent.java"
public interface io.fabric8.openshift.api.model.DeploymentStrategyFluent<A extends io.fabric8.openshift.api.model.DeploymentStrategyFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Long getActiveDeadlineSeconds();

  public abstract A withActiveDeadlineSeconds(java.lang.Long);

  public abstract java.lang.Boolean hasActiveDeadlineSeconds();

  public abstract A addToAnnotations(java.lang.String, java.lang.String);

  public abstract A addToAnnotations(java.util.Map<java.lang.String, java.lang.String>);

  public abstract A removeFromAnnotations(java.lang.String);

  public abstract A removeFromAnnotations(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.Map<java.lang.String, java.lang.String> getAnnotations();

  public abstract A withAnnotations(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.Boolean hasAnnotations();

  public abstract io.fabric8.openshift.api.model.CustomDeploymentStrategyParams getCustomParams();

  public abstract io.fabric8.openshift.api.model.CustomDeploymentStrategyParams buildCustomParams();

  public abstract A withCustomParams(io.fabric8.openshift.api.model.CustomDeploymentStrategyParams);

  public abstract java.lang.Boolean hasCustomParams();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$CustomParamsNested<A> withNewCustomParams();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$CustomParamsNested<A> withNewCustomParamsLike(io.fabric8.openshift.api.model.CustomDeploymentStrategyParams);

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$CustomParamsNested<A> editCustomParams();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$CustomParamsNested<A> editOrNewCustomParams();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$CustomParamsNested<A> editOrNewCustomParamsLike(io.fabric8.openshift.api.model.CustomDeploymentStrategyParams);

  public abstract A addToLabels(java.lang.String, java.lang.String);

  public abstract A addToLabels(java.util.Map<java.lang.String, java.lang.String>);

  public abstract A removeFromLabels(java.lang.String);

  public abstract A removeFromLabels(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.Map<java.lang.String, java.lang.String> getLabels();

  public abstract A withLabels(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.Boolean hasLabels();

  public abstract io.fabric8.openshift.api.model.RecreateDeploymentStrategyParams getRecreateParams();

  public abstract io.fabric8.openshift.api.model.RecreateDeploymentStrategyParams buildRecreateParams();

  public abstract A withRecreateParams(io.fabric8.openshift.api.model.RecreateDeploymentStrategyParams);

  public abstract java.lang.Boolean hasRecreateParams();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$RecreateParamsNested<A> withNewRecreateParams();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$RecreateParamsNested<A> withNewRecreateParamsLike(io.fabric8.openshift.api.model.RecreateDeploymentStrategyParams);

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$RecreateParamsNested<A> editRecreateParams();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$RecreateParamsNested<A> editOrNewRecreateParams();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$RecreateParamsNested<A> editOrNewRecreateParamsLike(io.fabric8.openshift.api.model.RecreateDeploymentStrategyParams);

  public abstract io.fabric8.kubernetes.api.model.ResourceRequirements getResources();

  public abstract io.fabric8.kubernetes.api.model.ResourceRequirements buildResources();

  public abstract A withResources(io.fabric8.kubernetes.api.model.ResourceRequirements);

  public abstract java.lang.Boolean hasResources();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$ResourcesNested<A> withNewResources();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$ResourcesNested<A> withNewResourcesLike(io.fabric8.kubernetes.api.model.ResourceRequirements);

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$ResourcesNested<A> editResources();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$ResourcesNested<A> editOrNewResources();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$ResourcesNested<A> editOrNewResourcesLike(io.fabric8.kubernetes.api.model.ResourceRequirements);

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParams getRollingParams();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParams buildRollingParams();

  public abstract A withRollingParams(io.fabric8.openshift.api.model.RollingDeploymentStrategyParams);

  public abstract java.lang.Boolean hasRollingParams();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$RollingParamsNested<A> withNewRollingParams();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$RollingParamsNested<A> withNewRollingParamsLike(io.fabric8.openshift.api.model.RollingDeploymentStrategyParams);

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$RollingParamsNested<A> editRollingParams();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$RollingParamsNested<A> editOrNewRollingParams();

  public abstract io.fabric8.openshift.api.model.DeploymentStrategyFluent$RollingParamsNested<A> editOrNewRollingParamsLike(io.fabric8.openshift.api.model.RollingDeploymentStrategyParams);

  public abstract java.lang.String getType();

  public abstract A withType(java.lang.String);

  public abstract java.lang.Boolean hasType();

  public abstract A withNewType(java.lang.String);

  public abstract A withNewType(java.lang.StringBuilder);

  public abstract A withNewType(java.lang.StringBuffer);
}
