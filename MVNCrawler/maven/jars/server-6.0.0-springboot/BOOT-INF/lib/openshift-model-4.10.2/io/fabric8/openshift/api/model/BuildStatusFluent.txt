Compiled from "BuildStatusFluent.java"
public interface io.fabric8.openshift.api.model.BuildStatusFluent<A extends io.fabric8.openshift.api.model.BuildStatusFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Boolean isCancelled();

  public abstract A withCancelled(java.lang.Boolean);

  public abstract java.lang.Boolean hasCancelled();

  public abstract A withNewCancelled(java.lang.String);

  public abstract A withNewCancelled(boolean);

  public abstract java.lang.String getCompletionTimestamp();

  public abstract A withCompletionTimestamp(java.lang.String);

  public abstract java.lang.Boolean hasCompletionTimestamp();

  public abstract A withNewCompletionTimestamp(java.lang.String);

  public abstract A withNewCompletionTimestamp(java.lang.StringBuilder);

  public abstract A withNewCompletionTimestamp(java.lang.StringBuffer);

  public abstract A addToConditions(int, io.fabric8.openshift.api.model.BuildCondition);

  public abstract A setToConditions(int, io.fabric8.openshift.api.model.BuildCondition);

  public abstract A addToConditions(io.fabric8.openshift.api.model.BuildCondition...);

  public abstract A addAllToConditions(java.util.Collection<io.fabric8.openshift.api.model.BuildCondition>);

  public abstract A removeFromConditions(io.fabric8.openshift.api.model.BuildCondition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.fabric8.openshift.api.model.BuildCondition>);

  public abstract A removeMatchingFromConditions(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.BuildConditionBuilder>);

  public abstract java.util.List<io.fabric8.openshift.api.model.BuildCondition> getConditions();

  public abstract java.util.List<io.fabric8.openshift.api.model.BuildCondition> buildConditions();

  public abstract io.fabric8.openshift.api.model.BuildCondition buildCondition(int);

  public abstract io.fabric8.openshift.api.model.BuildCondition buildFirstCondition();

  public abstract io.fabric8.openshift.api.model.BuildCondition buildLastCondition();

  public abstract io.fabric8.openshift.api.model.BuildCondition buildMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.BuildConditionBuilder>);

  public abstract java.lang.Boolean hasMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.BuildConditionBuilder>);

  public abstract A withConditions(java.util.List<io.fabric8.openshift.api.model.BuildCondition>);

  public abstract A withConditions(io.fabric8.openshift.api.model.BuildCondition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$ConditionsNested<A> addNewCondition();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$ConditionsNested<A> addNewConditionLike(io.fabric8.openshift.api.model.BuildCondition);

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$ConditionsNested<A> setNewConditionLike(int, io.fabric8.openshift.api.model.BuildCondition);

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$ConditionsNested<A> editCondition(int);

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$ConditionsNested<A> editFirstCondition();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$ConditionsNested<A> editLastCondition();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$ConditionsNested<A> editMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.BuildConditionBuilder>);

  public abstract io.fabric8.kubernetes.api.model.ObjectReference getConfig();

  public abstract io.fabric8.kubernetes.api.model.ObjectReference buildConfig();

  public abstract A withConfig(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract java.lang.Boolean hasConfig();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$ConfigNested<A> withNewConfig();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$ConfigNested<A> withNewConfigLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$ConfigNested<A> editConfig();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$ConfigNested<A> editOrNewConfig();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$ConfigNested<A> editOrNewConfigLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract java.lang.Long getDuration();

  public abstract A withDuration(java.lang.Long);

  public abstract java.lang.Boolean hasDuration();

  public abstract java.lang.String getLogSnippet();

  public abstract A withLogSnippet(java.lang.String);

  public abstract java.lang.Boolean hasLogSnippet();

  public abstract A withNewLogSnippet(java.lang.String);

  public abstract A withNewLogSnippet(java.lang.StringBuilder);

  public abstract A withNewLogSnippet(java.lang.StringBuffer);

  public abstract java.lang.String getMessage();

  public abstract A withMessage(java.lang.String);

  public abstract java.lang.Boolean hasMessage();

  public abstract A withNewMessage(java.lang.String);

  public abstract A withNewMessage(java.lang.StringBuilder);

  public abstract A withNewMessage(java.lang.StringBuffer);

  public abstract io.fabric8.openshift.api.model.BuildStatusOutput getOutput();

  public abstract io.fabric8.openshift.api.model.BuildStatusOutput buildOutput();

  public abstract A withOutput(io.fabric8.openshift.api.model.BuildStatusOutput);

  public abstract java.lang.Boolean hasOutput();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$OutputNested<A> withNewOutput();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$OutputNested<A> withNewOutputLike(io.fabric8.openshift.api.model.BuildStatusOutput);

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$OutputNested<A> editOutput();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$OutputNested<A> editOrNewOutput();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$OutputNested<A> editOrNewOutputLike(io.fabric8.openshift.api.model.BuildStatusOutput);

  public abstract java.lang.String getOutputDockerImageReference();

  public abstract A withOutputDockerImageReference(java.lang.String);

  public abstract java.lang.Boolean hasOutputDockerImageReference();

  public abstract A withNewOutputDockerImageReference(java.lang.String);

  public abstract A withNewOutputDockerImageReference(java.lang.StringBuilder);

  public abstract A withNewOutputDockerImageReference(java.lang.StringBuffer);

  public abstract java.lang.String getPhase();

  public abstract A withPhase(java.lang.String);

  public abstract java.lang.Boolean hasPhase();

  public abstract A withNewPhase(java.lang.String);

  public abstract A withNewPhase(java.lang.StringBuilder);

  public abstract A withNewPhase(java.lang.StringBuffer);

  public abstract java.lang.String getReason();

  public abstract A withReason(java.lang.String);

  public abstract java.lang.Boolean hasReason();

  public abstract A withNewReason(java.lang.String);

  public abstract A withNewReason(java.lang.StringBuilder);

  public abstract A withNewReason(java.lang.StringBuffer);

  public abstract A addToStages(int, io.fabric8.openshift.api.model.StageInfo);

  public abstract A setToStages(int, io.fabric8.openshift.api.model.StageInfo);

  public abstract A addToStages(io.fabric8.openshift.api.model.StageInfo...);

  public abstract A addAllToStages(java.util.Collection<io.fabric8.openshift.api.model.StageInfo>);

  public abstract A removeFromStages(io.fabric8.openshift.api.model.StageInfo...);

  public abstract A removeAllFromStages(java.util.Collection<io.fabric8.openshift.api.model.StageInfo>);

  public abstract A removeMatchingFromStages(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.StageInfoBuilder>);

  public abstract java.util.List<io.fabric8.openshift.api.model.StageInfo> getStages();

  public abstract java.util.List<io.fabric8.openshift.api.model.StageInfo> buildStages();

  public abstract io.fabric8.openshift.api.model.StageInfo buildStage(int);

  public abstract io.fabric8.openshift.api.model.StageInfo buildFirstStage();

  public abstract io.fabric8.openshift.api.model.StageInfo buildLastStage();

  public abstract io.fabric8.openshift.api.model.StageInfo buildMatchingStage(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.StageInfoBuilder>);

  public abstract java.lang.Boolean hasMatchingStage(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.StageInfoBuilder>);

  public abstract A withStages(java.util.List<io.fabric8.openshift.api.model.StageInfo>);

  public abstract A withStages(io.fabric8.openshift.api.model.StageInfo...);

  public abstract java.lang.Boolean hasStages();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$StagesNested<A> addNewStage();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$StagesNested<A> addNewStageLike(io.fabric8.openshift.api.model.StageInfo);

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$StagesNested<A> setNewStageLike(int, io.fabric8.openshift.api.model.StageInfo);

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$StagesNested<A> editStage(int);

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$StagesNested<A> editFirstStage();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$StagesNested<A> editLastStage();

  public abstract io.fabric8.openshift.api.model.BuildStatusFluent$StagesNested<A> editMatchingStage(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.StageInfoBuilder>);

  public abstract java.lang.String getStartTimestamp();

  public abstract A withStartTimestamp(java.lang.String);

  public abstract java.lang.Boolean hasStartTimestamp();

  public abstract A withNewStartTimestamp(java.lang.String);

  public abstract A withNewStartTimestamp(java.lang.StringBuilder);

  public abstract A withNewStartTimestamp(java.lang.StringBuffer);
}
