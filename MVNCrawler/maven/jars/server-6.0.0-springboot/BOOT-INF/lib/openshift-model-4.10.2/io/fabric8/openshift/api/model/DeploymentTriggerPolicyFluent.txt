Compiled from "DeploymentTriggerPolicyFluent.java"
public interface io.fabric8.openshift.api.model.DeploymentTriggerPolicyFluent<A extends io.fabric8.openshift.api.model.DeploymentTriggerPolicyFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract io.fabric8.openshift.api.model.DeploymentTriggerImageChangeParams getImageChangeParams();

  public abstract io.fabric8.openshift.api.model.DeploymentTriggerImageChangeParams buildImageChangeParams();

  public abstract A withImageChangeParams(io.fabric8.openshift.api.model.DeploymentTriggerImageChangeParams);

  public abstract java.lang.Boolean hasImageChangeParams();

  public abstract io.fabric8.openshift.api.model.DeploymentTriggerPolicyFluent$ImageChangeParamsNested<A> withNewImageChangeParams();

  public abstract io.fabric8.openshift.api.model.DeploymentTriggerPolicyFluent$ImageChangeParamsNested<A> withNewImageChangeParamsLike(io.fabric8.openshift.api.model.DeploymentTriggerImageChangeParams);

  public abstract io.fabric8.openshift.api.model.DeploymentTriggerPolicyFluent$ImageChangeParamsNested<A> editImageChangeParams();

  public abstract io.fabric8.openshift.api.model.DeploymentTriggerPolicyFluent$ImageChangeParamsNested<A> editOrNewImageChangeParams();

  public abstract io.fabric8.openshift.api.model.DeploymentTriggerPolicyFluent$ImageChangeParamsNested<A> editOrNewImageChangeParamsLike(io.fabric8.openshift.api.model.DeploymentTriggerImageChangeParams);

  public abstract java.lang.String getType();

  public abstract A withType(java.lang.String);

  public abstract java.lang.Boolean hasType();

  public abstract A withNewType(java.lang.String);

  public abstract A withNewType(java.lang.StringBuilder);

  public abstract A withNewType(java.lang.StringBuffer);
}
