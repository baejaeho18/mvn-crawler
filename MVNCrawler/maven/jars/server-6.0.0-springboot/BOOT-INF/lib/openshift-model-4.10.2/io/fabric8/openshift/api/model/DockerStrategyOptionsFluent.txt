Compiled from "DockerStrategyOptionsFluent.java"
public interface io.fabric8.openshift.api.model.DockerStrategyOptionsFluent<A extends io.fabric8.openshift.api.model.DockerStrategyOptionsFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToBuildArgs(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A setToBuildArgs(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A addToBuildArgs(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A addAllToBuildArgs(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A removeFromBuildArgs(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A removeAllFromBuildArgs(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.EnvVar> getBuildArgs();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getBuildArg(int);

  public abstract io.fabric8.kubernetes.api.model.EnvVar getFirstBuildArg();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getLastBuildArg();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getMatchingBuildArg(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.lang.Boolean hasMatchingBuildArg(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withBuildArgs(java.util.List<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withBuildArgs(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract java.lang.Boolean hasBuildArgs();

  public abstract java.lang.Boolean isNoCache();

  public abstract A withNoCache(java.lang.Boolean);

  public abstract java.lang.Boolean hasNoCache();

  public abstract A withNewNoCache(java.lang.String);

  public abstract A withNewNoCache(boolean);
}
