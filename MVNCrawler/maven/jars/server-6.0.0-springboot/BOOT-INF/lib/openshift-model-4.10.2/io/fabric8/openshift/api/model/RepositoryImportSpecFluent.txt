Compiled from "RepositoryImportSpecFluent.java"
public interface io.fabric8.openshift.api.model.RepositoryImportSpecFluent<A extends io.fabric8.openshift.api.model.RepositoryImportSpecFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract io.fabric8.kubernetes.api.model.ObjectReference getFrom();

  public abstract io.fabric8.kubernetes.api.model.ObjectReference buildFrom();

  public abstract A withFrom(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract java.lang.Boolean hasFrom();

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$FromNested<A> withNewFrom();

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$FromNested<A> withNewFromLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$FromNested<A> editFrom();

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$FromNested<A> editOrNewFrom();

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$FromNested<A> editOrNewFromLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract io.fabric8.openshift.api.model.TagImportPolicy getImportPolicy();

  public abstract io.fabric8.openshift.api.model.TagImportPolicy buildImportPolicy();

  public abstract A withImportPolicy(io.fabric8.openshift.api.model.TagImportPolicy);

  public abstract java.lang.Boolean hasImportPolicy();

  public abstract A withNewImportPolicy(java.lang.Boolean, java.lang.Boolean);

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$ImportPolicyNested<A> withNewImportPolicy();

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$ImportPolicyNested<A> withNewImportPolicyLike(io.fabric8.openshift.api.model.TagImportPolicy);

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$ImportPolicyNested<A> editImportPolicy();

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$ImportPolicyNested<A> editOrNewImportPolicy();

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$ImportPolicyNested<A> editOrNewImportPolicyLike(io.fabric8.openshift.api.model.TagImportPolicy);

  public abstract java.lang.Boolean isIncludeManifest();

  public abstract A withIncludeManifest(java.lang.Boolean);

  public abstract java.lang.Boolean hasIncludeManifest();

  public abstract A withNewIncludeManifest(java.lang.String);

  public abstract A withNewIncludeManifest(boolean);

  public abstract io.fabric8.openshift.api.model.TagReferencePolicy getReferencePolicy();

  public abstract io.fabric8.openshift.api.model.TagReferencePolicy buildReferencePolicy();

  public abstract A withReferencePolicy(io.fabric8.openshift.api.model.TagReferencePolicy);

  public abstract java.lang.Boolean hasReferencePolicy();

  public abstract A withNewReferencePolicy(java.lang.String);

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$ReferencePolicyNested<A> withNewReferencePolicy();

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$ReferencePolicyNested<A> withNewReferencePolicyLike(io.fabric8.openshift.api.model.TagReferencePolicy);

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$ReferencePolicyNested<A> editReferencePolicy();

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$ReferencePolicyNested<A> editOrNewReferencePolicy();

  public abstract io.fabric8.openshift.api.model.RepositoryImportSpecFluent$ReferencePolicyNested<A> editOrNewReferencePolicyLike(io.fabric8.openshift.api.model.TagReferencePolicy);
}
