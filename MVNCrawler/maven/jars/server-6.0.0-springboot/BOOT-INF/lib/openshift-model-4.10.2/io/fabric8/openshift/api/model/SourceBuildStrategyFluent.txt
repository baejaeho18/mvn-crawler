Compiled from "SourceBuildStrategyFluent.java"
public interface io.fabric8.openshift.api.model.SourceBuildStrategyFluent<A extends io.fabric8.openshift.api.model.SourceBuildStrategyFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToEnv(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A setToEnv(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A addToEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A addAllToEnv(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A removeFromEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A removeAllFromEnv(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.EnvVar> getEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getEnv(int);

  public abstract io.fabric8.kubernetes.api.model.EnvVar getFirstEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getLastEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getMatchingEnv(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.lang.Boolean hasMatchingEnv(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(java.util.List<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract java.lang.Boolean hasEnv();

  public abstract java.lang.Boolean isForcePull();

  public abstract A withForcePull(java.lang.Boolean);

  public abstract java.lang.Boolean hasForcePull();

  public abstract A withNewForcePull(java.lang.String);

  public abstract A withNewForcePull(boolean);

  public abstract io.fabric8.kubernetes.api.model.ObjectReference getFrom();

  public abstract io.fabric8.kubernetes.api.model.ObjectReference buildFrom();

  public abstract A withFrom(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract java.lang.Boolean hasFrom();

  public abstract io.fabric8.openshift.api.model.SourceBuildStrategyFluent$FromNested<A> withNewFrom();

  public abstract io.fabric8.openshift.api.model.SourceBuildStrategyFluent$FromNested<A> withNewFromLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract io.fabric8.openshift.api.model.SourceBuildStrategyFluent$FromNested<A> editFrom();

  public abstract io.fabric8.openshift.api.model.SourceBuildStrategyFluent$FromNested<A> editOrNewFrom();

  public abstract io.fabric8.openshift.api.model.SourceBuildStrategyFluent$FromNested<A> editOrNewFromLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract java.lang.Boolean isIncremental();

  public abstract A withIncremental(java.lang.Boolean);

  public abstract java.lang.Boolean hasIncremental();

  public abstract A withNewIncremental(java.lang.String);

  public abstract A withNewIncremental(boolean);

  public abstract io.fabric8.kubernetes.api.model.LocalObjectReference getPullSecret();

  public abstract io.fabric8.kubernetes.api.model.LocalObjectReference buildPullSecret();

  public abstract A withPullSecret(io.fabric8.kubernetes.api.model.LocalObjectReference);

  public abstract java.lang.Boolean hasPullSecret();

  public abstract A withNewPullSecret(java.lang.String);

  public abstract io.fabric8.openshift.api.model.SourceBuildStrategyFluent$PullSecretNested<A> withNewPullSecret();

  public abstract io.fabric8.openshift.api.model.SourceBuildStrategyFluent$PullSecretNested<A> withNewPullSecretLike(io.fabric8.kubernetes.api.model.LocalObjectReference);

  public abstract io.fabric8.openshift.api.model.SourceBuildStrategyFluent$PullSecretNested<A> editPullSecret();

  public abstract io.fabric8.openshift.api.model.SourceBuildStrategyFluent$PullSecretNested<A> editOrNewPullSecret();

  public abstract io.fabric8.openshift.api.model.SourceBuildStrategyFluent$PullSecretNested<A> editOrNewPullSecretLike(io.fabric8.kubernetes.api.model.LocalObjectReference);

  public abstract java.lang.String getScripts();

  public abstract A withScripts(java.lang.String);

  public abstract java.lang.Boolean hasScripts();

  public abstract A withNewScripts(java.lang.String);

  public abstract A withNewScripts(java.lang.StringBuilder);

  public abstract A withNewScripts(java.lang.StringBuffer);
}
