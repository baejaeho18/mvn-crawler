Compiled from "ExecNewPodHookFluent.java"
public interface io.fabric8.openshift.api.model.ExecNewPodHookFluent<A extends io.fabric8.openshift.api.model.ExecNewPodHookFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToCommand(int, java.lang.String);

  public abstract A setToCommand(int, java.lang.String);

  public abstract A addToCommand(java.lang.String...);

  public abstract A addAllToCommand(java.util.Collection<java.lang.String>);

  public abstract A removeFromCommand(java.lang.String...);

  public abstract A removeAllFromCommand(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getCommand();

  public abstract java.lang.String getCommand(int);

  public abstract java.lang.String getFirstCommand();

  public abstract java.lang.String getLastCommand();

  public abstract java.lang.String getMatchingCommand(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingCommand(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withCommand(java.util.List<java.lang.String>);

  public abstract A withCommand(java.lang.String...);

  public abstract java.lang.Boolean hasCommand();

  public abstract A addNewCommand(java.lang.String);

  public abstract A addNewCommand(java.lang.StringBuilder);

  public abstract A addNewCommand(java.lang.StringBuffer);

  public abstract java.lang.String getContainerName();

  public abstract A withContainerName(java.lang.String);

  public abstract java.lang.Boolean hasContainerName();

  public abstract A withNewContainerName(java.lang.String);

  public abstract A withNewContainerName(java.lang.StringBuilder);

  public abstract A withNewContainerName(java.lang.StringBuffer);

  public abstract A addToEnv(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A setToEnv(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A addToEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A addAllToEnv(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A removeFromEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A removeAllFromEnv(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.EnvVar> getEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getEnv(int);

  public abstract io.fabric8.kubernetes.api.model.EnvVar getFirstEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getLastEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getMatchingEnv(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.lang.Boolean hasMatchingEnv(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(java.util.List<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract java.lang.Boolean hasEnv();

  public abstract A addToVolumes(int, java.lang.String);

  public abstract A setToVolumes(int, java.lang.String);

  public abstract A addToVolumes(java.lang.String...);

  public abstract A addAllToVolumes(java.util.Collection<java.lang.String>);

  public abstract A removeFromVolumes(java.lang.String...);

  public abstract A removeAllFromVolumes(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getVolumes();

  public abstract java.lang.String getVolume(int);

  public abstract java.lang.String getFirstVolume();

  public abstract java.lang.String getLastVolume();

  public abstract java.lang.String getMatchingVolume(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingVolume(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withVolumes(java.util.List<java.lang.String>);

  public abstract A withVolumes(java.lang.String...);

  public abstract java.lang.Boolean hasVolumes();

  public abstract A addNewVolume(java.lang.String);

  public abstract A addNewVolume(java.lang.StringBuilder);

  public abstract A addNewVolume(java.lang.StringBuffer);
}
