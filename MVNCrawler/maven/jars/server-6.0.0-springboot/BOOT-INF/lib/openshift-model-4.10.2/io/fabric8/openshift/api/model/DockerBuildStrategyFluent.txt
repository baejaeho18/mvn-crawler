Compiled from "DockerBuildStrategyFluent.java"
public interface io.fabric8.openshift.api.model.DockerBuildStrategyFluent<A extends io.fabric8.openshift.api.model.DockerBuildStrategyFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToBuildArgs(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A setToBuildArgs(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A addToBuildArgs(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A addAllToBuildArgs(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A removeFromBuildArgs(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A removeAllFromBuildArgs(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.EnvVar> getBuildArgs();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getBuildArg(int);

  public abstract io.fabric8.kubernetes.api.model.EnvVar getFirstBuildArg();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getLastBuildArg();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getMatchingBuildArg(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.lang.Boolean hasMatchingBuildArg(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withBuildArgs(java.util.List<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withBuildArgs(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract java.lang.Boolean hasBuildArgs();

  public abstract java.lang.String getDockerfilePath();

  public abstract A withDockerfilePath(java.lang.String);

  public abstract java.lang.Boolean hasDockerfilePath();

  public abstract A withNewDockerfilePath(java.lang.String);

  public abstract A withNewDockerfilePath(java.lang.StringBuilder);

  public abstract A withNewDockerfilePath(java.lang.StringBuffer);

  public abstract A addToEnv(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A setToEnv(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A addToEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A addAllToEnv(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A removeFromEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A removeAllFromEnv(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.EnvVar> getEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getEnv(int);

  public abstract io.fabric8.kubernetes.api.model.EnvVar getFirstEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getLastEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getMatchingEnv(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.lang.Boolean hasMatchingEnv(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(java.util.List<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract java.lang.Boolean hasEnv();

  public abstract java.lang.Boolean isForcePull();

  public abstract A withForcePull(java.lang.Boolean);

  public abstract java.lang.Boolean hasForcePull();

  public abstract A withNewForcePull(java.lang.String);

  public abstract A withNewForcePull(boolean);

  public abstract io.fabric8.kubernetes.api.model.ObjectReference getFrom();

  public abstract io.fabric8.kubernetes.api.model.ObjectReference buildFrom();

  public abstract A withFrom(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract java.lang.Boolean hasFrom();

  public abstract io.fabric8.openshift.api.model.DockerBuildStrategyFluent$FromNested<A> withNewFrom();

  public abstract io.fabric8.openshift.api.model.DockerBuildStrategyFluent$FromNested<A> withNewFromLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract io.fabric8.openshift.api.model.DockerBuildStrategyFluent$FromNested<A> editFrom();

  public abstract io.fabric8.openshift.api.model.DockerBuildStrategyFluent$FromNested<A> editOrNewFrom();

  public abstract io.fabric8.openshift.api.model.DockerBuildStrategyFluent$FromNested<A> editOrNewFromLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract java.lang.String getImageOptimizationPolicy();

  public abstract A withImageOptimizationPolicy(java.lang.String);

  public abstract java.lang.Boolean hasImageOptimizationPolicy();

  public abstract A withNewImageOptimizationPolicy(java.lang.String);

  public abstract A withNewImageOptimizationPolicy(java.lang.StringBuilder);

  public abstract A withNewImageOptimizationPolicy(java.lang.StringBuffer);

  public abstract java.lang.Boolean isNoCache();

  public abstract A withNoCache(java.lang.Boolean);

  public abstract java.lang.Boolean hasNoCache();

  public abstract A withNewNoCache(java.lang.String);

  public abstract A withNewNoCache(boolean);

  public abstract io.fabric8.kubernetes.api.model.LocalObjectReference getPullSecret();

  public abstract io.fabric8.kubernetes.api.model.LocalObjectReference buildPullSecret();

  public abstract A withPullSecret(io.fabric8.kubernetes.api.model.LocalObjectReference);

  public abstract java.lang.Boolean hasPullSecret();

  public abstract A withNewPullSecret(java.lang.String);

  public abstract io.fabric8.openshift.api.model.DockerBuildStrategyFluent$PullSecretNested<A> withNewPullSecret();

  public abstract io.fabric8.openshift.api.model.DockerBuildStrategyFluent$PullSecretNested<A> withNewPullSecretLike(io.fabric8.kubernetes.api.model.LocalObjectReference);

  public abstract io.fabric8.openshift.api.model.DockerBuildStrategyFluent$PullSecretNested<A> editPullSecret();

  public abstract io.fabric8.openshift.api.model.DockerBuildStrategyFluent$PullSecretNested<A> editOrNewPullSecret();

  public abstract io.fabric8.openshift.api.model.DockerBuildStrategyFluent$PullSecretNested<A> editOrNewPullSecretLike(io.fabric8.kubernetes.api.model.LocalObjectReference);
}
