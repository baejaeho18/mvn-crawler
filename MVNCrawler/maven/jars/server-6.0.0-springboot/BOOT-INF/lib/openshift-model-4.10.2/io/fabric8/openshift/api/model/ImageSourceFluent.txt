Compiled from "ImageSourceFluent.java"
public interface io.fabric8.openshift.api.model.ImageSourceFluent<A extends io.fabric8.openshift.api.model.ImageSourceFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToAs(int, java.lang.String);

  public abstract A setToAs(int, java.lang.String);

  public abstract A addToAs(java.lang.String...);

  public abstract A addAllToAs(java.util.Collection<java.lang.String>);

  public abstract A removeFromAs(java.lang.String...);

  public abstract A removeAllFromAs(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getAs();

  public abstract java.lang.String getA(int);

  public abstract java.lang.String getFirstA();

  public abstract java.lang.String getLastA();

  public abstract java.lang.String getMatchingA(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingA(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withAs(java.util.List<java.lang.String>);

  public abstract A withAs(java.lang.String...);

  public abstract java.lang.Boolean hasAs();

  public abstract A addNewA(java.lang.String);

  public abstract A addNewA(java.lang.StringBuilder);

  public abstract A addNewA(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.ObjectReference getFrom();

  public abstract io.fabric8.kubernetes.api.model.ObjectReference buildFrom();

  public abstract A withFrom(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract java.lang.Boolean hasFrom();

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$FromNested<A> withNewFrom();

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$FromNested<A> withNewFromLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$FromNested<A> editFrom();

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$FromNested<A> editOrNewFrom();

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$FromNested<A> editOrNewFromLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract A addToPaths(int, io.fabric8.openshift.api.model.ImageSourcePath);

  public abstract A setToPaths(int, io.fabric8.openshift.api.model.ImageSourcePath);

  public abstract A addToPaths(io.fabric8.openshift.api.model.ImageSourcePath...);

  public abstract A addAllToPaths(java.util.Collection<io.fabric8.openshift.api.model.ImageSourcePath>);

  public abstract A removeFromPaths(io.fabric8.openshift.api.model.ImageSourcePath...);

  public abstract A removeAllFromPaths(java.util.Collection<io.fabric8.openshift.api.model.ImageSourcePath>);

  public abstract A removeMatchingFromPaths(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.ImageSourcePathBuilder>);

  public abstract java.util.List<io.fabric8.openshift.api.model.ImageSourcePath> getPaths();

  public abstract java.util.List<io.fabric8.openshift.api.model.ImageSourcePath> buildPaths();

  public abstract io.fabric8.openshift.api.model.ImageSourcePath buildPath(int);

  public abstract io.fabric8.openshift.api.model.ImageSourcePath buildFirstPath();

  public abstract io.fabric8.openshift.api.model.ImageSourcePath buildLastPath();

  public abstract io.fabric8.openshift.api.model.ImageSourcePath buildMatchingPath(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.ImageSourcePathBuilder>);

  public abstract java.lang.Boolean hasMatchingPath(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.ImageSourcePathBuilder>);

  public abstract A withPaths(java.util.List<io.fabric8.openshift.api.model.ImageSourcePath>);

  public abstract A withPaths(io.fabric8.openshift.api.model.ImageSourcePath...);

  public abstract java.lang.Boolean hasPaths();

  public abstract A addNewPath(java.lang.String, java.lang.String);

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$PathsNested<A> addNewPath();

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$PathsNested<A> addNewPathLike(io.fabric8.openshift.api.model.ImageSourcePath);

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$PathsNested<A> setNewPathLike(int, io.fabric8.openshift.api.model.ImageSourcePath);

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$PathsNested<A> editPath(int);

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$PathsNested<A> editFirstPath();

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$PathsNested<A> editLastPath();

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$PathsNested<A> editMatchingPath(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.ImageSourcePathBuilder>);

  public abstract io.fabric8.kubernetes.api.model.LocalObjectReference getPullSecret();

  public abstract io.fabric8.kubernetes.api.model.LocalObjectReference buildPullSecret();

  public abstract A withPullSecret(io.fabric8.kubernetes.api.model.LocalObjectReference);

  public abstract java.lang.Boolean hasPullSecret();

  public abstract A withNewPullSecret(java.lang.String);

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$PullSecretNested<A> withNewPullSecret();

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$PullSecretNested<A> withNewPullSecretLike(io.fabric8.kubernetes.api.model.LocalObjectReference);

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$PullSecretNested<A> editPullSecret();

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$PullSecretNested<A> editOrNewPullSecret();

  public abstract io.fabric8.openshift.api.model.ImageSourceFluent$PullSecretNested<A> editOrNewPullSecretLike(io.fabric8.kubernetes.api.model.LocalObjectReference);
}
