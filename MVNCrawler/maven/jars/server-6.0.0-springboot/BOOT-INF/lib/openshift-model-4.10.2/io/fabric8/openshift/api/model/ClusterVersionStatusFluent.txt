Compiled from "ClusterVersionStatusFluent.java"
public interface io.fabric8.openshift.api.model.ClusterVersionStatusFluent<A extends io.fabric8.openshift.api.model.ClusterVersionStatusFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToAvailableUpdates(int, io.fabric8.openshift.api.model.Update);

  public abstract A setToAvailableUpdates(int, io.fabric8.openshift.api.model.Update);

  public abstract A addToAvailableUpdates(io.fabric8.openshift.api.model.Update...);

  public abstract A addAllToAvailableUpdates(java.util.Collection<io.fabric8.openshift.api.model.Update>);

  public abstract A removeFromAvailableUpdates(io.fabric8.openshift.api.model.Update...);

  public abstract A removeAllFromAvailableUpdates(java.util.Collection<io.fabric8.openshift.api.model.Update>);

  public abstract A removeMatchingFromAvailableUpdates(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.UpdateBuilder>);

  public abstract java.util.List<io.fabric8.openshift.api.model.Update> getAvailableUpdates();

  public abstract java.util.List<io.fabric8.openshift.api.model.Update> buildAvailableUpdates();

  public abstract io.fabric8.openshift.api.model.Update buildAvailableUpdate(int);

  public abstract io.fabric8.openshift.api.model.Update buildFirstAvailableUpdate();

  public abstract io.fabric8.openshift.api.model.Update buildLastAvailableUpdate();

  public abstract io.fabric8.openshift.api.model.Update buildMatchingAvailableUpdate(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.UpdateBuilder>);

  public abstract java.lang.Boolean hasMatchingAvailableUpdate(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.UpdateBuilder>);

  public abstract A withAvailableUpdates(java.util.List<io.fabric8.openshift.api.model.Update>);

  public abstract A withAvailableUpdates(io.fabric8.openshift.api.model.Update...);

  public abstract java.lang.Boolean hasAvailableUpdates();

  public abstract A addNewAvailableUpdate(java.lang.Boolean, java.lang.String, java.lang.String);

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$AvailableUpdatesNested<A> addNewAvailableUpdate();

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$AvailableUpdatesNested<A> addNewAvailableUpdateLike(io.fabric8.openshift.api.model.Update);

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$AvailableUpdatesNested<A> setNewAvailableUpdateLike(int, io.fabric8.openshift.api.model.Update);

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$AvailableUpdatesNested<A> editAvailableUpdate(int);

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$AvailableUpdatesNested<A> editFirstAvailableUpdate();

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$AvailableUpdatesNested<A> editLastAvailableUpdate();

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$AvailableUpdatesNested<A> editMatchingAvailableUpdate(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.UpdateBuilder>);

  public abstract A addToConditions(int, io.fabric8.openshift.api.model.ClusterOperatorStatusCondition);

  public abstract A setToConditions(int, io.fabric8.openshift.api.model.ClusterOperatorStatusCondition);

  public abstract A addToConditions(io.fabric8.openshift.api.model.ClusterOperatorStatusCondition...);

  public abstract A addAllToConditions(java.util.Collection<io.fabric8.openshift.api.model.ClusterOperatorStatusCondition>);

  public abstract A removeFromConditions(io.fabric8.openshift.api.model.ClusterOperatorStatusCondition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.fabric8.openshift.api.model.ClusterOperatorStatusCondition>);

  public abstract A removeMatchingFromConditions(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.ClusterOperatorStatusConditionBuilder>);

  public abstract java.util.List<io.fabric8.openshift.api.model.ClusterOperatorStatusCondition> getConditions();

  public abstract java.util.List<io.fabric8.openshift.api.model.ClusterOperatorStatusCondition> buildConditions();

  public abstract io.fabric8.openshift.api.model.ClusterOperatorStatusCondition buildCondition(int);

  public abstract io.fabric8.openshift.api.model.ClusterOperatorStatusCondition buildFirstCondition();

  public abstract io.fabric8.openshift.api.model.ClusterOperatorStatusCondition buildLastCondition();

  public abstract io.fabric8.openshift.api.model.ClusterOperatorStatusCondition buildMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.ClusterOperatorStatusConditionBuilder>);

  public abstract java.lang.Boolean hasMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.ClusterOperatorStatusConditionBuilder>);

  public abstract A withConditions(java.util.List<io.fabric8.openshift.api.model.ClusterOperatorStatusCondition>);

  public abstract A withConditions(io.fabric8.openshift.api.model.ClusterOperatorStatusCondition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract A addNewCondition(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$ConditionsNested<A> addNewCondition();

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$ConditionsNested<A> addNewConditionLike(io.fabric8.openshift.api.model.ClusterOperatorStatusCondition);

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$ConditionsNested<A> setNewConditionLike(int, io.fabric8.openshift.api.model.ClusterOperatorStatusCondition);

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$ConditionsNested<A> editCondition(int);

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$ConditionsNested<A> editFirstCondition();

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$ConditionsNested<A> editLastCondition();

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$ConditionsNested<A> editMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.ClusterOperatorStatusConditionBuilder>);

  public abstract io.fabric8.openshift.api.model.Update getDesired();

  public abstract io.fabric8.openshift.api.model.Update buildDesired();

  public abstract A withDesired(io.fabric8.openshift.api.model.Update);

  public abstract java.lang.Boolean hasDesired();

  public abstract A withNewDesired(java.lang.Boolean, java.lang.String, java.lang.String);

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$DesiredNested<A> withNewDesired();

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$DesiredNested<A> withNewDesiredLike(io.fabric8.openshift.api.model.Update);

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$DesiredNested<A> editDesired();

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$DesiredNested<A> editOrNewDesired();

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$DesiredNested<A> editOrNewDesiredLike(io.fabric8.openshift.api.model.Update);

  public abstract A addToHistory(int, io.fabric8.openshift.api.model.UpdateHistory);

  public abstract A setToHistory(int, io.fabric8.openshift.api.model.UpdateHistory);

  public abstract A addToHistory(io.fabric8.openshift.api.model.UpdateHistory...);

  public abstract A addAllToHistory(java.util.Collection<io.fabric8.openshift.api.model.UpdateHistory>);

  public abstract A removeFromHistory(io.fabric8.openshift.api.model.UpdateHistory...);

  public abstract A removeAllFromHistory(java.util.Collection<io.fabric8.openshift.api.model.UpdateHistory>);

  public abstract A removeMatchingFromHistory(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.UpdateHistoryBuilder>);

  public abstract java.util.List<io.fabric8.openshift.api.model.UpdateHistory> getHistory();

  public abstract java.util.List<io.fabric8.openshift.api.model.UpdateHistory> buildHistory();

  public abstract io.fabric8.openshift.api.model.UpdateHistory buildHistory(int);

  public abstract io.fabric8.openshift.api.model.UpdateHistory buildFirstHistory();

  public abstract io.fabric8.openshift.api.model.UpdateHistory buildLastHistory();

  public abstract io.fabric8.openshift.api.model.UpdateHistory buildMatchingHistory(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.UpdateHistoryBuilder>);

  public abstract java.lang.Boolean hasMatchingHistory(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.UpdateHistoryBuilder>);

  public abstract A withHistory(java.util.List<io.fabric8.openshift.api.model.UpdateHistory>);

  public abstract A withHistory(io.fabric8.openshift.api.model.UpdateHistory...);

  public abstract java.lang.Boolean hasHistory();

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$HistoryNested<A> addNewHistory();

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$HistoryNested<A> addNewHistoryLike(io.fabric8.openshift.api.model.UpdateHistory);

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$HistoryNested<A> setNewHistoryLike(int, io.fabric8.openshift.api.model.UpdateHistory);

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$HistoryNested<A> editHistory(int);

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$HistoryNested<A> editFirstHistory();

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$HistoryNested<A> editLastHistory();

  public abstract io.fabric8.openshift.api.model.ClusterVersionStatusFluent$HistoryNested<A> editMatchingHistory(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.UpdateHistoryBuilder>);

  public abstract java.lang.Long getObservedGeneration();

  public abstract A withObservedGeneration(java.lang.Long);

  public abstract java.lang.Boolean hasObservedGeneration();

  public abstract java.lang.String getVersionHash();

  public abstract A withVersionHash(java.lang.String);

  public abstract java.lang.Boolean hasVersionHash();

  public abstract A withNewVersionHash(java.lang.String);

  public abstract A withNewVersionHash(java.lang.StringBuilder);

  public abstract A withNewVersionHash(java.lang.StringBuffer);
}
