Compiled from "BuildRequestFluent.java"
public interface io.fabric8.openshift.api.model.BuildRequestFluent<A extends io.fabric8.openshift.api.model.BuildRequestFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract io.fabric8.openshift.api.model.BinaryBuildSource getBinary();

  public abstract io.fabric8.openshift.api.model.BinaryBuildSource buildBinary();

  public abstract A withBinary(io.fabric8.openshift.api.model.BinaryBuildSource);

  public abstract java.lang.Boolean hasBinary();

  public abstract A withNewBinary(java.lang.String);

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$BinaryNested<A> withNewBinary();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$BinaryNested<A> withNewBinaryLike(io.fabric8.openshift.api.model.BinaryBuildSource);

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$BinaryNested<A> editBinary();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$BinaryNested<A> editOrNewBinary();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$BinaryNested<A> editOrNewBinaryLike(io.fabric8.openshift.api.model.BinaryBuildSource);

  public abstract io.fabric8.openshift.api.model.DockerStrategyOptions getDockerStrategyOptions();

  public abstract io.fabric8.openshift.api.model.DockerStrategyOptions buildDockerStrategyOptions();

  public abstract A withDockerStrategyOptions(io.fabric8.openshift.api.model.DockerStrategyOptions);

  public abstract java.lang.Boolean hasDockerStrategyOptions();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$DockerStrategyOptionsNested<A> withNewDockerStrategyOptions();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$DockerStrategyOptionsNested<A> withNewDockerStrategyOptionsLike(io.fabric8.openshift.api.model.DockerStrategyOptions);

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$DockerStrategyOptionsNested<A> editDockerStrategyOptions();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$DockerStrategyOptionsNested<A> editOrNewDockerStrategyOptions();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$DockerStrategyOptionsNested<A> editOrNewDockerStrategyOptionsLike(io.fabric8.openshift.api.model.DockerStrategyOptions);

  public abstract A addToEnv(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A setToEnv(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A addToEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A addAllToEnv(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A removeFromEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A removeAllFromEnv(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.EnvVar> getEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getEnv(int);

  public abstract io.fabric8.kubernetes.api.model.EnvVar getFirstEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getLastEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getMatchingEnv(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.lang.Boolean hasMatchingEnv(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(java.util.List<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract java.lang.Boolean hasEnv();

  public abstract io.fabric8.kubernetes.api.model.ObjectReference getFrom();

  public abstract io.fabric8.kubernetes.api.model.ObjectReference buildFrom();

  public abstract A withFrom(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract java.lang.Boolean hasFrom();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$FromNested<A> withNewFrom();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$FromNested<A> withNewFromLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$FromNested<A> editFrom();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$FromNested<A> editOrNewFrom();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$FromNested<A> editOrNewFromLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract java.lang.Long getLastVersion();

  public abstract A withLastVersion(java.lang.Long);

  public abstract java.lang.Boolean hasLastVersion();

  public abstract io.fabric8.kubernetes.api.model.ObjectMeta getMetadata();

  public abstract io.fabric8.kubernetes.api.model.ObjectMeta buildMetadata();

  public abstract A withMetadata(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Boolean hasMetadata();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$MetadataNested<A> withNewMetadata();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$MetadataNested<A> withNewMetadataLike(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$MetadataNested<A> editMetadata();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$MetadataNested<A> editOrNewMetadata();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$MetadataNested<A> editOrNewMetadataLike(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract io.fabric8.openshift.api.model.SourceRevision getRevision();

  public abstract io.fabric8.openshift.api.model.SourceRevision buildRevision();

  public abstract A withRevision(io.fabric8.openshift.api.model.SourceRevision);

  public abstract java.lang.Boolean hasRevision();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$RevisionNested<A> withNewRevision();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$RevisionNested<A> withNewRevisionLike(io.fabric8.openshift.api.model.SourceRevision);

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$RevisionNested<A> editRevision();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$RevisionNested<A> editOrNewRevision();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$RevisionNested<A> editOrNewRevisionLike(io.fabric8.openshift.api.model.SourceRevision);

  public abstract io.fabric8.openshift.api.model.SourceStrategyOptions getSourceStrategyOptions();

  public abstract io.fabric8.openshift.api.model.SourceStrategyOptions buildSourceStrategyOptions();

  public abstract A withSourceStrategyOptions(io.fabric8.openshift.api.model.SourceStrategyOptions);

  public abstract java.lang.Boolean hasSourceStrategyOptions();

  public abstract A withNewSourceStrategyOptions(java.lang.Boolean);

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$SourceStrategyOptionsNested<A> withNewSourceStrategyOptions();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$SourceStrategyOptionsNested<A> withNewSourceStrategyOptionsLike(io.fabric8.openshift.api.model.SourceStrategyOptions);

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$SourceStrategyOptionsNested<A> editSourceStrategyOptions();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$SourceStrategyOptionsNested<A> editOrNewSourceStrategyOptions();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$SourceStrategyOptionsNested<A> editOrNewSourceStrategyOptionsLike(io.fabric8.openshift.api.model.SourceStrategyOptions);

  public abstract A addToTriggeredBy(int, io.fabric8.openshift.api.model.BuildTriggerCause);

  public abstract A setToTriggeredBy(int, io.fabric8.openshift.api.model.BuildTriggerCause);

  public abstract A addToTriggeredBy(io.fabric8.openshift.api.model.BuildTriggerCause...);

  public abstract A addAllToTriggeredBy(java.util.Collection<io.fabric8.openshift.api.model.BuildTriggerCause>);

  public abstract A removeFromTriggeredBy(io.fabric8.openshift.api.model.BuildTriggerCause...);

  public abstract A removeAllFromTriggeredBy(java.util.Collection<io.fabric8.openshift.api.model.BuildTriggerCause>);

  public abstract A removeMatchingFromTriggeredBy(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.BuildTriggerCauseBuilder>);

  public abstract java.util.List<io.fabric8.openshift.api.model.BuildTriggerCause> getTriggeredBy();

  public abstract java.util.List<io.fabric8.openshift.api.model.BuildTriggerCause> buildTriggeredBy();

  public abstract io.fabric8.openshift.api.model.BuildTriggerCause buildTriggeredBy(int);

  public abstract io.fabric8.openshift.api.model.BuildTriggerCause buildFirstTriggeredBy();

  public abstract io.fabric8.openshift.api.model.BuildTriggerCause buildLastTriggeredBy();

  public abstract io.fabric8.openshift.api.model.BuildTriggerCause buildMatchingTriggeredBy(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.BuildTriggerCauseBuilder>);

  public abstract java.lang.Boolean hasMatchingTriggeredBy(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.BuildTriggerCauseBuilder>);

  public abstract A withTriggeredBy(java.util.List<io.fabric8.openshift.api.model.BuildTriggerCause>);

  public abstract A withTriggeredBy(io.fabric8.openshift.api.model.BuildTriggerCause...);

  public abstract java.lang.Boolean hasTriggeredBy();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$TriggeredByNested<A> addNewTriggeredBy();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$TriggeredByNested<A> addNewTriggeredByLike(io.fabric8.openshift.api.model.BuildTriggerCause);

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$TriggeredByNested<A> setNewTriggeredByLike(int, io.fabric8.openshift.api.model.BuildTriggerCause);

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$TriggeredByNested<A> editTriggeredBy(int);

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$TriggeredByNested<A> editFirstTriggeredBy();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$TriggeredByNested<A> editLastTriggeredBy();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$TriggeredByNested<A> editMatchingTriggeredBy(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.BuildTriggerCauseBuilder>);

  public abstract io.fabric8.kubernetes.api.model.ObjectReference getTriggeredByImage();

  public abstract io.fabric8.kubernetes.api.model.ObjectReference buildTriggeredByImage();

  public abstract A withTriggeredByImage(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract java.lang.Boolean hasTriggeredByImage();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$TriggeredByImageNested<A> withNewTriggeredByImage();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$TriggeredByImageNested<A> withNewTriggeredByImageLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$TriggeredByImageNested<A> editTriggeredByImage();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$TriggeredByImageNested<A> editOrNewTriggeredByImage();

  public abstract io.fabric8.openshift.api.model.BuildRequestFluent$TriggeredByImageNested<A> editOrNewTriggeredByImageLike(io.fabric8.kubernetes.api.model.ObjectReference);
}
