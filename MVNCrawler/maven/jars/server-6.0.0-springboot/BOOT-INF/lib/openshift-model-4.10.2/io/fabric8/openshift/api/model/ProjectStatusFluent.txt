Compiled from "ProjectStatusFluent.java"
public interface io.fabric8.openshift.api.model.ProjectStatusFluent<A extends io.fabric8.openshift.api.model.ProjectStatusFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToConditions(int, io.fabric8.kubernetes.api.model.NamespaceCondition);

  public abstract A setToConditions(int, io.fabric8.kubernetes.api.model.NamespaceCondition);

  public abstract A addToConditions(io.fabric8.kubernetes.api.model.NamespaceCondition...);

  public abstract A addAllToConditions(java.util.Collection<io.fabric8.kubernetes.api.model.NamespaceCondition>);

  public abstract A removeFromConditions(io.fabric8.kubernetes.api.model.NamespaceCondition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.fabric8.kubernetes.api.model.NamespaceCondition>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.NamespaceCondition> getConditions();

  public abstract io.fabric8.kubernetes.api.model.NamespaceCondition getCondition(int);

  public abstract io.fabric8.kubernetes.api.model.NamespaceCondition getFirstCondition();

  public abstract io.fabric8.kubernetes.api.model.NamespaceCondition getLastCondition();

  public abstract io.fabric8.kubernetes.api.model.NamespaceCondition getMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.NamespaceCondition>);

  public abstract java.lang.Boolean hasMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.NamespaceCondition>);

  public abstract A withConditions(java.util.List<io.fabric8.kubernetes.api.model.NamespaceCondition>);

  public abstract A withConditions(io.fabric8.kubernetes.api.model.NamespaceCondition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract A addNewCondition(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract java.lang.String getPhase();

  public abstract A withPhase(java.lang.String);

  public abstract java.lang.Boolean hasPhase();

  public abstract A withNewPhase(java.lang.String);

  public abstract A withNewPhase(java.lang.StringBuilder);

  public abstract A withNewPhase(java.lang.StringBuffer);
}
