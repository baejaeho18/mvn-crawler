Compiled from "CustomDeploymentStrategyParamsFluent.java"
public interface io.fabric8.openshift.api.model.CustomDeploymentStrategyParamsFluent<A extends io.fabric8.openshift.api.model.CustomDeploymentStrategyParamsFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToCommand(int, java.lang.String);

  public abstract A setToCommand(int, java.lang.String);

  public abstract A addToCommand(java.lang.String...);

  public abstract A addAllToCommand(java.util.Collection<java.lang.String>);

  public abstract A removeFromCommand(java.lang.String...);

  public abstract A removeAllFromCommand(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getCommand();

  public abstract java.lang.String getCommand(int);

  public abstract java.lang.String getFirstCommand();

  public abstract java.lang.String getLastCommand();

  public abstract java.lang.String getMatchingCommand(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingCommand(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withCommand(java.util.List<java.lang.String>);

  public abstract A withCommand(java.lang.String...);

  public abstract java.lang.Boolean hasCommand();

  public abstract A addNewCommand(java.lang.String);

  public abstract A addNewCommand(java.lang.StringBuilder);

  public abstract A addNewCommand(java.lang.StringBuffer);

  public abstract A addToEnvironment(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A setToEnvironment(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A addToEnvironment(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A addAllToEnvironment(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A removeFromEnvironment(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A removeAllFromEnvironment(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.EnvVar> getEnvironment();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getEnvironment(int);

  public abstract io.fabric8.kubernetes.api.model.EnvVar getFirstEnvironment();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getLastEnvironment();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getMatchingEnvironment(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.lang.Boolean hasMatchingEnvironment(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withEnvironment(java.util.List<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withEnvironment(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract java.lang.Boolean hasEnvironment();

  public abstract java.lang.String getImage();

  public abstract A withImage(java.lang.String);

  public abstract java.lang.Boolean hasImage();

  public abstract A withNewImage(java.lang.String);

  public abstract A withNewImage(java.lang.StringBuilder);

  public abstract A withNewImage(java.lang.StringBuffer);
}
