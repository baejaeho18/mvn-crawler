Compiled from "SecurityContextConstraintsFluent.java"
public interface io.fabric8.openshift.api.model.SecurityContextConstraintsFluent<A extends io.fabric8.openshift.api.model.SecurityContextConstraintsFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Boolean isAllowHostDirVolumePlugin();

  public abstract A withAllowHostDirVolumePlugin(java.lang.Boolean);

  public abstract java.lang.Boolean hasAllowHostDirVolumePlugin();

  public abstract A withNewAllowHostDirVolumePlugin(java.lang.String);

  public abstract A withNewAllowHostDirVolumePlugin(boolean);

  public abstract java.lang.Boolean isAllowHostIPC();

  public abstract A withAllowHostIPC(java.lang.Boolean);

  public abstract java.lang.Boolean hasAllowHostIPC();

  public abstract A withNewAllowHostIPC(java.lang.String);

  public abstract A withNewAllowHostIPC(boolean);

  public abstract java.lang.Boolean isAllowHostNetwork();

  public abstract A withAllowHostNetwork(java.lang.Boolean);

  public abstract java.lang.Boolean hasAllowHostNetwork();

  public abstract A withNewAllowHostNetwork(java.lang.String);

  public abstract A withNewAllowHostNetwork(boolean);

  public abstract java.lang.Boolean isAllowHostPID();

  public abstract A withAllowHostPID(java.lang.Boolean);

  public abstract java.lang.Boolean hasAllowHostPID();

  public abstract A withNewAllowHostPID(java.lang.String);

  public abstract A withNewAllowHostPID(boolean);

  public abstract java.lang.Boolean isAllowHostPorts();

  public abstract A withAllowHostPorts(java.lang.Boolean);

  public abstract java.lang.Boolean hasAllowHostPorts();

  public abstract A withNewAllowHostPorts(java.lang.String);

  public abstract A withNewAllowHostPorts(boolean);

  public abstract java.lang.Boolean isAllowPrivilegeEscalation();

  public abstract A withAllowPrivilegeEscalation(java.lang.Boolean);

  public abstract java.lang.Boolean hasAllowPrivilegeEscalation();

  public abstract A withNewAllowPrivilegeEscalation(java.lang.String);

  public abstract A withNewAllowPrivilegeEscalation(boolean);

  public abstract java.lang.Boolean isAllowPrivilegedContainer();

  public abstract A withAllowPrivilegedContainer(java.lang.Boolean);

  public abstract java.lang.Boolean hasAllowPrivilegedContainer();

  public abstract A withNewAllowPrivilegedContainer(java.lang.String);

  public abstract A withNewAllowPrivilegedContainer(boolean);

  public abstract A addToAllowedCapabilities(int, java.lang.String);

  public abstract A setToAllowedCapabilities(int, java.lang.String);

  public abstract A addToAllowedCapabilities(java.lang.String...);

  public abstract A addAllToAllowedCapabilities(java.util.Collection<java.lang.String>);

  public abstract A removeFromAllowedCapabilities(java.lang.String...);

  public abstract A removeAllFromAllowedCapabilities(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getAllowedCapabilities();

  public abstract java.lang.String getAllowedCapability(int);

  public abstract java.lang.String getFirstAllowedCapability();

  public abstract java.lang.String getLastAllowedCapability();

  public abstract java.lang.String getMatchingAllowedCapability(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingAllowedCapability(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withAllowedCapabilities(java.util.List<java.lang.String>);

  public abstract A withAllowedCapabilities(java.lang.String...);

  public abstract java.lang.Boolean hasAllowedCapabilities();

  public abstract A addNewAllowedCapability(java.lang.String);

  public abstract A addNewAllowedCapability(java.lang.StringBuilder);

  public abstract A addNewAllowedCapability(java.lang.StringBuffer);

  public abstract A addToAllowedFlexVolumes(int, io.fabric8.openshift.api.model.AllowedFlexVolume);

  public abstract A setToAllowedFlexVolumes(int, io.fabric8.openshift.api.model.AllowedFlexVolume);

  public abstract A addToAllowedFlexVolumes(io.fabric8.openshift.api.model.AllowedFlexVolume...);

  public abstract A addAllToAllowedFlexVolumes(java.util.Collection<io.fabric8.openshift.api.model.AllowedFlexVolume>);

  public abstract A removeFromAllowedFlexVolumes(io.fabric8.openshift.api.model.AllowedFlexVolume...);

  public abstract A removeAllFromAllowedFlexVolumes(java.util.Collection<io.fabric8.openshift.api.model.AllowedFlexVolume>);

  public abstract A removeMatchingFromAllowedFlexVolumes(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.AllowedFlexVolumeBuilder>);

  public abstract java.util.List<io.fabric8.openshift.api.model.AllowedFlexVolume> getAllowedFlexVolumes();

  public abstract java.util.List<io.fabric8.openshift.api.model.AllowedFlexVolume> buildAllowedFlexVolumes();

  public abstract io.fabric8.openshift.api.model.AllowedFlexVolume buildAllowedFlexVolume(int);

  public abstract io.fabric8.openshift.api.model.AllowedFlexVolume buildFirstAllowedFlexVolume();

  public abstract io.fabric8.openshift.api.model.AllowedFlexVolume buildLastAllowedFlexVolume();

  public abstract io.fabric8.openshift.api.model.AllowedFlexVolume buildMatchingAllowedFlexVolume(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.AllowedFlexVolumeBuilder>);

  public abstract java.lang.Boolean hasMatchingAllowedFlexVolume(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.AllowedFlexVolumeBuilder>);

  public abstract A withAllowedFlexVolumes(java.util.List<io.fabric8.openshift.api.model.AllowedFlexVolume>);

  public abstract A withAllowedFlexVolumes(io.fabric8.openshift.api.model.AllowedFlexVolume...);

  public abstract java.lang.Boolean hasAllowedFlexVolumes();

  public abstract A addNewAllowedFlexVolume(java.lang.String);

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$AllowedFlexVolumesNested<A> addNewAllowedFlexVolume();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$AllowedFlexVolumesNested<A> addNewAllowedFlexVolumeLike(io.fabric8.openshift.api.model.AllowedFlexVolume);

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$AllowedFlexVolumesNested<A> setNewAllowedFlexVolumeLike(int, io.fabric8.openshift.api.model.AllowedFlexVolume);

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$AllowedFlexVolumesNested<A> editAllowedFlexVolume(int);

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$AllowedFlexVolumesNested<A> editFirstAllowedFlexVolume();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$AllowedFlexVolumesNested<A> editLastAllowedFlexVolume();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$AllowedFlexVolumesNested<A> editMatchingAllowedFlexVolume(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.AllowedFlexVolumeBuilder>);

  public abstract A addToAllowedUnsafeSysctls(int, java.lang.String);

  public abstract A setToAllowedUnsafeSysctls(int, java.lang.String);

  public abstract A addToAllowedUnsafeSysctls(java.lang.String...);

  public abstract A addAllToAllowedUnsafeSysctls(java.util.Collection<java.lang.String>);

  public abstract A removeFromAllowedUnsafeSysctls(java.lang.String...);

  public abstract A removeAllFromAllowedUnsafeSysctls(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getAllowedUnsafeSysctls();

  public abstract java.lang.String getAllowedUnsafeSysctl(int);

  public abstract java.lang.String getFirstAllowedUnsafeSysctl();

  public abstract java.lang.String getLastAllowedUnsafeSysctl();

  public abstract java.lang.String getMatchingAllowedUnsafeSysctl(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingAllowedUnsafeSysctl(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withAllowedUnsafeSysctls(java.util.List<java.lang.String>);

  public abstract A withAllowedUnsafeSysctls(java.lang.String...);

  public abstract java.lang.Boolean hasAllowedUnsafeSysctls();

  public abstract A addNewAllowedUnsafeSysctl(java.lang.String);

  public abstract A addNewAllowedUnsafeSysctl(java.lang.StringBuilder);

  public abstract A addNewAllowedUnsafeSysctl(java.lang.StringBuffer);

  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract A addToDefaultAddCapabilities(int, java.lang.String);

  public abstract A setToDefaultAddCapabilities(int, java.lang.String);

  public abstract A addToDefaultAddCapabilities(java.lang.String...);

  public abstract A addAllToDefaultAddCapabilities(java.util.Collection<java.lang.String>);

  public abstract A removeFromDefaultAddCapabilities(java.lang.String...);

  public abstract A removeAllFromDefaultAddCapabilities(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getDefaultAddCapabilities();

  public abstract java.lang.String getDefaultAddCapability(int);

  public abstract java.lang.String getFirstDefaultAddCapability();

  public abstract java.lang.String getLastDefaultAddCapability();

  public abstract java.lang.String getMatchingDefaultAddCapability(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingDefaultAddCapability(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withDefaultAddCapabilities(java.util.List<java.lang.String>);

  public abstract A withDefaultAddCapabilities(java.lang.String...);

  public abstract java.lang.Boolean hasDefaultAddCapabilities();

  public abstract A addNewDefaultAddCapability(java.lang.String);

  public abstract A addNewDefaultAddCapability(java.lang.StringBuilder);

  public abstract A addNewDefaultAddCapability(java.lang.StringBuffer);

  public abstract java.lang.Boolean isDefaultAllowPrivilegeEscalation();

  public abstract A withDefaultAllowPrivilegeEscalation(java.lang.Boolean);

  public abstract java.lang.Boolean hasDefaultAllowPrivilegeEscalation();

  public abstract A withNewDefaultAllowPrivilegeEscalation(java.lang.String);

  public abstract A withNewDefaultAllowPrivilegeEscalation(boolean);

  public abstract A addToForbiddenSysctls(int, java.lang.String);

  public abstract A setToForbiddenSysctls(int, java.lang.String);

  public abstract A addToForbiddenSysctls(java.lang.String...);

  public abstract A addAllToForbiddenSysctls(java.util.Collection<java.lang.String>);

  public abstract A removeFromForbiddenSysctls(java.lang.String...);

  public abstract A removeAllFromForbiddenSysctls(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getForbiddenSysctls();

  public abstract java.lang.String getForbiddenSysctl(int);

  public abstract java.lang.String getFirstForbiddenSysctl();

  public abstract java.lang.String getLastForbiddenSysctl();

  public abstract java.lang.String getMatchingForbiddenSysctl(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingForbiddenSysctl(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withForbiddenSysctls(java.util.List<java.lang.String>);

  public abstract A withForbiddenSysctls(java.lang.String...);

  public abstract java.lang.Boolean hasForbiddenSysctls();

  public abstract A addNewForbiddenSysctl(java.lang.String);

  public abstract A addNewForbiddenSysctl(java.lang.StringBuilder);

  public abstract A addNewForbiddenSysctl(java.lang.StringBuffer);

  public abstract io.fabric8.openshift.api.model.FSGroupStrategyOptions getFsGroup();

  public abstract io.fabric8.openshift.api.model.FSGroupStrategyOptions buildFsGroup();

  public abstract A withFsGroup(io.fabric8.openshift.api.model.FSGroupStrategyOptions);

  public abstract java.lang.Boolean hasFsGroup();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$FsGroupNested<A> withNewFsGroup();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$FsGroupNested<A> withNewFsGroupLike(io.fabric8.openshift.api.model.FSGroupStrategyOptions);

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$FsGroupNested<A> editFsGroup();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$FsGroupNested<A> editOrNewFsGroup();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$FsGroupNested<A> editOrNewFsGroupLike(io.fabric8.openshift.api.model.FSGroupStrategyOptions);

  public abstract A addToGroups(int, java.lang.String);

  public abstract A setToGroups(int, java.lang.String);

  public abstract A addToGroups(java.lang.String...);

  public abstract A addAllToGroups(java.util.Collection<java.lang.String>);

  public abstract A removeFromGroups(java.lang.String...);

  public abstract A removeAllFromGroups(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getGroups();

  public abstract java.lang.String getGroup(int);

  public abstract java.lang.String getFirstGroup();

  public abstract java.lang.String getLastGroup();

  public abstract java.lang.String getMatchingGroup(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingGroup(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withGroups(java.util.List<java.lang.String>);

  public abstract A withGroups(java.lang.String...);

  public abstract java.lang.Boolean hasGroups();

  public abstract A addNewGroup(java.lang.String);

  public abstract A addNewGroup(java.lang.StringBuilder);

  public abstract A addNewGroup(java.lang.StringBuffer);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.ObjectMeta getMetadata();

  public abstract io.fabric8.kubernetes.api.model.ObjectMeta buildMetadata();

  public abstract A withMetadata(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Boolean hasMetadata();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$MetadataNested<A> withNewMetadata();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$MetadataNested<A> withNewMetadataLike(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$MetadataNested<A> editMetadata();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$MetadataNested<A> editOrNewMetadata();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$MetadataNested<A> editOrNewMetadataLike(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Integer getPriority();

  public abstract A withPriority(java.lang.Integer);

  public abstract java.lang.Boolean hasPriority();

  public abstract java.lang.Boolean isReadOnlyRootFilesystem();

  public abstract A withReadOnlyRootFilesystem(java.lang.Boolean);

  public abstract java.lang.Boolean hasReadOnlyRootFilesystem();

  public abstract A withNewReadOnlyRootFilesystem(java.lang.String);

  public abstract A withNewReadOnlyRootFilesystem(boolean);

  public abstract A addToRequiredDropCapabilities(int, java.lang.String);

  public abstract A setToRequiredDropCapabilities(int, java.lang.String);

  public abstract A addToRequiredDropCapabilities(java.lang.String...);

  public abstract A addAllToRequiredDropCapabilities(java.util.Collection<java.lang.String>);

  public abstract A removeFromRequiredDropCapabilities(java.lang.String...);

  public abstract A removeAllFromRequiredDropCapabilities(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getRequiredDropCapabilities();

  public abstract java.lang.String getRequiredDropCapability(int);

  public abstract java.lang.String getFirstRequiredDropCapability();

  public abstract java.lang.String getLastRequiredDropCapability();

  public abstract java.lang.String getMatchingRequiredDropCapability(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingRequiredDropCapability(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withRequiredDropCapabilities(java.util.List<java.lang.String>);

  public abstract A withRequiredDropCapabilities(java.lang.String...);

  public abstract java.lang.Boolean hasRequiredDropCapabilities();

  public abstract A addNewRequiredDropCapability(java.lang.String);

  public abstract A addNewRequiredDropCapability(java.lang.StringBuilder);

  public abstract A addNewRequiredDropCapability(java.lang.StringBuffer);

  public abstract io.fabric8.openshift.api.model.RunAsUserStrategyOptions getRunAsUser();

  public abstract io.fabric8.openshift.api.model.RunAsUserStrategyOptions buildRunAsUser();

  public abstract A withRunAsUser(io.fabric8.openshift.api.model.RunAsUserStrategyOptions);

  public abstract java.lang.Boolean hasRunAsUser();

  public abstract A withNewRunAsUser(java.lang.String, java.lang.Long, java.lang.Long, java.lang.Long);

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$RunAsUserNested<A> withNewRunAsUser();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$RunAsUserNested<A> withNewRunAsUserLike(io.fabric8.openshift.api.model.RunAsUserStrategyOptions);

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$RunAsUserNested<A> editRunAsUser();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$RunAsUserNested<A> editOrNewRunAsUser();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$RunAsUserNested<A> editOrNewRunAsUserLike(io.fabric8.openshift.api.model.RunAsUserStrategyOptions);

  public abstract io.fabric8.openshift.api.model.SELinuxContextStrategyOptions getSeLinuxContext();

  public abstract io.fabric8.openshift.api.model.SELinuxContextStrategyOptions buildSeLinuxContext();

  public abstract A withSeLinuxContext(io.fabric8.openshift.api.model.SELinuxContextStrategyOptions);

  public abstract java.lang.Boolean hasSeLinuxContext();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$SeLinuxContextNested<A> withNewSeLinuxContext();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$SeLinuxContextNested<A> withNewSeLinuxContextLike(io.fabric8.openshift.api.model.SELinuxContextStrategyOptions);

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$SeLinuxContextNested<A> editSeLinuxContext();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$SeLinuxContextNested<A> editOrNewSeLinuxContext();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$SeLinuxContextNested<A> editOrNewSeLinuxContextLike(io.fabric8.openshift.api.model.SELinuxContextStrategyOptions);

  public abstract A addToSeccompProfiles(int, java.lang.String);

  public abstract A setToSeccompProfiles(int, java.lang.String);

  public abstract A addToSeccompProfiles(java.lang.String...);

  public abstract A addAllToSeccompProfiles(java.util.Collection<java.lang.String>);

  public abstract A removeFromSeccompProfiles(java.lang.String...);

  public abstract A removeAllFromSeccompProfiles(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getSeccompProfiles();

  public abstract java.lang.String getSeccompProfile(int);

  public abstract java.lang.String getFirstSeccompProfile();

  public abstract java.lang.String getLastSeccompProfile();

  public abstract java.lang.String getMatchingSeccompProfile(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingSeccompProfile(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withSeccompProfiles(java.util.List<java.lang.String>);

  public abstract A withSeccompProfiles(java.lang.String...);

  public abstract java.lang.Boolean hasSeccompProfiles();

  public abstract A addNewSeccompProfile(java.lang.String);

  public abstract A addNewSeccompProfile(java.lang.StringBuilder);

  public abstract A addNewSeccompProfile(java.lang.StringBuffer);

  public abstract io.fabric8.openshift.api.model.SupplementalGroupsStrategyOptions getSupplementalGroups();

  public abstract io.fabric8.openshift.api.model.SupplementalGroupsStrategyOptions buildSupplementalGroups();

  public abstract A withSupplementalGroups(io.fabric8.openshift.api.model.SupplementalGroupsStrategyOptions);

  public abstract java.lang.Boolean hasSupplementalGroups();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$SupplementalGroupsNested<A> withNewSupplementalGroups();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$SupplementalGroupsNested<A> withNewSupplementalGroupsLike(io.fabric8.openshift.api.model.SupplementalGroupsStrategyOptions);

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$SupplementalGroupsNested<A> editSupplementalGroups();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$SupplementalGroupsNested<A> editOrNewSupplementalGroups();

  public abstract io.fabric8.openshift.api.model.SecurityContextConstraintsFluent$SupplementalGroupsNested<A> editOrNewSupplementalGroupsLike(io.fabric8.openshift.api.model.SupplementalGroupsStrategyOptions);

  public abstract A addToUsers(int, java.lang.String);

  public abstract A setToUsers(int, java.lang.String);

  public abstract A addToUsers(java.lang.String...);

  public abstract A addAllToUsers(java.util.Collection<java.lang.String>);

  public abstract A removeFromUsers(java.lang.String...);

  public abstract A removeAllFromUsers(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getUsers();

  public abstract java.lang.String getUser(int);

  public abstract java.lang.String getFirstUser();

  public abstract java.lang.String getLastUser();

  public abstract java.lang.String getMatchingUser(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingUser(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withUsers(java.util.List<java.lang.String>);

  public abstract A withUsers(java.lang.String...);

  public abstract java.lang.Boolean hasUsers();

  public abstract A addNewUser(java.lang.String);

  public abstract A addNewUser(java.lang.StringBuilder);

  public abstract A addNewUser(java.lang.StringBuffer);

  public abstract A addToVolumes(int, java.lang.String);

  public abstract A setToVolumes(int, java.lang.String);

  public abstract A addToVolumes(java.lang.String...);

  public abstract A addAllToVolumes(java.util.Collection<java.lang.String>);

  public abstract A removeFromVolumes(java.lang.String...);

  public abstract A removeAllFromVolumes(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getVolumes();

  public abstract java.lang.String getVolume(int);

  public abstract java.lang.String getFirstVolume();

  public abstract java.lang.String getLastVolume();

  public abstract java.lang.String getMatchingVolume(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingVolume(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withVolumes(java.util.List<java.lang.String>);

  public abstract A withVolumes(java.lang.String...);

  public abstract java.lang.Boolean hasVolumes();

  public abstract A addNewVolume(java.lang.String);

  public abstract A addNewVolume(java.lang.StringBuilder);

  public abstract A addNewVolume(java.lang.StringBuffer);
}
