Compiled from "BuildTriggerPolicyFluent.java"
public interface io.fabric8.openshift.api.model.BuildTriggerPolicyFluent<A extends io.fabric8.openshift.api.model.BuildTriggerPolicyFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract io.fabric8.openshift.api.model.WebHookTrigger getBitbucket();

  public abstract io.fabric8.openshift.api.model.WebHookTrigger buildBitbucket();

  public abstract A withBitbucket(io.fabric8.openshift.api.model.WebHookTrigger);

  public abstract java.lang.Boolean hasBitbucket();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$BitbucketNested<A> withNewBitbucket();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$BitbucketNested<A> withNewBitbucketLike(io.fabric8.openshift.api.model.WebHookTrigger);

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$BitbucketNested<A> editBitbucket();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$BitbucketNested<A> editOrNewBitbucket();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$BitbucketNested<A> editOrNewBitbucketLike(io.fabric8.openshift.api.model.WebHookTrigger);

  public abstract io.fabric8.openshift.api.model.WebHookTrigger getGeneric();

  public abstract io.fabric8.openshift.api.model.WebHookTrigger buildGeneric();

  public abstract A withGeneric(io.fabric8.openshift.api.model.WebHookTrigger);

  public abstract java.lang.Boolean hasGeneric();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GenericNested<A> withNewGeneric();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GenericNested<A> withNewGenericLike(io.fabric8.openshift.api.model.WebHookTrigger);

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GenericNested<A> editGeneric();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GenericNested<A> editOrNewGeneric();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GenericNested<A> editOrNewGenericLike(io.fabric8.openshift.api.model.WebHookTrigger);

  public abstract io.fabric8.openshift.api.model.WebHookTrigger getGithub();

  public abstract io.fabric8.openshift.api.model.WebHookTrigger buildGithub();

  public abstract A withGithub(io.fabric8.openshift.api.model.WebHookTrigger);

  public abstract java.lang.Boolean hasGithub();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GithubNested<A> withNewGithub();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GithubNested<A> withNewGithubLike(io.fabric8.openshift.api.model.WebHookTrigger);

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GithubNested<A> editGithub();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GithubNested<A> editOrNewGithub();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GithubNested<A> editOrNewGithubLike(io.fabric8.openshift.api.model.WebHookTrigger);

  public abstract io.fabric8.openshift.api.model.WebHookTrigger getGitlab();

  public abstract io.fabric8.openshift.api.model.WebHookTrigger buildGitlab();

  public abstract A withGitlab(io.fabric8.openshift.api.model.WebHookTrigger);

  public abstract java.lang.Boolean hasGitlab();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GitlabNested<A> withNewGitlab();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GitlabNested<A> withNewGitlabLike(io.fabric8.openshift.api.model.WebHookTrigger);

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GitlabNested<A> editGitlab();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GitlabNested<A> editOrNewGitlab();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$GitlabNested<A> editOrNewGitlabLike(io.fabric8.openshift.api.model.WebHookTrigger);

  public abstract io.fabric8.openshift.api.model.ImageChangeTrigger getImageChange();

  public abstract io.fabric8.openshift.api.model.ImageChangeTrigger buildImageChange();

  public abstract A withImageChange(io.fabric8.openshift.api.model.ImageChangeTrigger);

  public abstract java.lang.Boolean hasImageChange();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$ImageChangeNested<A> withNewImageChange();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$ImageChangeNested<A> withNewImageChangeLike(io.fabric8.openshift.api.model.ImageChangeTrigger);

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$ImageChangeNested<A> editImageChange();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$ImageChangeNested<A> editOrNewImageChange();

  public abstract io.fabric8.openshift.api.model.BuildTriggerPolicyFluent$ImageChangeNested<A> editOrNewImageChangeLike(io.fabric8.openshift.api.model.ImageChangeTrigger);

  public abstract java.lang.String getType();

  public abstract A withType(java.lang.String);

  public abstract java.lang.Boolean hasType();

  public abstract A withNewType(java.lang.String);

  public abstract A withNewType(java.lang.StringBuilder);

  public abstract A withNewType(java.lang.StringBuffer);
}
