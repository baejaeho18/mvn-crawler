Compiled from "RollingDeploymentStrategyParamsFluent.java"
public interface io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent<A extends io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Long getIntervalSeconds();

  public abstract A withIntervalSeconds(java.lang.Long);

  public abstract java.lang.Boolean hasIntervalSeconds();

  public abstract io.fabric8.kubernetes.api.model.IntOrString getMaxSurge();

  public abstract io.fabric8.kubernetes.api.model.IntOrString buildMaxSurge();

  public abstract A withMaxSurge(io.fabric8.kubernetes.api.model.IntOrString);

  public abstract java.lang.Boolean hasMaxSurge();

  public abstract A withNewMaxSurge(java.lang.String);

  public abstract A withNewMaxSurge(java.lang.Integer);

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$MaxSurgeNested<A> withNewMaxSurge();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$MaxSurgeNested<A> withNewMaxSurgeLike(io.fabric8.kubernetes.api.model.IntOrString);

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$MaxSurgeNested<A> editMaxSurge();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$MaxSurgeNested<A> editOrNewMaxSurge();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$MaxSurgeNested<A> editOrNewMaxSurgeLike(io.fabric8.kubernetes.api.model.IntOrString);

  public abstract io.fabric8.kubernetes.api.model.IntOrString getMaxUnavailable();

  public abstract io.fabric8.kubernetes.api.model.IntOrString buildMaxUnavailable();

  public abstract A withMaxUnavailable(io.fabric8.kubernetes.api.model.IntOrString);

  public abstract java.lang.Boolean hasMaxUnavailable();

  public abstract A withNewMaxUnavailable(java.lang.String);

  public abstract A withNewMaxUnavailable(java.lang.Integer);

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$MaxUnavailableNested<A> withNewMaxUnavailable();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$MaxUnavailableNested<A> withNewMaxUnavailableLike(io.fabric8.kubernetes.api.model.IntOrString);

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$MaxUnavailableNested<A> editMaxUnavailable();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$MaxUnavailableNested<A> editOrNewMaxUnavailable();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$MaxUnavailableNested<A> editOrNewMaxUnavailableLike(io.fabric8.kubernetes.api.model.IntOrString);

  public abstract io.fabric8.openshift.api.model.LifecycleHook getPost();

  public abstract io.fabric8.openshift.api.model.LifecycleHook buildPost();

  public abstract A withPost(io.fabric8.openshift.api.model.LifecycleHook);

  public abstract java.lang.Boolean hasPost();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$PostNested<A> withNewPost();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$PostNested<A> withNewPostLike(io.fabric8.openshift.api.model.LifecycleHook);

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$PostNested<A> editPost();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$PostNested<A> editOrNewPost();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$PostNested<A> editOrNewPostLike(io.fabric8.openshift.api.model.LifecycleHook);

  public abstract io.fabric8.openshift.api.model.LifecycleHook getPre();

  public abstract io.fabric8.openshift.api.model.LifecycleHook buildPre();

  public abstract A withPre(io.fabric8.openshift.api.model.LifecycleHook);

  public abstract java.lang.Boolean hasPre();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$PreNested<A> withNewPre();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$PreNested<A> withNewPreLike(io.fabric8.openshift.api.model.LifecycleHook);

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$PreNested<A> editPre();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$PreNested<A> editOrNewPre();

  public abstract io.fabric8.openshift.api.model.RollingDeploymentStrategyParamsFluent$PreNested<A> editOrNewPreLike(io.fabric8.openshift.api.model.LifecycleHook);

  public abstract java.lang.Long getTimeoutSeconds();

  public abstract A withTimeoutSeconds(java.lang.Long);

  public abstract java.lang.Boolean hasTimeoutSeconds();

  public abstract java.lang.Long getUpdatePeriodSeconds();

  public abstract A withUpdatePeriodSeconds(java.lang.Long);

  public abstract java.lang.Boolean hasUpdatePeriodSeconds();
}
