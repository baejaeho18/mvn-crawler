Compiled from "GitSourceRevisionFluent.java"
public interface io.fabric8.openshift.api.model.GitSourceRevisionFluent<A extends io.fabric8.openshift.api.model.GitSourceRevisionFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract io.fabric8.openshift.api.model.SourceControlUser getAuthor();

  public abstract io.fabric8.openshift.api.model.SourceControlUser buildAuthor();

  public abstract A withAuthor(io.fabric8.openshift.api.model.SourceControlUser);

  public abstract java.lang.Boolean hasAuthor();

  public abstract A withNewAuthor(java.lang.String, java.lang.String);

  public abstract io.fabric8.openshift.api.model.GitSourceRevisionFluent$AuthorNested<A> withNewAuthor();

  public abstract io.fabric8.openshift.api.model.GitSourceRevisionFluent$AuthorNested<A> withNewAuthorLike(io.fabric8.openshift.api.model.SourceControlUser);

  public abstract io.fabric8.openshift.api.model.GitSourceRevisionFluent$AuthorNested<A> editAuthor();

  public abstract io.fabric8.openshift.api.model.GitSourceRevisionFluent$AuthorNested<A> editOrNewAuthor();

  public abstract io.fabric8.openshift.api.model.GitSourceRevisionFluent$AuthorNested<A> editOrNewAuthorLike(io.fabric8.openshift.api.model.SourceControlUser);

  public abstract java.lang.String getCommit();

  public abstract A withCommit(java.lang.String);

  public abstract java.lang.Boolean hasCommit();

  public abstract A withNewCommit(java.lang.String);

  public abstract A withNewCommit(java.lang.StringBuilder);

  public abstract A withNewCommit(java.lang.StringBuffer);

  public abstract io.fabric8.openshift.api.model.SourceControlUser getCommitter();

  public abstract io.fabric8.openshift.api.model.SourceControlUser buildCommitter();

  public abstract A withCommitter(io.fabric8.openshift.api.model.SourceControlUser);

  public abstract java.lang.Boolean hasCommitter();

  public abstract A withNewCommitter(java.lang.String, java.lang.String);

  public abstract io.fabric8.openshift.api.model.GitSourceRevisionFluent$CommitterNested<A> withNewCommitter();

  public abstract io.fabric8.openshift.api.model.GitSourceRevisionFluent$CommitterNested<A> withNewCommitterLike(io.fabric8.openshift.api.model.SourceControlUser);

  public abstract io.fabric8.openshift.api.model.GitSourceRevisionFluent$CommitterNested<A> editCommitter();

  public abstract io.fabric8.openshift.api.model.GitSourceRevisionFluent$CommitterNested<A> editOrNewCommitter();

  public abstract io.fabric8.openshift.api.model.GitSourceRevisionFluent$CommitterNested<A> editOrNewCommitterLike(io.fabric8.openshift.api.model.SourceControlUser);

  public abstract java.lang.String getMessage();

  public abstract A withMessage(java.lang.String);

  public abstract java.lang.Boolean hasMessage();

  public abstract A withNewMessage(java.lang.String);

  public abstract A withNewMessage(java.lang.StringBuilder);

  public abstract A withNewMessage(java.lang.StringBuffer);
}
