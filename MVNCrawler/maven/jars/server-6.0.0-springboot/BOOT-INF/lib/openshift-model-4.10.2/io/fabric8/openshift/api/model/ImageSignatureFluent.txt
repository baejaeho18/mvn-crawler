Compiled from "ImageSignatureFluent.java"
public interface io.fabric8.openshift.api.model.ImageSignatureFluent<A extends io.fabric8.openshift.api.model.ImageSignatureFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract A addToConditions(int, io.fabric8.openshift.api.model.SignatureCondition);

  public abstract A setToConditions(int, io.fabric8.openshift.api.model.SignatureCondition);

  public abstract A addToConditions(io.fabric8.openshift.api.model.SignatureCondition...);

  public abstract A addAllToConditions(java.util.Collection<io.fabric8.openshift.api.model.SignatureCondition>);

  public abstract A removeFromConditions(io.fabric8.openshift.api.model.SignatureCondition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.fabric8.openshift.api.model.SignatureCondition>);

  public abstract A removeMatchingFromConditions(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.SignatureConditionBuilder>);

  public abstract java.util.List<io.fabric8.openshift.api.model.SignatureCondition> getConditions();

  public abstract java.util.List<io.fabric8.openshift.api.model.SignatureCondition> buildConditions();

  public abstract io.fabric8.openshift.api.model.SignatureCondition buildCondition(int);

  public abstract io.fabric8.openshift.api.model.SignatureCondition buildFirstCondition();

  public abstract io.fabric8.openshift.api.model.SignatureCondition buildLastCondition();

  public abstract io.fabric8.openshift.api.model.SignatureCondition buildMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.SignatureConditionBuilder>);

  public abstract java.lang.Boolean hasMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.SignatureConditionBuilder>);

  public abstract A withConditions(java.util.List<io.fabric8.openshift.api.model.SignatureCondition>);

  public abstract A withConditions(io.fabric8.openshift.api.model.SignatureCondition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$ConditionsNested<A> addNewCondition();

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$ConditionsNested<A> addNewConditionLike(io.fabric8.openshift.api.model.SignatureCondition);

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$ConditionsNested<A> setNewConditionLike(int, io.fabric8.openshift.api.model.SignatureCondition);

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$ConditionsNested<A> editCondition(int);

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$ConditionsNested<A> editFirstCondition();

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$ConditionsNested<A> editLastCondition();

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$ConditionsNested<A> editMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.SignatureConditionBuilder>);

  public abstract java.lang.String getContent();

  public abstract A withContent(java.lang.String);

  public abstract java.lang.Boolean hasContent();

  public abstract A withNewContent(java.lang.String);

  public abstract A withNewContent(java.lang.StringBuilder);

  public abstract A withNewContent(java.lang.StringBuffer);

  public abstract java.lang.String getCreated();

  public abstract A withCreated(java.lang.String);

  public abstract java.lang.Boolean hasCreated();

  public abstract A withNewCreated(java.lang.String);

  public abstract A withNewCreated(java.lang.StringBuilder);

  public abstract A withNewCreated(java.lang.StringBuffer);

  public abstract java.lang.String getImageIdentity();

  public abstract A withImageIdentity(java.lang.String);

  public abstract java.lang.Boolean hasImageIdentity();

  public abstract A withNewImageIdentity(java.lang.String);

  public abstract A withNewImageIdentity(java.lang.StringBuilder);

  public abstract A withNewImageIdentity(java.lang.StringBuffer);

  public abstract io.fabric8.openshift.api.model.SignatureIssuer getIssuedBy();

  public abstract io.fabric8.openshift.api.model.SignatureIssuer buildIssuedBy();

  public abstract A withIssuedBy(io.fabric8.openshift.api.model.SignatureIssuer);

  public abstract java.lang.Boolean hasIssuedBy();

  public abstract A withNewIssuedBy(java.lang.String, java.lang.String);

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$IssuedByNested<A> withNewIssuedBy();

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$IssuedByNested<A> withNewIssuedByLike(io.fabric8.openshift.api.model.SignatureIssuer);

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$IssuedByNested<A> editIssuedBy();

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$IssuedByNested<A> editOrNewIssuedBy();

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$IssuedByNested<A> editOrNewIssuedByLike(io.fabric8.openshift.api.model.SignatureIssuer);

  public abstract io.fabric8.openshift.api.model.SignatureSubject getIssuedTo();

  public abstract io.fabric8.openshift.api.model.SignatureSubject buildIssuedTo();

  public abstract A withIssuedTo(io.fabric8.openshift.api.model.SignatureSubject);

  public abstract java.lang.Boolean hasIssuedTo();

  public abstract A withNewIssuedTo(java.lang.String, java.lang.String, java.lang.String);

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$IssuedToNested<A> withNewIssuedTo();

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$IssuedToNested<A> withNewIssuedToLike(io.fabric8.openshift.api.model.SignatureSubject);

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$IssuedToNested<A> editIssuedTo();

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$IssuedToNested<A> editOrNewIssuedTo();

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$IssuedToNested<A> editOrNewIssuedToLike(io.fabric8.openshift.api.model.SignatureSubject);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.ObjectMeta getMetadata();

  public abstract io.fabric8.kubernetes.api.model.ObjectMeta buildMetadata();

  public abstract A withMetadata(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Boolean hasMetadata();

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$MetadataNested<A> withNewMetadata();

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$MetadataNested<A> withNewMetadataLike(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$MetadataNested<A> editMetadata();

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$MetadataNested<A> editOrNewMetadata();

  public abstract io.fabric8.openshift.api.model.ImageSignatureFluent$MetadataNested<A> editOrNewMetadataLike(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract A addToSignedClaims(java.lang.String, java.lang.String);

  public abstract A addToSignedClaims(java.util.Map<java.lang.String, java.lang.String>);

  public abstract A removeFromSignedClaims(java.lang.String);

  public abstract A removeFromSignedClaims(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.Map<java.lang.String, java.lang.String> getSignedClaims();

  public abstract A withSignedClaims(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.Boolean hasSignedClaims();

  public abstract java.lang.String getType();

  public abstract A withType(java.lang.String);

  public abstract java.lang.Boolean hasType();

  public abstract A withNewType(java.lang.String);

  public abstract A withNewType(java.lang.StringBuilder);

  public abstract A withNewType(java.lang.StringBuffer);
}
