Compiled from "ImageStreamSpecFluent.java"
public interface io.fabric8.openshift.api.model.ImageStreamSpecFluent<A extends io.fabric8.openshift.api.model.ImageStreamSpecFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getDockerImageRepository();

  public abstract A withDockerImageRepository(java.lang.String);

  public abstract java.lang.Boolean hasDockerImageRepository();

  public abstract A withNewDockerImageRepository(java.lang.String);

  public abstract A withNewDockerImageRepository(java.lang.StringBuilder);

  public abstract A withNewDockerImageRepository(java.lang.StringBuffer);

  public abstract io.fabric8.openshift.api.model.ImageLookupPolicy getLookupPolicy();

  public abstract io.fabric8.openshift.api.model.ImageLookupPolicy buildLookupPolicy();

  public abstract A withLookupPolicy(io.fabric8.openshift.api.model.ImageLookupPolicy);

  public abstract java.lang.Boolean hasLookupPolicy();

  public abstract A withNewLookupPolicy(java.lang.Boolean);

  public abstract io.fabric8.openshift.api.model.ImageStreamSpecFluent$LookupPolicyNested<A> withNewLookupPolicy();

  public abstract io.fabric8.openshift.api.model.ImageStreamSpecFluent$LookupPolicyNested<A> withNewLookupPolicyLike(io.fabric8.openshift.api.model.ImageLookupPolicy);

  public abstract io.fabric8.openshift.api.model.ImageStreamSpecFluent$LookupPolicyNested<A> editLookupPolicy();

  public abstract io.fabric8.openshift.api.model.ImageStreamSpecFluent$LookupPolicyNested<A> editOrNewLookupPolicy();

  public abstract io.fabric8.openshift.api.model.ImageStreamSpecFluent$LookupPolicyNested<A> editOrNewLookupPolicyLike(io.fabric8.openshift.api.model.ImageLookupPolicy);

  public abstract A addToTags(int, io.fabric8.openshift.api.model.TagReference);

  public abstract A setToTags(int, io.fabric8.openshift.api.model.TagReference);

  public abstract A addToTags(io.fabric8.openshift.api.model.TagReference...);

  public abstract A addAllToTags(java.util.Collection<io.fabric8.openshift.api.model.TagReference>);

  public abstract A removeFromTags(io.fabric8.openshift.api.model.TagReference...);

  public abstract A removeAllFromTags(java.util.Collection<io.fabric8.openshift.api.model.TagReference>);

  public abstract A removeMatchingFromTags(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.TagReferenceBuilder>);

  public abstract java.util.List<io.fabric8.openshift.api.model.TagReference> getTags();

  public abstract java.util.List<io.fabric8.openshift.api.model.TagReference> buildTags();

  public abstract io.fabric8.openshift.api.model.TagReference buildTag(int);

  public abstract io.fabric8.openshift.api.model.TagReference buildFirstTag();

  public abstract io.fabric8.openshift.api.model.TagReference buildLastTag();

  public abstract io.fabric8.openshift.api.model.TagReference buildMatchingTag(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.TagReferenceBuilder>);

  public abstract java.lang.Boolean hasMatchingTag(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.TagReferenceBuilder>);

  public abstract A withTags(java.util.List<io.fabric8.openshift.api.model.TagReference>);

  public abstract A withTags(io.fabric8.openshift.api.model.TagReference...);

  public abstract java.lang.Boolean hasTags();

  public abstract io.fabric8.openshift.api.model.ImageStreamSpecFluent$TagsNested<A> addNewTag();

  public abstract io.fabric8.openshift.api.model.ImageStreamSpecFluent$TagsNested<A> addNewTagLike(io.fabric8.openshift.api.model.TagReference);

  public abstract io.fabric8.openshift.api.model.ImageStreamSpecFluent$TagsNested<A> setNewTagLike(int, io.fabric8.openshift.api.model.TagReference);

  public abstract io.fabric8.openshift.api.model.ImageStreamSpecFluent$TagsNested<A> editTag(int);

  public abstract io.fabric8.openshift.api.model.ImageStreamSpecFluent$TagsNested<A> editFirstTag();

  public abstract io.fabric8.openshift.api.model.ImageStreamSpecFluent$TagsNested<A> editLastTag();

  public abstract io.fabric8.openshift.api.model.ImageStreamSpecFluent$TagsNested<A> editMatchingTag(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.TagReferenceBuilder>);
}
