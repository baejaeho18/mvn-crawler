Compiled from "SubjectAccessReviewFluent.java"
public interface io.fabric8.openshift.api.model.SubjectAccessReviewFluent<A extends io.fabric8.openshift.api.model.SubjectAccessReviewFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.HasMetadata getContent();

  public abstract io.fabric8.kubernetes.api.model.HasMetadata buildContent();

  public abstract A withContent(io.fabric8.kubernetes.api.model.HasMetadata);

  public abstract java.lang.Boolean hasContent();

  public abstract A withClusterVersionContent(io.fabric8.openshift.api.model.ClusterVersion);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ClusterVersionContentNested<A> withNewClusterVersionContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ClusterVersionContentNested<A> withNewClusterVersionContentLike(io.fabric8.openshift.api.model.ClusterVersion);

  public abstract A withImageStreamImportContent(io.fabric8.openshift.api.model.ImageStreamImport);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ImageStreamImportContentNested<A> withNewImageStreamImportContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ImageStreamImportContentNested<A> withNewImageStreamImportContentLike(io.fabric8.openshift.api.model.ImageStreamImport);

  public abstract A withDeploymentConfigContent(io.fabric8.openshift.api.model.DeploymentConfig);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$DeploymentConfigContentNested<A> withNewDeploymentConfigContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$DeploymentConfigContentNested<A> withNewDeploymentConfigContentLike(io.fabric8.openshift.api.model.DeploymentConfig);

  public abstract A withOAuthAccessTokenContent(io.fabric8.openshift.api.model.OAuthAccessToken);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$OAuthAccessTokenContentNested<A> withNewOAuthAccessTokenContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$OAuthAccessTokenContentNested<A> withNewOAuthAccessTokenContentLike(io.fabric8.openshift.api.model.OAuthAccessToken);

  public abstract A withRoleBindingContent(io.fabric8.openshift.api.model.RoleBinding);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$RoleBindingContentNested<A> withNewRoleBindingContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$RoleBindingContentNested<A> withNewRoleBindingContentLike(io.fabric8.openshift.api.model.RoleBinding);

  public abstract A withImageContent(io.fabric8.openshift.api.model.Image);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ImageContentNested<A> withNewImageContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ImageContentNested<A> withNewImageContentLike(io.fabric8.openshift.api.model.Image);

  public abstract A withPersistentVolumeClaimContent(io.fabric8.kubernetes.api.model.PersistentVolumeClaim);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$PersistentVolumeClaimContentNested<A> withNewPersistentVolumeClaimContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$PersistentVolumeClaimContentNested<A> withNewPersistentVolumeClaimContentLike(io.fabric8.kubernetes.api.model.PersistentVolumeClaim);

  public abstract A withRoleContent(io.fabric8.openshift.api.model.Role);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$RoleContentNested<A> withNewRoleContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$RoleContentNested<A> withNewRoleContentLike(io.fabric8.openshift.api.model.Role);

  public abstract A withProjectContent(io.fabric8.openshift.api.model.Project);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ProjectContentNested<A> withNewProjectContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ProjectContentNested<A> withNewProjectContentLike(io.fabric8.openshift.api.model.Project);

  public abstract A withBuildConfigContent(io.fabric8.openshift.api.model.BuildConfig);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$BuildConfigContentNested<A> withNewBuildConfigContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$BuildConfigContentNested<A> withNewBuildConfigContentLike(io.fabric8.openshift.api.model.BuildConfig);

  public abstract A withUserContent(io.fabric8.openshift.api.model.User);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$UserContentNested<A> withNewUserContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$UserContentNested<A> withNewUserContentLike(io.fabric8.openshift.api.model.User);

  public abstract A withRouteContent(io.fabric8.openshift.api.model.Route);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$RouteContentNested<A> withNewRouteContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$RouteContentNested<A> withNewRouteContentLike(io.fabric8.openshift.api.model.Route);

  public abstract A withBuildContent(io.fabric8.openshift.api.model.Build);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$BuildContentNested<A> withNewBuildContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$BuildContentNested<A> withNewBuildContentLike(io.fabric8.openshift.api.model.Build);

  public abstract A withOAuthAuthorizeTokenContent(io.fabric8.openshift.api.model.OAuthAuthorizeToken);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$OAuthAuthorizeTokenContentNested<A> withNewOAuthAuthorizeTokenContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$OAuthAuthorizeTokenContentNested<A> withNewOAuthAuthorizeTokenContentLike(io.fabric8.openshift.api.model.OAuthAuthorizeToken);

  public abstract A withRoleBindingRestrictionContent(io.fabric8.openshift.api.model.RoleBindingRestriction);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$RoleBindingRestrictionContentNested<A> withNewRoleBindingRestrictionContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$RoleBindingRestrictionContentNested<A> withNewRoleBindingRestrictionContentLike(io.fabric8.openshift.api.model.RoleBindingRestriction);

  public abstract A withImageStreamTagContent(io.fabric8.openshift.api.model.ImageStreamTag);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ImageStreamTagContentNested<A> withNewImageStreamTagContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ImageStreamTagContentNested<A> withNewImageStreamTagContentLike(io.fabric8.openshift.api.model.ImageStreamTag);

  public abstract A withGroupContent(io.fabric8.openshift.api.model.Group);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$GroupContentNested<A> withNewGroupContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$GroupContentNested<A> withNewGroupContentLike(io.fabric8.openshift.api.model.Group);

  public abstract A withTokenReviewContent(io.fabric8.kubernetes.api.model.authentication.TokenReview);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$TokenReviewContentNested<A> withNewTokenReviewContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$TokenReviewContentNested<A> withNewTokenReviewContentLike(io.fabric8.kubernetes.api.model.authentication.TokenReview);

  public abstract A withImageSignatureContent(io.fabric8.openshift.api.model.ImageSignature);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ImageSignatureContentNested<A> withNewImageSignatureContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ImageSignatureContentNested<A> withNewImageSignatureContentLike(io.fabric8.openshift.api.model.ImageSignature);

  public abstract A withSecurityContextConstraintsContent(io.fabric8.openshift.api.model.SecurityContextConstraints);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$SecurityContextConstraintsContentNested<A> withNewSecurityContextConstraintsContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$SecurityContextConstraintsContentNested<A> withNewSecurityContextConstraintsContentLike(io.fabric8.openshift.api.model.SecurityContextConstraints);

  public abstract A withClusterRoleBindingContent(io.fabric8.openshift.api.model.ClusterRoleBinding);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ClusterRoleBindingContentNested<A> withNewClusterRoleBindingContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ClusterRoleBindingContentNested<A> withNewClusterRoleBindingContentLike(io.fabric8.openshift.api.model.ClusterRoleBinding);

  public abstract A withBuildRequestContent(io.fabric8.openshift.api.model.BuildRequest);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$BuildRequestContentNested<A> withNewBuildRequestContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$BuildRequestContentNested<A> withNewBuildRequestContentLike(io.fabric8.openshift.api.model.BuildRequest);

  public abstract A withNetNamespaceContent(io.fabric8.openshift.api.model.NetNamespace);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$NetNamespaceContentNested<A> withNewNetNamespaceContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$NetNamespaceContentNested<A> withNewNetNamespaceContentLike(io.fabric8.openshift.api.model.NetNamespace);

  public abstract A withImageStreamContent(io.fabric8.openshift.api.model.ImageStream);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ImageStreamContentNested<A> withNewImageStreamContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ImageStreamContentNested<A> withNewImageStreamContentLike(io.fabric8.openshift.api.model.ImageStream);

  public abstract A withProjectRequestContent(io.fabric8.openshift.api.model.ProjectRequest);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ProjectRequestContentNested<A> withNewProjectRequestContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ProjectRequestContentNested<A> withNewProjectRequestContentLike(io.fabric8.openshift.api.model.ProjectRequest);

  public abstract A withTemplateContent(io.fabric8.openshift.api.model.Template);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$TemplateContentNested<A> withNewTemplateContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$TemplateContentNested<A> withNewTemplateContentLike(io.fabric8.openshift.api.model.Template);

  public abstract A withOAuthClientAuthorizationContent(io.fabric8.openshift.api.model.OAuthClientAuthorization);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$OAuthClientAuthorizationContentNested<A> withNewOAuthClientAuthorizationContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$OAuthClientAuthorizationContentNested<A> withNewOAuthClientAuthorizationContentLike(io.fabric8.openshift.api.model.OAuthClientAuthorization);

  public abstract A withOAuthClientContent(io.fabric8.openshift.api.model.OAuthClient);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$OAuthClientContentNested<A> withNewOAuthClientContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$OAuthClientContentNested<A> withNewOAuthClientContentLike(io.fabric8.openshift.api.model.OAuthClient);

  public abstract A withIdentityContent(io.fabric8.openshift.api.model.Identity);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$IdentityContentNested<A> withNewIdentityContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$IdentityContentNested<A> withNewIdentityContentLike(io.fabric8.openshift.api.model.Identity);

  public abstract A withClusterRoleContent(io.fabric8.openshift.api.model.ClusterRole);

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ClusterRoleContentNested<A> withNewClusterRoleContent();

  public abstract io.fabric8.openshift.api.model.SubjectAccessReviewFluent$ClusterRoleContentNested<A> withNewClusterRoleContentLike(io.fabric8.openshift.api.model.ClusterRole);

  public abstract A addToGroups(int, java.lang.String);

  public abstract A setToGroups(int, java.lang.String);

  public abstract A addToGroups(java.lang.String...);

  public abstract A addAllToGroups(java.util.Collection<java.lang.String>);

  public abstract A removeFromGroups(java.lang.String...);

  public abstract A removeAllFromGroups(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getGroups();

  public abstract java.lang.String getGroup(int);

  public abstract java.lang.String getFirstGroup();

  public abstract java.lang.String getLastGroup();

  public abstract java.lang.String getMatchingGroup(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingGroup(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withGroups(java.util.List<java.lang.String>);

  public abstract A withGroups(java.lang.String...);

  public abstract java.lang.Boolean hasGroups();

  public abstract A addNewGroup(java.lang.String);

  public abstract A addNewGroup(java.lang.StringBuilder);

  public abstract A addNewGroup(java.lang.StringBuffer);

  public abstract java.lang.Boolean isIsNonResourceURL();

  public abstract A withIsNonResourceURL(java.lang.Boolean);

  public abstract java.lang.Boolean hasIsNonResourceURL();

  public abstract A withNewIsNonResourceURL(java.lang.String);

  public abstract A withNewIsNonResourceURL(boolean);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract java.lang.String getNamespace();

  public abstract A withNamespace(java.lang.String);

  public abstract java.lang.Boolean hasNamespace();

  public abstract A withNewNamespace(java.lang.String);

  public abstract A withNewNamespace(java.lang.StringBuilder);

  public abstract A withNewNamespace(java.lang.StringBuffer);

  public abstract java.lang.String getPath();

  public abstract A withPath(java.lang.String);

  public abstract java.lang.Boolean hasPath();

  public abstract A withNewPath(java.lang.String);

  public abstract A withNewPath(java.lang.StringBuilder);

  public abstract A withNewPath(java.lang.StringBuffer);

  public abstract java.lang.String getResource();

  public abstract A withResource(java.lang.String);

  public abstract java.lang.Boolean hasResource();

  public abstract A withNewResource(java.lang.String);

  public abstract A withNewResource(java.lang.StringBuilder);

  public abstract A withNewResource(java.lang.StringBuffer);

  public abstract java.lang.String getResourceAPIGroup();

  public abstract A withResourceAPIGroup(java.lang.String);

  public abstract java.lang.Boolean hasResourceAPIGroup();

  public abstract A withNewResourceAPIGroup(java.lang.String);

  public abstract A withNewResourceAPIGroup(java.lang.StringBuilder);

  public abstract A withNewResourceAPIGroup(java.lang.StringBuffer);

  public abstract java.lang.String getResourceAPIVersion();

  public abstract A withResourceAPIVersion(java.lang.String);

  public abstract java.lang.Boolean hasResourceAPIVersion();

  public abstract A withNewResourceAPIVersion(java.lang.String);

  public abstract A withNewResourceAPIVersion(java.lang.StringBuilder);

  public abstract A withNewResourceAPIVersion(java.lang.StringBuffer);

  public abstract java.lang.String getResourceName();

  public abstract A withResourceName(java.lang.String);

  public abstract java.lang.Boolean hasResourceName();

  public abstract A withNewResourceName(java.lang.String);

  public abstract A withNewResourceName(java.lang.StringBuilder);

  public abstract A withNewResourceName(java.lang.StringBuffer);

  public abstract A addToScopes(int, java.lang.String);

  public abstract A setToScopes(int, java.lang.String);

  public abstract A addToScopes(java.lang.String...);

  public abstract A addAllToScopes(java.util.Collection<java.lang.String>);

  public abstract A removeFromScopes(java.lang.String...);

  public abstract A removeAllFromScopes(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getScopes();

  public abstract java.lang.String getScope(int);

  public abstract java.lang.String getFirstScope();

  public abstract java.lang.String getLastScope();

  public abstract java.lang.String getMatchingScope(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingScope(io.fabric8.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withScopes(java.util.List<java.lang.String>);

  public abstract A withScopes(java.lang.String...);

  public abstract java.lang.Boolean hasScopes();

  public abstract A addNewScope(java.lang.String);

  public abstract A addNewScope(java.lang.StringBuilder);

  public abstract A addNewScope(java.lang.StringBuffer);

  public abstract java.lang.String getUser();

  public abstract A withUser(java.lang.String);

  public abstract java.lang.Boolean hasUser();

  public abstract A withNewUser(java.lang.String);

  public abstract A withNewUser(java.lang.StringBuilder);

  public abstract A withNewUser(java.lang.StringBuffer);

  public abstract java.lang.String getVerb();

  public abstract A withVerb(java.lang.String);

  public abstract java.lang.Boolean hasVerb();

  public abstract A withNewVerb(java.lang.String);

  public abstract A withNewVerb(java.lang.StringBuilder);

  public abstract A withNewVerb(java.lang.StringBuffer);
}
