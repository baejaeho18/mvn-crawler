Compiled from "RouteSpecFluent.java"
public interface io.fabric8.openshift.api.model.RouteSpecFluent<A extends io.fabric8.openshift.api.model.RouteSpecFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToAlternateBackends(int, io.fabric8.openshift.api.model.RouteTargetReference);

  public abstract A setToAlternateBackends(int, io.fabric8.openshift.api.model.RouteTargetReference);

  public abstract A addToAlternateBackends(io.fabric8.openshift.api.model.RouteTargetReference...);

  public abstract A addAllToAlternateBackends(java.util.Collection<io.fabric8.openshift.api.model.RouteTargetReference>);

  public abstract A removeFromAlternateBackends(io.fabric8.openshift.api.model.RouteTargetReference...);

  public abstract A removeAllFromAlternateBackends(java.util.Collection<io.fabric8.openshift.api.model.RouteTargetReference>);

  public abstract A removeMatchingFromAlternateBackends(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.RouteTargetReferenceBuilder>);

  public abstract java.util.List<io.fabric8.openshift.api.model.RouteTargetReference> getAlternateBackends();

  public abstract java.util.List<io.fabric8.openshift.api.model.RouteTargetReference> buildAlternateBackends();

  public abstract io.fabric8.openshift.api.model.RouteTargetReference buildAlternateBackend(int);

  public abstract io.fabric8.openshift.api.model.RouteTargetReference buildFirstAlternateBackend();

  public abstract io.fabric8.openshift.api.model.RouteTargetReference buildLastAlternateBackend();

  public abstract io.fabric8.openshift.api.model.RouteTargetReference buildMatchingAlternateBackend(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.RouteTargetReferenceBuilder>);

  public abstract java.lang.Boolean hasMatchingAlternateBackend(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.RouteTargetReferenceBuilder>);

  public abstract A withAlternateBackends(java.util.List<io.fabric8.openshift.api.model.RouteTargetReference>);

  public abstract A withAlternateBackends(io.fabric8.openshift.api.model.RouteTargetReference...);

  public abstract java.lang.Boolean hasAlternateBackends();

  public abstract A addNewAlternateBackend(java.lang.String, java.lang.String, java.lang.Integer);

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$AlternateBackendsNested<A> addNewAlternateBackend();

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$AlternateBackendsNested<A> addNewAlternateBackendLike(io.fabric8.openshift.api.model.RouteTargetReference);

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$AlternateBackendsNested<A> setNewAlternateBackendLike(int, io.fabric8.openshift.api.model.RouteTargetReference);

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$AlternateBackendsNested<A> editAlternateBackend(int);

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$AlternateBackendsNested<A> editFirstAlternateBackend();

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$AlternateBackendsNested<A> editLastAlternateBackend();

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$AlternateBackendsNested<A> editMatchingAlternateBackend(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.RouteTargetReferenceBuilder>);

  public abstract java.lang.String getHost();

  public abstract A withHost(java.lang.String);

  public abstract java.lang.Boolean hasHost();

  public abstract A withNewHost(java.lang.String);

  public abstract A withNewHost(java.lang.StringBuilder);

  public abstract A withNewHost(java.lang.StringBuffer);

  public abstract java.lang.String getPath();

  public abstract A withPath(java.lang.String);

  public abstract java.lang.Boolean hasPath();

  public abstract A withNewPath(java.lang.String);

  public abstract A withNewPath(java.lang.StringBuilder);

  public abstract A withNewPath(java.lang.StringBuffer);

  public abstract io.fabric8.openshift.api.model.RoutePort getPort();

  public abstract io.fabric8.openshift.api.model.RoutePort buildPort();

  public abstract A withPort(io.fabric8.openshift.api.model.RoutePort);

  public abstract java.lang.Boolean hasPort();

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$PortNested<A> withNewPort();

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$PortNested<A> withNewPortLike(io.fabric8.openshift.api.model.RoutePort);

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$PortNested<A> editPort();

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$PortNested<A> editOrNewPort();

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$PortNested<A> editOrNewPortLike(io.fabric8.openshift.api.model.RoutePort);

  public abstract java.lang.String getSubdomain();

  public abstract A withSubdomain(java.lang.String);

  public abstract java.lang.Boolean hasSubdomain();

  public abstract A withNewSubdomain(java.lang.String);

  public abstract A withNewSubdomain(java.lang.StringBuilder);

  public abstract A withNewSubdomain(java.lang.StringBuffer);

  public abstract io.fabric8.openshift.api.model.TLSConfig getTls();

  public abstract io.fabric8.openshift.api.model.TLSConfig buildTls();

  public abstract A withTls(io.fabric8.openshift.api.model.TLSConfig);

  public abstract java.lang.Boolean hasTls();

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$TlsNested<A> withNewTls();

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$TlsNested<A> withNewTlsLike(io.fabric8.openshift.api.model.TLSConfig);

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$TlsNested<A> editTls();

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$TlsNested<A> editOrNewTls();

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$TlsNested<A> editOrNewTlsLike(io.fabric8.openshift.api.model.TLSConfig);

  public abstract io.fabric8.openshift.api.model.RouteTargetReference getTo();

  public abstract io.fabric8.openshift.api.model.RouteTargetReference buildTo();

  public abstract A withTo(io.fabric8.openshift.api.model.RouteTargetReference);

  public abstract java.lang.Boolean hasTo();

  public abstract A withNewTo(java.lang.String, java.lang.String, java.lang.Integer);

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$ToNested<A> withNewTo();

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$ToNested<A> withNewToLike(io.fabric8.openshift.api.model.RouteTargetReference);

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$ToNested<A> editTo();

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$ToNested<A> editOrNewTo();

  public abstract io.fabric8.openshift.api.model.RouteSpecFluent$ToNested<A> editOrNewToLike(io.fabric8.openshift.api.model.RouteTargetReference);

  public abstract java.lang.String getWildcardPolicy();

  public abstract A withWildcardPolicy(java.lang.String);

  public abstract java.lang.Boolean hasWildcardPolicy();

  public abstract A withNewWildcardPolicy(java.lang.String);

  public abstract A withNewWildcardPolicy(java.lang.StringBuilder);

  public abstract A withNewWildcardPolicy(java.lang.StringBuffer);
}
