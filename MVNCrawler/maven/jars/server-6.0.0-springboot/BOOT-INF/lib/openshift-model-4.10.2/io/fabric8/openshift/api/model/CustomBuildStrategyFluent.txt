Compiled from "CustomBuildStrategyFluent.java"
public interface io.fabric8.openshift.api.model.CustomBuildStrategyFluent<A extends io.fabric8.openshift.api.model.CustomBuildStrategyFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getBuildAPIVersion();

  public abstract A withBuildAPIVersion(java.lang.String);

  public abstract java.lang.Boolean hasBuildAPIVersion();

  public abstract A withNewBuildAPIVersion(java.lang.String);

  public abstract A withNewBuildAPIVersion(java.lang.StringBuilder);

  public abstract A withNewBuildAPIVersion(java.lang.StringBuffer);

  public abstract A addToEnv(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A setToEnv(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A addToEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A addAllToEnv(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A removeFromEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A removeAllFromEnv(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.EnvVar> getEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getEnv(int);

  public abstract io.fabric8.kubernetes.api.model.EnvVar getFirstEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getLastEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getMatchingEnv(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.lang.Boolean hasMatchingEnv(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(java.util.List<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract java.lang.Boolean hasEnv();

  public abstract java.lang.Boolean isExposeDockerSocket();

  public abstract A withExposeDockerSocket(java.lang.Boolean);

  public abstract java.lang.Boolean hasExposeDockerSocket();

  public abstract A withNewExposeDockerSocket(java.lang.String);

  public abstract A withNewExposeDockerSocket(boolean);

  public abstract java.lang.Boolean isForcePull();

  public abstract A withForcePull(java.lang.Boolean);

  public abstract java.lang.Boolean hasForcePull();

  public abstract A withNewForcePull(java.lang.String);

  public abstract A withNewForcePull(boolean);

  public abstract io.fabric8.kubernetes.api.model.ObjectReference getFrom();

  public abstract io.fabric8.kubernetes.api.model.ObjectReference buildFrom();

  public abstract A withFrom(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract java.lang.Boolean hasFrom();

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$FromNested<A> withNewFrom();

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$FromNested<A> withNewFromLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$FromNested<A> editFrom();

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$FromNested<A> editOrNewFrom();

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$FromNested<A> editOrNewFromLike(io.fabric8.kubernetes.api.model.ObjectReference);

  public abstract io.fabric8.kubernetes.api.model.LocalObjectReference getPullSecret();

  public abstract io.fabric8.kubernetes.api.model.LocalObjectReference buildPullSecret();

  public abstract A withPullSecret(io.fabric8.kubernetes.api.model.LocalObjectReference);

  public abstract java.lang.Boolean hasPullSecret();

  public abstract A withNewPullSecret(java.lang.String);

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$PullSecretNested<A> withNewPullSecret();

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$PullSecretNested<A> withNewPullSecretLike(io.fabric8.kubernetes.api.model.LocalObjectReference);

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$PullSecretNested<A> editPullSecret();

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$PullSecretNested<A> editOrNewPullSecret();

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$PullSecretNested<A> editOrNewPullSecretLike(io.fabric8.kubernetes.api.model.LocalObjectReference);

  public abstract A addToSecrets(int, io.fabric8.openshift.api.model.SecretSpec);

  public abstract A setToSecrets(int, io.fabric8.openshift.api.model.SecretSpec);

  public abstract A addToSecrets(io.fabric8.openshift.api.model.SecretSpec...);

  public abstract A addAllToSecrets(java.util.Collection<io.fabric8.openshift.api.model.SecretSpec>);

  public abstract A removeFromSecrets(io.fabric8.openshift.api.model.SecretSpec...);

  public abstract A removeAllFromSecrets(java.util.Collection<io.fabric8.openshift.api.model.SecretSpec>);

  public abstract A removeMatchingFromSecrets(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.SecretSpecBuilder>);

  public abstract java.util.List<io.fabric8.openshift.api.model.SecretSpec> getSecrets();

  public abstract java.util.List<io.fabric8.openshift.api.model.SecretSpec> buildSecrets();

  public abstract io.fabric8.openshift.api.model.SecretSpec buildSecret(int);

  public abstract io.fabric8.openshift.api.model.SecretSpec buildFirstSecret();

  public abstract io.fabric8.openshift.api.model.SecretSpec buildLastSecret();

  public abstract io.fabric8.openshift.api.model.SecretSpec buildMatchingSecret(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.SecretSpecBuilder>);

  public abstract java.lang.Boolean hasMatchingSecret(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.SecretSpecBuilder>);

  public abstract A withSecrets(java.util.List<io.fabric8.openshift.api.model.SecretSpec>);

  public abstract A withSecrets(io.fabric8.openshift.api.model.SecretSpec...);

  public abstract java.lang.Boolean hasSecrets();

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$SecretsNested<A> addNewSecret();

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$SecretsNested<A> addNewSecretLike(io.fabric8.openshift.api.model.SecretSpec);

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$SecretsNested<A> setNewSecretLike(int, io.fabric8.openshift.api.model.SecretSpec);

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$SecretsNested<A> editSecret(int);

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$SecretsNested<A> editFirstSecret();

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$SecretsNested<A> editLastSecret();

  public abstract io.fabric8.openshift.api.model.CustomBuildStrategyFluent$SecretsNested<A> editMatchingSecret(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.openshift.api.model.SecretSpecBuilder>);
}
