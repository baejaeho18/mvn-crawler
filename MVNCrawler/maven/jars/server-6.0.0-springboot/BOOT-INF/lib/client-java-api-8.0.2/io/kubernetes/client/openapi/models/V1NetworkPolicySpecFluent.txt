Compiled from "V1NetworkPolicySpecFluent.java"
public interface io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent<A extends io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent<A>> extends io.kubernetes.client.fluent.Fluent<A> {
  public abstract A addToEgress(int, io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule);

  public abstract A setToEgress(int, io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule);

  public abstract A addToEgress(io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule...);

  public abstract A addAllToEgress(java.util.Collection<io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule>);

  public abstract A removeFromEgress(io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule...);

  public abstract A removeAllFromEgress(java.util.Collection<io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule>);

  public abstract A removeMatchingFromEgress(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRuleBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule> getEgress();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule> buildEgress();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule buildEgress(int);

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule buildFirstEgress();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule buildLastEgress();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule buildMatchingEgress(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRuleBuilder>);

  public abstract java.lang.Boolean hasMatchingEgress(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRuleBuilder>);

  public abstract A withEgress(java.util.List<io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule>);

  public abstract A withEgress(io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule...);

  public abstract java.lang.Boolean hasEgress();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$EgressNested<A> addNewEgress();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$EgressNested<A> addNewEgressLike(io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule);

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$EgressNested<A> setNewEgressLike(int, io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRule);

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$EgressNested<A> editEgress(int);

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$EgressNested<A> editFirstEgress();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$EgressNested<A> editLastEgress();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$EgressNested<A> editMatchingEgress(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1NetworkPolicyEgressRuleBuilder>);

  public abstract A addToIngress(int, io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule);

  public abstract A setToIngress(int, io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule);

  public abstract A addToIngress(io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule...);

  public abstract A addAllToIngress(java.util.Collection<io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule>);

  public abstract A removeFromIngress(io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule...);

  public abstract A removeAllFromIngress(java.util.Collection<io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule>);

  public abstract A removeMatchingFromIngress(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRuleBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule> getIngress();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule> buildIngress();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule buildIngress(int);

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule buildFirstIngress();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule buildLastIngress();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule buildMatchingIngress(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRuleBuilder>);

  public abstract java.lang.Boolean hasMatchingIngress(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRuleBuilder>);

  public abstract A withIngress(java.util.List<io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule>);

  public abstract A withIngress(io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule...);

  public abstract java.lang.Boolean hasIngress();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$IngressNested<A> addNewIngress();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$IngressNested<A> addNewIngressLike(io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule);

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$IngressNested<A> setNewIngressLike(int, io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRule);

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$IngressNested<A> editIngress(int);

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$IngressNested<A> editFirstIngress();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$IngressNested<A> editLastIngress();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$IngressNested<A> editMatchingIngress(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1NetworkPolicyIngressRuleBuilder>);

  public abstract io.kubernetes.client.openapi.models.V1LabelSelector getPodSelector();

  public abstract io.kubernetes.client.openapi.models.V1LabelSelector buildPodSelector();

  public abstract A withPodSelector(io.kubernetes.client.openapi.models.V1LabelSelector);

  public abstract java.lang.Boolean hasPodSelector();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$PodSelectorNested<A> withNewPodSelector();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$PodSelectorNested<A> withNewPodSelectorLike(io.kubernetes.client.openapi.models.V1LabelSelector);

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$PodSelectorNested<A> editPodSelector();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$PodSelectorNested<A> editOrNewPodSelector();

  public abstract io.kubernetes.client.openapi.models.V1NetworkPolicySpecFluent$PodSelectorNested<A> editOrNewPodSelectorLike(io.kubernetes.client.openapi.models.V1LabelSelector);

  public abstract A addToPolicyTypes(int, java.lang.String);

  public abstract A setToPolicyTypes(int, java.lang.String);

  public abstract A addToPolicyTypes(java.lang.String...);

  public abstract A addAllToPolicyTypes(java.util.Collection<java.lang.String>);

  public abstract A removeFromPolicyTypes(java.lang.String...);

  public abstract A removeAllFromPolicyTypes(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getPolicyTypes();

  public abstract java.lang.String getPolicyType(int);

  public abstract java.lang.String getFirstPolicyType();

  public abstract java.lang.String getLastPolicyType();

  public abstract java.lang.String getMatchingPolicyType(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingPolicyType(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract A withPolicyTypes(java.util.List<java.lang.String>);

  public abstract A withPolicyTypes(java.lang.String...);

  public abstract java.lang.Boolean hasPolicyTypes();

  public abstract A addNewPolicyType(java.lang.String);

  public abstract A addNewPolicyType(java.lang.StringBuilder);

  public abstract A addNewPolicyType(java.lang.StringBuffer);
}
