Compiled from "V1NodeSelectorFluent.java"
public interface io.kubernetes.client.openapi.models.V1NodeSelectorFluent<A extends io.kubernetes.client.openapi.models.V1NodeSelectorFluent<A>> extends io.kubernetes.client.fluent.Fluent<A> {
  public abstract A addToNodeSelectorTerms(int, io.kubernetes.client.openapi.models.V1NodeSelectorTerm);

  public abstract A setToNodeSelectorTerms(int, io.kubernetes.client.openapi.models.V1NodeSelectorTerm);

  public abstract A addToNodeSelectorTerms(io.kubernetes.client.openapi.models.V1NodeSelectorTerm...);

  public abstract A addAllToNodeSelectorTerms(java.util.Collection<io.kubernetes.client.openapi.models.V1NodeSelectorTerm>);

  public abstract A removeFromNodeSelectorTerms(io.kubernetes.client.openapi.models.V1NodeSelectorTerm...);

  public abstract A removeAllFromNodeSelectorTerms(java.util.Collection<io.kubernetes.client.openapi.models.V1NodeSelectorTerm>);

  public abstract A removeMatchingFromNodeSelectorTerms(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1NodeSelectorTermBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1NodeSelectorTerm> getNodeSelectorTerms();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1NodeSelectorTerm> buildNodeSelectorTerms();

  public abstract io.kubernetes.client.openapi.models.V1NodeSelectorTerm buildNodeSelectorTerm(int);

  public abstract io.kubernetes.client.openapi.models.V1NodeSelectorTerm buildFirstNodeSelectorTerm();

  public abstract io.kubernetes.client.openapi.models.V1NodeSelectorTerm buildLastNodeSelectorTerm();

  public abstract io.kubernetes.client.openapi.models.V1NodeSelectorTerm buildMatchingNodeSelectorTerm(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1NodeSelectorTermBuilder>);

  public abstract java.lang.Boolean hasMatchingNodeSelectorTerm(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1NodeSelectorTermBuilder>);

  public abstract A withNodeSelectorTerms(java.util.List<io.kubernetes.client.openapi.models.V1NodeSelectorTerm>);

  public abstract A withNodeSelectorTerms(io.kubernetes.client.openapi.models.V1NodeSelectorTerm...);

  public abstract java.lang.Boolean hasNodeSelectorTerms();

  public abstract io.kubernetes.client.openapi.models.V1NodeSelectorFluent$NodeSelectorTermsNested<A> addNewNodeSelectorTerm();

  public abstract io.kubernetes.client.openapi.models.V1NodeSelectorFluent$NodeSelectorTermsNested<A> addNewNodeSelectorTermLike(io.kubernetes.client.openapi.models.V1NodeSelectorTerm);

  public abstract io.kubernetes.client.openapi.models.V1NodeSelectorFluent$NodeSelectorTermsNested<A> setNewNodeSelectorTermLike(int, io.kubernetes.client.openapi.models.V1NodeSelectorTerm);

  public abstract io.kubernetes.client.openapi.models.V1NodeSelectorFluent$NodeSelectorTermsNested<A> editNodeSelectorTerm(int);

  public abstract io.kubernetes.client.openapi.models.V1NodeSelectorFluent$NodeSelectorTermsNested<A> editFirstNodeSelectorTerm();

  public abstract io.kubernetes.client.openapi.models.V1NodeSelectorFluent$NodeSelectorTermsNested<A> editLastNodeSelectorTerm();

  public abstract io.kubernetes.client.openapi.models.V1NodeSelectorFluent$NodeSelectorTermsNested<A> editMatchingNodeSelectorTerm(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1NodeSelectorTermBuilder>);
}
