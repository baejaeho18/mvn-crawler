Compiled from "BaseExponent.java"
public class io.kubernetes.client.custom.BaseExponent {
  private final int base;

  private final int exponent;

  private final io.kubernetes.client.custom.Quantity$Format format;

  public io.kubernetes.client.custom.BaseExponent(int, int, io.kubernetes.client.custom.Quantity$Format);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field base:I
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field exponent:I
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field format:Lio/kubernetes/client/custom/Quantity$Format;
      19: return

  public int getBase();
    Code:
       0: aload_0
       1: getfield      #2                  // Field base:I
       4: ireturn

  public int getExponent();
    Code:
       0: aload_0
       1: getfield      #3                  // Field exponent:I
       4: ireturn

  public io.kubernetes.client.custom.Quantity$Format getFormat();
    Code:
       0: aload_0
       1: getfield      #4                  // Field format:Lio/kubernetes/client/custom/Quantity$Format;
       4: areturn

  public java.lang.String toString();
    Code:
       0: new           #5                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #7                  // String BaseExponent{base=
       9: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #2                  // Field base:I
      16: invokevirtual #9                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      19: ldc           #10                 // String , exponent=
      21: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #3                  // Field exponent:I
      28: invokevirtual #9                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: ldc           #11                 // String , format=
      33: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #4                  // Field format:Lio/kubernetes/client/custom/Quantity$Format;
      40: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      43: bipush        125
      45: invokevirtual #13                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      48: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #15                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #15                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #16                 // class io/kubernetes/client/custom/BaseExponent
      28: astore_2
      29: aload_0
      30: getfield      #2                  // Field base:I
      33: aload_2
      34: getfield      #2                  // Field base:I
      37: if_icmpne     66
      40: aload_0
      41: getfield      #3                  // Field exponent:I
      44: aload_2
      45: getfield      #3                  // Field exponent:I
      48: if_icmpne     66
      51: aload_0
      52: getfield      #4                  // Field format:Lio/kubernetes/client/custom/Quantity$Format;
      55: aload_2
      56: getfield      #4                  // Field format:Lio/kubernetes/client/custom/Quantity$Format;
      59: if_acmpne     66
      62: iconst_1
      63: goto          67
      66: iconst_0
      67: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method toString:()Ljava/lang/String;
       4: invokevirtual #18                 // Method java/lang/String.hashCode:()I
       7: ireturn
}
