Compiled from "V1PersistentVolumeSpecFluent.java"
public interface io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent<A extends io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent<A>> extends io.kubernetes.client.fluent.Fluent<A> {
  public abstract A addToAccessModes(int, java.lang.String);

  public abstract A setToAccessModes(int, java.lang.String);

  public abstract A addToAccessModes(java.lang.String...);

  public abstract A addAllToAccessModes(java.util.Collection<java.lang.String>);

  public abstract A removeFromAccessModes(java.lang.String...);

  public abstract A removeAllFromAccessModes(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getAccessModes();

  public abstract java.lang.String getAccessMode(int);

  public abstract java.lang.String getFirstAccessMode();

  public abstract java.lang.String getLastAccessMode();

  public abstract java.lang.String getMatchingAccessMode(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingAccessMode(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract A withAccessModes(java.util.List<java.lang.String>);

  public abstract A withAccessModes(java.lang.String...);

  public abstract java.lang.Boolean hasAccessModes();

  public abstract A addNewAccessMode(java.lang.String);

  public abstract A addNewAccessMode(java.lang.StringBuilder);

  public abstract A addNewAccessMode(java.lang.StringBuffer);

  public abstract io.kubernetes.client.openapi.models.V1AWSElasticBlockStoreVolumeSource getAwsElasticBlockStore();

  public abstract io.kubernetes.client.openapi.models.V1AWSElasticBlockStoreVolumeSource buildAwsElasticBlockStore();

  public abstract A withAwsElasticBlockStore(io.kubernetes.client.openapi.models.V1AWSElasticBlockStoreVolumeSource);

  public abstract java.lang.Boolean hasAwsElasticBlockStore();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AwsElasticBlockStoreNested<A> withNewAwsElasticBlockStore();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AwsElasticBlockStoreNested<A> withNewAwsElasticBlockStoreLike(io.kubernetes.client.openapi.models.V1AWSElasticBlockStoreVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AwsElasticBlockStoreNested<A> editAwsElasticBlockStore();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AwsElasticBlockStoreNested<A> editOrNewAwsElasticBlockStore();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AwsElasticBlockStoreNested<A> editOrNewAwsElasticBlockStoreLike(io.kubernetes.client.openapi.models.V1AWSElasticBlockStoreVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1AzureDiskVolumeSource getAzureDisk();

  public abstract io.kubernetes.client.openapi.models.V1AzureDiskVolumeSource buildAzureDisk();

  public abstract A withAzureDisk(io.kubernetes.client.openapi.models.V1AzureDiskVolumeSource);

  public abstract java.lang.Boolean hasAzureDisk();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AzureDiskNested<A> withNewAzureDisk();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AzureDiskNested<A> withNewAzureDiskLike(io.kubernetes.client.openapi.models.V1AzureDiskVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AzureDiskNested<A> editAzureDisk();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AzureDiskNested<A> editOrNewAzureDisk();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AzureDiskNested<A> editOrNewAzureDiskLike(io.kubernetes.client.openapi.models.V1AzureDiskVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1AzureFilePersistentVolumeSource getAzureFile();

  public abstract io.kubernetes.client.openapi.models.V1AzureFilePersistentVolumeSource buildAzureFile();

  public abstract A withAzureFile(io.kubernetes.client.openapi.models.V1AzureFilePersistentVolumeSource);

  public abstract java.lang.Boolean hasAzureFile();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AzureFileNested<A> withNewAzureFile();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AzureFileNested<A> withNewAzureFileLike(io.kubernetes.client.openapi.models.V1AzureFilePersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AzureFileNested<A> editAzureFile();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AzureFileNested<A> editOrNewAzureFile();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$AzureFileNested<A> editOrNewAzureFileLike(io.kubernetes.client.openapi.models.V1AzureFilePersistentVolumeSource);

  public abstract A addToCapacity(java.lang.String, io.kubernetes.client.custom.Quantity);

  public abstract A addToCapacity(java.util.Map<java.lang.String, io.kubernetes.client.custom.Quantity>);

  public abstract A removeFromCapacity(java.lang.String);

  public abstract A removeFromCapacity(java.util.Map<java.lang.String, io.kubernetes.client.custom.Quantity>);

  public abstract java.util.Map<java.lang.String, io.kubernetes.client.custom.Quantity> getCapacity();

  public abstract A withCapacity(java.util.Map<java.lang.String, io.kubernetes.client.custom.Quantity>);

  public abstract java.lang.Boolean hasCapacity();

  public abstract io.kubernetes.client.openapi.models.V1CephFSPersistentVolumeSource getCephfs();

  public abstract io.kubernetes.client.openapi.models.V1CephFSPersistentVolumeSource buildCephfs();

  public abstract A withCephfs(io.kubernetes.client.openapi.models.V1CephFSPersistentVolumeSource);

  public abstract java.lang.Boolean hasCephfs();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CephfsNested<A> withNewCephfs();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CephfsNested<A> withNewCephfsLike(io.kubernetes.client.openapi.models.V1CephFSPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CephfsNested<A> editCephfs();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CephfsNested<A> editOrNewCephfs();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CephfsNested<A> editOrNewCephfsLike(io.kubernetes.client.openapi.models.V1CephFSPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1CinderPersistentVolumeSource getCinder();

  public abstract io.kubernetes.client.openapi.models.V1CinderPersistentVolumeSource buildCinder();

  public abstract A withCinder(io.kubernetes.client.openapi.models.V1CinderPersistentVolumeSource);

  public abstract java.lang.Boolean hasCinder();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CinderNested<A> withNewCinder();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CinderNested<A> withNewCinderLike(io.kubernetes.client.openapi.models.V1CinderPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CinderNested<A> editCinder();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CinderNested<A> editOrNewCinder();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CinderNested<A> editOrNewCinderLike(io.kubernetes.client.openapi.models.V1CinderPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1ObjectReference getClaimRef();

  public abstract io.kubernetes.client.openapi.models.V1ObjectReference buildClaimRef();

  public abstract A withClaimRef(io.kubernetes.client.openapi.models.V1ObjectReference);

  public abstract java.lang.Boolean hasClaimRef();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$ClaimRefNested<A> withNewClaimRef();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$ClaimRefNested<A> withNewClaimRefLike(io.kubernetes.client.openapi.models.V1ObjectReference);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$ClaimRefNested<A> editClaimRef();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$ClaimRefNested<A> editOrNewClaimRef();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$ClaimRefNested<A> editOrNewClaimRefLike(io.kubernetes.client.openapi.models.V1ObjectReference);

  public abstract io.kubernetes.client.openapi.models.V1CSIPersistentVolumeSource getCsi();

  public abstract io.kubernetes.client.openapi.models.V1CSIPersistentVolumeSource buildCsi();

  public abstract A withCsi(io.kubernetes.client.openapi.models.V1CSIPersistentVolumeSource);

  public abstract java.lang.Boolean hasCsi();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CsiNested<A> withNewCsi();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CsiNested<A> withNewCsiLike(io.kubernetes.client.openapi.models.V1CSIPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CsiNested<A> editCsi();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CsiNested<A> editOrNewCsi();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$CsiNested<A> editOrNewCsiLike(io.kubernetes.client.openapi.models.V1CSIPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1FCVolumeSource getFc();

  public abstract io.kubernetes.client.openapi.models.V1FCVolumeSource buildFc();

  public abstract A withFc(io.kubernetes.client.openapi.models.V1FCVolumeSource);

  public abstract java.lang.Boolean hasFc();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FcNested<A> withNewFc();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FcNested<A> withNewFcLike(io.kubernetes.client.openapi.models.V1FCVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FcNested<A> editFc();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FcNested<A> editOrNewFc();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FcNested<A> editOrNewFcLike(io.kubernetes.client.openapi.models.V1FCVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1FlexPersistentVolumeSource getFlexVolume();

  public abstract io.kubernetes.client.openapi.models.V1FlexPersistentVolumeSource buildFlexVolume();

  public abstract A withFlexVolume(io.kubernetes.client.openapi.models.V1FlexPersistentVolumeSource);

  public abstract java.lang.Boolean hasFlexVolume();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FlexVolumeNested<A> withNewFlexVolume();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FlexVolumeNested<A> withNewFlexVolumeLike(io.kubernetes.client.openapi.models.V1FlexPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FlexVolumeNested<A> editFlexVolume();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FlexVolumeNested<A> editOrNewFlexVolume();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FlexVolumeNested<A> editOrNewFlexVolumeLike(io.kubernetes.client.openapi.models.V1FlexPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1FlockerVolumeSource getFlocker();

  public abstract io.kubernetes.client.openapi.models.V1FlockerVolumeSource buildFlocker();

  public abstract A withFlocker(io.kubernetes.client.openapi.models.V1FlockerVolumeSource);

  public abstract java.lang.Boolean hasFlocker();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FlockerNested<A> withNewFlocker();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FlockerNested<A> withNewFlockerLike(io.kubernetes.client.openapi.models.V1FlockerVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FlockerNested<A> editFlocker();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FlockerNested<A> editOrNewFlocker();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$FlockerNested<A> editOrNewFlockerLike(io.kubernetes.client.openapi.models.V1FlockerVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1GCEPersistentDiskVolumeSource getGcePersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1GCEPersistentDiskVolumeSource buildGcePersistentDisk();

  public abstract A withGcePersistentDisk(io.kubernetes.client.openapi.models.V1GCEPersistentDiskVolumeSource);

  public abstract java.lang.Boolean hasGcePersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$GcePersistentDiskNested<A> withNewGcePersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$GcePersistentDiskNested<A> withNewGcePersistentDiskLike(io.kubernetes.client.openapi.models.V1GCEPersistentDiskVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$GcePersistentDiskNested<A> editGcePersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$GcePersistentDiskNested<A> editOrNewGcePersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$GcePersistentDiskNested<A> editOrNewGcePersistentDiskLike(io.kubernetes.client.openapi.models.V1GCEPersistentDiskVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1GlusterfsPersistentVolumeSource getGlusterfs();

  public abstract io.kubernetes.client.openapi.models.V1GlusterfsPersistentVolumeSource buildGlusterfs();

  public abstract A withGlusterfs(io.kubernetes.client.openapi.models.V1GlusterfsPersistentVolumeSource);

  public abstract java.lang.Boolean hasGlusterfs();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$GlusterfsNested<A> withNewGlusterfs();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$GlusterfsNested<A> withNewGlusterfsLike(io.kubernetes.client.openapi.models.V1GlusterfsPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$GlusterfsNested<A> editGlusterfs();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$GlusterfsNested<A> editOrNewGlusterfs();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$GlusterfsNested<A> editOrNewGlusterfsLike(io.kubernetes.client.openapi.models.V1GlusterfsPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1HostPathVolumeSource getHostPath();

  public abstract io.kubernetes.client.openapi.models.V1HostPathVolumeSource buildHostPath();

  public abstract A withHostPath(io.kubernetes.client.openapi.models.V1HostPathVolumeSource);

  public abstract java.lang.Boolean hasHostPath();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$HostPathNested<A> withNewHostPath();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$HostPathNested<A> withNewHostPathLike(io.kubernetes.client.openapi.models.V1HostPathVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$HostPathNested<A> editHostPath();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$HostPathNested<A> editOrNewHostPath();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$HostPathNested<A> editOrNewHostPathLike(io.kubernetes.client.openapi.models.V1HostPathVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1ISCSIPersistentVolumeSource getIscsi();

  public abstract io.kubernetes.client.openapi.models.V1ISCSIPersistentVolumeSource buildIscsi();

  public abstract A withIscsi(io.kubernetes.client.openapi.models.V1ISCSIPersistentVolumeSource);

  public abstract java.lang.Boolean hasIscsi();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$IscsiNested<A> withNewIscsi();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$IscsiNested<A> withNewIscsiLike(io.kubernetes.client.openapi.models.V1ISCSIPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$IscsiNested<A> editIscsi();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$IscsiNested<A> editOrNewIscsi();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$IscsiNested<A> editOrNewIscsiLike(io.kubernetes.client.openapi.models.V1ISCSIPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1LocalVolumeSource getLocal();

  public abstract io.kubernetes.client.openapi.models.V1LocalVolumeSource buildLocal();

  public abstract A withLocal(io.kubernetes.client.openapi.models.V1LocalVolumeSource);

  public abstract java.lang.Boolean hasLocal();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$LocalNested<A> withNewLocal();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$LocalNested<A> withNewLocalLike(io.kubernetes.client.openapi.models.V1LocalVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$LocalNested<A> editLocal();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$LocalNested<A> editOrNewLocal();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$LocalNested<A> editOrNewLocalLike(io.kubernetes.client.openapi.models.V1LocalVolumeSource);

  public abstract A addToMountOptions(int, java.lang.String);

  public abstract A setToMountOptions(int, java.lang.String);

  public abstract A addToMountOptions(java.lang.String...);

  public abstract A addAllToMountOptions(java.util.Collection<java.lang.String>);

  public abstract A removeFromMountOptions(java.lang.String...);

  public abstract A removeAllFromMountOptions(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getMountOptions();

  public abstract java.lang.String getMountOption(int);

  public abstract java.lang.String getFirstMountOption();

  public abstract java.lang.String getLastMountOption();

  public abstract java.lang.String getMatchingMountOption(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingMountOption(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract A withMountOptions(java.util.List<java.lang.String>);

  public abstract A withMountOptions(java.lang.String...);

  public abstract java.lang.Boolean hasMountOptions();

  public abstract A addNewMountOption(java.lang.String);

  public abstract A addNewMountOption(java.lang.StringBuilder);

  public abstract A addNewMountOption(java.lang.StringBuffer);

  public abstract io.kubernetes.client.openapi.models.V1NFSVolumeSource getNfs();

  public abstract io.kubernetes.client.openapi.models.V1NFSVolumeSource buildNfs();

  public abstract A withNfs(io.kubernetes.client.openapi.models.V1NFSVolumeSource);

  public abstract java.lang.Boolean hasNfs();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$NfsNested<A> withNewNfs();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$NfsNested<A> withNewNfsLike(io.kubernetes.client.openapi.models.V1NFSVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$NfsNested<A> editNfs();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$NfsNested<A> editOrNewNfs();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$NfsNested<A> editOrNewNfsLike(io.kubernetes.client.openapi.models.V1NFSVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeNodeAffinity getNodeAffinity();

  public abstract io.kubernetes.client.openapi.models.V1VolumeNodeAffinity buildNodeAffinity();

  public abstract A withNodeAffinity(io.kubernetes.client.openapi.models.V1VolumeNodeAffinity);

  public abstract java.lang.Boolean hasNodeAffinity();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$NodeAffinityNested<A> withNewNodeAffinity();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$NodeAffinityNested<A> withNewNodeAffinityLike(io.kubernetes.client.openapi.models.V1VolumeNodeAffinity);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$NodeAffinityNested<A> editNodeAffinity();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$NodeAffinityNested<A> editOrNewNodeAffinity();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$NodeAffinityNested<A> editOrNewNodeAffinityLike(io.kubernetes.client.openapi.models.V1VolumeNodeAffinity);

  public abstract java.lang.String getPersistentVolumeReclaimPolicy();

  public abstract A withPersistentVolumeReclaimPolicy(java.lang.String);

  public abstract java.lang.Boolean hasPersistentVolumeReclaimPolicy();

  public abstract A withNewPersistentVolumeReclaimPolicy(java.lang.String);

  public abstract A withNewPersistentVolumeReclaimPolicy(java.lang.StringBuilder);

  public abstract A withNewPersistentVolumeReclaimPolicy(java.lang.StringBuffer);

  public abstract io.kubernetes.client.openapi.models.V1PhotonPersistentDiskVolumeSource getPhotonPersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1PhotonPersistentDiskVolumeSource buildPhotonPersistentDisk();

  public abstract A withPhotonPersistentDisk(io.kubernetes.client.openapi.models.V1PhotonPersistentDiskVolumeSource);

  public abstract java.lang.Boolean hasPhotonPersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$PhotonPersistentDiskNested<A> withNewPhotonPersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$PhotonPersistentDiskNested<A> withNewPhotonPersistentDiskLike(io.kubernetes.client.openapi.models.V1PhotonPersistentDiskVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$PhotonPersistentDiskNested<A> editPhotonPersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$PhotonPersistentDiskNested<A> editOrNewPhotonPersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$PhotonPersistentDiskNested<A> editOrNewPhotonPersistentDiskLike(io.kubernetes.client.openapi.models.V1PhotonPersistentDiskVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PortworxVolumeSource getPortworxVolume();

  public abstract io.kubernetes.client.openapi.models.V1PortworxVolumeSource buildPortworxVolume();

  public abstract A withPortworxVolume(io.kubernetes.client.openapi.models.V1PortworxVolumeSource);

  public abstract java.lang.Boolean hasPortworxVolume();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$PortworxVolumeNested<A> withNewPortworxVolume();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$PortworxVolumeNested<A> withNewPortworxVolumeLike(io.kubernetes.client.openapi.models.V1PortworxVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$PortworxVolumeNested<A> editPortworxVolume();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$PortworxVolumeNested<A> editOrNewPortworxVolume();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$PortworxVolumeNested<A> editOrNewPortworxVolumeLike(io.kubernetes.client.openapi.models.V1PortworxVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1QuobyteVolumeSource getQuobyte();

  public abstract io.kubernetes.client.openapi.models.V1QuobyteVolumeSource buildQuobyte();

  public abstract A withQuobyte(io.kubernetes.client.openapi.models.V1QuobyteVolumeSource);

  public abstract java.lang.Boolean hasQuobyte();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$QuobyteNested<A> withNewQuobyte();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$QuobyteNested<A> withNewQuobyteLike(io.kubernetes.client.openapi.models.V1QuobyteVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$QuobyteNested<A> editQuobyte();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$QuobyteNested<A> editOrNewQuobyte();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$QuobyteNested<A> editOrNewQuobyteLike(io.kubernetes.client.openapi.models.V1QuobyteVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1RBDPersistentVolumeSource getRbd();

  public abstract io.kubernetes.client.openapi.models.V1RBDPersistentVolumeSource buildRbd();

  public abstract A withRbd(io.kubernetes.client.openapi.models.V1RBDPersistentVolumeSource);

  public abstract java.lang.Boolean hasRbd();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$RbdNested<A> withNewRbd();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$RbdNested<A> withNewRbdLike(io.kubernetes.client.openapi.models.V1RBDPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$RbdNested<A> editRbd();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$RbdNested<A> editOrNewRbd();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$RbdNested<A> editOrNewRbdLike(io.kubernetes.client.openapi.models.V1RBDPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1ScaleIOPersistentVolumeSource getScaleIO();

  public abstract io.kubernetes.client.openapi.models.V1ScaleIOPersistentVolumeSource buildScaleIO();

  public abstract A withScaleIO(io.kubernetes.client.openapi.models.V1ScaleIOPersistentVolumeSource);

  public abstract java.lang.Boolean hasScaleIO();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$ScaleIONested<A> withNewScaleIO();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$ScaleIONested<A> withNewScaleIOLike(io.kubernetes.client.openapi.models.V1ScaleIOPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$ScaleIONested<A> editScaleIO();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$ScaleIONested<A> editOrNewScaleIO();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$ScaleIONested<A> editOrNewScaleIOLike(io.kubernetes.client.openapi.models.V1ScaleIOPersistentVolumeSource);

  public abstract java.lang.String getStorageClassName();

  public abstract A withStorageClassName(java.lang.String);

  public abstract java.lang.Boolean hasStorageClassName();

  public abstract A withNewStorageClassName(java.lang.String);

  public abstract A withNewStorageClassName(java.lang.StringBuilder);

  public abstract A withNewStorageClassName(java.lang.StringBuffer);

  public abstract io.kubernetes.client.openapi.models.V1StorageOSPersistentVolumeSource getStorageos();

  public abstract io.kubernetes.client.openapi.models.V1StorageOSPersistentVolumeSource buildStorageos();

  public abstract A withStorageos(io.kubernetes.client.openapi.models.V1StorageOSPersistentVolumeSource);

  public abstract java.lang.Boolean hasStorageos();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$StorageosNested<A> withNewStorageos();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$StorageosNested<A> withNewStorageosLike(io.kubernetes.client.openapi.models.V1StorageOSPersistentVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$StorageosNested<A> editStorageos();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$StorageosNested<A> editOrNewStorageos();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$StorageosNested<A> editOrNewStorageosLike(io.kubernetes.client.openapi.models.V1StorageOSPersistentVolumeSource);

  public abstract java.lang.String getVolumeMode();

  public abstract A withVolumeMode(java.lang.String);

  public abstract java.lang.Boolean hasVolumeMode();

  public abstract A withNewVolumeMode(java.lang.String);

  public abstract A withNewVolumeMode(java.lang.StringBuilder);

  public abstract A withNewVolumeMode(java.lang.StringBuffer);

  public abstract io.kubernetes.client.openapi.models.V1VsphereVirtualDiskVolumeSource getVsphereVolume();

  public abstract io.kubernetes.client.openapi.models.V1VsphereVirtualDiskVolumeSource buildVsphereVolume();

  public abstract A withVsphereVolume(io.kubernetes.client.openapi.models.V1VsphereVirtualDiskVolumeSource);

  public abstract java.lang.Boolean hasVsphereVolume();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$VsphereVolumeNested<A> withNewVsphereVolume();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$VsphereVolumeNested<A> withNewVsphereVolumeLike(io.kubernetes.client.openapi.models.V1VsphereVirtualDiskVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$VsphereVolumeNested<A> editVsphereVolume();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$VsphereVolumeNested<A> editOrNewVsphereVolume();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeSpecFluent$VsphereVolumeNested<A> editOrNewVsphereVolumeLike(io.kubernetes.client.openapi.models.V1VsphereVirtualDiskVolumeSource);
}
