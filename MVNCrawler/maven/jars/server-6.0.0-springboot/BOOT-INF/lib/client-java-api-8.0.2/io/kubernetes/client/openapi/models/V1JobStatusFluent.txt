Compiled from "V1JobStatusFluent.java"
public interface io.kubernetes.client.openapi.models.V1JobStatusFluent<A extends io.kubernetes.client.openapi.models.V1JobStatusFluent<A>> extends io.kubernetes.client.fluent.Fluent<A> {
  public abstract java.lang.Integer getActive();

  public abstract A withActive(java.lang.Integer);

  public abstract java.lang.Boolean hasActive();

  public abstract org.joda.time.DateTime getCompletionTime();

  public abstract A withCompletionTime(org.joda.time.DateTime);

  public abstract java.lang.Boolean hasCompletionTime();

  public abstract A withNewCompletionTime(int, int, int, int, int);

  public abstract A withNewCompletionTime(java.lang.Object);

  public abstract A withNewCompletionTime(long);

  public abstract A addToConditions(int, io.kubernetes.client.openapi.models.V1JobCondition);

  public abstract A setToConditions(int, io.kubernetes.client.openapi.models.V1JobCondition);

  public abstract A addToConditions(io.kubernetes.client.openapi.models.V1JobCondition...);

  public abstract A addAllToConditions(java.util.Collection<io.kubernetes.client.openapi.models.V1JobCondition>);

  public abstract A removeFromConditions(io.kubernetes.client.openapi.models.V1JobCondition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.kubernetes.client.openapi.models.V1JobCondition>);

  public abstract A removeMatchingFromConditions(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1JobConditionBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1JobCondition> getConditions();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1JobCondition> buildConditions();

  public abstract io.kubernetes.client.openapi.models.V1JobCondition buildCondition(int);

  public abstract io.kubernetes.client.openapi.models.V1JobCondition buildFirstCondition();

  public abstract io.kubernetes.client.openapi.models.V1JobCondition buildLastCondition();

  public abstract io.kubernetes.client.openapi.models.V1JobCondition buildMatchingCondition(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1JobConditionBuilder>);

  public abstract java.lang.Boolean hasMatchingCondition(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1JobConditionBuilder>);

  public abstract A withConditions(java.util.List<io.kubernetes.client.openapi.models.V1JobCondition>);

  public abstract A withConditions(io.kubernetes.client.openapi.models.V1JobCondition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract io.kubernetes.client.openapi.models.V1JobStatusFluent$ConditionsNested<A> addNewCondition();

  public abstract io.kubernetes.client.openapi.models.V1JobStatusFluent$ConditionsNested<A> addNewConditionLike(io.kubernetes.client.openapi.models.V1JobCondition);

  public abstract io.kubernetes.client.openapi.models.V1JobStatusFluent$ConditionsNested<A> setNewConditionLike(int, io.kubernetes.client.openapi.models.V1JobCondition);

  public abstract io.kubernetes.client.openapi.models.V1JobStatusFluent$ConditionsNested<A> editCondition(int);

  public abstract io.kubernetes.client.openapi.models.V1JobStatusFluent$ConditionsNested<A> editFirstCondition();

  public abstract io.kubernetes.client.openapi.models.V1JobStatusFluent$ConditionsNested<A> editLastCondition();

  public abstract io.kubernetes.client.openapi.models.V1JobStatusFluent$ConditionsNested<A> editMatchingCondition(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1JobConditionBuilder>);

  public abstract java.lang.Integer getFailed();

  public abstract A withFailed(java.lang.Integer);

  public abstract java.lang.Boolean hasFailed();

  public abstract org.joda.time.DateTime getStartTime();

  public abstract A withStartTime(org.joda.time.DateTime);

  public abstract java.lang.Boolean hasStartTime();

  public abstract A withNewStartTime(int, int, int, int, int);

  public abstract A withNewStartTime(java.lang.Object);

  public abstract A withNewStartTime(long);

  public abstract java.lang.Integer getSucceeded();

  public abstract A withSucceeded(java.lang.Integer);

  public abstract java.lang.Boolean hasSucceeded();
}
