Compiled from "V1PodSecurityContextFluent.java"
public interface io.kubernetes.client.openapi.models.V1PodSecurityContextFluent<A extends io.kubernetes.client.openapi.models.V1PodSecurityContextFluent<A>> extends io.kubernetes.client.fluent.Fluent<A> {
  public abstract java.lang.Long getFsGroup();

  public abstract A withFsGroup(java.lang.Long);

  public abstract java.lang.Boolean hasFsGroup();

  public abstract java.lang.Long getRunAsGroup();

  public abstract A withRunAsGroup(java.lang.Long);

  public abstract java.lang.Boolean hasRunAsGroup();

  public abstract java.lang.Boolean isRunAsNonRoot();

  public abstract A withRunAsNonRoot(java.lang.Boolean);

  public abstract java.lang.Boolean hasRunAsNonRoot();

  public abstract A withNewRunAsNonRoot(java.lang.String);

  public abstract A withNewRunAsNonRoot(boolean);

  public abstract java.lang.Long getRunAsUser();

  public abstract A withRunAsUser(java.lang.Long);

  public abstract java.lang.Boolean hasRunAsUser();

  public abstract io.kubernetes.client.openapi.models.V1SELinuxOptions getSeLinuxOptions();

  public abstract io.kubernetes.client.openapi.models.V1SELinuxOptions buildSeLinuxOptions();

  public abstract A withSeLinuxOptions(io.kubernetes.client.openapi.models.V1SELinuxOptions);

  public abstract java.lang.Boolean hasSeLinuxOptions();

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$SeLinuxOptionsNested<A> withNewSeLinuxOptions();

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$SeLinuxOptionsNested<A> withNewSeLinuxOptionsLike(io.kubernetes.client.openapi.models.V1SELinuxOptions);

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$SeLinuxOptionsNested<A> editSeLinuxOptions();

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$SeLinuxOptionsNested<A> editOrNewSeLinuxOptions();

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$SeLinuxOptionsNested<A> editOrNewSeLinuxOptionsLike(io.kubernetes.client.openapi.models.V1SELinuxOptions);

  public abstract A addToSupplementalGroups(int, java.lang.Long);

  public abstract A setToSupplementalGroups(int, java.lang.Long);

  public abstract A addToSupplementalGroups(java.lang.Long...);

  public abstract A addAllToSupplementalGroups(java.util.Collection<java.lang.Long>);

  public abstract A removeFromSupplementalGroups(java.lang.Long...);

  public abstract A removeAllFromSupplementalGroups(java.util.Collection<java.lang.Long>);

  public abstract java.util.List<java.lang.Long> getSupplementalGroups();

  public abstract java.lang.Long getSupplementalGroup(int);

  public abstract java.lang.Long getFirstSupplementalGroup();

  public abstract java.lang.Long getLastSupplementalGroup();

  public abstract java.lang.Long getMatchingSupplementalGroup(io.kubernetes.client.fluent.Predicate<java.lang.Long>);

  public abstract java.lang.Boolean hasMatchingSupplementalGroup(io.kubernetes.client.fluent.Predicate<java.lang.Long>);

  public abstract A withSupplementalGroups(java.util.List<java.lang.Long>);

  public abstract A withSupplementalGroups(java.lang.Long...);

  public abstract java.lang.Boolean hasSupplementalGroups();

  public abstract A addToSysctls(int, io.kubernetes.client.openapi.models.V1Sysctl);

  public abstract A setToSysctls(int, io.kubernetes.client.openapi.models.V1Sysctl);

  public abstract A addToSysctls(io.kubernetes.client.openapi.models.V1Sysctl...);

  public abstract A addAllToSysctls(java.util.Collection<io.kubernetes.client.openapi.models.V1Sysctl>);

  public abstract A removeFromSysctls(io.kubernetes.client.openapi.models.V1Sysctl...);

  public abstract A removeAllFromSysctls(java.util.Collection<io.kubernetes.client.openapi.models.V1Sysctl>);

  public abstract A removeMatchingFromSysctls(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1SysctlBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1Sysctl> getSysctls();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1Sysctl> buildSysctls();

  public abstract io.kubernetes.client.openapi.models.V1Sysctl buildSysctl(int);

  public abstract io.kubernetes.client.openapi.models.V1Sysctl buildFirstSysctl();

  public abstract io.kubernetes.client.openapi.models.V1Sysctl buildLastSysctl();

  public abstract io.kubernetes.client.openapi.models.V1Sysctl buildMatchingSysctl(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1SysctlBuilder>);

  public abstract java.lang.Boolean hasMatchingSysctl(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1SysctlBuilder>);

  public abstract A withSysctls(java.util.List<io.kubernetes.client.openapi.models.V1Sysctl>);

  public abstract A withSysctls(io.kubernetes.client.openapi.models.V1Sysctl...);

  public abstract java.lang.Boolean hasSysctls();

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$SysctlsNested<A> addNewSysctl();

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$SysctlsNested<A> addNewSysctlLike(io.kubernetes.client.openapi.models.V1Sysctl);

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$SysctlsNested<A> setNewSysctlLike(int, io.kubernetes.client.openapi.models.V1Sysctl);

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$SysctlsNested<A> editSysctl(int);

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$SysctlsNested<A> editFirstSysctl();

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$SysctlsNested<A> editLastSysctl();

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$SysctlsNested<A> editMatchingSysctl(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1SysctlBuilder>);

  public abstract io.kubernetes.client.openapi.models.V1WindowsSecurityContextOptions getWindowsOptions();

  public abstract io.kubernetes.client.openapi.models.V1WindowsSecurityContextOptions buildWindowsOptions();

  public abstract A withWindowsOptions(io.kubernetes.client.openapi.models.V1WindowsSecurityContextOptions);

  public abstract java.lang.Boolean hasWindowsOptions();

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$WindowsOptionsNested<A> withNewWindowsOptions();

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$WindowsOptionsNested<A> withNewWindowsOptionsLike(io.kubernetes.client.openapi.models.V1WindowsSecurityContextOptions);

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$WindowsOptionsNested<A> editWindowsOptions();

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$WindowsOptionsNested<A> editOrNewWindowsOptions();

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContextFluent$WindowsOptionsNested<A> editOrNewWindowsOptionsLike(io.kubernetes.client.openapi.models.V1WindowsSecurityContextOptions);
}
