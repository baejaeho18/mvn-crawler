Compiled from "V1HTTPGetActionFluent.java"
public interface io.kubernetes.client.openapi.models.V1HTTPGetActionFluent<A extends io.kubernetes.client.openapi.models.V1HTTPGetActionFluent<A>> extends io.kubernetes.client.fluent.Fluent<A> {
  public abstract java.lang.String getHost();

  public abstract A withHost(java.lang.String);

  public abstract java.lang.Boolean hasHost();

  public abstract A withNewHost(java.lang.String);

  public abstract A withNewHost(java.lang.StringBuilder);

  public abstract A withNewHost(java.lang.StringBuffer);

  public abstract A addToHttpHeaders(int, io.kubernetes.client.openapi.models.V1HTTPHeader);

  public abstract A setToHttpHeaders(int, io.kubernetes.client.openapi.models.V1HTTPHeader);

  public abstract A addToHttpHeaders(io.kubernetes.client.openapi.models.V1HTTPHeader...);

  public abstract A addAllToHttpHeaders(java.util.Collection<io.kubernetes.client.openapi.models.V1HTTPHeader>);

  public abstract A removeFromHttpHeaders(io.kubernetes.client.openapi.models.V1HTTPHeader...);

  public abstract A removeAllFromHttpHeaders(java.util.Collection<io.kubernetes.client.openapi.models.V1HTTPHeader>);

  public abstract A removeMatchingFromHttpHeaders(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1HTTPHeaderBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1HTTPHeader> getHttpHeaders();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1HTTPHeader> buildHttpHeaders();

  public abstract io.kubernetes.client.openapi.models.V1HTTPHeader buildHttpHeader(int);

  public abstract io.kubernetes.client.openapi.models.V1HTTPHeader buildFirstHttpHeader();

  public abstract io.kubernetes.client.openapi.models.V1HTTPHeader buildLastHttpHeader();

  public abstract io.kubernetes.client.openapi.models.V1HTTPHeader buildMatchingHttpHeader(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1HTTPHeaderBuilder>);

  public abstract java.lang.Boolean hasMatchingHttpHeader(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1HTTPHeaderBuilder>);

  public abstract A withHttpHeaders(java.util.List<io.kubernetes.client.openapi.models.V1HTTPHeader>);

  public abstract A withHttpHeaders(io.kubernetes.client.openapi.models.V1HTTPHeader...);

  public abstract java.lang.Boolean hasHttpHeaders();

  public abstract io.kubernetes.client.openapi.models.V1HTTPGetActionFluent$HttpHeadersNested<A> addNewHttpHeader();

  public abstract io.kubernetes.client.openapi.models.V1HTTPGetActionFluent$HttpHeadersNested<A> addNewHttpHeaderLike(io.kubernetes.client.openapi.models.V1HTTPHeader);

  public abstract io.kubernetes.client.openapi.models.V1HTTPGetActionFluent$HttpHeadersNested<A> setNewHttpHeaderLike(int, io.kubernetes.client.openapi.models.V1HTTPHeader);

  public abstract io.kubernetes.client.openapi.models.V1HTTPGetActionFluent$HttpHeadersNested<A> editHttpHeader(int);

  public abstract io.kubernetes.client.openapi.models.V1HTTPGetActionFluent$HttpHeadersNested<A> editFirstHttpHeader();

  public abstract io.kubernetes.client.openapi.models.V1HTTPGetActionFluent$HttpHeadersNested<A> editLastHttpHeader();

  public abstract io.kubernetes.client.openapi.models.V1HTTPGetActionFluent$HttpHeadersNested<A> editMatchingHttpHeader(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1HTTPHeaderBuilder>);

  public abstract java.lang.String getPath();

  public abstract A withPath(java.lang.String);

  public abstract java.lang.Boolean hasPath();

  public abstract A withNewPath(java.lang.String);

  public abstract A withNewPath(java.lang.StringBuilder);

  public abstract A withNewPath(java.lang.StringBuffer);

  public abstract io.kubernetes.client.custom.IntOrString getPort();

  public abstract A withPort(io.kubernetes.client.custom.IntOrString);

  public abstract java.lang.Boolean hasPort();

  public abstract A withNewPort(int);

  public abstract A withNewPort(java.lang.String);

  public abstract java.lang.String getScheme();

  public abstract A withScheme(java.lang.String);

  public abstract java.lang.Boolean hasScheme();

  public abstract A withNewScheme(java.lang.String);

  public abstract A withNewScheme(java.lang.StringBuilder);

  public abstract A withNewScheme(java.lang.StringBuffer);
}
