Compiled from "QuantityFormatter.java"
public class io.kubernetes.client.custom.QuantityFormatter {
  private static final java.lang.String PARTS_RE;

  public io.kubernetes.client.custom.QuantityFormatter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public io.kubernetes.client.custom.Quantity parse(java.lang.String);
    Code:
       0: aload_1
       1: ifnull        11
       4: aload_1
       5: invokevirtual #2                  // Method java/lang/String.isEmpty:()Z
       8: ifeq          21
      11: new           #3                  // class io/kubernetes/client/custom/QuantityFormatException
      14: dup
      15: ldc           #4                  // String
      17: invokespecial #5                  // Method io/kubernetes/client/custom/QuantityFormatException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_1
      22: ldc           #7                  // String [eEinumkKMGTP]+
      24: invokevirtual #8                  // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
      27: astore_2
      28: aload_2
      29: iconst_0
      30: aaload
      31: invokestatic  #9                  // Method parseNumericValue:(Ljava/lang/String;)Ljava/math/BigDecimal;
      34: astore_3
      35: aload_1
      36: aload_2
      37: iconst_0
      38: aaload
      39: invokevirtual #10                 // Method java/lang/String.length:()I
      42: invokevirtual #11                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      45: astore        4
      47: new           #12                 // class io/kubernetes/client/custom/SuffixFormatter
      50: dup
      51: invokespecial #13                 // Method io/kubernetes/client/custom/SuffixFormatter."<init>":()V
      54: aload         4
      56: invokevirtual #14                 // Method io/kubernetes/client/custom/SuffixFormatter.parse:(Ljava/lang/String;)Lio/kubernetes/client/custom/BaseExponent;
      59: astore        5
      61: aload         5
      63: invokevirtual #15                 // Method io/kubernetes/client/custom/BaseExponent.getBase:()I
      66: i2l
      67: invokestatic  #16                 // Method java/math/BigDecimal.valueOf:(J)Ljava/math/BigDecimal;
      70: aload         5
      72: invokevirtual #17                 // Method io/kubernetes/client/custom/BaseExponent.getExponent:()I
      75: getstatic     #18                 // Field java/math/MathContext.DECIMAL64:Ljava/math/MathContext;
      78: invokevirtual #19                 // Method java/math/BigDecimal.pow:(ILjava/math/MathContext;)Ljava/math/BigDecimal;
      81: astore        6
      83: aload_3
      84: aload         6
      86: invokevirtual #20                 // Method java/math/BigDecimal.multiply:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;
      89: astore        7
      91: new           #21                 // class io/kubernetes/client/custom/Quantity
      94: dup
      95: aload         7
      97: aload         5
      99: invokevirtual #22                 // Method io/kubernetes/client/custom/BaseExponent.getFormat:()Lio/kubernetes/client/custom/Quantity$Format;
     102: invokespecial #23                 // Method io/kubernetes/client/custom/Quantity."<init>":(Ljava/math/BigDecimal;Lio/kubernetes/client/custom/Quantity$Format;)V
     105: areturn

  private static java.math.BigDecimal parseNumericValue(java.lang.String);
    Code:
       0: new           #24                 // class java/math/BigDecimal
       3: dup
       4: aload_0
       5: invokespecial #25                 // Method java/math/BigDecimal."<init>":(Ljava/lang/String;)V
       8: areturn
       9: astore_1
      10: new           #3                  // class io/kubernetes/client/custom/QuantityFormatException
      13: dup
      14: new           #27                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #29                 // String Unable to parse numeric part of quantity:
      23: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: invokespecial #5                  // Method io/kubernetes/client/custom/QuantityFormatException."<init>":(Ljava/lang/String;)V
      36: athrow
    Exception table:
       from    to  target type
           0     8     9   Class java/lang/NumberFormatException

  public java.lang.String format(io.kubernetes.client.custom.Quantity);
    Code:
       0: getstatic     #32                 // Field io/kubernetes/client/custom/QuantityFormatter$1.$SwitchMap$io$kubernetes$client$custom$Quantity$Format:[I
       3: aload_1
       4: invokevirtual #33                 // Method io/kubernetes/client/custom/Quantity.getFormat:()Lio/kubernetes/client/custom/Quantity$Format;
       7: invokevirtual #34                 // Method io/kubernetes/client/custom/Quantity$Format.ordinal:()I
      10: iaload
      11: tableswitch   { // 1 to 3
                     1: 36
                     2: 36
                     3: 42
               default: 75
          }
      36: aload_0
      37: aload_1
      38: invokespecial #35                 // Method toBase10String:(Lio/kubernetes/client/custom/Quantity;)Ljava/lang/String;
      41: areturn
      42: aload_0
      43: aload_1
      44: invokespecial #36                 // Method isFractional:(Lio/kubernetes/client/custom/Quantity;)Z
      47: ifeq          69
      50: aload_0
      51: new           #21                 // class io/kubernetes/client/custom/Quantity
      54: dup
      55: aload_1
      56: invokevirtual #37                 // Method io/kubernetes/client/custom/Quantity.getNumber:()Ljava/math/BigDecimal;
      59: getstatic     #38                 // Field io/kubernetes/client/custom/Quantity$Format.DECIMAL_SI:Lio/kubernetes/client/custom/Quantity$Format;
      62: invokespecial #23                 // Method io/kubernetes/client/custom/Quantity."<init>":(Ljava/math/BigDecimal;Lio/kubernetes/client/custom/Quantity$Format;)V
      65: invokespecial #35                 // Method toBase10String:(Lio/kubernetes/client/custom/Quantity;)Ljava/lang/String;
      68: areturn
      69: aload_0
      70: aload_1
      71: invokespecial #39                 // Method toBase1024String:(Lio/kubernetes/client/custom/Quantity;)Ljava/lang/String;
      74: areturn
      75: new           #40                 // class java/lang/IllegalArgumentException
      78: dup
      79: new           #27                 // class java/lang/StringBuilder
      82: dup
      83: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      86: ldc           #41                 // String Can\'t format a
      88: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: aload_1
      92: invokevirtual #33                 // Method io/kubernetes/client/custom/Quantity.getFormat:()Lio/kubernetes/client/custom/Quantity$Format;
      95: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      98: ldc           #43                 // String  quantity
     100: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     103: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     106: invokespecial #44                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     109: athrow

  private boolean isFractional(io.kubernetes.client.custom.Quantity);
    Code:
       0: aload_1
       1: invokevirtual #37                 // Method io/kubernetes/client/custom/Quantity.getNumber:()Ljava/math/BigDecimal;
       4: invokevirtual #45                 // Method java/math/BigDecimal.scale:()I
       7: ifle          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  private java.lang.String toBase1024String(io.kubernetes.client.custom.Quantity);
    Code:
       0: aload_1
       1: invokevirtual #37                 // Method io/kubernetes/client/custom/Quantity.getNumber:()Ljava/math/BigDecimal;
       4: astore_2
       5: aload_2
       6: invokevirtual #46                 // Method java/math/BigDecimal.unscaledValue:()Ljava/math/BigInteger;
       9: invokevirtual #47                 // Method java/math/BigInteger.longValue:()J
      12: lstore_3
      13: aload_2
      14: invokevirtual #45                 // Method java/math/BigDecimal.scale:()I
      17: ineg
      18: istore        5
      20: aload_0
      21: lload_3
      22: sipush        1024
      25: invokespecial #48                 // Method removeFactorsForBase:(JI)Lorg/apache/commons/lang3/tuple/Pair;
      28: astore        6
      30: new           #27                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      37: aload         6
      39: invokevirtual #49                 // Method org/apache/commons/lang3/tuple/Pair.getLeft:()Ljava/lang/Object;
      42: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      45: new           #12                 // class io/kubernetes/client/custom/SuffixFormatter
      48: dup
      49: invokespecial #13                 // Method io/kubernetes/client/custom/SuffixFormatter."<init>":()V
      52: aload_1
      53: invokevirtual #33                 // Method io/kubernetes/client/custom/Quantity.getFormat:()Lio/kubernetes/client/custom/Quantity$Format;
      56: iload         5
      58: aload         6
      60: invokevirtual #50                 // Method org/apache/commons/lang3/tuple/Pair.getRight:()Ljava/lang/Object;
      63: checkcast     #51                 // class java/lang/Integer
      66: invokevirtual #52                 // Method java/lang/Integer.intValue:()I
      69: bipush        10
      71: imul
      72: iadd
      73: invokevirtual #53                 // Method io/kubernetes/client/custom/SuffixFormatter.format:(Lio/kubernetes/client/custom/Quantity$Format;I)Ljava/lang/String;
      76: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      82: areturn

  private java.lang.String toBase10String(io.kubernetes.client.custom.Quantity);
    Code:
       0: aload_1
       1: invokevirtual #37                 // Method io/kubernetes/client/custom/Quantity.getNumber:()Ljava/math/BigDecimal;
       4: astore_2
       5: aload_2
       6: invokevirtual #46                 // Method java/math/BigDecimal.unscaledValue:()Ljava/math/BigInteger;
       9: invokevirtual #47                 // Method java/math/BigInteger.longValue:()J
      12: lstore_3
      13: aload_2
      14: invokevirtual #45                 // Method java/math/BigDecimal.scale:()I
      17: ineg
      18: istore        5
      20: aload_0
      21: lload_3
      22: bipush        10
      24: invokespecial #48                 // Method removeFactorsForBase:(JI)Lorg/apache/commons/lang3/tuple/Pair;
      27: astore        6
      29: iload         5
      31: aload         6
      33: invokevirtual #50                 // Method org/apache/commons/lang3/tuple/Pair.getRight:()Ljava/lang/Object;
      36: checkcast     #51                 // class java/lang/Integer
      39: invokevirtual #52                 // Method java/lang/Integer.intValue:()I
      42: iadd
      43: istore        7
      45: aload_0
      46: aload         6
      48: invokevirtual #49                 // Method org/apache/commons/lang3/tuple/Pair.getLeft:()Ljava/lang/Object;
      51: checkcast     #54                 // class java/lang/Long
      54: invokevirtual #55                 // Method java/lang/Long.longValue:()J
      57: iload         7
      59: invokespecial #56                 // Method ensureExponentIsMultipleOf3:(JI)Lorg/apache/commons/lang3/tuple/Pair;
      62: astore        8
      64: new           #27                 // class java/lang/StringBuilder
      67: dup
      68: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      71: aload         8
      73: invokevirtual #49                 // Method org/apache/commons/lang3/tuple/Pair.getLeft:()Ljava/lang/Object;
      76: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      79: new           #12                 // class io/kubernetes/client/custom/SuffixFormatter
      82: dup
      83: invokespecial #13                 // Method io/kubernetes/client/custom/SuffixFormatter."<init>":()V
      86: aload_1
      87: invokevirtual #33                 // Method io/kubernetes/client/custom/Quantity.getFormat:()Lio/kubernetes/client/custom/Quantity$Format;
      90: aload         8
      92: invokevirtual #50                 // Method org/apache/commons/lang3/tuple/Pair.getRight:()Ljava/lang/Object;
      95: checkcast     #51                 // class java/lang/Integer
      98: invokevirtual #52                 // Method java/lang/Integer.intValue:()I
     101: invokevirtual #53                 // Method io/kubernetes/client/custom/SuffixFormatter.format:(Lio/kubernetes/client/custom/Quantity$Format;I)Ljava/lang/String;
     104: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     107: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     110: areturn

  private org.apache.commons.lang3.tuple.Pair<java.lang.Long, java.lang.Integer> ensureExponentIsMultipleOf3(long, int);
    Code:
       0: iload_3
       1: iconst_3
       2: irem
       3: i2l
       4: lstore        4
       6: lload         4
       8: lconst_1
       9: lcmp
      10: ifeq          22
      13: lload         4
      15: ldc2_w        #57                 // long -2l
      18: lcmp
      19: ifne          40
      22: lload_1
      23: ldc2_w        #59                 // long 10l
      26: lmul
      27: invokestatic  #61                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      30: iload_3
      31: iconst_1
      32: isub
      33: invokestatic  #62                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      36: invokestatic  #63                 // Method org/apache/commons/lang3/tuple/Pair.of:(Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/commons/lang3/tuple/Pair;
      39: areturn
      40: lload         4
      42: ldc2_w        #64                 // long -1l
      45: lcmp
      46: ifeq          58
      49: lload         4
      51: ldc2_w        #66                 // long 2l
      54: lcmp
      55: ifne          76
      58: lload_1
      59: ldc2_w        #68                 // long 100l
      62: lmul
      63: invokestatic  #61                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      66: iload_3
      67: iconst_2
      68: isub
      69: invokestatic  #62                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      72: invokestatic  #63                 // Method org/apache/commons/lang3/tuple/Pair.of:(Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/commons/lang3/tuple/Pair;
      75: areturn
      76: lload_1
      77: invokestatic  #61                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      80: iload_3
      81: invokestatic  #62                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      84: invokestatic  #63                 // Method org/apache/commons/lang3/tuple/Pair.of:(Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/commons/lang3/tuple/Pair;
      87: areturn

  private org.apache.commons.lang3.tuple.Pair<java.lang.Long, java.lang.Integer> removeFactorsForBase(long, int);
    Code:
       0: iconst_0
       1: istore        4
       3: lload_1
       4: lstore        5
       6: lload         5
       8: iload_3
       9: i2l
      10: lcmp
      11: iflt          37
      14: lload         5
      16: iload_3
      17: i2l
      18: lrem
      19: lconst_0
      20: lcmp
      21: ifne          37
      24: iinc          4, 1
      27: lload         5
      29: iload_3
      30: i2l
      31: ldiv
      32: lstore        5
      34: goto          6
      37: lload         5
      39: invokestatic  #61                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      42: iload         4
      44: invokestatic  #62                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      47: invokestatic  #63                 // Method org/apache/commons/lang3/tuple/Pair.of:(Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/commons/lang3/tuple/Pair;
      50: areturn
}
