Compiled from "AbstractUserDetailsReactiveAuthenticationManager.java"
public abstract class org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager implements org.springframework.security.authentication.ReactiveAuthenticationManager {
  protected final org.apache.commons.logging.Log logger;

  protected org.springframework.context.support.MessageSourceAccessor messages;

  private org.springframework.security.crypto.password.PasswordEncoder passwordEncoder;

  private org.springframework.security.core.userdetails.ReactiveUserDetailsPasswordService userDetailsPasswordService;

  private reactor.core.scheduler.Scheduler scheduler;

  private org.springframework.security.core.userdetails.UserDetailsChecker preAuthenticationChecks;

  private org.springframework.security.core.userdetails.UserDetailsChecker postAuthenticationChecks;

  public org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: invokestatic  #5                  // Method org/springframework/security/core/SpringSecurityMessageSource.getAccessor:()Lorg/springframework/context/support/MessageSourceAccessor;
      19: putfield      #6                  // Field messages:Lorg/springframework/context/support/MessageSourceAccessor;
      22: aload_0
      23: invokestatic  #7                  // Method org/springframework/security/crypto/factory/PasswordEncoderFactories.createDelegatingPasswordEncoder:()Lorg/springframework/security/crypto/password/PasswordEncoder;
      26: putfield      #8                  // Field passwordEncoder:Lorg/springframework/security/crypto/password/PasswordEncoder;
      29: aload_0
      30: invokestatic  #9                  // Method reactor/core/scheduler/Schedulers.boundedElastic:()Lreactor/core/scheduler/Scheduler;
      33: putfield      #10                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      36: aload_0
      37: aload_0
      38: invokedynamic #11,  0             // InvokeDynamic #0:check:(Lorg/springframework/security/authentication/AbstractUserDetailsReactiveAuthenticationManager;)Lorg/springframework/security/core/userdetails/UserDetailsChecker;
      43: putfield      #12                 // Field preAuthenticationChecks:Lorg/springframework/security/core/userdetails/UserDetailsChecker;
      46: aload_0
      47: aload_0
      48: invokedynamic #13,  0             // InvokeDynamic #1:check:(Lorg/springframework/security/authentication/AbstractUserDetailsReactiveAuthenticationManager;)Lorg/springframework/security/core/userdetails/UserDetailsChecker;
      53: putfield      #14                 // Field postAuthenticationChecks:Lorg/springframework/security/core/userdetails/UserDetailsChecker;
      56: return

  public reactor.core.publisher.Mono<org.springframework.security.core.Authentication> authenticate(org.springframework.security.core.Authentication);
    Code:
       0: aload_1
       1: invokeinterface #15,  1           // InterfaceMethod org/springframework/security/core/Authentication.getName:()Ljava/lang/String;
       6: astore_2
       7: aload_1
       8: invokeinterface #16,  1           // InterfaceMethod org/springframework/security/core/Authentication.getCredentials:()Ljava/lang/Object;
      13: checkcast     #17                 // class java/lang/String
      16: astore_3
      17: aload_0
      18: aload_2
      19: invokevirtual #18                 // Method retrieveUser:(Ljava/lang/String;)Lreactor/core/publisher/Mono;
      22: aload_0
      23: getfield      #12                 // Field preAuthenticationChecks:Lorg/springframework/security/core/userdetails/UserDetailsChecker;
      26: dup
      27: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      30: pop
      31: invokedynamic #19,  0             // InvokeDynamic #2:accept:(Lorg/springframework/security/core/userdetails/UserDetailsChecker;)Ljava/util/function/Consumer;
      36: invokevirtual #20                 // Method reactor/core/publisher/Mono.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      39: aload_0
      40: getfield      #10                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      43: invokevirtual #21                 // Method reactor/core/publisher/Mono.publishOn:(Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
      46: aload_0
      47: aload_3
      48: invokedynamic #22,  0             // InvokeDynamic #3:test:(Lorg/springframework/security/authentication/AbstractUserDetailsReactiveAuthenticationManager;Ljava/lang/String;)Ljava/util/function/Predicate;
      53: invokevirtual #23                 // Method reactor/core/publisher/Mono.filter:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Mono;
      56: invokedynamic #24,  0             // InvokeDynamic #4:get:()Ljava/util/function/Supplier;
      61: invokestatic  #25                 // Method reactor/core/publisher/Mono.defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      64: invokevirtual #26                 // Method reactor/core/publisher/Mono.switchIfEmpty:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      67: aload_0
      68: aload_3
      69: invokedynamic #27,  0             // InvokeDynamic #5:apply:(Lorg/springframework/security/authentication/AbstractUserDetailsReactiveAuthenticationManager;Ljava/lang/String;)Ljava/util/function/Function;
      74: invokevirtual #28                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      77: aload_0
      78: getfield      #14                 // Field postAuthenticationChecks:Lorg/springframework/security/core/userdetails/UserDetailsChecker;
      81: dup
      82: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      85: pop
      86: invokedynamic #19,  0             // InvokeDynamic #2:accept:(Lorg/springframework/security/core/userdetails/UserDetailsChecker;)Ljava/util/function/Consumer;
      91: invokevirtual #20                 // Method reactor/core/publisher/Mono.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      94: invokedynamic #29,  0             // InvokeDynamic #6:apply:()Ljava/util/function/Function;
      99: invokevirtual #30                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
     102: areturn

  public void setPasswordEncoder(org.springframework.security.crypto.password.PasswordEncoder);
    Code:
       0: aload_1
       1: ldc           #31                 // String passwordEncoder cannot be null
       3: invokestatic  #32                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #8                  // Field passwordEncoder:Lorg/springframework/security/crypto/password/PasswordEncoder;
      11: return

  public void setScheduler(reactor.core.scheduler.Scheduler);
    Code:
       0: aload_1
       1: ldc           #33                 // String scheduler cannot be null
       3: invokestatic  #32                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #10                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      11: return

  public void setUserDetailsPasswordService(org.springframework.security.core.userdetails.ReactiveUserDetailsPasswordService);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #34                 // Field userDetailsPasswordService:Lorg/springframework/security/core/userdetails/ReactiveUserDetailsPasswordService;
       5: return

  public void setPostAuthenticationChecks(org.springframework.security.core.userdetails.UserDetailsChecker);
    Code:
       0: aload_0
       1: getfield      #14                 // Field postAuthenticationChecks:Lorg/springframework/security/core/userdetails/UserDetailsChecker;
       4: ldc           #35                 // String postAuthenticationChecks cannot be null
       6: invokestatic  #32                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       9: aload_0
      10: aload_1
      11: putfield      #14                 // Field postAuthenticationChecks:Lorg/springframework/security/core/userdetails/UserDetailsChecker;
      14: return

  protected abstract reactor.core.publisher.Mono<org.springframework.security.core.userdetails.UserDetails> retrieveUser(java.lang.String);

  private static org.springframework.security.core.Authentication lambda$authenticate$5(org.springframework.security.core.userdetails.UserDetails);
    Code:
       0: new           #36                 // class org/springframework/security/authentication/UsernamePasswordAuthenticationToken
       3: dup
       4: aload_0
       5: aload_0
       6: invokeinterface #37,  1           // InterfaceMethod org/springframework/security/core/userdetails/UserDetails.getPassword:()Ljava/lang/String;
      11: aload_0
      12: invokeinterface #38,  1           // InterfaceMethod org/springframework/security/core/userdetails/UserDetails.getAuthorities:()Ljava/util/Collection;
      17: invokespecial #39                 // Method org/springframework/security/authentication/UsernamePasswordAuthenticationToken."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Collection;)V
      20: areturn

  private reactor.core.publisher.Mono lambda$authenticate$4(java.lang.String, org.springframework.security.core.userdetails.UserDetails);
    Code:
       0: aload_0
       1: getfield      #34                 // Field userDetailsPasswordService:Lorg/springframework/security/core/userdetails/ReactiveUserDetailsPasswordService;
       4: ifnull        29
       7: aload_0
       8: getfield      #8                  // Field passwordEncoder:Lorg/springframework/security/crypto/password/PasswordEncoder;
      11: aload_2
      12: invokeinterface #37,  1           // InterfaceMethod org/springframework/security/core/userdetails/UserDetails.getPassword:()Ljava/lang/String;
      17: invokeinterface #40,  2           // InterfaceMethod org/springframework/security/crypto/password/PasswordEncoder.upgradeEncoding:(Ljava/lang/String;)Z
      22: ifeq          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: istore_3
      31: iload_3
      32: ifeq          60
      35: aload_0
      36: getfield      #8                  // Field passwordEncoder:Lorg/springframework/security/crypto/password/PasswordEncoder;
      39: aload_1
      40: invokeinterface #41,  2           // InterfaceMethod org/springframework/security/crypto/password/PasswordEncoder.encode:(Ljava/lang/CharSequence;)Ljava/lang/String;
      45: astore        4
      47: aload_0
      48: getfield      #34                 // Field userDetailsPasswordService:Lorg/springframework/security/core/userdetails/ReactiveUserDetailsPasswordService;
      51: aload_2
      52: aload         4
      54: invokeinterface #42,  3           // InterfaceMethod org/springframework/security/core/userdetails/ReactiveUserDetailsPasswordService.updatePassword:(Lorg/springframework/security/core/userdetails/UserDetails;Ljava/lang/String;)Lreactor/core/publisher/Mono;
      59: areturn
      60: aload_2
      61: invokestatic  #43                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      64: areturn

  private static reactor.core.publisher.Mono lambda$authenticate$3();
    Code:
       0: new           #44                 // class org/springframework/security/authentication/BadCredentialsException
       3: dup
       4: ldc           #45                 // String Invalid Credentials
       6: invokespecial #46                 // Method org/springframework/security/authentication/BadCredentialsException."<init>":(Ljava/lang/String;)V
       9: invokestatic  #47                 // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      12: areturn

  private boolean lambda$authenticate$2(java.lang.String, org.springframework.security.core.userdetails.UserDetails);
    Code:
       0: aload_0
       1: getfield      #8                  // Field passwordEncoder:Lorg/springframework/security/crypto/password/PasswordEncoder;
       4: aload_1
       5: aload_2
       6: invokeinterface #37,  1           // InterfaceMethod org/springframework/security/core/userdetails/UserDetails.getPassword:()Ljava/lang/String;
      11: invokeinterface #48,  3           // InterfaceMethod org/springframework/security/crypto/password/PasswordEncoder.matches:(Ljava/lang/CharSequence;Ljava/lang/String;)Z
      16: ireturn

  private void lambda$new$1(org.springframework.security.core.userdetails.UserDetails);
    Code:
       0: aload_1
       1: invokeinterface #49,  1           // InterfaceMethod org/springframework/security/core/userdetails/UserDetails.isCredentialsNonExpired:()Z
       6: ifne          39
       9: aload_0
      10: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      13: ldc           #50                 // String User account credentials have expired
      15: invokeinterface #51,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      20: new           #52                 // class org/springframework/security/authentication/CredentialsExpiredException
      23: dup
      24: aload_0
      25: getfield      #6                  // Field messages:Lorg/springframework/context/support/MessageSourceAccessor;
      28: ldc           #53                 // String AbstractUserDetailsAuthenticationProvider.credentialsExpired
      30: ldc           #54                 // String User credentials have expired
      32: invokevirtual #55                 // Method org/springframework/context/support/MessageSourceAccessor.getMessage:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      35: invokespecial #56                 // Method org/springframework/security/authentication/CredentialsExpiredException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: return

  private void lambda$new$0(org.springframework.security.core.userdetails.UserDetails);
    Code:
       0: aload_1
       1: invokeinterface #57,  1           // InterfaceMethod org/springframework/security/core/userdetails/UserDetails.isAccountNonLocked:()Z
       6: ifne          39
       9: aload_0
      10: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      13: ldc           #58                 // String User account is locked
      15: invokeinterface #51,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      20: new           #59                 // class org/springframework/security/authentication/LockedException
      23: dup
      24: aload_0
      25: getfield      #6                  // Field messages:Lorg/springframework/context/support/MessageSourceAccessor;
      28: ldc           #60                 // String AbstractUserDetailsAuthenticationProvider.locked
      30: ldc           #58                 // String User account is locked
      32: invokevirtual #55                 // Method org/springframework/context/support/MessageSourceAccessor.getMessage:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      35: invokespecial #61                 // Method org/springframework/security/authentication/LockedException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_1
      40: invokeinterface #62,  1           // InterfaceMethod org/springframework/security/core/userdetails/UserDetails.isEnabled:()Z
      45: ifne          78
      48: aload_0
      49: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      52: ldc           #63                 // String User account is disabled
      54: invokeinterface #51,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      59: new           #64                 // class org/springframework/security/authentication/DisabledException
      62: dup
      63: aload_0
      64: getfield      #6                  // Field messages:Lorg/springframework/context/support/MessageSourceAccessor;
      67: ldc           #65                 // String AbstractUserDetailsAuthenticationProvider.disabled
      69: ldc           #66                 // String User is disabled
      71: invokevirtual #55                 // Method org/springframework/context/support/MessageSourceAccessor.getMessage:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      74: invokespecial #67                 // Method org/springframework/security/authentication/DisabledException."<init>":(Ljava/lang/String;)V
      77: athrow
      78: aload_1
      79: invokeinterface #68,  1           // InterfaceMethod org/springframework/security/core/userdetails/UserDetails.isAccountNonExpired:()Z
      84: ifne          117
      87: aload_0
      88: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      91: ldc           #69                 // String User account is expired
      93: invokeinterface #51,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      98: new           #70                 // class org/springframework/security/authentication/AccountExpiredException
     101: dup
     102: aload_0
     103: getfield      #6                  // Field messages:Lorg/springframework/context/support/MessageSourceAccessor;
     106: ldc           #71                 // String AbstractUserDetailsAuthenticationProvider.expired
     108: ldc           #72                 // String User account has expired
     110: invokevirtual #55                 // Method org/springframework/context/support/MessageSourceAccessor.getMessage:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     113: invokespecial #73                 // Method org/springframework/security/authentication/AccountExpiredException."<init>":(Ljava/lang/String;)V
     116: athrow
     117: return
}
