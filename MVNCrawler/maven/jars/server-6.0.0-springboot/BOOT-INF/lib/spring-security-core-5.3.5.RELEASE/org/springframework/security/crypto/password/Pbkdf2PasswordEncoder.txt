Compiled from "Pbkdf2PasswordEncoder.java"
public class org.springframework.security.crypto.password.Pbkdf2PasswordEncoder implements org.springframework.security.crypto.password.PasswordEncoder {
  private static final int DEFAULT_HASH_WIDTH;

  private static final int DEFAULT_ITERATIONS;

  private final org.springframework.security.crypto.keygen.BytesKeyGenerator saltGenerator;

  private final byte[] secret;

  private final int hashWidth;

  private final int iterations;

  private java.lang.String algorithm;

  private boolean encodeHashAsBase64;

  public org.springframework.security.crypto.password.Pbkdf2PasswordEncoder();
    Code:
       0: aload_0
       1: ldc           #1                  // String
       3: invokespecial #2                  // Method "<init>":(Ljava/lang/CharSequence;)V
       6: return

  public org.springframework.security.crypto.password.Pbkdf2PasswordEncoder(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #4                  // int 185000
       4: sipush        256
       7: invokespecial #5                  // Method "<init>":(Ljava/lang/CharSequence;II)V
      10: return

  public org.springframework.security.crypto.password.Pbkdf2PasswordEncoder(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #7                  // Method org/springframework/security/crypto/keygen/KeyGenerators.secureRandom:()Lorg/springframework/security/crypto/keygen/BytesKeyGenerator;
       8: putfield      #8                  // Field saltGenerator:Lorg/springframework/security/crypto/keygen/BytesKeyGenerator;
      11: aload_0
      12: getstatic     #9                  // Field org/springframework/security/crypto/password/Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm.PBKDF2WithHmacSHA1:Lorg/springframework/security/crypto/password/Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm;
      15: invokevirtual #10                 // Method org/springframework/security/crypto/password/Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm.name:()Ljava/lang/String;
      18: putfield      #11                 // Field algorithm:Ljava/lang/String;
      21: aload_0
      22: aload_1
      23: invokestatic  #12                 // Method org/springframework/security/crypto/codec/Utf8.encode:(Ljava/lang/CharSequence;)[B
      26: putfield      #13                 // Field secret:[B
      29: aload_0
      30: iload_2
      31: putfield      #14                 // Field iterations:I
      34: aload_0
      35: iload_3
      36: putfield      #15                 // Field hashWidth:I
      39: return

  public void setAlgorithm(org.springframework.security.crypto.password.Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #16                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #17                 // String secretKeyFactoryAlgorithm cannot be null
      10: invokespecial #18                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_1
      15: invokevirtual #10                 // Method org/springframework/security/crypto/password/Pbkdf2PasswordEncoder$SecretKeyFactoryAlgorithm.name:()Ljava/lang/String;
      18: astore_2
      19: aload_2
      20: invokestatic  #19                 // Method javax/crypto/SecretKeyFactory.getInstance:(Ljava/lang/String;)Ljavax/crypto/SecretKeyFactory;
      23: pop
      24: goto          61
      27: astore_3
      28: new           #16                 // class java/lang/IllegalArgumentException
      31: dup
      32: new           #21                 // class java/lang/StringBuilder
      35: dup
      36: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
      39: ldc           #23                 // String Invalid algorithm \'
      41: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: aload_2
      45: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: ldc           #25                 // String \'.
      50: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      56: aload_3
      57: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      60: athrow
      61: aload_0
      62: aload_2
      63: putfield      #11                 // Field algorithm:Ljava/lang/String;
      66: return
    Exception table:
       from    to  target type
          19    24    27   Class java/security/NoSuchAlgorithmException

  public void setEncodeHashAsBase64(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #28                 // Field encodeHashAsBase64:Z
       5: return

  public java.lang.String encode(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #8                  // Field saltGenerator:Lorg/springframework/security/crypto/keygen/BytesKeyGenerator;
       4: invokeinterface #29,  1           // InterfaceMethod org/springframework/security/crypto/keygen/BytesKeyGenerator.generateKey:()[B
       9: astore_2
      10: aload_0
      11: aload_1
      12: aload_2
      13: invokespecial #30                 // Method encode:(Ljava/lang/CharSequence;[B)[B
      16: astore_3
      17: aload_0
      18: aload_3
      19: invokespecial #31                 // Method encode:([B)Ljava/lang/String;
      22: areturn

  private java.lang.String encode(byte[]);
    Code:
       0: aload_0
       1: getfield      #28                 // Field encodeHashAsBase64:Z
       4: ifeq          15
       7: invokestatic  #32                 // Method java/util/Base64.getEncoder:()Ljava/util/Base64$Encoder;
      10: aload_1
      11: invokevirtual #33                 // Method java/util/Base64$Encoder.encodeToString:([B)Ljava/lang/String;
      14: areturn
      15: aload_1
      16: invokestatic  #34                 // Method org/springframework/security/crypto/codec/Hex.encode:([B)[C
      19: invokestatic  #35                 // Method java/lang/String.valueOf:([C)Ljava/lang/String;
      22: areturn

  public boolean matches(java.lang.CharSequence, java.lang.String);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #36                 // Method decode:(Ljava/lang/String;)[B
       5: astore_3
       6: aload_3
       7: iconst_0
       8: aload_0
       9: getfield      #8                  // Field saltGenerator:Lorg/springframework/security/crypto/keygen/BytesKeyGenerator;
      12: invokeinterface #37,  1           // InterfaceMethod org/springframework/security/crypto/keygen/BytesKeyGenerator.getKeyLength:()I
      17: invokestatic  #38                 // Method org/springframework/security/crypto/util/EncodingUtils.subArray:([BII)[B
      20: astore        4
      22: aload_3
      23: aload_0
      24: aload_1
      25: aload         4
      27: invokespecial #30                 // Method encode:(Ljava/lang/CharSequence;[B)[B
      30: invokestatic  #39                 // Method java/security/MessageDigest.isEqual:([B[B)Z
      33: ireturn

  private byte[] decode(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #28                 // Field encodeHashAsBase64:Z
       4: ifeq          15
       7: invokestatic  #40                 // Method java/util/Base64.getDecoder:()Ljava/util/Base64$Decoder;
      10: aload_1
      11: invokevirtual #41                 // Method java/util/Base64$Decoder.decode:(Ljava/lang/String;)[B
      14: areturn
      15: aload_1
      16: invokestatic  #42                 // Method org/springframework/security/crypto/codec/Hex.decode:(Ljava/lang/CharSequence;)[B
      19: areturn

  private byte[] encode(java.lang.CharSequence, byte[]);
    Code:
       0: new           #43                 // class javax/crypto/spec/PBEKeySpec
       3: dup
       4: aload_1
       5: invokeinterface #44,  1           // InterfaceMethod java/lang/CharSequence.toString:()Ljava/lang/String;
      10: invokevirtual #45                 // Method java/lang/String.toCharArray:()[C
      13: iconst_2
      14: anewarray     #46                 // class "[B"
      17: dup
      18: iconst_0
      19: aload_2
      20: aastore
      21: dup
      22: iconst_1
      23: aload_0
      24: getfield      #13                 // Field secret:[B
      27: aastore
      28: invokestatic  #47                 // Method org/springframework/security/crypto/util/EncodingUtils.concatenate:([[B)[B
      31: aload_0
      32: getfield      #14                 // Field iterations:I
      35: aload_0
      36: getfield      #15                 // Field hashWidth:I
      39: invokespecial #48                 // Method javax/crypto/spec/PBEKeySpec."<init>":([C[BII)V
      42: astore_3
      43: aload_0
      44: getfield      #11                 // Field algorithm:Ljava/lang/String;
      47: invokestatic  #19                 // Method javax/crypto/SecretKeyFactory.getInstance:(Ljava/lang/String;)Ljavax/crypto/SecretKeyFactory;
      50: astore        4
      52: iconst_2
      53: anewarray     #46                 // class "[B"
      56: dup
      57: iconst_0
      58: aload_2
      59: aastore
      60: dup
      61: iconst_1
      62: aload         4
      64: aload_3
      65: invokevirtual #49                 // Method javax/crypto/SecretKeyFactory.generateSecret:(Ljava/security/spec/KeySpec;)Ljavax/crypto/SecretKey;
      68: invokeinterface #50,  1           // InterfaceMethod javax/crypto/SecretKey.getEncoded:()[B
      73: aastore
      74: invokestatic  #47                 // Method org/springframework/security/crypto/util/EncodingUtils.concatenate:([[B)[B
      77: areturn
      78: astore_3
      79: new           #52                 // class java/lang/IllegalStateException
      82: dup
      83: ldc           #53                 // String Could not create hash
      85: aload_3
      86: invokespecial #54                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      89: athrow
    Exception table:
       from    to  target type
           0    77    78   Class java/security/GeneralSecurityException
}
