Compiled from "StandardPasswordEncoder.java"
public final class org.springframework.security.crypto.password.StandardPasswordEncoder implements org.springframework.security.crypto.password.PasswordEncoder {
  private final org.springframework.security.crypto.password.Digester digester;

  private final byte[] secret;

  private final org.springframework.security.crypto.keygen.BytesKeyGenerator saltGenerator;

  private static final int DEFAULT_ITERATIONS;

  public org.springframework.security.crypto.password.StandardPasswordEncoder();
    Code:
       0: aload_0
       1: ldc           #1                  // String
       3: invokespecial #2                  // Method "<init>":(Ljava/lang/CharSequence;)V
       6: return

  public org.springframework.security.crypto.password.StandardPasswordEncoder(java.lang.CharSequence);
    Code:
       0: aload_0
       1: ldc           #3                  // String SHA-256
       3: aload_1
       4: invokespecial #4                  // Method "<init>":(Ljava/lang/String;Ljava/lang/CharSequence;)V
       7: return

  public java.lang.String encode(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: getfield      #5                  // Field saltGenerator:Lorg/springframework/security/crypto/keygen/BytesKeyGenerator;
       6: invokeinterface #6,  1            // InterfaceMethod org/springframework/security/crypto/keygen/BytesKeyGenerator.generateKey:()[B
      11: invokespecial #7                  // Method encode:(Ljava/lang/CharSequence;[B)Ljava/lang/String;
      14: areturn

  public boolean matches(java.lang.CharSequence, java.lang.String);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #8                  // Method decode:(Ljava/lang/CharSequence;)[B
       5: astore_3
       6: aload_3
       7: iconst_0
       8: aload_0
       9: getfield      #5                  // Field saltGenerator:Lorg/springframework/security/crypto/keygen/BytesKeyGenerator;
      12: invokeinterface #9,  1            // InterfaceMethod org/springframework/security/crypto/keygen/BytesKeyGenerator.getKeyLength:()I
      17: invokestatic  #10                 // Method org/springframework/security/crypto/util/EncodingUtils.subArray:([BII)[B
      20: astore        4
      22: aload_3
      23: aload_0
      24: aload_1
      25: aload         4
      27: invokespecial #11                 // Method digest:(Ljava/lang/CharSequence;[B)[B
      30: invokestatic  #12                 // Method java/security/MessageDigest.isEqual:([B[B)Z
      33: ireturn

  private org.springframework.security.crypto.password.StandardPasswordEncoder(java.lang.String, java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokespecial #13                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #14                 // class org/springframework/security/crypto/password/Digester
       8: dup
       9: aload_1
      10: sipush        1024
      13: invokespecial #16                 // Method org/springframework/security/crypto/password/Digester."<init>":(Ljava/lang/String;I)V
      16: putfield      #17                 // Field digester:Lorg/springframework/security/crypto/password/Digester;
      19: aload_0
      20: aload_2
      21: invokestatic  #18                 // Method org/springframework/security/crypto/codec/Utf8.encode:(Ljava/lang/CharSequence;)[B
      24: putfield      #19                 // Field secret:[B
      27: aload_0
      28: invokestatic  #20                 // Method org/springframework/security/crypto/keygen/KeyGenerators.secureRandom:()Lorg/springframework/security/crypto/keygen/BytesKeyGenerator;
      31: putfield      #5                  // Field saltGenerator:Lorg/springframework/security/crypto/keygen/BytesKeyGenerator;
      34: return

  private java.lang.String encode(java.lang.CharSequence, byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #11                 // Method digest:(Ljava/lang/CharSequence;[B)[B
       6: astore_3
       7: new           #21                 // class java/lang/String
      10: dup
      11: aload_3
      12: invokestatic  #22                 // Method org/springframework/security/crypto/codec/Hex.encode:([B)[C
      15: invokespecial #23                 // Method java/lang/String."<init>":([C)V
      18: areturn

  private byte[] digest(java.lang.CharSequence, byte[]);
    Code:
       0: aload_0
       1: getfield      #17                 // Field digester:Lorg/springframework/security/crypto/password/Digester;
       4: iconst_3
       5: anewarray     #24                 // class "[B"
       8: dup
       9: iconst_0
      10: aload_2
      11: aastore
      12: dup
      13: iconst_1
      14: aload_0
      15: getfield      #19                 // Field secret:[B
      18: aastore
      19: dup
      20: iconst_2
      21: aload_1
      22: invokestatic  #18                 // Method org/springframework/security/crypto/codec/Utf8.encode:(Ljava/lang/CharSequence;)[B
      25: aastore
      26: invokestatic  #25                 // Method org/springframework/security/crypto/util/EncodingUtils.concatenate:([[B)[B
      29: invokevirtual #26                 // Method org/springframework/security/crypto/password/Digester.digest:([B)[B
      32: astore_3
      33: iconst_2
      34: anewarray     #24                 // class "[B"
      37: dup
      38: iconst_0
      39: aload_2
      40: aastore
      41: dup
      42: iconst_1
      43: aload_3
      44: aastore
      45: invokestatic  #25                 // Method org/springframework/security/crypto/util/EncodingUtils.concatenate:([[B)[B
      48: areturn

  private byte[] decode(java.lang.CharSequence);
    Code:
       0: aload_1
       1: invokestatic  #27                 // Method org/springframework/security/crypto/codec/Hex.decode:(Ljava/lang/CharSequence;)[B
       4: areturn
}
