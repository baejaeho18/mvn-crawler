Compiled from "ApplicationAvailability.java"
public interface org.springframework.boot.availability.ApplicationAvailability {
  public default org.springframework.boot.availability.LivenessState getLivenessState();
    Code:
       0: aload_0
       1: ldc           #1                  // class org/springframework/boot/availability/LivenessState
       3: getstatic     #2                  // Field org/springframework/boot/availability/LivenessState.BROKEN:Lorg/springframework/boot/availability/LivenessState;
       6: invokeinterface #3,  3            // InterfaceMethod getState:(Ljava/lang/Class;Lorg/springframework/boot/availability/AvailabilityState;)Lorg/springframework/boot/availability/AvailabilityState;
      11: checkcast     #1                  // class org/springframework/boot/availability/LivenessState
      14: areturn

  public default org.springframework.boot.availability.ReadinessState getReadinessState();
    Code:
       0: aload_0
       1: ldc           #4                  // class org/springframework/boot/availability/ReadinessState
       3: getstatic     #5                  // Field org/springframework/boot/availability/ReadinessState.REFUSING_TRAFFIC:Lorg/springframework/boot/availability/ReadinessState;
       6: invokeinterface #3,  3            // InterfaceMethod getState:(Ljava/lang/Class;Lorg/springframework/boot/availability/AvailabilityState;)Lorg/springframework/boot/availability/AvailabilityState;
      11: checkcast     #4                  // class org/springframework/boot/availability/ReadinessState
      14: areturn

  public abstract <S extends org.springframework.boot.availability.AvailabilityState> S getState(java.lang.Class<S>, S);

  public abstract <S extends org.springframework.boot.availability.AvailabilityState> S getState(java.lang.Class<S>);

  public abstract <S extends org.springframework.boot.availability.AvailabilityState> org.springframework.boot.availability.AvailabilityChangeEvent<S> getLastChangeEvent(java.lang.Class<S>);
}
