Compiled from "StandardEvaluationContext.java"
public class org.springframework.expression.spel.support.StandardEvaluationContext implements org.springframework.expression.EvaluationContext {
  private org.springframework.expression.TypedValue rootObject;

  private volatile java.util.List<org.springframework.expression.PropertyAccessor> propertyAccessors;

  private volatile java.util.List<org.springframework.expression.ConstructorResolver> constructorResolvers;

  private volatile java.util.List<org.springframework.expression.MethodResolver> methodResolvers;

  private volatile org.springframework.expression.spel.support.ReflectiveMethodResolver reflectiveMethodResolver;

  private org.springframework.expression.BeanResolver beanResolver;

  private org.springframework.expression.TypeLocator typeLocator;

  private org.springframework.expression.TypeConverter typeConverter;

  private org.springframework.expression.TypeComparator typeComparator;

  private org.springframework.expression.OperatorOverloader operatorOverloader;

  private final java.util.Map<java.lang.String, java.lang.Object> variables;

  public org.springframework.expression.spel.support.StandardEvaluationContext();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/springframework/expression/spel/support/StandardTypeComparator
       8: dup
       9: invokespecial #3                  // Method org/springframework/expression/spel/support/StandardTypeComparator."<init>":()V
      12: putfield      #4                  // Field typeComparator:Lorg/springframework/expression/TypeComparator;
      15: aload_0
      16: new           #5                  // class org/springframework/expression/spel/support/StandardOperatorOverloader
      19: dup
      20: invokespecial #6                  // Method org/springframework/expression/spel/support/StandardOperatorOverloader."<init>":()V
      23: putfield      #7                  // Field operatorOverloader:Lorg/springframework/expression/OperatorOverloader;
      26: aload_0
      27: new           #8                  // class java/util/concurrent/ConcurrentHashMap
      30: dup
      31: invokespecial #9                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      34: putfield      #10                 // Field variables:Ljava/util/Map;
      37: aload_0
      38: getstatic     #11                 // Field org/springframework/expression/TypedValue.NULL:Lorg/springframework/expression/TypedValue;
      41: putfield      #12                 // Field rootObject:Lorg/springframework/expression/TypedValue;
      44: return

  public org.springframework.expression.spel.support.StandardEvaluationContext(java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/springframework/expression/spel/support/StandardTypeComparator
       8: dup
       9: invokespecial #3                  // Method org/springframework/expression/spel/support/StandardTypeComparator."<init>":()V
      12: putfield      #4                  // Field typeComparator:Lorg/springframework/expression/TypeComparator;
      15: aload_0
      16: new           #5                  // class org/springframework/expression/spel/support/StandardOperatorOverloader
      19: dup
      20: invokespecial #6                  // Method org/springframework/expression/spel/support/StandardOperatorOverloader."<init>":()V
      23: putfield      #7                  // Field operatorOverloader:Lorg/springframework/expression/OperatorOverloader;
      26: aload_0
      27: new           #8                  // class java/util/concurrent/ConcurrentHashMap
      30: dup
      31: invokespecial #9                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      34: putfield      #10                 // Field variables:Ljava/util/Map;
      37: aload_0
      38: new           #13                 // class org/springframework/expression/TypedValue
      41: dup
      42: aload_1
      43: invokespecial #14                 // Method org/springframework/expression/TypedValue."<init>":(Ljava/lang/Object;)V
      46: putfield      #12                 // Field rootObject:Lorg/springframework/expression/TypedValue;
      49: return

  public void setRootObject(java.lang.Object, org.springframework.core.convert.TypeDescriptor);
    Code:
       0: aload_0
       1: new           #13                 // class org/springframework/expression/TypedValue
       4: dup
       5: aload_1
       6: aload_2
       7: invokespecial #15                 // Method org/springframework/expression/TypedValue."<init>":(Ljava/lang/Object;Lorg/springframework/core/convert/TypeDescriptor;)V
      10: putfield      #12                 // Field rootObject:Lorg/springframework/expression/TypedValue;
      13: return

  public void setRootObject(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: ifnull        16
       5: new           #13                 // class org/springframework/expression/TypedValue
       8: dup
       9: aload_1
      10: invokespecial #14                 // Method org/springframework/expression/TypedValue."<init>":(Ljava/lang/Object;)V
      13: goto          19
      16: getstatic     #11                 // Field org/springframework/expression/TypedValue.NULL:Lorg/springframework/expression/TypedValue;
      19: putfield      #12                 // Field rootObject:Lorg/springframework/expression/TypedValue;
      22: return

  public org.springframework.expression.TypedValue getRootObject();
    Code:
       0: aload_0
       1: getfield      #12                 // Field rootObject:Lorg/springframework/expression/TypedValue;
       4: areturn

  public void setPropertyAccessors(java.util.List<org.springframework.expression.PropertyAccessor>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field propertyAccessors:Ljava/util/List;
       5: return

  public java.util.List<org.springframework.expression.PropertyAccessor> getPropertyAccessors();
    Code:
       0: aload_0
       1: invokespecial #17                 // Method initPropertyAccessors:()Ljava/util/List;
       4: areturn

  public void addPropertyAccessor(org.springframework.expression.PropertyAccessor);
    Code:
       0: aload_0
       1: invokespecial #17                 // Method initPropertyAccessors:()Ljava/util/List;
       4: aload_1
       5: invokestatic  #18                 // Method addBeforeDefault:(Ljava/util/List;Ljava/lang/Object;)V
       8: return

  public boolean removePropertyAccessor(org.springframework.expression.PropertyAccessor);
    Code:
       0: aload_0
       1: invokespecial #17                 // Method initPropertyAccessors:()Ljava/util/List;
       4: aload_1
       5: invokeinterface #19,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      10: ireturn

  public void setConstructorResolvers(java.util.List<org.springframework.expression.ConstructorResolver>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field constructorResolvers:Ljava/util/List;
       5: return

  public java.util.List<org.springframework.expression.ConstructorResolver> getConstructorResolvers();
    Code:
       0: aload_0
       1: invokespecial #21                 // Method initConstructorResolvers:()Ljava/util/List;
       4: areturn

  public void addConstructorResolver(org.springframework.expression.ConstructorResolver);
    Code:
       0: aload_0
       1: invokespecial #21                 // Method initConstructorResolvers:()Ljava/util/List;
       4: aload_1
       5: invokestatic  #18                 // Method addBeforeDefault:(Ljava/util/List;Ljava/lang/Object;)V
       8: return

  public boolean removeConstructorResolver(org.springframework.expression.ConstructorResolver);
    Code:
       0: aload_0
       1: invokespecial #21                 // Method initConstructorResolvers:()Ljava/util/List;
       4: aload_1
       5: invokeinterface #19,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      10: ireturn

  public void setMethodResolvers(java.util.List<org.springframework.expression.MethodResolver>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #22                 // Field methodResolvers:Ljava/util/List;
       5: return

  public java.util.List<org.springframework.expression.MethodResolver> getMethodResolvers();
    Code:
       0: aload_0
       1: invokespecial #23                 // Method initMethodResolvers:()Ljava/util/List;
       4: areturn

  public void addMethodResolver(org.springframework.expression.MethodResolver);
    Code:
       0: aload_0
       1: invokespecial #23                 // Method initMethodResolvers:()Ljava/util/List;
       4: aload_1
       5: invokestatic  #18                 // Method addBeforeDefault:(Ljava/util/List;Ljava/lang/Object;)V
       8: return

  public boolean removeMethodResolver(org.springframework.expression.MethodResolver);
    Code:
       0: aload_0
       1: invokespecial #23                 // Method initMethodResolvers:()Ljava/util/List;
       4: aload_1
       5: invokeinterface #19,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      10: ireturn

  public void setBeanResolver(org.springframework.expression.BeanResolver);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #24                 // Field beanResolver:Lorg/springframework/expression/BeanResolver;
       5: return

  public org.springframework.expression.BeanResolver getBeanResolver();
    Code:
       0: aload_0
       1: getfield      #24                 // Field beanResolver:Lorg/springframework/expression/BeanResolver;
       4: areturn

  public void setTypeLocator(org.springframework.expression.TypeLocator);
    Code:
       0: aload_1
       1: ldc           #25                 // String TypeLocator must not be null
       3: invokestatic  #26                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #27                 // Field typeLocator:Lorg/springframework/expression/TypeLocator;
      11: return

  public org.springframework.expression.TypeLocator getTypeLocator();
    Code:
       0: aload_0
       1: getfield      #27                 // Field typeLocator:Lorg/springframework/expression/TypeLocator;
       4: ifnonnull     18
       7: aload_0
       8: new           #28                 // class org/springframework/expression/spel/support/StandardTypeLocator
      11: dup
      12: invokespecial #29                 // Method org/springframework/expression/spel/support/StandardTypeLocator."<init>":()V
      15: putfield      #27                 // Field typeLocator:Lorg/springframework/expression/TypeLocator;
      18: aload_0
      19: getfield      #27                 // Field typeLocator:Lorg/springframework/expression/TypeLocator;
      22: areturn

  public void setTypeConverter(org.springframework.expression.TypeConverter);
    Code:
       0: aload_1
       1: ldc           #30                 // String TypeConverter must not be null
       3: invokestatic  #26                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #31                 // Field typeConverter:Lorg/springframework/expression/TypeConverter;
      11: return

  public org.springframework.expression.TypeConverter getTypeConverter();
    Code:
       0: aload_0
       1: getfield      #31                 // Field typeConverter:Lorg/springframework/expression/TypeConverter;
       4: ifnonnull     18
       7: aload_0
       8: new           #32                 // class org/springframework/expression/spel/support/StandardTypeConverter
      11: dup
      12: invokespecial #33                 // Method org/springframework/expression/spel/support/StandardTypeConverter."<init>":()V
      15: putfield      #31                 // Field typeConverter:Lorg/springframework/expression/TypeConverter;
      18: aload_0
      19: getfield      #31                 // Field typeConverter:Lorg/springframework/expression/TypeConverter;
      22: areturn

  public void setTypeComparator(org.springframework.expression.TypeComparator);
    Code:
       0: aload_1
       1: ldc           #34                 // String TypeComparator must not be null
       3: invokestatic  #26                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #4                  // Field typeComparator:Lorg/springframework/expression/TypeComparator;
      11: return

  public org.springframework.expression.TypeComparator getTypeComparator();
    Code:
       0: aload_0
       1: getfield      #4                  // Field typeComparator:Lorg/springframework/expression/TypeComparator;
       4: areturn

  public void setOperatorOverloader(org.springframework.expression.OperatorOverloader);
    Code:
       0: aload_1
       1: ldc           #35                 // String OperatorOverloader must not be null
       3: invokestatic  #26                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #7                  // Field operatorOverloader:Lorg/springframework/expression/OperatorOverloader;
      11: return

  public org.springframework.expression.OperatorOverloader getOperatorOverloader();
    Code:
       0: aload_0
       1: getfield      #7                  // Field operatorOverloader:Lorg/springframework/expression/OperatorOverloader;
       4: areturn

  public void setVariable(java.lang.String, java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        34
       4: aload_2
       5: ifnull        23
       8: aload_0
       9: getfield      #10                 // Field variables:Ljava/util/Map;
      12: aload_1
      13: aload_2
      14: invokeinterface #36,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      19: pop
      20: goto          34
      23: aload_0
      24: getfield      #10                 // Field variables:Ljava/util/Map;
      27: aload_1
      28: invokeinterface #37,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      33: pop
      34: return

  public void setVariables(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #38,  0             // InvokeDynamic #0:accept:(Lorg/springframework/expression/spel/support/StandardEvaluationContext;)Ljava/util/function/BiConsumer;
       7: invokeinterface #39,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      12: return

  public void registerFunction(java.lang.String, java.lang.reflect.Method);
    Code:
       0: aload_0
       1: getfield      #10                 // Field variables:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #36,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public java.lang.Object lookupVariable(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #10                 // Field variables:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #40,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: areturn

  public void registerMethodFilter(java.lang.Class<?>, org.springframework.expression.MethodFilter) throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: invokespecial #23                 // Method initMethodResolvers:()Ljava/util/List;
       4: pop
       5: aload_0
       6: getfield      #41                 // Field reflectiveMethodResolver:Lorg/springframework/expression/spel/support/ReflectiveMethodResolver;
       9: astore_3
      10: aload_3
      11: ifnonnull     24
      14: new           #42                 // class java/lang/IllegalStateException
      17: dup
      18: ldc           #43                 // String Method filter cannot be set as the reflective method resolver is not in use
      20: invokespecial #44                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_3
      25: aload_1
      26: aload_2
      27: invokevirtual #45                 // Method org/springframework/expression/spel/support/ReflectiveMethodResolver.registerMethodFilter:(Ljava/lang/Class;Lorg/springframework/expression/MethodFilter;)V
      30: return

  private java.util.List<org.springframework.expression.PropertyAccessor> initPropertyAccessors();
    Code:
       0: aload_0
       1: getfield      #16                 // Field propertyAccessors:Ljava/util/List;
       4: astore_1
       5: aload_1
       6: ifnonnull     37
       9: new           #46                 // class java/util/ArrayList
      12: dup
      13: iconst_5
      14: invokespecial #47                 // Method java/util/ArrayList."<init>":(I)V
      17: astore_1
      18: aload_1
      19: new           #48                 // class org/springframework/expression/spel/support/ReflectivePropertyAccessor
      22: dup
      23: invokespecial #49                 // Method org/springframework/expression/spel/support/ReflectivePropertyAccessor."<init>":()V
      26: invokeinterface #50,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      31: pop
      32: aload_0
      33: aload_1
      34: putfield      #16                 // Field propertyAccessors:Ljava/util/List;
      37: aload_1
      38: areturn

  private java.util.List<org.springframework.expression.ConstructorResolver> initConstructorResolvers();
    Code:
       0: aload_0
       1: getfield      #20                 // Field constructorResolvers:Ljava/util/List;
       4: astore_1
       5: aload_1
       6: ifnonnull     37
       9: new           #46                 // class java/util/ArrayList
      12: dup
      13: iconst_1
      14: invokespecial #47                 // Method java/util/ArrayList."<init>":(I)V
      17: astore_1
      18: aload_1
      19: new           #51                 // class org/springframework/expression/spel/support/ReflectiveConstructorResolver
      22: dup
      23: invokespecial #52                 // Method org/springframework/expression/spel/support/ReflectiveConstructorResolver."<init>":()V
      26: invokeinterface #50,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      31: pop
      32: aload_0
      33: aload_1
      34: putfield      #20                 // Field constructorResolvers:Ljava/util/List;
      37: aload_1
      38: areturn

  private java.util.List<org.springframework.expression.MethodResolver> initMethodResolvers();
    Code:
       0: aload_0
       1: getfield      #22                 // Field methodResolvers:Ljava/util/List;
       4: astore_1
       5: aload_1
       6: ifnonnull     45
       9: new           #46                 // class java/util/ArrayList
      12: dup
      13: iconst_1
      14: invokespecial #47                 // Method java/util/ArrayList."<init>":(I)V
      17: astore_1
      18: aload_0
      19: new           #53                 // class org/springframework/expression/spel/support/ReflectiveMethodResolver
      22: dup
      23: invokespecial #54                 // Method org/springframework/expression/spel/support/ReflectiveMethodResolver."<init>":()V
      26: putfield      #41                 // Field reflectiveMethodResolver:Lorg/springframework/expression/spel/support/ReflectiveMethodResolver;
      29: aload_1
      30: aload_0
      31: getfield      #41                 // Field reflectiveMethodResolver:Lorg/springframework/expression/spel/support/ReflectiveMethodResolver;
      34: invokeinterface #50,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      39: pop
      40: aload_0
      41: aload_1
      42: putfield      #22                 // Field methodResolvers:Ljava/util/List;
      45: aload_1
      46: areturn

  private static <T> void addBeforeDefault(java.util.List<T>, T);
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #55,  1           // InterfaceMethod java/util/List.size:()I
       7: iconst_1
       8: isub
       9: aload_1
      10: invokeinterface #56,  3           // InterfaceMethod java/util/List.add:(ILjava/lang/Object;)V
      15: return
}
