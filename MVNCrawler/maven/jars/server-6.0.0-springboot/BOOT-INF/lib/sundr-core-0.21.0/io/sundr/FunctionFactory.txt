Compiled from "FunctionFactory.java"
public class io.sundr.FunctionFactory<X, Y> implements io.sundr.Function<X, Y> {
  private final java.util.Map<X, Y> cache;

  private final io.sundr.Function<X, Y> function;

  private final io.sundr.Function<X, Y> fallback;

  private final io.sundr.Function<X, java.lang.Boolean> fallbackPredicate;

  private final int maximumRecursionLevel;

  private final int maximumNestingDepth;

  private final java.util.Stack<X> ownStack;

  private static final java.util.Stack globalStack;

  public io.sundr.FunctionFactory(java.util.Map<X, Y>, io.sundr.Function<X, Y>, io.sundr.Function<X, Y>, io.sundr.Function<X, java.lang.Boolean>, int, int, java.util.Stack<X>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field cache:Ljava/util/Map;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field function:Lio/sundr/Function;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field fallback:Lio/sundr/Function;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field fallbackPredicate:Lio/sundr/Function;
      25: aload_0
      26: iload         5
      28: putfield      #6                  // Field maximumRecursionLevel:I
      31: aload_0
      32: iload         6
      34: putfield      #7                  // Field maximumNestingDepth:I
      37: aload_0
      38: aload         7
      40: putfield      #8                  // Field ownStack:Ljava/util/Stack;
      43: return

  public Y apply(X);
    Code:
       0: aload_0
       1: getfield      #3                  // Field function:Lio/sundr/Function;
       4: dup
       5: astore_3
       6: monitorenter
       7: aload_0
       8: getfield      #8                  // Field ownStack:Ljava/util/Stack;
      11: aload_1
      12: invokevirtual #9                  // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      15: pop
      16: getstatic     #10                 // Field globalStack:Ljava/util/Stack;
      19: aload_1
      20: invokevirtual #9                  // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      23: pop
      24: aload_0
      25: getfield      #2                  // Field cache:Ljava/util/Map;
      28: ifnull        44
      31: aload_0
      32: getfield      #2                  // Field cache:Ljava/util/Map;
      35: aload_1
      36: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      41: goto          45
      44: aconst_null
      45: astore_2
      46: aload_2
      47: ifnonnull     211
      50: aload_0
      51: getfield      #8                  // Field ownStack:Ljava/util/Stack;
      54: ifnull        68
      57: aload_0
      58: getfield      #8                  // Field ownStack:Ljava/util/Stack;
      61: aload_1
      62: invokestatic  #12                 // Method java/util/Collections.frequency:(Ljava/util/Collection;Ljava/lang/Object;)I
      65: goto          69
      68: iconst_0
      69: istore        4
      71: getstatic     #10                 // Field globalStack:Ljava/util/Stack;
      74: invokevirtual #13                 // Method java/util/Stack.size:()I
      77: istore        5
      79: iload         4
      81: aload_0
      82: getfield      #6                  // Field maximumRecursionLevel:I
      85: if_icmple     99
      88: aload_0
      89: getfield      #6                  // Field maximumRecursionLevel:I
      92: ifle          99
      95: iconst_1
      96: goto          100
      99: iconst_0
     100: istore        6
     102: iload         5
     104: aload_0
     105: getfield      #7                  // Field maximumNestingDepth:I
     108: if_icmple     122
     111: aload_0
     112: getfield      #7                  // Field maximumNestingDepth:I
     115: ifle          122
     118: iconst_1
     119: goto          123
     122: iconst_0
     123: istore        7
     125: aload_0
     126: getfield      #5                  // Field fallbackPredicate:Lio/sundr/Function;
     129: ifnull        155
     132: aload_0
     133: getfield      #5                  // Field fallbackPredicate:Lio/sundr/Function;
     136: aload_1
     137: invokeinterface #14,  2           // InterfaceMethod io/sundr/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     142: checkcast     #15                 // class java/lang/Boolean
     145: invokevirtual #16                 // Method java/lang/Boolean.booleanValue:()Z
     148: ifeq          155
     151: iconst_1
     152: goto          156
     155: iconst_0
     156: istore        8
     158: iload         6
     160: ifne          173
     163: iload         7
     165: ifne          173
     168: iload         8
     170: ifeq          194
     173: aload_0
     174: getfield      #4                  // Field fallback:Lio/sundr/Function;
     177: ifnull        194
     180: aload_0
     181: getfield      #4                  // Field fallback:Lio/sundr/Function;
     184: aload_1
     185: invokeinterface #14,  2           // InterfaceMethod io/sundr/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     190: astore_2
     191: goto          211
     194: aload_0
     195: getfield      #3                  // Field function:Lio/sundr/Function;
     198: aload_1
     199: invokeinterface #14,  2           // InterfaceMethod io/sundr/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     204: astore_2
     205: aload_0
     206: aload_1
     207: aload_2
     208: invokespecial #17                 // Method cacheIfEnabled:(Ljava/lang/Object;Ljava/lang/Object;)V
     211: aload_0
     212: getfield      #8                  // Field ownStack:Ljava/util/Stack;
     215: invokevirtual #18                 // Method java/util/Stack.pop:()Ljava/lang/Object;
     218: pop
     219: getstatic     #10                 // Field globalStack:Ljava/util/Stack;
     222: invokevirtual #18                 // Method java/util/Stack.pop:()Ljava/lang/Object;
     225: pop
     226: goto          249
     229: astore        9
     231: aload_0
     232: getfield      #8                  // Field ownStack:Ljava/util/Stack;
     235: invokevirtual #18                 // Method java/util/Stack.pop:()Ljava/lang/Object;
     238: pop
     239: getstatic     #10                 // Field globalStack:Ljava/util/Stack;
     242: invokevirtual #18                 // Method java/util/Stack.pop:()Ljava/lang/Object;
     245: pop
     246: aload         9
     248: athrow
     249: aload_2
     250: aload_3
     251: monitorexit
     252: areturn
     253: astore        10
     255: aload_3
     256: monitorexit
     257: aload         10
     259: athrow
    Exception table:
       from    to  target type
          24   211   229   any
         229   231   229   any
           7   252   253   any
         253   257   253   any

  private void cacheIfEnabled(X, Y);
    Code:
       0: aload_0
       1: getfield      #2                  // Field cache:Ljava/util/Map;
       4: ifnull        19
       7: aload_0
       8: getfield      #2                  // Field cache:Ljava/util/Map;
      11: aload_1
      12: aload_2
      13: invokeinterface #19,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: return

  public static <X, Y> io.sundr.FunctionFactory<X, Y> cache(io.sundr.Function<X, Y>);
    Code:
       0: new           #20                 // class io/sundr/FunctionFactory
       3: dup
       4: new           #21                 // class java/util/HashMap
       7: dup
       8: invokespecial #22                 // Method java/util/HashMap."<init>":()V
      11: aload_0
      12: aconst_null
      13: aconst_null
      14: iconst_0
      15: iconst_0
      16: new           #23                 // class java/util/Stack
      19: dup
      20: invokespecial #24                 // Method java/util/Stack."<init>":()V
      23: invokespecial #25                 // Method "<init>":(Ljava/util/Map;Lio/sundr/Function;Lio/sundr/Function;Lio/sundr/Function;IILjava/util/Stack;)V
      26: areturn

  public static <X, Y> io.sundr.FunctionFactory<X, Y> wrap(io.sundr.Function<X, Y>);
    Code:
       0: new           #20                 // class io/sundr/FunctionFactory
       3: dup
       4: aconst_null
       5: aload_0
       6: aconst_null
       7: aconst_null
       8: iconst_0
       9: iconst_0
      10: new           #23                 // class java/util/Stack
      13: dup
      14: invokespecial #24                 // Method java/util/Stack."<init>":()V
      17: invokespecial #25                 // Method "<init>":(Ljava/util/Map;Lio/sundr/Function;Lio/sundr/Function;Lio/sundr/Function;IILjava/util/Stack;)V
      20: areturn

  public io.sundr.FunctionFactory<X, Y> withFallback(io.sundr.Function<X, Y>);
    Code:
       0: new           #20                 // class io/sundr/FunctionFactory
       3: dup
       4: aload_0
       5: getfield      #2                  // Field cache:Ljava/util/Map;
       8: aload_0
       9: getfield      #3                  // Field function:Lio/sundr/Function;
      12: aload_1
      13: aload_0
      14: getfield      #5                  // Field fallbackPredicate:Lio/sundr/Function;
      17: aload_0
      18: getfield      #6                  // Field maximumRecursionLevel:I
      21: aload_0
      22: getfield      #7                  // Field maximumNestingDepth:I
      25: aload_0
      26: getfield      #8                  // Field ownStack:Ljava/util/Stack;
      29: invokespecial #25                 // Method "<init>":(Ljava/util/Map;Lio/sundr/Function;Lio/sundr/Function;Lio/sundr/Function;IILjava/util/Stack;)V
      32: areturn

  public io.sundr.FunctionFactory<X, Y> withMaximumRecursionLevel(int);
    Code:
       0: new           #20                 // class io/sundr/FunctionFactory
       3: dup
       4: aload_0
       5: getfield      #2                  // Field cache:Ljava/util/Map;
       8: aload_0
       9: getfield      #3                  // Field function:Lio/sundr/Function;
      12: aload_0
      13: getfield      #4                  // Field fallback:Lio/sundr/Function;
      16: aload_0
      17: getfield      #5                  // Field fallbackPredicate:Lio/sundr/Function;
      20: iload_1
      21: aload_0
      22: getfield      #7                  // Field maximumNestingDepth:I
      25: aload_0
      26: getfield      #8                  // Field ownStack:Ljava/util/Stack;
      29: invokespecial #25                 // Method "<init>":(Ljava/util/Map;Lio/sundr/Function;Lio/sundr/Function;Lio/sundr/Function;IILjava/util/Stack;)V
      32: areturn

  public io.sundr.FunctionFactory<X, Y> withMaximumNestingDepth(int);
    Code:
       0: new           #20                 // class io/sundr/FunctionFactory
       3: dup
       4: aload_0
       5: getfield      #2                  // Field cache:Ljava/util/Map;
       8: aload_0
       9: getfield      #3                  // Field function:Lio/sundr/Function;
      12: aload_0
      13: getfield      #4                  // Field fallback:Lio/sundr/Function;
      16: aload_0
      17: getfield      #5                  // Field fallbackPredicate:Lio/sundr/Function;
      20: aload_0
      21: getfield      #6                  // Field maximumRecursionLevel:I
      24: iload_1
      25: aload_0
      26: getfield      #8                  // Field ownStack:Ljava/util/Stack;
      29: invokespecial #25                 // Method "<init>":(Ljava/util/Map;Lio/sundr/Function;Lio/sundr/Function;Lio/sundr/Function;IILjava/util/Stack;)V
      32: areturn

  public io.sundr.FunctionFactory<X, Y> withFallbackPredicate(io.sundr.Function<X, java.lang.Boolean>);
    Code:
       0: new           #20                 // class io/sundr/FunctionFactory
       3: dup
       4: aload_0
       5: getfield      #2                  // Field cache:Ljava/util/Map;
       8: aload_0
       9: getfield      #3                  // Field function:Lio/sundr/Function;
      12: aload_0
      13: getfield      #4                  // Field fallback:Lio/sundr/Function;
      16: aload_1
      17: aload_0
      18: getfield      #6                  // Field maximumRecursionLevel:I
      21: aload_0
      22: getfield      #7                  // Field maximumNestingDepth:I
      25: aload_0
      26: getfield      #8                  // Field ownStack:Ljava/util/Stack;
      29: invokespecial #25                 // Method "<init>":(Ljava/util/Map;Lio/sundr/Function;Lio/sundr/Function;Lio/sundr/Function;IILjava/util/Stack;)V
      32: areturn

  static {};
    Code:
       0: new           #23                 // class java/util/Stack
       3: dup
       4: invokespecial #24                 // Method java/util/Stack."<init>":()V
       7: putstatic     #10                 // Field globalStack:Ljava/util/Stack;
      10: return
}
