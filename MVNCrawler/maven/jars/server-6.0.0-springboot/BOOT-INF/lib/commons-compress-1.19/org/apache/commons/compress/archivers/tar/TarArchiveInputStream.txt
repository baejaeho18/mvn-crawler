Compiled from "TarArchiveInputStream.java"
public class org.apache.commons.compress.archivers.tar.TarArchiveInputStream extends org.apache.commons.compress.archivers.ArchiveInputStream {
  private static final int SMALL_BUFFER_SIZE;

  private final byte[] smallBuf;

  private final int recordSize;

  private final int blockSize;

  private boolean hasHitEOF;

  private long entrySize;

  private long entryOffset;

  private final java.io.InputStream is;

  private org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry;

  private final org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding;

  final java.lang.String encoding;

  private java.util.Map<java.lang.String, java.lang.String> globalPaxHeaders;

  private final boolean lenient;

  public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream);
    Code:
       0: aload_0
       1: aload_1
       2: sipush        10240
       5: sipush        512
       8: invokespecial #2                  // Method "<init>":(Ljava/io/InputStream;II)V
      11: return

  public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: sipush        10240
       5: sipush        512
       8: aconst_null
       9: iload_2
      10: invokespecial #3                  // Method "<init>":(Ljava/io/InputStream;IILjava/lang/String;Z)V
      13: return

  public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: sipush        10240
       5: sipush        512
       8: aload_2
       9: invokespecial #4                  // Method "<init>":(Ljava/io/InputStream;IILjava/lang/String;)V
      12: return

  public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: sipush        512
       6: invokespecial #2                  // Method "<init>":(Ljava/io/InputStream;II)V
       9: return

  public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream, int, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: sipush        512
       6: aload_3
       7: invokespecial #4                  // Method "<init>":(Ljava/io/InputStream;IILjava/lang/String;)V
      10: return

  public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: aconst_null
       5: invokespecial #4                  // Method "<init>":(Ljava/io/InputStream;IILjava/lang/String;)V
       8: return

  public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream, int, int, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: aload         4
       6: iconst_0
       7: invokespecial #3                  // Method "<init>":(Ljava/io/InputStream;IILjava/lang/String;Z)V
      10: return

  public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream, int, int, java.lang.String, boolean);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method org/apache/commons/compress/archivers/ArchiveInputStream."<init>":()V
       4: aload_0
       5: sipush        256
       8: newarray       byte
      10: putfield      #7                  // Field smallBuf:[B
      13: aload_0
      14: new           #8                  // class java/util/HashMap
      17: dup
      18: invokespecial #9                  // Method java/util/HashMap."<init>":()V
      21: putfield      #10                 // Field globalPaxHeaders:Ljava/util/Map;
      24: aload_0
      25: aload_1
      26: putfield      #11                 // Field is:Ljava/io/InputStream;
      29: aload_0
      30: iconst_0
      31: putfield      #12                 // Field hasHitEOF:Z
      34: aload_0
      35: aload         4
      37: putfield      #13                 // Field encoding:Ljava/lang/String;
      40: aload_0
      41: aload         4
      43: invokestatic  #14                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;
      46: putfield      #15                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;
      49: aload_0
      50: iload_3
      51: putfield      #16                 // Field recordSize:I
      54: aload_0
      55: iload_2
      56: putfield      #17                 // Field blockSize:I
      59: aload_0
      60: iload         5
      62: putfield      #18                 // Field lenient:Z
      65: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #11                 // Field is:Ljava/io/InputStream;
       4: invokevirtual #19                 // Method java/io/InputStream.close:()V
       7: return

  public int getRecordSize();
    Code:
       0: aload_0
       1: getfield      #16                 // Field recordSize:I
       4: ireturn

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #20                 // Method isDirectory:()Z
       4: ifeq          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #21                 // Field entrySize:J
      13: aload_0
      14: getfield      #22                 // Field entryOffset:J
      17: lsub
      18: ldc2_w        #24                 // long 2147483647l
      21: lcmp
      22: ifle          28
      25: ldc           #26                 // int 2147483647
      27: ireturn
      28: aload_0
      29: getfield      #21                 // Field entrySize:J
      32: aload_0
      33: getfield      #22                 // Field entryOffset:J
      36: lsub
      37: l2i
      38: ireturn

  public long skip(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifle          13
       6: aload_0
       7: invokespecial #20                 // Method isDirectory:()Z
      10: ifeq          15
      13: lconst_0
      14: lreturn
      15: aload_0
      16: getfield      #21                 // Field entrySize:J
      19: aload_0
      20: getfield      #22                 // Field entryOffset:J
      23: lsub
      24: lstore_3
      25: aload_0
      26: getfield      #11                 // Field is:Ljava/io/InputStream;
      29: lload_1
      30: lload_3
      31: invokestatic  #27                 // Method java/lang/Math.min:(JJ)J
      34: invokestatic  #28                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J
      37: lstore        5
      39: aload_0
      40: lload         5
      42: invokevirtual #29                 // Method count:(J)V
      45: aload_0
      46: dup
      47: getfield      #22                 // Field entryOffset:J
      50: lload         5
      52: ladd
      53: putfield      #22                 // Field entryOffset:J
      56: lload         5
      58: lreturn

  public boolean markSupported();
    Code:
       0: iconst_0
       1: ireturn

  public void mark(int);
    Code:
       0: return

  public synchronized void reset();
    Code:
       0: return

  public org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method isAtEOF:()Z
       4: ifeq          9
       7: aconst_null
       8: areturn
       9: aload_0
      10: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
      13: ifnull        28
      16: aload_0
      17: ldc2_w        #33                 // long 9223372036854775807l
      20: invokestatic  #28                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J
      23: pop2
      24: aload_0
      25: invokespecial #35                 // Method skipRecordPadding:()V
      28: aload_0
      29: invokespecial #36                 // Method getRecord:()[B
      32: astore_1
      33: aload_1
      34: ifnonnull     44
      37: aload_0
      38: aconst_null
      39: putfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
      42: aconst_null
      43: areturn
      44: aload_0
      45: new           #37                 // class org/apache/commons/compress/archivers/tar/TarArchiveEntry
      48: dup
      49: aload_1
      50: aload_0
      51: getfield      #15                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;
      54: aload_0
      55: getfield      #18                 // Field lenient:Z
      58: invokespecial #38                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry."<init>":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V
      61: putfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
      64: goto          79
      67: astore_2
      68: new           #40                 // class java/io/IOException
      71: dup
      72: ldc           #41                 // String Error detected parsing the header
      74: aload_2
      75: invokespecial #42                 // Method java/io/IOException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      78: athrow
      79: aload_0
      80: lconst_0
      81: putfield      #22                 // Field entryOffset:J
      84: aload_0
      85: aload_0
      86: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
      89: invokevirtual #43                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J
      92: putfield      #21                 // Field entrySize:J
      95: aload_0
      96: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
      99: invokevirtual #44                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z
     102: ifeq          133
     105: aload_0
     106: invokevirtual #45                 // Method getLongNameData:()[B
     109: astore_2
     110: aload_2
     111: ifnonnull     116
     114: aconst_null
     115: areturn
     116: aload_0
     117: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
     120: aload_0
     121: getfield      #15                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;
     124: aload_2
     125: invokeinterface #46,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;
     130: invokevirtual #47                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V
     133: aload_0
     134: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
     137: invokevirtual #48                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z
     140: ifeq          171
     143: aload_0
     144: invokevirtual #45                 // Method getLongNameData:()[B
     147: astore_2
     148: aload_2
     149: ifnonnull     154
     152: aconst_null
     153: areturn
     154: aload_0
     155: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
     158: aload_0
     159: getfield      #15                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;
     162: aload_2
     163: invokeinterface #46,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;
     168: invokevirtual #49                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V
     171: aload_0
     172: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
     175: invokevirtual #50                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z
     178: ifeq          185
     181: aload_0
     182: invokespecial #51                 // Method readGlobalPaxHeaders:()V
     185: aload_0
     186: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
     189: invokevirtual #52                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z
     192: ifeq          202
     195: aload_0
     196: invokespecial #53                 // Method paxHeaders:()V
     199: goto          222
     202: aload_0
     203: getfield      #10                 // Field globalPaxHeaders:Ljava/util/Map;
     206: invokeinterface #54,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
     211: ifne          222
     214: aload_0
     215: aload_0
     216: getfield      #10                 // Field globalPaxHeaders:Ljava/util/Map;
     219: invokespecial #55                 // Method applyPaxHeadersToCurrentEntry:(Ljava/util/Map;)V
     222: aload_0
     223: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
     226: invokevirtual #56                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z
     229: ifeq          236
     232: aload_0
     233: invokespecial #57                 // Method readOldGNUSparse:()V
     236: aload_0
     237: aload_0
     238: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
     241: invokevirtual #43                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J
     244: putfield      #21                 // Field entrySize:J
     247: aload_0
     248: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
     251: areturn
    Exception table:
       from    to  target type
          44    64    67   Class java/lang/IllegalArgumentException

  private void skipRecordPadding() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #20                 // Method isDirectory:()Z
       4: ifne          73
       7: aload_0
       8: getfield      #21                 // Field entrySize:J
      11: lconst_0
      12: lcmp
      13: ifle          73
      16: aload_0
      17: getfield      #21                 // Field entrySize:J
      20: aload_0
      21: getfield      #16                 // Field recordSize:I
      24: i2l
      25: lrem
      26: lconst_0
      27: lcmp
      28: ifeq          73
      31: aload_0
      32: getfield      #21                 // Field entrySize:J
      35: aload_0
      36: getfield      #16                 // Field recordSize:I
      39: i2l
      40: ldiv
      41: lconst_1
      42: ladd
      43: lstore_1
      44: lload_1
      45: aload_0
      46: getfield      #16                 // Field recordSize:I
      49: i2l
      50: lmul
      51: aload_0
      52: getfield      #21                 // Field entrySize:J
      55: lsub
      56: lstore_3
      57: aload_0
      58: getfield      #11                 // Field is:Ljava/io/InputStream;
      61: lload_3
      62: invokestatic  #28                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J
      65: lstore        5
      67: aload_0
      68: lload         5
      70: invokevirtual #29                 // Method count:(J)V
      73: return

  protected byte[] getLongNameData() throws java.io.IOException;
    Code:
       0: new           #58                 // class java/io/ByteArrayOutputStream
       3: dup
       4: invokespecial #59                 // Method java/io/ByteArrayOutputStream."<init>":()V
       7: astore_1
       8: iconst_0
       9: istore_2
      10: aload_0
      11: aload_0
      12: getfield      #7                  // Field smallBuf:[B
      15: invokevirtual #60                 // Method read:([B)I
      18: dup
      19: istore_2
      20: iflt          36
      23: aload_1
      24: aload_0
      25: getfield      #7                  // Field smallBuf:[B
      28: iconst_0
      29: iload_2
      30: invokevirtual #61                 // Method java/io/ByteArrayOutputStream.write:([BII)V
      33: goto          10
      36: aload_0
      37: invokevirtual #62                 // Method getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;
      40: pop
      41: aload_0
      42: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
      45: ifnonnull     50
      48: aconst_null
      49: areturn
      50: aload_1
      51: invokevirtual #63                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B
      54: astore_3
      55: aload_3
      56: arraylength
      57: istore_2
      58: iload_2
      59: ifle          76
      62: aload_3
      63: iload_2
      64: iconst_1
      65: isub
      66: baload
      67: ifne          76
      70: iinc          2, -1
      73: goto          58
      76: iload_2
      77: aload_3
      78: arraylength
      79: if_icmpeq     99
      82: iload_2
      83: newarray       byte
      85: astore        4
      87: aload_3
      88: iconst_0
      89: aload         4
      91: iconst_0
      92: iload_2
      93: invokestatic  #64                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      96: aload         4
      98: astore_3
      99: aload_3
     100: areturn

  private byte[] getRecord() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #65                 // Method readRecord:()[B
       4: astore_1
       5: aload_0
       6: aload_0
       7: aload_1
       8: invokevirtual #66                 // Method isEOFRecord:([B)Z
      11: invokevirtual #67                 // Method setAtEOF:(Z)V
      14: aload_0
      15: invokevirtual #30                 // Method isAtEOF:()Z
      18: ifeq          35
      21: aload_1
      22: ifnull        35
      25: aload_0
      26: invokespecial #68                 // Method tryToConsumeSecondEOFRecord:()V
      29: aload_0
      30: invokespecial #69                 // Method consumeRemainderOfLastBlock:()V
      33: aconst_null
      34: astore_1
      35: aload_1
      36: areturn

  protected boolean isEOFRecord(byte[]);
    Code:
       0: aload_1
       1: ifnull        15
       4: aload_1
       5: aload_0
       6: getfield      #16                 // Field recordSize:I
       9: invokestatic  #70                 // Method org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z
      12: ifeq          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  protected byte[] readRecord() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #16                 // Field recordSize:I
       4: newarray       byte
       6: astore_1
       7: aload_0
       8: getfield      #11                 // Field is:Ljava/io/InputStream;
      11: aload_1
      12: invokestatic  #71                 // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[B)I
      15: istore_2
      16: aload_0
      17: iload_2
      18: invokevirtual #72                 // Method count:(I)V
      21: iload_2
      22: aload_0
      23: getfield      #16                 // Field recordSize:I
      26: if_icmpeq     31
      29: aconst_null
      30: areturn
      31: aload_1
      32: areturn

  private void readGlobalPaxHeaders() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_0
       3: invokevirtual #73                 // Method parsePaxHeaders:(Ljava/io/InputStream;)Ljava/util/Map;
       6: putfield      #10                 // Field globalPaxHeaders:Ljava/util/Map;
       9: aload_0
      10: invokevirtual #62                 // Method getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;
      13: pop
      14: return

  private void paxHeaders() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #73                 // Method parsePaxHeaders:(Ljava/io/InputStream;)Ljava/util/Map;
       5: astore_1
       6: aload_0
       7: invokevirtual #62                 // Method getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;
      10: pop
      11: aload_0
      12: aload_1
      13: invokespecial #55                 // Method applyPaxHeadersToCurrentEntry:(Ljava/util/Map;)V
      16: return

  java.util.Map<java.lang.String, java.lang.String> parsePaxHeaders(java.io.InputStream) throws java.io.IOException;
    Code:
       0: new           #8                  // class java/util/HashMap
       3: dup
       4: aload_0
       5: getfield      #10                 // Field globalPaxHeaders:Ljava/util/Map;
       8: invokespecial #74                 // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
      11: astore_2
      12: iconst_0
      13: istore        4
      15: iconst_0
      16: istore        5
      18: aload_1
      19: invokevirtual #75                 // Method java/io/InputStream.read:()I
      22: dup
      23: istore_3
      24: iconst_m1
      25: if_icmpeq     228
      28: iinc          5, 1
      31: iload_3
      32: bipush        10
      34: if_icmpne     40
      37: goto          228
      40: iload_3
      41: bipush        32
      43: if_icmpne     209
      46: new           #58                 // class java/io/ByteArrayOutputStream
      49: dup
      50: invokespecial #59                 // Method java/io/ByteArrayOutputStream."<init>":()V
      53: astore        6
      55: aload_1
      56: invokevirtual #75                 // Method java/io/InputStream.read:()I
      59: dup
      60: istore_3
      61: iconst_m1
      62: if_icmpeq     228
      65: iinc          5, 1
      68: iload_3
      69: bipush        61
      71: if_icmpne     199
      74: aload         6
      76: ldc           #77                 // String UTF-8
      78: invokevirtual #78                 // Method java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;
      81: astore        7
      83: iload         4
      85: iload         5
      87: isub
      88: istore        8
      90: iload         8
      92: iconst_1
      93: if_icmpne     108
      96: aload_2
      97: aload         7
      99: invokeinterface #79,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     104: pop
     105: goto          228
     108: iload         8
     110: newarray       byte
     112: astore        9
     114: aload_1
     115: aload         9
     117: invokestatic  #71                 // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[B)I
     120: istore        10
     122: iload         10
     124: iload         8
     126: if_icmpeq     167
     129: new           #40                 // class java/io/IOException
     132: dup
     133: new           #80                 // class java/lang/StringBuilder
     136: dup
     137: invokespecial #81                 // Method java/lang/StringBuilder."<init>":()V
     140: ldc           #82                 // String Failed to read Paxheader. Expected
     142: invokevirtual #83                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     145: iload         8
     147: invokevirtual #84                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     150: ldc           #85                 // String  bytes, read
     152: invokevirtual #83                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     155: iload         10
     157: invokevirtual #84                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     160: invokevirtual #86                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     163: invokespecial #87                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     166: athrow
     167: new           #88                 // class java/lang/String
     170: dup
     171: aload         9
     173: iconst_0
     174: iload         8
     176: iconst_1
     177: isub
     178: ldc           #77                 // String UTF-8
     180: invokespecial #89                 // Method java/lang/String."<init>":([BIILjava/lang/String;)V
     183: astore        11
     185: aload_2
     186: aload         7
     188: aload         11
     190: invokeinterface #90,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     195: pop
     196: goto          228
     199: aload         6
     201: iload_3
     202: i2b
     203: invokevirtual #91                 // Method java/io/ByteArrayOutputStream.write:(I)V
     206: goto          55
     209: iload         4
     211: bipush        10
     213: imul
     214: istore        4
     216: iload         4
     218: iload_3
     219: bipush        48
     221: isub
     222: iadd
     223: istore        4
     225: goto          18
     228: iload_3
     229: iconst_m1
     230: if_icmpne     236
     233: goto          239
     236: goto          12
     239: aload_2
     240: areturn

  private void applyPaxHeadersToCurrentEntry(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
       4: aload_1
       5: invokevirtual #92                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V
       8: return

  private void readOldGNUSparse() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
       4: invokevirtual #93                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z
       7: ifeq          43
      10: aload_0
      11: invokespecial #36                 // Method getRecord:()[B
      14: astore_2
      15: aload_2
      16: ifnonnull     27
      19: aload_0
      20: aconst_null
      21: putfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
      24: goto          43
      27: new           #94                 // class org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry
      30: dup
      31: aload_2
      32: invokespecial #95                 // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry."<init>":([B)V
      35: astore_1
      36: aload_1
      37: invokevirtual #96                 // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z
      40: ifne          10
      43: return

  private boolean isDirectory();
    Code:
       0: aload_0
       1: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
       4: ifnull        21
       7: aload_0
       8: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
      11: invokevirtual #97                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public org.apache.commons.compress.archivers.ArchiveEntry getNextEntry() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #98                 // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
       4: areturn

  private void tryToConsumeSecondEOFRecord() throws java.io.IOException;
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #11                 // Field is:Ljava/io/InputStream;
       6: invokevirtual #99                 // Method java/io/InputStream.markSupported:()Z
       9: istore_2
      10: iload_2
      11: ifeq          25
      14: aload_0
      15: getfield      #11                 // Field is:Ljava/io/InputStream;
      18: aload_0
      19: getfield      #16                 // Field recordSize:I
      22: invokevirtual #100                // Method java/io/InputStream.mark:(I)V
      25: aload_0
      26: aload_0
      27: invokevirtual #65                 // Method readRecord:()[B
      30: invokevirtual #66                 // Method isEOFRecord:([B)Z
      33: ifne          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: istore_1
      42: iload_1
      43: ifeq          96
      46: iload_2
      47: ifeq          96
      50: aload_0
      51: aload_0
      52: getfield      #16                 // Field recordSize:I
      55: i2l
      56: invokevirtual #101                // Method pushedBackBytes:(J)V
      59: aload_0
      60: getfield      #11                 // Field is:Ljava/io/InputStream;
      63: invokevirtual #102                // Method java/io/InputStream.reset:()V
      66: goto          96
      69: astore_3
      70: iload_1
      71: ifeq          94
      74: iload_2
      75: ifeq          94
      78: aload_0
      79: aload_0
      80: getfield      #16                 // Field recordSize:I
      83: i2l
      84: invokevirtual #101                // Method pushedBackBytes:(J)V
      87: aload_0
      88: getfield      #11                 // Field is:Ljava/io/InputStream;
      91: invokevirtual #102                // Method java/io/InputStream.reset:()V
      94: aload_3
      95: athrow
      96: return
    Exception table:
       from    to  target type
          25    42    69   any

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore        4
       3: aload_0
       4: invokevirtual #30                 // Method isAtEOF:()Z
       7: ifne          29
      10: aload_0
      11: invokespecial #20                 // Method isDirectory:()Z
      14: ifne          29
      17: aload_0
      18: getfield      #22                 // Field entryOffset:J
      21: aload_0
      22: getfield      #21                 // Field entrySize:J
      25: lcmp
      26: iflt          31
      29: iconst_m1
      30: ireturn
      31: aload_0
      32: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
      35: ifnonnull     48
      38: new           #103                // class java/lang/IllegalStateException
      41: dup
      42: ldc           #104                // String No current tar entry
      44: invokespecial #105                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: iload_3
      49: aload_0
      50: invokevirtual #106                // Method available:()I
      53: invokestatic  #107                // Method java/lang/Math.min:(II)I
      56: istore_3
      57: aload_0
      58: getfield      #11                 // Field is:Ljava/io/InputStream;
      61: aload_1
      62: iload_2
      63: iload_3
      64: invokevirtual #108                // Method java/io/InputStream.read:([BII)I
      67: istore        4
      69: iload         4
      71: iconst_m1
      72: if_icmpne     97
      75: iload_3
      76: ifle          89
      79: new           #40                 // class java/io/IOException
      82: dup
      83: ldc           #109                // String Truncated TAR archive
      85: invokespecial #87                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      88: athrow
      89: aload_0
      90: iconst_1
      91: invokevirtual #67                 // Method setAtEOF:(Z)V
      94: goto          115
      97: aload_0
      98: iload         4
     100: invokevirtual #72                 // Method count:(I)V
     103: aload_0
     104: dup
     105: getfield      #22                 // Field entryOffset:J
     108: iload         4
     110: i2l
     111: ladd
     112: putfield      #22                 // Field entryOffset:J
     115: iload         4
     117: ireturn

  public boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry);
    Code:
       0: aload_1
       1: instanceof    #37                 // class org/apache/commons/compress/archivers/tar/TarArchiveEntry
       4: ifeq          25
       7: aload_1
       8: checkcast     #37                 // class org/apache/commons/compress/archivers/tar/TarArchiveEntry
      11: astore_2
      12: aload_2
      13: invokevirtual #110                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z
      16: ifne          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn
      25: iconst_0
      26: ireturn

  public org.apache.commons.compress.archivers.tar.TarArchiveEntry getCurrentEntry();
    Code:
       0: aload_0
       1: getfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
       4: areturn

  protected final void setCurrentEntry(org.apache.commons.compress.archivers.tar.TarArchiveEntry);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #31                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
       5: return

  protected final boolean isAtEOF();
    Code:
       0: aload_0
       1: getfield      #12                 // Field hasHitEOF:Z
       4: ireturn

  protected final void setAtEOF(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field hasHitEOF:Z
       5: return

  private void consumeRemainderOfLastBlock() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #111                // Method getBytesRead:()J
       4: aload_0
       5: getfield      #17                 // Field blockSize:I
       8: i2l
       9: lrem
      10: lstore_1
      11: lload_1
      12: lconst_0
      13: lcmp
      14: ifle          37
      17: aload_0
      18: getfield      #11                 // Field is:Ljava/io/InputStream;
      21: aload_0
      22: getfield      #17                 // Field blockSize:I
      25: i2l
      26: lload_1
      27: lsub
      28: invokestatic  #28                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J
      31: lstore_3
      32: aload_0
      33: lload_3
      34: invokevirtual #29                 // Method count:(J)V
      37: return

  public static boolean matches(byte[], int);
    Code:
       0: iload_1
       1: sipush        265
       4: if_icmpge     9
       7: iconst_0
       8: ireturn
       9: ldc           #112                // String ustar\u0000
      11: aload_0
      12: sipush        257
      15: bipush        6
      17: invokestatic  #113                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z
      20: ifeq          38
      23: ldc           #114                // String 00
      25: aload_0
      26: sipush        263
      29: iconst_2
      30: invokestatic  #113                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z
      33: ifeq          38
      36: iconst_1
      37: ireturn
      38: ldc           #115                // String ustar
      40: aload_0
      41: sipush        257
      44: bipush        6
      46: invokestatic  #113                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z
      49: ifeq          80
      52: ldc           #116                // String  \u0000
      54: aload_0
      55: sipush        263
      58: iconst_2
      59: invokestatic  #113                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z
      62: ifne          78
      65: ldc           #117                // String 0\u0000
      67: aload_0
      68: sipush        263
      71: iconst_2
      72: invokestatic  #113                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z
      75: ifeq          80
      78: iconst_1
      79: ireturn
      80: ldc           #112                // String ustar\u0000
      82: aload_0
      83: sipush        257
      86: bipush        6
      88: invokestatic  #113                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z
      91: ifeq          111
      94: ldc           #118                // String \u0000\u0000
      96: aload_0
      97: sipush        263
     100: iconst_2
     101: invokestatic  #113                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z
     104: ifeq          111
     107: iconst_1
     108: goto          112
     111: iconst_0
     112: ireturn
}
