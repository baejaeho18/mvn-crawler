Compiled from "ZipUtil.java"
public abstract class org.apache.commons.compress.archivers.zip.ZipUtil {
  private static final byte[] DOS_TIME_MIN;

  public org.apache.commons.compress.archivers.zip.ZipUtil();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static org.apache.commons.compress.archivers.zip.ZipLong toDosTime(java.util.Date);
    Code:
       0: new           #2                  // class org/apache/commons/compress/archivers/zip/ZipLong
       3: dup
       4: aload_0
       5: invokevirtual #3                  // Method java/util/Date.getTime:()J
       8: invokestatic  #4                  // Method toDosTime:(J)[B
      11: invokespecial #5                  // Method org/apache/commons/compress/archivers/zip/ZipLong."<init>":([B)V
      14: areturn

  public static byte[] toDosTime(long);
    Code:
       0: iconst_4
       1: newarray       byte
       3: astore_2
       4: lload_0
       5: aload_2
       6: iconst_0
       7: invokestatic  #6                  // Method toDosTime:(J[BI)V
      10: aload_2
      11: areturn

  public static void toDosTime(long, byte[], int);
    Code:
       0: invokestatic  #7                  // Method java/util/Calendar.getInstance:()Ljava/util/Calendar;
       3: lload_0
       4: aload_2
       5: iload_3
       6: invokestatic  #8                  // Method toDosTime:(Ljava/util/Calendar;J[BI)V
       9: return

  static void toDosTime(java.util.Calendar, long, byte[], int);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #9                  // Method java/util/Calendar.setTimeInMillis:(J)V
       5: aload_0
       6: iconst_1
       7: invokevirtual #11                 // Method java/util/Calendar.get:(I)I
      10: istore        5
      12: iload         5
      14: sipush        1980
      17: if_icmpge     30
      20: getstatic     #12                 // Field DOS_TIME_MIN:[B
      23: aload_3
      24: iload         4
      26: invokestatic  #13                 // Method copy:([B[BI)V
      29: return
      30: aload_0
      31: iconst_2
      32: invokevirtual #11                 // Method java/util/Calendar.get:(I)I
      35: iconst_1
      36: iadd
      37: istore        6
      39: iload         5
      41: sipush        1980
      44: isub
      45: bipush        25
      47: ishl
      48: iload         6
      50: bipush        21
      52: ishl
      53: ior
      54: aload_0
      55: iconst_5
      56: invokevirtual #11                 // Method java/util/Calendar.get:(I)I
      59: bipush        16
      61: ishl
      62: ior
      63: aload_0
      64: bipush        11
      66: invokevirtual #11                 // Method java/util/Calendar.get:(I)I
      69: bipush        11
      71: ishl
      72: ior
      73: aload_0
      74: bipush        12
      76: invokevirtual #11                 // Method java/util/Calendar.get:(I)I
      79: iconst_5
      80: ishl
      81: ior
      82: aload_0
      83: bipush        13
      85: invokevirtual #11                 // Method java/util/Calendar.get:(I)I
      88: iconst_1
      89: ishr
      90: ior
      91: i2l
      92: lstore        7
      94: lload         7
      96: aload_3
      97: iload         4
      99: invokestatic  #14                 // Method org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V
     102: return

  public static long adjustToLong(int);
    Code:
       0: iload_0
       1: ifge          11
       4: ldc2_w        #16                 // long 4294967296l
       7: iload_0
       8: i2l
       9: ladd
      10: lreturn
      11: iload_0
      12: i2l
      13: lreturn

  public static byte[] reverse(byte[]);
    Code:
       0: aload_0
       1: arraylength
       2: iconst_1
       3: isub
       4: istore_1
       5: iconst_0
       6: istore_2
       7: iload_2
       8: aload_0
       9: arraylength
      10: iconst_2
      11: idiv
      12: if_icmpge     39
      15: aload_0
      16: iload_2
      17: baload
      18: istore_3
      19: aload_0
      20: iload_2
      21: aload_0
      22: iload_1
      23: iload_2
      24: isub
      25: baload
      26: bastore
      27: aload_0
      28: iload_1
      29: iload_2
      30: isub
      31: iload_3
      32: bastore
      33: iinc          2, 1
      36: goto          7
      39: aload_0
      40: areturn

  static long bigToLong(java.math.BigInteger);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method java/math/BigInteger.bitLength:()I
       4: bipush        63
       6: if_icmpgt     14
       9: aload_0
      10: invokevirtual #19                 // Method java/math/BigInteger.longValue:()J
      13: lreturn
      14: new           #20                 // class java/lang/NumberFormatException
      17: dup
      18: new           #21                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #23                 // String The BigInteger cannot fit inside a 64 bit java long: [
      27: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_0
      31: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      34: ldc           #26                 // String ]
      36: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokespecial #28                 // Method java/lang/NumberFormatException."<init>":(Ljava/lang/String;)V
      45: athrow

  static java.math.BigInteger longToBig(long);
    Code:
       0: lload_0
       1: ldc2_w        #29                 // long -2147483648l
       4: lcmp
       5: ifge          40
       8: new           #31                 // class java/lang/IllegalArgumentException
      11: dup
      12: new           #21                 // class java/lang/StringBuilder
      15: dup
      16: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #32                 // String Negative longs < -2^31 not permitted: [
      21: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: lload_0
      25: invokevirtual #33                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      28: ldc           #26                 // String ]
      30: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #34                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: lload_0
      41: lconst_0
      42: lcmp
      43: ifge          60
      46: lload_0
      47: ldc2_w        #29                 // long -2147483648l
      50: lcmp
      51: iflt          60
      54: lload_0
      55: l2i
      56: invokestatic  #35                 // Method adjustToLong:(I)J
      59: lstore_0
      60: lload_0
      61: invokestatic  #36                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
      64: areturn

  public static int signedByteToUnsignedInt(byte);
    Code:
       0: iload_0
       1: iflt          6
       4: iload_0
       5: ireturn
       6: sipush        256
       9: iload_0
      10: iadd
      11: ireturn

  public static byte unsignedIntToSignedByte(int);
    Code:
       0: iload_0
       1: sipush        255
       4: if_icmpgt     11
       7: iload_0
       8: ifge          43
      11: new           #31                 // class java/lang/IllegalArgumentException
      14: dup
      15: new           #21                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #37                 // String Can only convert non-negative integers between [0,255] to byte: [
      24: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: iload_0
      28: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: ldc           #26                 // String ]
      33: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: invokespecial #34                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: iload_0
      44: sipush        128
      47: if_icmpge     53
      50: iload_0
      51: i2b
      52: ireturn
      53: iload_0
      54: sipush        256
      57: isub
      58: i2b
      59: ireturn

  public static java.util.Date fromDosTime(org.apache.commons.compress.archivers.zip.ZipLong);
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J
       4: lstore_1
       5: new           #40                 // class java/util/Date
       8: dup
       9: lload_1
      10: invokestatic  #41                 // Method dosToJavaTime:(J)J
      13: invokespecial #42                 // Method java/util/Date."<init>":(J)V
      16: areturn

  public static long dosToJavaTime(long);
    Code:
       0: invokestatic  #7                  // Method java/util/Calendar.getInstance:()Ljava/util/Calendar;
       3: astore_2
       4: aload_2
       5: iconst_1
       6: lload_0
       7: bipush        25
       9: lshr
      10: ldc2_w        #43                 // long 127l
      13: land
      14: l2i
      15: sipush        1980
      18: iadd
      19: invokevirtual #45                 // Method java/util/Calendar.set:(II)V
      22: aload_2
      23: iconst_2
      24: lload_0
      25: bipush        21
      27: lshr
      28: ldc2_w        #46                 // long 15l
      31: land
      32: l2i
      33: iconst_1
      34: isub
      35: invokevirtual #45                 // Method java/util/Calendar.set:(II)V
      38: aload_2
      39: iconst_5
      40: lload_0
      41: bipush        16
      43: lshr
      44: l2i
      45: bipush        31
      47: iand
      48: invokevirtual #45                 // Method java/util/Calendar.set:(II)V
      51: aload_2
      52: bipush        11
      54: lload_0
      55: bipush        11
      57: lshr
      58: l2i
      59: bipush        31
      61: iand
      62: invokevirtual #45                 // Method java/util/Calendar.set:(II)V
      65: aload_2
      66: bipush        12
      68: lload_0
      69: iconst_5
      70: lshr
      71: l2i
      72: bipush        63
      74: iand
      75: invokevirtual #45                 // Method java/util/Calendar.set:(II)V
      78: aload_2
      79: bipush        13
      81: lload_0
      82: iconst_1
      83: lshl
      84: l2i
      85: bipush        62
      87: iand
      88: invokevirtual #45                 // Method java/util/Calendar.set:(II)V
      91: aload_2
      92: bipush        14
      94: iconst_0
      95: invokevirtual #45                 // Method java/util/Calendar.set:(II)V
      98: aload_2
      99: invokevirtual #48                 // Method java/util/Calendar.getTime:()Ljava/util/Date;
     102: invokevirtual #3                  // Method java/util/Date.getTime:()J
     105: lreturn

  static void setNameAndCommentFromExtraFields(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, byte[], byte[]);
    Code:
       0: aload_0
       1: getstatic     #49                 // Field org/apache/commons/compress/archivers/zip/UnicodePathExtraField.UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;
       4: invokevirtual #50                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;
       7: astore_3
       8: aload_3
       9: instanceof    #51                 // class org/apache/commons/compress/archivers/zip/UnicodePathExtraField
      12: ifeq          22
      15: aload_3
      16: checkcast     #51                 // class org/apache/commons/compress/archivers/zip/UnicodePathExtraField
      19: goto          23
      22: aconst_null
      23: astore        4
      25: aload         4
      27: aload_1
      28: invokestatic  #52                 // Method getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;
      31: astore        5
      33: aload         5
      35: ifnull        51
      38: aload_0
      39: aload         5
      41: invokevirtual #53                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;)V
      44: aload_0
      45: getstatic     #54                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;
      48: invokevirtual #55                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V
      51: aload_2
      52: ifnull        114
      55: aload_2
      56: arraylength
      57: ifle          114
      60: aload_0
      61: getstatic     #56                 // Field org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;
      64: invokevirtual #50                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;
      67: astore        6
      69: aload         6
      71: instanceof    #57                 // class org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField
      74: ifeq          85
      77: aload         6
      79: checkcast     #57                 // class org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField
      82: goto          86
      85: aconst_null
      86: astore        7
      88: aload         7
      90: aload_2
      91: invokestatic  #52                 // Method getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;
      94: astore        8
      96: aload         8
      98: ifnull        114
     101: aload_0
     102: aload         8
     104: invokevirtual #58                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setComment:(Ljava/lang/String;)V
     107: aload_0
     108: getstatic     #59                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;
     111: invokevirtual #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V
     114: return

  private static java.lang.String getUnicodeStringIfOriginalMatches(org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField, byte[]);
    Code:
       0: aload_0
       1: ifnull        48
       4: new           #61                 // class java/util/zip/CRC32
       7: dup
       8: invokespecial #62                 // Method java/util/zip/CRC32."<init>":()V
      11: astore_2
      12: aload_2
      13: aload_1
      14: invokevirtual #63                 // Method java/util/zip/CRC32.update:([B)V
      17: aload_2
      18: invokevirtual #64                 // Method java/util/zip/CRC32.getValue:()J
      21: lstore_3
      22: lload_3
      23: aload_0
      24: invokevirtual #65                 // Method org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getNameCRC32:()J
      27: lcmp
      28: ifne          48
      31: getstatic     #66                 // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;
      34: aload_0
      35: invokevirtual #67                 // Method org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getUnicodeName:()[B
      38: invokeinterface #68,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;
      43: areturn
      44: astore        5
      46: aconst_null
      47: areturn
      48: aconst_null
      49: areturn
    Exception table:
       from    to  target type
          31    43    44   Class java/io/IOException

  static byte[] copy(byte[]);
    Code:
       0: aload_0
       1: ifnull        11
       4: aload_0
       5: aload_0
       6: arraylength
       7: invokestatic  #70                 // Method java/util/Arrays.copyOf:([BI)[B
      10: areturn
      11: aconst_null
      12: areturn

  static void copy(byte[], byte[], int);
    Code:
       0: aload_0
       1: ifnull        13
       4: aload_0
       5: iconst_0
       6: aload_1
       7: iload_2
       8: aload_0
       9: arraylength
      10: invokestatic  #71                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      13: return

  static boolean canHandleEntryData(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);
    Code:
       0: aload_0
       1: invokestatic  #72                 // Method supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z
       4: ifeq          18
       7: aload_0
       8: invokestatic  #73                 // Method supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  private static boolean supportsEncryptionOf(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);
    Code:
       0: aload_0
       1: invokevirtual #74                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;
       4: invokevirtual #75                 // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesEncryption:()Z
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  private static boolean supportsMethodOf(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);
    Code:
       0: aload_0
       1: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I
       4: ifeq          68
       7: aload_0
       8: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I
      11: getstatic     #77                 // Field org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;
      14: invokevirtual #78                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I
      17: if_icmpeq     68
      20: aload_0
      21: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I
      24: getstatic     #79                 // Field org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;
      27: invokevirtual #78                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I
      30: if_icmpeq     68
      33: aload_0
      34: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I
      37: bipush        8
      39: if_icmpeq     68
      42: aload_0
      43: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I
      46: getstatic     #81                 // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;
      49: invokevirtual #78                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I
      52: if_icmpeq     68
      55: aload_0
      56: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I
      59: getstatic     #82                 // Field org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;
      62: invokevirtual #78                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I
      65: if_icmpne     72
      68: iconst_1
      69: goto          73
      72: iconst_0
      73: ireturn

  static void checkRequestedFeatures(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
    Code:
       0: aload_0
       1: invokestatic  #72                 // Method supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z
       4: ifne          19
       7: new           #83                 // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException
      10: dup
      11: getstatic     #84                 // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;
      14: aload_0
      15: invokespecial #85                 // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException."<init>":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V
      18: athrow
      19: aload_0
      20: invokestatic  #73                 // Method supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z
      23: ifne          60
      26: aload_0
      27: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I
      30: invokestatic  #86                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;
      33: astore_1
      34: aload_1
      35: ifnonnull     50
      38: new           #83                 // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException
      41: dup
      42: getstatic     #87                 // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;
      45: aload_0
      46: invokespecial #85                 // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException."<init>":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V
      49: athrow
      50: new           #83                 // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException
      53: dup
      54: aload_1
      55: aload_0
      56: invokespecial #88                 // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException."<init>":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V
      59: athrow
      60: return

  static {};
    Code:
       0: ldc2_w        #89                 // long 8448l
       3: invokestatic  #91                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B
       6: putstatic     #12                 // Field DOS_TIME_MIN:[B
       9: return
}
