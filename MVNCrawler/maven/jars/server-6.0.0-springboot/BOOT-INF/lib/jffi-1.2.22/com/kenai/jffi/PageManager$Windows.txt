Compiled from "PageManager.java"
final class com.kenai.jffi.PageManager$Windows extends com.kenai.jffi.PageManager {
  public com.kenai.jffi.PageManager$Windows();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/kenai/jffi/PageManager."<init>":()V
       4: return

  public long allocatePages(int, int);
    Code:
       0: lconst_0
       1: aload_0
       2: invokevirtual #2                  // Method pageSize:()J
       5: l2i
       6: iload_1
       7: imul
       8: sipush        12288
      11: iload_2
      12: invokestatic  #4                  // Method w32prot:(I)I
      15: invokestatic  #5                  // Method com/kenai/jffi/Foreign.VirtualAlloc:(JIII)J
      18: lreturn

  public void freePages(long, int);
    Code:
       0: lload_1
       1: iconst_0
       2: ldc           #6                  // int 32768
       4: invokestatic  #7                  // Method com/kenai/jffi/Foreign.VirtualFree:(JII)Z
       7: pop
       8: return

  public void protectPages(long, int, int);
    Code:
       0: lload_1
       1: aload_0
       2: invokevirtual #2                  // Method pageSize:()J
       5: l2i
       6: iload_3
       7: imul
       8: iload         4
      10: invokestatic  #4                  // Method w32prot:(I)I
      13: invokestatic  #8                  // Method com/kenai/jffi/Foreign.VirtualProtect:(JII)Z
      16: pop
      17: return

  private static int w32prot(int);
    Code:
       0: iconst_1
       1: istore_1
       2: iload_0
       3: iconst_3
       4: iand
       5: iconst_3
       6: if_icmpne     14
       9: iconst_4
      10: istore_1
      11: goto          23
      14: iload_0
      15: iconst_1
      16: iand
      17: iconst_1
      18: if_icmpne     23
      21: iconst_2
      22: istore_1
      23: iload_0
      24: iconst_4
      25: iand
      26: iconst_4
      27: if_icmpne     34
      30: iload_1
      31: iconst_4
      32: ishl
      33: istore_1
      34: iload_1
      35: ireturn
}
