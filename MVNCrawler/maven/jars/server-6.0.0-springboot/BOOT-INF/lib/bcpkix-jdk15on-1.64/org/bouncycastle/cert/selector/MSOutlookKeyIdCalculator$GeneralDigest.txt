abstract class org.bouncycastle.cert.selector.MSOutlookKeyIdCalculator$GeneralDigest {
  private static final int BYTE_LENGTH;

  private byte[] xBuf;

  private int xBufOff;

  private long byteCount;

  protected org.bouncycastle.cert.selector.MSOutlookKeyIdCalculator$GeneralDigest();
    Code:
       0: aload_0
       1: invokespecial #46                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_4
       6: newarray       byte
       8: putfield      #45                 // Field xBuf:[B
      11: aload_0
      12: iconst_0
      13: putfield      #43                 // Field xBufOff:I
      16: return

  protected org.bouncycastle.cert.selector.MSOutlookKeyIdCalculator$GeneralDigest(org.bouncycastle.cert.selector.MSOutlookKeyIdCalculator$GeneralDigest);
    Code:
       0: aload_0
       1: invokespecial #46                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #45                 // Field xBuf:[B
       9: arraylength
      10: newarray       byte
      12: putfield      #45                 // Field xBuf:[B
      15: aload_0
      16: aload_1
      17: invokevirtual #52                 // Method copyIn:(Lorg/bouncycastle/cert/selector/MSOutlookKeyIdCalculator$GeneralDigest;)V
      20: return

  protected void copyIn(org.bouncycastle.cert.selector.MSOutlookKeyIdCalculator$GeneralDigest);
    Code:
       0: aload_1
       1: getfield      #45                 // Field xBuf:[B
       4: iconst_0
       5: aload_0
       6: getfield      #45                 // Field xBuf:[B
       9: iconst_0
      10: aload_1
      11: getfield      #45                 // Field xBuf:[B
      14: arraylength
      15: invokestatic  #47                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      18: aload_0
      19: aload_1
      20: getfield      #43                 // Field xBufOff:I
      23: putfield      #43                 // Field xBufOff:I
      26: aload_0
      27: aload_1
      28: getfield      #44                 // Field byteCount:J
      31: putfield      #44                 // Field byteCount:J
      34: return

  public void update(byte);
    Code:
       0: aload_0
       1: getfield      #45                 // Field xBuf:[B
       4: aload_0
       5: dup
       6: getfield      #43                 // Field xBufOff:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #43                 // Field xBufOff:I
      15: iload_1
      16: bastore
      17: aload_0
      18: getfield      #43                 // Field xBufOff:I
      21: aload_0
      22: getfield      #45                 // Field xBuf:[B
      25: arraylength
      26: if_icmpne     43
      29: aload_0
      30: aload_0
      31: getfield      #45                 // Field xBuf:[B
      34: iconst_0
      35: invokevirtual #51                 // Method processWord:([BI)V
      38: aload_0
      39: iconst_0
      40: putfield      #43                 // Field xBufOff:I
      43: aload_0
      44: dup
      45: getfield      #44                 // Field byteCount:J
      48: lconst_1
      49: ladd
      50: putfield      #44                 // Field byteCount:J
      53: return

  public void update(byte[], int, int);
    Code:
       0: aload_0
       1: getfield      #43                 // Field xBufOff:I
       4: ifeq          27
       7: iload_3
       8: ifle          27
      11: aload_0
      12: aload_1
      13: iload_2
      14: baload
      15: invokevirtual #49                 // Method update:(B)V
      18: iinc          2, 1
      21: iinc          3, -1
      24: goto          0
      27: iload_3
      28: aload_0
      29: getfield      #45                 // Field xBuf:[B
      32: arraylength
      33: if_icmple     76
      36: aload_0
      37: aload_1
      38: iload_2
      39: invokevirtual #51                 // Method processWord:([BI)V
      42: iload_2
      43: aload_0
      44: getfield      #45                 // Field xBuf:[B
      47: arraylength
      48: iadd
      49: istore_2
      50: iload_3
      51: aload_0
      52: getfield      #45                 // Field xBuf:[B
      55: arraylength
      56: isub
      57: istore_3
      58: aload_0
      59: dup
      60: getfield      #44                 // Field byteCount:J
      63: aload_0
      64: getfield      #45                 // Field xBuf:[B
      67: arraylength
      68: i2l
      69: ladd
      70: putfield      #44                 // Field byteCount:J
      73: goto          27
      76: iload_3
      77: ifle          96
      80: aload_0
      81: aload_1
      82: iload_2
      83: baload
      84: invokevirtual #49                 // Method update:(B)V
      87: iinc          2, 1
      90: iinc          3, -1
      93: goto          76
      96: return

  public void finish();
    Code:
       0: aload_0
       1: getfield      #44                 // Field byteCount:J
       4: iconst_3
       5: lshl
       6: lstore_1
       7: aload_0
       8: bipush        -128
      10: invokevirtual #49                 // Method update:(B)V
      13: aload_0
      14: getfield      #43                 // Field xBufOff:I
      17: ifeq          28
      20: aload_0
      21: iconst_0
      22: invokevirtual #49                 // Method update:(B)V
      25: goto          13
      28: aload_0
      29: lload_1
      30: invokevirtual #50                 // Method processLength:(J)V
      33: aload_0
      34: invokevirtual #48                 // Method processBlock:()V
      37: return

  public void reset();
    Code:
       0: aload_0
       1: lconst_0
       2: putfield      #44                 // Field byteCount:J
       5: aload_0
       6: iconst_0
       7: putfield      #43                 // Field xBufOff:I
      10: iconst_0
      11: istore_1
      12: iload_1
      13: aload_0
      14: getfield      #45                 // Field xBuf:[B
      17: arraylength
      18: if_icmpge     34
      21: aload_0
      22: getfield      #45                 // Field xBuf:[B
      25: iload_1
      26: iconst_0
      27: bastore
      28: iinc          1, 1
      31: goto          12
      34: return

  protected abstract void processWord(byte[], int);

  protected abstract void processLength(long);

  protected abstract void processBlock();
}
