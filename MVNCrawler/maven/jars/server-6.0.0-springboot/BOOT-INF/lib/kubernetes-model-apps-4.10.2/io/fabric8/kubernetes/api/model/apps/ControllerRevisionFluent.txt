Compiled from "ControllerRevisionFluent.java"
public interface io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent<A extends io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.HasMetadata getData();

  public abstract io.fabric8.kubernetes.api.model.HasMetadata buildData();

  public abstract A withData(io.fabric8.kubernetes.api.model.HasMetadata);

  public abstract java.lang.Boolean hasData();

  public abstract A withReplicaSetData(io.fabric8.kubernetes.api.model.apps.ReplicaSet);

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$ReplicaSetDataNested<A> withNewReplicaSetData();

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$ReplicaSetDataNested<A> withNewReplicaSetDataLike(io.fabric8.kubernetes.api.model.apps.ReplicaSet);

  public abstract A withDaemonSetData(io.fabric8.kubernetes.api.model.apps.DaemonSet);

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$DaemonSetDataNested<A> withNewDaemonSetData();

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$DaemonSetDataNested<A> withNewDaemonSetDataLike(io.fabric8.kubernetes.api.model.apps.DaemonSet);

  public abstract A withControllerRevisionData(io.fabric8.kubernetes.api.model.apps.ControllerRevision);

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$ControllerRevisionDataNested<A> withNewControllerRevisionData();

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$ControllerRevisionDataNested<A> withNewControllerRevisionDataLike(io.fabric8.kubernetes.api.model.apps.ControllerRevision);

  public abstract A withStatefulSetData(io.fabric8.kubernetes.api.model.apps.StatefulSet);

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$StatefulSetDataNested<A> withNewStatefulSetData();

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$StatefulSetDataNested<A> withNewStatefulSetDataLike(io.fabric8.kubernetes.api.model.apps.StatefulSet);

  public abstract A withPersistentVolumeClaimData(io.fabric8.kubernetes.api.model.PersistentVolumeClaim);

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$PersistentVolumeClaimDataNested<A> withNewPersistentVolumeClaimData();

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$PersistentVolumeClaimDataNested<A> withNewPersistentVolumeClaimDataLike(io.fabric8.kubernetes.api.model.PersistentVolumeClaim);

  public abstract A withDeploymentData(io.fabric8.kubernetes.api.model.apps.Deployment);

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$DeploymentDataNested<A> withNewDeploymentData();

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$DeploymentDataNested<A> withNewDeploymentDataLike(io.fabric8.kubernetes.api.model.apps.Deployment);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract io.fabric8.kubernetes.api.model.ObjectMeta getMetadata();

  public abstract io.fabric8.kubernetes.api.model.ObjectMeta buildMetadata();

  public abstract A withMetadata(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Boolean hasMetadata();

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$MetadataNested<A> withNewMetadata();

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$MetadataNested<A> withNewMetadataLike(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$MetadataNested<A> editMetadata();

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$MetadataNested<A> editOrNewMetadata();

  public abstract io.fabric8.kubernetes.api.model.apps.ControllerRevisionFluent$MetadataNested<A> editOrNewMetadataLike(io.fabric8.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Long getRevision();

  public abstract A withRevision(java.lang.Long);

  public abstract java.lang.Boolean hasRevision();
}
