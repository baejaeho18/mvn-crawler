public class org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement extends org.bouncycastle.math.ec.ECFieldElement$AbstractFp {
  public static final java.math.BigInteger Q;

  protected int[] x;

  public org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement(java.math.BigInteger);
    Code:
       0: aload_0
       1: invokespecial #121                // Method org/bouncycastle/math/ec/ECFieldElement$AbstractFp."<init>":()V
       4: aload_1
       5: ifnull        25
       8: aload_1
       9: invokevirtual #118                // Method java/math/BigInteger.signum:()I
      12: iflt          25
      15: aload_1
      16: getstatic     #114                // Field Q:Ljava/math/BigInteger;
      19: invokevirtual #120                // Method java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I
      22: iflt          35
      25: new           #62                 // class java/lang/IllegalArgumentException
      28: dup
      29: ldc           #3                  // String x value invalid for SM2P256V1FieldElement
      31: invokespecial #115                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: aload_1
      37: invokestatic  #129                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.fromBigInteger:(Ljava/math/BigInteger;)[I
      40: putfield      #113                // Field x:[I
      43: return

  public org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement();
    Code:
       0: aload_0
       1: invokespecial #121                // Method org/bouncycastle/math/ec/ECFieldElement$AbstractFp."<init>":()V
       4: aload_0
       5: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat256.create:()[I
       8: putfield      #113                // Field x:[I
      11: return

  protected org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement(int[]);
    Code:
       0: aload_0
       1: invokespecial #121                // Method org/bouncycastle/math/ec/ECFieldElement$AbstractFp."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #113                // Field x:[I
       9: return

  public boolean isZero();
    Code:
       0: aload_0
       1: getfield      #113                // Field x:[I
       4: invokestatic  #134                // Method org/bouncycastle/math/raw/Nat256.isZero:([I)Z
       7: ireturn

  public boolean isOne();
    Code:
       0: aload_0
       1: getfield      #113                // Field x:[I
       4: invokestatic  #133                // Method org/bouncycastle/math/raw/Nat256.isOne:([I)Z
       7: ireturn

  public boolean testBitZero();
    Code:
       0: aload_0
       1: getfield      #113                // Field x:[I
       4: iconst_0
       5: invokestatic  #135                // Method org/bouncycastle/math/raw/Nat256.getBit:([II)I
       8: iconst_1
       9: if_icmpne     16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public java.math.BigInteger toBigInteger();
    Code:
       0: aload_0
       1: getfield      #113                // Field x:[I
       4: invokestatic  #137                // Method org/bouncycastle/math/raw/Nat256.toBigInteger:([I)Ljava/math/BigInteger;
       7: areturn

  public java.lang.String getFieldName();
    Code:
       0: ldc           #2                  // String SM2P256V1Field
       2: areturn

  public int getFieldSize();
    Code:
       0: getstatic     #114                // Field Q:Ljava/math/BigInteger;
       3: invokevirtual #116                // Method java/math/BigInteger.bitLength:()I
       6: ireturn

  public org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement);
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat256.create:()[I
       3: astore_2
       4: aload_0
       5: getfield      #113                // Field x:[I
       8: aload_1
       9: checkcast     #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
      12: getfield      #113                // Field x:[I
      15: aload_2
      16: invokestatic  #126                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.add:([I[I[I)V
      19: new           #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
      22: dup
      23: aload_2
      24: invokespecial #130                // Method "<init>":([I)V
      27: areturn

  public org.bouncycastle.math.ec.ECFieldElement addOne();
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat256.create:()[I
       3: astore_1
       4: aload_0
       5: getfield      #113                // Field x:[I
       8: aload_1
       9: invokestatic  #123                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.addOne:([I[I)V
      12: new           #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
      15: dup
      16: aload_1
      17: invokespecial #130                // Method "<init>":([I)V
      20: areturn

  public org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement);
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat256.create:()[I
       3: astore_2
       4: aload_0
       5: getfield      #113                // Field x:[I
       8: aload_1
       9: checkcast     #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
      12: getfield      #113                // Field x:[I
      15: aload_2
      16: invokestatic  #128                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.subtract:([I[I[I)V
      19: new           #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
      22: dup
      23: aload_2
      24: invokespecial #130                // Method "<init>":([I)V
      27: areturn

  public org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement);
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat256.create:()[I
       3: astore_2
       4: aload_0
       5: getfield      #113                // Field x:[I
       8: aload_1
       9: checkcast     #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
      12: getfield      #113                // Field x:[I
      15: aload_2
      16: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.multiply:([I[I[I)V
      19: new           #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
      22: dup
      23: aload_2
      24: invokespecial #130                // Method "<init>":([I)V
      27: areturn

  public org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement);
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat256.create:()[I
       3: astore_2
       4: getstatic     #112                // Field org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.P:[I
       7: aload_1
       8: checkcast     #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
      11: getfield      #113                // Field x:[I
      14: aload_2
      15: invokestatic  #131                // Method org/bouncycastle/math/raw/Mod.invert:([I[I[I)V
      18: aload_2
      19: aload_0
      20: getfield      #113                // Field x:[I
      23: aload_2
      24: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.multiply:([I[I[I)V
      27: new           #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
      30: dup
      31: aload_2
      32: invokespecial #130                // Method "<init>":([I)V
      35: areturn

  public org.bouncycastle.math.ec.ECFieldElement negate();
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat256.create:()[I
       3: astore_1
       4: aload_0
       5: getfield      #113                // Field x:[I
       8: aload_1
       9: invokestatic  #124                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.negate:([I[I)V
      12: new           #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
      15: dup
      16: aload_1
      17: invokespecial #130                // Method "<init>":([I)V
      20: areturn

  public org.bouncycastle.math.ec.ECFieldElement square();
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat256.create:()[I
       3: astore_1
       4: aload_0
       5: getfield      #113                // Field x:[I
       8: aload_1
       9: invokestatic  #125                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.square:([I[I)V
      12: new           #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
      15: dup
      16: aload_1
      17: invokespecial #130                // Method "<init>":([I)V
      20: areturn

  public org.bouncycastle.math.ec.ECFieldElement invert();
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat256.create:()[I
       3: astore_1
       4: getstatic     #112                // Field org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.P:[I
       7: aload_0
       8: getfield      #113                // Field x:[I
      11: aload_1
      12: invokestatic  #131                // Method org/bouncycastle/math/raw/Mod.invert:([I[I[I)V
      15: new           #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
      18: dup
      19: aload_1
      20: invokespecial #130                // Method "<init>":([I)V
      23: areturn

  public org.bouncycastle.math.ec.ECFieldElement sqrt();
    Code:
       0: aload_0
       1: getfield      #113                // Field x:[I
       4: astore_1
       5: aload_1
       6: invokestatic  #134                // Method org/bouncycastle/math/raw/Nat256.isZero:([I)Z
       9: ifne          19
      12: aload_1
      13: invokestatic  #133                // Method org/bouncycastle/math/raw/Nat256.isOne:([I)Z
      16: ifeq          21
      19: aload_0
      20: areturn
      21: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat256.create:()[I
      24: astore_2
      25: aload_1
      26: aload_2
      27: invokestatic  #125                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.square:([I[I)V
      30: aload_2
      31: aload_1
      32: aload_2
      33: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.multiply:([I[I[I)V
      36: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat256.create:()[I
      39: astore_3
      40: aload_2
      41: iconst_2
      42: aload_3
      43: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.squareN:([II[I)V
      46: aload_3
      47: aload_2
      48: aload_3
      49: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.multiply:([I[I[I)V
      52: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat256.create:()[I
      55: astore        4
      57: aload_3
      58: iconst_2
      59: aload         4
      61: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.squareN:([II[I)V
      64: aload         4
      66: aload_2
      67: aload         4
      69: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.multiply:([I[I[I)V
      72: aload_2
      73: astore        5
      75: aload         4
      77: bipush        6
      79: aload         5
      81: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.squareN:([II[I)V
      84: aload         5
      86: aload         4
      88: aload         5
      90: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.multiply:([I[I[I)V
      93: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat256.create:()[I
      96: astore        6
      98: aload         5
     100: bipush        12
     102: aload         6
     104: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.squareN:([II[I)V
     107: aload         6
     109: aload         5
     111: aload         6
     113: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.multiply:([I[I[I)V
     116: aload         5
     118: astore        7
     120: aload         6
     122: bipush        6
     124: aload         7
     126: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.squareN:([II[I)V
     129: aload         7
     131: aload         4
     133: aload         7
     135: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.multiply:([I[I[I)V
     138: aload         4
     140: astore        8
     142: aload         7
     144: aload         8
     146: invokestatic  #125                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.square:([I[I)V
     149: aload         8
     151: aload_1
     152: aload         8
     154: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.multiply:([I[I[I)V
     157: aload         6
     159: astore        9
     161: aload         8
     163: bipush        31
     165: aload         9
     167: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.squareN:([II[I)V
     170: aload         7
     172: astore        10
     174: aload         9
     176: aload         8
     178: aload         10
     180: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.multiply:([I[I[I)V
     183: aload         9
     185: bipush        32
     187: aload         9
     189: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.squareN:([II[I)V
     192: aload         9
     194: aload         10
     196: aload         9
     198: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.multiply:([I[I[I)V
     201: aload         9
     203: bipush        62
     205: aload         9
     207: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.squareN:([II[I)V
     210: aload         9
     212: aload         10
     214: aload         9
     216: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.multiply:([I[I[I)V
     219: aload         9
     221: iconst_4
     222: aload         9
     224: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.squareN:([II[I)V
     227: aload         9
     229: aload_3
     230: aload         9
     232: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.multiply:([I[I[I)V
     235: aload         9
     237: bipush        32
     239: aload         9
     241: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.squareN:([II[I)V
     244: aload         9
     246: aload_1
     247: aload         9
     249: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.multiply:([I[I[I)V
     252: aload         9
     254: bipush        62
     256: aload         9
     258: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.squareN:([II[I)V
     261: aload_3
     262: astore        11
     264: aload         9
     266: aload         11
     268: invokestatic  #125                // Method org/bouncycastle/math/ec/custom/gm/SM2P256V1Field.square:([I[I)V
     271: aload_1
     272: aload         11
     274: invokestatic  #136                // Method org/bouncycastle/math/raw/Nat256.eq:([I[I)Z
     277: ifeq          292
     280: new           #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
     283: dup
     284: aload         9
     286: invokespecial #130                // Method "<init>":([I)V
     289: goto          293
     292: aconst_null
     293: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #67                 // class org/bouncycastle/math/ec/custom/gm/SM2P256V1FieldElement
      20: astore_2
      21: aload_0
      22: getfield      #113                // Field x:[I
      25: aload_2
      26: getfield      #113                // Field x:[I
      29: invokestatic  #136                // Method org/bouncycastle/math/raw/Nat256.eq:([I[I)Z
      32: ireturn

  public int hashCode();
    Code:
       0: getstatic     #114                // Field Q:Ljava/math/BigInteger;
       3: invokevirtual #117                // Method java/math/BigInteger.hashCode:()I
       6: aload_0
       7: getfield      #113                // Field x:[I
      10: iconst_0
      11: bipush        8
      13: invokestatic  #138                // Method org/bouncycastle/util/Arrays.hashCode:([III)I
      16: ixor
      17: ireturn

  static {};
    Code:
       0: new           #63                 // class java/math/BigInteger
       3: dup
       4: iconst_1
       5: ldc           #1                  // String FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF
       7: invokestatic  #139                // Method org/bouncycastle/util/encoders/Hex.decodeStrict:(Ljava/lang/String;)[B
      10: invokespecial #119                // Method java/math/BigInteger."<init>":(I[B)V
      13: putstatic     #114                // Field Q:Ljava/math/BigInteger;
      16: return
}
