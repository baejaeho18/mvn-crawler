public class org.bouncycastle.math.ec.ZSignedDigitL2RMultiplier extends org.bouncycastle.math.ec.AbstractECMultiplier {
  public org.bouncycastle.math.ec.ZSignedDigitL2RMultiplier();
    Code:
       0: aload_0
       1: invokespecial #36                 // Method org/bouncycastle/math/ec/AbstractECMultiplier."<init>":()V
       4: return

  protected org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint, java.math.BigInteger);
    Code:
       0: aload_1
       1: invokevirtual #38                 // Method org/bouncycastle/math/ec/ECPoint.normalize:()Lorg/bouncycastle/math/ec/ECPoint;
       4: astore_3
       5: aload_3
       6: invokevirtual #37                 // Method org/bouncycastle/math/ec/ECPoint.negate:()Lorg/bouncycastle/math/ec/ECPoint;
       9: astore        4
      11: aload_3
      12: astore        5
      14: aload_2
      15: invokevirtual #33                 // Method java/math/BigInteger.bitLength:()I
      18: istore        6
      20: aload_2
      21: invokevirtual #34                 // Method java/math/BigInteger.getLowestSetBit:()I
      24: istore        7
      26: iload         6
      28: istore        8
      30: iinc          8, -1
      33: iload         8
      35: iload         7
      37: if_icmple     65
      40: aload         5
      42: aload_2
      43: iload         8
      45: invokevirtual #35                 // Method java/math/BigInteger.testBit:(I)Z
      48: ifeq          55
      51: aload_3
      52: goto          57
      55: aload         4
      57: invokevirtual #40                 // Method org/bouncycastle/math/ec/ECPoint.twicePlus:(Lorg/bouncycastle/math/ec/ECPoint;)Lorg/bouncycastle/math/ec/ECPoint;
      60: astore        5
      62: goto          30
      65: aload         5
      67: iload         7
      69: invokevirtual #39                 // Method org/bouncycastle/math/ec/ECPoint.timesPow2:(I)Lorg/bouncycastle/math/ec/ECPoint;
      72: astore        5
      74: aload         5
      76: areturn
}
