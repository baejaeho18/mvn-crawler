public class org.bouncycastle.crypto.tls.ServerNameList {
  protected java.util.Vector serverNameList;

  public org.bouncycastle.crypto.tls.ServerNameList(java.util.Vector);
    Code:
       0: aload_0
       1: invokespecial #98                 // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #47                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #1                  // String \'serverNameList\' must not be null
      14: invokespecial #97                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: aload_1
      20: putfield      #92                 // Field serverNameList:Ljava/util/Vector;
      23: return

  public java.util.Vector getServerNameList();
    Code:
       0: aload_0
       1: getfield      #92                 // Field serverNameList:Ljava/util/Vector;
       4: areturn

  public void encode(java.io.OutputStream) throws java.io.IOException;
    Code:
       0: new           #45                 // class java/io/ByteArrayOutputStream
       3: dup
       4: invokespecial #96                 // Method java/io/ByteArrayOutputStream."<init>":()V
       7: astore_2
       8: iconst_0
       9: newarray       short
      11: astore_3
      12: iconst_0
      13: istore        4
      15: iload         4
      17: aload_0
      18: getfield      #92                 // Field serverNameList:Ljava/util/Vector;
      21: invokevirtual #99                 // Method java/util/Vector.size:()I
      24: if_icmpge     77
      27: aload_0
      28: getfield      #92                 // Field serverNameList:Ljava/util/Vector;
      31: iload         4
      33: invokevirtual #101                // Method java/util/Vector.elementAt:(I)Ljava/lang/Object;
      36: checkcast     #51                 // class org/bouncycastle/crypto/tls/ServerName
      39: astore        5
      41: aload_3
      42: aload         5
      44: invokevirtual #104                // Method org/bouncycastle/crypto/tls/ServerName.getNameType:()S
      47: invokestatic  #107                // Method checkNameType:([SS)[S
      50: astore_3
      51: aload_3
      52: ifnonnull     65
      55: new           #53                 // class org/bouncycastle/crypto/tls/TlsFatalAlert
      58: dup
      59: bipush        80
      61: invokespecial #109                // Method org/bouncycastle/crypto/tls/TlsFatalAlert."<init>":(S)V
      64: athrow
      65: aload         5
      67: aload_2
      68: invokevirtual #105                // Method org/bouncycastle/crypto/tls/ServerName.encode:(Ljava/io/OutputStream;)V
      71: iinc          4, 1
      74: goto          15
      77: aload_2
      78: invokevirtual #95                 // Method java/io/ByteArrayOutputStream.size:()I
      81: invokestatic  #110                // Method org/bouncycastle/crypto/tls/TlsUtils.checkUint16:(I)V
      84: aload_2
      85: invokevirtual #95                 // Method java/io/ByteArrayOutputStream.size:()I
      88: aload_1
      89: invokestatic  #113                // Method org/bouncycastle/crypto/tls/TlsUtils.writeUint16:(ILjava/io/OutputStream;)V
      92: aload_2
      93: aload_1
      94: invokestatic  #116                // Method org/bouncycastle/util/io/Streams.writeBufTo:(Ljava/io/ByteArrayOutputStream;Ljava/io/OutputStream;)V
      97: return

  public static org.bouncycastle.crypto.tls.ServerNameList parse(java.io.InputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #112                // Method org/bouncycastle/crypto/tls/TlsUtils.readUint16:(Ljava/io/InputStream;)I
       4: istore_1
       5: iload_1
       6: iconst_1
       7: if_icmpge     20
      10: new           #53                 // class org/bouncycastle/crypto/tls/TlsFatalAlert
      13: dup
      14: bipush        50
      16: invokespecial #109                // Method org/bouncycastle/crypto/tls/TlsFatalAlert."<init>":(S)V
      19: athrow
      20: iload_1
      21: aload_0
      22: invokestatic  #111                // Method org/bouncycastle/crypto/tls/TlsUtils.readFully:(ILjava/io/InputStream;)[B
      25: astore_2
      26: new           #44                 // class java/io/ByteArrayInputStream
      29: dup
      30: aload_2
      31: invokespecial #94                 // Method java/io/ByteArrayInputStream."<init>":([B)V
      34: astore_3
      35: iconst_0
      36: newarray       short
      38: astore        4
      40: new           #49                 // class java/util/Vector
      43: dup
      44: invokespecial #100                // Method java/util/Vector."<init>":()V
      47: astore        5
      49: aload_3
      50: invokevirtual #93                 // Method java/io/ByteArrayInputStream.available:()I
      53: ifle          99
      56: aload_3
      57: invokestatic  #106                // Method org/bouncycastle/crypto/tls/ServerName.parse:(Ljava/io/InputStream;)Lorg/bouncycastle/crypto/tls/ServerName;
      60: astore        6
      62: aload         4
      64: aload         6
      66: invokevirtual #104                // Method org/bouncycastle/crypto/tls/ServerName.getNameType:()S
      69: invokestatic  #107                // Method checkNameType:([SS)[S
      72: astore        4
      74: aload         4
      76: ifnonnull     89
      79: new           #53                 // class org/bouncycastle/crypto/tls/TlsFatalAlert
      82: dup
      83: bipush        47
      85: invokespecial #109                // Method org/bouncycastle/crypto/tls/TlsFatalAlert."<init>":(S)V
      88: athrow
      89: aload         5
      91: aload         6
      93: invokevirtual #102                // Method java/util/Vector.addElement:(Ljava/lang/Object;)V
      96: goto          49
      99: new           #52                 // class org/bouncycastle/crypto/tls/ServerNameList
     102: dup
     103: aload         5
     105: invokespecial #108                // Method "<init>":(Ljava/util/Vector;)V
     108: areturn

  private static short[] checkNameType(short[], short);
    Code:
       0: iload_1
       1: invokestatic  #103                // Method org/bouncycastle/crypto/tls/NameType.isValid:(S)Z
       4: ifeq          15
       7: aload_0
       8: iload_1
       9: invokestatic  #114                // Method org/bouncycastle/util/Arrays.contains:([SS)Z
      12: ifeq          17
      15: aconst_null
      16: areturn
      17: aload_0
      18: iload_1
      19: invokestatic  #115                // Method org/bouncycastle/util/Arrays.append:([SS)[S
      22: areturn
}
