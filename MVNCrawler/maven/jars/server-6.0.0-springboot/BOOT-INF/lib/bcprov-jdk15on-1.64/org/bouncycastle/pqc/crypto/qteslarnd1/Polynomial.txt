class org.bouncycastle.pqc.crypto.qteslarnd1.Polynomial {
  public static final int RANDOM;

  public static final int SEED;

  public static final int HASH;

  public static final int MESSAGE;

  public static final int SIGNATURE_I;

  public static final int SIGNATURE_III_SIZE;

  public static final int SIGNATURE_III_SPEED;

  public static final int SIGNATURE_I_P;

  public static final int SIGNATURE_III_P;

  public static final int PUBLIC_KEY_I;

  public static final int PUBLIC_KEY_III_SIZE;

  public static final int PUBLIC_KEY_III_SPEED;

  public static final int PUBLIC_KEY_I_P;

  public static final int PUBLIC_KEY_III_P;

  public static final int PRIVATE_KEY_I;

  public static final int PRIVATE_KEY_III_SIZE;

  public static final int PRIVATE_KEY_III_SPEED;

  public static final int PRIVATE_KEY_I_P;

  public static final int PRIVATE_KEY_III_P;

  org.bouncycastle.pqc.crypto.qteslarnd1.Polynomial();
    Code:
       0: aload_0
       1: invokespecial #173                // Method java/lang/Object."<init>":()V
       4: return

  private static int montgomery(long, int, long);
    Code:
       0: lload_0
       1: lload_0
       2: lload_3
       3: lmul
       4: ldc2_w        #132                // long 4294967295l
       7: land
       8: iload_2
       9: i2l
      10: lmul
      11: ladd
      12: bipush        32
      14: lshr
      15: l2i
      16: ireturn

  private static long montgomeryP(long, int, long);
    Code:
       0: lload_0
       1: lload_0
       2: lload_3
       3: lmul
       4: ldc2_w        #132                // long 4294967295l
       7: land
       8: iload_2
       9: i2l
      10: lmul
      11: ladd
      12: bipush        32
      14: lshr
      15: lreturn

  public static int barrett(int, int, int, int);
    Code:
       0: iload_0
       1: iload_0
       2: i2l
       3: iload_2
       4: i2l
       5: lmul
       6: iload_3
       7: lshr
       8: l2i
       9: iload_1
      10: imul
      11: isub
      12: ireturn

  public static long barrett(long, int, int, int);
    Code:
       0: lload_0
       1: lload_0
       2: iload_3
       3: i2l
       4: lmul
       5: iload         4
       7: lshr
       8: iload_2
       9: i2l
      10: lmul
      11: lsub
      12: lreturn

  private static void numberTheoreticTransform(int[], int[], int, int, long);
    Code:
       0: iconst_0
       1: istore        6
       3: iload_2
       4: iconst_1
       5: ishr
       6: istore        7
       8: iload         7
      10: ifle          118
      13: iconst_0
      14: istore        8
      16: iconst_0
      17: istore        9
      19: iload         9
      21: iload_2
      22: if_icmpge     109
      25: aload_1
      26: iload         6
      28: iinc          6, 1
      31: iaload
      32: i2l
      33: lstore        10
      35: iload         9
      37: istore        8
      39: iload         8
      41: iload         9
      43: iload         7
      45: iadd
      46: if_icmpge     99
      49: lload         10
      51: aload_0
      52: iload         8
      54: iload         7
      56: iadd
      57: iaload
      58: i2l
      59: lmul
      60: iload_3
      61: lload         4
      63: invokestatic  #178                // Method montgomery:(JIJ)I
      66: istore        12
      68: aload_0
      69: iload         8
      71: iload         7
      73: iadd
      74: aload_0
      75: iload         8
      77: iaload
      78: iload         12
      80: isub
      81: iastore
      82: aload_0
      83: iload         8
      85: aload_0
      86: iload         8
      88: iaload
      89: iload         12
      91: iadd
      92: iastore
      93: iinc          8, 1
      96: goto          39
      99: iload         8
     101: iload         7
     103: iadd
     104: istore        9
     106: goto          19
     109: iload         7
     111: iconst_1
     112: ishr
     113: istore        7
     115: goto          8
     118: return

  private static void numberTheoreticTransformIP(long[], long[]);
    Code:
       0: sipush        512
       3: istore_2
       4: iconst_0
       5: istore_3
       6: iload_2
       7: ifle          114
      10: iconst_0
      11: istore        4
      13: iconst_0
      14: istore        5
      16: iload         5
      18: sipush        1024
      21: if_icmpge     107
      24: aload_1
      25: iload_3
      26: iinc          3, 1
      29: laload
      30: lstore        6
      32: iload         5
      34: istore        4
      36: iload         4
      38: iload         5
      40: iload_2
      41: iadd
      42: if_icmpge     98
      45: lload         6
      47: aload_0
      48: iload         4
      50: iload_2
      51: iadd
      52: laload
      53: lmul
      54: ldc           #5                  // int 485978113
      56: ldc2_w        #126                // long 3421990911l
      59: invokestatic  #179                // Method montgomeryP:(JIJ)J
      62: lstore        8
      64: aload_0
      65: iload         4
      67: iload_2
      68: iadd
      69: aload_0
      70: iload         4
      72: laload
      73: ldc2_w        #116                // long 485978113l
      76: lload         8
      78: lsub
      79: ladd
      80: lastore
      81: aload_0
      82: iload         4
      84: aload_0
      85: iload         4
      87: laload
      88: lload         8
      90: ladd
      91: lastore
      92: iinc          4, 1
      95: goto          36
      98: iload         4
     100: iload_2
     101: iadd
     102: istore        5
     104: goto          16
     107: iload_2
     108: iconst_1
     109: ishr
     110: istore_2
     111: goto          6
     114: return

  private static void numberTheoreticTransformIIIP(long[], long[]);
    Code:
       0: iconst_0
       1: istore_2
       2: sipush        1024
       5: istore_3
       6: iload_3
       7: ifle          143
      10: iconst_0
      11: istore        4
      13: iconst_0
      14: istore        5
      16: iload         5
      18: sipush        2048
      21: if_icmpge     136
      24: aload_1
      25: iload_2
      26: iinc          2, 1
      29: laload
      30: l2i
      31: istore        6
      33: iload         5
      35: istore        4
      37: iload         4
      39: iload         5
      41: iload_3
      42: iadd
      43: if_icmpge     127
      46: iload         6
      48: i2l
      49: aload_0
      50: iload         4
      52: iload_3
      53: iadd
      54: laload
      55: lmul
      56: ldc           #6                  // int 1129725953
      58: ldc2_w        #118                // long 861290495l
      61: invokestatic  #179                // Method montgomeryP:(JIJ)J
      64: ldc           #6                  // int 1129725953
      66: bipush        15
      68: bipush        34
      70: invokestatic  #177                // Method barrett:(JIII)J
      73: lstore        7
      75: aload_0
      76: iload         4
      78: iload_3
      79: iadd
      80: aload_0
      81: iload         4
      83: laload
      84: ldc2_w        #122                // long 2259451906l
      87: lload         7
      89: lsub
      90: ladd
      91: ldc           #6                  // int 1129725953
      93: bipush        15
      95: bipush        34
      97: invokestatic  #177                // Method barrett:(JIII)J
     100: lastore
     101: aload_0
     102: iload         4
     104: aload_0
     105: iload         4
     107: laload
     108: lload         7
     110: ladd
     111: ldc           #6                  // int 1129725953
     113: bipush        15
     115: bipush        34
     117: invokestatic  #177                // Method barrett:(JIII)J
     120: lastore
     121: iinc          4, 1
     124: goto          37
     127: iload         4
     129: iload_3
     130: iadd
     131: istore        5
     133: goto          16
     136: iload_3
     137: iconst_1
     138: ishr
     139: istore_3
     140: goto          6
     143: return

  private static void inverseNumberTheoreticTransformI(int[], int[]);
    Code:
       0: iconst_0
       1: istore_2
       2: iconst_1
       3: istore_3
       4: iload_3
       5: sipush        512
       8: if_icmpge     115
      11: iconst_0
      12: istore        4
      14: iconst_0
      15: istore        5
      17: iload         5
      19: sipush        512
      22: if_icmpge     108
      25: aload_1
      26: iload_2
      27: iinc          2, 1
      30: iaload
      31: i2l
      32: lstore        6
      34: iload         5
      36: istore        4
      38: iload         4
      40: iload         5
      42: iload_3
      43: iadd
      44: if_icmpge     99
      47: aload_0
      48: iload         4
      50: iaload
      51: istore        8
      53: aload_0
      54: iload         4
      56: iload         8
      58: aload_0
      59: iload         4
      61: iload_3
      62: iadd
      63: iaload
      64: iadd
      65: iastore
      66: aload_0
      67: iload         4
      69: iload_3
      70: iadd
      71: lload         6
      73: iload         8
      75: aload_0
      76: iload         4
      78: iload_3
      79: iadd
      80: iaload
      81: isub
      82: i2l
      83: lmul
      84: ldc           #2                  // int 4205569
      86: ldc2_w        #124                // long 3098553343l
      89: invokestatic  #178                // Method montgomery:(JIJ)I
      92: iastore
      93: iinc          4, 1
      96: goto          38
      99: iload         4
     101: iload_3
     102: iadd
     103: istore        5
     105: goto          17
     108: iload_3
     109: iconst_2
     110: imul
     111: istore_3
     112: goto          4
     115: iconst_0
     116: istore_3
     117: iload_3
     118: sipush        256
     121: if_icmpge     149
     124: aload_0
     125: iload_3
     126: ldc2_w        #114                // long 1081347l
     129: aload_0
     130: iload_3
     131: iaload
     132: i2l
     133: lmul
     134: ldc           #2                  // int 4205569
     136: ldc2_w        #124                // long 3098553343l
     139: invokestatic  #178                // Method montgomery:(JIJ)I
     142: iastore
     143: iinc          3, 1
     146: goto          117
     149: return

  private static void inverseNumberTheoreticTransform(int[], int[], int, int, long, int, int, int);
    Code:
       0: iconst_0
       1: istore        9
       3: iconst_1
       4: istore        10
       6: iload         10
       8: iload_2
       9: if_icmpge     152
      12: iconst_0
      13: istore        11
      15: iconst_0
      16: istore        12
      18: iload         12
      20: iload_2
      21: if_icmpge     143
      24: aload_1
      25: iload         9
      27: iinc          9, 1
      30: iaload
      31: i2l
      32: lstore        13
      34: iload         12
      36: istore        11
      38: iload         11
      40: iload         12
      42: iload         10
      44: iadd
      45: if_icmpge     133
      48: aload_0
      49: iload         11
      51: iaload
      52: istore        15
      54: iload         10
      56: bipush        16
      58: if_icmpne     86
      61: aload_0
      62: iload         11
      64: iload         15
      66: aload_0
      67: iload         11
      69: iload         10
      71: iadd
      72: iaload
      73: iadd
      74: iload_3
      75: iload         7
      77: iload         8
      79: invokestatic  #176                // Method barrett:(IIII)I
      82: iastore
      83: goto          100
      86: aload_0
      87: iload         11
      89: iload         15
      91: aload_0
      92: iload         11
      94: iload         10
      96: iadd
      97: iaload
      98: iadd
      99: iastore
     100: aload_0
     101: iload         11
     103: iload         10
     105: iadd
     106: lload         13
     108: iload         15
     110: aload_0
     111: iload         11
     113: iload         10
     115: iadd
     116: iaload
     117: isub
     118: i2l
     119: lmul
     120: iload_3
     121: lload         4
     123: invokestatic  #178                // Method montgomery:(JIJ)I
     126: iastore
     127: iinc          11, 1
     130: goto          38
     133: iload         11
     135: iload         10
     137: iadd
     138: istore        12
     140: goto          18
     143: iload         10
     145: iconst_2
     146: imul
     147: istore        10
     149: goto          6
     152: iconst_0
     153: istore        10
     155: iload         10
     157: iload_2
     158: iconst_2
     159: idiv
     160: if_icmpge     188
     163: aload_0
     164: iload         10
     166: iload         6
     168: i2l
     169: aload_0
     170: iload         10
     172: iaload
     173: i2l
     174: lmul
     175: iload_3
     176: lload         4
     178: invokestatic  #178                // Method montgomery:(JIJ)I
     181: iastore
     182: iinc          10, 1
     185: goto          155
     188: return

  private static void inverseNumberTheoreticTransformIP(long[], int, long[], int);
    Code:
       0: iconst_0
       1: istore        4
       3: iconst_1
       4: istore        5
       6: iload         5
       8: sipush        1024
      11: if_icmpge     268
      14: iconst_0
      15: istore        6
      17: iconst_0
      18: istore        7
      20: iload         7
      22: sipush        1024
      25: if_icmpge     131
      28: aload_2
      29: iload_3
      30: iload         4
      32: iinc          4, 1
      35: iadd
      36: laload
      37: lstore        8
      39: iload         7
      41: istore        6
      43: iload         6
      45: iload         7
      47: iload         5
      49: iadd
      50: if_icmpge     121
      53: aload_0
      54: iload_1
      55: iload         6
      57: iadd
      58: laload
      59: lstore        10
      61: aload_0
      62: iload_1
      63: iload         6
      65: iadd
      66: lload         10
      68: aload_0
      69: iload_1
      70: iload         6
      72: iadd
      73: iload         5
      75: iadd
      76: laload
      77: ladd
      78: lastore
      79: aload_0
      80: iload_1
      81: iload         6
      83: iadd
      84: iload         5
      86: iadd
      87: lload         8
      89: lload         10
      91: ldc2_w        #120                // long 971956226l
      94: aload_0
      95: iload_1
      96: iload         6
      98: iadd
      99: iload         5
     101: iadd
     102: laload
     103: lsub
     104: ladd
     105: lmul
     106: ldc           #5                  // int 485978113
     108: ldc2_w        #126                // long 3421990911l
     111: invokestatic  #179                // Method montgomeryP:(JIJ)J
     114: lastore
     115: iinc          6, 1
     118: goto          43
     121: iload         6
     123: iload         5
     125: iadd
     126: istore        7
     128: goto          20
     131: iload         5
     133: iconst_2
     134: imul
     135: istore        5
     137: iconst_0
     138: istore        7
     140: iload         7
     142: sipush        1024
     145: if_icmpge     259
     148: aload_2
     149: iload_3
     150: iload         4
     152: iinc          4, 1
     155: iadd
     156: laload
     157: lstore        8
     159: iload         7
     161: istore        6
     163: iload         6
     165: iload         7
     167: iload         5
     169: iadd
     170: if_icmpge     249
     173: aload_0
     174: iload_1
     175: iload         6
     177: iadd
     178: laload
     179: lstore        10
     181: aload_0
     182: iload_1
     183: iload         6
     185: iadd
     186: lload         10
     188: aload_0
     189: iload_1
     190: iload         6
     192: iadd
     193: iload         5
     195: iadd
     196: laload
     197: ladd
     198: ldc           #5                  // int 485978113
     200: iconst_1
     201: bipush        29
     203: invokestatic  #177                // Method barrett:(JIII)J
     206: lastore
     207: aload_0
     208: iload_1
     209: iload         6
     211: iadd
     212: iload         5
     214: iadd
     215: lload         8
     217: lload         10
     219: ldc2_w        #120                // long 971956226l
     222: aload_0
     223: iload_1
     224: iload         6
     226: iadd
     227: iload         5
     229: iadd
     230: laload
     231: lsub
     232: ladd
     233: lmul
     234: ldc           #5                  // int 485978113
     236: ldc2_w        #126                // long 3421990911l
     239: invokestatic  #179                // Method montgomeryP:(JIJ)J
     242: lastore
     243: iinc          6, 1
     246: goto          163
     249: iload         6
     251: iload         5
     253: iadd
     254: istore        7
     256: goto          140
     259: iload         5
     261: iconst_2
     262: imul
     263: istore        5
     265: goto          6
     268: return

  private static void inverseNumberTheoreticTransformIIIP(long[], int, long[], int);
    Code:
       0: iconst_0
       1: istore        4
       3: iconst_1
       4: istore        5
       6: iload         5
       8: sipush        2048
      11: if_icmpge     158
      14: iconst_0
      15: istore        6
      17: iconst_0
      18: istore        7
      20: iload         7
      22: sipush        2048
      25: if_icmpge     149
      28: aload_2
      29: iload_3
      30: iload         4
      32: iinc          4, 1
      35: iadd
      36: laload
      37: lstore        8
      39: iload         7
      41: istore        6
      43: iload         6
      45: iload         7
      47: iload         5
      49: iadd
      50: if_icmpge     139
      53: aload_0
      54: iload_1
      55: iload         6
      57: iadd
      58: laload
      59: lstore        10
      61: aload_0
      62: iload_1
      63: iload         6
      65: iadd
      66: lload         10
      68: aload_0
      69: iload_1
      70: iload         6
      72: iadd
      73: iload         5
      75: iadd
      76: laload
      77: ladd
      78: ldc           #6                  // int 1129725953
      80: bipush        15
      82: bipush        34
      84: invokestatic  #177                // Method barrett:(JIII)J
      87: lastore
      88: aload_0
      89: iload_1
      90: iload         6
      92: iadd
      93: iload         5
      95: iadd
      96: lload         8
      98: lload         10
     100: ldc2_w        #122                // long 2259451906l
     103: aload_0
     104: iload_1
     105: iload         6
     107: iadd
     108: iload         5
     110: iadd
     111: laload
     112: lsub
     113: ladd
     114: lmul
     115: ldc           #6                  // int 1129725953
     117: ldc2_w        #118                // long 861290495l
     120: invokestatic  #179                // Method montgomeryP:(JIJ)J
     123: ldc           #6                  // int 1129725953
     125: bipush        15
     127: bipush        34
     129: invokestatic  #177                // Method barrett:(JIII)J
     132: lastore
     133: iinc          6, 1
     136: goto          43
     139: iload         6
     141: iload         5
     143: iadd
     144: istore        7
     146: goto          20
     149: iload         5
     151: iconst_2
     152: imul
     153: istore        5
     155: goto          6
     158: return

  private static void componentWisePolynomialMultiplication(int[], int[], int[], int, int, long);
    Code:
       0: iconst_0
       1: istore        7
       3: iload         7
       5: iload_3
       6: if_icmpge     37
       9: aload_0
      10: iload         7
      12: aload_1
      13: iload         7
      15: iaload
      16: i2l
      17: aload_2
      18: iload         7
      20: iaload
      21: i2l
      22: lmul
      23: iload         4
      25: lload         5
      27: invokestatic  #178                // Method montgomery:(JIJ)I
      30: iastore
      31: iinc          7, 1
      34: goto          3
      37: return

  private static void componentWisePolynomialMultiplication(long[], int, long[], int, long[], int, int, int, long);
    Code:
       0: iconst_0
       1: istore        10
       3: iload         10
       5: iload         6
       7: if_icmpge     44
      10: aload_0
      11: iload_1
      12: iload         10
      14: iadd
      15: aload_2
      16: iload_3
      17: iload         10
      19: iadd
      20: laload
      21: aload         4
      23: iload         5
      25: iload         10
      27: iadd
      28: laload
      29: lmul
      30: iload         7
      32: lload         8
      34: invokestatic  #179                // Method montgomeryP:(JIJ)J
      37: lastore
      38: iinc          10, 1
      41: goto          3
      44: return

  public static void polynomialNumberTheoreticTransform(long[], long[], int);
    Code:
       0: iconst_0
       1: istore_3
       2: iload_3
       3: iload_2
       4: if_icmpge     19
       7: aload_0
       8: iload_3
       9: aload_1
      10: iload_3
      11: laload
      12: lastore
      13: iinc          3, 1
      16: goto          2
      19: iload_2
      20: sipush        1024
      23: if_icmpne     33
      26: aload_0
      27: getstatic     #172                // Field org/bouncycastle/pqc/crypto/qteslarnd1/PolynomialProvablySecure.ZETA_I_P:[J
      30: invokestatic  #188                // Method numberTheoreticTransformIP:([J[J)V
      33: iload_2
      34: sipush        2048
      37: if_icmpne     47
      40: aload_0
      41: getstatic     #169                // Field org/bouncycastle/pqc/crypto/qteslarnd1/PolynomialProvablySecure.ZETA_III_P:[J
      44: invokestatic  #187                // Method numberTheoreticTransformIIIP:([J[J)V
      47: return

  public static void polynomialMultiplication(int[], int[], int[], int, int, long, int[]);
    Code:
       0: iload_3
       1: newarray       int
       3: astore        8
       5: iconst_0
       6: istore        9
       8: iload         9
      10: iload_3
      11: if_icmpge     29
      14: aload         8
      16: iload         9
      18: aload_2
      19: iload         9
      21: iaload
      22: iastore
      23: iinc          9, 1
      26: goto          8
      29: aload         8
      31: aload         7
      33: iload_3
      34: iload         4
      36: lload         5
      38: invokestatic  #181                // Method numberTheoreticTransform:([I[IIIJ)V
      41: aload_0
      42: aload_1
      43: aload         8
      45: iload_3
      46: iload         4
      48: lload         5
      50: invokestatic  #183                // Method componentWisePolynomialMultiplication:([I[I[IIIJ)V
      53: iload         4
      55: ldc           #2                  // int 4205569
      57: if_icmpne     67
      60: aload_0
      61: getstatic     #166                // Field org/bouncycastle/pqc/crypto/qteslarnd1/PolynomialHeuristic.ZETA_INVERSE_I:[I
      64: invokestatic  #180                // Method inverseNumberTheoreticTransformI:([I[I)V
      67: iload         4
      69: ldc           #3                  // int 4206593
      71: if_icmpne     96
      74: aload_0
      75: getstatic     #167                // Field org/bouncycastle/pqc/crypto/qteslarnd1/PolynomialHeuristic.ZETA_INVERSE_III_SIZE:[I
      78: sipush        1024
      81: ldc           #3                  // int 4206593
      83: ldc2_w        #130                // long 4148178943l
      86: ldc           #1                  // int 35843
      88: sipush        1021
      91: bipush        32
      93: invokestatic  #182                // Method inverseNumberTheoreticTransform:([I[IIIJIII)V
      96: iload         4
      98: ldc           #4                  // int 8404993
     100: if_icmpne     126
     103: aload_0
     104: getstatic     #168                // Field org/bouncycastle/pqc/crypto/qteslarnd1/PolynomialHeuristic.ZETA_INVERSE_III_SPEED:[I
     107: sipush        1024
     110: ldc           #4                  // int 8404993
     112: ldc2_w        #128                // long 4034936831l
     115: sipush        15873
     118: sipush        511
     121: bipush        32
     123: invokestatic  #182                // Method inverseNumberTheoreticTransform:([I[IIIJIII)V
     126: return

  public static void polynomialMultiplication(long[], int, long[], int, long[], int, int, int, long);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: aload         4
       6: iload         5
       8: iload         6
      10: iload         7
      12: lload         8
      14: invokestatic  #186                // Method componentWisePolynomialMultiplication:([JI[JI[JIIIJ)V
      17: iload         7
      19: ldc           #5                  // int 485978113
      21: if_icmpne     33
      24: aload_0
      25: iload_1
      26: getstatic     #171                // Field org/bouncycastle/pqc/crypto/qteslarnd1/PolynomialProvablySecure.ZETA_INVERSE_I_P:[J
      29: iconst_0
      30: invokestatic  #185                // Method inverseNumberTheoreticTransformIP:([JI[JI)V
      33: iload         7
      35: ldc           #6                  // int 1129725953
      37: if_icmpne     49
      40: aload_0
      41: iload_1
      42: getstatic     #170                // Field org/bouncycastle/pqc/crypto/qteslarnd1/PolynomialProvablySecure.ZETA_INVERSE_III_P:[J
      45: iconst_0
      46: invokestatic  #184                // Method inverseNumberTheoreticTransformIIIP:([JI[JI)V
      49: return

  public static void polynomialAddition(int[], int[], int[], int);
    Code:
       0: iconst_0
       1: istore        4
       3: iload         4
       5: iload_3
       6: if_icmpge     28
       9: aload_0
      10: iload         4
      12: aload_1
      13: iload         4
      15: iaload
      16: aload_2
      17: iload         4
      19: iaload
      20: iadd
      21: iastore
      22: iinc          4, 1
      25: goto          3
      28: return

  public static void polynomialAddition(long[], int, long[], int, long[], int, int);
    Code:
       0: iconst_0
       1: istore        7
       3: iload         7
       5: iload         6
       7: if_icmpge     37
      10: aload_0
      11: iload_1
      12: iload         7
      14: iadd
      15: aload_2
      16: iload_3
      17: iload         7
      19: iadd
      20: laload
      21: aload         4
      23: iload         5
      25: iload         7
      27: iadd
      28: laload
      29: ladd
      30: lastore
      31: iinc          7, 1
      34: goto          3
      37: return

  public static void polynomialAdditionCorrection(int[], int[], int[], int, int);
    Code:
       0: iconst_0
       1: istore        5
       3: iload         5
       5: iload_3
       6: if_icmpge     71
       9: aload_0
      10: iload         5
      12: aload_1
      13: iload         5
      15: iaload
      16: aload_2
      17: iload         5
      19: iaload
      20: iadd
      21: iastore
      22: aload_0
      23: iload         5
      25: dup2
      26: iaload
      27: aload_0
      28: iload         5
      30: iaload
      31: bipush        31
      33: ishr
      34: iload         4
      36: iand
      37: iadd
      38: iastore
      39: aload_0
      40: iload         5
      42: dup2
      43: iaload
      44: iload         4
      46: isub
      47: iastore
      48: aload_0
      49: iload         5
      51: dup2
      52: iaload
      53: aload_0
      54: iload         5
      56: iaload
      57: bipush        31
      59: ishr
      60: iload         4
      62: iand
      63: iadd
      64: iastore
      65: iinc          5, 1
      68: goto          3
      71: return

  public static void polynomialSubtractionCorrection(int[], int[], int[], int, int);
    Code:
       0: iconst_0
       1: istore        5
       3: iload         5
       5: iload_3
       6: if_icmpge     45
       9: aload_0
      10: iload         5
      12: aload_1
      13: iload         5
      15: iaload
      16: aload_2
      17: iload         5
      19: iaload
      20: isub
      21: iastore
      22: aload_0
      23: iload         5
      25: dup2
      26: iaload
      27: aload_0
      28: iload         5
      30: iaload
      31: bipush        31
      33: ishr
      34: iload         4
      36: iand
      37: iadd
      38: iastore
      39: iinc          5, 1
      42: goto          3
      45: return

  public static void polynomialSubtractionMontgomery(int[], int[], int[], int, int, long, int);
    Code:
       0: iconst_0
       1: istore        8
       3: iload         8
       5: iload_3
       6: if_icmpge     40
       9: aload_0
      10: iload         8
      12: iload         7
      14: i2l
      15: aload_1
      16: iload         8
      18: iaload
      19: aload_2
      20: iload         8
      22: iaload
      23: isub
      24: i2l
      25: lmul
      26: iload         4
      28: lload         5
      30: invokestatic  #178                // Method montgomery:(JIJ)I
      33: iastore
      34: iinc          8, 1
      37: goto          3
      40: return

  public static void polynomialSubtraction(long[], int, long[], int, long[], int, int, int, int, int);
    Code:
       0: iconst_0
       1: istore        10
       3: iload         10
       5: iload         6
       7: if_icmpge     46
      10: aload_0
      11: iload_1
      12: iload         10
      14: iadd
      15: aload_2
      16: iload_3
      17: iload         10
      19: iadd
      20: laload
      21: aload         4
      23: iload         5
      25: iload         10
      27: iadd
      28: laload
      29: lsub
      30: iload         7
      32: iload         8
      34: iload         9
      36: invokestatic  #177                // Method barrett:(JIII)J
      39: lastore
      40: iinc          10, 1
      43: goto          3
      46: return

  public static void polynomialUniform(int[], byte[], int, int, int, long, int, int, int);
    Code:
       0: iconst_0
       1: istore        10
       3: iconst_0
       4: istore        11
       6: iload         7
       8: bipush        7
      10: iadd
      11: bipush        8
      13: idiv
      14: istore        12
      16: iload         8
      18: istore        13
      20: iconst_0
      21: istore        14
      23: iconst_1
      24: iload         7
      26: ishl
      27: iconst_1
      28: isub
      29: istore        19
      31: sipush        168
      34: iload         8
      36: imul
      37: newarray       byte
      39: astore        20
      41: aload         20
      43: iconst_0
      44: sipush        168
      47: iload         8
      49: imul
      50: iload         14
      52: iload         14
      54: iconst_1
      55: iadd
      56: i2s
      57: istore        14
      59: aload_1
      60: iload_2
      61: bipush        32
      63: invokestatic  #175                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK128Simple:([BIIS[BII)V
      66: iload         11
      68: iload_3
      69: if_icmpge     334
      72: iload         10
      74: sipush        168
      77: iload         13
      79: imul
      80: iconst_4
      81: iload         12
      83: imul
      84: isub
      85: if_icmple     119
      88: iconst_1
      89: istore        13
      91: aload         20
      93: iconst_0
      94: sipush        168
      97: iload         13
      99: imul
     100: iload         14
     102: iload         14
     104: iconst_1
     105: iadd
     106: i2s
     107: istore        14
     109: aload_1
     110: iload_2
     111: bipush        32
     113: invokestatic  #175                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK128Simple:([BIIS[BII)V
     116: iconst_0
     117: istore        10
     119: aload         20
     121: iload         10
     123: invokestatic  #174                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load32:([BI)I
     126: iload         19
     128: iand
     129: istore        15
     131: iload         10
     133: iload         12
     135: iadd
     136: istore        10
     138: aload         20
     140: iload         10
     142: invokestatic  #174                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load32:([BI)I
     145: iload         19
     147: iand
     148: istore        16
     150: iload         10
     152: iload         12
     154: iadd
     155: istore        10
     157: aload         20
     159: iload         10
     161: invokestatic  #174                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load32:([BI)I
     164: iload         19
     166: iand
     167: istore        17
     169: iload         10
     171: iload         12
     173: iadd
     174: istore        10
     176: aload         20
     178: iload         10
     180: invokestatic  #174                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load32:([BI)I
     183: iload         19
     185: iand
     186: istore        18
     188: iload         10
     190: iload         12
     192: iadd
     193: istore        10
     195: iload         15
     197: iload         4
     199: if_icmpge     229
     202: iload         11
     204: iload_3
     205: if_icmpge     229
     208: aload_0
     209: iload         11
     211: iinc          11, 1
     214: iload         15
     216: i2l
     217: iload         9
     219: i2l
     220: lmul
     221: iload         4
     223: lload         5
     225: invokestatic  #178                // Method montgomery:(JIJ)I
     228: iastore
     229: iload         16
     231: iload         4
     233: if_icmpge     263
     236: iload         11
     238: iload_3
     239: if_icmpge     263
     242: aload_0
     243: iload         11
     245: iinc          11, 1
     248: iload         16
     250: i2l
     251: iload         9
     253: i2l
     254: lmul
     255: iload         4
     257: lload         5
     259: invokestatic  #178                // Method montgomery:(JIJ)I
     262: iastore
     263: iload         17
     265: iload         4
     267: if_icmpge     297
     270: iload         11
     272: iload_3
     273: if_icmpge     297
     276: aload_0
     277: iload         11
     279: iinc          11, 1
     282: iload         17
     284: i2l
     285: iload         9
     287: i2l
     288: lmul
     289: iload         4
     291: lload         5
     293: invokestatic  #178                // Method montgomery:(JIJ)I
     296: iastore
     297: iload         18
     299: iload         4
     301: if_icmpge     66
     304: iload         11
     306: iload_3
     307: if_icmpge     66
     310: aload_0
     311: iload         11
     313: iinc          11, 1
     316: iload         18
     318: i2l
     319: iload         9
     321: i2l
     322: lmul
     323: iload         4
     325: lload         5
     327: invokestatic  #178                // Method montgomery:(JIJ)I
     330: iastore
     331: goto          66
     334: return

  public static void polynomialUniform(long[], byte[], int, int, int, int, long, int, int, int);
    Code:
       0: iconst_0
       1: istore        11
       3: iconst_0
       4: istore        12
       6: iload         8
       8: bipush        7
      10: iadd
      11: bipush        8
      13: idiv
      14: istore        13
      16: iload         9
      18: istore        14
      20: iconst_0
      21: istore        15
      23: iconst_1
      24: iload         8
      26: ishl
      27: iconst_1
      28: isub
      29: istore        20
      31: sipush        168
      34: iload         14
      36: imul
      37: newarray       byte
      39: astore        21
      41: aload         21
      43: iconst_0
      44: sipush        168
      47: iload         14
      49: imul
      50: iload         15
      52: iload         15
      54: iconst_1
      55: iadd
      56: i2s
      57: istore        15
      59: aload_1
      60: iload_2
      61: bipush        32
      63: invokestatic  #175                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK128Simple:([BIIS[BII)V
      66: iload         12
      68: iload_3
      69: iload         4
      71: imul
      72: if_icmpge     349
      75: iload         11
      77: sipush        168
      80: iload         14
      82: imul
      83: iconst_4
      84: iload         13
      86: imul
      87: isub
      88: if_icmple     122
      91: iconst_1
      92: istore        14
      94: aload         21
      96: iconst_0
      97: sipush        168
     100: iload         14
     102: imul
     103: iload         15
     105: iload         15
     107: iconst_1
     108: iadd
     109: i2s
     110: istore        15
     112: aload_1
     113: iload_2
     114: bipush        32
     116: invokestatic  #175                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK128Simple:([BIIS[BII)V
     119: iconst_0
     120: istore        11
     122: aload         21
     124: iload         11
     126: invokestatic  #174                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load32:([BI)I
     129: iload         20
     131: iand
     132: istore        16
     134: iload         11
     136: iload         13
     138: iadd
     139: istore        11
     141: aload         21
     143: iload         11
     145: invokestatic  #174                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load32:([BI)I
     148: iload         20
     150: iand
     151: istore        17
     153: iload         11
     155: iload         13
     157: iadd
     158: istore        11
     160: aload         21
     162: iload         11
     164: invokestatic  #174                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load32:([BI)I
     167: iload         20
     169: iand
     170: istore        18
     172: iload         11
     174: iload         13
     176: iadd
     177: istore        11
     179: aload         21
     181: iload         11
     183: invokestatic  #174                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load32:([BI)I
     186: iload         20
     188: iand
     189: istore        19
     191: iload         11
     193: iload         13
     195: iadd
     196: istore        11
     198: iload         16
     200: iload         5
     202: if_icmpge     235
     205: iload         12
     207: iload_3
     208: iload         4
     210: imul
     211: if_icmpge     235
     214: aload_0
     215: iload         12
     217: iinc          12, 1
     220: iload         16
     222: i2l
     223: iload         10
     225: i2l
     226: lmul
     227: iload         5
     229: lload         6
     231: invokestatic  #179                // Method montgomeryP:(JIJ)J
     234: lastore
     235: iload         17
     237: iload         5
     239: if_icmpge     272
     242: iload         12
     244: iload_3
     245: iload         4
     247: imul
     248: if_icmpge     272
     251: aload_0
     252: iload         12
     254: iinc          12, 1
     257: iload         17
     259: i2l
     260: iload         10
     262: i2l
     263: lmul
     264: iload         5
     266: lload         6
     268: invokestatic  #179                // Method montgomeryP:(JIJ)J
     271: lastore
     272: iload         18
     274: iload         5
     276: if_icmpge     309
     279: iload         12
     281: iload_3
     282: iload         4
     284: imul
     285: if_icmpge     309
     288: aload_0
     289: iload         12
     291: iinc          12, 1
     294: iload         18
     296: i2l
     297: iload         10
     299: i2l
     300: lmul
     301: iload         5
     303: lload         6
     305: invokestatic  #179                // Method montgomeryP:(JIJ)J
     308: lastore
     309: iload         19
     311: iload         5
     313: if_icmpge     66
     316: iload         12
     318: iload_3
     319: iload         4
     321: imul
     322: if_icmpge     66
     325: aload_0
     326: iload         12
     328: iinc          12, 1
     331: iload         19
     333: i2l
     334: iload         10
     336: i2l
     337: lmul
     338: iload         5
     340: lload         6
     342: invokestatic  #179                // Method montgomeryP:(JIJ)J
     345: lastore
     346: goto          66
     349: return

  public static void sparsePolynomialMultiplication16(int[], short[], int[], short[], int, int);
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #189                // Method org/bouncycastle/util/Arrays.fill:([II)V
       5: iconst_0
       6: istore        7
       8: iload         7
      10: iload         5
      12: if_icmpge     101
      15: aload_2
      16: iload         7
      18: iaload
      19: istore        6
      21: iconst_0
      22: istore        8
      24: iload         8
      26: iload         6
      28: if_icmpge     59
      31: aload_0
      32: iload         8
      34: dup2
      35: iaload
      36: aload_3
      37: iload         7
      39: saload
      40: aload_1
      41: iload         4
      43: iload         8
      45: iadd
      46: iload         6
      48: isub
      49: saload
      50: imul
      51: isub
      52: iastore
      53: iinc          8, 1
      56: goto          24
      59: iload         6
      61: istore        8
      63: iload         8
      65: iload         4
      67: if_icmpge     95
      70: aload_0
      71: iload         8
      73: dup2
      74: iaload
      75: aload_3
      76: iload         7
      78: saload
      79: aload_1
      80: iload         8
      82: iload         6
      84: isub
      85: saload
      86: imul
      87: iadd
      88: iastore
      89: iinc          8, 1
      92: goto          63
      95: iinc          7, 1
      98: goto          8
     101: return

  public static void sparsePolynomialMultiplication8(long[], int, byte[], int, int[], short[], int, int);
    Code:
       0: aload_0
       1: lconst_0
       2: invokestatic  #190                // Method org/bouncycastle/util/Arrays.fill:([JJ)V
       5: iconst_0
       6: istore        9
       8: iload         9
      10: iload         7
      12: if_icmpge     114
      15: aload         4
      17: iload         9
      19: iaload
      20: istore        8
      22: iconst_0
      23: istore        10
      25: iload         10
      27: iload         8
      29: if_icmpge     66
      32: aload_0
      33: iload_1
      34: iload         10
      36: iadd
      37: dup2
      38: laload
      39: aload         5
      41: iload         9
      43: saload
      44: aload_2
      45: iload_3
      46: iload         6
      48: iadd
      49: iload         10
      51: iadd
      52: iload         8
      54: isub
      55: baload
      56: imul
      57: i2l
      58: lsub
      59: lastore
      60: iinc          10, 1
      63: goto          25
      66: iload         8
      68: istore        10
      70: iload         10
      72: iload         6
      74: if_icmpge     108
      77: aload_0
      78: iload_1
      79: iload         10
      81: iadd
      82: dup2
      83: laload
      84: aload         5
      86: iload         9
      88: saload
      89: aload_2
      90: iload_3
      91: iload         10
      93: iadd
      94: iload         8
      96: isub
      97: baload
      98: imul
      99: i2l
     100: ladd
     101: lastore
     102: iinc          10, 1
     105: goto          70
     108: iinc          9, 1
     111: goto          8
     114: return

  public static void sparsePolynomialMultiplication32(int[], int[], int[], short[], int, int);
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #189                // Method org/bouncycastle/util/Arrays.fill:([II)V
       5: iconst_0
       6: istore        7
       8: iload         7
      10: iload         5
      12: if_icmpge     101
      15: aload_2
      16: iload         7
      18: iaload
      19: istore        6
      21: iconst_0
      22: istore        8
      24: iload         8
      26: iload         6
      28: if_icmpge     59
      31: aload_0
      32: iload         8
      34: dup2
      35: iaload
      36: aload_3
      37: iload         7
      39: saload
      40: aload_1
      41: iload         4
      43: iload         8
      45: iadd
      46: iload         6
      48: isub
      49: iaload
      50: imul
      51: isub
      52: iastore
      53: iinc          8, 1
      56: goto          24
      59: iload         6
      61: istore        8
      63: iload         8
      65: iload         4
      67: if_icmpge     95
      70: aload_0
      71: iload         8
      73: dup2
      74: iaload
      75: aload_3
      76: iload         7
      78: saload
      79: aload_1
      80: iload         8
      82: iload         6
      84: isub
      85: iaload
      86: imul
      87: iadd
      88: iastore
      89: iinc          8, 1
      92: goto          63
      95: iinc          7, 1
      98: goto          8
     101: return

  public static void sparsePolynomialMultiplication32(long[], int, int[], int, int[], short[], int, int, int, int, int);
    Code:
       0: aload_0
       1: lconst_0
       2: invokestatic  #190                // Method org/bouncycastle/util/Arrays.fill:([JJ)V
       5: iconst_0
       6: istore        12
       8: iload         12
      10: iload         7
      12: if_icmpge     114
      15: aload         4
      17: iload         12
      19: iaload
      20: istore        11
      22: iconst_0
      23: istore        13
      25: iload         13
      27: iload         11
      29: if_icmpge     66
      32: aload_0
      33: iload_1
      34: iload         13
      36: iadd
      37: dup2
      38: laload
      39: aload         5
      41: iload         12
      43: saload
      44: aload_2
      45: iload_3
      46: iload         6
      48: iadd
      49: iload         13
      51: iadd
      52: iload         11
      54: isub
      55: iaload
      56: imul
      57: i2l
      58: lsub
      59: lastore
      60: iinc          13, 1
      63: goto          25
      66: iload         11
      68: istore        13
      70: iload         13
      72: iload         6
      74: if_icmpge     108
      77: aload_0
      78: iload_1
      79: iload         13
      81: iadd
      82: dup2
      83: laload
      84: aload         5
      86: iload         12
      88: saload
      89: aload_2
      90: iload_3
      91: iload         13
      93: iadd
      94: iload         11
      96: isub
      97: iaload
      98: imul
      99: i2l
     100: ladd
     101: lastore
     102: iinc          13, 1
     105: goto          70
     108: iinc          12, 1
     111: goto          8
     114: iconst_0
     115: istore        12
     117: iload         12
     119: iload         6
     121: if_icmpge     151
     124: aload_0
     125: iload_1
     126: iload         12
     128: iadd
     129: aload_0
     130: iload_1
     131: iload         12
     133: iadd
     134: laload
     135: iload         8
     137: iload         9
     139: iload         10
     141: invokestatic  #177                // Method barrett:(JIII)J
     144: lastore
     145: iinc          12, 1
     148: goto          117
     151: return
}
