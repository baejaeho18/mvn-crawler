public abstract class org.bouncycastle.math.ec.rfc8032.Ed448 {
  private static final long M26L;

  private static final long M28L;

  private static final long M32L;

  private static final int POINT_BYTES;

  private static final int SCALAR_INTS;

  private static final int SCALAR_BYTES;

  public static final int PREHASH_SIZE;

  public static final int PUBLIC_KEY_SIZE;

  public static final int SECRET_KEY_SIZE;

  public static final int SIGNATURE_SIZE;

  private static final byte[] DOM4_PREFIX;

  private static final int[] P;

  private static final int[] L;

  private static final int L_0;

  private static final int L_1;

  private static final int L_2;

  private static final int L_3;

  private static final int L_4;

  private static final int L_5;

  private static final int L_6;

  private static final int L_7;

  private static final int L4_0;

  private static final int L4_1;

  private static final int L4_2;

  private static final int L4_3;

  private static final int L4_4;

  private static final int L4_5;

  private static final int L4_6;

  private static final int L4_7;

  private static final int[] B_x;

  private static final int[] B_y;

  private static final int C_d;

  private static final int WNAF_WIDTH_BASE;

  private static final int PRECOMP_BLOCKS;

  private static final int PRECOMP_TEETH;

  private static final int PRECOMP_SPACING;

  private static final int PRECOMP_POINTS;

  private static final int PRECOMP_MASK;

  private static final java.lang.Object precompLock;

  private static org.bouncycastle.math.ec.rfc8032.Ed448$PointExt[] precompBaseTable;

  private static int[] precompBase;

  public org.bouncycastle.math.ec.rfc8032.Ed448();
    Code:
       0: aload_0
       1: invokespecial #470                // Method java/lang/Object."<init>":()V
       4: return

  private static byte[] calculateS(byte[], byte[], byte[]);
    Code:
       0: bipush        28
       2: newarray       int
       4: astore_3
       5: aload_0
       6: iconst_0
       7: aload_3
       8: invokestatic  #512                // Method decodeScalar:([BI[I)V
      11: bipush        14
      13: newarray       int
      15: astore        4
      17: aload_1
      18: iconst_0
      19: aload         4
      21: invokestatic  #512                // Method decodeScalar:([BI[I)V
      24: bipush        14
      26: newarray       int
      28: astore        5
      30: aload_2
      31: iconst_0
      32: aload         5
      34: invokestatic  #512                // Method decodeScalar:([BI[I)V
      37: bipush        14
      39: aload         4
      41: aload         5
      43: aload_3
      44: invokestatic  #545                // Method org/bouncycastle/math/raw/Nat.mulAddTo:(I[I[I[I)I
      47: pop
      48: bipush        114
      50: newarray       byte
      52: astore        6
      54: iconst_0
      55: istore        7
      57: iload         7
      59: aload_3
      60: arraylength
      61: if_icmpge     83
      64: aload_3
      65: iload         7
      67: iaload
      68: aload         6
      70: iload         7
      72: iconst_4
      73: imul
      74: invokestatic  #499                // Method encode32:(I[BI)V
      77: iinc          7, 1
      80: goto          57
      83: aload         6
      85: invokestatic  #504                // Method reduceScalar:([B)[B
      88: areturn

  private static boolean checkContextVar(byte[]);
    Code:
       0: aload_0
       1: ifnull        16
       4: aload_0
       5: arraylength
       6: sipush        256
       9: if_icmpge     16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  private static int checkPoint(int[], int[]);
    Code:
       0: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
       3: astore_2
       4: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
       7: astore_3
       8: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      11: astore        4
      13: aload_0
      14: aload_3
      15: invokestatic  #492                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqr:([I[I)V
      18: aload_1
      19: aload         4
      21: invokestatic  #492                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqr:([I[I)V
      24: aload_3
      25: aload         4
      27: aload_2
      28: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
      31: aload_3
      32: aload         4
      34: aload_3
      35: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
      38: aload_2
      39: ldc           #5                  // int 39081
      41: aload_2
      42: invokestatic  #487                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([II[I)V
      45: aload_2
      46: invokestatic  #484                // Method org/bouncycastle/math/ec/rfc7748/X448Field.subOne:([I)V
      49: aload_2
      50: aload_3
      51: aload_2
      52: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
      55: aload_2
      56: invokestatic  #482                // Method org/bouncycastle/math/ec/rfc7748/X448Field.normalize:([I)V
      59: aload_2
      60: invokestatic  #479                // Method org/bouncycastle/math/ec/rfc7748/X448Field.isZero:([I)I
      63: ireturn

  private static int checkPoint(int[], int[], int[]);
    Code:
       0: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
       3: astore_3
       4: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
       7: astore        4
       9: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      12: astore        5
      14: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      17: astore        6
      19: aload_0
      20: aload         4
      22: invokestatic  #492                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqr:([I[I)V
      25: aload_1
      26: aload         5
      28: invokestatic  #492                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqr:([I[I)V
      31: aload_2
      32: aload         6
      34: invokestatic  #492                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqr:([I[I)V
      37: aload         4
      39: aload         5
      41: aload_3
      42: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
      45: aload         4
      47: aload         5
      49: aload         4
      51: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
      54: aload         4
      56: aload         6
      58: aload         4
      60: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
      63: aload         6
      65: aload         6
      67: invokestatic  #492                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqr:([I[I)V
      70: aload_3
      71: ldc           #5                  // int 39081
      73: aload_3
      74: invokestatic  #487                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([II[I)V
      77: aload_3
      78: aload         6
      80: aload_3
      81: invokestatic  #495                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sub:([I[I[I)V
      84: aload_3
      85: aload         4
      87: aload_3
      88: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
      91: aload_3
      92: invokestatic  #482                // Method org/bouncycastle/math/ec/rfc7748/X448Field.normalize:([I)V
      95: aload_3
      96: invokestatic  #479                // Method org/bouncycastle/math/ec/rfc7748/X448Field.isZero:([I)I
      99: ireturn

  private static boolean checkPointVar(byte[]);
    Code:
       0: aload_0
       1: bipush        56
       3: baload
       4: bipush        127
       6: iand
       7: ifeq          12
      10: iconst_0
      11: ireturn
      12: bipush        14
      14: newarray       int
      16: astore_1
      17: aload_0
      18: iconst_0
      19: aload_1
      20: iconst_0
      21: bipush        14
      23: invokestatic  #513                // Method decode32:([BI[III)V
      26: bipush        14
      28: aload_1
      29: getstatic     #458                // Field P:[I
      32: invokestatic  #544                // Method org/bouncycastle/math/raw/Nat.gte:(I[I[I)Z
      35: ifne          42
      38: iconst_1
      39: goto          43
      42: iconst_0
      43: ireturn

  private static boolean checkScalarVar(byte[]);
    Code:
       0: aload_0
       1: bipush        56
       3: baload
       4: ifeq          9
       7: iconst_0
       8: ireturn
       9: bipush        14
      11: newarray       int
      13: astore_1
      14: aload_0
      15: iconst_0
      16: aload_1
      17: invokestatic  #512                // Method decodeScalar:([BI[I)V
      20: bipush        14
      22: aload_1
      23: getstatic     #457                // Field L:[I
      26: invokestatic  #544                // Method org/bouncycastle/math/raw/Nat.gte:(I[I[I)Z
      29: ifne          36
      32: iconst_1
      33: goto          37
      36: iconst_0
      37: ireturn

  public static org.bouncycastle.crypto.Xof createPrehash();
    Code:
       0: invokestatic  #520                // Method createXof:()Lorg/bouncycastle/crypto/Xof;
       3: areturn

  private static org.bouncycastle.crypto.Xof createXof();
    Code:
       0: new           #321                // class org/bouncycastle/crypto/digests/SHAKEDigest
       3: dup
       4: sipush        256
       7: invokespecial #473                // Method org/bouncycastle/crypto/digests/SHAKEDigest."<init>":(I)V
      10: areturn

  private static int decode16(byte[], int);
    Code:
       0: aload_0
       1: iload_1
       2: baload
       3: sipush        255
       6: iand
       7: istore_2
       8: iload_2
       9: aload_0
      10: iinc          1, 1
      13: iload_1
      14: baload
      15: sipush        255
      18: iand
      19: bipush        8
      21: ishl
      22: ior
      23: istore_2
      24: iload_2
      25: ireturn

  private static int decode24(byte[], int);
    Code:
       0: aload_0
       1: iload_1
       2: baload
       3: sipush        255
       6: iand
       7: istore_2
       8: iload_2
       9: aload_0
      10: iinc          1, 1
      13: iload_1
      14: baload
      15: sipush        255
      18: iand
      19: bipush        8
      21: ishl
      22: ior
      23: istore_2
      24: iload_2
      25: aload_0
      26: iinc          1, 1
      29: iload_1
      30: baload
      31: sipush        255
      34: iand
      35: bipush        16
      37: ishl
      38: ior
      39: istore_2
      40: iload_2
      41: ireturn

  private static int decode32(byte[], int);
    Code:
       0: aload_0
       1: iload_1
       2: baload
       3: sipush        255
       6: iand
       7: istore_2
       8: iload_2
       9: aload_0
      10: iinc          1, 1
      13: iload_1
      14: baload
      15: sipush        255
      18: iand
      19: bipush        8
      21: ishl
      22: ior
      23: istore_2
      24: iload_2
      25: aload_0
      26: iinc          1, 1
      29: iload_1
      30: baload
      31: sipush        255
      34: iand
      35: bipush        16
      37: ishl
      38: ior
      39: istore_2
      40: iload_2
      41: aload_0
      42: iinc          1, 1
      45: iload_1
      46: baload
      47: bipush        24
      49: ishl
      50: ior
      51: istore_2
      52: iload_2
      53: ireturn

  private static void decode32(byte[], int, int[], int, int);
    Code:
       0: iconst_0
       1: istore        5
       3: iload         5
       5: iload         4
       7: if_icmpge     32
      10: aload_2
      11: iload_3
      12: iload         5
      14: iadd
      15: aload_0
      16: iload_1
      17: iload         5
      19: iconst_4
      20: imul
      21: iadd
      22: invokestatic  #507                // Method decode32:([BI)I
      25: iastore
      26: iinc          5, 1
      29: goto          3
      32: return

  private static boolean decodePointVar(byte[], int, boolean, org.bouncycastle.math.ec.rfc8032.Ed448$PointExt);
    Code:
       0: aload_0
       1: iload_1
       2: iload_1
       3: bipush        57
       5: iadd
       6: invokestatic  #546                // Method org/bouncycastle/util/Arrays.copyOfRange:([BII)[B
       9: astore        4
      11: aload         4
      13: invokestatic  #502                // Method checkPointVar:([B)Z
      16: ifne          21
      19: iconst_0
      20: ireturn
      21: aload         4
      23: bipush        56
      25: baload
      26: sipush        128
      29: iand
      30: bipush        7
      32: iushr
      33: istore        5
      35: aload         4
      37: bipush        56
      39: dup2
      40: baload
      41: bipush        127
      43: iand
      44: i2b
      45: bastore
      46: aload         4
      48: iconst_0
      49: aload_3
      50: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      53: invokestatic  #478                // Method org/bouncycastle/math/ec/rfc7748/X448Field.decode:([BI[I)V
      56: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      59: astore        6
      61: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      64: astore        7
      66: aload_3
      67: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      70: aload         6
      72: invokestatic  #492                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqr:([I[I)V
      75: aload         6
      77: ldc           #5                  // int 39081
      79: aload         7
      81: invokestatic  #487                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([II[I)V
      84: aload         6
      86: aload         6
      88: invokestatic  #491                // Method org/bouncycastle/math/ec/rfc7748/X448Field.negate:([I[I)V
      91: aload         6
      93: invokestatic  #480                // Method org/bouncycastle/math/ec/rfc7748/X448Field.addOne:([I)V
      96: aload         7
      98: invokestatic  #480                // Method org/bouncycastle/math/ec/rfc7748/X448Field.addOne:([I)V
     101: aload         6
     103: aload         7
     105: aload_3
     106: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     109: invokestatic  #496                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqrtRatioVar:([I[I[I)Z
     112: ifne          117
     115: iconst_0
     116: ireturn
     117: aload_3
     118: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     121: invokestatic  #482                // Method org/bouncycastle/math/ec/rfc7748/X448Field.normalize:([I)V
     124: iload         5
     126: iconst_1
     127: if_icmpne     142
     130: aload_3
     131: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     134: invokestatic  #486                // Method org/bouncycastle/math/ec/rfc7748/X448Field.isZeroVar:([I)Z
     137: ifeq          142
     140: iconst_0
     141: ireturn
     142: iload_2
     143: iload         5
     145: aload_3
     146: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     149: iconst_0
     150: iaload
     151: iconst_1
     152: iand
     153: if_icmpeq     160
     156: iconst_1
     157: goto          161
     160: iconst_0
     161: ixor
     162: ifeq          176
     165: aload_3
     166: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     169: aload_3
     170: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     173: invokestatic  #491                // Method org/bouncycastle/math/ec/rfc7748/X448Field.negate:([I[I)V
     176: aload_3
     177: invokestatic  #524                // Method pointExtendXY:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
     180: iconst_1
     181: ireturn

  private static void decodeScalar(byte[], int, int[]);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iconst_0
       4: bipush        14
       6: invokestatic  #513                // Method decode32:([BI[III)V
       9: return

  private static void dom4(org.bouncycastle.crypto.Xof, byte, byte[]);
    Code:
       0: aload_0
       1: getstatic     #454                // Field DOM4_PREFIX:[B
       4: iconst_0
       5: getstatic     #454                // Field DOM4_PREFIX:[B
       8: arraylength
       9: invokeinterface #551,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.update:([BII)V
      14: aload_0
      15: iload_1
      16: invokeinterface #549,  2          // InterfaceMethod org/bouncycastle/crypto/Xof.update:(B)V
      21: aload_0
      22: aload_2
      23: arraylength
      24: i2b
      25: invokeinterface #549,  2          // InterfaceMethod org/bouncycastle/crypto/Xof.update:(B)V
      30: aload_0
      31: aload_2
      32: iconst_0
      33: aload_2
      34: arraylength
      35: invokeinterface #551,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.update:([BII)V
      40: return

  private static void encode24(int, byte[], int);
    Code:
       0: aload_1
       1: iload_2
       2: iload_0
       3: i2b
       4: bastore
       5: aload_1
       6: iinc          2, 1
       9: iload_2
      10: iload_0
      11: bipush        8
      13: iushr
      14: i2b
      15: bastore
      16: aload_1
      17: iinc          2, 1
      20: iload_2
      21: iload_0
      22: bipush        16
      24: iushr
      25: i2b
      26: bastore
      27: return

  private static void encode32(int, byte[], int);
    Code:
       0: aload_1
       1: iload_2
       2: iload_0
       3: i2b
       4: bastore
       5: aload_1
       6: iinc          2, 1
       9: iload_2
      10: iload_0
      11: bipush        8
      13: iushr
      14: i2b
      15: bastore
      16: aload_1
      17: iinc          2, 1
      20: iload_2
      21: iload_0
      22: bipush        16
      24: iushr
      25: i2b
      26: bastore
      27: aload_1
      28: iinc          2, 1
      31: iload_2
      32: iload_0
      33: bipush        24
      35: iushr
      36: i2b
      37: bastore
      38: return

  private static void encode56(long, byte[], int);
    Code:
       0: lload_0
       1: l2i
       2: aload_2
       3: iload_3
       4: invokestatic  #499                // Method encode32:(I[BI)V
       7: lload_0
       8: bipush        32
      10: lushr
      11: l2i
      12: aload_2
      13: iload_3
      14: iconst_4
      15: iadd
      16: invokestatic  #498                // Method encode24:(I[BI)V
      19: return

  private static int encodePoint(org.bouncycastle.math.ec.rfc8032.Ed448$PointExt, byte[], int);
    Code:
       0: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
       3: astore_3
       4: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
       7: astore        4
       9: aload_0
      10: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
      13: aload         4
      15: invokestatic  #490                // Method org/bouncycastle/math/ec/rfc7748/X448Field.inv:([I[I)V
      18: aload_0
      19: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
      22: aload         4
      24: aload_3
      25: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
      28: aload_0
      29: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      32: aload         4
      34: aload         4
      36: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
      39: aload_3
      40: invokestatic  #482                // Method org/bouncycastle/math/ec/rfc7748/X448Field.normalize:([I)V
      43: aload         4
      45: invokestatic  #482                // Method org/bouncycastle/math/ec/rfc7748/X448Field.normalize:([I)V
      48: aload_3
      49: aload         4
      51: invokestatic  #518                // Method checkPoint:([I[I)I
      54: istore        5
      56: aload         4
      58: aload_1
      59: iload_2
      60: invokestatic  #489                // Method org/bouncycastle/math/ec/rfc7748/X448Field.encode:([I[BI)V
      63: aload_1
      64: iload_2
      65: bipush        57
      67: iadd
      68: iconst_1
      69: isub
      70: aload_3
      71: iconst_0
      72: iaload
      73: iconst_1
      74: iand
      75: bipush        7
      77: ishl
      78: i2b
      79: bastore
      80: iload         5
      82: ireturn

  public static void generatePrivateKey(java.security.SecureRandom, byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #472                // Method java/security/SecureRandom.nextBytes:([B)V
       5: return

  public static void generatePublicKey(byte[], int, byte[], int);
    Code:
       0: invokestatic  #520                // Method createXof:()Lorg/bouncycastle/crypto/Xof;
       3: astore        4
       5: bipush        114
       7: newarray       byte
       9: astore        5
      11: aload         4
      13: aload_0
      14: iload_1
      15: bipush        57
      17: invokeinterface #551,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.update:([BII)V
      22: aload         4
      24: aload         5
      26: iconst_0
      27: aload         5
      29: arraylength
      30: invokeinterface #550,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.doFinal:([BII)I
      35: pop
      36: bipush        57
      38: newarray       byte
      40: astore        6
      42: aload         5
      44: iconst_0
      45: aload         6
      47: invokestatic  #508                // Method pruneScalar:([BI[B)V
      50: aload         6
      52: aload_2
      53: iload_3
      54: invokestatic  #514                // Method scalarMultBaseEncoded:([B[BI)V
      57: return

  private static int getWindow4(int[], int);
    Code:
       0: iload_1
       1: iconst_3
       2: iushr
       3: istore_2
       4: iload_1
       5: bipush        7
       7: iand
       8: iconst_2
       9: ishl
      10: istore_3
      11: aload_0
      12: iload_2
      13: iaload
      14: iload_3
      15: iushr
      16: bipush        15
      18: iand
      19: ireturn

  private static byte[] getWNAF(int[], int);
    Code:
       0: bipush        28
       2: newarray       int
       4: astore_2
       5: aload_2
       6: arraylength
       7: istore_3
       8: iconst_0
       9: istore        4
      11: bipush        14
      13: istore        5
      15: iinc          5, -1
      18: iload         5
      20: iflt          60
      23: aload_0
      24: iload         5
      26: iaload
      27: istore        6
      29: aload_2
      30: iinc          3, -1
      33: iload_3
      34: iload         6
      36: bipush        16
      38: iushr
      39: iload         4
      41: bipush        16
      43: ishl
      44: ior
      45: iastore
      46: aload_2
      47: iinc          3, -1
      50: iload_3
      51: iload         6
      53: dup
      54: istore        4
      56: iastore
      57: goto          15
      60: sipush        447
      63: newarray       byte
      65: astore_3
      66: iconst_1
      67: iload_1
      68: ishl
      69: istore        4
      71: iload         4
      73: iconst_1
      74: isub
      75: istore        5
      77: iload         4
      79: iconst_1
      80: iushr
      81: istore        6
      83: iconst_0
      84: istore        7
      86: iconst_0
      87: istore        8
      89: iconst_0
      90: istore        9
      92: iload         9
      94: aload_2
      95: arraylength
      96: if_icmpge     202
      99: aload_2
     100: iload         9
     102: iaload
     103: istore        10
     105: iload         7
     107: bipush        16
     109: if_icmpge     193
     112: iload         10
     114: iload         7
     116: iushr
     117: istore        11
     119: iload         11
     121: iconst_1
     122: iand
     123: istore        12
     125: iload         12
     127: iload         8
     129: if_icmpne     138
     132: iinc          7, 1
     135: goto          105
     138: iload         11
     140: iload         5
     142: iand
     143: iload         8
     145: iadd
     146: istore        13
     148: iload         13
     150: iload         6
     152: iand
     153: istore        8
     155: iload         13
     157: iload         8
     159: iconst_1
     160: ishl
     161: isub
     162: istore        13
     164: iload         8
     166: iload_1
     167: iconst_1
     168: isub
     169: iushr
     170: istore        8
     172: aload_3
     173: iload         9
     175: iconst_4
     176: ishl
     177: iload         7
     179: iadd
     180: iload         13
     182: i2b
     183: bastore
     184: iload         7
     186: iload_1
     187: iadd
     188: istore        7
     190: goto          105
     193: iinc          9, 1
     196: iinc          7, -16
     199: goto          92
     202: aload_3
     203: areturn

  private static void implSign(org.bouncycastle.crypto.Xof, byte[], byte[], byte[], int, byte[], byte, byte[], int, int, byte[], int);
    Code:
       0: aload_0
       1: iload         6
       3: aload         5
       5: invokestatic  #521                // Method dom4:(Lorg/bouncycastle/crypto/Xof;B[B)V
       8: aload_0
       9: aload_1
      10: bipush        57
      12: bipush        57
      14: invokeinterface #551,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.update:([BII)V
      19: aload_0
      20: aload         7
      22: iload         8
      24: iload         9
      26: invokeinterface #551,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.update:([BII)V
      31: aload_0
      32: aload_1
      33: iconst_0
      34: aload_1
      35: arraylength
      36: invokeinterface #550,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.doFinal:([BII)I
      41: pop
      42: aload_1
      43: invokestatic  #504                // Method reduceScalar:([B)[B
      46: astore        12
      48: bipush        57
      50: newarray       byte
      52: astore        13
      54: aload         12
      56: aload         13
      58: iconst_0
      59: invokestatic  #514                // Method scalarMultBaseEncoded:([B[BI)V
      62: aload_0
      63: iload         6
      65: aload         5
      67: invokestatic  #521                // Method dom4:(Lorg/bouncycastle/crypto/Xof;B[B)V
      70: aload_0
      71: aload         13
      73: iconst_0
      74: bipush        57
      76: invokeinterface #551,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.update:([BII)V
      81: aload_0
      82: aload_3
      83: iload         4
      85: bipush        57
      87: invokeinterface #551,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.update:([BII)V
      92: aload_0
      93: aload         7
      95: iload         8
      97: iload         9
      99: invokeinterface #551,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.update:([BII)V
     104: aload_0
     105: aload_1
     106: iconst_0
     107: aload_1
     108: arraylength
     109: invokeinterface #550,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.doFinal:([BII)I
     114: pop
     115: aload_1
     116: invokestatic  #504                // Method reduceScalar:([B)[B
     119: astore        14
     121: aload         12
     123: aload         14
     125: aload_2
     126: invokestatic  #515                // Method calculateS:([B[B[B)[B
     129: astore        15
     131: aload         13
     133: iconst_0
     134: aload         10
     136: iload         11
     138: bipush        57
     140: invokestatic  #471                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     143: aload         15
     145: iconst_0
     146: aload         10
     148: iload         11
     150: bipush        57
     152: iadd
     153: bipush        57
     155: invokestatic  #471                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     158: return

  private static void implSign(byte[], int, byte[], byte, byte[], int, int, byte[], int);
    Code:
       0: aload_2
       1: invokestatic  #501                // Method checkContextVar:([B)Z
       4: ifne          17
       7: new           #314                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #44                 // String ctx
      13: invokespecial #467                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: invokestatic  #520                // Method createXof:()Lorg/bouncycastle/crypto/Xof;
      20: astore        9
      22: bipush        114
      24: newarray       byte
      26: astore        10
      28: aload         9
      30: aload_0
      31: iload_1
      32: bipush        57
      34: invokeinterface #551,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.update:([BII)V
      39: aload         9
      41: aload         10
      43: iconst_0
      44: aload         10
      46: arraylength
      47: invokeinterface #550,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.doFinal:([BII)I
      52: pop
      53: bipush        57
      55: newarray       byte
      57: astore        11
      59: aload         10
      61: iconst_0
      62: aload         11
      64: invokestatic  #508                // Method pruneScalar:([BI[B)V
      67: bipush        57
      69: newarray       byte
      71: astore        12
      73: aload         11
      75: aload         12
      77: iconst_0
      78: invokestatic  #514                // Method scalarMultBaseEncoded:([B[BI)V
      81: aload         9
      83: aload         10
      85: aload         11
      87: aload         12
      89: iconst_0
      90: aload_2
      91: iload_3
      92: aload         4
      94: iload         5
      96: iload         6
      98: aload         7
     100: iload         8
     102: invokestatic  #522                // Method implSign:(Lorg/bouncycastle/crypto/Xof;[B[B[BI[BB[BII[BI)V
     105: return

  private static void implSign(byte[], int, byte[], int, byte[], byte, byte[], int, int, byte[], int);
    Code:
       0: aload         4
       2: invokestatic  #501                // Method checkContextVar:([B)Z
       5: ifne          18
       8: new           #314                // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #44                 // String ctx
      14: invokespecial #467                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: invokestatic  #520                // Method createXof:()Lorg/bouncycastle/crypto/Xof;
      21: astore        11
      23: bipush        114
      25: newarray       byte
      27: astore        12
      29: aload         11
      31: aload_0
      32: iload_1
      33: bipush        57
      35: invokeinterface #551,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.update:([BII)V
      40: aload         11
      42: aload         12
      44: iconst_0
      45: aload         12
      47: arraylength
      48: invokeinterface #550,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.doFinal:([BII)I
      53: pop
      54: bipush        57
      56: newarray       byte
      58: astore        13
      60: aload         12
      62: iconst_0
      63: aload         13
      65: invokestatic  #508                // Method pruneScalar:([BI[B)V
      68: aload         11
      70: aload         12
      72: aload         13
      74: aload_2
      75: iload_3
      76: aload         4
      78: iload         5
      80: aload         6
      82: iload         7
      84: iload         8
      86: aload         9
      88: iload         10
      90: invokestatic  #522                // Method implSign:(Lorg/bouncycastle/crypto/Xof;[B[B[BI[BB[BII[BI)V
      93: return

  private static boolean implVerify(byte[], int, byte[], int, byte[], byte, byte[], int, int);
    Code:
       0: aload         4
       2: invokestatic  #501                // Method checkContextVar:([B)Z
       5: ifne          18
       8: new           #314                // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #44                 // String ctx
      14: invokespecial #467                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: iload_1
      20: iload_1
      21: bipush        57
      23: iadd
      24: invokestatic  #546                // Method org/bouncycastle/util/Arrays.copyOfRange:([BII)[B
      27: astore        9
      29: aload_0
      30: iload_1
      31: bipush        57
      33: iadd
      34: iload_1
      35: bipush        114
      37: iadd
      38: invokestatic  #546                // Method org/bouncycastle/util/Arrays.copyOfRange:([BII)[B
      41: astore        10
      43: aload         9
      45: invokestatic  #502                // Method checkPointVar:([B)Z
      48: ifne          53
      51: iconst_0
      52: ireturn
      53: aload         10
      55: invokestatic  #503                // Method checkScalarVar:([B)Z
      58: ifne          63
      61: iconst_0
      62: ireturn
      63: new           #328                // class org/bouncycastle/math/ec/rfc8032/Ed448$PointExt
      66: dup
      67: aconst_null
      68: invokespecial #539                // Method org/bouncycastle/math/ec/rfc8032/Ed448$PointExt."<init>":(Lorg/bouncycastle/math/ec/rfc8032/Ed448$1;)V
      71: astore        11
      73: aload_2
      74: iload_3
      75: iconst_1
      76: aload         11
      78: invokestatic  #528                // Method decodePointVar:([BIZLorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)Z
      81: ifne          86
      84: iconst_0
      85: ireturn
      86: invokestatic  #520                // Method createXof:()Lorg/bouncycastle/crypto/Xof;
      89: astore        12
      91: bipush        114
      93: newarray       byte
      95: astore        13
      97: aload         12
      99: iload         5
     101: aload         4
     103: invokestatic  #521                // Method dom4:(Lorg/bouncycastle/crypto/Xof;B[B)V
     106: aload         12
     108: aload         9
     110: iconst_0
     111: bipush        57
     113: invokeinterface #551,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.update:([BII)V
     118: aload         12
     120: aload_2
     121: iload_3
     122: bipush        57
     124: invokeinterface #551,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.update:([BII)V
     129: aload         12
     131: aload         6
     133: iload         7
     135: iload         8
     137: invokeinterface #551,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.update:([BII)V
     142: aload         12
     144: aload         13
     146: iconst_0
     147: aload         13
     149: arraylength
     150: invokeinterface #550,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.doFinal:([BII)I
     155: pop
     156: aload         13
     158: invokestatic  #504                // Method reduceScalar:([B)[B
     161: astore        14
     163: bipush        14
     165: newarray       int
     167: astore        15
     169: aload         10
     171: iconst_0
     172: aload         15
     174: invokestatic  #512                // Method decodeScalar:([BI[I)V
     177: bipush        14
     179: newarray       int
     181: astore        16
     183: aload         14
     185: iconst_0
     186: aload         16
     188: invokestatic  #512                // Method decodeScalar:([BI[I)V
     191: new           #328                // class org/bouncycastle/math/ec/rfc8032/Ed448$PointExt
     194: dup
     195: aconst_null
     196: invokespecial #539                // Method org/bouncycastle/math/ec/rfc8032/Ed448$PointExt."<init>":(Lorg/bouncycastle/math/ec/rfc8032/Ed448$1;)V
     199: astore        17
     201: aload         15
     203: aload         16
     205: aload         11
     207: aload         17
     209: invokestatic  #537                // Method scalarMultStrausVar:([I[ILorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
     212: bipush        57
     214: newarray       byte
     216: astore        18
     218: iconst_0
     219: aload         17
     221: aload         18
     223: iconst_0
     224: invokestatic  #527                // Method encodePoint:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;[BI)I
     227: if_icmpeq     244
     230: aload         18
     232: aload         9
     234: invokestatic  #547                // Method org/bouncycastle/util/Arrays.areEqual:([B[B)Z
     237: ifeq          244
     240: iconst_1
     241: goto          245
     244: iconst_0
     245: ireturn

  private static void pointAdd(org.bouncycastle.math.ec.rfc8032.Ed448$PointExt, org.bouncycastle.math.ec.rfc8032.Ed448$PointExt);
    Code:
       0: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
       3: astore_2
       4: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
       7: astore_3
       8: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      11: astore        4
      13: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      16: astore        5
      18: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      21: astore        6
      23: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      26: astore        7
      28: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      31: astore        8
      33: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      36: astore        9
      38: aload_0
      39: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
      42: aload_1
      43: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
      46: aload_2
      47: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
      50: aload_2
      51: aload_3
      52: invokestatic  #492                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqr:([I[I)V
      55: aload_0
      56: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
      59: aload_1
      60: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
      63: aload         4
      65: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
      68: aload_0
      69: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      72: aload_1
      73: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      76: aload         5
      78: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
      81: aload         4
      83: aload         5
      85: aload         6
      87: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
      90: aload         6
      92: ldc           #5                  // int 39081
      94: aload         6
      96: invokestatic  #487                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([II[I)V
      99: aload_3
     100: aload         6
     102: aload         7
     104: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
     107: aload_3
     108: aload         6
     110: aload         8
     112: invokestatic  #495                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sub:([I[I[I)V
     115: aload_0
     116: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     119: aload_0
     120: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
     123: aload_3
     124: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
     127: aload_1
     128: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     131: aload_1
     132: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
     135: aload         6
     137: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
     140: aload_3
     141: aload         6
     143: aload         9
     145: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     148: aload         5
     150: aload         4
     152: aload_3
     153: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
     156: aload         5
     158: aload         4
     160: aload         6
     162: invokestatic  #495                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sub:([I[I[I)V
     165: aload_3
     166: invokestatic  #481                // Method org/bouncycastle/math/ec/rfc7748/X448Field.carry:([I)V
     169: aload         9
     171: aload_3
     172: aload         9
     174: invokestatic  #495                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sub:([I[I[I)V
     177: aload         9
     179: aload_2
     180: aload         9
     182: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     185: aload         6
     187: aload_2
     188: aload         6
     190: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     193: aload         7
     195: aload         9
     197: aload_1
     198: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     201: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     204: aload         6
     206: aload         8
     208: aload_1
     209: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
     212: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     215: aload         7
     217: aload         8
     219: aload_1
     220: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
     223: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     226: return

  private static void pointAddVar(boolean, org.bouncycastle.math.ec.rfc8032.Ed448$PointExt, org.bouncycastle.math.ec.rfc8032.Ed448$PointExt);
    Code:
       0: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
       3: astore_3
       4: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
       7: astore        4
       9: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      12: astore        5
      14: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      17: astore        6
      19: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      22: astore        7
      24: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      27: astore        8
      29: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      32: astore        9
      34: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      37: astore        10
      39: iload_0
      40: ifeq          75
      43: aload         7
      45: astore        11
      47: aload         4
      49: astore        12
      51: aload         9
      53: astore        13
      55: aload         8
      57: astore        14
      59: aload_1
      60: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      63: aload_1
      64: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
      67: aload         10
      69: invokestatic  #495                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sub:([I[I[I)V
      72: goto          104
      75: aload         4
      77: astore        11
      79: aload         7
      81: astore        12
      83: aload         8
      85: astore        13
      87: aload         9
      89: astore        14
      91: aload_1
      92: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      95: aload_1
      96: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
      99: aload         10
     101: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
     104: aload_1
     105: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
     108: aload_2
     109: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
     112: aload_3
     113: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     116: aload_3
     117: aload         4
     119: invokestatic  #492                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqr:([I[I)V
     122: aload_1
     123: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     126: aload_2
     127: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     130: aload         5
     132: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     135: aload_1
     136: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
     139: aload_2
     140: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
     143: aload         6
     145: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     148: aload         5
     150: aload         6
     152: aload         7
     154: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     157: aload         7
     159: ldc           #5                  // int 39081
     161: aload         7
     163: invokestatic  #487                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([II[I)V
     166: aload         4
     168: aload         7
     170: aload         13
     172: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
     175: aload         4
     177: aload         7
     179: aload         14
     181: invokestatic  #495                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sub:([I[I[I)V
     184: aload_2
     185: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     188: aload_2
     189: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
     192: aload         7
     194: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
     197: aload         10
     199: aload         7
     201: aload         10
     203: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     206: aload         6
     208: aload         5
     210: aload         11
     212: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
     215: aload         6
     217: aload         5
     219: aload         12
     221: invokestatic  #495                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sub:([I[I[I)V
     224: aload         11
     226: invokestatic  #481                // Method org/bouncycastle/math/ec/rfc7748/X448Field.carry:([I)V
     229: aload         10
     231: aload         4
     233: aload         10
     235: invokestatic  #495                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sub:([I[I[I)V
     238: aload         10
     240: aload_3
     241: aload         10
     243: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     246: aload         7
     248: aload_3
     249: aload         7
     251: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     254: aload         8
     256: aload         10
     258: aload_2
     259: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     262: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     265: aload         7
     267: aload         9
     269: aload_2
     270: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
     273: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     276: aload         8
     278: aload         9
     280: aload_2
     281: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
     284: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     287: return

  private static void pointAddPrecomp(org.bouncycastle.math.ec.rfc8032.Ed448$PointPrecomp, org.bouncycastle.math.ec.rfc8032.Ed448$PointExt);
    Code:
       0: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
       3: astore_2
       4: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
       7: astore_3
       8: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      11: astore        4
      13: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      16: astore        5
      18: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      21: astore        6
      23: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      26: astore        7
      28: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      31: astore        8
      33: aload_1
      34: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
      37: aload_2
      38: invokestatic  #492                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqr:([I[I)V
      41: aload_0
      42: getfield      #465                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointPrecomp.x:[I
      45: aload_1
      46: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
      49: aload_3
      50: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
      53: aload_0
      54: getfield      #466                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointPrecomp.y:[I
      57: aload_1
      58: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      61: aload         4
      63: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
      66: aload_3
      67: aload         4
      69: aload         5
      71: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
      74: aload         5
      76: ldc           #5                  // int 39081
      78: aload         5
      80: invokestatic  #487                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([II[I)V
      83: aload_2
      84: aload         5
      86: aload         6
      88: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
      91: aload_2
      92: aload         5
      94: aload         7
      96: invokestatic  #495                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sub:([I[I[I)V
      99: aload_0
     100: getfield      #465                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointPrecomp.x:[I
     103: aload_0
     104: getfield      #466                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointPrecomp.y:[I
     107: aload_2
     108: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
     111: aload_1
     112: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     115: aload_1
     116: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
     119: aload         5
     121: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
     124: aload_2
     125: aload         5
     127: aload         8
     129: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     132: aload         4
     134: aload_3
     135: aload_2
     136: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
     139: aload         4
     141: aload_3
     142: aload         5
     144: invokestatic  #495                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sub:([I[I[I)V
     147: aload_2
     148: invokestatic  #481                // Method org/bouncycastle/math/ec/rfc7748/X448Field.carry:([I)V
     151: aload         8
     153: aload_2
     154: aload         8
     156: invokestatic  #495                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sub:([I[I[I)V
     159: aload         8
     161: aload_1
     162: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
     165: aload         8
     167: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     170: aload         5
     172: aload_1
     173: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
     176: aload         5
     178: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     181: aload         6
     183: aload         8
     185: aload_1
     186: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     189: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     192: aload         5
     194: aload         7
     196: aload_1
     197: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
     200: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     203: aload         6
     205: aload         7
     207: aload_1
     208: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
     211: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     214: return

  private static org.bouncycastle.math.ec.rfc8032.Ed448$PointExt pointCopy(org.bouncycastle.math.ec.rfc8032.Ed448$PointExt);
    Code:
       0: new           #328                // class org/bouncycastle/math/ec/rfc8032/Ed448$PointExt
       3: dup
       4: aconst_null
       5: invokespecial #539                // Method org/bouncycastle/math/ec/rfc8032/Ed448$PointExt."<init>":(Lorg/bouncycastle/math/ec/rfc8032/Ed448$1;)V
       8: astore_1
       9: aload_0
      10: aload_1
      11: invokestatic  #535                // Method pointCopy:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
      14: aload_1
      15: areturn

  private static void pointCopy(org.bouncycastle.math.ec.rfc8032.Ed448$PointExt, org.bouncycastle.math.ec.rfc8032.Ed448$PointExt);
    Code:
       0: aload_0
       1: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
       4: iconst_0
       5: aload_1
       6: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
       9: iconst_0
      10: invokestatic  #488                // Method org/bouncycastle/math/ec/rfc7748/X448Field.copy:([II[II)V
      13: aload_0
      14: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      17: iconst_0
      18: aload_1
      19: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      22: iconst_0
      23: invokestatic  #488                // Method org/bouncycastle/math/ec/rfc7748/X448Field.copy:([II[II)V
      26: aload_0
      27: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
      30: iconst_0
      31: aload_1
      32: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
      35: iconst_0
      36: invokestatic  #488                // Method org/bouncycastle/math/ec/rfc7748/X448Field.copy:([II[II)V
      39: return

  private static void pointDouble(org.bouncycastle.math.ec.rfc8032.Ed448$PointExt);
    Code:
       0: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
       3: astore_1
       4: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
       7: astore_2
       8: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      11: astore_3
      12: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      15: astore        4
      17: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      20: astore        5
      22: invokestatic  #474                // Method org/bouncycastle/math/ec/rfc7748/X448Field.create:()[I
      25: astore        6
      27: aload_0
      28: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
      31: aload_0
      32: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      35: aload_1
      36: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
      39: aload_1
      40: aload_1
      41: invokestatic  #492                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqr:([I[I)V
      44: aload_0
      45: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
      48: aload_2
      49: invokestatic  #492                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqr:([I[I)V
      52: aload_0
      53: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      56: aload_3
      57: invokestatic  #492                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqr:([I[I)V
      60: aload_2
      61: aload_3
      62: aload         4
      64: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
      67: aload         4
      69: invokestatic  #481                // Method org/bouncycastle/math/ec/rfc7748/X448Field.carry:([I)V
      72: aload_0
      73: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
      76: aload         5
      78: invokestatic  #492                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sqr:([I[I)V
      81: aload         5
      83: aload         5
      85: aload         5
      87: invokestatic  #493                // Method org/bouncycastle/math/ec/rfc7748/X448Field.add:([I[I[I)V
      90: aload         5
      92: invokestatic  #481                // Method org/bouncycastle/math/ec/rfc7748/X448Field.carry:([I)V
      95: aload         4
      97: aload         5
      99: aload         6
     101: invokestatic  #495                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sub:([I[I[I)V
     104: aload_1
     105: aload         4
     107: aload_1
     108: invokestatic  #495                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sub:([I[I[I)V
     111: aload_2
     112: aload_3
     113: aload_2
     114: invokestatic  #495                // Method org/bouncycastle/math/ec/rfc7748/X448Field.sub:([I[I[I)V
     117: aload_1
     118: aload         6
     120: aload_0
     121: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     124: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     127: aload         4
     129: aload_2
     130: aload_0
     131: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
     134: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     137: aload         4
     139: aload         6
     141: aload_0
     142: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
     145: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     148: return

  private static void pointExtendXY(org.bouncycastle.math.ec.rfc8032.Ed448$PointExt);
    Code:
       0: aload_0
       1: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
       4: invokestatic  #483                // Method org/bouncycastle/math/ec/rfc7748/X448Field.one:([I)V
       7: return

  private static void pointLookup(int, int, org.bouncycastle.math.ec.rfc8032.Ed448$PointPrecomp);
    Code:
       0: iload_0
       1: bipush        16
       3: imul
       4: iconst_2
       5: imul
       6: bipush        16
       8: imul
       9: istore_3
      10: iconst_0
      11: istore        4
      13: iload         4
      15: bipush        16
      17: if_icmpge     71
      20: iload         4
      22: iload_1
      23: ixor
      24: iconst_1
      25: isub
      26: bipush        31
      28: ishr
      29: istore        5
      31: iload         5
      33: getstatic     #459                // Field precompBase:[I
      36: iload_3
      37: aload_2
      38: getfield      #465                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointPrecomp.x:[I
      41: iconst_0
      42: invokestatic  #477                // Method org/bouncycastle/math/ec/rfc7748/X448Field.cmov:(I[II[II)V
      45: iinc          3, 16
      48: iload         5
      50: getstatic     #459                // Field precompBase:[I
      53: iload_3
      54: aload_2
      55: getfield      #466                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointPrecomp.y:[I
      58: iconst_0
      59: invokestatic  #477                // Method org/bouncycastle/math/ec/rfc7748/X448Field.cmov:(I[II[II)V
      62: iinc          3, 16
      65: iinc          4, 1
      68: goto          13
      71: return

  private static void pointLookup(int[], int, int[], org.bouncycastle.math.ec.rfc8032.Ed448$PointExt);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #516                // Method getWindow4:([II)I
       5: istore        4
       7: iload         4
       9: iconst_3
      10: iushr
      11: iconst_1
      12: ixor
      13: istore        5
      15: iload         4
      17: iload         5
      19: ineg
      20: ixor
      21: bipush        7
      23: iand
      24: istore        6
      26: iconst_0
      27: istore        7
      29: iconst_0
      30: istore        8
      32: iload         7
      34: bipush        8
      36: if_icmpge     105
      39: iload         7
      41: iload         6
      43: ixor
      44: iconst_1
      45: isub
      46: bipush        31
      48: ishr
      49: istore        9
      51: iload         9
      53: aload_2
      54: iload         8
      56: aload_3
      57: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
      60: iconst_0
      61: invokestatic  #477                // Method org/bouncycastle/math/ec/rfc7748/X448Field.cmov:(I[II[II)V
      64: iinc          8, 16
      67: iload         9
      69: aload_2
      70: iload         8
      72: aload_3
      73: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      76: iconst_0
      77: invokestatic  #477                // Method org/bouncycastle/math/ec/rfc7748/X448Field.cmov:(I[II[II)V
      80: iinc          8, 16
      83: iload         9
      85: aload_2
      86: iload         8
      88: aload_3
      89: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
      92: iconst_0
      93: invokestatic  #477                // Method org/bouncycastle/math/ec/rfc7748/X448Field.cmov:(I[II[II)V
      96: iinc          8, 16
      99: iinc          7, 1
     102: goto          32
     105: iload         5
     107: aload_3
     108: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     111: invokestatic  #476                // Method org/bouncycastle/math/ec/rfc7748/X448Field.cnegate:(I[I)V
     114: return

  private static int[] pointPrecomp(org.bouncycastle.math.ec.rfc8032.Ed448$PointExt, int);
    Code:
       0: aload_0
       1: invokestatic  #532                // Method pointCopy:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;
       4: astore_2
       5: aload_2
       6: invokestatic  #532                // Method pointCopy:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;
       9: astore_3
      10: aload_3
      11: invokestatic  #523                // Method pointDouble:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
      14: iload_1
      15: iconst_3
      16: imul
      17: invokestatic  #475                // Method org/bouncycastle/math/ec/rfc7748/X448Field.createTable:(I)[I
      20: astore        4
      22: iconst_0
      23: istore        5
      25: iconst_0
      26: istore        6
      28: aload_2
      29: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
      32: iconst_0
      33: aload         4
      35: iload         5
      37: invokestatic  #488                // Method org/bouncycastle/math/ec/rfc7748/X448Field.copy:([II[II)V
      40: iinc          5, 16
      43: aload_2
      44: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      47: iconst_0
      48: aload         4
      50: iload         5
      52: invokestatic  #488                // Method org/bouncycastle/math/ec/rfc7748/X448Field.copy:([II[II)V
      55: iinc          5, 16
      58: aload_2
      59: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
      62: iconst_0
      63: aload         4
      65: iload         5
      67: invokestatic  #488                // Method org/bouncycastle/math/ec/rfc7748/X448Field.copy:([II[II)V
      70: iinc          5, 16
      73: iinc          6, 1
      76: iload         6
      78: iload_1
      79: if_icmpne     85
      82: goto          93
      85: aload_3
      86: aload_2
      87: invokestatic  #534                // Method pointAdd:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
      90: goto          28
      93: aload         4
      95: areturn

  private static org.bouncycastle.math.ec.rfc8032.Ed448$PointExt[] pointPrecompVar(org.bouncycastle.math.ec.rfc8032.Ed448$PointExt, int);
    Code:
       0: aload_0
       1: invokestatic  #532                // Method pointCopy:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;
       4: astore_2
       5: aload_2
       6: invokestatic  #523                // Method pointDouble:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
       9: iload_1
      10: anewarray     #328                // class org/bouncycastle/math/ec/rfc8032/Ed448$PointExt
      13: astore_3
      14: aload_3
      15: iconst_0
      16: aload_0
      17: invokestatic  #532                // Method pointCopy:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;
      20: aastore
      21: iconst_1
      22: istore        4
      24: iload         4
      26: iload_1
      27: if_icmpge     58
      30: aload_3
      31: iload         4
      33: aload_3
      34: iload         4
      36: iconst_1
      37: isub
      38: aaload
      39: invokestatic  #532                // Method pointCopy:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;
      42: aastore
      43: iconst_0
      44: aload_2
      45: aload_3
      46: iload         4
      48: aaload
      49: invokestatic  #536                // Method pointAddVar:(ZLorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
      52: iinc          4, 1
      55: goto          24
      58: aload_3
      59: areturn

  private static void pointSetNeutral(org.bouncycastle.math.ec.rfc8032.Ed448$PointExt);
    Code:
       0: aload_0
       1: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
       4: invokestatic  #485                // Method org/bouncycastle/math/ec/rfc7748/X448Field.zero:([I)V
       7: aload_0
       8: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      11: invokestatic  #483                // Method org/bouncycastle/math/ec/rfc7748/X448Field.one:([I)V
      14: aload_0
      15: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
      18: invokestatic  #483                // Method org/bouncycastle/math/ec/rfc7748/X448Field.one:([I)V
      21: return

  public static void precompute();
    Code:
       0: getstatic     #460                // Field precompLock:Ljava/lang/Object;
       3: dup
       4: astore_0
       5: monitorenter
       6: getstatic     #459                // Field precompBase:[I
       9: ifnull        15
      12: aload_0
      13: monitorexit
      14: return
      15: new           #328                // class org/bouncycastle/math/ec/rfc8032/Ed448$PointExt
      18: dup
      19: aconst_null
      20: invokespecial #539                // Method org/bouncycastle/math/ec/rfc8032/Ed448$PointExt."<init>":(Lorg/bouncycastle/math/ec/rfc8032/Ed448$1;)V
      23: astore_1
      24: getstatic     #455                // Field B_x:[I
      27: iconst_0
      28: aload_1
      29: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
      32: iconst_0
      33: invokestatic  #488                // Method org/bouncycastle/math/ec/rfc7748/X448Field.copy:([II[II)V
      36: getstatic     #456                // Field B_y:[I
      39: iconst_0
      40: aload_1
      41: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      44: iconst_0
      45: invokestatic  #488                // Method org/bouncycastle/math/ec/rfc7748/X448Field.copy:([II[II)V
      48: aload_1
      49: invokestatic  #524                // Method pointExtendXY:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
      52: aload_1
      53: bipush        32
      55: invokestatic  #533                // Method pointPrecompVar:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;I)[Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;
      58: putstatic     #461                // Field precompBaseTable:[Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;
      61: sipush        160
      64: invokestatic  #475                // Method org/bouncycastle/math/ec/rfc7748/X448Field.createTable:(I)[I
      67: putstatic     #459                // Field precompBase:[I
      70: iconst_0
      71: istore_2
      72: iconst_0
      73: istore_3
      74: iload_3
      75: iconst_5
      76: if_icmpge     364
      79: iconst_5
      80: anewarray     #328                // class org/bouncycastle/math/ec/rfc8032/Ed448$PointExt
      83: astore        4
      85: new           #328                // class org/bouncycastle/math/ec/rfc8032/Ed448$PointExt
      88: dup
      89: aconst_null
      90: invokespecial #539                // Method org/bouncycastle/math/ec/rfc8032/Ed448$PointExt."<init>":(Lorg/bouncycastle/math/ec/rfc8032/Ed448$1;)V
      93: astore        5
      95: aload         5
      97: invokestatic  #525                // Method pointSetNeutral:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
     100: iconst_0
     101: istore        6
     103: iload         6
     105: iconst_5
     106: if_icmpge     164
     109: iconst_1
     110: aload_1
     111: aload         5
     113: invokestatic  #536                // Method pointAddVar:(ZLorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
     116: aload_1
     117: invokestatic  #523                // Method pointDouble:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
     120: aload         4
     122: iload         6
     124: aload_1
     125: invokestatic  #532                // Method pointCopy:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;
     128: aastore
     129: iload_3
     130: iload         6
     132: iadd
     133: bipush        8
     135: if_icmpeq     158
     138: iconst_1
     139: istore        7
     141: iload         7
     143: bipush        18
     145: if_icmpge     158
     148: aload_1
     149: invokestatic  #523                // Method pointDouble:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
     152: iinc          7, 1
     155: goto          141
     158: iinc          6, 1
     161: goto          103
     164: bipush        16
     166: anewarray     #328                // class org/bouncycastle/math/ec/rfc8032/Ed448$PointExt
     169: astore        6
     171: iconst_0
     172: istore        7
     174: aload         6
     176: iload         7
     178: iinc          7, 1
     181: aload         5
     183: aastore
     184: iconst_0
     185: istore        8
     187: iload         8
     189: iconst_4
     190: if_icmpge     254
     193: iconst_1
     194: iload         8
     196: ishl
     197: istore        9
     199: iconst_0
     200: istore        10
     202: iload         10
     204: iload         9
     206: if_icmpge     248
     209: aload         6
     211: iload         7
     213: aload         6
     215: iload         7
     217: iload         9
     219: isub
     220: aaload
     221: invokestatic  #532                // Method pointCopy:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;
     224: aastore
     225: iconst_0
     226: aload         4
     228: iload         8
     230: aaload
     231: aload         6
     233: iload         7
     235: aaload
     236: invokestatic  #536                // Method pointAddVar:(ZLorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
     239: iinc          10, 1
     242: iinc          7, 1
     245: goto          202
     248: iinc          8, 1
     251: goto          187
     254: iconst_0
     255: istore        8
     257: iload         8
     259: bipush        16
     261: if_icmpge     358
     264: aload         6
     266: iload         8
     268: aaload
     269: astore        9
     271: aload         9
     273: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
     276: aload         9
     278: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
     281: invokestatic  #490                // Method org/bouncycastle/math/ec/rfc7748/X448Field.inv:([I[I)V
     284: aload         9
     286: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     289: aload         9
     291: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
     294: aload         9
     296: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     299: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     302: aload         9
     304: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
     307: aload         9
     309: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
     312: aload         9
     314: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
     317: invokestatic  #494                // Method org/bouncycastle/math/ec/rfc7748/X448Field.mul:([I[I[I)V
     320: aload         9
     322: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
     325: iconst_0
     326: getstatic     #459                // Field precompBase:[I
     329: iload_2
     330: invokestatic  #488                // Method org/bouncycastle/math/ec/rfc7748/X448Field.copy:([II[II)V
     333: iinc          2, 16
     336: aload         9
     338: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
     341: iconst_0
     342: getstatic     #459                // Field precompBase:[I
     345: iload_2
     346: invokestatic  #488                // Method org/bouncycastle/math/ec/rfc7748/X448Field.copy:([II[II)V
     349: iinc          2, 16
     352: iinc          8, 1
     355: goto          257
     358: iinc          3, 1
     361: goto          74
     364: aload_0
     365: monitorexit
     366: goto          376
     369: astore        11
     371: aload_0
     372: monitorexit
     373: aload         11
     375: athrow
     376: return
    Exception table:
       from    to  target type
           6    14   369   any
          15   366   369   any
         369   373   369   any

  private static void pruneScalar(byte[], int, byte[]);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: iconst_0
       4: bipush        56
       6: invokestatic  #471                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
       9: aload_2
      10: iconst_0
      11: dup2
      12: baload
      13: sipush        252
      16: iand
      17: i2b
      18: bastore
      19: aload_2
      20: bipush        55
      22: dup2
      23: baload
      24: sipush        128
      27: ior
      28: i2b
      29: bastore
      30: aload_2
      31: bipush        56
      33: iconst_0
      34: bastore
      35: return

  private static byte[] reduceScalar(byte[]);
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #507                // Method decode32:([BI)I
       5: i2l
       6: ldc2_w        #312                // long 4294967295l
       9: land
      10: lstore_1
      11: aload_0
      12: iconst_4
      13: invokestatic  #506                // Method decode24:([BI)I
      16: iconst_4
      17: ishl
      18: i2l
      19: ldc2_w        #312                // long 4294967295l
      22: land
      23: lstore_3
      24: aload_0
      25: bipush        7
      27: invokestatic  #507                // Method decode32:([BI)I
      30: i2l
      31: ldc2_w        #312                // long 4294967295l
      34: land
      35: lstore        5
      37: aload_0
      38: bipush        11
      40: invokestatic  #506                // Method decode24:([BI)I
      43: iconst_4
      44: ishl
      45: i2l
      46: ldc2_w        #312                // long 4294967295l
      49: land
      50: lstore        7
      52: aload_0
      53: bipush        14
      55: invokestatic  #507                // Method decode32:([BI)I
      58: i2l
      59: ldc2_w        #312                // long 4294967295l
      62: land
      63: lstore        9
      65: aload_0
      66: bipush        18
      68: invokestatic  #506                // Method decode24:([BI)I
      71: iconst_4
      72: ishl
      73: i2l
      74: ldc2_w        #312                // long 4294967295l
      77: land
      78: lstore        11
      80: aload_0
      81: bipush        21
      83: invokestatic  #507                // Method decode32:([BI)I
      86: i2l
      87: ldc2_w        #312                // long 4294967295l
      90: land
      91: lstore        13
      93: aload_0
      94: bipush        25
      96: invokestatic  #506                // Method decode24:([BI)I
      99: iconst_4
     100: ishl
     101: i2l
     102: ldc2_w        #312                // long 4294967295l
     105: land
     106: lstore        15
     108: aload_0
     109: bipush        28
     111: invokestatic  #507                // Method decode32:([BI)I
     114: i2l
     115: ldc2_w        #312                // long 4294967295l
     118: land
     119: lstore        17
     121: aload_0
     122: bipush        32
     124: invokestatic  #506                // Method decode24:([BI)I
     127: iconst_4
     128: ishl
     129: i2l
     130: ldc2_w        #312                // long 4294967295l
     133: land
     134: lstore        19
     136: aload_0
     137: bipush        35
     139: invokestatic  #507                // Method decode32:([BI)I
     142: i2l
     143: ldc2_w        #312                // long 4294967295l
     146: land
     147: lstore        21
     149: aload_0
     150: bipush        39
     152: invokestatic  #506                // Method decode24:([BI)I
     155: iconst_4
     156: ishl
     157: i2l
     158: ldc2_w        #312                // long 4294967295l
     161: land
     162: lstore        23
     164: aload_0
     165: bipush        42
     167: invokestatic  #507                // Method decode32:([BI)I
     170: i2l
     171: ldc2_w        #312                // long 4294967295l
     174: land
     175: lstore        25
     177: aload_0
     178: bipush        46
     180: invokestatic  #506                // Method decode24:([BI)I
     183: iconst_4
     184: ishl
     185: i2l
     186: ldc2_w        #312                // long 4294967295l
     189: land
     190: lstore        27
     192: aload_0
     193: bipush        49
     195: invokestatic  #507                // Method decode32:([BI)I
     198: i2l
     199: ldc2_w        #312                // long 4294967295l
     202: land
     203: lstore        29
     205: aload_0
     206: bipush        53
     208: invokestatic  #506                // Method decode24:([BI)I
     211: iconst_4
     212: ishl
     213: i2l
     214: ldc2_w        #312                // long 4294967295l
     217: land
     218: lstore        31
     220: aload_0
     221: bipush        56
     223: invokestatic  #507                // Method decode32:([BI)I
     226: i2l
     227: ldc2_w        #312                // long 4294967295l
     230: land
     231: lstore        33
     233: aload_0
     234: bipush        60
     236: invokestatic  #506                // Method decode24:([BI)I
     239: iconst_4
     240: ishl
     241: i2l
     242: ldc2_w        #312                // long 4294967295l
     245: land
     246: lstore        35
     248: aload_0
     249: bipush        63
     251: invokestatic  #507                // Method decode32:([BI)I
     254: i2l
     255: ldc2_w        #312                // long 4294967295l
     258: land
     259: lstore        37
     261: aload_0
     262: bipush        67
     264: invokestatic  #506                // Method decode24:([BI)I
     267: iconst_4
     268: ishl
     269: i2l
     270: ldc2_w        #312                // long 4294967295l
     273: land
     274: lstore        39
     276: aload_0
     277: bipush        70
     279: invokestatic  #507                // Method decode32:([BI)I
     282: i2l
     283: ldc2_w        #312                // long 4294967295l
     286: land
     287: lstore        41
     289: aload_0
     290: bipush        74
     292: invokestatic  #506                // Method decode24:([BI)I
     295: iconst_4
     296: ishl
     297: i2l
     298: ldc2_w        #312                // long 4294967295l
     301: land
     302: lstore        43
     304: aload_0
     305: bipush        77
     307: invokestatic  #507                // Method decode32:([BI)I
     310: i2l
     311: ldc2_w        #312                // long 4294967295l
     314: land
     315: lstore        45
     317: aload_0
     318: bipush        81
     320: invokestatic  #506                // Method decode24:([BI)I
     323: iconst_4
     324: ishl
     325: i2l
     326: ldc2_w        #312                // long 4294967295l
     329: land
     330: lstore        47
     332: aload_0
     333: bipush        84
     335: invokestatic  #507                // Method decode32:([BI)I
     338: i2l
     339: ldc2_w        #312                // long 4294967295l
     342: land
     343: lstore        49
     345: aload_0
     346: bipush        88
     348: invokestatic  #506                // Method decode24:([BI)I
     351: iconst_4
     352: ishl
     353: i2l
     354: ldc2_w        #312                // long 4294967295l
     357: land
     358: lstore        51
     360: aload_0
     361: bipush        91
     363: invokestatic  #507                // Method decode32:([BI)I
     366: i2l
     367: ldc2_w        #312                // long 4294967295l
     370: land
     371: lstore        53
     373: aload_0
     374: bipush        95
     376: invokestatic  #506                // Method decode24:([BI)I
     379: iconst_4
     380: ishl
     381: i2l
     382: ldc2_w        #312                // long 4294967295l
     385: land
     386: lstore        55
     388: aload_0
     389: bipush        98
     391: invokestatic  #507                // Method decode32:([BI)I
     394: i2l
     395: ldc2_w        #312                // long 4294967295l
     398: land
     399: lstore        57
     401: aload_0
     402: bipush        102
     404: invokestatic  #506                // Method decode24:([BI)I
     407: iconst_4
     408: ishl
     409: i2l
     410: ldc2_w        #312                // long 4294967295l
     413: land
     414: lstore        59
     416: aload_0
     417: bipush        105
     419: invokestatic  #507                // Method decode32:([BI)I
     422: i2l
     423: ldc2_w        #312                // long 4294967295l
     426: land
     427: lstore        61
     429: aload_0
     430: bipush        109
     432: invokestatic  #506                // Method decode24:([BI)I
     435: iconst_4
     436: ishl
     437: i2l
     438: ldc2_w        #312                // long 4294967295l
     441: land
     442: lstore        63
     444: aload_0
     445: bipush        112
     447: invokestatic  #505                // Method decode16:([BI)I
     450: i2l
     451: ldc2_w        #312                // long 4294967295l
     454: land
     455: lstore        65
     457: lload         33
     459: lload         65
     461: ldc2_w        #278                // long 43969588l
     464: lmul
     465: ladd
     466: lstore        33
     468: lload         35
     470: lload         65
     472: ldc2_w        #276                // long 30366549l
     475: lmul
     476: ladd
     477: lstore        35
     479: lload         37
     481: lload         65
     483: ldc2_w        #298                // long 163752818l
     486: lmul
     487: ladd
     488: lstore        37
     490: lload         39
     492: lload         65
     494: ldc2_w        #306                // long 258169998l
     497: lmul
     498: ladd
     499: lstore        39
     501: lload         41
     503: lload         65
     505: ldc2_w        #286                // long 96434764l
     508: lmul
     509: ladd
     510: lstore        41
     512: lload         43
     514: lload         65
     516: ldc2_w        #304                // long 227822194l
     519: lmul
     520: ladd
     521: lstore        43
     523: lload         45
     525: lload         65
     527: ldc2_w        #294                // long 149865618l
     530: lmul
     531: ladd
     532: lstore        45
     534: lload         47
     536: lload         65
     538: ldc2_w        #310                // long 550336261l
     541: lmul
     542: ladd
     543: lstore        47
     545: lload         63
     547: lload         61
     549: bipush        28
     551: lushr
     552: ladd
     553: lstore        63
     555: lload         61
     557: ldc2_w        #308                // long 268435455l
     560: land
     561: lstore        61
     563: lload         31
     565: lload         63
     567: ldc2_w        #278                // long 43969588l
     570: lmul
     571: ladd
     572: lstore        31
     574: lload         33
     576: lload         63
     578: ldc2_w        #276                // long 30366549l
     581: lmul
     582: ladd
     583: lstore        33
     585: lload         35
     587: lload         63
     589: ldc2_w        #298                // long 163752818l
     592: lmul
     593: ladd
     594: lstore        35
     596: lload         37
     598: lload         63
     600: ldc2_w        #306                // long 258169998l
     603: lmul
     604: ladd
     605: lstore        37
     607: lload         39
     609: lload         63
     611: ldc2_w        #286                // long 96434764l
     614: lmul
     615: ladd
     616: lstore        39
     618: lload         41
     620: lload         63
     622: ldc2_w        #304                // long 227822194l
     625: lmul
     626: ladd
     627: lstore        41
     629: lload         43
     631: lload         63
     633: ldc2_w        #294                // long 149865618l
     636: lmul
     637: ladd
     638: lstore        43
     640: lload         45
     642: lload         63
     644: ldc2_w        #310                // long 550336261l
     647: lmul
     648: ladd
     649: lstore        45
     651: lload         29
     653: lload         61
     655: ldc2_w        #278                // long 43969588l
     658: lmul
     659: ladd
     660: lstore        29
     662: lload         31
     664: lload         61
     666: ldc2_w        #276                // long 30366549l
     669: lmul
     670: ladd
     671: lstore        31
     673: lload         33
     675: lload         61
     677: ldc2_w        #298                // long 163752818l
     680: lmul
     681: ladd
     682: lstore        33
     684: lload         35
     686: lload         61
     688: ldc2_w        #306                // long 258169998l
     691: lmul
     692: ladd
     693: lstore        35
     695: lload         37
     697: lload         61
     699: ldc2_w        #286                // long 96434764l
     702: lmul
     703: ladd
     704: lstore        37
     706: lload         39
     708: lload         61
     710: ldc2_w        #304                // long 227822194l
     713: lmul
     714: ladd
     715: lstore        39
     717: lload         41
     719: lload         61
     721: ldc2_w        #294                // long 149865618l
     724: lmul
     725: ladd
     726: lstore        41
     728: lload         43
     730: lload         61
     732: ldc2_w        #310                // long 550336261l
     735: lmul
     736: ladd
     737: lstore        43
     739: lload         59
     741: lload         57
     743: bipush        28
     745: lushr
     746: ladd
     747: lstore        59
     749: lload         57
     751: ldc2_w        #308                // long 268435455l
     754: land
     755: lstore        57
     757: lload         27
     759: lload         59
     761: ldc2_w        #278                // long 43969588l
     764: lmul
     765: ladd
     766: lstore        27
     768: lload         29
     770: lload         59
     772: ldc2_w        #276                // long 30366549l
     775: lmul
     776: ladd
     777: lstore        29
     779: lload         31
     781: lload         59
     783: ldc2_w        #298                // long 163752818l
     786: lmul
     787: ladd
     788: lstore        31
     790: lload         33
     792: lload         59
     794: ldc2_w        #306                // long 258169998l
     797: lmul
     798: ladd
     799: lstore        33
     801: lload         35
     803: lload         59
     805: ldc2_w        #286                // long 96434764l
     808: lmul
     809: ladd
     810: lstore        35
     812: lload         37
     814: lload         59
     816: ldc2_w        #304                // long 227822194l
     819: lmul
     820: ladd
     821: lstore        37
     823: lload         39
     825: lload         59
     827: ldc2_w        #294                // long 149865618l
     830: lmul
     831: ladd
     832: lstore        39
     834: lload         41
     836: lload         59
     838: ldc2_w        #310                // long 550336261l
     841: lmul
     842: ladd
     843: lstore        41
     845: lload         25
     847: lload         57
     849: ldc2_w        #278                // long 43969588l
     852: lmul
     853: ladd
     854: lstore        25
     856: lload         27
     858: lload         57
     860: ldc2_w        #276                // long 30366549l
     863: lmul
     864: ladd
     865: lstore        27
     867: lload         29
     869: lload         57
     871: ldc2_w        #298                // long 163752818l
     874: lmul
     875: ladd
     876: lstore        29
     878: lload         31
     880: lload         57
     882: ldc2_w        #306                // long 258169998l
     885: lmul
     886: ladd
     887: lstore        31
     889: lload         33
     891: lload         57
     893: ldc2_w        #286                // long 96434764l
     896: lmul
     897: ladd
     898: lstore        33
     900: lload         35
     902: lload         57
     904: ldc2_w        #304                // long 227822194l
     907: lmul
     908: ladd
     909: lstore        35
     911: lload         37
     913: lload         57
     915: ldc2_w        #294                // long 149865618l
     918: lmul
     919: ladd
     920: lstore        37
     922: lload         39
     924: lload         57
     926: ldc2_w        #310                // long 550336261l
     929: lmul
     930: ladd
     931: lstore        39
     933: lload         55
     935: lload         53
     937: bipush        28
     939: lushr
     940: ladd
     941: lstore        55
     943: lload         53
     945: ldc2_w        #308                // long 268435455l
     948: land
     949: lstore        53
     951: lload         23
     953: lload         55
     955: ldc2_w        #278                // long 43969588l
     958: lmul
     959: ladd
     960: lstore        23
     962: lload         25
     964: lload         55
     966: ldc2_w        #276                // long 30366549l
     969: lmul
     970: ladd
     971: lstore        25
     973: lload         27
     975: lload         55
     977: ldc2_w        #298                // long 163752818l
     980: lmul
     981: ladd
     982: lstore        27
     984: lload         29
     986: lload         55
     988: ldc2_w        #306                // long 258169998l
     991: lmul
     992: ladd
     993: lstore        29
     995: lload         31
     997: lload         55
     999: ldc2_w        #286                // long 96434764l
    1002: lmul
    1003: ladd
    1004: lstore        31
    1006: lload         33
    1008: lload         55
    1010: ldc2_w        #304                // long 227822194l
    1013: lmul
    1014: ladd
    1015: lstore        33
    1017: lload         35
    1019: lload         55
    1021: ldc2_w        #294                // long 149865618l
    1024: lmul
    1025: ladd
    1026: lstore        35
    1028: lload         37
    1030: lload         55
    1032: ldc2_w        #310                // long 550336261l
    1035: lmul
    1036: ladd
    1037: lstore        37
    1039: lload         21
    1041: lload         53
    1043: ldc2_w        #278                // long 43969588l
    1046: lmul
    1047: ladd
    1048: lstore        21
    1050: lload         23
    1052: lload         53
    1054: ldc2_w        #276                // long 30366549l
    1057: lmul
    1058: ladd
    1059: lstore        23
    1061: lload         25
    1063: lload         53
    1065: ldc2_w        #298                // long 163752818l
    1068: lmul
    1069: ladd
    1070: lstore        25
    1072: lload         27
    1074: lload         53
    1076: ldc2_w        #306                // long 258169998l
    1079: lmul
    1080: ladd
    1081: lstore        27
    1083: lload         29
    1085: lload         53
    1087: ldc2_w        #286                // long 96434764l
    1090: lmul
    1091: ladd
    1092: lstore        29
    1094: lload         31
    1096: lload         53
    1098: ldc2_w        #304                // long 227822194l
    1101: lmul
    1102: ladd
    1103: lstore        31
    1105: lload         33
    1107: lload         53
    1109: ldc2_w        #294                // long 149865618l
    1112: lmul
    1113: ladd
    1114: lstore        33
    1116: lload         35
    1118: lload         53
    1120: ldc2_w        #310                // long 550336261l
    1123: lmul
    1124: ladd
    1125: lstore        35
    1127: lload         51
    1129: lload         49
    1131: bipush        28
    1133: lushr
    1134: ladd
    1135: lstore        51
    1137: lload         49
    1139: ldc2_w        #308                // long 268435455l
    1142: land
    1143: lstore        49
    1145: lload         19
    1147: lload         51
    1149: ldc2_w        #278                // long 43969588l
    1152: lmul
    1153: ladd
    1154: lstore        19
    1156: lload         21
    1158: lload         51
    1160: ldc2_w        #276                // long 30366549l
    1163: lmul
    1164: ladd
    1165: lstore        21
    1167: lload         23
    1169: lload         51
    1171: ldc2_w        #298                // long 163752818l
    1174: lmul
    1175: ladd
    1176: lstore        23
    1178: lload         25
    1180: lload         51
    1182: ldc2_w        #306                // long 258169998l
    1185: lmul
    1186: ladd
    1187: lstore        25
    1189: lload         27
    1191: lload         51
    1193: ldc2_w        #286                // long 96434764l
    1196: lmul
    1197: ladd
    1198: lstore        27
    1200: lload         29
    1202: lload         51
    1204: ldc2_w        #304                // long 227822194l
    1207: lmul
    1208: ladd
    1209: lstore        29
    1211: lload         31
    1213: lload         51
    1215: ldc2_w        #294                // long 149865618l
    1218: lmul
    1219: ladd
    1220: lstore        31
    1222: lload         33
    1224: lload         51
    1226: ldc2_w        #310                // long 550336261l
    1229: lmul
    1230: ladd
    1231: lstore        33
    1233: lload         43
    1235: lload         41
    1237: bipush        28
    1239: lushr
    1240: ladd
    1241: lstore        43
    1243: lload         41
    1245: ldc2_w        #308                // long 268435455l
    1248: land
    1249: lstore        41
    1251: lload         45
    1253: lload         43
    1255: bipush        28
    1257: lushr
    1258: ladd
    1259: lstore        45
    1261: lload         43
    1263: ldc2_w        #308                // long 268435455l
    1266: land
    1267: lstore        43
    1269: lload         47
    1271: lload         45
    1273: bipush        28
    1275: lushr
    1276: ladd
    1277: lstore        47
    1279: lload         45
    1281: ldc2_w        #308                // long 268435455l
    1284: land
    1285: lstore        45
    1287: lload         49
    1289: lload         47
    1291: bipush        28
    1293: lushr
    1294: ladd
    1295: lstore        49
    1297: lload         47
    1299: ldc2_w        #308                // long 268435455l
    1302: land
    1303: lstore        47
    1305: lload         17
    1307: lload         49
    1309: ldc2_w        #278                // long 43969588l
    1312: lmul
    1313: ladd
    1314: lstore        17
    1316: lload         19
    1318: lload         49
    1320: ldc2_w        #276                // long 30366549l
    1323: lmul
    1324: ladd
    1325: lstore        19
    1327: lload         21
    1329: lload         49
    1331: ldc2_w        #298                // long 163752818l
    1334: lmul
    1335: ladd
    1336: lstore        21
    1338: lload         23
    1340: lload         49
    1342: ldc2_w        #306                // long 258169998l
    1345: lmul
    1346: ladd
    1347: lstore        23
    1349: lload         25
    1351: lload         49
    1353: ldc2_w        #286                // long 96434764l
    1356: lmul
    1357: ladd
    1358: lstore        25
    1360: lload         27
    1362: lload         49
    1364: ldc2_w        #304                // long 227822194l
    1367: lmul
    1368: ladd
    1369: lstore        27
    1371: lload         29
    1373: lload         49
    1375: ldc2_w        #294                // long 149865618l
    1378: lmul
    1379: ladd
    1380: lstore        29
    1382: lload         31
    1384: lload         49
    1386: ldc2_w        #310                // long 550336261l
    1389: lmul
    1390: ladd
    1391: lstore        31
    1393: lload         15
    1395: lload         47
    1397: ldc2_w        #278                // long 43969588l
    1400: lmul
    1401: ladd
    1402: lstore        15
    1404: lload         17
    1406: lload         47
    1408: ldc2_w        #276                // long 30366549l
    1411: lmul
    1412: ladd
    1413: lstore        17
    1415: lload         19
    1417: lload         47
    1419: ldc2_w        #298                // long 163752818l
    1422: lmul
    1423: ladd
    1424: lstore        19
    1426: lload         21
    1428: lload         47
    1430: ldc2_w        #306                // long 258169998l
    1433: lmul
    1434: ladd
    1435: lstore        21
    1437: lload         23
    1439: lload         47
    1441: ldc2_w        #286                // long 96434764l
    1444: lmul
    1445: ladd
    1446: lstore        23
    1448: lload         25
    1450: lload         47
    1452: ldc2_w        #304                // long 227822194l
    1455: lmul
    1456: ladd
    1457: lstore        25
    1459: lload         27
    1461: lload         47
    1463: ldc2_w        #294                // long 149865618l
    1466: lmul
    1467: ladd
    1468: lstore        27
    1470: lload         29
    1472: lload         47
    1474: ldc2_w        #310                // long 550336261l
    1477: lmul
    1478: ladd
    1479: lstore        29
    1481: lload         13
    1483: lload         45
    1485: ldc2_w        #278                // long 43969588l
    1488: lmul
    1489: ladd
    1490: lstore        13
    1492: lload         15
    1494: lload         45
    1496: ldc2_w        #276                // long 30366549l
    1499: lmul
    1500: ladd
    1501: lstore        15
    1503: lload         17
    1505: lload         45
    1507: ldc2_w        #298                // long 163752818l
    1510: lmul
    1511: ladd
    1512: lstore        17
    1514: lload         19
    1516: lload         45
    1518: ldc2_w        #306                // long 258169998l
    1521: lmul
    1522: ladd
    1523: lstore        19
    1525: lload         21
    1527: lload         45
    1529: ldc2_w        #286                // long 96434764l
    1532: lmul
    1533: ladd
    1534: lstore        21
    1536: lload         23
    1538: lload         45
    1540: ldc2_w        #304                // long 227822194l
    1543: lmul
    1544: ladd
    1545: lstore        23
    1547: lload         25
    1549: lload         45
    1551: ldc2_w        #294                // long 149865618l
    1554: lmul
    1555: ladd
    1556: lstore        25
    1558: lload         27
    1560: lload         45
    1562: ldc2_w        #310                // long 550336261l
    1565: lmul
    1566: ladd
    1567: lstore        27
    1569: lload         37
    1571: lload         35
    1573: bipush        28
    1575: lushr
    1576: ladd
    1577: lstore        37
    1579: lload         35
    1581: ldc2_w        #308                // long 268435455l
    1584: land
    1585: lstore        35
    1587: lload         39
    1589: lload         37
    1591: bipush        28
    1593: lushr
    1594: ladd
    1595: lstore        39
    1597: lload         37
    1599: ldc2_w        #308                // long 268435455l
    1602: land
    1603: lstore        37
    1605: lload         41
    1607: lload         39
    1609: bipush        28
    1611: lushr
    1612: ladd
    1613: lstore        41
    1615: lload         39
    1617: ldc2_w        #308                // long 268435455l
    1620: land
    1621: lstore        39
    1623: lload         43
    1625: lload         41
    1627: bipush        28
    1629: lushr
    1630: ladd
    1631: lstore        43
    1633: lload         41
    1635: ldc2_w        #308                // long 268435455l
    1638: land
    1639: lstore        41
    1641: lload         11
    1643: lload         43
    1645: ldc2_w        #278                // long 43969588l
    1648: lmul
    1649: ladd
    1650: lstore        11
    1652: lload         13
    1654: lload         43
    1656: ldc2_w        #276                // long 30366549l
    1659: lmul
    1660: ladd
    1661: lstore        13
    1663: lload         15
    1665: lload         43
    1667: ldc2_w        #298                // long 163752818l
    1670: lmul
    1671: ladd
    1672: lstore        15
    1674: lload         17
    1676: lload         43
    1678: ldc2_w        #306                // long 258169998l
    1681: lmul
    1682: ladd
    1683: lstore        17
    1685: lload         19
    1687: lload         43
    1689: ldc2_w        #286                // long 96434764l
    1692: lmul
    1693: ladd
    1694: lstore        19
    1696: lload         21
    1698: lload         43
    1700: ldc2_w        #304                // long 227822194l
    1703: lmul
    1704: ladd
    1705: lstore        21
    1707: lload         23
    1709: lload         43
    1711: ldc2_w        #294                // long 149865618l
    1714: lmul
    1715: ladd
    1716: lstore        23
    1718: lload         25
    1720: lload         43
    1722: ldc2_w        #310                // long 550336261l
    1725: lmul
    1726: ladd
    1727: lstore        25
    1729: lload         9
    1731: lload         41
    1733: ldc2_w        #278                // long 43969588l
    1736: lmul
    1737: ladd
    1738: lstore        9
    1740: lload         11
    1742: lload         41
    1744: ldc2_w        #276                // long 30366549l
    1747: lmul
    1748: ladd
    1749: lstore        11
    1751: lload         13
    1753: lload         41
    1755: ldc2_w        #298                // long 163752818l
    1758: lmul
    1759: ladd
    1760: lstore        13
    1762: lload         15
    1764: lload         41
    1766: ldc2_w        #306                // long 258169998l
    1769: lmul
    1770: ladd
    1771: lstore        15
    1773: lload         17
    1775: lload         41
    1777: ldc2_w        #286                // long 96434764l
    1780: lmul
    1781: ladd
    1782: lstore        17
    1784: lload         19
    1786: lload         41
    1788: ldc2_w        #304                // long 227822194l
    1791: lmul
    1792: ladd
    1793: lstore        19
    1795: lload         21
    1797: lload         41
    1799: ldc2_w        #294                // long 149865618l
    1802: lmul
    1803: ladd
    1804: lstore        21
    1806: lload         23
    1808: lload         41
    1810: ldc2_w        #310                // long 550336261l
    1813: lmul
    1814: ladd
    1815: lstore        23
    1817: lload         7
    1819: lload         39
    1821: ldc2_w        #278                // long 43969588l
    1824: lmul
    1825: ladd
    1826: lstore        7
    1828: lload         9
    1830: lload         39
    1832: ldc2_w        #276                // long 30366549l
    1835: lmul
    1836: ladd
    1837: lstore        9
    1839: lload         11
    1841: lload         39
    1843: ldc2_w        #298                // long 163752818l
    1846: lmul
    1847: ladd
    1848: lstore        11
    1850: lload         13
    1852: lload         39
    1854: ldc2_w        #306                // long 258169998l
    1857: lmul
    1858: ladd
    1859: lstore        13
    1861: lload         15
    1863: lload         39
    1865: ldc2_w        #286                // long 96434764l
    1868: lmul
    1869: ladd
    1870: lstore        15
    1872: lload         17
    1874: lload         39
    1876: ldc2_w        #304                // long 227822194l
    1879: lmul
    1880: ladd
    1881: lstore        17
    1883: lload         19
    1885: lload         39
    1887: ldc2_w        #294                // long 149865618l
    1890: lmul
    1891: ladd
    1892: lstore        19
    1894: lload         21
    1896: lload         39
    1898: ldc2_w        #310                // long 550336261l
    1901: lmul
    1902: ladd
    1903: lstore        21
    1905: lload         31
    1907: lload         29
    1909: bipush        28
    1911: lushr
    1912: ladd
    1913: lstore        31
    1915: lload         29
    1917: ldc2_w        #308                // long 268435455l
    1920: land
    1921: lstore        29
    1923: lload         33
    1925: lload         31
    1927: bipush        28
    1929: lushr
    1930: ladd
    1931: lstore        33
    1933: lload         31
    1935: ldc2_w        #308                // long 268435455l
    1938: land
    1939: lstore        31
    1941: lload         35
    1943: lload         33
    1945: bipush        28
    1947: lushr
    1948: ladd
    1949: lstore        35
    1951: lload         33
    1953: ldc2_w        #308                // long 268435455l
    1956: land
    1957: lstore        33
    1959: lload         37
    1961: lload         35
    1963: bipush        28
    1965: lushr
    1966: ladd
    1967: lstore        37
    1969: lload         35
    1971: ldc2_w        #308                // long 268435455l
    1974: land
    1975: lstore        35
    1977: lload         5
    1979: lload         37
    1981: ldc2_w        #278                // long 43969588l
    1984: lmul
    1985: ladd
    1986: lstore        5
    1988: lload         7
    1990: lload         37
    1992: ldc2_w        #276                // long 30366549l
    1995: lmul
    1996: ladd
    1997: lstore        7
    1999: lload         9
    2001: lload         37
    2003: ldc2_w        #298                // long 163752818l
    2006: lmul
    2007: ladd
    2008: lstore        9
    2010: lload         11
    2012: lload         37
    2014: ldc2_w        #306                // long 258169998l
    2017: lmul
    2018: ladd
    2019: lstore        11
    2021: lload         13
    2023: lload         37
    2025: ldc2_w        #286                // long 96434764l
    2028: lmul
    2029: ladd
    2030: lstore        13
    2032: lload         15
    2034: lload         37
    2036: ldc2_w        #304                // long 227822194l
    2039: lmul
    2040: ladd
    2041: lstore        15
    2043: lload         17
    2045: lload         37
    2047: ldc2_w        #294                // long 149865618l
    2050: lmul
    2051: ladd
    2052: lstore        17
    2054: lload         19
    2056: lload         37
    2058: ldc2_w        #310                // long 550336261l
    2061: lmul
    2062: ladd
    2063: lstore        19
    2065: lload_3
    2066: lload         35
    2068: ldc2_w        #278                // long 43969588l
    2071: lmul
    2072: ladd
    2073: lstore_3
    2074: lload         5
    2076: lload         35
    2078: ldc2_w        #276                // long 30366549l
    2081: lmul
    2082: ladd
    2083: lstore        5
    2085: lload         7
    2087: lload         35
    2089: ldc2_w        #298                // long 163752818l
    2092: lmul
    2093: ladd
    2094: lstore        7
    2096: lload         9
    2098: lload         35
    2100: ldc2_w        #306                // long 258169998l
    2103: lmul
    2104: ladd
    2105: lstore        9
    2107: lload         11
    2109: lload         35
    2111: ldc2_w        #286                // long 96434764l
    2114: lmul
    2115: ladd
    2116: lstore        11
    2118: lload         13
    2120: lload         35
    2122: ldc2_w        #304                // long 227822194l
    2125: lmul
    2126: ladd
    2127: lstore        13
    2129: lload         15
    2131: lload         35
    2133: ldc2_w        #294                // long 149865618l
    2136: lmul
    2137: ladd
    2138: lstore        15
    2140: lload         17
    2142: lload         35
    2144: ldc2_w        #310                // long 550336261l
    2147: lmul
    2148: ladd
    2149: lstore        17
    2151: lload         33
    2153: ldc2_w        #274                // long 4l
    2156: lmul
    2157: lstore        33
    2159: lload         33
    2161: lload         31
    2163: bipush        26
    2165: lushr
    2166: ladd
    2167: lstore        33
    2169: lload         31
    2171: ldc2_w        #282                // long 67108863l
    2174: land
    2175: lstore        31
    2177: lload         33
    2179: lconst_1
    2180: ladd
    2181: lstore        33
    2183: lload_1
    2184: lload         33
    2186: ldc2_w        #284                // long 78101261l
    2189: lmul
    2190: ladd
    2191: lstore_1
    2192: lload_3
    2193: lload         33
    2195: ldc2_w        #292                // long 141809365l
    2198: lmul
    2199: ladd
    2200: lstore_3
    2201: lload         5
    2203: lload         33
    2205: ldc2_w        #300                // long 175155932l
    2208: lmul
    2209: ladd
    2210: lstore        5
    2212: lload         7
    2214: lload         33
    2216: ldc2_w        #280                // long 64542499l
    2219: lmul
    2220: ladd
    2221: lstore        7
    2223: lload         9
    2225: lload         33
    2227: ldc2_w        #296                // long 158326419l
    2230: lmul
    2231: ladd
    2232: lstore        9
    2234: lload         11
    2236: lload         33
    2238: ldc2_w        #302                // long 191173276l
    2241: lmul
    2242: ladd
    2243: lstore        11
    2245: lload         13
    2247: lload         33
    2249: ldc2_w        #288                // long 104575268l
    2252: lmul
    2253: ladd
    2254: lstore        13
    2256: lload         15
    2258: lload         33
    2260: ldc2_w        #290                // long 137584065l
    2263: lmul
    2264: ladd
    2265: lstore        15
    2267: lload_3
    2268: lload_1
    2269: bipush        28
    2271: lushr
    2272: ladd
    2273: lstore_3
    2274: lload_1
    2275: ldc2_w        #308                // long 268435455l
    2278: land
    2279: lstore_1
    2280: lload         5
    2282: lload_3
    2283: bipush        28
    2285: lushr
    2286: ladd
    2287: lstore        5
    2289: lload_3
    2290: ldc2_w        #308                // long 268435455l
    2293: land
    2294: lstore_3
    2295: lload         7
    2297: lload         5
    2299: bipush        28
    2301: lushr
    2302: ladd
    2303: lstore        7
    2305: lload         5
    2307: ldc2_w        #308                // long 268435455l
    2310: land
    2311: lstore        5
    2313: lload         9
    2315: lload         7
    2317: bipush        28
    2319: lushr
    2320: ladd
    2321: lstore        9
    2323: lload         7
    2325: ldc2_w        #308                // long 268435455l
    2328: land
    2329: lstore        7
    2331: lload         11
    2333: lload         9
    2335: bipush        28
    2337: lushr
    2338: ladd
    2339: lstore        11
    2341: lload         9
    2343: ldc2_w        #308                // long 268435455l
    2346: land
    2347: lstore        9
    2349: lload         13
    2351: lload         11
    2353: bipush        28
    2355: lushr
    2356: ladd
    2357: lstore        13
    2359: lload         11
    2361: ldc2_w        #308                // long 268435455l
    2364: land
    2365: lstore        11
    2367: lload         15
    2369: lload         13
    2371: bipush        28
    2373: lushr
    2374: ladd
    2375: lstore        15
    2377: lload         13
    2379: ldc2_w        #308                // long 268435455l
    2382: land
    2383: lstore        13
    2385: lload         17
    2387: lload         15
    2389: bipush        28
    2391: lushr
    2392: ladd
    2393: lstore        17
    2395: lload         15
    2397: ldc2_w        #308                // long 268435455l
    2400: land
    2401: lstore        15
    2403: lload         19
    2405: lload         17
    2407: bipush        28
    2409: lushr
    2410: ladd
    2411: lstore        19
    2413: lload         17
    2415: ldc2_w        #308                // long 268435455l
    2418: land
    2419: lstore        17
    2421: lload         21
    2423: lload         19
    2425: bipush        28
    2427: lushr
    2428: ladd
    2429: lstore        21
    2431: lload         19
    2433: ldc2_w        #308                // long 268435455l
    2436: land
    2437: lstore        19
    2439: lload         23
    2441: lload         21
    2443: bipush        28
    2445: lushr
    2446: ladd
    2447: lstore        23
    2449: lload         21
    2451: ldc2_w        #308                // long 268435455l
    2454: land
    2455: lstore        21
    2457: lload         25
    2459: lload         23
    2461: bipush        28
    2463: lushr
    2464: ladd
    2465: lstore        25
    2467: lload         23
    2469: ldc2_w        #308                // long 268435455l
    2472: land
    2473: lstore        23
    2475: lload         27
    2477: lload         25
    2479: bipush        28
    2481: lushr
    2482: ladd
    2483: lstore        27
    2485: lload         25
    2487: ldc2_w        #308                // long 268435455l
    2490: land
    2491: lstore        25
    2493: lload         29
    2495: lload         27
    2497: bipush        28
    2499: lushr
    2500: ladd
    2501: lstore        29
    2503: lload         27
    2505: ldc2_w        #308                // long 268435455l
    2508: land
    2509: lstore        27
    2511: lload         31
    2513: lload         29
    2515: bipush        28
    2517: lushr
    2518: ladd
    2519: lstore        31
    2521: lload         29
    2523: ldc2_w        #308                // long 268435455l
    2526: land
    2527: lstore        29
    2529: lload         31
    2531: bipush        26
    2533: lushr
    2534: lstore        33
    2536: lload         31
    2538: ldc2_w        #282                // long 67108863l
    2541: land
    2542: lstore        31
    2544: lload         33
    2546: lconst_1
    2547: lsub
    2548: lstore        33
    2550: lload_1
    2551: lload         33
    2553: ldc2_w        #284                // long 78101261l
    2556: land
    2557: lsub
    2558: lstore_1
    2559: lload_3
    2560: lload         33
    2562: ldc2_w        #292                // long 141809365l
    2565: land
    2566: lsub
    2567: lstore_3
    2568: lload         5
    2570: lload         33
    2572: ldc2_w        #300                // long 175155932l
    2575: land
    2576: lsub
    2577: lstore        5
    2579: lload         7
    2581: lload         33
    2583: ldc2_w        #280                // long 64542499l
    2586: land
    2587: lsub
    2588: lstore        7
    2590: lload         9
    2592: lload         33
    2594: ldc2_w        #296                // long 158326419l
    2597: land
    2598: lsub
    2599: lstore        9
    2601: lload         11
    2603: lload         33
    2605: ldc2_w        #302                // long 191173276l
    2608: land
    2609: lsub
    2610: lstore        11
    2612: lload         13
    2614: lload         33
    2616: ldc2_w        #288                // long 104575268l
    2619: land
    2620: lsub
    2621: lstore        13
    2623: lload         15
    2625: lload         33
    2627: ldc2_w        #290                // long 137584065l
    2630: land
    2631: lsub
    2632: lstore        15
    2634: lload_3
    2635: lload_1
    2636: bipush        28
    2638: lshr
    2639: ladd
    2640: lstore_3
    2641: lload_1
    2642: ldc2_w        #308                // long 268435455l
    2645: land
    2646: lstore_1
    2647: lload         5
    2649: lload_3
    2650: bipush        28
    2652: lshr
    2653: ladd
    2654: lstore        5
    2656: lload_3
    2657: ldc2_w        #308                // long 268435455l
    2660: land
    2661: lstore_3
    2662: lload         7
    2664: lload         5
    2666: bipush        28
    2668: lshr
    2669: ladd
    2670: lstore        7
    2672: lload         5
    2674: ldc2_w        #308                // long 268435455l
    2677: land
    2678: lstore        5
    2680: lload         9
    2682: lload         7
    2684: bipush        28
    2686: lshr
    2687: ladd
    2688: lstore        9
    2690: lload         7
    2692: ldc2_w        #308                // long 268435455l
    2695: land
    2696: lstore        7
    2698: lload         11
    2700: lload         9
    2702: bipush        28
    2704: lshr
    2705: ladd
    2706: lstore        11
    2708: lload         9
    2710: ldc2_w        #308                // long 268435455l
    2713: land
    2714: lstore        9
    2716: lload         13
    2718: lload         11
    2720: bipush        28
    2722: lshr
    2723: ladd
    2724: lstore        13
    2726: lload         11
    2728: ldc2_w        #308                // long 268435455l
    2731: land
    2732: lstore        11
    2734: lload         15
    2736: lload         13
    2738: bipush        28
    2740: lshr
    2741: ladd
    2742: lstore        15
    2744: lload         13
    2746: ldc2_w        #308                // long 268435455l
    2749: land
    2750: lstore        13
    2752: lload         17
    2754: lload         15
    2756: bipush        28
    2758: lshr
    2759: ladd
    2760: lstore        17
    2762: lload         15
    2764: ldc2_w        #308                // long 268435455l
    2767: land
    2768: lstore        15
    2770: lload         19
    2772: lload         17
    2774: bipush        28
    2776: lshr
    2777: ladd
    2778: lstore        19
    2780: lload         17
    2782: ldc2_w        #308                // long 268435455l
    2785: land
    2786: lstore        17
    2788: lload         21
    2790: lload         19
    2792: bipush        28
    2794: lshr
    2795: ladd
    2796: lstore        21
    2798: lload         19
    2800: ldc2_w        #308                // long 268435455l
    2803: land
    2804: lstore        19
    2806: lload         23
    2808: lload         21
    2810: bipush        28
    2812: lshr
    2813: ladd
    2814: lstore        23
    2816: lload         21
    2818: ldc2_w        #308                // long 268435455l
    2821: land
    2822: lstore        21
    2824: lload         25
    2826: lload         23
    2828: bipush        28
    2830: lshr
    2831: ladd
    2832: lstore        25
    2834: lload         23
    2836: ldc2_w        #308                // long 268435455l
    2839: land
    2840: lstore        23
    2842: lload         27
    2844: lload         25
    2846: bipush        28
    2848: lshr
    2849: ladd
    2850: lstore        27
    2852: lload         25
    2854: ldc2_w        #308                // long 268435455l
    2857: land
    2858: lstore        25
    2860: lload         29
    2862: lload         27
    2864: bipush        28
    2866: lshr
    2867: ladd
    2868: lstore        29
    2870: lload         27
    2872: ldc2_w        #308                // long 268435455l
    2875: land
    2876: lstore        27
    2878: lload         31
    2880: lload         29
    2882: bipush        28
    2884: lshr
    2885: ladd
    2886: lstore        31
    2888: lload         29
    2890: ldc2_w        #308                // long 268435455l
    2893: land
    2894: lstore        29
    2896: bipush        57
    2898: newarray       byte
    2900: astore        67
    2902: lload_1
    2903: lload_3
    2904: bipush        28
    2906: lshl
    2907: lor
    2908: aload         67
    2910: iconst_0
    2911: invokestatic  #500                // Method encode56:(J[BI)V
    2914: lload         5
    2916: lload         7
    2918: bipush        28
    2920: lshl
    2921: lor
    2922: aload         67
    2924: bipush        7
    2926: invokestatic  #500                // Method encode56:(J[BI)V
    2929: lload         9
    2931: lload         11
    2933: bipush        28
    2935: lshl
    2936: lor
    2937: aload         67
    2939: bipush        14
    2941: invokestatic  #500                // Method encode56:(J[BI)V
    2944: lload         13
    2946: lload         15
    2948: bipush        28
    2950: lshl
    2951: lor
    2952: aload         67
    2954: bipush        21
    2956: invokestatic  #500                // Method encode56:(J[BI)V
    2959: lload         17
    2961: lload         19
    2963: bipush        28
    2965: lshl
    2966: lor
    2967: aload         67
    2969: bipush        28
    2971: invokestatic  #500                // Method encode56:(J[BI)V
    2974: lload         21
    2976: lload         23
    2978: bipush        28
    2980: lshl
    2981: lor
    2982: aload         67
    2984: bipush        35
    2986: invokestatic  #500                // Method encode56:(J[BI)V
    2989: lload         25
    2991: lload         27
    2993: bipush        28
    2995: lshl
    2996: lor
    2997: aload         67
    2999: bipush        42
    3001: invokestatic  #500                // Method encode56:(J[BI)V
    3004: lload         29
    3006: lload         31
    3008: bipush        28
    3010: lshl
    3011: lor
    3012: aload         67
    3014: bipush        49
    3016: invokestatic  #500                // Method encode56:(J[BI)V
    3019: aload         67
    3021: areturn

  private static void scalarMult(byte[], org.bouncycastle.math.ec.rfc8032.Ed448$PointExt, org.bouncycastle.math.ec.rfc8032.Ed448$PointExt);
    Code:
       0: invokestatic  #497                // Method precompute:()V
       3: bipush        14
       5: newarray       int
       7: astore_3
       8: aload_0
       9: iconst_0
      10: aload_3
      11: invokestatic  #512                // Method decodeScalar:([BI[I)V
      14: bipush        14
      16: aload_3
      17: iconst_2
      18: iconst_0
      19: invokestatic  #543                // Method org/bouncycastle/math/raw/Nat.shiftDownBits:(I[III)I
      22: pop
      23: bipush        14
      25: aload_3
      26: iconst_0
      27: iaload
      28: iconst_m1
      29: ixor
      30: iconst_1
      31: iand
      32: aload_3
      33: getstatic     #457                // Field L:[I
      36: aload_3
      37: invokestatic  #541                // Method org/bouncycastle/math/raw/Nat.cadd:(II[I[I[I)I
      40: pop
      41: bipush        14
      43: aload_3
      44: iconst_1
      45: invokestatic  #542                // Method org/bouncycastle/math/raw/Nat.shiftDownBit:(I[II)I
      48: pop
      49: aload_1
      50: bipush        8
      52: invokestatic  #526                // Method pointPrecomp:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;I)[I
      55: astore        4
      57: aload_3
      58: bipush        111
      60: aload         4
      62: aload_2
      63: invokestatic  #530                // Method pointLookup:([II[ILorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
      66: new           #328                // class org/bouncycastle/math/ec/rfc8032/Ed448$PointExt
      69: dup
      70: aconst_null
      71: invokespecial #539                // Method org/bouncycastle/math/ec/rfc8032/Ed448$PointExt."<init>":(Lorg/bouncycastle/math/ec/rfc8032/Ed448$1;)V
      74: astore        5
      76: bipush        110
      78: istore        6
      80: iload         6
      82: iflt          126
      85: iconst_0
      86: istore        7
      88: iload         7
      90: iconst_4
      91: if_icmpge     104
      94: aload_2
      95: invokestatic  #523                // Method pointDouble:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
      98: iinc          7, 1
     101: goto          88
     104: aload_3
     105: iload         6
     107: aload         4
     109: aload         5
     111: invokestatic  #530                // Method pointLookup:([II[ILorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
     114: aload         5
     116: aload_2
     117: invokestatic  #534                // Method pointAdd:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
     120: iinc          6, -1
     123: goto          80
     126: iconst_0
     127: istore        6
     129: iload         6
     131: iconst_2
     132: if_icmpge     145
     135: aload_2
     136: invokestatic  #523                // Method pointDouble:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
     139: iinc          6, 1
     142: goto          129
     145: return

  private static void scalarMultBase(byte[], org.bouncycastle.math.ec.rfc8032.Ed448$PointExt);
    Code:
       0: invokestatic  #497                // Method precompute:()V
       3: aload_1
       4: invokestatic  #525                // Method pointSetNeutral:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
       7: bipush        15
       9: newarray       int
      11: astore_2
      12: aload_0
      13: iconst_0
      14: aload_2
      15: invokestatic  #512                // Method decodeScalar:([BI[I)V
      18: aload_2
      19: bipush        14
      21: iconst_4
      22: bipush        14
      24: aload_2
      25: iconst_0
      26: iaload
      27: iconst_m1
      28: ixor
      29: iconst_1
      30: iand
      31: aload_2
      32: getstatic     #457                // Field L:[I
      35: aload_2
      36: invokestatic  #541                // Method org/bouncycastle/math/raw/Nat.cadd:(II[I[I[I)I
      39: iadd
      40: iastore
      41: aload_2
      42: arraylength
      43: aload_2
      44: iconst_0
      45: invokestatic  #542                // Method org/bouncycastle/math/raw/Nat.shiftDownBit:(I[II)I
      48: pop
      49: new           #329                // class org/bouncycastle/math/ec/rfc8032/Ed448$PointPrecomp
      52: dup
      53: aconst_null
      54: invokespecial #540                // Method org/bouncycastle/math/ec/rfc8032/Ed448$PointPrecomp."<init>":(Lorg/bouncycastle/math/ec/rfc8032/Ed448$1;)V
      57: astore_3
      58: bipush        17
      60: istore        4
      62: iload         4
      64: istore        5
      66: iconst_0
      67: istore        6
      69: iload         6
      71: iconst_5
      72: if_icmpge     178
      75: iconst_0
      76: istore        7
      78: iconst_0
      79: istore        8
      81: iload         8
      83: iconst_5
      84: if_icmpge     131
      87: aload_2
      88: iload         5
      90: iconst_5
      91: iushr
      92: iaload
      93: iload         5
      95: bipush        31
      97: iand
      98: iushr
      99: istore        9
     101: iload         7
     103: iconst_1
     104: iload         8
     106: ishl
     107: iconst_m1
     108: ixor
     109: iand
     110: istore        7
     112: iload         7
     114: iload         9
     116: iload         8
     118: ishl
     119: ixor
     120: istore        7
     122: iinc          5, 18
     125: iinc          8, 1
     128: goto          81
     131: iload         7
     133: iconst_4
     134: iushr
     135: iconst_1
     136: iand
     137: istore        8
     139: iload         7
     141: iload         8
     143: ineg
     144: ixor
     145: bipush        15
     147: iand
     148: istore        9
     150: iload         6
     152: iload         9
     154: aload_3
     155: invokestatic  #531                // Method pointLookup:(IILorg/bouncycastle/math/ec/rfc8032/Ed448$PointPrecomp;)V
     158: iload         8
     160: aload_3
     161: getfield      #465                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointPrecomp.x:[I
     164: invokestatic  #476                // Method org/bouncycastle/math/ec/rfc7748/X448Field.cnegate:(I[I)V
     167: aload_3
     168: aload_1
     169: invokestatic  #538                // Method pointAddPrecomp:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointPrecomp;Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
     172: iinc          6, 1
     175: goto          69
     178: iinc          4, -1
     181: iload         4
     183: ifge          189
     186: goto          196
     189: aload_1
     190: invokestatic  #523                // Method pointDouble:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
     193: goto          62
     196: return

  private static void scalarMultBaseEncoded(byte[], byte[], int);
    Code:
       0: new           #328                // class org/bouncycastle/math/ec/rfc8032/Ed448$PointExt
       3: dup
       4: aconst_null
       5: invokespecial #539                // Method org/bouncycastle/math/ec/rfc8032/Ed448$PointExt."<init>":(Lorg/bouncycastle/math/ec/rfc8032/Ed448$1;)V
       8: astore_3
       9: aload_0
      10: aload_3
      11: invokestatic  #529                // Method scalarMultBase:([BLorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
      14: iconst_0
      15: aload_3
      16: aload_1
      17: iload_2
      18: invokestatic  #527                // Method encodePoint:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;[BI)I
      21: if_icmpne     32
      24: new           #315                // class java/lang/IllegalStateException
      27: dup
      28: invokespecial #468                // Method java/lang/IllegalStateException."<init>":()V
      31: athrow
      32: return

  public static void scalarMultBaseXY(org.bouncycastle.math.ec.rfc7748.X448$Friend, byte[], int, int[], int[]);
    Code:
       0: aconst_null
       1: aload_0
       2: if_acmpne     15
       5: new           #316                // class java/lang/NullPointerException
       8: dup
       9: ldc           #43                 // String This method is only for use by X448
      11: invokespecial #469                // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      14: athrow
      15: bipush        57
      17: newarray       byte
      19: astore        5
      21: aload_1
      22: iload_2
      23: aload         5
      25: invokestatic  #508                // Method pruneScalar:([BI[B)V
      28: new           #328                // class org/bouncycastle/math/ec/rfc8032/Ed448$PointExt
      31: dup
      32: aconst_null
      33: invokespecial #539                // Method org/bouncycastle/math/ec/rfc8032/Ed448$PointExt."<init>":(Lorg/bouncycastle/math/ec/rfc8032/Ed448$1;)V
      36: astore        6
      38: aload         5
      40: aload         6
      42: invokestatic  #529                // Method scalarMultBase:([BLorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
      45: iconst_0
      46: aload         6
      48: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
      51: aload         6
      53: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      56: aload         6
      58: getfield      #464                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.z:[I
      61: invokestatic  #519                // Method checkPoint:([I[I[I)I
      64: if_icmpne     75
      67: new           #315                // class java/lang/IllegalStateException
      70: dup
      71: invokespecial #468                // Method java/lang/IllegalStateException."<init>":()V
      74: athrow
      75: aload         6
      77: getfield      #462                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.x:[I
      80: iconst_0
      81: aload_3
      82: iconst_0
      83: invokestatic  #488                // Method org/bouncycastle/math/ec/rfc7748/X448Field.copy:([II[II)V
      86: aload         6
      88: getfield      #463                // Field org/bouncycastle/math/ec/rfc8032/Ed448$PointExt.y:[I
      91: iconst_0
      92: aload         4
      94: iconst_0
      95: invokestatic  #488                // Method org/bouncycastle/math/ec/rfc7748/X448Field.copy:([II[II)V
      98: return

  private static void scalarMultStrausVar(int[], int[], org.bouncycastle.math.ec.rfc8032.Ed448$PointExt, org.bouncycastle.math.ec.rfc8032.Ed448$PointExt);
    Code:
       0: invokestatic  #497                // Method precompute:()V
       3: aload_0
       4: bipush        7
       6: invokestatic  #517                // Method getWNAF:([II)[B
       9: astore        5
      11: aload_1
      12: iconst_5
      13: invokestatic  #517                // Method getWNAF:([II)[B
      16: astore        6
      18: aload_2
      19: bipush        8
      21: invokestatic  #533                // Method pointPrecompVar:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;I)[Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;
      24: astore        7
      26: aload_3
      27: invokestatic  #525                // Method pointSetNeutral:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
      30: sipush        446
      33: istore        8
      35: aload         5
      37: iload         8
      39: baload
      40: istore        9
      42: iload         9
      44: ifeq          83
      47: iload         9
      49: bipush        31
      51: ishr
      52: istore        10
      54: iload         9
      56: iload         10
      58: ixor
      59: iconst_1
      60: iushr
      61: istore        11
      63: iload         10
      65: ifeq          72
      68: iconst_1
      69: goto          73
      72: iconst_0
      73: getstatic     #461                // Field precompBaseTable:[Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;
      76: iload         11
      78: aaload
      79: aload_3
      80: invokestatic  #536                // Method pointAddVar:(ZLorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
      83: aload         6
      85: iload         8
      87: baload
      88: istore        10
      90: iload         10
      92: ifeq          130
      95: iload         10
      97: bipush        31
      99: ishr
     100: istore        11
     102: iload         10
     104: iload         11
     106: ixor
     107: iconst_1
     108: iushr
     109: istore        12
     111: iload         11
     113: ifeq          120
     116: iconst_1
     117: goto          121
     120: iconst_0
     121: aload         7
     123: iload         12
     125: aaload
     126: aload_3
     127: invokestatic  #536                // Method pointAddVar:(ZLorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
     130: iinc          8, -1
     133: iload         8
     135: ifge          141
     138: goto          148
     141: aload_3
     142: invokestatic  #523                // Method pointDouble:(Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;)V
     145: goto          35
     148: return

  public static void sign(byte[], int, byte[], byte[], int, int, byte[], int);
    Code:
       0: iconst_0
       1: istore        8
       3: aload_0
       4: iload_1
       5: aload_2
       6: iload         8
       8: aload_3
       9: iload         4
      11: iload         5
      13: aload         6
      15: iload         7
      17: invokestatic  #509                // Method implSign:([BI[BB[BII[BI)V
      20: return

  public static void sign(byte[], int, byte[], int, byte[], byte[], int, int, byte[], int);
    Code:
       0: iconst_0
       1: istore        10
       3: aload_0
       4: iload_1
       5: aload_2
       6: iload_3
       7: aload         4
       9: iload         10
      11: aload         5
      13: iload         6
      15: iload         7
      17: aload         8
      19: iload         9
      21: invokestatic  #511                // Method implSign:([BI[BI[BB[BII[BI)V
      24: return

  public static void signPrehash(byte[], int, byte[], byte[], int, byte[], int);
    Code:
       0: iconst_1
       1: istore        7
       3: aload_0
       4: iload_1
       5: aload_2
       6: iload         7
       8: aload_3
       9: iload         4
      11: bipush        64
      13: aload         5
      15: iload         6
      17: invokestatic  #509                // Method implSign:([BI[BB[BII[BI)V
      20: return

  public static void signPrehash(byte[], int, byte[], int, byte[], byte[], int, byte[], int);
    Code:
       0: iconst_1
       1: istore        9
       3: aload_0
       4: iload_1
       5: aload_2
       6: iload_3
       7: aload         4
       9: iload         9
      11: aload         5
      13: iload         6
      15: bipush        64
      17: aload         7
      19: iload         8
      21: invokestatic  #511                // Method implSign:([BI[BI[BB[BII[BI)V
      24: return

  public static void signPrehash(byte[], int, byte[], org.bouncycastle.crypto.Xof, byte[], int);
    Code:
       0: bipush        64
       2: newarray       byte
       4: astore        6
       6: bipush        64
       8: aload_3
       9: aload         6
      11: iconst_0
      12: bipush        64
      14: invokeinterface #550,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.doFinal:([BII)I
      19: if_icmpeq     32
      22: new           #314                // class java/lang/IllegalArgumentException
      25: dup
      26: ldc           #45                 // String ph
      28: invokespecial #467                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: iconst_1
      33: istore        7
      35: aload_0
      36: iload_1
      37: aload_2
      38: iload         7
      40: aload         6
      42: iconst_0
      43: aload         6
      45: arraylength
      46: aload         4
      48: iload         5
      50: invokestatic  #509                // Method implSign:([BI[BB[BII[BI)V
      53: return

  public static void signPrehash(byte[], int, byte[], int, byte[], org.bouncycastle.crypto.Xof, byte[], int);
    Code:
       0: bipush        64
       2: newarray       byte
       4: astore        8
       6: bipush        64
       8: aload         5
      10: aload         8
      12: iconst_0
      13: bipush        64
      15: invokeinterface #550,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.doFinal:([BII)I
      20: if_icmpeq     33
      23: new           #314                // class java/lang/IllegalArgumentException
      26: dup
      27: ldc           #45                 // String ph
      29: invokespecial #467                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: iconst_1
      34: istore        9
      36: aload_0
      37: iload_1
      38: aload_2
      39: iload_3
      40: aload         4
      42: iload         9
      44: aload         8
      46: iconst_0
      47: aload         8
      49: arraylength
      50: aload         6
      52: iload         7
      54: invokestatic  #511                // Method implSign:([BI[BI[BB[BII[BI)V
      57: return

  public static boolean verify(byte[], int, byte[], int, byte[], byte[], int, int);
    Code:
       0: iconst_0
       1: istore        8
       3: aload_0
       4: iload_1
       5: aload_2
       6: iload_3
       7: aload         4
       9: iload         8
      11: aload         5
      13: iload         6
      15: iload         7
      17: invokestatic  #510                // Method implVerify:([BI[BI[BB[BII)Z
      20: ireturn

  public static boolean verifyPrehash(byte[], int, byte[], int, byte[], byte[], int);
    Code:
       0: iconst_1
       1: istore        7
       3: aload_0
       4: iload_1
       5: aload_2
       6: iload_3
       7: aload         4
       9: iload         7
      11: aload         5
      13: iload         6
      15: bipush        64
      17: invokestatic  #510                // Method implVerify:([BI[BI[BB[BII)Z
      20: ireturn

  public static boolean verifyPrehash(byte[], int, byte[], int, byte[], org.bouncycastle.crypto.Xof);
    Code:
       0: bipush        64
       2: newarray       byte
       4: astore        6
       6: bipush        64
       8: aload         5
      10: aload         6
      12: iconst_0
      13: bipush        64
      15: invokeinterface #550,  4          // InterfaceMethod org/bouncycastle/crypto/Xof.doFinal:([BII)I
      20: if_icmpeq     33
      23: new           #314                // class java/lang/IllegalArgumentException
      26: dup
      27: ldc           #45                 // String ph
      29: invokespecial #467                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: iconst_1
      34: istore        7
      36: aload_0
      37: iload_1
      38: aload_2
      39: iload_3
      40: aload         4
      42: iload         7
      44: aload         6
      46: iconst_0
      47: aload         6
      49: arraylength
      50: invokestatic  #510                // Method implVerify:([BI[BI[BB[BII)Z
      53: ireturn

  static {};
    Code:
       0: ldc           #42                 // String SigEd448
       2: invokestatic  #548                // Method org/bouncycastle/util/Strings.toByteArray:(Ljava/lang/String;)[B
       5: putstatic     #454                // Field DOM4_PREFIX:[B
       8: bipush        14
      10: newarray       int
      12: dup
      13: iconst_0
      14: iconst_m1
      15: iastore
      16: dup
      17: iconst_1
      18: iconst_m1
      19: iastore
      20: dup
      21: iconst_2
      22: iconst_m1
      23: iastore
      24: dup
      25: iconst_3
      26: iconst_m1
      27: iastore
      28: dup
      29: iconst_4
      30: iconst_m1
      31: iastore
      32: dup
      33: iconst_5
      34: iconst_m1
      35: iastore
      36: dup
      37: bipush        6
      39: iconst_m1
      40: iastore
      41: dup
      42: bipush        7
      44: bipush        -2
      46: iastore
      47: dup
      48: bipush        8
      50: iconst_m1
      51: iastore
      52: dup
      53: bipush        9
      55: iconst_m1
      56: iastore
      57: dup
      58: bipush        10
      60: iconst_m1
      61: iastore
      62: dup
      63: bipush        11
      65: iconst_m1
      66: iastore
      67: dup
      68: bipush        12
      70: iconst_m1
      71: iastore
      72: dup
      73: bipush        13
      75: iconst_m1
      76: iastore
      77: putstatic     #458                // Field P:[I
      80: bipush        14
      82: newarray       int
      84: dup
      85: iconst_0
      86: ldc           #2                  // int -1420278541
      88: iastore
      89: dup
      90: iconst_1
      91: ldc           #39                 // int 595116690
      93: iastore
      94: dup
      95: iconst_2
      96: ldc           #1                  // int -1916432555
      98: iastore
      99: dup
     100: iconst_3
     101: ldc           #38                 // int 560775794
     103: iastore
     104: dup
     105: iconst_4
     106: ldc           #3                  // int -1361693040
     108: iastore
     109: dup
     110: iconst_5
     111: ldc           #4                  // int -1001465015
     113: iastore
     114: dup
     115: bipush        6
     117: ldc           #41                 // int 2093622249
     119: iastore
     120: dup
     121: bipush        7
     123: iconst_m1
     124: iastore
     125: dup
     126: bipush        8
     128: iconst_m1
     129: iastore
     130: dup
     131: bipush        9
     133: iconst_m1
     134: iastore
     135: dup
     136: bipush        10
     138: iconst_m1
     139: iastore
     140: dup
     141: bipush        11
     143: iconst_m1
     144: iastore
     145: dup
     146: bipush        12
     148: iconst_m1
     149: iastore
     150: dup
     151: bipush        13
     153: ldc           #40                 // int 1073741823
     155: iastore
     156: putstatic     #457                // Field L:[I
     159: bipush        16
     161: newarray       int
     163: dup
     164: iconst_0
     165: ldc           #25                 // int 118276190
     167: iastore
     168: dup
     169: iconst_1
     170: ldc           #16                 // int 40534716
     172: iastore
     173: dup
     174: iconst_2
     175: ldc           #9                  // int 9670182
     177: iastore
     178: dup
     179: iconst_3
     180: ldc           #29                 // int 135141552
     182: iastore
     183: dup
     184: iconst_4
     185: ldc           #21                 // int 85017403
     187: iastore
     188: dup
     189: iconst_5
     190: ldc           #37                 // int 259173222
     192: iastore
     193: dup
     194: bipush        6
     196: ldc           #18                 // int 68333082
     198: iastore
     199: dup
     200: bipush        7
     202: ldc           #32                 // int 171784774
     204: iastore
     205: dup
     206: bipush        8
     208: ldc           #33                 // int 174973732
     210: iastore
     211: dup
     212: bipush        9
     214: ldc           #10                 // int 15824510
     216: iastore
     217: dup
     218: bipush        10
     220: ldc           #19                 // int 73756743
     222: iastore
     223: dup
     224: bipush        11
     226: ldc           #17                 // int 57518561
     228: iastore
     229: dup
     230: bipush        12
     232: ldc           #22                 // int 94773951
     234: iastore
     235: dup
     236: bipush        13
     238: ldc           #36                 // int 248652241
     240: iastore
     241: dup
     242: bipush        14
     244: ldc           #23                 // int 107736333
     246: iastore
     247: dup
     248: bipush        15
     250: ldc           #20                 // int 82941708
     252: iastore
     253: putstatic     #455                // Field B_x:[I
     256: bipush        16
     258: newarray       int
     260: dup
     261: iconst_0
     262: ldc           #14                 // int 36764180
     264: iastore
     265: dup
     266: iconst_1
     267: ldc           #8                  // int 8885695
     269: iastore
     270: dup
     271: iconst_2
     272: ldc           #28                 // int 130592152
     274: iastore
     275: dup
     276: iconst_3
     277: ldc           #11                 // int 20104429
     279: iastore
     280: dup
     281: iconst_4
     282: ldc           #30                 // int 163904957
     284: iastore
     285: dup
     286: iconst_5
     287: ldc           #13                 // int 30304195
     289: iastore
     290: dup
     291: bipush        6
     293: ldc           #26                 // int 121295871
     295: iastore
     296: dup
     297: bipush        7
     299: ldc           #7                  // int 5901357
     301: iastore
     302: dup
     303: bipush        8
     305: ldc           #27                 // int 125344798
     307: iastore
     308: dup
     309: bipush        9
     311: ldc           #31                 // int 171541512
     313: iastore
     314: dup
     315: bipush        10
     317: ldc           #34                 // int 175338348
     319: iastore
     320: dup
     321: bipush        11
     323: ldc           #35                 // int 209069246
     325: iastore
     326: dup
     327: bipush        12
     329: ldc           #6                  // int 3626697
     331: iastore
     332: dup
     333: bipush        13
     335: ldc           #15                 // int 38307682
     337: iastore
     338: dup
     339: bipush        14
     341: ldc           #12                 // int 24032956
     343: iastore
     344: dup
     345: bipush        15
     347: ldc           #24                 // int 110359655
     349: iastore
     350: putstatic     #456                // Field B_y:[I
     353: new           #317                // class java/lang/Object
     356: dup
     357: invokespecial #470                // Method java/lang/Object."<init>":()V
     360: putstatic     #460                // Field precompLock:Ljava/lang/Object;
     363: aconst_null
     364: putstatic     #461                // Field precompBaseTable:[Lorg/bouncycastle/math/ec/rfc8032/Ed448$PointExt;
     367: aconst_null
     368: putstatic     #459                // Field precompBase:[I
     371: return
}
