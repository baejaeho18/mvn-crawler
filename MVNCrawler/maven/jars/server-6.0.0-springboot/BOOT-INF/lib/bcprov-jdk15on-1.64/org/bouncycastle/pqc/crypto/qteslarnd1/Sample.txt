class org.bouncycastle.pqc.crypto.qteslarnd1.Sample {
  static final double[][] EXPONENTIAL_DISTRIBUTION_I;

  static final double[][] EXPONENTIAL_DISTRIBUTION_III_SIZE;

  static final double[][] EXPONENTIAL_DISTRIBUTION_III_SPEED;

  static final double[][] EXPONENTIAL_DISTRIBUTION_P;

  static final long[][] CUMULATIVE_DISTRIBUTION_TABLE_I;

  static final long[][] CUMULATIVE_DISTRIBUTION_TABLE_III;

  org.bouncycastle.pqc.crypto.qteslarnd1.Sample();
    Code:
       0: aload_0
       1: invokespecial #877                // Method java/lang/Object."<init>":()V
       4: return

  private static long modulus7(long);
    Code:
       0: lload_0
       1: lstore_2
       2: iconst_0
       3: istore        4
       5: iload         4
       7: iconst_2
       8: if_icmpge     27
      11: lload_2
      12: ldc2_w        #59                 // long 7l
      15: land
      16: lload_2
      17: iconst_3
      18: lshr
      19: ladd
      20: lstore_2
      21: iinc          4, 1
      24: goto          5
      27: lload_2
      28: ldc2_w        #59                 // long 7l
      31: lsub
      32: iconst_3
      33: lshr
      34: lload_2
      35: land
      36: lreturn

  public static void sampleY(int[], byte[], int, int, int, int, int, int);
    Code:
       0: iconst_0
       1: istore        8
       3: iconst_0
       4: istore        9
       6: iload         7
       8: iconst_1
       9: iadd
      10: bipush        7
      12: iadd
      13: bipush        8
      15: idiv
      16: istore        10
      18: iload         4
      20: istore        11
      22: iload         4
      24: iload         10
      26: imul
      27: newarray       byte
      29: astore        12
      31: iconst_4
      32: newarray       int
      34: astore        13
      36: iload_3
      37: bipush        8
      39: ishl
      40: i2s
      41: istore        14
      43: iload         5
      45: ldc           #1                  // int 4205569
      47: if_icmpne     74
      50: aload         12
      52: iconst_0
      53: iload         4
      55: iload         10
      57: imul
      58: iload         14
      60: iload         14
      62: iconst_1
      63: iadd
      64: i2s
      65: istore        14
      67: aload_1
      68: iload_2
      69: bipush        32
      71: invokestatic  #880                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK128Simple:([BIIS[BII)V
      74: iload         5
      76: ldc           #2                  // int 4206593
      78: if_icmpeq     88
      81: iload         5
      83: ldc           #3                  // int 8404993
      85: if_icmpne     112
      88: aload         12
      90: iconst_0
      91: iload         4
      93: iload         10
      95: imul
      96: iload         14
      98: iload         14
     100: iconst_1
     101: iadd
     102: i2s
     103: istore        14
     105: aload_1
     106: iload_2
     107: bipush        32
     109: invokestatic  #881                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK256Simple:([BIIS[BII)V
     112: iload         8
     114: iload         4
     116: if_icmpge     464
     119: iload         9
     121: iload         11
     123: iload         10
     125: imul
     126: iconst_4
     127: imul
     128: if_icmple     231
     131: iload         5
     133: ldc           #1                  // int 4205569
     135: if_icmpne     176
     138: sipush        168
     141: iload         7
     143: iconst_1
     144: iadd
     145: bipush        7
     147: iadd
     148: bipush        8
     150: idiv
     151: idiv
     152: istore        11
     154: aload         12
     156: iconst_0
     157: sipush        168
     160: iload         14
     162: iload         14
     164: iconst_1
     165: iadd
     166: i2s
     167: istore        14
     169: aload_1
     170: iload_2
     171: bipush        32
     173: invokestatic  #880                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK128Simple:([BIIS[BII)V
     176: iload         5
     178: ldc           #2                  // int 4206593
     180: if_icmpeq     190
     183: iload         5
     185: ldc           #3                  // int 8404993
     187: if_icmpne     228
     190: sipush        136
     193: iload         7
     195: iconst_1
     196: iadd
     197: bipush        7
     199: iadd
     200: bipush        8
     202: idiv
     203: idiv
     204: istore        11
     206: aload         12
     208: iconst_0
     209: sipush        136
     212: iload         14
     214: iload         14
     216: iconst_1
     217: iadd
     218: i2s
     219: istore        14
     221: aload_1
     222: iload_2
     223: bipush        32
     225: invokestatic  #881                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK256Simple:([BIIS[BII)V
     228: iconst_0
     229: istore        9
     231: aload         13
     233: iconst_0
     234: aload         12
     236: iload         9
     238: invokestatic  #878                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load32:([BI)I
     241: iconst_1
     242: iload         7
     244: iconst_1
     245: iadd
     246: ishl
     247: iconst_1
     248: isub
     249: iand
     250: iload         6
     252: isub
     253: iastore
     254: aload         13
     256: iconst_1
     257: aload         12
     259: iload         9
     261: iload         10
     263: iadd
     264: invokestatic  #878                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load32:([BI)I
     267: iconst_1
     268: iload         7
     270: iconst_1
     271: iadd
     272: ishl
     273: iconst_1
     274: isub
     275: iand
     276: iload         6
     278: isub
     279: iastore
     280: aload         13
     282: iconst_2
     283: aload         12
     285: iload         9
     287: iload         10
     289: iconst_2
     290: imul
     291: iadd
     292: invokestatic  #878                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load32:([BI)I
     295: iconst_1
     296: iload         7
     298: iconst_1
     299: iadd
     300: ishl
     301: iconst_1
     302: isub
     303: iand
     304: iload         6
     306: isub
     307: iastore
     308: aload         13
     310: iconst_3
     311: aload         12
     313: iload         9
     315: iload         10
     317: iconst_3
     318: imul
     319: iadd
     320: invokestatic  #878                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load32:([BI)I
     323: iconst_1
     324: iload         7
     326: iconst_1
     327: iadd
     328: ishl
     329: iconst_1
     330: isub
     331: iand
     332: iload         6
     334: isub
     335: iastore
     336: iload         8
     338: iload         4
     340: if_icmpge     365
     343: aload         13
     345: iconst_0
     346: iaload
     347: iconst_1
     348: iload         7
     350: ishl
     351: if_icmpeq     365
     354: aload_0
     355: iload         8
     357: iinc          8, 1
     360: aload         13
     362: iconst_0
     363: iaload
     364: iastore
     365: iload         8
     367: iload         4
     369: if_icmpge     394
     372: aload         13
     374: iconst_1
     375: iaload
     376: iconst_1
     377: iload         7
     379: ishl
     380: if_icmpeq     394
     383: aload_0
     384: iload         8
     386: iinc          8, 1
     389: aload         13
     391: iconst_1
     392: iaload
     393: iastore
     394: iload         8
     396: iload         4
     398: if_icmpge     423
     401: aload         13
     403: iconst_2
     404: iaload
     405: iconst_1
     406: iload         7
     408: ishl
     409: if_icmpeq     423
     412: aload_0
     413: iload         8
     415: iinc          8, 1
     418: aload         13
     420: iconst_2
     421: iaload
     422: iastore
     423: iload         8
     425: iload         4
     427: if_icmpge     452
     430: aload         13
     432: iconst_3
     433: iaload
     434: iconst_1
     435: iload         7
     437: ishl
     438: if_icmpeq     452
     441: aload_0
     442: iload         8
     444: iinc          8, 1
     447: aload         13
     449: iconst_3
     450: iaload
     451: iastore
     452: iload         9
     454: iload         10
     456: iconst_4
     457: imul
     458: iadd
     459: istore        9
     461: goto          112
     464: return

  public static void sampleY(long[], byte[], int, int, int, int, int, int);
    Code:
       0: iconst_0
       1: istore        8
       3: iconst_0
       4: istore        9
       6: iload         7
       8: iconst_1
       9: iadd
      10: bipush        7
      12: iadd
      13: bipush        8
      15: idiv
      16: istore        10
      18: iload         4
      20: istore        11
      22: iload         4
      24: iload         10
      26: imul
      27: newarray       byte
      29: astore        12
      31: iload_3
      32: bipush        8
      34: ishl
      35: i2s
      36: istore        13
      38: iload         5
      40: ldc           #4                  // int 485978113
      42: if_icmpne     69
      45: aload         12
      47: iconst_0
      48: iload         4
      50: iload         10
      52: imul
      53: iload         13
      55: iload         13
      57: iconst_1
      58: iadd
      59: i2s
      60: istore        13
      62: aload_1
      63: iload_2
      64: bipush        32
      66: invokestatic  #880                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK128Simple:([BIIS[BII)V
      69: iload         5
      71: ldc           #5                  // int 1129725953
      73: if_icmpne     100
      76: aload         12
      78: iconst_0
      79: iload         4
      81: iload         10
      83: imul
      84: iload         13
      86: iload         13
      88: iconst_1
      89: iadd
      90: i2s
      91: istore        13
      93: aload_1
      94: iload_2
      95: bipush        32
      97: invokestatic  #881                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK256Simple:([BIIS[BII)V
     100: iload         8
     102: iload         4
     104: if_icmpge     260
     107: iload         9
     109: iload         11
     111: iload         10
     113: imul
     114: if_icmple     210
     117: iload         5
     119: ldc           #4                  // int 485978113
     121: if_icmpne     162
     124: sipush        168
     127: iload         7
     129: iconst_1
     130: iadd
     131: bipush        7
     133: iadd
     134: bipush        8
     136: idiv
     137: idiv
     138: istore        11
     140: aload         12
     142: iconst_0
     143: sipush        168
     146: iload         13
     148: iload         13
     150: iconst_1
     151: iadd
     152: i2s
     153: istore        13
     155: aload_1
     156: iload_2
     157: bipush        32
     159: invokestatic  #880                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK128Simple:([BIIS[BII)V
     162: iload         5
     164: ldc           #5                  // int 1129725953
     166: if_icmpne     207
     169: sipush        136
     172: iload         7
     174: iconst_1
     175: iadd
     176: bipush        7
     178: iadd
     179: bipush        8
     181: idiv
     182: idiv
     183: istore        11
     185: aload         12
     187: iconst_0
     188: sipush        136
     191: iload         13
     193: iload         13
     195: iconst_1
     196: iadd
     197: i2s
     198: istore        13
     200: aload_1
     201: iload_2
     202: bipush        32
     204: invokestatic  #881                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK256Simple:([BIIS[BII)V
     207: iconst_0
     208: istore        9
     210: aload_0
     211: iload         8
     213: aload         12
     215: iload         9
     217: invokestatic  #878                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load32:([BI)I
     220: iconst_1
     221: iload         7
     223: iconst_1
     224: iadd
     225: ishl
     226: iconst_1
     227: isub
     228: iand
     229: iload         6
     231: isub
     232: i2l
     233: lastore
     234: aload_0
     235: iload         8
     237: laload
     238: iconst_1
     239: iload         7
     241: ishl
     242: i2l
     243: lcmp
     244: ifeq          250
     247: iinc          8, 1
     250: iload         9
     252: iload         10
     254: iadd
     255: istore        9
     257: goto          100
     260: return

  private static int bernoulli(long, long, double[][]);
    Code:
       0: ldc2_w        #847                // double 4.6116860184273879E18d
       3: dstore        5
       5: lconst_0
       6: lstore        7
       8: lload_2
       9: lstore        9
      11: lload         7
      13: ldc2_w        #55                 // long 3l
      16: lcmp
      17: ifge          54
      20: dload         5
      22: aload         4
      24: lload         7
      26: l2i
      27: aaload
      28: lload         9
      30: ldc2_w        #61                 // long 31l
      33: land
      34: l2i
      35: daload
      36: dmul
      37: dstore        5
      39: lload         7
      41: lconst_1
      42: ladd
      43: lstore        7
      45: lload         9
      47: iconst_5
      48: lshr
      49: lstore        9
      51: goto          11
      54: lload_0
      55: ldc2_w        #123                // long 4611686018427387903l
      58: land
      59: dload         5
      61: invokestatic  #882                // Method round:(D)J
      64: lsub
      65: bipush        63
      67: lushr
      68: l2i
      69: ireturn

  public static void polynomialGaussSamplerI(int[], int, byte[], int, int);
    Code:
       0: sipush        1024
       3: newarray       byte
       5: astore        5
       7: iload         4
       9: bipush        8
      11: ishl
      12: i2s
      13: istore        6
      15: iconst_0
      16: istore        8
      18: aload         5
      20: iconst_0
      21: sipush        1024
      24: iload         6
      26: iload         6
      28: iconst_1
      29: iadd
      30: i2s
      31: istore        6
      33: aload_2
      34: iload_3
      35: bipush        32
      37: invokestatic  #880                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK128Simple:([BIIS[BII)V
      40: iconst_0
      41: istore        7
      43: iload         7
      45: sipush        512
      48: if_icmpge     639
      51: iload         8
      53: bipush        46
      55: iadd
      56: sipush        512
      59: if_icmple     87
      62: aload         5
      64: iconst_0
      65: sipush        1024
      68: iload         6
      70: iload         6
      72: iconst_1
      73: iadd
      74: i2s
      75: istore        6
      77: aload_2
      78: iload_3
      79: bipush        32
      81: invokestatic  #880                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK128Simple:([BIIS[BII)V
      84: iconst_0
      85: istore        8
      87: aload         5
      89: iload         8
      91: iinc          8, 1
      94: bipush        64
      96: imul
      97: bipush        32
      99: idiv
     100: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     103: lstore        17
     105: ldc2_w        #67                 // long 64l
     108: lstore        19
     110: aload         5
     112: iload         8
     114: iinc          8, 1
     117: bipush        64
     119: imul
     120: bipush        32
     122: idiv
     123: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     126: lstore        13
     128: aload         5
     130: iload         8
     132: iinc          8, 1
     135: bipush        64
     137: imul
     138: bipush        32
     140: idiv
     141: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     144: lstore        15
     146: lload         19
     148: ldc2_w        #63                 // long 58l
     151: lcmp
     152: ifgt          180
     155: lload         17
     157: bipush        6
     159: lshl
     160: lload         13
     162: bipush        58
     164: lushr
     165: ldc2_w        #65                 // long 63l
     168: land
     169: lxor
     170: lstore        17
     172: lload         19
     174: ldc2_w        #57                 // long 6l
     177: ladd
     178: lstore        19
     180: lload         13
     182: ldc2_w        #121                // long 288230376151711743l
     185: land
     186: lstore        13
     188: lload         13
     190: ldc2_w        #119                // long 225463659665555712l
     193: lcmp
     194: ifgt          110
     197: lconst_0
     198: lstore        21
     200: iconst_0
     201: istore        27
     203: iload         27
     205: bipush        12
     207: if_icmpge     295
     210: lload         15
     212: getstatic     #875                // Field CUMULATIVE_DISTRIBUTION_TABLE_I:[[J
     215: iload         27
     217: aaload
     218: iconst_1
     219: laload
     220: lsub
     221: lstore        28
     223: lload         28
     225: getstatic     #875                // Field CUMULATIVE_DISTRIBUTION_TABLE_I:[[J
     228: iload         27
     230: aaload
     231: iconst_1
     232: laload
     233: land
     234: lconst_1
     235: land
     236: getstatic     #875                // Field CUMULATIVE_DISTRIBUTION_TABLE_I:[[J
     239: iload         27
     241: aaload
     242: iconst_1
     243: laload
     244: iconst_1
     245: lshr
     246: ladd
     247: lload         28
     249: iconst_1
     250: lushr
     251: ladd
     252: bipush        63
     254: lushr
     255: lstore        30
     257: lload         13
     259: getstatic     #875                // Field CUMULATIVE_DISTRIBUTION_TABLE_I:[[J
     262: iload         27
     264: aaload
     265: iconst_0
     266: laload
     267: lload         30
     269: ladd
     270: lsub
     271: lstore        28
     273: lload         21
     275: lload         28
     277: bipush        63
     279: lushr
     280: ldc2_w        #51                 // long -1l
     283: lxor
     284: lconst_1
     285: land
     286: ladd
     287: lstore        21
     289: iinc          27, 1
     292: goto          203
     295: lload         19
     297: ldc2_w        #57                 // long 6l
     300: lcmp
     301: ifge          327
     304: aload         5
     306: iload         8
     308: iinc          8, 1
     311: bipush        64
     313: imul
     314: bipush        32
     316: idiv
     317: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     320: lstore        17
     322: ldc2_w        #67                 // long 64l
     325: lstore        19
     327: lload         17
     329: ldc2_w        #65                 // long 63l
     332: land
     333: lstore        23
     335: lload         17
     337: bipush        6
     339: lshr
     340: lstore        17
     342: lload         19
     344: ldc2_w        #57                 // long 6l
     347: lsub
     348: lstore        19
     350: lload         23
     352: ldc2_w        #65                 // long 63l
     355: lcmp
     356: ifeq          295
     359: lload         19
     361: ldc2_w        #53                 // long 2l
     364: lcmp
     365: ifge          391
     368: aload         5
     370: iload         8
     372: iinc          8, 1
     375: bipush        64
     377: imul
     378: bipush        32
     380: idiv
     381: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     384: lstore        17
     386: ldc2_w        #67                 // long 64l
     389: lstore        19
     391: lload         23
     393: invokestatic  #883                // Method modulus7:(J)J
     396: iconst_2
     397: lshl
     398: lload         17
     400: ldc2_w        #55                 // long 3l
     403: land
     404: ladd
     405: lstore        23
     407: lload         17
     409: iconst_2
     410: lshr
     411: lstore        17
     413: lload         19
     415: ldc2_w        #53                 // long 2l
     418: lsub
     419: lstore        19
     421: lload         23
     423: l2d
     424: ldc2_w        #845                // double 27.0d
     427: dcmpl
     428: ifge          295
     431: ldc2_w        #845                // double 27.0d
     434: lload         21
     436: l2d
     437: dmul
     438: lload         23
     440: l2d
     441: dadd
     442: d2l
     443: lstore        9
     445: aload         5
     447: iload         8
     449: iinc          8, 1
     452: bipush        64
     454: imul
     455: bipush        32
     457: idiv
     458: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     461: lstore        25
     463: lload         25
     465: lload         23
     467: lload         9
     469: iconst_1
     470: lshl
     471: lload         23
     473: lsub
     474: lmul
     475: getstatic     #871                // Field EXPONENTIAL_DISTRIBUTION_I:[[D
     478: invokestatic  #884                // Method bernoulli:(JJ[[D)I
     481: ifeq          110
     484: lload         17
     486: ldc2_w        #67                 // long 64l
     489: lload         19
     491: lsub
     492: l2i
     493: lshl
     494: lstore        17
     496: lload         19
     498: lconst_0
     499: lcmp
     500: ifne          526
     503: aload         5
     505: iload         8
     507: iinc          8, 1
     510: bipush        64
     512: imul
     513: bipush        32
     515: idiv
     516: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     519: lstore        17
     521: ldc2_w        #67                 // long 64l
     524: lstore        19
     526: lload         17
     528: bipush        63
     530: lshr
     531: lstore        11
     533: lload         17
     535: iconst_1
     536: lshl
     537: lstore        17
     539: lload         19
     541: lconst_1
     542: lsub
     543: lstore        19
     545: lload         9
     547: lload         11
     549: lconst_1
     550: land
     551: lor
     552: lconst_0
     553: lcmp
     554: ifeq          87
     557: lload         19
     559: lconst_0
     560: lcmp
     561: ifne          587
     564: aload         5
     566: iload         8
     568: iinc          8, 1
     571: bipush        64
     573: imul
     574: bipush        32
     576: idiv
     577: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     580: lstore        17
     582: ldc2_w        #67                 // long 64l
     585: lstore        19
     587: lload         17
     589: bipush        63
     591: lshr
     592: lstore        11
     594: lload         17
     596: iconst_1
     597: lshl
     598: lstore        17
     600: lload         19
     602: lconst_1
     603: lsub
     604: lstore        19
     606: lload         9
     608: iconst_1
     609: lshl
     610: lload         11
     612: land
     613: lload         9
     615: lsub
     616: lstore        9
     618: aload_0
     619: iload_1
     620: iload         7
     622: iadd
     623: lload         9
     625: bipush        48
     627: lshl
     628: bipush        48
     630: lshr
     631: l2i
     632: iastore
     633: iinc          7, 1
     636: goto          43
     639: return

  public static void polynomialGaussSamplerIP(long[], int, byte[], int, int);
    Code:
       0: sipush        2048
       3: newarray       byte
       5: astore        5
       7: iload         4
       9: bipush        8
      11: ishl
      12: i2s
      13: istore        6
      15: iconst_0
      16: istore        8
      18: aload         5
      20: iconst_0
      21: sipush        2048
      24: iload         6
      26: iload         6
      28: iconst_1
      29: iadd
      30: i2s
      31: istore        6
      33: aload_2
      34: iload_3
      35: bipush        32
      37: invokestatic  #880                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK128Simple:([BIIS[BII)V
      40: iconst_0
      41: istore        7
      43: iload         7
      45: sipush        1024
      48: if_icmpge     638
      51: iload         8
      53: bipush        46
      55: iadd
      56: sipush        1024
      59: if_icmple     87
      62: aload         5
      64: iconst_0
      65: sipush        2048
      68: iload         6
      70: iload         6
      72: iconst_1
      73: iadd
      74: i2s
      75: istore        6
      77: aload_2
      78: iload_3
      79: bipush        32
      81: invokestatic  #880                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK128Simple:([BIIS[BII)V
      84: iconst_0
      85: istore        8
      87: aload         5
      89: iload         8
      91: iinc          8, 1
      94: bipush        64
      96: imul
      97: bipush        32
      99: idiv
     100: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     103: lstore        17
     105: ldc2_w        #67                 // long 64l
     108: lstore        19
     110: aload         5
     112: iload         8
     114: iinc          8, 1
     117: bipush        64
     119: imul
     120: bipush        32
     122: idiv
     123: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     126: lstore        13
     128: aload         5
     130: iload         8
     132: iinc          8, 1
     135: bipush        64
     137: imul
     138: bipush        32
     140: idiv
     141: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     144: lstore        15
     146: lload         19
     148: ldc2_w        #63                 // long 58l
     151: lcmp
     152: ifgt          180
     155: lload         17
     157: bipush        6
     159: lshl
     160: lload         13
     162: bipush        58
     164: lushr
     165: ldc2_w        #65                 // long 63l
     168: land
     169: lxor
     170: lstore        17
     172: lload         19
     174: ldc2_w        #57                 // long 6l
     177: ladd
     178: lstore        19
     180: lload         13
     182: ldc2_w        #121                // long 288230376151711743l
     185: land
     186: lstore        13
     188: lload         13
     190: ldc2_w        #119                // long 225463659665555712l
     193: lcmp
     194: ifgt          110
     197: lconst_0
     198: lstore        21
     200: iconst_0
     201: istore        27
     203: iload         27
     205: bipush        12
     207: if_icmpge     295
     210: lload         15
     212: getstatic     #875                // Field CUMULATIVE_DISTRIBUTION_TABLE_I:[[J
     215: iload         27
     217: aaload
     218: iconst_1
     219: laload
     220: lsub
     221: lstore        28
     223: lload         28
     225: getstatic     #875                // Field CUMULATIVE_DISTRIBUTION_TABLE_I:[[J
     228: iload         27
     230: aaload
     231: iconst_1
     232: laload
     233: land
     234: lconst_1
     235: land
     236: getstatic     #875                // Field CUMULATIVE_DISTRIBUTION_TABLE_I:[[J
     239: iload         27
     241: aaload
     242: iconst_1
     243: laload
     244: iconst_1
     245: lshr
     246: ladd
     247: lload         28
     249: iconst_1
     250: lushr
     251: ladd
     252: bipush        63
     254: lushr
     255: lstore        30
     257: lload         13
     259: getstatic     #875                // Field CUMULATIVE_DISTRIBUTION_TABLE_I:[[J
     262: iload         27
     264: aaload
     265: iconst_0
     266: laload
     267: lload         30
     269: ladd
     270: lsub
     271: lstore        28
     273: lload         21
     275: lload         28
     277: bipush        63
     279: lushr
     280: ldc2_w        #51                 // long -1l
     283: lxor
     284: lconst_1
     285: land
     286: ladd
     287: lstore        21
     289: iinc          27, 1
     292: goto          203
     295: lload         19
     297: ldc2_w        #57                 // long 6l
     300: lcmp
     301: ifge          327
     304: aload         5
     306: iload         8
     308: iinc          8, 1
     311: bipush        64
     313: imul
     314: bipush        32
     316: idiv
     317: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     320: lstore        17
     322: ldc2_w        #67                 // long 64l
     325: lstore        19
     327: lload         17
     329: ldc2_w        #65                 // long 63l
     332: land
     333: lstore        23
     335: lload         17
     337: bipush        6
     339: lshr
     340: lstore        17
     342: lload         19
     344: ldc2_w        #57                 // long 6l
     347: lsub
     348: lstore        19
     350: lload         23
     352: ldc2_w        #65                 // long 63l
     355: lcmp
     356: ifeq          295
     359: lload         19
     361: ldc2_w        #53                 // long 2l
     364: lcmp
     365: ifge          391
     368: aload         5
     370: iload         8
     372: iinc          8, 1
     375: bipush        64
     377: imul
     378: bipush        32
     380: idiv
     381: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     384: lstore        17
     386: ldc2_w        #67                 // long 64l
     389: lstore        19
     391: lload         23
     393: invokestatic  #883                // Method modulus7:(J)J
     396: iconst_2
     397: lshl
     398: lload         17
     400: ldc2_w        #55                 // long 3l
     403: land
     404: ladd
     405: lstore        23
     407: lload         17
     409: iconst_2
     410: lshr
     411: lstore        17
     413: lload         19
     415: ldc2_w        #53                 // long 2l
     418: lsub
     419: lstore        19
     421: lload         23
     423: l2d
     424: ldc2_w        #843                // double 10.0d
     427: dcmpl
     428: ifge          295
     431: ldc2_w        #843                // double 10.0d
     434: lload         21
     436: l2d
     437: dmul
     438: lload         23
     440: l2d
     441: dadd
     442: d2l
     443: lstore        9
     445: aload         5
     447: iload         8
     449: iinc          8, 1
     452: bipush        64
     454: imul
     455: bipush        32
     457: idiv
     458: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     461: lstore        25
     463: lload         25
     465: lload         23
     467: lload         9
     469: iconst_1
     470: lshl
     471: lload         23
     473: lsub
     474: lmul
     475: getstatic     #874                // Field EXPONENTIAL_DISTRIBUTION_P:[[D
     478: invokestatic  #884                // Method bernoulli:(JJ[[D)I
     481: ifeq          110
     484: lload         17
     486: ldc2_w        #67                 // long 64l
     489: lload         19
     491: lsub
     492: l2i
     493: lshl
     494: lstore        17
     496: lload         19
     498: lconst_0
     499: lcmp
     500: ifne          526
     503: aload         5
     505: iload         8
     507: iinc          8, 1
     510: bipush        64
     512: imul
     513: bipush        32
     515: idiv
     516: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     519: lstore        17
     521: ldc2_w        #67                 // long 64l
     524: lstore        19
     526: lload         17
     528: bipush        63
     530: lshr
     531: lstore        11
     533: lload         17
     535: iconst_1
     536: lshl
     537: lstore        17
     539: lload         19
     541: lconst_1
     542: lsub
     543: lstore        19
     545: lload         9
     547: lload         11
     549: lconst_1
     550: land
     551: lor
     552: lconst_0
     553: lcmp
     554: ifeq          87
     557: lload         19
     559: lconst_0
     560: lcmp
     561: ifne          587
     564: aload         5
     566: iload         8
     568: iinc          8, 1
     571: bipush        64
     573: imul
     574: bipush        32
     576: idiv
     577: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     580: lstore        17
     582: ldc2_w        #67                 // long 64l
     585: lstore        19
     587: lload         17
     589: bipush        63
     591: lshr
     592: lstore        11
     594: lload         17
     596: iconst_1
     597: lshl
     598: lstore        17
     600: lload         19
     602: lconst_1
     603: lsub
     604: lstore        19
     606: lload         9
     608: iconst_1
     609: lshl
     610: lload         11
     612: land
     613: lload         9
     615: lsub
     616: lstore        9
     618: aload_0
     619: iload_1
     620: iload         7
     622: iadd
     623: lload         9
     625: bipush        48
     627: lshl
     628: bipush        48
     630: lshr
     631: lastore
     632: iinc          7, 1
     635: goto          43
     638: return

  public static void polynomialGaussSamplerIII(int[], int, byte[], int, int, int, double, double[][]);
    Code:
       0: iload         5
       2: bipush        64
       4: imul
       5: bipush        32
       7: idiv
       8: newarray       byte
      10: astore        9
      12: iload         4
      14: bipush        8
      16: ishl
      17: i2s
      18: istore        10
      20: iconst_0
      21: istore        12
      23: aload         9
      25: iconst_0
      26: iload         5
      28: bipush        64
      30: imul
      31: bipush        32
      33: idiv
      34: iload         10
      36: iload         10
      38: iconst_1
      39: iadd
      40: i2s
      41: istore        10
      43: aload_2
      44: iload_3
      45: bipush        32
      47: invokestatic  #881                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK256Simple:([BIIS[BII)V
      50: iconst_0
      51: istore        11
      53: iload         11
      55: iload         5
      57: if_icmpge     707
      60: iload         12
      62: bipush        46
      64: iadd
      65: iload         5
      67: if_icmple     100
      70: aload         9
      72: iconst_0
      73: iload         5
      75: bipush        64
      77: imul
      78: bipush        32
      80: idiv
      81: iload         10
      83: iload         10
      85: iconst_1
      86: iadd
      87: i2s
      88: istore        10
      90: aload_2
      91: iload_3
      92: bipush        32
      94: invokestatic  #881                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK256Simple:([BIIS[BII)V
      97: iconst_0
      98: istore        12
     100: aload         9
     102: iload         12
     104: iinc          12, 1
     107: bipush        64
     109: imul
     110: bipush        32
     112: idiv
     113: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     116: lstore        23
     118: ldc2_w        #67                 // long 64l
     121: lstore        25
     123: aload         9
     125: iload         12
     127: iinc          12, 1
     130: bipush        64
     132: imul
     133: bipush        32
     135: idiv
     136: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     139: lstore        17
     141: aload         9
     143: iload         12
     145: iinc          12, 1
     148: bipush        64
     150: imul
     151: bipush        32
     153: idiv
     154: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     157: lstore        19
     159: aload         9
     161: iload         12
     163: iinc          12, 1
     166: bipush        64
     168: imul
     169: bipush        32
     171: idiv
     172: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     175: lstore        21
     177: lload         25
     179: ldc2_w        #63                 // long 58l
     182: lcmp
     183: ifgt          211
     186: lload         23
     188: bipush        6
     190: lshl
     191: lload         17
     193: bipush        58
     195: lushr
     196: ldc2_w        #65                 // long 63l
     199: land
     200: lxor
     201: lstore        23
     203: lload         25
     205: ldc2_w        #57                 // long 6l
     208: ladd
     209: lstore        25
     211: lload         17
     213: ldc2_w        #83                 // long 4398046511103l
     216: land
     217: lstore        17
     219: lload         17
     221: ldc2_w        #81                 // long 3440302424096l
     224: lcmp
     225: ifgt          123
     228: lconst_0
     229: lstore        27
     231: iconst_0
     232: istore        31
     234: iload         31
     236: bipush        14
     238: if_icmpge     370
     241: lload         21
     243: getstatic     #876                // Field CUMULATIVE_DISTRIBUTION_TABLE_III:[[J
     246: iload         31
     248: aaload
     249: iconst_2
     250: laload
     251: lsub
     252: lstore        32
     254: lload         32
     256: getstatic     #876                // Field CUMULATIVE_DISTRIBUTION_TABLE_III:[[J
     259: iload         31
     261: aaload
     262: iconst_2
     263: laload
     264: land
     265: lconst_1
     266: land
     267: getstatic     #876                // Field CUMULATIVE_DISTRIBUTION_TABLE_III:[[J
     270: iload         31
     272: aaload
     273: iconst_2
     274: laload
     275: iconst_1
     276: lshr
     277: ladd
     278: lload         32
     280: iconst_1
     281: lushr
     282: ladd
     283: bipush        63
     285: lshr
     286: lstore        34
     288: lload         19
     290: getstatic     #876                // Field CUMULATIVE_DISTRIBUTION_TABLE_III:[[J
     293: iload         31
     295: aaload
     296: iconst_1
     297: laload
     298: lload         34
     300: ladd
     301: lsub
     302: lstore        32
     304: lload         32
     306: lload         34
     308: land
     309: lconst_1
     310: land
     311: getstatic     #876                // Field CUMULATIVE_DISTRIBUTION_TABLE_III:[[J
     314: iload         31
     316: aaload
     317: iconst_1
     318: laload
     319: iconst_1
     320: lshr
     321: ladd
     322: lload         32
     324: iconst_1
     325: lushr
     326: ladd
     327: bipush        63
     329: lshr
     330: lstore        34
     332: lload         17
     334: getstatic     #876                // Field CUMULATIVE_DISTRIBUTION_TABLE_III:[[J
     337: iload         31
     339: aaload
     340: iconst_0
     341: laload
     342: lload         34
     344: ladd
     345: lsub
     346: lstore        32
     348: lload         27
     350: lload         32
     352: bipush        63
     354: lushr
     355: ldc2_w        #51                 // long -1l
     358: lxor
     359: lconst_1
     360: land
     361: ladd
     362: lstore        27
     364: iinc          31, 1
     367: goto          234
     370: lload         25
     372: ldc2_w        #57                 // long 6l
     375: lcmp
     376: ifge          402
     379: aload         9
     381: iload         12
     383: iinc          12, 1
     386: bipush        64
     388: imul
     389: bipush        32
     391: idiv
     392: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     395: lstore        23
     397: ldc2_w        #67                 // long 64l
     400: lstore        25
     402: lload         23
     404: ldc2_w        #65                 // long 63l
     407: land
     408: lstore        29
     410: lload         23
     412: bipush        6
     414: lshr
     415: lstore        23
     417: lload         25
     419: ldc2_w        #57                 // long 6l
     422: lsub
     423: lstore        25
     425: lload         29
     427: ldc2_w        #65                 // long 63l
     430: lcmp
     431: ifeq          370
     434: lload         25
     436: ldc2_w        #53                 // long 2l
     439: lcmp
     440: ifge          466
     443: aload         9
     445: iload         12
     447: iinc          12, 1
     450: bipush        64
     452: imul
     453: bipush        32
     455: idiv
     456: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     459: lstore        23
     461: ldc2_w        #67                 // long 64l
     464: lstore        25
     466: lload         29
     468: invokestatic  #883                // Method modulus7:(J)J
     471: iconst_2
     472: lshl
     473: lload         23
     475: ldc2_w        #55                 // long 3l
     478: land
     479: ladd
     480: lstore        29
     482: lload         23
     484: iconst_2
     485: lshr
     486: lstore        23
     488: lload         25
     490: ldc2_w        #53                 // long 2l
     493: lsub
     494: lstore        25
     496: lload         29
     498: l2d
     499: dload         6
     501: dcmpl
     502: ifge          370
     505: dload         6
     507: lload         27
     509: l2d
     510: dmul
     511: lload         29
     513: l2d
     514: dadd
     515: d2l
     516: lstore        13
     518: aload         9
     520: iload         12
     522: iinc          12, 1
     525: bipush        64
     527: imul
     528: bipush        32
     530: idiv
     531: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     534: lload         29
     536: lload         13
     538: iconst_1
     539: lshl
     540: lload         29
     542: lsub
     543: lmul
     544: aload         8
     546: invokestatic  #884                // Method bernoulli:(JJ[[D)I
     549: ifeq          123
     552: lload         23
     554: ldc2_w        #67                 // long 64l
     557: lload         25
     559: lsub
     560: l2i
     561: lshl
     562: lstore        23
     564: lload         25
     566: lconst_0
     567: lcmp
     568: ifne          594
     571: aload         9
     573: iload         12
     575: iinc          12, 1
     578: bipush        64
     580: imul
     581: bipush        32
     583: idiv
     584: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     587: lstore        23
     589: ldc2_w        #67                 // long 64l
     592: lstore        25
     594: lload         23
     596: bipush        63
     598: lshr
     599: lstore        15
     601: lload         23
     603: iconst_1
     604: lshl
     605: lstore        23
     607: lload         25
     609: lconst_1
     610: lsub
     611: lstore        25
     613: lload         13
     615: lload         15
     617: lconst_1
     618: land
     619: lor
     620: lconst_0
     621: lcmp
     622: ifeq          100
     625: lload         25
     627: lconst_0
     628: lcmp
     629: ifne          655
     632: aload         9
     634: iload         12
     636: iinc          12, 1
     639: bipush        64
     641: imul
     642: bipush        32
     644: idiv
     645: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     648: lstore        23
     650: ldc2_w        #67                 // long 64l
     653: lstore        25
     655: lload         23
     657: bipush        63
     659: lshr
     660: lstore        15
     662: lload         23
     664: iconst_1
     665: lshl
     666: lstore        23
     668: lload         25
     670: lconst_1
     671: lsub
     672: lstore        25
     674: lload         13
     676: iconst_1
     677: lshl
     678: lload         15
     680: land
     681: lload         13
     683: lsub
     684: lstore        13
     686: aload_0
     687: iload_1
     688: iload         11
     690: iadd
     691: lload         13
     693: bipush        48
     695: lshl
     696: bipush        48
     698: lshr
     699: l2i
     700: iastore
     701: iinc          11, 1
     704: goto          53
     707: return

  public static void polynomialGaussSamplerIIIP(long[], int, byte[], int, int);
    Code:
       0: sipush        4096
       3: newarray       byte
       5: astore        5
       7: iload         4
       9: bipush        8
      11: ishl
      12: i2s
      13: istore        6
      15: iconst_0
      16: istore        8
      18: aload         5
      20: iconst_0
      21: sipush        4096
      24: iload         6
      26: iload         6
      28: iconst_1
      29: iadd
      30: i2s
      31: istore        6
      33: aload_2
      34: iload_3
      35: bipush        32
      37: invokestatic  #881                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK256Simple:([BIIS[BII)V
      40: iconst_0
      41: istore        7
      43: iload         7
      45: sipush        2048
      48: if_icmpge     696
      51: iload         8
      53: bipush        46
      55: iadd
      56: sipush        2048
      59: if_icmple     87
      62: aload         5
      64: iconst_0
      65: sipush        4096
      68: iload         6
      70: iload         6
      72: iconst_1
      73: iadd
      74: i2s
      75: istore        6
      77: aload_2
      78: iload_3
      79: bipush        32
      81: invokestatic  #881                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK256Simple:([BIIS[BII)V
      84: iconst_0
      85: istore        8
      87: aload         5
      89: iload         8
      91: iinc          8, 1
      94: bipush        64
      96: imul
      97: bipush        32
      99: idiv
     100: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     103: lstore        19
     105: ldc2_w        #67                 // long 64l
     108: lstore        21
     110: aload         5
     112: iload         8
     114: iinc          8, 1
     117: bipush        64
     119: imul
     120: bipush        32
     122: idiv
     123: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     126: lstore        13
     128: aload         5
     130: iload         8
     132: iinc          8, 1
     135: bipush        64
     137: imul
     138: bipush        32
     140: idiv
     141: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     144: lstore        15
     146: aload         5
     148: iload         8
     150: iinc          8, 1
     153: bipush        64
     155: imul
     156: bipush        32
     158: idiv
     159: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     162: lstore        17
     164: lload         21
     166: ldc2_w        #63                 // long 58l
     169: lcmp
     170: ifgt          198
     173: lload         19
     175: bipush        6
     177: lshl
     178: lload         13
     180: bipush        58
     182: lushr
     183: ldc2_w        #65                 // long 63l
     186: land
     187: lxor
     188: lstore        19
     190: lload         21
     192: ldc2_w        #57                 // long 6l
     195: ladd
     196: lstore        21
     198: lload         13
     200: ldc2_w        #83                 // long 4398046511103l
     203: land
     204: lstore        13
     206: lload         13
     208: ldc2_w        #81                 // long 3440302424096l
     211: lcmp
     212: ifgt          110
     215: lconst_0
     216: lstore        23
     218: iconst_0
     219: istore        27
     221: iload         27
     223: bipush        14
     225: if_icmpge     357
     228: lload         17
     230: getstatic     #876                // Field CUMULATIVE_DISTRIBUTION_TABLE_III:[[J
     233: iload         27
     235: aaload
     236: iconst_2
     237: laload
     238: lsub
     239: lstore        28
     241: lload         28
     243: getstatic     #876                // Field CUMULATIVE_DISTRIBUTION_TABLE_III:[[J
     246: iload         27
     248: aaload
     249: iconst_2
     250: laload
     251: land
     252: lconst_1
     253: land
     254: getstatic     #876                // Field CUMULATIVE_DISTRIBUTION_TABLE_III:[[J
     257: iload         27
     259: aaload
     260: iconst_2
     261: laload
     262: iconst_1
     263: lshr
     264: ladd
     265: lload         28
     267: iconst_1
     268: lushr
     269: ladd
     270: bipush        63
     272: lshr
     273: lstore        30
     275: lload         15
     277: getstatic     #876                // Field CUMULATIVE_DISTRIBUTION_TABLE_III:[[J
     280: iload         27
     282: aaload
     283: iconst_1
     284: laload
     285: lload         30
     287: ladd
     288: lsub
     289: lstore        28
     291: lload         28
     293: lload         30
     295: land
     296: lconst_1
     297: land
     298: getstatic     #876                // Field CUMULATIVE_DISTRIBUTION_TABLE_III:[[J
     301: iload         27
     303: aaload
     304: iconst_1
     305: laload
     306: iconst_1
     307: lshr
     308: ladd
     309: lload         28
     311: iconst_1
     312: lushr
     313: ladd
     314: bipush        63
     316: lshr
     317: lstore        30
     319: lload         13
     321: getstatic     #876                // Field CUMULATIVE_DISTRIBUTION_TABLE_III:[[J
     324: iload         27
     326: aaload
     327: iconst_0
     328: laload
     329: lload         30
     331: ladd
     332: lsub
     333: lstore        28
     335: lload         23
     337: lload         28
     339: bipush        63
     341: lushr
     342: ldc2_w        #51                 // long -1l
     345: lxor
     346: lconst_1
     347: land
     348: ladd
     349: lstore        23
     351: iinc          27, 1
     354: goto          221
     357: lload         21
     359: ldc2_w        #57                 // long 6l
     362: lcmp
     363: ifge          389
     366: aload         5
     368: iload         8
     370: iinc          8, 1
     373: bipush        64
     375: imul
     376: bipush        32
     378: idiv
     379: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     382: lstore        19
     384: ldc2_w        #67                 // long 64l
     387: lstore        21
     389: lload         19
     391: ldc2_w        #65                 // long 63l
     394: land
     395: lstore        25
     397: lload         19
     399: bipush        6
     401: lshr
     402: lstore        19
     404: lload         21
     406: ldc2_w        #57                 // long 6l
     409: lsub
     410: lstore        21
     412: lload         25
     414: ldc2_w        #65                 // long 63l
     417: lcmp
     418: ifeq          357
     421: lload         21
     423: ldc2_w        #53                 // long 2l
     426: lcmp
     427: ifge          453
     430: aload         5
     432: iload         8
     434: iinc          8, 1
     437: bipush        64
     439: imul
     440: bipush        32
     442: idiv
     443: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     446: lstore        19
     448: ldc2_w        #67                 // long 64l
     451: lstore        21
     453: lload         25
     455: invokestatic  #883                // Method modulus7:(J)J
     458: iconst_2
     459: lshl
     460: lload         19
     462: ldc2_w        #55                 // long 3l
     465: land
     466: ladd
     467: lstore        25
     469: lload         19
     471: iconst_2
     472: lshr
     473: lstore        19
     475: lload         21
     477: ldc2_w        #53                 // long 2l
     480: lsub
     481: lstore        21
     483: lload         25
     485: l2d
     486: ldc2_w        #843                // double 10.0d
     489: dcmpl
     490: ifge          357
     493: ldc2_w        #843                // double 10.0d
     496: lload         23
     498: l2d
     499: dmul
     500: lload         25
     502: l2d
     503: dadd
     504: d2l
     505: lstore        9
     507: aload         5
     509: iload         8
     511: iinc          8, 1
     514: bipush        64
     516: imul
     517: bipush        32
     519: idiv
     520: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     523: lload         25
     525: lload         9
     527: iconst_1
     528: lshl
     529: lload         25
     531: lsub
     532: lmul
     533: getstatic     #874                // Field EXPONENTIAL_DISTRIBUTION_P:[[D
     536: invokestatic  #884                // Method bernoulli:(JJ[[D)I
     539: ifeq          110
     542: lload         19
     544: ldc2_w        #67                 // long 64l
     547: lload         21
     549: lsub
     550: l2i
     551: lshl
     552: lstore        19
     554: lload         21
     556: lconst_0
     557: lcmp
     558: ifne          584
     561: aload         5
     563: iload         8
     565: iinc          8, 1
     568: bipush        64
     570: imul
     571: bipush        32
     573: idiv
     574: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     577: lstore        19
     579: ldc2_w        #67                 // long 64l
     582: lstore        21
     584: lload         19
     586: bipush        63
     588: lshr
     589: lstore        11
     591: lload         19
     593: iconst_1
     594: lshl
     595: lstore        19
     597: lload         21
     599: lconst_1
     600: lsub
     601: lstore        21
     603: lload         9
     605: lload         11
     607: lconst_1
     608: land
     609: lor
     610: lconst_0
     611: lcmp
     612: ifeq          87
     615: lload         21
     617: lconst_0
     618: lcmp
     619: ifne          645
     622: aload         5
     624: iload         8
     626: iinc          8, 1
     629: bipush        64
     631: imul
     632: bipush        32
     634: idiv
     635: invokestatic  #879                // Method org/bouncycastle/pqc/crypto/qteslarnd1/CommonFunction.load64:([BI)J
     638: lstore        19
     640: ldc2_w        #67                 // long 64l
     643: lstore        21
     645: lload         19
     647: bipush        63
     649: lshr
     650: lstore        11
     652: lload         19
     654: iconst_1
     655: lshl
     656: lstore        19
     658: lload         21
     660: lconst_1
     661: lsub
     662: lstore        21
     664: lload         9
     666: iconst_1
     667: lshl
     668: lload         11
     670: land
     671: lload         9
     673: lsub
     674: lstore        9
     676: aload_0
     677: iload_1
     678: iload         7
     680: iadd
     681: lload         9
     683: bipush        48
     685: lshl
     686: bipush        48
     688: lshr
     689: lastore
     690: iinc          7, 1
     693: goto          43
     696: return

  public static void encodeC(int[], short[], byte[], int, int, int);
    Code:
       0: iconst_0
       1: istore        6
       3: iconst_0
       4: istore        8
       6: iload         4
       8: newarray       short
      10: astore        9
      12: sipush        168
      15: newarray       byte
      17: astore        10
      19: aload         10
      21: iconst_0
      22: sipush        168
      25: iload         8
      27: iload         8
      29: iconst_1
      30: iadd
      31: i2s
      32: istore        8
      34: aload_2
      35: iload_3
      36: bipush        32
      38: invokestatic  #880                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK128Simple:([BIIS[BII)V
      41: aload         9
      43: iconst_0
      44: invokestatic  #885                // Method org/bouncycastle/util/Arrays.fill:([SS)V
      47: iconst_0
      48: istore        11
      50: iload         11
      52: iload         5
      54: if_icmpge     181
      57: iload         6
      59: sipush        165
      62: if_icmple     90
      65: aload         10
      67: iconst_0
      68: sipush        168
      71: iload         8
      73: iload         8
      75: iconst_1
      76: iadd
      77: i2s
      78: istore        8
      80: aload_2
      81: iload_3
      82: bipush        32
      84: invokestatic  #880                // Method org/bouncycastle/pqc/crypto/qteslarnd1/HashUtils.customizableSecureHashAlgorithmKECCAK128Simple:([BIIS[BII)V
      87: iconst_0
      88: istore        6
      90: aload         10
      92: iload         6
      94: baload
      95: bipush        8
      97: ishl
      98: aload         10
     100: iload         6
     102: iconst_1
     103: iadd
     104: baload
     105: sipush        255
     108: iand
     109: ior
     110: istore        7
     112: iload         7
     114: iload         4
     116: iconst_1
     117: isub
     118: iand
     119: istore        7
     121: aload         9
     123: iload         7
     125: saload
     126: ifne          175
     129: aload         10
     131: iload         6
     133: iconst_2
     134: iadd
     135: baload
     136: iconst_1
     137: iand
     138: iconst_1
     139: if_icmpne     151
     142: aload         9
     144: iload         7
     146: iconst_m1
     147: sastore
     148: goto          157
     151: aload         9
     153: iload         7
     155: iconst_1
     156: sastore
     157: aload_0
     158: iload         11
     160: iload         7
     162: iastore
     163: aload_1
     164: iload         11
     166: aload         9
     168: iload         7
     170: saload
     171: sastore
     172: iinc          11, 1
     175: iinc          6, 3
     178: goto          50
     181: return

  private static long round(double);
    Code:
       0: dload_0
       1: dconst_0
       2: dcmpg
       3: ifge          13
       6: dload_0
       7: ldc2_w        #545                // double 0.5d
      10: dsub
      11: d2l
      12: lreturn
      13: dload_0
      14: ldc2_w        #545                // double 0.5d
      17: dadd
      18: d2l
      19: lreturn

  static {};
    Code:
       0: iconst_3
       1: anewarray     #849                // class "[D"
       4: dup
       5: iconst_0
       6: bipush        32
       8: newarray       double
      10: dup
      11: iconst_0
      12: dconst_1
      13: dastore
      14: dup
      15: iconst_1
      16: ldc2_w        #841                // double 0.9990496327075997d
      19: dastore
      20: dup
      21: iconst_2
      22: ldc2_w        #839                // double 0.99810016861319d
      25: dastore
      26: dup
      27: iconst_3
      28: ldc2_w        #837                // double 0.9971516068584009d
      31: dastore
      32: dup
      33: iconst_4
      34: ldc2_w        #835                // double 0.9962039465856783d
      37: dastore
      38: dup
      39: iconst_5
      40: ldc2_w        #833                // double 0.9952571869382832d
      43: dastore
      44: dup
      45: bipush        6
      47: ldc2_w        #829                // double 0.9943113270602909d
      50: dastore
      51: dup
      52: bipush        7
      54: ldc2_w        #827                // double 0.9933663660965897d
      57: dastore
      58: dup
      59: bipush        8
      61: ldc2_w        #823                // double 0.992422303192881d
      64: dastore
      65: dup
      66: bipush        9
      68: ldc2_w        #821                // double 0.9914791374956781d
      71: dastore
      72: dup
      73: bipush        10
      75: ldc2_w        #819                // double 0.9905368681523049d
      78: dastore
      79: dup
      80: bipush        11
      82: ldc2_w        #815                // double 0.9895954943108964d
      85: dastore
      86: dup
      87: bipush        12
      89: ldc2_w        #813                // double 0.9886550151203967d
      92: dastore
      93: dup
      94: bipush        13
      96: ldc2_w        #811                // double 0.9877154297305588d
      99: dastore
     100: dup
     101: bipush        14
     103: ldc2_w        #809                // double 0.9867767372919439d
     106: dastore
     107: dup
     108: bipush        15
     110: ldc2_w        #805                // double 0.9858389369559202d
     113: dastore
     114: dup
     115: bipush        16
     117: ldc2_w        #801                // double 0.9849020278746626d
     120: dastore
     121: dup
     122: bipush        17
     124: ldc2_w        #799                // double 0.983966009201152d
     127: dastore
     128: dup
     129: bipush        18
     131: ldc2_w        #797                // double 0.9830308800891736d
     134: dastore
     135: dup
     136: bipush        19
     138: ldc2_w        #795                // double 0.9820966396933174d
     141: dastore
     142: dup
     143: bipush        20
     145: ldc2_w        #793                // double 0.9811632871689767d
     148: dastore
     149: dup
     150: bipush        21
     152: ldc2_w        #789                // double 0.9802308216723474d
     155: dastore
     156: dup
     157: bipush        22
     159: ldc2_w        #785                // double 0.9792992423604274d
     162: dastore
     163: dup
     164: bipush        23
     166: ldc2_w        #783                // double 0.9783685483910157d
     169: dastore
     170: dup
     171: bipush        24
     173: ldc2_w        #781                // double 0.9774387389227118d
     176: dastore
     177: dup
     178: bipush        25
     180: ldc2_w        #779                // double 0.9765098131149148d
     183: dastore
     184: dup
     185: bipush        26
     187: ldc2_w        #775                // double 0.9755817701278225d
     190: dastore
     191: dup
     192: bipush        27
     194: ldc2_w        #773                // double 0.9746546091224311d
     197: dastore
     198: dup
     199: bipush        28
     201: ldc2_w        #771                // double 0.973728329260534d
     204: dastore
     205: dup
     206: bipush        29
     208: ldc2_w        #769                // double 0.9728029297047213d
     211: dastore
     212: dup
     213: bipush        30
     215: ldc2_w        #765                // double 0.9718784096183788d
     218: dastore
     219: dup
     220: bipush        31
     222: ldc2_w        #761                // double 0.9709547681656876d
     225: dastore
     226: aastore
     227: dup
     228: iconst_1
     229: bipush        32
     231: newarray       double
     233: dup
     234: iconst_0
     235: dconst_1
     236: dastore
     237: dup
     238: iconst_1
     239: ldc2_w        #759                // double 0.9700320045116229d
     242: dastore
     243: dup
     244: iconst_2
     245: ldc2_w        #729                // double 0.940962089776837d
     248: dastore
     249: dup
     250: iconst_3
     251: ldc2_w        #701                // double 0.9127633421156709d
     254: dastore
     255: dup
     256: iconst_4
     257: ldc2_w        #669                // double 0.8854096543971924d
     260: dastore
     261: dup
     262: iconst_5
     263: ldc2_w        #641                // double 0.8588757018688518d
     266: dastore
     267: dup
     268: bipush        6
     270: ldc2_w        #621                // double 0.8331369187101693d
     273: dastore
     274: dup
     275: bipush        7
     277: ldc2_w        #605                // double 0.8081694752890625d
     280: dastore
     281: dup
     282: bipush        8
     284: ldc2_w        #591                // double 0.7839502560997557d
     287: dastore
     288: dup
     289: bipush        9
     291: ldc2_w        #583                // double 0.7604568383618461d
     294: dastore
     295: dup
     296: bipush        10
     298: ldc2_w        #581                // double 0.7376674712607126d
     301: dastore
     302: dup
     303: bipush        11
     305: ldc2_w        #577                // double 0.715561055810049d
     308: dastore
     309: dup
     310: bipush        12
     312: ldc2_w        #575                // double 0.6941171253178751d
     315: dastore
     316: dup
     317: bipush        13
     319: ldc2_w        #573                // double 0.6733158264379437d
     322: dastore
     323: dup
     324: bipush        14
     326: ldc2_w        #571                // double 0.6531379007889985d
     329: dastore
     330: dup
     331: bipush        15
     333: ldc2_w        #567                // double 0.6335646671248656d
     336: dastore
     337: dup
     338: bipush        16
     340: ldc2_w        #563                // double 0.6145780040388725d
     343: dastore
     344: dup
     345: bipush        17
     347: ldc2_w        #561                // double 0.5961603331865797d
     350: dastore
     351: dup
     352: bipush        18
     354: ldc2_w        #559                // double 0.5782946030112949d
     357: dastore
     358: dup
     359: bipush        19
     361: ldc2_w        #557                // double 0.5609642729572996d
     364: dastore
     365: dup
     366: bipush        20
     368: ldc2_w        #555                // double 0.5441532981561744d
     371: dastore
     372: dup
     373: bipush        21
     375: ldc2_w        #551                // double 0.5278461145720446d
     378: dastore
     379: dup
     380: bipush        22
     382: ldc2_w        #547                // double 0.5120276245919921d
     385: dastore
     386: dup
     387: bipush        23
     389: ldc2_w        #543                // double 0.49668318304829484d
     392: dastore
     393: dup
     394: bipush        24
     396: ldc2_w        #541                // double 0.48179858365955075d
     399: dastore
     400: dup
     401: bipush        25
     403: ldc2_w        #539                // double 0.46736004587813484d
     406: dastore
     407: dup
     408: bipush        26
     410: ldc2_w        #535                // double 0.45335420213181116d
     413: dastore
     414: dup
     415: bipush        27
     417: ldc2_w        #533                // double 0.4397680854476882d
     420: dastore
     421: dup
     422: bipush        28
     424: ldc2_w        #531                // double 0.42658911744705963d
     427: dastore
     428: dup
     429: bipush        29
     431: ldc2_w        #529                // double 0.4138050967000153d
     434: dastore
     435: dup
     436: bipush        30
     438: ldc2_w        #525                // double 0.40140418742904177d
     441: dastore
     442: dup
     443: bipush        31
     445: ldc2_w        #521                // double 0.3893749085511526d
     448: dastore
     449: aastore
     450: dup
     451: iconst_2
     452: bipush        32
     454: newarray       double
     456: dup
     457: iconst_0
     458: dconst_1
     459: dastore
     460: dup
     461: iconst_1
     462: ldc2_w        #519                // double 0.37770612304840434d
     465: dastore
     466: dup
     467: iconst_2
     468: ldc2_w        #489                // double 0.14266191538825637d
     471: dastore
     472: dup
     473: iconst_3
     474: ldc2_w        #461                // double 0.05388427896795781d
     477: dastore
     478: dup
     479: iconst_4
     480: ldc2_w        #429                // double 0.02035242210224602d
     483: dastore
     484: dup
     485: iconst_5
     486: ldc2_w        #401                // double 0.007687234446884d
     489: dastore
     490: dup
     491: bipush        6
     493: ldc2_w        #381                // double 0.0029035155198967005d
     496: dastore
     497: dup
     498: bipush        7
     500: ldc2_w        #365                // double 0.0010966755902310549d
     503: dastore
     504: dup
     505: bipush        8
     507: ldc2_w        #351                // double 4.142210854279923E-4d
     510: dastore
     511: dup
     512: bipush        9
     514: ldc2_w        #343                // double 1.5645384026190888E-4d
     517: dastore
     518: dup
     519: bipush        10
     521: ldc2_w        #341                // double 5.9093573441359953E-5d
     524: dastore
     525: dup
     526: bipush        11
     528: ldc2_w        #337                // double 2.232000452161222E-5d
     531: dastore
     532: dup
     533: bipush        12
     535: ldc2_w        #335                // double 8.430402374281007E-6d
     538: dastore
     539: dup
     540: bipush        13
     542: ldc2_w        #333                // double 3.184214596527742E-6d
     545: dastore
     546: dup
     547: bipush        14
     549: ldc2_w        #331                // double 1.2026973502086328E-6d
     552: dastore
     553: dup
     554: bipush        15
     556: ldc2_w        #327                // double 4.5426615334789165E-7d
     559: dastore
     560: dup
     561: bipush        16
     563: ldc2_w        #323                // double 1.715791076131441E-7d
     566: dastore
     567: dup
     568: bipush        17
     570: ldc2_w        #321                // double 6.480647953266561E-8d
     573: dastore
     574: dup
     575: bipush        18
     577: ldc2_w        #319                // double 2.4477804132698898E-8d
     580: dastore
     581: dup
     582: bipush        19
     584: ldc2_w        #317                // double 9.24541649969991E-9d
     587: dastore
     588: dup
     589: bipush        20
     591: ldc2_w        #315                // double 3.4920504220694024E-9d
     594: dastore
     595: dup
     596: bipush        21
     598: ldc2_w        #311                // double 1.318968826409378E-9d
     601: dastore
     602: dup
     603: bipush        22
     605: ldc2_w        #307                // double 4.9818260184479E-10d
     608: dastore
     609: dup
     610: bipush        23
     612: ldc2_w        #305                // double 1.881666191129625E-10d
     615: dastore
     616: dup
     617: bipush        24
     619: ldc2_w        #303                // double 7.107168419228285E-11d
     622: dastore
     623: dup
     624: bipush        25
     626: ldc2_w        #301                // double 2.6844210294787717E-11d
     629: dastore
     630: dup
     631: bipush        26
     633: ldc2_w        #297                // double 1.0139222596740334E-11d
     636: dastore
     637: dup
     638: bipush        27
     640: ldc2_w        #295                // double 3.829646457739566E-12d
     643: dastore
     644: dup
     645: bipush        28
     647: ldc2_w        #293                // double 1.4464809161988664E-12d
     650: dastore
     651: dup
     652: bipush        29
     654: ldc2_w        #291                // double 5.463446989209777E-13d
     657: dastore
     658: dup
     659: bipush        30
     661: ldc2_w        #287                // double 2.0635773807749023E-13d
     664: dastore
     665: dup
     666: bipush        31
     668: ldc2_w        #283                // double 7.794258121028692E-14d
     671: dastore
     672: aastore
     673: putstatic     #871                // Field EXPONENTIAL_DISTRIBUTION_I:[[D
     676: iconst_3
     677: anewarray     #849                // class "[D"
     680: dup
     681: iconst_0
     682: bipush        32
     684: newarray       double
     686: dup
     687: iconst_0
     688: dconst_1
     689: dastore
     690: dup
     691: iconst_1
     692: ldc2_w        #821                // double 0.9914791374956781d
     695: dastore
     696: dup
     697: iconst_2
     698: ldc2_w        #797                // double 0.9830308800891736d
     701: dastore
     702: dup
     703: iconst_3
     704: ldc2_w        #773                // double 0.9746546091224311d
     707: dastore
     708: dup
     709: iconst_4
     710: ldc2_w        #755                // double 0.9663497112088952d
     713: dastore
     714: dup
     715: iconst_5
     716: ldc2_w        #747                // double 0.9581155781885929d
     719: dastore
     720: dup
     721: bipush        6
     723: ldc2_w        #739                // double 0.9499516070835989d
     726: dastore
     727: dup
     728: bipush        7
     730: ldc2_w        #731                // double 0.94185720005388d
     733: dastore
     734: dup
     735: bipush        8
     737: ldc2_w        #721                // double 0.9338317643535151d
     740: dastore
     741: dup
     742: bipush        9
     744: ldc2_w        #713                // double 0.9258747122872905d
     747: dastore
     748: dup
     749: bipush        10
     751: ldc2_w        #707                // double 0.9179854611676618d
     754: dastore
     755: dup
     756: bipush        11
     758: ldc2_w        #697                // double 0.9101634332720855d
     761: dastore
     762: dup
     763: bipush        12
     765: ldc2_w        #689                // double 0.9024080558007124d
     768: dastore
     769: dup
     770: bipush        13
     772: ldc2_w        #679                // double 0.894718760834442d
     775: dastore
     776: dup
     777: bipush        14
     779: ldc2_w        #673                // double 0.8870949852933344d
     782: dastore
     783: dup
     784: bipush        15
     786: ldc2_w        #663                // double 0.8795361708953764d
     789: dastore
     790: dup
     791: bipush        16
     793: ldc2_w        #655                // double 0.872041764115599d
     796: dastore
     797: dup
     798: bipush        17
     800: ldc2_w        #647                // double 0.8646112161455436d
     803: dastore
     804: dup
     805: bipush        18
     807: ldc2_w        #637                // double 0.8572439828530728d
     810: dastore
     811: dup
     812: bipush        19
     814: ldc2_w        #633                // double 0.8499395247425244d
     817: dastore
     818: dup
     819: bipush        20
     821: ldc2_w        #629                // double 0.8426973069152046d
     824: dastore
     825: dup
     826: bipush        21
     828: ldc2_w        #625                // double 0.8355167990302177d
     831: dastore
     832: dup
     833: bipush        22
     835: ldc2_w        #617                // double 0.82839747526563d
     838: dastore
     839: dup
     840: bipush        23
     842: ldc2_w        #613                // double 0.8213388142799641d
     845: dastore
     846: dup
     847: bipush        24
     849: ldc2_w        #609                // double 0.8143402991740217d
     852: dastore
     853: dup
     854: bipush        25
     856: ldc2_w        #603                // double 0.8074014174530314d
     859: dastore
     860: dup
     861: bipush        26
     863: ldc2_w        #597                // double 0.8005216609891195d
     866: dastore
     867: dup
     868: bipush        27
     870: ldc2_w        #595                // double 0.7937005259840998d
     873: dastore
     874: dup
     875: bipush        28
     877: ldc2_w        #593                // double 0.7869375129325812d
     880: dastore
     881: dup
     882: bipush        29
     884: ldc2_w        #589                // double 0.7802321265853895d
     887: dastore
     888: dup
     889: bipush        30
     891: ldc2_w        #587                // double 0.7735838759133007d
     894: dastore
     895: dup
     896: bipush        31
     898: ldc2_w        #585                // double 0.766992274071083d
     901: dastore
     902: aastore
     903: dup
     904: iconst_1
     905: bipush        32
     907: newarray       double
     909: dup
     910: iconst_0
     911: dconst_1
     912: dastore
     913: dup
     914: iconst_1
     915: ldc2_w        #583                // double 0.7604568383618461d
     918: dastore
     919: dup
     920: iconst_2
     921: ldc2_w        #559                // double 0.5782946030112949d
     924: dastore
     925: dup
     926: iconst_3
     927: ldc2_w        #533                // double 0.4397680854476882d
     930: dastore
     931: dup
     932: iconst_4
     933: ldc2_w        #515                // double 0.3344246478719911d
     936: dastore
     937: dup
     938: iconst_5
     939: ldc2_w        #507                // double 0.254315510391008d
     942: dastore
     943: dup
     944: bipush        6
     946: ldc2_w        #499                // double 0.19339596897832517d
     949: dastore
     950: dup
     951: bipush        7
     953: ldc2_w        #491                // double 0.14706928712118283d
     956: dastore
     957: dup
     958: bipush        8
     960: ldc2_w        #481                // double 0.11183984510430525d
     963: dastore
     964: dup
     965: bipush        9
     967: ldc2_w        #473                // double 0.08504937501089856d
     970: dastore
     971: dup
     972: bipush        10
     974: ldc2_w        #467                // double 0.06467637882543892d
     977: dastore
     978: dup
     979: bipush        11
     981: ldc2_w        #457                // double 0.049183594558286324d
     984: dastore
     985: dup
     986: bipush        12
     988: ldc2_w        #449                // double 0.037402000817065316d
     991: dastore
     992: dup
     993: bipush        13
     995: ldc2_w        #439                // double 0.02844260728975267d
     998: dastore
     999: dup
    1000: bipush        14
    1002: ldc2_w        #433                // double 0.021629375214332912d
    1005: dastore
    1006: dup
    1007: bipush        15
    1009: ldc2_w        #423                // double 0.016448206291233683d
    1012: dastore
    1013: dup
    1014: bipush        16
    1016: ldc2_w        #415                // double 0.012508150952954992d
    1019: dastore
    1020: dup
    1021: bipush        17
    1023: ldc2_w        #407                // double 0.009511908927436865d
    1026: dastore
    1027: dup
    1028: bipush        18
    1030: ldc2_w        #397                // double 0.007233396189744457d
    1033: dastore
    1034: dup
    1035: bipush        19
    1037: ldc2_w        #393                // double 0.005500685597071693d
    1040: dastore
    1041: dup
    1042: bipush        20
    1044: ldc2_w        #389                // double 0.004183033977971684d
    1047: dastore
    1048: dup
    1049: bipush        21
    1051: ldc2_w        #385                // double 0.0031810167936485224d
    1054: dastore
    1055: dup
    1056: bipush        22
    1058: ldc2_w        #377                // double 0.002419025973673892d
    1061: dastore
    1062: dup
    1063: bipush        23
    1065: ldc2_w        #373                // double 0.0018395648438552343d
    1068: dastore
    1069: dup
    1070: bipush        24
    1072: ldc2_w        #369                // double 0.0013989096651197545d
    1075: dastore
    1076: dup
    1077: bipush        25
    1079: ldc2_w        #363                // double 0.0010638104210907973d
    1082: dastore
    1083: dup
    1084: bipush        26
    1086: ldc2_w        #357                // double 8.089819094390918E-4d
    1089: dastore
    1090: dup
    1091: bipush        27
    1093: ldc2_w        #355                // double 6.15195825143981E-4d
    1096: dastore
    1097: dup
    1098: bipush        28
    1100: ldc2_w        #353                // double 4.678298721623989E-4d
    1103: dastore
    1104: dup
    1105: bipush        29
    1107: ldc2_w        #349                // double 3.557644254758445E-4d
    1110: dastore
    1111: dup
    1112: bipush        30
    1114: ldc2_w        #347                // double 2.7054349019897927E-4d
    1117: dastore
    1118: dup
    1119: bipush        31
    1121: ldc2_w        #345                // double 2.0573664719609488E-4d
    1124: dastore
    1125: aastore
    1126: dup
    1127: iconst_2
    1128: bipush        32
    1130: newarray       double
    1132: dup
    1133: iconst_0
    1134: dconst_1
    1135: dastore
    1136: dup
    1137: iconst_1
    1138: ldc2_w        #343                // double 1.5645384026190888E-4d
    1141: dastore
    1142: dup
    1143: iconst_2
    1144: ldc2_w        #319                // double 2.4477804132698898E-8d
    1147: dastore
    1148: dup
    1149: iconst_3
    1150: ldc2_w        #295                // double 3.829646457739566E-12d
    1153: dastore
    1154: dup
    1155: iconst_4
    1156: ldc2_w        #279                // double 5.991628951587712E-16d
    1159: dastore
    1160: dup
    1161: iconst_5
    1162: ldc2_w        #271                // double 9.374133589003324E-20d
    1165: dastore
    1166: dup
    1167: bipush        6
    1169: ldc2_w        #263                // double 1.4666191991277205E-23d
    1172: dastore
    1173: dup
    1174: bipush        7
    1176: ldc2_w        #255                // double 2.294582059053771E-27d
    1179: dastore
    1180: dup
    1181: bipush        8
    1183: ldc2_w        #247                // double 3.5899617493504067E-31d
    1186: dastore
    1187: dup
    1188: bipush        9
    1190: ldc2_w        #239                // double 5.616633020792314E-35d
    1193: dastore
    1194: dup
    1195: bipush        10
    1197: ldc2_w        #233                // double 8.787438054448035E-39d
    1200: dastore
    1201: dup
    1202: bipush        11
    1204: ldc2_w        #225                // double 1.3748284296820321E-42d
    1207: dastore
    1208: dup
    1209: bipush        12
    1211: ldc2_w        #217                // double 2.1509718752500368E-46d
    1214: dastore
    1215: dup
    1216: bipush        13
    1218: ldc2_w        #207                // double 3.365278101782278E-50d
    1221: dastore
    1222: dup
    1223: bipush        14
    1225: ldc2_w        #201                // double 5.265106825731444E-54d
    1228: dastore
    1229: dup
    1230: bipush        15
    1232: ldc2_w        #193                // double 8.237461822748735E-58d
    1235: dastore
    1236: dup
    1237: bipush        16
    1239: ldc2_w        #185                // double 1.2887825361799032E-61d
    1242: dastore
    1243: dup
    1244: bipush        17
    1246: ldc2_w        #177                // double 2.016349770478284E-65d
    1249: dastore
    1250: dup
    1251: bipush        18
    1253: ldc2_w        #169                // double 3.15465664902546E-69d
    1256: dastore
    1257: dup
    1258: bipush        19
    1260: ldc2_w        #165                // double 4.93558147447798E-73d
    1263: dastore
    1264: dup
    1265: bipush        20
    1267: ldc2_w        #161                // double 7.721906756076147E-77d
    1270: dastore
    1271: dup
    1272: bipush        21
    1274: ldc2_w        #157                // double 1.2081219661324923E-80d
    1277: dastore
    1278: dup
    1279: bipush        22
    1281: ldc2_w        #151                // double 1.8901532110619624E-84d
    1284: dastore
    1285: dup
    1286: bipush        23
    1288: ldc2_w        #147                // double 2.957217285540224E-88d
    1291: dastore
    1292: dup
    1293: bipush        24
    1295: ldc2_w        #143                // double 4.626680008116659E-92d
    1298: dastore
    1299: dup
    1300: bipush        25
    1302: ldc2_w        #139                // double 7.238618549328511E-96d
    1305: dastore
    1306: dup
    1307: bipush        26
    1309: ldc2_w        #135                // double 1.1325096702335332E-99d
    1312: dastore
    1313: dup
    1314: bipush        27
    1316: ldc2_w        #133                // double 1.7718548704178432E-103d
    1319: dastore
    1320: dup
    1321: bipush        28
    1323: ldc2_w        #131                // double 2.7721349886363846E-107d
    1326: dastore
    1327: dup
    1328: bipush        29
    1330: ldc2_w        #129                // double 4.337111646965655E-111d
    1333: dastore
    1334: dup
    1335: bipush        30
    1337: ldc2_w        #127                // double 6.78557772812429E-115d
    1340: dastore
    1341: dup
    1342: bipush        31
    1344: ldc2_w        #125                // double 1.0616296939607244E-118d
    1347: dastore
    1348: aastore
    1349: putstatic     #872                // Field EXPONENTIAL_DISTRIBUTION_III_SIZE:[[D
    1352: iconst_3
    1353: anewarray     #849                // class "[D"
    1356: dup
    1357: iconst_0
    1358: bipush        32
    1360: newarray       double
    1362: dup
    1363: iconst_0
    1364: dconst_1
    1365: dastore
    1366: dup
    1367: iconst_1
    1368: ldc2_w        #831                // double 0.9951980443443538d
    1371: dastore
    1372: dup
    1373: iconst_2
    1374: ldc2_w        #817                // double 0.9904191474668262d
    1377: dastore
    1378: dup
    1379: iconst_3
    1380: ldc2_w        #803                // double 0.9856631986401876d
    1383: dastore
    1384: dup
    1385: iconst_4
    1386: ldc2_w        #791                // double 0.980930087668915d
    1389: dastore
    1390: dup
    1391: iconst_5
    1392: ldc2_w        #777                // double 0.9762197048866396d
    1395: dastore
    1396: dup
    1397: bipush        6
    1399: ldc2_w        #763                // double 0.9715319411536059d
    1402: dastore
    1403: dup
    1404: bipush        7
    1406: ldc2_w        #757                // double 0.9668666878541423d
    1409: dastore
    1410: dup
    1411: bipush        8
    1413: ldc2_w        #751                // double 0.9622238368941451d
    1416: dastore
    1417: dup
    1418: bipush        9
    1420: ldc2_w        #745                // double 0.9576032806985737d
    1423: dastore
    1424: dup
    1425: bipush        10
    1427: ldc2_w        #743                // double 0.9530049122089577d
    1430: dastore
    1431: dup
    1432: bipush        11
    1434: ldc2_w        #737                // double 0.9484286248809173d
    1437: dastore
    1438: dup
    1439: bipush        12
    1441: ldc2_w        #733                // double 0.9438743126816935d
    1444: dastore
    1445: dup
    1446: bipush        13
    1448: ldc2_w        #725                // double 0.9393418700876924d
    1451: dastore
    1452: dup
    1453: bipush        14
    1455: ldc2_w        #723                // double 0.9348311920820395d
    1458: dastore
    1459: dup
    1460: bipush        15
    1462: ldc2_w        #717                // double 0.9303421741521466d
    1465: dastore
    1466: dup
    1467: bipush        16
    1469: ldc2_w        #713                // double 0.9258747122872905d
    1472: dastore
    1473: dup
    1474: bipush        17
    1476: ldc2_w        #711                // double 0.9214287029762026d
    1479: dastore
    1480: dup
    1481: bipush        18
    1483: ldc2_w        #705                // double 0.9170040432046712d
    1486: dastore
    1487: dup
    1488: bipush        19
    1490: ldc2_w        #699                // double 0.9126006304531541d
    1493: dastore
    1494: dup
    1495: bipush        20
    1497: ldc2_w        #695                // double 0.9082183626944031d
    1500: dastore
    1501: dup
    1502: bipush        21
    1504: ldc2_w        #691                // double 0.903857138391101d
    1507: dastore
    1508: dup
    1509: bipush        22
    1511: ldc2_w        #685                // double 0.8995168564935077d
    1514: dastore
    1515: dup
    1516: bipush        23
    1518: ldc2_w        #683                // double 0.8951974164371195d
    1521: dastore
    1522: dup
    1523: bipush        24
    1525: ldc2_w        #677                // double 0.8908987181403393d
    1528: dastore
    1529: dup
    1530: bipush        25
    1532: ldc2_w        #671                // double 0.8866206620021573d
    1535: dastore
    1536: dup
    1537: bipush        26
    1539: ldc2_w        #665                // double 0.8823631488998432d
    1542: dastore
    1543: dup
    1544: bipush        27
    1546: ldc2_w        #661                // double 0.8781260801866497d
    1549: dastore
    1550: dup
    1551: bipush        28
    1553: ldc2_w        #657                // double 0.8739093576895269d
    1556: dastore
    1557: dup
    1558: bipush        29
    1560: ldc2_w        #651                // double 0.8697128837068475d
    1563: dastore
    1564: dup
    1565: bipush        30
    1567: ldc2_w        #649                // double 0.8655365610061431d
    1570: dastore
    1571: dup
    1572: bipush        31
    1574: ldc2_w        #643                // double 0.8613802928218509d
    1577: dastore
    1578: aastore
    1579: dup
    1580: iconst_1
    1581: bipush        32
    1583: newarray       double
    1585: dup
    1586: iconst_0
    1587: dconst_1
    1588: dastore
    1589: dup
    1590: iconst_1
    1591: ldc2_w        #637                // double 0.8572439828530728d
    1594: dastore
    1595: dup
    1596: iconst_2
    1597: ldc2_w        #579                // double 0.7348672461377994d
    1600: dastore
    1601: dup
    1602: iconst_3
    1603: ldc2_w        #565                // double 0.6299605249474366d
    1606: dastore
    1607: dup
    1608: iconst_4
    1609: ldc2_w        #553                // double 0.540029869446153d
    1612: dastore
    1613: dup
    1614: iconst_5
    1615: ldc2_w        #537                // double 0.46293735614364523d
    1618: dastore
    1619: dup
    1620: bipush        6
    1622: ldc2_w        #523                // double 0.3968502629920499d
    1625: dastore
    1626: dup
    1627: bipush        7
    1629: ldc2_w        #517                // double 0.3401975000435942d
    1632: dastore
    1633: dup
    1634: bipush        8
    1636: ldc2_w        #511                // double 0.29163225989402913d
    1639: dastore
    1640: dup
    1641: bipush        9
    1643: ldc2_w        #505                // double 0.25d
    1646: dastore
    1647: dup
    1648: bipush        10
    1650: ldc2_w        #503                // double 0.2143109957132682d
    1653: dastore
    1654: dup
    1655: bipush        11
    1657: ldc2_w        #497                // double 0.18371681153444985d
    1660: dastore
    1661: dup
    1662: bipush        12
    1664: ldc2_w        #493                // double 0.15749013123685915d
    1667: dastore
    1668: dup
    1669: bipush        13
    1671: ldc2_w        #485                // double 0.13500746736153826d
    1674: dastore
    1675: dup
    1676: bipush        14
    1678: ldc2_w        #483                // double 0.11573433903591131d
    1681: dastore
    1682: dup
    1683: bipush        15
    1685: ldc2_w        #477                // double 0.09921256574801247d
    1688: dastore
    1689: dup
    1690: bipush        16
    1692: ldc2_w        #473                // double 0.08504937501089856d
    1695: dastore
    1696: dup
    1697: bipush        17
    1699: ldc2_w        #471                // double 0.07290806497350728d
    1702: dastore
    1703: dup
    1704: bipush        18
    1706: ldc2_w        #465                // double 0.0625d
    1709: dastore
    1710: dup
    1711: bipush        19
    1713: ldc2_w        #459                // double 0.05357774892831705d
    1716: dastore
    1717: dup
    1718: bipush        20
    1720: ldc2_w        #455                // double 0.04592920288361246d
    1723: dastore
    1724: dup
    1725: bipush        21
    1727: ldc2_w        #451                // double 0.03937253280921479d
    1730: dastore
    1731: dup
    1732: bipush        22
    1734: ldc2_w        #445                // double 0.033751866840384566d
    1737: dastore
    1738: dup
    1739: bipush        23
    1741: ldc2_w        #443                // double 0.028933584758977827d
    1744: dastore
    1745: dup
    1746: bipush        24
    1748: ldc2_w        #437                // double 0.02480314143700312d
    1751: dastore
    1752: dup
    1753: bipush        25
    1755: ldc2_w        #431                // double 0.02126234375272464d
    1758: dastore
    1759: dup
    1760: bipush        26
    1762: ldc2_w        #425                // double 0.01822701624337682d
    1765: dastore
    1766: dup
    1767: bipush        27
    1769: ldc2_w        #421                // double 0.015625d
    1772: dastore
    1773: dup
    1774: bipush        28
    1776: ldc2_w        #417                // double 0.013394437232079262d
    1779: dastore
    1780: dup
    1781: bipush        29
    1783: ldc2_w        #411                // double 0.011482300720903116d
    1786: dastore
    1787: dup
    1788: bipush        30
    1790: ldc2_w        #409                // double 0.009843133202303697d
    1793: dastore
    1794: dup
    1795: bipush        31
    1797: ldc2_w        #403                // double 0.008437966710096141d
    1800: dastore
    1801: aastore
    1802: dup
    1803: iconst_2
    1804: bipush        32
    1806: newarray       double
    1808: dup
    1809: iconst_0
    1810: dconst_1
    1811: dastore
    1812: dup
    1813: iconst_1
    1814: ldc2_w        #397                // double 0.007233396189744457d
    1817: dastore
    1818: dup
    1819: iconst_2
    1820: ldc2_w        #339                // double 5.232202043780962E-5d
    1823: dastore
    1824: dup
    1825: iconst_3
    1826: ldc2_w        #325                // double 3.784659032745837E-7d
    1829: dastore
    1830: dup
    1831: iconst_4
    1832: ldc2_w        #313                // double 2.7375938226945676E-9d
    1835: dastore
    1836: dup
    1837: iconst_5
    1838: ldc2_w        #299                // double 1.9802100726146846E-11d
    1841: dastore
    1842: dup
    1843: bipush        6
    1845: ldc2_w        #285                // double 1.4323643994144654E-13d
    1848: dastore
    1849: dup
    1850: bipush        7
    1852: ldc2_w        #281                // double 1.03608591890502E-15d
    1855: dastore
    1856: dup
    1857: bipush        8
    1859: ldc2_w        #275                // double 7.494419938055456E-18d
    1862: dastore
    1863: dup
    1864: bipush        9
    1866: ldc2_w        #269                // double 5.421010862427522E-20d
    1869: dastore
    1870: dup
    1871: bipush        10
    1873: ldc2_w        #267                // double 3.921231931684655E-22d
    1876: dastore
    1877: dup
    1878: bipush        11
    1880: ldc2_w        #261                // double 2.8363824113752076E-24d
    1883: dastore
    1884: dup
    1885: bipush        12
    1887: ldc2_w        #257                // double 2.0516677727099623E-26d
    1890: dastore
    1891: dup
    1892: bipush        13
    1894: ldc2_w        #251                // double 1.4840525849741735E-28d
    1897: dastore
    1898: dup
    1899: bipush        14
    1901: ldc2_w        #249                // double 1.0734740313532598E-30d
    1904: dastore
    1905: dup
    1906: bipush        15
    1908: ldc2_w        #243                // double 7.764862968180291E-33d
    1911: dastore
    1912: dup
    1913: bipush        16
    1915: ldc2_w        #239                // double 5.616633020792314E-35d
    1918: dastore
    1919: dup
    1920: bipush        17
    1922: ldc2_w        #237                // double 4.062733189179202E-37d
    1925: dastore
    1926: dup
    1927: bipush        18
    1929: ldc2_w        #231                // double 2.9387358770557188E-39d
    1932: dastore
    1933: dup
    1934: bipush        19
    1936: ldc2_w        #227                // double 2.125704089576017E-41d
    1939: dastore
    1940: dup
    1941: bipush        20
    1943: ldc2_w        #223                // double 1.537605986206337E-43d
    1946: dastore
    1947: dup
    1948: bipush        21
    1950: ldc2_w        #219                // double 1.1122113281953186E-45d
    1953: dastore
    1954: dup
    1955: bipush        22
    1957: ldc2_w        #213                // double 8.045065183558638E-48d
    1960: dastore
    1961: dup
    1962: bipush        23
    1964: ldc2_w        #211                // double 5.819314384499884E-50d
    1967: dastore
    1968: dup
    1969: bipush        24
    1971: ldc2_w        #205                // double 4.209340649576657E-52d
    1974: dastore
    1975: dup
    1976: bipush        25
    1978: ldc2_w        #199                // double 3.0447828615984243E-54d
    1981: dastore
    1982: dup
    1983: bipush        26
    1985: ldc2_w        #195                // double 2.2024120749685265E-56d
    1988: dastore
    1989: dup
    1990: bipush        27
    1992: ldc2_w        #191                // double 1.5930919111324523E-58d
    1995: dastore
    1996: dup
    1997: bipush        28
    1999: ldc2_w        #187                // double 1.1523464959898195E-60d
    2002: dastore
    2003: dup
    2004: bipush        29
    2006: ldc2_w        #181                // double 8.335378753358135E-63d
    2009: dastore
    2010: dup
    2011: bipush        30
    2013: ldc2_w        #179                // double 6.029309691461764E-65d
    2016: dastore
    2017: dup
    2018: bipush        31
    2020: ldc2_w        #173                // double 4.3612385749008845E-67d
    2023: dastore
    2024: aastore
    2025: putstatic     #873                // Field EXPONENTIAL_DISTRIBUTION_III_SPEED:[[D
    2028: iconst_3
    2029: anewarray     #849                // class "[D"
    2032: dup
    2033: iconst_0
    2034: bipush        32
    2036: newarray       double
    2038: dup
    2039: iconst_0
    2040: dconst_1
    2041: dastore
    2042: dup
    2043: iconst_1
    2044: ldc2_w        #825                // double 0.9930924954370359d
    2047: dastore
    2048: dup
    2049: iconst_2
    2050: ldc2_w        #807                // double 0.9862327044933592d
    2053: dastore
    2054: dup
    2055: iconst_3
    2056: ldc2_w        #787                // double 0.9794202975869268d
    2059: dastore
    2060: dup
    2061: iconst_4
    2062: ldc2_w        #767                // double 0.9726549474122855d
    2065: dastore
    2066: dup
    2067: iconst_5
    2068: ldc2_w        #753                // double 0.9659363289248456d
    2071: dastore
    2072: dup
    2073: bipush        6
    2075: ldc2_w        #749                // double 0.9592641193252643d
    2078: dastore
    2079: dup
    2080: bipush        7
    2082: ldc2_w        #741                // double 0.9526379980439373d
    2085: dastore
    2086: dup
    2087: bipush        8
    2089: ldc2_w        #735                // double 0.9460576467255959d
    2092: dastore
    2093: dup
    2094: bipush        9
    2096: ldc2_w        #727                // double 0.9395227492140118d
    2099: dastore
    2100: dup
    2101: bipush        10
    2103: ldc2_w        #719                // double 0.9330329915368074d
    2106: dastore
    2107: dup
    2108: bipush        11
    2110: ldc2_w        #715                // double 0.9265880618903709d
    2113: dastore
    2114: dup
    2115: bipush        12
    2117: ldc2_w        #709                // double 0.9201876506248751d
    2120: dastore
    2121: dup
    2122: bipush        13
    2124: ldc2_w        #703                // double 0.9138314502294005d
    2127: dastore
    2128: dup
    2129: bipush        14
    2131: ldc2_w        #693                // double 0.9075191553171609d
    2134: dastore
    2135: dup
    2136: bipush        15
    2138: ldc2_w        #687                // double 0.9012504626108302d
    2141: dastore
    2142: dup
    2143: bipush        16
    2145: ldc2_w        #681                // double 0.8950250709279725d
    2148: dastore
    2149: dup
    2150: bipush        17
    2152: ldc2_w        #675                // double 0.8888426811665702d
    2155: dastore
    2156: dup
    2157: bipush        18
    2159: ldc2_w        #667                // double 0.8827029962906549d
    2162: dastore
    2163: dup
    2164: bipush        19
    2166: ldc2_w        #659                // double 0.8766057213160351d
    2169: dastore
    2170: dup
    2171: bipush        20
    2173: ldc2_w        #653                // double 0.8705505632961241d
    2176: dastore
    2177: dup
    2178: bipush        21
    2180: ldc2_w        #645                // double 0.8645372313078652d
    2183: dastore
    2184: dup
    2185: bipush        22
    2187: ldc2_w        #639                // double 0.8585654364377537d
    2190: dastore
    2191: dup
    2192: bipush        23
    2194: ldc2_w        #635                // double 0.8526348917679567d
    2197: dastore
    2198: dup
    2199: bipush        24
    2201: ldc2_w        #631                // double 0.8467453123625271d
    2204: dastore
    2205: dup
    2206: bipush        25
    2208: ldc2_w        #627                // double 0.8408964152537145d
    2211: dastore
    2212: dup
    2213: bipush        26
    2215: ldc2_w        #623                // double 0.8350879194283694d
    2218: dastore
    2219: dup
    2220: bipush        27
    2222: ldc2_w        #619                // double 0.8293195458144417d
    2225: dastore
    2226: dup
    2227: bipush        28
    2229: ldc2_w        #615                // double 0.8235910172675731d
    2232: dastore
    2233: dup
    2234: bipush        29
    2236: ldc2_w        #611                // double 0.8179020585577811d
    2239: dastore
    2240: dup
    2241: bipush        30
    2243: ldc2_w        #607                // double 0.8122523963562355d
    2246: dastore
    2247: dup
    2248: bipush        31
    2250: ldc2_w        #601                // double 0.8066417592221263d
    2253: dastore
    2254: aastore
    2255: dup
    2256: iconst_1
    2257: bipush        32
    2259: newarray       double
    2261: dup
    2262: iconst_0
    2263: dconst_1
    2264: dastore
    2265: dup
    2266: iconst_1
    2267: ldc2_w        #599                // double 0.8010698775896221d
    2270: dastore
    2271: dup
    2272: iconst_2
    2273: ldc2_w        #569                // double 0.6417129487814521d
    2276: dastore
    2277: dup
    2278: iconst_3
    2279: ldc2_w        #549                // double 0.5140569133280333d
    2282: dastore
    2283: dup
    2284: iconst_4
    2285: ldc2_w        #527                // double 0.41179550863378656d
    2288: dastore
    2289: dup
    2290: iconst_5
    2291: ldc2_w        #513                // double 0.32987697769322355d
    2294: dastore
    2295: dup
    2296: bipush        6
    2298: ldc2_w        #509                // double 0.26425451014034507d
    2301: dastore
    2302: dup
    2303: bipush        7
    2305: ldc2_w        #501                // double 0.2116863280906318d
    2308: dastore
    2309: dup
    2310: bipush        8
    2312: ldc2_w        #495                // double 0.16957554093095897d
    2315: dastore
    2316: dup
    2317: bipush        9
    2319: ldc2_w        #487                // double 0.13584185781575725d
    2322: dastore
    2323: dup
    2324: bipush        10
    2326: ldc2_w        #479                // double 0.10881882041201552d
    2329: dastore
    2330: dup
    2331: bipush        11
    2333: ldc2_w        #475                // double 0.08717147914690034d
    2336: dastore
    2337: dup
    2338: bipush        12
    2340: ldc2_w        #469                // double 0.06983044612951375d
    2343: dastore
    2344: dup
    2345: bipush        13
    2347: ldc2_w        #463                // double 0.05593906693299828d
    2350: dastore
    2351: dup
    2352: bipush        14
    2354: ldc2_w        #453                // double 0.0448111015004946d
    2357: dastore
    2358: dup
    2359: bipush        15
    2361: ldc2_w        #447                // double 0.03589682359365735d
    2364: dastore
    2365: dup
    2366: bipush        16
    2368: ldc2_w        #441                // double 0.028755864082027346d
    2371: dastore
    2372: dup
    2373: bipush        17
    2375: ldc2_w        #435                // double 0.023035456520173456d
    2378: dastore
    2379: dup
    2380: bipush        18
    2382: ldc2_w        #427                // double 0.01845301033483641d
    2385: dastore
    2386: dup
    2387: bipush        19
    2389: ldc2_w        #419                // double 0.014782150730087436d
    2392: dastore
    2393: dup
    2394: bipush        20
    2396: ldc2_w        #413                // double 0.011841535675862484d
    2399: dastore
    2400: dup
    2401: bipush        21
    2403: ldc2_w        #405                // double 0.009485897534336304d
    2406: dastore
    2407: dup
    2408: bipush        22
    2410: ldc2_w        #399                // double 0.007598866776658481d
    2413: dastore
    2414: dup
    2415: bipush        23
    2417: ldc2_w        #395                // double 0.0060872232785976555d
    2420: dastore
    2421: dup
    2422: bipush        24
    2424: ldc2_w        #391                // double 0.004876291206646921d
    2427: dastore
    2428: dup
    2429: bipush        25
    2431: ldc2_w        #387                // double 0.00390625d
    2434: dastore
    2435: dup
    2436: bipush        26
    2438: ldc2_w        #383                // double 0.0031291792093344614d
    2441: dastore
    2442: dup
    2443: bipush        27
    2445: ldc2_w        #379                // double 0.0025066912061775474d
    2448: dastore
    2449: dup
    2450: bipush        28
    2452: ldc2_w        #375                // double 0.00200803481768763d
    2455: dastore
    2456: dup
    2457: bipush        29
    2459: ldc2_w        #371                // double 0.0016085762056007287d
    2462: dastore
    2463: dup
    2464: bipush        30
    2466: ldc2_w        #367                // double 0.0012885819441141545d
    2469: dastore
    2470: dup
    2471: bipush        31
    2473: ldc2_w        #361                // double 0.001032244180235723d
    2476: dastore
    2477: aastore
    2478: dup
    2479: iconst_2
    2480: bipush        32
    2482: newarray       double
    2484: dup
    2485: iconst_0
    2486: dconst_1
    2487: dastore
    2488: dup
    2489: iconst_1
    2490: ldc2_w        #359                // double 8.268997191040304E-4d
    2493: dastore
    2494: dup
    2495: iconst_2
    2496: ldc2_w        #329                // double 6.837631454543244E-7d
    2499: dastore
    2500: dup
    2501: iconst_3
    2502: ldc2_w        #309                // double 5.654035529098692E-10d
    2505: dastore
    2506: dup
    2507: iconst_4
    2508: ldc2_w        #289                // double 4.675320390815916E-13d
    2511: dastore
    2512: dup
    2513: iconst_5
    2514: ldc2_w        #277                // double 3.866021117887027E-16d
    2517: dastore
    2518: dup
    2519: bipush        6
    2521: ldc2_w        #273                // double 3.196811776431032E-19d
    2524: dastore
    2525: dup
    2526: bipush        7
    2528: ldc2_w        #265                // double 2.643442759959277E-22d
    2531: dastore
    2532: dup
    2533: bipush        8
    2535: ldc2_w        #259                // double 2.185862075677909E-25d
    2538: dastore
    2539: dup
    2540: bipush        9
    2542: ldc2_w        #253                // double 1.807488736378216E-28d
    2545: dastore
    2546: dup
    2547: bipush        10
    2549: ldc2_w        #245                // double 1.4946119283948456E-31d
    2552: dastore
    2553: dup
    2554: bipush        11
    2556: ldc2_w        #241                // double 1.2358941837592312E-34d
    2559: dastore
    2560: dup
    2561: bipush        12
    2563: ldc2_w        #235                // double 1.0219605533928131E-37d
    2566: dastore
    2567: dup
    2568: bipush        13
    2570: ldc2_w        #229                // double 8.450588945359167E-41d
    2573: dastore
    2574: dup
    2575: bipush        14
    2577: ldc2_w        #221                // double 6.987789625181121E-44d
    2580: dastore
    2581: dup
    2582: bipush        15
    2584: ldc2_w        #215                // double 5.778201278220326E-47d
    2587: dastore
    2588: dup
    2589: bipush        16
    2591: ldc2_w        #209                // double 4.777993013886938E-50d
    2594: dastore
    2595: dup
    2596: bipush        17
    2598: ldc2_w        #203                // double 3.9509210810641284E-53d
    2601: dastore
    2602: dup
    2603: bipush        18
    2605: ldc2_w        #197                // double 3.26701553213412E-56d
    2608: dastore
    2609: dup
    2610: bipush        19
    2612: ldc2_w        #189                // double 2.701494225830208E-59d
    2615: dastore
    2616: dup
    2617: bipush        20
    2619: ldc2_w        #183                // double 2.2338648165001596E-62d
    2622: dastore
    2623: dup
    2624: bipush        21
    2626: ldc2_w        #175                // double 1.8471821892803583E-65d
    2629: dastore
    2630: dup
    2631: bipush        22
    2633: ldc2_w        #171                // double 1.5274344334498962E-68d
    2636: dastore
    2637: dup
    2638: bipush        23
    2640: ldc2_w        #167                // double 1.263035103969543E-71d
    2643: dastore
    2644: dup
    2645: bipush        24
    2647: ldc2_w        #163                // double 1.044403372690945E-74d
    2650: dastore
    2651: dup
    2652: bipush        25
    2654: ldc2_w        #159                // double 8.636168555094445E-78d
    2657: dastore
    2658: dup
    2659: bipush        26
    2661: ldc2_w        #155                // double 7.1412453523426565E-81d
    2664: dastore
    2665: dup
    2666: bipush        27
    2668: ldc2_w        #153                // double 5.905093775905105E-84d
    2671: dastore
    2672: dup
    2673: bipush        28
    2675: ldc2_w        #149                // double 4.882920384578891E-87d
    2678: dastore
    2679: dup
    2680: bipush        29
    2682: ldc2_w        #145                // double 4.037685494415629E-90d
    2685: dastore
    2686: dup
    2687: bipush        30
    2689: ldc2_w        #141                // double 3.3387610011627014E-93d
    2692: dastore
    2693: dup
    2694: bipush        31
    2696: ldc2_w        #137                // double 2.760820534016929E-96d
    2699: dastore
    2700: aastore
    2701: putstatic     #874                // Field EXPONENTIAL_DISTRIBUTION_P:[[D
    2704: bipush        12
    2706: anewarray     #850                // class "[J"
    2709: dup
    2710: iconst_0
    2711: iconst_2
    2712: newarray       long
    2714: dup
    2715: iconst_0
    2716: ldc2_w        #99                 // long 144115188075855872l
    2719: lastore
    2720: dup
    2721: iconst_1
    2722: lconst_0
    2723: lastore
    2724: aastore
    2725: dup
    2726: iconst_1
    2727: iconst_2
    2728: newarray       long
    2730: dup
    2731: iconst_0
    2732: ldc2_w        #107                // long 216172782113783808l
    2735: lastore
    2736: dup
    2737: iconst_1
    2738: lconst_0
    2739: lastore
    2740: aastore
    2741: dup
    2742: iconst_2
    2743: iconst_2
    2744: newarray       long
    2746: dup
    2747: iconst_0
    2748: ldc2_w        #109                // long 225179981368524800l
    2751: lastore
    2752: dup
    2753: iconst_1
    2754: lconst_0
    2755: lastore
    2756: aastore
    2757: dup
    2758: iconst_3
    2759: iconst_2
    2760: newarray       long
    2762: dup
    2763: iconst_0
    2764: ldc2_w        #111                // long 225461456345235456l
    2767: lastore
    2768: dup
    2769: iconst_1
    2770: lconst_0
    2771: lastore
    2772: aastore
    2773: dup
    2774: iconst_4
    2775: iconst_2
    2776: newarray       long
    2778: dup
    2779: iconst_0
    2780: ldc2_w        #113                // long 225463655368491008l
    2783: lastore
    2784: dup
    2785: iconst_1
    2786: lconst_0
    2787: lastore
    2788: aastore
    2789: dup
    2790: iconst_5
    2791: iconst_2
    2792: newarray       long
    2794: dup
    2795: iconst_0
    2796: ldc2_w        #115                // long 225463659663458304l
    2799: lastore
    2800: dup
    2801: iconst_1
    2802: lconst_0
    2803: lastore
    2804: aastore
    2805: dup
    2806: bipush        6
    2808: iconst_2
    2809: newarray       long
    2811: dup
    2812: iconst_0
    2813: ldc2_w        #117                // long 225463659665555456l
    2816: lastore
    2817: dup
    2818: iconst_1
    2819: lconst_0
    2820: lastore
    2821: aastore
    2822: dup
    2823: bipush        7
    2825: iconst_2
    2826: newarray       long
    2828: dup
    2829: iconst_0
    2830: ldc2_w        #119                // long 225463659665555712l
    2833: lastore
    2834: dup
    2835: iconst_1
    2836: lconst_0
    2837: lastore
    2838: aastore
    2839: dup
    2840: bipush        8
    2842: iconst_2
    2843: newarray       long
    2845: dup
    2846: iconst_0
    2847: ldc2_w        #119                // long 225463659665555712l
    2850: lastore
    2851: dup
    2852: iconst_1
    2853: ldc2_w        #99                 // long 144115188075855872l
    2856: lastore
    2857: aastore
    2858: dup
    2859: bipush        9
    2861: iconst_2
    2862: newarray       long
    2864: dup
    2865: iconst_0
    2866: ldc2_w        #119                // long 225463659665555712l
    2869: lastore
    2870: dup
    2871: iconst_1
    2872: ldc2_w        #101                // long 144116287587483648l
    2875: lastore
    2876: aastore
    2877: dup
    2878: bipush        10
    2880: iconst_2
    2881: newarray       long
    2883: dup
    2884: iconst_0
    2885: ldc2_w        #119                // long 225463659665555712l
    2888: lastore
    2889: dup
    2890: iconst_1
    2891: ldc2_w        #103                // long 144116287589580800l
    2894: lastore
    2895: aastore
    2896: dup
    2897: bipush        11
    2899: iconst_2
    2900: newarray       long
    2902: dup
    2903: iconst_0
    2904: ldc2_w        #119                // long 225463659665555712l
    2907: lastore
    2908: dup
    2909: iconst_1
    2910: ldc2_w        #105                // long 144116287589580801l
    2913: lastore
    2914: aastore
    2915: putstatic     #875                // Field CUMULATIVE_DISTRIBUTION_TABLE_I:[[J
    2918: bipush        14
    2920: anewarray     #850                // class "[J"
    2923: dup
    2924: iconst_0
    2925: iconst_3
    2926: newarray       long
    2928: dup
    2929: iconst_0
    2930: ldc2_w        #69                 // long 2199023255552l
    2933: lastore
    2934: dup
    2935: iconst_1
    2936: lconst_0
    2937: lastore
    2938: dup
    2939: iconst_2
    2940: lconst_0
    2941: lastore
    2942: aastore
    2943: dup
    2944: iconst_1
    2945: iconst_3
    2946: newarray       long
    2948: dup
    2949: iconst_0
    2950: ldc2_w        #71                 // long 3298534883328l
    2953: lastore
    2954: dup
    2955: iconst_1
    2956: lconst_0
    2957: lastore
    2958: dup
    2959: iconst_2
    2960: lconst_0
    2961: lastore
    2962: aastore
    2963: dup
    2964: iconst_2
    2965: iconst_3
    2966: newarray       long
    2968: dup
    2969: iconst_0
    2970: ldc2_w        #73                 // long 3435973836800l
    2973: lastore
    2974: dup
    2975: iconst_1
    2976: lconst_0
    2977: lastore
    2978: dup
    2979: iconst_2
    2980: lconst_0
    2981: lastore
    2982: aastore
    2983: dup
    2984: iconst_3
    2985: iconst_3
    2986: newarray       long
    2988: dup
    2989: iconst_0
    2990: ldc2_w        #75                 // long 3440268804096l
    2993: lastore
    2994: dup
    2995: iconst_1
    2996: lconst_0
    2997: lastore
    2998: dup
    2999: iconst_2
    3000: lconst_0
    3001: lastore
    3002: aastore
    3003: dup
    3004: iconst_4
    3005: iconst_3
    3006: newarray       long
    3008: dup
    3009: iconst_0
    3010: ldc2_w        #77                 // long 3440302358528l
    3013: lastore
    3014: dup
    3015: iconst_1
    3016: lconst_0
    3017: lastore
    3018: dup
    3019: iconst_2
    3020: lconst_0
    3021: lastore
    3022: aastore
    3023: dup
    3024: iconst_5
    3025: iconst_3
    3026: newarray       long
    3028: dup
    3029: iconst_0
    3030: ldc2_w        #79                 // long 3440302424064l
    3033: lastore
    3034: dup
    3035: iconst_1
    3036: lconst_0
    3037: lastore
    3038: dup
    3039: iconst_2
    3040: lconst_0
    3041: lastore
    3042: aastore
    3043: dup
    3044: bipush        6
    3046: iconst_3
    3047: newarray       long
    3049: dup
    3050: iconst_0
    3051: ldc2_w        #81                 // long 3440302424096l
    3054: lastore
    3055: dup
    3056: iconst_1
    3057: lconst_0
    3058: lastore
    3059: dup
    3060: iconst_2
    3061: lconst_0
    3062: lastore
    3063: aastore
    3064: dup
    3065: bipush        7
    3067: iconst_3
    3068: newarray       long
    3070: dup
    3071: iconst_0
    3072: ldc2_w        #81                 // long 3440302424096l
    3075: lastore
    3076: dup
    3077: iconst_1
    3078: ldc2_w        #91                 // long 72057594037927936l
    3081: lastore
    3082: dup
    3083: iconst_2
    3084: lconst_0
    3085: lastore
    3086: aastore
    3087: dup
    3088: bipush        8
    3090: iconst_3
    3091: newarray       long
    3093: dup
    3094: iconst_0
    3095: ldc2_w        #81                 // long 3440302424096l
    3098: lastore
    3099: dup
    3100: iconst_1
    3101: ldc2_w        #93                 // long 72059793061183488l
    3104: lastore
    3105: dup
    3106: iconst_2
    3107: lconst_0
    3108: lastore
    3109: aastore
    3110: dup
    3111: bipush        9
    3113: iconst_3
    3114: newarray       long
    3116: dup
    3117: iconst_0
    3118: ldc2_w        #81                 // long 3440302424096l
    3121: lastore
    3122: dup
    3123: iconst_1
    3124: ldc2_w        #95                 // long 72059793077960704l
    3127: lastore
    3128: dup
    3129: iconst_2
    3130: lconst_0
    3131: lastore
    3132: aastore
    3133: dup
    3134: bipush        10
    3136: iconst_3
    3137: newarray       long
    3139: dup
    3140: iconst_0
    3141: ldc2_w        #81                 // long 3440302424096l
    3144: lastore
    3145: dup
    3146: iconst_1
    3147: ldc2_w        #97                 // long 72059793077960736l
    3150: lastore
    3151: dup
    3152: iconst_2
    3153: lconst_0
    3154: lastore
    3155: aastore
    3156: dup
    3157: bipush        11
    3159: iconst_3
    3160: newarray       long
    3162: dup
    3163: iconst_0
    3164: ldc2_w        #81                 // long 3440302424096l
    3167: lastore
    3168: dup
    3169: iconst_1
    3170: ldc2_w        #97                 // long 72059793077960736l
    3173: lastore
    3174: dup
    3175: iconst_2
    3176: ldc2_w        #85                 // long 281474976710656l
    3179: lastore
    3180: aastore
    3181: dup
    3182: bipush        12
    3184: iconst_3
    3185: newarray       long
    3187: dup
    3188: iconst_0
    3189: ldc2_w        #81                 // long 3440302424096l
    3192: lastore
    3193: dup
    3194: iconst_1
    3195: ldc2_w        #97                 // long 72059793077960736l
    3198: lastore
    3199: dup
    3200: iconst_2
    3201: ldc2_w        #87                 // long 281475010265088l
    3204: lastore
    3205: aastore
    3206: dup
    3207: bipush        13
    3209: iconst_3
    3210: newarray       long
    3212: dup
    3213: iconst_0
    3214: ldc2_w        #81                 // long 3440302424096l
    3217: lastore
    3218: dup
    3219: iconst_1
    3220: ldc2_w        #97                 // long 72059793077960736l
    3223: lastore
    3224: dup
    3225: iconst_2
    3226: ldc2_w        #89                 // long 281475010265089l
    3229: lastore
    3230: aastore
    3231: putstatic     #876                // Field CUMULATIVE_DISTRIBUTION_TABLE_III:[[J
    3234: return
}
