public interface org.bouncycastle.crypto.tls.TlsSigner {
  public abstract void init(org.bouncycastle.crypto.tls.TlsContext);

  public abstract byte[] generateRawSignature(org.bouncycastle.crypto.params.AsymmetricKeyParameter, byte[]) throws org.bouncycastle.crypto.CryptoException;

  public abstract byte[] generateRawSignature(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm, org.bouncycastle.crypto.params.AsymmetricKeyParameter, byte[]) throws org.bouncycastle.crypto.CryptoException;

  public abstract boolean verifyRawSignature(byte[], org.bouncycastle.crypto.params.AsymmetricKeyParameter, byte[]) throws org.bouncycastle.crypto.CryptoException;

  public abstract boolean verifyRawSignature(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm, byte[], org.bouncycastle.crypto.params.AsymmetricKeyParameter, byte[]) throws org.bouncycastle.crypto.CryptoException;

  public abstract org.bouncycastle.crypto.Signer createSigner(org.bouncycastle.crypto.params.AsymmetricKeyParameter);

  public abstract org.bouncycastle.crypto.Signer createSigner(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm, org.bouncycastle.crypto.params.AsymmetricKeyParameter);

  public abstract org.bouncycastle.crypto.Signer createVerifyer(org.bouncycastle.crypto.params.AsymmetricKeyParameter);

  public abstract org.bouncycastle.crypto.Signer createVerifyer(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm, org.bouncycastle.crypto.params.AsymmetricKeyParameter);

  public abstract boolean isValidPublicKey(org.bouncycastle.crypto.params.AsymmetricKeyParameter);
}
