Compiled from "Cache.java"
public interface org.springframework.cache.Cache {
  public abstract java.lang.String getName();

  public abstract java.lang.Object getNativeCache();

  public abstract org.springframework.cache.Cache$ValueWrapper get(java.lang.Object);

  public abstract <T> T get(java.lang.Object, java.lang.Class<T>);

  public abstract <T> T get(java.lang.Object, java.util.concurrent.Callable<T>);

  public abstract void put(java.lang.Object, java.lang.Object);

  public default org.springframework.cache.Cache$ValueWrapper putIfAbsent(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #1,  2            // InterfaceMethod get:(Ljava/lang/Object;)Lorg/springframework/cache/Cache$ValueWrapper;
       7: astore_3
       8: aload_3
       9: ifnonnull     20
      12: aload_0
      13: aload_1
      14: aload_2
      15: invokeinterface #2,  3            // InterfaceMethod put:(Ljava/lang/Object;Ljava/lang/Object;)V
      20: aload_3
      21: areturn

  public abstract void evict(java.lang.Object);

  public default boolean evictIfPresent(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #3,  2            // InterfaceMethod evict:(Ljava/lang/Object;)V
       7: iconst_0
       8: ireturn

  public abstract void clear();

  public default boolean invalidate();
    Code:
       0: aload_0
       1: invokeinterface #4,  1            // InterfaceMethod clear:()V
       6: iconst_0
       7: ireturn
}
