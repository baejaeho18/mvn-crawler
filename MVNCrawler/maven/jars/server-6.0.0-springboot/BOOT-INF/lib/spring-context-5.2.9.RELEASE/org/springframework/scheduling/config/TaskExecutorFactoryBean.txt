Compiled from "TaskExecutorFactoryBean.java"
public class org.springframework.scheduling.config.TaskExecutorFactoryBean implements org.springframework.beans.factory.FactoryBean<org.springframework.core.task.TaskExecutor>, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {
  private java.lang.String poolSize;

  private java.lang.Integer queueCapacity;

  private java.util.concurrent.RejectedExecutionHandler rejectedExecutionHandler;

  private java.lang.Integer keepAliveSeconds;

  private java.lang.String beanName;

  private org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor target;

  public org.springframework.scheduling.config.TaskExecutorFactoryBean();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public void setPoolSize(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field poolSize:Ljava/lang/String;
       5: return

  public void setQueueCapacity(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #3                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       5: putfield      #4                  // Field queueCapacity:Ljava/lang/Integer;
       8: return

  public void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field rejectedExecutionHandler:Ljava/util/concurrent/RejectedExecutionHandler;
       5: return

  public void setKeepAliveSeconds(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #3                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       5: putfield      #6                  // Field keepAliveSeconds:Ljava/lang/Integer;
       8: return

  public void setBeanName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field beanName:Ljava/lang/String;
       5: return

  public void afterPropertiesSet();
    Code:
       0: new           #8                  // class org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor
       3: dup
       4: invokespecial #9                  // Method org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_1
      10: invokespecial #10                 // Method determinePoolSizeRange:(Lorg/springframework/scheduling/concurrent/ThreadPoolTaskExecutor;)V
      13: aload_0
      14: getfield      #4                  // Field queueCapacity:Ljava/lang/Integer;
      17: ifnull        31
      20: aload_1
      21: aload_0
      22: getfield      #4                  // Field queueCapacity:Ljava/lang/Integer;
      25: invokevirtual #11                 // Method java/lang/Integer.intValue:()I
      28: invokevirtual #12                 // Method org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.setQueueCapacity:(I)V
      31: aload_0
      32: getfield      #6                  // Field keepAliveSeconds:Ljava/lang/Integer;
      35: ifnull        49
      38: aload_1
      39: aload_0
      40: getfield      #6                  // Field keepAliveSeconds:Ljava/lang/Integer;
      43: invokevirtual #11                 // Method java/lang/Integer.intValue:()I
      46: invokevirtual #13                 // Method org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.setKeepAliveSeconds:(I)V
      49: aload_0
      50: getfield      #5                  // Field rejectedExecutionHandler:Ljava/util/concurrent/RejectedExecutionHandler;
      53: ifnull        64
      56: aload_1
      57: aload_0
      58: getfield      #5                  // Field rejectedExecutionHandler:Ljava/util/concurrent/RejectedExecutionHandler;
      61: invokevirtual #14                 // Method org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.setRejectedExecutionHandler:(Ljava/util/concurrent/RejectedExecutionHandler;)V
      64: aload_0
      65: getfield      #7                  // Field beanName:Ljava/lang/String;
      68: ifnull        97
      71: aload_1
      72: new           #15                 // class java/lang/StringBuilder
      75: dup
      76: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      79: aload_0
      80: getfield      #7                  // Field beanName:Ljava/lang/String;
      83: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      86: ldc           #18                 // String -
      88: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      94: invokevirtual #20                 // Method org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.setThreadNamePrefix:(Ljava/lang/String;)V
      97: aload_1
      98: invokevirtual #21                 // Method org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.afterPropertiesSet:()V
     101: aload_0
     102: aload_1
     103: putfield      #22                 // Field target:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskExecutor;
     106: return

  private void determinePoolSizeRange(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor);
    Code:
       0: aload_0
       1: getfield      #2                  // Field poolSize:Ljava/lang/String;
       4: invokestatic  #23                 // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
       7: ifeq          173
      10: aload_0
      11: getfield      #2                  // Field poolSize:Ljava/lang/String;
      14: bipush        45
      16: invokevirtual #24                 // Method java/lang/String.indexOf:(I)I
      19: istore        4
      21: iload         4
      23: iconst_m1
      24: if_icmpeq     102
      27: aload_0
      28: getfield      #2                  // Field poolSize:Ljava/lang/String;
      31: iconst_0
      32: iload         4
      34: invokevirtual #25                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      37: invokestatic  #26                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      40: istore_2
      41: aload_0
      42: getfield      #2                  // Field poolSize:Ljava/lang/String;
      45: iload         4
      47: iconst_1
      48: iadd
      49: invokevirtual #27                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      52: invokestatic  #26                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      55: istore_3
      56: iload_2
      57: iload_3
      58: if_icmple     71
      61: new           #28                 // class java/lang/IllegalArgumentException
      64: dup
      65: ldc           #29                 // String Lower bound of pool-size range must not exceed the upper bound
      67: invokespecial #30                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      70: athrow
      71: aload_0
      72: getfield      #4                  // Field queueCapacity:Ljava/lang/Integer;
      75: ifnonnull     123
      78: iload_2
      79: ifne          92
      82: aload_1
      83: iconst_1
      84: invokevirtual #31                 // Method org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.setAllowCoreThreadTimeOut:(Z)V
      87: iload_3
      88: istore_2
      89: goto          123
      92: new           #28                 // class java/lang/IllegalArgumentException
      95: dup
      96: ldc           #32                 // String A non-zero lower bound for the size range requires a queue-capacity value
      98: invokespecial #30                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     101: athrow
     102: aload_0
     103: getfield      #2                  // Field poolSize:Ljava/lang/String;
     106: invokestatic  #33                 // Method java/lang/Integer.valueOf:(Ljava/lang/String;)Ljava/lang/Integer;
     109: astore        5
     111: aload         5
     113: invokevirtual #11                 // Method java/lang/Integer.intValue:()I
     116: istore_2
     117: aload         5
     119: invokevirtual #11                 // Method java/lang/Integer.intValue:()I
     122: istore_3
     123: aload_1
     124: iload_2
     125: invokevirtual #34                 // Method org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.setCorePoolSize:(I)V
     128: aload_1
     129: iload_3
     130: invokevirtual #35                 // Method org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.setMaxPoolSize:(I)V
     133: goto          173
     136: astore_2
     137: new           #28                 // class java/lang/IllegalArgumentException
     140: dup
     141: new           #15                 // class java/lang/StringBuilder
     144: dup
     145: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
     148: ldc           #37                 // String Invalid pool-size value [
     150: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     153: aload_0
     154: getfield      #2                  // Field poolSize:Ljava/lang/String;
     157: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     160: ldc           #38                 // String ]: only single maximum integer (e.g. \"5\") and minimum-maximum range (e.g. \"3-5\") are supported
     162: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     165: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     168: aload_2
     169: invokespecial #39                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     172: athrow
     173: return
    Exception table:
       from    to  target type
          10   133   136   Class java/lang/NumberFormatException

  public org.springframework.core.task.TaskExecutor getObject();
    Code:
       0: aload_0
       1: getfield      #22                 // Field target:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskExecutor;
       4: areturn

  public java.lang.Class<? extends org.springframework.core.task.TaskExecutor> getObjectType();
    Code:
       0: aload_0
       1: getfield      #22                 // Field target:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskExecutor;
       4: ifnull        17
       7: aload_0
       8: getfield      #22                 // Field target:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskExecutor;
      11: invokevirtual #40                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      14: goto          19
      17: ldc           #8                  // class org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor
      19: areturn

  public boolean isSingleton();
    Code:
       0: iconst_1
       1: ireturn

  public void destroy();
    Code:
       0: aload_0
       1: getfield      #22                 // Field target:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskExecutor;
       4: ifnull        14
       7: aload_0
       8: getfield      #22                 // Field target:Lorg/springframework/scheduling/concurrent/ThreadPoolTaskExecutor;
      11: invokevirtual #41                 // Method org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.destroy:()V
      14: return

  public java.lang.Object getObject() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #42                 // Method getObject:()Lorg/springframework/core/task/TaskExecutor;
       4: areturn
}
