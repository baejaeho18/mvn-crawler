Compiled from "ConcurrentMapCache.java"
public class org.springframework.cache.concurrent.ConcurrentMapCache extends org.springframework.cache.support.AbstractValueAdaptingCache {
  private final java.lang.String name;

  private final java.util.concurrent.ConcurrentMap<java.lang.Object, java.lang.Object> store;

  private final org.springframework.core.serializer.support.SerializationDelegate serialization;

  public org.springframework.cache.concurrent.ConcurrentMapCache(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: new           #1                  // class java/util/concurrent/ConcurrentHashMap
       5: dup
       6: sipush        256
       9: invokespecial #2                  // Method java/util/concurrent/ConcurrentHashMap."<init>":(I)V
      12: iconst_1
      13: invokespecial #3                  // Method "<init>":(Ljava/lang/String;Ljava/util/concurrent/ConcurrentMap;Z)V
      16: return

  public org.springframework.cache.concurrent.ConcurrentMapCache(java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: new           #1                  // class java/util/concurrent/ConcurrentHashMap
       5: dup
       6: sipush        256
       9: invokespecial #2                  // Method java/util/concurrent/ConcurrentHashMap."<init>":(I)V
      12: iload_2
      13: invokespecial #3                  // Method "<init>":(Ljava/lang/String;Ljava/util/concurrent/ConcurrentMap;Z)V
      16: return

  public org.springframework.cache.concurrent.ConcurrentMapCache(java.lang.String, java.util.concurrent.ConcurrentMap<java.lang.Object, java.lang.Object>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: aconst_null
       5: invokespecial #4                  // Method "<init>":(Ljava/lang/String;Ljava/util/concurrent/ConcurrentMap;ZLorg/springframework/core/serializer/support/SerializationDelegate;)V
       8: return

  protected org.springframework.cache.concurrent.ConcurrentMapCache(java.lang.String, java.util.concurrent.ConcurrentMap<java.lang.Object, java.lang.Object>, boolean, org.springframework.core.serializer.support.SerializationDelegate);
    Code:
       0: aload_0
       1: iload_3
       2: invokespecial #5                  // Method org/springframework/cache/support/AbstractValueAdaptingCache."<init>":(Z)V
       5: aload_1
       6: ldc           #6                  // String Name must not be null
       8: invokestatic  #7                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      11: aload_2
      12: ldc           #8                  // String Store must not be null
      14: invokestatic  #7                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      17: aload_0
      18: aload_1
      19: putfield      #9                  // Field name:Ljava/lang/String;
      22: aload_0
      23: aload_2
      24: putfield      #10                 // Field store:Ljava/util/concurrent/ConcurrentMap;
      27: aload_0
      28: aload         4
      30: putfield      #11                 // Field serialization:Lorg/springframework/core/serializer/support/SerializationDelegate;
      33: return

  public final boolean isStoreByValue();
    Code:
       0: aload_0
       1: getfield      #11                 // Field serialization:Lorg/springframework/core/serializer/support/SerializationDelegate;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public final java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #9                  // Field name:Ljava/lang/String;
       4: areturn

  public final java.util.concurrent.ConcurrentMap<java.lang.Object, java.lang.Object> getNativeCache();
    Code:
       0: aload_0
       1: getfield      #10                 // Field store:Ljava/util/concurrent/ConcurrentMap;
       4: areturn

  protected java.lang.Object lookup(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #10                 // Field store:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: areturn

  public <T> T get(java.lang.Object, java.util.concurrent.Callable<T>);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #10                 // Field store:Ljava/util/concurrent/ConcurrentMap;
       5: aload_1
       6: aload_0
       7: aload_2
       8: aload_1
       9: invokedynamic #13,  0             // InvokeDynamic #0:apply:(Lorg/springframework/cache/concurrent/ConcurrentMapCache;Ljava/util/concurrent/Callable;Ljava/lang/Object;)Ljava/util/function/Function;
      14: invokeinterface #14,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      19: invokevirtual #15                 // Method fromStoreValue:(Ljava/lang/Object;)Ljava/lang/Object;
      22: areturn

  public void put(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #10                 // Field store:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: aload_0
       6: aload_2
       7: invokevirtual #16                 // Method toStoreValue:(Ljava/lang/Object;)Ljava/lang/Object;
      10: invokeinterface #17,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      15: pop
      16: return

  public org.springframework.cache.Cache$ValueWrapper putIfAbsent(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #10                 // Field store:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: aload_0
       6: aload_2
       7: invokevirtual #16                 // Method toStoreValue:(Ljava/lang/Object;)Ljava/lang/Object;
      10: invokeinterface #18,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      15: astore_3
      16: aload_0
      17: aload_3
      18: invokevirtual #19                 // Method toValueWrapper:(Ljava/lang/Object;)Lorg/springframework/cache/Cache$ValueWrapper;
      21: areturn

  public void evict(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #10                 // Field store:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #20,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: return

  public boolean evictIfPresent(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #10                 // Field store:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #20,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: ifnull        17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #10                 // Field store:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #21,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.clear:()V
       9: return

  public boolean invalidate();
    Code:
       0: aload_0
       1: getfield      #10                 // Field store:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #22,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.isEmpty:()Z
       9: ifne          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: istore_1
      18: aload_0
      19: getfield      #10                 // Field store:Ljava/util/concurrent/ConcurrentMap;
      22: invokeinterface #21,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.clear:()V
      27: iload_1
      28: ireturn

  protected java.lang.Object toStoreValue(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #23                 // Method org/springframework/cache/support/AbstractValueAdaptingCache.toStoreValue:(Ljava/lang/Object;)Ljava/lang/Object;
       5: astore_2
       6: aload_0
       7: getfield      #11                 // Field serialization:Lorg/springframework/core/serializer/support/SerializationDelegate;
      10: ifnull        56
      13: aload_0
      14: getfield      #11                 // Field serialization:Lorg/springframework/core/serializer/support/SerializationDelegate;
      17: aload_2
      18: invokevirtual #24                 // Method org/springframework/core/serializer/support/SerializationDelegate.serializeToByteArray:(Ljava/lang/Object;)[B
      21: areturn
      22: astore_3
      23: new           #26                 // class java/lang/IllegalArgumentException
      26: dup
      27: new           #27                 // class java/lang/StringBuilder
      30: dup
      31: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      34: ldc           #29                 // String Failed to serialize cache value \'
      36: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_1
      40: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      43: ldc           #32                 // String \'. Does it implement Serializable?
      45: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: aload_3
      52: invokespecial #34                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      55: athrow
      56: aload_2
      57: areturn
    Exception table:
       from    to  target type
          13    21    22   Class java/lang/Throwable

  protected java.lang.Object fromStoreValue(java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        64
       4: aload_0
       5: getfield      #11                 // Field serialization:Lorg/springframework/core/serializer/support/SerializationDelegate;
       8: ifnull        64
      11: aload_0
      12: aload_0
      13: getfield      #11                 // Field serialization:Lorg/springframework/core/serializer/support/SerializationDelegate;
      16: aload_1
      17: checkcast     #35                 // class "[B"
      20: checkcast     #35                 // class "[B"
      23: invokevirtual #36                 // Method org/springframework/core/serializer/support/SerializationDelegate.deserializeFromByteArray:([B)Ljava/lang/Object;
      26: invokespecial #37                 // Method org/springframework/cache/support/AbstractValueAdaptingCache.fromStoreValue:(Ljava/lang/Object;)Ljava/lang/Object;
      29: areturn
      30: astore_2
      31: new           #26                 // class java/lang/IllegalArgumentException
      34: dup
      35: new           #27                 // class java/lang/StringBuilder
      38: dup
      39: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      42: ldc           #38                 // String Failed to deserialize cache value \'
      44: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: aload_1
      48: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      51: ldc           #39                 // String \'
      53: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: aload_2
      60: invokespecial #34                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      63: athrow
      64: aload_0
      65: aload_1
      66: invokespecial #37                 // Method org/springframework/cache/support/AbstractValueAdaptingCache.fromStoreValue:(Ljava/lang/Object;)Ljava/lang/Object;
      69: areturn
    Exception table:
       from    to  target type
          11    29    30   Class java/lang/Throwable

  public java.lang.Object getNativeCache();
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method getNativeCache:()Ljava/util/concurrent/ConcurrentMap;
       4: areturn

  private java.lang.Object lambda$get$0(java.util.concurrent.Callable, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #41,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
       7: invokevirtual #16                 // Method toStoreValue:(Ljava/lang/Object;)Ljava/lang/Object;
      10: areturn
      11: astore        4
      13: new           #42                 // class org/springframework/cache/Cache$ValueRetrievalException
      16: dup
      17: aload_2
      18: aload_1
      19: aload         4
      21: invokespecial #43                 // Method org/springframework/cache/Cache$ValueRetrievalException."<init>":(Ljava/lang/Object;Ljava/util/concurrent/Callable;Ljava/lang/Throwable;)V
      24: athrow
    Exception table:
       from    to  target type
           0    10    11   Class java/lang/Throwable
}
