Compiled from "NoOpCache.java"
public class org.springframework.cache.support.NoOpCache implements org.springframework.cache.Cache {
  private final java.lang.String name;

  public org.springframework.cache.support.NoOpCache(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String Cache name must not be null
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: putfield      #4                  // Field name:Ljava/lang/String;
      15: return

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #4                  // Field name:Ljava/lang/String;
       4: areturn

  public java.lang.Object getNativeCache();
    Code:
       0: aload_0
       1: areturn

  public org.springframework.cache.Cache$ValueWrapper get(java.lang.Object);
    Code:
       0: aconst_null
       1: areturn

  public <T> T get(java.lang.Object, java.lang.Class<T>);
    Code:
       0: aconst_null
       1: areturn

  public <T> T get(java.lang.Object, java.util.concurrent.Callable<T>);
    Code:
       0: aload_2
       1: invokeinterface #5,  1            // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
       6: areturn
       7: astore_3
       8: new           #7                  // class org/springframework/cache/Cache$ValueRetrievalException
      11: dup
      12: aload_1
      13: aload_2
      14: aload_3
      15: invokespecial #8                  // Method org/springframework/cache/Cache$ValueRetrievalException."<init>":(Ljava/lang/Object;Ljava/util/concurrent/Callable;Ljava/lang/Throwable;)V
      18: athrow
    Exception table:
       from    to  target type
           0     6     7   Class java/lang/Exception

  public void put(java.lang.Object, java.lang.Object);
    Code:
       0: return

  public org.springframework.cache.Cache$ValueWrapper putIfAbsent(java.lang.Object, java.lang.Object);
    Code:
       0: aconst_null
       1: areturn

  public void evict(java.lang.Object);
    Code:
       0: return

  public boolean evictIfPresent(java.lang.Object);
    Code:
       0: iconst_0
       1: ireturn

  public void clear();
    Code:
       0: return

  public boolean invalidate();
    Code:
       0: iconst_0
       1: ireturn
}
