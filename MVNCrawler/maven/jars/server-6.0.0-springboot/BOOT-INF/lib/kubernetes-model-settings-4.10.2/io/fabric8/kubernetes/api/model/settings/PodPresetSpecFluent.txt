Compiled from "PodPresetSpecFluent.java"
public interface io.fabric8.kubernetes.api.model.settings.PodPresetSpecFluent<A extends io.fabric8.kubernetes.api.model.settings.PodPresetSpecFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToEnv(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A setToEnv(int, io.fabric8.kubernetes.api.model.EnvVar);

  public abstract A addToEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A addAllToEnv(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A removeFromEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract A removeAllFromEnv(java.util.Collection<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.EnvVar> getEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getEnv(int);

  public abstract io.fabric8.kubernetes.api.model.EnvVar getFirstEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getLastEnv();

  public abstract io.fabric8.kubernetes.api.model.EnvVar getMatchingEnv(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract java.lang.Boolean hasMatchingEnv(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(java.util.List<io.fabric8.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(io.fabric8.kubernetes.api.model.EnvVar...);

  public abstract java.lang.Boolean hasEnv();

  public abstract A addToEnvFrom(int, io.fabric8.kubernetes.api.model.EnvFromSource);

  public abstract A setToEnvFrom(int, io.fabric8.kubernetes.api.model.EnvFromSource);

  public abstract A addToEnvFrom(io.fabric8.kubernetes.api.model.EnvFromSource...);

  public abstract A addAllToEnvFrom(java.util.Collection<io.fabric8.kubernetes.api.model.EnvFromSource>);

  public abstract A removeFromEnvFrom(io.fabric8.kubernetes.api.model.EnvFromSource...);

  public abstract A removeAllFromEnvFrom(java.util.Collection<io.fabric8.kubernetes.api.model.EnvFromSource>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.EnvFromSource> getEnvFrom();

  public abstract io.fabric8.kubernetes.api.model.EnvFromSource getEnvFrom(int);

  public abstract io.fabric8.kubernetes.api.model.EnvFromSource getFirstEnvFrom();

  public abstract io.fabric8.kubernetes.api.model.EnvFromSource getLastEnvFrom();

  public abstract io.fabric8.kubernetes.api.model.EnvFromSource getMatchingEnvFrom(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvFromSource>);

  public abstract java.lang.Boolean hasMatchingEnvFrom(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.EnvFromSource>);

  public abstract A withEnvFrom(java.util.List<io.fabric8.kubernetes.api.model.EnvFromSource>);

  public abstract A withEnvFrom(io.fabric8.kubernetes.api.model.EnvFromSource...);

  public abstract java.lang.Boolean hasEnvFrom();

  public abstract io.fabric8.kubernetes.api.model.LabelSelector getSelector();

  public abstract io.fabric8.kubernetes.api.model.LabelSelector buildSelector();

  public abstract A withSelector(io.fabric8.kubernetes.api.model.LabelSelector);

  public abstract java.lang.Boolean hasSelector();

  public abstract io.fabric8.kubernetes.api.model.settings.PodPresetSpecFluent$SelectorNested<A> withNewSelector();

  public abstract io.fabric8.kubernetes.api.model.settings.PodPresetSpecFluent$SelectorNested<A> withNewSelectorLike(io.fabric8.kubernetes.api.model.LabelSelector);

  public abstract io.fabric8.kubernetes.api.model.settings.PodPresetSpecFluent$SelectorNested<A> editSelector();

  public abstract io.fabric8.kubernetes.api.model.settings.PodPresetSpecFluent$SelectorNested<A> editOrNewSelector();

  public abstract io.fabric8.kubernetes.api.model.settings.PodPresetSpecFluent$SelectorNested<A> editOrNewSelectorLike(io.fabric8.kubernetes.api.model.LabelSelector);

  public abstract A addToVolumeMounts(int, io.fabric8.kubernetes.api.model.VolumeMount);

  public abstract A setToVolumeMounts(int, io.fabric8.kubernetes.api.model.VolumeMount);

  public abstract A addToVolumeMounts(io.fabric8.kubernetes.api.model.VolumeMount...);

  public abstract A addAllToVolumeMounts(java.util.Collection<io.fabric8.kubernetes.api.model.VolumeMount>);

  public abstract A removeFromVolumeMounts(io.fabric8.kubernetes.api.model.VolumeMount...);

  public abstract A removeAllFromVolumeMounts(java.util.Collection<io.fabric8.kubernetes.api.model.VolumeMount>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.VolumeMount> getVolumeMounts();

  public abstract io.fabric8.kubernetes.api.model.VolumeMount getVolumeMount(int);

  public abstract io.fabric8.kubernetes.api.model.VolumeMount getFirstVolumeMount();

  public abstract io.fabric8.kubernetes.api.model.VolumeMount getLastVolumeMount();

  public abstract io.fabric8.kubernetes.api.model.VolumeMount getMatchingVolumeMount(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.VolumeMount>);

  public abstract java.lang.Boolean hasMatchingVolumeMount(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.VolumeMount>);

  public abstract A withVolumeMounts(java.util.List<io.fabric8.kubernetes.api.model.VolumeMount>);

  public abstract A withVolumeMounts(io.fabric8.kubernetes.api.model.VolumeMount...);

  public abstract java.lang.Boolean hasVolumeMounts();

  public abstract A addToVolumes(int, io.fabric8.kubernetes.api.model.Volume);

  public abstract A setToVolumes(int, io.fabric8.kubernetes.api.model.Volume);

  public abstract A addToVolumes(io.fabric8.kubernetes.api.model.Volume...);

  public abstract A addAllToVolumes(java.util.Collection<io.fabric8.kubernetes.api.model.Volume>);

  public abstract A removeFromVolumes(io.fabric8.kubernetes.api.model.Volume...);

  public abstract A removeAllFromVolumes(java.util.Collection<io.fabric8.kubernetes.api.model.Volume>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.Volume> getVolumes();

  public abstract io.fabric8.kubernetes.api.model.Volume getVolume(int);

  public abstract io.fabric8.kubernetes.api.model.Volume getFirstVolume();

  public abstract io.fabric8.kubernetes.api.model.Volume getLastVolume();

  public abstract io.fabric8.kubernetes.api.model.Volume getMatchingVolume(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.Volume>);

  public abstract java.lang.Boolean hasMatchingVolume(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.Volume>);

  public abstract A withVolumes(java.util.List<io.fabric8.kubernetes.api.model.Volume>);

  public abstract A withVolumes(io.fabric8.kubernetes.api.model.Volume...);

  public abstract java.lang.Boolean hasVolumes();
}
