Compiled from "Mem.java"
public class jnr.a64asm.Mem extends jnr.a64asm.Operand {
  private final int base;

  private final int index;

  private final int shift;

  private final jnr.a64asm.Ext extend;

  private final jnr.a64asm.Label label;

  private final long target;

  private final long displacement;

  static final boolean $assertionsDisabled;

  jnr.a64asm.Mem(jnr.a64asm.Register, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method jnr/a64asm/Register.index:()I
       5: sipush        255
       8: iconst_0
       9: aconst_null
      10: lconst_0
      11: lconst_0
      12: iload_2
      13: aconst_null
      14: invokespecial #3                  // Method "<init>":(IIILjnr/a64asm/Label;JJILjnr/a64asm/Ext;)V
      17: return

  jnr.a64asm.Mem(jnr.a64asm.Register, jnr.a64asm.Ext, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method jnr/a64asm/Register.index:()I
       5: sipush        255
       8: iconst_0
       9: aconst_null
      10: lconst_0
      11: lconst_0
      12: iload_3
      13: aconst_null
      14: invokespecial #3                  // Method "<init>":(IIILjnr/a64asm/Label;JJILjnr/a64asm/Ext;)V
      17: return

  jnr.a64asm.Mem(jnr.a64asm.Label, long, int);
    Code:
       0: aload_0
       1: sipush        255
       4: sipush        255
       7: iconst_0
       8: aload_1
       9: lconst_0
      10: lload_2
      11: iload         4
      13: aconst_null
      14: invokespecial #3                  // Method "<init>":(IIILjnr/a64asm/Label;JJILjnr/a64asm/Ext;)V
      17: return

  jnr.a64asm.Mem(jnr.a64asm.Register, long, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method jnr/a64asm/Register.index:()I
       5: sipush        255
       8: iconst_0
       9: aconst_null
      10: lconst_0
      11: lload_2
      12: iload         4
      14: aconst_null
      15: invokespecial #3                  // Method "<init>":(IIILjnr/a64asm/Label;JJILjnr/a64asm/Ext;)V
      18: return

  jnr.a64asm.Mem(jnr.a64asm.Register, jnr.a64asm.Register, int, long, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method jnr/a64asm/Register.index:()I
       5: aload_2
       6: invokevirtual #2                  // Method jnr/a64asm/Register.index:()I
       9: iload_3
      10: aconst_null
      11: lconst_0
      12: lload         4
      14: iload         6
      16: aconst_null
      17: invokespecial #3                  // Method "<init>":(IIILjnr/a64asm/Label;JJILjnr/a64asm/Ext;)V
      20: return

  jnr.a64asm.Mem(jnr.a64asm.Label, jnr.a64asm.Register, int, long, int);
    Code:
       0: aload_0
       1: iconst_0
       2: aload_2
       3: invokevirtual #2                  // Method jnr/a64asm/Register.index:()I
       6: iload_3
       7: aload_1
       8: lconst_0
       9: lload         4
      11: iload         6
      13: aconst_null
      14: invokespecial #3                  // Method "<init>":(IIILjnr/a64asm/Label;JJILjnr/a64asm/Ext;)V
      17: return

  jnr.a64asm.Mem(long, long, int);
    Code:
       0: aload_0
       1: sipush        255
       4: sipush        255
       7: iconst_0
       8: aconst_null
       9: lload_1
      10: lload_3
      11: iload         5
      13: aconst_null
      14: invokespecial #3                  // Method "<init>":(IIILjnr/a64asm/Label;JJILjnr/a64asm/Ext;)V
      17: return

  jnr.a64asm.Mem(long, jnr.a64asm.Register, int, long, int);
    Code:
       0: aload_0
       1: sipush        255
       4: aload_3
       5: invokevirtual #2                  // Method jnr/a64asm/Register.index:()I
       8: iload         4
      10: aconst_null
      11: lload_1
      12: lload         5
      14: iload         7
      16: aconst_null
      17: invokespecial #3                  // Method "<init>":(IIILjnr/a64asm/Label;JJILjnr/a64asm/Ext;)V
      20: return

  private jnr.a64asm.Mem(int, int, int, jnr.a64asm.Label, long, long, int, jnr.a64asm.Ext);
    Code:
       0: aload_0
       1: iconst_2
       2: iload         9
       4: invokespecial #5                  // Method jnr/a64asm/Operand."<init>":(II)V
       7: getstatic     #6                  // Field $assertionsDisabled:Z
      10: ifne          26
      13: iload_3
      14: iconst_3
      15: if_icmple     26
      18: new           #7                  // class java/lang/AssertionError
      21: dup
      22: invokespecial #8                  // Method java/lang/AssertionError."<init>":()V
      25: athrow
      26: aload_0
      27: iload_1
      28: putfield      #9                  // Field base:I
      31: aload_0
      32: iload_2
      33: putfield      #10                 // Field index:I
      36: aload_0
      37: iload_3
      38: putfield      #11                 // Field shift:I
      41: aload_0
      42: aload         4
      44: putfield      #12                 // Field label:Ljnr/a64asm/Label;
      47: aload_0
      48: lload         5
      50: putfield      #13                 // Field target:J
      53: aload_0
      54: lload         7
      56: putfield      #14                 // Field displacement:J
      59: aload_0
      60: aload         10
      62: putfield      #15                 // Field extend:Ljnr/a64asm/Ext;
      65: return

  public final boolean hasLabel();
    Code:
       0: aload_0
       1: getfield      #12                 // Field label:Ljnr/a64asm/Label;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public final boolean hasBase();
    Code:
       0: aload_0
       1: getfield      #9                  // Field base:I
       4: sipush        255
       7: if_icmpeq     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  boolean hasIndex();
    Code:
       0: aload_0
       1: getfield      #10                 // Field index:I
       4: sipush        255
       7: if_icmpeq     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public final int base();
    Code:
       0: aload_0
       1: getfield      #9                  // Field base:I
       4: ireturn

  public final long displacement();
    Code:
       0: aload_0
       1: getfield      #14                 // Field displacement:J
       4: lreturn

  public final int index();
    Code:
       0: aload_0
       1: getfield      #10                 // Field index:I
       4: ireturn

  public final jnr.a64asm.Label label();
    Code:
       0: aload_0
       1: getfield      #12                 // Field label:Ljnr/a64asm/Label;
       4: areturn

  public final int shift();
    Code:
       0: aload_0
       1: getfield      #11                 // Field shift:I
       4: ireturn

  public final long target();
    Code:
       0: aload_0
       1: getfield      #13                 // Field target:J
       4: lreturn

  static {};
    Code:
       0: ldc           #16                 // class jnr/a64asm/Mem
       2: invokevirtual #17                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #6                  // Field $assertionsDisabled:Z
      16: return
}
