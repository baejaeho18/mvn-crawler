Compiled from "AsyncFileHandler.java"
public class org.apache.juli.AsyncFileHandler extends org.apache.juli.FileHandler {
  public static final int OVERFLOW_DROP_LAST;

  public static final int OVERFLOW_DROP_FIRST;

  public static final int OVERFLOW_DROP_FLUSH;

  public static final int OVERFLOW_DROP_CURRENT;

  public static final int DEFAULT_OVERFLOW_DROP_TYPE;

  public static final int DEFAULT_MAX_RECORDS;

  public static final int DEFAULT_LOGGER_SLEEP_TIME;

  public static final int OVERFLOW_DROP_TYPE;

  public static final int MAX_RECORDS;

  public static final int LOGGER_SLEEP_TIME;

  protected static final java.util.concurrent.LinkedBlockingDeque<org.apache.juli.AsyncFileHandler$LogEntry> queue;

  protected static final org.apache.juli.AsyncFileHandler$LoggerThread logger;

  protected volatile boolean closed;

  public org.apache.juli.AsyncFileHandler();
    Code:
       0: aload_0
       1: aconst_null
       2: aconst_null
       3: aconst_null
       4: invokespecial #1                  // Method "<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
       7: return

  public org.apache.juli.AsyncFileHandler(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aconst_null
       5: invokespecial #2                  // Method "<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;)V
       8: return

  public org.apache.juli.AsyncFileHandler(java.lang.String, java.lang.String, java.lang.String, java.lang.Integer);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokespecial #3                  // Method org/apache/juli/FileHandler."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;)V
       9: aload_0
      10: iconst_0
      11: putfield      #4                  // Field closed:Z
      14: aload_0
      15: invokevirtual #5                  // Method open:()V
      18: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #4                  // Field closed:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #4                  // Field closed:Z
      13: aload_0
      14: invokespecial #6                  // Method org/apache/juli/FileHandler.close:()V
      17: return

  protected void open();
    Code:
       0: aload_0
       1: getfield      #4                  // Field closed:Z
       4: ifne          8
       7: return
       8: aload_0
       9: iconst_0
      10: putfield      #4                  // Field closed:Z
      13: aload_0
      14: invokespecial #7                  // Method org/apache/juli/FileHandler.open:()V
      17: return

  public void publish(java.util.logging.LogRecord);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #8                  // Method isLoggable:(Ljava/util/logging/LogRecord;)Z
       5: ifne          9
       8: return
       9: aload_1
      10: invokevirtual #9                  // Method java/util/logging/LogRecord.getSourceMethodName:()Ljava/lang/String;
      13: pop
      14: new           #10                 // class org/apache/juli/AsyncFileHandler$LogEntry
      17: dup
      18: aload_1
      19: aload_0
      20: invokespecial #11                 // Method org/apache/juli/AsyncFileHandler$LogEntry."<init>":(Ljava/util/logging/LogRecord;Lorg/apache/juli/AsyncFileHandler;)V
      23: astore_2
      24: iconst_0
      25: istore_3
      26: iload_3
      27: ifne          114
      30: getstatic     #12                 // Field queue:Ljava/util/concurrent/LinkedBlockingDeque;
      33: aload_2
      34: invokevirtual #13                 // Method java/util/concurrent/LinkedBlockingDeque.offer:(Ljava/lang/Object;)Z
      37: ifne          114
      40: getstatic     #14                 // Field OVERFLOW_DROP_TYPE:I
      43: tableswitch   { // 1 to 4
                     1: 72
                     2: 82
                     3: 92
                     4: 109
               default: 111
          }
      72: getstatic     #12                 // Field queue:Ljava/util/concurrent/LinkedBlockingDeque;
      75: invokevirtual #15                 // Method java/util/concurrent/LinkedBlockingDeque.pollLast:()Ljava/lang/Object;
      78: pop
      79: goto          111
      82: getstatic     #12                 // Field queue:Ljava/util/concurrent/LinkedBlockingDeque;
      85: invokevirtual #16                 // Method java/util/concurrent/LinkedBlockingDeque.pollFirst:()Ljava/lang/Object;
      88: pop
      89: goto          111
      92: getstatic     #12                 // Field queue:Ljava/util/concurrent/LinkedBlockingDeque;
      95: aload_2
      96: ldc2_w        #17                 // long 1000l
      99: getstatic     #19                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     102: invokevirtual #20                 // Method java/util/concurrent/LinkedBlockingDeque.offer:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z
     105: istore_3
     106: goto          111
     109: iconst_1
     110: istore_3
     111: goto          26
     114: goto          119
     117: astore        4
     119: return
    Exception table:
       from    to  target type
          26   114   117   Class java/lang/InterruptedException

  protected void publishInternal(java.util.logging.LogRecord);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #22                 // Method org/apache/juli/FileHandler.publish:(Ljava/util/logging/LogRecord;)V
       5: return

  static {};
    Code:
       0: ldc           #23                 // String org.apache.juli.AsyncOverflowDropType
       2: iconst_1
       3: invokestatic  #25                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
       6: invokestatic  #26                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       9: invokestatic  #27                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      12: putstatic     #14                 // Field OVERFLOW_DROP_TYPE:I
      15: ldc           #28                 // String org.apache.juli.AsyncMaxRecordCount
      17: sipush        10000
      20: invokestatic  #25                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      23: invokestatic  #26                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      26: invokestatic  #27                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      29: putstatic     #29                 // Field MAX_RECORDS:I
      32: ldc           #30                 // String org.apache.juli.AsyncLoggerPollInterval
      34: sipush        1000
      37: invokestatic  #25                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      40: invokestatic  #26                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      43: invokestatic  #27                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      46: putstatic     #31                 // Field LOGGER_SLEEP_TIME:I
      49: new           #32                 // class java/util/concurrent/LinkedBlockingDeque
      52: dup
      53: getstatic     #29                 // Field MAX_RECORDS:I
      56: invokespecial #33                 // Method java/util/concurrent/LinkedBlockingDeque."<init>":(I)V
      59: putstatic     #12                 // Field queue:Ljava/util/concurrent/LinkedBlockingDeque;
      62: new           #34                 // class org/apache/juli/AsyncFileHandler$LoggerThread
      65: dup
      66: invokespecial #35                 // Method org/apache/juli/AsyncFileHandler$LoggerThread."<init>":()V
      69: putstatic     #36                 // Field logger:Lorg/apache/juli/AsyncFileHandler$LoggerThread;
      72: getstatic     #36                 // Field logger:Lorg/apache/juli/AsyncFileHandler$LoggerThread;
      75: invokevirtual #37                 // Method org/apache/juli/AsyncFileHandler$LoggerThread.start:()V
      78: return
}
