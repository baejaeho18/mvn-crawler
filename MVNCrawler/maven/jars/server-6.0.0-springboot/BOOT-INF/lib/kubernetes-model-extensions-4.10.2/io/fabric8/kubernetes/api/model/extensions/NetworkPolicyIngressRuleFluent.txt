Compiled from "NetworkPolicyIngressRuleFluent.java"
public interface io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent<A extends io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToFrom(int, io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer);

  public abstract A setToFrom(int, io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer);

  public abstract A addToFrom(io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer...);

  public abstract A addAllToFrom(java.util.Collection<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer>);

  public abstract A removeFromFrom(io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer...);

  public abstract A removeAllFromFrom(java.util.Collection<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer>);

  public abstract A removeMatchingFromFrom(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeerBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer> getFrom();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer> buildFrom();

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer buildFrom(int);

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer buildFirstFrom();

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer buildLastFrom();

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer buildMatchingFrom(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeerBuilder>);

  public abstract java.lang.Boolean hasMatchingFrom(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeerBuilder>);

  public abstract A withFrom(java.util.List<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer>);

  public abstract A withFrom(io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer...);

  public abstract java.lang.Boolean hasFrom();

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent$FromNested<A> addNewFrom();

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent$FromNested<A> addNewFromLike(io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer);

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent$FromNested<A> setNewFromLike(int, io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeer);

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent$FromNested<A> editFrom(int);

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent$FromNested<A> editFirstFrom();

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent$FromNested<A> editLastFrom();

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent$FromNested<A> editMatchingFrom(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPeerBuilder>);

  public abstract A addToPorts(int, io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort);

  public abstract A setToPorts(int, io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort);

  public abstract A addToPorts(io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort...);

  public abstract A addAllToPorts(java.util.Collection<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort>);

  public abstract A removeFromPorts(io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort...);

  public abstract A removeAllFromPorts(java.util.Collection<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort>);

  public abstract A removeMatchingFromPorts(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPortBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort> getPorts();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort> buildPorts();

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort buildPort(int);

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort buildFirstPort();

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort buildLastPort();

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort buildMatchingPort(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPortBuilder>);

  public abstract java.lang.Boolean hasMatchingPort(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPortBuilder>);

  public abstract A withPorts(java.util.List<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort>);

  public abstract A withPorts(io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort...);

  public abstract java.lang.Boolean hasPorts();

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent$PortsNested<A> addNewPort();

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent$PortsNested<A> addNewPortLike(io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort);

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent$PortsNested<A> setNewPortLike(int, io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPort);

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent$PortsNested<A> editPort(int);

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent$PortsNested<A> editFirstPort();

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent$PortsNested<A> editLastPort();

  public abstract io.fabric8.kubernetes.api.model.extensions.NetworkPolicyIngressRuleFluent$PortsNested<A> editMatchingPort(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.extensions.NetworkPolicyPortBuilder>);
}
