Compiled from "NetworkPolicyEgressRuleFluent.java"
public interface io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent<A extends io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract A addToPorts(int, io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort);

  public abstract A setToPorts(int, io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort);

  public abstract A addToPorts(io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort...);

  public abstract A addAllToPorts(java.util.Collection<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort>);

  public abstract A removeFromPorts(io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort...);

  public abstract A removeAllFromPorts(java.util.Collection<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort>);

  public abstract A removeMatchingFromPorts(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPortBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort> getPorts();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort> buildPorts();

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort buildPort(int);

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort buildFirstPort();

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort buildLastPort();

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort buildMatchingPort(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPortBuilder>);

  public abstract java.lang.Boolean hasMatchingPort(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPortBuilder>);

  public abstract A withPorts(java.util.List<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort>);

  public abstract A withPorts(io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort...);

  public abstract java.lang.Boolean hasPorts();

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent$PortsNested<A> addNewPort();

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent$PortsNested<A> addNewPortLike(io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort);

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent$PortsNested<A> setNewPortLike(int, io.fabric8.kubernetes.api.model.networking.NetworkPolicyPort);

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent$PortsNested<A> editPort(int);

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent$PortsNested<A> editFirstPort();

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent$PortsNested<A> editLastPort();

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent$PortsNested<A> editMatchingPort(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPortBuilder>);

  public abstract A addToTo(int, io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer);

  public abstract A setToTo(int, io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer);

  public abstract A addToTo(io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer...);

  public abstract A addAllToTo(java.util.Collection<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer>);

  public abstract A removeFromTo(io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer...);

  public abstract A removeAllFromTo(java.util.Collection<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer>);

  public abstract A removeMatchingFromTo(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeerBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer> getTo();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer> buildTo();

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer buildTo(int);

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer buildFirstTo();

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer buildLastTo();

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer buildMatchingTo(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeerBuilder>);

  public abstract java.lang.Boolean hasMatchingTo(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeerBuilder>);

  public abstract A withTo(java.util.List<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer>);

  public abstract A withTo(io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer...);

  public abstract java.lang.Boolean hasTo();

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent$ToNested<A> addNewTo();

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent$ToNested<A> addNewToLike(io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer);

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent$ToNested<A> setNewToLike(int, io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeer);

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent$ToNested<A> editTo(int);

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent$ToNested<A> editFirstTo();

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent$ToNested<A> editLastTo();

  public abstract io.fabric8.kubernetes.api.model.networking.NetworkPolicyEgressRuleFluent$ToNested<A> editMatchingTo(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.networking.NetworkPolicyPeerBuilder>);
}
