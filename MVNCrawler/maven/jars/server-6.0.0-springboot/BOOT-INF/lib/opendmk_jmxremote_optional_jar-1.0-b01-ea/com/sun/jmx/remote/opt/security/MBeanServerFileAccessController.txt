Compiled from "MBeanServerFileAccessController.java"
public class com.sun.jmx.remote.opt.security.MBeanServerFileAccessController extends com.sun.jmx.remote.opt.security.MBeanServerAccessController {
  public static final java.lang.String READONLY;

  public static final java.lang.String READWRITE;

  private java.util.Properties props;

  private java.util.Properties originalProps;

  private java.lang.String accessFileName;

  public com.sun.jmx.remote.opt.security.MBeanServerFileAccessController(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/sun/jmx/remote/opt/security/MBeanServerAccessController."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field accessFileName:Ljava/lang/String;
       9: aload_0
      10: aload_1
      11: invokestatic  #3                  // Method propertiesFromFile:(Ljava/lang/String;)Ljava/util/Properties;
      14: putfield      #4                  // Field props:Ljava/util/Properties;
      17: aload_0
      18: aload_0
      19: getfield      #4                  // Field props:Ljava/util/Properties;
      22: invokespecial #5                  // Method checkValues:(Ljava/util/Properties;)V
      25: return

  public com.sun.jmx.remote.opt.security.MBeanServerFileAccessController(java.lang.String, javax.management.MBeanServer) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method "<init>":(Ljava/lang/String;)V
       5: aload_0
       6: aload_2
       7: invokevirtual #7                  // Method setMBeanServer:(Ljavax/management/MBeanServer;)V
      10: return

  public com.sun.jmx.remote.opt.security.MBeanServerFileAccessController(java.util.Properties) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/sun/jmx/remote/opt/security/MBeanServerAccessController."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #8                  // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #9                  // String Null properties
      14: invokespecial #10                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: aload_1
      20: putfield      #11                 // Field originalProps:Ljava/util/Properties;
      23: aload_0
      24: aload_1
      25: invokevirtual #12                 // Method java/util/Properties.clone:()Ljava/lang/Object;
      28: checkcast     #13                 // class java/util/Properties
      31: putfield      #4                  // Field props:Ljava/util/Properties;
      34: aload_0
      35: aload_0
      36: getfield      #4                  // Field props:Ljava/util/Properties;
      39: invokespecial #5                  // Method checkValues:(Ljava/util/Properties;)V
      42: return

  public com.sun.jmx.remote.opt.security.MBeanServerFileAccessController(java.util.Properties, javax.management.MBeanServer) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #14                 // Method "<init>":(Ljava/util/Properties;)V
       5: aload_0
       6: aload_2
       7: invokevirtual #7                  // Method setMBeanServer:(Ljavax/management/MBeanServer;)V
      10: return

  public void checkRead();
    Code:
       0: aload_0
       1: ldc           #15                 // String readonly
       3: invokespecial #16                 // Method checkAccessLevel:(Ljava/lang/String;)V
       6: return

  public void checkWrite();
    Code:
       0: aload_0
       1: ldc           #17                 // String readwrite
       3: invokespecial #16                 // Method checkAccessLevel:(Ljava/lang/String;)V
       6: return

  public void refresh() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field props:Ljava/util/Properties;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #2                  // Field accessFileName:Ljava/lang/String;
      11: ifnonnull     31
      14: aload_0
      15: aload_0
      16: getfield      #11                 // Field originalProps:Ljava/util/Properties;
      19: invokevirtual #12                 // Method java/util/Properties.clone:()Ljava/lang/Object;
      22: checkcast     #13                 // class java/util/Properties
      25: putfield      #4                  // Field props:Ljava/util/Properties;
      28: goto          42
      31: aload_0
      32: aload_0
      33: getfield      #2                  // Field accessFileName:Ljava/lang/String;
      36: invokestatic  #3                  // Method propertiesFromFile:(Ljava/lang/String;)Ljava/util/Properties;
      39: putfield      #4                  // Field props:Ljava/util/Properties;
      42: aload_0
      43: aload_0
      44: getfield      #4                  // Field props:Ljava/util/Properties;
      47: invokespecial #5                  // Method checkValues:(Ljava/util/Properties;)V
      50: aload_1
      51: monitorexit
      52: goto          60
      55: astore_2
      56: aload_1
      57: monitorexit
      58: aload_2
      59: athrow
      60: return
    Exception table:
       from    to  target type
           7    52    55   any
          55    58    55   any

  private static java.util.Properties propertiesFromFile(java.lang.String) throws java.io.IOException;
    Code:
       0: new           #18                 // class java/io/FileInputStream
       3: dup
       4: aload_0
       5: invokespecial #19                 // Method java/io/FileInputStream."<init>":(Ljava/lang/String;)V
       8: astore_1
       9: new           #13                 // class java/util/Properties
      12: dup
      13: invokespecial #20                 // Method java/util/Properties."<init>":()V
      16: astore_2
      17: aload_2
      18: aload_1
      19: invokevirtual #21                 // Method java/util/Properties.load:(Ljava/io/InputStream;)V
      22: aload_1
      23: invokevirtual #22                 // Method java/io/FileInputStream.close:()V
      26: aload_2
      27: areturn

  private void checkAccessLevel(java.lang.String);
    Code:
       0: invokestatic  #23                 // Method java/security/AccessController.getContext:()Ljava/security/AccessControlContext;
       3: astore_2
       4: new           #24                 // class com/sun/jmx/remote/opt/security/MBeanServerFileAccessController$1
       7: dup
       8: aload_0
       9: aload_2
      10: invokespecial #25                 // Method com/sun/jmx/remote/opt/security/MBeanServerFileAccessController$1."<init>":(Lcom/sun/jmx/remote/opt/security/MBeanServerFileAccessController;Ljava/security/AccessControlContext;)V
      13: invokestatic  #26                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      16: checkcast     #27                 // class javax/security/auth/Subject
      19: astore_3
      20: aload_3
      21: ifnonnull     25
      24: return
      25: aload_3
      26: invokevirtual #28                 // Method javax/security/auth/Subject.getPrincipals:()Ljava/util/Set;
      29: astore        4
      31: aload         4
      33: invokeinterface #29,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      38: astore        5
      40: aload         5
      42: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      47: ifeq          158
      50: aload         5
      52: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      57: checkcast     #32                 // class java/security/Principal
      60: astore        6
      62: aload_0
      63: getfield      #4                  // Field props:Ljava/util/Properties;
      66: dup
      67: astore        8
      69: monitorenter
      70: aload_0
      71: getfield      #4                  // Field props:Ljava/util/Properties;
      74: aload         6
      76: invokeinterface #33,  1           // InterfaceMethod java/security/Principal.getName:()Ljava/lang/String;
      81: invokevirtual #34                 // Method java/util/Properties.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      84: astore        7
      86: aload         8
      88: monitorexit
      89: goto          100
      92: astore        9
      94: aload         8
      96: monitorexit
      97: aload         9
      99: athrow
     100: aload         7
     102: ifnull        155
     105: aload_1
     106: ldc           #15                 // String readonly
     108: invokevirtual #35                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     111: ifeq          135
     114: aload         7
     116: ldc           #15                 // String readonly
     118: invokevirtual #35                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     121: ifne          134
     124: aload         7
     126: ldc           #17                 // String readwrite
     128: invokevirtual #35                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     131: ifeq          135
     134: return
     135: aload_1
     136: ldc           #17                 // String readwrite
     138: invokevirtual #35                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     141: ifeq          155
     144: aload         7
     146: ldc           #17                 // String readwrite
     148: invokevirtual #35                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     151: ifeq          155
     154: return
     155: goto          40
     158: new           #36                 // class java/lang/SecurityException
     161: dup
     162: ldc           #37                 // String Access denied! Invalid access level for requested MBeanServer operation.
     164: invokespecial #38                 // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
     167: athrow
    Exception table:
       from    to  target type
          70    89    92   any
          92    97    92   any

  private void checkValues(java.util.Properties);
    Code:
       0: aload_1
       1: invokevirtual #39                 // Method java/util/Properties.values:()Ljava/util/Collection;
       4: astore_2
       5: aload_2
       6: invokeinterface #40,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      11: astore_3
      12: aload_3
      13: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          88
      21: aload_3
      22: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #41                 // class java/lang/String
      30: astore        4
      32: aload         4
      34: ldc           #15                 // String readonly
      36: invokevirtual #35                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      39: ifne          85
      42: aload         4
      44: ldc           #17                 // String readwrite
      46: invokevirtual #35                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      49: ifne          85
      52: new           #8                  // class java/lang/IllegalArgumentException
      55: dup
      56: new           #42                 // class java/lang/StringBuffer
      59: dup
      60: invokespecial #43                 // Method java/lang/StringBuffer."<init>":()V
      63: ldc           #44                 // String Syntax error in access level entry [
      65: invokevirtual #45                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      68: aload         4
      70: invokevirtual #45                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      73: ldc           #46                 // String ]
      75: invokevirtual #45                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      78: invokevirtual #47                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      81: invokespecial #10                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      84: athrow
      85: goto          12
      88: return
}
