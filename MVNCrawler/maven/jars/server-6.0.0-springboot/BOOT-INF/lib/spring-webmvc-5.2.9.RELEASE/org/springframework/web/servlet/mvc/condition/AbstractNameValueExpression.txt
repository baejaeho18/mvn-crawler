Compiled from "AbstractNameValueExpression.java"
abstract class org.springframework.web.servlet.mvc.condition.AbstractNameValueExpression<T> implements org.springframework.web.servlet.mvc.condition.NameValueExpression<T> {
  protected final java.lang.String name;

  protected final T value;

  protected final boolean isNegated;

  org.springframework.web.servlet.mvc.condition.AbstractNameValueExpression(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: bipush        61
       7: invokevirtual #2                  // Method java/lang/String.indexOf:(I)I
      10: istore_2
      11: iload_2
      12: iconst_m1
      13: if_icmpne     54
      16: aload_0
      17: aload_1
      18: ldc           #3                  // String !
      20: invokevirtual #4                  // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      23: putfield      #5                  // Field isNegated:Z
      26: aload_0
      27: aload_0
      28: getfield      #5                  // Field isNegated:Z
      31: ifeq          42
      34: aload_1
      35: iconst_1
      36: invokevirtual #6                  // Method java/lang/String.substring:(I)Ljava/lang/String;
      39: goto          43
      42: aload_1
      43: putfield      #7                  // Field name:Ljava/lang/String;
      46: aload_0
      47: aconst_null
      48: putfield      #8                  // Field value:Ljava/lang/Object;
      51: goto          122
      54: aload_0
      55: iload_2
      56: ifle          75
      59: aload_1
      60: iload_2
      61: iconst_1
      62: isub
      63: invokevirtual #9                  // Method java/lang/String.charAt:(I)C
      66: bipush        33
      68: if_icmpne     75
      71: iconst_1
      72: goto          76
      75: iconst_0
      76: putfield      #5                  // Field isNegated:Z
      79: aload_0
      80: aload_0
      81: getfield      #5                  // Field isNegated:Z
      84: ifeq          98
      87: aload_1
      88: iconst_0
      89: iload_2
      90: iconst_1
      91: isub
      92: invokevirtual #10                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      95: goto          104
      98: aload_1
      99: iconst_0
     100: iload_2
     101: invokevirtual #10                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     104: putfield      #7                  // Field name:Ljava/lang/String;
     107: aload_0
     108: aload_0
     109: aload_1
     110: iload_2
     111: iconst_1
     112: iadd
     113: invokevirtual #6                  // Method java/lang/String.substring:(I)Ljava/lang/String;
     116: invokevirtual #11                 // Method parseValue:(Ljava/lang/String;)Ljava/lang/Object;
     119: putfield      #8                  // Field value:Ljava/lang/Object;
     122: return

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #7                  // Field name:Ljava/lang/String;
       4: areturn

  public T getValue();
    Code:
       0: aload_0
       1: getfield      #8                  // Field value:Ljava/lang/Object;
       4: areturn

  public boolean isNegated();
    Code:
       0: aload_0
       1: getfield      #5                  // Field isNegated:Z
       4: ireturn

  public final boolean match(javax.servlet.http.HttpServletRequest);
    Code:
       0: aload_0
       1: getfield      #8                  // Field value:Ljava/lang/Object;
       4: ifnull        16
       7: aload_0
       8: aload_1
       9: invokevirtual #12                 // Method matchValue:(Ljavax/servlet/http/HttpServletRequest;)Z
      12: istore_2
      13: goto          22
      16: aload_0
      17: aload_1
      18: invokevirtual #13                 // Method matchName:(Ljavax/servlet/http/HttpServletRequest;)Z
      21: istore_2
      22: aload_0
      23: getfield      #5                  // Field isNegated:Z
      26: iload_2
      27: if_icmpeq     34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  protected abstract boolean isCaseSensitiveName();

  protected abstract T parseValue(java.lang.String);

  protected abstract boolean matchName(javax.servlet.http.HttpServletRequest);

  protected abstract boolean matchValue(javax.servlet.http.HttpServletRequest);

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #14                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #14                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #15                 // class org/springframework/web/servlet/mvc/condition/AbstractNameValueExpression
      28: astore_2
      29: aload_0
      30: invokevirtual #16                 // Method isCaseSensitiveName:()Z
      33: ifeq          53
      36: aload_0
      37: getfield      #7                  // Field name:Ljava/lang/String;
      40: aload_2
      41: getfield      #7                  // Field name:Ljava/lang/String;
      44: invokevirtual #17                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      47: ifeq          96
      50: goto          67
      53: aload_0
      54: getfield      #7                  // Field name:Ljava/lang/String;
      57: aload_2
      58: getfield      #7                  // Field name:Ljava/lang/String;
      61: invokevirtual #18                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      64: ifeq          96
      67: aload_0
      68: getfield      #8                  // Field value:Ljava/lang/Object;
      71: aload_2
      72: getfield      #8                  // Field value:Ljava/lang/Object;
      75: invokestatic  #19                 // Method org/springframework/util/ObjectUtils.nullSafeEquals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      78: ifeq          96
      81: aload_0
      82: getfield      #5                  // Field isNegated:Z
      85: aload_2
      86: getfield      #5                  // Field isNegated:Z
      89: if_icmpne     96
      92: iconst_1
      93: goto          97
      96: iconst_0
      97: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method isCaseSensitiveName:()Z
       4: ifeq          17
       7: aload_0
       8: getfield      #7                  // Field name:Ljava/lang/String;
      11: invokevirtual #20                 // Method java/lang/String.hashCode:()I
      14: goto          27
      17: aload_0
      18: getfield      #7                  // Field name:Ljava/lang/String;
      21: invokevirtual #21                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      24: invokevirtual #20                 // Method java/lang/String.hashCode:()I
      27: istore_1
      28: bipush        31
      30: iload_1
      31: imul
      32: aload_0
      33: getfield      #8                  // Field value:Ljava/lang/Object;
      36: ifnull        49
      39: aload_0
      40: getfield      #8                  // Field value:Ljava/lang/Object;
      43: invokevirtual #22                 // Method java/lang/Object.hashCode:()I
      46: goto          50
      49: iconst_0
      50: iadd
      51: istore_1
      52: bipush        31
      54: iload_1
      55: imul
      56: aload_0
      57: getfield      #5                  // Field isNegated:Z
      60: ifeq          67
      63: iconst_1
      64: goto          68
      67: iconst_0
      68: iadd
      69: istore_1
      70: iload_1
      71: ireturn

  public java.lang.String toString();
    Code:
       0: new           #23                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #8                  // Field value:Ljava/lang/Object;
      12: ifnull        57
      15: aload_1
      16: aload_0
      17: getfield      #7                  // Field name:Ljava/lang/String;
      20: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: pop
      24: aload_0
      25: getfield      #5                  // Field isNegated:Z
      28: ifeq          38
      31: aload_1
      32: bipush        33
      34: invokevirtual #26                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      37: pop
      38: aload_1
      39: bipush        61
      41: invokevirtual #26                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      44: pop
      45: aload_1
      46: aload_0
      47: getfield      #8                  // Field value:Ljava/lang/Object;
      50: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      53: pop
      54: goto          80
      57: aload_0
      58: getfield      #5                  // Field isNegated:Z
      61: ifeq          71
      64: aload_1
      65: bipush        33
      67: invokevirtual #26                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      70: pop
      71: aload_1
      72: aload_0
      73: getfield      #7                  // Field name:Ljava/lang/String;
      76: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: pop
      80: aload_1
      81: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      84: areturn
}
