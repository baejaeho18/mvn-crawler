Compiled from "ConcurrentReferenceHashMap.java"
public class org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager {
  private final java.lang.ref.ReferenceQueue<org.springframework.util.ConcurrentReferenceHashMap$Entry<K, V>> queue;

  final org.springframework.util.ConcurrentReferenceHashMap this$0;

  protected org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager(org.springframework.util.ConcurrentReferenceHashMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/springframework/util/ConcurrentReferenceHashMap;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: new           #3                  // class java/lang/ref/ReferenceQueue
      13: dup
      14: invokespecial #4                  // Method java/lang/ref/ReferenceQueue."<init>":()V
      17: putfield      #5                  // Field queue:Ljava/lang/ref/ReferenceQueue;
      20: return

  public org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V> createReference(org.springframework.util.ConcurrentReferenceHashMap$Entry<K, V>, int, org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lorg/springframework/util/ConcurrentReferenceHashMap;
       4: invokestatic  #6                  // Method org/springframework/util/ConcurrentReferenceHashMap.access$400:(Lorg/springframework/util/ConcurrentReferenceHashMap;)Lorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;
       7: getstatic     #7                  // Field org/springframework/util/ConcurrentReferenceHashMap$ReferenceType.WEAK:Lorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;
      10: if_acmpne     28
      13: new           #8                  // class org/springframework/util/ConcurrentReferenceHashMap$WeakEntryReference
      16: dup
      17: aload_1
      18: iload_2
      19: aload_3
      20: aload_0
      21: getfield      #5                  // Field queue:Ljava/lang/ref/ReferenceQueue;
      24: invokespecial #9                  // Method org/springframework/util/ConcurrentReferenceHashMap$WeakEntryReference."<init>":(Lorg/springframework/util/ConcurrentReferenceHashMap$Entry;ILorg/springframework/util/ConcurrentReferenceHashMap$Reference;Ljava/lang/ref/ReferenceQueue;)V
      27: areturn
      28: new           #10                 // class org/springframework/util/ConcurrentReferenceHashMap$SoftEntryReference
      31: dup
      32: aload_1
      33: iload_2
      34: aload_3
      35: aload_0
      36: getfield      #5                  // Field queue:Ljava/lang/ref/ReferenceQueue;
      39: invokespecial #11                 // Method org/springframework/util/ConcurrentReferenceHashMap$SoftEntryReference."<init>":(Lorg/springframework/util/ConcurrentReferenceHashMap$Entry;ILorg/springframework/util/ConcurrentReferenceHashMap$Reference;Ljava/lang/ref/ReferenceQueue;)V
      42: areturn

  public org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V> pollForPurge();
    Code:
       0: aload_0
       1: getfield      #5                  // Field queue:Ljava/lang/ref/ReferenceQueue;
       4: invokevirtual #12                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
       7: checkcast     #13                 // class org/springframework/util/ConcurrentReferenceHashMap$Reference
      10: areturn
}
