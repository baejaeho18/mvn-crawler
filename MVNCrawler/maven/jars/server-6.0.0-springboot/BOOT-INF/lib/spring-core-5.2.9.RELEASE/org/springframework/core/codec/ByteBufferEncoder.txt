Compiled from "ByteBufferEncoder.java"
public class org.springframework.core.codec.ByteBufferEncoder extends org.springframework.core.codec.AbstractEncoder<java.nio.ByteBuffer> {
  public org.springframework.core.codec.ByteBufferEncoder();
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #1                  // class org/springframework/util/MimeType
       5: dup
       6: iconst_0
       7: getstatic     #2                  // Field org/springframework/util/MimeTypeUtils.ALL:Lorg/springframework/util/MimeType;
      10: aastore
      11: invokespecial #3                  // Method org/springframework/core/codec/AbstractEncoder."<init>":([Lorg/springframework/util/MimeType;)V
      14: return

  public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType);
    Code:
       0: aload_1
       1: invokevirtual #4                  // Method org/springframework/core/ResolvableType.toClass:()Ljava/lang/Class;
       4: astore_3
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokespecial #5                  // Method org/springframework/core/codec/AbstractEncoder.canEncode:(Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;)Z
      11: ifeq          27
      14: ldc           #6                  // class java/nio/ByteBuffer
      16: aload_3
      17: invokevirtual #7                  // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      20: ifeq          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ireturn

  public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<? extends java.nio.ByteBuffer>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: invokestatic  #8                  // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       4: aload_0
       5: aload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: invokedynamic #9,  0              // InvokeDynamic #0:apply:(Lorg/springframework/core/codec/ByteBufferEncoder;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Ljava/util/function/Function;
      16: invokevirtual #10                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      19: areturn

  public org.springframework.core.io.buffer.DataBuffer encodeValue(java.nio.ByteBuffer, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #11,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.wrap:(Ljava/nio/ByteBuffer;)Lorg/springframework/core/io/buffer/DataBuffer;
       7: astore        6
       9: aload_0
      10: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
      13: invokeinterface #13,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      18: ifeq          80
      21: aload         5
      23: invokestatic  #14                 // Method org/springframework/core/codec/Hints.isLoggingSuppressed:(Ljava/util/Map;)Z
      26: ifne          80
      29: aload         5
      31: invokestatic  #15                 // Method org/springframework/core/codec/Hints.getLogPrefix:(Ljava/util/Map;)Ljava/lang/String;
      34: astore        7
      36: aload_0
      37: getfield      #12                 // Field logger:Lorg/apache/commons/logging/Log;
      40: new           #16                 // class java/lang/StringBuilder
      43: dup
      44: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
      47: aload         7
      49: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: ldc           #19                 // String Writing
      54: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: aload         6
      59: invokeinterface #20,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
      64: invokevirtual #21                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      67: ldc           #22                 // String  bytes
      69: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      75: invokeinterface #24,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      80: aload         6
      82: areturn

  public org.springframework.core.io.buffer.DataBuffer encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #6                  // class java/nio/ByteBuffer
       5: aload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: invokevirtual #25                 // Method encodeValue:(Ljava/nio/ByteBuffer;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lorg/springframework/core/io/buffer/DataBuffer;
      14: areturn

  private org.springframework.core.io.buffer.DataBuffer lambda$encode$0(org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload         5
       3: aload_1
       4: aload_2
       5: aload_3
       6: aload         4
       8: invokevirtual #25                 // Method encodeValue:(Ljava/nio/ByteBuffer;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lorg/springframework/core/io/buffer/DataBuffer;
      11: areturn
}
