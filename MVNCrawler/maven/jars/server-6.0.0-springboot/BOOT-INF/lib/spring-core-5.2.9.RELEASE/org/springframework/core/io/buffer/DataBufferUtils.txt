Compiled from "DataBufferUtils.java"
public abstract class org.springframework.core.io.buffer.DataBufferUtils {
  private static final org.apache.commons.logging.Log logger;

  private static final java.util.function.Consumer<org.springframework.core.io.buffer.DataBuffer> RELEASE_CONSUMER;

  public org.springframework.core.io.buffer.DataBufferUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readInputStream(java.util.concurrent.Callable<java.io.InputStream>, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: ldc           #2                  // String \'inputStreamSupplier\' must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokedynamic #4,  0              // InvokeDynamic #0:call:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;
      12: aload_1
      13: iload_2
      14: invokestatic  #5                  // Method readByteChannel:(Ljava/util/concurrent/Callable;Lorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
      17: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readByteChannel(java.util.concurrent.Callable<java.nio.channels.ReadableByteChannel>, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: ldc           #6                  // String \'channelSupplier\' must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #7                  // String \'dataBufferFactory\' must not be null
       9: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: iload_2
      13: ifle          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ldc           #8                  // String \'bufferSize\' must be > 0
      23: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      26: aload_0
      27: aload_1
      28: iload_2
      29: invokedynamic #10,  0             // InvokeDynamic #1:apply:(Lorg/springframework/core/io/buffer/DataBufferFactory;I)Ljava/util/function/Function;
      34: invokedynamic #11,  0             // InvokeDynamic #2:accept:()Ljava/util/function/Consumer;
      39: invokestatic  #12                 // Method reactor/core/publisher/Flux.using:(Ljava/util/concurrent/Callable;Ljava/util/function/Function;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      42: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readAsynchronousFileChannel(java.util.concurrent.Callable<java.nio.channels.AsynchronousFileChannel>, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: lconst_0
       2: aload_1
       3: iload_2
       4: invokestatic  #13                 // Method readAsynchronousFileChannel:(Ljava/util/concurrent/Callable;JLorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
       7: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> readAsynchronousFileChannel(java.util.concurrent.Callable<java.nio.channels.AsynchronousFileChannel>, long, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: ldc           #6                  // String \'channelSupplier\' must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_3
       7: ldc           #7                  // String \'dataBufferFactory\' must not be null
       9: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: lload_1
      13: lconst_0
      14: lcmp
      15: iflt          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ldc           #14                 // String \'position\' must be >= 0
      25: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      28: iload         4
      30: ifle          37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: ldc           #8                  // String \'bufferSize\' must be > 0
      40: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      43: aload_0
      44: lload_1
      45: aload_3
      46: iload         4
      48: invokedynamic #15,  0             // InvokeDynamic #3:apply:(JLorg/springframework/core/io/buffer/DataBufferFactory;I)Ljava/util/function/Function;
      53: invokedynamic #16,  0             // InvokeDynamic #4:accept:()Ljava/util/function/Consumer;
      58: invokestatic  #12                 // Method reactor/core/publisher/Flux.using:(Ljava/util/concurrent/Callable;Ljava/util/function/Function;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      61: astore        5
      63: aload         5
      65: ldc           #17                 // class org/springframework/core/io/buffer/PooledDataBuffer
      67: invokedynamic #18,  0             // InvokeDynamic #5:accept:()Ljava/util/function/Consumer;
      72: invokevirtual #19                 // Method reactor/core/publisher/Flux.doOnDiscard:(Ljava/lang/Class;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      75: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> read(java.nio.file.Path, org.springframework.core.io.buffer.DataBufferFactory, int, java.nio.file.OpenOption...);
    Code:
       0: aload_0
       1: ldc           #20                 // String Path must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #21                 // String BufferFactory must not be null
       9: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: iload_2
      13: ifle          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ldc           #8                  // String \'bufferSize\' must be > 0
      23: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      26: aload_3
      27: arraylength
      28: ifle          111
      31: aload_3
      32: astore        4
      34: aload         4
      36: arraylength
      37: istore        5
      39: iconst_0
      40: istore        6
      42: iload         6
      44: iload         5
      46: if_icmpge     111
      49: aload         4
      51: iload         6
      53: aaload
      54: astore        7
      56: aload         7
      58: getstatic     #22                 // Field java/nio/file/StandardOpenOption.APPEND:Ljava/nio/file/StandardOpenOption;
      61: if_acmpeq     76
      64: aload         7
      66: getstatic     #23                 // Field java/nio/file/StandardOpenOption.WRITE:Ljava/nio/file/StandardOpenOption;
      69: if_acmpeq     76
      72: iconst_1
      73: goto          77
      76: iconst_0
      77: new           #24                 // class java/lang/StringBuilder
      80: dup
      81: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      84: ldc           #26                 // String \'
      86: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      89: aload         7
      91: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      94: ldc           #29                 // String \' not allowed
      96: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      99: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     102: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
     105: iinc          6, 1
     108: goto          42
     111: aload_0
     112: aload_3
     113: invokedynamic #31,  0             // InvokeDynamic #6:call:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/util/concurrent/Callable;
     118: aload_1
     119: iload_2
     120: invokestatic  #32                 // Method readAsynchronousFileChannel:(Ljava/util/concurrent/Callable;Lorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
     123: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> read(org.springframework.core.io.Resource, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: lconst_0
       2: aload_1
       3: iload_2
       4: invokestatic  #33                 // Method read:(Lorg/springframework/core/io/Resource;JLorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
       7: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> read(org.springframework.core.io.Resource, long, org.springframework.core.io.buffer.DataBufferFactory, int);
    Code:
       0: aload_0
       1: invokeinterface #34,  1           // InterfaceMethod org/springframework/core/io/Resource.isFile:()Z
       6: ifeq          32
       9: aload_0
      10: invokeinterface #35,  1           // InterfaceMethod org/springframework/core/io/Resource.getFile:()Ljava/io/File;
      15: astore        5
      17: aload         5
      19: invokedynamic #36,  0             // InvokeDynamic #7:call:(Ljava/io/File;)Ljava/util/concurrent/Callable;
      24: lload_1
      25: aload_3
      26: iload         4
      28: invokestatic  #13                 // Method readAsynchronousFileChannel:(Ljava/util/concurrent/Callable;JLorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
      31: areturn
      32: goto          37
      35: astore        5
      37: aload_0
      38: dup
      39: invokevirtual #38                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      42: pop
      43: invokedynamic #39,  0             // InvokeDynamic #8:call:(Lorg/springframework/core/io/Resource;)Ljava/util/concurrent/Callable;
      48: aload_3
      49: iload         4
      51: invokestatic  #5                  // Method readByteChannel:(Ljava/util/concurrent/Callable;Lorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
      54: astore        5
      56: lload_1
      57: lconst_0
      58: lcmp
      59: ifne          67
      62: aload         5
      64: goto          73
      67: aload         5
      69: lload_1
      70: invokestatic  #40                 // Method skipUntilByteCount:(Lorg/reactivestreams/Publisher;J)Lreactor/core/publisher/Flux;
      73: areturn
    Exception table:
       from    to  target type
           0    31    35   Class java/io/IOException

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.io.OutputStream);
    Code:
       0: aload_0
       1: ldc           #41                 // String \'source\' must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #42                 // String \'outputStream\' must not be null
       9: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_1
      13: invokestatic  #43                 // Method java/nio/channels/Channels.newChannel:(Ljava/io/OutputStream;)Ljava/nio/channels/WritableByteChannel;
      16: astore_2
      17: aload_0
      18: aload_2
      19: invokestatic  #44                 // Method write:(Lorg/reactivestreams/Publisher;Ljava/nio/channels/WritableByteChannel;)Lreactor/core/publisher/Flux;
      22: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.WritableByteChannel);
    Code:
       0: aload_0
       1: ldc           #41                 // String \'source\' must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #45                 // String \'channel\' must not be null
       9: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: invokestatic  #46                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      16: astore_2
      17: aload_1
      18: aload_2
      19: invokedynamic #47,  0             // InvokeDynamic #9:accept:(Ljava/nio/channels/WritableByteChannel;Lreactor/core/publisher/Flux;)Ljava/util/function/Consumer;
      24: invokestatic  #48                 // Method reactor/core/publisher/Flux.create:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      27: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.AsynchronousFileChannel);
    Code:
       0: aload_0
       1: aload_1
       2: lconst_0
       3: invokestatic  #49                 // Method write:(Lorg/reactivestreams/Publisher;Ljava/nio/channels/AsynchronousFileChannel;J)Lreactor/core/publisher/Flux;
       6: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> write(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.AsynchronousFileChannel, long);
    Code:
       0: aload_0
       1: ldc           #41                 // String \'source\' must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #45                 // String \'channel\' must not be null
       9: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: lload_2
      13: lconst_0
      14: lcmp
      15: iflt          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ldc           #14                 // String \'position\' must be >= 0
      25: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      28: aload_0
      29: invokestatic  #46                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      32: astore        4
      34: aload_1
      35: lload_2
      36: aload         4
      38: invokedynamic #50,  0             // InvokeDynamic #10:accept:(Ljava/nio/channels/AsynchronousFileChannel;JLreactor/core/publisher/Flux;)Ljava/util/function/Consumer;
      43: invokestatic  #48                 // Method reactor/core/publisher/Flux.create:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      46: areturn

  public static reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, java.nio.file.Path, java.nio.file.OpenOption...);
    Code:
       0: aload_0
       1: ldc           #51                 // String Source must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #52                 // String Destination must not be null
       9: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_2
      13: invokestatic  #53                 // Method checkWriteOptions:([Ljava/nio/file/OpenOption;)Ljava/util/Set;
      16: astore_3
      17: aload_1
      18: aload_3
      19: aload_0
      20: invokedynamic #54,  0             // InvokeDynamic #11:accept:(Ljava/nio/file/Path;Ljava/util/Set;Lorg/reactivestreams/Publisher;)Ljava/util/function/Consumer;
      25: invokestatic  #55                 // Method reactor/core/publisher/Mono.create:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      28: areturn

  private static java.util.Set<java.nio.file.OpenOption> checkWriteOptions(java.nio.file.OpenOption[]);
    Code:
       0: aload_0
       1: arraylength
       2: istore_1
       3: new           #56                 // class java/util/HashSet
       6: dup
       7: iload_1
       8: iconst_3
       9: iadd
      10: invokespecial #57                 // Method java/util/HashSet."<init>":(I)V
      13: astore_2
      14: iload_1
      15: ifne          41
      18: aload_2
      19: getstatic     #58                 // Field java/nio/file/StandardOpenOption.CREATE:Ljava/nio/file/StandardOpenOption;
      22: invokeinterface #59,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      27: pop
      28: aload_2
      29: getstatic     #60                 // Field java/nio/file/StandardOpenOption.TRUNCATE_EXISTING:Ljava/nio/file/StandardOpenOption;
      32: invokeinterface #59,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      37: pop
      38: goto          96
      41: aload_0
      42: astore_3
      43: aload_3
      44: arraylength
      45: istore        4
      47: iconst_0
      48: istore        5
      50: iload         5
      52: iload         4
      54: if_icmpge     96
      57: aload_3
      58: iload         5
      60: aaload
      61: astore        6
      63: aload         6
      65: getstatic     #61                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;
      68: if_acmpne     81
      71: new           #62                 // class java/lang/IllegalArgumentException
      74: dup
      75: ldc           #63                 // String READ not allowed
      77: invokespecial #64                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      80: athrow
      81: aload_2
      82: aload         6
      84: invokeinterface #59,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      89: pop
      90: iinc          5, 1
      93: goto          50
      96: aload_2
      97: getstatic     #23                 // Field java/nio/file/StandardOpenOption.WRITE:Ljava/nio/file/StandardOpenOption;
     100: invokeinterface #59,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     105: pop
     106: aload_2
     107: areturn

  static void closeChannel(java.nio.channels.Channel);
    Code:
       0: aload_0
       1: ifnull        23
       4: aload_0
       5: invokeinterface #65,  1           // InterfaceMethod java/nio/channels/Channel.isOpen:()Z
      10: ifeq          23
      13: aload_0
      14: invokeinterface #66,  1           // InterfaceMethod java/nio/channels/Channel.close:()V
      19: goto          23
      22: astore_1
      23: return
    Exception table:
       from    to  target type
          13    19    22   Class java/io/IOException

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> takeUntilByteCount(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, long);
    Code:
       0: aload_0
       1: ldc           #67                 // String Publisher must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: lload_1
       7: lconst_0
       8: lcmp
       9: iflt          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ldc           #68                 // String \'maxByteCount\' must be a positive number
      19: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      22: lload_1
      23: aload_0
      24: invokedynamic #69,  0             // InvokeDynamic #12:get:(JLorg/reactivestreams/Publisher;)Ljava/util/function/Supplier;
      29: invokestatic  #70                 // Method reactor/core/publisher/Flux.defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
      32: areturn

  public static reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> skipUntilByteCount(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, long);
    Code:
       0: aload_0
       1: ldc           #67                 // String Publisher must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: lload_1
       7: lconst_0
       8: lcmp
       9: iflt          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ldc           #68                 // String \'maxByteCount\' must be a positive number
      19: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      22: lload_1
      23: aload_0
      24: invokedynamic #71,  0             // InvokeDynamic #13:get:(JLorg/reactivestreams/Publisher;)Ljava/util/function/Supplier;
      29: invokestatic  #70                 // Method reactor/core/publisher/Flux.defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
      32: ldc           #17                 // class org/springframework/core/io/buffer/PooledDataBuffer
      34: invokedynamic #18,  0             // InvokeDynamic #5:accept:()Ljava/util/function/Consumer;
      39: invokevirtual #19                 // Method reactor/core/publisher/Flux.doOnDiscard:(Ljava/lang/Class;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      42: areturn

  public static <T extends org.springframework.core.io.buffer.DataBuffer> T retain(T);
    Code:
       0: aload_0
       1: instanceof    #17                 // class org/springframework/core/io/buffer/PooledDataBuffer
       4: ifeq          17
       7: aload_0
       8: checkcast     #17                 // class org/springframework/core/io/buffer/PooledDataBuffer
      11: invokeinterface #72,  1           // InterfaceMethod org/springframework/core/io/buffer/PooledDataBuffer.retain:()Lorg/springframework/core/io/buffer/PooledDataBuffer;
      16: areturn
      17: aload_0
      18: areturn

  public static boolean release(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: instanceof    #17                 // class org/springframework/core/io/buffer/PooledDataBuffer
       4: ifeq          53
       7: aload_0
       8: checkcast     #17                 // class org/springframework/core/io/buffer/PooledDataBuffer
      11: astore_1
      12: aload_1
      13: invokeinterface #73,  1           // InterfaceMethod org/springframework/core/io/buffer/PooledDataBuffer.isAllocated:()Z
      18: ifeq          53
      21: aload_1
      22: invokeinterface #74,  1           // InterfaceMethod org/springframework/core/io/buffer/PooledDataBuffer.release:()Z
      27: ireturn
      28: astore_2
      29: getstatic     #76                 // Field logger:Lorg/apache/commons/logging/Log;
      32: invokeinterface #77,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      37: ifeq          51
      40: getstatic     #76                 // Field logger:Lorg/apache/commons/logging/Log;
      43: ldc           #78                 // String Failed to release PooledDataBuffer
      45: aload_2
      46: invokeinterface #79,  3           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      51: iconst_0
      52: ireturn
      53: iconst_0
      54: ireturn
    Exception table:
       from    to  target type
          21    27    28   Class java/lang/IllegalStateException

  public static java.util.function.Consumer<org.springframework.core.io.buffer.DataBuffer> releaseConsumer();
    Code:
       0: getstatic     #80                 // Field RELEASE_CONSUMER:Ljava/util/function/Consumer;
       3: areturn

  public static reactor.core.publisher.Mono<org.springframework.core.io.buffer.DataBuffer> join(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_0
       1: iconst_m1
       2: invokestatic  #81                 // Method join:(Lorg/reactivestreams/Publisher;I)Lreactor/core/publisher/Mono;
       5: areturn

  public static reactor.core.publisher.Mono<org.springframework.core.io.buffer.DataBuffer> join(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, int);
    Code:
       0: aload_0
       1: ldc           #82                 // String \'dataBuffers\' must not be null
       3: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: instanceof    #83                 // class reactor/core/publisher/Mono
      10: ifeq          18
      13: aload_0
      14: checkcast     #83                 // class reactor/core/publisher/Mono
      17: areturn
      18: aload_0
      19: invokestatic  #46                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      22: iload_1
      23: invokedynamic #84,  0             // InvokeDynamic #14:get:(I)Ljava/util/function/Supplier;
      28: invokedynamic #85,  0             // InvokeDynamic #15:accept:()Ljava/util/function/BiConsumer;
      33: invokevirtual #86                 // Method reactor/core/publisher/Flux.collect:(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;)Lreactor/core/publisher/Mono;
      36: invokedynamic #87,  0             // InvokeDynamic #16:test:()Ljava/util/function/Predicate;
      41: invokevirtual #88                 // Method reactor/core/publisher/Mono.filter:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Mono;
      44: invokedynamic #89,  0             // InvokeDynamic #17:apply:()Ljava/util/function/Function;
      49: invokevirtual #90                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      52: ldc           #17                 // class org/springframework/core/io/buffer/PooledDataBuffer
      54: invokedynamic #18,  0             // InvokeDynamic #5:accept:()Ljava/util/function/Consumer;
      59: invokevirtual #91                 // Method reactor/core/publisher/Mono.doOnDiscard:(Ljava/lang/Class;Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      62: areturn

  public static org.springframework.core.io.buffer.DataBufferUtils$Matcher matcher(byte[]);
    Code:
       0: aload_0
       1: arraylength
       2: ifle          9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #92                 // String Delimiter must not be empty
      12: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      15: new           #93                 // class org/springframework/core/io/buffer/DataBufferUtils$KnuthMorrisPrattMatcher
      18: dup
      19: aload_0
      20: invokespecial #94                 // Method org/springframework/core/io/buffer/DataBufferUtils$KnuthMorrisPrattMatcher."<init>":([B)V
      23: areturn

  public static org.springframework.core.io.buffer.DataBufferUtils$Matcher matcher(byte[]...);
    Code:
       0: aload_0
       1: arraylength
       2: ifle          9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #95                 // String Delimiters must not be empty
      12: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      15: aload_0
      16: arraylength
      17: iconst_1
      18: if_icmpne     28
      21: aload_0
      22: iconst_0
      23: aaload
      24: invokestatic  #96                 // Method matcher:([B)Lorg/springframework/core/io/buffer/DataBufferUtils$Matcher;
      27: areturn
      28: aload_0
      29: arraylength
      30: anewarray     #97                 // class org/springframework/core/io/buffer/DataBufferUtils$Matcher
      33: astore_1
      34: iconst_0
      35: istore_2
      36: iload_2
      37: aload_0
      38: arraylength
      39: if_icmpge     57
      42: aload_1
      43: iload_2
      44: aload_0
      45: iload_2
      46: aaload
      47: invokestatic  #96                 // Method matcher:([B)Lorg/springframework/core/io/buffer/DataBufferUtils$Matcher;
      50: aastore
      51: iinc          2, 1
      54: goto          36
      57: new           #98                 // class org/springframework/core/io/buffer/DataBufferUtils$CompositeMatcher
      60: dup
      61: aload_1
      62: invokespecial #99                 // Method org/springframework/core/io/buffer/DataBufferUtils$CompositeMatcher."<init>":([Lorg/springframework/core/io/buffer/DataBufferUtils$Matcher;)V
      65: areturn

  private static org.springframework.core.io.buffer.DataBuffer lambda$join$19(org.springframework.core.io.buffer.LimitedDataBufferList);
    Code:
       0: aload_0
       1: iconst_0
       2: invokevirtual #100                // Method org/springframework/core/io/buffer/LimitedDataBufferList.get:(I)Ljava/lang/Object;
       5: checkcast     #101                // class org/springframework/core/io/buffer/DataBuffer
       8: invokeinterface #102,  1          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.factory:()Lorg/springframework/core/io/buffer/DataBufferFactory;
      13: aload_0
      14: invokeinterface #103,  2          // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.join:(Ljava/util/List;)Lorg/springframework/core/io/buffer/DataBuffer;
      19: areturn

  private static boolean lambda$join$18(org.springframework.core.io.buffer.LimitedDataBufferList);
    Code:
       0: aload_0
       1: invokevirtual #104                // Method org/springframework/core/io/buffer/LimitedDataBufferList.isEmpty:()Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  private static org.springframework.core.io.buffer.LimitedDataBufferList lambda$join$17(int);
    Code:
       0: new           #105                // class org/springframework/core/io/buffer/LimitedDataBufferList
       3: dup
       4: iload_0
       5: invokespecial #106                // Method org/springframework/core/io/buffer/LimitedDataBufferList."<init>":(I)V
       8: areturn

  private static org.reactivestreams.Publisher lambda$skipUntilByteCount$16(long, org.reactivestreams.Publisher);
    Code:
       0: new           #107                // class java/util/concurrent/atomic/AtomicLong
       3: dup
       4: lload_0
       5: invokespecial #108                // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
       8: astore_3
       9: aload_2
      10: invokestatic  #46                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      13: aload_3
      14: invokedynamic #109,  0            // InvokeDynamic #18:test:(Ljava/util/concurrent/atomic/AtomicLong;)Ljava/util/function/Predicate;
      19: invokevirtual #110                // Method reactor/core/publisher/Flux.skipUntil:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Flux;
      22: aload_3
      23: invokedynamic #111,  0            // InvokeDynamic #19:apply:(Ljava/util/concurrent/atomic/AtomicLong;)Ljava/util/function/Function;
      28: invokevirtual #112                // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      31: areturn

  private static org.springframework.core.io.buffer.DataBuffer lambda$null$15(java.util.concurrent.atomic.AtomicLong, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: invokevirtual #113                // Method java/util/concurrent/atomic/AtomicLong.get:()J
       4: lstore_2
       5: lload_2
       6: lconst_0
       7: lcmp
       8: ifge          43
      11: aload_0
      12: lconst_0
      13: invokevirtual #114                // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      16: aload_1
      17: invokeinterface #115,  1          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
      22: lload_2
      23: l2i
      24: iadd
      25: istore        4
      27: lload_2
      28: lneg
      29: l2i
      30: istore        5
      32: aload_1
      33: iload         4
      35: iload         5
      37: invokeinterface #116,  3          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.slice:(II)Lorg/springframework/core/io/buffer/DataBuffer;
      42: areturn
      43: aload_1
      44: areturn

  private static boolean lambda$null$14(java.util.concurrent.atomic.AtomicLong, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #115,  1          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
       7: ineg
       8: i2l
       9: invokevirtual #117                // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      12: lstore_2
      13: lload_2
      14: lconst_0
      15: lcmp
      16: ifge          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  private static org.reactivestreams.Publisher lambda$takeUntilByteCount$13(long, org.reactivestreams.Publisher);
    Code:
       0: new           #107                // class java/util/concurrent/atomic/AtomicLong
       3: dup
       4: lload_0
       5: invokespecial #108                // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
       8: astore_3
       9: aload_2
      10: invokestatic  #46                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      13: aload_3
      14: invokedynamic #118,  0            // InvokeDynamic #20:apply:(Ljava/util/concurrent/atomic/AtomicLong;)Ljava/util/function/Function;
      19: invokevirtual #112                // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      22: aload_3
      23: invokedynamic #119,  0            // InvokeDynamic #21:test:(Ljava/util/concurrent/atomic/AtomicLong;)Ljava/util/function/Predicate;
      28: invokevirtual #120                // Method reactor/core/publisher/Flux.takeUntil:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Flux;
      31: areturn

  private static boolean lambda$null$12(java.util.concurrent.atomic.AtomicLong, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: invokevirtual #113                // Method java/util/concurrent/atomic/AtomicLong.get:()J
       4: lconst_0
       5: lcmp
       6: ifgt          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private static org.springframework.core.io.buffer.DataBuffer lambda$null$11(java.util.concurrent.atomic.AtomicLong, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #115,  1          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
       7: ineg
       8: i2l
       9: invokevirtual #117                // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      12: lstore_2
      13: lload_2
      14: lconst_0
      15: lcmp
      16: ifge          40
      19: aload_1
      20: invokeinterface #115,  1          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
      25: lload_2
      26: l2i
      27: iadd
      28: istore        4
      30: aload_1
      31: iconst_0
      32: iload         4
      34: invokeinterface #116,  3          // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.slice:(II)Lorg/springframework/core/io/buffer/DataBuffer;
      39: areturn
      40: aload_1
      41: areturn

  private static void lambda$write$10(java.nio.file.Path, java.util.Set, org.reactivestreams.Publisher, reactor.core.publisher.MonoSink);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: iconst_0
       4: anewarray     #121                // class java/nio/file/attribute/FileAttribute
       7: invokestatic  #122                // Method java/nio/channels/AsynchronousFileChannel.open:(Ljava/nio/file/Path;Ljava/util/Set;Ljava/util/concurrent/ExecutorService;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/AsynchronousFileChannel;
      10: astore        4
      12: aload_3
      13: aload         4
      15: invokedynamic #123,  0            // InvokeDynamic #22:dispose:(Ljava/nio/channels/AsynchronousFileChannel;)Lreactor/core/Disposable;
      20: invokeinterface #124,  2          // InterfaceMethod reactor/core/publisher/MonoSink.onDispose:(Lreactor/core/Disposable;)Lreactor/core/publisher/MonoSink;
      25: pop
      26: aload_2
      27: aload         4
      29: invokestatic  #125                // Method write:(Lorg/reactivestreams/Publisher;Ljava/nio/channels/AsynchronousFileChannel;)Lreactor/core/publisher/Flux;
      32: invokedynamic #126,  0            // InvokeDynamic #23:accept:()Ljava/util/function/Consumer;
      37: aload_3
      38: dup
      39: invokevirtual #38                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      42: pop
      43: invokedynamic #127,  0            // InvokeDynamic #24:accept:(Lreactor/core/publisher/MonoSink;)Ljava/util/function/Consumer;
      48: aload_3
      49: dup
      50: invokevirtual #38                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      53: pop
      54: invokedynamic #128,  0            // InvokeDynamic #25:run:(Lreactor/core/publisher/MonoSink;)Ljava/lang/Runnable;
      59: invokevirtual #129                // Method reactor/core/publisher/Flux.subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;)Lreactor/core/Disposable;
      62: pop
      63: goto          76
      66: astore        4
      68: aload_3
      69: aload         4
      71: invokeinterface #130,  2          // InterfaceMethod reactor/core/publisher/MonoSink.error:(Ljava/lang/Throwable;)V
      76: return
    Exception table:
       from    to  target type
           0    63    66   Class java/io/IOException

  private static void lambda$null$9(java.nio.channels.AsynchronousFileChannel);
    Code:
       0: aload_0
       1: invokestatic  #131                // Method closeChannel:(Ljava/nio/channels/Channel;)V
       4: return

  private static void lambda$write$8(java.nio.channels.AsynchronousFileChannel, long, reactor.core.publisher.Flux, reactor.core.publisher.FluxSink);
    Code:
       0: new           #132                // class org/springframework/core/io/buffer/DataBufferUtils$WriteCompletionHandler
       3: dup
       4: aload         4
       6: aload_0
       7: lload_1
       8: invokespecial #133                // Method org/springframework/core/io/buffer/DataBufferUtils$WriteCompletionHandler."<init>":(Lreactor/core/publisher/FluxSink;Ljava/nio/channels/AsynchronousFileChannel;J)V
      11: astore        5
      13: aload         4
      15: aload         5
      17: invokeinterface #134,  2          // InterfaceMethod reactor/core/publisher/FluxSink.onDispose:(Lreactor/core/Disposable;)Lreactor/core/publisher/FluxSink;
      22: pop
      23: aload_3
      24: aload         5
      26: invokevirtual #135                // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      29: return

  private static void lambda$write$7(java.nio.channels.WritableByteChannel, reactor.core.publisher.Flux, reactor.core.publisher.FluxSink);
    Code:
       0: new           #136                // class org/springframework/core/io/buffer/DataBufferUtils$WritableByteChannelSubscriber
       3: dup
       4: aload_2
       5: aload_0
       6: invokespecial #137                // Method org/springframework/core/io/buffer/DataBufferUtils$WritableByteChannelSubscriber."<init>":(Lreactor/core/publisher/FluxSink;Ljava/nio/channels/WritableByteChannel;)V
       9: astore_3
      10: aload_2
      11: aload_3
      12: invokeinterface #134,  2          // InterfaceMethod reactor/core/publisher/FluxSink.onDispose:(Lreactor/core/Disposable;)Lreactor/core/publisher/FluxSink;
      17: pop
      18: aload_1
      19: aload_3
      20: invokevirtual #135                // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      23: return

  private static java.nio.channels.AsynchronousFileChannel lambda$read$6(java.io.File) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #138                // Method java/io/File.toPath:()Ljava/nio/file/Path;
       4: iconst_1
       5: anewarray     #139                // class java/nio/file/OpenOption
       8: dup
       9: iconst_0
      10: getstatic     #61                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;
      13: aastore
      14: invokestatic  #140                // Method java/nio/channels/AsynchronousFileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/AsynchronousFileChannel;
      17: areturn

  private static java.nio.channels.AsynchronousFileChannel lambda$read$5(java.nio.file.Path, java.nio.file.OpenOption[]) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #140                // Method java/nio/channels/AsynchronousFileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/AsynchronousFileChannel;
       5: areturn

  private static void lambda$readAsynchronousFileChannel$4(java.nio.channels.AsynchronousFileChannel);
    Code:
       0: return

  private static org.reactivestreams.Publisher lambda$readAsynchronousFileChannel$3(long, org.springframework.core.io.buffer.DataBufferFactory, int, java.nio.channels.AsynchronousFileChannel);
    Code:
       0: aload         4
       2: lload_0
       3: aload_2
       4: iload_3
       5: invokedynamic #141,  0            // InvokeDynamic #26:accept:(Ljava/nio/channels/AsynchronousFileChannel;JLorg/springframework/core/io/buffer/DataBufferFactory;I)Ljava/util/function/Consumer;
      10: invokestatic  #48                 // Method reactor/core/publisher/Flux.create:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      13: areturn

  private static void lambda$null$2(java.nio.channels.AsynchronousFileChannel, long, org.springframework.core.io.buffer.DataBufferFactory, int, reactor.core.publisher.FluxSink);
    Code:
       0: new           #142                // class org/springframework/core/io/buffer/DataBufferUtils$ReadCompletionHandler
       3: dup
       4: aload_0
       5: aload         5
       7: lload_1
       8: aload_3
       9: iload         4
      11: invokespecial #143                // Method org/springframework/core/io/buffer/DataBufferUtils$ReadCompletionHandler."<init>":(Ljava/nio/channels/AsynchronousFileChannel;Lreactor/core/publisher/FluxSink;JLorg/springframework/core/io/buffer/DataBufferFactory;I)V
      14: astore        6
      16: aload         5
      18: aload         6
      20: dup
      21: invokevirtual #38                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      24: pop
      25: invokedynamic #144,  0            // InvokeDynamic #27:dispose:(Lorg/springframework/core/io/buffer/DataBufferUtils$ReadCompletionHandler;)Lreactor/core/Disposable;
      30: invokeinterface #145,  2          // InterfaceMethod reactor/core/publisher/FluxSink.onCancel:(Lreactor/core/Disposable;)Lreactor/core/publisher/FluxSink;
      35: pop
      36: aload         5
      38: aload         6
      40: dup
      41: invokevirtual #38                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      44: pop
      45: invokedynamic #146,  0            // InvokeDynamic #28:accept:(Lorg/springframework/core/io/buffer/DataBufferUtils$ReadCompletionHandler;)Ljava/util/function/LongConsumer;
      50: invokeinterface #147,  2          // InterfaceMethod reactor/core/publisher/FluxSink.onRequest:(Ljava/util/function/LongConsumer;)Lreactor/core/publisher/FluxSink;
      55: pop
      56: return

  private static org.reactivestreams.Publisher lambda$readByteChannel$1(org.springframework.core.io.buffer.DataBufferFactory, int, java.nio.channels.ReadableByteChannel);
    Code:
       0: new           #148                // class org/springframework/core/io/buffer/DataBufferUtils$ReadableByteChannelGenerator
       3: dup
       4: aload_2
       5: aload_0
       6: iload_1
       7: invokespecial #149                // Method org/springframework/core/io/buffer/DataBufferUtils$ReadableByteChannelGenerator."<init>":(Ljava/nio/channels/ReadableByteChannel;Lorg/springframework/core/io/buffer/DataBufferFactory;I)V
      10: invokestatic  #150                // Method reactor/core/publisher/Flux.generate:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      13: areturn

  private static java.nio.channels.ReadableByteChannel lambda$readInputStream$0(java.util.concurrent.Callable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokeinterface #151,  1          // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
       6: checkcast     #152                // class java/io/InputStream
       9: invokestatic  #153                // Method java/nio/channels/Channels.newChannel:(Ljava/io/InputStream;)Ljava/nio/channels/ReadableByteChannel;
      12: areturn

  static {};
    Code:
       0: ldc           #154                // class org/springframework/core/io/buffer/DataBufferUtils
       2: invokestatic  #155                // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #76                 // Field logger:Lorg/apache/commons/logging/Log;
       8: invokedynamic #126,  0            // InvokeDynamic #23:accept:()Ljava/util/function/Consumer;
      13: putstatic     #80                 // Field RELEASE_CONSUMER:Ljava/util/function/Consumer;
      16: return
}
