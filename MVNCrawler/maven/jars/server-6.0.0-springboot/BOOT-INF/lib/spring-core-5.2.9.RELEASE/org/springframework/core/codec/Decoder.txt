Compiled from "Decoder.java"
public interface org.springframework.core.codec.Decoder<T> {
  public abstract boolean canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType);

  public abstract reactor.core.publisher.Flux<T> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);

  public abstract reactor.core.publisher.Mono<T> decodeToMono(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);

  public default T decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.core.codec.DecodingException;
    Code:
       0: invokestatic  #1                  // Method reactor/core/publisher/MonoProcessor.create:()Lreactor/core/publisher/MonoProcessor;
       3: astore        5
       5: aload_0
       6: aload_1
       7: invokestatic  #2                  // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      10: aload_2
      11: aload_3
      12: aload         4
      14: invokeinterface #3,  5            // InterfaceMethod decodeToMono:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      19: aload         5
      21: invokevirtual #4                  // Method reactor/core/publisher/Mono.subscribeWith:(Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;
      24: pop
      25: aload         5
      27: invokevirtual #5                  // Method reactor/core/publisher/MonoProcessor.isTerminated:()Z
      30: ldc           #6                  // String DataBuffer decoding should have completed.
      32: invokestatic  #7                  // Method org/springframework/util/Assert.state:(ZLjava/lang/String;)V
      35: aload         5
      37: invokevirtual #8                  // Method reactor/core/publisher/MonoProcessor.getError:()Ljava/lang/Throwable;
      40: astore        6
      42: aload         6
      44: ifnull        96
      47: aload         6
      49: instanceof    #9                  // class org/springframework/core/codec/CodecException
      52: ifeq          63
      55: aload         6
      57: checkcast     #9                  // class org/springframework/core/codec/CodecException
      60: goto          95
      63: new           #10                 // class org/springframework/core/codec/DecodingException
      66: dup
      67: new           #11                 // class java/lang/StringBuilder
      70: dup
      71: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      74: ldc           #13                 // String Failed to decode:
      76: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: aload         6
      81: invokevirtual #15                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      84: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      90: aload         6
      92: invokespecial #17                 // Method org/springframework/core/codec/DecodingException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      95: athrow
      96: aload         5
      98: invokevirtual #18                 // Method reactor/core/publisher/MonoProcessor.peek:()Ljava/lang/Object;
     101: areturn

  public abstract java.util.List<org.springframework.util.MimeType> getDecodableMimeTypes();
}
