Compiled from "DataBufferUtils.java"
class org.springframework.core.io.buffer.DataBufferUtils$WriteCompletionHandler extends reactor.core.publisher.BaseSubscriber<org.springframework.core.io.buffer.DataBuffer> implements java.nio.channels.CompletionHandler<java.lang.Integer, java.nio.ByteBuffer> {
  private final reactor.core.publisher.FluxSink<org.springframework.core.io.buffer.DataBuffer> sink;

  private final java.nio.channels.AsynchronousFileChannel channel;

  private final java.util.concurrent.atomic.AtomicBoolean completed;

  private final java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> error;

  private final java.util.concurrent.atomic.AtomicLong position;

  private final java.util.concurrent.atomic.AtomicReference<org.springframework.core.io.buffer.DataBuffer> dataBuffer;

  public org.springframework.core.io.buffer.DataBufferUtils$WriteCompletionHandler(reactor.core.publisher.FluxSink<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.AsynchronousFileChannel, long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/BaseSubscriber."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      12: putfield      #4                  // Field completed:Ljava/util/concurrent/atomic/AtomicBoolean;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/atomic/AtomicReference
      19: dup
      20: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      23: putfield      #7                  // Field error:Ljava/util/concurrent/atomic/AtomicReference;
      26: aload_0
      27: new           #5                  // class java/util/concurrent/atomic/AtomicReference
      30: dup
      31: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      34: putfield      #8                  // Field dataBuffer:Ljava/util/concurrent/atomic/AtomicReference;
      37: aload_0
      38: aload_1
      39: putfield      #9                  // Field sink:Lreactor/core/publisher/FluxSink;
      42: aload_0
      43: aload_2
      44: putfield      #10                 // Field channel:Ljava/nio/channels/AsynchronousFileChannel;
      47: aload_0
      48: new           #11                 // class java/util/concurrent/atomic/AtomicLong
      51: dup
      52: lload_3
      53: invokespecial #12                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      56: putfield      #13                 // Field position:Ljava/util/concurrent/atomic/AtomicLong;
      59: return

  protected void hookOnSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: lconst_1
       2: invokevirtual #14                 // Method request:(J)V
       5: return

  protected void hookOnNext(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: getfield      #8                  // Field dataBuffer:Ljava/util/concurrent/atomic/AtomicReference;
       4: aconst_null
       5: aload_1
       6: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ifne          20
      12: new           #16                 // class java/lang/IllegalStateException
      15: dup
      16: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":()V
      19: athrow
      20: aload_1
      21: invokeinterface #18,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asByteBuffer:()Ljava/nio/ByteBuffer;
      26: astore_2
      27: aload_0
      28: getfield      #10                 // Field channel:Ljava/nio/channels/AsynchronousFileChannel;
      31: aload_2
      32: aload_0
      33: getfield      #13                 // Field position:Ljava/util/concurrent/atomic/AtomicLong;
      36: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      39: aload_2
      40: aload_0
      41: invokevirtual #20                 // Method java/nio/channels/AsynchronousFileChannel.write:(Ljava/nio/ByteBuffer;JLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V
      44: return

  protected void hookOnError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #7                  // Field error:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
       8: aload_0
       9: getfield      #8                  // Field dataBuffer:Ljava/util/concurrent/atomic/AtomicReference;
      12: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      15: ifnonnull     28
      18: aload_0
      19: getfield      #9                  // Field sink:Lreactor/core/publisher/FluxSink;
      22: aload_1
      23: invokeinterface #23,  2           // InterfaceMethod reactor/core/publisher/FluxSink.error:(Ljava/lang/Throwable;)V
      28: return

  protected void hookOnComplete();
    Code:
       0: aload_0
       1: getfield      #4                  // Field completed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       8: aload_0
       9: getfield      #8                  // Field dataBuffer:Ljava/util/concurrent/atomic/AtomicReference;
      12: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      15: ifnonnull     27
      18: aload_0
      19: getfield      #9                  // Field sink:Lreactor/core/publisher/FluxSink;
      22: invokeinterface #25,  1           // InterfaceMethod reactor/core/publisher/FluxSink.complete:()V
      27: return

  public void completed(java.lang.Integer, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #13                 // Field position:Ljava/util/concurrent/atomic/AtomicLong;
       4: aload_1
       5: invokevirtual #26                 // Method java/lang/Integer.intValue:()I
       8: i2l
       9: invokevirtual #27                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      12: lstore_3
      13: aload_2
      14: invokevirtual #28                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      17: ifeq          32
      20: aload_0
      21: getfield      #10                 // Field channel:Ljava/nio/channels/AsynchronousFileChannel;
      24: aload_2
      25: lload_3
      26: aload_2
      27: aload_0
      28: invokevirtual #20                 // Method java/nio/channels/AsynchronousFileChannel.write:(Ljava/nio/ByteBuffer;JLjava/lang/Object;Ljava/nio/channels/CompletionHandler;)V
      31: return
      32: aload_0
      33: invokespecial #29                 // Method sinkDataBuffer:()V
      36: aload_0
      37: getfield      #7                  // Field error:Ljava/util/concurrent/atomic/AtomicReference;
      40: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      43: checkcast     #30                 // class java/lang/Throwable
      46: astore        5
      48: aload         5
      50: ifnull        67
      53: aload_0
      54: getfield      #9                  // Field sink:Lreactor/core/publisher/FluxSink;
      57: aload         5
      59: invokeinterface #23,  2           // InterfaceMethod reactor/core/publisher/FluxSink.error:(Ljava/lang/Throwable;)V
      64: goto          94
      67: aload_0
      68: getfield      #4                  // Field completed:Ljava/util/concurrent/atomic/AtomicBoolean;
      71: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      74: ifeq          89
      77: aload_0
      78: getfield      #9                  // Field sink:Lreactor/core/publisher/FluxSink;
      81: invokeinterface #25,  1           // InterfaceMethod reactor/core/publisher/FluxSink.complete:()V
      86: goto          94
      89: aload_0
      90: lconst_1
      91: invokevirtual #14                 // Method request:(J)V
      94: return

  public void failed(java.lang.Throwable, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: invokespecial #29                 // Method sinkDataBuffer:()V
       4: aload_0
       5: getfield      #9                  // Field sink:Lreactor/core/publisher/FluxSink;
       8: aload_1
       9: invokeinterface #23,  2           // InterfaceMethod reactor/core/publisher/FluxSink.error:(Ljava/lang/Throwable;)V
      14: return

  private void sinkDataBuffer();
    Code:
       0: aload_0
       1: getfield      #8                  // Field dataBuffer:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #32                 // class org/springframework/core/io/buffer/DataBuffer
      10: astore_1
      11: aload_1
      12: ifnull        19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ldc           #33                 // String DataBuffer should not be null
      22: invokestatic  #34                 // Method org/springframework/util/Assert.state:(ZLjava/lang/String;)V
      25: aload_0
      26: getfield      #9                  // Field sink:Lreactor/core/publisher/FluxSink;
      29: aload_1
      30: invokeinterface #35,  2           // InterfaceMethod reactor/core/publisher/FluxSink.next:(Ljava/lang/Object;)Lreactor/core/publisher/FluxSink;
      35: pop
      36: aload_0
      37: getfield      #8                  // Field dataBuffer:Ljava/util/concurrent/atomic/AtomicReference;
      40: aconst_null
      41: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      44: return

  protected void hookOnNext(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #32                 // class org/springframework/core/io/buffer/DataBuffer
       5: invokevirtual #36                 // Method hookOnNext:(Lorg/springframework/core/io/buffer/DataBuffer;)V
       8: return

  public void failed(java.lang.Throwable, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #37                 // class java/nio/ByteBuffer
       6: invokevirtual #38                 // Method failed:(Ljava/lang/Throwable;Ljava/nio/ByteBuffer;)V
       9: return

  public void completed(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #39                 // class java/lang/Integer
       5: aload_2
       6: checkcast     #37                 // class java/nio/ByteBuffer
       9: invokevirtual #40                 // Method completed:(Ljava/lang/Integer;Ljava/nio/ByteBuffer;)V
      12: return
}
