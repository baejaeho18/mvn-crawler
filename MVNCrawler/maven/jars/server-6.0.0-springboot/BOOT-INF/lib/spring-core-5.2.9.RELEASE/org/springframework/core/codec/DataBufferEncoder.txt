Compiled from "DataBufferEncoder.java"
public class org.springframework.core.codec.DataBufferEncoder extends org.springframework.core.codec.AbstractEncoder<org.springframework.core.io.buffer.DataBuffer> {
  public org.springframework.core.codec.DataBufferEncoder();
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #1                  // class org/springframework/util/MimeType
       5: dup
       6: iconst_0
       7: getstatic     #2                  // Field org/springframework/util/MimeTypeUtils.ALL:Lorg/springframework/util/MimeType;
      10: aastore
      11: invokespecial #3                  // Method org/springframework/core/codec/AbstractEncoder."<init>":([Lorg/springframework/util/MimeType;)V
      14: return

  public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType);
    Code:
       0: aload_1
       1: invokevirtual #4                  // Method org/springframework/core/ResolvableType.toClass:()Ljava/lang/Class;
       4: astore_3
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokespecial #5                  // Method org/springframework/core/codec/AbstractEncoder.canEncode:(Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;)Z
      11: ifeq          27
      14: ldc           #6                  // class org/springframework/core/io/buffer/DataBuffer
      16: aload_3
      17: invokevirtual #7                  // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      20: ifeq          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ireturn

  public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: invokestatic  #8                  // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       4: astore        6
       6: aload_0
       7: getfield      #9                  // Field logger:Lorg/apache/commons/logging/Log;
      10: invokeinterface #10,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      15: ifeq          41
      18: aload         5
      20: invokestatic  #11                 // Method org/springframework/core/codec/Hints.isLoggingSuppressed:(Ljava/util/Map;)Z
      23: ifne          41
      26: aload         6
      28: aload_0
      29: aload         5
      31: invokedynamic #12,  0             // InvokeDynamic #0:accept:(Lorg/springframework/core/codec/DataBufferEncoder;Ljava/util/Map;)Ljava/util/function/Consumer;
      36: invokevirtual #13                 // Method reactor/core/publisher/Flux.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      39: astore        6
      41: aload         6
      43: areturn

  public org.springframework.core.io.buffer.DataBuffer encodeValue(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #9                  // Field logger:Lorg/apache/commons/logging/Log;
       4: invokeinterface #10,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
       9: ifeq          27
      12: aload         5
      14: invokestatic  #11                 // Method org/springframework/core/codec/Hints.isLoggingSuppressed:(Ljava/util/Map;)Z
      17: ifne          27
      20: aload_0
      21: aload_1
      22: aload         5
      24: invokespecial #14                 // Method logValue:(Lorg/springframework/core/io/buffer/DataBuffer;Ljava/util/Map;)V
      27: aload_1
      28: areturn

  private void logValue(org.springframework.core.io.buffer.DataBuffer, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_2
       1: invokestatic  #15                 // Method org/springframework/core/codec/Hints.getLogPrefix:(Ljava/util/Map;)Ljava/lang/String;
       4: astore_3
       5: aload_0
       6: getfield      #9                  // Field logger:Lorg/apache/commons/logging/Log;
       9: new           #16                 // class java/lang/StringBuilder
      12: dup
      13: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
      16: aload_3
      17: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: ldc           #19                 // String Writing
      22: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: aload_1
      26: invokeinterface #20,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
      31: invokevirtual #21                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      34: ldc           #22                 // String  bytes
      36: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokeinterface #24,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      47: return

  public org.springframework.core.io.buffer.DataBuffer encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #6                  // class org/springframework/core/io/buffer/DataBuffer
       5: aload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: invokevirtual #25                 // Method encodeValue:(Lorg/springframework/core/io/buffer/DataBuffer;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lorg/springframework/core/io/buffer/DataBuffer;
      14: areturn

  private void lambda$encode$0(java.util.Map, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokespecial #14                 // Method logValue:(Lorg/springframework/core/io/buffer/DataBuffer;Ljava/util/Map;)V
       6: return
}
