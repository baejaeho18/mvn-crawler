Compiled from "MimeTypeUtils.java"
class org.springframework.util.MimeTypeUtils$ConcurrentLruCache<K, V> {
  private final int maxSize;

  private final java.util.concurrent.ConcurrentLinkedDeque<K> queue;

  private final java.util.concurrent.ConcurrentHashMap<K, V> cache;

  private final java.util.concurrent.locks.ReadWriteLock lock;

  private final java.util.function.Function<K, V> generator;

  private volatile int size;

  public org.springframework.util.MimeTypeUtils$ConcurrentLruCache(int, java.util.function.Function<K, V>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/ConcurrentLinkedDeque
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/ConcurrentLinkedDeque."<init>":()V
      12: putfield      #4                  // Field queue:Ljava/util/concurrent/ConcurrentLinkedDeque;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/ConcurrentHashMap
      19: dup
      20: invokespecial #6                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      23: putfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
      26: iload_1
      27: ifle          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ldc           #8                  // String LRU max size should be positive
      37: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      40: aload_2
      41: ldc           #10                 // String Generator function should not be null
      43: invokestatic  #11                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      46: aload_0
      47: iload_1
      48: putfield      #12                 // Field maxSize:I
      51: aload_0
      52: aload_2
      53: putfield      #13                 // Field generator:Ljava/util/function/Function;
      56: aload_0
      57: new           #14                 // class java/util/concurrent/locks/ReentrantReadWriteLock
      60: dup
      61: invokespecial #15                 // Method java/util/concurrent/locks/ReentrantReadWriteLock."<init>":()V
      64: putfield      #16                 // Field lock:Ljava/util/concurrent/locks/ReadWriteLock;
      67: return

  public V get(K);
    Code:
       0: aload_0
       1: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #17                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: astore_2
       9: aload_2
      10: ifnull        97
      13: aload_0
      14: getfield      #18                 // Field size:I
      17: aload_0
      18: getfield      #12                 // Field maxSize:I
      21: if_icmpge     26
      24: aload_2
      25: areturn
      26: aload_0
      27: getfield      #16                 // Field lock:Ljava/util/concurrent/locks/ReadWriteLock;
      30: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/locks/ReadWriteLock.readLock:()Ljava/util/concurrent/locks/Lock;
      35: invokeinterface #20,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      40: aload_0
      41: getfield      #4                  // Field queue:Ljava/util/concurrent/ConcurrentLinkedDeque;
      44: aload_1
      45: invokevirtual #21                 // Method java/util/concurrent/ConcurrentLinkedDeque.removeLastOccurrence:(Ljava/lang/Object;)Z
      48: ifeq          60
      51: aload_0
      52: getfield      #4                  // Field queue:Ljava/util/concurrent/ConcurrentLinkedDeque;
      55: aload_1
      56: invokevirtual #22                 // Method java/util/concurrent/ConcurrentLinkedDeque.offer:(Ljava/lang/Object;)Z
      59: pop
      60: aload_2
      61: astore_3
      62: aload_0
      63: getfield      #16                 // Field lock:Ljava/util/concurrent/locks/ReadWriteLock;
      66: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/locks/ReadWriteLock.readLock:()Ljava/util/concurrent/locks/Lock;
      71: invokeinterface #23,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      76: aload_3
      77: areturn
      78: astore        4
      80: aload_0
      81: getfield      #16                 // Field lock:Ljava/util/concurrent/locks/ReadWriteLock;
      84: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/locks/ReadWriteLock.readLock:()Ljava/util/concurrent/locks/Lock;
      89: invokeinterface #23,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      94: aload         4
      96: athrow
      97: aload_0
      98: getfield      #16                 // Field lock:Ljava/util/concurrent/locks/ReadWriteLock;
     101: invokeinterface #24,  1           // InterfaceMethod java/util/concurrent/locks/ReadWriteLock.writeLock:()Ljava/util/concurrent/locks/Lock;
     106: invokeinterface #20,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
     111: aload_0
     112: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
     115: aload_1
     116: invokevirtual #17                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
     119: astore_2
     120: aload_2
     121: ifnull        162
     124: aload_0
     125: getfield      #4                  // Field queue:Ljava/util/concurrent/ConcurrentLinkedDeque;
     128: aload_1
     129: invokevirtual #21                 // Method java/util/concurrent/ConcurrentLinkedDeque.removeLastOccurrence:(Ljava/lang/Object;)Z
     132: ifeq          144
     135: aload_0
     136: getfield      #4                  // Field queue:Ljava/util/concurrent/ConcurrentLinkedDeque;
     139: aload_1
     140: invokevirtual #22                 // Method java/util/concurrent/ConcurrentLinkedDeque.offer:(Ljava/lang/Object;)Z
     143: pop
     144: aload_2
     145: astore_3
     146: aload_0
     147: getfield      #16                 // Field lock:Ljava/util/concurrent/locks/ReadWriteLock;
     150: invokeinterface #24,  1           // InterfaceMethod java/util/concurrent/locks/ReadWriteLock.writeLock:()Ljava/util/concurrent/locks/Lock;
     155: invokeinterface #23,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     160: aload_3
     161: areturn
     162: aload_0
     163: getfield      #13                 // Field generator:Ljava/util/function/Function;
     166: aload_1
     167: invokeinterface #25,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     172: astore_3
     173: aload_0
     174: getfield      #18                 // Field size:I
     177: istore        4
     179: iload         4
     181: aload_0
     182: getfield      #12                 // Field maxSize:I
     185: if_icmpne     215
     188: aload_0
     189: getfield      #4                  // Field queue:Ljava/util/concurrent/ConcurrentLinkedDeque;
     192: invokevirtual #26                 // Method java/util/concurrent/ConcurrentLinkedDeque.poll:()Ljava/lang/Object;
     195: astore        5
     197: aload         5
     199: ifnull        215
     202: aload_0
     203: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
     206: aload         5
     208: invokevirtual #27                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     211: pop
     212: iinc          4, -1
     215: aload_0
     216: getfield      #4                  // Field queue:Ljava/util/concurrent/ConcurrentLinkedDeque;
     219: aload_1
     220: invokevirtual #22                 // Method java/util/concurrent/ConcurrentLinkedDeque.offer:(Ljava/lang/Object;)Z
     223: pop
     224: aload_0
     225: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
     228: aload_1
     229: aload_3
     230: invokevirtual #28                 // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     233: pop
     234: aload_0
     235: iload         4
     237: iconst_1
     238: iadd
     239: putfield      #18                 // Field size:I
     242: aload_3
     243: astore        5
     245: aload_0
     246: getfield      #16                 // Field lock:Ljava/util/concurrent/locks/ReadWriteLock;
     249: invokeinterface #24,  1           // InterfaceMethod java/util/concurrent/locks/ReadWriteLock.writeLock:()Ljava/util/concurrent/locks/Lock;
     254: invokeinterface #23,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     259: aload         5
     261: areturn
     262: astore        6
     264: aload_0
     265: getfield      #16                 // Field lock:Ljava/util/concurrent/locks/ReadWriteLock;
     268: invokeinterface #24,  1           // InterfaceMethod java/util/concurrent/locks/ReadWriteLock.writeLock:()Ljava/util/concurrent/locks/Lock;
     273: invokeinterface #23,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     278: aload         6
     280: athrow
    Exception table:
       from    to  target type
          40    62    78   any
          78    80    78   any
         111   146   262   any
         162   245   262   any
         262   264   262   any
}
