Compiled from "ConfigurableBeanFactory.java"
public interface org.springframework.beans.factory.config.ConfigurableBeanFactory extends org.springframework.beans.factory.HierarchicalBeanFactory,org.springframework.beans.factory.config.SingletonBeanRegistry {
  public static final java.lang.String SCOPE_SINGLETON;

  public static final java.lang.String SCOPE_PROTOTYPE;

  public abstract void setParentBeanFactory(org.springframework.beans.factory.BeanFactory) throws java.lang.IllegalStateException;

  public abstract void setBeanClassLoader(java.lang.ClassLoader);

  public abstract java.lang.ClassLoader getBeanClassLoader();

  public abstract void setTempClassLoader(java.lang.ClassLoader);

  public abstract java.lang.ClassLoader getTempClassLoader();

  public abstract void setCacheBeanMetadata(boolean);

  public abstract boolean isCacheBeanMetadata();

  public abstract void setBeanExpressionResolver(org.springframework.beans.factory.config.BeanExpressionResolver);

  public abstract org.springframework.beans.factory.config.BeanExpressionResolver getBeanExpressionResolver();

  public abstract void setConversionService(org.springframework.core.convert.ConversionService);

  public abstract org.springframework.core.convert.ConversionService getConversionService();

  public abstract void addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar);

  public abstract void registerCustomEditor(java.lang.Class<?>, java.lang.Class<? extends java.beans.PropertyEditor>);

  public abstract void copyRegisteredEditorsTo(org.springframework.beans.PropertyEditorRegistry);

  public abstract void setTypeConverter(org.springframework.beans.TypeConverter);

  public abstract org.springframework.beans.TypeConverter getTypeConverter();

  public abstract void addEmbeddedValueResolver(org.springframework.util.StringValueResolver);

  public abstract boolean hasEmbeddedValueResolver();

  public abstract java.lang.String resolveEmbeddedValue(java.lang.String);

  public abstract void addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor);

  public abstract int getBeanPostProcessorCount();

  public abstract void registerScope(java.lang.String, org.springframework.beans.factory.config.Scope);

  public abstract java.lang.String[] getRegisteredScopeNames();

  public abstract org.springframework.beans.factory.config.Scope getRegisteredScope(java.lang.String);

  public abstract java.security.AccessControlContext getAccessControlContext();

  public abstract void copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory);

  public abstract void registerAlias(java.lang.String, java.lang.String) throws org.springframework.beans.factory.BeanDefinitionStoreException;

  public abstract void resolveAliases(org.springframework.util.StringValueResolver);

  public abstract org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException;

  public abstract boolean isFactoryBean(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException;

  public abstract void setCurrentlyInCreation(java.lang.String, boolean);

  public abstract boolean isCurrentlyInCreation(java.lang.String);

  public abstract void registerDependentBean(java.lang.String, java.lang.String);

  public abstract java.lang.String[] getDependentBeans(java.lang.String);

  public abstract java.lang.String[] getDependenciesForBean(java.lang.String);

  public abstract void destroyBean(java.lang.String, java.lang.Object);

  public abstract void destroyScopedBean(java.lang.String);

  public abstract void destroySingletons();
}
