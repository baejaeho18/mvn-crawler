Compiled from "Traverser.java"
final class com.google.common.graph.Traverser$TreeTraverser<N> extends com.google.common.graph.Traverser<N> {
  private final com.google.common.graph.SuccessorsFunction<N> tree;

  com.google.common.graph.Traverser$TreeTraverser(com.google.common.graph.SuccessorsFunction<N>);
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #2                  // Method com/google/common/graph/Traverser."<init>":(Lcom/google/common/graph/Traverser$1;)V
       5: aload_0
       6: aload_1
       7: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #4                  // class com/google/common/graph/SuccessorsFunction
      13: putfield      #1                  // Field tree:Lcom/google/common/graph/SuccessorsFunction;
      16: return

  public java.lang.Iterable<N> breadthFirst(N);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: aload_1
       7: invokestatic  #5                  // Method com/google/common/collect/ImmutableSet.of:(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableSet;
      10: invokevirtual #6                  // Method breadthFirst:(Ljava/lang/Iterable;)Ljava/lang/Iterable;
      13: areturn

  public java.lang.Iterable<N> breadthFirst(java.lang.Iterable<? extends N>);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_1
       6: invokestatic  #7                  // Method com/google/common/collect/Iterables.isEmpty:(Ljava/lang/Iterable;)Z
       9: ifeq          16
      12: invokestatic  #8                  // Method com/google/common/collect/ImmutableSet.of:()Lcom/google/common/collect/ImmutableSet;
      15: areturn
      16: aload_1
      17: invokeinterface #9,  1            // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      22: astore_2
      23: aload_2
      24: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          47
      32: aload_2
      33: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: astore_3
      39: aload_0
      40: aload_3
      41: invokespecial #12                 // Method checkThatNodeIsInTree:(Ljava/lang/Object;)V
      44: goto          23
      47: new           #13                 // class com/google/common/graph/Traverser$TreeTraverser$1
      50: dup
      51: aload_0
      52: aload_1
      53: invokespecial #14                 // Method com/google/common/graph/Traverser$TreeTraverser$1."<init>":(Lcom/google/common/graph/Traverser$TreeTraverser;Ljava/lang/Iterable;)V
      56: areturn

  public java.lang.Iterable<N> depthFirstPreOrder(N);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: aload_1
       7: invokestatic  #5                  // Method com/google/common/collect/ImmutableSet.of:(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableSet;
      10: invokevirtual #15                 // Method depthFirstPreOrder:(Ljava/lang/Iterable;)Ljava/lang/Iterable;
      13: areturn

  public java.lang.Iterable<N> depthFirstPreOrder(java.lang.Iterable<? extends N>);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_1
       6: invokestatic  #7                  // Method com/google/common/collect/Iterables.isEmpty:(Ljava/lang/Iterable;)Z
       9: ifeq          16
      12: invokestatic  #8                  // Method com/google/common/collect/ImmutableSet.of:()Lcom/google/common/collect/ImmutableSet;
      15: areturn
      16: aload_1
      17: invokeinterface #9,  1            // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      22: astore_2
      23: aload_2
      24: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          47
      32: aload_2
      33: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: astore_3
      39: aload_0
      40: aload_3
      41: invokespecial #12                 // Method checkThatNodeIsInTree:(Ljava/lang/Object;)V
      44: goto          23
      47: new           #16                 // class com/google/common/graph/Traverser$TreeTraverser$2
      50: dup
      51: aload_0
      52: aload_1
      53: invokespecial #17                 // Method com/google/common/graph/Traverser$TreeTraverser$2."<init>":(Lcom/google/common/graph/Traverser$TreeTraverser;Ljava/lang/Iterable;)V
      56: areturn

  public java.lang.Iterable<N> depthFirstPostOrder(N);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: aload_1
       7: invokestatic  #5                  // Method com/google/common/collect/ImmutableSet.of:(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableSet;
      10: invokevirtual #18                 // Method depthFirstPostOrder:(Ljava/lang/Iterable;)Ljava/lang/Iterable;
      13: areturn

  public java.lang.Iterable<N> depthFirstPostOrder(java.lang.Iterable<? extends N>);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_1
       6: invokestatic  #7                  // Method com/google/common/collect/Iterables.isEmpty:(Ljava/lang/Iterable;)Z
       9: ifeq          16
      12: invokestatic  #8                  // Method com/google/common/collect/ImmutableSet.of:()Lcom/google/common/collect/ImmutableSet;
      15: areturn
      16: aload_1
      17: invokeinterface #9,  1            // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      22: astore_2
      23: aload_2
      24: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          47
      32: aload_2
      33: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: astore_3
      39: aload_0
      40: aload_3
      41: invokespecial #12                 // Method checkThatNodeIsInTree:(Ljava/lang/Object;)V
      44: goto          23
      47: new           #19                 // class com/google/common/graph/Traverser$TreeTraverser$3
      50: dup
      51: aload_0
      52: aload_1
      53: invokespecial #20                 // Method com/google/common/graph/Traverser$TreeTraverser$3."<init>":(Lcom/google/common/graph/Traverser$TreeTraverser;Ljava/lang/Iterable;)V
      56: areturn

  private void checkThatNodeIsInTree(N);
    Code:
       0: aload_0
       1: getfield      #1                  // Field tree:Lcom/google/common/graph/SuccessorsFunction;
       4: aload_1
       5: invokeinterface #21,  2           // InterfaceMethod com/google/common/graph/SuccessorsFunction.successors:(Ljava/lang/Object;)Ljava/lang/Iterable;
      10: pop
      11: return

  static com.google.common.graph.SuccessorsFunction access$200(com.google.common.graph.Traverser$TreeTraverser);
    Code:
       0: aload_0
       1: getfield      #1                  // Field tree:Lcom/google/common/graph/SuccessorsFunction;
       4: areturn
}
