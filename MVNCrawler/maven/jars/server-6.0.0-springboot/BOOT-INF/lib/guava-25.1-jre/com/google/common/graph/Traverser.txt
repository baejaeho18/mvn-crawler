Compiled from "Traverser.java"
public abstract class com.google.common.graph.Traverser<N> {
  public static <N> com.google.common.graph.Traverser<N> forGraph(com.google.common.graph.SuccessorsFunction<N>);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: new           #3                  // class com/google/common/graph/Traverser$GraphTraverser
       8: dup
       9: aload_0
      10: invokespecial #4                  // Method com/google/common/graph/Traverser$GraphTraverser."<init>":(Lcom/google/common/graph/SuccessorsFunction;)V
      13: areturn

  public static <N> com.google.common.graph.Traverser<N> forTree(com.google.common.graph.SuccessorsFunction<N>);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: instanceof    #5                  // class com/google/common/graph/BaseGraph
       9: ifeq          26
      12: aload_0
      13: checkcast     #5                  // class com/google/common/graph/BaseGraph
      16: invokeinterface #6,  1            // InterfaceMethod com/google/common/graph/BaseGraph.isDirected:()Z
      21: ldc           #7                  // String Undirected graphs can never be trees.
      23: invokestatic  #8                  // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      26: aload_0
      27: instanceof    #9                  // class com/google/common/graph/Network
      30: ifeq          47
      33: aload_0
      34: checkcast     #9                  // class com/google/common/graph/Network
      37: invokeinterface #10,  1           // InterfaceMethod com/google/common/graph/Network.isDirected:()Z
      42: ldc           #11                 // String Undirected networks can never be trees.
      44: invokestatic  #8                  // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      47: new           #12                 // class com/google/common/graph/Traverser$TreeTraverser
      50: dup
      51: aload_0
      52: invokespecial #13                 // Method com/google/common/graph/Traverser$TreeTraverser."<init>":(Lcom/google/common/graph/SuccessorsFunction;)V
      55: areturn

  public abstract java.lang.Iterable<N> breadthFirst(N);

  public abstract java.lang.Iterable<N> breadthFirst(java.lang.Iterable<? extends N>);

  public abstract java.lang.Iterable<N> depthFirstPreOrder(N);

  public abstract java.lang.Iterable<N> depthFirstPreOrder(java.lang.Iterable<? extends N>);

  public abstract java.lang.Iterable<N> depthFirstPostOrder(N);

  public abstract java.lang.Iterable<N> depthFirstPostOrder(java.lang.Iterable<? extends N>);

  private com.google.common.graph.Traverser();
    Code:
       0: aload_0
       1: invokespecial #14                 // Method java/lang/Object."<init>":()V
       4: return

  com.google.common.graph.Traverser(com.google.common.graph.Traverser$1);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method "<init>":()V
       4: return
}
