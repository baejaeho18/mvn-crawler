Compiled from "DoubleMath.java"
public final class com.google.common.math.DoubleMath {
  private static final double MIN_INT_AS_DOUBLE;

  private static final double MAX_INT_AS_DOUBLE;

  private static final double MIN_LONG_AS_DOUBLE;

  private static final double MAX_LONG_AS_DOUBLE_PLUS_ONE;

  private static final double LN_2;

  static final int MAX_FACTORIAL;

  static final double[] everySixteenthFactorial;

  static double roundIntermediate(double, java.math.RoundingMode);
    Code:
       0: dload_0
       1: invokestatic  #2                  // Method com/google/common/math/DoubleUtils.isFinite:(D)Z
       4: ifne          17
       7: new           #3                  // class java/lang/ArithmeticException
      10: dup
      11: ldc           #4                  // String input is infinite or NaN
      13: invokespecial #5                  // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: getstatic     #6                  // Field com/google/common/math/DoubleMath$1.$SwitchMap$java$math$RoundingMode:[I
      20: aload_2
      21: invokevirtual #7                  // Method java/math/RoundingMode.ordinal:()I
      24: iaload
      25: tableswitch   { // 1 to 8
                     1: 72
                     2: 81
                     3: 102
                     4: 123
                     5: 125
                     6: 151
                     7: 156
                     8: 186
               default: 208
          }
      72: dload_0
      73: invokestatic  #8                  // Method isMathematicalInteger:(D)Z
      76: invokestatic  #9                  // Method com/google/common/math/MathPreconditions.checkRoundingUnnecessary:(Z)V
      79: dload_0
      80: dreturn
      81: dload_0
      82: dconst_0
      83: dcmpl
      84: ifge          94
      87: dload_0
      88: invokestatic  #8                  // Method isMathematicalInteger:(D)Z
      91: ifeq          96
      94: dload_0
      95: dreturn
      96: dload_0
      97: d2l
      98: lconst_1
      99: lsub
     100: l2d
     101: dreturn
     102: dload_0
     103: dconst_0
     104: dcmpg
     105: ifle          115
     108: dload_0
     109: invokestatic  #8                  // Method isMathematicalInteger:(D)Z
     112: ifeq          117
     115: dload_0
     116: dreturn
     117: dload_0
     118: d2l
     119: lconst_1
     120: ladd
     121: l2d
     122: dreturn
     123: dload_0
     124: dreturn
     125: dload_0
     126: invokestatic  #8                  // Method isMathematicalInteger:(D)Z
     129: ifeq          134
     132: dload_0
     133: dreturn
     134: dload_0
     135: d2l
     136: dload_0
     137: dconst_0
     138: dcmpl
     139: ifle          146
     142: iconst_1
     143: goto          147
     146: iconst_m1
     147: i2l
     148: ladd
     149: l2d
     150: dreturn
     151: dload_0
     152: invokestatic  #10                 // Method java/lang/Math.rint:(D)D
     155: dreturn
     156: dload_0
     157: invokestatic  #10                 // Method java/lang/Math.rint:(D)D
     160: dstore_3
     161: dload_0
     162: dload_3
     163: dsub
     164: invokestatic  #11                 // Method java/lang/Math.abs:(D)D
     167: ldc2_w        #12                 // double 0.5d
     170: dcmpl
     171: ifne          184
     174: dload_0
     175: ldc2_w        #12                 // double 0.5d
     178: dload_0
     179: invokestatic  #14                 // Method java/lang/Math.copySign:(DD)D
     182: dadd
     183: dreturn
     184: dload_3
     185: dreturn
     186: dload_0
     187: invokestatic  #10                 // Method java/lang/Math.rint:(D)D
     190: dstore_3
     191: dload_0
     192: dload_3
     193: dsub
     194: invokestatic  #11                 // Method java/lang/Math.abs:(D)D
     197: ldc2_w        #12                 // double 0.5d
     200: dcmpl
     201: ifne          206
     204: dload_0
     205: dreturn
     206: dload_3
     207: dreturn
     208: new           #15                 // class java/lang/AssertionError
     211: dup
     212: invokespecial #16                 // Method java/lang/AssertionError."<init>":()V
     215: athrow

  public static int roundToInt(double, java.math.RoundingMode);
    Code:
       0: dload_0
       1: aload_2
       2: invokestatic  #17                 // Method roundIntermediate:(DLjava/math/RoundingMode;)D
       5: dstore_3
       6: dload_3
       7: ldc2_w        #19                 // double -2.147483649E9d
      10: dcmpl
      11: ifle          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: dload_3
      20: ldc2_w        #21                 // double 2.147483648E9d
      23: dcmpg
      24: ifge          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: iand
      33: invokestatic  #23                 // Method com/google/common/math/MathPreconditions.checkInRange:(Z)V
      36: dload_3
      37: d2i
      38: ireturn

  public static long roundToLong(double, java.math.RoundingMode);
    Code:
       0: dload_0
       1: aload_2
       2: invokestatic  #17                 // Method roundIntermediate:(DLjava/math/RoundingMode;)D
       5: dstore_3
       6: ldc2_w        #24                 // double -9.223372036854776E18d
       9: dload_3
      10: dsub
      11: dconst_1
      12: dcmpg
      13: ifge          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: dload_3
      22: ldc2_w        #26                 // double 9.223372036854776E18d
      25: dcmpg
      26: ifge          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: iand
      35: invokestatic  #23                 // Method com/google/common/math/MathPreconditions.checkInRange:(Z)V
      38: dload_3
      39: d2l
      40: lreturn

  public static java.math.BigInteger roundToBigInteger(double, java.math.RoundingMode);
    Code:
       0: dload_0
       1: aload_2
       2: invokestatic  #17                 // Method roundIntermediate:(DLjava/math/RoundingMode;)D
       5: dstore_0
       6: ldc2_w        #24                 // double -9.223372036854776E18d
       9: dload_0
      10: dsub
      11: dconst_1
      12: dcmpg
      13: ifge          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: dload_0
      22: ldc2_w        #26                 // double 9.223372036854776E18d
      25: dcmpg
      26: ifge          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: iand
      35: ifeq          44
      38: dload_0
      39: d2l
      40: invokestatic  #28                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
      43: areturn
      44: dload_0
      45: invokestatic  #29                 // Method java/lang/Math.getExponent:(D)I
      48: istore_3
      49: dload_0
      50: invokestatic  #30                 // Method com/google/common/math/DoubleUtils.getSignificand:(D)J
      53: lstore        4
      55: lload         4
      57: invokestatic  #28                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
      60: iload_3
      61: bipush        52
      63: isub
      64: invokevirtual #31                 // Method java/math/BigInteger.shiftLeft:(I)Ljava/math/BigInteger;
      67: astore        6
      69: dload_0
      70: dconst_0
      71: dcmpg
      72: ifge          83
      75: aload         6
      77: invokevirtual #32                 // Method java/math/BigInteger.negate:()Ljava/math/BigInteger;
      80: goto          85
      83: aload         6
      85: areturn

  public static boolean isPowerOfTwo(double);
    Code:
       0: dload_0
       1: dconst_0
       2: dcmpl
       3: ifle          34
       6: dload_0
       7: invokestatic  #2                  // Method com/google/common/math/DoubleUtils.isFinite:(D)Z
      10: ifeq          34
      13: dload_0
      14: invokestatic  #30                 // Method com/google/common/math/DoubleUtils.getSignificand:(D)J
      17: lstore_2
      18: lload_2
      19: lload_2
      20: lconst_1
      21: lsub
      22: land
      23: lconst_0
      24: lcmp
      25: ifne          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn
      34: iconst_0
      35: ireturn

  public static double log2(double);
    Code:
       0: dload_0
       1: invokestatic  #33                 // Method java/lang/Math.log:(D)D
       4: getstatic     #34                 // Field LN_2:D
       7: ddiv
       8: dreturn

  public static int log2(double, java.math.RoundingMode);
    Code:
       0: dload_0
       1: dconst_0
       2: dcmpl
       3: ifle          17
       6: dload_0
       7: invokestatic  #2                  // Method com/google/common/math/DoubleUtils.isFinite:(D)Z
      10: ifeq          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ldc           #35                 // String x must be positive and finite
      20: invokestatic  #36                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      23: dload_0
      24: invokestatic  #29                 // Method java/lang/Math.getExponent:(D)I
      27: istore_3
      28: dload_0
      29: invokestatic  #37                 // Method com/google/common/math/DoubleUtils.isNormal:(D)Z
      32: ifne          48
      35: dload_0
      36: ldc2_w        #38                 // double 4.503599627370496E15d
      39: dmul
      40: aload_2
      41: invokestatic  #40                 // Method log2:(DLjava/math/RoundingMode;)I
      44: bipush        52
      46: isub
      47: ireturn
      48: getstatic     #6                  // Field com/google/common/math/DoubleMath$1.$SwitchMap$java$math$RoundingMode:[I
      51: aload_2
      52: invokevirtual #7                  // Method java/math/RoundingMode.ordinal:()I
      55: iaload
      56: tableswitch   { // 1 to 8
                     1: 104
                     2: 111
                     3: 117
                     4: 134
                     5: 161
                     6: 188
                     7: 188
                     8: 188
               default: 216
          }
     104: dload_0
     105: invokestatic  #41                 // Method isPowerOfTwo:(D)Z
     108: invokestatic  #9                  // Method com/google/common/math/MathPreconditions.checkRoundingUnnecessary:(Z)V
     111: iconst_0
     112: istore        4
     114: goto          224
     117: dload_0
     118: invokestatic  #41                 // Method isPowerOfTwo:(D)Z
     121: ifne          128
     124: iconst_1
     125: goto          129
     128: iconst_0
     129: istore        4
     131: goto          224
     134: iload_3
     135: ifge          142
     138: iconst_1
     139: goto          143
     142: iconst_0
     143: dload_0
     144: invokestatic  #41                 // Method isPowerOfTwo:(D)Z
     147: ifne          154
     150: iconst_1
     151: goto          155
     154: iconst_0
     155: iand
     156: istore        4
     158: goto          224
     161: iload_3
     162: iflt          169
     165: iconst_1
     166: goto          170
     169: iconst_0
     170: dload_0
     171: invokestatic  #41                 // Method isPowerOfTwo:(D)Z
     174: ifne          181
     177: iconst_1
     178: goto          182
     181: iconst_0
     182: iand
     183: istore        4
     185: goto          224
     188: dload_0
     189: invokestatic  #42                 // Method com/google/common/math/DoubleUtils.scaleNormalize:(D)D
     192: dstore        5
     194: dload         5
     196: dload         5
     198: dmul
     199: ldc2_w        #43                 // double 2.0d
     202: dcmpl
     203: ifle          210
     206: iconst_1
     207: goto          211
     210: iconst_0
     211: istore        4
     213: goto          224
     216: new           #15                 // class java/lang/AssertionError
     219: dup
     220: invokespecial #16                 // Method java/lang/AssertionError."<init>":()V
     223: athrow
     224: iload         4
     226: ifeq          235
     229: iload_3
     230: iconst_1
     231: iadd
     232: goto          236
     235: iload_3
     236: ireturn

  public static boolean isMathematicalInteger(double);
    Code:
       0: dload_0
       1: invokestatic  #2                  // Method com/google/common/math/DoubleUtils.isFinite:(D)Z
       4: ifeq          34
       7: dload_0
       8: dconst_0
       9: dcmpl
      10: ifeq          30
      13: bipush        52
      15: dload_0
      16: invokestatic  #30                 // Method com/google/common/math/DoubleUtils.getSignificand:(D)J
      19: invokestatic  #45                 // Method java/lang/Long.numberOfTrailingZeros:(J)I
      22: isub
      23: dload_0
      24: invokestatic  #29                 // Method java/lang/Math.getExponent:(D)I
      27: if_icmpgt     34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  public static double factorial(int);
    Code:
       0: ldc           #46                 // String n
       2: iload_0
       3: invokestatic  #47                 // Method com/google/common/math/MathPreconditions.checkNonNegative:(Ljava/lang/String;I)I
       6: pop
       7: iload_0
       8: sipush        170
      11: if_icmple     18
      14: ldc2_w        #49                 // double Infinityd
      17: dreturn
      18: dconst_1
      19: dstore_1
      20: iconst_1
      21: iload_0
      22: bipush        -16
      24: iand
      25: iadd
      26: istore_3
      27: iload_3
      28: iload_0
      29: if_icmpgt     43
      32: dload_1
      33: iload_3
      34: i2d
      35: dmul
      36: dstore_1
      37: iinc          3, 1
      40: goto          27
      43: dload_1
      44: getstatic     #51                 // Field everySixteenthFactorial:[D
      47: iload_0
      48: iconst_4
      49: ishr
      50: daload
      51: dmul
      52: dreturn

  public static boolean fuzzyEquals(double, double, double);
    Code:
       0: ldc           #52                 // String tolerance
       2: dload         4
       4: invokestatic  #53                 // Method com/google/common/math/MathPreconditions.checkNonNegative:(Ljava/lang/String;D)D
       7: pop2
       8: dload_0
       9: dload_2
      10: dsub
      11: dconst_1
      12: invokestatic  #14                 // Method java/lang/Math.copySign:(DD)D
      15: dload         4
      17: dcmpg
      18: ifle          41
      21: dload_0
      22: dload_2
      23: dcmpl
      24: ifeq          41
      27: dload_0
      28: invokestatic  #54                 // Method java/lang/Double.isNaN:(D)Z
      31: ifeq          45
      34: dload_2
      35: invokestatic  #54                 // Method java/lang/Double.isNaN:(D)Z
      38: ifeq          45
      41: iconst_1
      42: goto          46
      45: iconst_0
      46: ireturn

  public static int fuzzyCompare(double, double, double);
    Code:
       0: dload_0
       1: dload_2
       2: dload         4
       4: invokestatic  #55                 // Method fuzzyEquals:(DDD)Z
       7: ifeq          12
      10: iconst_0
      11: ireturn
      12: dload_0
      13: dload_2
      14: dcmpg
      15: ifge          20
      18: iconst_m1
      19: ireturn
      20: dload_0
      21: dload_2
      22: dcmpl
      23: ifle          28
      26: iconst_1
      27: ireturn
      28: dload_0
      29: invokestatic  #54                 // Method java/lang/Double.isNaN:(D)Z
      32: dload_2
      33: invokestatic  #54                 // Method java/lang/Double.isNaN:(D)Z
      36: invokestatic  #56                 // Method com/google/common/primitives/Booleans.compare:(ZZ)I
      39: ireturn

  public static double mean(double...);
    Code:
       0: aload_0
       1: arraylength
       2: ifle          9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #57                 // String Cannot take mean of 0 values
      12: invokestatic  #36                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      15: lconst_1
      16: lstore_1
      17: aload_0
      18: iconst_0
      19: daload
      20: invokestatic  #58                 // Method checkFinite:(D)D
      23: dstore_3
      24: iconst_1
      25: istore        5
      27: iload         5
      29: aload_0
      30: arraylength
      31: if_icmpge     64
      34: aload_0
      35: iload         5
      37: daload
      38: invokestatic  #58                 // Method checkFinite:(D)D
      41: pop2
      42: lload_1
      43: lconst_1
      44: ladd
      45: lstore_1
      46: dload_3
      47: aload_0
      48: iload         5
      50: daload
      51: dload_3
      52: dsub
      53: lload_1
      54: l2d
      55: ddiv
      56: dadd
      57: dstore_3
      58: iinc          5, 1
      61: goto          27
      64: dload_3
      65: dreturn

  public static double mean(int...);
    Code:
       0: aload_0
       1: arraylength
       2: ifle          9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #57                 // String Cannot take mean of 0 values
      12: invokestatic  #36                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      15: lconst_0
      16: lstore_1
      17: iconst_0
      18: istore_3
      19: iload_3
      20: aload_0
      21: arraylength
      22: if_icmpge     38
      25: lload_1
      26: aload_0
      27: iload_3
      28: iaload
      29: i2l
      30: ladd
      31: lstore_1
      32: iinc          3, 1
      35: goto          19
      38: lload_1
      39: l2d
      40: aload_0
      41: arraylength
      42: i2d
      43: ddiv
      44: dreturn

  public static double mean(long...);
    Code:
       0: aload_0
       1: arraylength
       2: ifle          9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #57                 // String Cannot take mean of 0 values
      12: invokestatic  #36                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      15: lconst_1
      16: lstore_1
      17: aload_0
      18: iconst_0
      19: laload
      20: l2d
      21: dstore_3
      22: iconst_1
      23: istore        5
      25: iload         5
      27: aload_0
      28: arraylength
      29: if_icmpge     55
      32: lload_1
      33: lconst_1
      34: ladd
      35: lstore_1
      36: dload_3
      37: aload_0
      38: iload         5
      40: laload
      41: l2d
      42: dload_3
      43: dsub
      44: lload_1
      45: l2d
      46: ddiv
      47: dadd
      48: dstore_3
      49: iinc          5, 1
      52: goto          25
      55: dload_3
      56: dreturn

  public static double mean(java.lang.Iterable<? extends java.lang.Number>);
    Code:
       0: aload_0
       1: invokeinterface #59,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
       6: invokestatic  #60                 // Method mean:(Ljava/util/Iterator;)D
       9: dreturn

  public static double mean(java.util.Iterator<? extends java.lang.Number>);
    Code:
       0: aload_0
       1: invokeinterface #61,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
       6: ldc           #57                 // String Cannot take mean of 0 values
       8: invokestatic  #36                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      11: lconst_1
      12: lstore_1
      13: aload_0
      14: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      19: checkcast     #63                 // class java/lang/Number
      22: invokevirtual #64                 // Method java/lang/Number.doubleValue:()D
      25: invokestatic  #58                 // Method checkFinite:(D)D
      28: dstore_3
      29: aload_0
      30: invokeinterface #61,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      35: ifeq          72
      38: aload_0
      39: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      44: checkcast     #63                 // class java/lang/Number
      47: invokevirtual #64                 // Method java/lang/Number.doubleValue:()D
      50: invokestatic  #58                 // Method checkFinite:(D)D
      53: dstore        5
      55: lload_1
      56: lconst_1
      57: ladd
      58: lstore_1
      59: dload_3
      60: dload         5
      62: dload_3
      63: dsub
      64: lload_1
      65: l2d
      66: ddiv
      67: dadd
      68: dstore_3
      69: goto          29
      72: dload_3
      73: dreturn

  private static double checkFinite(double);
    Code:
       0: dload_0
       1: invokestatic  #2                  // Method com/google/common/math/DoubleUtils.isFinite:(D)Z
       4: invokestatic  #65                 // Method com/google/common/base/Preconditions.checkArgument:(Z)V
       7: dload_0
       8: dreturn

  private com.google.common.math.DoubleMath();
    Code:
       0: aload_0
       1: invokespecial #66                 // Method java/lang/Object."<init>":()V
       4: return

  static {};
    Code:
       0: ldc2_w        #43                 // double 2.0d
       3: invokestatic  #33                 // Method java/lang/Math.log:(D)D
       6: putstatic     #34                 // Field LN_2:D
       9: bipush        11
      11: newarray       double
      13: dup
      14: iconst_0
      15: dconst_1
      16: dastore
      17: dup
      18: iconst_1
      19: ldc2_w        #67                 // double 2.0922789888E13d
      22: dastore
      23: dup
      24: iconst_2
      25: ldc2_w        #69                 // double 2.631308369336935E35d
      28: dastore
      29: dup
      30: iconst_3
      31: ldc2_w        #71                 // double 1.2413915592536073E61d
      34: dastore
      35: dup
      36: iconst_4
      37: ldc2_w        #73                 // double 1.2688693218588417E89d
      40: dastore
      41: dup
      42: iconst_5
      43: ldc2_w        #75                 // double 7.156945704626381E118d
      46: dastore
      47: dup
      48: bipush        6
      50: ldc2_w        #77                 // double 9.916779348709496E149d
      53: dastore
      54: dup
      55: bipush        7
      57: ldc2_w        #79                 // double 1.974506857221074E182d
      60: dastore
      61: dup
      62: bipush        8
      64: ldc2_w        #81                 // double 3.856204823625804E215d
      67: dastore
      68: dup
      69: bipush        9
      71: ldc2_w        #83                 // double 5.5502938327393044E249d
      74: dastore
      75: dup
      76: bipush        10
      78: ldc2_w        #85                 // double 4.7147236359920616E284d
      81: dastore
      82: putstatic     #51                 // Field everySixteenthFactorial:[D
      85: return
}
