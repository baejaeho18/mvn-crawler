Compiled from "NetworkBuilder.java"
public final class com.google.common.graph.NetworkBuilder<N, E> extends com.google.common.graph.AbstractGraphBuilder<N> {
  boolean allowsParallelEdges;

  com.google.common.graph.ElementOrder<? super E> edgeOrder;

  com.google.common.base.Optional<java.lang.Integer> expectedEdgeCount;

  private com.google.common.graph.NetworkBuilder(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #1                  // Method com/google/common/graph/AbstractGraphBuilder."<init>":(Z)V
       5: aload_0
       6: iconst_0
       7: putfield      #2                  // Field allowsParallelEdges:Z
      10: aload_0
      11: invokestatic  #3                  // Method com/google/common/graph/ElementOrder.insertion:()Lcom/google/common/graph/ElementOrder;
      14: putfield      #4                  // Field edgeOrder:Lcom/google/common/graph/ElementOrder;
      17: aload_0
      18: invokestatic  #5                  // Method com/google/common/base/Optional.absent:()Lcom/google/common/base/Optional;
      21: putfield      #6                  // Field expectedEdgeCount:Lcom/google/common/base/Optional;
      24: return

  public static com.google.common.graph.NetworkBuilder<java.lang.Object, java.lang.Object> directed();
    Code:
       0: new           #7                  // class com/google/common/graph/NetworkBuilder
       3: dup
       4: iconst_1
       5: invokespecial #8                  // Method "<init>":(Z)V
       8: areturn

  public static com.google.common.graph.NetworkBuilder<java.lang.Object, java.lang.Object> undirected();
    Code:
       0: new           #7                  // class com/google/common/graph/NetworkBuilder
       3: dup
       4: iconst_0
       5: invokespecial #8                  // Method "<init>":(Z)V
       8: areturn

  public static <N, E> com.google.common.graph.NetworkBuilder<N, E> from(com.google.common.graph.Network<N, E>);
    Code:
       0: new           #7                  // class com/google/common/graph/NetworkBuilder
       3: dup
       4: aload_0
       5: invokeinterface #9,  1            // InterfaceMethod com/google/common/graph/Network.isDirected:()Z
      10: invokespecial #8                  // Method "<init>":(Z)V
      13: aload_0
      14: invokeinterface #10,  1           // InterfaceMethod com/google/common/graph/Network.allowsParallelEdges:()Z
      19: invokevirtual #11                 // Method allowsParallelEdges:(Z)Lcom/google/common/graph/NetworkBuilder;
      22: aload_0
      23: invokeinterface #12,  1           // InterfaceMethod com/google/common/graph/Network.allowsSelfLoops:()Z
      28: invokevirtual #13                 // Method allowsSelfLoops:(Z)Lcom/google/common/graph/NetworkBuilder;
      31: aload_0
      32: invokeinterface #14,  1           // InterfaceMethod com/google/common/graph/Network.nodeOrder:()Lcom/google/common/graph/ElementOrder;
      37: invokevirtual #15                 // Method nodeOrder:(Lcom/google/common/graph/ElementOrder;)Lcom/google/common/graph/NetworkBuilder;
      40: aload_0
      41: invokeinterface #16,  1           // InterfaceMethod com/google/common/graph/Network.edgeOrder:()Lcom/google/common/graph/ElementOrder;
      46: invokevirtual #17                 // Method edgeOrder:(Lcom/google/common/graph/ElementOrder;)Lcom/google/common/graph/NetworkBuilder;
      49: areturn

  public com.google.common.graph.NetworkBuilder<N, E> allowsParallelEdges(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field allowsParallelEdges:Z
       5: aload_0
       6: areturn

  public com.google.common.graph.NetworkBuilder<N, E> allowsSelfLoops(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field allowsSelfLoops:Z
       5: aload_0
       6: areturn

  public com.google.common.graph.NetworkBuilder<N, E> expectedNodeCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #19                 // Method com/google/common/graph/Graphs.checkNonNegative:(I)I
       5: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokestatic  #21                 // Method com/google/common/base/Optional.of:(Ljava/lang/Object;)Lcom/google/common/base/Optional;
      11: putfield      #22                 // Field expectedNodeCount:Lcom/google/common/base/Optional;
      14: aload_0
      15: areturn

  public com.google.common.graph.NetworkBuilder<N, E> expectedEdgeCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #19                 // Method com/google/common/graph/Graphs.checkNonNegative:(I)I
       5: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokestatic  #21                 // Method com/google/common/base/Optional.of:(Ljava/lang/Object;)Lcom/google/common/base/Optional;
      11: putfield      #6                  // Field expectedEdgeCount:Lcom/google/common/base/Optional;
      14: aload_0
      15: areturn

  public <N1 extends N> com.google.common.graph.NetworkBuilder<N1, E> nodeOrder(com.google.common.graph.ElementOrder<N1>);
    Code:
       0: aload_0
       1: invokespecial #23                 // Method cast:()Lcom/google/common/graph/NetworkBuilder;
       4: astore_2
       5: aload_2
       6: aload_1
       7: invokestatic  #24                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #25                 // class com/google/common/graph/ElementOrder
      13: putfield      #26                 // Field nodeOrder:Lcom/google/common/graph/ElementOrder;
      16: aload_2
      17: areturn

  public <E1 extends E> com.google.common.graph.NetworkBuilder<N, E1> edgeOrder(com.google.common.graph.ElementOrder<E1>);
    Code:
       0: aload_0
       1: invokespecial #23                 // Method cast:()Lcom/google/common/graph/NetworkBuilder;
       4: astore_2
       5: aload_2
       6: aload_1
       7: invokestatic  #24                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #25                 // class com/google/common/graph/ElementOrder
      13: putfield      #4                  // Field edgeOrder:Lcom/google/common/graph/ElementOrder;
      16: aload_2
      17: areturn

  public <N1 extends N, E1 extends E> com.google.common.graph.MutableNetwork<N1, E1> build();
    Code:
       0: new           #27                 // class com/google/common/graph/ConfigurableMutableNetwork
       3: dup
       4: aload_0
       5: invokespecial #28                 // Method com/google/common/graph/ConfigurableMutableNetwork."<init>":(Lcom/google/common/graph/NetworkBuilder;)V
       8: areturn

  private <N1 extends N, E1 extends E> com.google.common.graph.NetworkBuilder<N1, E1> cast();
    Code:
       0: aload_0
       1: areturn
}
