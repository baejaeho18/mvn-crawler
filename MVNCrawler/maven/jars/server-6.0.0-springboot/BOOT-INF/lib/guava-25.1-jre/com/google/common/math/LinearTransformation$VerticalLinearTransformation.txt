Compiled from "LinearTransformation.java"
final class com.google.common.math.LinearTransformation$VerticalLinearTransformation extends com.google.common.math.LinearTransformation {
  final double x;

  com.google.common.math.LinearTransformation inverse;

  com.google.common.math.LinearTransformation$VerticalLinearTransformation(double);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/google/common/math/LinearTransformation."<init>":()V
       4: aload_0
       5: dload_1
       6: putfield      #2                  // Field x:D
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field inverse:Lcom/google/common/math/LinearTransformation;
      14: return

  com.google.common.math.LinearTransformation$VerticalLinearTransformation(double, com.google.common.math.LinearTransformation);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/google/common/math/LinearTransformation."<init>":()V
       4: aload_0
       5: dload_1
       6: putfield      #2                  // Field x:D
       9: aload_0
      10: aload_3
      11: putfield      #3                  // Field inverse:Lcom/google/common/math/LinearTransformation;
      14: return

  public boolean isVertical();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isHorizontal();
    Code:
       0: iconst_0
       1: ireturn

  public double slope();
    Code:
       0: new           #4                  // class java/lang/IllegalStateException
       3: dup
       4: invokespecial #5                  // Method java/lang/IllegalStateException."<init>":()V
       7: athrow

  public double transform(double);
    Code:
       0: new           #4                  // class java/lang/IllegalStateException
       3: dup
       4: invokespecial #5                  // Method java/lang/IllegalStateException."<init>":()V
       7: athrow

  public com.google.common.math.LinearTransformation inverse();
    Code:
       0: aload_0
       1: getfield      #3                  // Field inverse:Lcom/google/common/math/LinearTransformation;
       4: astore_1
       5: aload_1
       6: ifnonnull     21
       9: aload_0
      10: aload_0
      11: invokespecial #6                  // Method createInverse:()Lcom/google/common/math/LinearTransformation;
      14: dup_x1
      15: putfield      #3                  // Field inverse:Lcom/google/common/math/LinearTransformation;
      18: goto          22
      21: aload_1
      22: areturn

  public java.lang.String toString();
    Code:
       0: ldc           #7                  // String x = %g
       2: iconst_1
       3: anewarray     #8                  // class java/lang/Object
       6: dup
       7: iconst_0
       8: aload_0
       9: getfield      #2                  // Field x:D
      12: invokestatic  #9                  // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      15: aastore
      16: invokestatic  #10                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      19: areturn

  private com.google.common.math.LinearTransformation createInverse();
    Code:
       0: new           #11                 // class com/google/common/math/LinearTransformation$RegularLinearTransformation
       3: dup
       4: dconst_0
       5: aload_0
       6: getfield      #2                  // Field x:D
       9: aload_0
      10: invokespecial #12                 // Method com/google/common/math/LinearTransformation$RegularLinearTransformation."<init>":(DDLcom/google/common/math/LinearTransformation;)V
      13: areturn
}
