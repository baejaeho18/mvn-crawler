Compiled from "CompactHashMap.java"
class com.google.common.collect.CompactHashMap<K, V> extends java.util.AbstractMap<K, V> implements java.io.Serializable {
  private static final int MAXIMUM_CAPACITY;

  static final float DEFAULT_LOAD_FACTOR;

  private static final long NEXT_MASK;

  private static final long HASH_MASK;

  static final int DEFAULT_SIZE;

  static final int UNSET;

  private transient int[] table;

  transient long[] entries;

  transient java.lang.Object[] keys;

  transient java.lang.Object[] values;

  transient float loadFactor;

  transient int modCount;

  private transient int threshold;

  private transient int size;

  private transient java.util.Set<K> keySetView;

  private transient java.util.Set<java.util.Map$Entry<K, V>> entrySetView;

  private transient java.util.Collection<V> valuesView;

  public static <K, V> com.google.common.collect.CompactHashMap<K, V> create();
    Code:
       0: new           #1                  // class com/google/common/collect/CompactHashMap
       3: dup
       4: invokespecial #5                  // Method "<init>":()V
       7: areturn

  public static <K, V> com.google.common.collect.CompactHashMap<K, V> createWithExpectedSize(int);
    Code:
       0: new           #1                  // class com/google/common/collect/CompactHashMap
       3: dup
       4: iload_0
       5: invokespecial #6                  // Method "<init>":(I)V
       8: areturn

  com.google.common.collect.CompactHashMap();
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/util/AbstractMap."<init>":()V
       4: aload_0
       5: iconst_3
       6: fconst_1
       7: invokevirtual #8                  // Method init:(IF)V
      10: return

  com.google.common.collect.CompactHashMap(int);
    Code:
       0: aload_0
       1: iload_1
       2: fconst_1
       3: invokespecial #9                  // Method "<init>":(IF)V
       6: return

  com.google.common.collect.CompactHashMap(int, float);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/util/AbstractMap."<init>":()V
       4: aload_0
       5: iload_1
       6: fload_2
       7: invokevirtual #8                  // Method init:(IF)V
      10: return

  void init(int, float);
    Code:
       0: iload_1
       1: iflt          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #10                 // String Initial capacity must be non-negative
      11: invokestatic  #11                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      14: fload_2
      15: fconst_0
      16: fcmpl
      17: ifle          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ldc           #12                 // String Illegal load factor
      27: invokestatic  #11                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      30: iload_1
      31: fload_2
      32: f2d
      33: invokestatic  #13                 // Method com/google/common/collect/Hashing.closedTableSize:(ID)I
      36: istore_3
      37: aload_0
      38: iload_3
      39: invokestatic  #14                 // Method newTable:(I)[I
      42: putfield      #15                 // Field table:[I
      45: aload_0
      46: fload_2
      47: putfield      #16                 // Field loadFactor:F
      50: aload_0
      51: iload_1
      52: anewarray     #17                 // class java/lang/Object
      55: putfield      #18                 // Field keys:[Ljava/lang/Object;
      58: aload_0
      59: iload_1
      60: anewarray     #17                 // class java/lang/Object
      63: putfield      #19                 // Field values:[Ljava/lang/Object;
      66: aload_0
      67: iload_1
      68: invokestatic  #20                 // Method newEntries:(I)[J
      71: putfield      #21                 // Field entries:[J
      74: aload_0
      75: iconst_1
      76: iload_3
      77: i2f
      78: fload_2
      79: fmul
      80: f2i
      81: invokestatic  #22                 // Method java/lang/Math.max:(II)I
      84: putfield      #23                 // Field threshold:I
      87: return

  private static int[] newTable(int);
    Code:
       0: iload_0
       1: newarray       int
       3: astore_1
       4: aload_1
       5: iconst_m1
       6: invokestatic  #24                 // Method java/util/Arrays.fill:([II)V
       9: aload_1
      10: areturn

  private static long[] newEntries(int);
    Code:
       0: iload_0
       1: newarray       long
       3: astore_1
       4: aload_1
       5: ldc2_w        #25                 // long -1l
       8: invokestatic  #27                 // Method java/util/Arrays.fill:([JJ)V
      11: aload_1
      12: areturn

  private int hashTableMask();
    Code:
       0: aload_0
       1: getfield      #15                 // Field table:[I
       4: arraylength
       5: iconst_1
       6: isub
       7: ireturn

  private static int getHash(long);
    Code:
       0: lload_0
       1: bipush        32
       3: lushr
       4: l2i
       5: ireturn

  private static int getNext(long);
    Code:
       0: lload_0
       1: l2i
       2: ireturn

  private static long swapNext(long, int);
    Code:
       0: ldc2_w        #28                 // long -4294967296l
       3: lload_0
       4: land
       5: ldc2_w        #30                 // long 4294967295l
       8: iload_2
       9: i2l
      10: land
      11: lor
      12: lreturn

  void accessEntry(int);
    Code:
       0: return

  public V put(K, V);
    Code:
       0: aload_0
       1: getfield      #21                 // Field entries:[J
       4: astore_3
       5: aload_0
       6: getfield      #18                 // Field keys:[Ljava/lang/Object;
       9: astore        4
      11: aload_0
      12: getfield      #19                 // Field values:[Ljava/lang/Object;
      15: astore        5
      17: aload_1
      18: invokestatic  #32                 // Method com/google/common/collect/Hashing.smearedHash:(Ljava/lang/Object;)I
      21: istore        6
      23: iload         6
      25: aload_0
      26: invokespecial #33                 // Method hashTableMask:()I
      29: iand
      30: istore        7
      32: aload_0
      33: getfield      #3                  // Field size:I
      36: istore        8
      38: aload_0
      39: getfield      #15                 // Field table:[I
      42: iload         7
      44: iaload
      45: istore        9
      47: iload         9
      49: iconst_m1
      50: if_icmpne     65
      53: aload_0
      54: getfield      #15                 // Field table:[I
      57: iload         7
      59: iload         8
      61: iastore
      62: goto          143
      65: iload         9
      67: istore        10
      69: aload_3
      70: iload         9
      72: laload
      73: lstore        11
      75: lload         11
      77: invokestatic  #34                 // Method getHash:(J)I
      80: iload         6
      82: if_icmpne     119
      85: aload_1
      86: aload         4
      88: iload         9
      90: aaload
      91: invokestatic  #35                 // Method com/google/common/base/Objects.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
      94: ifeq          119
      97: aload         5
      99: iload         9
     101: aaload
     102: astore        13
     104: aload         5
     106: iload         9
     108: aload_2
     109: aastore
     110: aload_0
     111: iload         9
     113: invokevirtual #36                 // Method accessEntry:(I)V
     116: aload         13
     118: areturn
     119: lload         11
     121: invokestatic  #37                 // Method getNext:(J)I
     124: istore        9
     126: iload         9
     128: iconst_m1
     129: if_icmpne     65
     132: aload_3
     133: iload         10
     135: lload         11
     137: iload         8
     139: invokestatic  #38                 // Method swapNext:(JI)J
     142: lastore
     143: iload         8
     145: ldc           #40                 // int 2147483647
     147: if_icmpne     160
     150: new           #41                 // class java/lang/IllegalStateException
     153: dup
     154: ldc           #42                 // String Cannot contain more than Integer.MAX_VALUE elements!
     156: invokespecial #43                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     159: athrow
     160: iload         8
     162: iconst_1
     163: iadd
     164: istore        10
     166: aload_0
     167: iload         10
     169: invokespecial #44                 // Method resizeMeMaybe:(I)V
     172: aload_0
     173: iload         8
     175: aload_1
     176: aload_2
     177: iload         6
     179: invokevirtual #45                 // Method insertEntry:(ILjava/lang/Object;Ljava/lang/Object;I)V
     182: aload_0
     183: iload         10
     185: putfield      #3                  // Field size:I
     188: iload         8
     190: aload_0
     191: getfield      #23                 // Field threshold:I
     194: if_icmplt     208
     197: aload_0
     198: iconst_2
     199: aload_0
     200: getfield      #15                 // Field table:[I
     203: arraylength
     204: imul
     205: invokespecial #46                 // Method resizeTable:(I)V
     208: aload_0
     209: dup
     210: getfield      #47                 // Field modCount:I
     213: iconst_1
     214: iadd
     215: putfield      #47                 // Field modCount:I
     218: aconst_null
     219: areturn

  void insertEntry(int, K, V, int);
    Code:
       0: aload_0
       1: getfield      #21                 // Field entries:[J
       4: iload_1
       5: iload         4
       7: i2l
       8: bipush        32
      10: lshl
      11: ldc2_w        #30                 // long 4294967295l
      14: lor
      15: lastore
      16: aload_0
      17: getfield      #18                 // Field keys:[Ljava/lang/Object;
      20: iload_1
      21: aload_2
      22: aastore
      23: aload_0
      24: getfield      #19                 // Field values:[Ljava/lang/Object;
      27: iload_1
      28: aload_3
      29: aastore
      30: return

  private void resizeMeMaybe(int);
    Code:
       0: aload_0
       1: getfield      #21                 // Field entries:[J
       4: arraylength
       5: istore_2
       6: iload_1
       7: iload_2
       8: if_icmple     38
      11: iload_2
      12: iconst_1
      13: iload_2
      14: iconst_1
      15: iushr
      16: invokestatic  #22                 // Method java/lang/Math.max:(II)I
      19: iadd
      20: istore_3
      21: iload_3
      22: ifge          28
      25: ldc           #40                 // int 2147483647
      27: istore_3
      28: iload_3
      29: iload_2
      30: if_icmpeq     38
      33: aload_0
      34: iload_3
      35: invokevirtual #48                 // Method resizeEntries:(I)V
      38: return

  void resizeEntries(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #18                 // Field keys:[Ljava/lang/Object;
       5: iload_1
       6: invokestatic  #49                 // Method java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;
       9: putfield      #18                 // Field keys:[Ljava/lang/Object;
      12: aload_0
      13: aload_0
      14: getfield      #19                 // Field values:[Ljava/lang/Object;
      17: iload_1
      18: invokestatic  #49                 // Method java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;
      21: putfield      #19                 // Field values:[Ljava/lang/Object;
      24: aload_0
      25: getfield      #21                 // Field entries:[J
      28: astore_2
      29: aload_2
      30: arraylength
      31: istore_3
      32: aload_2
      33: iload_1
      34: invokestatic  #50                 // Method java/util/Arrays.copyOf:([JI)[J
      37: astore_2
      38: iload_1
      39: iload_3
      40: if_icmple     52
      43: aload_2
      44: iload_3
      45: iload_1
      46: ldc2_w        #25                 // long -1l
      49: invokestatic  #51                 // Method java/util/Arrays.fill:([JIIJ)V
      52: aload_0
      53: aload_2
      54: putfield      #21                 // Field entries:[J
      57: return

  private void resizeTable(int);
    Code:
       0: aload_0
       1: getfield      #15                 // Field table:[I
       4: astore_2
       5: aload_2
       6: arraylength
       7: istore_3
       8: iload_3
       9: ldc           #52                 // int 1073741824
      11: if_icmplt     21
      14: aload_0
      15: ldc           #40                 // int 2147483647
      17: putfield      #23                 // Field threshold:I
      20: return
      21: iconst_1
      22: iload_1
      23: i2f
      24: aload_0
      25: getfield      #16                 // Field loadFactor:F
      28: fmul
      29: f2i
      30: iadd
      31: istore        4
      33: iload_1
      34: invokestatic  #14                 // Method newTable:(I)[I
      37: astore        5
      39: aload_0
      40: getfield      #21                 // Field entries:[J
      43: astore        6
      45: aload         5
      47: arraylength
      48: iconst_1
      49: isub
      50: istore        7
      52: iconst_0
      53: istore        8
      55: iload         8
      57: aload_0
      58: getfield      #3                  // Field size:I
      61: if_icmpge     124
      64: aload         6
      66: iload         8
      68: laload
      69: lstore        9
      71: lload         9
      73: invokestatic  #34                 // Method getHash:(J)I
      76: istore        11
      78: iload         11
      80: iload         7
      82: iand
      83: istore        12
      85: aload         5
      87: iload         12
      89: iaload
      90: istore        13
      92: aload         5
      94: iload         12
      96: iload         8
      98: iastore
      99: aload         6
     101: iload         8
     103: iload         11
     105: i2l
     106: bipush        32
     108: lshl
     109: ldc2_w        #30                 // long 4294967295l
     112: iload         13
     114: i2l
     115: land
     116: lor
     117: lastore
     118: iinc          8, 1
     121: goto          55
     124: aload_0
     125: iload         4
     127: putfield      #23                 // Field threshold:I
     130: aload_0
     131: aload         5
     133: putfield      #15                 // Field table:[I
     136: return

  private int indexOf(java.lang.Object);
    Code:
       0: aload_1
       1: invokestatic  #32                 // Method com/google/common/collect/Hashing.smearedHash:(Ljava/lang/Object;)I
       4: istore_2
       5: aload_0
       6: getfield      #15                 // Field table:[I
       9: iload_2
      10: aload_0
      11: invokespecial #33                 // Method hashTableMask:()I
      14: iand
      15: iaload
      16: istore_3
      17: iload_3
      18: iconst_m1
      19: if_icmpeq     63
      22: aload_0
      23: getfield      #21                 // Field entries:[J
      26: iload_3
      27: laload
      28: lstore        4
      30: lload         4
      32: invokestatic  #34                 // Method getHash:(J)I
      35: iload_2
      36: if_icmpne     54
      39: aload_1
      40: aload_0
      41: getfield      #18                 // Field keys:[Ljava/lang/Object;
      44: iload_3
      45: aaload
      46: invokestatic  #35                 // Method com/google/common/base/Objects.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
      49: ifeq          54
      52: iload_3
      53: ireturn
      54: lload         4
      56: invokestatic  #37                 // Method getNext:(J)I
      59: istore_3
      60: goto          17
      63: iconst_m1
      64: ireturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method indexOf:(Ljava/lang/Object;)I
       5: iconst_m1
       6: if_icmpeq     13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method indexOf:(Ljava/lang/Object;)I
       5: istore_2
       6: aload_0
       7: iload_2
       8: invokevirtual #36                 // Method accessEntry:(I)V
      11: iload_2
      12: iconst_m1
      13: if_icmpne     20
      16: aconst_null
      17: goto          26
      20: aload_0
      21: getfield      #19                 // Field values:[Ljava/lang/Object;
      24: iload_2
      25: aaload
      26: areturn

  public V remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_1
       3: invokestatic  #32                 // Method com/google/common/collect/Hashing.smearedHash:(Ljava/lang/Object;)I
       6: invokespecial #53                 // Method remove:(Ljava/lang/Object;I)Ljava/lang/Object;
       9: areturn

  private V remove(java.lang.Object, int);
    Code:
       0: iload_2
       1: aload_0
       2: invokespecial #33                 // Method hashTableMask:()I
       5: iand
       6: istore_3
       7: aload_0
       8: getfield      #15                 // Field table:[I
      11: iload_3
      12: iaload
      13: istore        4
      15: iload         4
      17: iconst_m1
      18: if_icmpne     23
      21: aconst_null
      22: areturn
      23: iconst_m1
      24: istore        5
      26: aload_0
      27: getfield      #21                 // Field entries:[J
      30: iload         4
      32: laload
      33: invokestatic  #34                 // Method getHash:(J)I
      36: iload_2
      37: if_icmpne     144
      40: aload_1
      41: aload_0
      42: getfield      #18                 // Field keys:[Ljava/lang/Object;
      45: iload         4
      47: aaload
      48: invokestatic  #35                 // Method com/google/common/base/Objects.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
      51: ifeq          144
      54: aload_0
      55: getfield      #19                 // Field values:[Ljava/lang/Object;
      58: iload         4
      60: aaload
      61: astore        6
      63: iload         5
      65: iconst_m1
      66: if_icmpne     88
      69: aload_0
      70: getfield      #15                 // Field table:[I
      73: iload_3
      74: aload_0
      75: getfield      #21                 // Field entries:[J
      78: iload         4
      80: laload
      81: invokestatic  #37                 // Method getNext:(J)I
      84: iastore
      85: goto          115
      88: aload_0
      89: getfield      #21                 // Field entries:[J
      92: iload         5
      94: aload_0
      95: getfield      #21                 // Field entries:[J
      98: iload         5
     100: laload
     101: aload_0
     102: getfield      #21                 // Field entries:[J
     105: iload         4
     107: laload
     108: invokestatic  #37                 // Method getNext:(J)I
     111: invokestatic  #38                 // Method swapNext:(JI)J
     114: lastore
     115: aload_0
     116: iload         4
     118: invokevirtual #54                 // Method moveLastEntry:(I)V
     121: aload_0
     122: dup
     123: getfield      #3                  // Field size:I
     126: iconst_1
     127: isub
     128: putfield      #3                  // Field size:I
     131: aload_0
     132: dup
     133: getfield      #47                 // Field modCount:I
     136: iconst_1
     137: iadd
     138: putfield      #47                 // Field modCount:I
     141: aload         6
     143: areturn
     144: iload         4
     146: istore        5
     148: aload_0
     149: getfield      #21                 // Field entries:[J
     152: iload         4
     154: laload
     155: invokestatic  #37                 // Method getNext:(J)I
     158: istore        4
     160: iload         4
     162: iconst_m1
     163: if_icmpne     26
     166: aconst_null
     167: areturn

  private V removeEntry(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #18                 // Field keys:[Ljava/lang/Object;
       5: iload_1
       6: aaload
       7: aload_0
       8: getfield      #21                 // Field entries:[J
      11: iload_1
      12: laload
      13: invokestatic  #34                 // Method getHash:(J)I
      16: invokespecial #53                 // Method remove:(Ljava/lang/Object;I)Ljava/lang/Object;
      19: areturn

  void moveLastEntry(int);
    Code:
       0: aload_0
       1: invokevirtual #55                 // Method size:()I
       4: iconst_1
       5: isub
       6: istore_2
       7: iload_1
       8: iload_2
       9: if_icmpge     151
      12: aload_0
      13: getfield      #18                 // Field keys:[Ljava/lang/Object;
      16: iload_1
      17: aload_0
      18: getfield      #18                 // Field keys:[Ljava/lang/Object;
      21: iload_2
      22: aaload
      23: aastore
      24: aload_0
      25: getfield      #19                 // Field values:[Ljava/lang/Object;
      28: iload_1
      29: aload_0
      30: getfield      #19                 // Field values:[Ljava/lang/Object;
      33: iload_2
      34: aaload
      35: aastore
      36: aload_0
      37: getfield      #18                 // Field keys:[Ljava/lang/Object;
      40: iload_2
      41: aconst_null
      42: aastore
      43: aload_0
      44: getfield      #19                 // Field values:[Ljava/lang/Object;
      47: iload_2
      48: aconst_null
      49: aastore
      50: aload_0
      51: getfield      #21                 // Field entries:[J
      54: iload_2
      55: laload
      56: lstore_3
      57: aload_0
      58: getfield      #21                 // Field entries:[J
      61: iload_1
      62: lload_3
      63: lastore
      64: aload_0
      65: getfield      #21                 // Field entries:[J
      68: iload_2
      69: ldc2_w        #25                 // long -1l
      72: lastore
      73: lload_3
      74: invokestatic  #34                 // Method getHash:(J)I
      77: aload_0
      78: invokespecial #33                 // Method hashTableMask:()I
      81: iand
      82: istore        5
      84: aload_0
      85: getfield      #15                 // Field table:[I
      88: iload         5
      90: iaload
      91: istore        6
      93: iload         6
      95: iload_2
      96: if_icmpne     110
      99: aload_0
     100: getfield      #15                 // Field table:[I
     103: iload         5
     105: iload_1
     106: iastore
     107: goto          148
     110: iload         6
     112: istore        7
     114: aload_0
     115: getfield      #21                 // Field entries:[J
     118: iload         6
     120: laload
     121: dup2
     122: lstore        8
     124: invokestatic  #37                 // Method getNext:(J)I
     127: istore        6
     129: iload         6
     131: iload_2
     132: if_icmpne     110
     135: aload_0
     136: getfield      #21                 // Field entries:[J
     139: iload         7
     141: lload         8
     143: iload_1
     144: invokestatic  #38                 // Method swapNext:(JI)J
     147: lastore
     148: goto          174
     151: aload_0
     152: getfield      #18                 // Field keys:[Ljava/lang/Object;
     155: iload_1
     156: aconst_null
     157: aastore
     158: aload_0
     159: getfield      #19                 // Field values:[Ljava/lang/Object;
     162: iload_1
     163: aconst_null
     164: aastore
     165: aload_0
     166: getfield      #21                 // Field entries:[J
     169: iload_1
     170: ldc2_w        #25                 // long -1l
     173: lastore
     174: return

  int firstEntryIndex();
    Code:
       0: aload_0
       1: invokevirtual #56                 // Method isEmpty:()Z
       4: ifeq          11
       7: iconst_m1
       8: goto          12
      11: iconst_0
      12: ireturn

  int getSuccessor(int);
    Code:
       0: iload_1
       1: iconst_1
       2: iadd
       3: aload_0
       4: getfield      #3                  // Field size:I
       7: if_icmpge     16
      10: iload_1
      11: iconst_1
      12: iadd
      13: goto          17
      16: iconst_m1
      17: ireturn

  int adjustAfterRemove(int, int);
    Code:
       0: iload_1
       1: iconst_1
       2: isub
       3: ireturn

  public void replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>);
    Code:
       0: aload_1
       1: invokestatic  #57                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: iconst_0
       6: istore_2
       7: iload_2
       8: aload_0
       9: getfield      #3                  // Field size:I
      12: if_icmpge     45
      15: aload_0
      16: getfield      #19                 // Field values:[Ljava/lang/Object;
      19: iload_2
      20: aload_1
      21: aload_0
      22: getfield      #18                 // Field keys:[Ljava/lang/Object;
      25: iload_2
      26: aaload
      27: aload_0
      28: getfield      #19                 // Field values:[Ljava/lang/Object;
      31: iload_2
      32: aaload
      33: invokeinterface #58,  3           // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      38: aastore
      39: iinc          2, 1
      42: goto          7
      45: return

  public java.util.Set<K> keySet();
    Code:
       0: aload_0
       1: getfield      #59                 // Field keySetView:Ljava/util/Set;
       4: ifnonnull     19
       7: aload_0
       8: aload_0
       9: invokevirtual #60                 // Method createKeySet:()Ljava/util/Set;
      12: dup_x1
      13: putfield      #59                 // Field keySetView:Ljava/util/Set;
      16: goto          23
      19: aload_0
      20: getfield      #59                 // Field keySetView:Ljava/util/Set;
      23: areturn

  java.util.Set<K> createKeySet();
    Code:
       0: new           #61                 // class com/google/common/collect/CompactHashMap$KeySetView
       3: dup
       4: aload_0
       5: invokespecial #62                 // Method com/google/common/collect/CompactHashMap$KeySetView."<init>":(Lcom/google/common/collect/CompactHashMap;)V
       8: areturn

  java.util.Iterator<K> keySetIterator();
    Code:
       0: new           #63                 // class com/google/common/collect/CompactHashMap$1
       3: dup
       4: aload_0
       5: invokespecial #64                 // Method com/google/common/collect/CompactHashMap$1."<init>":(Lcom/google/common/collect/CompactHashMap;)V
       8: areturn

  public void forEach(java.util.function.BiConsumer<? super K, ? super V>);
    Code:
       0: aload_1
       1: invokestatic  #57                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: iconst_0
       6: istore_2
       7: iload_2
       8: aload_0
       9: getfield      #3                  // Field size:I
      12: if_icmpge     39
      15: aload_1
      16: aload_0
      17: getfield      #18                 // Field keys:[Ljava/lang/Object;
      20: iload_2
      21: aaload
      22: aload_0
      23: getfield      #19                 // Field values:[Ljava/lang/Object;
      26: iload_2
      27: aaload
      28: invokeinterface #65,  3           // InterfaceMethod java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
      33: iinc          2, 1
      36: goto          7
      39: return

  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: aload_0
       1: getfield      #66                 // Field entrySetView:Ljava/util/Set;
       4: ifnonnull     19
       7: aload_0
       8: aload_0
       9: invokevirtual #67                 // Method createEntrySet:()Ljava/util/Set;
      12: dup_x1
      13: putfield      #66                 // Field entrySetView:Ljava/util/Set;
      16: goto          23
      19: aload_0
      20: getfield      #66                 // Field entrySetView:Ljava/util/Set;
      23: areturn

  java.util.Set<java.util.Map$Entry<K, V>> createEntrySet();
    Code:
       0: new           #68                 // class com/google/common/collect/CompactHashMap$EntrySetView
       3: dup
       4: aload_0
       5: invokespecial #69                 // Method com/google/common/collect/CompactHashMap$EntrySetView."<init>":(Lcom/google/common/collect/CompactHashMap;)V
       8: areturn

  java.util.Iterator<java.util.Map$Entry<K, V>> entrySetIterator();
    Code:
       0: new           #70                 // class com/google/common/collect/CompactHashMap$2
       3: dup
       4: aload_0
       5: invokespecial #71                 // Method com/google/common/collect/CompactHashMap$2."<init>":(Lcom/google/common/collect/CompactHashMap;)V
       8: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #3                  // Field size:I
       4: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #3                  // Field size:I
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: aload_0
       4: getfield      #3                  // Field size:I
       7: if_icmpge     31
      10: aload_1
      11: aload_0
      12: getfield      #19                 // Field values:[Ljava/lang/Object;
      15: iload_2
      16: aaload
      17: invokestatic  #35                 // Method com/google/common/base/Objects.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
      20: ifeq          25
      23: iconst_1
      24: ireturn
      25: iinc          2, 1
      28: goto          2
      31: iconst_0
      32: ireturn

  public java.util.Collection<V> values();
    Code:
       0: aload_0
       1: getfield      #72                 // Field valuesView:Ljava/util/Collection;
       4: ifnonnull     19
       7: aload_0
       8: aload_0
       9: invokevirtual #73                 // Method createValues:()Ljava/util/Collection;
      12: dup_x1
      13: putfield      #72                 // Field valuesView:Ljava/util/Collection;
      16: goto          23
      19: aload_0
      20: getfield      #72                 // Field valuesView:Ljava/util/Collection;
      23: areturn

  java.util.Collection<V> createValues();
    Code:
       0: new           #74                 // class com/google/common/collect/CompactHashMap$ValuesView
       3: dup
       4: aload_0
       5: invokespecial #75                 // Method com/google/common/collect/CompactHashMap$ValuesView."<init>":(Lcom/google/common/collect/CompactHashMap;)V
       8: areturn

  java.util.Iterator<V> valuesIterator();
    Code:
       0: new           #76                 // class com/google/common/collect/CompactHashMap$3
       3: dup
       4: aload_0
       5: invokespecial #77                 // Method com/google/common/collect/CompactHashMap$3."<init>":(Lcom/google/common/collect/CompactHashMap;)V
       8: areturn

  public void trimToSize();
    Code:
       0: aload_0
       1: getfield      #3                  // Field size:I
       4: istore_1
       5: iload_1
       6: aload_0
       7: getfield      #21                 // Field entries:[J
      10: arraylength
      11: if_icmpge     19
      14: aload_0
      15: iload_1
      16: invokevirtual #48                 // Method resizeEntries:(I)V
      19: iconst_1
      20: iload_1
      21: i2f
      22: aload_0
      23: getfield      #16                 // Field loadFactor:F
      26: fdiv
      27: f2i
      28: invokestatic  #78                 // Method java/lang/Integer.highestOneBit:(I)I
      31: invokestatic  #22                 // Method java/lang/Math.max:(II)I
      34: istore_2
      35: iload_2
      36: ldc           #52                 // int 1073741824
      38: if_icmpge     61
      41: iload_1
      42: i2d
      43: iload_2
      44: i2d
      45: ddiv
      46: dstore_3
      47: dload_3
      48: aload_0
      49: getfield      #16                 // Field loadFactor:F
      52: f2d
      53: dcmpl
      54: ifle          61
      57: iload_2
      58: iconst_1
      59: ishl
      60: istore_2
      61: iload_2
      62: aload_0
      63: getfield      #15                 // Field table:[I
      66: arraylength
      67: if_icmpge     75
      70: aload_0
      71: iload_2
      72: invokespecial #46                 // Method resizeTable:(I)V
      75: return

  public void clear();
    Code:
       0: aload_0
       1: dup
       2: getfield      #47                 // Field modCount:I
       5: iconst_1
       6: iadd
       7: putfield      #47                 // Field modCount:I
      10: aload_0
      11: getfield      #18                 // Field keys:[Ljava/lang/Object;
      14: iconst_0
      15: aload_0
      16: getfield      #3                  // Field size:I
      19: aconst_null
      20: invokestatic  #79                 // Method java/util/Arrays.fill:([Ljava/lang/Object;IILjava/lang/Object;)V
      23: aload_0
      24: getfield      #19                 // Field values:[Ljava/lang/Object;
      27: iconst_0
      28: aload_0
      29: getfield      #3                  // Field size:I
      32: aconst_null
      33: invokestatic  #79                 // Method java/util/Arrays.fill:([Ljava/lang/Object;IILjava/lang/Object;)V
      36: aload_0
      37: getfield      #15                 // Field table:[I
      40: iconst_m1
      41: invokestatic  #24                 // Method java/util/Arrays.fill:([II)V
      44: aload_0
      45: getfield      #21                 // Field entries:[J
      48: ldc2_w        #25                 // long -1l
      51: invokestatic  #27                 // Method java/util/Arrays.fill:([JJ)V
      54: aload_0
      55: iconst_0
      56: putfield      #3                  // Field size:I
      59: return

  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #80                 // Method java/io/ObjectOutputStream.defaultWriteObject:()V
       4: aload_1
       5: aload_0
       6: getfield      #3                  // Field size:I
       9: invokevirtual #81                 // Method java/io/ObjectOutputStream.writeInt:(I)V
      12: iconst_0
      13: istore_2
      14: iload_2
      15: aload_0
      16: getfield      #3                  // Field size:I
      19: if_icmpge     48
      22: aload_1
      23: aload_0
      24: getfield      #18                 // Field keys:[Ljava/lang/Object;
      27: iload_2
      28: aaload
      29: invokevirtual #82                 // Method java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V
      32: aload_1
      33: aload_0
      34: getfield      #19                 // Field values:[Ljava/lang/Object;
      37: iload_2
      38: aaload
      39: invokevirtual #82                 // Method java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V
      42: iinc          2, 1
      45: goto          14
      48: return

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #83                 // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: aload_0
       5: iconst_3
       6: fconst_1
       7: invokevirtual #8                  // Method init:(IF)V
      10: aload_1
      11: invokevirtual #84                 // Method java/io/ObjectInputStream.readInt:()I
      14: istore_2
      15: iload_2
      16: istore_3
      17: iinc          3, -1
      20: iload_3
      21: iflt          48
      24: aload_1
      25: invokevirtual #85                 // Method java/io/ObjectInputStream.readObject:()Ljava/lang/Object;
      28: astore        4
      30: aload_1
      31: invokevirtual #85                 // Method java/io/ObjectInputStream.readObject:()Ljava/lang/Object;
      34: astore        5
      36: aload_0
      37: aload         4
      39: aload         5
      41: invokevirtual #86                 // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      44: pop
      45: goto          17
      48: return

  static java.lang.Object access$000(com.google.common.collect.CompactHashMap, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #4                  // Method removeEntry:(I)Ljava/lang/Object;
       5: areturn

  static int access$100(com.google.common.collect.CompactHashMap);
    Code:
       0: aload_0
       1: getfield      #3                  // Field size:I
       4: ireturn

  static int access$200(com.google.common.collect.CompactHashMap, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method indexOf:(Ljava/lang/Object;)I
       5: ireturn
}
