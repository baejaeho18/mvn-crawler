Compiled from "StringHttpMessageConverter.java"
public class org.springframework.http.converter.StringHttpMessageConverter extends org.springframework.http.converter.AbstractHttpMessageConverter<java.lang.String> {
  private static final org.springframework.http.MediaType APPLICATION_PLUS_JSON;

  public static final java.nio.charset.Charset DEFAULT_CHARSET;

  private volatile java.util.List<java.nio.charset.Charset> availableCharsets;

  private boolean writeAcceptCharset;

  public org.springframework.http.converter.StringHttpMessageConverter();
    Code:
       0: aload_0
       1: getstatic     #1                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
       4: invokespecial #2                  // Method "<init>":(Ljava/nio/charset/Charset;)V
       7: return

  public org.springframework.http.converter.StringHttpMessageConverter(java.nio.charset.Charset);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_2
       3: anewarray     #3                  // class org/springframework/http/MediaType
       6: dup
       7: iconst_0
       8: getstatic     #4                  // Field org/springframework/http/MediaType.TEXT_PLAIN:Lorg/springframework/http/MediaType;
      11: aastore
      12: dup
      13: iconst_1
      14: getstatic     #5                  // Field org/springframework/http/MediaType.ALL:Lorg/springframework/http/MediaType;
      17: aastore
      18: invokespecial #6                  // Method org/springframework/http/converter/AbstractHttpMessageConverter."<init>":(Ljava/nio/charset/Charset;[Lorg/springframework/http/MediaType;)V
      21: aload_0
      22: iconst_0
      23: putfield      #7                  // Field writeAcceptCharset:Z
      26: return

  public void setWriteAcceptCharset(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field writeAcceptCharset:Z
       5: return

  public boolean supports(java.lang.Class<?>);
    Code:
       0: ldc           #8                  // class java/lang/String
       2: aload_1
       3: if_acmpne     10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ireturn

  protected java.lang.String readInternal(java.lang.Class<? extends java.lang.String>, org.springframework.http.HttpInputMessage) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #9,  1            // InterfaceMethod org/springframework/http/HttpInputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       7: invokevirtual #10                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
      10: invokespecial #11                 // Method getContentTypeCharset:(Lorg/springframework/http/MediaType;)Ljava/nio/charset/Charset;
      13: astore_3
      14: aload_2
      15: invokeinterface #12,  1           // InterfaceMethod org/springframework/http/HttpInputMessage.getBody:()Ljava/io/InputStream;
      20: aload_3
      21: invokestatic  #13                 // Method org/springframework/util/StreamUtils.copyToString:(Ljava/io/InputStream;Ljava/nio/charset/Charset;)Ljava/lang/String;
      24: areturn

  protected java.lang.Long getContentLength(java.lang.String, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #11                 // Method getContentTypeCharset:(Lorg/springframework/http/MediaType;)Ljava/nio/charset/Charset;
       5: astore_3
       6: aload_1
       7: aload_3
       8: invokevirtual #14                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      11: arraylength
      12: i2l
      13: invokestatic  #15                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      16: areturn

  protected void addDefaultHeaders(org.springframework.http.HttpHeaders, java.lang.String, org.springframework.http.MediaType) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #10                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       4: ifnonnull     43
       7: aload_3
       8: ifnull        43
      11: aload_3
      12: invokevirtual #16                 // Method org/springframework/http/MediaType.isConcrete:()Z
      15: ifeq          43
      18: aload_3
      19: getstatic     #17                 // Field org/springframework/http/MediaType.APPLICATION_JSON:Lorg/springframework/http/MediaType;
      22: invokevirtual #18                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      25: ifne          38
      28: aload_3
      29: getstatic     #19                 // Field APPLICATION_PLUS_JSON:Lorg/springframework/http/MediaType;
      32: invokevirtual #18                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      35: ifeq          43
      38: aload_1
      39: aload_3
      40: invokevirtual #20                 // Method org/springframework/http/HttpHeaders.setContentType:(Lorg/springframework/http/MediaType;)V
      43: aload_0
      44: aload_1
      45: aload_2
      46: aload_3
      47: invokespecial #21                 // Method org/springframework/http/converter/AbstractHttpMessageConverter.addDefaultHeaders:(Lorg/springframework/http/HttpHeaders;Ljava/lang/Object;Lorg/springframework/http/MediaType;)V
      50: return

  protected void writeInternal(java.lang.String, org.springframework.http.HttpOutputMessage) throws java.io.IOException;
    Code:
       0: aload_2
       1: invokeinterface #22,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       6: astore_3
       7: aload_0
       8: getfield      #7                  // Field writeAcceptCharset:Z
      11: ifeq          31
      14: aload_3
      15: ldc           #24                 // String Accept-Charset
      17: invokevirtual #25                 // Method org/springframework/http/HttpHeaders.get:(Ljava/lang/Object;)Ljava/util/List;
      20: ifnonnull     31
      23: aload_3
      24: aload_0
      25: invokevirtual #26                 // Method getAcceptedCharsets:()Ljava/util/List;
      28: invokevirtual #27                 // Method org/springframework/http/HttpHeaders.setAcceptCharset:(Ljava/util/List;)V
      31: aload_0
      32: aload_3
      33: invokevirtual #10                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
      36: invokespecial #11                 // Method getContentTypeCharset:(Lorg/springframework/http/MediaType;)Ljava/nio/charset/Charset;
      39: astore        4
      41: aload_1
      42: aload         4
      44: aload_2
      45: invokeinterface #28,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getBody:()Ljava/io/OutputStream;
      50: invokestatic  #29                 // Method org/springframework/util/StreamUtils.copy:(Ljava/lang/String;Ljava/nio/charset/Charset;Ljava/io/OutputStream;)V
      53: return

  protected java.util.List<java.nio.charset.Charset> getAcceptedCharsets();
    Code:
       0: aload_0
       1: getfield      #30                 // Field availableCharsets:Ljava/util/List;
       4: astore_1
       5: aload_1
       6: ifnonnull     30
       9: new           #31                 // class java/util/ArrayList
      12: dup
      13: invokestatic  #32                 // Method java/nio/charset/Charset.availableCharsets:()Ljava/util/SortedMap;
      16: invokeinterface #33,  1           // InterfaceMethod java/util/SortedMap.values:()Ljava/util/Collection;
      21: invokespecial #34                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      24: astore_1
      25: aload_0
      26: aload_1
      27: putfield      #30                 // Field availableCharsets:Ljava/util/List;
      30: aload_1
      31: areturn

  private java.nio.charset.Charset getContentTypeCharset(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: ifnull        16
       4: aload_1
       5: invokevirtual #35                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
       8: ifnull        16
      11: aload_1
      12: invokevirtual #35                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      15: areturn
      16: aload_1
      17: ifnull        44
      20: aload_1
      21: getstatic     #17                 // Field org/springframework/http/MediaType.APPLICATION_JSON:Lorg/springframework/http/MediaType;
      24: invokevirtual #18                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      27: ifne          40
      30: aload_1
      31: getstatic     #19                 // Field APPLICATION_PLUS_JSON:Lorg/springframework/http/MediaType;
      34: invokevirtual #18                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      37: ifeq          44
      40: getstatic     #36                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      43: areturn
      44: aload_0
      45: invokevirtual #37                 // Method getDefaultCharset:()Ljava/nio/charset/Charset;
      48: astore_2
      49: aload_2
      50: ifnull        57
      53: iconst_1
      54: goto          58
      57: iconst_0
      58: ldc           #38                 // String No default charset
      60: invokestatic  #39                 // Method org/springframework/util/Assert.state:(ZLjava/lang/String;)V
      63: aload_2
      64: areturn

  protected void writeInternal(java.lang.Object, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #8                  // class java/lang/String
       5: aload_2
       6: invokevirtual #40                 // Method writeInternal:(Ljava/lang/String;Lorg/springframework/http/HttpOutputMessage;)V
       9: return

  protected java.lang.Object readInternal(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #41                 // Method readInternal:(Ljava/lang/Class;Lorg/springframework/http/HttpInputMessage;)Ljava/lang/String;
       6: areturn

  protected java.lang.Long getContentLength(java.lang.Object, org.springframework.http.MediaType) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #8                  // class java/lang/String
       5: aload_2
       6: invokevirtual #42                 // Method getContentLength:(Ljava/lang/String;Lorg/springframework/http/MediaType;)Ljava/lang/Long;
       9: areturn

  protected void addDefaultHeaders(org.springframework.http.HttpHeaders, java.lang.Object, org.springframework.http.MediaType) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #8                  // class java/lang/String
       6: aload_3
       7: invokevirtual #43                 // Method addDefaultHeaders:(Lorg/springframework/http/HttpHeaders;Ljava/lang/String;Lorg/springframework/http/MediaType;)V
      10: return

  static {};
    Code:
       0: new           #3                  // class org/springframework/http/MediaType
       3: dup
       4: ldc           #44                 // String application
       6: ldc           #45                 // String *+json
       8: invokespecial #46                 // Method org/springframework/http/MediaType."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      11: putstatic     #19                 // Field APPLICATION_PLUS_JSON:Lorg/springframework/http/MediaType;
      14: getstatic     #47                 // Field java/nio/charset/StandardCharsets.ISO_8859_1:Ljava/nio/charset/Charset;
      17: putstatic     #1                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
      20: return
}
