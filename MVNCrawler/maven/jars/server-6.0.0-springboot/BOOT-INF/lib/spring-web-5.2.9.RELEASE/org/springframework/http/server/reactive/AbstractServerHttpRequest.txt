Compiled from "AbstractServerHttpRequest.java"
public abstract class org.springframework.http.server.reactive.AbstractServerHttpRequest implements org.springframework.http.server.reactive.ServerHttpRequest {
  private static final java.util.regex.Pattern QUERY_PATTERN;

  protected final org.apache.commons.logging.Log logger;

  private final java.net.URI uri;

  private final org.springframework.http.server.RequestPath path;

  private final org.springframework.http.HttpHeaders headers;

  private org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> queryParams;

  private org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> cookies;

  private org.springframework.http.server.reactive.SslInfo sslInfo;

  private java.lang.String id;

  private java.lang.String logPrefix;

  public org.springframework.http.server.reactive.AbstractServerHttpRequest(java.net.URI, java.lang.String, org.springframework.http.HttpHeaders);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/springframework/http/HttpLogging.forLogName:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field uri:Ljava/net/URI;
      20: aload_0
      21: aload_1
      22: aload_2
      23: invokestatic  #6                  // InterfaceMethod org/springframework/http/server/RequestPath.parse:(Ljava/net/URI;Ljava/lang/String;)Lorg/springframework/http/server/RequestPath;
      26: putfield      #7                  // Field path:Lorg/springframework/http/server/RequestPath;
      29: aload_0
      30: aload_3
      31: invokestatic  #8                  // Method org/springframework/http/HttpHeaders.readOnlyHttpHeaders:(Lorg/springframework/http/HttpHeaders;)Lorg/springframework/http/HttpHeaders;
      34: putfield      #9                  // Field headers:Lorg/springframework/http/HttpHeaders;
      37: return

  public java.lang.String getId();
    Code:
       0: aload_0
       1: getfield      #10                 // Field id:Ljava/lang/String;
       4: ifnonnull     30
       7: aload_0
       8: aload_0
       9: invokevirtual #11                 // Method initId:()Ljava/lang/String;
      12: putfield      #10                 // Field id:Ljava/lang/String;
      15: aload_0
      16: getfield      #10                 // Field id:Ljava/lang/String;
      19: ifnonnull     30
      22: aload_0
      23: aload_0
      24: invokestatic  #12                 // Method org/springframework/util/ObjectUtils.getIdentityHexString:(Ljava/lang/Object;)Ljava/lang/String;
      27: putfield      #10                 // Field id:Ljava/lang/String;
      30: aload_0
      31: getfield      #10                 // Field id:Ljava/lang/String;
      34: areturn

  protected java.lang.String initId();
    Code:
       0: aconst_null
       1: areturn

  public java.net.URI getURI();
    Code:
       0: aload_0
       1: getfield      #5                  // Field uri:Ljava/net/URI;
       4: areturn

  public org.springframework.http.server.RequestPath getPath();
    Code:
       0: aload_0
       1: getfield      #7                  // Field path:Lorg/springframework/http/server/RequestPath;
       4: areturn

  public org.springframework.http.HttpHeaders getHeaders();
    Code:
       0: aload_0
       1: getfield      #9                  // Field headers:Lorg/springframework/http/HttpHeaders;
       4: areturn

  public org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> getQueryParams();
    Code:
       0: aload_0
       1: getfield      #13                 // Field queryParams:Lorg/springframework/util/MultiValueMap;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: invokevirtual #14                 // Method initQueryParams:()Lorg/springframework/util/MultiValueMap;
      12: invokestatic  #15                 // Method org/springframework/util/CollectionUtils.unmodifiableMultiValueMap:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/util/MultiValueMap;
      15: putfield      #13                 // Field queryParams:Lorg/springframework/util/MultiValueMap;
      18: aload_0
      19: getfield      #13                 // Field queryParams:Lorg/springframework/util/MultiValueMap;
      22: areturn

  protected org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> initQueryParams();
    Code:
       0: new           #16                 // class org/springframework/util/LinkedMultiValueMap
       3: dup
       4: invokespecial #17                 // Method org/springframework/util/LinkedMultiValueMap."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #18                 // Method getURI:()Ljava/net/URI;
      12: invokevirtual #19                 // Method java/net/URI.getRawQuery:()Ljava/lang/String;
      15: astore_2
      16: aload_2
      17: ifnull        103
      20: getstatic     #20                 // Field QUERY_PATTERN:Ljava/util/regex/Pattern;
      23: aload_2
      24: invokevirtual #21                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      27: astore_3
      28: aload_3
      29: invokevirtual #22                 // Method java/util/regex/Matcher.find:()Z
      32: ifeq          103
      35: aload_0
      36: aload_3
      37: iconst_1
      38: invokevirtual #23                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
      41: invokespecial #24                 // Method decodeQueryParam:(Ljava/lang/String;)Ljava/lang/String;
      44: astore        4
      46: aload_3
      47: iconst_2
      48: invokevirtual #23                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
      51: astore        5
      53: aload_3
      54: iconst_3
      55: invokevirtual #23                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
      58: astore        6
      60: aload         6
      62: ifnull        74
      65: aload_0
      66: aload         6
      68: invokespecial #24                 // Method decodeQueryParam:(Ljava/lang/String;)Ljava/lang/String;
      71: goto          88
      74: aload         5
      76: invokestatic  #25                 // Method org/springframework/util/StringUtils.hasLength:(Ljava/lang/String;)Z
      79: ifeq          87
      82: ldc           #26                 // String
      84: goto          88
      87: aconst_null
      88: astore        6
      90: aload_1
      91: aload         4
      93: aload         6
      95: invokeinterface #27,  3           // InterfaceMethod org/springframework/util/MultiValueMap.add:(Ljava/lang/Object;Ljava/lang/Object;)V
     100: goto          28
     103: aload_1
     104: areturn

  private java.lang.String decodeQueryParam(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #28                 // String UTF-8
       3: invokestatic  #29                 // Method java/net/URLDecoder.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       6: areturn
       7: astore_2
       8: aload_0
       9: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      12: invokeinterface #31,  1           // InterfaceMethod org/apache/commons/logging/Log.isWarnEnabled:()Z
      17: ifeq          67
      20: aload_0
      21: getfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      24: new           #32                 // class java/lang/StringBuilder
      27: dup
      28: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      31: aload_0
      32: invokevirtual #34                 // Method getLogPrefix:()Ljava/lang/String;
      35: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: ldc           #36                 // String Could not decode query value [
      40: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: aload_1
      44: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: ldc           #37                 // String ] as \'UTF-8\'. Falling back on default encoding:
      49: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: aload_2
      53: invokevirtual #38                 // Method java/io/UnsupportedEncodingException.getMessage:()Ljava/lang/String;
      56: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      62: invokeinterface #40,  2           // InterfaceMethod org/apache/commons/logging/Log.warn:(Ljava/lang/Object;)V
      67: aload_1
      68: invokestatic  #41                 // Method java/net/URLDecoder.decode:(Ljava/lang/String;)Ljava/lang/String;
      71: areturn
    Exception table:
       from    to  target type
           0     6     7   Class java/io/UnsupportedEncodingException

  public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> getCookies();
    Code:
       0: aload_0
       1: getfield      #42                 // Field cookies:Lorg/springframework/util/MultiValueMap;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: invokevirtual #43                 // Method initCookies:()Lorg/springframework/util/MultiValueMap;
      12: invokestatic  #15                 // Method org/springframework/util/CollectionUtils.unmodifiableMultiValueMap:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/util/MultiValueMap;
      15: putfield      #42                 // Field cookies:Lorg/springframework/util/MultiValueMap;
      18: aload_0
      19: getfield      #42                 // Field cookies:Lorg/springframework/util/MultiValueMap;
      22: areturn

  protected abstract org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> initCookies();

  public org.springframework.http.server.reactive.SslInfo getSslInfo();
    Code:
       0: aload_0
       1: getfield      #44                 // Field sslInfo:Lorg/springframework/http/server/reactive/SslInfo;
       4: ifnonnull     15
       7: aload_0
       8: aload_0
       9: invokevirtual #45                 // Method initSslInfo:()Lorg/springframework/http/server/reactive/SslInfo;
      12: putfield      #44                 // Field sslInfo:Lorg/springframework/http/server/reactive/SslInfo;
      15: aload_0
      16: getfield      #44                 // Field sslInfo:Lorg/springframework/http/server/reactive/SslInfo;
      19: areturn

  protected abstract org.springframework.http.server.reactive.SslInfo initSslInfo();

  public abstract <T> T getNativeRequest();

  java.lang.String getLogPrefix();
    Code:
       0: aload_0
       1: getfield      #46                 // Field logPrefix:Ljava/lang/String;
       4: ifnonnull     38
       7: aload_0
       8: new           #32                 // class java/lang/StringBuilder
      11: dup
      12: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      15: ldc           #47                 // String [
      17: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: aload_0
      21: invokevirtual #48                 // Method getId:()Ljava/lang/String;
      24: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: ldc           #49                 // String ]
      29: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: putfield      #46                 // Field logPrefix:Ljava/lang/String;
      38: aload_0
      39: getfield      #46                 // Field logPrefix:Ljava/lang/String;
      42: areturn

  static {};
    Code:
       0: ldc           #50                 // String ([^&=]+)(=?)([^&]+)?
       2: invokestatic  #51                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
       5: putstatic     #20                 // Field QUERY_PATTERN:Ljava/util/regex/Pattern;
       8: return
}
