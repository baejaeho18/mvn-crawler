Compiled from "ServletPathExtensionContentNegotiationStrategy.java"
public class org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy extends org.springframework.web.accept.PathExtensionContentNegotiationStrategy {
  private final javax.servlet.ServletContext servletContext;

  public org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy(javax.servlet.ServletContext);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #1                  // Method "<init>":(Ljavax/servlet/ServletContext;Ljava/util/Map;)V
       6: return

  public org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy(javax.servlet.ServletContext, java.util.Map<java.lang.String, org.springframework.http.MediaType>);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #2                  // Method org/springframework/web/accept/PathExtensionContentNegotiationStrategy."<init>":(Ljava/util/Map;)V
       5: aload_1
       6: ldc           #3                  // String ServletContext is required
       8: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      11: aload_0
      12: aload_1
      13: putfield      #5                  // Field servletContext:Ljavax/servlet/ServletContext;
      16: return

  protected org.springframework.http.MediaType handleNoMatch(org.springframework.web.context.request.NativeWebRequest, java.lang.String) throws org.springframework.web.HttpMediaTypeNotAcceptableException;
    Code:
       0: aconst_null
       1: astore_3
       2: aload_0
       3: getfield      #5                  // Field servletContext:Ljavax/servlet/ServletContext;
       6: new           #6                  // class java/lang/StringBuilder
       9: dup
      10: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      13: ldc           #8                  // String file.
      15: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      18: aload_2
      19: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      25: invokeinterface #11,  2           // InterfaceMethod javax/servlet/ServletContext.getMimeType:(Ljava/lang/String;)Ljava/lang/String;
      30: astore        4
      32: aload         4
      34: invokestatic  #12                 // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
      37: ifeq          46
      40: aload         4
      42: invokestatic  #13                 // Method org/springframework/http/MediaType.parseMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
      45: astore_3
      46: aload_3
      47: ifnull        60
      50: getstatic     #14                 // Field org/springframework/http/MediaType.APPLICATION_OCTET_STREAM:Lorg/springframework/http/MediaType;
      53: aload_3
      54: invokevirtual #15                 // Method org/springframework/http/MediaType.equals:(Ljava/lang/Object;)Z
      57: ifeq          76
      60: aload_0
      61: aload_1
      62: aload_2
      63: invokespecial #16                 // Method org/springframework/web/accept/PathExtensionContentNegotiationStrategy.handleNoMatch:(Lorg/springframework/web/context/request/NativeWebRequest;Ljava/lang/String;)Lorg/springframework/http/MediaType;
      66: astore        5
      68: aload         5
      70: ifnull        76
      73: aload         5
      75: astore_3
      76: aload_3
      77: areturn

  public org.springframework.http.MediaType getMediaTypeForResource(org.springframework.core.io.Resource);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: getfield      #5                  // Field servletContext:Ljavax/servlet/ServletContext;
       6: aload_1
       7: invokeinterface #17,  1           // InterfaceMethod org/springframework/core/io/Resource.getFilename:()Ljava/lang/String;
      12: invokeinterface #11,  2           // InterfaceMethod javax/servlet/ServletContext.getMimeType:(Ljava/lang/String;)Ljava/lang/String;
      17: astore_3
      18: aload_3
      19: invokestatic  #12                 // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
      22: ifeq          30
      25: aload_3
      26: invokestatic  #13                 // Method org/springframework/http/MediaType.parseMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
      29: astore_2
      30: aload_2
      31: ifnull        44
      34: getstatic     #14                 // Field org/springframework/http/MediaType.APPLICATION_OCTET_STREAM:Lorg/springframework/http/MediaType;
      37: aload_2
      38: invokevirtual #15                 // Method org/springframework/http/MediaType.equals:(Ljava/lang/Object;)Z
      41: ifeq          59
      44: aload_0
      45: aload_1
      46: invokespecial #18                 // Method org/springframework/web/accept/PathExtensionContentNegotiationStrategy.getMediaTypeForResource:(Lorg/springframework/core/io/Resource;)Lorg/springframework/http/MediaType;
      49: astore        4
      51: aload         4
      53: ifnull        59
      56: aload         4
      58: astore_2
      59: aload_2
      60: areturn
}
