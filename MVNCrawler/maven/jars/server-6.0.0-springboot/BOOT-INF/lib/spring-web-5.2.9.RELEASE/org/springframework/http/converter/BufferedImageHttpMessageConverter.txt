Compiled from "BufferedImageHttpMessageConverter.java"
public class org.springframework.http.converter.BufferedImageHttpMessageConverter implements org.springframework.http.converter.HttpMessageConverter<java.awt.image.BufferedImage> {
  private final java.util.List<org.springframework.http.MediaType> readableMediaTypes;

  private org.springframework.http.MediaType defaultContentType;

  private java.io.File cacheDir;

  public org.springframework.http.converter.BufferedImageHttpMessageConverter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #4                  // Field readableMediaTypes:Ljava/util/List;
      15: invokestatic  #5                  // Method javax/imageio/ImageIO.getReaderMIMETypes:()[Ljava/lang/String;
      18: astore_1
      19: aload_1
      20: astore_2
      21: aload_2
      22: arraylength
      23: istore_3
      24: iconst_0
      25: istore        4
      27: iload         4
      29: iload_3
      30: if_icmpge     68
      33: aload_2
      34: iload         4
      36: aaload
      37: astore        5
      39: aload         5
      41: invokestatic  #6                  // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
      44: ifeq          62
      47: aload_0
      48: getfield      #4                  // Field readableMediaTypes:Ljava/util/List;
      51: aload         5
      53: invokestatic  #7                  // Method org/springframework/http/MediaType.parseMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
      56: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      61: pop
      62: iinc          4, 1
      65: goto          27
      68: invokestatic  #9                  // Method javax/imageio/ImageIO.getWriterMIMETypes:()[Ljava/lang/String;
      71: astore_2
      72: aload_2
      73: astore_3
      74: aload_3
      75: arraylength
      76: istore        4
      78: iconst_0
      79: istore        5
      81: iload         5
      83: iload         4
      85: if_icmpge     120
      88: aload_3
      89: iload         5
      91: aaload
      92: astore        6
      94: aload         6
      96: invokestatic  #6                  // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
      99: ifeq          114
     102: aload_0
     103: aload         6
     105: invokestatic  #7                  // Method org/springframework/http/MediaType.parseMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
     108: putfield      #10                 // Field defaultContentType:Lorg/springframework/http/MediaType;
     111: goto          120
     114: iinc          5, 1
     117: goto          81
     120: return

  public void setDefaultContentType(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: ifnull        53
       4: aload_1
       5: invokevirtual #11                 // Method org/springframework/http/MediaType.toString:()Ljava/lang/String;
       8: invokestatic  #12                 // Method javax/imageio/ImageIO.getImageWritersByMIMEType:(Ljava/lang/String;)Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifne          53
      21: new           #14                 // class java/lang/IllegalArgumentException
      24: dup
      25: new           #15                 // class java/lang/StringBuilder
      28: dup
      29: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      32: ldc           #17                 // String Content-Type [
      34: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: aload_1
      38: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      41: ldc           #20                 // String ] is not supported by the Java Image I/O API
      43: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: invokespecial #22                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      52: athrow
      53: aload_0
      54: aload_1
      55: putfield      #10                 // Field defaultContentType:Lorg/springframework/http/MediaType;
      58: return

  public org.springframework.http.MediaType getDefaultContentType();
    Code:
       0: aload_0
       1: getfield      #10                 // Field defaultContentType:Lorg/springframework/http/MediaType;
       4: areturn

  public void setCacheDir(java.io.File);
    Code:
       0: aload_1
       1: ldc           #23                 // String \'cacheDir\' must not be null
       3: invokestatic  #24                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: invokevirtual #25                 // Method java/io/File.isDirectory:()Z
      10: ldc           #26                 // String \'cacheDir\' is not a directory
      12: invokestatic  #27                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      15: aload_0
      16: aload_1
      17: putfield      #28                 // Field cacheDir:Ljava/io/File;
      20: return

  public boolean canRead(java.lang.Class<?>, org.springframework.http.MediaType);
    Code:
       0: ldc           #29                 // class java/awt/image/BufferedImage
       2: aload_1
       3: if_acmpne     18
       6: aload_0
       7: aload_2
       8: invokespecial #30                 // Method isReadable:(Lorg/springframework/http/MediaType;)Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  private boolean isReadable(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_1
       5: ireturn
       6: aload_1
       7: invokevirtual #11                 // Method org/springframework/http/MediaType.toString:()Ljava/lang/String;
      10: invokestatic  #31                 // Method javax/imageio/ImageIO.getImageReadersByMIMEType:(Ljava/lang/String;)Ljava/util/Iterator;
      13: astore_2
      14: aload_2
      15: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ireturn

  public boolean canWrite(java.lang.Class<?>, org.springframework.http.MediaType);
    Code:
       0: ldc           #29                 // class java/awt/image/BufferedImage
       2: aload_1
       3: if_acmpne     18
       6: aload_0
       7: aload_2
       8: invokespecial #32                 // Method isWritable:(Lorg/springframework/http/MediaType;)Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  private boolean isWritable(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: ifnull        14
       4: getstatic     #33                 // Field org/springframework/http/MediaType.ALL:Lorg/springframework/http/MediaType;
       7: aload_1
       8: invokevirtual #34                 // Method org/springframework/http/MediaType.equalsTypeAndSubtype:(Lorg/springframework/util/MimeType;)Z
      11: ifeq          16
      14: iconst_1
      15: ireturn
      16: aload_1
      17: invokevirtual #11                 // Method org/springframework/http/MediaType.toString:()Ljava/lang/String;
      20: invokestatic  #12                 // Method javax/imageio/ImageIO.getImageWritersByMIMEType:(Ljava/lang/String;)Ljava/util/Iterator;
      23: astore_2
      24: aload_2
      25: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      30: ireturn

  public java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes();
    Code:
       0: aload_0
       1: getfield      #4                  // Field readableMediaTypes:Ljava/util/List;
       4: invokestatic  #35                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
       7: areturn

  public java.awt.image.BufferedImage read(java.lang.Class<? extends java.awt.image.BufferedImage>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException;
    Code:
       0: aconst_null
       1: astore_3
       2: aconst_null
       3: astore        4
       5: aload_0
       6: aload_2
       7: invokeinterface #36,  1           // InterfaceMethod org/springframework/http/HttpInputMessage.getBody:()Ljava/io/InputStream;
      12: invokespecial #37                 // Method createImageInputStream:(Ljava/io/InputStream;)Ljavax/imageio/stream/ImageInputStream;
      15: astore_3
      16: aload_2
      17: invokeinterface #38,  1           // InterfaceMethod org/springframework/http/HttpInputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      22: invokevirtual #39                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
      25: astore        5
      27: aload         5
      29: ifnonnull     43
      32: new           #40                 // class org/springframework/http/converter/HttpMessageNotReadableException
      35: dup
      36: ldc           #41                 // String No Content-Type header
      38: aload_2
      39: invokespecial #42                 // Method org/springframework/http/converter/HttpMessageNotReadableException."<init>":(Ljava/lang/String;Lorg/springframework/http/HttpInputMessage;)V
      42: athrow
      43: aload         5
      45: invokevirtual #11                 // Method org/springframework/http/MediaType.toString:()Ljava/lang/String;
      48: invokestatic  #31                 // Method javax/imageio/ImageIO.getImageReadersByMIMEType:(Ljava/lang/String;)Ljava/util/Iterator;
      51: astore        6
      53: aload         6
      55: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      60: ifeq          133
      63: aload         6
      65: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      70: checkcast     #44                 // class javax/imageio/ImageReader
      73: astore        4
      75: aload         4
      77: invokevirtual #45                 // Method javax/imageio/ImageReader.getDefaultReadParam:()Ljavax/imageio/ImageReadParam;
      80: astore        7
      82: aload_0
      83: aload         7
      85: invokevirtual #46                 // Method process:(Ljavax/imageio/ImageReadParam;)V
      88: aload         4
      90: aload_3
      91: iconst_1
      92: invokevirtual #47                 // Method javax/imageio/ImageReader.setInput:(Ljava/lang/Object;Z)V
      95: aload         4
      97: iconst_0
      98: aload         7
     100: invokevirtual #48                 // Method javax/imageio/ImageReader.read:(ILjavax/imageio/ImageReadParam;)Ljava/awt/image/BufferedImage;
     103: astore        8
     105: aload         4
     107: ifnull        115
     110: aload         4
     112: invokevirtual #49                 // Method javax/imageio/ImageReader.dispose:()V
     115: aload_3
     116: ifnull        130
     119: aload_3
     120: invokeinterface #50,  1           // InterfaceMethod javax/imageio/stream/ImageInputStream.close:()V
     125: goto          130
     128: astore        9
     130: aload         8
     132: areturn
     133: new           #40                 // class org/springframework/http/converter/HttpMessageNotReadableException
     136: dup
     137: new           #15                 // class java/lang/StringBuilder
     140: dup
     141: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
     144: ldc           #52                 // String Could not find javax.imageio.ImageReader for Content-Type [
     146: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     149: aload         5
     151: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     154: ldc           #53                 // String ]
     156: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     159: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     162: aload_2
     163: invokespecial #42                 // Method org/springframework/http/converter/HttpMessageNotReadableException."<init>":(Ljava/lang/String;Lorg/springframework/http/HttpInputMessage;)V
     166: athrow
     167: astore        10
     169: aload         4
     171: ifnull        179
     174: aload         4
     176: invokevirtual #49                 // Method javax/imageio/ImageReader.dispose:()V
     179: aload_3
     180: ifnull        194
     183: aload_3
     184: invokeinterface #50,  1           // InterfaceMethod javax/imageio/stream/ImageInputStream.close:()V
     189: goto          194
     192: astore        11
     194: aload         10
     196: athrow
    Exception table:
       from    to  target type
         119   125   128   Class java/io/IOException
           5   105   167   any
         183   189   192   Class java/io/IOException
         133   169   167   any

  private javax.imageio.stream.ImageInputStream createImageInputStream(java.io.InputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #28                 // Field cacheDir:Ljava/io/File;
       4: ifnull        20
       7: new           #54                 // class javax/imageio/stream/FileCacheImageInputStream
      10: dup
      11: aload_1
      12: aload_0
      13: getfield      #28                 // Field cacheDir:Ljava/io/File;
      16: invokespecial #55                 // Method javax/imageio/stream/FileCacheImageInputStream."<init>":(Ljava/io/InputStream;Ljava/io/File;)V
      19: areturn
      20: new           #56                 // class javax/imageio/stream/MemoryCacheImageInputStream
      23: dup
      24: aload_1
      25: invokespecial #57                 // Method javax/imageio/stream/MemoryCacheImageInputStream."<init>":(Ljava/io/InputStream;)V
      28: areturn

  public void write(java.awt.image.BufferedImage, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException;
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #58                 // Method getContentType:(Lorg/springframework/http/MediaType;)Lorg/springframework/http/MediaType;
       5: astore        4
       7: aload_3
       8: invokeinterface #59,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      13: aload         4
      15: invokevirtual #60                 // Method org/springframework/http/HttpHeaders.setContentType:(Lorg/springframework/http/MediaType;)V
      18: aload_3
      19: instanceof    #61                 // class org/springframework/http/StreamingHttpOutputMessage
      22: ifeq          50
      25: aload_3
      26: checkcast     #61                 // class org/springframework/http/StreamingHttpOutputMessage
      29: astore        5
      31: aload         5
      33: aload_0
      34: aload_1
      35: aload         4
      37: invokedynamic #62,  0             // InvokeDynamic #0:writeTo:(Lorg/springframework/http/converter/BufferedImageHttpMessageConverter;Ljava/awt/image/BufferedImage;Lorg/springframework/http/MediaType;)Lorg/springframework/http/StreamingHttpOutputMessage$Body;
      42: invokeinterface #63,  2           // InterfaceMethod org/springframework/http/StreamingHttpOutputMessage.setBody:(Lorg/springframework/http/StreamingHttpOutputMessage$Body;)V
      47: goto          63
      50: aload_0
      51: aload_1
      52: aload         4
      54: aload_3
      55: invokeinterface #64,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getBody:()Ljava/io/OutputStream;
      60: invokespecial #65                 // Method writeInternal:(Ljava/awt/image/BufferedImage;Lorg/springframework/http/MediaType;Ljava/io/OutputStream;)V
      63: return

  private org.springframework.http.MediaType getContentType(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: ifnull        18
       4: aload_1
       5: invokevirtual #66                 // Method org/springframework/http/MediaType.isWildcardType:()Z
       8: ifne          18
      11: aload_1
      12: invokevirtual #67                 // Method org/springframework/http/MediaType.isWildcardSubtype:()Z
      15: ifeq          23
      18: aload_0
      19: invokevirtual #68                 // Method getDefaultContentType:()Lorg/springframework/http/MediaType;
      22: astore_1
      23: aload_1
      24: ldc           #69                 // String Could not select Content-Type. Please specify one through the \'defaultContentType\' property.
      26: invokestatic  #24                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      29: aload_1
      30: areturn

  private void writeInternal(java.awt.image.BufferedImage, org.springframework.http.MediaType, java.io.OutputStream) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException;
    Code:
       0: aconst_null
       1: astore        4
       3: aconst_null
       4: astore        5
       6: aload_2
       7: invokevirtual #11                 // Method org/springframework/http/MediaType.toString:()Ljava/lang/String;
      10: invokestatic  #12                 // Method javax/imageio/ImageIO.getImageWritersByMIMEType:(Ljava/lang/String;)Ljava/util/Iterator;
      13: astore        6
      15: aload         6
      17: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          85
      25: aload         6
      27: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #70                 // class javax/imageio/ImageWriter
      35: astore        5
      37: aload         5
      39: invokevirtual #71                 // Method javax/imageio/ImageWriter.getDefaultWriteParam:()Ljavax/imageio/ImageWriteParam;
      42: astore        7
      44: aload_0
      45: aload         7
      47: invokevirtual #72                 // Method process:(Ljavax/imageio/ImageWriteParam;)V
      50: aload_0
      51: aload_3
      52: invokespecial #73                 // Method createImageOutputStream:(Ljava/io/OutputStream;)Ljavax/imageio/stream/ImageOutputStream;
      55: astore        4
      57: aload         5
      59: aload         4
      61: invokevirtual #74                 // Method javax/imageio/ImageWriter.setOutput:(Ljava/lang/Object;)V
      64: aload         5
      66: aconst_null
      67: new           #75                 // class javax/imageio/IIOImage
      70: dup
      71: aload_1
      72: aconst_null
      73: aconst_null
      74: invokespecial #76                 // Method javax/imageio/IIOImage."<init>":(Ljava/awt/image/RenderedImage;Ljava/util/List;Ljavax/imageio/metadata/IIOMetadata;)V
      77: aload         7
      79: invokevirtual #77                 // Method javax/imageio/ImageWriter.write:(Ljavax/imageio/metadata/IIOMetadata;Ljavax/imageio/IIOImage;Ljavax/imageio/ImageWriteParam;)V
      82: goto          117
      85: new           #78                 // class org/springframework/http/converter/HttpMessageNotWritableException
      88: dup
      89: new           #15                 // class java/lang/StringBuilder
      92: dup
      93: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      96: ldc           #79                 // String Could not find javax.imageio.ImageWriter for Content-Type [
      98: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     101: aload_2
     102: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     105: ldc           #53                 // String ]
     107: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     110: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     113: invokespecial #80                 // Method org/springframework/http/converter/HttpMessageNotWritableException."<init>":(Ljava/lang/String;)V
     116: athrow
     117: aload         5
     119: ifnull        127
     122: aload         5
     124: invokevirtual #81                 // Method javax/imageio/ImageWriter.dispose:()V
     127: aload         4
     129: ifnull        179
     132: aload         4
     134: invokeinterface #82,  1           // InterfaceMethod javax/imageio/stream/ImageOutputStream.close:()V
     139: goto          179
     142: astore        6
     144: goto          179
     147: astore        8
     149: aload         5
     151: ifnull        159
     154: aload         5
     156: invokevirtual #81                 // Method javax/imageio/ImageWriter.dispose:()V
     159: aload         4
     161: ifnull        176
     164: aload         4
     166: invokeinterface #82,  1           // InterfaceMethod javax/imageio/stream/ImageOutputStream.close:()V
     171: goto          176
     174: astore        9
     176: aload         8
     178: athrow
     179: return
    Exception table:
       from    to  target type
         132   139   142   Class java/io/IOException
           6   117   147   any
         164   171   174   Class java/io/IOException
         147   149   147   any

  private javax.imageio.stream.ImageOutputStream createImageOutputStream(java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #28                 // Field cacheDir:Ljava/io/File;
       4: ifnull        20
       7: new           #83                 // class javax/imageio/stream/FileCacheImageOutputStream
      10: dup
      11: aload_1
      12: aload_0
      13: getfield      #28                 // Field cacheDir:Ljava/io/File;
      16: invokespecial #84                 // Method javax/imageio/stream/FileCacheImageOutputStream."<init>":(Ljava/io/OutputStream;Ljava/io/File;)V
      19: areturn
      20: new           #85                 // class javax/imageio/stream/MemoryCacheImageOutputStream
      23: dup
      24: aload_1
      25: invokespecial #86                 // Method javax/imageio/stream/MemoryCacheImageOutputStream."<init>":(Ljava/io/OutputStream;)V
      28: areturn

  protected void process(javax.imageio.ImageReadParam);
    Code:
       0: return

  protected void process(javax.imageio.ImageWriteParam);
    Code:
       0: return

  public void write(java.lang.Object, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #29                 // class java/awt/image/BufferedImage
       5: aload_2
       6: aload_3
       7: invokevirtual #87                 // Method write:(Ljava/awt/image/BufferedImage;Lorg/springframework/http/MediaType;Lorg/springframework/http/HttpOutputMessage;)V
      10: return

  public java.lang.Object read(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #88                 // Method read:(Ljava/lang/Class;Lorg/springframework/http/HttpInputMessage;)Ljava/awt/image/BufferedImage;
       6: areturn

  private void lambda$write$0(java.awt.image.BufferedImage, org.springframework.http.MediaType, java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #65                 // Method writeInternal:(Ljava/awt/image/BufferedImage;Lorg/springframework/http/MediaType;Ljava/io/OutputStream;)V
       7: return
}
