Compiled from "ReactorClientHttpResponse.java"
class org.springframework.http.client.reactive.ReactorClientHttpResponse implements org.springframework.http.client.reactive.ClientHttpResponse {
  private static final org.apache.commons.logging.Log logger;

  private final reactor.netty.http.client.HttpClientResponse response;

  private final reactor.netty.NettyInbound inbound;

  private final org.springframework.core.io.buffer.NettyDataBufferFactory bufferFactory;

  private final java.util.concurrent.atomic.AtomicInteger state;

  private final java.lang.String logPrefix;

  public org.springframework.http.client.reactive.ReactorClientHttpResponse(reactor.netty.http.client.HttpClientResponse, reactor.netty.Connection);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: iconst_0
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      13: putfield      #4                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
      16: aload_0
      17: aload_1
      18: putfield      #5                  // Field response:Lreactor/netty/http/client/HttpClientResponse;
      21: aload_0
      22: aload_2
      23: invokeinterface #6,  1            // InterfaceMethod reactor/netty/Connection.inbound:()Lreactor/netty/NettyInbound;
      28: putfield      #7                  // Field inbound:Lreactor/netty/NettyInbound;
      31: aload_0
      32: new           #8                  // class org/springframework/core/io/buffer/NettyDataBufferFactory
      35: dup
      36: aload_2
      37: invokeinterface #9,  1            // InterfaceMethod reactor/netty/Connection.outbound:()Lreactor/netty/NettyOutbound;
      42: invokeinterface #10,  1           // InterfaceMethod reactor/netty/NettyOutbound.alloc:()Lio/netty/buffer/ByteBufAllocator;
      47: invokespecial #11                 // Method org/springframework/core/io/buffer/NettyDataBufferFactory."<init>":(Lio/netty/buffer/ByteBufAllocator;)V
      50: putfield      #12                 // Field bufferFactory:Lorg/springframework/core/io/buffer/NettyDataBufferFactory;
      53: aload_0
      54: getstatic     #13                 // Field logger:Lorg/apache/commons/logging/Log;
      57: invokeinterface #14,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      62: ifeq          107
      65: new           #15                 // class java/lang/StringBuilder
      68: dup
      69: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      72: ldc           #17                 // String [
      74: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: aload_2
      78: invokeinterface #19,  1           // InterfaceMethod reactor/netty/Connection.channel:()Lio/netty/channel/Channel;
      83: invokeinterface #20,  1           // InterfaceMethod io/netty/channel/Channel.id:()Lio/netty/channel/ChannelId;
      88: invokeinterface #21,  1           // InterfaceMethod io/netty/channel/ChannelId.asShortText:()Ljava/lang/String;
      93: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      96: ldc           #22                 // String ]
      98: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     101: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     104: goto          109
     107: ldc           #24                 // String
     109: putfield      #25                 // Field logPrefix:Ljava/lang/String;
     112: return

  public org.springframework.http.client.reactive.ReactorClientHttpResponse(reactor.netty.http.client.HttpClientResponse, reactor.netty.NettyInbound, io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: iconst_0
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      13: putfield      #4                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
      16: aload_0
      17: aload_1
      18: putfield      #5                  // Field response:Lreactor/netty/http/client/HttpClientResponse;
      21: aload_0
      22: aload_2
      23: putfield      #7                  // Field inbound:Lreactor/netty/NettyInbound;
      26: aload_0
      27: new           #8                  // class org/springframework/core/io/buffer/NettyDataBufferFactory
      30: dup
      31: aload_3
      32: invokespecial #11                 // Method org/springframework/core/io/buffer/NettyDataBufferFactory."<init>":(Lio/netty/buffer/ByteBufAllocator;)V
      35: putfield      #12                 // Field bufferFactory:Lorg/springframework/core/io/buffer/NettyDataBufferFactory;
      38: aload_0
      39: ldc           #24                 // String
      41: putfield      #25                 // Field logPrefix:Ljava/lang/String;
      44: return

  public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody();
    Code:
       0: aload_0
       1: getfield      #7                  // Field inbound:Lreactor/netty/NettyInbound;
       4: invokeinterface #26,  1           // InterfaceMethod reactor/netty/NettyInbound.receive:()Lreactor/netty/ByteBufFlux;
       9: aload_0
      10: invokedynamic #27,  0             // InvokeDynamic #0:accept:(Lorg/springframework/http/client/reactive/ReactorClientHttpResponse;)Ljava/util/function/Consumer;
      15: invokevirtual #28                 // Method reactor/netty/ByteBufFlux.doOnSubscribe:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      18: aload_0
      19: invokedynamic #29,  0             // InvokeDynamic #1:apply:(Lorg/springframework/http/client/reactive/ReactorClientHttpResponse;)Ljava/util/function/Function;
      24: invokevirtual #30                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      27: areturn

  public org.springframework.http.HttpHeaders getHeaders();
    Code:
       0: new           #31                 // class org/springframework/http/HttpHeaders
       3: dup
       4: invokespecial #32                 // Method org/springframework/http/HttpHeaders."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #5                  // Field response:Lreactor/netty/http/client/HttpClientResponse;
      12: invokeinterface #33,  1           // InterfaceMethod reactor/netty/http/client/HttpClientResponse.responseHeaders:()Lio/netty/handler/codec/http/HttpHeaders;
      17: invokevirtual #34                 // Method io/netty/handler/codec/http/HttpHeaders.entries:()Ljava/util/List;
      20: aload_1
      21: invokedynamic #35,  0             // InvokeDynamic #2:accept:(Lorg/springframework/http/HttpHeaders;)Ljava/util/function/Consumer;
      26: invokeinterface #36,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      31: aload_1
      32: areturn

  public org.springframework.http.HttpStatus getStatusCode();
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method getRawStatusCode:()I
       4: invokestatic  #38                 // Method org/springframework/http/HttpStatus.valueOf:(I)Lorg/springframework/http/HttpStatus;
       7: areturn

  public int getRawStatusCode();
    Code:
       0: aload_0
       1: getfield      #5                  // Field response:Lreactor/netty/http/client/HttpClientResponse;
       4: invokeinterface #39,  1           // InterfaceMethod reactor/netty/http/client/HttpClientResponse.status:()Lio/netty/handler/codec/http/HttpResponseStatus;
       9: invokevirtual #40                 // Method io/netty/handler/codec/http/HttpResponseStatus.code:()I
      12: ireturn

  public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> getCookies();
    Code:
       0: new           #41                 // class org/springframework/util/LinkedMultiValueMap
       3: dup
       4: invokespecial #42                 // Method org/springframework/util/LinkedMultiValueMap."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #5                  // Field response:Lreactor/netty/http/client/HttpClientResponse;
      12: invokeinterface #43,  1           // InterfaceMethod reactor/netty/http/client/HttpClientResponse.cookies:()Ljava/util/Map;
      17: invokeinterface #44,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      22: invokeinterface #45,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      27: invokedynamic #46,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      32: invokeinterface #47,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      37: aload_1
      38: invokedynamic #48,  0             // InvokeDynamic #4:accept:(Lorg/springframework/util/MultiValueMap;)Ljava/util/function/Consumer;
      43: invokeinterface #49,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      48: aload_1
      49: invokestatic  #50                 // Method org/springframework/util/CollectionUtils.unmodifiableMultiValueMap:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/util/MultiValueMap;
      52: areturn

  void releaseAfterCancel(org.springframework.http.HttpMethod);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #51                 // Method mayHaveBody:(Lorg/springframework/http/HttpMethod;)Z
       5: ifeq          92
       8: aload_0
       9: getfield      #4                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
      12: iconst_0
      13: iconst_2
      14: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      17: ifeq          92
      20: getstatic     #13                 // Field logger:Lorg/apache/commons/logging/Log;
      23: invokeinterface #14,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      28: ifeq          61
      31: getstatic     #13                 // Field logger:Lorg/apache/commons/logging/Log;
      34: new           #15                 // class java/lang/StringBuilder
      37: dup
      38: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      41: aload_0
      42: getfield      #25                 // Field logPrefix:Ljava/lang/String;
      45: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: ldc           #53                 // String Releasing body, not yet subscribed.
      50: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      56: invokeinterface #54,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      61: aload_0
      62: getfield      #7                  // Field inbound:Lreactor/netty/NettyInbound;
      65: invokeinterface #26,  1           // InterfaceMethod reactor/netty/NettyInbound.receive:()Lreactor/netty/ByteBufFlux;
      70: invokedynamic #55,  0             // InvokeDynamic #5:accept:()Ljava/util/function/Consumer;
      75: invokevirtual #56                 // Method reactor/netty/ByteBufFlux.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      78: invokedynamic #57,  0             // InvokeDynamic #6:accept:()Ljava/util/function/Consumer;
      83: invokedynamic #58,  0             // InvokeDynamic #7:accept:()Ljava/util/function/Consumer;
      88: invokevirtual #59                 // Method reactor/core/publisher/Flux.subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;)Lreactor/core/Disposable;
      91: pop
      92: return

  private boolean mayHaveBody(org.springframework.http.HttpMethod);
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method getRawStatusCode:()I
       4: istore_2
       5: iload_2
       6: bipush        100
       8: if_icmplt     18
      11: iload_2
      12: sipush        200
      15: if_icmplt     58
      18: iload_2
      19: sipush        204
      22: if_icmpeq     58
      25: iload_2
      26: sipush        205
      29: if_icmpeq     58
      32: aload_1
      33: getstatic     #60                 // Field org/springframework/http/HttpMethod.HEAD:Lorg/springframework/http/HttpMethod;
      36: invokevirtual #61                 // Method org/springframework/http/HttpMethod.equals:(Ljava/lang/Object;)Z
      39: ifne          58
      42: aload_0
      43: invokevirtual #62                 // Method getHeaders:()Lorg/springframework/http/HttpHeaders;
      46: invokevirtual #63                 // Method org/springframework/http/HttpHeaders.getContentLength:()J
      49: lconst_0
      50: lcmp
      51: ifeq          58
      54: iconst_1
      55: goto          59
      58: iconst_0
      59: ireturn

  public java.lang.String toString();
    Code:
       0: new           #15                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #64                 // String ReactorClientHttpResponse{request=[
       9: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #5                  // Field response:Lreactor/netty/http/client/HttpClientResponse;
      16: invokeinterface #65,  1           // InterfaceMethod reactor/netty/http/client/HttpClientResponse.method:()Lio/netty/handler/codec/http/HttpMethod;
      21: invokevirtual #66                 // Method io/netty/handler/codec/http/HttpMethod.name:()Ljava/lang/String;
      24: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: ldc           #67                 // String
      29: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: aload_0
      33: getfield      #5                  // Field response:Lreactor/netty/http/client/HttpClientResponse;
      36: invokeinterface #68,  1           // InterfaceMethod reactor/netty/http/client/HttpClientResponse.uri:()Ljava/lang/String;
      41: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: ldc           #69                 // String ],status=
      46: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: aload_0
      50: invokevirtual #37                 // Method getRawStatusCode:()I
      53: invokevirtual #70                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      56: bipush        125
      58: invokevirtual #71                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      61: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      64: areturn

  private static void lambda$releaseAfterCancel$6(java.lang.Throwable);
    Code:
       0: return

  private static void lambda$releaseAfterCancel$5(io.netty.buffer.ByteBuf);
    Code:
       0: return

  private static void lambda$releaseAfterCancel$4(io.netty.buffer.ByteBuf);
    Code:
       0: return

  private static void lambda$getCookies$3(org.springframework.util.MultiValueMap, io.netty.handler.codec.http.cookie.Cookie);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #72,  1           // InterfaceMethod io/netty/handler/codec/http/cookie/Cookie.name:()Ljava/lang/String;
       7: aload_1
       8: invokeinterface #72,  1           // InterfaceMethod io/netty/handler/codec/http/cookie/Cookie.name:()Ljava/lang/String;
      13: aload_1
      14: invokeinterface #73,  1           // InterfaceMethod io/netty/handler/codec/http/cookie/Cookie.value:()Ljava/lang/String;
      19: invokestatic  #74                 // Method org/springframework/http/ResponseCookie.fromClientResponse:(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/http/ResponseCookie$ResponseCookieBuilder;
      22: aload_1
      23: invokeinterface #75,  1           // InterfaceMethod io/netty/handler/codec/http/cookie/Cookie.domain:()Ljava/lang/String;
      28: invokeinterface #76,  2           // InterfaceMethod org/springframework/http/ResponseCookie$ResponseCookieBuilder.domain:(Ljava/lang/String;)Lorg/springframework/http/ResponseCookie$ResponseCookieBuilder;
      33: aload_1
      34: invokeinterface #77,  1           // InterfaceMethod io/netty/handler/codec/http/cookie/Cookie.path:()Ljava/lang/String;
      39: invokeinterface #78,  2           // InterfaceMethod org/springframework/http/ResponseCookie$ResponseCookieBuilder.path:(Ljava/lang/String;)Lorg/springframework/http/ResponseCookie$ResponseCookieBuilder;
      44: aload_1
      45: invokeinterface #79,  1           // InterfaceMethod io/netty/handler/codec/http/cookie/Cookie.maxAge:()J
      50: invokeinterface #80,  3           // InterfaceMethod org/springframework/http/ResponseCookie$ResponseCookieBuilder.maxAge:(J)Lorg/springframework/http/ResponseCookie$ResponseCookieBuilder;
      55: aload_1
      56: invokeinterface #81,  1           // InterfaceMethod io/netty/handler/codec/http/cookie/Cookie.isSecure:()Z
      61: invokeinterface #82,  2           // InterfaceMethod org/springframework/http/ResponseCookie$ResponseCookieBuilder.secure:(Z)Lorg/springframework/http/ResponseCookie$ResponseCookieBuilder;
      66: aload_1
      67: invokeinterface #83,  1           // InterfaceMethod io/netty/handler/codec/http/cookie/Cookie.isHttpOnly:()Z
      72: invokeinterface #84,  2           // InterfaceMethod org/springframework/http/ResponseCookie$ResponseCookieBuilder.httpOnly:(Z)Lorg/springframework/http/ResponseCookie$ResponseCookieBuilder;
      77: invokeinterface #85,  1           // InterfaceMethod org/springframework/http/ResponseCookie$ResponseCookieBuilder.build:()Lorg/springframework/http/ResponseCookie;
      82: invokeinterface #86,  3           // InterfaceMethod org/springframework/util/MultiValueMap.add:(Ljava/lang/Object;Ljava/lang/Object;)V
      87: return

  private static void lambda$getHeaders$2(org.springframework.http.HttpHeaders, java.util.Map$Entry);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #87,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       7: checkcast     #88                 // class java/lang/String
      10: aload_1
      11: invokeinterface #89,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      16: checkcast     #88                 // class java/lang/String
      19: invokevirtual #90                 // Method org/springframework/http/HttpHeaders.add:(Ljava/lang/String;Ljava/lang/String;)V
      22: return

  private org.springframework.core.io.buffer.DataBuffer lambda$getBody$1(io.netty.buffer.ByteBuf);
    Code:
       0: aload_1
       1: invokevirtual #91                 // Method io/netty/buffer/ByteBuf.retain:()Lio/netty/buffer/ByteBuf;
       4: pop
       5: aload_0
       6: getfield      #12                 // Field bufferFactory:Lorg/springframework/core/io/buffer/NettyDataBufferFactory;
       9: aload_1
      10: invokevirtual #92                 // Method org/springframework/core/io/buffer/NettyDataBufferFactory.wrap:(Lio/netty/buffer/ByteBuf;)Lorg/springframework/core/io/buffer/NettyDataBuffer;
      13: areturn

  private void lambda$getBody$0(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #4                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
       9: ifeq          13
      12: return
      13: aload_0
      14: getfield      #4                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
      17: invokevirtual #93                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      20: iconst_2
      21: if_icmpne     34
      24: new           #94                 // class java/lang/IllegalStateException
      27: dup
      28: ldc           #95                 // String The client response body has been released already due to cancellation.
      30: invokespecial #96                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: return

  static {};
    Code:
       0: ldc           #97                 // class org/springframework/http/client/reactive/ReactorClientHttpResponse
       2: invokestatic  #98                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #13                 // Field logger:Lorg/apache/commons/logging/Log;
       8: return
}
