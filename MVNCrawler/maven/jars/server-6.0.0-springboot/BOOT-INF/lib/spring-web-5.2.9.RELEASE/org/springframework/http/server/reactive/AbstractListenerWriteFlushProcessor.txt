Compiled from "AbstractListenerWriteFlushProcessor.java"
public abstract class org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> implements org.reactivestreams.Processor<org.reactivestreams.Publisher<? extends T>, java.lang.Void> {
  protected static final org.apache.commons.logging.Log rsWriteFlushLogger;

  private final java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State> state;

  private org.reactivestreams.Subscription subscription;

  private volatile boolean subscriberCompleted;

  private final org.springframework.http.server.reactive.WriteResultPublisher resultPublisher;

  private final java.lang.String logPrefix;

  public org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor();
    Code:
       0: aload_0
       1: ldc           #7                  // String
       3: invokespecial #8                  // Method "<init>":(Ljava/lang/String;)V
       6: return

  public org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #10                 // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: getstatic     #11                 // Field org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State.UNSUBSCRIBED:Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State;
      12: invokespecial #12                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      15: putfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      18: aload_0
      19: aload_1
      20: putfield      #13                 // Field logPrefix:Ljava/lang/String;
      23: aload_0
      24: new           #14                 // class org/springframework/http/server/reactive/WriteResultPublisher
      27: dup
      28: aload_1
      29: invokespecial #15                 // Method org/springframework/http/server/reactive/WriteResultPublisher."<init>":(Ljava/lang/String;)V
      32: putfield      #4                  // Field resultPublisher:Lorg/springframework/http/server/reactive/WriteResultPublisher;
      35: return

  public java.lang.String getLogPrefix();
    Code:
       0: aload_0
       1: getfield      #13                 // Field logPrefix:Ljava/lang/String;
       4: areturn

  public final void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #17                 // class org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State
      10: aload_0
      11: aload_1
      12: invokevirtual #18                 // Method org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State.onSubscribe:(Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor;Lorg/reactivestreams/Subscription;)V
      15: return

  public final void onNext(org.reactivestreams.Publisher<? extends T>);
    Code:
       0: getstatic     #19                 // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
       3: invokeinterface #20,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       8: ifeq          41
      11: getstatic     #19                 // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
      14: new           #21                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
      21: aload_0
      22: invokevirtual #23                 // Method getLogPrefix:()Ljava/lang/String;
      25: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #25                 // String Received onNext publisher
      30: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokeinterface #27,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      41: aload_0
      42: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      45: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      48: checkcast     #17                 // class org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State
      51: aload_0
      52: aload_1
      53: invokevirtual #28                 // Method org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State.onNext:(Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor;Lorg/reactivestreams/Publisher;)V
      56: return

  public final void onError(java.lang.Throwable);
    Code:
       0: getstatic     #19                 // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
       3: invokeinterface #20,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       8: ifeq          45
      11: getstatic     #19                 // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
      14: new           #21                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
      21: aload_0
      22: invokevirtual #23                 // Method getLogPrefix:()Ljava/lang/String;
      25: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #29                 // String Received onError:
      30: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: aload_1
      34: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      37: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      40: invokeinterface #27,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      45: aload_0
      46: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      49: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      52: checkcast     #17                 // class org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State
      55: aload_0
      56: aload_1
      57: invokevirtual #31                 // Method org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State.onError:(Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor;Ljava/lang/Throwable;)V
      60: return

  public final void onComplete();
    Code:
       0: getstatic     #19                 // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
       3: invokeinterface #20,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       8: ifeq          41
      11: getstatic     #19                 // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
      14: new           #21                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
      21: aload_0
      22: invokevirtual #23                 // Method getLogPrefix:()Ljava/lang/String;
      25: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #32                 // String Received onComplete
      30: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokeinterface #27,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      41: aload_0
      42: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      45: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      48: checkcast     #17                 // class org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State
      51: aload_0
      52: invokevirtual #33                 // Method org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State.onComplete:(Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor;)V
      55: return

  protected final void onFlushPossible();
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #17                 // class org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State
      10: aload_0
      11: invokevirtual #34                 // Method org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State.onFlushPossible:(Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor;)V
      14: return

  protected void cancel();
    Code:
       0: getstatic     #19                 // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
       3: invokeinterface #20,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       8: ifeq          41
      11: getstatic     #19                 // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
      14: new           #21                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
      21: aload_0
      22: invokevirtual #23                 // Method getLogPrefix:()Ljava/lang/String;
      25: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #35                 // String Received request to cancel
      30: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokeinterface #27,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      41: aload_0
      42: getfield      #5                  // Field subscription:Lorg/reactivestreams/Subscription;
      45: ifnull        57
      48: aload_0
      49: getfield      #5                  // Field subscription:Lorg/reactivestreams/Subscription;
      52: invokeinterface #36,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      57: return

  public final void subscribe(org.reactivestreams.Subscriber<? super java.lang.Void>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field resultPublisher:Lorg/springframework/http/server/reactive/WriteResultPublisher;
       4: aload_1
       5: invokevirtual #37                 // Method org/springframework/http/server/reactive/WriteResultPublisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
       8: return

  protected abstract org.reactivestreams.Processor<? super T, java.lang.Void> createWriteProcessor();

  protected abstract boolean isWritePossible();

  protected abstract void flush() throws java.io.IOException;

  protected abstract boolean isFlushPending();

  protected void flushingFailed(java.lang.Throwable);
    Code:
       0: return

  private boolean changeState(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State, org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State);
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: aload_2
       6: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
       9: istore_3
      10: iload_3
      11: ifeq          63
      14: getstatic     #19                 // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
      17: invokeinterface #20,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      22: ifeq          63
      25: getstatic     #19                 // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
      28: new           #21                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
      35: aload_0
      36: invokevirtual #23                 // Method getLogPrefix:()Ljava/lang/String;
      39: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: aload_1
      43: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      46: ldc           #39                 // String  ->
      48: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: aload_2
      52: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      55: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      58: invokeinterface #27,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      63: iload_3
      64: ireturn

  private void flushIfPossible();
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method isWritePossible:()Z
       4: istore_1
       5: getstatic     #19                 // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
       8: invokeinterface #20,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      13: ifeq          55
      16: getstatic     #19                 // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
      19: new           #21                 // class java/lang/StringBuilder
      22: dup
      23: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
      26: aload_0
      27: invokevirtual #23                 // Method getLogPrefix:()Ljava/lang/String;
      30: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: ldc           #41                 // String isWritePossible[
      35: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: iload_1
      39: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      42: ldc           #43                 // String ]
      44: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: invokeinterface #27,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      55: iload_1
      56: ifeq          63
      59: aload_0
      60: invokevirtual #44                 // Method onFlushPossible:()V
      63: return

  public void onNext(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #45                 // class org/reactivestreams/Publisher
       5: invokevirtual #46                 // Method onNext:(Lorg/reactivestreams/Publisher;)V
       8: return

  static boolean access$100(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor, org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State, org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #6                  // Method changeState:(Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State;Lorg/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor$State;)Z
       6: ireturn

  static org.reactivestreams.Subscription access$202(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor, org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #5                  // Field subscription:Lorg/reactivestreams/Subscription;
       6: areturn

  static org.springframework.http.server.reactive.WriteResultPublisher access$300(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor);
    Code:
       0: aload_0
       1: getfield      #4                  // Field resultPublisher:Lorg/springframework/http/server/reactive/WriteResultPublisher;
       4: areturn

  static java.util.concurrent.atomic.AtomicReference access$400(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor);
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: areturn

  static boolean access$500(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor);
    Code:
       0: aload_0
       1: getfield      #2                  // Field subscriberCompleted:Z
       4: ireturn

  static org.reactivestreams.Subscription access$200(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor);
    Code:
       0: aload_0
       1: getfield      #5                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: areturn

  static boolean access$502(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #2                  // Field subscriberCompleted:Z
       6: ireturn

  static void access$600(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method flushIfPossible:()V
       4: return

  static {};
    Code:
       0: ldc           #47                 // class org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor
       2: invokestatic  #48                 // Method org/springframework/core/log/LogDelegateFactory.getHiddenLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #19                 // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
       8: return
}
