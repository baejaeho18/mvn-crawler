Compiled from "JettyClientHttpConnector.java"
public class org.springframework.http.client.reactive.JettyClientHttpConnector implements org.springframework.http.client.reactive.ClientHttpConnector {
  private final org.eclipse.jetty.client.HttpClient httpClient;

  private org.springframework.core.io.buffer.DataBufferFactory bufferFactory;

  public org.springframework.http.client.reactive.JettyClientHttpConnector();
    Code:
       0: aload_0
       1: new           #1                  // class org/eclipse/jetty/client/HttpClient
       4: dup
       5: invokespecial #2                  // Method org/eclipse/jetty/client/HttpClient."<init>":()V
       8: invokespecial #3                  // Method "<init>":(Lorg/eclipse/jetty/client/HttpClient;)V
      11: return

  public org.springframework.http.client.reactive.JettyClientHttpConnector(org.eclipse.jetty.client.HttpClient);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #4                  // Method "<init>":(Lorg/eclipse/jetty/client/HttpClient;Lorg/springframework/http/client/reactive/JettyResourceFactory;)V
       6: return

  public org.springframework.http.client.reactive.JettyClientHttpConnector(org.eclipse.jetty.client.HttpClient, org.springframework.http.client.reactive.JettyResourceFactory);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #6                  // class org/springframework/core/io/buffer/DefaultDataBufferFactory
       8: dup
       9: invokespecial #7                  // Method org/springframework/core/io/buffer/DefaultDataBufferFactory."<init>":()V
      12: putfield      #8                  // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
      15: aload_1
      16: ldc           #9                  // String HttpClient is required
      18: invokestatic  #10                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      21: aload_2
      22: ifnull        49
      25: aload_1
      26: aload_2
      27: invokevirtual #11                 // Method org/springframework/http/client/reactive/JettyResourceFactory.getExecutor:()Ljava/util/concurrent/Executor;
      30: invokevirtual #12                 // Method org/eclipse/jetty/client/HttpClient.setExecutor:(Ljava/util/concurrent/Executor;)V
      33: aload_1
      34: aload_2
      35: invokevirtual #13                 // Method org/springframework/http/client/reactive/JettyResourceFactory.getByteBufferPool:()Lorg/eclipse/jetty/io/ByteBufferPool;
      38: invokevirtual #14                 // Method org/eclipse/jetty/client/HttpClient.setByteBufferPool:(Lorg/eclipse/jetty/io/ByteBufferPool;)V
      41: aload_1
      42: aload_2
      43: invokevirtual #15                 // Method org/springframework/http/client/reactive/JettyResourceFactory.getScheduler:()Lorg/eclipse/jetty/util/thread/Scheduler;
      46: invokevirtual #16                 // Method org/eclipse/jetty/client/HttpClient.setScheduler:(Lorg/eclipse/jetty/util/thread/Scheduler;)V
      49: aload_0
      50: aload_1
      51: putfield      #17                 // Field httpClient:Lorg/eclipse/jetty/client/HttpClient;
      54: return

  public org.springframework.http.client.reactive.JettyClientHttpConnector(org.springframework.http.client.reactive.JettyResourceFactory, java.util.function.Consumer<org.eclipse.jetty.client.HttpClient>);
    Code:
       0: aload_0
       1: new           #1                  // class org/eclipse/jetty/client/HttpClient
       4: dup
       5: invokespecial #2                  // Method org/eclipse/jetty/client/HttpClient."<init>":()V
       8: aload_1
       9: invokespecial #4                  // Method "<init>":(Lorg/eclipse/jetty/client/HttpClient;Lorg/springframework/http/client/reactive/JettyResourceFactory;)V
      12: aload_2
      13: ifnull        26
      16: aload_2
      17: aload_0
      18: getfield      #17                 // Field httpClient:Lorg/eclipse/jetty/client/HttpClient;
      21: invokeinterface #18,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      26: return

  public void setBufferFactory(org.springframework.core.io.buffer.DataBufferFactory);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
       5: return

  public reactor.core.publisher.Mono<org.springframework.http.client.reactive.ClientHttpResponse> connect(org.springframework.http.HttpMethod, java.net.URI, java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest, reactor.core.publisher.Mono<java.lang.Void>>);
    Code:
       0: aload_2
       1: invokevirtual #19                 // Method java/net/URI.isAbsolute:()Z
       4: ifne          37
       7: new           #20                 // class java/lang/IllegalArgumentException
      10: dup
      11: new           #21                 // class java/lang/StringBuilder
      14: dup
      15: invokespecial #22                 // Method java/lang/StringBuilder."<init>":()V
      18: ldc           #23                 // String URI is not absolute:
      20: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload_2
      24: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      27: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      30: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      33: invokestatic  #28                 // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      36: areturn
      37: aload_0
      38: getfield      #17                 // Field httpClient:Lorg/eclipse/jetty/client/HttpClient;
      41: invokevirtual #29                 // Method org/eclipse/jetty/client/HttpClient.isStarted:()Z
      44: ifne          65
      47: aload_0
      48: getfield      #17                 // Field httpClient:Lorg/eclipse/jetty/client/HttpClient;
      51: invokevirtual #30                 // Method org/eclipse/jetty/client/HttpClient.start:()V
      54: goto          65
      57: astore        4
      59: aload         4
      61: invokestatic  #28                 // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      64: areturn
      65: new           #32                 // class org/springframework/http/client/reactive/JettyClientHttpRequest
      68: dup
      69: aload_0
      70: getfield      #17                 // Field httpClient:Lorg/eclipse/jetty/client/HttpClient;
      73: aload_2
      74: invokevirtual #33                 // Method org/eclipse/jetty/client/HttpClient.newRequest:(Ljava/net/URI;)Lorg/eclipse/jetty/client/api/Request;
      77: aload_1
      78: invokevirtual #34                 // Method org/springframework/http/HttpMethod.toString:()Ljava/lang/String;
      81: invokeinterface #35,  2           // InterfaceMethod org/eclipse/jetty/client/api/Request.method:(Ljava/lang/String;)Lorg/eclipse/jetty/client/api/Request;
      86: aload_0
      87: getfield      #8                  // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
      90: invokespecial #36                 // Method org/springframework/http/client/reactive/JettyClientHttpRequest."<init>":(Lorg/eclipse/jetty/client/api/Request;Lorg/springframework/core/io/buffer/DataBufferFactory;)V
      93: astore        4
      95: aload_3
      96: aload         4
      98: invokeinterface #37,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     103: checkcast     #38                 // class reactor/core/publisher/Mono
     106: aload         4
     108: invokevirtual #39                 // Method org/springframework/http/client/reactive/JettyClientHttpRequest.getReactiveRequest:()Lorg/eclipse/jetty/reactive/client/ReactiveRequest;
     111: aload_0
     112: invokedynamic #40,  0             // InvokeDynamic #0:apply:(Lorg/springframework/http/client/reactive/JettyClientHttpConnector;)Ljava/util/function/BiFunction;
     117: invokevirtual #41                 // Method org/eclipse/jetty/reactive/client/ReactiveRequest.response:(Ljava/util/function/BiFunction;)Lorg/reactivestreams/Publisher;
     120: invokestatic  #42                 // Method reactor/core/publisher/Mono.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
     123: invokevirtual #43                 // Method reactor/core/publisher/Mono.then:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
     126: areturn
    Exception table:
       from    to  target type
          47    54    57   Class java/lang/Exception

  private org.springframework.core.io.buffer.DataBuffer toDataBuffer(org.eclipse.jetty.reactive.client.ContentChunk);
    Code:
       0: aload_0
       1: getfield      #8                  // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
       4: aload_1
       5: getfield      #44                 // Field org/eclipse/jetty/reactive/client/ContentChunk.buffer:Ljava/nio/ByteBuffer;
       8: invokevirtual #45                 // Method java/nio/ByteBuffer.capacity:()I
      11: invokeinterface #46,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.allocateBuffer:(I)Lorg/springframework/core/io/buffer/DataBuffer;
      16: astore_2
      17: aload_2
      18: iconst_1
      19: anewarray     #47                 // class java/nio/ByteBuffer
      22: dup
      23: iconst_0
      24: aload_1
      25: getfield      #44                 // Field org/eclipse/jetty/reactive/client/ContentChunk.buffer:Ljava/nio/ByteBuffer;
      28: aastore
      29: invokeinterface #48,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.write:([Ljava/nio/ByteBuffer;)Lorg/springframework/core/io/buffer/DataBuffer;
      34: pop
      35: aload_1
      36: getfield      #49                 // Field org/eclipse/jetty/reactive/client/ContentChunk.callback:Lorg/eclipse/jetty/util/Callback;
      39: invokeinterface #50,  1           // InterfaceMethod org/eclipse/jetty/util/Callback.succeeded:()V
      44: aload_2
      45: areturn

  private org.reactivestreams.Publisher lambda$connect$0(org.eclipse.jetty.reactive.client.ReactiveResponse, org.reactivestreams.Publisher);
    Code:
       0: aload_2
       1: invokestatic  #51                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       4: aload_0
       5: invokedynamic #52,  0             // InvokeDynamic #1:apply:(Lorg/springframework/http/client/reactive/JettyClientHttpConnector;)Ljava/util/function/Function;
      10: invokevirtual #53                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      13: astore_3
      14: new           #54                 // class org/springframework/http/client/reactive/JettyClientHttpResponse
      17: dup
      18: aload_1
      19: aload_3
      20: invokespecial #55                 // Method org/springframework/http/client/reactive/JettyClientHttpResponse."<init>":(Lorg/eclipse/jetty/reactive/client/ReactiveResponse;Lorg/reactivestreams/Publisher;)V
      23: invokestatic  #56                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      26: areturn
}
