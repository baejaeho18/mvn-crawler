Compiled from "PathExtensionContentNegotiationStrategy.java"
public class org.springframework.web.accept.PathExtensionContentNegotiationStrategy extends org.springframework.web.accept.AbstractMappingContentNegotiationStrategy {
  private org.springframework.web.util.UrlPathHelper urlPathHelper;

  public org.springframework.web.accept.PathExtensionContentNegotiationStrategy();
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #1                  // Method "<init>":(Ljava/util/Map;)V
       5: return

  public org.springframework.web.accept.PathExtensionContentNegotiationStrategy(java.util.Map<java.lang.String, org.springframework.http.MediaType>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method org/springframework/web/accept/AbstractMappingContentNegotiationStrategy."<init>":(Ljava/util/Map;)V
       5: aload_0
       6: new           #3                  // class org/springframework/web/util/UrlPathHelper
       9: dup
      10: invokespecial #4                  // Method org/springframework/web/util/UrlPathHelper."<init>":()V
      13: putfield      #5                  // Field urlPathHelper:Lorg/springframework/web/util/UrlPathHelper;
      16: aload_0
      17: iconst_0
      18: invokevirtual #6                  // Method setUseRegisteredExtensionsOnly:(Z)V
      21: aload_0
      22: iconst_1
      23: invokevirtual #7                  // Method setIgnoreUnknownExtensions:(Z)V
      26: aload_0
      27: getfield      #5                  // Field urlPathHelper:Lorg/springframework/web/util/UrlPathHelper;
      30: iconst_0
      31: invokevirtual #8                  // Method org/springframework/web/util/UrlPathHelper.setUrlDecode:(Z)V
      34: return

  public void setUrlPathHelper(org.springframework.web.util.UrlPathHelper);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field urlPathHelper:Lorg/springframework/web/util/UrlPathHelper;
       5: return

  public void setUseJaf(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: ifne          9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: invokevirtual #6                  // Method setUseRegisteredExtensionsOnly:(Z)V
      13: return

  protected java.lang.String getMediaTypeKey(org.springframework.web.context.request.NativeWebRequest);
    Code:
       0: aload_1
       1: ldc           #9                  // class javax/servlet/http/HttpServletRequest
       3: invokeinterface #10,  2           // InterfaceMethod org/springframework/web/context/request/NativeWebRequest.getNativeRequest:(Ljava/lang/Class;)Ljava/lang/Object;
       8: checkcast     #9                  // class javax/servlet/http/HttpServletRequest
      11: astore_2
      12: aload_2
      13: ifnonnull     18
      16: aconst_null
      17: areturn
      18: aload_0
      19: getfield      #5                  // Field urlPathHelper:Lorg/springframework/web/util/UrlPathHelper;
      22: aload_2
      23: invokevirtual #11                 // Method org/springframework/web/util/UrlPathHelper.getLookupPathForRequest:(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;
      26: astore_3
      27: aload_3
      28: invokestatic  #12                 // Method org/springframework/web/util/UriUtils.extractFileExtension:(Ljava/lang/String;)Ljava/lang/String;
      31: astore        4
      33: aload         4
      35: invokestatic  #13                 // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
      38: ifeq          52
      41: aload         4
      43: getstatic     #14                 // Field java/util/Locale.ENGLISH:Ljava/util/Locale;
      46: invokevirtual #15                 // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      49: goto          53
      52: aconst_null
      53: areturn

  public org.springframework.http.MediaType getMediaTypeForResource(org.springframework.core.io.Resource);
    Code:
       0: aload_1
       1: ldc           #16                 // String Resource must not be null
       3: invokestatic  #17                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aconst_null
       7: astore_2
       8: aload_1
       9: invokeinterface #18,  1           // InterfaceMethod org/springframework/core/io/Resource.getFilename:()Ljava/lang/String;
      14: astore_3
      15: aload_3
      16: invokestatic  #19                 // Method org/springframework/util/StringUtils.getFilenameExtension:(Ljava/lang/String;)Ljava/lang/String;
      19: astore        4
      21: aload         4
      23: ifnull        33
      26: aload_0
      27: aload         4
      29: invokevirtual #20                 // Method lookupMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
      32: astore_2
      33: aload_2
      34: ifnonnull     49
      37: aload_3
      38: invokestatic  #21                 // Method org/springframework/http/MediaTypeFactory.getMediaType:(Ljava/lang/String;)Ljava/util/Optional;
      41: aconst_null
      42: invokevirtual #22                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      45: checkcast     #23                 // class org/springframework/http/MediaType
      48: astore_2
      49: aload_2
      50: areturn
}
