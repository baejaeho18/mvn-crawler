Compiled from "FormHttpMessageWriter.java"
public class org.springframework.http.codec.FormHttpMessageWriter extends org.springframework.http.codec.LoggingCodecSupport implements org.springframework.http.codec.HttpMessageWriter<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> {
  public static final java.nio.charset.Charset DEFAULT_CHARSET;

  private static final org.springframework.http.MediaType DEFAULT_FORM_DATA_MEDIA_TYPE;

  private static final java.util.List<org.springframework.http.MediaType> MEDIA_TYPES;

  private static final org.springframework.core.ResolvableType MULTIVALUE_TYPE;

  private java.nio.charset.Charset defaultCharset;

  public org.springframework.http.codec.FormHttpMessageWriter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/http/codec/LoggingCodecSupport."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
       8: putfield      #3                  // Field defaultCharset:Ljava/nio/charset/Charset;
      11: return

  public void setDefaultCharset(java.nio.charset.Charset);
    Code:
       0: aload_1
       1: ldc           #4                  // String Charset must not be null
       3: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #3                  // Field defaultCharset:Ljava/nio/charset/Charset;
      11: return

  public java.nio.charset.Charset getDefaultCharset();
    Code:
       0: aload_0
       1: getfield      #3                  // Field defaultCharset:Ljava/nio/charset/Charset;
       4: areturn

  public java.util.List<org.springframework.http.MediaType> getWritableMediaTypes();
    Code:
       0: getstatic     #6                  // Field MEDIA_TYPES:Ljava/util/List;
       3: areturn

  public boolean canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: ldc           #7                  // class org/springframework/util/MultiValueMap
       2: aload_1
       3: invokevirtual #8                  // Method org/springframework/core/ResolvableType.toClass:()Ljava/lang/Class;
       6: invokevirtual #9                  // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
       9: ifne          14
      12: iconst_0
      13: ireturn
      14: getstatic     #10                 // Field org/springframework/http/MediaType.APPLICATION_FORM_URLENCODED:Lorg/springframework/http/MediaType;
      17: aload_2
      18: invokevirtual #11                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      21: ifeq          26
      24: iconst_1
      25: ireturn
      26: aload_2
      27: ifnonnull     38
      30: getstatic     #12                 // Field MULTIVALUE_TYPE:Lorg/springframework/core/ResolvableType;
      33: aload_1
      34: invokevirtual #13                 // Method org/springframework/core/ResolvableType.isAssignableFrom:(Lorg/springframework/core/ResolvableType;)Z
      37: ireturn
      38: iconst_0
      39: ireturn

  public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_3
       2: invokevirtual #14                 // Method getMediaType:(Lorg/springframework/http/MediaType;)Lorg/springframework/http/MediaType;
       5: astore_3
       6: aload         4
       8: invokeinterface #15,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      13: aload_3
      14: invokevirtual #16                 // Method org/springframework/http/HttpHeaders.setContentType:(Lorg/springframework/http/MediaType;)V
      17: aload_3
      18: invokevirtual #17                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      21: ifnull        31
      24: aload_3
      25: invokevirtual #17                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      28: goto          35
      31: aload_0
      32: invokevirtual #18                 // Method getDefaultCharset:()Ljava/nio/charset/Charset;
      35: astore        6
      37: aload_1
      38: invokestatic  #19                 // Method reactor/core/publisher/Mono.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      41: aload_0
      42: aload         5
      44: aload         6
      46: aload         4
      48: invokedynamic #20,  0             // InvokeDynamic #0:apply:(Lorg/springframework/http/codec/FormHttpMessageWriter;Ljava/util/Map;Ljava/nio/charset/Charset;Lorg/springframework/http/ReactiveHttpOutputMessage;)Ljava/util/function/Function;
      53: invokevirtual #21                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      56: areturn

  protected org.springframework.http.MediaType getMediaType(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: getstatic     #22                 // Field DEFAULT_FORM_DATA_MEDIA_TYPE:Lorg/springframework/http/MediaType;
       7: areturn
       8: aload_1
       9: invokevirtual #17                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      12: ifnonnull     28
      15: new           #23                 // class org/springframework/http/MediaType
      18: dup
      19: aload_1
      20: aload_0
      21: invokevirtual #18                 // Method getDefaultCharset:()Ljava/nio/charset/Charset;
      24: invokespecial #24                 // Method org/springframework/http/MediaType."<init>":(Lorg/springframework/http/MediaType;Ljava/nio/charset/Charset;)V
      27: areturn
      28: aload_1
      29: areturn

  private void logFormData(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #25                 // Field logger:Lorg/apache/commons/logging/Log;
       4: aload_0
       5: aload_2
       6: aload_1
       7: invokedynamic #26,  0             // InvokeDynamic #1:apply:(Lorg/springframework/http/codec/FormHttpMessageWriter;Ljava/util/Map;Lorg/springframework/util/MultiValueMap;)Ljava/util/function/Function;
      12: invokestatic  #27                 // Method org/springframework/core/log/LogFormatUtils.traceDebug:(Lorg/apache/commons/logging/Log;Ljava/util/function/Function;)V
      15: return

  protected java.lang.String serializeForm(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, java.nio.charset.Charset);
    Code:
       0: new           #28                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_3
       8: aload_1
       9: aload_3
      10: aload_2
      11: invokedynamic #30,  0             // InvokeDynamic #2:accept:(Ljava/lang/StringBuilder;Ljava/nio/charset/Charset;)Ljava/util/function/BiConsumer;
      16: invokeinterface #31,  2           // InterfaceMethod org/springframework/util/MultiValueMap.forEach:(Ljava/util/function/BiConsumer;)V
      21: aload_3
      22: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      25: areturn

  private static void lambda$serializeForm$3(java.lang.StringBuilder, java.nio.charset.Charset, java.lang.String, java.util.List);
    Code:
       0: aload_3
       1: aload_0
       2: aload_2
       3: aload_1
       4: invokedynamic #33,  0             // InvokeDynamic #3:accept:(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/util/function/Consumer;
       9: invokeinterface #34,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      14: return

  private static void lambda$null$2(java.lang.StringBuilder, java.lang.String, java.nio.charset.Charset, java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method java/lang/StringBuilder.length:()I
       4: ifeq          14
       7: aload_0
       8: bipush        38
      10: invokevirtual #36                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      13: pop
      14: aload_0
      15: aload_1
      16: aload_2
      17: invokevirtual #37                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      20: invokestatic  #38                 // Method java/net/URLEncoder.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      23: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: pop
      27: aload_3
      28: ifnull        51
      31: aload_0
      32: bipush        61
      34: invokevirtual #36                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      37: pop
      38: aload_0
      39: aload_3
      40: aload_2
      41: invokevirtual #37                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      44: invokestatic  #38                 // Method java/net/URLEncoder.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      47: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: pop
      51: goto          66
      54: astore        4
      56: new           #41                 // class java/lang/IllegalStateException
      59: dup
      60: aload         4
      62: invokespecial #42                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/Throwable;)V
      65: athrow
      66: return
    Exception table:
       from    to  target type
           0    51    54   Class java/io/UnsupportedEncodingException

  private java.lang.String lambda$logFormData$1(java.util.Map, org.springframework.util.MultiValueMap, java.lang.Boolean);
    Code:
       0: new           #28                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_1
       8: invokestatic  #43                 // Method org/springframework/core/codec/Hints.getLogPrefix:(Ljava/util/Map;)Ljava/lang/String;
      11: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: ldc           #44                 // String Writing
      16: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: aload_0
      20: invokevirtual #45                 // Method isEnableLoggingRequestDetails:()Z
      23: ifeq          45
      26: aload_2
      27: aload_3
      28: invokevirtual #46                 // Method java/lang/Boolean.booleanValue:()Z
      31: ifne          38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: invokestatic  #47                 // Method org/springframework/core/log/LogFormatUtils.formatValue:(Ljava/lang/Object;Z)Ljava/lang/String;
      42: goto          74
      45: new           #28                 // class java/lang/StringBuilder
      48: dup
      49: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      52: ldc           #48                 // String form fields
      54: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: aload_2
      58: invokeinterface #49,  1           // InterfaceMethod org/springframework/util/MultiValueMap.keySet:()Ljava/util/Set;
      63: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      66: ldc           #51                 // String  (content masked)
      68: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      74: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      80: areturn

  private reactor.core.publisher.Mono lambda$write$0(java.util.Map, java.nio.charset.Charset, org.springframework.http.ReactiveHttpOutputMessage, org.springframework.util.MultiValueMap);
    Code:
       0: aload_0
       1: aload         4
       3: aload_1
       4: invokespecial #52                 // Method logFormData:(Lorg/springframework/util/MultiValueMap;Ljava/util/Map;)V
       7: aload_0
       8: aload         4
      10: aload_2
      11: invokevirtual #53                 // Method serializeForm:(Lorg/springframework/util/MultiValueMap;Ljava/nio/charset/Charset;)Ljava/lang/String;
      14: astore        5
      16: aload_2
      17: aload         5
      19: invokevirtual #54                 // Method java/nio/charset/Charset.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;
      22: astore        6
      24: aload_3
      25: invokeinterface #55,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.bufferFactory:()Lorg/springframework/core/io/buffer/DataBufferFactory;
      30: aload         6
      32: invokeinterface #56,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.wrap:(Ljava/nio/ByteBuffer;)Lorg/springframework/core/io/buffer/DataBuffer;
      37: astore        7
      39: aload_3
      40: invokeinterface #15,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      45: aload         6
      47: invokevirtual #57                 // Method java/nio/ByteBuffer.remaining:()I
      50: i2l
      51: invokevirtual #58                 // Method org/springframework/http/HttpHeaders.setContentLength:(J)V
      54: aload_3
      55: aload         7
      57: invokestatic  #59                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      60: invokeinterface #60,  2           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.writeWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      65: areturn

  static {};
    Code:
       0: getstatic     #61                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
       3: putstatic     #2                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
       6: new           #23                 // class org/springframework/http/MediaType
       9: dup
      10: getstatic     #10                 // Field org/springframework/http/MediaType.APPLICATION_FORM_URLENCODED:Lorg/springframework/http/MediaType;
      13: getstatic     #2                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
      16: invokespecial #24                 // Method org/springframework/http/MediaType."<init>":(Lorg/springframework/http/MediaType;Ljava/nio/charset/Charset;)V
      19: putstatic     #22                 // Field DEFAULT_FORM_DATA_MEDIA_TYPE:Lorg/springframework/http/MediaType;
      22: getstatic     #10                 // Field org/springframework/http/MediaType.APPLICATION_FORM_URLENCODED:Lorg/springframework/http/MediaType;
      25: invokestatic  #62                 // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      28: putstatic     #6                  // Field MEDIA_TYPES:Ljava/util/List;
      31: ldc           #7                  // class org/springframework/util/MultiValueMap
      33: iconst_2
      34: anewarray     #63                 // class java/lang/Class
      37: dup
      38: iconst_0
      39: ldc           #64                 // class java/lang/String
      41: aastore
      42: dup
      43: iconst_1
      44: ldc           #64                 // class java/lang/String
      46: aastore
      47: invokestatic  #65                 // Method org/springframework/core/ResolvableType.forClassWithGenerics:(Ljava/lang/Class;[Ljava/lang/Class;)Lorg/springframework/core/ResolvableType;
      50: putstatic     #12                 // Field MULTIVALUE_TYPE:Lorg/springframework/core/ResolvableType;
      53: return
}
