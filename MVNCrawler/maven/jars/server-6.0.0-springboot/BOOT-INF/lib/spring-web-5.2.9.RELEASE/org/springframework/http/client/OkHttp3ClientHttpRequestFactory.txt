Compiled from "OkHttp3ClientHttpRequestFactory.java"
public class org.springframework.http.client.OkHttp3ClientHttpRequestFactory implements org.springframework.http.client.ClientHttpRequestFactory,org.springframework.http.client.AsyncClientHttpRequestFactory,org.springframework.beans.factory.DisposableBean {
  private okhttp3.OkHttpClient client;

  private final boolean defaultClient;

  public org.springframework.http.client.OkHttp3ClientHttpRequestFactory();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class okhttp3/OkHttpClient
       8: dup
       9: invokespecial #3                  // Method okhttp3/OkHttpClient."<init>":()V
      12: putfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      15: aload_0
      16: iconst_1
      17: putfield      #5                  // Field defaultClient:Z
      20: return

  public org.springframework.http.client.OkHttp3ClientHttpRequestFactory(okhttp3.OkHttpClient);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #6                  // String OkHttpClient must not be null
       7: invokestatic  #7                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: putfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      15: aload_0
      16: iconst_0
      17: putfield      #5                  // Field defaultClient:Z
      20: return

  public void setReadTimeout(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
       5: invokevirtual #8                  // Method okhttp3/OkHttpClient.newBuilder:()Lokhttp3/OkHttpClient$Builder;
       8: iload_1
       9: i2l
      10: getstatic     #9                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      13: invokevirtual #10                 // Method okhttp3/OkHttpClient$Builder.readTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;
      16: invokevirtual #11                 // Method okhttp3/OkHttpClient$Builder.build:()Lokhttp3/OkHttpClient;
      19: putfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      22: return

  public void setWriteTimeout(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
       5: invokevirtual #8                  // Method okhttp3/OkHttpClient.newBuilder:()Lokhttp3/OkHttpClient$Builder;
       8: iload_1
       9: i2l
      10: getstatic     #9                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      13: invokevirtual #12                 // Method okhttp3/OkHttpClient$Builder.writeTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;
      16: invokevirtual #11                 // Method okhttp3/OkHttpClient$Builder.build:()Lokhttp3/OkHttpClient;
      19: putfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      22: return

  public void setConnectTimeout(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
       5: invokevirtual #8                  // Method okhttp3/OkHttpClient.newBuilder:()Lokhttp3/OkHttpClient$Builder;
       8: iload_1
       9: i2l
      10: getstatic     #9                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      13: invokevirtual #13                 // Method okhttp3/OkHttpClient$Builder.connectTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;
      16: invokevirtual #11                 // Method okhttp3/OkHttpClient$Builder.build:()Lokhttp3/OkHttpClient;
      19: putfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      22: return

  public org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI, org.springframework.http.HttpMethod);
    Code:
       0: new           #14                 // class org/springframework/http/client/OkHttp3ClientHttpRequest
       3: dup
       4: aload_0
       5: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
       8: aload_1
       9: aload_2
      10: invokespecial #15                 // Method org/springframework/http/client/OkHttp3ClientHttpRequest."<init>":(Lokhttp3/OkHttpClient;Ljava/net/URI;Lorg/springframework/http/HttpMethod;)V
      13: areturn

  public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod);
    Code:
       0: new           #16                 // class org/springframework/http/client/OkHttp3AsyncClientHttpRequest
       3: dup
       4: aload_0
       5: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
       8: aload_1
       9: aload_2
      10: invokespecial #17                 // Method org/springframework/http/client/OkHttp3AsyncClientHttpRequest."<init>":(Lokhttp3/OkHttpClient;Ljava/net/URI;Lorg/springframework/http/HttpMethod;)V
      13: areturn

  public void destroy() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field defaultClient:Z
       4: ifeq          48
       7: aload_0
       8: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      11: invokevirtual #18                 // Method okhttp3/OkHttpClient.cache:()Lokhttp3/Cache;
      14: astore_1
      15: aload_1
      16: ifnull        23
      19: aload_1
      20: invokevirtual #19                 // Method okhttp3/Cache.close:()V
      23: aload_0
      24: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      27: invokevirtual #20                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
      30: invokevirtual #21                 // Method okhttp3/Dispatcher.executorService:()Ljava/util/concurrent/ExecutorService;
      33: invokeinterface #22,  1           // InterfaceMethod java/util/concurrent/ExecutorService.shutdown:()V
      38: aload_0
      39: getfield      #4                  // Field client:Lokhttp3/OkHttpClient;
      42: invokevirtual #23                 // Method okhttp3/OkHttpClient.connectionPool:()Lokhttp3/ConnectionPool;
      45: invokevirtual #24                 // Method okhttp3/ConnectionPool.evictAll:()V
      48: return

  static okhttp3.Request buildRequest(org.springframework.http.HttpHeaders, byte[], java.net.URI, org.springframework.http.HttpMethod) throws java.net.MalformedURLException;
    Code:
       0: aload_0
       1: invokestatic  #25                 // Method getContentType:(Lorg/springframework/http/HttpHeaders;)Lokhttp3/MediaType;
       4: astore        4
       6: aload_1
       7: arraylength
       8: ifgt          21
      11: aload_3
      12: invokevirtual #26                 // Method org/springframework/http/HttpMethod.name:()Ljava/lang/String;
      15: invokestatic  #27                 // Method okhttp3/internal/http/HttpMethod.requiresRequestBody:(Ljava/lang/String;)Z
      18: ifeq          30
      21: aload         4
      23: aload_1
      24: invokestatic  #28                 // Method okhttp3/RequestBody.create:(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;
      27: goto          31
      30: aconst_null
      31: astore        5
      33: new           #29                 // class okhttp3/Request$Builder
      36: dup
      37: invokespecial #30                 // Method okhttp3/Request$Builder."<init>":()V
      40: aload_2
      41: invokevirtual #31                 // Method java/net/URI.toURL:()Ljava/net/URL;
      44: invokevirtual #32                 // Method okhttp3/Request$Builder.url:(Ljava/net/URL;)Lokhttp3/Request$Builder;
      47: aload_3
      48: invokevirtual #26                 // Method org/springframework/http/HttpMethod.name:()Ljava/lang/String;
      51: aload         5
      53: invokevirtual #33                 // Method okhttp3/Request$Builder.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;
      56: astore        6
      58: aload_0
      59: aload         6
      61: invokedynamic #34,  0             // InvokeDynamic #0:accept:(Lokhttp3/Request$Builder;)Ljava/util/function/BiConsumer;
      66: invokevirtual #35                 // Method org/springframework/http/HttpHeaders.forEach:(Ljava/util/function/BiConsumer;)V
      69: aload         6
      71: invokevirtual #36                 // Method okhttp3/Request$Builder.build:()Lokhttp3/Request;
      74: areturn

  private static okhttp3.MediaType getContentType(org.springframework.http.HttpHeaders);
    Code:
       0: aload_0
       1: ldc           #38                 // String Content-Type
       3: invokevirtual #39                 // Method org/springframework/http/HttpHeaders.getFirst:(Ljava/lang/String;)Ljava/lang/String;
       6: astore_1
       7: aload_1
       8: invokestatic  #40                 // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
      11: ifeq          21
      14: aload_1
      15: invokestatic  #41                 // Method okhttp3/MediaType.parse:(Ljava/lang/String;)Lokhttp3/MediaType;
      18: goto          22
      21: aconst_null
      22: areturn

  private static void lambda$buildRequest$0(okhttp3.Request$Builder, java.lang.String, java.util.List);
    Code:
       0: aload_2
       1: invokeinterface #42,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       6: astore_3
       7: aload_3
       8: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          38
      16: aload_3
      17: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #45                 // class java/lang/String
      25: astore        4
      27: aload_0
      28: aload_1
      29: aload         4
      31: invokevirtual #46                 // Method okhttp3/Request$Builder.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;
      34: pop
      35: goto          7
      38: return
}
