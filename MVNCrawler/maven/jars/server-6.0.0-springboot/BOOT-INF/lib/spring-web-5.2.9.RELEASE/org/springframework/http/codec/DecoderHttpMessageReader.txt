Compiled from "DecoderHttpMessageReader.java"
public class org.springframework.http.codec.DecoderHttpMessageReader<T> implements org.springframework.http.codec.HttpMessageReader<T> {
  private final org.springframework.core.codec.Decoder<T> decoder;

  private final java.util.List<org.springframework.http.MediaType> mediaTypes;

  public org.springframework.http.codec.DecoderHttpMessageReader(org.springframework.core.codec.Decoder<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String Decoder is required
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_1
      11: invokestatic  #4                  // Method initLogger:(Lorg/springframework/core/codec/Decoder;)V
      14: aload_0
      15: aload_1
      16: putfield      #5                  // Field decoder:Lorg/springframework/core/codec/Decoder;
      19: aload_0
      20: aload_1
      21: invokeinterface #6,  1            // InterfaceMethod org/springframework/core/codec/Decoder.getDecodableMimeTypes:()Ljava/util/List;
      26: invokestatic  #7                  // Method org/springframework/http/MediaType.asMediaTypes:(Ljava/util/List;)Ljava/util/List;
      29: putfield      #8                  // Field mediaTypes:Ljava/util/List;
      32: return

  private static void initLogger(org.springframework.core.codec.Decoder<?>);
    Code:
       0: aload_0
       1: instanceof    #9                  // class org/springframework/core/codec/AbstractDecoder
       4: ifeq          41
       7: aload_0
       8: invokevirtual #10                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: invokevirtual #11                 // Method java/lang/Class.getName:()Ljava/lang/String;
      14: ldc           #12                 // String org.springframework.core.codec
      16: invokevirtual #13                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      19: ifeq          41
      22: aload_0
      23: checkcast     #9                  // class org/springframework/core/codec/AbstractDecoder
      26: invokevirtual #14                 // Method org/springframework/core/codec/AbstractDecoder.getLogger:()Lorg/apache/commons/logging/Log;
      29: invokestatic  #15                 // Method org/springframework/http/HttpLogging.forLog:(Lorg/apache/commons/logging/Log;)Lorg/apache/commons/logging/Log;
      32: astore_1
      33: aload_0
      34: checkcast     #9                  // class org/springframework/core/codec/AbstractDecoder
      37: aload_1
      38: invokevirtual #16                 // Method org/springframework/core/codec/AbstractDecoder.setLogger:(Lorg/apache/commons/logging/Log;)V
      41: return

  public org.springframework.core.codec.Decoder<T> getDecoder();
    Code:
       0: aload_0
       1: getfield      #5                  // Field decoder:Lorg/springframework/core/codec/Decoder;
       4: areturn

  public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes();
    Code:
       0: aload_0
       1: getfield      #8                  // Field mediaTypes:Ljava/util/List;
       4: areturn

  public boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: getfield      #5                  // Field decoder:Lorg/springframework/core/codec/Decoder;
       4: aload_1
       5: aload_2
       6: invokeinterface #17,  3           // InterfaceMethod org/springframework/core/codec/Decoder.canDecode:(Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;)Z
      11: ireturn

  public reactor.core.publisher.Flux<T> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #18                 // Method getContentType:(Lorg/springframework/http/HttpMessage;)Lorg/springframework/http/MediaType;
       5: astore        4
       7: aload_0
       8: getfield      #5                  // Field decoder:Lorg/springframework/core/codec/Decoder;
      11: aload_2
      12: invokeinterface #19,  1           // InterfaceMethod org/springframework/http/ReactiveHttpInputMessage.getBody:()Lreactor/core/publisher/Flux;
      17: aload_1
      18: aload         4
      20: aload_3
      21: invokeinterface #20,  5           // InterfaceMethod org/springframework/core/codec/Decoder.decode:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      26: areturn

  public reactor.core.publisher.Mono<T> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #18                 // Method getContentType:(Lorg/springframework/http/HttpMessage;)Lorg/springframework/http/MediaType;
       5: astore        4
       7: aload_0
       8: getfield      #5                  // Field decoder:Lorg/springframework/core/codec/Decoder;
      11: aload_2
      12: invokeinterface #19,  1           // InterfaceMethod org/springframework/http/ReactiveHttpInputMessage.getBody:()Lreactor/core/publisher/Flux;
      17: aload_1
      18: aload         4
      20: aload_3
      21: invokeinterface #21,  5           // InterfaceMethod org/springframework/core/codec/Decoder.decodeToMono:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      26: areturn

  protected org.springframework.http.MediaType getContentType(org.springframework.http.HttpMessage);
    Code:
       0: aload_1
       1: invokeinterface #22,  1           // InterfaceMethod org/springframework/http/HttpMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       6: invokevirtual #23                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       9: astore_2
      10: aload_2
      11: ifnull        18
      14: aload_2
      15: goto          21
      18: getstatic     #24                 // Field org/springframework/http/MediaType.APPLICATION_OCTET_STREAM:Lorg/springframework/http/MediaType;
      21: areturn

  public reactor.core.publisher.Flux<T> read(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload         5
       2: aload_0
       3: aload_1
       4: aload_2
       5: aload_3
       6: aload         4
       8: invokevirtual #25                 // Method getReadHints:(Lorg/springframework/core/ResolvableType;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/server/reactive/ServerHttpResponse;)Ljava/util/Map;
      11: invokestatic  #26                 // Method org/springframework/core/codec/Hints.merge:(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;
      14: astore        6
      16: aload_0
      17: aload_2
      18: aload_3
      19: aload         6
      21: invokevirtual #27                 // Method read:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/ReactiveHttpInputMessage;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      24: areturn

  public reactor.core.publisher.Mono<T> readMono(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload         5
       2: aload_0
       3: aload_1
       4: aload_2
       5: aload_3
       6: aload         4
       8: invokevirtual #25                 // Method getReadHints:(Lorg/springframework/core/ResolvableType;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/server/reactive/ServerHttpResponse;)Ljava/util/Map;
      11: invokestatic  #26                 // Method org/springframework/core/codec/Hints.merge:(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;
      14: astore        6
      16: aload_0
      17: aload_2
      18: aload_3
      19: aload         6
      21: invokevirtual #28                 // Method readMono:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/ReactiveHttpInputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      24: areturn

  protected java.util.Map<java.lang.String, java.lang.Object> getReadHints(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse);
    Code:
       0: aload_0
       1: getfield      #5                  // Field decoder:Lorg/springframework/core/codec/Decoder;
       4: instanceof    #29                 // class org/springframework/http/codec/HttpMessageDecoder
       7: ifeq          32
      10: aload_0
      11: getfield      #5                  // Field decoder:Lorg/springframework/core/codec/Decoder;
      14: checkcast     #29                 // class org/springframework/http/codec/HttpMessageDecoder
      17: astore        5
      19: aload         5
      21: aload_1
      22: aload_2
      23: aload_3
      24: aload         4
      26: invokeinterface #30,  5           // InterfaceMethod org/springframework/http/codec/HttpMessageDecoder.getDecodeHints:(Lorg/springframework/core/ResolvableType;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/server/reactive/ServerHttpResponse;)Ljava/util/Map;
      31: areturn
      32: invokestatic  #31                 // Method org/springframework/core/codec/Hints.none:()Ljava/util/Map;
      35: areturn
}
