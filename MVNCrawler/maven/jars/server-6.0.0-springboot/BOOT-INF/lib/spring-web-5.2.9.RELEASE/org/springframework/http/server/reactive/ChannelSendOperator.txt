Compiled from "ChannelSendOperator.java"
public class org.springframework.http.server.reactive.ChannelSendOperator<T> extends reactor.core.publisher.Mono<java.lang.Void> implements reactor.core.Scannable {
  private final java.util.function.Function<org.reactivestreams.Publisher<T>, org.reactivestreams.Publisher<java.lang.Void>> writeFunction;

  private final reactor.core.publisher.Flux<T> source;

  public org.springframework.http.server.reactive.ChannelSendOperator(org.reactivestreams.Publisher<? extends T>, java.util.function.Function<org.reactivestreams.Publisher<T>, org.reactivestreams.Publisher<java.lang.Void>>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method reactor/core/publisher/Mono."<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #3                  // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       9: putfield      #4                  // Field source:Lreactor/core/publisher/Flux;
      12: aload_0
      13: aload_2
      14: putfield      #1                  // Field writeFunction:Ljava/util/function/Function;
      17: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #5                  // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
       4: if_acmpne     13
       7: ldc           #7                  // int 2147483647
       9: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      12: areturn
      13: aload_1
      14: getstatic     #9                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      17: if_acmpne     25
      20: aload_0
      21: getfield      #4                  // Field source:Lreactor/core/publisher/Flux;
      24: areturn
      25: aconst_null
      26: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super java.lang.Void>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field source:Lreactor/core/publisher/Flux;
       4: new           #10                 // class org/springframework/http/server/reactive/ChannelSendOperator$WriteBarrier
       7: dup
       8: aload_0
       9: aload_1
      10: invokespecial #11                 // Method org/springframework/http/server/reactive/ChannelSendOperator$WriteBarrier."<init>":(Lorg/springframework/http/server/reactive/ChannelSendOperator;Lreactor/core/CoreSubscriber;)V
      13: invokevirtual #12                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      16: return

  static java.util.function.Function access$000(org.springframework.http.server.reactive.ChannelSendOperator);
    Code:
       0: aload_0
       1: getfield      #1                  // Field writeFunction:Ljava/util/function/Function;
       4: areturn
}
