Compiled from "JettyClientHttpRequest.java"
class org.springframework.http.client.reactive.JettyClientHttpRequest extends org.springframework.http.client.reactive.AbstractClientHttpRequest {
  private final org.eclipse.jetty.client.api.Request jettyRequest;

  private final org.springframework.core.io.buffer.DataBufferFactory bufferFactory;

  private org.eclipse.jetty.reactive.client.ReactiveRequest reactiveRequest;

  public org.springframework.http.client.reactive.JettyClientHttpRequest(org.eclipse.jetty.client.api.Request, org.springframework.core.io.buffer.DataBufferFactory);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/http/client/reactive/AbstractClientHttpRequest."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field jettyRequest:Lorg/eclipse/jetty/client/api/Request;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
      14: return

  public org.springframework.http.HttpMethod getMethod();
    Code:
       0: aload_0
       1: getfield      #2                  // Field jettyRequest:Lorg/eclipse/jetty/client/api/Request;
       4: invokeinterface #4,  1            // InterfaceMethod org/eclipse/jetty/client/api/Request.getMethod:()Ljava/lang/String;
       9: invokestatic  #5                  // Method org/springframework/http/HttpMethod.resolve:(Ljava/lang/String;)Lorg/springframework/http/HttpMethod;
      12: astore_1
      13: aload_1
      14: ifnull        21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ldc           #6                  // String Method must not be null
      24: invokestatic  #7                  // Method org/springframework/util/Assert.state:(ZLjava/lang/String;)V
      27: aload_1
      28: areturn

  public java.net.URI getURI();
    Code:
       0: aload_0
       1: getfield      #2                  // Field jettyRequest:Lorg/eclipse/jetty/client/api/Request;
       4: invokeinterface #8,  1            // InterfaceMethod org/eclipse/jetty/client/api/Request.getURI:()Ljava/net/URI;
       9: areturn

  public reactor.core.publisher.Mono<java.lang.Void> setComplete();
    Code:
       0: aload_0
       1: aload_0
       2: invokedynamic #9,  0              // InvokeDynamic #0:get:(Lorg/springframework/http/client/reactive/JettyClientHttpRequest;)Ljava/util/function/Supplier;
       7: invokevirtual #10                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      10: areturn

  public org.springframework.core.io.buffer.DataBufferFactory bufferFactory();
    Code:
       0: aload_0
       1: getfield      #3                  // Field bufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
       4: areturn

  public reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_1
       1: invokestatic  #11                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       4: aload_0
       5: invokedynamic #12,  0             // InvokeDynamic #1:apply:(Lorg/springframework/http/client/reactive/JettyClientHttpRequest;)Ljava/util/function/Function;
      10: invokevirtual #13                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      13: astore_2
      14: aload_2
      15: aload_0
      16: invokespecial #14                 // Method getContentType:()Ljava/lang/String;
      19: invokestatic  #15                 // InterfaceMethod org/eclipse/jetty/reactive/client/ReactiveRequest$Content.fromPublisher:(Lorg/reactivestreams/Publisher;Ljava/lang/String;)Lorg/eclipse/jetty/reactive/client/ReactiveRequest$Content;
      22: astore_3
      23: aload_0
      24: aload_0
      25: getfield      #2                  // Field jettyRequest:Lorg/eclipse/jetty/client/api/Request;
      28: invokestatic  #16                 // Method org/eclipse/jetty/reactive/client/ReactiveRequest.newBuilder:(Lorg/eclipse/jetty/client/api/Request;)Lorg/eclipse/jetty/reactive/client/ReactiveRequest$Builder;
      31: aload_3
      32: invokevirtual #17                 // Method org/eclipse/jetty/reactive/client/ReactiveRequest$Builder.content:(Lorg/eclipse/jetty/reactive/client/ReactiveRequest$Content;)Lorg/eclipse/jetty/reactive/client/ReactiveRequest$Builder;
      35: invokevirtual #18                 // Method org/eclipse/jetty/reactive/client/ReactiveRequest$Builder.build:()Lorg/eclipse/jetty/reactive/client/ReactiveRequest;
      38: putfield      #19                 // Field reactiveRequest:Lorg/eclipse/jetty/reactive/client/ReactiveRequest;
      41: aload_0
      42: aload_0
      43: invokedynamic #9,  0              // InvokeDynamic #0:get:(Lorg/springframework/http/client/reactive/JettyClientHttpRequest;)Ljava/util/function/Supplier;
      48: invokevirtual #10                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      51: areturn

  public reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>);
    Code:
       0: aload_1
       1: invokestatic  #11                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       4: invokestatic  #20                 // InterfaceMethod java/util/function/Function.identity:()Ljava/util/function/Function;
       7: invokevirtual #21                 // Method reactor/core/publisher/Flux.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      10: ldc           #22                 // class org/springframework/core/io/buffer/PooledDataBuffer
      12: invokedynamic #23,  0             // InvokeDynamic #2:accept:()Ljava/util/function/Consumer;
      17: invokevirtual #24                 // Method reactor/core/publisher/Flux.doOnDiscard:(Ljava/lang/Class;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      20: aload_0
      21: invokedynamic #12,  0             // InvokeDynamic #1:apply:(Lorg/springframework/http/client/reactive/JettyClientHttpRequest;)Ljava/util/function/Function;
      26: invokevirtual #13                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      29: astore_2
      30: aload_2
      31: aload_0
      32: invokespecial #14                 // Method getContentType:()Ljava/lang/String;
      35: invokestatic  #15                 // InterfaceMethod org/eclipse/jetty/reactive/client/ReactiveRequest$Content.fromPublisher:(Lorg/reactivestreams/Publisher;Ljava/lang/String;)Lorg/eclipse/jetty/reactive/client/ReactiveRequest$Content;
      38: astore_3
      39: aload_0
      40: aload_0
      41: getfield      #2                  // Field jettyRequest:Lorg/eclipse/jetty/client/api/Request;
      44: invokestatic  #16                 // Method org/eclipse/jetty/reactive/client/ReactiveRequest.newBuilder:(Lorg/eclipse/jetty/client/api/Request;)Lorg/eclipse/jetty/reactive/client/ReactiveRequest$Builder;
      47: aload_3
      48: invokevirtual #17                 // Method org/eclipse/jetty/reactive/client/ReactiveRequest$Builder.content:(Lorg/eclipse/jetty/reactive/client/ReactiveRequest$Content;)Lorg/eclipse/jetty/reactive/client/ReactiveRequest$Builder;
      51: invokevirtual #18                 // Method org/eclipse/jetty/reactive/client/ReactiveRequest$Builder.build:()Lorg/eclipse/jetty/reactive/client/ReactiveRequest;
      54: putfield      #19                 // Field reactiveRequest:Lorg/eclipse/jetty/reactive/client/ReactiveRequest;
      57: aload_0
      58: aload_0
      59: invokedynamic #9,  0              // InvokeDynamic #0:get:(Lorg/springframework/http/client/reactive/JettyClientHttpRequest;)Ljava/util/function/Supplier;
      64: invokevirtual #10                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      67: areturn

  private java.lang.String getContentType();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method getHeaders:()Lorg/springframework/http/HttpHeaders;
       4: invokevirtual #26                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       7: astore_1
       8: aload_1
       9: ifnull        19
      12: aload_1
      13: invokevirtual #27                 // Method org/springframework/http/MediaType.toString:()Ljava/lang/String;
      16: goto          21
      19: ldc           #29                 // String application/octet-stream
      21: areturn

  private reactor.core.publisher.Mono<java.lang.Void> completes();
    Code:
       0: invokestatic  #30                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
       3: areturn

  private org.eclipse.jetty.reactive.client.ContentChunk toContentChunk(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: new           #31                 // class org/eclipse/jetty/reactive/client/ContentChunk
       3: dup
       4: aload_1
       5: invokeinterface #32,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asByteBuffer:()Ljava/nio/ByteBuffer;
      10: new           #33                 // class org/springframework/http/client/reactive/JettyClientHttpRequest$1
      13: dup
      14: aload_0
      15: aload_1
      16: invokespecial #34                 // Method org/springframework/http/client/reactive/JettyClientHttpRequest$1."<init>":(Lorg/springframework/http/client/reactive/JettyClientHttpRequest;Lorg/springframework/core/io/buffer/DataBuffer;)V
      19: invokespecial #35                 // Method org/eclipse/jetty/reactive/client/ContentChunk."<init>":(Ljava/nio/ByteBuffer;Lorg/eclipse/jetty/util/Callback;)V
      22: areturn

  protected void applyCookies();
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method getCookies:()Lorg/springframework/util/MultiValueMap;
       4: invokeinterface #37,  1           // InterfaceMethod org/springframework/util/MultiValueMap.values:()Ljava/util/Collection;
       9: invokeinterface #38,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      14: invokedynamic #39,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      19: invokeinterface #40,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      24: invokedynamic #41,  0             // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      29: invokeinterface #42,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      34: aload_0
      35: getfield      #2                  // Field jettyRequest:Lorg/eclipse/jetty/client/api/Request;
      38: dup
      39: invokevirtual #43                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      42: pop
      43: invokedynamic #44,  0             // InvokeDynamic #5:accept:(Lorg/eclipse/jetty/client/api/Request;)Ljava/util/function/Consumer;
      48: invokeinterface #45,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      53: return

  protected void applyHeaders();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method getHeaders:()Lorg/springframework/http/HttpHeaders;
       4: astore_1
       5: aload_1
       6: aload_0
       7: invokedynamic #46,  0             // InvokeDynamic #6:accept:(Lorg/springframework/http/client/reactive/JettyClientHttpRequest;)Ljava/util/function/BiConsumer;
      12: invokevirtual #47                 // Method org/springframework/http/HttpHeaders.forEach:(Ljava/util/function/BiConsumer;)V
      15: aload_1
      16: ldc           #49                 // String Accept
      18: invokevirtual #50                 // Method org/springframework/http/HttpHeaders.containsKey:(Ljava/lang/Object;)Z
      21: ifne          38
      24: aload_0
      25: getfield      #2                  // Field jettyRequest:Lorg/eclipse/jetty/client/api/Request;
      28: ldc           #49                 // String Accept
      30: ldc           #51                 // String */*
      32: invokeinterface #52,  3           // InterfaceMethod org/eclipse/jetty/client/api/Request.header:(Ljava/lang/String;Ljava/lang/String;)Lorg/eclipse/jetty/client/api/Request;
      37: pop
      38: return

  org.eclipse.jetty.reactive.client.ReactiveRequest getReactiveRequest();
    Code:
       0: aload_0
       1: getfield      #19                 // Field reactiveRequest:Lorg/eclipse/jetty/reactive/client/ReactiveRequest;
       4: ifnonnull     21
       7: aload_0
       8: aload_0
       9: getfield      #2                  // Field jettyRequest:Lorg/eclipse/jetty/client/api/Request;
      12: invokestatic  #16                 // Method org/eclipse/jetty/reactive/client/ReactiveRequest.newBuilder:(Lorg/eclipse/jetty/client/api/Request;)Lorg/eclipse/jetty/reactive/client/ReactiveRequest$Builder;
      15: invokevirtual #18                 // Method org/eclipse/jetty/reactive/client/ReactiveRequest$Builder.build:()Lorg/eclipse/jetty/reactive/client/ReactiveRequest;
      18: putfield      #19                 // Field reactiveRequest:Lorg/eclipse/jetty/reactive/client/ReactiveRequest;
      21: aload_0
      22: getfield      #19                 // Field reactiveRequest:Lorg/eclipse/jetty/reactive/client/ReactiveRequest;
      25: areturn

  private void lambda$applyHeaders$2(java.lang.String, java.util.List);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokedynamic #53,  0             // InvokeDynamic #7:accept:(Lorg/springframework/http/client/reactive/JettyClientHttpRequest;Ljava/lang/String;)Ljava/util/function/Consumer;
       8: invokeinterface #54,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      13: return

  private void lambda$null$1(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field jettyRequest:Lorg/eclipse/jetty/client/api/Request;
       4: aload_1
       5: aload_2
       6: invokeinterface #52,  3           // InterfaceMethod org/eclipse/jetty/client/api/Request.header:(Ljava/lang/String;Ljava/lang/String;)Lorg/eclipse/jetty/client/api/Request;
      11: pop
      12: return

  private static java.net.HttpCookie lambda$applyCookies$0(org.springframework.http.HttpCookie);
    Code:
       0: new           #55                 // class java/net/HttpCookie
       3: dup
       4: aload_0
       5: invokevirtual #56                 // Method org/springframework/http/HttpCookie.getName:()Ljava/lang/String;
       8: aload_0
       9: invokevirtual #57                 // Method org/springframework/http/HttpCookie.getValue:()Ljava/lang/String;
      12: invokespecial #58                 // Method java/net/HttpCookie."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      15: areturn
}
