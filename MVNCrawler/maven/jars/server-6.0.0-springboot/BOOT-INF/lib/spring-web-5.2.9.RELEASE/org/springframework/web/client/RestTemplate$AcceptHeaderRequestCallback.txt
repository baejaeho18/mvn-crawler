Compiled from "RestTemplate.java"
class org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback implements org.springframework.web.client.RequestCallback {
  private final java.lang.reflect.Type responseType;

  final org.springframework.web.client.RestTemplate this$0;

  public org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback(org.springframework.web.client.RestTemplate, java.lang.reflect.Type);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/springframework/web/client/RestTemplate;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field responseType:Ljava/lang/reflect/Type;
      14: return

  public void doWithRequest(org.springframework.http.client.ClientHttpRequest) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field responseType:Ljava/lang/reflect/Type;
       4: ifnull        122
       7: aload_0
       8: getfield      #1                  // Field this$0:Lorg/springframework/web/client/RestTemplate;
      11: invokevirtual #4                  // Method org/springframework/web/client/RestTemplate.getMessageConverters:()Ljava/util/List;
      14: invokeinterface #5,  1            // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      19: aload_0
      20: invokedynamic #6,  0              // InvokeDynamic #0:test:(Lorg/springframework/web/client/RestTemplate$AcceptHeaderRequestCallback;)Ljava/util/function/Predicate;
      25: invokeinterface #7,  2            // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      30: aload_0
      31: invokedynamic #8,  0              // InvokeDynamic #1:apply:(Lorg/springframework/web/client/RestTemplate$AcceptHeaderRequestCallback;)Ljava/util/function/Function;
      36: invokeinterface #9,  2            // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      41: invokeinterface #10,  1           // InterfaceMethod java/util/stream/Stream.distinct:()Ljava/util/stream/Stream;
      46: getstatic     #11                 // Field org/springframework/http/MediaType.SPECIFICITY_COMPARATOR:Ljava/util/Comparator;
      49: invokeinterface #12,  2           // InterfaceMethod java/util/stream/Stream.sorted:(Ljava/util/Comparator;)Ljava/util/stream/Stream;
      54: invokestatic  #13                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      57: invokeinterface #14,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      62: checkcast     #15                 // class java/util/List
      65: astore_2
      66: aload_0
      67: getfield      #1                  // Field this$0:Lorg/springframework/web/client/RestTemplate;
      70: invokestatic  #16                 // Method org/springframework/web/client/RestTemplate.access$100:(Lorg/springframework/web/client/RestTemplate;)Lorg/apache/commons/logging/Log;
      73: invokeinterface #17,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      78: ifeq          112
      81: aload_0
      82: getfield      #1                  // Field this$0:Lorg/springframework/web/client/RestTemplate;
      85: invokestatic  #18                 // Method org/springframework/web/client/RestTemplate.access$200:(Lorg/springframework/web/client/RestTemplate;)Lorg/apache/commons/logging/Log;
      88: new           #19                 // class java/lang/StringBuilder
      91: dup
      92: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      95: ldc           #21                 // String Accept=
      97: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     100: aload_2
     101: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     104: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     107: invokeinterface #25,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
     112: aload_1
     113: invokeinterface #26,  1           // InterfaceMethod org/springframework/http/client/ClientHttpRequest.getHeaders:()Lorg/springframework/http/HttpHeaders;
     118: aload_2
     119: invokevirtual #27                 // Method org/springframework/http/HttpHeaders.setAccept:(Ljava/util/List;)V
     122: return

  private boolean canReadResponse(java.lang.reflect.Type, org.springframework.http.converter.HttpMessageConverter<?>);
    Code:
       0: aload_1
       1: instanceof    #28                 // class java/lang/Class
       4: ifeq          14
       7: aload_1
       8: checkcast     #28                 // class java/lang/Class
      11: goto          15
      14: aconst_null
      15: astore_3
      16: aload_3
      17: ifnull        29
      20: aload_2
      21: aload_3
      22: aconst_null
      23: invokeinterface #29,  3           // InterfaceMethod org/springframework/http/converter/HttpMessageConverter.canRead:(Ljava/lang/Class;Lorg/springframework/http/MediaType;)Z
      28: ireturn
      29: aload_2
      30: instanceof    #30                 // class org/springframework/http/converter/GenericHttpMessageConverter
      33: ifeq          53
      36: aload_2
      37: checkcast     #30                 // class org/springframework/http/converter/GenericHttpMessageConverter
      40: astore        4
      42: aload         4
      44: aload_1
      45: aconst_null
      46: aconst_null
      47: invokeinterface #31,  4           // InterfaceMethod org/springframework/http/converter/GenericHttpMessageConverter.canRead:(Ljava/lang/reflect/Type;Ljava/lang/Class;Lorg/springframework/http/MediaType;)Z
      52: ireturn
      53: iconst_0
      54: ireturn

  private java.util.stream.Stream<org.springframework.http.MediaType> getSupportedMediaTypes(org.springframework.http.converter.HttpMessageConverter<?>);
    Code:
       0: aload_1
       1: invokeinterface #32,  1           // InterfaceMethod org/springframework/http/converter/HttpMessageConverter.getSupportedMediaTypes:()Ljava/util/List;
       6: invokeinterface #5,  1            // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      11: invokedynamic #33,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      16: invokeinterface #34,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      21: areturn

  private static org.springframework.http.MediaType lambda$getSupportedMediaTypes$1(org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
       4: ifnull        23
       7: new           #36                 // class org/springframework/http/MediaType
      10: dup
      11: aload_0
      12: invokevirtual #37                 // Method org/springframework/http/MediaType.getType:()Ljava/lang/String;
      15: aload_0
      16: invokevirtual #38                 // Method org/springframework/http/MediaType.getSubtype:()Ljava/lang/String;
      19: invokespecial #39                 // Method org/springframework/http/MediaType."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      22: areturn
      23: aload_0
      24: areturn

  private boolean lambda$doWithRequest$0(org.springframework.http.converter.HttpMessageConverter);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field responseType:Ljava/lang/reflect/Type;
       5: aload_1
       6: invokespecial #40                 // Method canReadResponse:(Ljava/lang/reflect/Type;Lorg/springframework/http/converter/HttpMessageConverter;)Z
       9: ireturn
}
