Compiled from "AbstractJackson2Decoder.java"
public abstract class org.springframework.http.codec.json.AbstractJackson2Decoder extends org.springframework.http.codec.json.Jackson2CodecSupport implements org.springframework.http.codec.HttpMessageDecoder<java.lang.Object> {
  private int maxInMemorySize;

  protected org.springframework.http.codec.json.AbstractJackson2Decoder(com.fasterxml.jackson.databind.ObjectMapper, org.springframework.util.MimeType...);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/springframework/http/codec/json/Jackson2CodecSupport."<init>":(Lcom/fasterxml/jackson/databind/ObjectMapper;[Lorg/springframework/util/MimeType;)V
       6: aload_0
       7: ldc           #2                  // int 262144
       9: putfield      #3                  // Field maxInMemorySize:I
      12: return

  public void setMaxInMemorySize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field maxInMemorySize:I
       5: return

  public int getMaxInMemorySize();
    Code:
       0: aload_0
       1: getfield      #3                  // Field maxInMemorySize:I
       4: ireturn

  public boolean canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType);
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method getObjectMapper:()Lcom/fasterxml/jackson/databind/ObjectMapper;
       4: invokevirtual #5                  // Method com/fasterxml/jackson/databind/ObjectMapper.getTypeFactory:()Lcom/fasterxml/jackson/databind/type/TypeFactory;
       7: aload_1
       8: invokevirtual #6                  // Method org/springframework/core/ResolvableType.getType:()Ljava/lang/reflect/Type;
      11: invokevirtual #7                  // Method com/fasterxml/jackson/databind/type/TypeFactory.constructType:(Ljava/lang/reflect/Type;)Lcom/fasterxml/jackson/databind/JavaType;
      14: astore_3
      15: ldc           #8                  // class java/lang/CharSequence
      17: aload_1
      18: invokevirtual #9                  // Method org/springframework/core/ResolvableType.toClass:()Ljava/lang/Class;
      21: invokevirtual #10                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      24: ifne          50
      27: aload_0
      28: invokevirtual #4                  // Method getObjectMapper:()Lcom/fasterxml/jackson/databind/ObjectMapper;
      31: aload_3
      32: invokevirtual #11                 // Method com/fasterxml/jackson/databind/ObjectMapper.canDeserialize:(Lcom/fasterxml/jackson/databind/JavaType;)Z
      35: ifeq          50
      38: aload_0
      39: aload_2
      40: invokevirtual #12                 // Method supportsMimeType:(Lorg/springframework/util/MimeType;)Z
      43: ifeq          50
      46: iconst_1
      47: goto          51
      50: iconst_0
      51: ireturn

  public reactor.core.publisher.Flux<java.lang.Object> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method getObjectMapper:()Lcom/fasterxml/jackson/databind/ObjectMapper;
       4: astore        5
       6: aload         5
       8: getstatic     #13                 // Field com/fasterxml/jackson/databind/DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS:Lcom/fasterxml/jackson/databind/DeserializationFeature;
      11: invokevirtual #14                 // Method com/fasterxml/jackson/databind/ObjectMapper.isEnabled:(Lcom/fasterxml/jackson/databind/DeserializationFeature;)Z
      14: istore        6
      16: ldc           #15                 // class java/math/BigDecimal
      18: aload_2
      19: invokevirtual #6                  // Method org/springframework/core/ResolvableType.getType:()Ljava/lang/reflect/Type;
      22: invokevirtual #16                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      25: ifeq          31
      28: iconst_1
      29: istore        6
      31: aload_0
      32: aload_1
      33: aload_2
      34: aload_3
      35: aload         4
      37: invokevirtual #17                 // Method processInput:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      40: astore        7
      42: aload         7
      44: aload         5
      46: invokevirtual #18                 // Method com/fasterxml/jackson/databind/ObjectMapper.getFactory:()Lcom/fasterxml/jackson/core/JsonFactory;
      49: aload         5
      51: iconst_1
      52: iload         6
      54: aload_0
      55: invokevirtual #19                 // Method getMaxInMemorySize:()I
      58: invokestatic  #20                 // Method org/springframework/http/codec/json/Jackson2Tokenizer.tokenize:(Lreactor/core/publisher/Flux;Lcom/fasterxml/jackson/core/JsonFactory;Lcom/fasterxml/jackson/databind/ObjectMapper;ZZI)Lreactor/core/publisher/Flux;
      61: astore        8
      63: aload_0
      64: aload_2
      65: aload         4
      67: invokespecial #21                 // Method getObjectReader:(Lorg/springframework/core/ResolvableType;Ljava/util/Map;)Lcom/fasterxml/jackson/databind/ObjectReader;
      70: astore        9
      72: aload         8
      74: aload_0
      75: aload         9
      77: aload         4
      79: invokedynamic #22,  0             // InvokeDynamic #0:accept:(Lorg/springframework/http/codec/json/AbstractJackson2Decoder;Lcom/fasterxml/jackson/databind/ObjectReader;Ljava/util/Map;)Ljava/util/function/BiConsumer;
      84: invokevirtual #23                 // Method reactor/core/publisher/Flux.handle:(Ljava/util/function/BiConsumer;)Lreactor/core/publisher/Flux;
      87: areturn

  protected reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> processInput(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: invokestatic  #24                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       4: areturn

  public reactor.core.publisher.Mono<java.lang.Object> decodeToMono(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #3                  // Field maxInMemorySize:I
       5: invokestatic  #25                 // Method org/springframework/core/io/buffer/DataBufferUtils.join:(Lorg/reactivestreams/Publisher;I)Lreactor/core/publisher/Mono;
       8: aload_0
       9: aload_2
      10: aload_3
      11: aload         4
      13: invokedynamic #26,  0             // InvokeDynamic #1:apply:(Lorg/springframework/http/codec/json/AbstractJackson2Decoder;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Ljava/util/function/Function;
      18: invokevirtual #27                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      21: areturn

  public java.lang.Object decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.core.codec.DecodingException;
    Code:
       0: aload_0
       1: aload_2
       2: aload         4
       4: invokespecial #21                 // Method getObjectReader:(Lorg/springframework/core/ResolvableType;Ljava/util/Map;)Lcom/fasterxml/jackson/databind/ObjectReader;
       7: astore        5
       9: aload         5
      11: aload_1
      12: invokeinterface #28,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asInputStream:()Ljava/io/InputStream;
      17: invokevirtual #29                 // Method com/fasterxml/jackson/databind/ObjectReader.readValue:(Ljava/io/InputStream;)Ljava/lang/Object;
      20: astore        6
      22: aload_0
      23: aload         6
      25: aload         4
      27: invokespecial #30                 // Method logValue:(Ljava/lang/Object;Ljava/util/Map;)V
      30: aload         6
      32: astore        7
      34: aload_1
      35: invokestatic  #31                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
      38: pop
      39: aload         7
      41: areturn
      42: astore        5
      44: aload_0
      45: aload         5
      47: invokespecial #33                 // Method processException:(Ljava/io/IOException;)Lorg/springframework/core/codec/CodecException;
      50: athrow
      51: astore        8
      53: aload_1
      54: invokestatic  #31                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
      57: pop
      58: aload         8
      60: athrow
    Exception table:
       from    to  target type
           0    34    42   Class java/io/IOException
           0    34    51   any
          42    53    51   any

  private com.fasterxml.jackson.databind.ObjectReader getObjectReader(org.springframework.core.ResolvableType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: ldc           #34                 // String \'elementType\' must not be null
       3: invokestatic  #35                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokespecial #36                 // Method getContextClass:(Lorg/springframework/core/ResolvableType;)Ljava/lang/Class;
      11: astore_3
      12: aload_3
      13: ifnonnull     37
      16: aload_2
      17: ifnull        37
      20: aload_0
      21: aload_2
      22: getstatic     #37                 // Field ACTUAL_TYPE_HINT:Ljava/lang/String;
      25: invokeinterface #38,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #39                 // class org/springframework/core/ResolvableType
      33: invokespecial #36                 // Method getContextClass:(Lorg/springframework/core/ResolvableType;)Ljava/lang/Class;
      36: astore_3
      37: aload_0
      38: aload_1
      39: invokevirtual #6                  // Method org/springframework/core/ResolvableType.getType:()Ljava/lang/reflect/Type;
      42: aload_3
      43: invokevirtual #40                 // Method getJavaType:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lcom/fasterxml/jackson/databind/JavaType;
      46: astore        4
      48: aload_2
      49: ifnull        67
      52: aload_2
      53: getstatic     #41                 // Field org/springframework/http/codec/json/Jackson2CodecSupport.JSON_VIEW_HINT:Ljava/lang/String;
      56: invokeinterface #38,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      61: checkcast     #42                 // class java/lang/Class
      64: goto          68
      67: aconst_null
      68: astore        5
      70: aload         5
      72: ifnull        92
      75: aload_0
      76: invokevirtual #4                  // Method getObjectMapper:()Lcom/fasterxml/jackson/databind/ObjectMapper;
      79: aload         5
      81: invokevirtual #43                 // Method com/fasterxml/jackson/databind/ObjectMapper.readerWithView:(Ljava/lang/Class;)Lcom/fasterxml/jackson/databind/ObjectReader;
      84: aload         4
      86: invokevirtual #44                 // Method com/fasterxml/jackson/databind/ObjectReader.forType:(Lcom/fasterxml/jackson/databind/JavaType;)Lcom/fasterxml/jackson/databind/ObjectReader;
      89: goto          101
      92: aload_0
      93: invokevirtual #4                  // Method getObjectMapper:()Lcom/fasterxml/jackson/databind/ObjectMapper;
      96: aload         4
      98: invokevirtual #45                 // Method com/fasterxml/jackson/databind/ObjectMapper.readerFor:(Lcom/fasterxml/jackson/databind/JavaType;)Lcom/fasterxml/jackson/databind/ObjectReader;
     101: areturn

  private java.lang.Class<?> getContextClass(org.springframework.core.ResolvableType);
    Code:
       0: aload_1
       1: ifnull        12
       4: aload_0
       5: aload_1
       6: invokevirtual #46                 // Method getParameter:(Lorg/springframework/core/ResolvableType;)Lorg/springframework/core/MethodParameter;
       9: goto          13
      12: aconst_null
      13: astore_2
      14: aload_2
      15: ifnull        25
      18: aload_2
      19: invokevirtual #47                 // Method org/springframework/core/MethodParameter.getContainingClass:()Ljava/lang/Class;
      22: goto          26
      25: aconst_null
      26: areturn

  private void logValue(java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_2
       1: invokestatic  #48                 // Method org/springframework/core/codec/Hints.isLoggingSuppressed:(Ljava/util/Map;)Z
       4: ifne          21
       7: aload_0
       8: getfield      #49                 // Field logger:Lorg/apache/commons/logging/Log;
      11: aload_1
      12: aload_2
      13: invokedynamic #50,  0             // InvokeDynamic #2:apply:(Ljava/lang/Object;Ljava/util/Map;)Ljava/util/function/Function;
      18: invokestatic  #51                 // Method org/springframework/core/log/LogFormatUtils.traceDebug:(Lorg/apache/commons/logging/Log;Ljava/util/function/Function;)V
      21: return

  private org.springframework.core.codec.CodecException processException(java.io.IOException);
    Code:
       0: aload_1
       1: instanceof    #52                 // class com/fasterxml/jackson/databind/exc/InvalidDefinitionException
       4: ifeq          43
       7: aload_1
       8: checkcast     #52                 // class com/fasterxml/jackson/databind/exc/InvalidDefinitionException
      11: invokevirtual #53                 // Method com/fasterxml/jackson/databind/exc/InvalidDefinitionException.getType:()Lcom/fasterxml/jackson/databind/JavaType;
      14: astore_2
      15: new           #54                 // class org/springframework/core/codec/CodecException
      18: dup
      19: new           #55                 // class java/lang/StringBuilder
      22: dup
      23: invokespecial #56                 // Method java/lang/StringBuilder."<init>":()V
      26: ldc           #57                 // String Type definition error:
      28: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: aload_2
      32: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      35: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      38: aload_1
      39: invokespecial #61                 // Method org/springframework/core/codec/CodecException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      42: areturn
      43: aload_1
      44: instanceof    #62                 // class com/fasterxml/jackson/core/JsonProcessingException
      47: ifeq          86
      50: aload_1
      51: checkcast     #62                 // class com/fasterxml/jackson/core/JsonProcessingException
      54: invokevirtual #63                 // Method com/fasterxml/jackson/core/JsonProcessingException.getOriginalMessage:()Ljava/lang/String;
      57: astore_2
      58: new           #64                 // class org/springframework/core/codec/DecodingException
      61: dup
      62: new           #55                 // class java/lang/StringBuilder
      65: dup
      66: invokespecial #56                 // Method java/lang/StringBuilder."<init>":()V
      69: ldc           #65                 // String JSON decoding error:
      71: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: aload_2
      75: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      78: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      81: aload_1
      82: invokespecial #66                 // Method org/springframework/core/codec/DecodingException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      85: areturn
      86: new           #64                 // class org/springframework/core/codec/DecodingException
      89: dup
      90: ldc           #67                 // String I/O error while parsing input stream
      92: aload_1
      93: invokespecial #66                 // Method org/springframework/core/codec/DecodingException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      96: areturn

  public java.util.Map<java.lang.String, java.lang.Object> getDecodeHints(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #68                 // Method getHints:(Lorg/springframework/core/ResolvableType;)Ljava/util/Map;
       5: areturn

  public java.util.List<org.springframework.util.MimeType> getDecodableMimeTypes();
    Code:
       0: aload_0
       1: invokevirtual #69                 // Method getMimeTypes:()Ljava/util/List;
       4: areturn

  protected <A extends java.lang.annotation.Annotation> A getAnnotation(org.springframework.core.MethodParameter, java.lang.Class<A>);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #70                 // Method org/springframework/core/MethodParameter.getParameterAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;
       5: areturn

  private static java.lang.String lambda$logValue$2(java.lang.Object, java.util.Map, java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #71                 // Method java/lang/Boolean.booleanValue:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: invokestatic  #72                 // Method org/springframework/core/log/LogFormatUtils.formatValue:(Ljava/lang/Object;Z)Ljava/lang/String;
      16: astore_3
      17: new           #55                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #56                 // Method java/lang/StringBuilder."<init>":()V
      24: aload_1
      25: invokestatic  #73                 // Method org/springframework/core/codec/Hints.getLogPrefix:(Ljava/util/Map;)Ljava/lang/String;
      28: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: ldc           #74                 // String Decoded [
      33: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_3
      37: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: ldc           #75                 // String ]
      42: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: areturn

  private reactor.core.publisher.Mono lambda$decodeToMono$1(org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: aload         4
       3: aload_1
       4: aload_2
       5: aload_3
       6: invokevirtual #76                 // Method decode:(Lorg/springframework/core/io/buffer/DataBuffer;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Ljava/lang/Object;
       9: invokestatic  #77                 // Method reactor/core/publisher/Mono.justOrEmpty:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      12: areturn

  private void lambda$decode$0(com.fasterxml.jackson.databind.ObjectReader, java.util.Map, com.fasterxml.jackson.databind.util.TokenBuffer, reactor.core.publisher.SynchronousSink);
    Code:
       0: aload_1
       1: aload_3
       2: aload_0
       3: invokevirtual #4                  // Method getObjectMapper:()Lcom/fasterxml/jackson/databind/ObjectMapper;
       6: invokevirtual #78                 // Method com/fasterxml/jackson/databind/util/TokenBuffer.asParser:(Lcom/fasterxml/jackson/core/ObjectCodec;)Lcom/fasterxml/jackson/core/JsonParser;
       9: invokevirtual #79                 // Method com/fasterxml/jackson/databind/ObjectReader.readValue:(Lcom/fasterxml/jackson/core/JsonParser;)Ljava/lang/Object;
      12: astore        5
      14: aload_0
      15: aload         5
      17: aload_2
      18: invokespecial #30                 // Method logValue:(Ljava/lang/Object;Ljava/util/Map;)V
      21: aload         5
      23: ifnull        35
      26: aload         4
      28: aload         5
      30: invokeinterface #80,  2           // InterfaceMethod reactor/core/publisher/SynchronousSink.next:(Ljava/lang/Object;)V
      35: goto          53
      38: astore        5
      40: aload         4
      42: aload_0
      43: aload         5
      45: invokespecial #33                 // Method processException:(Ljava/io/IOException;)Lorg/springframework/core/codec/CodecException;
      48: invokeinterface #81,  2           // InterfaceMethod reactor/core/publisher/SynchronousSink.error:(Ljava/lang/Throwable;)V
      53: return
    Exception table:
       from    to  target type
           0    35    38   Class java/io/IOException
}
