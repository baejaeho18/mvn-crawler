Compiled from "ThrottledTemplateWriterOutputStreamAdapter.java"
final class org.thymeleaf.engine.ThrottledTemplateWriterOutputStreamAdapter extends java.io.OutputStream implements org.thymeleaf.engine.ThrottledTemplateWriter$IThrottledTemplateWriterAdapter {
  private final java.lang.String templateName;

  private final org.thymeleaf.engine.TemplateFlowController flowController;

  private final int overflowIncrementInBytes;

  private java.io.OutputStream os;

  private byte[] overflow;

  private int overflowSize;

  private int maxOverflowSize;

  private int overflowGrowCount;

  private boolean unlimited;

  private int limit;

  private int writtenCount;

  org.thymeleaf.engine.ThrottledTemplateWriterOutputStreamAdapter(java.lang.String, org.thymeleaf.engine.TemplateFlowController, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field templateName:Ljava/lang/String;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field flowController:Lorg/thymeleaf/engine/TemplateFlowController;
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field overflowIncrementInBytes:I
      19: aload_0
      20: aconst_null
      21: putfield      #5                  // Field overflow:[B
      24: aload_0
      25: iconst_0
      26: putfield      #6                  // Field overflowSize:I
      29: aload_0
      30: iconst_0
      31: putfield      #7                  // Field maxOverflowSize:I
      34: aload_0
      35: iconst_0
      36: putfield      #8                  // Field overflowGrowCount:I
      39: aload_0
      40: iconst_0
      41: putfield      #9                  // Field unlimited:Z
      44: aload_0
      45: iconst_0
      46: putfield      #10                 // Field limit:I
      49: aload_0
      50: iconst_0
      51: putfield      #11                 // Field writtenCount:I
      54: aload_0
      55: getfield      #3                  // Field flowController:Lorg/thymeleaf/engine/TemplateFlowController;
      58: iconst_1
      59: putfield      #12                 // Field org/thymeleaf/engine/TemplateFlowController.stopProcessing:Z
      62: return

  void setOutputStream(java.io.OutputStream);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field os:Ljava/io/OutputStream;
       5: aload_0
       6: iconst_0
       7: putfield      #11                 // Field writtenCount:I
      10: return

  public boolean isOverflown();
    Code:
       0: aload_0
       1: getfield      #6                  // Field overflowSize:I
       4: ifle          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isStopped();
    Code:
       0: aload_0
       1: getfield      #10                 // Field limit:I
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public int getWrittenCount();
    Code:
       0: aload_0
       1: getfield      #11                 // Field writtenCount:I
       4: ireturn

  public int getMaxOverflowSize();
    Code:
       0: aload_0
       1: getfield      #7                  // Field maxOverflowSize:I
       4: ireturn

  public int getOverflowGrowCount();
    Code:
       0: aload_0
       1: getfield      #8                  // Field overflowGrowCount:I
       4: ireturn

  public void allow(int);
    Code:
       0: iload_1
       1: ldc           #15                 // int 2147483647
       3: if_icmpeq     10
       6: iload_1
       7: ifge          23
      10: aload_0
      11: iconst_1
      12: putfield      #9                  // Field unlimited:Z
      15: aload_0
      16: iconst_m1
      17: putfield      #10                 // Field limit:I
      20: goto          33
      23: aload_0
      24: iconst_0
      25: putfield      #9                  // Field unlimited:Z
      28: aload_0
      29: iload_1
      30: putfield      #10                 // Field limit:I
      33: aload_0
      34: getfield      #3                  // Field flowController:Lorg/thymeleaf/engine/TemplateFlowController;
      37: aload_0
      38: getfield      #10                 // Field limit:I
      41: ifne          48
      44: iconst_1
      45: goto          49
      48: iconst_0
      49: putfield      #12                 // Field org/thymeleaf/engine/TemplateFlowController.stopProcessing:Z
      52: aload_0
      53: getfield      #6                  // Field overflowSize:I
      56: ifeq          66
      59: aload_0
      60: getfield      #10                 // Field limit:I
      63: ifne          67
      66: return
      67: aload_0
      68: getfield      #9                  // Field unlimited:Z
      71: ifne          85
      74: aload_0
      75: getfield      #10                 // Field limit:I
      78: aload_0
      79: getfield      #6                  // Field overflowSize:I
      82: if_icmple     140
      85: aload_0
      86: getfield      #13                 // Field os:Ljava/io/OutputStream;
      89: aload_0
      90: getfield      #5                  // Field overflow:[B
      93: iconst_0
      94: aload_0
      95: getfield      #6                  // Field overflowSize:I
      98: invokevirtual #16                 // Method java/io/OutputStream.write:([BII)V
     101: aload_0
     102: getfield      #9                  // Field unlimited:Z
     105: ifne          121
     108: aload_0
     109: dup
     110: getfield      #10                 // Field limit:I
     113: aload_0
     114: getfield      #6                  // Field overflowSize:I
     117: isub
     118: putfield      #10                 // Field limit:I
     121: aload_0
     122: dup
     123: getfield      #11                 // Field writtenCount:I
     126: aload_0
     127: getfield      #6                  // Field overflowSize:I
     130: iadd
     131: putfield      #11                 // Field writtenCount:I
     134: aload_0
     135: iconst_0
     136: putfield      #6                  // Field overflowSize:I
     139: return
     140: aload_0
     141: getfield      #13                 // Field os:Ljava/io/OutputStream;
     144: aload_0
     145: getfield      #5                  // Field overflow:[B
     148: iconst_0
     149: aload_0
     150: getfield      #10                 // Field limit:I
     153: invokevirtual #16                 // Method java/io/OutputStream.write:([BII)V
     156: aload_0
     157: getfield      #10                 // Field limit:I
     160: aload_0
     161: getfield      #6                  // Field overflowSize:I
     164: if_icmpge     192
     167: aload_0
     168: getfield      #5                  // Field overflow:[B
     171: aload_0
     172: getfield      #10                 // Field limit:I
     175: aload_0
     176: getfield      #5                  // Field overflow:[B
     179: iconst_0
     180: aload_0
     181: getfield      #6                  // Field overflowSize:I
     184: aload_0
     185: getfield      #10                 // Field limit:I
     188: isub
     189: invokestatic  #17                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     192: aload_0
     193: dup
     194: getfield      #6                  // Field overflowSize:I
     197: aload_0
     198: getfield      #10                 // Field limit:I
     201: isub
     202: putfield      #6                  // Field overflowSize:I
     205: aload_0
     206: dup
     207: getfield      #11                 // Field writtenCount:I
     210: aload_0
     211: getfield      #10                 // Field limit:I
     214: iadd
     215: putfield      #11                 // Field writtenCount:I
     218: aload_0
     219: iconst_0
     220: putfield      #10                 // Field limit:I
     223: aload_0
     224: getfield      #3                  // Field flowController:Lorg/thymeleaf/engine/TemplateFlowController;
     227: iconst_1
     228: putfield      #12                 // Field org/thymeleaf/engine/TemplateFlowController.stopProcessing:Z
     231: goto          252
     234: astore_2
     235: new           #19                 // class org/thymeleaf/exceptions/TemplateOutputException
     238: dup
     239: ldc           #20                 // String Exception while trying to write overflowed buffer in throttled template
     241: aload_0
     242: getfield      #2                  // Field templateName:Ljava/lang/String;
     245: iconst_m1
     246: iconst_m1
     247: aload_2
     248: invokespecial #21                 // Method org/thymeleaf/exceptions/TemplateOutputException."<init>":(Ljava/lang/String;Ljava/lang/String;IILjava/lang/Throwable;)V
     251: athrow
     252: return
    Exception table:
       from    to  target type
          67   139   234   Class java/io/IOException
         140   231   234   Class java/io/IOException

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field limit:I
       4: ifne          13
       7: aload_0
       8: iload_1
       9: invokespecial #22                 // Method overflow:(I)V
      12: return
      13: aload_0
      14: getfield      #13                 // Field os:Ljava/io/OutputStream;
      17: iload_1
      18: invokevirtual #23                 // Method java/io/OutputStream.write:(I)V
      21: aload_0
      22: getfield      #9                  // Field unlimited:Z
      25: ifne          38
      28: aload_0
      29: dup
      30: getfield      #10                 // Field limit:I
      33: iconst_1
      34: isub
      35: putfield      #10                 // Field limit:I
      38: aload_0
      39: dup
      40: getfield      #11                 // Field writtenCount:I
      43: iconst_1
      44: iadd
      45: putfield      #11                 // Field writtenCount:I
      48: aload_0
      49: getfield      #10                 // Field limit:I
      52: ifne          63
      55: aload_0
      56: getfield      #3                  // Field flowController:Lorg/thymeleaf/engine/TemplateFlowController;
      59: iconst_1
      60: putfield      #12                 // Field org/thymeleaf/engine/TemplateFlowController.stopProcessing:Z
      63: return

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field limit:I
       4: ifne          15
       7: aload_0
       8: aload_1
       9: iload_2
      10: iload_3
      11: invokespecial #24                 // Method overflow:([BII)V
      14: return
      15: aload_0
      16: getfield      #9                  // Field unlimited:Z
      19: ifne          30
      22: aload_0
      23: getfield      #10                 // Field limit:I
      26: iload_3
      27: if_icmple     68
      30: aload_0
      31: getfield      #13                 // Field os:Ljava/io/OutputStream;
      34: aload_1
      35: iload_2
      36: iload_3
      37: invokevirtual #16                 // Method java/io/OutputStream.write:([BII)V
      40: aload_0
      41: getfield      #9                  // Field unlimited:Z
      44: ifne          57
      47: aload_0
      48: dup
      49: getfield      #10                 // Field limit:I
      52: iload_3
      53: isub
      54: putfield      #10                 // Field limit:I
      57: aload_0
      58: dup
      59: getfield      #11                 // Field writtenCount:I
      62: iload_3
      63: iadd
      64: putfield      #11                 // Field writtenCount:I
      67: return
      68: aload_0
      69: getfield      #13                 // Field os:Ljava/io/OutputStream;
      72: aload_1
      73: iload_2
      74: aload_0
      75: getfield      #10                 // Field limit:I
      78: invokevirtual #16                 // Method java/io/OutputStream.write:([BII)V
      81: aload_0
      82: getfield      #10                 // Field limit:I
      85: iload_3
      86: if_icmpge     106
      89: aload_0
      90: aload_1
      91: iload_2
      92: aload_0
      93: getfield      #10                 // Field limit:I
      96: iadd
      97: iload_3
      98: aload_0
      99: getfield      #10                 // Field limit:I
     102: isub
     103: invokespecial #24                 // Method overflow:([BII)V
     106: aload_0
     107: dup
     108: getfield      #11                 // Field writtenCount:I
     111: aload_0
     112: getfield      #10                 // Field limit:I
     115: iadd
     116: putfield      #11                 // Field writtenCount:I
     119: aload_0
     120: iconst_0
     121: putfield      #10                 // Field limit:I
     124: aload_0
     125: getfield      #3                  // Field flowController:Lorg/thymeleaf/engine/TemplateFlowController;
     128: iconst_1
     129: putfield      #12                 // Field org/thymeleaf/engine/TemplateFlowController.stopProcessing:Z
     132: return

  public void write(byte[]) throws java.io.IOException;
    Code:
       0: aload_1
       1: arraylength
       2: istore_2
       3: aload_0
       4: getfield      #10                 // Field limit:I
       7: ifne          18
      10: aload_0
      11: aload_1
      12: iconst_0
      13: iload_2
      14: invokespecial #24                 // Method overflow:([BII)V
      17: return
      18: aload_0
      19: getfield      #9                  // Field unlimited:Z
      22: ifne          33
      25: aload_0
      26: getfield      #10                 // Field limit:I
      29: iload_2
      30: if_icmple     71
      33: aload_0
      34: getfield      #13                 // Field os:Ljava/io/OutputStream;
      37: aload_1
      38: iconst_0
      39: iload_2
      40: invokevirtual #16                 // Method java/io/OutputStream.write:([BII)V
      43: aload_0
      44: getfield      #9                  // Field unlimited:Z
      47: ifne          60
      50: aload_0
      51: dup
      52: getfield      #10                 // Field limit:I
      55: iload_2
      56: isub
      57: putfield      #10                 // Field limit:I
      60: aload_0
      61: dup
      62: getfield      #11                 // Field writtenCount:I
      65: iload_2
      66: iadd
      67: putfield      #11                 // Field writtenCount:I
      70: return
      71: aload_0
      72: getfield      #13                 // Field os:Ljava/io/OutputStream;
      75: aload_1
      76: iconst_0
      77: aload_0
      78: getfield      #10                 // Field limit:I
      81: invokevirtual #16                 // Method java/io/OutputStream.write:([BII)V
      84: aload_0
      85: getfield      #10                 // Field limit:I
      88: iload_2
      89: if_icmpge     107
      92: aload_0
      93: aload_1
      94: aload_0
      95: getfield      #10                 // Field limit:I
      98: iload_2
      99: aload_0
     100: getfield      #10                 // Field limit:I
     103: isub
     104: invokespecial #24                 // Method overflow:([BII)V
     107: aload_0
     108: dup
     109: getfield      #11                 // Field writtenCount:I
     112: aload_0
     113: getfield      #10                 // Field limit:I
     116: iadd
     117: putfield      #11                 // Field writtenCount:I
     120: aload_0
     121: iconst_0
     122: putfield      #10                 // Field limit:I
     125: aload_0
     126: getfield      #3                  // Field flowController:Lorg/thymeleaf/engine/TemplateFlowController;
     129: iconst_1
     130: putfield      #12                 // Field org/thymeleaf/engine/TemplateFlowController.stopProcessing:Z
     133: return

  private void overflow(int);
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #25                 // Method ensureOverflowCapacity:(I)V
       5: aload_0
       6: getfield      #5                  // Field overflow:[B
       9: aload_0
      10: getfield      #6                  // Field overflowSize:I
      13: iload_1
      14: i2b
      15: bastore
      16: aload_0
      17: dup
      18: getfield      #6                  // Field overflowSize:I
      21: iconst_1
      22: iadd
      23: putfield      #6                  // Field overflowSize:I
      26: aload_0
      27: getfield      #6                  // Field overflowSize:I
      30: aload_0
      31: getfield      #7                  // Field maxOverflowSize:I
      34: if_icmple     45
      37: aload_0
      38: aload_0
      39: getfield      #6                  // Field overflowSize:I
      42: putfield      #7                  // Field maxOverflowSize:I
      45: return

  private void overflow(byte[], int, int);
    Code:
       0: aload_0
       1: iload_3
       2: invokespecial #25                 // Method ensureOverflowCapacity:(I)V
       5: aload_1
       6: iload_2
       7: aload_0
       8: getfield      #5                  // Field overflow:[B
      11: aload_0
      12: getfield      #6                  // Field overflowSize:I
      15: iload_3
      16: invokestatic  #17                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      19: aload_0
      20: dup
      21: getfield      #6                  // Field overflowSize:I
      24: iload_3
      25: iadd
      26: putfield      #6                  // Field overflowSize:I
      29: aload_0
      30: getfield      #6                  // Field overflowSize:I
      33: aload_0
      34: getfield      #7                  // Field maxOverflowSize:I
      37: if_icmple     48
      40: aload_0
      41: aload_0
      42: getfield      #6                  // Field overflowSize:I
      45: putfield      #7                  // Field maxOverflowSize:I
      48: return

  private void ensureOverflowCapacity(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field overflow:[B
       4: ifnonnull     37
       7: aload_0
       8: getfield      #4                  // Field overflowIncrementInBytes:I
      11: iconst_3
      12: imul
      13: istore_2
      14: iload_2
      15: iload_1
      16: if_icmpge     29
      19: iload_2
      20: aload_0
      21: getfield      #4                  // Field overflowIncrementInBytes:I
      24: iadd
      25: istore_2
      26: goto          14
      29: aload_0
      30: iload_2
      31: newarray       byte
      33: putfield      #5                  // Field overflow:[B
      36: return
      37: aload_0
      38: getfield      #6                  // Field overflowSize:I
      41: iload_1
      42: iadd
      43: istore_2
      44: aload_0
      45: getfield      #5                  // Field overflow:[B
      48: arraylength
      49: iload_2
      50: if_icmpge     93
      53: aload_0
      54: getfield      #5                  // Field overflow:[B
      57: arraylength
      58: istore_3
      59: iload_3
      60: aload_0
      61: getfield      #4                  // Field overflowIncrementInBytes:I
      64: iadd
      65: istore_3
      66: iload_3
      67: iload_2
      68: if_icmplt     59
      71: aload_0
      72: aload_0
      73: getfield      #5                  // Field overflow:[B
      76: iload_3
      77: invokestatic  #26                 // Method java/util/Arrays.copyOf:([BI)[B
      80: putfield      #5                  // Field overflow:[B
      83: aload_0
      84: dup
      85: getfield      #8                  // Field overflowGrowCount:I
      88: iconst_1
      89: iadd
      90: putfield      #8                  // Field overflowGrowCount:I
      93: return

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field os:Ljava/io/OutputStream;
       4: invokevirtual #27                 // Method java/io/OutputStream.flush:()V
       7: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field os:Ljava/io/OutputStream;
       4: invokevirtual #28                 // Method java/io/OutputStream.close:()V
       7: return
}
