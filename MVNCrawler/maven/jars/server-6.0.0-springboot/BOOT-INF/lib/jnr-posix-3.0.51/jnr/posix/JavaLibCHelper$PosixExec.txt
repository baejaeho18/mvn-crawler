Compiled from "JavaLibCHelper.java"
class jnr.posix.JavaLibCHelper$PosixExec extends jnr.posix.util.ExecIt {
  private final java.util.concurrent.atomic.AtomicReference<jnr.constants.platform.Errno> errno;

  private final jnr.posix.JavaLibCHelper$ErrnoParsingOutputStream errorStream;

  public jnr.posix.JavaLibCHelper$PosixExec(jnr.posix.POSIXHandler);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method jnr/posix/util/ExecIt."<init>":(Ljnr/posix/POSIXHandler;)V
       5: aload_0
       6: new           #2                  // class java/util/concurrent/atomic/AtomicReference
       9: dup
      10: getstatic     #3                  // Field jnr/constants/platform/Errno.EINVAL:Ljnr/constants/platform/Errno;
      13: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      16: putfield      #5                  // Field errno:Ljava/util/concurrent/atomic/AtomicReference;
      19: aload_0
      20: new           #6                  // class jnr/posix/JavaLibCHelper$ErrnoParsingOutputStream
      23: dup
      24: aload_0
      25: getfield      #5                  // Field errno:Ljava/util/concurrent/atomic/AtomicReference;
      28: aconst_null
      29: invokespecial #7                  // Method jnr/posix/JavaLibCHelper$ErrnoParsingOutputStream."<init>":(Ljava/util/concurrent/atomic/AtomicReference;Ljnr/posix/JavaLibCHelper$1;)V
      32: putfield      #8                  // Field errorStream:Ljnr/posix/JavaLibCHelper$ErrnoParsingOutputStream;
      35: return

  private int parseResult(int);
    Code:
       0: iload_1
       1: ifne          6
       4: iload_1
       5: ireturn
       6: aload_0
       7: getfield      #5                  // Field errno:Ljava/util/concurrent/atomic/AtomicReference;
      10: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      13: checkcast     #10                 // class jnr/constants/platform/Errno
      16: invokestatic  #11                 // Method jnr/posix/JavaLibCHelper.errno:(Ljnr/constants/platform/Errno;)V
      19: iconst_m1
      20: ireturn

  public int runAndWait(java.lang.String...) throws java.io.IOException, java.lang.InterruptedException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field handler:Ljnr/posix/POSIXHandler;
       5: invokeinterface #13,  1           // InterfaceMethod jnr/posix/POSIXHandler.getOutputStream:()Ljava/io/PrintStream;
      10: aload_0
      11: getfield      #8                  // Field errorStream:Ljnr/posix/JavaLibCHelper$ErrnoParsingOutputStream;
      14: aload_1
      15: invokevirtual #14                 // Method runAndWait:(Ljava/io/OutputStream;Ljava/io/OutputStream;[Ljava/lang/String;)I
      18: ireturn

  public int runAndWait(java.io.OutputStream, java.lang.String...) throws java.io.IOException, java.lang.InterruptedException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: getfield      #8                  // Field errorStream:Ljnr/posix/JavaLibCHelper$ErrnoParsingOutputStream;
       6: aload_2
       7: invokevirtual #14                 // Method runAndWait:(Ljava/io/OutputStream;Ljava/io/OutputStream;[Ljava/lang/String;)I
      10: ireturn

  public int runAndWait(java.io.OutputStream, java.io.OutputStream, java.lang.String...) throws java.io.IOException, java.lang.InterruptedException;
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: aload_2
       4: aload_3
       5: invokespecial #15                 // Method jnr/posix/util/ExecIt.runAndWait:(Ljava/io/OutputStream;Ljava/io/OutputStream;[Ljava/lang/String;)I
       8: invokespecial #16                 // Method parseResult:(I)I
      11: ireturn
}
