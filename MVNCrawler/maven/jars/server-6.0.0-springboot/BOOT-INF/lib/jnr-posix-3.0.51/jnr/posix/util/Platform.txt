Compiled from "Platform.java"
public class jnr.posix.util.Platform {
  public static final java.lang.String OS_NAME;

  public static final java.lang.String OS_NAME_LC;

  private static final java.lang.String WINDOWS;

  private static final java.lang.String WINDOWS_9X;

  private static final java.lang.String WINDOWS_NT;

  private static final java.lang.String WINDOWS_20X;

  private static final java.lang.String WINDOWS_XP;

  private static final java.lang.String WINDOWS_SERVER;

  private static final java.lang.String WINDOWS_VISTA;

  private static final java.lang.String WINDOWS_7;

  private static final java.lang.String MAC_OS;

  private static final java.lang.String DARWIN;

  private static final java.lang.String FREEBSD;

  private static final java.lang.String DRAGONFLY;

  private static final java.lang.String OPENBSD;

  private static final java.lang.String LINUX;

  private static final java.lang.String SOLARIS;

  public static final boolean IS_WINDOWS;

  public static final boolean IS_WINDOWS_9X;

  public static final boolean IS_WINDOWS_NT;

  public static final boolean IS_WINDOWS_20X;

  public static final boolean IS_WINDOWS_XP;

  public static final boolean IS_WINDOWS_VISTA;

  public static final boolean IS_WINDOWS_SERVER;

  public static final boolean IS_WINDOWS_7;

  public static final boolean IS_MAC;

  public static final boolean IS_FREEBSD;

  public static final boolean IS_DRAGONFLY;

  public static final boolean IS_OPENBSD;

  public static final boolean IS_LINUX;

  public static final boolean IS_SOLARIS;

  public static final boolean IS_BSD;

  public static final boolean IS_32_BIT;

  public static final boolean IS_64_BIT;

  public static final java.lang.String ARCH;

  public static final java.util.Map<java.lang.String, java.lang.String> OS_NAMES;

  public jnr.posix.util.Platform();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static final java.lang.String envCommand();
    Code:
       0: getstatic     #2                  // Field IS_WINDOWS:Z
       3: ifeq          54
       6: getstatic     #3                  // Field IS_WINDOWS_9X:Z
       9: ifeq          15
      12: ldc           #4                  // String command.com /c set
      14: areturn
      15: getstatic     #5                  // Field IS_WINDOWS_NT:Z
      18: ifne          51
      21: getstatic     #6                  // Field IS_WINDOWS_20X:Z
      24: ifne          51
      27: getstatic     #7                  // Field IS_WINDOWS_XP:Z
      30: ifne          51
      33: getstatic     #8                  // Field IS_WINDOWS_SERVER:Z
      36: ifne          51
      39: getstatic     #9                  // Field IS_WINDOWS_VISTA:Z
      42: ifne          51
      45: getstatic     #10                 // Field IS_WINDOWS_7:Z
      48: ifeq          54
      51: ldc           #11                 // String cmd.exe /c set
      53: areturn
      54: ldc           #12                 // String env
      56: areturn

  public static java.lang.String getOSName();
    Code:
       0: getstatic     #13                 // Field OS_NAMES:Ljava/util/Map;
       3: getstatic     #14                 // Field OS_NAME:Ljava/lang/String;
       6: invokeinterface #15,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #16                 // class java/lang/String
      14: astore_0
      15: aload_0
      16: ifnonnull     25
      19: getstatic     #14                 // Field OS_NAME:Ljava/lang/String;
      22: goto          26
      25: aload_0
      26: areturn

  public static java.lang.String getProperty(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #17                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       5: areturn
       6: astore_2
       7: aload_1
       8: areturn
    Exception table:
       from    to  target type
           0     5     6   Class java/lang/SecurityException

  static {};
    Code:
       0: ldc           #19                 // String os.name
       2: invokestatic  #20                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: putstatic     #14                 // Field OS_NAME:Ljava/lang/String;
       8: getstatic     #14                 // Field OS_NAME:Ljava/lang/String;
      11: invokevirtual #21                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      14: putstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
      17: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
      20: ldc           #24                 // String windows
      22: invokevirtual #25                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      25: iconst_m1
      26: if_icmpeq     33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: putstatic     #2                  // Field IS_WINDOWS:Z
      37: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
      40: ldc           #26                 // String windows 9
      42: invokevirtual #25                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      45: iconst_m1
      46: if_icmple     53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: putstatic     #3                  // Field IS_WINDOWS_9X:Z
      57: getstatic     #2                  // Field IS_WINDOWS:Z
      60: ifeq          79
      63: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
      66: ldc           #27                 // String nt
      68: invokevirtual #25                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      71: iconst_m1
      72: if_icmple     79
      75: iconst_1
      76: goto          80
      79: iconst_0
      80: putstatic     #5                  // Field IS_WINDOWS_NT:Z
      83: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
      86: ldc           #28                 // String windows 2
      88: invokevirtual #25                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      91: iconst_m1
      92: if_icmple     99
      95: iconst_1
      96: goto          100
      99: iconst_0
     100: putstatic     #6                  // Field IS_WINDOWS_20X:Z
     103: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
     106: ldc           #29                 // String windows xp
     108: invokevirtual #25                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
     111: iconst_m1
     112: if_icmple     119
     115: iconst_1
     116: goto          120
     119: iconst_0
     120: putstatic     #7                  // Field IS_WINDOWS_XP:Z
     123: getstatic     #2                  // Field IS_WINDOWS:Z
     126: ifeq          145
     129: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
     132: ldc           #30                 // String vista
     134: invokevirtual #25                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
     137: iconst_m1
     138: if_icmple     145
     141: iconst_1
     142: goto          146
     145: iconst_0
     146: putstatic     #9                  // Field IS_WINDOWS_VISTA:Z
     149: getstatic     #2                  // Field IS_WINDOWS:Z
     152: ifeq          171
     155: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
     158: ldc           #31                 // String server
     160: invokevirtual #25                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
     163: iconst_m1
     164: if_icmple     171
     167: iconst_1
     168: goto          172
     171: iconst_0
     172: putstatic     #8                  // Field IS_WINDOWS_SERVER:Z
     175: getstatic     #2                  // Field IS_WINDOWS:Z
     178: ifeq          197
     181: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
     184: ldc           #32                 // String windows 7
     186: invokevirtual #25                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
     189: iconst_m1
     190: if_icmple     197
     193: iconst_1
     194: goto          198
     197: iconst_0
     198: putstatic     #10                 // Field IS_WINDOWS_7:Z
     201: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
     204: ldc           #33                 // String mac os
     206: invokevirtual #34                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     209: ifne          223
     212: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
     215: ldc           #35                 // String darwin
     217: invokevirtual #34                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     220: ifeq          227
     223: iconst_1
     224: goto          228
     227: iconst_0
     228: putstatic     #36                 // Field IS_MAC:Z
     231: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
     234: ldc           #37                 // String freebsd
     236: invokevirtual #34                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     239: putstatic     #38                 // Field IS_FREEBSD:Z
     242: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
     245: ldc           #39                 // String dragonfly
     247: invokevirtual #34                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     250: putstatic     #40                 // Field IS_DRAGONFLY:Z
     253: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
     256: ldc           #41                 // String openbsd
     258: invokevirtual #34                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     261: putstatic     #42                 // Field IS_OPENBSD:Z
     264: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
     267: ldc           #43                 // String linux
     269: invokevirtual #34                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     272: putstatic     #44                 // Field IS_LINUX:Z
     275: getstatic     #22                 // Field OS_NAME_LC:Ljava/lang/String;
     278: ldc           #45                 // String sunos
     280: invokevirtual #34                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     283: putstatic     #46                 // Field IS_SOLARIS:Z
     286: getstatic     #36                 // Field IS_MAC:Z
     289: ifne          310
     292: getstatic     #38                 // Field IS_FREEBSD:Z
     295: ifne          310
     298: getstatic     #42                 // Field IS_OPENBSD:Z
     301: ifne          310
     304: getstatic     #40                 // Field IS_DRAGONFLY:Z
     307: ifeq          314
     310: iconst_1
     311: goto          315
     314: iconst_0
     315: putstatic     #47                 // Field IS_BSD:Z
     318: ldc           #48                 // String 32
     320: ldc           #49                 // String sun.arch.data.model
     322: ldc           #48                 // String 32
     324: invokestatic  #50                 // Method getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     327: invokevirtual #51                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     330: putstatic     #52                 // Field IS_32_BIT:Z
     333: ldc           #53                 // String 64
     335: ldc           #49                 // String sun.arch.data.model
     337: ldc           #53                 // String 64
     339: invokestatic  #50                 // Method getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     342: invokevirtual #51                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     345: putstatic     #54                 // Field IS_64_BIT:Z
     348: ldc           #55                 // String os.arch
     350: invokestatic  #20                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     353: astore_0
     354: aload_0
     355: ldc           #56                 // String amd64
     357: invokevirtual #51                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     360: ifeq          366
     363: ldc           #57                 // String x86_64
     365: astore_0
     366: aload_0
     367: putstatic     #58                 // Field ARCH:Ljava/lang/String;
     370: new           #59                 // class java/util/HashMap
     373: dup
     374: invokespecial #60                 // Method java/util/HashMap."<init>":()V
     377: putstatic     #13                 // Field OS_NAMES:Ljava/util/Map;
     380: getstatic     #13                 // Field OS_NAMES:Ljava/util/Map;
     383: ldc           #61                 // String Mac OS X
     385: ldc           #35                 // String darwin
     387: invokeinterface #62,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     392: pop
     393: getstatic     #13                 // Field OS_NAMES:Ljava/util/Map;
     396: ldc           #63                 // String Darwin
     398: ldc           #35                 // String darwin
     400: invokeinterface #62,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     405: pop
     406: getstatic     #13                 // Field OS_NAMES:Ljava/util/Map;
     409: ldc           #64                 // String Linux
     411: ldc           #43                 // String linux
     413: invokeinterface #62,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     418: pop
     419: return
}
