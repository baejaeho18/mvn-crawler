Compiled from "JavaLibCHelper.java"
final class jnr.posix.JavaLibCHelper$ErrnoParsingOutputStream extends java.io.OutputStream {
  private final java.io.ByteArrayOutputStream baos;

  private final java.util.concurrent.atomic.AtomicReference<jnr.constants.platform.Errno> errno;

  static java.util.Map<java.util.regex.Pattern, jnr.constants.platform.Errno> errorPatterns;

  private jnr.posix.JavaLibCHelper$ErrnoParsingOutputStream(java.util.concurrent.atomic.AtomicReference<jnr.constants.platform.Errno>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: new           #3                  // class java/io/ByteArrayOutputStream
       8: dup
       9: invokespecial #4                  // Method java/io/ByteArrayOutputStream."<init>":()V
      12: putfield      #5                  // Field baos:Ljava/io/ByteArrayOutputStream;
      15: aload_0
      16: aload_1
      17: putfield      #6                  // Field errno:Ljava/util/concurrent/atomic/AtomicReference;
      20: return

  public void write(int) throws java.io.IOException;
    Code:
       0: iload_1
       1: bipush        13
       3: if_icmpeq     28
       6: iload_1
       7: bipush        10
       9: if_icmpeq     28
      12: iload_1
      13: iconst_m1
      14: if_icmpeq     28
      17: aload_0
      18: getfield      #5                  // Field baos:Ljava/io/ByteArrayOutputStream;
      21: iload_1
      22: invokevirtual #7                  // Method java/io/ByteArrayOutputStream.write:(I)V
      25: goto          58
      28: aload_0
      29: getfield      #5                  // Field baos:Ljava/io/ByteArrayOutputStream;
      32: invokevirtual #8                  // Method java/io/ByteArrayOutputStream.size:()I
      35: ifle          58
      38: aload_0
      39: getfield      #5                  // Field baos:Ljava/io/ByteArrayOutputStream;
      42: invokevirtual #9                  // Method java/io/ByteArrayOutputStream.toString:()Ljava/lang/String;
      45: astore_2
      46: aload_0
      47: getfield      #5                  // Field baos:Ljava/io/ByteArrayOutputStream;
      50: invokevirtual #10                 // Method java/io/ByteArrayOutputStream.reset:()V
      53: aload_0
      54: aload_2
      55: invokevirtual #11                 // Method parseError:(Ljava/lang/String;)V
      58: return

  void parseError(java.lang.String);
    Code:
       0: getstatic     #12                 // Field errorPatterns:Ljava/util/Map;
       3: invokeinterface #13,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       8: invokeinterface #14,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      13: astore_2
      14: aload_2
      15: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ifeq          68
      23: aload_2
      24: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      29: checkcast     #17                 // class java/util/Map$Entry
      32: astore_3
      33: aload_3
      34: invokeinterface #18,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      39: checkcast     #19                 // class java/util/regex/Pattern
      42: aload_1
      43: invokevirtual #20                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      46: invokevirtual #21                 // Method java/util/regex/Matcher.find:()Z
      49: ifeq          65
      52: aload_0
      53: getfield      #6                  // Field errno:Ljava/util/concurrent/atomic/AtomicReference;
      56: aload_3
      57: invokeinterface #22,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      62: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      65: goto          14
      68: return

  jnr.posix.JavaLibCHelper$ErrnoParsingOutputStream(java.util.concurrent.atomic.AtomicReference, jnr.posix.JavaLibCHelper$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Ljava/util/concurrent/atomic/AtomicReference;)V
       5: return

  static {};
    Code:
       0: new           #24                 // class java/util/HashMap
       3: dup
       4: invokespecial #25                 // Method java/util/HashMap."<init>":()V
       7: putstatic     #12                 // Field errorPatterns:Ljava/util/Map;
      10: getstatic     #12                 // Field errorPatterns:Ljava/util/Map;
      13: ldc           #26                 // String File exists
      15: invokestatic  #27                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      18: getstatic     #28                 // Field jnr/constants/platform/Errno.EEXIST:Ljnr/constants/platform/Errno;
      21: invokeinterface #29,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      26: pop
      27: getstatic     #12                 // Field errorPatterns:Ljava/util/Map;
      30: ldc           #30                 // String Operation not permitted
      32: invokestatic  #27                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      35: getstatic     #31                 // Field jnr/constants/platform/Errno.EPERM:Ljnr/constants/platform/Errno;
      38: invokeinterface #29,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      43: pop
      44: getstatic     #12                 // Field errorPatterns:Ljava/util/Map;
      47: ldc           #32                 // String No such file or directory
      49: invokestatic  #27                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      52: getstatic     #33                 // Field jnr/constants/platform/Errno.ENOENT:Ljnr/constants/platform/Errno;
      55: invokeinterface #29,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      60: pop
      61: getstatic     #12                 // Field errorPatterns:Ljava/util/Map;
      64: ldc           #34                 // String Input/output error
      66: invokestatic  #27                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      69: getstatic     #35                 // Field jnr/constants/platform/Errno.EIO:Ljnr/constants/platform/Errno;
      72: invokeinterface #29,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      77: pop
      78: getstatic     #12                 // Field errorPatterns:Ljava/util/Map;
      81: ldc           #36                 // String Not a directory
      83: invokestatic  #27                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      86: getstatic     #37                 // Field jnr/constants/platform/Errno.ENOTDIR:Ljnr/constants/platform/Errno;
      89: invokeinterface #29,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      94: pop
      95: getstatic     #12                 // Field errorPatterns:Ljava/util/Map;
      98: ldc           #38                 // String No space left on device
     100: invokestatic  #27                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     103: getstatic     #39                 // Field jnr/constants/platform/Errno.ENOSPC:Ljnr/constants/platform/Errno;
     106: invokeinterface #29,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     111: pop
     112: getstatic     #12                 // Field errorPatterns:Ljava/util/Map;
     115: ldc           #40                 // String Read-only file system
     117: invokestatic  #27                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     120: getstatic     #41                 // Field jnr/constants/platform/Errno.EROFS:Ljnr/constants/platform/Errno;
     123: invokeinterface #29,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     128: pop
     129: getstatic     #12                 // Field errorPatterns:Ljava/util/Map;
     132: ldc           #42                 // String Too many links
     134: invokestatic  #27                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     137: getstatic     #43                 // Field jnr/constants/platform/Errno.EMLINK:Ljnr/constants/platform/Errno;
     140: invokeinterface #29,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     145: pop
     146: return
}
