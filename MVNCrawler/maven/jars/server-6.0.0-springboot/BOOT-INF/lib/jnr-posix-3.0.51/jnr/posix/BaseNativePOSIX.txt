Compiled from "BaseNativePOSIX.java"
public abstract class jnr.posix.BaseNativePOSIX extends jnr.posix.NativePOSIX implements jnr.posix.POSIX {
  private final jnr.posix.LibC libc;

  private final jnr.posix.Crypt crypt;

  protected final jnr.posix.POSIXHandler handler;

  protected final jnr.posix.JavaLibCHelper helper;

  protected final java.util.Map<jnr.constants.platform.Signal, jnr.posix.SignalHandler> signalHandlers;

  public static final jnr.posix.BaseNativePOSIX$PointerConverter GROUP;

  public static final jnr.ffi.mapper.ToNativeConverter<jnr.posix.FileStat, jnr.ffi.Pointer> FileStatConverter;

  public static final jnr.ffi.mapper.ToNativeConverter<jnr.posix.NativeTimes, jnr.ffi.Pointer> TimesConverter;

  public static final jnr.ffi.mapper.ToNativeConverter<jnr.constants.Constant, java.lang.Integer> ConstantConverter;

  public static final jnr.ffi.mapper.ToNativeConverter<jnr.posix.MsgHdr, jnr.ffi.Pointer> MsgHdrConverter;

  protected jnr.posix.BaseNativePOSIX(jnr.posix.LibCProvider, jnr.posix.POSIXHandler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method jnr/posix/NativePOSIX."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field signalHandlers:Ljava/util/Map;
      15: aload_0
      16: aload_2
      17: putfield      #5                  // Field handler:Ljnr/posix/POSIXHandler;
      20: aload_0
      21: aload_1
      22: invokeinterface #6,  1            // InterfaceMethod jnr/posix/LibCProvider.getLibC:()Ljnr/posix/LibC;
      27: putfield      #7                  // Field libc:Ljnr/posix/LibC;
      30: aload_0
      31: aload_1
      32: invokeinterface #8,  1            // InterfaceMethod jnr/posix/LibCProvider.getCrypt:()Ljnr/posix/Crypt;
      37: putfield      #9                  // Field crypt:Ljnr/posix/Crypt;
      40: aload_0
      41: new           #10                 // class jnr/posix/JavaLibCHelper
      44: dup
      45: aload_2
      46: invokespecial #11                 // Method jnr/posix/JavaLibCHelper."<init>":(Ljnr/posix/POSIXHandler;)V
      49: putfield      #12                 // Field helper:Ljnr/posix/JavaLibCHelper;
      52: return

  public jnr.posix.util.ProcessMaker newProcessMaker(java.lang.String...);
    Code:
       0: new           #13                 // class jnr/posix/util/Java5ProcessMaker
       3: dup
       4: aload_0
       5: getfield      #5                  // Field handler:Ljnr/posix/POSIXHandler;
       8: aload_1
       9: invokespecial #14                 // Method jnr/posix/util/Java5ProcessMaker."<init>":(Ljnr/posix/POSIXHandler;[Ljava/lang/String;)V
      12: areturn

  public jnr.posix.util.ProcessMaker newProcessMaker();
    Code:
       0: new           #13                 // class jnr/posix/util/Java5ProcessMaker
       3: dup
       4: aload_0
       5: getfield      #5                  // Field handler:Ljnr/posix/POSIXHandler;
       8: invokespecial #15                 // Method jnr/posix/util/Java5ProcessMaker."<init>":(Ljnr/posix/POSIXHandler;)V
      11: areturn

  public final jnr.posix.LibC libc();
    Code:
       0: aload_0
       1: getfield      #7                  // Field libc:Ljnr/posix/LibC;
       4: areturn

  public final jnr.posix.Crypt crypt();
    Code:
       0: aload_0
       1: getfield      #9                  // Field crypt:Ljnr/posix/Crypt;
       4: areturn

  jnr.posix.POSIXHandler handler();
    Code:
       0: aload_0
       1: getfield      #5                  // Field handler:Ljnr/posix/POSIXHandler;
       4: areturn

  protected <T> T unimplementedNull();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method handler:()Ljnr/posix/POSIXHandler;
       4: invokestatic  #17                 // Method jnr/posix/util/MethodName.getCallerMethodName:()Ljava/lang/String;
       7: invokeinterface #18,  2           // InterfaceMethod jnr/posix/POSIXHandler.unimplementedError:(Ljava/lang/String;)V
      12: aconst_null
      13: areturn

  protected int unimplementedInt();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method handler:()Ljnr/posix/POSIXHandler;
       4: invokestatic  #17                 // Method jnr/posix/util/MethodName.getCallerMethodName:()Ljava/lang/String;
       7: invokeinterface #18,  2           // InterfaceMethod jnr/posix/POSIXHandler.unimplementedError:(Ljava/lang/String;)V
      12: iconst_m1
      13: ireturn

  public int chmod(java.lang.String, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: iload_2
       6: invokeinterface #20,  3           // InterfaceMethod jnr/posix/LibC.chmod:(Ljava/lang/CharSequence;I)I
      11: ireturn

  public int fchmod(int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: iload_2
       6: invokeinterface #21,  3           // InterfaceMethod jnr/posix/LibC.fchmod:(II)I
      11: ireturn

  public int chown(java.lang.String, int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokeinterface #22,  4           // InterfaceMethod jnr/posix/LibC.chown:(Ljava/lang/CharSequence;II)I
      12: ireturn

  public int fchown(int, int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: iload_2
       6: iload_3
       7: invokeinterface #23,  4           // InterfaceMethod jnr/posix/LibC.fchown:(III)I
      12: ireturn

  public java.lang.CharSequence crypt(java.lang.CharSequence, java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method crypt:()Ljnr/posix/Crypt;
       4: astore_3
       5: aload_3
       6: ifnonnull     15
       9: aload_1
      10: aload_2
      11: invokestatic  #25                 // Method jnr/posix/JavaLibCHelper.crypt:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/CharSequence;
      14: areturn
      15: aload_3
      16: aload_1
      17: aload_2
      18: invokeinterface #26,  3           // InterfaceMethod jnr/posix/Crypt.crypt:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/CharSequence;
      23: areturn

  public byte[] crypt(byte[], byte[]);
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method crypt:()Ljnr/posix/Crypt;
       4: astore_3
       5: aload_3
       6: ifnonnull     15
       9: aload_1
      10: aload_2
      11: invokestatic  #27                 // Method jnr/posix/JavaLibCHelper.crypt:([B[B)[B
      14: areturn
      15: aload_0
      16: invokevirtual #24                 // Method crypt:()Ljnr/posix/Crypt;
      19: aload_1
      20: aload_2
      21: invokeinterface #28,  3           // InterfaceMethod jnr/posix/Crypt.crypt:([B[B)Ljnr/ffi/Pointer;
      26: astore        4
      28: aload         4
      30: ifnonnull     35
      33: aconst_null
      34: areturn
      35: aload         4
      37: lconst_0
      38: iconst_0
      39: invokevirtual #29                 // Method jnr/ffi/Pointer.indexOf:(JB)I
      42: istore        5
      44: iload         5
      46: iconst_1
      47: iadd
      48: newarray       byte
      50: astore        6
      52: aload         4
      54: lconst_0
      55: aload         6
      57: iconst_0
      58: iload         5
      60: invokevirtual #30                 // Method jnr/ffi/Pointer.get:(J[BII)V
      63: aload         6
      65: areturn

  public int exec(java.lang.String, java.lang.String...);
    Code:
       0: aload_0
       1: getfield      #5                  // Field handler:Ljnr/posix/POSIXHandler;
       4: ldc           #31                 // String exec unimplemented
       6: invokeinterface #18,  2           // InterfaceMethod jnr/posix/POSIXHandler.unimplementedError:(Ljava/lang/String;)V
      11: iconst_m1
      12: ireturn

  public int exec(java.lang.String, java.lang.String[], java.lang.String[]);
    Code:
       0: aload_0
       1: getfield      #5                  // Field handler:Ljnr/posix/POSIXHandler;
       4: ldc           #31                 // String exec unimplemented
       6: invokeinterface #18,  2           // InterfaceMethod jnr/posix/POSIXHandler.unimplementedError:(Ljava/lang/String;)V
      11: iconst_m1
      12: ireturn

  public int execv(java.lang.String, java.lang.String[]);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: aload_2
       6: invokeinterface #32,  3           // InterfaceMethod jnr/posix/LibC.execv:(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)I
      11: ireturn

  public int execve(java.lang.String, java.lang.String[], java.lang.String[]);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokeinterface #33,  4           // InterfaceMethod jnr/posix/LibC.execve:(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)I
      12: ireturn

  public jnr.posix.FileStat fstat(java.io.FileDescriptor);
    Code:
       0: aload_0
       1: invokevirtual #34                 // Method allocateStat:()Ljnr/posix/FileStat;
       4: astore_2
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokevirtual #35                 // Method fstat:(Ljava/io/FileDescriptor;Ljnr/posix/FileStat;)I
      11: ifge          59
      14: aload_0
      15: getfield      #5                  // Field handler:Ljnr/posix/POSIXHandler;
      18: aload_0
      19: invokevirtual #36                 // Method errno:()I
      22: i2l
      23: invokestatic  #37                 // Method jnr/constants/platform/Errno.valueOf:(J)Ljnr/constants/platform/Errno;
      26: ldc           #38                 // String fstat
      28: new           #39                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #41                 // String
      37: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: aload_0
      41: getfield      #12                 // Field helper:Ljnr/posix/JavaLibCHelper;
      44: aload_1
      45: invokevirtual #43                 // Method jnr/posix/JavaLibCHelper.getfd:(Ljava/io/FileDescriptor;)I
      48: invokevirtual #44                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      51: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      54: invokeinterface #46,  4           // InterfaceMethod jnr/posix/POSIXHandler.error:(Ljnr/constants/platform/Errno;Ljava/lang/String;Ljava/lang/String;)V
      59: aload_2
      60: areturn

  public jnr.posix.FileStat fstat(int);
    Code:
       0: aload_0
       1: invokevirtual #34                 // Method allocateStat:()Ljnr/posix/FileStat;
       4: astore_2
       5: aload_0
       6: iload_1
       7: aload_2
       8: invokevirtual #47                 // Method fstat:(ILjnr/posix/FileStat;)I
      11: ifge          52
      14: aload_0
      15: getfield      #5                  // Field handler:Ljnr/posix/POSIXHandler;
      18: aload_0
      19: invokevirtual #36                 // Method errno:()I
      22: i2l
      23: invokestatic  #37                 // Method jnr/constants/platform/Errno.valueOf:(J)Ljnr/constants/platform/Errno;
      26: ldc           #38                 // String fstat
      28: new           #39                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #41                 // String
      37: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: iload_1
      41: invokevirtual #44                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      44: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokeinterface #46,  4           // InterfaceMethod jnr/posix/POSIXHandler.error:(Ljnr/constants/platform/Errno;Ljava/lang/String;Ljava/lang/String;)V
      52: aload_2
      53: areturn

  public int fstat(java.io.FileDescriptor, jnr.posix.FileStat);
    Code:
       0: aload_0
       1: getfield      #12                 // Field helper:Ljnr/posix/JavaLibCHelper;
       4: aload_1
       5: invokevirtual #43                 // Method jnr/posix/JavaLibCHelper.getfd:(Ljava/io/FileDescriptor;)I
       8: istore_3
       9: aload_0
      10: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
      13: iload_3
      14: aload_2
      15: invokeinterface #48,  3           // InterfaceMethod jnr/posix/LibC.fstat:(ILjnr/posix/FileStat;)I
      20: ireturn

  public int fstat(int, jnr.posix.FileStat);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: invokeinterface #48,  3           // InterfaceMethod jnr/posix/LibC.fstat:(ILjnr/posix/FileStat;)I
      11: ireturn

  public jnr.ffi.Pointer environ();
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method getRuntime:()Ljnr/ffi/Runtime;
       4: invokevirtual #50                 // Method jnr/ffi/Runtime.getMemoryManager:()Ljnr/ffi/provider/MemoryManager;
       7: aload_0
       8: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
      11: invokeinterface #51,  1           // InterfaceMethod jnr/posix/LibC.environ:()Ljnr/ffi/Variable;
      16: invokeinterface #52,  1           // InterfaceMethod jnr/ffi/Variable.get:()Ljava/lang/Object;
      21: checkcast     #53                 // class java/lang/Long
      24: invokevirtual #54                 // Method java/lang/Long.longValue:()J
      27: invokeinterface #55,  3           // InterfaceMethod jnr/ffi/provider/MemoryManager.newPointer:(J)Ljnr/ffi/Pointer;
      32: areturn

  public java.lang.String getenv(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: invokeinterface #56,  2           // InterfaceMethod jnr/posix/LibC.getenv:(Ljava/lang/CharSequence;)Ljava/lang/String;
      10: areturn

  public int getegid();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #57,  1           // InterfaceMethod jnr/posix/LibC.getegid:()I
       9: ireturn

  public int geteuid();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #58,  1           // InterfaceMethod jnr/posix/LibC.geteuid:()I
       9: ireturn

  public int getgid();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #59,  1           // InterfaceMethod jnr/posix/LibC.getgid:()I
       9: ireturn

  public int getdtablesize();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #60,  1           // InterfaceMethod jnr/posix/LibC.getdtablesize:()I
       9: ireturn

  public java.lang.String getlogin();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #61,  1           // InterfaceMethod jnr/posix/LibC.getlogin:()Ljava/lang/String;
       9: areturn

  public int getpgid();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #62,  1           // InterfaceMethod jnr/posix/LibC.getpgid:()I
       9: ireturn

  public int getpgrp();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #63,  1           // InterfaceMethod jnr/posix/LibC.getpgrp:()I
       9: ireturn

  public int getpid();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #64,  1           // InterfaceMethod jnr/posix/LibC.getpid:()I
       9: ireturn

  public int getppid();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #65,  1           // InterfaceMethod jnr/posix/LibC.getppid:()I
       9: ireturn

  public jnr.posix.Passwd getpwent();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #66,  1           // InterfaceMethod jnr/posix/LibC.getpwent:()Ljnr/posix/NativePasswd;
       9: areturn

  public jnr.posix.Passwd getpwuid(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #67,  2           // InterfaceMethod jnr/posix/LibC.getpwuid:(I)Ljnr/posix/NativePasswd;
      10: areturn

  public jnr.posix.Passwd getpwnam(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: invokeinterface #68,  2           // InterfaceMethod jnr/posix/LibC.getpwnam:(Ljava/lang/CharSequence;)Ljnr/posix/NativePasswd;
      10: areturn

  public jnr.posix.Group getgrent();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #69,  1           // InterfaceMethod jnr/posix/LibC.getgrent:()Ljnr/posix/NativeGroup;
       9: areturn

  public jnr.posix.Group getgrgid(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #70,  2           // InterfaceMethod jnr/posix/LibC.getgrgid:(I)Ljnr/posix/NativeGroup;
      10: areturn

  public jnr.posix.Group getgrnam(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: invokeinterface #71,  2           // InterfaceMethod jnr/posix/LibC.getgrnam:(Ljava/lang/CharSequence;)Ljnr/posix/NativeGroup;
      10: areturn

  public int setpwent();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #72,  1           // InterfaceMethod jnr/posix/LibC.setpwent:()I
       9: ireturn

  public int endpwent();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #73,  1           // InterfaceMethod jnr/posix/LibC.endpwent:()I
       9: ireturn

  public int setgrent();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #74,  1           // InterfaceMethod jnr/posix/LibC.setgrent:()I
       9: ireturn

  public int endgrent();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #75,  1           // InterfaceMethod jnr/posix/LibC.endgrent:()I
       9: ireturn

  public int getuid();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #76,  1           // InterfaceMethod jnr/posix/LibC.getuid:()I
       9: ireturn

  public int getrlimit(int, jnr.posix.RLimit);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: invokeinterface #77,  3           // InterfaceMethod jnr/posix/LibC.getrlimit:(ILjnr/posix/RLimit;)I
      11: ireturn

  public int getrlimit(int, jnr.ffi.Pointer);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: invokeinterface #78,  3           // InterfaceMethod jnr/posix/LibC.getrlimit:(ILjnr/ffi/Pointer;)I
      11: ireturn

  public jnr.posix.RLimit getrlimit(int);
    Code:
       0: new           #79                 // class jnr/posix/DefaultNativeRLimit
       3: dup
       4: aload_0
       5: invokevirtual #49                 // Method getRuntime:()Ljnr/ffi/Runtime;
       8: invokespecial #80                 // Method jnr/posix/DefaultNativeRLimit."<init>":(Ljnr/ffi/Runtime;)V
      11: astore_2
      12: aload_0
      13: iload_1
      14: aload_2
      15: invokevirtual #81                 // Method getrlimit:(ILjnr/posix/RLimit;)I
      18: ifge          40
      21: aload_0
      22: getfield      #5                  // Field handler:Ljnr/posix/POSIXHandler;
      25: aload_0
      26: invokevirtual #36                 // Method errno:()I
      29: i2l
      30: invokestatic  #37                 // Method jnr/constants/platform/Errno.valueOf:(J)Ljnr/constants/platform/Errno;
      33: ldc           #82                 // String rlim
      35: invokeinterface #83,  3           // InterfaceMethod jnr/posix/POSIXHandler.error:(Ljnr/constants/platform/Errno;Ljava/lang/String;)V
      40: aload_2
      41: areturn

  public int setrlimit(int, jnr.posix.RLimit);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: invokeinterface #84,  3           // InterfaceMethod jnr/posix/LibC.setrlimit:(ILjnr/posix/RLimit;)I
      11: ireturn

  public int setrlimit(int, jnr.ffi.Pointer);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: invokeinterface #85,  3           // InterfaceMethod jnr/posix/LibC.setrlimit:(ILjnr/ffi/Pointer;)I
      11: ireturn

  public int setrlimit(int, long, long);
    Code:
       0: new           #79                 // class jnr/posix/DefaultNativeRLimit
       3: dup
       4: aload_0
       5: invokevirtual #49                 // Method getRuntime:()Ljnr/ffi/Runtime;
       8: invokespecial #80                 // Method jnr/posix/DefaultNativeRLimit."<init>":(Ljnr/ffi/Runtime;)V
      11: astore        6
      13: aload         6
      15: lload_2
      16: lload         4
      18: invokevirtual #86                 // Method jnr/posix/RLimit.init:(JJ)V
      21: aload_0
      22: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
      25: iload_1
      26: aload         6
      28: invokeinterface #84,  3           // InterfaceMethod jnr/posix/LibC.setrlimit:(ILjnr/posix/RLimit;)I
      33: ireturn

  public int setegid(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #87,  2           // InterfaceMethod jnr/posix/LibC.setegid:(I)I
      10: ireturn

  public int seteuid(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #88,  2           // InterfaceMethod jnr/posix/LibC.seteuid:(I)I
      10: ireturn

  public int setgid(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #89,  2           // InterfaceMethod jnr/posix/LibC.setgid:(I)I
      10: ireturn

  public int getfd(java.io.FileDescriptor);
    Code:
       0: aload_0
       1: getfield      #12                 // Field helper:Ljnr/posix/JavaLibCHelper;
       4: aload_1
       5: invokevirtual #43                 // Method jnr/posix/JavaLibCHelper.getfd:(Ljava/io/FileDescriptor;)I
       8: ireturn

  public int getpgid(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #90,  2           // InterfaceMethod jnr/posix/LibC.getpgid:(I)I
      10: ireturn

  public int setpgid(int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: iload_2
       6: invokeinterface #91,  3           // InterfaceMethod jnr/posix/LibC.setpgid:(II)I
      11: ireturn

  public int setpgrp(int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: iload_2
       6: invokeinterface #92,  3           // InterfaceMethod jnr/posix/LibC.setpgrp:(II)I
      11: ireturn

  public int setsid();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #93,  1           // InterfaceMethod jnr/posix/LibC.setsid:()I
       9: ireturn

  public int setuid(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #94,  2           // InterfaceMethod jnr/posix/LibC.setuid:(I)I
      10: ireturn

  public int kill(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: i2l
       3: iload_2
       4: invokevirtual #95                 // Method kill:(JI)I
       7: ireturn

  public int kill(long, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: lload_1
       5: iload_3
       6: invokeinterface #96,  4           // InterfaceMethod jnr/posix/LibC.kill:(JI)I
      11: ireturn

  public jnr.posix.SignalHandler signal(jnr.constants.platform.Signal, jnr.posix.SignalHandler);
    Code:
       0: aload_0
       1: getfield      #4                  // Field signalHandlers:Ljava/util/Map;
       4: dup
       5: astore_3
       6: monitorenter
       7: aload_0
       8: getfield      #4                  // Field signalHandlers:Ljava/util/Map;
      11: aload_1
      12: invokeinterface #97,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #98                 // class jnr/posix/SignalHandler
      20: astore        4
      22: aload_0
      23: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
      26: aload_1
      27: invokevirtual #99                 // Method jnr/constants/platform/Signal.intValue:()I
      30: new           #100                // class jnr/posix/BaseNativePOSIX$1
      33: dup
      34: aload_0
      35: aload_2
      36: invokespecial #101                // Method jnr/posix/BaseNativePOSIX$1."<init>":(Ljnr/posix/BaseNativePOSIX;Ljnr/posix/SignalHandler;)V
      39: invokeinterface #102,  3          // InterfaceMethod jnr/posix/LibC.signal:(ILjnr/posix/LibC$LibCSignalHandler;)J
      44: lstore        5
      46: lload         5
      48: ldc2_w        #103                // long -1l
      51: lcmp
      52: ifeq          67
      55: aload_0
      56: getfield      #4                  // Field signalHandlers:Ljava/util/Map;
      59: aload_1
      60: aload_2
      61: invokeinterface #105,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      66: pop
      67: aload         4
      69: aload_3
      70: monitorexit
      71: areturn
      72: astore        7
      74: aload_3
      75: monitorexit
      76: aload         7
      78: athrow
    Exception table:
       from    to  target type
           7    71    72   any
          72    76    72   any

  public int raise(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #106,  2          // InterfaceMethod jnr/posix/LibC.raise:(I)I
      10: ireturn

  public int lchmod(java.lang.String, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: iload_2
       6: invokeinterface #107,  3          // InterfaceMethod jnr/posix/LibC.lchmod:(Ljava/lang/CharSequence;I)I
      11: ireturn
      12: astore_3
      13: aload_0
      14: invokevirtual #109                // Method unimplementedInt:()I
      17: ireturn
    Exception table:
       from    to  target type
           0    11    12   Class java/lang/UnsatisfiedLinkError

  public int lchown(java.lang.String, int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokeinterface #110,  4          // InterfaceMethod jnr/posix/LibC.lchown:(Ljava/lang/CharSequence;II)I
      12: ireturn
      13: astore        4
      15: aload_0
      16: invokevirtual #109                // Method unimplementedInt:()I
      19: ireturn
    Exception table:
       from    to  target type
           0    12    13   Class java/lang/UnsatisfiedLinkError

  public int link(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: aload_2
       6: invokeinterface #111,  3          // InterfaceMethod jnr/posix/LibC.link:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)I
      11: ireturn

  public jnr.posix.FileStat lstat(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #34                 // Method allocateStat:()Ljnr/posix/FileStat;
       4: astore_2
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokevirtual #112                // Method lstat:(Ljava/lang/String;Ljnr/posix/FileStat;)I
      11: ifge          34
      14: aload_0
      15: getfield      #5                  // Field handler:Ljnr/posix/POSIXHandler;
      18: aload_0
      19: invokevirtual #36                 // Method errno:()I
      22: i2l
      23: invokestatic  #37                 // Method jnr/constants/platform/Errno.valueOf:(J)Ljnr/constants/platform/Errno;
      26: ldc           #113                // String lstat
      28: aload_1
      29: invokeinterface #46,  4           // InterfaceMethod jnr/posix/POSIXHandler.error:(Ljnr/constants/platform/Errno;Ljava/lang/String;Ljava/lang/String;)V
      34: aload_2
      35: areturn

  public int lstat(java.lang.String, jnr.posix.FileStat);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: aload_2
       6: invokeinterface #114,  3          // InterfaceMethod jnr/posix/LibC.lstat:(Ljava/lang/CharSequence;Ljnr/posix/FileStat;)I
      11: ireturn

  public int mkdir(java.lang.String, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: iload_2
       6: invokeinterface #115,  3          // InterfaceMethod jnr/posix/LibC.mkdir:(Ljava/lang/CharSequence;I)I
      11: istore_3
      12: iload_3
      13: ifge          40
      16: aload_0
      17: invokevirtual #36                 // Method errno:()I
      20: istore        4
      22: aload_0
      23: getfield      #5                  // Field handler:Ljnr/posix/POSIXHandler;
      26: iload         4
      28: i2l
      29: invokestatic  #37                 // Method jnr/constants/platform/Errno.valueOf:(J)Ljnr/constants/platform/Errno;
      32: ldc           #116                // String mkdir
      34: aload_1
      35: invokeinterface #46,  4           // InterfaceMethod jnr/posix/POSIXHandler.error:(Ljnr/constants/platform/Errno;Ljava/lang/String;Ljava/lang/String;)V
      40: iload_3
      41: ireturn

  public int rmdir(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: invokeinterface #117,  2          // InterfaceMethod jnr/posix/LibC.rmdir:(Ljava/lang/CharSequence;)I
      10: istore_2
      11: iload_2
      12: ifge          35
      15: aload_0
      16: getfield      #5                  // Field handler:Ljnr/posix/POSIXHandler;
      19: aload_0
      20: invokevirtual #36                 // Method errno:()I
      23: i2l
      24: invokestatic  #37                 // Method jnr/constants/platform/Errno.valueOf:(J)Ljnr/constants/platform/Errno;
      27: ldc           #118                // String rmdir
      29: aload_1
      30: invokeinterface #46,  4           // InterfaceMethod jnr/posix/POSIXHandler.error:(Ljnr/constants/platform/Errno;Ljava/lang/String;Ljava/lang/String;)V
      35: iload_2
      36: ireturn

  public int setenv(java.lang.String, java.lang.String, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: aload_2
       6: iload_3
       7: invokeinterface #119,  4          // InterfaceMethod jnr/posix/LibC.setenv:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;I)I
      12: ireturn

  public jnr.posix.FileStat stat(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #34                 // Method allocateStat:()Ljnr/posix/FileStat;
       4: astore_2
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokevirtual #120                // Method stat:(Ljava/lang/String;Ljnr/posix/FileStat;)I
      11: ifge          34
      14: aload_0
      15: getfield      #5                  // Field handler:Ljnr/posix/POSIXHandler;
      18: aload_0
      19: invokevirtual #36                 // Method errno:()I
      22: i2l
      23: invokestatic  #37                 // Method jnr/constants/platform/Errno.valueOf:(J)Ljnr/constants/platform/Errno;
      26: ldc           #121                // String stat
      28: aload_1
      29: invokeinterface #46,  4           // InterfaceMethod jnr/posix/POSIXHandler.error:(Ljnr/constants/platform/Errno;Ljava/lang/String;Ljava/lang/String;)V
      34: aload_2
      35: areturn

  public int stat(java.lang.String, jnr.posix.FileStat);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: aload_2
       6: invokeinterface #122,  3          // InterfaceMethod jnr/posix/LibC.stat:(Ljava/lang/CharSequence;Ljnr/posix/FileStat;)I
      11: ireturn

  public int symlink(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: aload_2
       6: invokeinterface #123,  3          // InterfaceMethod jnr/posix/LibC.symlink:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)I
      11: ireturn

  public java.lang.String readlink(java.lang.String) throws java.io.IOException;
    Code:
       0: sipush        1024
       3: invokestatic  #124                // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
       6: astore_2
       7: aload_0
       8: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
      11: aload_1
      12: aload_2
      13: aload_2
      14: invokevirtual #125                // Method java/nio/ByteBuffer.capacity:()I
      17: invokeinterface #126,  4          // InterfaceMethod jnr/posix/LibC.readlink:(Ljava/lang/CharSequence;Ljava/nio/ByteBuffer;I)I
      22: istore_3
      23: iload_3
      24: iconst_m1
      25: if_icmpne     30
      28: aconst_null
      29: areturn
      30: aload_2
      31: iconst_0
      32: invokevirtual #127                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      35: pop
      36: aload_2
      37: iload_3
      38: invokevirtual #128                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      41: pop
      42: invokestatic  #129                // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;
      45: aload_2
      46: invokevirtual #130                // Method java/nio/charset/Charset.decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;
      49: invokevirtual #131                // Method java/nio/CharBuffer.toString:()Ljava/lang/String;
      52: areturn

  public int readlink(java.lang.CharSequence, byte[], int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: aload_2
       6: iload_3
       7: invokeinterface #132,  4          // InterfaceMethod jnr/posix/LibC.readlink:(Ljava/lang/CharSequence;[BI)I
      12: ireturn

  public int readlink(java.lang.CharSequence, java.nio.ByteBuffer, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: aload_2
       6: iload_3
       7: invokeinterface #126,  4          // InterfaceMethod jnr/posix/LibC.readlink:(Ljava/lang/CharSequence;Ljava/nio/ByteBuffer;I)I
      12: ireturn

  public int readlink(java.lang.CharSequence, jnr.ffi.Pointer, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: aload_2
       6: iload_3
       7: invokeinterface #133,  4          // InterfaceMethod jnr/posix/LibC.readlink:(Ljava/lang/CharSequence;Ljnr/ffi/Pointer;I)I
      12: ireturn

  public int unsetenv(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: invokeinterface #134,  2          // InterfaceMethod jnr/posix/LibC.unsetenv:(Ljava/lang/CharSequence;)I
      10: ireturn

  public int umask(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #135,  2          // InterfaceMethod jnr/posix/LibC.umask:(I)I
      10: ireturn

  public int utimes(java.lang.String, long[], long[]);
    Code:
       0: aconst_null
       1: astore        4
       3: aload_2
       4: ifnull        42
       7: aload_3
       8: ifnull        42
      11: aload_0
      12: invokevirtual #49                 // Method getRuntime:()Ljnr/ffi/Runtime;
      15: ldc           #136                // class jnr/posix/DefaultNativeTimeval
      17: iconst_2
      18: invokestatic  #137                // Method jnr/ffi/Struct.arrayOf:(Ljnr/ffi/Runtime;Ljava/lang/Class;I)[Ljnr/ffi/Struct;
      21: checkcast     #138                // class "[Ljnr/posix/Timeval;"
      24: astore        4
      26: aload         4
      28: iconst_0
      29: aaload
      30: aload_2
      31: invokevirtual #139                // Method jnr/posix/Timeval.setTime:([J)V
      34: aload         4
      36: iconst_1
      37: aaload
      38: aload_3
      39: invokevirtual #139                // Method jnr/posix/Timeval.setTime:([J)V
      42: aload_0
      43: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
      46: aload_1
      47: aload         4
      49: invokeinterface #140,  3          // InterfaceMethod jnr/posix/LibC.utimes:(Ljava/lang/CharSequence;[Ljnr/posix/Timeval;)I
      54: ireturn

  public int utimes(java.lang.String, jnr.ffi.Pointer);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: aload_2
       6: invokeinterface #141,  3          // InterfaceMethod jnr/posix/LibC.utimes:(Ljava/lang/String;Ljnr/ffi/Pointer;)I
      11: ireturn

  public int futimes(int, long[], long[]);
    Code:
       0: aconst_null
       1: astore        4
       3: aload_2
       4: ifnull        42
       7: aload_3
       8: ifnull        42
      11: aload_0
      12: invokevirtual #49                 // Method getRuntime:()Ljnr/ffi/Runtime;
      15: ldc           #136                // class jnr/posix/DefaultNativeTimeval
      17: iconst_2
      18: invokestatic  #137                // Method jnr/ffi/Struct.arrayOf:(Ljnr/ffi/Runtime;Ljava/lang/Class;I)[Ljnr/ffi/Struct;
      21: checkcast     #138                // class "[Ljnr/posix/Timeval;"
      24: astore        4
      26: aload         4
      28: iconst_0
      29: aaload
      30: aload_2
      31: invokevirtual #139                // Method jnr/posix/Timeval.setTime:([J)V
      34: aload         4
      36: iconst_1
      37: aaload
      38: aload_3
      39: invokevirtual #139                // Method jnr/posix/Timeval.setTime:([J)V
      42: aload_0
      43: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
      46: iload_1
      47: aload         4
      49: invokeinterface #142,  3          // InterfaceMethod jnr/posix/LibC.futimes:(I[Ljnr/posix/Timeval;)I
      54: ireturn

  public int lutimes(java.lang.String, long[], long[]);
    Code:
       0: aconst_null
       1: astore        4
       3: aload_2
       4: ifnull        42
       7: aload_3
       8: ifnull        42
      11: aload_0
      12: invokevirtual #49                 // Method getRuntime:()Ljnr/ffi/Runtime;
      15: ldc           #136                // class jnr/posix/DefaultNativeTimeval
      17: iconst_2
      18: invokestatic  #137                // Method jnr/ffi/Struct.arrayOf:(Ljnr/ffi/Runtime;Ljava/lang/Class;I)[Ljnr/ffi/Struct;
      21: checkcast     #138                // class "[Ljnr/posix/Timeval;"
      24: astore        4
      26: aload         4
      28: iconst_0
      29: aaload
      30: aload_2
      31: invokevirtual #139                // Method jnr/posix/Timeval.setTime:([J)V
      34: aload         4
      36: iconst_1
      37: aaload
      38: aload_3
      39: invokevirtual #139                // Method jnr/posix/Timeval.setTime:([J)V
      42: aload_0
      43: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
      46: aload_1
      47: aload         4
      49: invokeinterface #143,  3          // InterfaceMethod jnr/posix/LibC.lutimes:(Ljava/lang/CharSequence;[Ljnr/posix/Timeval;)I
      54: ireturn

  public int utimensat(int, java.lang.String, long[], long[], int);
    Code:
       0: aconst_null
       1: astore        6
       3: aload_3
       4: ifnull        44
       7: aload         4
       9: ifnull        44
      12: aload_0
      13: invokevirtual #49                 // Method getRuntime:()Ljnr/ffi/Runtime;
      16: ldc           #144                // class jnr/posix/DefaultNativeTimespec
      18: iconst_2
      19: invokestatic  #137                // Method jnr/ffi/Struct.arrayOf:(Ljnr/ffi/Runtime;Ljava/lang/Class;I)[Ljnr/ffi/Struct;
      22: checkcast     #145                // class "[Ljnr/posix/Timespec;"
      25: astore        6
      27: aload         6
      29: iconst_0
      30: aaload
      31: aload_3
      32: invokevirtual #146                // Method jnr/posix/Timespec.setTime:([J)V
      35: aload         6
      37: iconst_1
      38: aaload
      39: aload         4
      41: invokevirtual #146                // Method jnr/posix/Timespec.setTime:([J)V
      44: aload_0
      45: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
      48: iload_1
      49: aload_2
      50: aload         6
      52: iload         5
      54: invokeinterface #147,  5          // InterfaceMethod jnr/posix/LibC.utimensat:(ILjava/lang/String;[Ljnr/posix/Timespec;I)I
      59: ireturn

  public int utimensat(int, java.lang.String, jnr.ffi.Pointer, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: aload_3
       7: iload         4
       9: invokeinterface #148,  5          // InterfaceMethod jnr/posix/LibC.utimensat:(ILjava/lang/String;Ljnr/ffi/Pointer;I)I
      14: ireturn

  public int futimens(int, long[], long[]);
    Code:
       0: aconst_null
       1: astore        4
       3: aload_2
       4: ifnull        42
       7: aload_3
       8: ifnull        42
      11: aload_0
      12: invokevirtual #49                 // Method getRuntime:()Ljnr/ffi/Runtime;
      15: ldc           #144                // class jnr/posix/DefaultNativeTimespec
      17: iconst_2
      18: invokestatic  #137                // Method jnr/ffi/Struct.arrayOf:(Ljnr/ffi/Runtime;Ljava/lang/Class;I)[Ljnr/ffi/Struct;
      21: checkcast     #145                // class "[Ljnr/posix/Timespec;"
      24: astore        4
      26: aload         4
      28: iconst_0
      29: aaload
      30: aload_2
      31: invokevirtual #146                // Method jnr/posix/Timespec.setTime:([J)V
      34: aload         4
      36: iconst_1
      37: aaload
      38: aload_3
      39: invokevirtual #146                // Method jnr/posix/Timespec.setTime:([J)V
      42: aload_0
      43: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
      46: iload_1
      47: aload         4
      49: invokeinterface #149,  3          // InterfaceMethod jnr/posix/LibC.futimens:(I[Ljnr/posix/Timespec;)I
      54: ireturn

  public int futimens(int, jnr.ffi.Pointer);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: invokeinterface #150,  3          // InterfaceMethod jnr/posix/LibC.futimens:(ILjnr/ffi/Pointer;)I
      11: ireturn

  public int fork();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: invokeinterface #151,  1          // InterfaceMethod jnr/posix/LibC.fork:()I
       9: ireturn

  public int waitpid(int, int[], int);
    Code:
       0: aload_0
       1: iload_1
       2: i2l
       3: aload_2
       4: iload_3
       5: invokevirtual #152                // Method waitpid:(J[II)I
       8: ireturn

  public int waitpid(long, int[], int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: lload_1
       5: aload_3
       6: iload         4
       8: invokeinterface #153,  5          // InterfaceMethod jnr/posix/LibC.waitpid:(J[II)I
      13: ireturn

  public int wait(int[]);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: invokeinterface #154,  2          // InterfaceMethod jnr/posix/LibC.wait:([I)I
      10: ireturn

  public int getpriority(int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: iload_2
       6: invokeinterface #155,  3          // InterfaceMethod jnr/posix/LibC.getpriority:(II)I
      11: ireturn

  public int setpriority(int, int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: iload_2
       6: iload_3
       7: invokeinterface #156,  4          // InterfaceMethod jnr/posix/LibC.setpriority:(III)I
      12: ireturn

  public boolean isatty(java.io.FileDescriptor);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field helper:Ljnr/posix/JavaLibCHelper;
       5: aload_1
       6: invokevirtual #43                 // Method jnr/posix/JavaLibCHelper.getfd:(Ljava/io/FileDescriptor;)I
       9: invokevirtual #157                // Method isatty:(I)I
      12: ifeq          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  public int isatty(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #158,  2          // InterfaceMethod jnr/posix/LibC.isatty:(I)I
      10: ireturn

  public int errno();
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method getRuntime:()Ljnr/ffi/Runtime;
       4: invokestatic  #159                // Method jnr/ffi/LastError.getLastError:(Ljnr/ffi/Runtime;)I
       7: ireturn

  public void errno(int);
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method getRuntime:()Ljnr/ffi/Runtime;
       4: iload_1
       5: invokestatic  #160                // Method jnr/ffi/LastError.setLastError:(Ljnr/ffi/Runtime;I)V
       8: return

  public int chdir(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: invokeinterface #161,  2          // InterfaceMethod jnr/posix/LibC.chdir:(Ljava/lang/CharSequence;)I
      10: ireturn

  public boolean isNative();
    Code:
       0: iconst_1
       1: ireturn

  public long posix_spawnp(java.lang.String, java.util.Collection<? extends jnr.posix.SpawnFileAction>, java.lang.CharSequence[], java.lang.CharSequence[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: aload_3
       5: aload         4
       7: invokevirtual #162                // Method posix_spawnp:(Ljava/lang/String;Ljava/util/Collection;Ljava/util/Collection;[Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)J
      10: lreturn

  public long posix_spawnp(java.lang.String, java.util.Collection<? extends jnr.posix.SpawnFileAction>, java.util.Collection<? extends java.lang.CharSequence>, java.util.Collection<? extends java.lang.CharSequence>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: aload_3
       5: aload         4
       7: invokevirtual #163                // Method posix_spawnp:(Ljava/lang/String;Ljava/util/Collection;Ljava/util/Collection;Ljava/util/Collection;Ljava/util/Collection;)J
      10: lreturn

  public long posix_spawnp(java.lang.String, java.util.Collection<? extends jnr.posix.SpawnFileAction>, java.util.Collection<? extends jnr.posix.SpawnAttribute>, java.util.Collection<? extends java.lang.CharSequence>, java.util.Collection<? extends java.lang.CharSequence>);
    Code:
       0: aload         4
       2: invokeinterface #164,  1          // InterfaceMethod java/util/Collection.size:()I
       7: anewarray     #165                // class java/lang/CharSequence
      10: astore        6
      12: aload         4
      14: aload         6
      16: invokeinterface #166,  2          // InterfaceMethod java/util/Collection.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      21: pop
      22: aload         5
      24: invokeinterface #164,  1          // InterfaceMethod java/util/Collection.size:()I
      29: anewarray     #165                // class java/lang/CharSequence
      32: astore        7
      34: aload         5
      36: aload         7
      38: invokeinterface #166,  2          // InterfaceMethod java/util/Collection.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      43: pop
      44: aload_0
      45: aload_1
      46: aload_2
      47: aload_3
      48: aload         6
      50: aload         7
      52: invokevirtual #162                // Method posix_spawnp:(Ljava/lang/String;Ljava/util/Collection;Ljava/util/Collection;[Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)J
      55: lreturn

  public long posix_spawnp(java.lang.String, java.util.Collection<? extends jnr.posix.SpawnFileAction>, java.util.Collection<? extends jnr.posix.SpawnAttribute>, java.lang.CharSequence[], java.lang.CharSequence[]);
    Code:
       0: new           #167                // class jnr/ffi/byref/NumberByReference
       3: dup
       4: getstatic     #168                // Field jnr/ffi/TypeAlias.pid_t:Ljnr/ffi/TypeAlias;
       7: invokespecial #169                // Method jnr/ffi/byref/NumberByReference."<init>":(Ljnr/ffi/TypeAlias;)V
      10: astore        6
      12: aload_2
      13: ifnull        33
      16: aload_2
      17: invokeinterface #170,  1          // InterfaceMethod java/util/Collection.isEmpty:()Z
      22: ifne          33
      25: aload_0
      26: aload_2
      27: invokespecial #171                // Method nativeFileActions:(Ljava/util/Collection;)Ljnr/ffi/Pointer;
      30: goto          34
      33: aconst_null
      34: astore        7
      36: aload_3
      37: ifnull        57
      40: aload_3
      41: invokeinterface #170,  1          // InterfaceMethod java/util/Collection.isEmpty:()Z
      46: ifne          57
      49: aload_0
      50: aload_3
      51: invokespecial #172                // Method nativeSpawnAttributes:(Ljava/util/Collection;)Ljnr/ffi/Pointer;
      54: goto          58
      57: aconst_null
      58: astore        8
      60: aload_0
      61: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
      64: checkcast     #173                // class jnr/posix/UnixLibC
      67: aload         6
      69: aload_1
      70: aload         7
      72: aload         8
      74: aload         4
      76: aload         5
      78: invokeinterface #174,  7          // InterfaceMethod jnr/posix/UnixLibC.posix_spawnp:(Ljnr/ffi/byref/ByReference;Ljava/lang/CharSequence;Ljnr/ffi/Pointer;Ljnr/ffi/Pointer;[Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)I
      83: i2l
      84: lstore        9
      86: aload         7
      88: ifnull        106
      91: aload_0
      92: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
      95: checkcast     #173                // class jnr/posix/UnixLibC
      98: aload         7
     100: invokeinterface #175,  2          // InterfaceMethod jnr/posix/UnixLibC.posix_spawn_file_actions_destroy:(Ljnr/ffi/Pointer;)I
     105: pop
     106: aload         8
     108: ifnull        174
     111: aload_0
     112: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
     115: checkcast     #173                // class jnr/posix/UnixLibC
     118: aload         8
     120: invokeinterface #176,  2          // InterfaceMethod jnr/posix/UnixLibC.posix_spawnattr_destroy:(Ljnr/ffi/Pointer;)I
     125: pop
     126: goto          174
     129: astore        11
     131: aload         7
     133: ifnull        151
     136: aload_0
     137: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
     140: checkcast     #173                // class jnr/posix/UnixLibC
     143: aload         7
     145: invokeinterface #175,  2          // InterfaceMethod jnr/posix/UnixLibC.posix_spawn_file_actions_destroy:(Ljnr/ffi/Pointer;)I
     150: pop
     151: aload         8
     153: ifnull        171
     156: aload_0
     157: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
     160: checkcast     #173                // class jnr/posix/UnixLibC
     163: aload         8
     165: invokeinterface #176,  2          // InterfaceMethod jnr/posix/UnixLibC.posix_spawnattr_destroy:(Ljnr/ffi/Pointer;)I
     170: pop
     171: aload         11
     173: athrow
     174: lload         9
     176: lconst_0
     177: lcmp
     178: ifeq          185
     181: ldc2_w        #103                // long -1l
     184: lreturn
     185: aload         6
     187: invokevirtual #177                // Method jnr/ffi/byref/NumberByReference.longValue:()J
     190: lreturn
    Exception table:
       from    to  target type
          60    86   129   any
         129   131   129   any

  public int flock(int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: iload_2
       6: invokeinterface #178,  3          // InterfaceMethod jnr/posix/LibC.flock:(II)I
      11: ireturn

  public int dup(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #179,  2          // InterfaceMethod jnr/posix/LibC.dup:(I)I
      10: ireturn

  public int dup2(int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: iload_2
       6: invokeinterface #180,  3          // InterfaceMethod jnr/posix/LibC.dup2:(II)I
      11: ireturn

  public int fcntlInt(int, jnr.constants.platform.Fcntl, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: invokevirtual #181                // Method jnr/constants/platform/Fcntl.intValue:()I
       9: iload_3
      10: invokeinterface #182,  4          // InterfaceMethod jnr/posix/LibC.fcntl:(III)I
      15: ireturn

  public int fcntl(int, jnr.constants.platform.Fcntl);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: invokevirtual #181                // Method jnr/constants/platform/Fcntl.intValue:()I
       9: invokeinterface #183,  3          // InterfaceMethod jnr/posix/LibC.fcntl:(II)I
      14: ireturn

  public int fcntl(int, jnr.constants.platform.Fcntl, int...);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: invokevirtual #181                // Method jnr/constants/platform/Fcntl.intValue:()I
       9: invokeinterface #183,  3          // InterfaceMethod jnr/posix/LibC.fcntl:(II)I
      14: ireturn

  public int access(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: iload_2
       6: invokeinterface #184,  3          // InterfaceMethod jnr/posix/LibC.access:(Ljava/lang/CharSequence;I)I
      11: ireturn

  public int close(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #185,  2          // InterfaceMethod jnr/posix/LibC.close:(I)I
      10: ireturn

  private jnr.ffi.Pointer nativeFileActions(java.util.Collection<? extends jnr.posix.SpawnFileAction>);
    Code:
       0: aload_0
       1: invokevirtual #186                // Method allocatePosixSpawnFileActions:()Ljnr/ffi/Pointer;
       4: astore_2
       5: aload_0
       6: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       9: checkcast     #173                // class jnr/posix/UnixLibC
      12: aload_2
      13: invokeinterface #187,  2          // InterfaceMethod jnr/posix/UnixLibC.posix_spawn_file_actions_init:(Ljnr/ffi/Pointer;)I
      18: pop
      19: aload_1
      20: invokeinterface #188,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      25: astore_3
      26: aload_3
      27: invokeinterface #189,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      32: ifeq          57
      35: aload_3
      36: invokeinterface #190,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      41: checkcast     #191                // class jnr/posix/SpawnFileAction
      44: astore        4
      46: aload         4
      48: aload_0
      49: aload_2
      50: invokevirtual #192                // Method jnr/posix/SpawnFileAction.act:(Ljnr/posix/POSIX;Ljnr/ffi/Pointer;)Z
      53: pop
      54: goto          26
      57: aload_2
      58: areturn

  private jnr.ffi.Pointer nativeSpawnAttributes(java.util.Collection<? extends jnr.posix.SpawnAttribute>);
    Code:
       0: aload_0
       1: invokevirtual #193                // Method allocatePosixSpawnattr:()Ljnr/ffi/Pointer;
       4: astore_2
       5: aload_0
       6: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       9: checkcast     #173                // class jnr/posix/UnixLibC
      12: aload_2
      13: invokeinterface #194,  2          // InterfaceMethod jnr/posix/UnixLibC.posix_spawnattr_init:(Ljnr/ffi/Pointer;)I
      18: pop
      19: aload_1
      20: invokeinterface #188,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      25: astore_3
      26: aload_3
      27: invokeinterface #189,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      32: ifeq          57
      35: aload_3
      36: invokeinterface #190,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      41: checkcast     #195                // class jnr/posix/SpawnAttribute
      44: astore        4
      46: aload         4
      48: aload_0
      49: aload_2
      50: invokevirtual #196                // Method jnr/posix/SpawnAttribute.set:(Ljnr/posix/POSIX;Ljnr/ffi/Pointer;)Z
      53: pop
      54: goto          26
      57: aload_2
      58: areturn

  public abstract jnr.posix.FileStat allocateStat();

  public long sysconf(jnr.constants.platform.Sysconf);
    Code:
       0: getstatic     #197                // Field jnr/posix/BaseNativePOSIX$7.$SwitchMap$jnr$constants$platform$Sysconf:[I
       3: aload_1
       4: invokevirtual #198                // Method jnr/constants/platform/Sysconf.ordinal:()I
       7: iaload
       8: lookupswitch  { // 1
                     1: 28
               default: 32
          }
      28: ldc2_w        #200                // long 1000l
      31: lreturn
      32: aload_0
      33: getstatic     #202                // Field jnr/constants/platform/Errno.EOPNOTSUPP:Ljnr/constants/platform/Errno;
      36: invokevirtual #203                // Method jnr/constants/platform/Errno.intValue:()I
      39: invokevirtual #204                // Method errno:(I)V
      42: ldc2_w        #103                // long -1l
      45: lreturn

  public jnr.posix.Times times();
    Code:
       0: new           #199                // class jnr/posix/JavaTimes
       3: dup
       4: invokespecial #205                // Method jnr/posix/JavaTimes."<init>":()V
       7: areturn

  public int unlink(java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: invokeinterface #206,  2          // InterfaceMethod jnr/posix/LibC.unlink:(Ljava/lang/CharSequence;)I
      10: ireturn

  public int open(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokeinterface #207,  4          // InterfaceMethod jnr/posix/LibC.open:(Ljava/lang/CharSequence;II)I
      12: ireturn

  public long read(int, byte[], long);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: lload_3
       7: invokeinterface #208,  5          // InterfaceMethod jnr/posix/LibC.read:(I[BJ)J
      12: lreturn

  public long write(int, byte[], long);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: lload_3
       7: invokeinterface #209,  5          // InterfaceMethod jnr/posix/LibC.write:(I[BJ)J
      12: lreturn

  public long read(int, java.nio.ByteBuffer, long);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: lload_3
       7: invokeinterface #210,  5          // InterfaceMethod jnr/posix/LibC.read:(ILjava/nio/ByteBuffer;J)J
      12: lreturn

  public long write(int, java.nio.ByteBuffer, long);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: lload_3
       7: invokeinterface #211,  5          // InterfaceMethod jnr/posix/LibC.write:(ILjava/nio/ByteBuffer;J)J
      12: lreturn

  public long pread(int, byte[], long, long);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: lload_3
       7: lload         5
       9: invokeinterface #212,  7          // InterfaceMethod jnr/posix/LibC.pread:(I[BJJ)J
      14: lreturn

  public long pwrite(int, byte[], long, long);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: lload_3
       7: lload         5
       9: invokeinterface #213,  7          // InterfaceMethod jnr/posix/LibC.pwrite:(I[BJJ)J
      14: lreturn

  public long pread(int, java.nio.ByteBuffer, long, long);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: lload_3
       7: lload         5
       9: invokeinterface #214,  7          // InterfaceMethod jnr/posix/LibC.pread:(ILjava/nio/ByteBuffer;JJ)J
      14: lreturn

  public long pwrite(int, java.nio.ByteBuffer, long, long);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: lload_3
       7: lload         5
       9: invokeinterface #215,  7          // InterfaceMethod jnr/posix/LibC.pwrite:(ILjava/nio/ByteBuffer;JJ)J
      14: lreturn

  public int read(int, byte[], int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: iload_3
       7: invokeinterface #216,  4          // InterfaceMethod jnr/posix/LibC.read:(I[BI)I
      12: ireturn

  public int write(int, byte[], int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: iload_3
       7: invokeinterface #217,  4          // InterfaceMethod jnr/posix/LibC.write:(I[BI)I
      12: ireturn

  public int read(int, java.nio.ByteBuffer, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: iload_3
       7: invokeinterface #218,  4          // InterfaceMethod jnr/posix/LibC.read:(ILjava/nio/ByteBuffer;I)I
      12: ireturn

  public int write(int, java.nio.ByteBuffer, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: iload_3
       7: invokeinterface #219,  4          // InterfaceMethod jnr/posix/LibC.write:(ILjava/nio/ByteBuffer;I)I
      12: ireturn

  public int pread(int, byte[], int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: iload_3
       7: iload         4
       9: invokeinterface #220,  5          // InterfaceMethod jnr/posix/LibC.pread:(I[BII)I
      14: ireturn

  public int pwrite(int, byte[], int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: iload_3
       7: iload         4
       9: invokeinterface #221,  5          // InterfaceMethod jnr/posix/LibC.pwrite:(I[BII)I
      14: ireturn

  public int pread(int, java.nio.ByteBuffer, int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: iload_3
       7: iload         4
       9: invokeinterface #222,  5          // InterfaceMethod jnr/posix/LibC.pread:(ILjava/nio/ByteBuffer;II)I
      14: ireturn

  public int pwrite(int, java.nio.ByteBuffer, int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: iload_3
       7: iload         4
       9: invokeinterface #223,  5          // InterfaceMethod jnr/posix/LibC.pwrite:(ILjava/nio/ByteBuffer;II)I
      14: ireturn

  public int lseek(int, long, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: lload_2
       6: iload         4
       8: invokeinterface #224,  5          // InterfaceMethod jnr/posix/LibC.lseek:(IJI)J
      13: l2i
      14: ireturn

  public long lseekLong(int, long, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: lload_2
       6: iload         4
       8: invokeinterface #224,  5          // InterfaceMethod jnr/posix/LibC.lseek:(IJI)J
      13: lreturn

  public int pipe(int[]);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: invokeinterface #225,  2          // InterfaceMethod jnr/posix/LibC.pipe:([I)I
      10: ireturn

  public int socketpair(int, int, int, int[]);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: iload_2
       6: iload_3
       7: aload         4
       9: invokeinterface #226,  5          // InterfaceMethod jnr/posix/LibC.socketpair:(III[I)I
      14: ireturn

  public int sendmsg(int, jnr.posix.MsgHdr, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: iload_3
       7: invokeinterface #227,  4          // InterfaceMethod jnr/posix/LibC.sendmsg:(ILjnr/posix/MsgHdr;I)I
      12: ireturn

  public int recvmsg(int, jnr.posix.MsgHdr, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: iload_3
       7: invokeinterface #228,  4          // InterfaceMethod jnr/posix/LibC.recvmsg:(ILjnr/posix/MsgHdr;I)I
      12: ireturn

  public int truncate(java.lang.CharSequence, long);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: lload_2
       6: invokeinterface #229,  4          // InterfaceMethod jnr/posix/LibC.truncate:(Ljava/lang/CharSequence;J)I
      11: ireturn

  public int ftruncate(int, long);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: lload_2
       6: invokeinterface #230,  4          // InterfaceMethod jnr/posix/LibC.ftruncate:(IJ)I
      11: ireturn

  public int rename(java.lang.CharSequence, java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: aload_2
       6: invokeinterface #231,  3          // InterfaceMethod jnr/posix/LibC.rename:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)I
      11: ireturn

  public java.lang.String gethostname();
    Code:
       0: sipush        256
       3: invokestatic  #124                // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
       6: astore_1
       7: aload_0
       8: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
      11: aload_1
      12: aload_1
      13: invokevirtual #125                // Method java/nio/ByteBuffer.capacity:()I
      16: iconst_1
      17: isub
      18: invokeinterface #232,  3          // InterfaceMethod jnr/posix/LibC.gethostname:(Ljava/nio/ByteBuffer;I)I
      23: istore_2
      24: goto          30
      27: astore_3
      28: iconst_m1
      29: istore_2
      30: iload_2
      31: iconst_m1
      32: if_icmpne     43
      35: aload_0
      36: getfield      #12                 // Field helper:Ljnr/posix/JavaLibCHelper;
      39: invokevirtual #233                // Method jnr/posix/JavaLibCHelper.gethostname:()Ljava/lang/String;
      42: areturn
      43: aload_1
      44: iconst_0
      45: invokevirtual #127                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      48: pop
      49: aload_1
      50: invokevirtual #234                // Method java/nio/ByteBuffer.hasRemaining:()Z
      53: ifeq          66
      56: aload_1
      57: invokevirtual #235                // Method java/nio/ByteBuffer.get:()B
      60: ifeq          66
      63: goto          49
      66: aload_1
      67: aload_1
      68: invokevirtual #236                // Method java/nio/ByteBuffer.position:()I
      71: iconst_1
      72: isub
      73: invokevirtual #128                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      76: pop
      77: aload_1
      78: iconst_0
      79: invokevirtual #127                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      82: pop
      83: ldc           #237                // String US-ASCII
      85: invokestatic  #238                // Method java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;
      88: aload_1
      89: invokevirtual #130                // Method java/nio/charset/Charset.decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;
      92: invokevirtual #131                // Method java/nio/CharBuffer.toString:()Ljava/lang/String;
      95: areturn
    Exception table:
       from    to  target type
           7    24    27   Class java/lang/UnsatisfiedLinkError

  public java.lang.String getcwd();
    Code:
       0: sipush        1024
       3: newarray       byte
       5: astore_1
       6: aload_0
       7: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
      10: aload_1
      11: sipush        1024
      14: invokeinterface #239,  3          // InterfaceMethod jnr/posix/LibC.getcwd:([BI)J
      19: lstore_2
      20: lload_2
      21: ldc2_w        #103                // long -1l
      24: lcmp
      25: ifne          30
      28: aconst_null
      29: areturn
      30: iconst_0
      31: istore        4
      33: iload         4
      35: sipush        1024
      38: if_icmpge     57
      41: aload_1
      42: iload         4
      44: baload
      45: ifne          51
      48: goto          57
      51: iinc          4, 1
      54: goto          33
      57: new           #240                // class java/lang/String
      60: dup
      61: aload_1
      62: iconst_0
      63: iload         4
      65: invokespecial #241                // Method java/lang/String."<init>":([BII)V
      68: areturn

  public int fsync(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #242,  2          // InterfaceMethod jnr/posix/LibC.fsync:(I)I
      10: ireturn

  public int fdatasync(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #243,  2          // InterfaceMethod jnr/posix/LibC.fdatasync:(I)I
      10: ireturn

  public int mkfifo(java.lang.String, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: checkcast     #173                // class jnr/posix/UnixLibC
       7: aload_1
       8: iload_2
       9: invokeinterface #244,  3          // InterfaceMethod jnr/posix/UnixLibC.mkfifo:(Ljava/lang/CharSequence;I)I
      14: ireturn

  public int daemon(int, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: iload_2
       6: invokeinterface #245,  3          // InterfaceMethod jnr/posix/LibC.daemon:(II)I
      11: ireturn

  public long[] getgroups();
    Code:
       0: aload_0
       1: iconst_0
       2: aconst_null
       3: invokevirtual #246                // Method getgroups:(I[I)I
       6: istore_1
       7: iload_1
       8: newarray       int
      10: astore_2
      11: iload_1
      12: newarray       long
      14: astore_3
      15: aload_0
      16: iload_1
      17: aload_2
      18: invokevirtual #246                // Method getgroups:(I[I)I
      21: istore        4
      23: iload         4
      25: iconst_m1
      26: if_icmpne     31
      29: aconst_null
      30: areturn
      31: iconst_0
      32: istore        5
      34: iload         5
      36: iload         4
      38: if_icmpge     60
      41: aload_3
      42: iload         5
      44: aload_2
      45: iload         5
      47: iaload
      48: i2l
      49: ldc2_w        #247                // long 4294967295l
      52: land
      53: lastore
      54: iinc          5, 1
      57: goto          34
      60: iload         4
      62: iload_1
      63: if_icmpge     74
      66: aload_3
      67: iconst_0
      68: iload         4
      70: invokestatic  #249                // Method java/util/Arrays.copyOfRange:([JII)[J
      73: areturn
      74: aload_3
      75: areturn

  public int getgroups(int, int[]);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: invokeinterface #250,  3          // InterfaceMethod jnr/posix/LibC.getgroups:(I[I)I
      11: ireturn

  public java.lang.String nl_langinfo(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #251,  2          // InterfaceMethod jnr/posix/LibC.nl_langinfo:(I)Ljava/lang/String;
      10: areturn

  public java.lang.String setlocale(int, java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: aload_2
       6: invokeinterface #252,  3          // InterfaceMethod jnr/posix/LibC.setlocale:(ILjava/lang/String;)Ljava/lang/String;
      11: areturn

  public java.lang.String strerror(int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: iload_1
       5: invokeinterface #253,  2          // InterfaceMethod jnr/posix/LibC.strerror:(I)Ljava/lang/String;
      10: areturn

  public jnr.posix.Timeval allocateTimeval();
    Code:
       0: new           #136                // class jnr/posix/DefaultNativeTimeval
       3: dup
       4: aload_0
       5: invokevirtual #49                 // Method getRuntime:()Ljnr/ffi/Runtime;
       8: invokespecial #254                // Method jnr/posix/DefaultNativeTimeval."<init>":(Ljnr/ffi/Runtime;)V
      11: areturn

  public int gettimeofday(jnr.posix.Timeval);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method libc:()Ljnr/posix/LibC;
       4: aload_1
       5: lconst_0
       6: invokeinterface #255,  4          // InterfaceMethod jnr/posix/LibC.gettimeofday:(Ljnr/posix/Timeval;J)I
      11: ireturn

  static {};
    Code:
       0: new           #256                // class jnr/posix/BaseNativePOSIX$2
       3: dup
       4: invokespecial #257                // Method jnr/posix/BaseNativePOSIX$2."<init>":()V
       7: putstatic     #258                // Field GROUP:Ljnr/posix/BaseNativePOSIX$PointerConverter;
      10: new           #259                // class jnr/posix/BaseNativePOSIX$3
      13: dup
      14: invokespecial #260                // Method jnr/posix/BaseNativePOSIX$3."<init>":()V
      17: putstatic     #261                // Field FileStatConverter:Ljnr/ffi/mapper/ToNativeConverter;
      20: new           #262                // class jnr/posix/BaseNativePOSIX$4
      23: dup
      24: invokespecial #263                // Method jnr/posix/BaseNativePOSIX$4."<init>":()V
      27: putstatic     #264                // Field TimesConverter:Ljnr/ffi/mapper/ToNativeConverter;
      30: new           #265                // class jnr/posix/BaseNativePOSIX$5
      33: dup
      34: invokespecial #266                // Method jnr/posix/BaseNativePOSIX$5."<init>":()V
      37: putstatic     #267                // Field ConstantConverter:Ljnr/ffi/mapper/ToNativeConverter;
      40: new           #268                // class jnr/posix/BaseNativePOSIX$6
      43: dup
      44: invokespecial #269                // Method jnr/posix/BaseNativePOSIX$6."<init>":()V
      47: putstatic     #270                // Field MsgHdrConverter:Ljnr/ffi/mapper/ToNativeConverter;
      50: return
}
