Compiled from "POSIXFactory.java"
public class jnr.posix.POSIXFactory {
  private static final java.lang.Class<jnr.ffi.Struct> BOGUS_HACK;

  public static final jnr.ffi.Platform NATIVE_PLATFORM;

  public static final java.lang.String STANDARD_C_LIBRARY_NAME;

  public jnr.posix.POSIXFactory();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: return

  public static jnr.posix.POSIX getPOSIX(jnr.posix.POSIXHandler, boolean);
    Code:
       0: new           #5                  // class jnr/posix/LazyPOSIX
       3: dup
       4: aload_0
       5: iload_1
       6: invokespecial #6                  // Method jnr/posix/LazyPOSIX."<init>":(Ljnr/posix/POSIXHandler;Z)V
       9: areturn

  public static jnr.posix.POSIX getPOSIX();
    Code:
       0: new           #7                  // class jnr/posix/util/DefaultPOSIXHandler
       3: dup
       4: invokespecial #8                  // Method jnr/posix/util/DefaultPOSIXHandler."<init>":()V
       7: iconst_1
       8: invokestatic  #9                  // Method getPOSIX:(Ljnr/posix/POSIXHandler;Z)Ljnr/posix/POSIX;
      11: areturn

  public static jnr.posix.POSIX getJavaPOSIX(jnr.posix.POSIXHandler);
    Code:
       0: new           #10                 // class jnr/posix/JavaPOSIX
       3: dup
       4: aload_0
       5: invokespecial #11                 // Method jnr/posix/JavaPOSIX."<init>":(Ljnr/posix/POSIXHandler;)V
       8: areturn

  public static jnr.posix.POSIX getJavaPOSIX();
    Code:
       0: new           #7                  // class jnr/posix/util/DefaultPOSIXHandler
       3: dup
       4: invokespecial #8                  // Method jnr/posix/util/DefaultPOSIXHandler."<init>":()V
       7: invokestatic  #12                 // Method getJavaPOSIX:(Ljnr/posix/POSIXHandler;)Ljnr/posix/POSIX;
      10: areturn

  public static jnr.posix.POSIX getNativePOSIX(jnr.posix.POSIXHandler);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method loadNativePOSIX:(Ljnr/posix/POSIXHandler;)Ljnr/posix/POSIX;
       4: areturn

  public static jnr.posix.POSIX getNativePOSIX();
    Code:
       0: new           #7                  // class jnr/posix/util/DefaultPOSIXHandler
       3: dup
       4: invokespecial #8                  // Method jnr/posix/util/DefaultPOSIXHandler."<init>":()V
       7: invokestatic  #14                 // Method getNativePOSIX:(Ljnr/posix/POSIXHandler;)Ljnr/posix/POSIX;
      10: areturn

  static jnr.posix.POSIX loadPOSIX(jnr.posix.POSIXHandler, boolean);
    Code:
       0: aconst_null
       1: astore_2
       2: iload_1
       3: ifeq          86
       6: aload_0
       7: invokestatic  #13                 // Method loadNativePOSIX:(Ljnr/posix/POSIXHandler;)Ljnr/posix/POSIX;
      10: astore_2
      11: aload_2
      12: ifnull        27
      15: new           #15                 // class jnr/posix/CheckedPOSIX
      18: dup
      19: aload_2
      20: aload_0
      21: invokespecial #16                 // Method jnr/posix/CheckedPOSIX."<init>":(Ljnr/posix/POSIX;Ljnr/posix/POSIXHandler;)V
      24: goto          28
      27: aconst_null
      28: astore_2
      29: aload_0
      30: invokeinterface #17,  1           // InterfaceMethod jnr/posix/POSIXHandler.isVerbose:()Z
      35: ifeq          61
      38: aload_2
      39: ifnull        53
      42: getstatic     #18                 // Field java/lang/System.err:Ljava/io/PrintStream;
      45: ldc           #19                 // String Successfully loaded native POSIX impl.
      47: invokevirtual #20                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      50: goto          61
      53: getstatic     #18                 // Field java/lang/System.err:Ljava/io/PrintStream;
      56: ldc           #21                 // String Failed to load native POSIX impl; falling back on Java impl. Unsupported OS.
      58: invokevirtual #20                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      61: goto          86
      64: astore_3
      65: aload_0
      66: invokeinterface #17,  1           // InterfaceMethod jnr/posix/POSIXHandler.isVerbose:()Z
      71: ifeq          86
      74: getstatic     #18                 // Field java/lang/System.err:Ljava/io/PrintStream;
      77: ldc           #23                 // String Failed to load native POSIX impl; falling back on Java impl. Stacktrace follows.
      79: invokevirtual #20                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      82: aload_3
      83: invokevirtual #24                 // Method java/lang/Throwable.printStackTrace:()V
      86: aload_2
      87: ifnonnull     95
      90: aload_0
      91: invokestatic  #12                 // Method getJavaPOSIX:(Ljnr/posix/POSIXHandler;)Ljnr/posix/POSIX;
      94: astore_2
      95: aload_2
      96: areturn
    Exception table:
       from    to  target type
           6    61    64   Class java/lang/Throwable

  private static jnr.posix.POSIX loadNativePOSIX(jnr.posix.POSIXHandler);
    Code:
       0: getstatic     #25                 // Field jnr/posix/POSIXFactory$1.$SwitchMap$jnr$ffi$Platform$OS:[I
       3: getstatic     #26                 // Field NATIVE_PLATFORM:Ljnr/ffi/Platform;
       6: invokevirtual #27                 // Method jnr/ffi/Platform.getOS:()Ljnr/ffi/Platform$OS;
       9: invokevirtual #28                 // Method jnr/ffi/Platform$OS.ordinal:()I
      12: iaload
      13: tableswitch   { // 1 to 8
                     1: 60
                     2: 65
                     3: 70
                     4: 75
                     5: 80
                     6: 85
                     7: 90
                     8: 95
               default: 100
          }
      60: aload_0
      61: invokestatic  #29                 // Method loadMacOSPOSIX:(Ljnr/posix/POSIXHandler;)Ljnr/posix/POSIX;
      64: areturn
      65: aload_0
      66: invokestatic  #30                 // Method loadLinuxPOSIX:(Ljnr/posix/POSIXHandler;)Ljnr/posix/POSIX;
      69: areturn
      70: aload_0
      71: invokestatic  #31                 // Method loadFreeBSDPOSIX:(Ljnr/posix/POSIXHandler;)Ljnr/posix/POSIX;
      74: areturn
      75: aload_0
      76: invokestatic  #32                 // Method loadDragonFlyPOSIX:(Ljnr/posix/POSIXHandler;)Ljnr/posix/POSIX;
      79: areturn
      80: aload_0
      81: invokestatic  #33                 // Method loadOpenBSDPOSIX:(Ljnr/posix/POSIXHandler;)Ljnr/posix/POSIX;
      84: areturn
      85: aload_0
      86: invokestatic  #34                 // Method loadSolarisPOSIX:(Ljnr/posix/POSIXHandler;)Ljnr/posix/POSIX;
      89: areturn
      90: aload_0
      91: invokestatic  #35                 // Method loadAixPOSIX:(Ljnr/posix/POSIXHandler;)Ljnr/posix/POSIX;
      94: areturn
      95: aload_0
      96: invokestatic  #36                 // Method loadWindowsPOSIX:(Ljnr/posix/POSIXHandler;)Ljnr/posix/POSIX;
      99: areturn
     100: aconst_null
     101: areturn

  public static jnr.posix.POSIX loadLinuxPOSIX(jnr.posix.POSIXHandler);
    Code:
       0: new           #37                 // class jnr/posix/LinuxPOSIX
       3: dup
       4: getstatic     #38                 // Field jnr/posix/POSIXFactory$DefaultLibCProvider.INSTANCE:Ljnr/posix/LibCProvider;
       7: aload_0
       8: invokespecial #39                 // Method jnr/posix/LinuxPOSIX."<init>":(Ljnr/posix/LibCProvider;Ljnr/posix/POSIXHandler;)V
      11: areturn

  public static jnr.posix.POSIX loadMacOSPOSIX(jnr.posix.POSIXHandler);
    Code:
       0: new           #40                 // class jnr/posix/MacOSPOSIX
       3: dup
       4: getstatic     #38                 // Field jnr/posix/POSIXFactory$DefaultLibCProvider.INSTANCE:Ljnr/posix/LibCProvider;
       7: aload_0
       8: invokespecial #41                 // Method jnr/posix/MacOSPOSIX."<init>":(Ljnr/posix/LibCProvider;Ljnr/posix/POSIXHandler;)V
      11: areturn

  public static jnr.posix.POSIX loadSolarisPOSIX(jnr.posix.POSIXHandler);
    Code:
       0: new           #42                 // class jnr/posix/SolarisPOSIX
       3: dup
       4: getstatic     #38                 // Field jnr/posix/POSIXFactory$DefaultLibCProvider.INSTANCE:Ljnr/posix/LibCProvider;
       7: aload_0
       8: invokespecial #43                 // Method jnr/posix/SolarisPOSIX."<init>":(Ljnr/posix/LibCProvider;Ljnr/posix/POSIXHandler;)V
      11: areturn

  public static jnr.posix.POSIX loadFreeBSDPOSIX(jnr.posix.POSIXHandler);
    Code:
       0: new           #44                 // class jnr/posix/FreeBSDPOSIX
       3: dup
       4: getstatic     #38                 // Field jnr/posix/POSIXFactory$DefaultLibCProvider.INSTANCE:Ljnr/posix/LibCProvider;
       7: aload_0
       8: invokespecial #45                 // Method jnr/posix/FreeBSDPOSIX."<init>":(Ljnr/posix/LibCProvider;Ljnr/posix/POSIXHandler;)V
      11: areturn

  public static jnr.posix.POSIX loadDragonFlyPOSIX(jnr.posix.POSIXHandler);
    Code:
       0: new           #46                 // class jnr/posix/DragonFlyPOSIX
       3: dup
       4: getstatic     #38                 // Field jnr/posix/POSIXFactory$DefaultLibCProvider.INSTANCE:Ljnr/posix/LibCProvider;
       7: aload_0
       8: invokespecial #47                 // Method jnr/posix/DragonFlyPOSIX."<init>":(Ljnr/posix/LibCProvider;Ljnr/posix/POSIXHandler;)V
      11: areturn

  public static jnr.posix.POSIX loadOpenBSDPOSIX(jnr.posix.POSIXHandler);
    Code:
       0: new           #48                 // class jnr/posix/OpenBSDPOSIX
       3: dup
       4: getstatic     #38                 // Field jnr/posix/POSIXFactory$DefaultLibCProvider.INSTANCE:Ljnr/posix/LibCProvider;
       7: aload_0
       8: invokespecial #49                 // Method jnr/posix/OpenBSDPOSIX."<init>":(Ljnr/posix/LibCProvider;Ljnr/posix/POSIXHandler;)V
      11: areturn

  public static jnr.posix.POSIX loadWindowsPOSIX(jnr.posix.POSIXHandler);
    Code:
       0: new           #50                 // class jnr/posix/WindowsPOSIX
       3: dup
       4: getstatic     #38                 // Field jnr/posix/POSIXFactory$DefaultLibCProvider.INSTANCE:Ljnr/posix/LibCProvider;
       7: aload_0
       8: invokespecial #51                 // Method jnr/posix/WindowsPOSIX."<init>":(Ljnr/posix/LibCProvider;Ljnr/posix/POSIXHandler;)V
      11: areturn

  public static jnr.posix.POSIX loadAixPOSIX(jnr.posix.POSIXHandler);
    Code:
       0: new           #52                 // class jnr/posix/AixPOSIX
       3: dup
       4: getstatic     #38                 // Field jnr/posix/POSIXFactory$DefaultLibCProvider.INSTANCE:Ljnr/posix/LibCProvider;
       7: aload_0
       8: invokespecial #53                 // Method jnr/posix/AixPOSIX."<init>":(Ljnr/posix/LibCProvider;Ljnr/posix/POSIXHandler;)V
      11: areturn

  private static java.lang.String[] libraries();
    Code:
       0: getstatic     #25                 // Field jnr/posix/POSIXFactory$1.$SwitchMap$jnr$ffi$Platform$OS:[I
       3: getstatic     #26                 // Field NATIVE_PLATFORM:Ljnr/ffi/Platform;
       6: invokevirtual #27                 // Method jnr/ffi/Platform.getOS:()Ljnr/ffi/Platform$OS;
       9: invokevirtual #28                 // Method jnr/ffi/Platform$OS.ordinal:()I
      12: iaload
      13: tableswitch   { // 2 to 9
                     2: 60
                     3: 92
                     4: 92
                     5: 150
                     6: 71
                     7: 103
                     8: 135
                     9: 92
               default: 150
          }
      60: iconst_1
      61: anewarray     #54                 // class java/lang/String
      64: dup
      65: iconst_0
      66: getstatic     #55                 // Field STANDARD_C_LIBRARY_NAME:Ljava/lang/String;
      69: aastore
      70: areturn
      71: iconst_3
      72: anewarray     #54                 // class java/lang/String
      75: dup
      76: iconst_0
      77: ldc           #56                 // String socket
      79: aastore
      80: dup
      81: iconst_1
      82: ldc           #57                 // String nsl
      84: aastore
      85: dup
      86: iconst_2
      87: getstatic     #55                 // Field STANDARD_C_LIBRARY_NAME:Ljava/lang/String;
      90: aastore
      91: areturn
      92: iconst_1
      93: anewarray     #54                 // class java/lang/String
      96: dup
      97: iconst_0
      98: getstatic     #55                 // Field STANDARD_C_LIBRARY_NAME:Ljava/lang/String;
     101: aastore
     102: areturn
     103: invokestatic  #58                 // Method jnr/ffi/Runtime.getSystemRuntime:()Ljnr/ffi/Runtime;
     106: invokevirtual #59                 // Method jnr/ffi/Runtime.addressSize:()I
     109: iconst_4
     110: if_icmpne     125
     113: iconst_1
     114: anewarray     #54                 // class java/lang/String
     117: dup
     118: iconst_0
     119: ldc           #60                 // String libc.a(shr.o)
     121: aastore
     122: goto          134
     125: iconst_1
     126: anewarray     #54                 // class java/lang/String
     129: dup
     130: iconst_0
     131: ldc           #61                 // String libc.a(shr_64.o)
     133: aastore
     134: areturn
     135: iconst_2
     136: anewarray     #54                 // class java/lang/String
     139: dup
     140: iconst_0
     141: ldc           #62                 // String msvcrt
     143: aastore
     144: dup
     145: iconst_1
     146: ldc           #63                 // String kernel32
     148: aastore
     149: areturn
     150: iconst_1
     151: anewarray     #54                 // class java/lang/String
     154: dup
     155: iconst_0
     156: getstatic     #55                 // Field STANDARD_C_LIBRARY_NAME:Ljava/lang/String;
     159: aastore
     160: areturn

  private static java.lang.Class<? extends jnr.posix.LibC> libraryInterface();
    Code:
       0: getstatic     #25                 // Field jnr/posix/POSIXFactory$1.$SwitchMap$jnr$ffi$Platform$OS:[I
       3: getstatic     #26                 // Field NATIVE_PLATFORM:Ljnr/ffi/Platform;
       6: invokevirtual #27                 // Method jnr/ffi/Platform.getOS:()Ljnr/ffi/Platform$OS;
       9: invokevirtual #28                 // Method jnr/ffi/Platform$OS.ordinal:()I
      12: iaload
      13: tableswitch   { // 2 to 8
                     2: 56
                     3: 68
                     4: 68
                     5: 68
                     6: 62
                     7: 59
                     8: 65
               default: 68
          }
      56: ldc           #64                 // class jnr/posix/LinuxLibC
      58: areturn
      59: ldc           #65                 // class jnr/posix/AixLibC
      61: areturn
      62: ldc           #66                 // class jnr/posix/SolarisLibC
      64: areturn
      65: ldc           #67                 // class jnr/posix/WindowsLibC
      67: areturn
      68: ldc           #68                 // class jnr/posix/UnixLibC
      70: areturn

  private static jnr.ffi.mapper.FunctionMapper functionMapper();
    Code:
       0: getstatic     #25                 // Field jnr/posix/POSIXFactory$1.$SwitchMap$jnr$ffi$Platform$OS:[I
       3: getstatic     #26                 // Field NATIVE_PLATFORM:Ljnr/ffi/Platform;
       6: invokevirtual #27                 // Method jnr/ffi/Platform.getOS:()Ljnr/ffi/Platform$OS;
       9: invokevirtual #28                 // Method jnr/ffi/Platform$OS.ordinal:()I
      12: iaload
      13: tableswitch   { // 6 to 8
                     6: 223
                     7: 40
                     8: 93
               default: 265
          }
      40: new           #69                 // class jnr/posix/SimpleFunctionMapper$Builder
      43: dup
      44: invokespecial #70                 // Method jnr/posix/SimpleFunctionMapper$Builder."<init>":()V
      47: ldc           #71                 // String stat
      49: ldc           #72                 // String stat64x
      51: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
      54: ldc           #74                 // String fstat
      56: ldc           #75                 // String fstat64x
      58: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
      61: ldc           #76                 // String lstat
      63: ldc           #77                 // String lstat64x
      65: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
      68: ldc           #78                 // String stat64
      70: ldc           #72                 // String stat64x
      72: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
      75: ldc           #79                 // String fstat64
      77: ldc           #75                 // String fstat64x
      79: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
      82: ldc           #80                 // String lstat64
      84: ldc           #77                 // String lstat64x
      86: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
      89: invokevirtual #81                 // Method jnr/posix/SimpleFunctionMapper$Builder.build:()Ljnr/posix/SimpleFunctionMapper;
      92: areturn
      93: new           #69                 // class jnr/posix/SimpleFunctionMapper$Builder
      96: dup
      97: invokespecial #70                 // Method jnr/posix/SimpleFunctionMapper$Builder."<init>":()V
     100: ldc           #82                 // String getpid
     102: ldc           #83                 // String _getpid
     104: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     107: ldc           #84                 // String chmod
     109: ldc           #85                 // String _chmod
     111: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     114: ldc           #74                 // String fstat
     116: ldc           #86                 // String _fstat64
     118: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     121: ldc           #71                 // String stat
     123: ldc           #87                 // String _stat64
     125: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     128: ldc           #88                 // String umask
     130: ldc           #89                 // String _umask
     132: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     135: ldc           #90                 // String isatty
     137: ldc           #91                 // String _isatty
     139: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     142: ldc           #92                 // String read
     144: ldc           #93                 // String _read
     146: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     149: ldc           #94                 // String write
     151: ldc           #95                 // String _write
     153: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     156: ldc           #96                 // String close
     158: ldc           #97                 // String _close
     160: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     163: ldc           #98                 // String getcwd
     165: ldc           #99                 // String _getcwd
     167: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     170: ldc           #100                // String unlink
     172: ldc           #101                // String _unlink
     174: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     177: ldc           #102                // String access
     179: ldc           #103                // String _access
     181: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     184: ldc           #104                // String open
     186: ldc           #105                // String _open
     188: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     191: ldc           #106                // String dup
     193: ldc           #107                // String _dup
     195: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     198: ldc           #108                // String dup2
     200: ldc           #109                // String _dup2
     202: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     205: ldc           #110                // String lseek
     207: ldc           #111                // String _lseek
     209: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     212: ldc           #112                // String ftruncate
     214: ldc           #113                // String _chsize
     216: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     219: invokevirtual #81                 // Method jnr/posix/SimpleFunctionMapper$Builder.build:()Ljnr/posix/SimpleFunctionMapper;
     222: areturn
     223: getstatic     #114                // Field jnr/posix/util/Platform.IS_32_BIT:Z
     226: ifeq          263
     229: new           #69                 // class jnr/posix/SimpleFunctionMapper$Builder
     232: dup
     233: invokespecial #70                 // Method jnr/posix/SimpleFunctionMapper$Builder."<init>":()V
     236: ldc           #71                 // String stat
     238: ldc           #78                 // String stat64
     240: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     243: ldc           #74                 // String fstat
     245: ldc           #79                 // String fstat64
     247: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     250: ldc           #76                 // String lstat
     252: ldc           #80                 // String lstat64
     254: invokevirtual #73                 // Method jnr/posix/SimpleFunctionMapper$Builder.map:(Ljava/lang/String;Ljava/lang/String;)Ljnr/posix/SimpleFunctionMapper$Builder;
     257: invokevirtual #81                 // Method jnr/posix/SimpleFunctionMapper$Builder.build:()Ljnr/posix/SimpleFunctionMapper;
     260: goto          264
     263: aconst_null
     264: areturn
     265: aconst_null
     266: areturn

  private static java.util.Map<jnr.ffi.LibraryOption, java.lang.Object> options();
    Code:
       0: new           #115                // class java/util/HashMap
       3: dup
       4: invokespecial #116                // Method java/util/HashMap."<init>":()V
       7: astore_0
       8: invokestatic  #117                // Method functionMapper:()Ljnr/ffi/mapper/FunctionMapper;
      11: astore_1
      12: aload_1
      13: ifnull        27
      16: aload_0
      17: getstatic     #118                // Field jnr/ffi/LibraryOption.FunctionMapper:Ljnr/ffi/LibraryOption;
      20: aload_1
      21: invokeinterface #119,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      26: pop
      27: aload_0
      28: getstatic     #120                // Field jnr/ffi/LibraryOption.TypeMapper:Ljnr/ffi/LibraryOption;
      31: getstatic     #121                // Field jnr/posix/POSIXTypeMapper.INSTANCE:Ljnr/ffi/mapper/TypeMapper;
      34: invokeinterface #119,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      39: pop
      40: aload_0
      41: getstatic     #122                // Field jnr/ffi/LibraryOption.LoadNow:Ljnr/ffi/LibraryOption;
      44: getstatic     #123                // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      47: invokeinterface #119,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      52: pop
      53: aload_0
      54: invokestatic  #124                // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
      57: areturn

  static java.lang.Class access$000();
    Code:
       0: invokestatic  #3                  // Method libraryInterface:()Ljava/lang/Class;
       3: areturn

  static java.util.Map access$100();
    Code:
       0: invokestatic  #2                  // Method options:()Ljava/util/Map;
       3: areturn

  static java.lang.String[] access$200();
    Code:
       0: invokestatic  #1                  // Method libraries:()[Ljava/lang/String;
       3: areturn

  static {};
    Code:
       0: ldc           #125                // class jnr/ffi/Struct
       2: putstatic     #126                // Field BOGUS_HACK:Ljava/lang/Class;
       5: invokestatic  #127                // Method jnr/ffi/Platform.getNativePlatform:()Ljnr/ffi/Platform;
       8: putstatic     #26                 // Field NATIVE_PLATFORM:Ljnr/ffi/Platform;
      11: getstatic     #26                 // Field NATIVE_PLATFORM:Ljnr/ffi/Platform;
      14: invokevirtual #128                // Method jnr/ffi/Platform.getStandardCLibraryName:()Ljava/lang/String;
      17: putstatic     #55                 // Field STANDARD_C_LIBRARY_NAME:Ljava/lang/String;
      20: return
}
