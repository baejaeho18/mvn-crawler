Compiled from "TypeDefFluent.java"
public interface io.sundr.codegen.model.TypeDefFluent<A extends io.sundr.codegen.model.TypeDefFluent<A>> extends io.sundr.codegen.model.ModifierSupportFluent<A> {
  public abstract io.sundr.codegen.model.Kind getKind();

  public abstract A withKind(io.sundr.codegen.model.Kind);

  public abstract java.lang.Boolean hasKind();

  public abstract java.lang.String getPackageName();

  public abstract A withPackageName(java.lang.String);

  public abstract java.lang.Boolean hasPackageName();

  public abstract A withNewPackageName(java.lang.String);

  public abstract A withNewPackageName(java.lang.StringBuilder);

  public abstract A withNewPackageName(java.lang.StringBuffer);

  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();

  public abstract A withNewName(java.lang.String);

  public abstract A withNewName(java.lang.StringBuilder);

  public abstract A withNewName(java.lang.StringBuffer);

  public abstract A addToComments(int, java.lang.String);

  public abstract A setToComments(int, java.lang.String);

  public abstract A addToComments(java.lang.String...);

  public abstract A addAllToComments(java.util.Collection<java.lang.String>);

  public abstract A removeFromComments(java.lang.String...);

  public abstract A removeAllFromComments(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getComments();

  public abstract java.lang.String getComment(int);

  public abstract java.lang.String getFirstComment();

  public abstract java.lang.String getLastComment();

  public abstract java.lang.String getMatchingComment(io.sundr.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingComment(io.sundr.builder.Predicate<java.lang.String>);

  public abstract A withComments(java.util.List<java.lang.String>);

  public abstract A withComments(java.lang.String...);

  public abstract java.lang.Boolean hasComments();

  public abstract A addNewComment(java.lang.String);

  public abstract A addNewComment(java.lang.StringBuilder);

  public abstract A addNewComment(java.lang.StringBuffer);

  public abstract A addToAnnotations(int, io.sundr.codegen.model.AnnotationRef);

  public abstract A setToAnnotations(int, io.sundr.codegen.model.AnnotationRef);

  public abstract A addToAnnotations(io.sundr.codegen.model.AnnotationRef...);

  public abstract A addAllToAnnotations(java.util.Collection<io.sundr.codegen.model.AnnotationRef>);

  public abstract A removeFromAnnotations(io.sundr.codegen.model.AnnotationRef...);

  public abstract A removeAllFromAnnotations(java.util.Collection<io.sundr.codegen.model.AnnotationRef>);

  public abstract java.util.List<io.sundr.codegen.model.AnnotationRef> getAnnotations();

  public abstract java.util.List<io.sundr.codegen.model.AnnotationRef> buildAnnotations();

  public abstract io.sundr.codegen.model.AnnotationRef buildAnnotation(int);

  public abstract io.sundr.codegen.model.AnnotationRef buildFirstAnnotation();

  public abstract io.sundr.codegen.model.AnnotationRef buildLastAnnotation();

  public abstract io.sundr.codegen.model.AnnotationRef buildMatchingAnnotation(io.sundr.builder.Predicate<io.sundr.codegen.model.AnnotationRefBuilder>);

  public abstract java.lang.Boolean hasMatchingAnnotation(io.sundr.builder.Predicate<io.sundr.codegen.model.AnnotationRefBuilder>);

  public abstract A withAnnotations(java.util.List<io.sundr.codegen.model.AnnotationRef>);

  public abstract A withAnnotations(io.sundr.codegen.model.AnnotationRef...);

  public abstract java.lang.Boolean hasAnnotations();

  public abstract io.sundr.codegen.model.TypeDefFluent$AnnotationsNested<A> addNewAnnotation();

  public abstract io.sundr.codegen.model.TypeDefFluent$AnnotationsNested<A> addNewAnnotationLike(io.sundr.codegen.model.AnnotationRef);

  public abstract io.sundr.codegen.model.TypeDefFluent$AnnotationsNested<A> setNewAnnotationLike(int, io.sundr.codegen.model.AnnotationRef);

  public abstract io.sundr.codegen.model.TypeDefFluent$AnnotationsNested<A> editAnnotation(int);

  public abstract io.sundr.codegen.model.TypeDefFluent$AnnotationsNested<A> editFirstAnnotation();

  public abstract io.sundr.codegen.model.TypeDefFluent$AnnotationsNested<A> editLastAnnotation();

  public abstract io.sundr.codegen.model.TypeDefFluent$AnnotationsNested<A> editMatchingAnnotation(io.sundr.builder.Predicate<io.sundr.codegen.model.AnnotationRefBuilder>);

  public abstract A addToExtendsList(int, io.sundr.codegen.model.ClassRef);

  public abstract A setToExtendsList(int, io.sundr.codegen.model.ClassRef);

  public abstract A addToExtendsList(io.sundr.codegen.model.ClassRef...);

  public abstract A addAllToExtendsList(java.util.Collection<io.sundr.codegen.model.ClassRef>);

  public abstract A removeFromExtendsList(io.sundr.codegen.model.ClassRef...);

  public abstract A removeAllFromExtendsList(java.util.Collection<io.sundr.codegen.model.ClassRef>);

  public abstract java.util.List<io.sundr.codegen.model.ClassRef> getExtendsList();

  public abstract java.util.List<io.sundr.codegen.model.ClassRef> buildExtendsList();

  public abstract io.sundr.codegen.model.ClassRef buildExtendsList(int);

  public abstract io.sundr.codegen.model.ClassRef buildFirstExtendsList();

  public abstract io.sundr.codegen.model.ClassRef buildLastExtendsList();

  public abstract io.sundr.codegen.model.ClassRef buildMatchingExtendsList(io.sundr.builder.Predicate<io.sundr.codegen.model.ClassRefBuilder>);

  public abstract java.lang.Boolean hasMatchingExtendsList(io.sundr.builder.Predicate<io.sundr.codegen.model.ClassRefBuilder>);

  public abstract A withExtendsList(java.util.List<io.sundr.codegen.model.ClassRef>);

  public abstract A withExtendsList(io.sundr.codegen.model.ClassRef...);

  public abstract java.lang.Boolean hasExtendsList();

  public abstract io.sundr.codegen.model.TypeDefFluent$ExtendsListNested<A> addNewExtendsList();

  public abstract io.sundr.codegen.model.TypeDefFluent$ExtendsListNested<A> addNewExtendsListLike(io.sundr.codegen.model.ClassRef);

  public abstract io.sundr.codegen.model.TypeDefFluent$ExtendsListNested<A> setNewExtendsListLike(int, io.sundr.codegen.model.ClassRef);

  public abstract io.sundr.codegen.model.TypeDefFluent$ExtendsListNested<A> editExtendsList(int);

  public abstract io.sundr.codegen.model.TypeDefFluent$ExtendsListNested<A> editFirstExtendsList();

  public abstract io.sundr.codegen.model.TypeDefFluent$ExtendsListNested<A> editLastExtendsList();

  public abstract io.sundr.codegen.model.TypeDefFluent$ExtendsListNested<A> editMatchingExtendsList(io.sundr.builder.Predicate<io.sundr.codegen.model.ClassRefBuilder>);

  public abstract A addToImplementsList(int, io.sundr.codegen.model.ClassRef);

  public abstract A setToImplementsList(int, io.sundr.codegen.model.ClassRef);

  public abstract A addToImplementsList(io.sundr.codegen.model.ClassRef...);

  public abstract A addAllToImplementsList(java.util.Collection<io.sundr.codegen.model.ClassRef>);

  public abstract A removeFromImplementsList(io.sundr.codegen.model.ClassRef...);

  public abstract A removeAllFromImplementsList(java.util.Collection<io.sundr.codegen.model.ClassRef>);

  public abstract java.util.List<io.sundr.codegen.model.ClassRef> getImplementsList();

  public abstract java.util.List<io.sundr.codegen.model.ClassRef> buildImplementsList();

  public abstract io.sundr.codegen.model.ClassRef buildImplementsList(int);

  public abstract io.sundr.codegen.model.ClassRef buildFirstImplementsList();

  public abstract io.sundr.codegen.model.ClassRef buildLastImplementsList();

  public abstract io.sundr.codegen.model.ClassRef buildMatchingImplementsList(io.sundr.builder.Predicate<io.sundr.codegen.model.ClassRefBuilder>);

  public abstract java.lang.Boolean hasMatchingImplementsList(io.sundr.builder.Predicate<io.sundr.codegen.model.ClassRefBuilder>);

  public abstract A withImplementsList(java.util.List<io.sundr.codegen.model.ClassRef>);

  public abstract A withImplementsList(io.sundr.codegen.model.ClassRef...);

  public abstract java.lang.Boolean hasImplementsList();

  public abstract io.sundr.codegen.model.TypeDefFluent$ImplementsListNested<A> addNewImplementsList();

  public abstract io.sundr.codegen.model.TypeDefFluent$ImplementsListNested<A> addNewImplementsListLike(io.sundr.codegen.model.ClassRef);

  public abstract io.sundr.codegen.model.TypeDefFluent$ImplementsListNested<A> setNewImplementsListLike(int, io.sundr.codegen.model.ClassRef);

  public abstract io.sundr.codegen.model.TypeDefFluent$ImplementsListNested<A> editImplementsList(int);

  public abstract io.sundr.codegen.model.TypeDefFluent$ImplementsListNested<A> editFirstImplementsList();

  public abstract io.sundr.codegen.model.TypeDefFluent$ImplementsListNested<A> editLastImplementsList();

  public abstract io.sundr.codegen.model.TypeDefFluent$ImplementsListNested<A> editMatchingImplementsList(io.sundr.builder.Predicate<io.sundr.codegen.model.ClassRefBuilder>);

  public abstract A addToParameters(int, io.sundr.codegen.model.TypeParamDef);

  public abstract A setToParameters(int, io.sundr.codegen.model.TypeParamDef);

  public abstract A addToParameters(io.sundr.codegen.model.TypeParamDef...);

  public abstract A addAllToParameters(java.util.Collection<io.sundr.codegen.model.TypeParamDef>);

  public abstract A removeFromParameters(io.sundr.codegen.model.TypeParamDef...);

  public abstract A removeAllFromParameters(java.util.Collection<io.sundr.codegen.model.TypeParamDef>);

  public abstract java.util.List<io.sundr.codegen.model.TypeParamDef> getParameters();

  public abstract java.util.List<io.sundr.codegen.model.TypeParamDef> buildParameters();

  public abstract io.sundr.codegen.model.TypeParamDef buildParameter(int);

  public abstract io.sundr.codegen.model.TypeParamDef buildFirstParameter();

  public abstract io.sundr.codegen.model.TypeParamDef buildLastParameter();

  public abstract io.sundr.codegen.model.TypeParamDef buildMatchingParameter(io.sundr.builder.Predicate<io.sundr.codegen.model.TypeParamDefBuilder>);

  public abstract java.lang.Boolean hasMatchingParameter(io.sundr.builder.Predicate<io.sundr.codegen.model.TypeParamDefBuilder>);

  public abstract A withParameters(java.util.List<io.sundr.codegen.model.TypeParamDef>);

  public abstract A withParameters(io.sundr.codegen.model.TypeParamDef...);

  public abstract java.lang.Boolean hasParameters();

  public abstract io.sundr.codegen.model.TypeDefFluent$ParametersNested<A> addNewParameter();

  public abstract io.sundr.codegen.model.TypeDefFluent$ParametersNested<A> addNewParameterLike(io.sundr.codegen.model.TypeParamDef);

  public abstract io.sundr.codegen.model.TypeDefFluent$ParametersNested<A> setNewParameterLike(int, io.sundr.codegen.model.TypeParamDef);

  public abstract io.sundr.codegen.model.TypeDefFluent$ParametersNested<A> editParameter(int);

  public abstract io.sundr.codegen.model.TypeDefFluent$ParametersNested<A> editFirstParameter();

  public abstract io.sundr.codegen.model.TypeDefFluent$ParametersNested<A> editLastParameter();

  public abstract io.sundr.codegen.model.TypeDefFluent$ParametersNested<A> editMatchingParameter(io.sundr.builder.Predicate<io.sundr.codegen.model.TypeParamDefBuilder>);

  public abstract A addToProperties(int, io.sundr.codegen.model.Property);

  public abstract A setToProperties(int, io.sundr.codegen.model.Property);

  public abstract A addToProperties(io.sundr.codegen.model.Property...);

  public abstract A addAllToProperties(java.util.Collection<io.sundr.codegen.model.Property>);

  public abstract A removeFromProperties(io.sundr.codegen.model.Property...);

  public abstract A removeAllFromProperties(java.util.Collection<io.sundr.codegen.model.Property>);

  public abstract java.util.List<io.sundr.codegen.model.Property> getProperties();

  public abstract java.util.List<io.sundr.codegen.model.Property> buildProperties();

  public abstract io.sundr.codegen.model.Property buildProperty(int);

  public abstract io.sundr.codegen.model.Property buildFirstProperty();

  public abstract io.sundr.codegen.model.Property buildLastProperty();

  public abstract io.sundr.codegen.model.Property buildMatchingProperty(io.sundr.builder.Predicate<io.sundr.codegen.model.PropertyBuilder>);

  public abstract java.lang.Boolean hasMatchingProperty(io.sundr.builder.Predicate<io.sundr.codegen.model.PropertyBuilder>);

  public abstract A withProperties(java.util.List<io.sundr.codegen.model.Property>);

  public abstract A withProperties(io.sundr.codegen.model.Property...);

  public abstract java.lang.Boolean hasProperties();

  public abstract io.sundr.codegen.model.TypeDefFluent$PropertiesNested<A> addNewProperty();

  public abstract io.sundr.codegen.model.TypeDefFluent$PropertiesNested<A> addNewPropertyLike(io.sundr.codegen.model.Property);

  public abstract io.sundr.codegen.model.TypeDefFluent$PropertiesNested<A> setNewPropertyLike(int, io.sundr.codegen.model.Property);

  public abstract io.sundr.codegen.model.TypeDefFluent$PropertiesNested<A> editProperty(int);

  public abstract io.sundr.codegen.model.TypeDefFluent$PropertiesNested<A> editFirstProperty();

  public abstract io.sundr.codegen.model.TypeDefFluent$PropertiesNested<A> editLastProperty();

  public abstract io.sundr.codegen.model.TypeDefFluent$PropertiesNested<A> editMatchingProperty(io.sundr.builder.Predicate<io.sundr.codegen.model.PropertyBuilder>);

  public abstract A addToConstructors(int, io.sundr.codegen.model.Method);

  public abstract A setToConstructors(int, io.sundr.codegen.model.Method);

  public abstract A addToConstructors(io.sundr.codegen.model.Method...);

  public abstract A addAllToConstructors(java.util.Collection<io.sundr.codegen.model.Method>);

  public abstract A removeFromConstructors(io.sundr.codegen.model.Method...);

  public abstract A removeAllFromConstructors(java.util.Collection<io.sundr.codegen.model.Method>);

  public abstract java.util.List<io.sundr.codegen.model.Method> getConstructors();

  public abstract java.util.List<io.sundr.codegen.model.Method> buildConstructors();

  public abstract io.sundr.codegen.model.Method buildConstructor(int);

  public abstract io.sundr.codegen.model.Method buildFirstConstructor();

  public abstract io.sundr.codegen.model.Method buildLastConstructor();

  public abstract io.sundr.codegen.model.Method buildMatchingConstructor(io.sundr.builder.Predicate<io.sundr.codegen.model.MethodBuilder>);

  public abstract java.lang.Boolean hasMatchingConstructor(io.sundr.builder.Predicate<io.sundr.codegen.model.MethodBuilder>);

  public abstract A withConstructors(java.util.List<io.sundr.codegen.model.Method>);

  public abstract A withConstructors(io.sundr.codegen.model.Method...);

  public abstract java.lang.Boolean hasConstructors();

  public abstract io.sundr.codegen.model.TypeDefFluent$ConstructorsNested<A> addNewConstructor();

  public abstract io.sundr.codegen.model.TypeDefFluent$ConstructorsNested<A> addNewConstructorLike(io.sundr.codegen.model.Method);

  public abstract io.sundr.codegen.model.TypeDefFluent$ConstructorsNested<A> setNewConstructorLike(int, io.sundr.codegen.model.Method);

  public abstract io.sundr.codegen.model.TypeDefFluent$ConstructorsNested<A> editConstructor(int);

  public abstract io.sundr.codegen.model.TypeDefFluent$ConstructorsNested<A> editFirstConstructor();

  public abstract io.sundr.codegen.model.TypeDefFluent$ConstructorsNested<A> editLastConstructor();

  public abstract io.sundr.codegen.model.TypeDefFluent$ConstructorsNested<A> editMatchingConstructor(io.sundr.builder.Predicate<io.sundr.codegen.model.MethodBuilder>);

  public abstract A addToMethods(int, io.sundr.codegen.model.Method);

  public abstract A setToMethods(int, io.sundr.codegen.model.Method);

  public abstract A addToMethods(io.sundr.codegen.model.Method...);

  public abstract A addAllToMethods(java.util.Collection<io.sundr.codegen.model.Method>);

  public abstract A removeFromMethods(io.sundr.codegen.model.Method...);

  public abstract A removeAllFromMethods(java.util.Collection<io.sundr.codegen.model.Method>);

  public abstract java.util.List<io.sundr.codegen.model.Method> getMethods();

  public abstract java.util.List<io.sundr.codegen.model.Method> buildMethods();

  public abstract io.sundr.codegen.model.Method buildMethod(int);

  public abstract io.sundr.codegen.model.Method buildFirstMethod();

  public abstract io.sundr.codegen.model.Method buildLastMethod();

  public abstract io.sundr.codegen.model.Method buildMatchingMethod(io.sundr.builder.Predicate<io.sundr.codegen.model.MethodBuilder>);

  public abstract java.lang.Boolean hasMatchingMethod(io.sundr.builder.Predicate<io.sundr.codegen.model.MethodBuilder>);

  public abstract A withMethods(java.util.List<io.sundr.codegen.model.Method>);

  public abstract A withMethods(io.sundr.codegen.model.Method...);

  public abstract java.lang.Boolean hasMethods();

  public abstract io.sundr.codegen.model.TypeDefFluent$MethodsNested<A> addNewMethod();

  public abstract io.sundr.codegen.model.TypeDefFluent$MethodsNested<A> addNewMethodLike(io.sundr.codegen.model.Method);

  public abstract io.sundr.codegen.model.TypeDefFluent$MethodsNested<A> setNewMethodLike(int, io.sundr.codegen.model.Method);

  public abstract io.sundr.codegen.model.TypeDefFluent$MethodsNested<A> editMethod(int);

  public abstract io.sundr.codegen.model.TypeDefFluent$MethodsNested<A> editFirstMethod();

  public abstract io.sundr.codegen.model.TypeDefFluent$MethodsNested<A> editLastMethod();

  public abstract io.sundr.codegen.model.TypeDefFluent$MethodsNested<A> editMatchingMethod(io.sundr.builder.Predicate<io.sundr.codegen.model.MethodBuilder>);

  public abstract io.sundr.codegen.model.TypeDef getOuterType();

  public abstract io.sundr.codegen.model.TypeDef buildOuterType();

  public abstract A withOuterType(io.sundr.codegen.model.TypeDef);

  public abstract java.lang.Boolean hasOuterType();

  public abstract io.sundr.codegen.model.TypeDefFluent$OuterTypeNested<A> withNewOuterType();

  public abstract io.sundr.codegen.model.TypeDefFluent$OuterTypeNested<A> withNewOuterTypeLike(io.sundr.codegen.model.TypeDef);

  public abstract io.sundr.codegen.model.TypeDefFluent$OuterTypeNested<A> editOuterType();

  public abstract io.sundr.codegen.model.TypeDefFluent$OuterTypeNested<A> editOrNewOuterType();

  public abstract io.sundr.codegen.model.TypeDefFluent$OuterTypeNested<A> editOrNewOuterTypeLike(io.sundr.codegen.model.TypeDef);

  public abstract A addToInnerTypes(int, io.sundr.codegen.model.TypeDef);

  public abstract A setToInnerTypes(int, io.sundr.codegen.model.TypeDef);

  public abstract A addToInnerTypes(io.sundr.codegen.model.TypeDef...);

  public abstract A addAllToInnerTypes(java.util.Collection<io.sundr.codegen.model.TypeDef>);

  public abstract A removeFromInnerTypes(io.sundr.codegen.model.TypeDef...);

  public abstract A removeAllFromInnerTypes(java.util.Collection<io.sundr.codegen.model.TypeDef>);

  public abstract java.util.List<io.sundr.codegen.model.TypeDef> getInnerTypes();

  public abstract java.util.List<io.sundr.codegen.model.TypeDef> buildInnerTypes();

  public abstract io.sundr.codegen.model.TypeDef buildInnerType(int);

  public abstract io.sundr.codegen.model.TypeDef buildFirstInnerType();

  public abstract io.sundr.codegen.model.TypeDef buildLastInnerType();

  public abstract io.sundr.codegen.model.TypeDef buildMatchingInnerType(io.sundr.builder.Predicate<io.sundr.codegen.model.TypeDefBuilder>);

  public abstract java.lang.Boolean hasMatchingInnerType(io.sundr.builder.Predicate<io.sundr.codegen.model.TypeDefBuilder>);

  public abstract A withInnerTypes(java.util.List<io.sundr.codegen.model.TypeDef>);

  public abstract A withInnerTypes(io.sundr.codegen.model.TypeDef...);

  public abstract java.lang.Boolean hasInnerTypes();

  public abstract io.sundr.codegen.model.TypeDefFluent$InnerTypesNested<A> addNewInnerType();

  public abstract io.sundr.codegen.model.TypeDefFluent$InnerTypesNested<A> addNewInnerTypeLike(io.sundr.codegen.model.TypeDef);

  public abstract io.sundr.codegen.model.TypeDefFluent$InnerTypesNested<A> setNewInnerTypeLike(int, io.sundr.codegen.model.TypeDef);

  public abstract io.sundr.codegen.model.TypeDefFluent$InnerTypesNested<A> editInnerType(int);

  public abstract io.sundr.codegen.model.TypeDefFluent$InnerTypesNested<A> editFirstInnerType();

  public abstract io.sundr.codegen.model.TypeDefFluent$InnerTypesNested<A> editLastInnerType();

  public abstract io.sundr.codegen.model.TypeDefFluent$InnerTypesNested<A> editMatchingInnerType(io.sundr.builder.Predicate<io.sundr.codegen.model.TypeDefBuilder>);
}
