Compiled from "ClassRefBuilder.java"
public class io.sundr.codegen.model.ClassRefBuilder extends io.sundr.codegen.model.ClassRefFluentImpl<io.sundr.codegen.model.ClassRefBuilder> implements io.sundr.builder.VisitableBuilder<io.sundr.codegen.model.ClassRef, io.sundr.codegen.model.ClassRefBuilder> {
  private static final java.util.Map<io.sundr.codegen.model.ClassRefBuilder$CacheKey, io.sundr.codegen.model.EditableClassRef> CACHE;

  io.sundr.codegen.model.ClassRefFluent<?> fluent;

  java.lang.Boolean validationEnabled;

  public io.sundr.codegen.model.ClassRefBuilder();
    Code:
       0: aload_0
       1: iconst_1
       2: invokestatic  #34                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: invokespecial #37                 // Method "<init>":(Ljava/lang/Boolean;)V
       8: return

  public io.sundr.codegen.model.ClassRefBuilder(java.lang.Boolean);
    Code:
       0: aload_0
       1: invokespecial #41                 // Method io/sundr/codegen/model/ClassRefFluentImpl."<init>":()V
       4: aload_0
       5: aload_0
       6: putfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
       9: aload_0
      10: aload_1
      11: putfield      #45                 // Field validationEnabled:Ljava/lang/Boolean;
      14: return

  public io.sundr.codegen.model.ClassRefBuilder(io.sundr.codegen.model.ClassRefFluent<?>);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokestatic  #34                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       6: invokespecial #49                 // Method "<init>":(Lio/sundr/codegen/model/ClassRefFluent;Ljava/lang/Boolean;)V
       9: return

  public io.sundr.codegen.model.ClassRefBuilder(io.sundr.codegen.model.ClassRefFluent<?>, java.lang.Boolean);
    Code:
       0: aload_0
       1: invokespecial #41                 // Method io/sundr/codegen/model/ClassRefFluentImpl."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
       9: aload_0
      10: aload_2
      11: putfield      #45                 // Field validationEnabled:Ljava/lang/Boolean;
      14: return

  public io.sundr.codegen.model.ClassRefBuilder(io.sundr.codegen.model.ClassRefFluent<?>, io.sundr.codegen.model.ClassRef);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_1
       4: invokestatic  #34                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       7: invokespecial #53                 // Method "<init>":(Lio/sundr/codegen/model/ClassRefFluent;Lio/sundr/codegen/model/ClassRef;Ljava/lang/Boolean;)V
      10: return

  public io.sundr.codegen.model.ClassRefBuilder(io.sundr.codegen.model.ClassRefFluent<?>, io.sundr.codegen.model.ClassRef, java.lang.Boolean);
    Code:
       0: aload_0
       1: invokespecial #41                 // Method io/sundr/codegen/model/ClassRefFluentImpl."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
       9: aload_1
      10: aload_2
      11: invokevirtual #61                 // Method io/sundr/codegen/model/ClassRef.getDefinition:()Lio/sundr/codegen/model/TypeDef;
      14: invokeinterface #67,  2           // InterfaceMethod io/sundr/codegen/model/ClassRefFluent.withDefinition:(Lio/sundr/codegen/model/TypeDef;)Lio/sundr/codegen/model/ClassRefFluent;
      19: pop
      20: aload_1
      21: aload_2
      22: invokevirtual #71                 // Method io/sundr/codegen/model/ClassRef.getFullyQualifiedName:()Ljava/lang/String;
      25: invokeinterface #75,  2           // InterfaceMethod io/sundr/codegen/model/ClassRefFluent.withFullyQualifiedName:(Ljava/lang/String;)Lio/sundr/codegen/model/ClassRefFluent;
      30: pop
      31: aload_1
      32: aload_2
      33: invokevirtual #79                 // Method io/sundr/codegen/model/ClassRef.getDimensions:()I
      36: invokeinterface #83,  2           // InterfaceMethod io/sundr/codegen/model/ClassRefFluent.withDimensions:(I)Lio/sundr/codegen/model/ClassRefFluent;
      41: pop
      42: aload_1
      43: aload_2
      44: invokevirtual #87                 // Method io/sundr/codegen/model/ClassRef.getArguments:()Ljava/util/List;
      47: invokeinterface #91,  2           // InterfaceMethod io/sundr/codegen/model/ClassRefFluent.withArguments:(Ljava/util/List;)Lio/sundr/codegen/model/ClassRefFluent;
      52: pop
      53: aload_1
      54: aload_2
      55: invokevirtual #95                 // Method io/sundr/codegen/model/ClassRef.getAttributes:()Ljava/util/Map;
      58: invokeinterface #99,  2           // InterfaceMethod io/sundr/codegen/model/ClassRefFluent.withAttributes:(Ljava/util/Map;)Lio/sundr/codegen/model/AttributeSupportFluent;
      63: pop
      64: aload_0
      65: aload_3
      66: putfield      #45                 // Field validationEnabled:Ljava/lang/Boolean;
      69: return

  public io.sundr.codegen.model.ClassRefBuilder(io.sundr.codegen.model.ClassRef);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokestatic  #34                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       6: invokespecial #103                // Method "<init>":(Lio/sundr/codegen/model/ClassRef;Ljava/lang/Boolean;)V
       9: return

  public io.sundr.codegen.model.ClassRefBuilder(io.sundr.codegen.model.ClassRef, java.lang.Boolean);
    Code:
       0: aload_0
       1: invokespecial #41                 // Method io/sundr/codegen/model/ClassRefFluentImpl."<init>":()V
       4: aload_0
       5: aload_0
       6: putfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
       9: aload_0
      10: aload_1
      11: invokevirtual #61                 // Method io/sundr/codegen/model/ClassRef.getDefinition:()Lio/sundr/codegen/model/TypeDef;
      14: invokevirtual #104                // Method withDefinition:(Lio/sundr/codegen/model/TypeDef;)Lio/sundr/codegen/model/ClassRefFluent;
      17: pop
      18: aload_0
      19: aload_1
      20: invokevirtual #71                 // Method io/sundr/codegen/model/ClassRef.getFullyQualifiedName:()Ljava/lang/String;
      23: invokevirtual #105                // Method withFullyQualifiedName:(Ljava/lang/String;)Lio/sundr/codegen/model/ClassRefFluent;
      26: pop
      27: aload_0
      28: aload_1
      29: invokevirtual #79                 // Method io/sundr/codegen/model/ClassRef.getDimensions:()I
      32: invokevirtual #106                // Method withDimensions:(I)Lio/sundr/codegen/model/ClassRefFluent;
      35: pop
      36: aload_0
      37: aload_1
      38: invokevirtual #87                 // Method io/sundr/codegen/model/ClassRef.getArguments:()Ljava/util/List;
      41: invokevirtual #107                // Method withArguments:(Ljava/util/List;)Lio/sundr/codegen/model/ClassRefFluent;
      44: pop
      45: aload_0
      46: aload_1
      47: invokevirtual #95                 // Method io/sundr/codegen/model/ClassRef.getAttributes:()Ljava/util/Map;
      50: invokevirtual #108                // Method withAttributes:(Ljava/util/Map;)Lio/sundr/codegen/model/AttributeSupportFluent;
      53: pop
      54: aload_0
      55: aload_2
      56: putfield      #45                 // Field validationEnabled:Ljava/lang/Boolean;
      59: return

  private static boolean canCache(java.util.List<io.sundr.codegen.model.TypeRef>);
    Code:
       0: aload_0
       1: invokeinterface #116,  1          // InterfaceMethod java/util/List.isEmpty:()Z
       6: ifeq          11
       9: iconst_1
      10: ireturn
      11: aload_0
      12: invokeinterface #120,  1          // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      17: ldc           #122                // class io/sundr/codegen/model/TypeParamRef
      19: dup
      20: invokevirtual #128                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      23: pop
      24: invokedynamic #149,  0            // InvokeDynamic #0:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      29: invokeinterface #155,  1          // InterfaceMethod java/util/function/Predicate.negate:()Ljava/util/function/Predicate;
      34: ldc           #157                // class io/sundr/codegen/model/WildcardRefBuilder
      36: dup
      37: invokevirtual #128                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      40: pop
      41: invokedynamic #149,  0            // InvokeDynamic #0:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      46: invokeinterface #155,  1          // InterfaceMethod java/util/function/Predicate.negate:()Ljava/util/function/Predicate;
      51: invokeinterface #161,  2          // InterfaceMethod java/util/function/Predicate.and:(Ljava/util/function/Predicate;)Ljava/util/function/Predicate;
      56: ldc           #163                // class io/sundr/codegen/model/WildcardRef
      58: dup
      59: invokevirtual #128                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      62: pop
      63: invokedynamic #149,  0            // InvokeDynamic #0:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      68: invokeinterface #155,  1          // InterfaceMethod java/util/function/Predicate.negate:()Ljava/util/function/Predicate;
      73: invokeinterface #161,  2          // InterfaceMethod java/util/function/Predicate.and:(Ljava/util/function/Predicate;)Ljava/util/function/Predicate;
      78: invokeinterface #169,  2          // InterfaceMethod java/util/stream/Stream.noneMatch:(Ljava/util/function/Predicate;)Z
      83: ireturn

  private static boolean canCache(io.sundr.codegen.model.ClassRefFluent<?>, io.sundr.codegen.model.TypeDef);
    Code:
       0: aload_1
       1: ifnull        69
       4: iconst_3
       5: anewarray     #175                // class io/sundr/codegen/model/Kind
       8: dup
       9: iconst_0
      10: getstatic     #179                // Field io/sundr/codegen/model/Kind.CLASS:Lio/sundr/codegen/model/Kind;
      13: aastore
      14: dup
      15: iconst_1
      16: getstatic     #182                // Field io/sundr/codegen/model/Kind.INTERFACE:Lio/sundr/codegen/model/Kind;
      19: aastore
      20: dup
      21: iconst_2
      22: getstatic     #185                // Field io/sundr/codegen/model/Kind.ENUM:Lio/sundr/codegen/model/Kind;
      25: aastore
      26: invokestatic  #191                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      29: aload_1
      30: invokevirtual #197                // Method io/sundr/codegen/model/TypeDef.getKind:()Lio/sundr/codegen/model/Kind;
      33: invokeinterface #200,  2          // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      38: ifeq          69
      41: aload_1
      42: invokevirtual #203                // Method io/sundr/codegen/model/TypeDef.getParameters:()Ljava/util/List;
      45: invokeinterface #116,  1          // InterfaceMethod java/util/List.isEmpty:()Z
      50: ifeq          69
      53: aload_0
      54: invokeinterface #206,  1          // InterfaceMethod io/sundr/codegen/model/ClassRefFluent.buildArguments:()Ljava/util/List;
      59: invokestatic  #208                // Method canCache:(Ljava/util/List;)Z
      62: ifeq          69
      65: iconst_1
      66: goto          70
      69: iconst_0
      70: ireturn

  private static io.sundr.codegen.model.EditableClassRef newInstance(io.sundr.codegen.model.ClassRefFluent<?>, io.sundr.codegen.model.TypeDef);
    Code:
       0: new           #214                // class io/sundr/codegen/model/EditableClassRef
       3: dup
       4: aload_1
       5: aload_0
       6: invokeinterface #215,  1          // InterfaceMethod io/sundr/codegen/model/ClassRefFluent.getFullyQualifiedName:()Ljava/lang/String;
      11: aload_0
      12: invokeinterface #216,  1          // InterfaceMethod io/sundr/codegen/model/ClassRefFluent.getDimensions:()I
      17: aload_0
      18: invokeinterface #206,  1          // InterfaceMethod io/sundr/codegen/model/ClassRefFluent.buildArguments:()Ljava/util/List;
      23: aload_0
      24: invokeinterface #217,  1          // InterfaceMethod io/sundr/codegen/model/ClassRefFluent.getAttributes:()Ljava/util/Map;
      29: invokespecial #220                // Method io/sundr/codegen/model/EditableClassRef."<init>":(Lio/sundr/codegen/model/TypeDef;Ljava/lang/String;ILjava/util/List;Ljava/util/Map;)V
      32: areturn

  public io.sundr.codegen.model.EditableClassRef build();
    Code:
       0: aload_0
       1: getfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
       4: invokeinterface #225,  1          // InterfaceMethod io/sundr/codegen/model/ClassRefFluent.buildDefinition:()Lio/sundr/codegen/model/TypeDef;
       9: astore_1
      10: aload_0
      11: getfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
      14: aload_1
      15: invokestatic  #227                // Method canCache:(Lio/sundr/codegen/model/ClassRefFluent;Lio/sundr/codegen/model/TypeDef;)Z
      18: ifeq          62
      21: new           #12                 // class io/sundr/codegen/model/ClassRefBuilder$CacheKey
      24: dup
      25: aload_0
      26: getfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
      29: aload_1
      30: aconst_null
      31: invokespecial #230                // Method io/sundr/codegen/model/ClassRefBuilder$CacheKey."<init>":(Lio/sundr/codegen/model/ClassRefFluent;Lio/sundr/codegen/model/TypeDef;Lio/sundr/codegen/model/ClassRefBuilder$1;)V
      34: astore_2
      35: getstatic     #232                // Field CACHE:Ljava/util/Map;
      38: aload_2
      39: invokeinterface #238,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      44: invokestatic  #244                // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      47: aload_0
      48: aload_1
      49: aload_2
      50: invokedynamic #255,  0            // InvokeDynamic #1:get:(Lio/sundr/codegen/model/ClassRefBuilder;Lio/sundr/codegen/model/TypeDef;Lio/sundr/codegen/model/ClassRefBuilder$CacheKey;)Ljava/util/function/Supplier;
      55: invokevirtual #259                // Method java/util/Optional.orElseGet:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      58: checkcast     #214                // class io/sundr/codegen/model/EditableClassRef
      61: areturn
      62: aload_0
      63: getfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
      66: aload_1
      67: invokestatic  #261                // Method newInstance:(Lio/sundr/codegen/model/ClassRefFluent;Lio/sundr/codegen/model/TypeDef;)Lio/sundr/codegen/model/EditableClassRef;
      70: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #128                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #128                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_0
      25: aload_1
      26: invokespecial #266                // Method io/sundr/codegen/model/ClassRefFluentImpl.equals:(Ljava/lang/Object;)Z
      29: ifne          34
      32: iconst_0
      33: ireturn
      34: aload_1
      35: checkcast     #2                  // class io/sundr/codegen/model/ClassRefBuilder
      38: astore_2
      39: aload_0
      40: getfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
      43: ifnull        71
      46: aload_0
      47: getfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
      50: aload_0
      51: if_acmpeq     71
      54: aload_0
      55: getfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
      58: aload_2
      59: getfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
      62: invokevirtual #267                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      65: ifne          88
      68: goto          86
      71: aload_2
      72: getfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
      75: ifnull        88
      78: aload_0
      79: getfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
      82: aload_0
      83: if_acmpeq     88
      86: iconst_0
      87: ireturn
      88: aload_0
      89: getfield      #45                 // Field validationEnabled:Ljava/lang/Boolean;
      92: ifnull        112
      95: aload_0
      96: getfield      #45                 // Field validationEnabled:Ljava/lang/Boolean;
      99: aload_2
     100: getfield      #45                 // Field validationEnabled:Ljava/lang/Boolean;
     103: invokevirtual #268                // Method java/lang/Boolean.equals:(Ljava/lang/Object;)Z
     106: ifne          121
     109: goto          119
     112: aload_2
     113: getfield      #45                 // Field validationEnabled:Ljava/lang/Boolean;
     116: ifnull        121
     119: iconst_0
     120: ireturn
     121: iconst_1
     122: ireturn

  public java.lang.Object build();
    Code:
       0: aload_0
       1: invokevirtual #273                // Method build:()Lio/sundr/codegen/model/EditableClassRef;
       4: areturn

  private io.sundr.codegen.model.EditableClassRef lambda$build$0(io.sundr.codegen.model.TypeDef, io.sundr.codegen.model.ClassRefBuilder$CacheKey);
    Code:
       0: aload_0
       1: getfield      #43                 // Field fluent:Lio/sundr/codegen/model/ClassRefFluent;
       4: aload_1
       5: invokestatic  #261                // Method newInstance:(Lio/sundr/codegen/model/ClassRefFluent;Lio/sundr/codegen/model/TypeDef;)Lio/sundr/codegen/model/EditableClassRef;
       8: astore_3
       9: getstatic     #232                // Field CACHE:Ljava/util/Map;
      12: aload_2
      13: aload_3
      14: invokeinterface #277,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      19: pop
      20: aload_3
      21: areturn

  static {};
    Code:
       0: new           #282                // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #283                // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: putstatic     #232                // Field CACHE:Ljava/util/Map;
      10: return
}
