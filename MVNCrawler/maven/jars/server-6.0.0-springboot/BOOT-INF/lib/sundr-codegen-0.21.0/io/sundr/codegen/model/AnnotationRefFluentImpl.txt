Compiled from "AnnotationRefFluentImpl.java"
public class io.sundr.codegen.model.AnnotationRefFluentImpl<A extends io.sundr.codegen.model.AnnotationRefFluent<A>> extends io.sundr.codegen.model.AttributeSupportFluentImpl<A> implements io.sundr.codegen.model.AnnotationRefFluent<A> {
  private io.sundr.codegen.model.ClassRefBuilder classRef;

  private final java.util.Map<java.lang.String, java.lang.Object> parameters;

  public io.sundr.codegen.model.AnnotationRefFluentImpl();
    Code:
       0: aload_0
       1: invokespecial #28                 // Method io/sundr/codegen/model/AttributeSupportFluentImpl."<init>":()V
       4: aload_0
       5: new           #30                 // class java/util/HashMap
       8: dup
       9: invokespecial #31                 // Method java/util/HashMap."<init>":()V
      12: putfield      #33                 // Field parameters:Ljava/util/Map;
      15: return

  public io.sundr.codegen.model.AnnotationRefFluentImpl(io.sundr.codegen.model.AnnotationRef);
    Code:
       0: aload_0
       1: invokespecial #28                 // Method io/sundr/codegen/model/AttributeSupportFluentImpl."<init>":()V
       4: aload_0
       5: new           #30                 // class java/util/HashMap
       8: dup
       9: invokespecial #31                 // Method java/util/HashMap."<init>":()V
      12: putfield      #33                 // Field parameters:Ljava/util/Map;
      15: aload_0
      16: aload_1
      17: invokevirtual #43                 // Method io/sundr/codegen/model/AnnotationRef.getClassRef:()Lio/sundr/codegen/model/ClassRef;
      20: invokevirtual #47                 // Method withClassRef:(Lio/sundr/codegen/model/ClassRef;)Lio/sundr/codegen/model/AnnotationRefFluent;
      23: pop
      24: aload_0
      25: aload_1
      26: invokevirtual #51                 // Method io/sundr/codegen/model/AnnotationRef.getParameters:()Ljava/util/Map;
      29: invokevirtual #55                 // Method withParameters:(Ljava/util/Map;)Lio/sundr/codegen/model/AnnotationRefFluent;
      32: pop
      33: aload_0
      34: aload_1
      35: invokevirtual #58                 // Method io/sundr/codegen/model/AnnotationRef.getAttributes:()Ljava/util/Map;
      38: invokevirtual #62                 // Method withAttributes:(Ljava/util/Map;)Lio/sundr/codegen/model/AttributeSupportFluent;
      41: pop
      42: return

  public io.sundr.codegen.model.ClassRef getClassRef();
    Code:
       0: aload_0
       1: getfield      #67                 // Field classRef:Lio/sundr/codegen/model/ClassRefBuilder;
       4: ifnull        17
       7: aload_0
       8: getfield      #67                 // Field classRef:Lio/sundr/codegen/model/ClassRefBuilder;
      11: invokevirtual #73                 // Method io/sundr/codegen/model/ClassRefBuilder.build:()Lio/sundr/codegen/model/EditableClassRef;
      14: goto          18
      17: aconst_null
      18: areturn

  public io.sundr.codegen.model.ClassRef buildClassRef();
    Code:
       0: aload_0
       1: getfield      #67                 // Field classRef:Lio/sundr/codegen/model/ClassRefBuilder;
       4: ifnull        17
       7: aload_0
       8: getfield      #67                 // Field classRef:Lio/sundr/codegen/model/ClassRefBuilder;
      11: invokevirtual #73                 // Method io/sundr/codegen/model/ClassRefBuilder.build:()Lio/sundr/codegen/model/EditableClassRef;
      14: goto          18
      17: aconst_null
      18: areturn

  public A withClassRef(io.sundr.codegen.model.ClassRef);
    Code:
       0: aload_0
       1: getfield      #80                 // Field _visitables:Lio/sundr/builder/VisitableMap;
       4: ldc           #81                 // String classRef
       6: invokevirtual #87                 // Method io/sundr/builder/VisitableMap.get:(Ljava/lang/Object;)Ljava/util/List;
       9: aload_0
      10: getfield      #67                 // Field classRef:Lio/sundr/codegen/model/ClassRefBuilder;
      13: invokeinterface #93,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      18: pop
      19: aload_1
      20: ifnull        54
      23: aload_0
      24: new           #69                 // class io/sundr/codegen/model/ClassRefBuilder
      27: dup
      28: aload_1
      29: invokespecial #96                 // Method io/sundr/codegen/model/ClassRefBuilder."<init>":(Lio/sundr/codegen/model/ClassRef;)V
      32: putfield      #67                 // Field classRef:Lio/sundr/codegen/model/ClassRefBuilder;
      35: aload_0
      36: getfield      #80                 // Field _visitables:Lio/sundr/builder/VisitableMap;
      39: ldc           #81                 // String classRef
      41: invokevirtual #87                 // Method io/sundr/builder/VisitableMap.get:(Ljava/lang/Object;)Ljava/util/List;
      44: aload_0
      45: getfield      #67                 // Field classRef:Lio/sundr/codegen/model/ClassRefBuilder;
      48: invokeinterface #99,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      53: pop
      54: aload_0
      55: areturn

  public java.lang.Boolean hasClassRef();
    Code:
       0: aload_0
       1: getfield      #67                 // Field classRef:Lio/sundr/codegen/model/ClassRefBuilder;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #108                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      15: areturn

  public io.sundr.codegen.model.AnnotationRefFluent$ClassRefNested<A> withNewClassRef();
    Code:
       0: new           #10                 // class io/sundr/codegen/model/AnnotationRefFluentImpl$ClassRefNestedImpl
       3: dup
       4: aload_0
       5: invokespecial #113                // Method io/sundr/codegen/model/AnnotationRefFluentImpl$ClassRefNestedImpl."<init>":(Lio/sundr/codegen/model/AnnotationRefFluentImpl;)V
       8: areturn

  public io.sundr.codegen.model.AnnotationRefFluent$ClassRefNested<A> withNewClassRefLike(io.sundr.codegen.model.ClassRef);
    Code:
       0: new           #10                 // class io/sundr/codegen/model/AnnotationRefFluentImpl$ClassRefNestedImpl
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #118                // Method io/sundr/codegen/model/AnnotationRefFluentImpl$ClassRefNestedImpl."<init>":(Lio/sundr/codegen/model/AnnotationRefFluentImpl;Lio/sundr/codegen/model/ClassRef;)V
       9: areturn

  public io.sundr.codegen.model.AnnotationRefFluent$ClassRefNested<A> editClassRef();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #121                // Method getClassRef:()Lio/sundr/codegen/model/ClassRef;
       5: invokevirtual #123                // Method withNewClassRefLike:(Lio/sundr/codegen/model/ClassRef;)Lio/sundr/codegen/model/AnnotationRefFluent$ClassRefNested;
       8: areturn

  public io.sundr.codegen.model.AnnotationRefFluent$ClassRefNested<A> editOrNewClassRef();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #121                // Method getClassRef:()Lio/sundr/codegen/model/ClassRef;
       5: ifnull        15
       8: aload_0
       9: invokevirtual #121                // Method getClassRef:()Lio/sundr/codegen/model/ClassRef;
      12: goto          25
      15: new           #69                 // class io/sundr/codegen/model/ClassRefBuilder
      18: dup
      19: invokespecial #125                // Method io/sundr/codegen/model/ClassRefBuilder."<init>":()V
      22: invokevirtual #73                 // Method io/sundr/codegen/model/ClassRefBuilder.build:()Lio/sundr/codegen/model/EditableClassRef;
      25: invokevirtual #123                // Method withNewClassRefLike:(Lio/sundr/codegen/model/ClassRef;)Lio/sundr/codegen/model/AnnotationRefFluent$ClassRefNested;
      28: areturn

  public io.sundr.codegen.model.AnnotationRefFluent$ClassRefNested<A> editOrNewClassRefLike(io.sundr.codegen.model.ClassRef);
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #121                // Method getClassRef:()Lio/sundr/codegen/model/ClassRef;
       5: ifnull        15
       8: aload_0
       9: invokevirtual #121                // Method getClassRef:()Lio/sundr/codegen/model/ClassRef;
      12: goto          16
      15: aload_1
      16: invokevirtual #123                // Method withNewClassRefLike:(Lio/sundr/codegen/model/ClassRef;)Lio/sundr/codegen/model/AnnotationRefFluent$ClassRefNested;
      19: areturn

  public A addToParameters(java.lang.String, java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        20
       4: aload_2
       5: ifnull        20
       8: aload_0
       9: getfield      #33                 // Field parameters:Ljava/util/Map;
      12: aload_1
      13: aload_2
      14: invokeinterface #134,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      19: pop
      20: aload_0
      21: areturn

  public A addToParameters(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: ifnull        14
       4: aload_0
       5: getfield      #33                 // Field parameters:Ljava/util/Map;
       8: aload_1
       9: invokeinterface #142,  2          // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      14: aload_0
      15: areturn

  public A removeFromParameters(java.lang.String);
    Code:
       0: aload_1
       1: ifnull        22
       4: aload_0
       5: getfield      #33                 // Field parameters:Ljava/util/Map;
       8: ifnull        22
      11: aload_0
      12: getfield      #33                 // Field parameters:Ljava/util/Map;
      15: aload_1
      16: invokeinterface #148,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      21: pop
      22: aload_0
      23: areturn

  public A removeFromParameters(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: ifnull        29
       4: aload_1
       5: invokeinterface #152,  1          // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      10: aload_0
      11: getfield      #33                 // Field parameters:Ljava/util/Map;
      14: dup
      15: invokevirtual #158                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      18: pop
      19: invokedynamic #174,  0            // InvokeDynamic #0:accept:(Ljava/util/Map;)Ljava/util/function/Consumer;
      24: invokeinterface #180,  2          // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      29: aload_0
      30: areturn

  public java.util.Map<java.lang.String, java.lang.Object> getParameters();
    Code:
       0: aload_0
       1: getfield      #33                 // Field parameters:Ljava/util/Map;
       4: areturn

  public A withParameters(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #33                 // Field parameters:Ljava/util/Map;
       4: invokeinterface #183,  1          // InterfaceMethod java/util/Map.clear:()V
       9: aload_0
      10: getfield      #33                 // Field parameters:Ljava/util/Map;
      13: aload_1
      14: invokeinterface #142,  2          // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      19: aload_0
      20: areturn

  public java.lang.Boolean hasParameters();
    Code:
       0: aload_0
       1: getfield      #33                 // Field parameters:Ljava/util/Map;
       4: invokeinterface #188,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
       9: ifne          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: invokestatic  #108                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      20: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #158                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #158                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_0
      25: aload_1
      26: invokespecial #191                // Method io/sundr/codegen/model/AttributeSupportFluentImpl.equals:(Ljava/lang/Object;)Z
      29: ifne          34
      32: iconst_0
      33: ireturn
      34: aload_1
      35: checkcast     #2                  // class io/sundr/codegen/model/AnnotationRefFluentImpl
      38: astore_2
      39: aload_0
      40: getfield      #67                 // Field classRef:Lio/sundr/codegen/model/ClassRefBuilder;
      43: ifnull        63
      46: aload_0
      47: getfield      #67                 // Field classRef:Lio/sundr/codegen/model/ClassRefBuilder;
      50: aload_2
      51: getfield      #67                 // Field classRef:Lio/sundr/codegen/model/ClassRefBuilder;
      54: invokevirtual #192                // Method io/sundr/codegen/model/ClassRefBuilder.equals:(Ljava/lang/Object;)Z
      57: ifne          72
      60: goto          70
      63: aload_2
      64: getfield      #67                 // Field classRef:Lio/sundr/codegen/model/ClassRefBuilder;
      67: ifnull        72
      70: iconst_0
      71: ireturn
      72: aload_0
      73: getfield      #33                 // Field parameters:Ljava/util/Map;
      76: ifnull        98
      79: aload_0
      80: getfield      #33                 // Field parameters:Ljava/util/Map;
      83: aload_2
      84: getfield      #33                 // Field parameters:Ljava/util/Map;
      87: invokeinterface #193,  2          // InterfaceMethod java/util/Map.equals:(Ljava/lang/Object;)Z
      92: ifne          107
      95: goto          105
      98: aload_2
      99: getfield      #33                 // Field parameters:Ljava/util/Map;
     102: ifnull        107
     105: iconst_0
     106: ireturn
     107: iconst_1
     108: ireturn
}
