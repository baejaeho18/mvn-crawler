Compiled from "PropertyFluent.java"
public interface io.sundr.codegen.model.PropertyFluent<A extends io.sundr.codegen.model.PropertyFluent<A>> extends io.sundr.codegen.model.ModifierSupportFluent<A> {
  public abstract A addToAnnotations(int, io.sundr.codegen.model.AnnotationRef);

  public abstract A setToAnnotations(int, io.sundr.codegen.model.AnnotationRef);

  public abstract A addToAnnotations(io.sundr.codegen.model.AnnotationRef...);

  public abstract A addAllToAnnotations(java.util.Collection<io.sundr.codegen.model.AnnotationRef>);

  public abstract A removeFromAnnotations(io.sundr.codegen.model.AnnotationRef...);

  public abstract A removeAllFromAnnotations(java.util.Collection<io.sundr.codegen.model.AnnotationRef>);

  public abstract java.util.List<io.sundr.codegen.model.AnnotationRef> getAnnotations();

  public abstract java.util.List<io.sundr.codegen.model.AnnotationRef> buildAnnotations();

  public abstract io.sundr.codegen.model.AnnotationRef buildAnnotation(int);

  public abstract io.sundr.codegen.model.AnnotationRef buildFirstAnnotation();

  public abstract io.sundr.codegen.model.AnnotationRef buildLastAnnotation();

  public abstract io.sundr.codegen.model.AnnotationRef buildMatchingAnnotation(io.sundr.builder.Predicate<io.sundr.codegen.model.AnnotationRefBuilder>);

  public abstract java.lang.Boolean hasMatchingAnnotation(io.sundr.builder.Predicate<io.sundr.codegen.model.AnnotationRefBuilder>);

  public abstract A withAnnotations(java.util.List<io.sundr.codegen.model.AnnotationRef>);

  public abstract A withAnnotations(io.sundr.codegen.model.AnnotationRef...);

  public abstract java.lang.Boolean hasAnnotations();

  public abstract io.sundr.codegen.model.PropertyFluent$AnnotationsNested<A> addNewAnnotation();

  public abstract io.sundr.codegen.model.PropertyFluent$AnnotationsNested<A> addNewAnnotationLike(io.sundr.codegen.model.AnnotationRef);

  public abstract io.sundr.codegen.model.PropertyFluent$AnnotationsNested<A> setNewAnnotationLike(int, io.sundr.codegen.model.AnnotationRef);

  public abstract io.sundr.codegen.model.PropertyFluent$AnnotationsNested<A> editAnnotation(int);

  public abstract io.sundr.codegen.model.PropertyFluent$AnnotationsNested<A> editFirstAnnotation();

  public abstract io.sundr.codegen.model.PropertyFluent$AnnotationsNested<A> editLastAnnotation();

  public abstract io.sundr.codegen.model.PropertyFluent$AnnotationsNested<A> editMatchingAnnotation(io.sundr.builder.Predicate<io.sundr.codegen.model.AnnotationRefBuilder>);

  public abstract io.sundr.codegen.model.TypeRef getTypeRef();

  public abstract io.sundr.codegen.model.TypeRef buildTypeRef();

  public abstract A withTypeRef(io.sundr.codegen.model.TypeRef);

  public abstract java.lang.Boolean hasTypeRef();

  public abstract A withPrimitiveRefType(io.sundr.codegen.model.PrimitiveRef);

  public abstract io.sundr.codegen.model.PropertyFluent$PrimitiveRefTypeNested<A> withNewPrimitiveRefType();

  public abstract io.sundr.codegen.model.PropertyFluent$PrimitiveRefTypeNested<A> withNewPrimitiveRefTypeLike(io.sundr.codegen.model.PrimitiveRef);

  public abstract A withVoidRefType(io.sundr.codegen.model.VoidRef);

  public abstract io.sundr.codegen.model.PropertyFluent$VoidRefTypeNested<A> withNewVoidRefType();

  public abstract io.sundr.codegen.model.PropertyFluent$VoidRefTypeNested<A> withNewVoidRefTypeLike(io.sundr.codegen.model.VoidRef);

  public abstract A withWildcardRefType(io.sundr.codegen.model.WildcardRef);

  public abstract io.sundr.codegen.model.PropertyFluent$WildcardRefTypeNested<A> withNewWildcardRefType();

  public abstract io.sundr.codegen.model.PropertyFluent$WildcardRefTypeNested<A> withNewWildcardRefTypeLike(io.sundr.codegen.model.WildcardRef);

  public abstract A withClassRefType(io.sundr.codegen.model.ClassRef);

  public abstract io.sundr.codegen.model.PropertyFluent$ClassRefTypeNested<A> withNewClassRefType();

  public abstract io.sundr.codegen.model.PropertyFluent$ClassRefTypeNested<A> withNewClassRefTypeLike(io.sundr.codegen.model.ClassRef);

  public abstract A withTypeParamRefType(io.sundr.codegen.model.TypeParamRef);

  public abstract io.sundr.codegen.model.PropertyFluent$TypeParamRefTypeNested<A> withNewTypeParamRefType();

  public abstract io.sundr.codegen.model.PropertyFluent$TypeParamRefTypeNested<A> withNewTypeParamRefTypeLike(io.sundr.codegen.model.TypeParamRef);

  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();

  public abstract A withNewName(java.lang.String);

  public abstract A withNewName(java.lang.StringBuilder);

  public abstract A withNewName(java.lang.StringBuffer);
}
