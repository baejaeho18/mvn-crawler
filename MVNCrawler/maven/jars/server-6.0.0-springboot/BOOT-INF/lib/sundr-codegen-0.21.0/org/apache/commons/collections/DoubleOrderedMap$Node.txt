Compiled from "DoubleOrderedMap.java"
final class org.apache.commons.collections.DoubleOrderedMap$Node implements java.util.Map$Entry,org.apache.commons.collections.KeyValue {
  private java.lang.Comparable[] data;

  private org.apache.commons.collections.DoubleOrderedMap$Node[] leftNode;

  private org.apache.commons.collections.DoubleOrderedMap$Node[] rightNode;

  private org.apache.commons.collections.DoubleOrderedMap$Node[] parentNode;

  private boolean[] blackColor;

  private int hashcodeValue;

  private boolean calculatedHashCode;

  org.apache.commons.collections.DoubleOrderedMap$Node(java.lang.Comparable, java.lang.Comparable);
    Code:
       0: aload_0
       1: invokespecial #32                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_2
       6: anewarray     #34                 // class java/lang/Comparable
       9: dup
      10: iconst_0
      11: aload_1
      12: aastore
      13: dup
      14: iconst_1
      15: aload_2
      16: aastore
      17: putfield      #36                 // Field data:[Ljava/lang/Comparable;
      20: aload_0
      21: iconst_2
      22: anewarray     #2                  // class org/apache/commons/collections/DoubleOrderedMap$Node
      25: dup
      26: iconst_0
      27: aconst_null
      28: aastore
      29: dup
      30: iconst_1
      31: aconst_null
      32: aastore
      33: putfield      #38                 // Field leftNode:[Lorg/apache/commons/collections/DoubleOrderedMap$Node;
      36: aload_0
      37: iconst_2
      38: anewarray     #2                  // class org/apache/commons/collections/DoubleOrderedMap$Node
      41: dup
      42: iconst_0
      43: aconst_null
      44: aastore
      45: dup
      46: iconst_1
      47: aconst_null
      48: aastore
      49: putfield      #40                 // Field rightNode:[Lorg/apache/commons/collections/DoubleOrderedMap$Node;
      52: aload_0
      53: iconst_2
      54: anewarray     #2                  // class org/apache/commons/collections/DoubleOrderedMap$Node
      57: dup
      58: iconst_0
      59: aconst_null
      60: aastore
      61: dup
      62: iconst_1
      63: aconst_null
      64: aastore
      65: putfield      #42                 // Field parentNode:[Lorg/apache/commons/collections/DoubleOrderedMap$Node;
      68: aload_0
      69: iconst_2
      70: newarray       boolean
      72: dup
      73: iconst_0
      74: iconst_1
      75: bastore
      76: dup
      77: iconst_1
      78: iconst_1
      79: bastore
      80: putfield      #44                 // Field blackColor:[Z
      83: aload_0
      84: iconst_0
      85: putfield      #46                 // Field calculatedHashCode:Z
      88: return

  private java.lang.Comparable getData(int);
    Code:
       0: aload_0
       1: getfield      #36                 // Field data:[Ljava/lang/Comparable;
       4: iload_1
       5: aaload
       6: areturn

  private void setLeft(org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: getfield      #38                 // Field leftNode:[Lorg/apache/commons/collections/DoubleOrderedMap$Node;
       4: iload_2
       5: aload_1
       6: aastore
       7: return

  private org.apache.commons.collections.DoubleOrderedMap$Node getLeft(int);
    Code:
       0: aload_0
       1: getfield      #38                 // Field leftNode:[Lorg/apache/commons/collections/DoubleOrderedMap$Node;
       4: iload_1
       5: aaload
       6: areturn

  private void setRight(org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: getfield      #40                 // Field rightNode:[Lorg/apache/commons/collections/DoubleOrderedMap$Node;
       4: iload_2
       5: aload_1
       6: aastore
       7: return

  private org.apache.commons.collections.DoubleOrderedMap$Node getRight(int);
    Code:
       0: aload_0
       1: getfield      #40                 // Field rightNode:[Lorg/apache/commons/collections/DoubleOrderedMap$Node;
       4: iload_1
       5: aaload
       6: areturn

  private void setParent(org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: getfield      #42                 // Field parentNode:[Lorg/apache/commons/collections/DoubleOrderedMap$Node;
       4: iload_2
       5: aload_1
       6: aastore
       7: return

  private org.apache.commons.collections.DoubleOrderedMap$Node getParent(int);
    Code:
       0: aload_0
       1: getfield      #42                 // Field parentNode:[Lorg/apache/commons/collections/DoubleOrderedMap$Node;
       4: iload_1
       5: aaload
       6: areturn

  private void swapColors(org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: getfield      #44                 // Field blackColor:[Z
       4: iload_2
       5: dup2
       6: baload
       7: aload_1
       8: getfield      #44                 // Field blackColor:[Z
      11: iload_2
      12: baload
      13: ixor
      14: bastore
      15: aload_1
      16: getfield      #44                 // Field blackColor:[Z
      19: iload_2
      20: dup2
      21: baload
      22: aload_0
      23: getfield      #44                 // Field blackColor:[Z
      26: iload_2
      27: baload
      28: ixor
      29: bastore
      30: aload_0
      31: getfield      #44                 // Field blackColor:[Z
      34: iload_2
      35: dup2
      36: baload
      37: aload_1
      38: getfield      #44                 // Field blackColor:[Z
      41: iload_2
      42: baload
      43: ixor
      44: bastore
      45: return

  private boolean isBlack(int);
    Code:
       0: aload_0
       1: getfield      #44                 // Field blackColor:[Z
       4: iload_1
       5: baload
       6: ireturn

  private boolean isRed(int);
    Code:
       0: aload_0
       1: getfield      #44                 // Field blackColor:[Z
       4: iload_1
       5: baload
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private void setBlack(int);
    Code:
       0: aload_0
       1: getfield      #44                 // Field blackColor:[Z
       4: iload_1
       5: iconst_1
       6: bastore
       7: return

  private void setRed(int);
    Code:
       0: aload_0
       1: getfield      #44                 // Field blackColor:[Z
       4: iload_1
       5: iconst_0
       6: bastore
       7: return

  private void copyColor(org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: getfield      #44                 // Field blackColor:[Z
       4: iload_2
       5: aload_1
       6: getfield      #44                 // Field blackColor:[Z
       9: iload_2
      10: baload
      11: bastore
      12: return

  public java.lang.Object getKey();
    Code:
       0: aload_0
       1: getfield      #36                 // Field data:[Ljava/lang/Comparable;
       4: iconst_0
       5: aaload
       6: areturn

  public java.lang.Object getValue();
    Code:
       0: aload_0
       1: getfield      #36                 // Field data:[Ljava/lang/Comparable;
       4: iconst_1
       5: aaload
       6: areturn

  public java.lang.Object setValue(java.lang.Object) throws java.lang.UnsupportedOperationException;
    Code:
       0: new           #78                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #80                 // String Map.Entry.setValue is not supported
       6: invokespecial #83                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #6                  // class java/util/Map$Entry
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #6                  // class java/util/Map$Entry
      20: astore_2
      21: aload_0
      22: getfield      #36                 // Field data:[Ljava/lang/Comparable;
      25: iconst_0
      26: aaload
      27: aload_2
      28: invokeinterface #89,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      33: invokevirtual #91                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      36: ifeq          61
      39: aload_0
      40: getfield      #36                 // Field data:[Ljava/lang/Comparable;
      43: iconst_1
      44: aaload
      45: aload_2
      46: invokeinterface #93,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      51: invokevirtual #91                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      54: ifeq          61
      57: iconst_1
      58: goto          62
      61: iconst_0
      62: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #46                 // Field calculatedHashCode:Z
       4: ifne          35
       7: aload_0
       8: aload_0
       9: getfield      #36                 // Field data:[Ljava/lang/Comparable;
      12: iconst_0
      13: aaload
      14: invokevirtual #100                // Method java/lang/Object.hashCode:()I
      17: aload_0
      18: getfield      #36                 // Field data:[Ljava/lang/Comparable;
      21: iconst_1
      22: aaload
      23: invokevirtual #100                // Method java/lang/Object.hashCode:()I
      26: ixor
      27: putfield      #102                // Field hashcodeValue:I
      30: aload_0
      31: iconst_1
      32: putfield      #46                 // Field calculatedHashCode:Z
      35: aload_0
      36: getfield      #102                // Field hashcodeValue:I
      39: ireturn

  static java.lang.Comparable access$200(org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #106                // Method getData:(I)Ljava/lang/Comparable;
       5: areturn

  static org.apache.commons.collections.DoubleOrderedMap$Node access$700(org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #112                // Method getLeft:(I)Lorg/apache/commons/collections/DoubleOrderedMap$Node;
       5: areturn

  static org.apache.commons.collections.DoubleOrderedMap$Node access$800(org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #115                // Method getRight:(I)Lorg/apache/commons/collections/DoubleOrderedMap$Node;
       5: areturn

  static org.apache.commons.collections.DoubleOrderedMap$Node access$900(org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #118                // Method getParent:(I)Lorg/apache/commons/collections/DoubleOrderedMap$Node;
       5: areturn

  static void access$1000(org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #121                // Method setBlack:(I)V
       5: return

  static void access$1100(org.apache.commons.collections.DoubleOrderedMap$Node, org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #125                // Method copyColor:(Lorg/apache/commons/collections/DoubleOrderedMap$Node;I)V
       6: return

  static boolean access$1200(org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #130                // Method isRed:(I)Z
       5: ireturn

  static boolean access$1300(org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #133                // Method isBlack:(I)Z
       5: ireturn

  static void access$1400(org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #136                // Method setRed:(I)V
       5: return

  static void access$1500(org.apache.commons.collections.DoubleOrderedMap$Node, org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #139                // Method setRight:(Lorg/apache/commons/collections/DoubleOrderedMap$Node;I)V
       6: return

  static void access$1600(org.apache.commons.collections.DoubleOrderedMap$Node, org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #142                // Method setParent:(Lorg/apache/commons/collections/DoubleOrderedMap$Node;I)V
       6: return

  static void access$1700(org.apache.commons.collections.DoubleOrderedMap$Node, org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #145                // Method setLeft:(Lorg/apache/commons/collections/DoubleOrderedMap$Node;I)V
       6: return

  static void access$1800(org.apache.commons.collections.DoubleOrderedMap$Node, org.apache.commons.collections.DoubleOrderedMap$Node, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #148                // Method swapColors:(Lorg/apache/commons/collections/DoubleOrderedMap$Node;I)V
       6: return
}
