Compiled from "BaseNCodec.java"
public abstract class org.jose4j.base64url.internal.apache.commons.codec.binary.BaseNCodec {
  static final int EOF;

  public static final int MIME_CHUNK_SIZE;

  public static final int PEM_CHUNK_SIZE;

  private static final int DEFAULT_BUFFER_RESIZE_FACTOR;

  private static final int DEFAULT_BUFFER_SIZE;

  protected static final int MASK_8BITS;

  protected static final byte PAD_DEFAULT;

  protected final byte PAD;

  private final int unencodedBlockSize;

  private final int encodedBlockSize;

  protected final int lineLength;

  private final int chunkSeparatorLength;

  protected org.jose4j.base64url.internal.apache.commons.codec.binary.BaseNCodec(int, int, int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        61
       7: putfield      #2                  // Field PAD:B
      10: aload_0
      11: iload_1
      12: putfield      #3                  // Field unencodedBlockSize:I
      15: aload_0
      16: iload_2
      17: putfield      #4                  // Field encodedBlockSize:I
      20: iload_3
      21: ifle          33
      24: iload         4
      26: ifle          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: istore        5
      36: aload_0
      37: iload         5
      39: ifeq          50
      42: iload_3
      43: iload_2
      44: idiv
      45: iload_2
      46: imul
      47: goto          51
      50: iconst_0
      51: putfield      #5                  // Field lineLength:I
      54: aload_0
      55: iload         4
      57: putfield      #6                  // Field chunkSeparatorLength:I
      60: return

  boolean hasData(org.jose4j.base64url.internal.apache.commons.codec.binary.BaseNCodec$Context);
    Code:
       0: aload_1
       1: getfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  int available(org.jose4j.base64url.internal.apache.commons.codec.binary.BaseNCodec$Context);
    Code:
       0: aload_1
       1: getfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
       4: ifnull        19
       7: aload_1
       8: getfield      #8                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.pos:I
      11: aload_1
      12: getfield      #9                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.readPos:I
      15: isub
      16: goto          20
      19: iconst_0
      20: ireturn

  protected int getDefaultBufferSize();
    Code:
       0: sipush        8192
       3: ireturn

  private byte[] resizeBuffer(org.jose4j.base64url.internal.apache.commons.codec.binary.BaseNCodec$Context);
    Code:
       0: aload_1
       1: getfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
       4: ifnonnull     30
       7: aload_1
       8: aload_0
       9: invokevirtual #10                 // Method getDefaultBufferSize:()I
      12: newarray       byte
      14: putfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
      17: aload_1
      18: iconst_0
      19: putfield      #8                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.pos:I
      22: aload_1
      23: iconst_0
      24: putfield      #9                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.readPos:I
      27: goto          60
      30: aload_1
      31: getfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
      34: arraylength
      35: iconst_2
      36: imul
      37: newarray       byte
      39: astore_2
      40: aload_1
      41: getfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
      44: iconst_0
      45: aload_2
      46: iconst_0
      47: aload_1
      48: getfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
      51: arraylength
      52: invokestatic  #11                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      55: aload_1
      56: aload_2
      57: putfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
      60: aload_1
      61: getfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
      64: areturn

  protected byte[] ensureBufferSize(int, org.jose4j.base64url.internal.apache.commons.codec.binary.BaseNCodec$Context);
    Code:
       0: aload_2
       1: getfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
       4: ifnull        21
       7: aload_2
       8: getfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
      11: arraylength
      12: aload_2
      13: getfield      #8                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.pos:I
      16: iload_1
      17: iadd
      18: if_icmpge     27
      21: aload_0
      22: aload_2
      23: invokespecial #12                 // Method resizeBuffer:(Lorg/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context;)[B
      26: areturn
      27: aload_2
      28: getfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
      31: areturn

  int readResults(byte[], int, int, org.jose4j.base64url.internal.apache.commons.codec.binary.BaseNCodec$Context);
    Code:
       0: aload         4
       2: getfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
       5: ifnull        71
       8: aload_0
       9: aload         4
      11: invokevirtual #13                 // Method available:(Lorg/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context;)I
      14: iload_3
      15: invokestatic  #14                 // Method java/lang/Math.min:(II)I
      18: istore        5
      20: aload         4
      22: getfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
      25: aload         4
      27: getfield      #9                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.readPos:I
      30: aload_1
      31: iload_2
      32: iload         5
      34: invokestatic  #11                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      37: aload         4
      39: dup
      40: getfield      #9                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.readPos:I
      43: iload         5
      45: iadd
      46: putfield      #9                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.readPos:I
      49: aload         4
      51: getfield      #9                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.readPos:I
      54: aload         4
      56: getfield      #8                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.pos:I
      59: if_icmplt     68
      62: aload         4
      64: aconst_null
      65: putfield      #7                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B
      68: iload         5
      70: ireturn
      71: aload         4
      73: getfield      #15                 // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.eof:Z
      76: ifeq          83
      79: iconst_m1
      80: goto          84
      83: iconst_0
      84: ireturn

  protected static boolean isWhiteSpace(byte);
    Code:
       0: iload_0
       1: lookupswitch  { // 4
                     9: 44
                    10: 44
                    13: 44
                    32: 44
               default: 46
          }
      44: iconst_1
      45: ireturn
      46: iconst_0
      47: ireturn

  public java.lang.String encodeToString(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #16                 // Method encode:([B)[B
       5: invokestatic  #17                 // Method org/jose4j/lang/StringUtil.newStringUtf8:([B)Ljava/lang/String;
       8: areturn

  public java.lang.String encodeAsString(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #16                 // Method encode:([B)[B
       5: invokestatic  #17                 // Method org/jose4j/lang/StringUtil.newStringUtf8:([B)Ljava/lang/String;
       8: areturn

  public byte[] decode(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #18                 // Method org/jose4j/lang/StringUtil.getBytesUtf8:(Ljava/lang/String;)[B
       5: invokevirtual #19                 // Method decode:([B)[B
       8: areturn

  public byte[] decode(byte[]);
    Code:
       0: aload_1
       1: ifnull        9
       4: aload_1
       5: arraylength
       6: ifne          11
       9: aload_1
      10: areturn
      11: new           #20                 // class org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context
      14: dup
      15: invokespecial #21                 // Method org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context."<init>":()V
      18: astore_2
      19: aload_0
      20: aload_1
      21: iconst_0
      22: aload_1
      23: arraylength
      24: aload_2
      25: invokevirtual #22                 // Method decode:([BIILorg/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context;)V
      28: aload_0
      29: aload_1
      30: iconst_0
      31: iconst_m1
      32: aload_2
      33: invokevirtual #22                 // Method decode:([BIILorg/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context;)V
      36: aload_2
      37: getfield      #8                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.pos:I
      40: newarray       byte
      42: astore_3
      43: aload_0
      44: aload_3
      45: iconst_0
      46: aload_3
      47: arraylength
      48: aload_2
      49: invokevirtual #23                 // Method readResults:([BIILorg/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context;)I
      52: pop
      53: aload_3
      54: areturn

  public byte[] encode(byte[]);
    Code:
       0: aload_1
       1: ifnull        9
       4: aload_1
       5: arraylength
       6: ifne          11
       9: aload_1
      10: areturn
      11: new           #20                 // class org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context
      14: dup
      15: invokespecial #21                 // Method org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context."<init>":()V
      18: astore_2
      19: aload_0
      20: aload_1
      21: iconst_0
      22: aload_1
      23: arraylength
      24: aload_2
      25: invokevirtual #24                 // Method encode:([BIILorg/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context;)V
      28: aload_0
      29: aload_1
      30: iconst_0
      31: iconst_m1
      32: aload_2
      33: invokevirtual #24                 // Method encode:([BIILorg/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context;)V
      36: aload_2
      37: getfield      #8                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.pos:I
      40: aload_2
      41: getfield      #9                  // Field org/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context.readPos:I
      44: isub
      45: newarray       byte
      47: astore_3
      48: aload_0
      49: aload_3
      50: iconst_0
      51: aload_3
      52: arraylength
      53: aload_2
      54: invokevirtual #23                 // Method readResults:([BIILorg/jose4j/base64url/internal/apache/commons/codec/binary/BaseNCodec$Context;)I
      57: pop
      58: aload_3
      59: areturn

  abstract void encode(byte[], int, int, org.jose4j.base64url.internal.apache.commons.codec.binary.BaseNCodec$Context);

  abstract void decode(byte[], int, int, org.jose4j.base64url.internal.apache.commons.codec.binary.BaseNCodec$Context);

  protected abstract boolean isInAlphabet(byte);

  public boolean isInAlphabet(byte[], boolean);
    Code:
       0: iconst_0
       1: istore_3
       2: iload_3
       3: aload_1
       4: arraylength
       5: if_icmpge     47
       8: aload_0
       9: aload_1
      10: iload_3
      11: baload
      12: invokevirtual #25                 // Method isInAlphabet:(B)Z
      15: ifne          41
      18: iload_2
      19: ifeq          39
      22: aload_1
      23: iload_3
      24: baload
      25: bipush        61
      27: if_icmpeq     41
      30: aload_1
      31: iload_3
      32: baload
      33: invokestatic  #26                 // Method isWhiteSpace:(B)Z
      36: ifne          41
      39: iconst_0
      40: ireturn
      41: iinc          3, 1
      44: goto          2
      47: iconst_1
      48: ireturn

  public boolean isInAlphabet(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #18                 // Method org/jose4j/lang/StringUtil.getBytesUtf8:(Ljava/lang/String;)[B
       5: iconst_1
       6: invokevirtual #27                 // Method isInAlphabet:([BZ)Z
       9: ireturn

  protected boolean containsAlphabetOrPad(byte[]);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_1
       7: astore_2
       8: aload_2
       9: arraylength
      10: istore_3
      11: iconst_0
      12: istore        4
      14: iload         4
      16: iload_3
      17: if_icmpge     50
      20: aload_2
      21: iload         4
      23: baload
      24: istore        5
      26: bipush        61
      28: iload         5
      30: if_icmpeq     42
      33: aload_0
      34: iload         5
      36: invokevirtual #25                 // Method isInAlphabet:(B)Z
      39: ifeq          44
      42: iconst_1
      43: ireturn
      44: iinc          4, 1
      47: goto          14
      50: iconst_0
      51: ireturn

  public long getEncodedLength(byte[]);
    Code:
       0: aload_1
       1: arraylength
       2: aload_0
       3: getfield      #3                  // Field unencodedBlockSize:I
       6: iadd
       7: iconst_1
       8: isub
       9: aload_0
      10: getfield      #3                  // Field unencodedBlockSize:I
      13: idiv
      14: i2l
      15: aload_0
      16: getfield      #4                  // Field encodedBlockSize:I
      19: i2l
      20: lmul
      21: lstore_2
      22: aload_0
      23: getfield      #5                  // Field lineLength:I
      26: ifle          53
      29: lload_2
      30: lload_2
      31: aload_0
      32: getfield      #5                  // Field lineLength:I
      35: i2l
      36: ladd
      37: lconst_1
      38: lsub
      39: aload_0
      40: getfield      #5                  // Field lineLength:I
      43: i2l
      44: ldiv
      45: aload_0
      46: getfield      #6                  // Field chunkSeparatorLength:I
      49: i2l
      50: lmul
      51: ladd
      52: lstore_2
      53: lload_2
      54: lreturn
}
