public class org.bouncycastle.crypto.encodings.PKCS1Encoding implements org.bouncycastle.crypto.AsymmetricBlockCipher {
  public static final java.lang.String STRICT_LENGTH_ENABLED_PROPERTY;

  public static final java.lang.String NOT_STRICT_LENGTH_ENABLED_PROPERTY;

  private static final int HEADER_LENGTH;

  private java.security.SecureRandom random;

  private org.bouncycastle.crypto.AsymmetricBlockCipher engine;

  private boolean forEncryption;

  private boolean forPrivateKey;

  private boolean useStrictLength;

  private int pLen;

  private byte[] fallback;

  private byte[] blockBuffer;

  public org.bouncycastle.crypto.encodings.PKCS1Encoding(org.bouncycastle.crypto.AsymmetricBlockCipher);
    Code:
       0: aload_0
       1: invokespecial #147                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #138                // Field pLen:I
       9: aload_0
      10: aconst_null
      11: putfield      #143                // Field fallback:[B
      14: aload_0
      15: aload_1
      16: putfield      #145                // Field engine:Lorg/bouncycastle/crypto/AsymmetricBlockCipher;
      19: aload_0
      20: aload_0
      21: invokespecial #157                // Method useStrict:()Z
      24: putfield      #141                // Field useStrictLength:Z
      27: return

  public org.bouncycastle.crypto.encodings.PKCS1Encoding(org.bouncycastle.crypto.AsymmetricBlockCipher, int);
    Code:
       0: aload_0
       1: invokespecial #147                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #138                // Field pLen:I
       9: aload_0
      10: aconst_null
      11: putfield      #143                // Field fallback:[B
      14: aload_0
      15: aload_1
      16: putfield      #145                // Field engine:Lorg/bouncycastle/crypto/AsymmetricBlockCipher;
      19: aload_0
      20: aload_0
      21: invokespecial #157                // Method useStrict:()Z
      24: putfield      #141                // Field useStrictLength:Z
      27: aload_0
      28: iload_2
      29: putfield      #138                // Field pLen:I
      32: return

  public org.bouncycastle.crypto.encodings.PKCS1Encoding(org.bouncycastle.crypto.AsymmetricBlockCipher, byte[]);
    Code:
       0: aload_0
       1: invokespecial #147                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #138                // Field pLen:I
       9: aload_0
      10: aconst_null
      11: putfield      #143                // Field fallback:[B
      14: aload_0
      15: aload_1
      16: putfield      #145                // Field engine:Lorg/bouncycastle/crypto/AsymmetricBlockCipher;
      19: aload_0
      20: aload_0
      21: invokespecial #157                // Method useStrict:()Z
      24: putfield      #141                // Field useStrictLength:Z
      27: aload_0
      28: aload_2
      29: putfield      #143                // Field fallback:[B
      32: aload_0
      33: aload_2
      34: arraylength
      35: putfield      #138                // Field pLen:I
      38: return

  private boolean useStrict();
    Code:
       0: new           #87                 // class org/bouncycastle/crypto/encodings/PKCS1Encoding$1
       3: dup
       4: aload_0
       5: invokespecial #163                // Method org/bouncycastle/crypto/encodings/PKCS1Encoding$1."<init>":(Lorg/bouncycastle/crypto/encodings/PKCS1Encoding;)V
       8: invokestatic  #150                // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      11: checkcast     #79                 // class java/lang/String
      14: astore_1
      15: new           #88                 // class org/bouncycastle/crypto/encodings/PKCS1Encoding$2
      18: dup
      19: aload_0
      20: invokespecial #164                // Method org/bouncycastle/crypto/encodings/PKCS1Encoding$2."<init>":(Lorg/bouncycastle/crypto/encodings/PKCS1Encoding;)V
      23: invokestatic  #150                // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      26: checkcast     #79                 // class java/lang/String
      29: astore_2
      30: aload_2
      31: ifnull        49
      34: aload_2
      35: ldc           #6                  // String true
      37: invokevirtual #148                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      40: ifne          47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: ireturn
      49: aload_1
      50: ifnull        62
      53: aload_1
      54: ldc           #6                  // String true
      56: invokevirtual #148                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      59: ifeq          66
      62: iconst_1
      63: goto          67
      66: iconst_0
      67: ireturn

  public org.bouncycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher();
    Code:
       0: aload_0
       1: getfield      #145                // Field engine:Lorg/bouncycastle/crypto/AsymmetricBlockCipher;
       4: areturn

  public void init(boolean, org.bouncycastle.crypto.CipherParameters);
    Code:
       0: aload_2
       1: instanceof    #90                 // class org/bouncycastle/crypto/params/ParametersWithRandom
       4: ifeq          34
       7: aload_2
       8: checkcast     #90                 // class org/bouncycastle/crypto/params/ParametersWithRandom
      11: astore        4
      13: aload_0
      14: aload         4
      16: invokevirtual #166                // Method org/bouncycastle/crypto/params/ParametersWithRandom.getRandom:()Ljava/security/SecureRandom;
      19: putfield      #144                // Field random:Ljava/security/SecureRandom;
      22: aload         4
      24: invokevirtual #167                // Method org/bouncycastle/crypto/params/ParametersWithRandom.getParameters:()Lorg/bouncycastle/crypto/CipherParameters;
      27: checkcast     #89                 // class org/bouncycastle/crypto/params/AsymmetricKeyParameter
      30: astore_3
      31: goto          57
      34: aload_2
      35: checkcast     #89                 // class org/bouncycastle/crypto/params/AsymmetricKeyParameter
      38: astore_3
      39: aload_3
      40: invokevirtual #165                // Method org/bouncycastle/crypto/params/AsymmetricKeyParameter.isPrivate:()Z
      43: ifne          57
      46: iload_1
      47: ifeq          57
      50: aload_0
      51: invokestatic  #153                // Method org/bouncycastle/crypto/CryptoServicesRegistrar.getSecureRandom:()Ljava/security/SecureRandom;
      54: putfield      #144                // Field random:Ljava/security/SecureRandom;
      57: aload_0
      58: getfield      #145                // Field engine:Lorg/bouncycastle/crypto/AsymmetricBlockCipher;
      61: iload_1
      62: aload_2
      63: invokeinterface #172,  3          // InterfaceMethod org/bouncycastle/crypto/AsymmetricBlockCipher.init:(ZLorg/bouncycastle/crypto/CipherParameters;)V
      68: aload_0
      69: aload_3
      70: invokevirtual #165                // Method org/bouncycastle/crypto/params/AsymmetricKeyParameter.isPrivate:()Z
      73: putfield      #140                // Field forPrivateKey:Z
      76: aload_0
      77: iload_1
      78: putfield      #139                // Field forEncryption:Z
      81: aload_0
      82: aload_0
      83: getfield      #145                // Field engine:Lorg/bouncycastle/crypto/AsymmetricBlockCipher;
      86: invokeinterface #170,  1          // InterfaceMethod org/bouncycastle/crypto/AsymmetricBlockCipher.getOutputBlockSize:()I
      91: newarray       byte
      93: putfield      #142                // Field blockBuffer:[B
      96: aload_0
      97: getfield      #138                // Field pLen:I
     100: ifle          127
     103: aload_0
     104: getfield      #143                // Field fallback:[B
     107: ifnonnull     127
     110: aload_0
     111: getfield      #144                // Field random:Ljava/security/SecureRandom;
     114: ifnonnull     127
     117: new           #77                 // class java/lang/IllegalArgumentException
     120: dup
     121: ldc           #3                  // String encoder requires random
     123: invokespecial #146                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     126: athrow
     127: return

  public int getInputBlockSize();
    Code:
       0: aload_0
       1: getfield      #145                // Field engine:Lorg/bouncycastle/crypto/AsymmetricBlockCipher;
       4: invokeinterface #169,  1          // InterfaceMethod org/bouncycastle/crypto/AsymmetricBlockCipher.getInputBlockSize:()I
       9: istore_1
      10: aload_0
      11: getfield      #139                // Field forEncryption:Z
      14: ifeq          22
      17: iload_1
      18: bipush        10
      20: isub
      21: ireturn
      22: iload_1
      23: ireturn

  public int getOutputBlockSize();
    Code:
       0: aload_0
       1: getfield      #145                // Field engine:Lorg/bouncycastle/crypto/AsymmetricBlockCipher;
       4: invokeinterface #170,  1          // InterfaceMethod org/bouncycastle/crypto/AsymmetricBlockCipher.getOutputBlockSize:()I
       9: istore_1
      10: aload_0
      11: getfield      #139                // Field forEncryption:Z
      14: ifeq          19
      17: iload_1
      18: ireturn
      19: iload_1
      20: bipush        10
      22: isub
      23: ireturn

  public byte[] processBlock(byte[], int, int) throws org.bouncycastle.crypto.InvalidCipherTextException;
    Code:
       0: aload_0
       1: getfield      #139                // Field forEncryption:Z
       4: ifeq          15
       7: aload_0
       8: aload_1
       9: iload_2
      10: iload_3
      11: invokespecial #162                // Method encodeBlock:([BII)[B
      14: areturn
      15: aload_0
      16: aload_1
      17: iload_2
      18: iload_3
      19: invokespecial #160                // Method decodeBlock:([BII)[B
      22: areturn

  private byte[] encodeBlock(byte[], int, int) throws org.bouncycastle.crypto.InvalidCipherTextException;
    Code:
       0: iload_3
       1: aload_0
       2: invokevirtual #155                // Method getInputBlockSize:()I
       5: if_icmple     18
       8: new           #77                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #4                  // String input data too large
      14: invokespecial #146                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: getfield      #145                // Field engine:Lorg/bouncycastle/crypto/AsymmetricBlockCipher;
      22: invokeinterface #169,  1          // InterfaceMethod org/bouncycastle/crypto/AsymmetricBlockCipher.getInputBlockSize:()I
      27: newarray       byte
      29: astore        4
      31: aload_0
      32: getfield      #140                // Field forPrivateKey:Z
      35: ifeq          73
      38: aload         4
      40: iconst_0
      41: iconst_1
      42: bastore
      43: iconst_1
      44: istore        5
      46: iload         5
      48: aload         4
      50: arraylength
      51: iload_3
      52: isub
      53: iconst_1
      54: isub
      55: if_icmpeq     70
      58: aload         4
      60: iload         5
      62: iconst_m1
      63: bastore
      64: iinc          5, 1
      67: goto          46
      70: goto          132
      73: aload_0
      74: getfield      #144                // Field random:Ljava/security/SecureRandom;
      77: aload         4
      79: invokevirtual #152                // Method java/security/SecureRandom.nextBytes:([B)V
      82: aload         4
      84: iconst_0
      85: iconst_2
      86: bastore
      87: iconst_1
      88: istore        5
      90: iload         5
      92: aload         4
      94: arraylength
      95: iload_3
      96: isub
      97: iconst_1
      98: isub
      99: if_icmpeq     132
     102: aload         4
     104: iload         5
     106: baload
     107: ifne          126
     110: aload         4
     112: iload         5
     114: aload_0
     115: getfield      #144                // Field random:Ljava/security/SecureRandom;
     118: invokevirtual #151                // Method java/security/SecureRandom.nextInt:()I
     121: i2b
     122: bastore
     123: goto          102
     126: iinc          5, 1
     129: goto          90
     132: aload         4
     134: aload         4
     136: arraylength
     137: iload_3
     138: isub
     139: iconst_1
     140: isub
     141: iconst_0
     142: bastore
     143: aload_1
     144: iload_2
     145: aload         4
     147: aload         4
     149: arraylength
     150: iload_3
     151: isub
     152: iload_3
     153: invokestatic  #149                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     156: aload_0
     157: getfield      #145                // Field engine:Lorg/bouncycastle/crypto/AsymmetricBlockCipher;
     160: aload         4
     162: iconst_0
     163: aload         4
     165: arraylength
     166: invokeinterface #171,  4          // InterfaceMethod org/bouncycastle/crypto/AsymmetricBlockCipher.processBlock:([BII)[B
     171: areturn

  private static int checkPkcs1Encoding(byte[], int);
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: aload_0
       4: iconst_0
       5: baload
       6: iconst_2
       7: ixor
       8: ior
       9: istore_2
      10: aload_0
      11: arraylength
      12: iload_1
      13: iconst_1
      14: iadd
      15: isub
      16: istore_3
      17: iconst_1
      18: istore        4
      20: iload         4
      22: iload_3
      23: if_icmpge     74
      26: aload_0
      27: iload         4
      29: baload
      30: istore        5
      32: iload         5
      34: iload         5
      36: iconst_1
      37: ishr
      38: ior
      39: istore        5
      41: iload         5
      43: iload         5
      45: iconst_2
      46: ishr
      47: ior
      48: istore        5
      50: iload         5
      52: iload         5
      54: iconst_4
      55: ishr
      56: ior
      57: istore        5
      59: iload_2
      60: iload         5
      62: iconst_1
      63: iand
      64: iconst_1
      65: isub
      66: ior
      67: istore_2
      68: iinc          4, 1
      71: goto          20
      74: iload_2
      75: aload_0
      76: aload_0
      77: arraylength
      78: iload_1
      79: iconst_1
      80: iadd
      81: isub
      82: baload
      83: ior
      84: istore_2
      85: iload_2
      86: iload_2
      87: iconst_1
      88: ishr
      89: ior
      90: istore_2
      91: iload_2
      92: iload_2
      93: iconst_2
      94: ishr
      95: ior
      96: istore_2
      97: iload_2
      98: iload_2
      99: iconst_4
     100: ishr
     101: ior
     102: istore_2
     103: iload_2
     104: iconst_1
     105: iand
     106: iconst_1
     107: isub
     108: iconst_m1
     109: ixor
     110: ireturn

  private byte[] decodeBlockOrRandom(byte[], int, int) throws org.bouncycastle.crypto.InvalidCipherTextException;
    Code:
       0: aload_0
       1: getfield      #140                // Field forPrivateKey:Z
       4: ifne          17
       7: new           #85                 // class org/bouncycastle/crypto/InvalidCipherTextException
      10: dup
      11: ldc           #5                  // String sorry, this method is only for decryption, not for signing
      13: invokespecial #154                // Method org/bouncycastle/crypto/InvalidCipherTextException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #145                // Field engine:Lorg/bouncycastle/crypto/AsymmetricBlockCipher;
      21: aload_1
      22: iload_2
      23: iload_3
      24: invokeinterface #171,  4          // InterfaceMethod org/bouncycastle/crypto/AsymmetricBlockCipher.processBlock:([BII)[B
      29: astore        4
      31: aload_0
      32: getfield      #143                // Field fallback:[B
      35: ifnonnull     58
      38: aload_0
      39: getfield      #138                // Field pLen:I
      42: newarray       byte
      44: astore        5
      46: aload_0
      47: getfield      #144                // Field random:Ljava/security/SecureRandom;
      50: aload         5
      52: invokevirtual #152                // Method java/security/SecureRandom.nextBytes:([B)V
      55: goto          64
      58: aload_0
      59: getfield      #143                // Field fallback:[B
      62: astore        5
      64: aload_0
      65: getfield      #141                // Field useStrictLength:Z
      68: aload         4
      70: arraylength
      71: aload_0
      72: getfield      #145                // Field engine:Lorg/bouncycastle/crypto/AsymmetricBlockCipher;
      75: invokeinterface #170,  1          // InterfaceMethod org/bouncycastle/crypto/AsymmetricBlockCipher.getOutputBlockSize:()I
      80: if_icmpeq     87
      83: iconst_1
      84: goto          88
      87: iconst_0
      88: iand
      89: ifeq          99
      92: aload_0
      93: getfield      #142                // Field blockBuffer:[B
      96: goto          101
      99: aload         4
     101: astore        6
     103: aload         6
     105: aload_0
     106: getfield      #138                // Field pLen:I
     109: invokestatic  #159                // Method checkPkcs1Encoding:([BI)I
     112: istore        7
     114: aload_0
     115: getfield      #138                // Field pLen:I
     118: newarray       byte
     120: astore        8
     122: iconst_0
     123: istore        9
     125: iload         9
     127: aload_0
     128: getfield      #138                // Field pLen:I
     131: if_icmpge     174
     134: aload         8
     136: iload         9
     138: aload         6
     140: iload         9
     142: aload         6
     144: arraylength
     145: aload_0
     146: getfield      #138                // Field pLen:I
     149: isub
     150: iadd
     151: baload
     152: iload         7
     154: iconst_m1
     155: ixor
     156: iand
     157: aload         5
     159: iload         9
     161: baload
     162: iload         7
     164: iand
     165: ior
     166: i2b
     167: bastore
     168: iinc          9, 1
     171: goto          125
     174: aload         6
     176: iconst_0
     177: invokestatic  #168                // Method org/bouncycastle/util/Arrays.fill:([BB)V
     180: aload         8
     182: areturn

  private byte[] decodeBlock(byte[], int, int) throws org.bouncycastle.crypto.InvalidCipherTextException;
    Code:
       0: aload_0
       1: getfield      #138                // Field pLen:I
       4: iconst_m1
       5: if_icmpeq     16
       8: aload_0
       9: aload_1
      10: iload_2
      11: iload_3
      12: invokespecial #161                // Method decodeBlockOrRandom:([BII)[B
      15: areturn
      16: aload_0
      17: getfield      #145                // Field engine:Lorg/bouncycastle/crypto/AsymmetricBlockCipher;
      20: aload_1
      21: iload_2
      22: iload_3
      23: invokeinterface #171,  4          // InterfaceMethod org/bouncycastle/crypto/AsymmetricBlockCipher.processBlock:([BII)[B
      28: astore        4
      30: aload_0
      31: getfield      #141                // Field useStrictLength:Z
      34: aload         4
      36: arraylength
      37: aload_0
      38: getfield      #145                // Field engine:Lorg/bouncycastle/crypto/AsymmetricBlockCipher;
      41: invokeinterface #170,  1          // InterfaceMethod org/bouncycastle/crypto/AsymmetricBlockCipher.getOutputBlockSize:()I
      46: if_icmpeq     53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: iand
      55: istore        5
      57: aload         4
      59: arraylength
      60: aload_0
      61: invokevirtual #156                // Method getOutputBlockSize:()I
      64: if_icmpge     76
      67: aload_0
      68: getfield      #142                // Field blockBuffer:[B
      71: astore        6
      73: goto          80
      76: aload         4
      78: astore        6
      80: aload         6
      82: iconst_0
      83: baload
      84: istore        7
      86: aload_0
      87: getfield      #140                // Field forPrivateKey:Z
      90: ifeq          109
      93: iload         7
      95: iconst_2
      96: if_icmpeq     103
      99: iconst_1
     100: goto          104
     103: iconst_0
     104: istore        8
     106: goto          122
     109: iload         7
     111: iconst_1
     112: if_icmpeq     119
     115: iconst_1
     116: goto          120
     119: iconst_0
     120: istore        8
     122: aload_0
     123: iload         7
     125: aload         6
     127: invokespecial #158                // Method findStart:(B[B)I
     130: istore        9
     132: iinc          9, 1
     135: iload         8
     137: iload         9
     139: bipush        10
     141: if_icmpge     148
     144: iconst_1
     145: goto          149
     148: iconst_0
     149: ior
     150: ifeq          169
     153: aload         6
     155: iconst_0
     156: invokestatic  #168                // Method org/bouncycastle/util/Arrays.fill:([BB)V
     159: new           #85                 // class org/bouncycastle/crypto/InvalidCipherTextException
     162: dup
     163: ldc           #1                  // String block incorrect
     165: invokespecial #154                // Method org/bouncycastle/crypto/InvalidCipherTextException."<init>":(Ljava/lang/String;)V
     168: athrow
     169: iload         5
     171: ifeq          190
     174: aload         6
     176: iconst_0
     177: invokestatic  #168                // Method org/bouncycastle/util/Arrays.fill:([BB)V
     180: new           #85                 // class org/bouncycastle/crypto/InvalidCipherTextException
     183: dup
     184: ldc           #2                  // String block incorrect size
     186: invokespecial #154                // Method org/bouncycastle/crypto/InvalidCipherTextException."<init>":(Ljava/lang/String;)V
     189: athrow
     190: aload         6
     192: arraylength
     193: iload         9
     195: isub
     196: newarray       byte
     198: astore        10
     200: aload         6
     202: iload         9
     204: aload         10
     206: iconst_0
     207: aload         10
     209: arraylength
     210: invokestatic  #149                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     213: aload         10
     215: areturn

  private int findStart(byte, byte[]) throws org.bouncycastle.crypto.InvalidCipherTextException;
    Code:
       0: iconst_m1
       1: istore_3
       2: iconst_0
       3: istore        4
       5: iconst_1
       6: istore        5
       8: iload         5
      10: aload_2
      11: arraylength
      12: if_icmpeq     90
      15: aload_2
      16: iload         5
      18: baload
      19: istore        6
      21: iload         6
      23: ifne          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: iload_3
      32: ifge          39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: iand
      41: ifeq          47
      44: iload         5
      46: istore_3
      47: iload         4
      49: iload_1
      50: iconst_1
      51: if_icmpne     58
      54: iconst_1
      55: goto          59
      58: iconst_0
      59: iload_3
      60: ifge          67
      63: iconst_1
      64: goto          68
      67: iconst_0
      68: iand
      69: iload         6
      71: iconst_m1
      72: if_icmpeq     79
      75: iconst_1
      76: goto          80
      79: iconst_0
      80: iand
      81: ior
      82: istore        4
      84: iinc          5, 1
      87: goto          8
      90: iload         4
      92: ifeq          97
      95: iconst_m1
      96: ireturn
      97: iload_3
      98: ireturn
}
