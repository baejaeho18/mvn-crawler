public class org.bouncycastle.crypto.modes.KCTRBlockCipher extends org.bouncycastle.crypto.StreamBlockCipher {
  private byte[] iv;

  private byte[] ofbV;

  private byte[] ofbOutV;

  private int byteCount;

  private boolean initialised;

  private org.bouncycastle.crypto.BlockCipher engine;

  public org.bouncycastle.crypto.modes.KCTRBlockCipher(org.bouncycastle.crypto.BlockCipher);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #108                // Method org/bouncycastle/crypto/StreamBlockCipher."<init>":(Lorg/bouncycastle/crypto/BlockCipher;)V
       5: aload_0
       6: aload_1
       7: putfield      #100                // Field engine:Lorg/bouncycastle/crypto/BlockCipher;
      10: aload_0
      11: aload_1
      12: invokeinterface #117,  1          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.getBlockSize:()I
      17: newarray       byte
      19: putfield      #97                 // Field iv:[B
      22: aload_0
      23: aload_1
      24: invokeinterface #117,  1          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.getBlockSize:()I
      29: newarray       byte
      31: putfield      #99                 // Field ofbV:[B
      34: aload_0
      35: aload_1
      36: invokeinterface #117,  1          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.getBlockSize:()I
      41: newarray       byte
      43: putfield      #98                 // Field ofbOutV:[B
      46: return

  public void init(boolean, org.bouncycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #96                 // Field initialised:Z
       5: aload_2
       6: instanceof    #62                 // class org/bouncycastle/crypto/params/ParametersWithIV
       9: ifeq          65
      12: aload_2
      13: checkcast     #62                 // class org/bouncycastle/crypto/params/ParametersWithIV
      16: astore_3
      17: aload_3
      18: invokevirtual #114                // Method org/bouncycastle/crypto/params/ParametersWithIV.getIV:()[B
      21: astore        4
      23: aload_0
      24: getfield      #97                 // Field iv:[B
      27: arraylength
      28: aload         4
      30: arraylength
      31: isub
      32: istore        5
      34: aload_0
      35: getfield      #97                 // Field iv:[B
      38: iconst_0
      39: invokestatic  #116                // Method org/bouncycastle/util/Arrays.fill:([BB)V
      42: aload         4
      44: iconst_0
      45: aload_0
      46: getfield      #97                 // Field iv:[B
      49: iload         5
      51: aload         4
      53: arraylength
      54: invokestatic  #105                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      57: aload_3
      58: invokevirtual #115                // Method org/bouncycastle/crypto/params/ParametersWithIV.getParameters:()Lorg/bouncycastle/crypto/CipherParameters;
      61: astore_2
      62: goto          75
      65: new           #53                 // class java/lang/IllegalArgumentException
      68: dup
      69: ldc           #3                  // String invalid parameter passed
      71: invokespecial #101                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      74: athrow
      75: aload_2
      76: ifnull        90
      79: aload_0
      80: getfield      #100                // Field engine:Lorg/bouncycastle/crypto/BlockCipher;
      83: iconst_1
      84: aload_2
      85: invokeinterface #121,  3          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.init:(ZLorg/bouncycastle/crypto/CipherParameters;)V
      90: aload_0
      91: invokevirtual #111                // Method reset:()V
      94: return

  public java.lang.String getAlgorithmName();
    Code:
       0: new           #55                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #102                // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: getfield      #100                // Field engine:Lorg/bouncycastle/crypto/BlockCipher;
      11: invokeinterface #120,  1          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.getAlgorithmName:()Ljava/lang/String;
      16: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: ldc           #1                  // String /KCTR
      21: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #103                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn

  public int getBlockSize();
    Code:
       0: aload_0
       1: getfield      #100                // Field engine:Lorg/bouncycastle/crypto/BlockCipher;
       4: invokeinterface #117,  1          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.getBlockSize:()I
       9: ireturn

  protected byte calculateByte(byte);
    Code:
       0: aload_0
       1: getfield      #95                 // Field byteCount:I
       4: ifne          56
       7: aload_0
       8: iconst_0
       9: invokespecial #112                // Method incrementCounterAt:(I)V
      12: aload_0
      13: invokespecial #110                // Method checkCounter:()V
      16: aload_0
      17: getfield      #100                // Field engine:Lorg/bouncycastle/crypto/BlockCipher;
      20: aload_0
      21: getfield      #99                 // Field ofbV:[B
      24: iconst_0
      25: aload_0
      26: getfield      #98                 // Field ofbOutV:[B
      29: iconst_0
      30: invokeinterface #119,  5          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.processBlock:([BI[BI)I
      35: pop
      36: aload_0
      37: getfield      #98                 // Field ofbOutV:[B
      40: aload_0
      41: dup
      42: getfield      #95                 // Field byteCount:I
      45: dup_x1
      46: iconst_1
      47: iadd
      48: putfield      #95                 // Field byteCount:I
      51: baload
      52: iload_1
      53: ixor
      54: i2b
      55: ireturn
      56: aload_0
      57: getfield      #98                 // Field ofbOutV:[B
      60: aload_0
      61: dup
      62: getfield      #95                 // Field byteCount:I
      65: dup_x1
      66: iconst_1
      67: iadd
      68: putfield      #95                 // Field byteCount:I
      71: baload
      72: iload_1
      73: ixor
      74: i2b
      75: istore_2
      76: aload_0
      77: getfield      #95                 // Field byteCount:I
      80: aload_0
      81: getfield      #99                 // Field ofbV:[B
      84: arraylength
      85: if_icmpne     93
      88: aload_0
      89: iconst_0
      90: putfield      #95                 // Field byteCount:I
      93: iload_2
      94: ireturn

  public int processBlock(byte[], int, byte[], int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException;
    Code:
       0: aload_1
       1: arraylength
       2: iload_2
       3: isub
       4: aload_0
       5: invokevirtual #109                // Method getBlockSize:()I
       8: if_icmpge     21
      11: new           #58                 // class org/bouncycastle/crypto/DataLengthException
      14: dup
      15: ldc           #2                  // String input buffer too short
      17: invokespecial #106                // Method org/bouncycastle/crypto/DataLengthException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_3
      22: arraylength
      23: iload         4
      25: isub
      26: aload_0
      27: invokevirtual #109                // Method getBlockSize:()I
      30: if_icmpge     43
      33: new           #59                 // class org/bouncycastle/crypto/OutputLengthException
      36: dup
      37: ldc           #4                  // String output buffer too short
      39: invokespecial #107                // Method org/bouncycastle/crypto/OutputLengthException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: aload_0
      44: aload_1
      45: iload_2
      46: aload_0
      47: invokevirtual #109                // Method getBlockSize:()I
      50: aload_3
      51: iload         4
      53: invokevirtual #113                // Method processBytes:([BII[BI)I
      56: pop
      57: aload_0
      58: invokevirtual #109                // Method getBlockSize:()I
      61: ireturn

  public void reset();
    Code:
       0: aload_0
       1: getfield      #96                 // Field initialised:Z
       4: ifeq          27
       7: aload_0
       8: getfield      #100                // Field engine:Lorg/bouncycastle/crypto/BlockCipher;
      11: aload_0
      12: getfield      #97                 // Field iv:[B
      15: iconst_0
      16: aload_0
      17: getfield      #99                 // Field ofbV:[B
      20: iconst_0
      21: invokeinterface #119,  5          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.processBlock:([BI[BI)I
      26: pop
      27: aload_0
      28: getfield      #100                // Field engine:Lorg/bouncycastle/crypto/BlockCipher;
      31: invokeinterface #118,  1          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.reset:()V
      36: aload_0
      37: iconst_0
      38: putfield      #95                 // Field byteCount:I
      41: return

  private void incrementCounterAt(int);
    Code:
       0: iload_1
       1: istore_2
       2: iload_2
       3: aload_0
       4: getfield      #99                 // Field ofbV:[B
       7: arraylength
       8: if_icmpge     32
      11: aload_0
      12: getfield      #99                 // Field ofbV:[B
      15: iload_2
      16: iinc          2, 1
      19: dup2
      20: baload
      21: iconst_1
      22: iadd
      23: i2b
      24: dup_x2
      25: bastore
      26: ifeq          2
      29: goto          32
      32: return

  private void checkCounter();
    Code:
       0: return
}
