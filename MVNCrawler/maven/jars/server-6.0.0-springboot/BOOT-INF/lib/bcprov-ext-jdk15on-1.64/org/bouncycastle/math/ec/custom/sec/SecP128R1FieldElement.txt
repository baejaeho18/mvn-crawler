public class org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement extends org.bouncycastle.math.ec.ECFieldElement$AbstractFp {
  public static final java.math.BigInteger Q;

  protected int[] x;

  public org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement(java.math.BigInteger);
    Code:
       0: aload_0
       1: invokespecial #121                // Method org/bouncycastle/math/ec/ECFieldElement$AbstractFp."<init>":()V
       4: aload_1
       5: ifnull        25
       8: aload_1
       9: invokevirtual #118                // Method java/math/BigInteger.signum:()I
      12: iflt          25
      15: aload_1
      16: getstatic     #114                // Field Q:Ljava/math/BigInteger;
      19: invokevirtual #120                // Method java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I
      22: iflt          35
      25: new           #62                 // class java/lang/IllegalArgumentException
      28: dup
      29: ldc           #3                  // String x value invalid for SecP128R1FieldElement
      31: invokespecial #115                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: aload_1
      37: invokestatic  #129                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.fromBigInteger:(Ljava/math/BigInteger;)[I
      40: putfield      #113                // Field x:[I
      43: return

  public org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement();
    Code:
       0: aload_0
       1: invokespecial #121                // Method org/bouncycastle/math/ec/ECFieldElement$AbstractFp."<init>":()V
       4: aload_0
       5: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat128.create:()[I
       8: putfield      #113                // Field x:[I
      11: return

  protected org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement(int[]);
    Code:
       0: aload_0
       1: invokespecial #121                // Method org/bouncycastle/math/ec/ECFieldElement$AbstractFp."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #113                // Field x:[I
       9: return

  public boolean isZero();
    Code:
       0: aload_0
       1: getfield      #113                // Field x:[I
       4: invokestatic  #134                // Method org/bouncycastle/math/raw/Nat128.isZero:([I)Z
       7: ireturn

  public boolean isOne();
    Code:
       0: aload_0
       1: getfield      #113                // Field x:[I
       4: invokestatic  #133                // Method org/bouncycastle/math/raw/Nat128.isOne:([I)Z
       7: ireturn

  public boolean testBitZero();
    Code:
       0: aload_0
       1: getfield      #113                // Field x:[I
       4: iconst_0
       5: invokestatic  #135                // Method org/bouncycastle/math/raw/Nat128.getBit:([II)I
       8: iconst_1
       9: if_icmpne     16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public java.math.BigInteger toBigInteger();
    Code:
       0: aload_0
       1: getfield      #113                // Field x:[I
       4: invokestatic  #137                // Method org/bouncycastle/math/raw/Nat128.toBigInteger:([I)Ljava/math/BigInteger;
       7: areturn

  public java.lang.String getFieldName();
    Code:
       0: ldc           #2                  // String SecP128R1Field
       2: areturn

  public int getFieldSize();
    Code:
       0: getstatic     #114                // Field Q:Ljava/math/BigInteger;
       3: invokevirtual #116                // Method java/math/BigInteger.bitLength:()I
       6: ireturn

  public org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement);
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat128.create:()[I
       3: astore_2
       4: aload_0
       5: getfield      #113                // Field x:[I
       8: aload_1
       9: checkcast     #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
      12: getfield      #113                // Field x:[I
      15: aload_2
      16: invokestatic  #126                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.add:([I[I[I)V
      19: new           #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
      22: dup
      23: aload_2
      24: invokespecial #130                // Method "<init>":([I)V
      27: areturn

  public org.bouncycastle.math.ec.ECFieldElement addOne();
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat128.create:()[I
       3: astore_1
       4: aload_0
       5: getfield      #113                // Field x:[I
       8: aload_1
       9: invokestatic  #123                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.addOne:([I[I)V
      12: new           #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
      15: dup
      16: aload_1
      17: invokespecial #130                // Method "<init>":([I)V
      20: areturn

  public org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement);
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat128.create:()[I
       3: astore_2
       4: aload_0
       5: getfield      #113                // Field x:[I
       8: aload_1
       9: checkcast     #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
      12: getfield      #113                // Field x:[I
      15: aload_2
      16: invokestatic  #128                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.subtract:([I[I[I)V
      19: new           #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
      22: dup
      23: aload_2
      24: invokespecial #130                // Method "<init>":([I)V
      27: areturn

  public org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement);
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat128.create:()[I
       3: astore_2
       4: aload_0
       5: getfield      #113                // Field x:[I
       8: aload_1
       9: checkcast     #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
      12: getfield      #113                // Field x:[I
      15: aload_2
      16: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.multiply:([I[I[I)V
      19: new           #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
      22: dup
      23: aload_2
      24: invokespecial #130                // Method "<init>":([I)V
      27: areturn

  public org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement);
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat128.create:()[I
       3: astore_2
       4: getstatic     #112                // Field org/bouncycastle/math/ec/custom/sec/SecP128R1Field.P:[I
       7: aload_1
       8: checkcast     #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
      11: getfield      #113                // Field x:[I
      14: aload_2
      15: invokestatic  #131                // Method org/bouncycastle/math/raw/Mod.invert:([I[I[I)V
      18: aload_2
      19: aload_0
      20: getfield      #113                // Field x:[I
      23: aload_2
      24: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.multiply:([I[I[I)V
      27: new           #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
      30: dup
      31: aload_2
      32: invokespecial #130                // Method "<init>":([I)V
      35: areturn

  public org.bouncycastle.math.ec.ECFieldElement negate();
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat128.create:()[I
       3: astore_1
       4: aload_0
       5: getfield      #113                // Field x:[I
       8: aload_1
       9: invokestatic  #124                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.negate:([I[I)V
      12: new           #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
      15: dup
      16: aload_1
      17: invokespecial #130                // Method "<init>":([I)V
      20: areturn

  public org.bouncycastle.math.ec.ECFieldElement square();
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat128.create:()[I
       3: astore_1
       4: aload_0
       5: getfield      #113                // Field x:[I
       8: aload_1
       9: invokestatic  #125                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.square:([I[I)V
      12: new           #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
      15: dup
      16: aload_1
      17: invokespecial #130                // Method "<init>":([I)V
      20: areturn

  public org.bouncycastle.math.ec.ECFieldElement invert();
    Code:
       0: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat128.create:()[I
       3: astore_1
       4: getstatic     #112                // Field org/bouncycastle/math/ec/custom/sec/SecP128R1Field.P:[I
       7: aload_0
       8: getfield      #113                // Field x:[I
      11: aload_1
      12: invokestatic  #131                // Method org/bouncycastle/math/raw/Mod.invert:([I[I[I)V
      15: new           #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
      18: dup
      19: aload_1
      20: invokespecial #130                // Method "<init>":([I)V
      23: areturn

  public org.bouncycastle.math.ec.ECFieldElement sqrt();
    Code:
       0: aload_0
       1: getfield      #113                // Field x:[I
       4: astore_1
       5: aload_1
       6: invokestatic  #134                // Method org/bouncycastle/math/raw/Nat128.isZero:([I)Z
       9: ifne          19
      12: aload_1
      13: invokestatic  #133                // Method org/bouncycastle/math/raw/Nat128.isOne:([I)Z
      16: ifeq          21
      19: aload_0
      20: areturn
      21: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat128.create:()[I
      24: astore_2
      25: aload_1
      26: aload_2
      27: invokestatic  #125                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.square:([I[I)V
      30: aload_2
      31: aload_1
      32: aload_2
      33: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.multiply:([I[I[I)V
      36: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat128.create:()[I
      39: astore_3
      40: aload_2
      41: iconst_2
      42: aload_3
      43: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.squareN:([II[I)V
      46: aload_3
      47: aload_2
      48: aload_3
      49: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.multiply:([I[I[I)V
      52: invokestatic  #132                // Method org/bouncycastle/math/raw/Nat128.create:()[I
      55: astore        4
      57: aload_3
      58: iconst_4
      59: aload         4
      61: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.squareN:([II[I)V
      64: aload         4
      66: aload_3
      67: aload         4
      69: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.multiply:([I[I[I)V
      72: aload_3
      73: astore        5
      75: aload         4
      77: iconst_2
      78: aload         5
      80: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.squareN:([II[I)V
      83: aload         5
      85: aload_2
      86: aload         5
      88: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.multiply:([I[I[I)V
      91: aload_2
      92: astore        6
      94: aload         5
      96: bipush        10
      98: aload         6
     100: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.squareN:([II[I)V
     103: aload         6
     105: aload         5
     107: aload         6
     109: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.multiply:([I[I[I)V
     112: aload         4
     114: astore        7
     116: aload         6
     118: bipush        10
     120: aload         7
     122: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.squareN:([II[I)V
     125: aload         7
     127: aload         5
     129: aload         7
     131: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.multiply:([I[I[I)V
     134: aload         5
     136: astore        8
     138: aload         7
     140: aload         8
     142: invokestatic  #125                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.square:([I[I)V
     145: aload         8
     147: aload_1
     148: aload         8
     150: invokestatic  #127                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.multiply:([I[I[I)V
     153: aload         8
     155: astore        9
     157: aload         9
     159: bipush        95
     161: aload         9
     163: invokestatic  #122                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.squareN:([II[I)V
     166: aload         7
     168: astore        10
     170: aload         9
     172: aload         10
     174: invokestatic  #125                // Method org/bouncycastle/math/ec/custom/sec/SecP128R1Field.square:([I[I)V
     177: aload_1
     178: aload         10
     180: invokestatic  #136                // Method org/bouncycastle/math/raw/Nat128.eq:([I[I)Z
     183: ifeq          198
     186: new           #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
     189: dup
     190: aload         9
     192: invokespecial #130                // Method "<init>":([I)V
     195: goto          199
     198: aconst_null
     199: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #67                 // class org/bouncycastle/math/ec/custom/sec/SecP128R1FieldElement
      20: astore_2
      21: aload_0
      22: getfield      #113                // Field x:[I
      25: aload_2
      26: getfield      #113                // Field x:[I
      29: invokestatic  #136                // Method org/bouncycastle/math/raw/Nat128.eq:([I[I)Z
      32: ireturn

  public int hashCode();
    Code:
       0: getstatic     #114                // Field Q:Ljava/math/BigInteger;
       3: invokevirtual #117                // Method java/math/BigInteger.hashCode:()I
       6: aload_0
       7: getfield      #113                // Field x:[I
      10: iconst_0
      11: iconst_4
      12: invokestatic  #138                // Method org/bouncycastle/util/Arrays.hashCode:([III)I
      15: ixor
      16: ireturn

  static {};
    Code:
       0: new           #63                 // class java/math/BigInteger
       3: dup
       4: iconst_1
       5: ldc           #1                  // String FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF
       7: invokestatic  #139                // Method org/bouncycastle/util/encoders/Hex.decodeStrict:(Ljava/lang/String;)[B
      10: invokespecial #119                // Method java/math/BigInteger."<init>":(I[B)V
      13: putstatic     #114                // Field Q:Ljava/math/BigInteger;
      16: return
}
