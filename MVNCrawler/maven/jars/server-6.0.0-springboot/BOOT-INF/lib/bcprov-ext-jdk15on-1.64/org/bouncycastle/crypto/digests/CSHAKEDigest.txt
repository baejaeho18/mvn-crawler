public class org.bouncycastle.crypto.digests.CSHAKEDigest extends org.bouncycastle.crypto.digests.SHAKEDigest {
  private static final byte[] padding;

  private final byte[] diff;

  public org.bouncycastle.crypto.digests.CSHAKEDigest(int, byte[], byte[]);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #64                 // Method org/bouncycastle/crypto/digests/SHAKEDigest."<init>":(I)V
       5: aload_2
       6: ifnull        14
       9: aload_2
      10: arraylength
      11: ifne          31
      14: aload_3
      15: ifnull        23
      18: aload_3
      19: arraylength
      20: ifne          31
      23: aload_0
      24: aconst_null
      25: putfield      #55                 // Field diff:[B
      28: goto          63
      31: aload_0
      32: aload_0
      33: getfield      #53                 // Field rate:I
      36: bipush        8
      38: idiv
      39: i2l
      40: invokestatic  #59                 // Method leftEncode:(J)[B
      43: aload_0
      44: aload_2
      45: invokespecial #60                 // Method encodeString:([B)[B
      48: aload_0
      49: aload_3
      50: invokespecial #60                 // Method encodeString:([B)[B
      53: invokestatic  #67                 // Method org/bouncycastle/util/Arrays.concatenate:([B[B[B)[B
      56: putfield      #55                 // Field diff:[B
      59: aload_0
      60: invokespecial #57                 // Method diffPadAndAbsorb:()V
      63: return

  private void diffPadAndAbsorb();
    Code:
       0: aload_0
       1: getfield      #53                 // Field rate:I
       4: bipush        8
       6: idiv
       7: istore_1
       8: aload_0
       9: aload_0
      10: getfield      #55                 // Field diff:[B
      13: iconst_0
      14: aload_0
      15: getfield      #55                 // Field diff:[B
      18: arraylength
      19: invokevirtual #61                 // Method absorb:([BII)V
      22: iload_1
      23: aload_0
      24: getfield      #55                 // Field diff:[B
      27: arraylength
      28: iload_1
      29: irem
      30: isub
      31: istore_2
      32: iload_2
      33: getstatic     #56                 // Field padding:[B
      36: arraylength
      37: if_icmple     62
      40: aload_0
      41: getstatic     #56                 // Field padding:[B
      44: iconst_0
      45: getstatic     #56                 // Field padding:[B
      48: arraylength
      49: invokevirtual #61                 // Method absorb:([BII)V
      52: iload_2
      53: getstatic     #56                 // Field padding:[B
      56: arraylength
      57: isub
      58: istore_2
      59: goto          32
      62: aload_0
      63: getstatic     #56                 // Field padding:[B
      66: iconst_0
      67: iload_2
      68: invokevirtual #61                 // Method absorb:([BII)V
      71: return

  private byte[] encodeString(byte[]);
    Code:
       0: aload_1
       1: ifnull        9
       4: aload_1
       5: arraylength
       6: ifne          14
       9: lconst_0
      10: invokestatic  #59                 // Method leftEncode:(J)[B
      13: areturn
      14: aload_1
      15: arraylength
      16: i2l
      17: ldc2_w        #33                 // long 8l
      20: lmul
      21: invokestatic  #59                 // Method leftEncode:(J)[B
      24: aload_1
      25: invokestatic  #66                 // Method org/bouncycastle/util/Arrays.concatenate:([B[B)[B
      28: areturn

  private static byte[] leftEncode(long);
    Code:
       0: iconst_1
       1: istore_2
       2: lload_0
       3: lstore_3
       4: lload_3
       5: bipush        8
       7: lshr
       8: dup2
       9: lstore_3
      10: lconst_0
      11: lcmp
      12: ifeq          23
      15: iload_2
      16: iconst_1
      17: iadd
      18: i2b
      19: istore_2
      20: goto          4
      23: iload_2
      24: iconst_1
      25: iadd
      26: newarray       byte
      28: astore        5
      30: aload         5
      32: iconst_0
      33: iload_2
      34: bastore
      35: iconst_1
      36: istore        6
      38: iload         6
      40: iload_2
      41: if_icmpgt     66
      44: aload         5
      46: iload         6
      48: lload_0
      49: bipush        8
      51: iload_2
      52: iload         6
      54: isub
      55: imul
      56: lshr
      57: l2i
      58: i2b
      59: bastore
      60: iinc          6, 1
      63: goto          38
      66: aload         5
      68: areturn

  public int doOutput(byte[], int, int);
    Code:
       0: aload_0
       1: getfield      #55                 // Field diff:[B
       4: ifnull        34
       7: aload_0
       8: getfield      #54                 // Field squeezing:Z
      11: ifne          20
      14: aload_0
      15: iconst_0
      16: iconst_2
      17: invokevirtual #58                 // Method absorbBits:(II)V
      20: aload_0
      21: aload_1
      22: iload_2
      23: iload_3
      24: i2l
      25: ldc2_w        #33                 // long 8l
      28: lmul
      29: invokevirtual #62                 // Method squeeze:([BIJ)V
      32: iload_3
      33: ireturn
      34: aload_0
      35: aload_1
      36: iload_2
      37: iload_3
      38: invokespecial #65                 // Method org/bouncycastle/crypto/digests/SHAKEDigest.doOutput:([BII)I
      41: ireturn

  public void reset();
    Code:
       0: aload_0
       1: invokespecial #63                 // Method org/bouncycastle/crypto/digests/SHAKEDigest.reset:()V
       4: aload_0
       5: getfield      #55                 // Field diff:[B
       8: ifnull        15
      11: aload_0
      12: invokespecial #57                 // Method diffPadAndAbsorb:()V
      15: return

  static {};
    Code:
       0: bipush        100
       2: newarray       byte
       4: putstatic     #56                 // Field padding:[B
       7: return
}
