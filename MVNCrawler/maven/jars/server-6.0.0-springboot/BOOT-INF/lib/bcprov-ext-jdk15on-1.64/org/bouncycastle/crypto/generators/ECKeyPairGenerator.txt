public class org.bouncycastle.crypto.generators.ECKeyPairGenerator implements org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator,org.bouncycastle.math.ec.ECConstants {
  org.bouncycastle.crypto.params.ECDomainParameters params;

  java.security.SecureRandom random;

  public org.bouncycastle.crypto.generators.ECKeyPairGenerator();
    Code:
       0: aload_0
       1: invokespecial #87                 // Method java/lang/Object."<init>":()V
       4: return

  public void init(org.bouncycastle.crypto.KeyGenerationParameters);
    Code:
       0: aload_1
       1: checkcast     #42                 // class org/bouncycastle/crypto/params/ECKeyGenerationParameters
       4: astore_2
       5: aload_0
       6: aload_2
       7: invokevirtual #95                 // Method org/bouncycastle/crypto/params/ECKeyGenerationParameters.getRandom:()Ljava/security/SecureRandom;
      10: putfield      #85                 // Field random:Ljava/security/SecureRandom;
      13: aload_0
      14: aload_2
      15: invokevirtual #96                 // Method org/bouncycastle/crypto/params/ECKeyGenerationParameters.getDomainParameters:()Lorg/bouncycastle/crypto/params/ECDomainParameters;
      18: putfield      #86                 // Field params:Lorg/bouncycastle/crypto/params/ECDomainParameters;
      21: aload_0
      22: getfield      #85                 // Field random:Ljava/security/SecureRandom;
      25: ifnonnull     35
      28: aload_0
      29: invokestatic  #91                 // Method org/bouncycastle/crypto/CryptoServicesRegistrar.getSecureRandom:()Ljava/security/SecureRandom;
      32: putfield      #85                 // Field random:Ljava/security/SecureRandom;
      35: return

  public org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair();
    Code:
       0: aload_0
       1: getfield      #86                 // Field params:Lorg/bouncycastle/crypto/params/ECDomainParameters;
       4: invokevirtual #93                 // Method org/bouncycastle/crypto/params/ECDomainParameters.getN:()Ljava/math/BigInteger;
       7: astore_1
       8: aload_1
       9: invokevirtual #88                 // Method java/math/BigInteger.bitLength:()I
      12: istore_2
      13: iload_2
      14: iconst_2
      15: iushr
      16: istore_3
      17: iload_2
      18: aload_0
      19: getfield      #85                 // Field random:Ljava/security/SecureRandom;
      22: invokestatic  #101                // Method org/bouncycastle/util/BigIntegers.createRandomBigInteger:(ILjava/security/SecureRandom;)Ljava/math/BigInteger;
      25: astore        4
      27: aload         4
      29: getstatic     #84                 // Field ONE:Ljava/math/BigInteger;
      32: invokevirtual #89                 // Method java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I
      35: iflt          17
      38: aload         4
      40: aload_1
      41: invokevirtual #89                 // Method java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I
      44: iflt          50
      47: goto          17
      50: aload         4
      52: invokestatic  #100                // Method org/bouncycastle/math/ec/WNafUtil.getNafWeight:(Ljava/math/BigInteger;)I
      55: iload_3
      56: if_icmpge     62
      59: goto          17
      62: aload_0
      63: invokevirtual #92                 // Method createBasePointMultiplier:()Lorg/bouncycastle/math/ec/ECMultiplier;
      66: aload_0
      67: getfield      #86                 // Field params:Lorg/bouncycastle/crypto/params/ECDomainParameters;
      70: invokevirtual #94                 // Method org/bouncycastle/crypto/params/ECDomainParameters.getG:()Lorg/bouncycastle/math/ec/ECPoint;
      73: aload         4
      75: invokeinterface #102,  3          // InterfaceMethod org/bouncycastle/math/ec/ECMultiplier.multiply:(Lorg/bouncycastle/math/ec/ECPoint;Ljava/math/BigInteger;)Lorg/bouncycastle/math/ec/ECPoint;
      80: astore        5
      82: new           #37                 // class org/bouncycastle/crypto/AsymmetricCipherKeyPair
      85: dup
      86: new           #44                 // class org/bouncycastle/crypto/params/ECPublicKeyParameters
      89: dup
      90: aload         5
      92: aload_0
      93: getfield      #86                 // Field params:Lorg/bouncycastle/crypto/params/ECDomainParameters;
      96: invokespecial #98                 // Method org/bouncycastle/crypto/params/ECPublicKeyParameters."<init>":(Lorg/bouncycastle/math/ec/ECPoint;Lorg/bouncycastle/crypto/params/ECDomainParameters;)V
      99: new           #43                 // class org/bouncycastle/crypto/params/ECPrivateKeyParameters
     102: dup
     103: aload         4
     105: aload_0
     106: getfield      #86                 // Field params:Lorg/bouncycastle/crypto/params/ECDomainParameters;
     109: invokespecial #97                 // Method org/bouncycastle/crypto/params/ECPrivateKeyParameters."<init>":(Ljava/math/BigInteger;Lorg/bouncycastle/crypto/params/ECDomainParameters;)V
     112: invokespecial #90                 // Method org/bouncycastle/crypto/AsymmetricCipherKeyPair."<init>":(Lorg/bouncycastle/crypto/params/AsymmetricKeyParameter;Lorg/bouncycastle/crypto/params/AsymmetricKeyParameter;)V
     115: areturn

  protected org.bouncycastle.math.ec.ECMultiplier createBasePointMultiplier();
    Code:
       0: new           #47                 // class org/bouncycastle/math/ec/FixedPointCombMultiplier
       3: dup
       4: invokespecial #99                 // Method org/bouncycastle/math/ec/FixedPointCombMultiplier."<init>":()V
       7: areturn
}
