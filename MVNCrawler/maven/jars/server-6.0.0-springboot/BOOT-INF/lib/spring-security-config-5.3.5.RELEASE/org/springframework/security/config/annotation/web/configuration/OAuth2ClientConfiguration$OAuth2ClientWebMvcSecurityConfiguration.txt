Compiled from "OAuth2ClientConfiguration.java"
class org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration$OAuth2ClientWebMvcSecurityConfiguration implements org.springframework.web.servlet.config.annotation.WebMvcConfigurer {
  private org.springframework.security.oauth2.client.registration.ClientRegistrationRepository clientRegistrationRepository;

  private org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository authorizedClientRepository;

  private org.springframework.security.oauth2.client.endpoint.OAuth2AccessTokenResponseClient<org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequest> accessTokenResponseClient;

  org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration$OAuth2ClientWebMvcSecurityConfiguration();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public void addArgumentResolvers(java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field clientRegistrationRepository:Lorg/springframework/security/oauth2/client/registration/ClientRegistrationRepository;
       4: ifnull        97
       7: aload_0
       8: getfield      #3                  // Field authorizedClientRepository:Lorg/springframework/security/oauth2/client/web/OAuth2AuthorizedClientRepository;
      11: ifnull        97
      14: invokestatic  #4                  // Method org/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder.builder:()Lorg/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder;
      17: invokevirtual #5                  // Method org/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder.authorizationCode:()Lorg/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder;
      20: invokevirtual #6                  // Method org/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder.refreshToken:()Lorg/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder;
      23: invokevirtual #7                  // Method org/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder.password:()Lorg/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder;
      26: astore_2
      27: aload_0
      28: getfield      #8                  // Field accessTokenResponseClient:Lorg/springframework/security/oauth2/client/endpoint/OAuth2AccessTokenResponseClient;
      31: ifnull        48
      34: aload_2
      35: aload_0
      36: invokedynamic #9,  0              // InvokeDynamic #0:accept:(Lorg/springframework/security/config/annotation/web/configuration/OAuth2ClientConfiguration$OAuth2ClientWebMvcSecurityConfiguration;)Ljava/util/function/Consumer;
      41: invokevirtual #10                 // Method org/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder.clientCredentials:(Ljava/util/function/Consumer;)Lorg/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder;
      44: pop
      45: goto          53
      48: aload_2
      49: invokevirtual #11                 // Method org/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder.clientCredentials:()Lorg/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder;
      52: pop
      53: aload_2
      54: invokevirtual #12                 // Method org/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder.build:()Lorg/springframework/security/oauth2/client/OAuth2AuthorizedClientProvider;
      57: astore_3
      58: new           #13                 // class org/springframework/security/oauth2/client/web/DefaultOAuth2AuthorizedClientManager
      61: dup
      62: aload_0
      63: getfield      #2                  // Field clientRegistrationRepository:Lorg/springframework/security/oauth2/client/registration/ClientRegistrationRepository;
      66: aload_0
      67: getfield      #3                  // Field authorizedClientRepository:Lorg/springframework/security/oauth2/client/web/OAuth2AuthorizedClientRepository;
      70: invokespecial #14                 // Method org/springframework/security/oauth2/client/web/DefaultOAuth2AuthorizedClientManager."<init>":(Lorg/springframework/security/oauth2/client/registration/ClientRegistrationRepository;Lorg/springframework/security/oauth2/client/web/OAuth2AuthorizedClientRepository;)V
      73: astore        4
      75: aload         4
      77: aload_3
      78: invokevirtual #15                 // Method org/springframework/security/oauth2/client/web/DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider:(Lorg/springframework/security/oauth2/client/OAuth2AuthorizedClientProvider;)V
      81: aload_1
      82: new           #16                 // class org/springframework/security/oauth2/client/web/method/annotation/OAuth2AuthorizedClientArgumentResolver
      85: dup
      86: aload         4
      88: invokespecial #17                 // Method org/springframework/security/oauth2/client/web/method/annotation/OAuth2AuthorizedClientArgumentResolver."<init>":(Lorg/springframework/security/oauth2/client/OAuth2AuthorizedClientManager;)V
      91: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      96: pop
      97: return

  public void setClientRegistrationRepository(java.util.List<org.springframework.security.oauth2.client.registration.ClientRegistrationRepository>);
    Code:
       0: aload_1
       1: invokeinterface #19,  1           // InterfaceMethod java/util/List.size:()I
       6: iconst_1
       7: if_icmpne     24
      10: aload_0
      11: aload_1
      12: iconst_0
      13: invokeinterface #20,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      18: checkcast     #21                 // class org/springframework/security/oauth2/client/registration/ClientRegistrationRepository
      21: putfield      #2                  // Field clientRegistrationRepository:Lorg/springframework/security/oauth2/client/registration/ClientRegistrationRepository;
      24: return

  public void setAuthorizedClientRepository(java.util.List<org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository>);
    Code:
       0: aload_1
       1: invokeinterface #19,  1           // InterfaceMethod java/util/List.size:()I
       6: iconst_1
       7: if_icmpne     24
      10: aload_0
      11: aload_1
      12: iconst_0
      13: invokeinterface #20,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      18: checkcast     #22                 // class org/springframework/security/oauth2/client/web/OAuth2AuthorizedClientRepository
      21: putfield      #3                  // Field authorizedClientRepository:Lorg/springframework/security/oauth2/client/web/OAuth2AuthorizedClientRepository;
      24: return

  public void setAccessTokenResponseClient(java.util.Optional<org.springframework.security.oauth2.client.endpoint.OAuth2AccessTokenResponseClient<org.springframework.security.oauth2.client.endpoint.OAuth2ClientCredentialsGrantRequest>>);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #23,  0             // InvokeDynamic #1:accept:(Lorg/springframework/security/config/annotation/web/configuration/OAuth2ClientConfiguration$OAuth2ClientWebMvcSecurityConfiguration;)Ljava/util/function/Consumer;
       7: invokevirtual #24                 // Method java/util/Optional.ifPresent:(Ljava/util/function/Consumer;)V
      10: return

  private void lambda$setAccessTokenResponseClient$1(org.springframework.security.oauth2.client.endpoint.OAuth2AccessTokenResponseClient);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field accessTokenResponseClient:Lorg/springframework/security/oauth2/client/endpoint/OAuth2AccessTokenResponseClient;
       5: return

  private void lambda$addArgumentResolvers$0(org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder$ClientCredentialsGrantBuilder);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #8                  // Field accessTokenResponseClient:Lorg/springframework/security/oauth2/client/endpoint/OAuth2AccessTokenResponseClient;
       5: invokevirtual #25                 // Method org/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder$ClientCredentialsGrantBuilder.accessTokenResponseClient:(Lorg/springframework/security/oauth2/client/endpoint/OAuth2AccessTokenResponseClient;)Lorg/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder$ClientCredentialsGrantBuilder;
       8: pop
       9: return
}
