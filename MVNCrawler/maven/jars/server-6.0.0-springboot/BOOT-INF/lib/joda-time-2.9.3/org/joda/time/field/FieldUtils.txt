Compiled from "FieldUtils.java"
public class org.joda.time.field.FieldUtils {
  private org.joda.time.field.FieldUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static int safeNegate(int);
    Code:
       0: iload_0
       1: ldc           #2                  // int -2147483648
       3: if_icmpne     16
       6: new           #3                  // class java/lang/ArithmeticException
       9: dup
      10: ldc           #4                  // String Integer.MIN_VALUE cannot be negated
      12: invokespecial #5                  // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: iload_0
      17: ineg
      18: ireturn

  public static int safeAdd(int, int);
    Code:
       0: iload_0
       1: iload_1
       2: iadd
       3: istore_2
       4: iload_0
       5: iload_2
       6: ixor
       7: ifge          52
      10: iload_0
      11: iload_1
      12: ixor
      13: iflt          52
      16: new           #3                  // class java/lang/ArithmeticException
      19: dup
      20: new           #6                  // class java/lang/StringBuilder
      23: dup
      24: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      27: ldc           #8                  // String The calculation caused an overflow:
      29: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: iload_0
      33: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      36: ldc           #11                 // String  +
      38: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: iload_1
      42: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      45: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: invokespecial #5                  // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      51: athrow
      52: iload_2
      53: ireturn

  public static long safeAdd(long, long);
    Code:
       0: lload_0
       1: lload_2
       2: ladd
       3: lstore        4
       5: lload_0
       6: lload         4
       8: lxor
       9: lconst_0
      10: lcmp
      11: ifge          58
      14: lload_0
      15: lload_2
      16: lxor
      17: lconst_0
      18: lcmp
      19: iflt          58
      22: new           #3                  // class java/lang/ArithmeticException
      25: dup
      26: new           #6                  // class java/lang/StringBuilder
      29: dup
      30: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      33: ldc           #8                  // String The calculation caused an overflow:
      35: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: lload_0
      39: invokevirtual #13                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      42: ldc           #11                 // String  +
      44: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: lload_2
      48: invokevirtual #13                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      51: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      54: invokespecial #5                  // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      57: athrow
      58: lload         4
      60: lreturn

  public static long safeSubtract(long, long);
    Code:
       0: lload_0
       1: lload_2
       2: lsub
       3: lstore        4
       5: lload_0
       6: lload         4
       8: lxor
       9: lconst_0
      10: lcmp
      11: ifge          58
      14: lload_0
      15: lload_2
      16: lxor
      17: lconst_0
      18: lcmp
      19: ifge          58
      22: new           #3                  // class java/lang/ArithmeticException
      25: dup
      26: new           #6                  // class java/lang/StringBuilder
      29: dup
      30: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      33: ldc           #8                  // String The calculation caused an overflow:
      35: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: lload_0
      39: invokevirtual #13                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      42: ldc           #14                 // String  -
      44: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: lload_2
      48: invokevirtual #13                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      51: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      54: invokespecial #5                  // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      57: athrow
      58: lload         4
      60: lreturn

  public static int safeMultiply(int, int);
    Code:
       0: iload_0
       1: i2l
       2: iload_1
       3: i2l
       4: lmul
       5: lstore_2
       6: lload_2
       7: ldc2_w        #15                 // long -2147483648l
      10: lcmp
      11: iflt          22
      14: lload_2
      15: ldc2_w        #17                 // long 2147483647l
      18: lcmp
      19: ifle          58
      22: new           #3                  // class java/lang/ArithmeticException
      25: dup
      26: new           #6                  // class java/lang/StringBuilder
      29: dup
      30: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      33: ldc           #19                 // String Multiplication overflows an int:
      35: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: iload_0
      39: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      42: ldc           #20                 // String  *
      44: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: iload_1
      48: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      51: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      54: invokespecial #5                  // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      57: athrow
      58: lload_2
      59: l2i
      60: ireturn

  public static long safeMultiply(long, int);
    Code:
       0: iload_2
       1: tableswitch   { // -1 to 1
                    -1: 28
                     0: 75
                     1: 77
               default: 79
          }
      28: lload_0
      29: ldc2_w        #21                 // long -9223372036854775808l
      32: lcmp
      33: ifne          72
      36: new           #3                  // class java/lang/ArithmeticException
      39: dup
      40: new           #6                  // class java/lang/StringBuilder
      43: dup
      44: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      47: ldc           #23                 // String Multiplication overflows a long:
      49: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: lload_0
      53: invokevirtual #13                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      56: ldc           #20                 // String  *
      58: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: iload_2
      62: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      65: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      68: invokespecial #5                  // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      71: athrow
      72: lload_0
      73: lneg
      74: lreturn
      75: lconst_0
      76: lreturn
      77: lload_0
      78: lreturn
      79: lload_0
      80: iload_2
      81: i2l
      82: lmul
      83: lstore_3
      84: lload_3
      85: iload_2
      86: i2l
      87: ldiv
      88: lload_0
      89: lcmp
      90: ifeq          129
      93: new           #3                  // class java/lang/ArithmeticException
      96: dup
      97: new           #6                  // class java/lang/StringBuilder
     100: dup
     101: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
     104: ldc           #23                 // String Multiplication overflows a long:
     106: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     109: lload_0
     110: invokevirtual #13                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     113: ldc           #20                 // String  *
     115: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     118: iload_2
     119: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     122: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     125: invokespecial #5                  // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
     128: athrow
     129: lload_3
     130: lreturn

  public static long safeMultiply(long, long);
    Code:
       0: lload_2
       1: lconst_1
       2: lcmp
       3: ifne          8
       6: lload_0
       7: lreturn
       8: lload_0
       9: lconst_1
      10: lcmp
      11: ifne          16
      14: lload_2
      15: lreturn
      16: lload_0
      17: lconst_0
      18: lcmp
      19: ifeq          28
      22: lload_2
      23: lconst_0
      24: lcmp
      25: ifne          30
      28: lconst_0
      29: lreturn
      30: lload_0
      31: lload_2
      32: lmul
      33: lstore        4
      35: lload         4
      37: lload_2
      38: ldiv
      39: lload_0
      40: lcmp
      41: ifne          76
      44: lload_0
      45: ldc2_w        #21                 // long -9223372036854775808l
      48: lcmp
      49: ifne          60
      52: lload_2
      53: ldc2_w        #24                 // long -1l
      56: lcmp
      57: ifeq          76
      60: lload_2
      61: ldc2_w        #21                 // long -9223372036854775808l
      64: lcmp
      65: ifne          112
      68: lload_0
      69: ldc2_w        #24                 // long -1l
      72: lcmp
      73: ifne          112
      76: new           #3                  // class java/lang/ArithmeticException
      79: dup
      80: new           #6                  // class java/lang/StringBuilder
      83: dup
      84: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      87: ldc           #23                 // String Multiplication overflows a long:
      89: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      92: lload_0
      93: invokevirtual #13                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      96: ldc           #20                 // String  *
      98: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     101: lload_2
     102: invokevirtual #13                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     105: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     108: invokespecial #5                  // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
     111: athrow
     112: lload         4
     114: lreturn

  public static long safeDivide(long, long);
    Code:
       0: lload_0
       1: ldc2_w        #21                 // long -9223372036854775808l
       4: lcmp
       5: ifne          52
       8: lload_2
       9: ldc2_w        #24                 // long -1l
      12: lcmp
      13: ifne          52
      16: new           #3                  // class java/lang/ArithmeticException
      19: dup
      20: new           #6                  // class java/lang/StringBuilder
      23: dup
      24: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      27: ldc           #23                 // String Multiplication overflows a long:
      29: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: lload_0
      33: invokevirtual #13                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      36: ldc           #26                 // String  /
      38: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: lload_2
      42: invokevirtual #13                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      45: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: invokespecial #5                  // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      51: athrow
      52: lload_0
      53: lload_2
      54: ldiv
      55: lreturn

  public static int safeToInt(long);
    Code:
       0: ldc2_w        #15                 // long -2147483648l
       3: lload_0
       4: lcmp
       5: ifgt          19
       8: lload_0
       9: ldc2_w        #17                 // long 2147483647l
      12: lcmp
      13: ifgt          19
      16: lload_0
      17: l2i
      18: ireturn
      19: new           #3                  // class java/lang/ArithmeticException
      22: dup
      23: new           #6                  // class java/lang/StringBuilder
      26: dup
      27: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      30: ldc           #27                 // String Value cannot fit in an int:
      32: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: lload_0
      36: invokevirtual #13                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      39: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokespecial #5                  // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      45: athrow

  public static int safeMultiplyToInt(long, long);
    Code:
       0: lload_0
       1: lload_2
       2: invokestatic  #28                 // Method safeMultiply:(JJ)J
       5: lstore        4
       7: lload         4
       9: invokestatic  #29                 // Method safeToInt:(J)I
      12: ireturn

  public static void verifyValueBounds(org.joda.time.DateTimeField, int, int, int);
    Code:
       0: iload_1
       1: iload_2
       2: if_icmplt     10
       5: iload_1
       6: iload_3
       7: if_icmple     34
      10: new           #30                 // class org/joda/time/IllegalFieldValueException
      13: dup
      14: aload_0
      15: invokevirtual #31                 // Method org/joda/time/DateTimeField.getType:()Lorg/joda/time/DateTimeFieldType;
      18: iload_1
      19: invokestatic  #32                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      22: iload_2
      23: invokestatic  #32                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: iload_3
      27: invokestatic  #32                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      30: invokespecial #33                 // Method org/joda/time/IllegalFieldValueException."<init>":(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      33: athrow
      34: return

  public static void verifyValueBounds(org.joda.time.DateTimeFieldType, int, int, int);
    Code:
       0: iload_1
       1: iload_2
       2: if_icmplt     10
       5: iload_1
       6: iload_3
       7: if_icmple     31
      10: new           #30                 // class org/joda/time/IllegalFieldValueException
      13: dup
      14: aload_0
      15: iload_1
      16: invokestatic  #32                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      19: iload_2
      20: invokestatic  #32                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      23: iload_3
      24: invokestatic  #32                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      27: invokespecial #33                 // Method org/joda/time/IllegalFieldValueException."<init>":(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      30: athrow
      31: return

  public static void verifyValueBounds(java.lang.String, int, int, int);
    Code:
       0: iload_1
       1: iload_2
       2: if_icmplt     10
       5: iload_1
       6: iload_3
       7: if_icmple     31
      10: new           #30                 // class org/joda/time/IllegalFieldValueException
      13: dup
      14: aload_0
      15: iload_1
      16: invokestatic  #32                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      19: iload_2
      20: invokestatic  #32                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      23: iload_3
      24: invokestatic  #32                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      27: invokespecial #34                 // Method org/joda/time/IllegalFieldValueException."<init>":(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      30: athrow
      31: return

  public static int getWrappedValue(int, int, int, int);
    Code:
       0: iload_0
       1: iload_1
       2: iadd
       3: iload_2
       4: iload_3
       5: invokestatic  #35                 // Method getWrappedValue:(III)I
       8: ireturn

  public static int getWrappedValue(int, int, int);
    Code:
       0: iload_1
       1: iload_2
       2: if_icmplt     15
       5: new           #36                 // class java/lang/IllegalArgumentException
       8: dup
       9: ldc           #37                 // String MIN > MAX
      11: invokespecial #38                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      14: athrow
      15: iload_2
      16: iload_1
      17: isub
      18: iconst_1
      19: iadd
      20: istore_3
      21: iload_0
      22: iload_1
      23: isub
      24: istore_0
      25: iload_0
      26: iflt          35
      29: iload_0
      30: iload_3
      31: irem
      32: iload_1
      33: iadd
      34: ireturn
      35: iload_0
      36: ineg
      37: iload_3
      38: irem
      39: istore        4
      41: iload         4
      43: ifne          50
      46: iconst_0
      47: iload_1
      48: iadd
      49: ireturn
      50: iload_3
      51: iload         4
      53: isub
      54: iload_1
      55: iadd
      56: ireturn

  public static boolean equals(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_0
       8: ifnull        15
      11: aload_1
      12: ifnonnull     17
      15: iconst_0
      16: ireturn
      17: aload_0
      18: aload_1
      19: invokevirtual #39                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      22: ireturn
}
