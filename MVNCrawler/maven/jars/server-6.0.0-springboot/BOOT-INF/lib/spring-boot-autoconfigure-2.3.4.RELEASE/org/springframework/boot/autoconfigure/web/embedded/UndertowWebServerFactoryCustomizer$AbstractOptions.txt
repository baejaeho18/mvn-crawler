Compiled from "UndertowWebServerFactoryCustomizer.java"
abstract class org.springframework.boot.autoconfigure.web.embedded.UndertowWebServerFactoryCustomizer$AbstractOptions {
  private final java.lang.Class<?> source;

  private final java.util.Map<java.lang.String, org.xnio.Option<?>> nameLookup;

  private final org.springframework.boot.web.embedded.undertow.ConfigurableUndertowWebServerFactory factory;

  org.springframework.boot.autoconfigure.web.embedded.UndertowWebServerFactoryCustomizer$AbstractOptions(java.lang.Class<?>, org.springframework.boot.web.embedded.undertow.ConfigurableUndertowWebServerFactory);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: new           #2                  // class java/util/HashMap
       7: dup
       8: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      11: astore_3
      12: aload_1
      13: aload_3
      14: invokedynamic #4,  0              // InvokeDynamic #0:doWith:(Ljava/util/Map;)Lorg/springframework/util/ReflectionUtils$FieldCallback;
      19: invokestatic  #5                  // Method org/springframework/util/ReflectionUtils.doWithLocalFields:(Ljava/lang/Class;Lorg/springframework/util/ReflectionUtils$FieldCallback;)V
      22: aload_0
      23: aload_1
      24: putfield      #6                  // Field source:Ljava/lang/Class;
      27: aload_0
      28: aload_3
      29: invokestatic  #7                  // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
      32: putfield      #8                  // Field nameLookup:Ljava/util/Map;
      35: aload_0
      36: aload_2
      37: putfield      #9                  // Field factory:Lorg/springframework/boot/web/embedded/undertow/ConfigurableUndertowWebServerFactory;
      40: return

  protected org.springframework.boot.web.embedded.undertow.ConfigurableUndertowWebServerFactory getFactory();
    Code:
       0: aload_0
       1: getfield      #9                  // Field factory:Lorg/springframework/boot/web/embedded/undertow/ConfigurableUndertowWebServerFactory;
       4: areturn

  <T> java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.String>> forEach(java.util.function.Function<org.xnio.Option<T>, java.util.function.Consumer<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #10,  0             // InvokeDynamic #1:accept:(Lorg/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizer$AbstractOptions;Ljava/util/function/Function;)Ljava/util/function/Consumer;
       7: areturn

  private static java.lang.String getCanonicalName(java.lang.String);
    Code:
       0: new           #11                 // class java/lang/StringBuilder
       3: dup
       4: aload_0
       5: invokevirtual #12                 // Method java/lang/String.length:()I
       8: invokespecial #13                 // Method java/lang/StringBuilder."<init>":(I)V
      11: astore_1
      12: aload_0
      13: invokevirtual #14                 // Method java/lang/String.chars:()Ljava/util/stream/IntStream;
      16: invokedynamic #15,  0             // InvokeDynamic #2:test:()Ljava/util/function/IntPredicate;
      21: invokeinterface #16,  2           // InterfaceMethod java/util/stream/IntStream.filter:(Ljava/util/function/IntPredicate;)Ljava/util/stream/IntStream;
      26: invokedynamic #17,  0             // InvokeDynamic #3:applyAsInt:()Ljava/util/function/IntUnaryOperator;
      31: invokeinterface #18,  2           // InterfaceMethod java/util/stream/IntStream.map:(Ljava/util/function/IntUnaryOperator;)Ljava/util/stream/IntStream;
      36: aload_1
      37: invokedynamic #19,  0             // InvokeDynamic #4:accept:(Ljava/lang/StringBuilder;)Ljava/util/function/IntConsumer;
      42: invokeinterface #20,  2           // InterfaceMethod java/util/stream/IntStream.forEach:(Ljava/util/function/IntConsumer;)V
      47: aload_1
      48: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: areturn

  private static void lambda$getCanonicalName$3(java.lang.StringBuilder, int);
    Code:
       0: aload_0
       1: iload_1
       2: i2c
       3: invokevirtual #22                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
       6: pop
       7: return

  private void lambda$forEach$2(java.util.function.Function, java.util.Map);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokedynamic #23,  0             // InvokeDynamic #5:accept:(Lorg/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizer$AbstractOptions;Ljava/util/function/Function;)Ljava/util/function/BiConsumer;
       8: invokeinterface #24,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      13: return

  private void lambda$null$1(java.util.function.Function, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #8                  // Field nameLookup:Ljava/util/Map;
       4: aload_2
       5: invokestatic  #25                 // Method getCanonicalName:(Ljava/lang/String;)Ljava/lang/String;
       8: invokeinterface #26,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #27                 // class org/xnio/Option
      16: astore        4
      18: aload         4
      20: ifnull        27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: new           #11                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #29                 // String Unable to find \'
      37: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: aload_2
      41: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: ldc           #31                 // String \' in
      46: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: aload_0
      50: getfield      #6                  // Field source:Ljava/lang/Class;
      53: invokestatic  #32                 // Method org/springframework/util/ClassUtils.getShortName:(Ljava/lang/Class;)Ljava/lang/String;
      56: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      62: invokestatic  #33                 // Method org/springframework/util/Assert.state:(ZLjava/lang/String;)V
      65: aload         4
      67: aload_3
      68: aload_0
      69: invokevirtual #34                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      72: invokevirtual #35                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
      75: invokevirtual #36                 // Method org/xnio/Option.parseValue:(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/Object;
      78: astore        5
      80: aload_1
      81: aload         4
      83: invokeinterface #37,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      88: checkcast     #38                 // class java/util/function/Consumer
      91: aload         5
      93: invokeinterface #39,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      98: return

  private static void lambda$new$0(java.util.Map, java.lang.reflect.Field) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException;
    Code:
       0: aload_1
       1: invokevirtual #40                 // Method java/lang/reflect/Field.getModifiers:()I
       4: istore_2
       5: iload_2
       6: invokestatic  #41                 // Method java/lang/reflect/Modifier.isPublic:(I)Z
       9: ifeq          59
      12: iload_2
      13: invokestatic  #42                 // Method java/lang/reflect/Modifier.isStatic:(I)Z
      16: ifeq          59
      19: ldc           #27                 // class org/xnio/Option
      21: aload_1
      22: invokevirtual #43                 // Method java/lang/reflect/Field.getType:()Ljava/lang/Class;
      25: invokevirtual #44                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      28: ifeq          59
      31: aload_1
      32: aconst_null
      33: invokevirtual #45                 // Method java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;
      36: checkcast     #27                 // class org/xnio/Option
      39: astore_3
      40: aload_0
      41: aload_1
      42: invokevirtual #46                 // Method java/lang/reflect/Field.getName:()Ljava/lang/String;
      45: invokestatic  #25                 // Method getCanonicalName:(Ljava/lang/String;)Ljava/lang/String;
      48: aload_3
      49: invokeinterface #47,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      54: pop
      55: goto          59
      58: astore_3
      59: return
    Exception table:
       from    to  target type
          31    55    58   Class java/lang/IllegalAccessException
}
