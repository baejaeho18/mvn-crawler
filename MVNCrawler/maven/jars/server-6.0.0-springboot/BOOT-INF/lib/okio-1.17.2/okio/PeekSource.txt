Compiled from "PeekSource.java"
final class okio.PeekSource implements okio.Source {
  private final okio.BufferedSource upstream;

  private final okio.Buffer buffer;

  private okio.Segment expectedSegment;

  private int expectedPos;

  private boolean closed;

  private long pos;

  okio.PeekSource(okio.BufferedSource);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field upstream:Lokio/BufferedSource;
       9: aload_0
      10: aload_1
      11: invokeinterface #3,  1            // InterfaceMethod okio/BufferedSource.buffer:()Lokio/Buffer;
      16: putfield      #4                  // Field buffer:Lokio/Buffer;
      19: aload_0
      20: aload_0
      21: getfield      #4                  // Field buffer:Lokio/Buffer;
      24: getfield      #5                  // Field okio/Buffer.head:Lokio/Segment;
      27: putfield      #6                  // Field expectedSegment:Lokio/Segment;
      30: aload_0
      31: aload_0
      32: getfield      #6                  // Field expectedSegment:Lokio/Segment;
      35: ifnull        48
      38: aload_0
      39: getfield      #6                  // Field expectedSegment:Lokio/Segment;
      42: getfield      #7                  // Field okio/Segment.pos:I
      45: goto          49
      48: iconst_m1
      49: putfield      #8                  // Field expectedPos:I
      52: return

  public long read(okio.Buffer, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field closed:Z
       4: ifeq          17
       7: new           #10                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #11                 // String closed
      13: invokespecial #12                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #6                  // Field expectedSegment:Lokio/Segment;
      21: ifnull        65
      24: aload_0
      25: getfield      #6                  // Field expectedSegment:Lokio/Segment;
      28: aload_0
      29: getfield      #4                  // Field buffer:Lokio/Buffer;
      32: getfield      #5                  // Field okio/Buffer.head:Lokio/Segment;
      35: if_acmpne     55
      38: aload_0
      39: getfield      #8                  // Field expectedPos:I
      42: aload_0
      43: getfield      #4                  // Field buffer:Lokio/Buffer;
      46: getfield      #5                  // Field okio/Buffer.head:Lokio/Segment;
      49: getfield      #7                  // Field okio/Segment.pos:I
      52: if_icmpeq     65
      55: new           #10                 // class java/lang/IllegalStateException
      58: dup
      59: ldc           #13                 // String Peek source is invalid because upstream source was used
      61: invokespecial #12                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      64: athrow
      65: aload_0
      66: getfield      #2                  // Field upstream:Lokio/BufferedSource;
      69: aload_0
      70: getfield      #14                 // Field pos:J
      73: lload_2
      74: ladd
      75: invokeinterface #15,  3           // InterfaceMethod okio/BufferedSource.request:(J)Z
      80: pop
      81: aload_0
      82: getfield      #6                  // Field expectedSegment:Lokio/Segment;
      85: ifnonnull     123
      88: aload_0
      89: getfield      #4                  // Field buffer:Lokio/Buffer;
      92: getfield      #5                  // Field okio/Buffer.head:Lokio/Segment;
      95: ifnull        123
      98: aload_0
      99: aload_0
     100: getfield      #4                  // Field buffer:Lokio/Buffer;
     103: getfield      #5                  // Field okio/Buffer.head:Lokio/Segment;
     106: putfield      #6                  // Field expectedSegment:Lokio/Segment;
     109: aload_0
     110: aload_0
     111: getfield      #4                  // Field buffer:Lokio/Buffer;
     114: getfield      #5                  // Field okio/Buffer.head:Lokio/Segment;
     117: getfield      #7                  // Field okio/Segment.pos:I
     120: putfield      #8                  // Field expectedPos:I
     123: lload_2
     124: aload_0
     125: getfield      #4                  // Field buffer:Lokio/Buffer;
     128: getfield      #16                 // Field okio/Buffer.size:J
     131: aload_0
     132: getfield      #14                 // Field pos:J
     135: lsub
     136: invokestatic  #17                 // Method java/lang/Math.min:(JJ)J
     139: lstore        4
     141: lload         4
     143: lconst_0
     144: lcmp
     145: ifgt          152
     148: ldc2_w        #18                 // long -1l
     151: lreturn
     152: aload_0
     153: getfield      #4                  // Field buffer:Lokio/Buffer;
     156: aload_1
     157: aload_0
     158: getfield      #14                 // Field pos:J
     161: lload         4
     163: invokevirtual #20                 // Method okio/Buffer.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;
     166: pop
     167: aload_0
     168: dup
     169: getfield      #14                 // Field pos:J
     172: lload         4
     174: ladd
     175: putfield      #14                 // Field pos:J
     178: lload         4
     180: lreturn

  public okio.Timeout timeout();
    Code:
       0: aload_0
       1: getfield      #2                  // Field upstream:Lokio/BufferedSource;
       4: invokeinterface #21,  1           // InterfaceMethod okio/BufferedSource.timeout:()Lokio/Timeout;
       9: areturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #9                  // Field closed:Z
       5: return
}
