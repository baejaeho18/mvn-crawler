Compiled from "JobStatusFluent.java"
public interface io.fabric8.kubernetes.api.model.batch.JobStatusFluent<A extends io.fabric8.kubernetes.api.model.batch.JobStatusFluent<A>> extends io.fabric8.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Integer getActive();

  public abstract A withActive(java.lang.Integer);

  public abstract java.lang.Boolean hasActive();

  public abstract java.lang.String getCompletionTime();

  public abstract A withCompletionTime(java.lang.String);

  public abstract java.lang.Boolean hasCompletionTime();

  public abstract A withNewCompletionTime(java.lang.String);

  public abstract A withNewCompletionTime(java.lang.StringBuilder);

  public abstract A withNewCompletionTime(java.lang.StringBuffer);

  public abstract A addToConditions(int, io.fabric8.kubernetes.api.model.batch.JobCondition);

  public abstract A setToConditions(int, io.fabric8.kubernetes.api.model.batch.JobCondition);

  public abstract A addToConditions(io.fabric8.kubernetes.api.model.batch.JobCondition...);

  public abstract A addAllToConditions(java.util.Collection<io.fabric8.kubernetes.api.model.batch.JobCondition>);

  public abstract A removeFromConditions(io.fabric8.kubernetes.api.model.batch.JobCondition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.fabric8.kubernetes.api.model.batch.JobCondition>);

  public abstract A removeMatchingFromConditions(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.batch.JobConditionBuilder>);

  public abstract java.util.List<io.fabric8.kubernetes.api.model.batch.JobCondition> getConditions();

  public abstract java.util.List<io.fabric8.kubernetes.api.model.batch.JobCondition> buildConditions();

  public abstract io.fabric8.kubernetes.api.model.batch.JobCondition buildCondition(int);

  public abstract io.fabric8.kubernetes.api.model.batch.JobCondition buildFirstCondition();

  public abstract io.fabric8.kubernetes.api.model.batch.JobCondition buildLastCondition();

  public abstract io.fabric8.kubernetes.api.model.batch.JobCondition buildMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.batch.JobConditionBuilder>);

  public abstract java.lang.Boolean hasMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.batch.JobConditionBuilder>);

  public abstract A withConditions(java.util.List<io.fabric8.kubernetes.api.model.batch.JobCondition>);

  public abstract A withConditions(io.fabric8.kubernetes.api.model.batch.JobCondition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract io.fabric8.kubernetes.api.model.batch.JobStatusFluent$ConditionsNested<A> addNewCondition();

  public abstract io.fabric8.kubernetes.api.model.batch.JobStatusFluent$ConditionsNested<A> addNewConditionLike(io.fabric8.kubernetes.api.model.batch.JobCondition);

  public abstract io.fabric8.kubernetes.api.model.batch.JobStatusFluent$ConditionsNested<A> setNewConditionLike(int, io.fabric8.kubernetes.api.model.batch.JobCondition);

  public abstract io.fabric8.kubernetes.api.model.batch.JobStatusFluent$ConditionsNested<A> editCondition(int);

  public abstract io.fabric8.kubernetes.api.model.batch.JobStatusFluent$ConditionsNested<A> editFirstCondition();

  public abstract io.fabric8.kubernetes.api.model.batch.JobStatusFluent$ConditionsNested<A> editLastCondition();

  public abstract io.fabric8.kubernetes.api.model.batch.JobStatusFluent$ConditionsNested<A> editMatchingCondition(io.fabric8.kubernetes.api.builder.Predicate<io.fabric8.kubernetes.api.model.batch.JobConditionBuilder>);

  public abstract java.lang.Integer getFailed();

  public abstract A withFailed(java.lang.Integer);

  public abstract java.lang.Boolean hasFailed();

  public abstract java.lang.String getStartTime();

  public abstract A withStartTime(java.lang.String);

  public abstract java.lang.Boolean hasStartTime();

  public abstract A withNewStartTime(java.lang.String);

  public abstract A withNewStartTime(java.lang.StringBuilder);

  public abstract A withNewStartTime(java.lang.StringBuffer);

  public abstract java.lang.Integer getSucceeded();

  public abstract A withSucceeded(java.lang.Integer);

  public abstract java.lang.Boolean hasSucceeded();
}
