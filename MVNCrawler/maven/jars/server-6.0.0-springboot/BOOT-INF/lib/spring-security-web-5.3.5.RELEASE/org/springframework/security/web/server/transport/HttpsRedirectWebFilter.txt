Compiled from "HttpsRedirectWebFilter.java"
public final class org.springframework.security.web.server.transport.HttpsRedirectWebFilter implements org.springframework.web.server.WebFilter {
  private org.springframework.security.web.PortMapper portMapper;

  private org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher requiresHttpsRedirectMatcher;

  private final org.springframework.security.web.server.ServerRedirectStrategy redirectStrategy;

  public org.springframework.security.web.server.transport.HttpsRedirectWebFilter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/springframework/security/web/PortMapperImpl
       8: dup
       9: invokespecial #3                  // Method org/springframework/security/web/PortMapperImpl."<init>":()V
      12: putfield      #4                  // Field portMapper:Lorg/springframework/security/web/PortMapper;
      15: aload_0
      16: invokestatic  #5                  // Method org/springframework/security/web/server/util/matcher/ServerWebExchangeMatchers.anyExchange:()Lorg/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher;
      19: putfield      #6                  // Field requiresHttpsRedirectMatcher:Lorg/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher;
      22: aload_0
      23: new           #7                  // class org/springframework/security/web/server/DefaultServerRedirectStrategy
      26: dup
      27: invokespecial #8                  // Method org/springframework/security/web/server/DefaultServerRedirectStrategy."<init>":()V
      30: putfield      #9                  // Field redirectStrategy:Lorg/springframework/security/web/server/ServerRedirectStrategy;
      33: return

  public reactor.core.publisher.Mono<java.lang.Void> filter(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebFilterChain);
    Code:
       0: aload_1
       1: invokestatic  #10                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       4: aload_0
       5: invokedynamic #11,  0             // InvokeDynamic #0:test:(Lorg/springframework/security/web/server/transport/HttpsRedirectWebFilter;)Ljava/util/function/Predicate;
      10: invokevirtual #12                 // Method reactor/core/publisher/Mono.filter:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Mono;
      13: aload_0
      14: getfield      #6                  // Field requiresHttpsRedirectMatcher:Lorg/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher;
      17: dup
      18: invokevirtual #13                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: pop
      22: invokedynamic #14,  0             // InvokeDynamic #1:apply:(Lorg/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher;)Ljava/util/function/Function;
      27: invokevirtual #15                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      30: invokedynamic #16,  0             // InvokeDynamic #2:test:()Ljava/util/function/Predicate;
      35: invokevirtual #12                 // Method reactor/core/publisher/Mono.filter:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Mono;
      38: aload_2
      39: aload_1
      40: invokeinterface #17,  2           // InterfaceMethod org/springframework/web/server/WebFilterChain.filter:(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
      45: invokestatic  #18                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      48: invokevirtual #19                 // Method reactor/core/publisher/Mono.then:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      51: invokevirtual #20                 // Method reactor/core/publisher/Mono.switchIfEmpty:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      54: aload_0
      55: aload_1
      56: invokedynamic #21,  0             // InvokeDynamic #3:apply:(Lorg/springframework/security/web/server/transport/HttpsRedirectWebFilter;Lorg/springframework/web/server/ServerWebExchange;)Ljava/util/function/Function;
      61: invokevirtual #22                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      64: aload_0
      65: aload_1
      66: invokedynamic #23,  0             // InvokeDynamic #4:apply:(Lorg/springframework/security/web/server/transport/HttpsRedirectWebFilter;Lorg/springframework/web/server/ServerWebExchange;)Ljava/util/function/Function;
      71: invokevirtual #15                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      74: areturn

  public void setPortMapper(org.springframework.security.web.PortMapper);
    Code:
       0: aload_1
       1: ldc           #24                 // String portMapper cannot be null
       3: invokestatic  #25                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #4                  // Field portMapper:Lorg/springframework/security/web/PortMapper;
      11: return

  public void setRequiresHttpsRedirectMatcher(org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher);
    Code:
       0: aload_1
       1: ldc           #26                 // String requiresHttpsRedirectMatcher cannot be null
       3: invokestatic  #25                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #6                  // Field requiresHttpsRedirectMatcher:Lorg/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher;
      11: return

  private boolean isInsecure(org.springframework.web.server.ServerWebExchange);
    Code:
       0: ldc           #27                 // String https
       2: aload_1
       3: invokeinterface #28,  1           // InterfaceMethod org/springframework/web/server/ServerWebExchange.getRequest:()Lorg/springframework/http/server/reactive/ServerHttpRequest;
       8: invokeinterface #29,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpRequest.getURI:()Ljava/net/URI;
      13: invokevirtual #30                 // Method java/net/URI.getScheme:()Ljava/lang/String;
      16: invokevirtual #31                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      19: ifne          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  private java.net.URI createRedirectUri(org.springframework.web.server.ServerWebExchange);
    Code:
       0: aload_1
       1: invokeinterface #28,  1           // InterfaceMethod org/springframework/web/server/ServerWebExchange.getRequest:()Lorg/springframework/http/server/reactive/ServerHttpRequest;
       6: invokeinterface #29,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpRequest.getURI:()Ljava/net/URI;
      11: invokevirtual #32                 // Method java/net/URI.getPort:()I
      14: istore_2
      15: aload_1
      16: invokeinterface #28,  1           // InterfaceMethod org/springframework/web/server/ServerWebExchange.getRequest:()Lorg/springframework/http/server/reactive/ServerHttpRequest;
      21: invokeinterface #29,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpRequest.getURI:()Ljava/net/URI;
      26: invokestatic  #33                 // Method org/springframework/web/util/UriComponentsBuilder.fromUri:(Ljava/net/URI;)Lorg/springframework/web/util/UriComponentsBuilder;
      29: astore_3
      30: iload_2
      31: ifle          96
      34: aload_0
      35: getfield      #4                  // Field portMapper:Lorg/springframework/security/web/PortMapper;
      38: iload_2
      39: invokestatic  #34                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      42: invokeinterface #35,  2           // InterfaceMethod org/springframework/security/web/PortMapper.lookupHttpsPort:(Ljava/lang/Integer;)Ljava/lang/Integer;
      47: astore        4
      49: aload         4
      51: ifnonnull     86
      54: new           #36                 // class java/lang/IllegalStateException
      57: dup
      58: new           #37                 // class java/lang/StringBuilder
      61: dup
      62: invokespecial #38                 // Method java/lang/StringBuilder."<init>":()V
      65: ldc           #39                 // String HTTP Port \'
      67: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: iload_2
      71: invokevirtual #41                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      74: ldc           #42                 // String \' does not have a corresponding HTTPS Port
      76: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      82: invokespecial #44                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      85: athrow
      86: aload_3
      87: aload         4
      89: invokevirtual #45                 // Method java/lang/Integer.intValue:()I
      92: invokevirtual #46                 // Method org/springframework/web/util/UriComponentsBuilder.port:(I)Lorg/springframework/web/util/UriComponentsBuilder;
      95: pop
      96: aload_3
      97: ldc           #27                 // String https
      99: invokevirtual #47                 // Method org/springframework/web/util/UriComponentsBuilder.scheme:(Ljava/lang/String;)Lorg/springframework/web/util/UriComponentsBuilder;
     102: invokevirtual #48                 // Method org/springframework/web/util/UriComponentsBuilder.build:()Lorg/springframework/web/util/UriComponents;
     105: invokevirtual #49                 // Method org/springframework/web/util/UriComponents.toUri:()Ljava/net/URI;
     108: areturn

  private reactor.core.publisher.Mono lambda$filter$2(org.springframework.web.server.ServerWebExchange, java.net.URI);
    Code:
       0: aload_0
       1: getfield      #9                  // Field redirectStrategy:Lorg/springframework/security/web/server/ServerRedirectStrategy;
       4: aload_1
       5: aload_2
       6: invokeinterface #50,  3           // InterfaceMethod org/springframework/security/web/server/ServerRedirectStrategy.sendRedirect:(Lorg/springframework/web/server/ServerWebExchange;Ljava/net/URI;)Lreactor/core/publisher/Mono;
      11: areturn

  private java.net.URI lambda$filter$1(org.springframework.web.server.ServerWebExchange, org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher$MatchResult);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #51                 // Method createRedirectUri:(Lorg/springframework/web/server/ServerWebExchange;)Ljava/net/URI;
       5: areturn

  private static boolean lambda$filter$0(org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher$MatchResult);
    Code:
       0: aload_0
       1: invokevirtual #52                 // Method org/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher$MatchResult.isMatch:()Z
       4: ireturn
}
