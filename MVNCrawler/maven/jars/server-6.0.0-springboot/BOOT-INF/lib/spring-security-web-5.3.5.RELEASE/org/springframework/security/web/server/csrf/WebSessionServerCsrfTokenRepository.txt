Compiled from "WebSessionServerCsrfTokenRepository.java"
public class org.springframework.security.web.server.csrf.WebSessionServerCsrfTokenRepository implements org.springframework.security.web.server.csrf.ServerCsrfTokenRepository {
  private static final java.lang.String DEFAULT_CSRF_PARAMETER_NAME;

  private static final java.lang.String DEFAULT_CSRF_HEADER_NAME;

  private static final java.lang.String DEFAULT_CSRF_TOKEN_ATTR_NAME;

  private java.lang.String parameterName;

  private java.lang.String headerName;

  private java.lang.String sessionAttributeName;

  public org.springframework.security.web.server.csrf.WebSessionServerCsrfTokenRepository();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #3                  // String _csrf
       7: putfield      #4                  // Field parameterName:Ljava/lang/String;
      10: aload_0
      11: ldc           #5                  // String X-CSRF-TOKEN
      13: putfield      #6                  // Field headerName:Ljava/lang/String;
      16: aload_0
      17: getstatic     #7                  // Field DEFAULT_CSRF_TOKEN_ATTR_NAME:Ljava/lang/String;
      20: putfield      #8                  // Field sessionAttributeName:Ljava/lang/String;
      23: return

  public reactor.core.publisher.Mono<org.springframework.security.web.server.csrf.CsrfToken> generateToken(org.springframework.web.server.ServerWebExchange);
    Code:
       0: aload_1
       1: invokestatic  #9                  // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       4: invokestatic  #10                 // Method reactor/core/scheduler/Schedulers.boundedElastic:()Lreactor/core/scheduler/Scheduler;
       7: invokevirtual #11                 // Method reactor/core/publisher/Mono.publishOn:(Lreactor/core/scheduler/Scheduler;)Lreactor/core/publisher/Mono;
      10: pop
      11: aload_0
      12: invokedynamic #12,  0             // InvokeDynamic #0:call:(Lorg/springframework/security/web/server/csrf/WebSessionServerCsrfTokenRepository;)Ljava/util/concurrent/Callable;
      17: invokestatic  #13                 // Method reactor/core/publisher/Mono.fromCallable:(Ljava/util/concurrent/Callable;)Lreactor/core/publisher/Mono;
      20: areturn

  public reactor.core.publisher.Mono<java.lang.Void> saveToken(org.springframework.web.server.ServerWebExchange, org.springframework.security.web.server.csrf.CsrfToken);
    Code:
       0: aload_1
       1: invokeinterface #14,  1           // InterfaceMethod org/springframework/web/server/ServerWebExchange.getSession:()Lreactor/core/publisher/Mono;
       6: aload_0
       7: aload_2
       8: invokedynamic #15,  0             // InvokeDynamic #1:accept:(Lorg/springframework/security/web/server/csrf/WebSessionServerCsrfTokenRepository;Lorg/springframework/security/web/server/csrf/CsrfToken;)Ljava/util/function/Consumer;
      13: invokevirtual #16                 // Method reactor/core/publisher/Mono.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      16: invokedynamic #17,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      21: invokevirtual #18                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      24: areturn

  private void putToken(java.util.Map<java.lang.String, java.lang.Object>, org.springframework.security.web.server.csrf.CsrfToken);
    Code:
       0: aload_2
       1: ifnonnull     18
       4: aload_1
       5: aload_0
       6: getfield      #8                  // Field sessionAttributeName:Ljava/lang/String;
       9: invokeinterface #19,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: goto          30
      18: aload_1
      19: aload_0
      20: getfield      #8                  // Field sessionAttributeName:Ljava/lang/String;
      23: aload_2
      24: invokeinterface #20,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      29: pop
      30: return

  public reactor.core.publisher.Mono<org.springframework.security.web.server.csrf.CsrfToken> loadToken(org.springframework.web.server.ServerWebExchange);
    Code:
       0: aload_1
       1: invokeinterface #14,  1           // InterfaceMethod org/springframework/web/server/ServerWebExchange.getSession:()Lreactor/core/publisher/Mono;
       6: aload_0
       7: invokedynamic #21,  0             // InvokeDynamic #3:test:(Lorg/springframework/security/web/server/csrf/WebSessionServerCsrfTokenRepository;)Ljava/util/function/Predicate;
      12: invokevirtual #22                 // Method reactor/core/publisher/Mono.filter:(Ljava/util/function/Predicate;)Lreactor/core/publisher/Mono;
      15: aload_0
      16: invokedynamic #23,  0             // InvokeDynamic #4:apply:(Lorg/springframework/security/web/server/csrf/WebSessionServerCsrfTokenRepository;)Ljava/util/function/Function;
      21: invokevirtual #24                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      24: areturn

  public void setParameterName(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #25                 // String parameterName cannot be null or empty
       3: invokestatic  #26                 // Method org/springframework/util/Assert.hasLength:(Ljava/lang/String;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #4                  // Field parameterName:Ljava/lang/String;
      11: return

  public void setHeaderName(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #27                 // String headerName cannot be null or empty
       3: invokestatic  #26                 // Method org/springframework/util/Assert.hasLength:(Ljava/lang/String;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #6                  // Field headerName:Ljava/lang/String;
      11: return

  public void setSessionAttributeName(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #28                 // String sessionAttributename cannot be null or empty
       3: invokestatic  #26                 // Method org/springframework/util/Assert.hasLength:(Ljava/lang/String;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #8                  // Field sessionAttributeName:Ljava/lang/String;
      11: return

  private org.springframework.security.web.server.csrf.CsrfToken createCsrfToken();
    Code:
       0: new           #29                 // class org/springframework/security/web/server/csrf/DefaultCsrfToken
       3: dup
       4: aload_0
       5: getfield      #6                  // Field headerName:Ljava/lang/String;
       8: aload_0
       9: getfield      #4                  // Field parameterName:Ljava/lang/String;
      12: aload_0
      13: invokespecial #30                 // Method createNewToken:()Ljava/lang/String;
      16: invokespecial #31                 // Method org/springframework/security/web/server/csrf/DefaultCsrfToken."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      19: areturn

  private java.lang.String createNewToken();
    Code:
       0: invokestatic  #32                 // Method java/util/UUID.randomUUID:()Ljava/util/UUID;
       3: invokevirtual #33                 // Method java/util/UUID.toString:()Ljava/lang/String;
       6: areturn

  private org.springframework.security.web.server.csrf.CsrfToken lambda$loadToken$4(org.springframework.web.server.WebSession);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #8                  // Field sessionAttributeName:Ljava/lang/String;
       5: invokeinterface #34,  2           // InterfaceMethod org/springframework/web/server/WebSession.getAttribute:(Ljava/lang/String;)Ljava/lang/Object;
      10: checkcast     #35                 // class org/springframework/security/web/server/csrf/CsrfToken
      13: areturn

  private boolean lambda$loadToken$3(org.springframework.web.server.WebSession);
    Code:
       0: aload_1
       1: invokeinterface #36,  1           // InterfaceMethod org/springframework/web/server/WebSession.getAttributes:()Ljava/util/Map;
       6: aload_0
       7: getfield      #8                  // Field sessionAttributeName:Ljava/lang/String;
      10: invokeinterface #37,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      15: ireturn

  private static reactor.core.publisher.Mono lambda$saveToken$2(org.springframework.web.server.WebSession);
    Code:
       0: aload_0
       1: invokeinterface #38,  1           // InterfaceMethod org/springframework/web/server/WebSession.changeSessionId:()Lreactor/core/publisher/Mono;
       6: areturn

  private void lambda$saveToken$1(org.springframework.security.web.server.csrf.CsrfToken, org.springframework.web.server.WebSession);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #36,  1           // InterfaceMethod org/springframework/web/server/WebSession.getAttributes:()Ljava/util/Map;
       7: aload_1
       8: invokespecial #39                 // Method putToken:(Ljava/util/Map;Lorg/springframework/security/web/server/csrf/CsrfToken;)V
      11: return

  private org.springframework.security.web.server.csrf.CsrfToken lambda$generateToken$0() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #40                 // Method createCsrfToken:()Lorg/springframework/security/web/server/csrf/CsrfToken;
       4: areturn

  static {};
    Code:
       0: ldc           #2                  // class org/springframework/security/web/server/csrf/WebSessionServerCsrfTokenRepository
       2: invokevirtual #41                 // Method java/lang/Class.getName:()Ljava/lang/String;
       5: ldc           #42                 // String .CSRF_TOKEN
       7: invokevirtual #43                 // Method java/lang/String.concat:(Ljava/lang/String;)Ljava/lang/String;
      10: putstatic     #7                  // Field DEFAULT_CSRF_TOKEN_ATTR_NAME:Ljava/lang/String;
      13: return
}
