Compiled from "WebFilterChainProxy.java"
public class org.springframework.security.web.server.WebFilterChainProxy implements org.springframework.web.server.WebFilter {
  private final java.util.List<org.springframework.security.web.server.SecurityWebFilterChain> filters;

  public org.springframework.security.web.server.WebFilterChainProxy(java.util.List<org.springframework.security.web.server.SecurityWebFilterChain>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field filters:Ljava/util/List;
       9: return

  public org.springframework.security.web.server.WebFilterChainProxy(org.springframework.security.web.server.SecurityWebFilterChain...);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #3                  // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       9: putfield      #2                  // Field filters:Ljava/util/List;
      12: return

  public reactor.core.publisher.Mono<java.lang.Void> filter(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebFilterChain);
    Code:
       0: aload_0
       1: getfield      #2                  // Field filters:Ljava/util/List;
       4: invokestatic  #4                  // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
       7: aload_1
       8: invokedynamic #5,  0              // InvokeDynamic #0:apply:(Lorg/springframework/web/server/ServerWebExchange;)Ljava/util/function/Function;
      13: invokevirtual #6                  // Method reactor/core/publisher/Flux.filterWhen:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      16: invokevirtual #7                  // Method reactor/core/publisher/Flux.next:()Lreactor/core/publisher/Mono;
      19: aload_2
      20: aload_1
      21: invokeinterface #8,  2            // InterfaceMethod org/springframework/web/server/WebFilterChain.filter:(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
      26: invokestatic  #9                  // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      29: invokevirtual #10                 // Method reactor/core/publisher/Mono.then:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      32: invokevirtual #11                 // Method reactor/core/publisher/Mono.switchIfEmpty:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      35: invokedynamic #12,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      40: invokevirtual #13                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      43: aload_2
      44: invokedynamic #14,  0             // InvokeDynamic #2:apply:(Lorg/springframework/web/server/WebFilterChain;)Ljava/util/function/Function;
      49: invokevirtual #15                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      52: invokedynamic #16,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      57: invokevirtual #15                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      60: aload_1
      61: invokedynamic #17,  0             // InvokeDynamic #4:apply:(Lorg/springframework/web/server/ServerWebExchange;)Ljava/util/function/Function;
      66: invokevirtual #13                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      69: areturn

  private static reactor.core.publisher.Mono lambda$filter$5(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.handler.DefaultWebFilterChain);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #18                 // Method org/springframework/web/server/handler/DefaultWebFilterChain.filter:(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
       5: areturn

  private static org.springframework.web.server.handler.DefaultWebFilterChain lambda$filter$4(org.springframework.web.server.handler.FilteringWebHandler);
    Code:
       0: new           #19                 // class org/springframework/web/server/handler/DefaultWebFilterChain
       3: dup
       4: aload_0
       5: iconst_0
       6: anewarray     #20                 // class org/springframework/web/server/WebFilter
       9: invokespecial #21                 // Method org/springframework/web/server/handler/DefaultWebFilterChain."<init>":(Lorg/springframework/web/server/WebHandler;[Lorg/springframework/web/server/WebFilter;)V
      12: areturn

  private static org.springframework.web.server.handler.FilteringWebHandler lambda$filter$3(org.springframework.web.server.WebFilterChain, java.util.List);
    Code:
       0: new           #22                 // class org/springframework/web/server/handler/FilteringWebHandler
       3: dup
       4: aload_0
       5: invokedynamic #23,  0             // InvokeDynamic #5:handle:(Lorg/springframework/web/server/WebFilterChain;)Lorg/springframework/web/server/WebHandler;
      10: aload_1
      11: invokespecial #24                 // Method org/springframework/web/server/handler/FilteringWebHandler."<init>":(Lorg/springframework/web/server/WebHandler;Ljava/util/List;)V
      14: areturn

  private static reactor.core.publisher.Mono lambda$null$2(org.springframework.web.server.WebFilterChain, org.springframework.web.server.ServerWebExchange);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #8,  2            // InterfaceMethod org/springframework/web/server/WebFilterChain.filter:(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
       7: areturn

  private static reactor.core.publisher.Mono lambda$filter$1(org.springframework.security.web.server.SecurityWebFilterChain);
    Code:
       0: aload_0
       1: invokeinterface #25,  1           // InterfaceMethod org/springframework/security/web/server/SecurityWebFilterChain.getWebFilters:()Lreactor/core/publisher/Flux;
       6: invokevirtual #26                 // Method reactor/core/publisher/Flux.collectList:()Lreactor/core/publisher/Mono;
       9: areturn

  private static org.reactivestreams.Publisher lambda$filter$0(org.springframework.web.server.ServerWebExchange, org.springframework.security.web.server.SecurityWebFilterChain);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #27,  2           // InterfaceMethod org/springframework/security/web/server/SecurityWebFilterChain.matches:(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
       7: areturn
}
