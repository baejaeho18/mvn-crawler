Compiled from "WebSessionServerSecurityContextRepository.java"
public class org.springframework.security.web.server.context.WebSessionServerSecurityContextRepository implements org.springframework.security.web.server.context.ServerSecurityContextRepository {
  public static final java.lang.String DEFAULT_SPRING_SECURITY_CONTEXT_ATTR_NAME;

  private java.lang.String springSecurityContextAttrName;

  public org.springframework.security.web.server.context.WebSessionServerSecurityContextRepository();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #3                  // String SPRING_SECURITY_CONTEXT
       7: putfield      #4                  // Field springSecurityContextAttrName:Ljava/lang/String;
      10: return

  public void setSpringSecurityContextAttrName(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #5                  // String springSecurityContextAttrName cannot be null or empty
       3: invokestatic  #6                  // Method org/springframework/util/Assert.hasText:(Ljava/lang/String;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #4                  // Field springSecurityContextAttrName:Ljava/lang/String;
      11: return

  public reactor.core.publisher.Mono<java.lang.Void> save(org.springframework.web.server.ServerWebExchange, org.springframework.security.core.context.SecurityContext);
    Code:
       0: aload_1
       1: invokeinterface #7,  1            // InterfaceMethod org/springframework/web/server/ServerWebExchange.getSession:()Lreactor/core/publisher/Mono;
       6: aload_0
       7: aload_2
       8: invokedynamic #8,  0              // InvokeDynamic #0:accept:(Lorg/springframework/security/web/server/context/WebSessionServerSecurityContextRepository;Lorg/springframework/security/core/context/SecurityContext;)Ljava/util/function/Consumer;
      13: invokevirtual #9                  // Method reactor/core/publisher/Mono.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      16: invokedynamic #10,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      21: invokevirtual #11                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      24: areturn

  public reactor.core.publisher.Mono<org.springframework.security.core.context.SecurityContext> load(org.springframework.web.server.ServerWebExchange);
    Code:
       0: aload_1
       1: invokeinterface #7,  1            // InterfaceMethod org/springframework/web/server/ServerWebExchange.getSession:()Lreactor/core/publisher/Mono;
       6: invokedynamic #12,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      11: invokevirtual #13                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      14: aload_0
      15: invokedynamic #14,  0             // InvokeDynamic #3:apply:(Lorg/springframework/security/web/server/context/WebSessionServerSecurityContextRepository;)Ljava/util/function/Function;
      20: invokevirtual #11                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      23: areturn

  private reactor.core.publisher.Mono lambda$load$2(java.util.Map);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #4                  // Field springSecurityContextAttrName:Ljava/lang/String;
       5: invokeinterface #15,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #16                 // class org/springframework/security/core/context/SecurityContext
      13: astore_2
      14: aload_2
      15: invokestatic  #17                 // Method reactor/core/publisher/Mono.justOrEmpty:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      18: areturn

  private static reactor.core.publisher.Mono lambda$save$1(org.springframework.web.server.WebSession);
    Code:
       0: aload_0
       1: invokeinterface #18,  1           // InterfaceMethod org/springframework/web/server/WebSession.changeSessionId:()Lreactor/core/publisher/Mono;
       6: areturn

  private void lambda$save$0(org.springframework.security.core.context.SecurityContext, org.springframework.web.server.WebSession);
    Code:
       0: aload_1
       1: ifnonnull     23
       4: aload_2
       5: invokeinterface #19,  1           // InterfaceMethod org/springframework/web/server/WebSession.getAttributes:()Ljava/util/Map;
      10: aload_0
      11: getfield      #4                  // Field springSecurityContextAttrName:Ljava/lang/String;
      14: invokeinterface #20,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      19: pop
      20: goto          40
      23: aload_2
      24: invokeinterface #19,  1           // InterfaceMethod org/springframework/web/server/WebSession.getAttributes:()Ljava/util/Map;
      29: aload_0
      30: getfield      #4                  // Field springSecurityContextAttrName:Ljava/lang/String;
      33: aload_1
      34: invokeinterface #21,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      39: pop
      40: return
}
