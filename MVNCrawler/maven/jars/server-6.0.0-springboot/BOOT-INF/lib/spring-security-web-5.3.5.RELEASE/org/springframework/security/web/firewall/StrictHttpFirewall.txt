Compiled from "StrictHttpFirewall.java"
public class org.springframework.security.web.firewall.StrictHttpFirewall implements org.springframework.security.web.firewall.HttpFirewall {
  private static final java.util.Set<java.lang.String> ALLOW_ANY_HTTP_METHOD;

  private static final java.lang.String ENCODED_PERCENT;

  private static final java.lang.String PERCENT;

  private static final java.util.List<java.lang.String> FORBIDDEN_ENCODED_PERIOD;

  private static final java.util.List<java.lang.String> FORBIDDEN_SEMICOLON;

  private static final java.util.List<java.lang.String> FORBIDDEN_FORWARDSLASH;

  private static final java.util.List<java.lang.String> FORBIDDEN_DOUBLE_FORWARDSLASH;

  private static final java.util.List<java.lang.String> FORBIDDEN_BACKSLASH;

  private java.util.Set<java.lang.String> encodedUrlBlacklist;

  private java.util.Set<java.lang.String> decodedUrlBlacklist;

  private java.util.Set<java.lang.String> allowedHttpMethods;

  private java.util.function.Predicate<java.lang.String> allowedHostnames;

  public org.springframework.security.web.firewall.StrictHttpFirewall();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashSet
       8: dup
       9: invokespecial #3                  // Method java/util/HashSet."<init>":()V
      12: putfield      #4                  // Field encodedUrlBlacklist:Ljava/util/Set;
      15: aload_0
      16: new           #2                  // class java/util/HashSet
      19: dup
      20: invokespecial #3                  // Method java/util/HashSet."<init>":()V
      23: putfield      #5                  // Field decodedUrlBlacklist:Ljava/util/Set;
      26: aload_0
      27: invokestatic  #6                  // Method createDefaultAllowedHttpMethods:()Ljava/util/Set;
      30: putfield      #7                  // Field allowedHttpMethods:Ljava/util/Set;
      33: aload_0
      34: invokedynamic #8,  0              // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      39: putfield      #9                  // Field allowedHostnames:Ljava/util/function/Predicate;
      42: aload_0
      43: getstatic     #10                 // Field FORBIDDEN_SEMICOLON:Ljava/util/List;
      46: invokespecial #11                 // Method urlBlacklistsAddAll:(Ljava/util/Collection;)V
      49: aload_0
      50: getstatic     #12                 // Field FORBIDDEN_FORWARDSLASH:Ljava/util/List;
      53: invokespecial #11                 // Method urlBlacklistsAddAll:(Ljava/util/Collection;)V
      56: aload_0
      57: getstatic     #13                 // Field FORBIDDEN_DOUBLE_FORWARDSLASH:Ljava/util/List;
      60: invokespecial #11                 // Method urlBlacklistsAddAll:(Ljava/util/Collection;)V
      63: aload_0
      64: getstatic     #14                 // Field FORBIDDEN_BACKSLASH:Ljava/util/List;
      67: invokespecial #11                 // Method urlBlacklistsAddAll:(Ljava/util/Collection;)V
      70: aload_0
      71: getfield      #4                  // Field encodedUrlBlacklist:Ljava/util/Set;
      74: ldc           #16                 // String %25
      76: invokeinterface #17,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      81: pop
      82: aload_0
      83: getfield      #4                  // Field encodedUrlBlacklist:Ljava/util/Set;
      86: getstatic     #18                 // Field FORBIDDEN_ENCODED_PERIOD:Ljava/util/List;
      89: invokeinterface #19,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      94: pop
      95: aload_0
      96: getfield      #5                  // Field decodedUrlBlacklist:Ljava/util/Set;
      99: ldc           #20                 // String %
     101: invokeinterface #17,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     106: pop
     107: return

  public void setUnsafeAllowAnyHttpMethod(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: ifeq          11
       5: getstatic     #21                 // Field ALLOW_ANY_HTTP_METHOD:Ljava/util/Set;
       8: goto          14
      11: invokestatic  #6                  // Method createDefaultAllowedHttpMethods:()Ljava/util/Set;
      14: putfield      #7                  // Field allowedHttpMethods:Ljava/util/Set;
      17: return

  public void setAllowedHttpMethods(java.util.Collection<java.lang.String>);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #22                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #23                 // String allowedHttpMethods cannot be null
      10: invokespecial #24                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_1
      15: getstatic     #21                 // Field ALLOW_ANY_HTTP_METHOD:Ljava/util/Set;
      18: if_acmpne     31
      21: aload_0
      22: getstatic     #21                 // Field ALLOW_ANY_HTTP_METHOD:Ljava/util/Set;
      25: putfield      #7                  // Field allowedHttpMethods:Ljava/util/Set;
      28: goto          43
      31: aload_0
      32: new           #2                  // class java/util/HashSet
      35: dup
      36: aload_1
      37: invokespecial #25                 // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      40: putfield      #7                  // Field allowedHttpMethods:Ljava/util/Set;
      43: return

  public void setAllowSemicolon(boolean);
    Code:
       0: iload_1
       1: ifeq          14
       4: aload_0
       5: getstatic     #10                 // Field FORBIDDEN_SEMICOLON:Ljava/util/List;
       8: invokespecial #26                 // Method urlBlacklistsRemoveAll:(Ljava/util/Collection;)V
      11: goto          21
      14: aload_0
      15: getstatic     #10                 // Field FORBIDDEN_SEMICOLON:Ljava/util/List;
      18: invokespecial #11                 // Method urlBlacklistsAddAll:(Ljava/util/Collection;)V
      21: return

  public void setAllowUrlEncodedSlash(boolean);
    Code:
       0: iload_1
       1: ifeq          14
       4: aload_0
       5: getstatic     #12                 // Field FORBIDDEN_FORWARDSLASH:Ljava/util/List;
       8: invokespecial #26                 // Method urlBlacklistsRemoveAll:(Ljava/util/Collection;)V
      11: goto          21
      14: aload_0
      15: getstatic     #12                 // Field FORBIDDEN_FORWARDSLASH:Ljava/util/List;
      18: invokespecial #11                 // Method urlBlacklistsAddAll:(Ljava/util/Collection;)V
      21: return

  public void setAllowUrlEncodedDoubleSlash(boolean);
    Code:
       0: iload_1
       1: ifeq          14
       4: aload_0
       5: getstatic     #13                 // Field FORBIDDEN_DOUBLE_FORWARDSLASH:Ljava/util/List;
       8: invokespecial #26                 // Method urlBlacklistsRemoveAll:(Ljava/util/Collection;)V
      11: goto          21
      14: aload_0
      15: getstatic     #13                 // Field FORBIDDEN_DOUBLE_FORWARDSLASH:Ljava/util/List;
      18: invokespecial #11                 // Method urlBlacklistsAddAll:(Ljava/util/Collection;)V
      21: return

  public void setAllowUrlEncodedPeriod(boolean);
    Code:
       0: iload_1
       1: ifeq          20
       4: aload_0
       5: getfield      #4                  // Field encodedUrlBlacklist:Ljava/util/Set;
       8: getstatic     #18                 // Field FORBIDDEN_ENCODED_PERIOD:Ljava/util/List;
      11: invokeinterface #27,  2           // InterfaceMethod java/util/Set.removeAll:(Ljava/util/Collection;)Z
      16: pop
      17: goto          33
      20: aload_0
      21: getfield      #4                  // Field encodedUrlBlacklist:Ljava/util/Set;
      24: getstatic     #18                 // Field FORBIDDEN_ENCODED_PERIOD:Ljava/util/List;
      27: invokeinterface #19,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      32: pop
      33: return

  public void setAllowBackSlash(boolean);
    Code:
       0: iload_1
       1: ifeq          14
       4: aload_0
       5: getstatic     #14                 // Field FORBIDDEN_BACKSLASH:Ljava/util/List;
       8: invokespecial #26                 // Method urlBlacklistsRemoveAll:(Ljava/util/Collection;)V
      11: goto          21
      14: aload_0
      15: getstatic     #14                 // Field FORBIDDEN_BACKSLASH:Ljava/util/List;
      18: invokespecial #11                 // Method urlBlacklistsAddAll:(Ljava/util/Collection;)V
      21: return

  public void setAllowUrlEncodedPercent(boolean);
    Code:
       0: iload_1
       1: ifeq          31
       4: aload_0
       5: getfield      #4                  // Field encodedUrlBlacklist:Ljava/util/Set;
       8: ldc           #16                 // String %25
      10: invokeinterface #28,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      15: pop
      16: aload_0
      17: getfield      #5                  // Field decodedUrlBlacklist:Ljava/util/Set;
      20: ldc           #20                 // String %
      22: invokeinterface #28,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      27: pop
      28: goto          55
      31: aload_0
      32: getfield      #4                  // Field encodedUrlBlacklist:Ljava/util/Set;
      35: ldc           #16                 // String %25
      37: invokeinterface #17,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      42: pop
      43: aload_0
      44: getfield      #5                  // Field decodedUrlBlacklist:Ljava/util/Set;
      47: ldc           #20                 // String %
      49: invokeinterface #17,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      54: pop
      55: return

  public void setAllowedHostnames(java.util.function.Predicate<java.lang.String>);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #22                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #29                 // String allowedHostnames cannot be null
      10: invokespecial #24                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: aload_1
      16: putfield      #9                  // Field allowedHostnames:Ljava/util/function/Predicate;
      19: return

  private void urlBlacklistsAddAll(java.util.Collection<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field encodedUrlBlacklist:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #19,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      10: pop
      11: aload_0
      12: getfield      #5                  // Field decodedUrlBlacklist:Ljava/util/Set;
      15: aload_1
      16: invokeinterface #19,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      21: pop
      22: return

  private void urlBlacklistsRemoveAll(java.util.Collection<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field encodedUrlBlacklist:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #27,  2           // InterfaceMethod java/util/Set.removeAll:(Ljava/util/Collection;)Z
      10: pop
      11: aload_0
      12: getfield      #5                  // Field decodedUrlBlacklist:Ljava/util/Set;
      15: aload_1
      16: invokeinterface #27,  2           // InterfaceMethod java/util/Set.removeAll:(Ljava/util/Collection;)Z
      21: pop
      22: return

  public org.springframework.security.web.firewall.FirewalledRequest getFirewalledRequest(javax.servlet.http.HttpServletRequest) throws org.springframework.security.web.firewall.RequestRejectedException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #30                 // Method rejectForbiddenHttpMethod:(Ljavax/servlet/http/HttpServletRequest;)V
       5: aload_0
       6: aload_1
       7: invokespecial #31                 // Method rejectedBlacklistedUrls:(Ljavax/servlet/http/HttpServletRequest;)V
      10: aload_0
      11: aload_1
      12: invokespecial #32                 // Method rejectedUntrustedHosts:(Ljavax/servlet/http/HttpServletRequest;)V
      15: aload_1
      16: invokestatic  #33                 // Method isNormalized:(Ljavax/servlet/http/HttpServletRequest;)Z
      19: ifne          32
      22: new           #34                 // class org/springframework/security/web/firewall/RequestRejectedException
      25: dup
      26: ldc           #35                 // String The request was rejected because the URL was not normalized.
      28: invokespecial #36                 // Method org/springframework/security/web/firewall/RequestRejectedException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_1
      33: invokeinterface #37,  1           // InterfaceMethod javax/servlet/http/HttpServletRequest.getRequestURI:()Ljava/lang/String;
      38: astore_2
      39: aload_2
      40: invokestatic  #38                 // Method containsOnlyPrintableAsciiCharacters:(Ljava/lang/String;)Z
      43: ifne          56
      46: new           #34                 // class org/springframework/security/web/firewall/RequestRejectedException
      49: dup
      50: ldc           #39                 // String The requestURI was rejected because it can only contain printable ASCII characters.
      52: invokespecial #36                 // Method org/springframework/security/web/firewall/RequestRejectedException."<init>":(Ljava/lang/String;)V
      55: athrow
      56: new           #40                 // class org/springframework/security/web/firewall/StrictHttpFirewall$1
      59: dup
      60: aload_0
      61: aload_1
      62: invokespecial #41                 // Method org/springframework/security/web/firewall/StrictHttpFirewall$1."<init>":(Lorg/springframework/security/web/firewall/StrictHttpFirewall;Ljavax/servlet/http/HttpServletRequest;)V
      65: areturn

  private void rejectForbiddenHttpMethod(javax.servlet.http.HttpServletRequest);
    Code:
       0: aload_0
       1: getfield      #7                  // Field allowedHttpMethods:Ljava/util/Set;
       4: getstatic     #21                 // Field ALLOW_ANY_HTTP_METHOD:Ljava/util/Set;
       7: if_acmpne     11
      10: return
      11: aload_0
      12: getfield      #7                  // Field allowedHttpMethods:Ljava/util/Set;
      15: aload_1
      16: invokeinterface #42,  1           // InterfaceMethod javax/servlet/http/HttpServletRequest.getMethod:()Ljava/lang/String;
      21: invokeinterface #43,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      26: ifne          73
      29: new           #34                 // class org/springframework/security/web/firewall/RequestRejectedException
      32: dup
      33: new           #44                 // class java/lang/StringBuilder
      36: dup
      37: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      40: ldc           #46                 // String The request was rejected because the HTTP method \"
      42: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: aload_1
      46: invokeinterface #42,  1           // InterfaceMethod javax/servlet/http/HttpServletRequest.getMethod:()Ljava/lang/String;
      51: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: ldc           #48                 // String \" was not included within the whitelist
      56: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: aload_0
      60: getfield      #7                  // Field allowedHttpMethods:Ljava/util/Set;
      63: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      66: invokevirtual #50                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      69: invokespecial #36                 // Method org/springframework/security/web/firewall/RequestRejectedException."<init>":(Ljava/lang/String;)V
      72: athrow
      73: return

  private void rejectedBlacklistedUrls(javax.servlet.http.HttpServletRequest);
    Code:
       0: aload_0
       1: getfield      #4                  // Field encodedUrlBlacklist:Ljava/util/Set;
       4: invokeinterface #51,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          72
      19: aload_2
      20: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #54                 // class java/lang/String
      28: astore_3
      29: aload_1
      30: aload_3
      31: invokestatic  #55                 // Method encodedUrlContains:(Ljavax/servlet/http/HttpServletRequest;Ljava/lang/String;)Z
      34: ifeq          69
      37: new           #34                 // class org/springframework/security/web/firewall/RequestRejectedException
      40: dup
      41: new           #44                 // class java/lang/StringBuilder
      44: dup
      45: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      48: ldc           #56                 // String The request was rejected because the URL contained a potentially malicious String \"
      50: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: aload_3
      54: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: ldc           #57                 // String \"
      59: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: invokevirtual #50                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      65: invokespecial #36                 // Method org/springframework/security/web/firewall/RequestRejectedException."<init>":(Ljava/lang/String;)V
      68: athrow
      69: goto          10
      72: aload_0
      73: getfield      #5                  // Field decodedUrlBlacklist:Ljava/util/Set;
      76: invokeinterface #51,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      81: astore_2
      82: aload_2
      83: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      88: ifeq          144
      91: aload_2
      92: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      97: checkcast     #54                 // class java/lang/String
     100: astore_3
     101: aload_1
     102: aload_3
     103: invokestatic  #58                 // Method decodedUrlContains:(Ljavax/servlet/http/HttpServletRequest;Ljava/lang/String;)Z
     106: ifeq          141
     109: new           #34                 // class org/springframework/security/web/firewall/RequestRejectedException
     112: dup
     113: new           #44                 // class java/lang/StringBuilder
     116: dup
     117: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
     120: ldc           #56                 // String The request was rejected because the URL contained a potentially malicious String \"
     122: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     125: aload_3
     126: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     129: ldc           #57                 // String \"
     131: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     134: invokevirtual #50                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     137: invokespecial #36                 // Method org/springframework/security/web/firewall/RequestRejectedException."<init>":(Ljava/lang/String;)V
     140: athrow
     141: goto          82
     144: return

  private void rejectedUntrustedHosts(javax.servlet.http.HttpServletRequest);
    Code:
       0: aload_1
       1: invokeinterface #59,  1           // InterfaceMethod javax/servlet/http/HttpServletRequest.getServerName:()Ljava/lang/String;
       6: astore_2
       7: aload_2
       8: ifnull        56
      11: aload_0
      12: getfield      #9                  // Field allowedHostnames:Ljava/util/function/Predicate;
      15: aload_2
      16: invokeinterface #60,  2           // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
      21: ifne          56
      24: new           #34                 // class org/springframework/security/web/firewall/RequestRejectedException
      27: dup
      28: new           #44                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #61                 // String The request was rejected because the domain
      37: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: aload_2
      41: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: ldc           #62                 // String  is untrusted.
      46: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: invokevirtual #50                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: invokespecial #36                 // Method org/springframework/security/web/firewall/RequestRejectedException."<init>":(Ljava/lang/String;)V
      55: athrow
      56: return

  public javax.servlet.http.HttpServletResponse getFirewalledResponse(javax.servlet.http.HttpServletResponse);
    Code:
       0: new           #63                 // class org/springframework/security/web/firewall/FirewalledResponse
       3: dup
       4: aload_1
       5: invokespecial #64                 // Method org/springframework/security/web/firewall/FirewalledResponse."<init>":(Ljavax/servlet/http/HttpServletResponse;)V
       8: areturn

  private static java.util.Set<java.lang.String> createDefaultAllowedHttpMethods();
    Code:
       0: new           #2                  // class java/util/HashSet
       3: dup
       4: invokespecial #3                  // Method java/util/HashSet."<init>":()V
       7: astore_0
       8: aload_0
       9: getstatic     #65                 // Field org/springframework/http/HttpMethod.DELETE:Lorg/springframework/http/HttpMethod;
      12: invokevirtual #66                 // Method org/springframework/http/HttpMethod.name:()Ljava/lang/String;
      15: invokeinterface #17,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      20: pop
      21: aload_0
      22: getstatic     #67                 // Field org/springframework/http/HttpMethod.GET:Lorg/springframework/http/HttpMethod;
      25: invokevirtual #66                 // Method org/springframework/http/HttpMethod.name:()Ljava/lang/String;
      28: invokeinterface #17,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      33: pop
      34: aload_0
      35: getstatic     #68                 // Field org/springframework/http/HttpMethod.HEAD:Lorg/springframework/http/HttpMethod;
      38: invokevirtual #66                 // Method org/springframework/http/HttpMethod.name:()Ljava/lang/String;
      41: invokeinterface #17,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      46: pop
      47: aload_0
      48: getstatic     #69                 // Field org/springframework/http/HttpMethod.OPTIONS:Lorg/springframework/http/HttpMethod;
      51: invokevirtual #66                 // Method org/springframework/http/HttpMethod.name:()Ljava/lang/String;
      54: invokeinterface #17,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      59: pop
      60: aload_0
      61: getstatic     #70                 // Field org/springframework/http/HttpMethod.PATCH:Lorg/springframework/http/HttpMethod;
      64: invokevirtual #66                 // Method org/springframework/http/HttpMethod.name:()Ljava/lang/String;
      67: invokeinterface #17,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      72: pop
      73: aload_0
      74: getstatic     #71                 // Field org/springframework/http/HttpMethod.POST:Lorg/springframework/http/HttpMethod;
      77: invokevirtual #66                 // Method org/springframework/http/HttpMethod.name:()Ljava/lang/String;
      80: invokeinterface #17,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      85: pop
      86: aload_0
      87: getstatic     #72                 // Field org/springframework/http/HttpMethod.PUT:Lorg/springframework/http/HttpMethod;
      90: invokevirtual #66                 // Method org/springframework/http/HttpMethod.name:()Ljava/lang/String;
      93: invokeinterface #17,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      98: pop
      99: aload_0
     100: areturn

  private static boolean isNormalized(javax.servlet.http.HttpServletRequest);
    Code:
       0: aload_0
       1: invokeinterface #37,  1           // InterfaceMethod javax/servlet/http/HttpServletRequest.getRequestURI:()Ljava/lang/String;
       6: invokestatic  #73                 // Method isNormalized:(Ljava/lang/String;)Z
       9: ifne          14
      12: iconst_0
      13: ireturn
      14: aload_0
      15: invokeinterface #74,  1           // InterfaceMethod javax/servlet/http/HttpServletRequest.getContextPath:()Ljava/lang/String;
      20: invokestatic  #73                 // Method isNormalized:(Ljava/lang/String;)Z
      23: ifne          28
      26: iconst_0
      27: ireturn
      28: aload_0
      29: invokeinterface #75,  1           // InterfaceMethod javax/servlet/http/HttpServletRequest.getServletPath:()Ljava/lang/String;
      34: invokestatic  #73                 // Method isNormalized:(Ljava/lang/String;)Z
      37: ifne          42
      40: iconst_0
      41: ireturn
      42: aload_0
      43: invokeinterface #76,  1           // InterfaceMethod javax/servlet/http/HttpServletRequest.getPathInfo:()Ljava/lang/String;
      48: invokestatic  #73                 // Method isNormalized:(Ljava/lang/String;)Z
      51: ifne          56
      54: iconst_0
      55: ireturn
      56: iconst_1
      57: ireturn

  private static boolean encodedUrlContains(javax.servlet.http.HttpServletRequest, java.lang.String);
    Code:
       0: aload_0
       1: invokeinterface #74,  1           // InterfaceMethod javax/servlet/http/HttpServletRequest.getContextPath:()Ljava/lang/String;
       6: aload_1
       7: invokestatic  #77                 // Method valueContains:(Ljava/lang/String;Ljava/lang/String;)Z
      10: ifeq          15
      13: iconst_1
      14: ireturn
      15: aload_0
      16: invokeinterface #37,  1           // InterfaceMethod javax/servlet/http/HttpServletRequest.getRequestURI:()Ljava/lang/String;
      21: aload_1
      22: invokestatic  #77                 // Method valueContains:(Ljava/lang/String;Ljava/lang/String;)Z
      25: ireturn

  private static boolean decodedUrlContains(javax.servlet.http.HttpServletRequest, java.lang.String);
    Code:
       0: aload_0
       1: invokeinterface #75,  1           // InterfaceMethod javax/servlet/http/HttpServletRequest.getServletPath:()Ljava/lang/String;
       6: aload_1
       7: invokestatic  #77                 // Method valueContains:(Ljava/lang/String;Ljava/lang/String;)Z
      10: ifeq          15
      13: iconst_1
      14: ireturn
      15: aload_0
      16: invokeinterface #76,  1           // InterfaceMethod javax/servlet/http/HttpServletRequest.getPathInfo:()Ljava/lang/String;
      21: aload_1
      22: invokestatic  #77                 // Method valueContains:(Ljava/lang/String;Ljava/lang/String;)Z
      25: ifeq          30
      28: iconst_1
      29: ireturn
      30: iconst_0
      31: ireturn

  private static boolean containsOnlyPrintableAsciiCharacters(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #78                 // Method java/lang/String.length:()I
       4: istore_1
       5: iconst_0
       6: istore_2
       7: iload_2
       8: iload_1
       9: if_icmpge     38
      12: aload_0
      13: iload_2
      14: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      17: istore_3
      18: iload_3
      19: bipush        32
      21: if_icmplt     30
      24: iload_3
      25: bipush        126
      27: if_icmple     32
      30: iconst_0
      31: ireturn
      32: iinc          2, 1
      35: goto          7
      38: iconst_1
      39: ireturn

  private static boolean valueContains(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: ifnull        16
       4: aload_0
       5: aload_1
       6: invokevirtual #80                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
       9: ifeq          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  private static boolean isNormalized(java.lang.String);
    Code:
       0: aload_0
       1: ifnonnull     6
       4: iconst_1
       5: ireturn
       6: aload_0
       7: invokevirtual #78                 // Method java/lang/String.length:()I
      10: istore_1
      11: iload_1
      12: ifle          84
      15: aload_0
      16: bipush        47
      18: iload_1
      19: iconst_1
      20: isub
      21: invokevirtual #81                 // Method java/lang/String.lastIndexOf:(II)I
      24: istore_2
      25: iload_1
      26: iload_2
      27: isub
      28: istore_3
      29: iload_3
      30: iconst_2
      31: if_icmpne     48
      34: aload_0
      35: iload_2
      36: iconst_1
      37: iadd
      38: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      41: bipush        46
      43: if_icmpne     48
      46: iconst_0
      47: ireturn
      48: iload_3
      49: iconst_3
      50: if_icmpne     79
      53: aload_0
      54: iload_2
      55: iconst_1
      56: iadd
      57: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      60: bipush        46
      62: if_icmpne     79
      65: aload_0
      66: iload_2
      67: iconst_2
      68: iadd
      69: invokevirtual #79                 // Method java/lang/String.charAt:(I)C
      72: bipush        46
      74: if_icmpne     79
      77: iconst_0
      78: ireturn
      79: iload_2
      80: istore_1
      81: goto          11
      84: iconst_1
      85: ireturn

  public java.util.Set<java.lang.String> getEncodedUrlBlacklist();
    Code:
       0: aload_0
       1: getfield      #4                  // Field encodedUrlBlacklist:Ljava/util/Set;
       4: areturn

  public java.util.Set<java.lang.String> getDecodedUrlBlacklist();
    Code:
       0: aload_0
       1: getfield      #5                  // Field decodedUrlBlacklist:Ljava/util/Set;
       4: areturn

  private static boolean lambda$new$0(java.lang.String);
    Code:
       0: iconst_1
       1: ireturn

  static {};
    Code:
       0: invokestatic  #82                 // Method java/util/Collections.emptySet:()Ljava/util/Set;
       3: invokestatic  #83                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
       6: putstatic     #21                 // Field ALLOW_ANY_HTTP_METHOD:Ljava/util/Set;
       9: iconst_2
      10: anewarray     #54                 // class java/lang/String
      13: dup
      14: iconst_0
      15: ldc           #84                 // String %2e
      17: aastore
      18: dup
      19: iconst_1
      20: ldc           #85                 // String %2E
      22: aastore
      23: invokestatic  #86                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      26: invokestatic  #87                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      29: putstatic     #18                 // Field FORBIDDEN_ENCODED_PERIOD:Ljava/util/List;
      32: iconst_3
      33: anewarray     #54                 // class java/lang/String
      36: dup
      37: iconst_0
      38: ldc           #88                 // String ;
      40: aastore
      41: dup
      42: iconst_1
      43: ldc           #89                 // String %3b
      45: aastore
      46: dup
      47: iconst_2
      48: ldc           #90                 // String %3B
      50: aastore
      51: invokestatic  #86                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      54: invokestatic  #87                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      57: putstatic     #10                 // Field FORBIDDEN_SEMICOLON:Ljava/util/List;
      60: iconst_2
      61: anewarray     #54                 // class java/lang/String
      64: dup
      65: iconst_0
      66: ldc           #91                 // String %2f
      68: aastore
      69: dup
      70: iconst_1
      71: ldc           #92                 // String %2F
      73: aastore
      74: invokestatic  #86                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      77: invokestatic  #87                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      80: putstatic     #12                 // Field FORBIDDEN_FORWARDSLASH:Ljava/util/List;
      83: iconst_5
      84: anewarray     #54                 // class java/lang/String
      87: dup
      88: iconst_0
      89: ldc           #93                 // String //
      91: aastore
      92: dup
      93: iconst_1
      94: ldc           #94                 // String %2f%2f
      96: aastore
      97: dup
      98: iconst_2
      99: ldc           #95                 // String %2f%2F
     101: aastore
     102: dup
     103: iconst_3
     104: ldc           #96                 // String %2F%2f
     106: aastore
     107: dup
     108: iconst_4
     109: ldc           #97                 // String %2F%2F
     111: aastore
     112: invokestatic  #86                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
     115: invokestatic  #87                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
     118: putstatic     #13                 // Field FORBIDDEN_DOUBLE_FORWARDSLASH:Ljava/util/List;
     121: iconst_3
     122: anewarray     #54                 // class java/lang/String
     125: dup
     126: iconst_0
     127: ldc           #98                 // String \\
     129: aastore
     130: dup
     131: iconst_1
     132: ldc           #99                 // String %5c
     134: aastore
     135: dup
     136: iconst_2
     137: ldc           #100                // String %5C
     139: aastore
     140: invokestatic  #86                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
     143: invokestatic  #87                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
     146: putstatic     #14                 // Field FORBIDDEN_BACKSLASH:Ljava/util/List;
     149: return
}
