Compiled from "HttpStatusServerAccessDeniedHandler.java"
public class org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler implements org.springframework.security.web.server.authorization.ServerAccessDeniedHandler {
  private final org.springframework.http.HttpStatus httpStatus;

  public org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler(org.springframework.http.HttpStatus);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String httpStatus cannot be null
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: putfield      #4                  // Field httpStatus:Lorg/springframework/http/HttpStatus;
      15: return

  public reactor.core.publisher.Mono<java.lang.Void> handle(org.springframework.web.server.ServerWebExchange, org.springframework.security.access.AccessDeniedException);
    Code:
       0: aload_1
       1: invokedynamic #5,  0              // InvokeDynamic #0:get:(Lorg/springframework/web/server/ServerWebExchange;)Ljava/util/function/Supplier;
       6: invokestatic  #6                  // Method reactor/core/publisher/Mono.defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
       9: aload_0
      10: aload_2
      11: invokedynamic #7,  0              // InvokeDynamic #1:apply:(Lorg/springframework/security/web/server/authorization/HttpStatusServerAccessDeniedHandler;Lorg/springframework/security/access/AccessDeniedException;)Ljava/util/function/Function;
      16: invokevirtual #8                  // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      19: areturn

  private reactor.core.publisher.Mono lambda$handle$2(org.springframework.security.access.AccessDeniedException, org.springframework.http.server.reactive.ServerHttpResponse);
    Code:
       0: aload_2
       1: aload_0
       2: getfield      #4                  // Field httpStatus:Lorg/springframework/http/HttpStatus;
       5: invokeinterface #9,  2            // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.setStatusCode:(Lorg/springframework/http/HttpStatus;)Z
      10: pop
      11: aload_2
      12: invokeinterface #10,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.getHeaders:()Lorg/springframework/http/HttpHeaders;
      17: getstatic     #11                 // Field org/springframework/http/MediaType.TEXT_PLAIN:Lorg/springframework/http/MediaType;
      20: invokevirtual #12                 // Method org/springframework/http/HttpHeaders.setContentType:(Lorg/springframework/http/MediaType;)V
      23: aload_2
      24: invokeinterface #13,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.bufferFactory:()Lorg/springframework/core/io/buffer/DataBufferFactory;
      29: astore_3
      30: aload_3
      31: aload_1
      32: invokevirtual #14                 // Method org/springframework/security/access/AccessDeniedException.getMessage:()Ljava/lang/String;
      35: invokestatic  #15                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;
      38: invokevirtual #16                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      41: invokeinterface #17,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.wrap:([B)Lorg/springframework/core/io/buffer/DataBuffer;
      46: astore        4
      48: aload_2
      49: aload         4
      51: invokestatic  #18                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      54: invokeinterface #19,  2           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.writeWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      59: aload         4
      61: invokedynamic #20,  0             // InvokeDynamic #2:accept:(Lorg/springframework/core/io/buffer/DataBuffer;)Ljava/util/function/Consumer;
      66: invokevirtual #21                 // Method reactor/core/publisher/Mono.doOnError:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      69: areturn

  private static void lambda$null$1(org.springframework.core.io.buffer.DataBuffer, java.lang.Throwable);
    Code:
       0: aload_0
       1: invokestatic  #22                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
       4: pop
       5: return

  private static reactor.core.publisher.Mono lambda$handle$0(org.springframework.web.server.ServerWebExchange);
    Code:
       0: aload_0
       1: invokeinterface #23,  1           // InterfaceMethod org/springframework/web/server/ServerWebExchange.getResponse:()Lorg/springframework/http/server/reactive/ServerHttpResponse;
       6: invokestatic  #18                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       9: areturn
}
