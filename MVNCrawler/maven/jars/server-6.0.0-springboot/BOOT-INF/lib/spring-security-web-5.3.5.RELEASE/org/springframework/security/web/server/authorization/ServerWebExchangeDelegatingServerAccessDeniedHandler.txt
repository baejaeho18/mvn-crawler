Compiled from "ServerWebExchangeDelegatingServerAccessDeniedHandler.java"
public class org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler implements org.springframework.security.web.server.authorization.ServerAccessDeniedHandler {
  private final java.util.List<org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler$DelegateEntry> handlers;

  private org.springframework.security.web.server.authorization.ServerAccessDeniedHandler defaultHandler;

  public org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler(org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler$DelegateEntry...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1                  // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       5: invokespecial #2                  // Method "<init>":(Ljava/util/List;)V
       8: return

  public org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler(java.util.List<org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler$DelegateEntry>);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokedynamic #4,  0              // InvokeDynamic #0:handle:()Lorg/springframework/security/web/server/authorization/ServerAccessDeniedHandler;
      10: putfield      #5                  // Field defaultHandler:Lorg/springframework/security/web/server/authorization/ServerAccessDeniedHandler;
      13: aload_1
      14: ldc           #6                  // String handlers cannot be null
      16: invokestatic  #7                  // Method org/springframework/util/Assert.notEmpty:(Ljava/util/Collection;Ljava/lang/String;)V
      19: aload_0
      20: aload_1
      21: putfield      #8                  // Field handlers:Ljava/util/List;
      24: return

  public reactor.core.publisher.Mono<java.lang.Void> handle(org.springframework.web.server.ServerWebExchange, org.springframework.security.access.AccessDeniedException);
    Code:
       0: aload_0
       1: getfield      #8                  // Field handlers:Ljava/util/List;
       4: invokestatic  #9                  // Method reactor/core/publisher/Flux.fromIterable:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
       7: aload_0
       8: aload_1
       9: invokedynamic #10,  0             // InvokeDynamic #1:apply:(Lorg/springframework/security/web/server/authorization/ServerWebExchangeDelegatingServerAccessDeniedHandler;Lorg/springframework/web/server/ServerWebExchange;)Ljava/util/function/Function;
      14: invokevirtual #11                 // Method reactor/core/publisher/Flux.filterWhen:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      17: invokevirtual #12                 // Method reactor/core/publisher/Flux.next:()Lreactor/core/publisher/Mono;
      20: invokedynamic #13,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      25: invokevirtual #14                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      28: aload_0
      29: getfield      #5                  // Field defaultHandler:Lorg/springframework/security/web/server/authorization/ServerAccessDeniedHandler;
      32: invokevirtual #15                 // Method reactor/core/publisher/Mono.defaultIfEmpty:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      35: aload_1
      36: aload_2
      37: invokedynamic #16,  0             // InvokeDynamic #3:apply:(Lorg/springframework/web/server/ServerWebExchange;Lorg/springframework/security/access/AccessDeniedException;)Ljava/util/function/Function;
      42: invokevirtual #17                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      45: areturn

  public void setDefaultAccessDeniedHandler(org.springframework.security.web.server.authorization.ServerAccessDeniedHandler);
    Code:
       0: aload_1
       1: ldc           #18                 // String accessDeniedHandler cannot be null
       3: invokestatic  #19                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #5                  // Field defaultHandler:Lorg/springframework/security/web/server/authorization/ServerAccessDeniedHandler;
      11: return

  private reactor.core.publisher.Mono<java.lang.Boolean> isMatch(org.springframework.web.server.ServerWebExchange, org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler$DelegateEntry);
    Code:
       0: aload_2
       1: invokevirtual #20                 // Method org/springframework/security/web/server/authorization/ServerWebExchangeDelegatingServerAccessDeniedHandler$DelegateEntry.getMatcher:()Lorg/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher;
       4: astore_3
       5: aload_3
       6: aload_1
       7: invokeinterface #21,  2           // InterfaceMethod org/springframework/security/web/server/util/matcher/ServerWebExchangeMatcher.matches:(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
      12: invokedynamic #22,  0             // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      17: invokevirtual #14                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      20: areturn

  private static reactor.core.publisher.Mono lambda$handle$2(org.springframework.web.server.ServerWebExchange, org.springframework.security.access.AccessDeniedException, org.springframework.security.web.server.authorization.ServerAccessDeniedHandler);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokeinterface #23,  3           // InterfaceMethod org/springframework/security/web/server/authorization/ServerAccessDeniedHandler.handle:(Lorg/springframework/web/server/ServerWebExchange;Lorg/springframework/security/access/AccessDeniedException;)Lreactor/core/publisher/Mono;
       8: areturn

  private org.reactivestreams.Publisher lambda$handle$1(org.springframework.web.server.ServerWebExchange, org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler$DelegateEntry);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #24                 // Method isMatch:(Lorg/springframework/web/server/ServerWebExchange;Lorg/springframework/security/web/server/authorization/ServerWebExchangeDelegatingServerAccessDeniedHandler$DelegateEntry;)Lreactor/core/publisher/Mono;
       6: areturn

  private static reactor.core.publisher.Mono lambda$new$0(org.springframework.web.server.ServerWebExchange, org.springframework.security.access.AccessDeniedException);
    Code:
       0: aload_0
       1: invokeinterface #25,  1           // InterfaceMethod org/springframework/web/server/ServerWebExchange.getResponse:()Lorg/springframework/http/server/reactive/ServerHttpResponse;
       6: getstatic     #26                 // Field org/springframework/http/HttpStatus.FORBIDDEN:Lorg/springframework/http/HttpStatus;
       9: invokeinterface #27,  2           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.setStatusCode:(Lorg/springframework/http/HttpStatus;)Z
      14: pop
      15: aload_0
      16: invokeinterface #25,  1           // InterfaceMethod org/springframework/web/server/ServerWebExchange.getResponse:()Lorg/springframework/http/server/reactive/ServerHttpResponse;
      21: invokeinterface #28,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.setComplete:()Lreactor/core/publisher/Mono;
      26: areturn
}
