Compiled from "Response.java"
public final class okhttp3.Response implements java.io.Closeable {
  final okhttp3.Request request;

  final okhttp3.Protocol protocol;

  final int code;

  final java.lang.String message;

  final okhttp3.Handshake handshake;

  final okhttp3.Headers headers;

  final okhttp3.ResponseBody body;

  final okhttp3.Response networkResponse;

  final okhttp3.Response cacheResponse;

  final okhttp3.Response priorResponse;

  final long sentRequestAtMillis;

  final long receivedResponseAtMillis;

  final okhttp3.internal.connection.Exchange exchange;

  private volatile okhttp3.CacheControl cacheControl;

  okhttp3.Response(okhttp3.Response$Builder);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #4                  // Field okhttp3/Response$Builder.request:Lokhttp3/Request;
       9: putfield      #5                  // Field request:Lokhttp3/Request;
      12: aload_0
      13: aload_1
      14: getfield      #6                  // Field okhttp3/Response$Builder.protocol:Lokhttp3/Protocol;
      17: putfield      #7                  // Field protocol:Lokhttp3/Protocol;
      20: aload_0
      21: aload_1
      22: getfield      #8                  // Field okhttp3/Response$Builder.code:I
      25: putfield      #9                  // Field code:I
      28: aload_0
      29: aload_1
      30: getfield      #10                 // Field okhttp3/Response$Builder.message:Ljava/lang/String;
      33: putfield      #11                 // Field message:Ljava/lang/String;
      36: aload_0
      37: aload_1
      38: getfield      #12                 // Field okhttp3/Response$Builder.handshake:Lokhttp3/Handshake;
      41: putfield      #13                 // Field handshake:Lokhttp3/Handshake;
      44: aload_0
      45: aload_1
      46: getfield      #14                 // Field okhttp3/Response$Builder.headers:Lokhttp3/Headers$Builder;
      49: invokevirtual #15                 // Method okhttp3/Headers$Builder.build:()Lokhttp3/Headers;
      52: putfield      #16                 // Field headers:Lokhttp3/Headers;
      55: aload_0
      56: aload_1
      57: getfield      #17                 // Field okhttp3/Response$Builder.body:Lokhttp3/ResponseBody;
      60: putfield      #18                 // Field body:Lokhttp3/ResponseBody;
      63: aload_0
      64: aload_1
      65: getfield      #19                 // Field okhttp3/Response$Builder.networkResponse:Lokhttp3/Response;
      68: putfield      #20                 // Field networkResponse:Lokhttp3/Response;
      71: aload_0
      72: aload_1
      73: getfield      #21                 // Field okhttp3/Response$Builder.cacheResponse:Lokhttp3/Response;
      76: putfield      #22                 // Field cacheResponse:Lokhttp3/Response;
      79: aload_0
      80: aload_1
      81: getfield      #23                 // Field okhttp3/Response$Builder.priorResponse:Lokhttp3/Response;
      84: putfield      #24                 // Field priorResponse:Lokhttp3/Response;
      87: aload_0
      88: aload_1
      89: getfield      #25                 // Field okhttp3/Response$Builder.sentRequestAtMillis:J
      92: putfield      #26                 // Field sentRequestAtMillis:J
      95: aload_0
      96: aload_1
      97: getfield      #27                 // Field okhttp3/Response$Builder.receivedResponseAtMillis:J
     100: putfield      #28                 // Field receivedResponseAtMillis:J
     103: aload_0
     104: aload_1
     105: getfield      #29                 // Field okhttp3/Response$Builder.exchange:Lokhttp3/internal/connection/Exchange;
     108: putfield      #30                 // Field exchange:Lokhttp3/internal/connection/Exchange;
     111: return

  public okhttp3.Request request();
    Code:
       0: aload_0
       1: getfield      #5                  // Field request:Lokhttp3/Request;
       4: areturn

  public okhttp3.Protocol protocol();
    Code:
       0: aload_0
       1: getfield      #7                  // Field protocol:Lokhttp3/Protocol;
       4: areturn

  public int code();
    Code:
       0: aload_0
       1: getfield      #9                  // Field code:I
       4: ireturn

  public boolean isSuccessful();
    Code:
       0: aload_0
       1: getfield      #9                  // Field code:I
       4: sipush        200
       7: if_icmplt     24
      10: aload_0
      11: getfield      #9                  // Field code:I
      14: sipush        300
      17: if_icmpge     24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public java.lang.String message();
    Code:
       0: aload_0
       1: getfield      #11                 // Field message:Ljava/lang/String;
       4: areturn

  public okhttp3.Handshake handshake();
    Code:
       0: aload_0
       1: getfield      #13                 // Field handshake:Lokhttp3/Handshake;
       4: areturn

  public java.util.List<java.lang.String> headers(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #16                 // Field headers:Lokhttp3/Headers;
       4: aload_1
       5: invokevirtual #31                 // Method okhttp3/Headers.values:(Ljava/lang/String;)Ljava/util/List;
       8: areturn

  public java.lang.String header(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #32                 // Method header:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       6: areturn

  public java.lang.String header(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #16                 // Field headers:Lokhttp3/Headers;
       4: aload_1
       5: invokevirtual #33                 // Method okhttp3/Headers.get:(Ljava/lang/String;)Ljava/lang/String;
       8: astore_3
       9: aload_3
      10: ifnull        17
      13: aload_3
      14: goto          18
      17: aload_2
      18: areturn

  public okhttp3.Headers headers();
    Code:
       0: aload_0
       1: getfield      #16                 // Field headers:Lokhttp3/Headers;
       4: areturn

  public okhttp3.Headers trailers() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #30                 // Field exchange:Lokhttp3/internal/connection/Exchange;
       4: ifnonnull     17
       7: new           #34                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #35                 // String trailers not available
      13: invokespecial #36                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #30                 // Field exchange:Lokhttp3/internal/connection/Exchange;
      21: invokevirtual #37                 // Method okhttp3/internal/connection/Exchange.trailers:()Lokhttp3/Headers;
      24: areturn

  public okhttp3.ResponseBody peekBody(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #18                 // Field body:Lokhttp3/ResponseBody;
       4: invokevirtual #38                 // Method okhttp3/ResponseBody.source:()Lokio/BufferedSource;
       7: invokeinterface #39,  1           // InterfaceMethod okio/BufferedSource.peek:()Lokio/BufferedSource;
      12: astore_3
      13: new           #40                 // class okio/Buffer
      16: dup
      17: invokespecial #41                 // Method okio/Buffer."<init>":()V
      20: astore        4
      22: aload_3
      23: lload_1
      24: invokeinterface #42,  3           // InterfaceMethod okio/BufferedSource.request:(J)Z
      29: pop
      30: aload         4
      32: aload_3
      33: lload_1
      34: aload_3
      35: invokeinterface #43,  1           // InterfaceMethod okio/BufferedSource.getBuffer:()Lokio/Buffer;
      40: invokevirtual #44                 // Method okio/Buffer.size:()J
      43: invokestatic  #45                 // Method java/lang/Math.min:(JJ)J
      46: invokevirtual #46                 // Method okio/Buffer.write:(Lokio/Source;J)Lokio/BufferedSink;
      49: pop
      50: aload_0
      51: getfield      #18                 // Field body:Lokhttp3/ResponseBody;
      54: invokevirtual #47                 // Method okhttp3/ResponseBody.contentType:()Lokhttp3/MediaType;
      57: aload         4
      59: invokevirtual #44                 // Method okio/Buffer.size:()J
      62: aload         4
      64: invokestatic  #48                 // Method okhttp3/ResponseBody.create:(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody;
      67: areturn

  public okhttp3.ResponseBody body();
    Code:
       0: aload_0
       1: getfield      #18                 // Field body:Lokhttp3/ResponseBody;
       4: areturn

  public okhttp3.Response$Builder newBuilder();
    Code:
       0: new           #49                 // class okhttp3/Response$Builder
       3: dup
       4: aload_0
       5: invokespecial #50                 // Method okhttp3/Response$Builder."<init>":(Lokhttp3/Response;)V
       8: areturn

  public boolean isRedirect();
    Code:
       0: aload_0
       1: getfield      #9                  // Field code:I
       4: tableswitch   { // 300 to 308
                   300: 56
                   301: 56
                   302: 56
                   303: 56
                   304: 58
                   305: 58
                   306: 58
                   307: 56
                   308: 56
               default: 58
          }
      56: iconst_1
      57: ireturn
      58: iconst_0
      59: ireturn

  public okhttp3.Response networkResponse();
    Code:
       0: aload_0
       1: getfield      #20                 // Field networkResponse:Lokhttp3/Response;
       4: areturn

  public okhttp3.Response cacheResponse();
    Code:
       0: aload_0
       1: getfield      #22                 // Field cacheResponse:Lokhttp3/Response;
       4: areturn

  public okhttp3.Response priorResponse();
    Code:
       0: aload_0
       1: getfield      #24                 // Field priorResponse:Lokhttp3/Response;
       4: areturn

  public java.util.List<okhttp3.Challenge> challenges();
    Code:
       0: aload_0
       1: getfield      #9                  // Field code:I
       4: sipush        401
       7: if_icmpne     16
      10: ldc           #51                 // String WWW-Authenticate
      12: astore_1
      13: goto          36
      16: aload_0
      17: getfield      #9                  // Field code:I
      20: sipush        407
      23: if_icmpne     32
      26: ldc           #52                 // String Proxy-Authenticate
      28: astore_1
      29: goto          36
      32: invokestatic  #53                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      35: areturn
      36: aload_0
      37: invokevirtual #54                 // Method headers:()Lokhttp3/Headers;
      40: aload_1
      41: invokestatic  #55                 // Method okhttp3/internal/http/HttpHeaders.parseChallenges:(Lokhttp3/Headers;Ljava/lang/String;)Ljava/util/List;
      44: areturn

  public okhttp3.CacheControl cacheControl();
    Code:
       0: aload_0
       1: getfield      #56                 // Field cacheControl:Lokhttp3/CacheControl;
       4: astore_1
       5: aload_1
       6: ifnull        13
       9: aload_1
      10: goto          25
      13: aload_0
      14: aload_0
      15: getfield      #16                 // Field headers:Lokhttp3/Headers;
      18: invokestatic  #57                 // Method okhttp3/CacheControl.parse:(Lokhttp3/Headers;)Lokhttp3/CacheControl;
      21: dup_x1
      22: putfield      #56                 // Field cacheControl:Lokhttp3/CacheControl;
      25: areturn

  public long sentRequestAtMillis();
    Code:
       0: aload_0
       1: getfield      #26                 // Field sentRequestAtMillis:J
       4: lreturn

  public long receivedResponseAtMillis();
    Code:
       0: aload_0
       1: getfield      #28                 // Field receivedResponseAtMillis:J
       4: lreturn

  public void close();
    Code:
       0: aload_0
       1: getfield      #18                 // Field body:Lokhttp3/ResponseBody;
       4: ifnonnull     17
       7: new           #34                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #58                 // String response is not eligible for a body and must not be closed
      13: invokespecial #36                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #18                 // Field body:Lokhttp3/ResponseBody;
      21: invokevirtual #59                 // Method okhttp3/ResponseBody.close:()V
      24: return

  public java.lang.String toString();
    Code:
       0: new           #60                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #61                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #62                 // String Response{protocol=
       9: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #7                  // Field protocol:Lokhttp3/Protocol;
      16: invokevirtual #64                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #65                 // String , code=
      21: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #9                  // Field code:I
      28: invokevirtual #66                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: ldc           #67                 // String , message=
      33: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #11                 // Field message:Ljava/lang/String;
      40: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: ldc           #68                 // String , url=
      45: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_0
      49: getfield      #5                  // Field request:Lokhttp3/Request;
      52: invokevirtual #69                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
      55: invokevirtual #64                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      58: bipush        125
      60: invokevirtual #70                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      63: invokevirtual #71                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      66: areturn
}
