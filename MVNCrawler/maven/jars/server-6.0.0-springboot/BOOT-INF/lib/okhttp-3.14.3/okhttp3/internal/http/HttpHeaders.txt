Compiled from "HttpHeaders.java"
public final class okhttp3.internal.http.HttpHeaders {
  private static final okio.ByteString QUOTED_STRING_DELIMITERS;

  private static final okio.ByteString TOKEN_DELIMITERS;

  private okhttp3.internal.http.HttpHeaders();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: return

  public static long contentLength(okhttp3.Response);
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method okhttp3/Response.headers:()Lokhttp3/Headers;
       4: invokestatic  #5                  // Method contentLength:(Lokhttp3/Headers;)J
       7: lreturn

  public static long contentLength(okhttp3.Headers);
    Code:
       0: aload_0
       1: ldc           #6                  // String Content-Length
       3: invokevirtual #7                  // Method okhttp3/Headers.get:(Ljava/lang/String;)Ljava/lang/String;
       6: invokestatic  #8                  // Method stringToLong:(Ljava/lang/String;)J
       9: lreturn

  private static long stringToLong(java.lang.String);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: ldc2_w        #9                  // long -1l
       7: lreturn
       8: aload_0
       9: invokestatic  #11                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
      12: lreturn
      13: astore_1
      14: ldc2_w        #9                  // long -1l
      17: lreturn
    Exception table:
       from    to  target type
           8    12    13   Class java/lang/NumberFormatException

  public static boolean varyMatches(okhttp3.Response, okhttp3.Headers, okhttp3.Request);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method varyFields:(Lokhttp3/Response;)Ljava/util/Set;
       4: invokeinterface #14,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
       9: astore_3
      10: aload_3
      11: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          53
      19: aload_3
      20: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #17                 // class java/lang/String
      28: astore        4
      30: aload_1
      31: aload         4
      33: invokevirtual #18                 // Method okhttp3/Headers.values:(Ljava/lang/String;)Ljava/util/List;
      36: aload_2
      37: aload         4
      39: invokevirtual #19                 // Method okhttp3/Request.headers:(Ljava/lang/String;)Ljava/util/List;
      42: invokestatic  #20                 // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      45: ifne          50
      48: iconst_0
      49: ireturn
      50: goto          10
      53: iconst_1
      54: ireturn

  public static boolean hasVaryAll(okhttp3.Response);
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method okhttp3/Response.headers:()Lokhttp3/Headers;
       4: invokestatic  #21                 // Method hasVaryAll:(Lokhttp3/Headers;)Z
       7: ireturn

  public static boolean hasVaryAll(okhttp3.Headers);
    Code:
       0: aload_0
       1: invokestatic  #22                 // Method varyFields:(Lokhttp3/Headers;)Ljava/util/Set;
       4: ldc           #23                 // String *
       6: invokeinterface #24,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      11: ireturn

  private static java.util.Set<java.lang.String> varyFields(okhttp3.Response);
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method okhttp3/Response.headers:()Lokhttp3/Headers;
       4: invokestatic  #22                 // Method varyFields:(Lokhttp3/Headers;)Ljava/util/Set;
       7: areturn

  public static java.util.Set<java.lang.String> varyFields(okhttp3.Headers);
    Code:
       0: invokestatic  #25                 // Method java/util/Collections.emptySet:()Ljava/util/Set;
       3: astore_1
       4: iconst_0
       5: istore_2
       6: aload_0
       7: invokevirtual #26                 // Method okhttp3/Headers.size:()I
      10: istore_3
      11: iload_2
      12: iload_3
      13: if_icmpge     114
      16: ldc           #27                 // String Vary
      18: aload_0
      19: iload_2
      20: invokevirtual #28                 // Method okhttp3/Headers.name:(I)Ljava/lang/String;
      23: invokevirtual #29                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      26: ifne          32
      29: goto          108
      32: aload_0
      33: iload_2
      34: invokevirtual #30                 // Method okhttp3/Headers.value:(I)Ljava/lang/String;
      37: astore        4
      39: aload_1
      40: invokeinterface #31,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
      45: ifeq          59
      48: new           #32                 // class java/util/TreeSet
      51: dup
      52: getstatic     #33                 // Field java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;
      55: invokespecial #34                 // Method java/util/TreeSet."<init>":(Ljava/util/Comparator;)V
      58: astore_1
      59: aload         4
      61: ldc           #35                 // String ,
      63: invokevirtual #36                 // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
      66: astore        5
      68: aload         5
      70: arraylength
      71: istore        6
      73: iconst_0
      74: istore        7
      76: iload         7
      78: iload         6
      80: if_icmpge     108
      83: aload         5
      85: iload         7
      87: aaload
      88: astore        8
      90: aload_1
      91: aload         8
      93: invokevirtual #37                 // Method java/lang/String.trim:()Ljava/lang/String;
      96: invokeinterface #38,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     101: pop
     102: iinc          7, 1
     105: goto          76
     108: iinc          2, 1
     111: goto          11
     114: aload_1
     115: areturn

  public static okhttp3.Headers varyHeaders(okhttp3.Response);
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method okhttp3/Response.networkResponse:()Lokhttp3/Response;
       4: invokevirtual #40                 // Method okhttp3/Response.request:()Lokhttp3/Request;
       7: invokevirtual #41                 // Method okhttp3/Request.headers:()Lokhttp3/Headers;
      10: astore_1
      11: aload_0
      12: invokevirtual #4                  // Method okhttp3/Response.headers:()Lokhttp3/Headers;
      15: astore_2
      16: aload_1
      17: aload_2
      18: invokestatic  #42                 // Method varyHeaders:(Lokhttp3/Headers;Lokhttp3/Headers;)Lokhttp3/Headers;
      21: areturn

  public static okhttp3.Headers varyHeaders(okhttp3.Headers, okhttp3.Headers);
    Code:
       0: aload_1
       1: invokestatic  #22                 // Method varyFields:(Lokhttp3/Headers;)Ljava/util/Set;
       4: astore_2
       5: aload_2
       6: invokeinterface #31,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
      11: ifeq          18
      14: getstatic     #43                 // Field okhttp3/internal/Util.EMPTY_HEADERS:Lokhttp3/Headers;
      17: areturn
      18: new           #44                 // class okhttp3/Headers$Builder
      21: dup
      22: invokespecial #45                 // Method okhttp3/Headers$Builder."<init>":()V
      25: astore_3
      26: iconst_0
      27: istore        4
      29: aload_0
      30: invokevirtual #26                 // Method okhttp3/Headers.size:()I
      33: istore        5
      35: iload         4
      37: iload         5
      39: if_icmpge     80
      42: aload_0
      43: iload         4
      45: invokevirtual #28                 // Method okhttp3/Headers.name:(I)Ljava/lang/String;
      48: astore        6
      50: aload_2
      51: aload         6
      53: invokeinterface #24,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      58: ifeq          74
      61: aload_3
      62: aload         6
      64: aload_0
      65: iload         4
      67: invokevirtual #30                 // Method okhttp3/Headers.value:(I)Ljava/lang/String;
      70: invokevirtual #46                 // Method okhttp3/Headers$Builder.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;
      73: pop
      74: iinc          4, 1
      77: goto          35
      80: aload_3
      81: invokevirtual #47                 // Method okhttp3/Headers$Builder.build:()Lokhttp3/Headers;
      84: areturn

  public static java.util.List<okhttp3.Challenge> parseChallenges(okhttp3.Headers, java.lang.String);
    Code:
       0: new           #48                 // class java/util/ArrayList
       3: dup
       4: invokespecial #49                 // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: aload_0
      12: invokevirtual #26                 // Method okhttp3/Headers.size:()I
      15: if_icmpge     59
      18: aload_1
      19: aload_0
      20: iload_3
      21: invokevirtual #28                 // Method okhttp3/Headers.name:(I)Ljava/lang/String;
      24: invokevirtual #29                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      27: ifeq          53
      30: new           #50                 // class okio/Buffer
      33: dup
      34: invokespecial #51                 // Method okio/Buffer."<init>":()V
      37: aload_0
      38: iload_3
      39: invokevirtual #30                 // Method okhttp3/Headers.value:(I)Ljava/lang/String;
      42: invokevirtual #52                 // Method okio/Buffer.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;
      45: astore        4
      47: aload_2
      48: aload         4
      50: invokestatic  #53                 // Method parseChallengeHeader:(Ljava/util/List;Lokio/Buffer;)V
      53: iinc          3, 1
      56: goto          10
      59: aload_2
      60: areturn

  private static void parseChallengeHeader(java.util.List<okhttp3.Challenge>, okio.Buffer);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_2
       3: ifnonnull     21
       6: aload_1
       7: invokestatic  #54                 // Method skipWhitespaceAndCommas:(Lokio/Buffer;)Z
      10: pop
      11: aload_1
      12: invokestatic  #55                 // Method readToken:(Lokio/Buffer;)Ljava/lang/String;
      15: astore_2
      16: aload_2
      17: ifnonnull     21
      20: return
      21: aload_2
      22: astore_3
      23: aload_1
      24: invokestatic  #54                 // Method skipWhitespaceAndCommas:(Lokio/Buffer;)Z
      27: istore        4
      29: aload_1
      30: invokestatic  #55                 // Method readToken:(Lokio/Buffer;)Ljava/lang/String;
      33: astore_2
      34: aload_2
      35: ifnonnull     65
      38: aload_1
      39: invokevirtual #56                 // Method okio/Buffer.exhausted:()Z
      42: ifne          46
      45: return
      46: aload_0
      47: new           #57                 // class okhttp3/Challenge
      50: dup
      51: aload_3
      52: invokestatic  #58                 // Method java/util/Collections.emptyMap:()Ljava/util/Map;
      55: invokespecial #59                 // Method okhttp3/Challenge."<init>":(Ljava/lang/String;Ljava/util/Map;)V
      58: invokeinterface #60,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      63: pop
      64: return
      65: aload_1
      66: bipush        61
      68: invokestatic  #61                 // Method skipAll:(Lokio/Buffer;B)I
      71: istore        5
      73: aload_1
      74: invokestatic  #54                 // Method skipWhitespaceAndCommas:(Lokio/Buffer;)Z
      77: istore        6
      79: iload         4
      81: ifne          144
      84: iload         6
      86: ifne          96
      89: aload_1
      90: invokevirtual #56                 // Method okio/Buffer.exhausted:()Z
      93: ifeq          144
      96: aload_0
      97: new           #57                 // class okhttp3/Challenge
     100: dup
     101: aload_3
     102: aconst_null
     103: new           #62                 // class java/lang/StringBuilder
     106: dup
     107: invokespecial #63                 // Method java/lang/StringBuilder."<init>":()V
     110: aload_2
     111: invokevirtual #64                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     114: bipush        61
     116: iload         5
     118: invokestatic  #65                 // Method repeat:(CI)Ljava/lang/String;
     121: invokevirtual #64                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     124: invokevirtual #66                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     127: invokestatic  #67                 // Method java/util/Collections.singletonMap:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;
     130: invokespecial #59                 // Method okhttp3/Challenge."<init>":(Ljava/lang/String;Ljava/util/Map;)V
     133: invokeinterface #60,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     138: pop
     139: aconst_null
     140: astore_2
     141: goto          2
     144: new           #68                 // class java/util/LinkedHashMap
     147: dup
     148: invokespecial #69                 // Method java/util/LinkedHashMap."<init>":()V
     151: astore        7
     153: iload         5
     155: aload_1
     156: bipush        61
     158: invokestatic  #61                 // Method skipAll:(Lokio/Buffer;B)I
     161: iadd
     162: istore        5
     164: aload_2
     165: ifnonnull     191
     168: aload_1
     169: invokestatic  #55                 // Method readToken:(Lokio/Buffer;)Ljava/lang/String;
     172: astore_2
     173: aload_1
     174: invokestatic  #54                 // Method skipWhitespaceAndCommas:(Lokio/Buffer;)Z
     177: ifeq          183
     180: goto          291
     183: aload_1
     184: bipush        61
     186: invokestatic  #61                 // Method skipAll:(Lokio/Buffer;B)I
     189: istore        5
     191: iload         5
     193: ifne          199
     196: goto          291
     199: iload         5
     201: iconst_1
     202: if_icmple     206
     205: return
     206: aload_1
     207: invokestatic  #54                 // Method skipWhitespaceAndCommas:(Lokio/Buffer;)Z
     210: ifeq          214
     213: return
     214: aload_1
     215: invokevirtual #56                 // Method okio/Buffer.exhausted:()Z
     218: ifne          238
     221: aload_1
     222: lconst_0
     223: invokevirtual #70                 // Method okio/Buffer.getByte:(J)B
     226: bipush        34
     228: if_icmpne     238
     231: aload_1
     232: invokestatic  #71                 // Method readQuotedString:(Lokio/Buffer;)Ljava/lang/String;
     235: goto          242
     238: aload_1
     239: invokestatic  #55                 // Method readToken:(Lokio/Buffer;)Ljava/lang/String;
     242: astore        8
     244: aload         8
     246: ifnonnull     250
     249: return
     250: aload         7
     252: aload_2
     253: aload         8
     255: invokeinterface #72,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     260: checkcast     #17                 // class java/lang/String
     263: astore        9
     265: aconst_null
     266: astore_2
     267: aload         9
     269: ifnull        273
     272: return
     273: aload_1
     274: invokestatic  #54                 // Method skipWhitespaceAndCommas:(Lokio/Buffer;)Z
     277: ifne          288
     280: aload_1
     281: invokevirtual #56                 // Method okio/Buffer.exhausted:()Z
     284: ifne          288
     287: return
     288: goto          164
     291: aload_0
     292: new           #57                 // class okhttp3/Challenge
     295: dup
     296: aload_3
     297: aload         7
     299: invokespecial #59                 // Method okhttp3/Challenge."<init>":(Ljava/lang/String;Ljava/util/Map;)V
     302: invokeinterface #60,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     307: pop
     308: goto          2

  private static boolean skipWhitespaceAndCommas(okio.Buffer);
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: invokevirtual #56                 // Method okio/Buffer.exhausted:()Z
       6: ifne          51
       9: aload_0
      10: lconst_0
      11: invokevirtual #70                 // Method okio/Buffer.getByte:(J)B
      14: istore_2
      15: iload_2
      16: bipush        44
      18: if_icmpne     31
      21: aload_0
      22: invokevirtual #73                 // Method okio/Buffer.readByte:()B
      25: pop
      26: iconst_1
      27: istore_1
      28: goto          48
      31: iload_2
      32: bipush        32
      34: if_icmpeq     43
      37: iload_2
      38: bipush        9
      40: if_icmpne     51
      43: aload_0
      44: invokevirtual #73                 // Method okio/Buffer.readByte:()B
      47: pop
      48: goto          2
      51: iload_1
      52: ireturn

  private static int skipAll(okio.Buffer, byte);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: invokevirtual #56                 // Method okio/Buffer.exhausted:()Z
       6: ifne          29
       9: aload_0
      10: lconst_0
      11: invokevirtual #70                 // Method okio/Buffer.getByte:(J)B
      14: iload_1
      15: if_icmpne     29
      18: iinc          2, 1
      21: aload_0
      22: invokevirtual #73                 // Method okio/Buffer.readByte:()B
      25: pop
      26: goto          2
      29: iload_2
      30: ireturn

  private static java.lang.String readQuotedString(okio.Buffer);
    Code:
       0: aload_0
       1: invokevirtual #73                 // Method okio/Buffer.readByte:()B
       4: bipush        34
       6: if_icmpeq     17
       9: new           #74                 // class java/lang/IllegalArgumentException
      12: dup
      13: invokespecial #75                 // Method java/lang/IllegalArgumentException."<init>":()V
      16: athrow
      17: new           #50                 // class okio/Buffer
      20: dup
      21: invokespecial #51                 // Method okio/Buffer."<init>":()V
      24: astore_1
      25: aload_0
      26: getstatic     #76                 // Field QUOTED_STRING_DELIMITERS:Lokio/ByteString;
      29: invokevirtual #77                 // Method okio/Buffer.indexOfElement:(Lokio/ByteString;)J
      32: lstore_2
      33: lload_2
      34: ldc2_w        #9                  // long -1l
      37: lcmp
      38: ifne          43
      41: aconst_null
      42: areturn
      43: aload_0
      44: lload_2
      45: invokevirtual #70                 // Method okio/Buffer.getByte:(J)B
      48: bipush        34
      50: if_icmpne     69
      53: aload_1
      54: aload_0
      55: lload_2
      56: invokevirtual #78                 // Method okio/Buffer.write:(Lokio/Buffer;J)V
      59: aload_0
      60: invokevirtual #73                 // Method okio/Buffer.readByte:()B
      63: pop
      64: aload_1
      65: invokevirtual #79                 // Method okio/Buffer.readUtf8:()Ljava/lang/String;
      68: areturn
      69: aload_0
      70: invokevirtual #80                 // Method okio/Buffer.size:()J
      73: lload_2
      74: lconst_1
      75: ladd
      76: lcmp
      77: ifne          82
      80: aconst_null
      81: areturn
      82: aload_1
      83: aload_0
      84: lload_2
      85: invokevirtual #78                 // Method okio/Buffer.write:(Lokio/Buffer;J)V
      88: aload_0
      89: invokevirtual #73                 // Method okio/Buffer.readByte:()B
      92: pop
      93: aload_1
      94: aload_0
      95: lconst_1
      96: invokevirtual #78                 // Method okio/Buffer.write:(Lokio/Buffer;J)V
      99: goto          25

  private static java.lang.String readToken(okio.Buffer);
    Code:
       0: aload_0
       1: getstatic     #81                 // Field TOKEN_DELIMITERS:Lokio/ByteString;
       4: invokevirtual #77                 // Method okio/Buffer.indexOfElement:(Lokio/ByteString;)J
       7: lstore_1
       8: lload_1
       9: ldc2_w        #9                  // long -1l
      12: lcmp
      13: ifne          21
      16: aload_0
      17: invokevirtual #80                 // Method okio/Buffer.size:()J
      20: lstore_1
      21: lload_1
      22: lconst_0
      23: lcmp
      24: ifeq          35
      27: aload_0
      28: lload_1
      29: invokevirtual #82                 // Method okio/Buffer.readUtf8:(J)Ljava/lang/String;
      32: goto          36
      35: aconst_null
      36: areturn
      37: astore_1
      38: new           #84                 // class java/lang/AssertionError
      41: dup
      42: invokespecial #85                 // Method java/lang/AssertionError."<init>":()V
      45: athrow
    Exception table:
       from    to  target type
           0    36    37   Class java/io/EOFException

  private static java.lang.String repeat(char, int);
    Code:
       0: iload_1
       1: newarray       char
       3: astore_2
       4: aload_2
       5: iload_0
       6: invokestatic  #86                 // Method java/util/Arrays.fill:([CC)V
       9: new           #17                 // class java/lang/String
      12: dup
      13: aload_2
      14: invokespecial #87                 // Method java/lang/String."<init>":([C)V
      17: areturn

  public static void receiveHeaders(okhttp3.CookieJar, okhttp3.HttpUrl, okhttp3.Headers);
    Code:
       0: aload_0
       1: getstatic     #88                 // Field okhttp3/CookieJar.NO_COOKIES:Lokhttp3/CookieJar;
       4: if_acmpne     8
       7: return
       8: aload_1
       9: aload_2
      10: invokestatic  #89                 // Method okhttp3/Cookie.parseAll:(Lokhttp3/HttpUrl;Lokhttp3/Headers;)Ljava/util/List;
      13: astore_3
      14: aload_3
      15: invokeinterface #90,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      20: ifeq          24
      23: return
      24: aload_0
      25: aload_1
      26: aload_3
      27: invokeinterface #91,  3           // InterfaceMethod okhttp3/CookieJar.saveFromResponse:(Lokhttp3/HttpUrl;Ljava/util/List;)V
      32: return

  public static boolean hasBody(okhttp3.Response);
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method okhttp3/Response.request:()Lokhttp3/Request;
       4: invokevirtual #92                 // Method okhttp3/Request.method:()Ljava/lang/String;
       7: ldc           #93                 // String HEAD
       9: invokevirtual #94                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      12: ifeq          17
      15: iconst_0
      16: ireturn
      17: aload_0
      18: invokevirtual #95                 // Method okhttp3/Response.code:()I
      21: istore_1
      22: iload_1
      23: bipush        100
      25: if_icmplt     35
      28: iload_1
      29: sipush        200
      32: if_icmplt     51
      35: iload_1
      36: sipush        204
      39: if_icmpeq     51
      42: iload_1
      43: sipush        304
      46: if_icmpeq     51
      49: iconst_1
      50: ireturn
      51: aload_0
      52: invokestatic  #96                 // Method contentLength:(Lokhttp3/Response;)J
      55: ldc2_w        #9                  // long -1l
      58: lcmp
      59: ifne          76
      62: ldc           #97                 // String chunked
      64: aload_0
      65: ldc           #98                 // String Transfer-Encoding
      67: invokevirtual #99                 // Method okhttp3/Response.header:(Ljava/lang/String;)Ljava/lang/String;
      70: invokevirtual #29                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      73: ifeq          78
      76: iconst_1
      77: ireturn
      78: iconst_0
      79: ireturn

  public static int skipUntil(java.lang.String, int, java.lang.String);
    Code:
       0: iload_1
       1: aload_0
       2: invokevirtual #100                // Method java/lang/String.length:()I
       5: if_icmpge     30
       8: aload_2
       9: aload_0
      10: iload_1
      11: invokevirtual #101                // Method java/lang/String.charAt:(I)C
      14: invokevirtual #102                // Method java/lang/String.indexOf:(I)I
      17: iconst_m1
      18: if_icmpeq     24
      21: goto          30
      24: iinc          1, 1
      27: goto          0
      30: iload_1
      31: ireturn

  public static int skipWhitespace(java.lang.String, int);
    Code:
       0: iload_1
       1: aload_0
       2: invokevirtual #100                // Method java/lang/String.length:()I
       5: if_icmpge     35
       8: aload_0
       9: iload_1
      10: invokevirtual #101                // Method java/lang/String.charAt:(I)C
      13: istore_2
      14: iload_2
      15: bipush        32
      17: if_icmpeq     29
      20: iload_2
      21: bipush        9
      23: if_icmpeq     29
      26: goto          35
      29: iinc          1, 1
      32: goto          0
      35: iload_1
      36: ireturn

  public static int parseSeconds(java.lang.String, int);
    Code:
       0: aload_0
       1: invokestatic  #11                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
       4: lstore_2
       5: lload_2
       6: ldc2_w        #104                // long 2147483647l
       9: lcmp
      10: ifle          16
      13: ldc           #106                // int 2147483647
      15: ireturn
      16: lload_2
      17: lconst_0
      18: lcmp
      19: ifge          24
      22: iconst_0
      23: ireturn
      24: lload_2
      25: l2i
      26: ireturn
      27: astore_2
      28: iload_1
      29: ireturn
    Exception table:
       from    to  target type
           0    15    27   Class java/lang/NumberFormatException
          16    23    27   Class java/lang/NumberFormatException
          24    26    27   Class java/lang/NumberFormatException

  static {};
    Code:
       0: ldc           #107                // String \"\\
       2: invokestatic  #108                // Method okio/ByteString.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;
       5: putstatic     #76                 // Field QUOTED_STRING_DELIMITERS:Lokio/ByteString;
       8: ldc           #109                // String \t ,=
      10: invokestatic  #108                // Method okio/ByteString.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;
      13: putstatic     #81                 // Field TOKEN_DELIMITERS:Lokio/ByteString;
      16: return
}
