Compiled from "Dispatcher.java"
public final class okhttp3.Dispatcher {
  private int maxRequests;

  private int maxRequestsPerHost;

  private java.lang.Runnable idleCallback;

  private java.util.concurrent.ExecutorService executorService;

  private final java.util.Deque<okhttp3.RealCall$AsyncCall> readyAsyncCalls;

  private final java.util.Deque<okhttp3.RealCall$AsyncCall> runningAsyncCalls;

  private final java.util.Deque<okhttp3.RealCall> runningSyncCalls;

  static final boolean $assertionsDisabled;

  public okhttp3.Dispatcher(java.util.concurrent.ExecutorService);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        64
       7: putfield      #2                  // Field maxRequests:I
      10: aload_0
      11: iconst_5
      12: putfield      #3                  // Field maxRequestsPerHost:I
      15: aload_0
      16: new           #4                  // class java/util/ArrayDeque
      19: dup
      20: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      23: putfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
      26: aload_0
      27: new           #4                  // class java/util/ArrayDeque
      30: dup
      31: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      34: putfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
      37: aload_0
      38: new           #4                  // class java/util/ArrayDeque
      41: dup
      42: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      45: putfield      #8                  // Field runningSyncCalls:Ljava/util/Deque;
      48: aload_0
      49: aload_1
      50: putfield      #9                  // Field executorService:Ljava/util/concurrent/ExecutorService;
      53: return

  public okhttp3.Dispatcher();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        64
       7: putfield      #2                  // Field maxRequests:I
      10: aload_0
      11: iconst_5
      12: putfield      #3                  // Field maxRequestsPerHost:I
      15: aload_0
      16: new           #4                  // class java/util/ArrayDeque
      19: dup
      20: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      23: putfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
      26: aload_0
      27: new           #4                  // class java/util/ArrayDeque
      30: dup
      31: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      34: putfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
      37: aload_0
      38: new           #4                  // class java/util/ArrayDeque
      41: dup
      42: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      45: putfield      #8                  // Field runningSyncCalls:Ljava/util/Deque;
      48: return

  public synchronized java.util.concurrent.ExecutorService executorService();
    Code:
       0: aload_0
       1: getfield      #9                  // Field executorService:Ljava/util/concurrent/ExecutorService;
       4: ifnonnull     40
       7: aload_0
       8: new           #10                 // class java/util/concurrent/ThreadPoolExecutor
      11: dup
      12: iconst_0
      13: ldc           #12                 // int 2147483647
      15: ldc2_w        #13                 // long 60l
      18: getstatic     #15                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      21: new           #16                 // class java/util/concurrent/SynchronousQueue
      24: dup
      25: invokespecial #17                 // Method java/util/concurrent/SynchronousQueue."<init>":()V
      28: ldc           #18                 // String OkHttp Dispatcher
      30: iconst_0
      31: invokestatic  #19                 // Method okhttp3/internal/Util.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;
      34: invokespecial #20                 // Method java/util/concurrent/ThreadPoolExecutor."<init>":(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V
      37: putfield      #9                  // Field executorService:Ljava/util/concurrent/ExecutorService;
      40: aload_0
      41: getfield      #9                  // Field executorService:Ljava/util/concurrent/ExecutorService;
      44: areturn

  public void setMaxRequests(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmpge     32
       5: new           #21                 // class java/lang/IllegalArgumentException
       8: dup
       9: new           #22                 // class java/lang/StringBuilder
      12: dup
      13: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
      16: ldc           #24                 // String max < 1:
      18: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: iload_1
      22: invokevirtual #26                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      25: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      28: invokespecial #28                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: dup
      34: astore_2
      35: monitorenter
      36: aload_0
      37: iload_1
      38: putfield      #2                  // Field maxRequests:I
      41: aload_2
      42: monitorexit
      43: goto          51
      46: astore_3
      47: aload_2
      48: monitorexit
      49: aload_3
      50: athrow
      51: aload_0
      52: invokespecial #29                 // Method promoteAndExecute:()Z
      55: pop
      56: return
    Exception table:
       from    to  target type
          36    43    46   any
          46    49    46   any

  public synchronized int getMaxRequests();
    Code:
       0: aload_0
       1: getfield      #2                  // Field maxRequests:I
       4: ireturn

  public void setMaxRequestsPerHost(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmpge     32
       5: new           #21                 // class java/lang/IllegalArgumentException
       8: dup
       9: new           #22                 // class java/lang/StringBuilder
      12: dup
      13: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
      16: ldc           #24                 // String max < 1:
      18: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: iload_1
      22: invokevirtual #26                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      25: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      28: invokespecial #28                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: dup
      34: astore_2
      35: monitorenter
      36: aload_0
      37: iload_1
      38: putfield      #3                  // Field maxRequestsPerHost:I
      41: aload_2
      42: monitorexit
      43: goto          51
      46: astore_3
      47: aload_2
      48: monitorexit
      49: aload_3
      50: athrow
      51: aload_0
      52: invokespecial #29                 // Method promoteAndExecute:()Z
      55: pop
      56: return
    Exception table:
       from    to  target type
          36    43    46   any
          46    49    46   any

  public synchronized int getMaxRequestsPerHost();
    Code:
       0: aload_0
       1: getfield      #3                  // Field maxRequestsPerHost:I
       4: ireturn

  public synchronized void setIdleCallback(java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field idleCallback:Ljava/lang/Runnable;
       5: return

  void enqueue(okhttp3.RealCall$AsyncCall);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: getfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
       8: aload_1
       9: invokeinterface #31,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      14: pop
      15: aload_1
      16: invokevirtual #32                 // Method okhttp3/RealCall$AsyncCall.get:()Lokhttp3/RealCall;
      19: getfield      #33                 // Field okhttp3/RealCall.forWebSocket:Z
      22: ifne          43
      25: aload_0
      26: aload_1
      27: invokevirtual #34                 // Method okhttp3/RealCall$AsyncCall.host:()Ljava/lang/String;
      30: invokespecial #35                 // Method findExistingCallWithHost:(Ljava/lang/String;)Lokhttp3/RealCall$AsyncCall;
      33: astore_3
      34: aload_3
      35: ifnull        43
      38: aload_1
      39: aload_3
      40: invokevirtual #36                 // Method okhttp3/RealCall$AsyncCall.reuseCallsPerHostFrom:(Lokhttp3/RealCall$AsyncCall;)V
      43: aload_2
      44: monitorexit
      45: goto          55
      48: astore        4
      50: aload_2
      51: monitorexit
      52: aload         4
      54: athrow
      55: aload_0
      56: invokespecial #29                 // Method promoteAndExecute:()Z
      59: pop
      60: return
    Exception table:
       from    to  target type
           4    45    48   any
          48    52    48   any

  private okhttp3.RealCall$AsyncCall findExistingCallWithHost(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
       4: invokeinterface #37,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          45
      19: aload_2
      20: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #40                 // class okhttp3/RealCall$AsyncCall
      28: astore_3
      29: aload_3
      30: invokevirtual #34                 // Method okhttp3/RealCall$AsyncCall.host:()Ljava/lang/String;
      33: aload_1
      34: invokevirtual #41                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      37: ifeq          42
      40: aload_3
      41: areturn
      42: goto          10
      45: aload_0
      46: getfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
      49: invokeinterface #37,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      54: astore_2
      55: aload_2
      56: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      61: ifeq          90
      64: aload_2
      65: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      70: checkcast     #40                 // class okhttp3/RealCall$AsyncCall
      73: astore_3
      74: aload_3
      75: invokevirtual #34                 // Method okhttp3/RealCall$AsyncCall.host:()Ljava/lang/String;
      78: aload_1
      79: invokevirtual #41                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      82: ifeq          87
      85: aload_3
      86: areturn
      87: goto          55
      90: aconst_null
      91: areturn

  public synchronized void cancelAll();
    Code:
       0: aload_0
       1: getfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
       4: invokeinterface #37,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
       9: astore_1
      10: aload_1
      11: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          39
      19: aload_1
      20: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #40                 // class okhttp3/RealCall$AsyncCall
      28: astore_2
      29: aload_2
      30: invokevirtual #32                 // Method okhttp3/RealCall$AsyncCall.get:()Lokhttp3/RealCall;
      33: invokevirtual #42                 // Method okhttp3/RealCall.cancel:()V
      36: goto          10
      39: aload_0
      40: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
      43: invokeinterface #37,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      48: astore_1
      49: aload_1
      50: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      55: ifeq          78
      58: aload_1
      59: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      64: checkcast     #40                 // class okhttp3/RealCall$AsyncCall
      67: astore_2
      68: aload_2
      69: invokevirtual #32                 // Method okhttp3/RealCall$AsyncCall.get:()Lokhttp3/RealCall;
      72: invokevirtual #42                 // Method okhttp3/RealCall.cancel:()V
      75: goto          49
      78: aload_0
      79: getfield      #8                  // Field runningSyncCalls:Ljava/util/Deque;
      82: invokeinterface #37,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      87: astore_1
      88: aload_1
      89: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      94: ifeq          114
      97: aload_1
      98: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     103: checkcast     #43                 // class okhttp3/RealCall
     106: astore_2
     107: aload_2
     108: invokevirtual #42                 // Method okhttp3/RealCall.cancel:()V
     111: goto          88
     114: return

  private boolean promoteAndExecute();
    Code:
       0: getstatic     #44                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #45                 // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #46                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #47                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: new           #48                 // class java/util/ArrayList
      24: dup
      25: invokespecial #49                 // Method java/util/ArrayList."<init>":()V
      28: astore_1
      29: aload_0
      30: dup
      31: astore_3
      32: monitorenter
      33: aload_0
      34: getfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
      37: invokeinterface #37,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      42: astore        4
      44: aload         4
      46: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      51: ifeq          143
      54: aload         4
      56: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      61: checkcast     #40                 // class okhttp3/RealCall$AsyncCall
      64: astore        5
      66: aload_0
      67: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
      70: invokeinterface #50,  1           // InterfaceMethod java/util/Deque.size:()I
      75: aload_0
      76: getfield      #2                  // Field maxRequests:I
      79: if_icmplt     85
      82: goto          143
      85: aload         5
      87: invokevirtual #51                 // Method okhttp3/RealCall$AsyncCall.callsPerHost:()Ljava/util/concurrent/atomic/AtomicInteger;
      90: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      93: aload_0
      94: getfield      #3                  // Field maxRequestsPerHost:I
      97: if_icmplt     103
     100: goto          44
     103: aload         4
     105: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.remove:()V
     110: aload         5
     112: invokevirtual #51                 // Method okhttp3/RealCall$AsyncCall.callsPerHost:()Ljava/util/concurrent/atomic/AtomicInteger;
     115: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
     118: pop
     119: aload_1
     120: aload         5
     122: invokeinterface #55,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     127: pop
     128: aload_0
     129: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
     132: aload         5
     134: invokeinterface #31,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
     139: pop
     140: goto          44
     143: aload_0
     144: invokevirtual #56                 // Method runningCallsCount:()I
     147: ifle          154
     150: iconst_1
     151: goto          155
     154: iconst_0
     155: istore_2
     156: aload_3
     157: monitorexit
     158: goto          168
     161: astore        6
     163: aload_3
     164: monitorexit
     165: aload         6
     167: athrow
     168: iconst_0
     169: istore_3
     170: aload_1
     171: invokeinterface #57,  1           // InterfaceMethod java/util/List.size:()I
     176: istore        4
     178: iload_3
     179: iload         4
     181: if_icmpge     211
     184: aload_1
     185: iload_3
     186: invokeinterface #58,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     191: checkcast     #40                 // class okhttp3/RealCall$AsyncCall
     194: astore        5
     196: aload         5
     198: aload_0
     199: invokevirtual #59                 // Method executorService:()Ljava/util/concurrent/ExecutorService;
     202: invokevirtual #60                 // Method okhttp3/RealCall$AsyncCall.executeOn:(Ljava/util/concurrent/ExecutorService;)V
     205: iinc          3, 1
     208: goto          178
     211: iload_2
     212: ireturn
    Exception table:
       from    to  target type
          33   158   161   any
         161   165   161   any

  synchronized void executed(okhttp3.RealCall);
    Code:
       0: aload_0
       1: getfield      #8                  // Field runningSyncCalls:Ljava/util/Deque;
       4: aload_1
       5: invokeinterface #31,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  void finished(okhttp3.RealCall$AsyncCall);
    Code:
       0: aload_1
       1: invokevirtual #51                 // Method okhttp3/RealCall$AsyncCall.callsPerHost:()Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #61                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
       7: pop
       8: aload_0
       9: aload_0
      10: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
      13: aload_1
      14: invokespecial #62                 // Method finished:(Ljava/util/Deque;Ljava/lang/Object;)V
      17: return

  void finished(okhttp3.RealCall);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field runningSyncCalls:Ljava/util/Deque;
       5: aload_1
       6: invokespecial #62                 // Method finished:(Ljava/util/Deque;Ljava/lang/Object;)V
       9: return

  private <T> void finished(java.util.Deque<T>, T);
    Code:
       0: aload_0
       1: dup
       2: astore        4
       4: monitorenter
       5: aload_1
       6: aload_2
       7: invokeinterface #63,  2           // InterfaceMethod java/util/Deque.remove:(Ljava/lang/Object;)Z
      12: ifne          25
      15: new           #46                 // class java/lang/AssertionError
      18: dup
      19: ldc           #64                 // String Call wasn\'t in-flight!
      21: invokespecial #65                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      24: athrow
      25: aload_0
      26: getfield      #30                 // Field idleCallback:Ljava/lang/Runnable;
      29: astore_3
      30: aload         4
      32: monitorexit
      33: goto          44
      36: astore        5
      38: aload         4
      40: monitorexit
      41: aload         5
      43: athrow
      44: aload_0
      45: invokespecial #29                 // Method promoteAndExecute:()Z
      48: istore        4
      50: iload         4
      52: ifne          65
      55: aload_3
      56: ifnull        65
      59: aload_3
      60: invokeinterface #66,  1           // InterfaceMethod java/lang/Runnable.run:()V
      65: return
    Exception table:
       from    to  target type
           5    33    36   any
          36    41    36   any

  public synchronized java.util.List<okhttp3.Call> queuedCalls();
    Code:
       0: new           #48                 // class java/util/ArrayList
       3: dup
       4: invokespecial #49                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
      12: invokeinterface #37,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      17: astore_2
      18: aload_2
      19: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          51
      27: aload_2
      28: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #40                 // class okhttp3/RealCall$AsyncCall
      36: astore_3
      37: aload_1
      38: aload_3
      39: invokevirtual #32                 // Method okhttp3/RealCall$AsyncCall.get:()Lokhttp3/RealCall;
      42: invokeinterface #55,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      47: pop
      48: goto          18
      51: aload_1
      52: invokestatic  #67                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      55: areturn

  public synchronized java.util.List<okhttp3.Call> runningCalls();
    Code:
       0: new           #48                 // class java/util/ArrayList
       3: dup
       4: invokespecial #49                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #8                  // Field runningSyncCalls:Ljava/util/Deque;
      13: invokeinterface #68,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      18: pop
      19: aload_0
      20: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
      23: invokeinterface #37,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      28: astore_2
      29: aload_2
      30: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      35: ifeq          62
      38: aload_2
      39: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      44: checkcast     #40                 // class okhttp3/RealCall$AsyncCall
      47: astore_3
      48: aload_1
      49: aload_3
      50: invokevirtual #32                 // Method okhttp3/RealCall$AsyncCall.get:()Lokhttp3/RealCall;
      53: invokeinterface #55,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      58: pop
      59: goto          29
      62: aload_1
      63: invokestatic  #67                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      66: areturn

  public synchronized int queuedCallsCount();
    Code:
       0: aload_0
       1: getfield      #6                  // Field readyAsyncCalls:Ljava/util/Deque;
       4: invokeinterface #50,  1           // InterfaceMethod java/util/Deque.size:()I
       9: ireturn

  public synchronized int runningCallsCount();
    Code:
       0: aload_0
       1: getfield      #7                  // Field runningAsyncCalls:Ljava/util/Deque;
       4: invokeinterface #50,  1           // InterfaceMethod java/util/Deque.size:()I
       9: aload_0
      10: getfield      #8                  // Field runningSyncCalls:Ljava/util/Deque;
      13: invokeinterface #50,  1           // InterfaceMethod java/util/Deque.size:()I
      18: iadd
      19: ireturn

  static {};
    Code:
       0: ldc           #69                 // class okhttp3/Dispatcher
       2: invokevirtual #70                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #44                 // Field $assertionsDisabled:Z
      16: return
}
