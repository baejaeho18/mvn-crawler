Compiled from "RealCall.java"
final class okhttp3.RealCall$AsyncCall extends okhttp3.internal.NamedRunnable {
  private final okhttp3.Callback responseCallback;

  private volatile java.util.concurrent.atomic.AtomicInteger callsPerHost;

  static final boolean $assertionsDisabled;

  final okhttp3.RealCall this$0;

  okhttp3.RealCall$AsyncCall(okhttp3.RealCall, okhttp3.Callback);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field this$0:Lokhttp3/RealCall;
       5: aload_0
       6: ldc           #3                  // String OkHttp %s
       8: iconst_1
       9: anewarray     #4                  // class java/lang/Object
      12: dup
      13: iconst_0
      14: aload_1
      15: invokevirtual #5                  // Method okhttp3/RealCall.redactedUrl:()Ljava/lang/String;
      18: aastore
      19: invokespecial #6                  // Method okhttp3/internal/NamedRunnable."<init>":(Ljava/lang/String;[Ljava/lang/Object;)V
      22: aload_0
      23: new           #7                  // class java/util/concurrent/atomic/AtomicInteger
      26: dup
      27: iconst_0
      28: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      31: putfield      #9                  // Field callsPerHost:Ljava/util/concurrent/atomic/AtomicInteger;
      34: aload_0
      35: aload_2
      36: putfield      #10                 // Field responseCallback:Lokhttp3/Callback;
      39: return

  java.util.concurrent.atomic.AtomicInteger callsPerHost();
    Code:
       0: aload_0
       1: getfield      #9                  // Field callsPerHost:Ljava/util/concurrent/atomic/AtomicInteger;
       4: areturn

  void reuseCallsPerHostFrom(okhttp3.RealCall$AsyncCall);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #9                  // Field callsPerHost:Ljava/util/concurrent/atomic/AtomicInteger;
       5: putfield      #9                  // Field callsPerHost:Ljava/util/concurrent/atomic/AtomicInteger;
       8: return

  java.lang.String host();
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
       4: getfield      #11                 // Field okhttp3/RealCall.originalRequest:Lokhttp3/Request;
       7: invokevirtual #12                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
      10: invokevirtual #13                 // Method okhttp3/HttpUrl.host:()Ljava/lang/String;
      13: areturn

  okhttp3.Request request();
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
       4: getfield      #11                 // Field okhttp3/RealCall.originalRequest:Lokhttp3/Request;
       7: areturn

  okhttp3.RealCall get();
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
       4: areturn

  void executeOn(java.util.concurrent.ExecutorService);
    Code:
       0: getstatic     #14                 // Field $assertionsDisabled:Z
       3: ifne          30
       6: aload_0
       7: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
      10: getfield      #15                 // Field okhttp3/RealCall.client:Lokhttp3/OkHttpClient;
      13: invokevirtual #16                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
      16: invokestatic  #17                 // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      19: ifeq          30
      22: new           #18                 // class java/lang/AssertionError
      25: dup
      26: invokespecial #19                 // Method java/lang/AssertionError."<init>":()V
      29: athrow
      30: iconst_0
      31: istore_2
      32: aload_1
      33: aload_0
      34: invokeinterface #20,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
      39: iconst_1
      40: istore_2
      41: iload_2
      42: ifne          153
      45: aload_0
      46: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
      49: getfield      #15                 // Field okhttp3/RealCall.client:Lokhttp3/OkHttpClient;
      52: invokevirtual #16                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
      55: aload_0
      56: invokevirtual #21                 // Method okhttp3/Dispatcher.finished:(Lokhttp3/RealCall$AsyncCall;)V
      59: goto          153
      62: astore_3
      63: new           #23                 // class java/io/InterruptedIOException
      66: dup
      67: ldc           #24                 // String executor rejected
      69: invokespecial #25                 // Method java/io/InterruptedIOException."<init>":(Ljava/lang/String;)V
      72: astore        4
      74: aload         4
      76: aload_3
      77: invokevirtual #26                 // Method java/io/InterruptedIOException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
      80: pop
      81: aload_0
      82: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
      85: invokestatic  #27                 // Method okhttp3/RealCall.access$000:(Lokhttp3/RealCall;)Lokhttp3/internal/connection/Transmitter;
      88: aload         4
      90: invokevirtual #28                 // Method okhttp3/internal/connection/Transmitter.noMoreExchanges:(Ljava/io/IOException;)Ljava/io/IOException;
      93: pop
      94: aload_0
      95: getfield      #10                 // Field responseCallback:Lokhttp3/Callback;
      98: aload_0
      99: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
     102: aload         4
     104: invokeinterface #29,  3           // InterfaceMethod okhttp3/Callback.onFailure:(Lokhttp3/Call;Ljava/io/IOException;)V
     109: iload_2
     110: ifne          153
     113: aload_0
     114: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
     117: getfield      #15                 // Field okhttp3/RealCall.client:Lokhttp3/OkHttpClient;
     120: invokevirtual #16                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
     123: aload_0
     124: invokevirtual #21                 // Method okhttp3/Dispatcher.finished:(Lokhttp3/RealCall$AsyncCall;)V
     127: goto          153
     130: astore        5
     132: iload_2
     133: ifne          150
     136: aload_0
     137: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
     140: getfield      #15                 // Field okhttp3/RealCall.client:Lokhttp3/OkHttpClient;
     143: invokevirtual #16                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
     146: aload_0
     147: invokevirtual #21                 // Method okhttp3/Dispatcher.finished:(Lokhttp3/RealCall$AsyncCall;)V
     150: aload         5
     152: athrow
     153: return
    Exception table:
       from    to  target type
          32    41    62   Class java/util/concurrent/RejectedExecutionException
          32    41   130   any
          62   109   130   any
         130   132   130   any

  protected void execute();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
       6: invokestatic  #27                 // Method okhttp3/RealCall.access$000:(Lokhttp3/RealCall;)Lokhttp3/internal/connection/Transmitter;
       9: invokevirtual #30                 // Method okhttp3/internal/connection/Transmitter.timeoutEnter:()V
      12: aload_0
      13: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
      16: invokevirtual #31                 // Method okhttp3/RealCall.getResponseWithInterceptorChain:()Lokhttp3/Response;
      19: astore_2
      20: iconst_1
      21: istore_1
      22: aload_0
      23: getfield      #10                 // Field responseCallback:Lokhttp3/Callback;
      26: aload_0
      27: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
      30: aload_2
      31: invokeinterface #32,  3           // InterfaceMethod okhttp3/Callback.onResponse:(Lokhttp3/Call;Lokhttp3/Response;)V
      36: aload_0
      37: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
      40: getfield      #15                 // Field okhttp3/RealCall.client:Lokhttp3/OkHttpClient;
      43: invokevirtual #16                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
      46: aload_0
      47: invokevirtual #21                 // Method okhttp3/Dispatcher.finished:(Lokhttp3/RealCall$AsyncCall;)V
      50: goto          142
      53: astore_2
      54: iload_1
      55: ifeq          94
      58: invokestatic  #34                 // Method okhttp3/internal/platform/Platform.get:()Lokhttp3/internal/platform/Platform;
      61: iconst_4
      62: new           #35                 // class java/lang/StringBuilder
      65: dup
      66: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
      69: ldc           #37                 // String Callback failure for
      71: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: aload_0
      75: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
      78: invokevirtual #39                 // Method okhttp3/RealCall.toLoggableString:()Ljava/lang/String;
      81: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      84: invokevirtual #40                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      87: aload_2
      88: invokevirtual #41                 // Method okhttp3/internal/platform/Platform.log:(ILjava/lang/String;Ljava/lang/Throwable;)V
      91: goto          108
      94: aload_0
      95: getfield      #10                 // Field responseCallback:Lokhttp3/Callback;
      98: aload_0
      99: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
     102: aload_2
     103: invokeinterface #29,  3           // InterfaceMethod okhttp3/Callback.onFailure:(Lokhttp3/Call;Ljava/io/IOException;)V
     108: aload_0
     109: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
     112: getfield      #15                 // Field okhttp3/RealCall.client:Lokhttp3/OkHttpClient;
     115: invokevirtual #16                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
     118: aload_0
     119: invokevirtual #21                 // Method okhttp3/Dispatcher.finished:(Lokhttp3/RealCall$AsyncCall;)V
     122: goto          142
     125: astore_3
     126: aload_0
     127: getfield      #2                  // Field this$0:Lokhttp3/RealCall;
     130: getfield      #15                 // Field okhttp3/RealCall.client:Lokhttp3/OkHttpClient;
     133: invokevirtual #16                 // Method okhttp3/OkHttpClient.dispatcher:()Lokhttp3/Dispatcher;
     136: aload_0
     137: invokevirtual #21                 // Method okhttp3/Dispatcher.finished:(Lokhttp3/RealCall$AsyncCall;)V
     140: aload_3
     141: athrow
     142: return
    Exception table:
       from    to  target type
          12    36    53   Class java/io/IOException
          12    36   125   any
          53   108   125   any

  static {};
    Code:
       0: ldc           #42                 // class okhttp3/RealCall
       2: invokevirtual #43                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #14                 // Field $assertionsDisabled:Z
      16: return
}
