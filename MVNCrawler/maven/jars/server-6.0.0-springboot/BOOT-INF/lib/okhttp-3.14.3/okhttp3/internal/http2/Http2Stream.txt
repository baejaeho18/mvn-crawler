Compiled from "Http2Stream.java"
public final class okhttp3.internal.http2.Http2Stream {
  long unacknowledgedBytesRead;

  long bytesLeftInWriteWindow;

  final int id;

  final okhttp3.internal.http2.Http2Connection connection;

  private final java.util.Deque<okhttp3.Headers> headersQueue;

  private boolean hasResponseHeaders;

  private final okhttp3.internal.http2.Http2Stream$FramingSource source;

  final okhttp3.internal.http2.Http2Stream$FramingSink sink;

  final okhttp3.internal.http2.Http2Stream$StreamTimeout readTimeout;

  final okhttp3.internal.http2.Http2Stream$StreamTimeout writeTimeout;

  okhttp3.internal.http2.ErrorCode errorCode;

  java.io.IOException errorException;

  static final boolean $assertionsDisabled;

  okhttp3.internal.http2.Http2Stream(int, okhttp3.internal.http2.Http2Connection, boolean, boolean, okhttp3.Headers);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #2                  // Field unacknowledgedBytesRead:J
       9: aload_0
      10: new           #3                  // class java/util/ArrayDeque
      13: dup
      14: invokespecial #4                  // Method java/util/ArrayDeque."<init>":()V
      17: putfield      #5                  // Field headersQueue:Ljava/util/Deque;
      20: aload_0
      21: new           #6                  // class okhttp3/internal/http2/Http2Stream$StreamTimeout
      24: dup
      25: aload_0
      26: invokespecial #7                  // Method okhttp3/internal/http2/Http2Stream$StreamTimeout."<init>":(Lokhttp3/internal/http2/Http2Stream;)V
      29: putfield      #8                  // Field readTimeout:Lokhttp3/internal/http2/Http2Stream$StreamTimeout;
      32: aload_0
      33: new           #6                  // class okhttp3/internal/http2/Http2Stream$StreamTimeout
      36: dup
      37: aload_0
      38: invokespecial #7                  // Method okhttp3/internal/http2/Http2Stream$StreamTimeout."<init>":(Lokhttp3/internal/http2/Http2Stream;)V
      41: putfield      #9                  // Field writeTimeout:Lokhttp3/internal/http2/Http2Stream$StreamTimeout;
      44: aload_2
      45: ifnonnull     58
      48: new           #10                 // class java/lang/NullPointerException
      51: dup
      52: ldc           #11                 // String connection == null
      54: invokespecial #12                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      57: athrow
      58: aload_0
      59: iload_1
      60: putfield      #13                 // Field id:I
      63: aload_0
      64: aload_2
      65: putfield      #14                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      68: aload_0
      69: aload_2
      70: getfield      #15                 // Field okhttp3/internal/http2/Http2Connection.peerSettings:Lokhttp3/internal/http2/Settings;
      73: invokevirtual #16                 // Method okhttp3/internal/http2/Settings.getInitialWindowSize:()I
      76: i2l
      77: putfield      #17                 // Field bytesLeftInWriteWindow:J
      80: aload_0
      81: new           #18                 // class okhttp3/internal/http2/Http2Stream$FramingSource
      84: dup
      85: aload_0
      86: aload_2
      87: getfield      #19                 // Field okhttp3/internal/http2/Http2Connection.okHttpSettings:Lokhttp3/internal/http2/Settings;
      90: invokevirtual #16                 // Method okhttp3/internal/http2/Settings.getInitialWindowSize:()I
      93: i2l
      94: invokespecial #20                 // Method okhttp3/internal/http2/Http2Stream$FramingSource."<init>":(Lokhttp3/internal/http2/Http2Stream;J)V
      97: putfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
     100: aload_0
     101: new           #22                 // class okhttp3/internal/http2/Http2Stream$FramingSink
     104: dup
     105: aload_0
     106: invokespecial #23                 // Method okhttp3/internal/http2/Http2Stream$FramingSink."<init>":(Lokhttp3/internal/http2/Http2Stream;)V
     109: putfield      #24                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
     112: aload_0
     113: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
     116: iload         4
     118: putfield      #25                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.finished:Z
     121: aload_0
     122: getfield      #24                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
     125: iload_3
     126: putfield      #26                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.finished:Z
     129: aload         5
     131: ifnull        146
     134: aload_0
     135: getfield      #5                  // Field headersQueue:Ljava/util/Deque;
     138: aload         5
     140: invokeinterface #27,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
     145: pop
     146: aload_0
     147: invokevirtual #28                 // Method isLocallyInitiated:()Z
     150: ifeq          168
     153: aload         5
     155: ifnull        168
     158: new           #29                 // class java/lang/IllegalStateException
     161: dup
     162: ldc           #30                 // String locally-initiated streams shouldn\'t have headers yet
     164: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     167: athrow
     168: aload_0
     169: invokevirtual #28                 // Method isLocallyInitiated:()Z
     172: ifne          190
     175: aload         5
     177: ifnonnull     190
     180: new           #29                 // class java/lang/IllegalStateException
     183: dup
     184: ldc           #32                 // String remotely-initiated streams should have headers
     186: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     189: athrow
     190: return

  public int getId();
    Code:
       0: aload_0
       1: getfield      #13                 // Field id:I
       4: ireturn

  public synchronized boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #33                 // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
       4: ifnull        9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      13: getfield      #25                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.finished:Z
      16: ifne          29
      19: aload_0
      20: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      23: getfield      #34                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.closed:Z
      26: ifeq          58
      29: aload_0
      30: getfield      #24                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      33: getfield      #26                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.finished:Z
      36: ifne          49
      39: aload_0
      40: getfield      #24                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      43: getfield      #35                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.closed:Z
      46: ifeq          58
      49: aload_0
      50: getfield      #36                 // Field hasResponseHeaders:Z
      53: ifeq          58
      56: iconst_0
      57: ireturn
      58: iconst_1
      59: ireturn

  public boolean isLocallyInitiated();
    Code:
       0: aload_0
       1: getfield      #13                 // Field id:I
       4: iconst_1
       5: iand
       6: iconst_1
       7: if_icmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: istore_1
      16: aload_0
      17: getfield      #14                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      20: getfield      #37                 // Field okhttp3/internal/http2/Http2Connection.client:Z
      23: iload_1
      24: if_icmpne     31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  public okhttp3.internal.http2.Http2Connection getConnection();
    Code:
       0: aload_0
       1: getfield      #14                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
       4: areturn

  public synchronized okhttp3.Headers takeHeaders() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field readTimeout:Lokhttp3/internal/http2/Http2Stream$StreamTimeout;
       4: invokevirtual #38                 // Method okhttp3/internal/http2/Http2Stream$StreamTimeout.enter:()V
       7: aload_0
       8: getfield      #5                  // Field headersQueue:Ljava/util/Deque;
      11: invokeinterface #39,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
      16: ifeq          33
      19: aload_0
      20: getfield      #33                 // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      23: ifnonnull     33
      26: aload_0
      27: invokevirtual #40                 // Method waitForIo:()V
      30: goto          7
      33: aload_0
      34: getfield      #8                  // Field readTimeout:Lokhttp3/internal/http2/Http2Stream$StreamTimeout;
      37: invokevirtual #41                 // Method okhttp3/internal/http2/Http2Stream$StreamTimeout.exitAndThrowIfTimedOut:()V
      40: goto          53
      43: astore_1
      44: aload_0
      45: getfield      #8                  // Field readTimeout:Lokhttp3/internal/http2/Http2Stream$StreamTimeout;
      48: invokevirtual #41                 // Method okhttp3/internal/http2/Http2Stream$StreamTimeout.exitAndThrowIfTimedOut:()V
      51: aload_1
      52: athrow
      53: aload_0
      54: getfield      #5                  // Field headersQueue:Ljava/util/Deque;
      57: invokeinterface #39,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
      62: ifne          78
      65: aload_0
      66: getfield      #5                  // Field headersQueue:Ljava/util/Deque;
      69: invokeinterface #42,  1           // InterfaceMethod java/util/Deque.removeFirst:()Ljava/lang/Object;
      74: checkcast     #43                 // class okhttp3/Headers
      77: areturn
      78: aload_0
      79: getfield      #44                 // Field errorException:Ljava/io/IOException;
      82: ifnull        92
      85: aload_0
      86: getfield      #44                 // Field errorException:Ljava/io/IOException;
      89: goto          103
      92: new           #45                 // class okhttp3/internal/http2/StreamResetException
      95: dup
      96: aload_0
      97: getfield      #33                 // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
     100: invokespecial #46                 // Method okhttp3/internal/http2/StreamResetException."<init>":(Lokhttp3/internal/http2/ErrorCode;)V
     103: athrow
    Exception table:
       from    to  target type
           7    33    43   any

  public synchronized okhttp3.Headers trailers() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #33                 // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
       4: ifnull        33
       7: aload_0
       8: getfield      #44                 // Field errorException:Ljava/io/IOException;
      11: ifnull        21
      14: aload_0
      15: getfield      #44                 // Field errorException:Ljava/io/IOException;
      18: goto          32
      21: new           #45                 // class okhttp3/internal/http2/StreamResetException
      24: dup
      25: aload_0
      26: getfield      #33                 // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      29: invokespecial #46                 // Method okhttp3/internal/http2/StreamResetException."<init>":(Lokhttp3/internal/http2/ErrorCode;)V
      32: athrow
      33: aload_0
      34: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      37: getfield      #25                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.finished:Z
      40: ifeq          69
      43: aload_0
      44: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      47: invokestatic  #47                 // Method okhttp3/internal/http2/Http2Stream$FramingSource.access$000:(Lokhttp3/internal/http2/Http2Stream$FramingSource;)Lokio/Buffer;
      50: invokevirtual #48                 // Method okio/Buffer.exhausted:()Z
      53: ifeq          69
      56: aload_0
      57: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      60: invokestatic  #49                 // Method okhttp3/internal/http2/Http2Stream$FramingSource.access$100:(Lokhttp3/internal/http2/Http2Stream$FramingSource;)Lokio/Buffer;
      63: invokevirtual #48                 // Method okio/Buffer.exhausted:()Z
      66: ifne          79
      69: new           #29                 // class java/lang/IllegalStateException
      72: dup
      73: ldc           #50                 // String too early; can\'t read the trailers yet
      75: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      78: athrow
      79: aload_0
      80: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      83: invokestatic  #51                 // Method okhttp3/internal/http2/Http2Stream$FramingSource.access$200:(Lokhttp3/internal/http2/Http2Stream$FramingSource;)Lokhttp3/Headers;
      86: ifnull        99
      89: aload_0
      90: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      93: invokestatic  #51                 // Method okhttp3/internal/http2/Http2Stream$FramingSource.access$200:(Lokhttp3/internal/http2/Http2Stream$FramingSource;)Lokhttp3/Headers;
      96: goto          102
      99: getstatic     #52                 // Field okhttp3/internal/Util.EMPTY_HEADERS:Lokhttp3/Headers;
     102: areturn

  public synchronized okhttp3.internal.http2.ErrorCode getErrorCode();
    Code:
       0: aload_0
       1: getfield      #33                 // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
       4: areturn

  public void writeHeaders(java.util.List<okhttp3.internal.http2.Header>, boolean, boolean) throws java.io.IOException;
    Code:
       0: getstatic     #53                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #54                 // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #55                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_1
      22: ifnonnull     35
      25: new           #10                 // class java/lang/NullPointerException
      28: dup
      29: ldc           #57                 // String headers == null
      31: invokespecial #12                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: dup
      37: astore        4
      39: monitorenter
      40: aload_0
      41: iconst_1
      42: putfield      #36                 // Field hasResponseHeaders:Z
      45: iload_2
      46: ifeq          57
      49: aload_0
      50: getfield      #24                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      53: iconst_1
      54: putfield      #26                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.finished:Z
      57: aload         4
      59: monitorexit
      60: goto          71
      63: astore        5
      65: aload         4
      67: monitorexit
      68: aload         5
      70: athrow
      71: iload_3
      72: ifne          115
      75: aload_0
      76: getfield      #14                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      79: dup
      80: astore        4
      82: monitorenter
      83: aload_0
      84: getfield      #14                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      87: getfield      #58                 // Field okhttp3/internal/http2/Http2Connection.bytesLeftInWriteWindow:J
      90: lconst_0
      91: lcmp
      92: ifne          99
      95: iconst_1
      96: goto          100
      99: iconst_0
     100: istore_3
     101: aload         4
     103: monitorexit
     104: goto          115
     107: astore        6
     109: aload         4
     111: monitorexit
     112: aload         6
     114: athrow
     115: aload_0
     116: getfield      #14                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
     119: aload_0
     120: getfield      #13                 // Field id:I
     123: iload_2
     124: aload_1
     125: invokevirtual #59                 // Method okhttp3/internal/http2/Http2Connection.writeHeaders:(IZLjava/util/List;)V
     128: iload_3
     129: ifeq          139
     132: aload_0
     133: getfield      #14                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
     136: invokevirtual #60                 // Method okhttp3/internal/http2/Http2Connection.flush:()V
     139: return
    Exception table:
       from    to  target type
          40    60    63   any
          63    68    63   any
          83   104   107   any
         107   112   107   any

  public void enqueueTrailers(okhttp3.Headers);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: getfield      #24                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
       8: getfield      #26                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.finished:Z
      11: ifeq          24
      14: new           #29                 // class java/lang/IllegalStateException
      17: dup
      18: ldc           #61                 // String already finished
      20: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_1
      25: invokevirtual #62                 // Method okhttp3/Headers.size:()I
      28: ifne          41
      31: new           #63                 // class java/lang/IllegalArgumentException
      34: dup
      35: ldc           #64                 // String trailers.size() == 0
      37: invokespecial #65                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_0
      42: getfield      #24                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      45: aload_1
      46: invokestatic  #66                 // Method okhttp3/internal/http2/Http2Stream$FramingSink.access$302:(Lokhttp3/internal/http2/Http2Stream$FramingSink;Lokhttp3/Headers;)Lokhttp3/Headers;
      49: pop
      50: aload_2
      51: monitorexit
      52: goto          60
      55: astore_3
      56: aload_2
      57: monitorexit
      58: aload_3
      59: athrow
      60: return
    Exception table:
       from    to  target type
           4    52    55   any
          55    58    55   any

  public okio.Timeout readTimeout();
    Code:
       0: aload_0
       1: getfield      #8                  // Field readTimeout:Lokhttp3/internal/http2/Http2Stream$StreamTimeout;
       4: areturn

  public okio.Timeout writeTimeout();
    Code:
       0: aload_0
       1: getfield      #9                  // Field writeTimeout:Lokhttp3/internal/http2/Http2Stream$StreamTimeout;
       4: areturn

  public okio.Source getSource();
    Code:
       0: aload_0
       1: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
       4: areturn

  public okio.Sink getSink();
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #36                 // Field hasResponseHeaders:Z
       8: ifne          28
      11: aload_0
      12: invokevirtual #28                 // Method isLocallyInitiated:()Z
      15: ifne          28
      18: new           #29                 // class java/lang/IllegalStateException
      21: dup
      22: ldc           #67                 // String reply before requesting the sink
      24: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_1
      29: monitorexit
      30: goto          38
      33: astore_2
      34: aload_1
      35: monitorexit
      36: aload_2
      37: athrow
      38: aload_0
      39: getfield      #24                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      42: areturn
    Exception table:
       from    to  target type
           4    30    33   any
          33    36    33   any

  public void close(okhttp3.internal.http2.ErrorCode, java.io.IOException) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #68                 // Method closeInternal:(Lokhttp3/internal/http2/ErrorCode;Ljava/io/IOException;)Z
       6: ifne          10
       9: return
      10: aload_0
      11: getfield      #14                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      14: aload_0
      15: getfield      #13                 // Field id:I
      18: aload_1
      19: invokevirtual #69                 // Method okhttp3/internal/http2/Http2Connection.writeSynReset:(ILokhttp3/internal/http2/ErrorCode;)V
      22: return

  public void closeLater(okhttp3.internal.http2.ErrorCode);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #68                 // Method closeInternal:(Lokhttp3/internal/http2/ErrorCode;Ljava/io/IOException;)Z
       6: ifne          10
       9: return
      10: aload_0
      11: getfield      #14                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      14: aload_0
      15: getfield      #13                 // Field id:I
      18: aload_1
      19: invokevirtual #70                 // Method okhttp3/internal/http2/Http2Connection.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V
      22: return

  private boolean closeInternal(okhttp3.internal.http2.ErrorCode, java.io.IOException);
    Code:
       0: getstatic     #53                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #54                 // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #55                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: dup
      23: astore_3
      24: monitorenter
      25: aload_0
      26: getfield      #33                 // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      29: ifnull        36
      32: iconst_0
      33: aload_3
      34: monitorexit
      35: ireturn
      36: aload_0
      37: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      40: getfield      #25                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.finished:Z
      43: ifeq          60
      46: aload_0
      47: getfield      #24                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      50: getfield      #26                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.finished:Z
      53: ifeq          60
      56: iconst_0
      57: aload_3
      58: monitorexit
      59: ireturn
      60: aload_0
      61: aload_1
      62: putfield      #33                 // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      65: aload_0
      66: aload_2
      67: putfield      #44                 // Field errorException:Ljava/io/IOException;
      70: aload_0
      71: invokevirtual #71                 // Method java/lang/Object.notifyAll:()V
      74: aload_3
      75: monitorexit
      76: goto          86
      79: astore        4
      81: aload_3
      82: monitorexit
      83: aload         4
      85: athrow
      86: aload_0
      87: getfield      #14                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
      90: aload_0
      91: getfield      #13                 // Field id:I
      94: invokevirtual #72                 // Method okhttp3/internal/http2/Http2Connection.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;
      97: pop
      98: iconst_1
      99: ireturn
    Exception table:
       from    to  target type
          25    35    79   any
          36    59    79   any
          60    76    79   any
          79    83    79   any

  void receiveData(okio.BufferedSource, int) throws java.io.IOException;
    Code:
       0: getstatic     #53                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #54                 // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #55                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      25: aload_1
      26: iload_2
      27: i2l
      28: invokevirtual #73                 // Method okhttp3/internal/http2/Http2Stream$FramingSource.receive:(Lokio/BufferedSource;J)V
      31: return

  void receiveHeaders(okhttp3.Headers, boolean);
    Code:
       0: getstatic     #53                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #54                 // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #55                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: dup
      23: astore        4
      25: monitorenter
      26: aload_0
      27: getfield      #36                 // Field hasResponseHeaders:Z
      30: ifeq          37
      33: iload_2
      34: ifne          56
      37: aload_0
      38: iconst_1
      39: putfield      #36                 // Field hasResponseHeaders:Z
      42: aload_0
      43: getfield      #5                  // Field headersQueue:Ljava/util/Deque;
      46: aload_1
      47: invokeinterface #27,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      52: pop
      53: goto          65
      56: aload_0
      57: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      60: aload_1
      61: invokestatic  #74                 // Method okhttp3/internal/http2/Http2Stream$FramingSource.access$202:(Lokhttp3/internal/http2/Http2Stream$FramingSource;Lokhttp3/Headers;)Lokhttp3/Headers;
      64: pop
      65: iload_2
      66: ifeq          77
      69: aload_0
      70: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      73: iconst_1
      74: putfield      #25                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.finished:Z
      77: aload_0
      78: invokevirtual #75                 // Method isOpen:()Z
      81: istore_3
      82: aload_0
      83: invokevirtual #71                 // Method java/lang/Object.notifyAll:()V
      86: aload         4
      88: monitorexit
      89: goto          100
      92: astore        5
      94: aload         4
      96: monitorexit
      97: aload         5
      99: athrow
     100: iload_3
     101: ifne          116
     104: aload_0
     105: getfield      #14                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
     108: aload_0
     109: getfield      #13                 // Field id:I
     112: invokevirtual #72                 // Method okhttp3/internal/http2/Http2Connection.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;
     115: pop
     116: return
    Exception table:
       from    to  target type
          26    89    92   any
          92    97    92   any

  synchronized void receiveRstStream(okhttp3.internal.http2.ErrorCode);
    Code:
       0: aload_0
       1: getfield      #33                 // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
       4: ifnonnull     16
       7: aload_0
       8: aload_1
       9: putfield      #33                 // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      12: aload_0
      13: invokevirtual #71                 // Method java/lang/Object.notifyAll:()V
      16: return

  void cancelStreamIfNecessary() throws java.io.IOException;
    Code:
       0: getstatic     #53                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #54                 // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #55                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: dup
      23: astore_3
      24: monitorenter
      25: aload_0
      26: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      29: getfield      #25                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.finished:Z
      32: ifne          69
      35: aload_0
      36: getfield      #21                 // Field source:Lokhttp3/internal/http2/Http2Stream$FramingSource;
      39: getfield      #34                 // Field okhttp3/internal/http2/Http2Stream$FramingSource.closed:Z
      42: ifeq          69
      45: aload_0
      46: getfield      #24                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      49: getfield      #26                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.finished:Z
      52: ifne          65
      55: aload_0
      56: getfield      #24                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      59: getfield      #35                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.closed:Z
      62: ifeq          69
      65: iconst_1
      66: goto          70
      69: iconst_0
      70: istore_2
      71: aload_0
      72: invokevirtual #75                 // Method isOpen:()Z
      75: istore_1
      76: aload_3
      77: monitorexit
      78: goto          88
      81: astore        4
      83: aload_3
      84: monitorexit
      85: aload         4
      87: athrow
      88: iload_2
      89: ifeq          103
      92: aload_0
      93: getstatic     #76                 // Field okhttp3/internal/http2/ErrorCode.CANCEL:Lokhttp3/internal/http2/ErrorCode;
      96: aconst_null
      97: invokevirtual #77                 // Method close:(Lokhttp3/internal/http2/ErrorCode;Ljava/io/IOException;)V
     100: goto          119
     103: iload_1
     104: ifne          119
     107: aload_0
     108: getfield      #14                 // Field connection:Lokhttp3/internal/http2/Http2Connection;
     111: aload_0
     112: getfield      #13                 // Field id:I
     115: invokevirtual #72                 // Method okhttp3/internal/http2/Http2Connection.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;
     118: pop
     119: return
    Exception table:
       from    to  target type
          25    78    81   any
          81    85    81   any

  void addBytesToWriteWindow(long);
    Code:
       0: aload_0
       1: dup
       2: getfield      #17                 // Field bytesLeftInWriteWindow:J
       5: lload_1
       6: ladd
       7: putfield      #17                 // Field bytesLeftInWriteWindow:J
      10: lload_1
      11: lconst_0
      12: lcmp
      13: ifle          20
      16: aload_0
      17: invokevirtual #71                 // Method java/lang/Object.notifyAll:()V
      20: return

  void checkOutNotClosed() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #24                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
       4: getfield      #35                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.closed:Z
       7: ifeq          20
      10: new           #78                 // class java/io/IOException
      13: dup
      14: ldc           #79                 // String stream closed
      16: invokespecial #80                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: getfield      #24                 // Field sink:Lokhttp3/internal/http2/Http2Stream$FramingSink;
      24: getfield      #26                 // Field okhttp3/internal/http2/Http2Stream$FramingSink.finished:Z
      27: ifeq          40
      30: new           #78                 // class java/io/IOException
      33: dup
      34: ldc           #81                 // String stream finished
      36: invokespecial #80                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: getfield      #33                 // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      44: ifnull        73
      47: aload_0
      48: getfield      #44                 // Field errorException:Ljava/io/IOException;
      51: ifnull        61
      54: aload_0
      55: getfield      #44                 // Field errorException:Ljava/io/IOException;
      58: goto          72
      61: new           #45                 // class okhttp3/internal/http2/StreamResetException
      64: dup
      65: aload_0
      66: getfield      #33                 // Field errorCode:Lokhttp3/internal/http2/ErrorCode;
      69: invokespecial #46                 // Method okhttp3/internal/http2/StreamResetException."<init>":(Lokhttp3/internal/http2/ErrorCode;)V
      72: athrow
      73: return

  void waitForIo() throws java.io.InterruptedIOException;
    Code:
       0: aload_0
       1: invokevirtual #82                 // Method java/lang/Object.wait:()V
       4: goto          22
       7: astore_1
       8: invokestatic  #84                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      11: invokevirtual #85                 // Method java/lang/Thread.interrupt:()V
      14: new           #86                 // class java/io/InterruptedIOException
      17: dup
      18: invokespecial #87                 // Method java/io/InterruptedIOException."<init>":()V
      21: athrow
      22: return
    Exception table:
       from    to  target type
           0     4     7   Class java/lang/InterruptedException

  static {};
    Code:
       0: ldc           #88                 // class okhttp3/internal/http2/Http2Stream
       2: invokevirtual #89                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #53                 // Field $assertionsDisabled:Z
      16: return
}
