Compiled from "OkHttpClient.java"
public class okhttp3.OkHttpClient implements java.lang.Cloneable,okhttp3.Call$Factory,okhttp3.WebSocket$Factory {
  static final java.util.List<okhttp3.Protocol> DEFAULT_PROTOCOLS;

  static final java.util.List<okhttp3.ConnectionSpec> DEFAULT_CONNECTION_SPECS;

  final okhttp3.Dispatcher dispatcher;

  final java.net.Proxy proxy;

  final java.util.List<okhttp3.Protocol> protocols;

  final java.util.List<okhttp3.ConnectionSpec> connectionSpecs;

  final java.util.List<okhttp3.Interceptor> interceptors;

  final java.util.List<okhttp3.Interceptor> networkInterceptors;

  final okhttp3.EventListener$Factory eventListenerFactory;

  final java.net.ProxySelector proxySelector;

  final okhttp3.CookieJar cookieJar;

  final okhttp3.Cache cache;

  final okhttp3.internal.cache.InternalCache internalCache;

  final javax.net.SocketFactory socketFactory;

  final javax.net.ssl.SSLSocketFactory sslSocketFactory;

  final okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner;

  final javax.net.ssl.HostnameVerifier hostnameVerifier;

  final okhttp3.CertificatePinner certificatePinner;

  final okhttp3.Authenticator proxyAuthenticator;

  final okhttp3.Authenticator authenticator;

  final okhttp3.ConnectionPool connectionPool;

  final okhttp3.Dns dns;

  final boolean followSslRedirects;

  final boolean followRedirects;

  final boolean retryOnConnectionFailure;

  final int callTimeout;

  final int connectTimeout;

  final int readTimeout;

  final int writeTimeout;

  final int pingInterval;

  public okhttp3.OkHttpClient();
    Code:
       0: aload_0
       1: new           #1                  // class okhttp3/OkHttpClient$Builder
       4: dup
       5: invokespecial #2                  // Method okhttp3/OkHttpClient$Builder."<init>":()V
       8: invokespecial #3                  // Method "<init>":(Lokhttp3/OkHttpClient$Builder;)V
      11: return

  okhttp3.OkHttpClient(okhttp3.OkHttpClient$Builder);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #5                  // Field okhttp3/OkHttpClient$Builder.dispatcher:Lokhttp3/Dispatcher;
       9: putfield      #6                  // Field dispatcher:Lokhttp3/Dispatcher;
      12: aload_0
      13: aload_1
      14: getfield      #7                  // Field okhttp3/OkHttpClient$Builder.proxy:Ljava/net/Proxy;
      17: putfield      #8                  // Field proxy:Ljava/net/Proxy;
      20: aload_0
      21: aload_1
      22: getfield      #9                  // Field okhttp3/OkHttpClient$Builder.protocols:Ljava/util/List;
      25: putfield      #10                 // Field protocols:Ljava/util/List;
      28: aload_0
      29: aload_1
      30: getfield      #11                 // Field okhttp3/OkHttpClient$Builder.connectionSpecs:Ljava/util/List;
      33: putfield      #12                 // Field connectionSpecs:Ljava/util/List;
      36: aload_0
      37: aload_1
      38: getfield      #13                 // Field okhttp3/OkHttpClient$Builder.interceptors:Ljava/util/List;
      41: invokestatic  #14                 // Method okhttp3/internal/Util.immutableList:(Ljava/util/List;)Ljava/util/List;
      44: putfield      #15                 // Field interceptors:Ljava/util/List;
      47: aload_0
      48: aload_1
      49: getfield      #16                 // Field okhttp3/OkHttpClient$Builder.networkInterceptors:Ljava/util/List;
      52: invokestatic  #14                 // Method okhttp3/internal/Util.immutableList:(Ljava/util/List;)Ljava/util/List;
      55: putfield      #17                 // Field networkInterceptors:Ljava/util/List;
      58: aload_0
      59: aload_1
      60: getfield      #18                 // Field okhttp3/OkHttpClient$Builder.eventListenerFactory:Lokhttp3/EventListener$Factory;
      63: putfield      #19                 // Field eventListenerFactory:Lokhttp3/EventListener$Factory;
      66: aload_0
      67: aload_1
      68: getfield      #20                 // Field okhttp3/OkHttpClient$Builder.proxySelector:Ljava/net/ProxySelector;
      71: putfield      #21                 // Field proxySelector:Ljava/net/ProxySelector;
      74: aload_0
      75: aload_1
      76: getfield      #22                 // Field okhttp3/OkHttpClient$Builder.cookieJar:Lokhttp3/CookieJar;
      79: putfield      #23                 // Field cookieJar:Lokhttp3/CookieJar;
      82: aload_0
      83: aload_1
      84: getfield      #24                 // Field okhttp3/OkHttpClient$Builder.cache:Lokhttp3/Cache;
      87: putfield      #25                 // Field cache:Lokhttp3/Cache;
      90: aload_0
      91: aload_1
      92: getfield      #26                 // Field okhttp3/OkHttpClient$Builder.internalCache:Lokhttp3/internal/cache/InternalCache;
      95: putfield      #27                 // Field internalCache:Lokhttp3/internal/cache/InternalCache;
      98: aload_0
      99: aload_1
     100: getfield      #28                 // Field okhttp3/OkHttpClient$Builder.socketFactory:Ljavax/net/SocketFactory;
     103: putfield      #29                 // Field socketFactory:Ljavax/net/SocketFactory;
     106: iconst_0
     107: istore_2
     108: aload_0
     109: getfield      #12                 // Field connectionSpecs:Ljava/util/List;
     112: invokeinterface #30,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     117: astore_3
     118: aload_3
     119: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     124: ifeq          159
     127: aload_3
     128: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     133: checkcast     #33                 // class okhttp3/ConnectionSpec
     136: astore        4
     138: iload_2
     139: ifne          150
     142: aload         4
     144: invokevirtual #34                 // Method okhttp3/ConnectionSpec.isTls:()Z
     147: ifeq          154
     150: iconst_1
     151: goto          155
     154: iconst_0
     155: istore_2
     156: goto          118
     159: aload_1
     160: getfield      #35                 // Field okhttp3/OkHttpClient$Builder.sslSocketFactory:Ljavax/net/ssl/SSLSocketFactory;
     163: ifnonnull     170
     166: iload_2
     167: ifne          189
     170: aload_0
     171: aload_1
     172: getfield      #35                 // Field okhttp3/OkHttpClient$Builder.sslSocketFactory:Ljavax/net/ssl/SSLSocketFactory;
     175: putfield      #36                 // Field sslSocketFactory:Ljavax/net/ssl/SSLSocketFactory;
     178: aload_0
     179: aload_1
     180: getfield      #37                 // Field okhttp3/OkHttpClient$Builder.certificateChainCleaner:Lokhttp3/internal/tls/CertificateChainCleaner;
     183: putfield      #38                 // Field certificateChainCleaner:Lokhttp3/internal/tls/CertificateChainCleaner;
     186: goto          209
     189: invokestatic  #39                 // Method okhttp3/internal/Util.platformTrustManager:()Ljavax/net/ssl/X509TrustManager;
     192: astore_3
     193: aload_0
     194: aload_3
     195: invokestatic  #40                 // Method newSslSocketFactory:(Ljavax/net/ssl/X509TrustManager;)Ljavax/net/ssl/SSLSocketFactory;
     198: putfield      #36                 // Field sslSocketFactory:Ljavax/net/ssl/SSLSocketFactory;
     201: aload_0
     202: aload_3
     203: invokestatic  #41                 // Method okhttp3/internal/tls/CertificateChainCleaner.get:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;
     206: putfield      #38                 // Field certificateChainCleaner:Lokhttp3/internal/tls/CertificateChainCleaner;
     209: aload_0
     210: getfield      #36                 // Field sslSocketFactory:Ljavax/net/ssl/SSLSocketFactory;
     213: ifnull        226
     216: invokestatic  #42                 // Method okhttp3/internal/platform/Platform.get:()Lokhttp3/internal/platform/Platform;
     219: aload_0
     220: getfield      #36                 // Field sslSocketFactory:Ljavax/net/ssl/SSLSocketFactory;
     223: invokevirtual #43                 // Method okhttp3/internal/platform/Platform.configureSslSocketFactory:(Ljavax/net/ssl/SSLSocketFactory;)V
     226: aload_0
     227: aload_1
     228: getfield      #44                 // Field okhttp3/OkHttpClient$Builder.hostnameVerifier:Ljavax/net/ssl/HostnameVerifier;
     231: putfield      #45                 // Field hostnameVerifier:Ljavax/net/ssl/HostnameVerifier;
     234: aload_0
     235: aload_1
     236: getfield      #46                 // Field okhttp3/OkHttpClient$Builder.certificatePinner:Lokhttp3/CertificatePinner;
     239: aload_0
     240: getfield      #38                 // Field certificateChainCleaner:Lokhttp3/internal/tls/CertificateChainCleaner;
     243: invokevirtual #47                 // Method okhttp3/CertificatePinner.withCertificateChainCleaner:(Lokhttp3/internal/tls/CertificateChainCleaner;)Lokhttp3/CertificatePinner;
     246: putfield      #48                 // Field certificatePinner:Lokhttp3/CertificatePinner;
     249: aload_0
     250: aload_1
     251: getfield      #49                 // Field okhttp3/OkHttpClient$Builder.proxyAuthenticator:Lokhttp3/Authenticator;
     254: putfield      #50                 // Field proxyAuthenticator:Lokhttp3/Authenticator;
     257: aload_0
     258: aload_1
     259: getfield      #51                 // Field okhttp3/OkHttpClient$Builder.authenticator:Lokhttp3/Authenticator;
     262: putfield      #52                 // Field authenticator:Lokhttp3/Authenticator;
     265: aload_0
     266: aload_1
     267: getfield      #53                 // Field okhttp3/OkHttpClient$Builder.connectionPool:Lokhttp3/ConnectionPool;
     270: putfield      #54                 // Field connectionPool:Lokhttp3/ConnectionPool;
     273: aload_0
     274: aload_1
     275: getfield      #55                 // Field okhttp3/OkHttpClient$Builder.dns:Lokhttp3/Dns;
     278: putfield      #56                 // Field dns:Lokhttp3/Dns;
     281: aload_0
     282: aload_1
     283: getfield      #57                 // Field okhttp3/OkHttpClient$Builder.followSslRedirects:Z
     286: putfield      #58                 // Field followSslRedirects:Z
     289: aload_0
     290: aload_1
     291: getfield      #59                 // Field okhttp3/OkHttpClient$Builder.followRedirects:Z
     294: putfield      #60                 // Field followRedirects:Z
     297: aload_0
     298: aload_1
     299: getfield      #61                 // Field okhttp3/OkHttpClient$Builder.retryOnConnectionFailure:Z
     302: putfield      #62                 // Field retryOnConnectionFailure:Z
     305: aload_0
     306: aload_1
     307: getfield      #63                 // Field okhttp3/OkHttpClient$Builder.callTimeout:I
     310: putfield      #64                 // Field callTimeout:I
     313: aload_0
     314: aload_1
     315: getfield      #65                 // Field okhttp3/OkHttpClient$Builder.connectTimeout:I
     318: putfield      #66                 // Field connectTimeout:I
     321: aload_0
     322: aload_1
     323: getfield      #67                 // Field okhttp3/OkHttpClient$Builder.readTimeout:I
     326: putfield      #68                 // Field readTimeout:I
     329: aload_0
     330: aload_1
     331: getfield      #69                 // Field okhttp3/OkHttpClient$Builder.writeTimeout:I
     334: putfield      #70                 // Field writeTimeout:I
     337: aload_0
     338: aload_1
     339: getfield      #71                 // Field okhttp3/OkHttpClient$Builder.pingInterval:I
     342: putfield      #72                 // Field pingInterval:I
     345: aload_0
     346: getfield      #15                 // Field interceptors:Ljava/util/List;
     349: aconst_null
     350: invokeinterface #73,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
     355: ifeq          388
     358: new           #74                 // class java/lang/IllegalStateException
     361: dup
     362: new           #75                 // class java/lang/StringBuilder
     365: dup
     366: invokespecial #76                 // Method java/lang/StringBuilder."<init>":()V
     369: ldc           #77                 // String Null interceptor:
     371: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     374: aload_0
     375: getfield      #15                 // Field interceptors:Ljava/util/List;
     378: invokevirtual #79                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     381: invokevirtual #80                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     384: invokespecial #81                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     387: athrow
     388: aload_0
     389: getfield      #17                 // Field networkInterceptors:Ljava/util/List;
     392: aconst_null
     393: invokeinterface #73,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
     398: ifeq          431
     401: new           #74                 // class java/lang/IllegalStateException
     404: dup
     405: new           #75                 // class java/lang/StringBuilder
     408: dup
     409: invokespecial #76                 // Method java/lang/StringBuilder."<init>":()V
     412: ldc           #82                 // String Null network interceptor:
     414: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     417: aload_0
     418: getfield      #17                 // Field networkInterceptors:Ljava/util/List;
     421: invokevirtual #79                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     424: invokevirtual #80                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     427: invokespecial #81                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     430: athrow
     431: return

  private static javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager);
    Code:
       0: invokestatic  #42                 // Method okhttp3/internal/platform/Platform.get:()Lokhttp3/internal/platform/Platform;
       3: invokevirtual #83                 // Method okhttp3/internal/platform/Platform.getSSLContext:()Ljavax/net/ssl/SSLContext;
       6: astore_1
       7: aload_1
       8: aconst_null
       9: iconst_1
      10: anewarray     #84                 // class javax/net/ssl/TrustManager
      13: dup
      14: iconst_0
      15: aload_0
      16: aastore
      17: aconst_null
      18: invokevirtual #85                 // Method javax/net/ssl/SSLContext.init:([Ljavax/net/ssl/KeyManager;[Ljavax/net/ssl/TrustManager;Ljava/security/SecureRandom;)V
      21: aload_1
      22: invokevirtual #86                 // Method javax/net/ssl/SSLContext.getSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;
      25: areturn
      26: astore_1
      27: new           #88                 // class java/lang/AssertionError
      30: dup
      31: ldc           #89                 // String No System TLS
      33: aload_1
      34: invokespecial #90                 // Method java/lang/AssertionError."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      37: athrow
    Exception table:
       from    to  target type
           0    25    26   Class java/security/GeneralSecurityException

  public int callTimeoutMillis();
    Code:
       0: aload_0
       1: getfield      #64                 // Field callTimeout:I
       4: ireturn

  public int connectTimeoutMillis();
    Code:
       0: aload_0
       1: getfield      #66                 // Field connectTimeout:I
       4: ireturn

  public int readTimeoutMillis();
    Code:
       0: aload_0
       1: getfield      #68                 // Field readTimeout:I
       4: ireturn

  public int writeTimeoutMillis();
    Code:
       0: aload_0
       1: getfield      #70                 // Field writeTimeout:I
       4: ireturn

  public int pingIntervalMillis();
    Code:
       0: aload_0
       1: getfield      #72                 // Field pingInterval:I
       4: ireturn

  public java.net.Proxy proxy();
    Code:
       0: aload_0
       1: getfield      #8                  // Field proxy:Ljava/net/Proxy;
       4: areturn

  public java.net.ProxySelector proxySelector();
    Code:
       0: aload_0
       1: getfield      #21                 // Field proxySelector:Ljava/net/ProxySelector;
       4: areturn

  public okhttp3.CookieJar cookieJar();
    Code:
       0: aload_0
       1: getfield      #23                 // Field cookieJar:Lokhttp3/CookieJar;
       4: areturn

  public okhttp3.Cache cache();
    Code:
       0: aload_0
       1: getfield      #25                 // Field cache:Lokhttp3/Cache;
       4: areturn

  okhttp3.internal.cache.InternalCache internalCache();
    Code:
       0: aload_0
       1: getfield      #25                 // Field cache:Lokhttp3/Cache;
       4: ifnull        17
       7: aload_0
       8: getfield      #25                 // Field cache:Lokhttp3/Cache;
      11: getfield      #91                 // Field okhttp3/Cache.internalCache:Lokhttp3/internal/cache/InternalCache;
      14: goto          21
      17: aload_0
      18: getfield      #27                 // Field internalCache:Lokhttp3/internal/cache/InternalCache;
      21: areturn

  public okhttp3.Dns dns();
    Code:
       0: aload_0
       1: getfield      #56                 // Field dns:Lokhttp3/Dns;
       4: areturn

  public javax.net.SocketFactory socketFactory();
    Code:
       0: aload_0
       1: getfield      #29                 // Field socketFactory:Ljavax/net/SocketFactory;
       4: areturn

  public javax.net.ssl.SSLSocketFactory sslSocketFactory();
    Code:
       0: aload_0
       1: getfield      #36                 // Field sslSocketFactory:Ljavax/net/ssl/SSLSocketFactory;
       4: areturn

  public javax.net.ssl.HostnameVerifier hostnameVerifier();
    Code:
       0: aload_0
       1: getfield      #45                 // Field hostnameVerifier:Ljavax/net/ssl/HostnameVerifier;
       4: areturn

  public okhttp3.CertificatePinner certificatePinner();
    Code:
       0: aload_0
       1: getfield      #48                 // Field certificatePinner:Lokhttp3/CertificatePinner;
       4: areturn

  public okhttp3.Authenticator authenticator();
    Code:
       0: aload_0
       1: getfield      #52                 // Field authenticator:Lokhttp3/Authenticator;
       4: areturn

  public okhttp3.Authenticator proxyAuthenticator();
    Code:
       0: aload_0
       1: getfield      #50                 // Field proxyAuthenticator:Lokhttp3/Authenticator;
       4: areturn

  public okhttp3.ConnectionPool connectionPool();
    Code:
       0: aload_0
       1: getfield      #54                 // Field connectionPool:Lokhttp3/ConnectionPool;
       4: areturn

  public boolean followSslRedirects();
    Code:
       0: aload_0
       1: getfield      #58                 // Field followSslRedirects:Z
       4: ireturn

  public boolean followRedirects();
    Code:
       0: aload_0
       1: getfield      #60                 // Field followRedirects:Z
       4: ireturn

  public boolean retryOnConnectionFailure();
    Code:
       0: aload_0
       1: getfield      #62                 // Field retryOnConnectionFailure:Z
       4: ireturn

  public okhttp3.Dispatcher dispatcher();
    Code:
       0: aload_0
       1: getfield      #6                  // Field dispatcher:Lokhttp3/Dispatcher;
       4: areturn

  public java.util.List<okhttp3.Protocol> protocols();
    Code:
       0: aload_0
       1: getfield      #10                 // Field protocols:Ljava/util/List;
       4: areturn

  public java.util.List<okhttp3.ConnectionSpec> connectionSpecs();
    Code:
       0: aload_0
       1: getfield      #12                 // Field connectionSpecs:Ljava/util/List;
       4: areturn

  public java.util.List<okhttp3.Interceptor> interceptors();
    Code:
       0: aload_0
       1: getfield      #15                 // Field interceptors:Ljava/util/List;
       4: areturn

  public java.util.List<okhttp3.Interceptor> networkInterceptors();
    Code:
       0: aload_0
       1: getfield      #17                 // Field networkInterceptors:Ljava/util/List;
       4: areturn

  public okhttp3.EventListener$Factory eventListenerFactory();
    Code:
       0: aload_0
       1: getfield      #19                 // Field eventListenerFactory:Lokhttp3/EventListener$Factory;
       4: areturn

  public okhttp3.Call newCall(okhttp3.Request);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokestatic  #92                 // Method okhttp3/RealCall.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;
       6: areturn

  public okhttp3.WebSocket newWebSocket(okhttp3.Request, okhttp3.WebSocketListener);
    Code:
       0: new           #93                 // class okhttp3/internal/ws/RealWebSocket
       3: dup
       4: aload_1
       5: aload_2
       6: new           #94                 // class java/util/Random
       9: dup
      10: invokespecial #95                 // Method java/util/Random."<init>":()V
      13: aload_0
      14: getfield      #72                 // Field pingInterval:I
      17: i2l
      18: invokespecial #96                 // Method okhttp3/internal/ws/RealWebSocket."<init>":(Lokhttp3/Request;Lokhttp3/WebSocketListener;Ljava/util/Random;J)V
      21: astore_3
      22: aload_3
      23: aload_0
      24: invokevirtual #97                 // Method okhttp3/internal/ws/RealWebSocket.connect:(Lokhttp3/OkHttpClient;)V
      27: aload_3
      28: areturn

  public okhttp3.OkHttpClient$Builder newBuilder();
    Code:
       0: new           #1                  // class okhttp3/OkHttpClient$Builder
       3: dup
       4: aload_0
       5: invokespecial #98                 // Method okhttp3/OkHttpClient$Builder."<init>":(Lokhttp3/OkHttpClient;)V
       8: areturn

  static {};
    Code:
       0: iconst_2
       1: anewarray     #99                 // class okhttp3/Protocol
       4: dup
       5: iconst_0
       6: getstatic     #100                // Field okhttp3/Protocol.HTTP_2:Lokhttp3/Protocol;
       9: aastore
      10: dup
      11: iconst_1
      12: getstatic     #101                // Field okhttp3/Protocol.HTTP_1_1:Lokhttp3/Protocol;
      15: aastore
      16: invokestatic  #102                // Method okhttp3/internal/Util.immutableList:([Ljava/lang/Object;)Ljava/util/List;
      19: putstatic     #103                // Field DEFAULT_PROTOCOLS:Ljava/util/List;
      22: iconst_2
      23: anewarray     #33                 // class okhttp3/ConnectionSpec
      26: dup
      27: iconst_0
      28: getstatic     #104                // Field okhttp3/ConnectionSpec.MODERN_TLS:Lokhttp3/ConnectionSpec;
      31: aastore
      32: dup
      33: iconst_1
      34: getstatic     #105                // Field okhttp3/ConnectionSpec.CLEARTEXT:Lokhttp3/ConnectionSpec;
      37: aastore
      38: invokestatic  #102                // Method okhttp3/internal/Util.immutableList:([Ljava/lang/Object;)Ljava/util/List;
      41: putstatic     #106                // Field DEFAULT_CONNECTION_SPECS:Ljava/util/List;
      44: new           #107                // class okhttp3/OkHttpClient$1
      47: dup
      48: invokespecial #108                // Method okhttp3/OkHttpClient$1."<init>":()V
      51: putstatic     #109                // Field okhttp3/internal/Internal.instance:Lokhttp3/internal/Internal;
      54: return
}
