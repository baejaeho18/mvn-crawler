Compiled from "OkHttpClient.java"
class okhttp3.OkHttpClient$1 extends okhttp3.internal.Internal {
  okhttp3.OkHttpClient$1();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method okhttp3/internal/Internal."<init>":()V
       4: return

  public void addLenient(okhttp3.Headers$Builder, java.lang.String);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #2                  // Method okhttp3/Headers$Builder.addLenient:(Ljava/lang/String;)Lokhttp3/Headers$Builder;
       5: pop
       6: return

  public void addLenient(okhttp3.Headers$Builder, java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokevirtual #3                  // Method okhttp3/Headers$Builder.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;
       6: pop
       7: return

  public okhttp3.internal.connection.RealConnectionPool realConnectionPool(okhttp3.ConnectionPool);
    Code:
       0: aload_1
       1: getfield      #4                  // Field okhttp3/ConnectionPool.delegate:Lokhttp3/internal/connection/RealConnectionPool;
       4: areturn

  public boolean equalsNonHost(okhttp3.Address, okhttp3.Address);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #5                  // Method okhttp3/Address.equalsNonHost:(Lokhttp3/Address;)Z
       5: ireturn

  public int code(okhttp3.Response$Builder);
    Code:
       0: aload_1
       1: getfield      #6                  // Field okhttp3/Response$Builder.code:I
       4: ireturn

  public void apply(okhttp3.ConnectionSpec, javax.net.ssl.SSLSocket, boolean);
    Code:
       0: aload_1
       1: aload_2
       2: iload_3
       3: invokevirtual #7                  // Method okhttp3/ConnectionSpec.apply:(Ljavax/net/ssl/SSLSocket;Z)V
       6: return

  public okhttp3.Call newWebSocketCall(okhttp3.OkHttpClient, okhttp3.Request);
    Code:
       0: aload_1
       1: aload_2
       2: iconst_1
       3: invokestatic  #8                  // Method okhttp3/RealCall.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;
       6: areturn

  public void initExchange(okhttp3.Response$Builder, okhttp3.internal.connection.Exchange);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #9                  // Method okhttp3/Response$Builder.initExchange:(Lokhttp3/internal/connection/Exchange;)V
       5: return

  public okhttp3.internal.connection.Exchange exchange(okhttp3.Response);
    Code:
       0: aload_1
       1: getfield      #10                 // Field okhttp3/Response.exchange:Lokhttp3/internal/connection/Exchange;
       4: areturn
}
