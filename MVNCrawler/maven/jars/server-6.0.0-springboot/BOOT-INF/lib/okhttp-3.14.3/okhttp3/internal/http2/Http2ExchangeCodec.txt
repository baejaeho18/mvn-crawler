Compiled from "Http2ExchangeCodec.java"
public final class okhttp3.internal.http2.Http2ExchangeCodec implements okhttp3.internal.http.ExchangeCodec {
  private static final java.lang.String CONNECTION;

  private static final java.lang.String HOST;

  private static final java.lang.String KEEP_ALIVE;

  private static final java.lang.String PROXY_CONNECTION;

  private static final java.lang.String TRANSFER_ENCODING;

  private static final java.lang.String TE;

  private static final java.lang.String ENCODING;

  private static final java.lang.String UPGRADE;

  private static final java.util.List<java.lang.String> HTTP_2_SKIPPED_REQUEST_HEADERS;

  private static final java.util.List<java.lang.String> HTTP_2_SKIPPED_RESPONSE_HEADERS;

  private final okhttp3.Interceptor$Chain chain;

  private final okhttp3.internal.connection.RealConnection realConnection;

  private final okhttp3.internal.http2.Http2Connection connection;

  private volatile okhttp3.internal.http2.Http2Stream stream;

  private final okhttp3.Protocol protocol;

  private volatile boolean canceled;

  public okhttp3.internal.http2.Http2ExchangeCodec(okhttp3.OkHttpClient, okhttp3.internal.connection.RealConnection, okhttp3.Interceptor$Chain, okhttp3.internal.http2.Http2Connection);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_2
       6: putfield      #4                  // Field realConnection:Lokhttp3/internal/connection/RealConnection;
       9: aload_0
      10: aload_3
      11: putfield      #5                  // Field chain:Lokhttp3/Interceptor$Chain;
      14: aload_0
      15: aload         4
      17: putfield      #6                  // Field connection:Lokhttp3/internal/http2/Http2Connection;
      20: aload_0
      21: aload_1
      22: invokevirtual #7                  // Method okhttp3/OkHttpClient.protocols:()Ljava/util/List;
      25: getstatic     #8                  // Field okhttp3/Protocol.H2_PRIOR_KNOWLEDGE:Lokhttp3/Protocol;
      28: invokeinterface #9,  2            // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      33: ifeq          42
      36: getstatic     #8                  // Field okhttp3/Protocol.H2_PRIOR_KNOWLEDGE:Lokhttp3/Protocol;
      39: goto          45
      42: getstatic     #10                 // Field okhttp3/Protocol.HTTP_2:Lokhttp3/Protocol;
      45: putfield      #11                 // Field protocol:Lokhttp3/Protocol;
      48: return

  public okhttp3.internal.connection.RealConnection connection();
    Code:
       0: aload_0
       1: getfield      #4                  // Field realConnection:Lokhttp3/internal/connection/RealConnection;
       4: areturn

  public okio.Sink createRequestBody(okhttp3.Request, long);
    Code:
       0: aload_0
       1: getfield      #12                 // Field stream:Lokhttp3/internal/http2/Http2Stream;
       4: invokevirtual #13                 // Method okhttp3/internal/http2/Http2Stream.getSink:()Lokio/Sink;
       7: areturn

  public void writeRequestHeaders(okhttp3.Request) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field stream:Lokhttp3/internal/http2/Http2Stream;
       4: ifnull        8
       7: return
       8: aload_1
       9: invokevirtual #14                 // Method okhttp3/Request.body:()Lokhttp3/RequestBody;
      12: ifnull        19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: istore_2
      21: aload_1
      22: invokestatic  #15                 // Method http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;
      25: astore_3
      26: aload_0
      27: aload_0
      28: getfield      #6                  // Field connection:Lokhttp3/internal/http2/Http2Connection;
      31: aload_3
      32: iload_2
      33: invokevirtual #16                 // Method okhttp3/internal/http2/Http2Connection.newStream:(Ljava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;
      36: putfield      #12                 // Field stream:Lokhttp3/internal/http2/Http2Stream;
      39: aload_0
      40: getfield      #17                 // Field canceled:Z
      43: ifeq          66
      46: aload_0
      47: getfield      #12                 // Field stream:Lokhttp3/internal/http2/Http2Stream;
      50: getstatic     #18                 // Field okhttp3/internal/http2/ErrorCode.CANCEL:Lokhttp3/internal/http2/ErrorCode;
      53: invokevirtual #19                 // Method okhttp3/internal/http2/Http2Stream.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V
      56: new           #20                 // class java/io/IOException
      59: dup
      60: ldc           #21                 // String Canceled
      62: invokespecial #22                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      65: athrow
      66: aload_0
      67: getfield      #12                 // Field stream:Lokhttp3/internal/http2/Http2Stream;
      70: invokevirtual #23                 // Method okhttp3/internal/http2/Http2Stream.readTimeout:()Lokio/Timeout;
      73: aload_0
      74: getfield      #5                  // Field chain:Lokhttp3/Interceptor$Chain;
      77: invokeinterface #24,  1           // InterfaceMethod okhttp3/Interceptor$Chain.readTimeoutMillis:()I
      82: i2l
      83: getstatic     #25                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      86: invokevirtual #26                 // Method okio/Timeout.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;
      89: pop
      90: aload_0
      91: getfield      #12                 // Field stream:Lokhttp3/internal/http2/Http2Stream;
      94: invokevirtual #27                 // Method okhttp3/internal/http2/Http2Stream.writeTimeout:()Lokio/Timeout;
      97: aload_0
      98: getfield      #5                  // Field chain:Lokhttp3/Interceptor$Chain;
     101: invokeinterface #28,  1           // InterfaceMethod okhttp3/Interceptor$Chain.writeTimeoutMillis:()I
     106: i2l
     107: getstatic     #25                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     110: invokevirtual #26                 // Method okio/Timeout.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;
     113: pop
     114: return

  public void flushRequest() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field connection:Lokhttp3/internal/http2/Http2Connection;
       4: invokevirtual #29                 // Method okhttp3/internal/http2/Http2Connection.flush:()V
       7: return

  public void finishRequest() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field stream:Lokhttp3/internal/http2/Http2Stream;
       4: invokevirtual #13                 // Method okhttp3/internal/http2/Http2Stream.getSink:()Lokio/Sink;
       7: invokeinterface #30,  1           // InterfaceMethod okio/Sink.close:()V
      12: return

  public okhttp3.Response$Builder readResponseHeaders(boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field stream:Lokhttp3/internal/http2/Http2Stream;
       4: invokevirtual #31                 // Method okhttp3/internal/http2/Http2Stream.takeHeaders:()Lokhttp3/Headers;
       7: astore_2
       8: aload_2
       9: aload_0
      10: getfield      #11                 // Field protocol:Lokhttp3/Protocol;
      13: invokestatic  #32                 // Method readHttp2HeadersList:(Lokhttp3/Headers;Lokhttp3/Protocol;)Lokhttp3/Response$Builder;
      16: astore_3
      17: iload_1
      18: ifeq          35
      21: getstatic     #33                 // Field okhttp3/internal/Internal.instance:Lokhttp3/internal/Internal;
      24: aload_3
      25: invokevirtual #34                 // Method okhttp3/internal/Internal.code:(Lokhttp3/Response$Builder;)I
      28: bipush        100
      30: if_icmpne     35
      33: aconst_null
      34: areturn
      35: aload_3
      36: areturn

  public static java.util.List<okhttp3.internal.http2.Header> http2HeadersList(okhttp3.Request);
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method okhttp3/Request.headers:()Lokhttp3/Headers;
       4: astore_1
       5: new           #36                 // class java/util/ArrayList
       8: dup
       9: aload_1
      10: invokevirtual #37                 // Method okhttp3/Headers.size:()I
      13: iconst_4
      14: iadd
      15: invokespecial #38                 // Method java/util/ArrayList."<init>":(I)V
      18: astore_2
      19: aload_2
      20: new           #1                  // class okhttp3/internal/http2/Header
      23: dup
      24: getstatic     #39                 // Field okhttp3/internal/http2/Header.TARGET_METHOD:Lokio/ByteString;
      27: aload_0
      28: invokevirtual #40                 // Method okhttp3/Request.method:()Ljava/lang/String;
      31: invokespecial #41                 // Method okhttp3/internal/http2/Header."<init>":(Lokio/ByteString;Ljava/lang/String;)V
      34: invokeinterface #42,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      39: pop
      40: aload_2
      41: new           #1                  // class okhttp3/internal/http2/Header
      44: dup
      45: getstatic     #43                 // Field okhttp3/internal/http2/Header.TARGET_PATH:Lokio/ByteString;
      48: aload_0
      49: invokevirtual #44                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
      52: invokestatic  #45                 // Method okhttp3/internal/http/RequestLine.requestPath:(Lokhttp3/HttpUrl;)Ljava/lang/String;
      55: invokespecial #41                 // Method okhttp3/internal/http2/Header."<init>":(Lokio/ByteString;Ljava/lang/String;)V
      58: invokeinterface #42,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      63: pop
      64: aload_0
      65: ldc           #46                 // String Host
      67: invokevirtual #47                 // Method okhttp3/Request.header:(Ljava/lang/String;)Ljava/lang/String;
      70: astore_3
      71: aload_3
      72: ifnull        93
      75: aload_2
      76: new           #1                  // class okhttp3/internal/http2/Header
      79: dup
      80: getstatic     #48                 // Field okhttp3/internal/http2/Header.TARGET_AUTHORITY:Lokio/ByteString;
      83: aload_3
      84: invokespecial #41                 // Method okhttp3/internal/http2/Header."<init>":(Lokio/ByteString;Ljava/lang/String;)V
      87: invokeinterface #42,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      92: pop
      93: aload_2
      94: new           #1                  // class okhttp3/internal/http2/Header
      97: dup
      98: getstatic     #49                 // Field okhttp3/internal/http2/Header.TARGET_SCHEME:Lokio/ByteString;
     101: aload_0
     102: invokevirtual #44                 // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
     105: invokevirtual #50                 // Method okhttp3/HttpUrl.scheme:()Ljava/lang/String;
     108: invokespecial #41                 // Method okhttp3/internal/http2/Header."<init>":(Lokio/ByteString;Ljava/lang/String;)V
     111: invokeinterface #42,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     116: pop
     117: iconst_0
     118: istore        4
     120: aload_1
     121: invokevirtual #37                 // Method okhttp3/Headers.size:()I
     124: istore        5
     126: iload         4
     128: iload         5
     130: if_icmpge     212
     133: aload_1
     134: iload         4
     136: invokevirtual #51                 // Method okhttp3/Headers.name:(I)Ljava/lang/String;
     139: getstatic     #52                 // Field java/util/Locale.US:Ljava/util/Locale;
     142: invokevirtual #53                 // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
     145: astore        6
     147: getstatic     #54                 // Field HTTP_2_SKIPPED_REQUEST_HEADERS:Ljava/util/List;
     150: aload         6
     152: invokeinterface #9,  2            // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
     157: ifeq          184
     160: aload         6
     162: ldc           #56                 // String te
     164: invokevirtual #57                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     167: ifeq          206
     170: aload_1
     171: iload         4
     173: invokevirtual #58                 // Method okhttp3/Headers.value:(I)Ljava/lang/String;
     176: ldc           #59                 // String trailers
     178: invokevirtual #57                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     181: ifeq          206
     184: aload_2
     185: new           #1                  // class okhttp3/internal/http2/Header
     188: dup
     189: aload         6
     191: aload_1
     192: iload         4
     194: invokevirtual #58                 // Method okhttp3/Headers.value:(I)Ljava/lang/String;
     197: invokespecial #60                 // Method okhttp3/internal/http2/Header."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     200: invokeinterface #42,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     205: pop
     206: iinc          4, 1
     209: goto          126
     212: aload_2
     213: areturn

  public static okhttp3.Response$Builder readHttp2HeadersList(okhttp3.Headers, okhttp3.Protocol) throws java.io.IOException;
    Code:
       0: aconst_null
       1: astore_2
       2: new           #61                 // class okhttp3/Headers$Builder
       5: dup
       6: invokespecial #62                 // Method okhttp3/Headers$Builder."<init>":()V
       9: astore_3
      10: iconst_0
      11: istore        4
      13: aload_0
      14: invokevirtual #37                 // Method okhttp3/Headers.size:()I
      17: istore        5
      19: iload         4
      21: iload         5
      23: if_icmpge     109
      26: aload_0
      27: iload         4
      29: invokevirtual #51                 // Method okhttp3/Headers.name:(I)Ljava/lang/String;
      32: astore        6
      34: aload_0
      35: iload         4
      37: invokevirtual #58                 // Method okhttp3/Headers.value:(I)Ljava/lang/String;
      40: astore        7
      42: aload         6
      44: ldc           #63                 // String :status
      46: invokevirtual #57                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      49: ifeq          79
      52: new           #64                 // class java/lang/StringBuilder
      55: dup
      56: invokespecial #65                 // Method java/lang/StringBuilder."<init>":()V
      59: ldc           #66                 // String HTTP/1.1
      61: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: aload         7
      66: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: invokevirtual #68                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      72: invokestatic  #69                 // Method okhttp3/internal/http/StatusLine.parse:(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine;
      75: astore_2
      76: goto          103
      79: getstatic     #70                 // Field HTTP_2_SKIPPED_RESPONSE_HEADERS:Ljava/util/List;
      82: aload         6
      84: invokeinterface #9,  2            // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      89: ifne          103
      92: getstatic     #33                 // Field okhttp3/internal/Internal.instance:Lokhttp3/internal/Internal;
      95: aload_3
      96: aload         6
      98: aload         7
     100: invokevirtual #71                 // Method okhttp3/internal/Internal.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V
     103: iinc          4, 1
     106: goto          19
     109: aload_2
     110: ifnonnull     123
     113: new           #72                 // class java/net/ProtocolException
     116: dup
     117: ldc           #73                 // String Expected \':status\' header not present
     119: invokespecial #74                 // Method java/net/ProtocolException."<init>":(Ljava/lang/String;)V
     122: athrow
     123: new           #75                 // class okhttp3/Response$Builder
     126: dup
     127: invokespecial #76                 // Method okhttp3/Response$Builder."<init>":()V
     130: aload_1
     131: invokevirtual #77                 // Method okhttp3/Response$Builder.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;
     134: aload_2
     135: getfield      #78                 // Field okhttp3/internal/http/StatusLine.code:I
     138: invokevirtual #79                 // Method okhttp3/Response$Builder.code:(I)Lokhttp3/Response$Builder;
     141: aload_2
     142: getfield      #80                 // Field okhttp3/internal/http/StatusLine.message:Ljava/lang/String;
     145: invokevirtual #81                 // Method okhttp3/Response$Builder.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;
     148: aload_3
     149: invokevirtual #82                 // Method okhttp3/Headers$Builder.build:()Lokhttp3/Headers;
     152: invokevirtual #83                 // Method okhttp3/Response$Builder.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;
     155: areturn

  public long reportedContentLength(okhttp3.Response);
    Code:
       0: aload_1
       1: invokestatic  #84                 // Method okhttp3/internal/http/HttpHeaders.contentLength:(Lokhttp3/Response;)J
       4: lreturn

  public okio.Source openResponseBodySource(okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #12                 // Field stream:Lokhttp3/internal/http2/Http2Stream;
       4: invokevirtual #85                 // Method okhttp3/internal/http2/Http2Stream.getSource:()Lokio/Source;
       7: areturn

  public okhttp3.Headers trailers() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field stream:Lokhttp3/internal/http2/Http2Stream;
       4: invokevirtual #86                 // Method okhttp3/internal/http2/Http2Stream.trailers:()Lokhttp3/Headers;
       7: areturn

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #17                 // Field canceled:Z
       5: aload_0
       6: getfield      #12                 // Field stream:Lokhttp3/internal/http2/Http2Stream;
       9: ifnull        22
      12: aload_0
      13: getfield      #12                 // Field stream:Lokhttp3/internal/http2/Http2Stream;
      16: getstatic     #18                 // Field okhttp3/internal/http2/ErrorCode.CANCEL:Lokhttp3/internal/http2/ErrorCode;
      19: invokevirtual #19                 // Method okhttp3/internal/http2/Http2Stream.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V
      22: return

  static {};
    Code:
       0: bipush        12
       2: anewarray     #87                 // class java/lang/String
       5: dup
       6: iconst_0
       7: ldc           #88                 // String connection
       9: aastore
      10: dup
      11: iconst_1
      12: ldc           #89                 // String host
      14: aastore
      15: dup
      16: iconst_2
      17: ldc           #90                 // String keep-alive
      19: aastore
      20: dup
      21: iconst_3
      22: ldc           #91                 // String proxy-connection
      24: aastore
      25: dup
      26: iconst_4
      27: ldc           #56                 // String te
      29: aastore
      30: dup
      31: iconst_5
      32: ldc           #92                 // String transfer-encoding
      34: aastore
      35: dup
      36: bipush        6
      38: ldc           #93                 // String encoding
      40: aastore
      41: dup
      42: bipush        7
      44: ldc           #94                 // String upgrade
      46: aastore
      47: dup
      48: bipush        8
      50: ldc           #95                 // String :method
      52: aastore
      53: dup
      54: bipush        9
      56: ldc           #96                 // String :path
      58: aastore
      59: dup
      60: bipush        10
      62: ldc           #97                 // String :scheme
      64: aastore
      65: dup
      66: bipush        11
      68: ldc           #98                 // String :authority
      70: aastore
      71: invokestatic  #99                 // Method okhttp3/internal/Util.immutableList:([Ljava/lang/Object;)Ljava/util/List;
      74: putstatic     #54                 // Field HTTP_2_SKIPPED_REQUEST_HEADERS:Ljava/util/List;
      77: bipush        8
      79: anewarray     #87                 // class java/lang/String
      82: dup
      83: iconst_0
      84: ldc           #88                 // String connection
      86: aastore
      87: dup
      88: iconst_1
      89: ldc           #89                 // String host
      91: aastore
      92: dup
      93: iconst_2
      94: ldc           #90                 // String keep-alive
      96: aastore
      97: dup
      98: iconst_3
      99: ldc           #91                 // String proxy-connection
     101: aastore
     102: dup
     103: iconst_4
     104: ldc           #56                 // String te
     106: aastore
     107: dup
     108: iconst_5
     109: ldc           #92                 // String transfer-encoding
     111: aastore
     112: dup
     113: bipush        6
     115: ldc           #93                 // String encoding
     117: aastore
     118: dup
     119: bipush        7
     121: ldc           #94                 // String upgrade
     123: aastore
     124: invokestatic  #99                 // Method okhttp3/internal/Util.immutableList:([Ljava/lang/Object;)Ljava/util/List;
     127: putstatic     #70                 // Field HTTP_2_SKIPPED_RESPONSE_HEADERS:Ljava/util/List;
     130: return
}
