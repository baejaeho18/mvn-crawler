Compiled from "Http2Connection.java"
class okhttp3.internal.http2.Http2Connection$ReaderRunnable extends okhttp3.internal.NamedRunnable implements okhttp3.internal.http2.Http2Reader$Handler {
  final okhttp3.internal.http2.Http2Reader reader;

  final okhttp3.internal.http2.Http2Connection this$0;

  okhttp3.internal.http2.Http2Connection$ReaderRunnable(okhttp3.internal.http2.Http2Connection, okhttp3.internal.http2.Http2Reader);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       5: aload_0
       6: ldc           #2                  // String OkHttp %s
       8: iconst_1
       9: anewarray     #3                  // class java/lang/Object
      12: dup
      13: iconst_0
      14: aload_1
      15: getfield      #4                  // Field okhttp3/internal/http2/Http2Connection.connectionName:Ljava/lang/String;
      18: aastore
      19: invokespecial #5                  // Method okhttp3/internal/NamedRunnable."<init>":(Ljava/lang/String;[Ljava/lang/Object;)V
      22: aload_0
      23: aload_2
      24: putfield      #6                  // Field reader:Lokhttp3/internal/http2/Http2Reader;
      27: return

  protected void execute();
    Code:
       0: getstatic     #7                  // Field okhttp3/internal/http2/ErrorCode.INTERNAL_ERROR:Lokhttp3/internal/http2/ErrorCode;
       3: astore_1
       4: getstatic     #7                  // Field okhttp3/internal/http2/ErrorCode.INTERNAL_ERROR:Lokhttp3/internal/http2/ErrorCode;
       7: astore_2
       8: aconst_null
       9: astore_3
      10: aload_0
      11: getfield      #6                  // Field reader:Lokhttp3/internal/http2/Http2Reader;
      14: aload_0
      15: invokevirtual #8                  // Method okhttp3/internal/http2/Http2Reader.readConnectionPreface:(Lokhttp3/internal/http2/Http2Reader$Handler;)V
      18: aload_0
      19: getfield      #6                  // Field reader:Lokhttp3/internal/http2/Http2Reader;
      22: iconst_0
      23: aload_0
      24: invokevirtual #9                  // Method okhttp3/internal/http2/Http2Reader.nextFrame:(ZLokhttp3/internal/http2/Http2Reader$Handler;)Z
      27: ifeq          33
      30: goto          18
      33: getstatic     #10                 // Field okhttp3/internal/http2/ErrorCode.NO_ERROR:Lokhttp3/internal/http2/ErrorCode;
      36: astore_1
      37: getstatic     #11                 // Field okhttp3/internal/http2/ErrorCode.CANCEL:Lokhttp3/internal/http2/ErrorCode;
      40: astore_2
      41: aload_0
      42: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      45: aload_1
      46: aload_2
      47: aload_3
      48: invokevirtual #12                 // Method okhttp3/internal/http2/Http2Connection.close:(Lokhttp3/internal/http2/ErrorCode;Lokhttp3/internal/http2/ErrorCode;Ljava/io/IOException;)V
      51: aload_0
      52: getfield      #6                  // Field reader:Lokhttp3/internal/http2/Http2Reader;
      55: invokestatic  #13                 // Method okhttp3/internal/Util.closeQuietly:(Ljava/io/Closeable;)V
      58: goto          116
      61: astore        4
      63: aload         4
      65: astore_3
      66: getstatic     #15                 // Field okhttp3/internal/http2/ErrorCode.PROTOCOL_ERROR:Lokhttp3/internal/http2/ErrorCode;
      69: astore_1
      70: getstatic     #15                 // Field okhttp3/internal/http2/ErrorCode.PROTOCOL_ERROR:Lokhttp3/internal/http2/ErrorCode;
      73: astore_2
      74: aload_0
      75: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      78: aload_1
      79: aload_2
      80: aload_3
      81: invokevirtual #12                 // Method okhttp3/internal/http2/Http2Connection.close:(Lokhttp3/internal/http2/ErrorCode;Lokhttp3/internal/http2/ErrorCode;Ljava/io/IOException;)V
      84: aload_0
      85: getfield      #6                  // Field reader:Lokhttp3/internal/http2/Http2Reader;
      88: invokestatic  #13                 // Method okhttp3/internal/Util.closeQuietly:(Ljava/io/Closeable;)V
      91: goto          116
      94: astore        5
      96: aload_0
      97: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     100: aload_1
     101: aload_2
     102: aload_3
     103: invokevirtual #12                 // Method okhttp3/internal/http2/Http2Connection.close:(Lokhttp3/internal/http2/ErrorCode;Lokhttp3/internal/http2/ErrorCode;Ljava/io/IOException;)V
     106: aload_0
     107: getfield      #6                  // Field reader:Lokhttp3/internal/http2/Http2Reader;
     110: invokestatic  #13                 // Method okhttp3/internal/Util.closeQuietly:(Ljava/io/Closeable;)V
     113: aload         5
     115: athrow
     116: return
    Exception table:
       from    to  target type
          10    41    61   Class java/io/IOException
          10    41    94   any
          61    74    94   any
          94    96    94   any

  public void data(boolean, int, okio.BufferedSource, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       4: iload_2
       5: invokevirtual #16                 // Method okhttp3/internal/http2/Http2Connection.pushedStream:(I)Z
       8: ifeq          24
      11: aload_0
      12: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      15: iload_2
      16: aload_3
      17: iload         4
      19: iload_1
      20: invokevirtual #17                 // Method okhttp3/internal/http2/Http2Connection.pushDataLater:(ILokio/BufferedSource;IZ)V
      23: return
      24: aload_0
      25: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      28: iload_2
      29: invokevirtual #18                 // Method okhttp3/internal/http2/Http2Connection.getStream:(I)Lokhttp3/internal/http2/Http2Stream;
      32: astore        5
      34: aload         5
      36: ifnonnull     70
      39: aload_0
      40: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      43: iload_2
      44: getstatic     #15                 // Field okhttp3/internal/http2/ErrorCode.PROTOCOL_ERROR:Lokhttp3/internal/http2/ErrorCode;
      47: invokevirtual #19                 // Method okhttp3/internal/http2/Http2Connection.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V
      50: aload_0
      51: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      54: iload         4
      56: i2l
      57: invokevirtual #20                 // Method okhttp3/internal/http2/Http2Connection.updateConnectionFlowControl:(J)V
      60: aload_3
      61: iload         4
      63: i2l
      64: invokeinterface #21,  3           // InterfaceMethod okio/BufferedSource.skip:(J)V
      69: return
      70: aload         5
      72: aload_3
      73: iload         4
      75: invokevirtual #22                 // Method okhttp3/internal/http2/Http2Stream.receiveData:(Lokio/BufferedSource;I)V
      78: iload_1
      79: ifeq          91
      82: aload         5
      84: getstatic     #23                 // Field okhttp3/internal/Util.EMPTY_HEADERS:Lokhttp3/Headers;
      87: iconst_1
      88: invokevirtual #24                 // Method okhttp3/internal/http2/Http2Stream.receiveHeaders:(Lokhttp3/Headers;Z)V
      91: return

  public void headers(boolean, int, int, java.util.List<okhttp3.internal.http2.Header>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       4: iload_2
       5: invokevirtual #16                 // Method okhttp3/internal/http2/Http2Connection.pushedStream:(I)Z
       8: ifeq          23
      11: aload_0
      12: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      15: iload_2
      16: aload         4
      18: iload_1
      19: invokevirtual #25                 // Method okhttp3/internal/http2/Http2Connection.pushHeadersLater:(ILjava/util/List;Z)V
      22: return
      23: aload_0
      24: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      27: dup
      28: astore        6
      30: monitorenter
      31: aload_0
      32: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      35: iload_2
      36: invokevirtual #18                 // Method okhttp3/internal/http2/Http2Connection.getStream:(I)Lokhttp3/internal/http2/Http2Stream;
      39: astore        5
      41: aload         5
      43: ifnonnull     191
      46: aload_0
      47: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      50: getfield      #26                 // Field okhttp3/internal/http2/Http2Connection.shutdown:Z
      53: ifeq          60
      56: aload         6
      58: monitorexit
      59: return
      60: iload_2
      61: aload_0
      62: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      65: getfield      #27                 // Field okhttp3/internal/http2/Http2Connection.lastGoodStreamId:I
      68: if_icmpgt     75
      71: aload         6
      73: monitorexit
      74: return
      75: iload_2
      76: iconst_2
      77: irem
      78: aload_0
      79: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      82: getfield      #28                 // Field okhttp3/internal/http2/Http2Connection.nextStreamId:I
      85: iconst_2
      86: irem
      87: if_icmpne     94
      90: aload         6
      92: monitorexit
      93: return
      94: aload         4
      96: invokestatic  #29                 // Method okhttp3/internal/Util.toHeaders:(Ljava/util/List;)Lokhttp3/Headers;
      99: astore        7
     101: new           #30                 // class okhttp3/internal/http2/Http2Stream
     104: dup
     105: iload_2
     106: aload_0
     107: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     110: iconst_0
     111: iload_1
     112: aload         7
     114: invokespecial #31                 // Method okhttp3/internal/http2/Http2Stream."<init>":(ILokhttp3/internal/http2/Http2Connection;ZZLokhttp3/Headers;)V
     117: astore        8
     119: aload_0
     120: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     123: iload_2
     124: putfield      #27                 // Field okhttp3/internal/http2/Http2Connection.lastGoodStreamId:I
     127: aload_0
     128: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     131: getfield      #32                 // Field okhttp3/internal/http2/Http2Connection.streams:Ljava/util/Map;
     134: iload_2
     135: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     138: aload         8
     140: invokeinterface #34,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     145: pop
     146: invokestatic  #35                 // Method okhttp3/internal/http2/Http2Connection.access$100:()Ljava/util/concurrent/ExecutorService;
     149: new           #36                 // class okhttp3/internal/http2/Http2Connection$ReaderRunnable$1
     152: dup
     153: aload_0
     154: ldc           #37                 // String OkHttp %s stream %d
     156: iconst_2
     157: anewarray     #3                  // class java/lang/Object
     160: dup
     161: iconst_0
     162: aload_0
     163: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     166: getfield      #4                  // Field okhttp3/internal/http2/Http2Connection.connectionName:Ljava/lang/String;
     169: aastore
     170: dup
     171: iconst_1
     172: iload_2
     173: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     176: aastore
     177: aload         8
     179: invokespecial #38                 // Method okhttp3/internal/http2/Http2Connection$ReaderRunnable$1."<init>":(Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;Ljava/lang/String;[Ljava/lang/Object;Lokhttp3/internal/http2/Http2Stream;)V
     182: invokeinterface #39,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
     187: aload         6
     189: monitorexit
     190: return
     191: aload         6
     193: monitorexit
     194: goto          205
     197: astore        9
     199: aload         6
     201: monitorexit
     202: aload         9
     204: athrow
     205: aload         5
     207: aload         4
     209: invokestatic  #29                 // Method okhttp3/internal/Util.toHeaders:(Ljava/util/List;)Lokhttp3/Headers;
     212: iload_1
     213: invokevirtual #24                 // Method okhttp3/internal/http2/Http2Stream.receiveHeaders:(Lokhttp3/Headers;Z)V
     216: return
    Exception table:
       from    to  target type
          31    59   197   any
          60    74   197   any
          75    93   197   any
          94   190   197   any
         191   194   197   any
         197   202   197   any

  public void rstStream(int, okhttp3.internal.http2.ErrorCode);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       4: iload_1
       5: invokevirtual #16                 // Method okhttp3/internal/http2/Http2Connection.pushedStream:(I)Z
       8: ifeq          21
      11: aload_0
      12: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      15: iload_1
      16: aload_2
      17: invokevirtual #40                 // Method okhttp3/internal/http2/Http2Connection.pushResetLater:(ILokhttp3/internal/http2/ErrorCode;)V
      20: return
      21: aload_0
      22: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      25: iload_1
      26: invokevirtual #41                 // Method okhttp3/internal/http2/Http2Connection.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;
      29: astore_3
      30: aload_3
      31: ifnull        39
      34: aload_3
      35: aload_2
      36: invokevirtual #42                 // Method okhttp3/internal/http2/Http2Stream.receiveRstStream:(Lokhttp3/internal/http2/ErrorCode;)V
      39: return

  public void settings(boolean, okhttp3.internal.http2.Settings);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       4: invokestatic  #43                 // Method okhttp3/internal/http2/Http2Connection.access$200:(Lokhttp3/internal/http2/Http2Connection;)Ljava/util/concurrent/ScheduledExecutorService;
       7: new           #44                 // class okhttp3/internal/http2/Http2Connection$ReaderRunnable$2
      10: dup
      11: aload_0
      12: ldc           #45                 // String OkHttp %s ACK Settings
      14: iconst_1
      15: anewarray     #3                  // class java/lang/Object
      18: dup
      19: iconst_0
      20: aload_0
      21: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      24: getfield      #4                  // Field okhttp3/internal/http2/Http2Connection.connectionName:Ljava/lang/String;
      27: aastore
      28: iload_1
      29: aload_2
      30: invokespecial #46                 // Method okhttp3/internal/http2/Http2Connection$ReaderRunnable$2."<init>":(Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;Ljava/lang/String;[Ljava/lang/Object;ZLokhttp3/internal/http2/Settings;)V
      33: invokeinterface #47,  2           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.execute:(Ljava/lang/Runnable;)V
      38: goto          42
      41: astore_3
      42: return
    Exception table:
       from    to  target type
           0    38    41   Class java/util/concurrent/RejectedExecutionException

  void applyAndAckSettings(boolean, okhttp3.internal.http2.Settings);
    Code:
       0: lconst_0
       1: lstore_3
       2: aconst_null
       3: astore        5
       5: aload_0
       6: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       9: getfield      #49                 // Field okhttp3/internal/http2/Http2Connection.writer:Lokhttp3/internal/http2/Http2Writer;
      12: dup
      13: astore        6
      15: monitorenter
      16: aload_0
      17: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      20: dup
      21: astore        7
      23: monitorenter
      24: aload_0
      25: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      28: getfield      #50                 // Field okhttp3/internal/http2/Http2Connection.peerSettings:Lokhttp3/internal/http2/Settings;
      31: invokevirtual #51                 // Method okhttp3/internal/http2/Settings.getInitialWindowSize:()I
      34: istore        8
      36: iload_1
      37: ifeq          50
      40: aload_0
      41: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      44: getfield      #50                 // Field okhttp3/internal/http2/Http2Connection.peerSettings:Lokhttp3/internal/http2/Settings;
      47: invokevirtual #52                 // Method okhttp3/internal/http2/Settings.clear:()V
      50: aload_0
      51: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      54: getfield      #50                 // Field okhttp3/internal/http2/Http2Connection.peerSettings:Lokhttp3/internal/http2/Settings;
      57: aload_2
      58: invokevirtual #53                 // Method okhttp3/internal/http2/Settings.merge:(Lokhttp3/internal/http2/Settings;)V
      61: aload_0
      62: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      65: getfield      #50                 // Field okhttp3/internal/http2/Http2Connection.peerSettings:Lokhttp3/internal/http2/Settings;
      68: invokevirtual #51                 // Method okhttp3/internal/http2/Settings.getInitialWindowSize:()I
      71: istore        9
      73: iload         9
      75: iconst_m1
      76: if_icmpeq     149
      79: iload         9
      81: iload         8
      83: if_icmpeq     149
      86: iload         9
      88: iload         8
      90: isub
      91: i2l
      92: lstore_3
      93: aload_0
      94: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      97: getfield      #32                 // Field okhttp3/internal/http2/Http2Connection.streams:Ljava/util/Map;
     100: invokeinterface #54,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
     105: ifne          146
     108: aload_0
     109: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     112: getfield      #32                 // Field okhttp3/internal/http2/Http2Connection.streams:Ljava/util/Map;
     115: invokeinterface #55,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
     120: aload_0
     121: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     124: getfield      #32                 // Field okhttp3/internal/http2/Http2Connection.streams:Ljava/util/Map;
     127: invokeinterface #56,  1           // InterfaceMethod java/util/Map.size:()I
     132: anewarray     #30                 // class okhttp3/internal/http2/Http2Stream
     135: invokeinterface #57,  2           // InterfaceMethod java/util/Collection.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     140: checkcast     #58                 // class "[Lokhttp3/internal/http2/Http2Stream;"
     143: goto          147
     146: aconst_null
     147: astore        5
     149: aload         7
     151: monitorexit
     152: goto          163
     155: astore        10
     157: aload         7
     159: monitorexit
     160: aload         10
     162: athrow
     163: aload_0
     164: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     167: getfield      #49                 // Field okhttp3/internal/http2/Http2Connection.writer:Lokhttp3/internal/http2/Http2Writer;
     170: aload_0
     171: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     174: getfield      #50                 // Field okhttp3/internal/http2/Http2Connection.peerSettings:Lokhttp3/internal/http2/Settings;
     177: invokevirtual #59                 // Method okhttp3/internal/http2/Http2Writer.applyAndAckSettings:(Lokhttp3/internal/http2/Settings;)V
     180: goto          194
     183: astore        7
     185: aload_0
     186: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     189: aload         7
     191: invokestatic  #60                 // Method okhttp3/internal/http2/Http2Connection.access$000:(Lokhttp3/internal/http2/Http2Connection;Ljava/io/IOException;)V
     194: aload         6
     196: monitorexit
     197: goto          208
     200: astore        11
     202: aload         6
     204: monitorexit
     205: aload         11
     207: athrow
     208: aload         5
     210: ifnull        271
     213: aload         5
     215: astore        6
     217: aload         6
     219: arraylength
     220: istore        7
     222: iconst_0
     223: istore        8
     225: iload         8
     227: iload         7
     229: if_icmpge     271
     232: aload         6
     234: iload         8
     236: aaload
     237: astore        9
     239: aload         9
     241: dup
     242: astore        10
     244: monitorenter
     245: aload         9
     247: lload_3
     248: invokevirtual #61                 // Method okhttp3/internal/http2/Http2Stream.addBytesToWriteWindow:(J)V
     251: aload         10
     253: monitorexit
     254: goto          265
     257: astore        12
     259: aload         10
     261: monitorexit
     262: aload         12
     264: athrow
     265: iinc          8, 1
     268: goto          225
     271: invokestatic  #35                 // Method okhttp3/internal/http2/Http2Connection.access$100:()Ljava/util/concurrent/ExecutorService;
     274: new           #62                 // class okhttp3/internal/http2/Http2Connection$ReaderRunnable$3
     277: dup
     278: aload_0
     279: ldc           #63                 // String OkHttp %s settings
     281: iconst_1
     282: anewarray     #3                  // class java/lang/Object
     285: dup
     286: iconst_0
     287: aload_0
     288: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     291: getfield      #4                  // Field okhttp3/internal/http2/Http2Connection.connectionName:Ljava/lang/String;
     294: aastore
     295: invokespecial #64                 // Method okhttp3/internal/http2/Http2Connection$ReaderRunnable$3."<init>":(Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;Ljava/lang/String;[Ljava/lang/Object;)V
     298: invokeinterface #39,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
     303: return
    Exception table:
       from    to  target type
          24   152   155   any
         155   160   155   any
         163   180   183   Class java/io/IOException
          16   197   200   any
         200   205   200   any
         245   254   257   any
         257   262   257   any

  public void ackSettings();
    Code:
       0: return

  public void ping(boolean, int, int);
    Code:
       0: iload_1
       1: ifeq          45
       4: aload_0
       5: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       8: dup
       9: astore        4
      11: monitorenter
      12: aload_0
      13: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      16: iconst_0
      17: invokestatic  #65                 // Method okhttp3/internal/http2/Http2Connection.access$302:(Lokhttp3/internal/http2/Http2Connection;Z)Z
      20: pop
      21: aload_0
      22: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      25: invokevirtual #66                 // Method java/lang/Object.notifyAll:()V
      28: aload         4
      30: monitorexit
      31: goto          42
      34: astore        5
      36: aload         4
      38: monitorexit
      39: aload         5
      41: athrow
      42: goto          76
      45: aload_0
      46: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      49: invokestatic  #43                 // Method okhttp3/internal/http2/Http2Connection.access$200:(Lokhttp3/internal/http2/Http2Connection;)Ljava/util/concurrent/ScheduledExecutorService;
      52: new           #67                 // class okhttp3/internal/http2/Http2Connection$PingRunnable
      55: dup
      56: aload_0
      57: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      60: iconst_1
      61: iload_2
      62: iload_3
      63: invokespecial #68                 // Method okhttp3/internal/http2/Http2Connection$PingRunnable."<init>":(Lokhttp3/internal/http2/Http2Connection;ZII)V
      66: invokeinterface #47,  2           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.execute:(Ljava/lang/Runnable;)V
      71: goto          76
      74: astore        4
      76: return
    Exception table:
       from    to  target type
          12    31    34   any
          34    39    34   any
          45    71    74   Class java/util/concurrent/RejectedExecutionException

  public void goAway(int, okhttp3.internal.http2.ErrorCode, okio.ByteString);
    Code:
       0: aload_3
       1: invokevirtual #69                 // Method okio/ByteString.size:()I
       4: ifle          7
       7: aload_0
       8: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      11: dup
      12: astore        5
      14: monitorenter
      15: aload_0
      16: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      19: getfield      #32                 // Field okhttp3/internal/http2/Http2Connection.streams:Ljava/util/Map;
      22: invokeinterface #55,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      27: aload_0
      28: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      31: getfield      #32                 // Field okhttp3/internal/http2/Http2Connection.streams:Ljava/util/Map;
      34: invokeinterface #56,  1           // InterfaceMethod java/util/Map.size:()I
      39: anewarray     #30                 // class okhttp3/internal/http2/Http2Stream
      42: invokeinterface #57,  2           // InterfaceMethod java/util/Collection.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      47: checkcast     #58                 // class "[Lokhttp3/internal/http2/Http2Stream;"
      50: astore        4
      52: aload_0
      53: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      56: iconst_1
      57: putfield      #26                 // Field okhttp3/internal/http2/Http2Connection.shutdown:Z
      60: aload         5
      62: monitorexit
      63: goto          74
      66: astore        6
      68: aload         5
      70: monitorexit
      71: aload         6
      73: athrow
      74: aload         4
      76: astore        5
      78: aload         5
      80: arraylength
      81: istore        6
      83: iconst_0
      84: istore        7
      86: iload         7
      88: iload         6
      90: if_icmpge     144
      93: aload         5
      95: iload         7
      97: aaload
      98: astore        8
     100: aload         8
     102: invokevirtual #70                 // Method okhttp3/internal/http2/Http2Stream.getId:()I
     105: iload_1
     106: if_icmple     138
     109: aload         8
     111: invokevirtual #71                 // Method okhttp3/internal/http2/Http2Stream.isLocallyInitiated:()Z
     114: ifeq          138
     117: aload         8
     119: getstatic     #72                 // Field okhttp3/internal/http2/ErrorCode.REFUSED_STREAM:Lokhttp3/internal/http2/ErrorCode;
     122: invokevirtual #42                 // Method okhttp3/internal/http2/Http2Stream.receiveRstStream:(Lokhttp3/internal/http2/ErrorCode;)V
     125: aload_0
     126: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
     129: aload         8
     131: invokevirtual #70                 // Method okhttp3/internal/http2/Http2Stream.getId:()I
     134: invokevirtual #41                 // Method okhttp3/internal/http2/Http2Connection.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;
     137: pop
     138: iinc          7, 1
     141: goto          86
     144: return
    Exception table:
       from    to  target type
          15    63    66   any
          66    71    66   any

  public void windowUpdate(int, long);
    Code:
       0: iload_1
       1: ifne          49
       4: aload_0
       5: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       8: dup
       9: astore        4
      11: monitorenter
      12: aload_0
      13: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      16: dup
      17: getfield      #73                 // Field okhttp3/internal/http2/Http2Connection.bytesLeftInWriteWindow:J
      20: lload_2
      21: ladd
      22: putfield      #73                 // Field okhttp3/internal/http2/Http2Connection.bytesLeftInWriteWindow:J
      25: aload_0
      26: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      29: invokevirtual #66                 // Method java/lang/Object.notifyAll:()V
      32: aload         4
      34: monitorexit
      35: goto          46
      38: astore        5
      40: aload         4
      42: monitorexit
      43: aload         5
      45: athrow
      46: goto          90
      49: aload_0
      50: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
      53: iload_1
      54: invokevirtual #18                 // Method okhttp3/internal/http2/Http2Connection.getStream:(I)Lokhttp3/internal/http2/Http2Stream;
      57: astore        4
      59: aload         4
      61: ifnull        90
      64: aload         4
      66: dup
      67: astore        5
      69: monitorenter
      70: aload         4
      72: lload_2
      73: invokevirtual #61                 // Method okhttp3/internal/http2/Http2Stream.addBytesToWriteWindow:(J)V
      76: aload         5
      78: monitorexit
      79: goto          90
      82: astore        6
      84: aload         5
      86: monitorexit
      87: aload         6
      89: athrow
      90: return
    Exception table:
       from    to  target type
          12    35    38   any
          38    43    38   any
          70    79    82   any
          82    87    82   any

  public void priority(int, int, int, boolean);
    Code:
       0: return

  public void pushPromise(int, int, java.util.List<okhttp3.internal.http2.Header>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lokhttp3/internal/http2/Http2Connection;
       4: iload_2
       5: aload_3
       6: invokevirtual #74                 // Method okhttp3/internal/http2/Http2Connection.pushRequestLater:(ILjava/util/List;)V
       9: return

  public void alternateService(int, java.lang.String, okio.ByteString, java.lang.String, int, long);
    Code:
       0: return
}
