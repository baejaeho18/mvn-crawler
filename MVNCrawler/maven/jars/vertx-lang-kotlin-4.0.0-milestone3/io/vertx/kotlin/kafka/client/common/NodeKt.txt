Compiled from "Node.kt"
public final class io.vertx.kotlin.kafka.client.common.NodeKt {
  public static final io.vertx.kafka.client.common.Node nodeOf(java.lang.Boolean, java.lang.String, java.lang.Integer, java.lang.String, java.lang.Boolean, java.lang.Integer, java.lang.String);
    Code:
       0: new           #10                 // class io/vertx/kafka/client/common/Node
       3: dup
       4: invokespecial #14                 // Method io/vertx/kafka/client/common/Node."<init>":()V
       7: astore        7
       9: iconst_0
      10: istore        8
      12: iconst_0
      13: istore        9
      15: aload         7
      17: astore        10
      19: iconst_0
      20: istore        11
      22: aload_0
      23: ifnull        36
      26: aload         10
      28: aload_0
      29: invokevirtual #20                 // Method java/lang/Boolean.booleanValue:()Z
      32: invokevirtual #24                 // Method io/vertx/kafka/client/common/Node.setHasRack:(Z)Lio/vertx/kafka/client/common/Node;
      35: pop
      36: aload_1
      37: ifnull        47
      40: aload         10
      42: aload_1
      43: invokevirtual #28                 // Method io/vertx/kafka/client/common/Node.setHost:(Ljava/lang/String;)Lio/vertx/kafka/client/common/Node;
      46: pop
      47: aload_2
      48: ifnull        61
      51: aload         10
      53: aload_2
      54: invokevirtual #34                 // Method java/lang/Integer.intValue:()I
      57: invokevirtual #38                 // Method io/vertx/kafka/client/common/Node.setId:(I)Lio/vertx/kafka/client/common/Node;
      60: pop
      61: aload_3
      62: ifnull        72
      65: aload         10
      67: aload_3
      68: invokevirtual #41                 // Method io/vertx/kafka/client/common/Node.setIdString:(Ljava/lang/String;)Lio/vertx/kafka/client/common/Node;
      71: pop
      72: aload         4
      74: ifnull        88
      77: aload         10
      79: aload         4
      81: invokevirtual #20                 // Method java/lang/Boolean.booleanValue:()Z
      84: invokevirtual #44                 // Method io/vertx/kafka/client/common/Node.setIsEmpty:(Z)Lio/vertx/kafka/client/common/Node;
      87: pop
      88: aload         5
      90: ifnull        104
      93: aload         10
      95: aload         5
      97: invokevirtual #34                 // Method java/lang/Integer.intValue:()I
     100: invokevirtual #47                 // Method io/vertx/kafka/client/common/Node.setPort:(I)Lio/vertx/kafka/client/common/Node;
     103: pop
     104: aload         6
     106: ifnull        117
     109: aload         10
     111: aload         6
     113: invokevirtual #50                 // Method io/vertx/kafka/client/common/Node.setRack:(Ljava/lang/String;)Lio/vertx/kafka/client/common/Node;
     116: pop
     117: nop
     118: aload         7
     120: areturn

  public static io.vertx.kafka.client.common.Node nodeOf$default(java.lang.Boolean, java.lang.String, java.lang.Integer, java.lang.String, java.lang.Boolean, java.lang.Integer, java.lang.String, int, java.lang.Object);
    Code:
       0: iload         7
       2: iconst_1
       3: iand
       4: ifeq          12
       7: aconst_null
       8: checkcast     #16                 // class java/lang/Boolean
      11: astore_0
      12: iload         7
      14: iconst_2
      15: iand
      16: ifeq          24
      19: aconst_null
      20: checkcast     #66                 // class java/lang/String
      23: astore_1
      24: iload         7
      26: iconst_4
      27: iand
      28: ifeq          36
      31: aconst_null
      32: checkcast     #30                 // class java/lang/Integer
      35: astore_2
      36: iload         7
      38: bipush        8
      40: iand
      41: ifeq          49
      44: aconst_null
      45: checkcast     #66                 // class java/lang/String
      48: astore_3
      49: iload         7
      51: bipush        16
      53: iand
      54: ifeq          63
      57: aconst_null
      58: checkcast     #16                 // class java/lang/Boolean
      61: astore        4
      63: iload         7
      65: bipush        32
      67: iand
      68: ifeq          77
      71: aconst_null
      72: checkcast     #30                 // class java/lang/Integer
      75: astore        5
      77: iload         7
      79: bipush        64
      81: iand
      82: ifeq          91
      85: aconst_null
      86: checkcast     #66                 // class java/lang/String
      89: astore        6
      91: aload_0
      92: aload_1
      93: aload_2
      94: aload_3
      95: aload         4
      97: aload         5
      99: aload         6
     101: invokestatic  #70                 // Method nodeOf:(Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/String;)Lio/vertx/kafka/client/common/Node;
     104: areturn

  public static final io.vertx.kafka.client.common.Node Node(java.lang.Boolean, java.lang.String, java.lang.Integer, java.lang.String, java.lang.Boolean, java.lang.Integer, java.lang.String);
    Code:
       0: new           #10                 // class io/vertx/kafka/client/common/Node
       3: dup
       4: invokespecial #14                 // Method io/vertx/kafka/client/common/Node."<init>":()V
       7: astore        7
       9: iconst_0
      10: istore        8
      12: iconst_0
      13: istore        9
      15: aload         7
      17: astore        10
      19: iconst_0
      20: istore        11
      22: aload_0
      23: ifnull        36
      26: aload         10
      28: aload_0
      29: invokevirtual #20                 // Method java/lang/Boolean.booleanValue:()Z
      32: invokevirtual #24                 // Method io/vertx/kafka/client/common/Node.setHasRack:(Z)Lio/vertx/kafka/client/common/Node;
      35: pop
      36: aload_1
      37: ifnull        47
      40: aload         10
      42: aload_1
      43: invokevirtual #28                 // Method io/vertx/kafka/client/common/Node.setHost:(Ljava/lang/String;)Lio/vertx/kafka/client/common/Node;
      46: pop
      47: aload_2
      48: ifnull        61
      51: aload         10
      53: aload_2
      54: invokevirtual #34                 // Method java/lang/Integer.intValue:()I
      57: invokevirtual #38                 // Method io/vertx/kafka/client/common/Node.setId:(I)Lio/vertx/kafka/client/common/Node;
      60: pop
      61: aload_3
      62: ifnull        72
      65: aload         10
      67: aload_3
      68: invokevirtual #41                 // Method io/vertx/kafka/client/common/Node.setIdString:(Ljava/lang/String;)Lio/vertx/kafka/client/common/Node;
      71: pop
      72: aload         4
      74: ifnull        88
      77: aload         10
      79: aload         4
      81: invokevirtual #20                 // Method java/lang/Boolean.booleanValue:()Z
      84: invokevirtual #44                 // Method io/vertx/kafka/client/common/Node.setIsEmpty:(Z)Lio/vertx/kafka/client/common/Node;
      87: pop
      88: aload         5
      90: ifnull        104
      93: aload         10
      95: aload         5
      97: invokevirtual #34                 // Method java/lang/Integer.intValue:()I
     100: invokevirtual #47                 // Method io/vertx/kafka/client/common/Node.setPort:(I)Lio/vertx/kafka/client/common/Node;
     103: pop
     104: aload         6
     106: ifnull        117
     109: aload         10
     111: aload         6
     113: invokevirtual #50                 // Method io/vertx/kafka/client/common/Node.setRack:(Ljava/lang/String;)Lio/vertx/kafka/client/common/Node;
     116: pop
     117: nop
     118: aload         7
     120: areturn

  public static io.vertx.kafka.client.common.Node Node$default(java.lang.Boolean, java.lang.String, java.lang.Integer, java.lang.String, java.lang.Boolean, java.lang.Integer, java.lang.String, int, java.lang.Object);
    Code:
       0: iload         7
       2: iconst_1
       3: iand
       4: ifeq          12
       7: aconst_null
       8: checkcast     #16                 // class java/lang/Boolean
      11: astore_0
      12: iload         7
      14: iconst_2
      15: iand
      16: ifeq          24
      19: aconst_null
      20: checkcast     #66                 // class java/lang/String
      23: astore_1
      24: iload         7
      26: iconst_4
      27: iand
      28: ifeq          36
      31: aconst_null
      32: checkcast     #30                 // class java/lang/Integer
      35: astore_2
      36: iload         7
      38: bipush        8
      40: iand
      41: ifeq          49
      44: aconst_null
      45: checkcast     #66                 // class java/lang/String
      48: astore_3
      49: iload         7
      51: bipush        16
      53: iand
      54: ifeq          63
      57: aconst_null
      58: checkcast     #16                 // class java/lang/Boolean
      61: astore        4
      63: iload         7
      65: bipush        32
      67: iand
      68: ifeq          77
      71: aconst_null
      72: checkcast     #30                 // class java/lang/Integer
      75: astore        5
      77: iload         7
      79: bipush        64
      81: iand
      82: ifeq          91
      85: aconst_null
      86: checkcast     #66                 // class java/lang/String
      89: astore        6
      91: aload_0
      92: aload_1
      93: aload_2
      94: aload_3
      95: aload         4
      97: aload         5
      99: aload         6
     101: invokestatic  #83                 // Method Node:(Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/String;)Lio/vertx/kafka/client/common/Node;
     104: areturn
}
