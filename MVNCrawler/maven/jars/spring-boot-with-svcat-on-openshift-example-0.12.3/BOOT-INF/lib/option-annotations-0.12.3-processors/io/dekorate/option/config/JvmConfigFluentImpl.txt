Compiled from "JvmConfigFluentImpl.java"
public class io.dekorate.option.config.JvmConfigFluentImpl<A extends io.dekorate.option.config.JvmConfigFluent<A>> extends io.dekorate.kubernetes.config.ConfigurationFluentImpl<A> implements io.dekorate.option.config.JvmConfigFluent<A> {
  private int xms;

  private int xmx;

  private boolean server;

  private boolean useStringDeduplication;

  private boolean preferIPv4Stack;

  private boolean heapDumpOnOutOfMemoryError;

  private boolean useGCOverheadLimit;

  private io.dekorate.option.annotation.GarbageCollector gc;

  private io.dekorate.option.annotation.SecureRandomSource secureRandom;

  public io.dekorate.option.config.JvmConfigFluentImpl();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/dekorate/kubernetes/config/ConfigurationFluentImpl."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field xms:I
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field xmx:I
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field server:Z
      19: aload_0
      20: iconst_0
      21: putfield      #5                  // Field useStringDeduplication:Z
      24: aload_0
      25: iconst_0
      26: putfield      #6                  // Field preferIPv4Stack:Z
      29: aload_0
      30: iconst_0
      31: putfield      #7                  // Field heapDumpOnOutOfMemoryError:Z
      34: aload_0
      35: iconst_0
      36: putfield      #8                  // Field useGCOverheadLimit:Z
      39: aload_0
      40: getstatic     #9                  // Field io/dekorate/option/annotation/GarbageCollector.Undefined:Lio/dekorate/option/annotation/GarbageCollector;
      43: putfield      #10                 // Field gc:Lio/dekorate/option/annotation/GarbageCollector;
      46: aload_0
      47: getstatic     #11                 // Field io/dekorate/option/annotation/SecureRandomSource.Undefined:Lio/dekorate/option/annotation/SecureRandomSource;
      50: putfield      #12                 // Field secureRandom:Lio/dekorate/option/annotation/SecureRandomSource;
      53: return

  public io.dekorate.option.config.JvmConfigFluentImpl(io.dekorate.option.config.JvmConfig);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/dekorate/kubernetes/config/ConfigurationFluentImpl."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field xms:I
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field xmx:I
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field server:Z
      19: aload_0
      20: iconst_0
      21: putfield      #5                  // Field useStringDeduplication:Z
      24: aload_0
      25: iconst_0
      26: putfield      #6                  // Field preferIPv4Stack:Z
      29: aload_0
      30: iconst_0
      31: putfield      #7                  // Field heapDumpOnOutOfMemoryError:Z
      34: aload_0
      35: iconst_0
      36: putfield      #8                  // Field useGCOverheadLimit:Z
      39: aload_0
      40: getstatic     #9                  // Field io/dekorate/option/annotation/GarbageCollector.Undefined:Lio/dekorate/option/annotation/GarbageCollector;
      43: putfield      #10                 // Field gc:Lio/dekorate/option/annotation/GarbageCollector;
      46: aload_0
      47: getstatic     #11                 // Field io/dekorate/option/annotation/SecureRandomSource.Undefined:Lio/dekorate/option/annotation/SecureRandomSource;
      50: putfield      #12                 // Field secureRandom:Lio/dekorate/option/annotation/SecureRandomSource;
      53: aload_0
      54: aload_1
      55: invokevirtual #13                 // Method io/dekorate/option/config/JvmConfig.getProject:()Lio/dekorate/project/Project;
      58: invokevirtual #14                 // Method withProject:(Lio/dekorate/project/Project;)Lio/dekorate/kubernetes/config/ConfigurationFluent;
      61: pop
      62: aload_0
      63: aload_1
      64: invokevirtual #15                 // Method io/dekorate/option/config/JvmConfig.getAttributes:()Ljava/util/Map;
      67: invokevirtual #16                 // Method withAttributes:(Ljava/util/Map;)Lio/dekorate/kubernetes/config/ConfigurationFluent;
      70: pop
      71: aload_0
      72: aload_1
      73: invokevirtual #17                 // Method io/dekorate/option/config/JvmConfig.getXms:()I
      76: invokevirtual #18                 // Method withXms:(I)Lio/dekorate/option/config/JvmConfigFluent;
      79: pop
      80: aload_0
      81: aload_1
      82: invokevirtual #19                 // Method io/dekorate/option/config/JvmConfig.getXmx:()I
      85: invokevirtual #20                 // Method withXmx:(I)Lio/dekorate/option/config/JvmConfigFluent;
      88: pop
      89: aload_0
      90: aload_1
      91: invokevirtual #21                 // Method io/dekorate/option/config/JvmConfig.isServer:()Z
      94: invokevirtual #22                 // Method withServer:(Z)Lio/dekorate/option/config/JvmConfigFluent;
      97: pop
      98: aload_0
      99: aload_1
     100: invokevirtual #23                 // Method io/dekorate/option/config/JvmConfig.isUseStringDeduplication:()Z
     103: invokevirtual #24                 // Method withUseStringDeduplication:(Z)Lio/dekorate/option/config/JvmConfigFluent;
     106: pop
     107: aload_0
     108: aload_1
     109: invokevirtual #25                 // Method io/dekorate/option/config/JvmConfig.isPreferIPv4Stack:()Z
     112: invokevirtual #26                 // Method withPreferIPv4Stack:(Z)Lio/dekorate/option/config/JvmConfigFluent;
     115: pop
     116: aload_0
     117: aload_1
     118: invokevirtual #27                 // Method io/dekorate/option/config/JvmConfig.isHeapDumpOnOutOfMemoryError:()Z
     121: invokevirtual #28                 // Method withHeapDumpOnOutOfMemoryError:(Z)Lio/dekorate/option/config/JvmConfigFluent;
     124: pop
     125: aload_0
     126: aload_1
     127: invokevirtual #29                 // Method io/dekorate/option/config/JvmConfig.isUseGCOverheadLimit:()Z
     130: invokevirtual #30                 // Method withUseGCOverheadLimit:(Z)Lio/dekorate/option/config/JvmConfigFluent;
     133: pop
     134: aload_0
     135: aload_1
     136: invokevirtual #31                 // Method io/dekorate/option/config/JvmConfig.getGc:()Lio/dekorate/option/annotation/GarbageCollector;
     139: invokevirtual #32                 // Method withGc:(Lio/dekorate/option/annotation/GarbageCollector;)Lio/dekorate/option/config/JvmConfigFluent;
     142: pop
     143: aload_0
     144: aload_1
     145: invokevirtual #33                 // Method io/dekorate/option/config/JvmConfig.getSecureRandom:()Lio/dekorate/option/annotation/SecureRandomSource;
     148: invokevirtual #34                 // Method withSecureRandom:(Lio/dekorate/option/annotation/SecureRandomSource;)Lio/dekorate/option/config/JvmConfigFluent;
     151: pop
     152: return

  public int getXms();
    Code:
       0: aload_0
       1: getfield      #2                  // Field xms:I
       4: ireturn

  public A withXms(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field xms:I
       5: aload_0
       6: areturn

  public java.lang.Boolean hasXms();
    Code:
       0: iconst_1
       1: invokestatic  #35                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       4: areturn

  public int getXmx();
    Code:
       0: aload_0
       1: getfield      #3                  // Field xmx:I
       4: ireturn

  public A withXmx(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field xmx:I
       5: aload_0
       6: areturn

  public java.lang.Boolean hasXmx();
    Code:
       0: iconst_1
       1: invokestatic  #35                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       4: areturn

  public boolean isServer();
    Code:
       0: aload_0
       1: getfield      #4                  // Field server:Z
       4: ireturn

  public A withServer(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field server:Z
       5: aload_0
       6: areturn

  public java.lang.Boolean hasServer();
    Code:
       0: iconst_1
       1: invokestatic  #35                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       4: areturn

  public boolean isUseStringDeduplication();
    Code:
       0: aload_0
       1: getfield      #5                  // Field useStringDeduplication:Z
       4: ireturn

  public A withUseStringDeduplication(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field useStringDeduplication:Z
       5: aload_0
       6: areturn

  public java.lang.Boolean hasUseStringDeduplication();
    Code:
       0: iconst_1
       1: invokestatic  #35                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       4: areturn

  public boolean isPreferIPv4Stack();
    Code:
       0: aload_0
       1: getfield      #6                  // Field preferIPv4Stack:Z
       4: ireturn

  public A withPreferIPv4Stack(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field preferIPv4Stack:Z
       5: aload_0
       6: areturn

  public java.lang.Boolean hasPreferIPv4Stack();
    Code:
       0: iconst_1
       1: invokestatic  #35                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       4: areturn

  public boolean isHeapDumpOnOutOfMemoryError();
    Code:
       0: aload_0
       1: getfield      #7                  // Field heapDumpOnOutOfMemoryError:Z
       4: ireturn

  public A withHeapDumpOnOutOfMemoryError(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field heapDumpOnOutOfMemoryError:Z
       5: aload_0
       6: areturn

  public java.lang.Boolean hasHeapDumpOnOutOfMemoryError();
    Code:
       0: iconst_1
       1: invokestatic  #35                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       4: areturn

  public boolean isUseGCOverheadLimit();
    Code:
       0: aload_0
       1: getfield      #8                  // Field useGCOverheadLimit:Z
       4: ireturn

  public A withUseGCOverheadLimit(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field useGCOverheadLimit:Z
       5: aload_0
       6: areturn

  public java.lang.Boolean hasUseGCOverheadLimit();
    Code:
       0: iconst_1
       1: invokestatic  #35                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       4: areturn

  public io.dekorate.option.annotation.GarbageCollector getGc();
    Code:
       0: aload_0
       1: getfield      #10                 // Field gc:Lio/dekorate/option/annotation/GarbageCollector;
       4: areturn

  public A withGc(io.dekorate.option.annotation.GarbageCollector);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field gc:Lio/dekorate/option/annotation/GarbageCollector;
       5: aload_0
       6: areturn

  public java.lang.Boolean hasGc();
    Code:
       0: aload_0
       1: getfield      #10                 // Field gc:Lio/dekorate/option/annotation/GarbageCollector;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #35                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      15: areturn

  public io.dekorate.option.annotation.SecureRandomSource getSecureRandom();
    Code:
       0: aload_0
       1: getfield      #12                 // Field secureRandom:Lio/dekorate/option/annotation/SecureRandomSource;
       4: areturn

  public A withSecureRandom(io.dekorate.option.annotation.SecureRandomSource);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field secureRandom:Lio/dekorate/option/annotation/SecureRandomSource;
       5: aload_0
       6: areturn

  public java.lang.Boolean hasSecureRandom();
    Code:
       0: aload_0
       1: getfield      #12                 // Field secureRandom:Lio/dekorate/option/annotation/SecureRandomSource;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #35                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      15: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #36                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #36                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_0
      25: aload_1
      26: invokespecial #37                 // Method io/dekorate/kubernetes/config/ConfigurationFluentImpl.equals:(Ljava/lang/Object;)Z
      29: ifne          34
      32: iconst_0
      33: ireturn
      34: aload_1
      35: checkcast     #38                 // class io/dekorate/option/config/JvmConfigFluentImpl
      38: astore_2
      39: aload_0
      40: getfield      #2                  // Field xms:I
      43: aload_2
      44: getfield      #2                  // Field xms:I
      47: if_icmpeq     52
      50: iconst_0
      51: ireturn
      52: aload_0
      53: getfield      #3                  // Field xmx:I
      56: aload_2
      57: getfield      #3                  // Field xmx:I
      60: if_icmpeq     65
      63: iconst_0
      64: ireturn
      65: aload_0
      66: getfield      #4                  // Field server:Z
      69: aload_2
      70: getfield      #4                  // Field server:Z
      73: if_icmpeq     78
      76: iconst_0
      77: ireturn
      78: aload_0
      79: getfield      #5                  // Field useStringDeduplication:Z
      82: aload_2
      83: getfield      #5                  // Field useStringDeduplication:Z
      86: if_icmpeq     91
      89: iconst_0
      90: ireturn
      91: aload_0
      92: getfield      #6                  // Field preferIPv4Stack:Z
      95: aload_2
      96: getfield      #6                  // Field preferIPv4Stack:Z
      99: if_icmpeq     104
     102: iconst_0
     103: ireturn
     104: aload_0
     105: getfield      #7                  // Field heapDumpOnOutOfMemoryError:Z
     108: aload_2
     109: getfield      #7                  // Field heapDumpOnOutOfMemoryError:Z
     112: if_icmpeq     117
     115: iconst_0
     116: ireturn
     117: aload_0
     118: getfield      #8                  // Field useGCOverheadLimit:Z
     121: aload_2
     122: getfield      #8                  // Field useGCOverheadLimit:Z
     125: if_icmpeq     130
     128: iconst_0
     129: ireturn
     130: aload_0
     131: getfield      #10                 // Field gc:Lio/dekorate/option/annotation/GarbageCollector;
     134: ifnull        154
     137: aload_0
     138: getfield      #10                 // Field gc:Lio/dekorate/option/annotation/GarbageCollector;
     141: aload_2
     142: getfield      #10                 // Field gc:Lio/dekorate/option/annotation/GarbageCollector;
     145: invokevirtual #39                 // Method io/dekorate/option/annotation/GarbageCollector.equals:(Ljava/lang/Object;)Z
     148: ifne          163
     151: goto          161
     154: aload_2
     155: getfield      #10                 // Field gc:Lio/dekorate/option/annotation/GarbageCollector;
     158: ifnull        163
     161: iconst_0
     162: ireturn
     163: aload_0
     164: getfield      #12                 // Field secureRandom:Lio/dekorate/option/annotation/SecureRandomSource;
     167: ifnull        187
     170: aload_0
     171: getfield      #12                 // Field secureRandom:Lio/dekorate/option/annotation/SecureRandomSource;
     174: aload_2
     175: getfield      #12                 // Field secureRandom:Lio/dekorate/option/annotation/SecureRandomSource;
     178: invokevirtual #40                 // Method io/dekorate/option/annotation/SecureRandomSource.equals:(Ljava/lang/Object;)Z
     181: ifne          196
     184: goto          194
     187: aload_2
     188: getfield      #12                 // Field secureRandom:Lio/dekorate/option/annotation/SecureRandomSource;
     191: ifnull        196
     194: iconst_0
     195: ireturn
     196: iconst_1
     197: ireturn
}
