Compiled from "SingleConnectionDataSource.java"
public class org.springframework.jdbc.datasource.SingleConnectionDataSource extends org.springframework.jdbc.datasource.DriverManagerDataSource implements org.springframework.jdbc.datasource.SmartDataSource,org.springframework.beans.factory.DisposableBean {
  private boolean suppressClose;

  private java.lang.Boolean autoCommit;

  private java.sql.Connection target;

  private java.sql.Connection connection;

  private final java.lang.Object connectionMonitor;

  public org.springframework.jdbc.datasource.SingleConnectionDataSource();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/jdbc/datasource/DriverManagerDataSource."<init>":()V
       4: aload_0
       5: new           #2                  // class java/lang/Object
       8: dup
       9: invokespecial #3                  // Method java/lang/Object."<init>":()V
      12: putfield      #4                  // Field connectionMonitor:Ljava/lang/Object;
      15: return

  public org.springframework.jdbc.datasource.SingleConnectionDataSource(java.lang.String, java.lang.String, java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #5                  // Method org/springframework/jdbc/datasource/DriverManagerDataSource."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
       7: aload_0
       8: new           #2                  // class java/lang/Object
      11: dup
      12: invokespecial #3                  // Method java/lang/Object."<init>":()V
      15: putfield      #4                  // Field connectionMonitor:Ljava/lang/Object;
      18: aload_0
      19: iload         4
      21: putfield      #6                  // Field suppressClose:Z
      24: return

  public org.springframework.jdbc.datasource.SingleConnectionDataSource(java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method org/springframework/jdbc/datasource/DriverManagerDataSource."<init>":(Ljava/lang/String;)V
       5: aload_0
       6: new           #2                  // class java/lang/Object
       9: dup
      10: invokespecial #3                  // Method java/lang/Object."<init>":()V
      13: putfield      #4                  // Field connectionMonitor:Ljava/lang/Object;
      16: aload_0
      17: iload_2
      18: putfield      #6                  // Field suppressClose:Z
      21: return

  public org.springframework.jdbc.datasource.SingleConnectionDataSource(java.sql.Connection, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/jdbc/datasource/DriverManagerDataSource."<init>":()V
       4: aload_0
       5: new           #2                  // class java/lang/Object
       8: dup
       9: invokespecial #3                  // Method java/lang/Object."<init>":()V
      12: putfield      #4                  // Field connectionMonitor:Ljava/lang/Object;
      15: aload_1
      16: ldc           #8                  // String Connection must not be null
      18: invokestatic  #9                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      21: aload_0
      22: aload_1
      23: putfield      #10                 // Field target:Ljava/sql/Connection;
      26: aload_0
      27: iload_2
      28: putfield      #6                  // Field suppressClose:Z
      31: aload_0
      32: iload_2
      33: ifeq          44
      36: aload_0
      37: aload_1
      38: invokevirtual #11                 // Method getCloseSuppressingConnectionProxy:(Ljava/sql/Connection;)Ljava/sql/Connection;
      41: goto          45
      44: aload_1
      45: putfield      #12                 // Field connection:Ljava/sql/Connection;
      48: return

  public void setSuppressClose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field suppressClose:Z
       5: return

  protected boolean isSuppressClose();
    Code:
       0: aload_0
       1: getfield      #6                  // Field suppressClose:Z
       4: ireturn

  public void setAutoCommit(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #13                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: putfield      #14                 // Field autoCommit:Ljava/lang/Boolean;
       8: return

  protected java.lang.Boolean getAutoCommitValue();
    Code:
       0: aload_0
       1: getfield      #14                 // Field autoCommit:Ljava/lang/Boolean;
       4: areturn

  public java.sql.Connection getConnection() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field connectionMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #12                 // Field connection:Ljava/sql/Connection;
      11: ifnonnull     18
      14: aload_0
      15: invokevirtual #15                 // Method initConnection:()V
      18: aload_0
      19: getfield      #12                 // Field connection:Ljava/sql/Connection;
      22: invokeinterface #16,  1           // InterfaceMethod java/sql/Connection.isClosed:()Z
      27: ifeq          40
      30: new           #17                 // class java/sql/SQLException
      33: dup
      34: ldc           #18                 // String Connection was closed in SingleConnectionDataSource. Check that user code checks shouldClose() before closing Connections, or set \'suppressClose\' to \'true\'
      36: invokespecial #19                 // Method java/sql/SQLException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: getfield      #12                 // Field connection:Ljava/sql/Connection;
      44: aload_1
      45: monitorexit
      46: areturn
      47: astore_2
      48: aload_1
      49: monitorexit
      50: aload_2
      51: athrow
    Exception table:
       from    to  target type
           7    46    47   any
          47    50    47   any

  public java.sql.Connection getConnection(java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #20                 // Method getUsername:()Ljava/lang/String;
       5: invokestatic  #21                 // Method org/springframework/util/ObjectUtils.nullSafeEquals:(Ljava/lang/Object;Ljava/lang/Object;)Z
       8: ifeq          27
      11: aload_2
      12: aload_0
      13: invokevirtual #22                 // Method getPassword:()Ljava/lang/String;
      16: invokestatic  #21                 // Method org/springframework/util/ObjectUtils.nullSafeEquals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      19: ifeq          27
      22: aload_0
      23: invokevirtual #23                 // Method getConnection:()Ljava/sql/Connection;
      26: areturn
      27: new           #17                 // class java/sql/SQLException
      30: dup
      31: ldc           #24                 // String SingleConnectionDataSource does not support custom username and password
      33: invokespecial #19                 // Method java/sql/SQLException."<init>":(Ljava/lang/String;)V
      36: athrow

  public boolean shouldClose(java.sql.Connection);
    Code:
       0: aload_0
       1: getfield      #4                  // Field connectionMonitor:Ljava/lang/Object;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_1
       8: aload_0
       9: getfield      #12                 // Field connection:Ljava/sql/Connection;
      12: if_acmpeq     27
      15: aload_1
      16: aload_0
      17: getfield      #10                 // Field target:Ljava/sql/Connection;
      20: if_acmpeq     27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: aload_2
      29: monitorexit
      30: ireturn
      31: astore_3
      32: aload_2
      33: monitorexit
      34: aload_3
      35: athrow
    Exception table:
       from    to  target type
           7    30    31   any
          31    34    31   any

  public void destroy();
    Code:
       0: aload_0
       1: getfield      #4                  // Field connectionMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: invokespecial #25                 // Method closeConnection:()V
      11: aload_1
      12: monitorexit
      13: goto          21
      16: astore_2
      17: aload_1
      18: monitorexit
      19: aload_2
      20: athrow
      21: return
    Exception table:
       from    to  target type
           7    13    16   any
          16    19    16   any

  public void initConnection() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method getUrl:()Ljava/lang/String;
       4: ifnonnull     17
       7: new           #27                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #28                 // String \'url\' property is required for lazily initializing a Connection
      13: invokespecial #29                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #4                  // Field connectionMonitor:Ljava/lang/Object;
      21: dup
      22: astore_1
      23: monitorenter
      24: aload_0
      25: invokespecial #25                 // Method closeConnection:()V
      28: aload_0
      29: aload_0
      30: aload_0
      31: invokevirtual #20                 // Method getUsername:()Ljava/lang/String;
      34: aload_0
      35: invokevirtual #22                 // Method getPassword:()Ljava/lang/String;
      38: invokevirtual #30                 // Method getConnectionFromDriver:(Ljava/lang/String;Ljava/lang/String;)Ljava/sql/Connection;
      41: putfield      #10                 // Field target:Ljava/sql/Connection;
      44: aload_0
      45: aload_0
      46: getfield      #10                 // Field target:Ljava/sql/Connection;
      49: invokevirtual #31                 // Method prepareConnection:(Ljava/sql/Connection;)V
      52: aload_0
      53: getfield      #32                 // Field logger:Lorg/apache/commons/logging/Log;
      56: invokeinterface #33,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      61: ifeq          95
      64: aload_0
      65: getfield      #32                 // Field logger:Lorg/apache/commons/logging/Log;
      68: new           #34                 // class java/lang/StringBuilder
      71: dup
      72: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      75: ldc           #36                 // String Established shared JDBC Connection:
      77: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: aload_0
      81: getfield      #10                 // Field target:Ljava/sql/Connection;
      84: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      87: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      90: invokeinterface #40,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      95: aload_0
      96: aload_0
      97: invokevirtual #41                 // Method isSuppressClose:()Z
     100: ifeq          114
     103: aload_0
     104: aload_0
     105: getfield      #10                 // Field target:Ljava/sql/Connection;
     108: invokevirtual #11                 // Method getCloseSuppressingConnectionProxy:(Ljava/sql/Connection;)Ljava/sql/Connection;
     111: goto          118
     114: aload_0
     115: getfield      #10                 // Field target:Ljava/sql/Connection;
     118: putfield      #12                 // Field connection:Ljava/sql/Connection;
     121: aload_1
     122: monitorexit
     123: goto          131
     126: astore_2
     127: aload_1
     128: monitorexit
     129: aload_2
     130: athrow
     131: return
    Exception table:
       from    to  target type
          24   123   126   any
         126   129   126   any

  public void resetConnection();
    Code:
       0: aload_0
       1: getfield      #4                  // Field connectionMonitor:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: invokespecial #25                 // Method closeConnection:()V
      11: aload_0
      12: aconst_null
      13: putfield      #10                 // Field target:Ljava/sql/Connection;
      16: aload_0
      17: aconst_null
      18: putfield      #12                 // Field connection:Ljava/sql/Connection;
      21: aload_1
      22: monitorexit
      23: goto          31
      26: astore_2
      27: aload_1
      28: monitorexit
      29: aload_2
      30: athrow
      31: return
    Exception table:
       from    to  target type
           7    23    26   any
          26    29    26   any

  protected void prepareConnection(java.sql.Connection) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #42                 // Method getAutoCommitValue:()Ljava/lang/Boolean;
       4: astore_2
       5: aload_2
       6: ifnull        32
       9: aload_1
      10: invokeinterface #43,  1           // InterfaceMethod java/sql/Connection.getAutoCommit:()Z
      15: aload_2
      16: invokevirtual #44                 // Method java/lang/Boolean.booleanValue:()Z
      19: if_icmpeq     32
      22: aload_1
      23: aload_2
      24: invokevirtual #44                 // Method java/lang/Boolean.booleanValue:()Z
      27: invokeinterface #45,  2           // InterfaceMethod java/sql/Connection.setAutoCommit:(Z)V
      32: return

  private void closeConnection();
    Code:
       0: aload_0
       1: getfield      #10                 // Field target:Ljava/sql/Connection;
       4: ifnull        32
       7: aload_0
       8: getfield      #10                 // Field target:Ljava/sql/Connection;
      11: invokeinterface #46,  1           // InterfaceMethod java/sql/Connection.close:()V
      16: goto          32
      19: astore_1
      20: aload_0
      21: getfield      #32                 // Field logger:Lorg/apache/commons/logging/Log;
      24: ldc           #48                 // String Could not close shared JDBC Connection
      26: aload_1
      27: invokeinterface #49,  3           // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      32: return
    Exception table:
       from    to  target type
           7    16    19   Class java/lang/Throwable

  protected java.sql.Connection getCloseSuppressingConnectionProxy(java.sql.Connection);
    Code:
       0: ldc           #50                 // class org/springframework/jdbc/datasource/ConnectionProxy
       2: invokevirtual #51                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
       5: iconst_1
       6: anewarray     #52                 // class java/lang/Class
       9: dup
      10: iconst_0
      11: ldc           #50                 // class org/springframework/jdbc/datasource/ConnectionProxy
      13: aastore
      14: new           #53                 // class org/springframework/jdbc/datasource/SingleConnectionDataSource$CloseSuppressingInvocationHandler
      17: dup
      18: aload_1
      19: invokespecial #54                 // Method org/springframework/jdbc/datasource/SingleConnectionDataSource$CloseSuppressingInvocationHandler."<init>":(Ljava/sql/Connection;)V
      22: invokestatic  #55                 // Method java/lang/reflect/Proxy.newProxyInstance:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;
      25: checkcast     #56                 // class java/sql/Connection
      28: areturn
}
