Compiled from "BaseConfigFluent.java"
public interface io.dekorate.kubernetes.config.BaseConfigFluent<A extends io.dekorate.kubernetes.config.BaseConfigFluent<A>> extends io.dekorate.kubernetes.config.ApplicationConfigurationFluent<A> {
  public abstract A withLabels(io.dekorate.kubernetes.config.Label...);

  public abstract io.dekorate.kubernetes.config.Label[] getLabels();

  public abstract io.dekorate.kubernetes.config.Label[] buildLabels();

  public abstract io.dekorate.kubernetes.config.Label buildLabel(int);

  public abstract io.dekorate.kubernetes.config.Label buildFirstLabel();

  public abstract io.dekorate.kubernetes.config.Label buildLastLabel();

  public abstract io.dekorate.kubernetes.config.Label buildMatchingLabel(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.LabelBuilder>);

  public abstract java.lang.Boolean hasMatchingLabel(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.LabelBuilder>);

  public abstract A addToLabels(int, io.dekorate.kubernetes.config.Label);

  public abstract A setToLabels(int, io.dekorate.kubernetes.config.Label);

  public abstract A addToLabels(io.dekorate.kubernetes.config.Label...);

  public abstract A addAllToLabels(java.util.Collection<io.dekorate.kubernetes.config.Label>);

  public abstract A removeFromLabels(io.dekorate.kubernetes.config.Label...);

  public abstract A removeAllFromLabels(java.util.Collection<io.dekorate.kubernetes.config.Label>);

  public abstract A removeMatchingFromLabels(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.LabelBuilder>);

  public abstract java.lang.Boolean hasLabels();

  public abstract A addNewLabel(java.lang.String, java.lang.String);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$LabelsNested<A> addNewLabel();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$LabelsNested<A> addNewLabelLike(io.dekorate.kubernetes.config.Label);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$LabelsNested<A> setNewLabelLike(int, io.dekorate.kubernetes.config.Label);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$LabelsNested<A> editLabel(int);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$LabelsNested<A> editFirstLabel();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$LabelsNested<A> editLastLabel();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$LabelsNested<A> editMatchingLabel(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.LabelBuilder>);

  public abstract A withAnnotations(io.dekorate.kubernetes.config.Annotation...);

  public abstract io.dekorate.kubernetes.config.Annotation[] getAnnotations();

  public abstract io.dekorate.kubernetes.config.Annotation[] buildAnnotations();

  public abstract io.dekorate.kubernetes.config.Annotation buildAnnotation(int);

  public abstract io.dekorate.kubernetes.config.Annotation buildFirstAnnotation();

  public abstract io.dekorate.kubernetes.config.Annotation buildLastAnnotation();

  public abstract io.dekorate.kubernetes.config.Annotation buildMatchingAnnotation(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AnnotationBuilder>);

  public abstract java.lang.Boolean hasMatchingAnnotation(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AnnotationBuilder>);

  public abstract A addToAnnotations(int, io.dekorate.kubernetes.config.Annotation);

  public abstract A setToAnnotations(int, io.dekorate.kubernetes.config.Annotation);

  public abstract A addToAnnotations(io.dekorate.kubernetes.config.Annotation...);

  public abstract A addAllToAnnotations(java.util.Collection<io.dekorate.kubernetes.config.Annotation>);

  public abstract A removeFromAnnotations(io.dekorate.kubernetes.config.Annotation...);

  public abstract A removeAllFromAnnotations(java.util.Collection<io.dekorate.kubernetes.config.Annotation>);

  public abstract A removeMatchingFromAnnotations(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AnnotationBuilder>);

  public abstract java.lang.Boolean hasAnnotations();

  public abstract A addNewAnnotation(java.lang.String, java.lang.String);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AnnotationsNested<A> addNewAnnotation();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AnnotationsNested<A> addNewAnnotationLike(io.dekorate.kubernetes.config.Annotation);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AnnotationsNested<A> setNewAnnotationLike(int, io.dekorate.kubernetes.config.Annotation);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AnnotationsNested<A> editAnnotation(int);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AnnotationsNested<A> editFirstAnnotation();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AnnotationsNested<A> editLastAnnotation();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AnnotationsNested<A> editMatchingAnnotation(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AnnotationBuilder>);

  public abstract A withEnvVars(io.dekorate.kubernetes.config.Env...);

  public abstract io.dekorate.kubernetes.config.Env[] getEnvVars();

  public abstract io.dekorate.kubernetes.config.Env[] buildEnvVars();

  public abstract io.dekorate.kubernetes.config.Env buildEnvVar(int);

  public abstract io.dekorate.kubernetes.config.Env buildFirstEnvVar();

  public abstract io.dekorate.kubernetes.config.Env buildLastEnvVar();

  public abstract io.dekorate.kubernetes.config.Env buildMatchingEnvVar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.EnvBuilder>);

  public abstract java.lang.Boolean hasMatchingEnvVar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.EnvBuilder>);

  public abstract A addToEnvVars(int, io.dekorate.kubernetes.config.Env);

  public abstract A setToEnvVars(int, io.dekorate.kubernetes.config.Env);

  public abstract A addToEnvVars(io.dekorate.kubernetes.config.Env...);

  public abstract A addAllToEnvVars(java.util.Collection<io.dekorate.kubernetes.config.Env>);

  public abstract A removeFromEnvVars(io.dekorate.kubernetes.config.Env...);

  public abstract A removeAllFromEnvVars(java.util.Collection<io.dekorate.kubernetes.config.Env>);

  public abstract A removeMatchingFromEnvVars(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.EnvBuilder>);

  public abstract java.lang.Boolean hasEnvVars();

  public abstract A addNewEnvVar(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$EnvVarsNested<A> addNewEnvVar();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$EnvVarsNested<A> addNewEnvVarLike(io.dekorate.kubernetes.config.Env);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$EnvVarsNested<A> setNewEnvVarLike(int, io.dekorate.kubernetes.config.Env);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$EnvVarsNested<A> editEnvVar(int);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$EnvVarsNested<A> editFirstEnvVar();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$EnvVarsNested<A> editLastEnvVar();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$EnvVarsNested<A> editMatchingEnvVar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.EnvBuilder>);

  public abstract java.lang.String getWorkingDir();

  public abstract A withWorkingDir(java.lang.String);

  public abstract java.lang.Boolean hasWorkingDir();

  public abstract A withNewWorkingDir(java.lang.String);

  public abstract A withNewWorkingDir(java.lang.StringBuilder);

  public abstract A withNewWorkingDir(java.lang.StringBuffer);

  public abstract A withCommand(java.lang.String...);

  public abstract java.lang.String[] getCommand();

  public abstract A addToCommand(int, java.lang.String);

  public abstract A setToCommand(int, java.lang.String);

  public abstract A addToCommand(java.lang.String...);

  public abstract A addAllToCommand(java.util.Collection<java.lang.String>);

  public abstract A removeFromCommand(java.lang.String...);

  public abstract A removeAllFromCommand(java.util.Collection<java.lang.String>);

  public abstract java.lang.Boolean hasCommand();

  public abstract A addNewCommand(java.lang.String);

  public abstract A addNewCommand(java.lang.StringBuilder);

  public abstract A addNewCommand(java.lang.StringBuffer);

  public abstract A withArguments(java.lang.String...);

  public abstract java.lang.String[] getArguments();

  public abstract A addToArguments(int, java.lang.String);

  public abstract A setToArguments(int, java.lang.String);

  public abstract A addToArguments(java.lang.String...);

  public abstract A addAllToArguments(java.util.Collection<java.lang.String>);

  public abstract A removeFromArguments(java.lang.String...);

  public abstract A removeAllFromArguments(java.util.Collection<java.lang.String>);

  public abstract java.lang.Boolean hasArguments();

  public abstract A addNewArgument(java.lang.String);

  public abstract A addNewArgument(java.lang.StringBuilder);

  public abstract A addNewArgument(java.lang.StringBuffer);

  public abstract java.lang.String getServiceAccount();

  public abstract A withServiceAccount(java.lang.String);

  public abstract java.lang.Boolean hasServiceAccount();

  public abstract A withNewServiceAccount(java.lang.String);

  public abstract A withNewServiceAccount(java.lang.StringBuilder);

  public abstract A withNewServiceAccount(java.lang.StringBuffer);

  public abstract java.lang.String getHost();

  public abstract A withHost(java.lang.String);

  public abstract java.lang.Boolean hasHost();

  public abstract A withNewHost(java.lang.String);

  public abstract A withNewHost(java.lang.StringBuilder);

  public abstract A withNewHost(java.lang.StringBuffer);

  public abstract A withPorts(io.dekorate.kubernetes.config.Port...);

  public abstract io.dekorate.kubernetes.config.Port[] getPorts();

  public abstract io.dekorate.kubernetes.config.Port[] buildPorts();

  public abstract io.dekorate.kubernetes.config.Port buildPort(int);

  public abstract io.dekorate.kubernetes.config.Port buildFirstPort();

  public abstract io.dekorate.kubernetes.config.Port buildLastPort();

  public abstract io.dekorate.kubernetes.config.Port buildMatchingPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.PortBuilder>);

  public abstract java.lang.Boolean hasMatchingPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.PortBuilder>);

  public abstract A addToPorts(int, io.dekorate.kubernetes.config.Port);

  public abstract A setToPorts(int, io.dekorate.kubernetes.config.Port);

  public abstract A addToPorts(io.dekorate.kubernetes.config.Port...);

  public abstract A addAllToPorts(java.util.Collection<io.dekorate.kubernetes.config.Port>);

  public abstract A removeFromPorts(io.dekorate.kubernetes.config.Port...);

  public abstract A removeAllFromPorts(java.util.Collection<io.dekorate.kubernetes.config.Port>);

  public abstract A removeMatchingFromPorts(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.PortBuilder>);

  public abstract java.lang.Boolean hasPorts();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$PortsNested<A> addNewPort();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$PortsNested<A> addNewPortLike(io.dekorate.kubernetes.config.Port);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$PortsNested<A> setNewPortLike(int, io.dekorate.kubernetes.config.Port);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$PortsNested<A> editPort(int);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$PortsNested<A> editFirstPort();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$PortsNested<A> editLastPort();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$PortsNested<A> editMatchingPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.PortBuilder>);

  public abstract io.dekorate.kubernetes.annotation.ServiceType getServiceType();

  public abstract A withServiceType(io.dekorate.kubernetes.annotation.ServiceType);

  public abstract java.lang.Boolean hasServiceType();

  public abstract A withPvcVolumes(io.dekorate.kubernetes.config.PersistentVolumeClaimVolume...);

  public abstract io.dekorate.kubernetes.config.PersistentVolumeClaimVolume[] getPvcVolumes();

  public abstract io.dekorate.kubernetes.config.PersistentVolumeClaimVolume[] buildPvcVolumes();

  public abstract io.dekorate.kubernetes.config.PersistentVolumeClaimVolume buildPvcVolume(int);

  public abstract io.dekorate.kubernetes.config.PersistentVolumeClaimVolume buildFirstPvcVolume();

  public abstract io.dekorate.kubernetes.config.PersistentVolumeClaimVolume buildLastPvcVolume();

  public abstract io.dekorate.kubernetes.config.PersistentVolumeClaimVolume buildMatchingPvcVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.PersistentVolumeClaimVolumeBuilder>);

  public abstract java.lang.Boolean hasMatchingPvcVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.PersistentVolumeClaimVolumeBuilder>);

  public abstract A addToPvcVolumes(int, io.dekorate.kubernetes.config.PersistentVolumeClaimVolume);

  public abstract A setToPvcVolumes(int, io.dekorate.kubernetes.config.PersistentVolumeClaimVolume);

  public abstract A addToPvcVolumes(io.dekorate.kubernetes.config.PersistentVolumeClaimVolume...);

  public abstract A addAllToPvcVolumes(java.util.Collection<io.dekorate.kubernetes.config.PersistentVolumeClaimVolume>);

  public abstract A removeFromPvcVolumes(io.dekorate.kubernetes.config.PersistentVolumeClaimVolume...);

  public abstract A removeAllFromPvcVolumes(java.util.Collection<io.dekorate.kubernetes.config.PersistentVolumeClaimVolume>);

  public abstract A removeMatchingFromPvcVolumes(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.PersistentVolumeClaimVolumeBuilder>);

  public abstract java.lang.Boolean hasPvcVolumes();

  public abstract A addNewPvcVolume(java.lang.String, java.lang.String, boolean);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$PvcVolumesNested<A> addNewPvcVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$PvcVolumesNested<A> addNewPvcVolumeLike(io.dekorate.kubernetes.config.PersistentVolumeClaimVolume);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$PvcVolumesNested<A> setNewPvcVolumeLike(int, io.dekorate.kubernetes.config.PersistentVolumeClaimVolume);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$PvcVolumesNested<A> editPvcVolume(int);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$PvcVolumesNested<A> editFirstPvcVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$PvcVolumesNested<A> editLastPvcVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$PvcVolumesNested<A> editMatchingPvcVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.PersistentVolumeClaimVolumeBuilder>);

  public abstract A withSecretVolumes(io.dekorate.kubernetes.config.SecretVolume...);

  public abstract io.dekorate.kubernetes.config.SecretVolume[] getSecretVolumes();

  public abstract io.dekorate.kubernetes.config.SecretVolume[] buildSecretVolumes();

  public abstract io.dekorate.kubernetes.config.SecretVolume buildSecretVolume(int);

  public abstract io.dekorate.kubernetes.config.SecretVolume buildFirstSecretVolume();

  public abstract io.dekorate.kubernetes.config.SecretVolume buildLastSecretVolume();

  public abstract io.dekorate.kubernetes.config.SecretVolume buildMatchingSecretVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.SecretVolumeBuilder>);

  public abstract java.lang.Boolean hasMatchingSecretVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.SecretVolumeBuilder>);

  public abstract A addToSecretVolumes(int, io.dekorate.kubernetes.config.SecretVolume);

  public abstract A setToSecretVolumes(int, io.dekorate.kubernetes.config.SecretVolume);

  public abstract A addToSecretVolumes(io.dekorate.kubernetes.config.SecretVolume...);

  public abstract A addAllToSecretVolumes(java.util.Collection<io.dekorate.kubernetes.config.SecretVolume>);

  public abstract A removeFromSecretVolumes(io.dekorate.kubernetes.config.SecretVolume...);

  public abstract A removeAllFromSecretVolumes(java.util.Collection<io.dekorate.kubernetes.config.SecretVolume>);

  public abstract A removeMatchingFromSecretVolumes(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.SecretVolumeBuilder>);

  public abstract java.lang.Boolean hasSecretVolumes();

  public abstract A addNewSecretVolume(java.lang.String, java.lang.String, int, boolean);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$SecretVolumesNested<A> addNewSecretVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$SecretVolumesNested<A> addNewSecretVolumeLike(io.dekorate.kubernetes.config.SecretVolume);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$SecretVolumesNested<A> setNewSecretVolumeLike(int, io.dekorate.kubernetes.config.SecretVolume);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$SecretVolumesNested<A> editSecretVolume(int);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$SecretVolumesNested<A> editFirstSecretVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$SecretVolumesNested<A> editLastSecretVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$SecretVolumesNested<A> editMatchingSecretVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.SecretVolumeBuilder>);

  public abstract A withConfigMapVolumes(io.dekorate.kubernetes.config.ConfigMapVolume...);

  public abstract io.dekorate.kubernetes.config.ConfigMapVolume[] getConfigMapVolumes();

  public abstract io.dekorate.kubernetes.config.ConfigMapVolume[] buildConfigMapVolumes();

  public abstract io.dekorate.kubernetes.config.ConfigMapVolume buildConfigMapVolume(int);

  public abstract io.dekorate.kubernetes.config.ConfigMapVolume buildFirstConfigMapVolume();

  public abstract io.dekorate.kubernetes.config.ConfigMapVolume buildLastConfigMapVolume();

  public abstract io.dekorate.kubernetes.config.ConfigMapVolume buildMatchingConfigMapVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.ConfigMapVolumeBuilder>);

  public abstract java.lang.Boolean hasMatchingConfigMapVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.ConfigMapVolumeBuilder>);

  public abstract A addToConfigMapVolumes(int, io.dekorate.kubernetes.config.ConfigMapVolume);

  public abstract A setToConfigMapVolumes(int, io.dekorate.kubernetes.config.ConfigMapVolume);

  public abstract A addToConfigMapVolumes(io.dekorate.kubernetes.config.ConfigMapVolume...);

  public abstract A addAllToConfigMapVolumes(java.util.Collection<io.dekorate.kubernetes.config.ConfigMapVolume>);

  public abstract A removeFromConfigMapVolumes(io.dekorate.kubernetes.config.ConfigMapVolume...);

  public abstract A removeAllFromConfigMapVolumes(java.util.Collection<io.dekorate.kubernetes.config.ConfigMapVolume>);

  public abstract A removeMatchingFromConfigMapVolumes(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.ConfigMapVolumeBuilder>);

  public abstract java.lang.Boolean hasConfigMapVolumes();

  public abstract A addNewConfigMapVolume(java.lang.String, java.lang.String, int, boolean);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$ConfigMapVolumesNested<A> addNewConfigMapVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$ConfigMapVolumesNested<A> addNewConfigMapVolumeLike(io.dekorate.kubernetes.config.ConfigMapVolume);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$ConfigMapVolumesNested<A> setNewConfigMapVolumeLike(int, io.dekorate.kubernetes.config.ConfigMapVolume);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$ConfigMapVolumesNested<A> editConfigMapVolume(int);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$ConfigMapVolumesNested<A> editFirstConfigMapVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$ConfigMapVolumesNested<A> editLastConfigMapVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$ConfigMapVolumesNested<A> editMatchingConfigMapVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.ConfigMapVolumeBuilder>);

  public abstract A withGitRepoVolumes(io.dekorate.kubernetes.config.GitRepoVolume...);

  public abstract io.dekorate.kubernetes.config.GitRepoVolume[] getGitRepoVolumes();

  public abstract io.dekorate.kubernetes.config.GitRepoVolume[] buildGitRepoVolumes();

  public abstract io.dekorate.kubernetes.config.GitRepoVolume buildGitRepoVolume(int);

  public abstract io.dekorate.kubernetes.config.GitRepoVolume buildFirstGitRepoVolume();

  public abstract io.dekorate.kubernetes.config.GitRepoVolume buildLastGitRepoVolume();

  public abstract io.dekorate.kubernetes.config.GitRepoVolume buildMatchingGitRepoVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.GitRepoVolumeBuilder>);

  public abstract java.lang.Boolean hasMatchingGitRepoVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.GitRepoVolumeBuilder>);

  public abstract A addToGitRepoVolumes(int, io.dekorate.kubernetes.config.GitRepoVolume);

  public abstract A setToGitRepoVolumes(int, io.dekorate.kubernetes.config.GitRepoVolume);

  public abstract A addToGitRepoVolumes(io.dekorate.kubernetes.config.GitRepoVolume...);

  public abstract A addAllToGitRepoVolumes(java.util.Collection<io.dekorate.kubernetes.config.GitRepoVolume>);

  public abstract A removeFromGitRepoVolumes(io.dekorate.kubernetes.config.GitRepoVolume...);

  public abstract A removeAllFromGitRepoVolumes(java.util.Collection<io.dekorate.kubernetes.config.GitRepoVolume>);

  public abstract A removeMatchingFromGitRepoVolumes(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.GitRepoVolumeBuilder>);

  public abstract java.lang.Boolean hasGitRepoVolumes();

  public abstract A addNewGitRepoVolume(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$GitRepoVolumesNested<A> addNewGitRepoVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$GitRepoVolumesNested<A> addNewGitRepoVolumeLike(io.dekorate.kubernetes.config.GitRepoVolume);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$GitRepoVolumesNested<A> setNewGitRepoVolumeLike(int, io.dekorate.kubernetes.config.GitRepoVolume);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$GitRepoVolumesNested<A> editGitRepoVolume(int);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$GitRepoVolumesNested<A> editFirstGitRepoVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$GitRepoVolumesNested<A> editLastGitRepoVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$GitRepoVolumesNested<A> editMatchingGitRepoVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.GitRepoVolumeBuilder>);

  public abstract A withAwsElasticBlockStoreVolumes(io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume...);

  public abstract io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume[] getAwsElasticBlockStoreVolumes();

  public abstract io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume[] buildAwsElasticBlockStoreVolumes();

  public abstract io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume buildAwsElasticBlockStoreVolume(int);

  public abstract io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume buildFirstAwsElasticBlockStoreVolume();

  public abstract io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume buildLastAwsElasticBlockStoreVolume();

  public abstract io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume buildMatchingAwsElasticBlockStoreVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AwsElasticBlockStoreVolumeBuilder>);

  public abstract java.lang.Boolean hasMatchingAwsElasticBlockStoreVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AwsElasticBlockStoreVolumeBuilder>);

  public abstract A addToAwsElasticBlockStoreVolumes(int, io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume);

  public abstract A setToAwsElasticBlockStoreVolumes(int, io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume);

  public abstract A addToAwsElasticBlockStoreVolumes(io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume...);

  public abstract A addAllToAwsElasticBlockStoreVolumes(java.util.Collection<io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume>);

  public abstract A removeFromAwsElasticBlockStoreVolumes(io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume...);

  public abstract A removeAllFromAwsElasticBlockStoreVolumes(java.util.Collection<io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume>);

  public abstract A removeMatchingFromAwsElasticBlockStoreVolumes(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AwsElasticBlockStoreVolumeBuilder>);

  public abstract java.lang.Boolean hasAwsElasticBlockStoreVolumes();

  public abstract A addNewAwsElasticBlockStoreVolume(java.lang.String, java.lang.String, int, java.lang.String, boolean);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AwsElasticBlockStoreVolumesNested<A> addNewAwsElasticBlockStoreVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AwsElasticBlockStoreVolumesNested<A> addNewAwsElasticBlockStoreVolumeLike(io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AwsElasticBlockStoreVolumesNested<A> setNewAwsElasticBlockStoreVolumeLike(int, io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AwsElasticBlockStoreVolumesNested<A> editAwsElasticBlockStoreVolume(int);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AwsElasticBlockStoreVolumesNested<A> editFirstAwsElasticBlockStoreVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AwsElasticBlockStoreVolumesNested<A> editLastAwsElasticBlockStoreVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AwsElasticBlockStoreVolumesNested<A> editMatchingAwsElasticBlockStoreVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AwsElasticBlockStoreVolumeBuilder>);

  public abstract A withAzureDiskVolumes(io.dekorate.kubernetes.config.AzureDiskVolume...);

  public abstract io.dekorate.kubernetes.config.AzureDiskVolume[] getAzureDiskVolumes();

  public abstract io.dekorate.kubernetes.config.AzureDiskVolume[] buildAzureDiskVolumes();

  public abstract io.dekorate.kubernetes.config.AzureDiskVolume buildAzureDiskVolume(int);

  public abstract io.dekorate.kubernetes.config.AzureDiskVolume buildFirstAzureDiskVolume();

  public abstract io.dekorate.kubernetes.config.AzureDiskVolume buildLastAzureDiskVolume();

  public abstract io.dekorate.kubernetes.config.AzureDiskVolume buildMatchingAzureDiskVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AzureDiskVolumeBuilder>);

  public abstract java.lang.Boolean hasMatchingAzureDiskVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AzureDiskVolumeBuilder>);

  public abstract A addToAzureDiskVolumes(int, io.dekorate.kubernetes.config.AzureDiskVolume);

  public abstract A setToAzureDiskVolumes(int, io.dekorate.kubernetes.config.AzureDiskVolume);

  public abstract A addToAzureDiskVolumes(io.dekorate.kubernetes.config.AzureDiskVolume...);

  public abstract A addAllToAzureDiskVolumes(java.util.Collection<io.dekorate.kubernetes.config.AzureDiskVolume>);

  public abstract A removeFromAzureDiskVolumes(io.dekorate.kubernetes.config.AzureDiskVolume...);

  public abstract A removeAllFromAzureDiskVolumes(java.util.Collection<io.dekorate.kubernetes.config.AzureDiskVolume>);

  public abstract A removeMatchingFromAzureDiskVolumes(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AzureDiskVolumeBuilder>);

  public abstract java.lang.Boolean hasAzureDiskVolumes();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AzureDiskVolumesNested<A> addNewAzureDiskVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AzureDiskVolumesNested<A> addNewAzureDiskVolumeLike(io.dekorate.kubernetes.config.AzureDiskVolume);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AzureDiskVolumesNested<A> setNewAzureDiskVolumeLike(int, io.dekorate.kubernetes.config.AzureDiskVolume);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AzureDiskVolumesNested<A> editAzureDiskVolume(int);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AzureDiskVolumesNested<A> editFirstAzureDiskVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AzureDiskVolumesNested<A> editLastAzureDiskVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AzureDiskVolumesNested<A> editMatchingAzureDiskVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AzureDiskVolumeBuilder>);

  public abstract A withAzureFileVolumes(io.dekorate.kubernetes.config.AzureFileVolume...);

  public abstract io.dekorate.kubernetes.config.AzureFileVolume[] getAzureFileVolumes();

  public abstract io.dekorate.kubernetes.config.AzureFileVolume[] buildAzureFileVolumes();

  public abstract io.dekorate.kubernetes.config.AzureFileVolume buildAzureFileVolume(int);

  public abstract io.dekorate.kubernetes.config.AzureFileVolume buildFirstAzureFileVolume();

  public abstract io.dekorate.kubernetes.config.AzureFileVolume buildLastAzureFileVolume();

  public abstract io.dekorate.kubernetes.config.AzureFileVolume buildMatchingAzureFileVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AzureFileVolumeBuilder>);

  public abstract java.lang.Boolean hasMatchingAzureFileVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AzureFileVolumeBuilder>);

  public abstract A addToAzureFileVolumes(int, io.dekorate.kubernetes.config.AzureFileVolume);

  public abstract A setToAzureFileVolumes(int, io.dekorate.kubernetes.config.AzureFileVolume);

  public abstract A addToAzureFileVolumes(io.dekorate.kubernetes.config.AzureFileVolume...);

  public abstract A addAllToAzureFileVolumes(java.util.Collection<io.dekorate.kubernetes.config.AzureFileVolume>);

  public abstract A removeFromAzureFileVolumes(io.dekorate.kubernetes.config.AzureFileVolume...);

  public abstract A removeAllFromAzureFileVolumes(java.util.Collection<io.dekorate.kubernetes.config.AzureFileVolume>);

  public abstract A removeMatchingFromAzureFileVolumes(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AzureFileVolumeBuilder>);

  public abstract java.lang.Boolean hasAzureFileVolumes();

  public abstract A addNewAzureFileVolume(java.lang.String, java.lang.String, java.lang.String, boolean);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AzureFileVolumesNested<A> addNewAzureFileVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AzureFileVolumesNested<A> addNewAzureFileVolumeLike(io.dekorate.kubernetes.config.AzureFileVolume);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AzureFileVolumesNested<A> setNewAzureFileVolumeLike(int, io.dekorate.kubernetes.config.AzureFileVolume);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AzureFileVolumesNested<A> editAzureFileVolume(int);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AzureFileVolumesNested<A> editFirstAzureFileVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AzureFileVolumesNested<A> editLastAzureFileVolume();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$AzureFileVolumesNested<A> editMatchingAzureFileVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.AzureFileVolumeBuilder>);

  public abstract A withMounts(io.dekorate.kubernetes.config.Mount...);

  public abstract io.dekorate.kubernetes.config.Mount[] getMounts();

  public abstract io.dekorate.kubernetes.config.Mount[] buildMounts();

  public abstract io.dekorate.kubernetes.config.Mount buildMount(int);

  public abstract io.dekorate.kubernetes.config.Mount buildFirstMount();

  public abstract io.dekorate.kubernetes.config.Mount buildLastMount();

  public abstract io.dekorate.kubernetes.config.Mount buildMatchingMount(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.MountBuilder>);

  public abstract java.lang.Boolean hasMatchingMount(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.MountBuilder>);

  public abstract A addToMounts(int, io.dekorate.kubernetes.config.Mount);

  public abstract A setToMounts(int, io.dekorate.kubernetes.config.Mount);

  public abstract A addToMounts(io.dekorate.kubernetes.config.Mount...);

  public abstract A addAllToMounts(java.util.Collection<io.dekorate.kubernetes.config.Mount>);

  public abstract A removeFromMounts(io.dekorate.kubernetes.config.Mount...);

  public abstract A removeAllFromMounts(java.util.Collection<io.dekorate.kubernetes.config.Mount>);

  public abstract A removeMatchingFromMounts(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.MountBuilder>);

  public abstract java.lang.Boolean hasMounts();

  public abstract A addNewMount(java.lang.String, java.lang.String, java.lang.String, boolean);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$MountsNested<A> addNewMount();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$MountsNested<A> addNewMountLike(io.dekorate.kubernetes.config.Mount);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$MountsNested<A> setNewMountLike(int, io.dekorate.kubernetes.config.Mount);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$MountsNested<A> editMount(int);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$MountsNested<A> editFirstMount();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$MountsNested<A> editLastMount();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$MountsNested<A> editMatchingMount(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.MountBuilder>);

  public abstract io.dekorate.kubernetes.annotation.ImagePullPolicy getImagePullPolicy();

  public abstract A withImagePullPolicy(io.dekorate.kubernetes.annotation.ImagePullPolicy);

  public abstract java.lang.Boolean hasImagePullPolicy();

  public abstract A withImagePullSecrets(java.lang.String...);

  public abstract java.lang.String[] getImagePullSecrets();

  public abstract A addToImagePullSecrets(int, java.lang.String);

  public abstract A setToImagePullSecrets(int, java.lang.String);

  public abstract A addToImagePullSecrets(java.lang.String...);

  public abstract A addAllToImagePullSecrets(java.util.Collection<java.lang.String>);

  public abstract A removeFromImagePullSecrets(java.lang.String...);

  public abstract A removeAllFromImagePullSecrets(java.util.Collection<java.lang.String>);

  public abstract java.lang.Boolean hasImagePullSecrets();

  public abstract A addNewImagePullSecret(java.lang.String);

  public abstract A addNewImagePullSecret(java.lang.StringBuilder);

  public abstract A addNewImagePullSecret(java.lang.StringBuffer);

  public abstract io.dekorate.kubernetes.config.Probe getLivenessProbe();

  public abstract io.dekorate.kubernetes.config.Probe buildLivenessProbe();

  public abstract A withLivenessProbe(io.dekorate.kubernetes.config.Probe);

  public abstract java.lang.Boolean hasLivenessProbe();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$LivenessProbeNested<A> withNewLivenessProbe();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$LivenessProbeNested<A> withNewLivenessProbeLike(io.dekorate.kubernetes.config.Probe);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$LivenessProbeNested<A> editLivenessProbe();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$LivenessProbeNested<A> editOrNewLivenessProbe();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$LivenessProbeNested<A> editOrNewLivenessProbeLike(io.dekorate.kubernetes.config.Probe);

  public abstract io.dekorate.kubernetes.config.Probe getReadinessProbe();

  public abstract io.dekorate.kubernetes.config.Probe buildReadinessProbe();

  public abstract A withReadinessProbe(io.dekorate.kubernetes.config.Probe);

  public abstract java.lang.Boolean hasReadinessProbe();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$ReadinessProbeNested<A> withNewReadinessProbe();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$ReadinessProbeNested<A> withNewReadinessProbeLike(io.dekorate.kubernetes.config.Probe);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$ReadinessProbeNested<A> editReadinessProbe();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$ReadinessProbeNested<A> editOrNewReadinessProbe();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$ReadinessProbeNested<A> editOrNewReadinessProbeLike(io.dekorate.kubernetes.config.Probe);

  public abstract A withSidecars(io.dekorate.kubernetes.config.Container...);

  public abstract io.dekorate.kubernetes.config.Container[] getSidecars();

  public abstract io.dekorate.kubernetes.config.Container[] buildSidecars();

  public abstract io.dekorate.kubernetes.config.Container buildSidecar(int);

  public abstract io.dekorate.kubernetes.config.Container buildFirstSidecar();

  public abstract io.dekorate.kubernetes.config.Container buildLastSidecar();

  public abstract io.dekorate.kubernetes.config.Container buildMatchingSidecar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.ContainerBuilder>);

  public abstract java.lang.Boolean hasMatchingSidecar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.ContainerBuilder>);

  public abstract A addToSidecars(int, io.dekorate.kubernetes.config.Container);

  public abstract A setToSidecars(int, io.dekorate.kubernetes.config.Container);

  public abstract A addToSidecars(io.dekorate.kubernetes.config.Container...);

  public abstract A addAllToSidecars(java.util.Collection<io.dekorate.kubernetes.config.Container>);

  public abstract A removeFromSidecars(io.dekorate.kubernetes.config.Container...);

  public abstract A removeAllFromSidecars(java.util.Collection<io.dekorate.kubernetes.config.Container>);

  public abstract A removeMatchingFromSidecars(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.ContainerBuilder>);

  public abstract java.lang.Boolean hasSidecars();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$SidecarsNested<A> addNewSidecar();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$SidecarsNested<A> addNewSidecarLike(io.dekorate.kubernetes.config.Container);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$SidecarsNested<A> setNewSidecarLike(int, io.dekorate.kubernetes.config.Container);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$SidecarsNested<A> editSidecar(int);

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$SidecarsNested<A> editFirstSidecar();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$SidecarsNested<A> editLastSidecar();

  public abstract io.dekorate.kubernetes.config.BaseConfigFluent$SidecarsNested<A> editMatchingSidecar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.ContainerBuilder>);

  public abstract boolean isExpose();

  public abstract A withExpose(boolean);

  public abstract java.lang.Boolean hasExpose();

  public abstract boolean isAutoDeployEnabled();

  public abstract A withAutoDeployEnabled(boolean);

  public abstract java.lang.Boolean hasAutoDeployEnabled();
}
