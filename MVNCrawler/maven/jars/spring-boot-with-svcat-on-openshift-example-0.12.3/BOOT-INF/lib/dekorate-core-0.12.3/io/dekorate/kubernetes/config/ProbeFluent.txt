Compiled from "ProbeFluent.java"
public interface io.dekorate.kubernetes.config.ProbeFluent<A extends io.dekorate.kubernetes.config.ProbeFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getHttpActionPath();

  public abstract A withHttpActionPath(java.lang.String);

  public abstract java.lang.Boolean hasHttpActionPath();

  public abstract A withNewHttpActionPath(java.lang.String);

  public abstract A withNewHttpActionPath(java.lang.StringBuilder);

  public abstract A withNewHttpActionPath(java.lang.StringBuffer);

  public abstract java.lang.String getExecAction();

  public abstract A withExecAction(java.lang.String);

  public abstract java.lang.Boolean hasExecAction();

  public abstract A withNewExecAction(java.lang.String);

  public abstract A withNewExecAction(java.lang.StringBuilder);

  public abstract A withNewExecAction(java.lang.StringBuffer);

  public abstract java.lang.String getTcpSocketAction();

  public abstract A withTcpSocketAction(java.lang.String);

  public abstract java.lang.Boolean hasTcpSocketAction();

  public abstract A withNewTcpSocketAction(java.lang.String);

  public abstract A withNewTcpSocketAction(java.lang.StringBuilder);

  public abstract A withNewTcpSocketAction(java.lang.StringBuffer);

  public abstract int getInitialDelaySeconds();

  public abstract A withInitialDelaySeconds(int);

  public abstract java.lang.Boolean hasInitialDelaySeconds();

  public abstract int getPeriodSeconds();

  public abstract A withPeriodSeconds(int);

  public abstract java.lang.Boolean hasPeriodSeconds();

  public abstract int getTimeoutSeconds();

  public abstract A withTimeoutSeconds(int);

  public abstract java.lang.Boolean hasTimeoutSeconds();

  public abstract int getSuccessThreshold();

  public abstract A withSuccessThreshold(int);

  public abstract java.lang.Boolean hasSuccessThreshold();

  public abstract int getFailureThreshold();

  public abstract A withFailureThreshold(int);

  public abstract java.lang.Boolean hasFailureThreshold();
}
