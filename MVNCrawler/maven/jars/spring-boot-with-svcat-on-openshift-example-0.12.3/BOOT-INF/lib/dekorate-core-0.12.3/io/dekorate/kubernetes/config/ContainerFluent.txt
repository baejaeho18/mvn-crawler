Compiled from "ContainerFluent.java"
public interface io.dekorate.kubernetes.config.ContainerFluent<A extends io.dekorate.kubernetes.config.ContainerFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getImage();

  public abstract A withImage(java.lang.String);

  public abstract java.lang.Boolean hasImage();

  public abstract A withNewImage(java.lang.String);

  public abstract A withNewImage(java.lang.StringBuilder);

  public abstract A withNewImage(java.lang.StringBuffer);

  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();

  public abstract A withNewName(java.lang.String);

  public abstract A withNewName(java.lang.StringBuilder);

  public abstract A withNewName(java.lang.StringBuffer);

  public abstract A withEnvVars(io.dekorate.kubernetes.config.Env...);

  public abstract io.dekorate.kubernetes.config.Env[] getEnvVars();

  public abstract io.dekorate.kubernetes.config.Env[] buildEnvVars();

  public abstract io.dekorate.kubernetes.config.Env buildEnvVar(int);

  public abstract io.dekorate.kubernetes.config.Env buildFirstEnvVar();

  public abstract io.dekorate.kubernetes.config.Env buildLastEnvVar();

  public abstract io.dekorate.kubernetes.config.Env buildMatchingEnvVar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.EnvBuilder>);

  public abstract java.lang.Boolean hasMatchingEnvVar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.EnvBuilder>);

  public abstract A addToEnvVars(int, io.dekorate.kubernetes.config.Env);

  public abstract A setToEnvVars(int, io.dekorate.kubernetes.config.Env);

  public abstract A addToEnvVars(io.dekorate.kubernetes.config.Env...);

  public abstract A addAllToEnvVars(java.util.Collection<io.dekorate.kubernetes.config.Env>);

  public abstract A removeFromEnvVars(io.dekorate.kubernetes.config.Env...);

  public abstract A removeAllFromEnvVars(java.util.Collection<io.dekorate.kubernetes.config.Env>);

  public abstract A removeMatchingFromEnvVars(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.EnvBuilder>);

  public abstract java.lang.Boolean hasEnvVars();

  public abstract A addNewEnvVar(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.kubernetes.config.ContainerFluent$EnvVarsNested<A> addNewEnvVar();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$EnvVarsNested<A> addNewEnvVarLike(io.dekorate.kubernetes.config.Env);

  public abstract io.dekorate.kubernetes.config.ContainerFluent$EnvVarsNested<A> setNewEnvVarLike(int, io.dekorate.kubernetes.config.Env);

  public abstract io.dekorate.kubernetes.config.ContainerFluent$EnvVarsNested<A> editEnvVar(int);

  public abstract io.dekorate.kubernetes.config.ContainerFluent$EnvVarsNested<A> editFirstEnvVar();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$EnvVarsNested<A> editLastEnvVar();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$EnvVarsNested<A> editMatchingEnvVar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.EnvBuilder>);

  public abstract java.lang.String getWorkingDir();

  public abstract A withWorkingDir(java.lang.String);

  public abstract java.lang.Boolean hasWorkingDir();

  public abstract A withNewWorkingDir(java.lang.String);

  public abstract A withNewWorkingDir(java.lang.StringBuilder);

  public abstract A withNewWorkingDir(java.lang.StringBuffer);

  public abstract A withCommand(java.lang.String...);

  public abstract java.lang.String[] getCommand();

  public abstract A addToCommand(int, java.lang.String);

  public abstract A setToCommand(int, java.lang.String);

  public abstract A addToCommand(java.lang.String...);

  public abstract A addAllToCommand(java.util.Collection<java.lang.String>);

  public abstract A removeFromCommand(java.lang.String...);

  public abstract A removeAllFromCommand(java.util.Collection<java.lang.String>);

  public abstract java.lang.Boolean hasCommand();

  public abstract A addNewCommand(java.lang.String);

  public abstract A addNewCommand(java.lang.StringBuilder);

  public abstract A addNewCommand(java.lang.StringBuffer);

  public abstract A withArguments(java.lang.String...);

  public abstract java.lang.String[] getArguments();

  public abstract A addToArguments(int, java.lang.String);

  public abstract A setToArguments(int, java.lang.String);

  public abstract A addToArguments(java.lang.String...);

  public abstract A addAllToArguments(java.util.Collection<java.lang.String>);

  public abstract A removeFromArguments(java.lang.String...);

  public abstract A removeAllFromArguments(java.util.Collection<java.lang.String>);

  public abstract java.lang.Boolean hasArguments();

  public abstract A addNewArgument(java.lang.String);

  public abstract A addNewArgument(java.lang.StringBuilder);

  public abstract A addNewArgument(java.lang.StringBuffer);

  public abstract A withPorts(io.dekorate.kubernetes.config.Port...);

  public abstract io.dekorate.kubernetes.config.Port[] getPorts();

  public abstract io.dekorate.kubernetes.config.Port[] buildPorts();

  public abstract io.dekorate.kubernetes.config.Port buildPort(int);

  public abstract io.dekorate.kubernetes.config.Port buildFirstPort();

  public abstract io.dekorate.kubernetes.config.Port buildLastPort();

  public abstract io.dekorate.kubernetes.config.Port buildMatchingPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.PortBuilder>);

  public abstract java.lang.Boolean hasMatchingPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.PortBuilder>);

  public abstract A addToPorts(int, io.dekorate.kubernetes.config.Port);

  public abstract A setToPorts(int, io.dekorate.kubernetes.config.Port);

  public abstract A addToPorts(io.dekorate.kubernetes.config.Port...);

  public abstract A addAllToPorts(java.util.Collection<io.dekorate.kubernetes.config.Port>);

  public abstract A removeFromPorts(io.dekorate.kubernetes.config.Port...);

  public abstract A removeAllFromPorts(java.util.Collection<io.dekorate.kubernetes.config.Port>);

  public abstract A removeMatchingFromPorts(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.PortBuilder>);

  public abstract java.lang.Boolean hasPorts();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$PortsNested<A> addNewPort();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$PortsNested<A> addNewPortLike(io.dekorate.kubernetes.config.Port);

  public abstract io.dekorate.kubernetes.config.ContainerFluent$PortsNested<A> setNewPortLike(int, io.dekorate.kubernetes.config.Port);

  public abstract io.dekorate.kubernetes.config.ContainerFluent$PortsNested<A> editPort(int);

  public abstract io.dekorate.kubernetes.config.ContainerFluent$PortsNested<A> editFirstPort();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$PortsNested<A> editLastPort();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$PortsNested<A> editMatchingPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.PortBuilder>);

  public abstract A withMounts(io.dekorate.kubernetes.config.Mount...);

  public abstract io.dekorate.kubernetes.config.Mount[] getMounts();

  public abstract io.dekorate.kubernetes.config.Mount[] buildMounts();

  public abstract io.dekorate.kubernetes.config.Mount buildMount(int);

  public abstract io.dekorate.kubernetes.config.Mount buildFirstMount();

  public abstract io.dekorate.kubernetes.config.Mount buildLastMount();

  public abstract io.dekorate.kubernetes.config.Mount buildMatchingMount(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.MountBuilder>);

  public abstract java.lang.Boolean hasMatchingMount(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.MountBuilder>);

  public abstract A addToMounts(int, io.dekorate.kubernetes.config.Mount);

  public abstract A setToMounts(int, io.dekorate.kubernetes.config.Mount);

  public abstract A addToMounts(io.dekorate.kubernetes.config.Mount...);

  public abstract A addAllToMounts(java.util.Collection<io.dekorate.kubernetes.config.Mount>);

  public abstract A removeFromMounts(io.dekorate.kubernetes.config.Mount...);

  public abstract A removeAllFromMounts(java.util.Collection<io.dekorate.kubernetes.config.Mount>);

  public abstract A removeMatchingFromMounts(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.MountBuilder>);

  public abstract java.lang.Boolean hasMounts();

  public abstract A addNewMount(java.lang.String, java.lang.String, java.lang.String, boolean);

  public abstract io.dekorate.kubernetes.config.ContainerFluent$MountsNested<A> addNewMount();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$MountsNested<A> addNewMountLike(io.dekorate.kubernetes.config.Mount);

  public abstract io.dekorate.kubernetes.config.ContainerFluent$MountsNested<A> setNewMountLike(int, io.dekorate.kubernetes.config.Mount);

  public abstract io.dekorate.kubernetes.config.ContainerFluent$MountsNested<A> editMount(int);

  public abstract io.dekorate.kubernetes.config.ContainerFluent$MountsNested<A> editFirstMount();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$MountsNested<A> editLastMount();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$MountsNested<A> editMatchingMount(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.MountBuilder>);

  public abstract io.dekorate.kubernetes.annotation.ImagePullPolicy getImagePullPolicy();

  public abstract A withImagePullPolicy(io.dekorate.kubernetes.annotation.ImagePullPolicy);

  public abstract java.lang.Boolean hasImagePullPolicy();

  public abstract io.dekorate.kubernetes.config.Probe getLivenessProbe();

  public abstract io.dekorate.kubernetes.config.Probe buildLivenessProbe();

  public abstract A withLivenessProbe(io.dekorate.kubernetes.config.Probe);

  public abstract java.lang.Boolean hasLivenessProbe();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$LivenessProbeNested<A> withNewLivenessProbe();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$LivenessProbeNested<A> withNewLivenessProbeLike(io.dekorate.kubernetes.config.Probe);

  public abstract io.dekorate.kubernetes.config.ContainerFluent$LivenessProbeNested<A> editLivenessProbe();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$LivenessProbeNested<A> editOrNewLivenessProbe();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$LivenessProbeNested<A> editOrNewLivenessProbeLike(io.dekorate.kubernetes.config.Probe);

  public abstract io.dekorate.kubernetes.config.Probe getReadinessProbe();

  public abstract io.dekorate.kubernetes.config.Probe buildReadinessProbe();

  public abstract A withReadinessProbe(io.dekorate.kubernetes.config.Probe);

  public abstract java.lang.Boolean hasReadinessProbe();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$ReadinessProbeNested<A> withNewReadinessProbe();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$ReadinessProbeNested<A> withNewReadinessProbeLike(io.dekorate.kubernetes.config.Probe);

  public abstract io.dekorate.kubernetes.config.ContainerFluent$ReadinessProbeNested<A> editReadinessProbe();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$ReadinessProbeNested<A> editOrNewReadinessProbe();

  public abstract io.dekorate.kubernetes.config.ContainerFluent$ReadinessProbeNested<A> editOrNewReadinessProbeLike(io.dekorate.kubernetes.config.Probe);
}
