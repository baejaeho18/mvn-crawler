Compiled from "PersistentVolumeClaimVolumeFluentImpl.java"
public class io.dekorate.kubernetes.config.PersistentVolumeClaimVolumeFluentImpl<A extends io.dekorate.kubernetes.config.PersistentVolumeClaimVolumeFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.BaseFluent<A> implements io.dekorate.kubernetes.config.PersistentVolumeClaimVolumeFluent<A> {
  private java.lang.String volumeName;

  private java.lang.String claimName;

  private boolean readOnly;

  public io.dekorate.kubernetes.config.PersistentVolumeClaimVolumeFluentImpl();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/dekorate/deps/kubernetes/api/builder/BaseFluent."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field readOnly:Z
       9: return

  public io.dekorate.kubernetes.config.PersistentVolumeClaimVolumeFluentImpl(io.dekorate.kubernetes.config.PersistentVolumeClaimVolume);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/dekorate/deps/kubernetes/api/builder/BaseFluent."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field readOnly:Z
       9: aload_0
      10: aload_1
      11: invokevirtual #3                  // Method io/dekorate/kubernetes/config/PersistentVolumeClaimVolume.getVolumeName:()Ljava/lang/String;
      14: invokevirtual #4                  // Method withVolumeName:(Ljava/lang/String;)Lio/dekorate/kubernetes/config/PersistentVolumeClaimVolumeFluent;
      17: pop
      18: aload_0
      19: aload_1
      20: invokevirtual #5                  // Method io/dekorate/kubernetes/config/PersistentVolumeClaimVolume.getClaimName:()Ljava/lang/String;
      23: invokevirtual #6                  // Method withClaimName:(Ljava/lang/String;)Lio/dekorate/kubernetes/config/PersistentVolumeClaimVolumeFluent;
      26: pop
      27: aload_0
      28: aload_1
      29: invokevirtual #7                  // Method io/dekorate/kubernetes/config/PersistentVolumeClaimVolume.isReadOnly:()Z
      32: invokevirtual #8                  // Method withReadOnly:(Z)Lio/dekorate/kubernetes/config/PersistentVolumeClaimVolumeFluent;
      35: pop
      36: return

  public java.lang.String getVolumeName();
    Code:
       0: aload_0
       1: getfield      #9                  // Field volumeName:Ljava/lang/String;
       4: areturn

  public A withVolumeName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field volumeName:Ljava/lang/String;
       5: aload_0
       6: areturn

  public java.lang.Boolean hasVolumeName();
    Code:
       0: aload_0
       1: getfield      #9                  // Field volumeName:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #10                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      15: areturn

  public A withNewVolumeName(java.lang.String);
    Code:
       0: aload_0
       1: new           #11                 // class java/lang/String
       4: dup
       5: aload_1
       6: invokespecial #12                 // Method java/lang/String."<init>":(Ljava/lang/String;)V
       9: invokevirtual #4                  // Method withVolumeName:(Ljava/lang/String;)Lio/dekorate/kubernetes/config/PersistentVolumeClaimVolumeFluent;
      12: areturn

  public A withNewVolumeName(java.lang.StringBuilder);
    Code:
       0: aload_0
       1: new           #11                 // class java/lang/String
       4: dup
       5: aload_1
       6: invokespecial #13                 // Method java/lang/String."<init>":(Ljava/lang/StringBuilder;)V
       9: invokevirtual #4                  // Method withVolumeName:(Ljava/lang/String;)Lio/dekorate/kubernetes/config/PersistentVolumeClaimVolumeFluent;
      12: areturn

  public A withNewVolumeName(java.lang.StringBuffer);
    Code:
       0: aload_0
       1: new           #11                 // class java/lang/String
       4: dup
       5: aload_1
       6: invokespecial #14                 // Method java/lang/String."<init>":(Ljava/lang/StringBuffer;)V
       9: invokevirtual #4                  // Method withVolumeName:(Ljava/lang/String;)Lio/dekorate/kubernetes/config/PersistentVolumeClaimVolumeFluent;
      12: areturn

  public java.lang.String getClaimName();
    Code:
       0: aload_0
       1: getfield      #15                 // Field claimName:Ljava/lang/String;
       4: areturn

  public A withClaimName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field claimName:Ljava/lang/String;
       5: aload_0
       6: areturn

  public java.lang.Boolean hasClaimName();
    Code:
       0: aload_0
       1: getfield      #15                 // Field claimName:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #10                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      15: areturn

  public A withNewClaimName(java.lang.String);
    Code:
       0: aload_0
       1: new           #11                 // class java/lang/String
       4: dup
       5: aload_1
       6: invokespecial #12                 // Method java/lang/String."<init>":(Ljava/lang/String;)V
       9: invokevirtual #6                  // Method withClaimName:(Ljava/lang/String;)Lio/dekorate/kubernetes/config/PersistentVolumeClaimVolumeFluent;
      12: areturn

  public A withNewClaimName(java.lang.StringBuilder);
    Code:
       0: aload_0
       1: new           #11                 // class java/lang/String
       4: dup
       5: aload_1
       6: invokespecial #13                 // Method java/lang/String."<init>":(Ljava/lang/StringBuilder;)V
       9: invokevirtual #6                  // Method withClaimName:(Ljava/lang/String;)Lio/dekorate/kubernetes/config/PersistentVolumeClaimVolumeFluent;
      12: areturn

  public A withNewClaimName(java.lang.StringBuffer);
    Code:
       0: aload_0
       1: new           #11                 // class java/lang/String
       4: dup
       5: aload_1
       6: invokespecial #14                 // Method java/lang/String."<init>":(Ljava/lang/StringBuffer;)V
       9: invokevirtual #6                  // Method withClaimName:(Ljava/lang/String;)Lio/dekorate/kubernetes/config/PersistentVolumeClaimVolumeFluent;
      12: areturn

  public boolean isReadOnly();
    Code:
       0: aload_0
       1: getfield      #2                  // Field readOnly:Z
       4: ireturn

  public A withReadOnly(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field readOnly:Z
       5: aload_0
       6: areturn

  public java.lang.Boolean hasReadOnly();
    Code:
       0: iconst_1
       1: invokestatic  #10                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       4: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #16                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #16                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #17                 // class io/dekorate/kubernetes/config/PersistentVolumeClaimVolumeFluentImpl
      28: astore_2
      29: aload_0
      30: getfield      #9                  // Field volumeName:Ljava/lang/String;
      33: ifnull        53
      36: aload_0
      37: getfield      #9                  // Field volumeName:Ljava/lang/String;
      40: aload_2
      41: getfield      #9                  // Field volumeName:Ljava/lang/String;
      44: invokevirtual #18                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      47: ifne          62
      50: goto          60
      53: aload_2
      54: getfield      #9                  // Field volumeName:Ljava/lang/String;
      57: ifnull        62
      60: iconst_0
      61: ireturn
      62: aload_0
      63: getfield      #15                 // Field claimName:Ljava/lang/String;
      66: ifnull        86
      69: aload_0
      70: getfield      #15                 // Field claimName:Ljava/lang/String;
      73: aload_2
      74: getfield      #15                 // Field claimName:Ljava/lang/String;
      77: invokevirtual #18                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      80: ifne          95
      83: goto          93
      86: aload_2
      87: getfield      #15                 // Field claimName:Ljava/lang/String;
      90: ifnull        95
      93: iconst_0
      94: ireturn
      95: aload_0
      96: getfield      #2                  // Field readOnly:Z
      99: aload_2
     100: getfield      #2                  // Field readOnly:Z
     103: if_icmpeq     108
     106: iconst_0
     107: ireturn
     108: iconst_1
     109: ireturn
}
