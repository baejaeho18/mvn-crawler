Compiled from "BuildInfoFluent.java"
public interface io.dekorate.project.BuildInfoFluent<A extends io.dekorate.project.BuildInfoFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();

  public abstract A withNewName(java.lang.String);

  public abstract A withNewName(java.lang.StringBuilder);

  public abstract A withNewName(java.lang.StringBuffer);

  public abstract java.lang.String getVersion();

  public abstract A withVersion(java.lang.String);

  public abstract java.lang.Boolean hasVersion();

  public abstract A withNewVersion(java.lang.String);

  public abstract A withNewVersion(java.lang.StringBuilder);

  public abstract A withNewVersion(java.lang.StringBuffer);

  public abstract java.lang.String getPackaging();

  public abstract A withPackaging(java.lang.String);

  public abstract java.lang.Boolean hasPackaging();

  public abstract A withNewPackaging(java.lang.String);

  public abstract A withNewPackaging(java.lang.StringBuilder);

  public abstract A withNewPackaging(java.lang.StringBuffer);

  public abstract java.lang.String getBuildTool();

  public abstract A withBuildTool(java.lang.String);

  public abstract java.lang.Boolean hasBuildTool();

  public abstract A withNewBuildTool(java.lang.String);

  public abstract A withNewBuildTool(java.lang.StringBuilder);

  public abstract A withNewBuildTool(java.lang.StringBuffer);

  public abstract java.lang.String getBuildToolVersion();

  public abstract A withBuildToolVersion(java.lang.String);

  public abstract java.lang.Boolean hasBuildToolVersion();

  public abstract A withNewBuildToolVersion(java.lang.String);

  public abstract A withNewBuildToolVersion(java.lang.StringBuilder);

  public abstract A withNewBuildToolVersion(java.lang.StringBuffer);

  public abstract java.nio.file.Path getOutputFile();

  public abstract A withOutputFile(java.nio.file.Path);

  public abstract java.lang.Boolean hasOutputFile();

  public abstract java.nio.file.Path getClassOutputDir();

  public abstract A withClassOutputDir(java.nio.file.Path);

  public abstract java.lang.Boolean hasClassOutputDir();

  public abstract java.nio.file.Path getResourceDir();

  public abstract A withResourceDir(java.nio.file.Path);

  public abstract java.lang.Boolean hasResourceDir();
}
