Compiled from "Git.java"
public class io.dekorate.utils.Git {
  public static final java.lang.String DOT_GIT;

  public static final java.lang.String CONFIG;

  public static final java.lang.String ORIGIN;

  public static final java.lang.String OB;

  public static final java.lang.String CB;

  public static final java.lang.String SLASH;

  public static final java.lang.String COLN;

  public static final java.lang.String EQUALS;

  public static final java.lang.String REMOTE;

  public static final java.lang.String HEAD;

  public static final java.lang.String URL;

  public static final java.lang.String REF;

  public io.dekorate.utils.Git();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.util.Optional<java.nio.file.Path> getRoot(java.nio.file.Path);
    Code:
       0: aload_0
       1: astore_1
       2: aload_1
       3: ifnull        40
       6: aload_1
       7: ldc           #3                  // String .git
       9: invokeinterface #4,  2            // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
      14: invokeinterface #5,  1            // InterfaceMethod java/nio/file/Path.toFile:()Ljava/io/File;
      19: invokevirtual #6                  // Method java/io/File.exists:()Z
      22: ifne          40
      25: aload_1
      26: invokeinterface #7,  1            // InterfaceMethod java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;
      31: invokeinterface #8,  1            // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
      36: astore_1
      37: goto          2
      40: aload_1
      41: invokestatic  #9                  // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      44: areturn

  public static java.nio.file.Path getConfig(java.nio.file.Path);
    Code:
       0: aload_0
       1: ldc           #3                  // String .git
       3: invokeinterface #4,  2            // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
       8: ldc           #10                 // String config
      10: invokeinterface #4,  2            // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
      15: areturn

  public static java.nio.file.Path getHead(java.nio.file.Path);
    Code:
       0: aload_0
       1: ldc           #3                  // String .git
       3: invokeinterface #4,  2            // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
       8: ldc           #11                 // String HEAD
      10: invokeinterface #4,  2            // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
      15: areturn

  public static java.util.Optional<java.lang.String> getRemoteUrl(java.nio.file.Path, java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #12                 // Method getConfig:(Ljava/nio/file/Path;)Ljava/nio/file/Path;
       4: invokestatic  #13                 // Method java/nio/file/Files.lines:(Ljava/nio/file/Path;)Ljava/util/stream/Stream;
       7: invokedynamic #14,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      12: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      17: aload_1
      18: new           #16                 // class java/util/concurrent/atomic/AtomicBoolean
      21: dup
      22: invokespecial #17                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      25: invokestatic  #18                 // Method inRemote:(Ljava/lang/String;Ljava/util/concurrent/atomic/AtomicBoolean;)Ljava/util/function/Predicate;
      28: invokeinterface #19,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      33: invokedynamic #20,  0             // InvokeDynamic #1:test:()Ljava/util/function/Predicate;
      38: invokeinterface #19,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      43: invokedynamic #21,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      48: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      53: invokeinterface #22,  1           // InterfaceMethod java/util/stream/Stream.findAny:()Ljava/util/Optional;
      58: areturn
      59: astore_2
      60: invokestatic  #24                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      63: areturn
    Exception table:
       from    to  target type
           0    58    59   Class java/lang/Exception

  public static java.util.Optional<java.lang.String> getSafeRemoteUrl(java.nio.file.Path, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #25                 // Method getRemoteUrl:(Ljava/nio/file/Path;Ljava/lang/String;)Ljava/util/Optional;
       5: astore_2
       6: aload_2
       7: invokedynamic #26,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      12: invokevirtual #27                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      15: areturn

  static java.lang.String sanitizeRemoteUrl(java.lang.String);
    Code:
       0: aload_0
       1: bipush        64
       3: invokevirtual #28                 // Method java/lang/String.indexOf:(I)I
       6: istore_1
       7: iload_1
       8: ifle          48
      11: aload_0
      12: iload_1
      13: iconst_1
      14: iadd
      15: invokevirtual #29                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      18: astore_0
      19: aload_0
      20: ldc           #30                 // String :
      22: ldc           #31                 // String /
      24: invokevirtual #32                 // Method java/lang/String.replaceFirst:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      27: astore_0
      28: new           #33                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #34                 // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #35                 // String https://
      37: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: aload_0
      41: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: astore_0
      48: aload_0
      49: ldc           #3                  // String .git
      51: invokevirtual #38                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      54: ifne          77
      57: new           #33                 // class java/lang/StringBuilder
      60: dup
      61: invokespecial #34                 // Method java/lang/StringBuilder."<init>":()V
      64: aload_0
      65: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      68: ldc           #3                  // String .git
      70: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      76: astore_0
      77: aload_0
      78: areturn

  public static java.util.Optional<java.lang.String> getBranch(java.nio.file.Path);
    Code:
       0: aload_0
       1: invokestatic  #39                 // Method getHead:(Ljava/nio/file/Path;)Ljava/nio/file/Path;
       4: invokestatic  #13                 // Method java/nio/file/Files.lines:(Ljava/nio/file/Path;)Ljava/util/stream/Stream;
       7: invokedynamic #14,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      12: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      17: invokedynamic #40,  0             // InvokeDynamic #4:test:()Ljava/util/function/Predicate;
      22: invokeinterface #19,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      27: invokedynamic #41,  0             // InvokeDynamic #5:apply:()Ljava/util/function/Function;
      32: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      37: invokeinterface #22,  1           // InterfaceMethod java/util/stream/Stream.findAny:()Ljava/util/Optional;
      42: areturn
      43: astore_1
      44: invokestatic  #24                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      47: areturn
    Exception table:
       from    to  target type
           0    42    43   Class java/lang/Exception

  public static java.util.Optional<java.lang.String> getCommitSHA(java.nio.file.Path);
    Code:
       0: aload_0
       1: invokestatic  #39                 // Method getHead:(Ljava/nio/file/Path;)Ljava/nio/file/Path;
       4: invokestatic  #13                 // Method java/nio/file/Files.lines:(Ljava/nio/file/Path;)Ljava/util/stream/Stream;
       7: invokedynamic #14,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      12: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      17: invokedynamic #42,  0             // InvokeDynamic #6:test:()Ljava/util/function/Predicate;
      22: invokeinterface #19,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      27: invokedynamic #43,  0             // InvokeDynamic #7:apply:()Ljava/util/function/Function;
      32: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      37: aload_0
      38: invokedynamic #44,  0             // InvokeDynamic #8:apply:(Ljava/nio/file/Path;)Ljava/util/function/Function;
      43: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      48: invokedynamic #45,  0             // InvokeDynamic #9:test:()Ljava/util/function/Predicate;
      53: invokeinterface #19,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      58: invokedynamic #46,  0             // InvokeDynamic #10:apply:()Ljava/util/function/Function;
      63: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      68: invokedynamic #14,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      73: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      78: invokeinterface #22,  1           // InterfaceMethod java/util/stream/Stream.findAny:()Ljava/util/Optional;
      83: areturn
      84: astore_1
      85: invokestatic  #24                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      88: areturn
    Exception table:
       from    to  target type
           0    83    84   Class java/lang/Exception

  public static java.util.function.Predicate<java.lang.String> inRemote(java.lang.String, java.util.concurrent.atomic.AtomicBoolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #47,  0             // InvokeDynamic #11:test:(Ljava/lang/String;Ljava/util/concurrent/atomic/AtomicBoolean;)Ljava/util/function/Predicate;
       7: areturn

  private static boolean lambda$inRemote$8(java.lang.String, java.util.concurrent.atomic.AtomicBoolean, java.lang.String);
    Code:
       0: aload_2
       1: ldc           #48                 // String [
       3: invokevirtual #49                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       6: ifeq          43
       9: aload_2
      10: ldc           #50                 // String remote
      12: invokevirtual #51                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      15: ifeq          43
      18: aload_2
      19: aload_0
      20: invokevirtual #51                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      23: ifeq          43
      26: aload_2
      27: ldc           #52                 // String ]
      29: invokevirtual #38                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      32: ifeq          43
      35: aload_1
      36: iconst_1
      37: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      40: goto          66
      43: aload_2
      44: ldc           #48                 // String [
      46: invokevirtual #49                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      49: ifeq          66
      52: aload_2
      53: ldc           #52                 // String ]
      55: invokevirtual #38                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      58: ifeq          66
      61: aload_1
      62: iconst_0
      63: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      66: aload_1
      67: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      70: ireturn

  private static boolean lambda$getCommitSHA$7(java.nio.file.Path);
    Code:
       0: aload_0
       1: invokeinterface #5,  1            // InterfaceMethod java/nio/file/Path.toFile:()Ljava/io/File;
       6: invokevirtual #6                  // Method java/io/File.exists:()Z
       9: ireturn

  private static java.nio.file.Path lambda$getCommitSHA$6(java.nio.file.Path, java.lang.String);
    Code:
       0: aload_0
       1: ldc           #3                  // String .git
       3: invokeinterface #4,  2            // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
       8: aload_1
       9: invokeinterface #4,  2            // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
      14: areturn

  private static java.lang.String lambda$getCommitSHA$5(java.lang.String);
    Code:
       0: aload_0
       1: aload_0
       2: ldc           #30                 // String :
       4: invokevirtual #55                 // Method java/lang/String.lastIndexOf:(Ljava/lang/String;)I
       7: iconst_1
       8: iadd
       9: invokevirtual #29                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      12: invokevirtual #56                 // Method java/lang/String.trim:()Ljava/lang/String;
      15: areturn

  private static boolean lambda$getCommitSHA$4(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #57                 // String ref
       3: invokevirtual #49                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       6: ifeq          22
       9: aload_0
      10: ldc           #30                 // String :
      12: invokevirtual #51                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  private static java.lang.String lambda$getBranch$3(java.lang.String);
    Code:
       0: aload_0
       1: aload_0
       2: ldc           #31                 // String /
       4: invokevirtual #55                 // Method java/lang/String.lastIndexOf:(Ljava/lang/String;)I
       7: iconst_1
       8: iadd
       9: invokevirtual #29                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      12: invokevirtual #56                 // Method java/lang/String.trim:()Ljava/lang/String;
      15: areturn

  private static boolean lambda$getBranch$2(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #57                 // String ref
       3: invokevirtual #49                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       6: ifeq          22
       9: aload_0
      10: ldc           #31                 // String /
      12: invokevirtual #51                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  private static java.lang.String lambda$getRemoteUrl$1(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #58                 // String =
       3: invokevirtual #59                 // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
       6: iconst_1
       7: aaload
       8: invokevirtual #56                 // Method java/lang/String.trim:()Ljava/lang/String;
      11: areturn

  private static boolean lambda$getRemoteUrl$0(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #60                 // String url
       3: invokevirtual #49                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       6: ifeq          22
       9: aload_0
      10: ldc           #58                 // String =
      12: invokevirtual #51                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn
}
