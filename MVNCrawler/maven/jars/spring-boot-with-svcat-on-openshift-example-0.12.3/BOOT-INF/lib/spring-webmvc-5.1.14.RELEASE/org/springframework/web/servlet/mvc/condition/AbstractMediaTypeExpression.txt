Compiled from "AbstractMediaTypeExpression.java"
abstract class org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression implements org.springframework.web.servlet.mvc.condition.MediaTypeExpression, java.lang.Comparable<org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression> {
  protected final org.apache.commons.logging.Log logger;

  private final org.springframework.http.MediaType mediaType;

  private final boolean isNegated;

  org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_1
      16: ldc           #5                  // String !
      18: invokevirtual #6                  // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      21: ifeq          38
      24: aload_0
      25: iconst_1
      26: putfield      #7                  // Field isNegated:Z
      29: aload_1
      30: iconst_1
      31: invokevirtual #8                  // Method java/lang/String.substring:(I)Ljava/lang/String;
      34: astore_1
      35: goto          43
      38: aload_0
      39: iconst_0
      40: putfield      #7                  // Field isNegated:Z
      43: aload_0
      44: aload_1
      45: invokestatic  #9                  // Method org/springframework/http/MediaType.parseMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
      48: putfield      #10                 // Field mediaType:Lorg/springframework/http/MediaType;
      51: return

  org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression(org.springframework.http.MediaType, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: aload_1
      17: putfield      #10                 // Field mediaType:Lorg/springframework/http/MediaType;
      20: aload_0
      21: iload_2
      22: putfield      #7                  // Field isNegated:Z
      25: return

  public org.springframework.http.MediaType getMediaType();
    Code:
       0: aload_0
       1: getfield      #10                 // Field mediaType:Lorg/springframework/http/MediaType;
       4: areturn

  public boolean isNegated();
    Code:
       0: aload_0
       1: getfield      #7                  // Field isNegated:Z
       4: ireturn

  public int compareTo(org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression);
    Code:
       0: getstatic     #11                 // Field org/springframework/http/MediaType.SPECIFICITY_COMPARATOR:Ljava/util/Comparator;
       3: aload_0
       4: invokevirtual #12                 // Method getMediaType:()Lorg/springframework/http/MediaType;
       7: aload_1
       8: invokevirtual #12                 // Method getMediaType:()Lorg/springframework/http/MediaType;
      11: invokeinterface #13,  3           // InterfaceMethod java/util/Comparator.compare:(Ljava/lang/Object;Ljava/lang/Object;)I
      16: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #14                 // class org/springframework/web/servlet/mvc/condition/AbstractMediaTypeExpression
      28: astore_2
      29: aload_0
      30: getfield      #10                 // Field mediaType:Lorg/springframework/http/MediaType;
      33: aload_2
      34: getfield      #10                 // Field mediaType:Lorg/springframework/http/MediaType;
      37: invokevirtual #15                 // Method org/springframework/http/MediaType.equals:(Ljava/lang/Object;)Z
      40: ifeq          58
      43: aload_0
      44: getfield      #7                  // Field isNegated:Z
      47: aload_2
      48: getfield      #7                  // Field isNegated:Z
      51: if_icmpne     58
      54: iconst_1
      55: goto          59
      58: iconst_0
      59: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #10                 // Field mediaType:Lorg/springframework/http/MediaType;
       4: invokevirtual #16                 // Method org/springframework/http/MediaType.hashCode:()I
       7: ireturn

  public java.lang.String toString();
    Code:
       0: new           #17                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #7                  // Field isNegated:Z
      12: ifeq          22
      15: aload_1
      16: bipush        33
      18: invokevirtual #19                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      21: pop
      22: aload_1
      23: aload_0
      24: getfield      #10                 // Field mediaType:Lorg/springframework/http/MediaType;
      27: invokevirtual #20                 // Method org/springframework/http/MediaType.toString:()Ljava/lang/String;
      30: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: pop
      34: aload_1
      35: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      38: areturn

  public int compareTo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #14                 // class org/springframework/web/servlet/mvc/condition/AbstractMediaTypeExpression
       5: invokevirtual #23                 // Method compareTo:(Lorg/springframework/web/servlet/mvc/condition/AbstractMediaTypeExpression;)I
       8: ireturn
}
