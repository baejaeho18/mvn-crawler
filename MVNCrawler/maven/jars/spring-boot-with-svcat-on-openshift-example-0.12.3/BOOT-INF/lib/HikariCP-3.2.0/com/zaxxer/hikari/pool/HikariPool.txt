Compiled from "HikariPool.java"
public final class com.zaxxer.hikari.pool.HikariPool extends com.zaxxer.hikari.pool.PoolBase implements com.zaxxer.hikari.HikariPoolMXBean,com.zaxxer.hikari.util.ConcurrentBag$IBagStateListener {
  private final org.slf4j.Logger LOGGER;

  public static final int POOL_NORMAL;

  public static final int POOL_SUSPENDED;

  public static final int POOL_SHUTDOWN;

  public volatile int poolState;

  private final long ALIVE_BYPASS_WINDOW_MS;

  private final long HOUSEKEEPING_PERIOD_MS;

  private static final java.lang.String EVICTED_CONNECTION_MESSAGE;

  private static final java.lang.String DEAD_CONNECTION_MESSAGE;

  private final com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator POOL_ENTRY_CREATOR;

  private final com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator POST_FILL_POOL_ENTRY_CREATOR;

  private final java.util.Collection<java.lang.Runnable> addConnectionQueue;

  private final java.util.concurrent.ThreadPoolExecutor addConnectionExecutor;

  private final java.util.concurrent.ThreadPoolExecutor closeConnectionExecutor;

  private final com.zaxxer.hikari.util.ConcurrentBag<com.zaxxer.hikari.pool.PoolEntry> connectionBag;

  private final com.zaxxer.hikari.pool.ProxyLeakTaskFactory leakTaskFactory;

  private final com.zaxxer.hikari.util.SuspendResumeLock suspendResumeLock;

  private final java.util.concurrent.ScheduledExecutorService houseKeepingExecutorService;

  private java.util.concurrent.ScheduledFuture<?> houseKeeperTask;

  public com.zaxxer.hikari.pool.HikariPool(com.zaxxer.hikari.HikariConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method com/zaxxer/hikari/pool/PoolBase."<init>":(Lcom/zaxxer/hikari/HikariConfig;)V
       5: aload_0
       6: ldc           #9                  // class com/zaxxer/hikari/pool/HikariPool
       8: invokestatic  #10                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
      11: putfield      #5                  // Field LOGGER:Lorg/slf4j/Logger;
      14: aload_0
      15: ldc           #11                 // String com.zaxxer.hikari.aliveBypassWindowMs
      17: getstatic     #12                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      20: ldc2_w        #13                 // long 500l
      23: invokevirtual #15                 // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      26: invokestatic  #16                 // Method java/lang/Long.getLong:(Ljava/lang/String;J)Ljava/lang/Long;
      29: invokevirtual #17                 // Method java/lang/Long.longValue:()J
      32: putfield      #18                 // Field ALIVE_BYPASS_WINDOW_MS:J
      35: aload_0
      36: ldc           #19                 // String com.zaxxer.hikari.housekeeping.periodMs
      38: getstatic     #20                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      41: ldc2_w        #21                 // long 30l
      44: invokevirtual #15                 // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      47: invokestatic  #16                 // Method java/lang/Long.getLong:(Ljava/lang/String;J)Ljava/lang/Long;
      50: invokevirtual #17                 // Method java/lang/Long.longValue:()J
      53: putfield      #4                  // Field HOUSEKEEPING_PERIOD_MS:J
      56: aload_0
      57: new           #23                 // class com/zaxxer/hikari/pool/HikariPool$PoolEntryCreator
      60: dup
      61: aload_0
      62: aconst_null
      63: invokespecial #24                 // Method com/zaxxer/hikari/pool/HikariPool$PoolEntryCreator."<init>":(Lcom/zaxxer/hikari/pool/HikariPool;Ljava/lang/String;)V
      66: putfield      #25                 // Field POOL_ENTRY_CREATOR:Lcom/zaxxer/hikari/pool/HikariPool$PoolEntryCreator;
      69: aload_0
      70: new           #23                 // class com/zaxxer/hikari/pool/HikariPool$PoolEntryCreator
      73: dup
      74: aload_0
      75: ldc           #26                 // String After adding
      77: invokespecial #24                 // Method com/zaxxer/hikari/pool/HikariPool$PoolEntryCreator."<init>":(Lcom/zaxxer/hikari/pool/HikariPool;Ljava/lang/String;)V
      80: putfield      #27                 // Field POST_FILL_POOL_ENTRY_CREATOR:Lcom/zaxxer/hikari/pool/HikariPool$PoolEntryCreator;
      83: aload_0
      84: new           #28                 // class com/zaxxer/hikari/util/ConcurrentBag
      87: dup
      88: aload_0
      89: invokespecial #29                 // Method com/zaxxer/hikari/util/ConcurrentBag."<init>":(Lcom/zaxxer/hikari/util/ConcurrentBag$IBagStateListener;)V
      92: putfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
      95: aload_0
      96: aload_1
      97: invokevirtual #30                 // Method com/zaxxer/hikari/HikariConfig.isAllowPoolSuspension:()Z
     100: ifeq          113
     103: new           #31                 // class com/zaxxer/hikari/util/SuspendResumeLock
     106: dup
     107: invokespecial #32                 // Method com/zaxxer/hikari/util/SuspendResumeLock."<init>":()V
     110: goto          116
     113: getstatic     #33                 // Field com/zaxxer/hikari/util/SuspendResumeLock.FAUX_LOCK:Lcom/zaxxer/hikari/util/SuspendResumeLock;
     116: putfield      #34                 // Field suspendResumeLock:Lcom/zaxxer/hikari/util/SuspendResumeLock;
     119: aload_0
     120: aload_0
     121: invokespecial #35                 // Method initializeHouseKeepingExecutorService:()Ljava/util/concurrent/ScheduledExecutorService;
     124: putfield      #36                 // Field houseKeepingExecutorService:Ljava/util/concurrent/ScheduledExecutorService;
     127: aload_0
     128: invokespecial #37                 // Method checkFailFast:()V
     131: aload_1
     132: invokevirtual #38                 // Method com/zaxxer/hikari/HikariConfig.getMetricsTrackerFactory:()Lcom/zaxxer/hikari/metrics/MetricsTrackerFactory;
     135: ifnull        149
     138: aload_0
     139: aload_1
     140: invokevirtual #38                 // Method com/zaxxer/hikari/HikariConfig.getMetricsTrackerFactory:()Lcom/zaxxer/hikari/metrics/MetricsTrackerFactory;
     143: invokevirtual #39                 // Method setMetricsTrackerFactory:(Lcom/zaxxer/hikari/metrics/MetricsTrackerFactory;)V
     146: goto          157
     149: aload_0
     150: aload_1
     151: invokevirtual #40                 // Method com/zaxxer/hikari/HikariConfig.getMetricRegistry:()Ljava/lang/Object;
     154: invokevirtual #41                 // Method setMetricRegistry:(Ljava/lang/Object;)V
     157: aload_0
     158: aload_1
     159: invokevirtual #42                 // Method com/zaxxer/hikari/HikariConfig.getHealthCheckRegistry:()Ljava/lang/Object;
     162: invokevirtual #43                 // Method setHealthCheckRegistry:(Ljava/lang/Object;)V
     165: aload_0
     166: aload_0
     167: invokevirtual #44                 // Method registerMBeans:(Lcom/zaxxer/hikari/pool/HikariPool;)V
     170: aload_1
     171: invokevirtual #45                 // Method com/zaxxer/hikari/HikariConfig.getThreadFactory:()Ljava/util/concurrent/ThreadFactory;
     174: astore_2
     175: new           #46                 // class java/util/concurrent/LinkedBlockingQueue
     178: dup
     179: aload_1
     180: invokevirtual #47                 // Method com/zaxxer/hikari/HikariConfig.getMaximumPoolSize:()I
     183: invokespecial #48                 // Method java/util/concurrent/LinkedBlockingQueue."<init>":(I)V
     186: astore_3
     187: aload_0
     188: aload_3
     189: invokestatic  #49                 // Method java/util/Collections.unmodifiableCollection:(Ljava/util/Collection;)Ljava/util/Collection;
     192: putfield      #50                 // Field addConnectionQueue:Ljava/util/Collection;
     195: aload_0
     196: aload_3
     197: new           #51                 // class java/lang/StringBuilder
     200: dup
     201: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
     204: aload_0
     205: getfield      #53                 // Field poolName:Ljava/lang/String;
     208: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     211: ldc           #55                 // String  connection adder
     213: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     216: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     219: aload_2
     220: new           #57                 // class java/util/concurrent/ThreadPoolExecutor$DiscardPolicy
     223: dup
     224: invokespecial #58                 // Method java/util/concurrent/ThreadPoolExecutor$DiscardPolicy."<init>":()V
     227: invokestatic  #59                 // Method com/zaxxer/hikari/util/UtilityElf.createThreadPoolExecutor:(Ljava/util/concurrent/BlockingQueue;Ljava/lang/String;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)Ljava/util/concurrent/ThreadPoolExecutor;
     230: putfield      #60                 // Field addConnectionExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
     233: aload_0
     234: aload_1
     235: invokevirtual #47                 // Method com/zaxxer/hikari/HikariConfig.getMaximumPoolSize:()I
     238: new           #51                 // class java/lang/StringBuilder
     241: dup
     242: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
     245: aload_0
     246: getfield      #53                 // Field poolName:Ljava/lang/String;
     249: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     252: ldc           #61                 // String  connection closer
     254: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     257: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     260: aload_2
     261: new           #62                 // class java/util/concurrent/ThreadPoolExecutor$CallerRunsPolicy
     264: dup
     265: invokespecial #63                 // Method java/util/concurrent/ThreadPoolExecutor$CallerRunsPolicy."<init>":()V
     268: invokestatic  #64                 // Method com/zaxxer/hikari/util/UtilityElf.createThreadPoolExecutor:(ILjava/lang/String;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)Ljava/util/concurrent/ThreadPoolExecutor;
     271: putfield      #65                 // Field closeConnectionExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
     274: aload_0
     275: new           #66                 // class com/zaxxer/hikari/pool/ProxyLeakTaskFactory
     278: dup
     279: aload_1
     280: invokevirtual #67                 // Method com/zaxxer/hikari/HikariConfig.getLeakDetectionThreshold:()J
     283: aload_0
     284: getfield      #36                 // Field houseKeepingExecutorService:Ljava/util/concurrent/ScheduledExecutorService;
     287: invokespecial #68                 // Method com/zaxxer/hikari/pool/ProxyLeakTaskFactory."<init>":(JLjava/util/concurrent/ScheduledExecutorService;)V
     290: putfield      #3                  // Field leakTaskFactory:Lcom/zaxxer/hikari/pool/ProxyLeakTaskFactory;
     293: aload_0
     294: aload_0
     295: getfield      #36                 // Field houseKeepingExecutorService:Ljava/util/concurrent/ScheduledExecutorService;
     298: new           #69                 // class com/zaxxer/hikari/pool/HikariPool$HouseKeeper
     301: dup
     302: aload_0
     303: aconst_null
     304: invokespecial #70                 // Method com/zaxxer/hikari/pool/HikariPool$HouseKeeper."<init>":(Lcom/zaxxer/hikari/pool/HikariPool;Lcom/zaxxer/hikari/pool/HikariPool$1;)V
     307: ldc2_w        #71                 // long 100l
     310: aload_0
     311: getfield      #4                  // Field HOUSEKEEPING_PERIOD_MS:J
     314: getstatic     #12                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     317: invokeinterface #73,  7           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.scheduleWithFixedDelay:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
     322: putfield      #74                 // Field houseKeeperTask:Ljava/util/concurrent/ScheduledFuture;
     325: ldc           #75                 // String com.zaxxer.hikari.blockUntilFilled
     327: invokestatic  #76                 // Method java/lang/Boolean.getBoolean:(Ljava/lang/String;)Z
     330: ifeq          386
     333: aload_1
     334: invokevirtual #77                 // Method com/zaxxer/hikari/HikariConfig.getInitializationFailTimeout:()J
     337: lconst_1
     338: lcmp
     339: ifle          386
     342: invokestatic  #78                 // InterfaceMethod com/zaxxer/hikari/util/ClockSource.currentTime:()J
     345: lstore        4
     347: lload         4
     349: invokestatic  #79                 // InterfaceMethod com/zaxxer/hikari/util/ClockSource.elapsedMillis:(J)J
     352: aload_1
     353: invokevirtual #77                 // Method com/zaxxer/hikari/HikariConfig.getInitializationFailTimeout:()J
     356: lcmp
     357: ifge          386
     360: aload_0
     361: invokevirtual #80                 // Method getTotalConnections:()I
     364: aload_1
     365: invokevirtual #81                 // Method com/zaxxer/hikari/HikariConfig.getMinimumIdle:()I
     368: if_icmpge     386
     371: getstatic     #12                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     374: ldc2_w        #71                 // long 100l
     377: invokevirtual #15                 // Method java/util/concurrent/TimeUnit.toMillis:(J)J
     380: invokestatic  #82                 // Method com/zaxxer/hikari/util/UtilityElf.quietlySleep:(J)V
     383: goto          347
     386: return

  public java.sql.Connection getConnection() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #83                 // Field connectionTimeout:J
       5: invokevirtual #84                 // Method getConnection:(J)Ljava/sql/Connection;
       8: areturn

  public java.sql.Connection getConnection(long) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #34                 // Field suspendResumeLock:Lcom/zaxxer/hikari/util/SuspendResumeLock;
       4: invokevirtual #85                 // Method com/zaxxer/hikari/util/SuspendResumeLock.acquire:()V
       7: invokestatic  #78                 // InterfaceMethod com/zaxxer/hikari/util/ClockSource.currentTime:()J
      10: lstore_3
      11: lload_1
      12: lstore        5
      14: aload_0
      15: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
      18: lload         5
      20: getstatic     #12                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      23: invokevirtual #86                 // Method com/zaxxer/hikari/util/ConcurrentBag.borrow:(JLjava/util/concurrent/TimeUnit;)Lcom/zaxxer/hikari/util/ConcurrentBag$IConcurrentBagEntry;
      26: checkcast     #87                 // class com/zaxxer/hikari/pool/PoolEntry
      29: astore        7
      31: aload         7
      33: ifnonnull     39
      36: goto          161
      39: invokestatic  #78                 // InterfaceMethod com/zaxxer/hikari/util/ClockSource.currentTime:()J
      42: lstore        8
      44: aload         7
      46: invokevirtual #88                 // Method com/zaxxer/hikari/pool/PoolEntry.isMarkedEvicted:()Z
      49: ifne          82
      52: aload         7
      54: getfield      #89                 // Field com/zaxxer/hikari/pool/PoolEntry.lastAccessed:J
      57: lload         8
      59: invokestatic  #90                 // InterfaceMethod com/zaxxer/hikari/util/ClockSource.elapsedMillis:(JJ)J
      62: aload_0
      63: getfield      #18                 // Field ALIVE_BYPASS_WINDOW_MS:J
      66: lcmp
      67: ifle          114
      70: aload_0
      71: aload         7
      73: getfield      #91                 // Field com/zaxxer/hikari/pool/PoolEntry.connection:Ljava/sql/Connection;
      76: invokevirtual #92                 // Method isConnectionAlive:(Ljava/sql/Connection;)Z
      79: ifne          114
      82: aload_0
      83: aload         7
      85: aload         7
      87: invokevirtual #88                 // Method com/zaxxer/hikari/pool/PoolEntry.isMarkedEvicted:()Z
      90: ifeq          98
      93: ldc           #93                 // String (connection was evicted)
      95: goto          100
      98: ldc           #94                 // String (connection is dead)
     100: invokevirtual #95                 // Method closeConnection:(Lcom/zaxxer/hikari/pool/PoolEntry;Ljava/lang/String;)V
     103: lload_1
     104: lload_3
     105: invokestatic  #79                 // InterfaceMethod com/zaxxer/hikari/util/ClockSource.elapsedMillis:(J)J
     108: lsub
     109: lstore        5
     111: goto          154
     114: aload_0
     115: getfield      #96                 // Field metricsTracker:Lcom/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate;
     118: aload         7
     120: lload_3
     121: invokeinterface #97,  4           // InterfaceMethod com/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate.recordBorrowStats:(Lcom/zaxxer/hikari/pool/PoolEntry;J)V
     126: aload         7
     128: aload_0
     129: getfield      #3                  // Field leakTaskFactory:Lcom/zaxxer/hikari/pool/ProxyLeakTaskFactory;
     132: aload         7
     134: invokevirtual #98                 // Method com/zaxxer/hikari/pool/ProxyLeakTaskFactory.schedule:(Lcom/zaxxer/hikari/pool/PoolEntry;)Lcom/zaxxer/hikari/pool/ProxyLeakTask;
     137: lload         8
     139: invokevirtual #99                 // Method com/zaxxer/hikari/pool/PoolEntry.createProxyConnection:(Lcom/zaxxer/hikari/pool/ProxyLeakTask;J)Ljava/sql/Connection;
     142: astore        10
     144: aload_0
     145: getfield      #34                 // Field suspendResumeLock:Lcom/zaxxer/hikari/util/SuspendResumeLock;
     148: invokevirtual #100                // Method com/zaxxer/hikari/util/SuspendResumeLock.release:()V
     151: aload         10
     153: areturn
     154: lload         5
     156: lconst_0
     157: lcmp
     158: ifgt          14
     161: aload_0
     162: getfield      #96                 // Field metricsTracker:Lcom/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate;
     165: lload_3
     166: invokeinterface #101,  3          // InterfaceMethod com/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate.recordBorrowTimeoutStats:(J)V
     171: aload_0
     172: lload_3
     173: invokespecial #102                // Method createTimeoutException:(J)Ljava/sql/SQLException;
     176: athrow
     177: astore        5
     179: invokestatic  #104                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     182: invokevirtual #105                // Method java/lang/Thread.interrupt:()V
     185: new           #106                // class java/sql/SQLException
     188: dup
     189: new           #51                 // class java/lang/StringBuilder
     192: dup
     193: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
     196: aload_0
     197: getfield      #53                 // Field poolName:Ljava/lang/String;
     200: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     203: ldc           #107                // String  - Interrupted during connection acquisition
     205: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     208: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     211: aload         5
     213: invokespecial #108                // Method java/sql/SQLException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     216: athrow
     217: astore        11
     219: aload_0
     220: getfield      #34                 // Field suspendResumeLock:Lcom/zaxxer/hikari/util/SuspendResumeLock;
     223: invokevirtual #100                // Method com/zaxxer/hikari/util/SuspendResumeLock.release:()V
     226: aload         11
     228: athrow
    Exception table:
       from    to  target type
          11   144   177   Class java/lang/InterruptedException
         154   177   177   Class java/lang/InterruptedException
          11   144   217   any
         154   219   217   any

  public synchronized void shutdown() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: iconst_2
       2: putfield      #109                // Field poolState:I
       5: aload_0
       6: getfield      #60                 // Field addConnectionExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
       9: ifnonnull     39
      12: aload_0
      13: iconst_1
      14: anewarray     #110                // class java/lang/String
      17: dup
      18: iconst_0
      19: ldc           #111                // String After shutdown
      21: aastore
      22: invokevirtual #112                // Method logPoolState:([Ljava/lang/String;)V
      25: aload_0
      26: invokevirtual #113                // Method unregisterMBeans:()V
      29: aload_0
      30: getfield      #96                 // Field metricsTracker:Lcom/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate;
      33: invokeinterface #114,  1          // InterfaceMethod com/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate.close:()V
      38: return
      39: aload_0
      40: iconst_1
      41: anewarray     #110                // class java/lang/String
      44: dup
      45: iconst_0
      46: ldc           #115                // String Before shutdown
      48: aastore
      49: invokevirtual #112                // Method logPoolState:([Ljava/lang/String;)V
      52: aload_0
      53: getfield      #74                 // Field houseKeeperTask:Ljava/util/concurrent/ScheduledFuture;
      56: ifnull        75
      59: aload_0
      60: getfield      #74                 // Field houseKeeperTask:Ljava/util/concurrent/ScheduledFuture;
      63: iconst_0
      64: invokeinterface #116,  2          // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      69: pop
      70: aload_0
      71: aconst_null
      72: putfield      #74                 // Field houseKeeperTask:Ljava/util/concurrent/ScheduledFuture;
      75: aload_0
      76: invokevirtual #117                // Method softEvictConnections:()V
      79: aload_0
      80: getfield      #60                 // Field addConnectionExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
      83: invokevirtual #118                // Method java/util/concurrent/ThreadPoolExecutor.shutdown:()V
      86: aload_0
      87: getfield      #60                 // Field addConnectionExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
      90: aload_0
      91: invokevirtual #119                // Method getLoginTimeout:()J
      94: getstatic     #20                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      97: invokevirtual #120                // Method java/util/concurrent/ThreadPoolExecutor.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z
     100: pop
     101: aload_0
     102: invokespecial #121                // Method destroyHouseKeepingExecutorService:()V
     105: aload_0
     106: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
     109: invokevirtual #122                // Method com/zaxxer/hikari/util/ConcurrentBag.close:()V
     112: aload_0
     113: getfield      #123                // Field config:Lcom/zaxxer/hikari/HikariConfig;
     116: invokevirtual #47                 // Method com/zaxxer/hikari/HikariConfig.getMaximumPoolSize:()I
     119: new           #51                 // class java/lang/StringBuilder
     122: dup
     123: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
     126: aload_0
     127: getfield      #53                 // Field poolName:Ljava/lang/String;
     130: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     133: ldc           #124                // String  connection assassinator
     135: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     138: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     141: aload_0
     142: getfield      #123                // Field config:Lcom/zaxxer/hikari/HikariConfig;
     145: invokevirtual #45                 // Method com/zaxxer/hikari/HikariConfig.getThreadFactory:()Ljava/util/concurrent/ThreadFactory;
     148: new           #62                 // class java/util/concurrent/ThreadPoolExecutor$CallerRunsPolicy
     151: dup
     152: invokespecial #63                 // Method java/util/concurrent/ThreadPoolExecutor$CallerRunsPolicy."<init>":()V
     155: invokestatic  #64                 // Method com/zaxxer/hikari/util/UtilityElf.createThreadPoolExecutor:(ILjava/lang/String;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)Ljava/util/concurrent/ThreadPoolExecutor;
     158: astore_1
     159: invokestatic  #78                 // InterfaceMethod com/zaxxer/hikari/util/ClockSource.currentTime:()J
     162: lstore_2
     163: aload_0
     164: aload_1
     165: invokespecial #125                // Method abortActiveConnections:(Ljava/util/concurrent/ExecutorService;)V
     168: aload_0
     169: invokevirtual #117                // Method softEvictConnections:()V
     172: aload_0
     173: invokevirtual #80                 // Method getTotalConnections:()I
     176: ifle          196
     179: lload_2
     180: invokestatic  #79                 // InterfaceMethod com/zaxxer/hikari/util/ClockSource.elapsedMillis:(J)J
     183: getstatic     #20                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
     186: ldc2_w        #126                // long 10l
     189: invokevirtual #15                 // Method java/util/concurrent/TimeUnit.toMillis:(J)J
     192: lcmp
     193: iflt          163
     196: aload_1
     197: invokeinterface #128,  1          // InterfaceMethod java/util/concurrent/ExecutorService.shutdown:()V
     202: aload_1
     203: ldc2_w        #126                // long 10l
     206: getstatic     #20                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
     209: invokeinterface #129,  4          // InterfaceMethod java/util/concurrent/ExecutorService.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z
     214: pop
     215: goto          242
     218: astore        4
     220: aload_1
     221: invokeinterface #128,  1          // InterfaceMethod java/util/concurrent/ExecutorService.shutdown:()V
     226: aload_1
     227: ldc2_w        #126                // long 10l
     230: getstatic     #20                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
     233: invokeinterface #129,  4          // InterfaceMethod java/util/concurrent/ExecutorService.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z
     238: pop
     239: aload         4
     241: athrow
     242: aload_0
     243: invokevirtual #130                // Method shutdownNetworkTimeoutExecutor:()V
     246: aload_0
     247: getfield      #65                 // Field closeConnectionExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
     250: invokevirtual #118                // Method java/util/concurrent/ThreadPoolExecutor.shutdown:()V
     253: aload_0
     254: getfield      #65                 // Field closeConnectionExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
     257: ldc2_w        #126                // long 10l
     260: getstatic     #20                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
     263: invokevirtual #120                // Method java/util/concurrent/ThreadPoolExecutor.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z
     266: pop
     267: aload_0
     268: iconst_1
     269: anewarray     #110                // class java/lang/String
     272: dup
     273: iconst_0
     274: ldc           #111                // String After shutdown
     276: aastore
     277: invokevirtual #112                // Method logPoolState:([Ljava/lang/String;)V
     280: aload_0
     281: invokevirtual #113                // Method unregisterMBeans:()V
     284: aload_0
     285: getfield      #96                 // Field metricsTracker:Lcom/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate;
     288: invokeinterface #114,  1          // InterfaceMethod com/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate.close:()V
     293: goto          327
     296: astore        5
     298: aload_0
     299: iconst_1
     300: anewarray     #110                // class java/lang/String
     303: dup
     304: iconst_0
     305: ldc           #111                // String After shutdown
     307: aastore
     308: invokevirtual #112                // Method logPoolState:([Ljava/lang/String;)V
     311: aload_0
     312: invokevirtual #113                // Method unregisterMBeans:()V
     315: aload_0
     316: getfield      #96                 // Field metricsTracker:Lcom/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate;
     319: invokeinterface #114,  1          // InterfaceMethod com/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate.close:()V
     324: aload         5
     326: athrow
     327: return
    Exception table:
       from    to  target type
         159   196   218   any
         218   220   218   any
           0    12   296   any
          39   267   296   any
         296   298   296   any

  public void evictConnection(java.sql.Connection);
    Code:
       0: aload_1
       1: checkcast     #131                // class com/zaxxer/hikari/pool/ProxyConnection
       4: astore_2
       5: aload_2
       6: invokevirtual #132                // Method com/zaxxer/hikari/pool/ProxyConnection.cancelLeakTask:()V
       9: aload_0
      10: aload_2
      11: invokevirtual #133                // Method com/zaxxer/hikari/pool/ProxyConnection.getPoolEntry:()Lcom/zaxxer/hikari/pool/PoolEntry;
      14: ldc           #134                // String (connection evicted by user)
      16: aload_1
      17: invokeinterface #135,  1          // InterfaceMethod java/sql/Connection.isClosed:()Z
      22: ifne          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: invokespecial #136                // Method softEvictConnection:(Lcom/zaxxer/hikari/pool/PoolEntry;Ljava/lang/String;Z)Z
      33: pop
      34: goto          38
      37: astore_3
      38: return
    Exception table:
       from    to  target type
           9    34    37   Class java/sql/SQLException

  public void setMetricRegistry(java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        31
       4: aload_1
       5: ldc           #137                // String com.codahale.metrics.MetricRegistry
       7: invokestatic  #138                // Method com/zaxxer/hikari/util/UtilityElf.safeIsAssignableFrom:(Ljava/lang/Object;Ljava/lang/String;)Z
      10: ifeq          31
      13: aload_0
      14: new           #139                // class com/zaxxer/hikari/metrics/dropwizard/CodahaleMetricsTrackerFactory
      17: dup
      18: aload_1
      19: checkcast     #140                // class com/codahale/metrics/MetricRegistry
      22: invokespecial #141                // Method com/zaxxer/hikari/metrics/dropwizard/CodahaleMetricsTrackerFactory."<init>":(Lcom/codahale/metrics/MetricRegistry;)V
      25: invokevirtual #39                 // Method setMetricsTrackerFactory:(Lcom/zaxxer/hikari/metrics/MetricsTrackerFactory;)V
      28: goto          67
      31: aload_1
      32: ifnull        62
      35: aload_1
      36: ldc           #142                // String io.micrometer.core.instrument.MeterRegistry
      38: invokestatic  #138                // Method com/zaxxer/hikari/util/UtilityElf.safeIsAssignableFrom:(Ljava/lang/Object;Ljava/lang/String;)Z
      41: ifeq          62
      44: aload_0
      45: new           #143                // class com/zaxxer/hikari/metrics/micrometer/MicrometerMetricsTrackerFactory
      48: dup
      49: aload_1
      50: checkcast     #144                // class io/micrometer/core/instrument/MeterRegistry
      53: invokespecial #145                // Method com/zaxxer/hikari/metrics/micrometer/MicrometerMetricsTrackerFactory."<init>":(Lio/micrometer/core/instrument/MeterRegistry;)V
      56: invokevirtual #39                 // Method setMetricsTrackerFactory:(Lcom/zaxxer/hikari/metrics/MetricsTrackerFactory;)V
      59: goto          67
      62: aload_0
      63: aconst_null
      64: invokevirtual #39                 // Method setMetricsTrackerFactory:(Lcom/zaxxer/hikari/metrics/MetricsTrackerFactory;)V
      67: return

  public void setMetricsTrackerFactory(com.zaxxer.hikari.metrics.MetricsTrackerFactory);
    Code:
       0: aload_1
       1: ifnull        35
       4: aload_0
       5: new           #146                // class com/zaxxer/hikari/pool/PoolBase$MetricsTrackerDelegate
       8: dup
       9: aload_1
      10: aload_0
      11: getfield      #123                // Field config:Lcom/zaxxer/hikari/HikariConfig;
      14: invokevirtual #147                // Method com/zaxxer/hikari/HikariConfig.getPoolName:()Ljava/lang/String;
      17: aload_0
      18: invokespecial #148                // Method getPoolStats:()Lcom/zaxxer/hikari/metrics/PoolStats;
      21: invokeinterface #149,  3          // InterfaceMethod com/zaxxer/hikari/metrics/MetricsTrackerFactory.create:(Ljava/lang/String;Lcom/zaxxer/hikari/metrics/PoolStats;)Lcom/zaxxer/hikari/metrics/IMetricsTracker;
      26: invokespecial #150                // Method com/zaxxer/hikari/pool/PoolBase$MetricsTrackerDelegate."<init>":(Lcom/zaxxer/hikari/metrics/IMetricsTracker;)V
      29: putfield      #96                 // Field metricsTracker:Lcom/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate;
      32: goto          46
      35: aload_0
      36: new           #151                // class com/zaxxer/hikari/pool/PoolBase$NopMetricsTrackerDelegate
      39: dup
      40: invokespecial #152                // Method com/zaxxer/hikari/pool/PoolBase$NopMetricsTrackerDelegate."<init>":()V
      43: putfield      #96                 // Field metricsTracker:Lcom/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate;
      46: return

  public void setHealthCheckRegistry(java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        16
       4: aload_0
       5: aload_0
       6: getfield      #123                // Field config:Lcom/zaxxer/hikari/HikariConfig;
       9: aload_1
      10: checkcast     #153                // class com/codahale/metrics/health/HealthCheckRegistry
      13: invokestatic  #154                // Method com/zaxxer/hikari/metrics/dropwizard/CodahaleHealthChecker.registerHealthChecks:(Lcom/zaxxer/hikari/pool/HikariPool;Lcom/zaxxer/hikari/HikariConfig;Lcom/codahale/metrics/health/HealthCheckRegistry;)V
      16: return

  public void addBagItem(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #50                 // Field addConnectionQueue:Ljava/util/Collection;
       5: invokeinterface #155,  1          // InterfaceMethod java/util/Collection.size:()I
      10: isub
      11: iflt          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: istore_2
      20: iload_2
      21: ifeq          36
      24: aload_0
      25: getfield      #60                 // Field addConnectionExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
      28: aload_0
      29: getfield      #25                 // Field POOL_ENTRY_CREATOR:Lcom/zaxxer/hikari/pool/HikariPool$PoolEntryCreator;
      32: invokevirtual #156                // Method java/util/concurrent/ThreadPoolExecutor.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
      35: pop
      36: return

  public int getActiveConnections();
    Code:
       0: aload_0
       1: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
       4: iconst_1
       5: invokevirtual #157                // Method com/zaxxer/hikari/util/ConcurrentBag.getCount:(I)I
       8: ireturn

  public int getIdleConnections();
    Code:
       0: aload_0
       1: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
       4: iconst_0
       5: invokevirtual #157                // Method com/zaxxer/hikari/util/ConcurrentBag.getCount:(I)I
       8: ireturn

  public int getTotalConnections();
    Code:
       0: aload_0
       1: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
       4: invokevirtual #158                // Method com/zaxxer/hikari/util/ConcurrentBag.size:()I
       7: ireturn

  public int getThreadsAwaitingConnection();
    Code:
       0: aload_0
       1: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
       4: invokevirtual #159                // Method com/zaxxer/hikari/util/ConcurrentBag.getWaitingThreadCount:()I
       7: ireturn

  public void softEvictConnections();
    Code:
       0: aload_0
       1: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
       4: invokevirtual #160                // Method com/zaxxer/hikari/util/ConcurrentBag.values:()Ljava/util/List;
       7: aload_0
       8: invokedynamic #161,  0            // InvokeDynamic #0:accept:(Lcom/zaxxer/hikari/pool/HikariPool;)Ljava/util/function/Consumer;
      13: invokeinterface #162,  2          // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      18: return

  public synchronized void suspendPool();
    Code:
       0: aload_0
       1: getfield      #34                 // Field suspendResumeLock:Lcom/zaxxer/hikari/util/SuspendResumeLock;
       4: getstatic     #33                 // Field com/zaxxer/hikari/util/SuspendResumeLock.FAUX_LOCK:Lcom/zaxxer/hikari/util/SuspendResumeLock;
       7: if_acmpne     40
      10: new           #163                // class java/lang/IllegalStateException
      13: dup
      14: new           #51                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
      21: aload_0
      22: getfield      #53                 // Field poolName:Ljava/lang/String;
      25: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #164                // String  - is not suspendable
      30: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #165                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: getfield      #109                // Field poolState:I
      44: iconst_1
      45: if_icmpeq     60
      48: aload_0
      49: getfield      #34                 // Field suspendResumeLock:Lcom/zaxxer/hikari/util/SuspendResumeLock;
      52: invokevirtual #166                // Method com/zaxxer/hikari/util/SuspendResumeLock.suspend:()V
      55: aload_0
      56: iconst_1
      57: putfield      #109                // Field poolState:I
      60: return

  public synchronized void resumePool();
    Code:
       0: aload_0
       1: getfield      #109                // Field poolState:I
       4: iconst_1
       5: if_icmpne     24
       8: aload_0
       9: iconst_0
      10: putfield      #109                // Field poolState:I
      13: aload_0
      14: invokespecial #2                  // Method fillPool:()V
      17: aload_0
      18: getfield      #34                 // Field suspendResumeLock:Lcom/zaxxer/hikari/util/SuspendResumeLock;
      21: invokevirtual #167                // Method com/zaxxer/hikari/util/SuspendResumeLock.resume:()V
      24: return

  void logPoolState(java.lang.String...);
    Code:
       0: aload_0
       1: getfield      #5                  // Field LOGGER:Lorg/slf4j/Logger;
       4: invokeinterface #168,  1          // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
       9: ifeq          91
      12: aload_0
      13: getfield      #5                  // Field LOGGER:Lorg/slf4j/Logger;
      16: ldc           #169                // String {} - {}stats (total={}, active={}, idle={}, waiting={})
      18: bipush        6
      20: anewarray     #170                // class java/lang/Object
      23: dup
      24: iconst_0
      25: aload_0
      26: getfield      #53                 // Field poolName:Ljava/lang/String;
      29: aastore
      30: dup
      31: iconst_1
      32: aload_1
      33: arraylength
      34: ifle          43
      37: aload_1
      38: iconst_0
      39: aaload
      40: goto          45
      43: ldc           #171                // String
      45: aastore
      46: dup
      47: iconst_2
      48: aload_0
      49: invokevirtual #80                 // Method getTotalConnections:()I
      52: invokestatic  #172                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      55: aastore
      56: dup
      57: iconst_3
      58: aload_0
      59: invokevirtual #173                // Method getActiveConnections:()I
      62: invokestatic  #172                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      65: aastore
      66: dup
      67: iconst_4
      68: aload_0
      69: invokevirtual #174                // Method getIdleConnections:()I
      72: invokestatic  #172                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      75: aastore
      76: dup
      77: iconst_5
      78: aload_0
      79: invokevirtual #175                // Method getThreadsAwaitingConnection:()I
      82: invokestatic  #172                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      85: aastore
      86: invokeinterface #176,  3          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;[Ljava/lang/Object;)V
      91: return

  void recycle(com.zaxxer.hikari.pool.PoolEntry);
    Code:
       0: aload_0
       1: getfield      #96                 // Field metricsTracker:Lcom/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate;
       4: aload_1
       5: invokeinterface #177,  2          // InterfaceMethod com/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate.recordConnectionUsage:(Lcom/zaxxer/hikari/pool/PoolEntry;)V
      10: aload_0
      11: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
      14: aload_1
      15: invokevirtual #178                // Method com/zaxxer/hikari/util/ConcurrentBag.requite:(Lcom/zaxxer/hikari/util/ConcurrentBag$IConcurrentBagEntry;)V
      18: return

  void closeConnection(com.zaxxer.hikari.pool.PoolEntry, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
       4: aload_1
       5: invokevirtual #179                // Method com/zaxxer/hikari/util/ConcurrentBag.remove:(Lcom/zaxxer/hikari/util/ConcurrentBag$IConcurrentBagEntry;)Z
       8: ifeq          31
      11: aload_1
      12: invokevirtual #180                // Method com/zaxxer/hikari/pool/PoolEntry.close:()Ljava/sql/Connection;
      15: astore_3
      16: aload_0
      17: getfield      #65                 // Field closeConnectionExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
      20: aload_0
      21: aload_3
      22: aload_2
      23: invokedynamic #181,  0            // InvokeDynamic #1:run:(Lcom/zaxxer/hikari/pool/HikariPool;Ljava/sql/Connection;Ljava/lang/String;)Ljava/lang/Runnable;
      28: invokevirtual #182                // Method java/util/concurrent/ThreadPoolExecutor.execute:(Ljava/lang/Runnable;)V
      31: return

  int[] getPoolStateCounts();
    Code:
       0: aload_0
       1: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
       4: invokevirtual #183                // Method com/zaxxer/hikari/util/ConcurrentBag.getStateCounts:()[I
       7: areturn

  private com.zaxxer.hikari.pool.PoolEntry createPoolEntry();
    Code:
       0: aload_0
       1: invokevirtual #184                // Method newPoolEntry:()Lcom/zaxxer/hikari/pool/PoolEntry;
       4: astore_1
       5: aload_0
       6: getfield      #123                // Field config:Lcom/zaxxer/hikari/HikariConfig;
       9: invokevirtual #185                // Method com/zaxxer/hikari/HikariConfig.getMaxLifetime:()J
      12: lstore_2
      13: lload_2
      14: lconst_0
      15: lcmp
      16: ifle          75
      19: lload_2
      20: ldc2_w        #186                // long 10000l
      23: lcmp
      24: ifle          41
      27: invokestatic  #188                // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
      30: lload_2
      31: ldc2_w        #189                // long 40l
      34: ldiv
      35: invokevirtual #191                // Method java/util/concurrent/ThreadLocalRandom.nextLong:(J)J
      38: goto          42
      41: lconst_0
      42: lstore        4
      44: lload_2
      45: lload         4
      47: lsub
      48: lstore        6
      50: aload_1
      51: aload_0
      52: getfield      #36                 // Field houseKeepingExecutorService:Ljava/util/concurrent/ScheduledExecutorService;
      55: aload_0
      56: aload_1
      57: invokedynamic #192,  0            // InvokeDynamic #2:run:(Lcom/zaxxer/hikari/pool/HikariPool;Lcom/zaxxer/hikari/pool/PoolEntry;)Ljava/lang/Runnable;
      62: lload         6
      64: getstatic     #12                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      67: invokeinterface #193,  5          // InterfaceMethod java/util/concurrent/ScheduledExecutorService.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      72: invokevirtual #194                // Method com/zaxxer/hikari/pool/PoolEntry.setFutureEol:(Ljava/util/concurrent/ScheduledFuture;)V
      75: aload_1
      76: areturn
      77: astore_1
      78: aload_0
      79: getfield      #109                // Field poolState:I
      82: ifne          115
      85: aload_0
      86: getfield      #5                  // Field LOGGER:Lorg/slf4j/Logger;
      89: ldc           #196                // String {} - Cannot acquire connection from data source
      91: aload_0
      92: getfield      #53                 // Field poolName:Ljava/lang/String;
      95: aload_1
      96: instanceof    #197                // class com/zaxxer/hikari/pool/PoolBase$ConnectionSetupException
      99: ifeq          109
     102: aload_1
     103: invokevirtual #198                // Method java/lang/Exception.getCause:()Ljava/lang/Throwable;
     106: goto          110
     109: aload_1
     110: invokeinterface #199,  4          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     115: aconst_null
     116: areturn
    Exception table:
       from    to  target type
           0    76    77   Class java/lang/Exception

  private synchronized void fillPool();
    Code:
       0: aload_0
       1: getfield      #123                // Field config:Lcom/zaxxer/hikari/HikariConfig;
       4: invokevirtual #47                 // Method com/zaxxer/hikari/HikariConfig.getMaximumPoolSize:()I
       7: aload_0
       8: invokevirtual #80                 // Method getTotalConnections:()I
      11: isub
      12: aload_0
      13: getfield      #123                // Field config:Lcom/zaxxer/hikari/HikariConfig;
      16: invokevirtual #81                 // Method com/zaxxer/hikari/HikariConfig.getMinimumIdle:()I
      19: aload_0
      20: invokevirtual #174                // Method getIdleConnections:()I
      23: isub
      24: invokestatic  #200                // Method java/lang/Math.min:(II)I
      27: aload_0
      28: getfield      #50                 // Field addConnectionQueue:Ljava/util/Collection;
      31: invokeinterface #155,  1          // InterfaceMethod java/util/Collection.size:()I
      36: isub
      37: istore_1
      38: iconst_0
      39: istore_2
      40: iload_2
      41: iload_1
      42: if_icmpge     77
      45: aload_0
      46: getfield      #60                 // Field addConnectionExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
      49: iload_2
      50: iload_1
      51: iconst_1
      52: isub
      53: if_icmpge     63
      56: aload_0
      57: getfield      #25                 // Field POOL_ENTRY_CREATOR:Lcom/zaxxer/hikari/pool/HikariPool$PoolEntryCreator;
      60: goto          67
      63: aload_0
      64: getfield      #27                 // Field POST_FILL_POOL_ENTRY_CREATOR:Lcom/zaxxer/hikari/pool/HikariPool$PoolEntryCreator;
      67: invokevirtual #156                // Method java/util/concurrent/ThreadPoolExecutor.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
      70: pop
      71: iinc          2, 1
      74: goto          40
      77: return

  private void abortActiveConnections(java.util.concurrent.ExecutorService);
    Code:
       0: aload_0
       1: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
       4: iconst_1
       5: invokevirtual #201                // Method com/zaxxer/hikari/util/ConcurrentBag.values:(I)Ljava/util/List;
       8: invokeinterface #202,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      13: astore_2
      14: aload_2
      15: invokeinterface #203,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ifeq          98
      23: aload_2
      24: invokeinterface #204,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      29: checkcast     #87                 // class com/zaxxer/hikari/pool/PoolEntry
      32: astore_3
      33: aload_3
      34: invokevirtual #180                // Method com/zaxxer/hikari/pool/PoolEntry.close:()Ljava/sql/Connection;
      37: astore        4
      39: aload         4
      41: aload_1
      42: invokeinterface #205,  2          // InterfaceMethod java/sql/Connection.abort:(Ljava/util/concurrent/Executor;)V
      47: aload_0
      48: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
      51: aload_3
      52: invokevirtual #179                // Method com/zaxxer/hikari/util/ConcurrentBag.remove:(Lcom/zaxxer/hikari/util/ConcurrentBag$IConcurrentBagEntry;)Z
      55: pop
      56: goto          95
      59: astore        5
      61: aload_0
      62: aload         4
      64: ldc           #207                // String (connection aborted during shutdown)
      66: invokevirtual #208                // Method quietlyCloseConnection:(Ljava/sql/Connection;Ljava/lang/String;)V
      69: aload_0
      70: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
      73: aload_3
      74: invokevirtual #179                // Method com/zaxxer/hikari/util/ConcurrentBag.remove:(Lcom/zaxxer/hikari/util/ConcurrentBag$IConcurrentBagEntry;)Z
      77: pop
      78: goto          95
      81: astore        6
      83: aload_0
      84: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
      87: aload_3
      88: invokevirtual #179                // Method com/zaxxer/hikari/util/ConcurrentBag.remove:(Lcom/zaxxer/hikari/util/ConcurrentBag$IConcurrentBagEntry;)Z
      91: pop
      92: aload         6
      94: athrow
      95: goto          14
      98: return
    Exception table:
       from    to  target type
          39    47    59   Class java/lang/Throwable
          39    47    81   any
          59    69    81   any
          81    83    81   any

  private void checkFailFast();
    Code:
       0: aload_0
       1: getfield      #123                // Field config:Lcom/zaxxer/hikari/HikariConfig;
       4: invokevirtual #77                 // Method com/zaxxer/hikari/HikariConfig.getInitializationFailTimeout:()J
       7: lstore_1
       8: lload_1
       9: lconst_0
      10: lcmp
      11: ifge          15
      14: return
      15: invokestatic  #78                 // InterfaceMethod com/zaxxer/hikari/util/ClockSource.currentTime:()J
      18: lstore_3
      19: aload_0
      20: invokespecial #7                  // Method createPoolEntry:()Lcom/zaxxer/hikari/pool/PoolEntry;
      23: astore        5
      25: aload         5
      27: ifnull        84
      30: aload_0
      31: getfield      #123                // Field config:Lcom/zaxxer/hikari/HikariConfig;
      34: invokevirtual #81                 // Method com/zaxxer/hikari/HikariConfig.getMinimumIdle:()I
      37: ifle          72
      40: aload_0
      41: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
      44: aload         5
      46: invokevirtual #209                // Method com/zaxxer/hikari/util/ConcurrentBag.add:(Lcom/zaxxer/hikari/util/ConcurrentBag$IConcurrentBagEntry;)V
      49: aload_0
      50: getfield      #5                  // Field LOGGER:Lorg/slf4j/Logger;
      53: ldc           #210                // String {} - Added connection {}
      55: aload_0
      56: getfield      #53                 // Field poolName:Ljava/lang/String;
      59: aload         5
      61: getfield      #91                 // Field com/zaxxer/hikari/pool/PoolEntry.connection:Ljava/sql/Connection;
      64: invokeinterface #199,  4          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      69: goto          83
      72: aload_0
      73: aload         5
      75: invokevirtual #180                // Method com/zaxxer/hikari/pool/PoolEntry.close:()Ljava/sql/Connection;
      78: ldc           #211                // String (initialization check complete and minimumIdle is zero)
      80: invokevirtual #208                // Method quietlyCloseConnection:(Ljava/sql/Connection;Ljava/lang/String;)V
      83: return
      84: aload_0
      85: invokevirtual #212                // Method getLastConnectionFailure:()Ljava/lang/Throwable;
      88: instanceof    #197                // class com/zaxxer/hikari/pool/PoolBase$ConnectionSetupException
      91: ifeq          105
      94: aload_0
      95: aload_0
      96: invokevirtual #212                // Method getLastConnectionFailure:()Ljava/lang/Throwable;
      99: invokevirtual #213                // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
     102: invokespecial #214                // Method throwPoolInitializationException:(Ljava/lang/Throwable;)V
     105: getstatic     #20                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
     108: lconst_1
     109: invokevirtual #15                 // Method java/util/concurrent/TimeUnit.toMillis:(J)J
     112: invokestatic  #82                 // Method com/zaxxer/hikari/util/UtilityElf.quietlySleep:(J)V
     115: lload_3
     116: invokestatic  #79                 // InterfaceMethod com/zaxxer/hikari/util/ClockSource.elapsedMillis:(J)J
     119: lload_1
     120: lcmp
     121: iflt          19
     124: lload_1
     125: lconst_0
     126: lcmp
     127: ifle          138
     130: aload_0
     131: aload_0
     132: invokevirtual #212                // Method getLastConnectionFailure:()Ljava/lang/Throwable;
     135: invokespecial #214                // Method throwPoolInitializationException:(Ljava/lang/Throwable;)V
     138: return

  private void throwPoolInitializationException(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #5                  // Field LOGGER:Lorg/slf4j/Logger;
       4: ldc           #215                // String {} - Exception during pool initialization.
       6: aload_0
       7: getfield      #53                 // Field poolName:Ljava/lang/String;
      10: aload_1
      11: invokeinterface #216,  4          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      16: aload_0
      17: invokespecial #121                // Method destroyHouseKeepingExecutorService:()V
      20: new           #217                // class com/zaxxer/hikari/pool/HikariPool$PoolInitializationException
      23: dup
      24: aload_1
      25: invokespecial #218                // Method com/zaxxer/hikari/pool/HikariPool$PoolInitializationException."<init>":(Ljava/lang/Throwable;)V
      28: athrow

  private boolean softEvictConnection(com.zaxxer.hikari.pool.PoolEntry, java.lang.String, boolean);
    Code:
       0: aload_1
       1: invokevirtual #219                // Method com/zaxxer/hikari/pool/PoolEntry.markEvicted:()V
       4: iload_3
       5: ifne          19
       8: aload_0
       9: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
      12: aload_1
      13: invokevirtual #220                // Method com/zaxxer/hikari/util/ConcurrentBag.reserve:(Lcom/zaxxer/hikari/util/ConcurrentBag$IConcurrentBagEntry;)Z
      16: ifeq          27
      19: aload_0
      20: aload_1
      21: aload_2
      22: invokevirtual #95                 // Method closeConnection:(Lcom/zaxxer/hikari/pool/PoolEntry;Ljava/lang/String;)V
      25: iconst_1
      26: ireturn
      27: iconst_0
      28: ireturn

  private java.util.concurrent.ScheduledExecutorService initializeHouseKeepingExecutorService();
    Code:
       0: aload_0
       1: getfield      #123                // Field config:Lcom/zaxxer/hikari/HikariConfig;
       4: invokevirtual #221                // Method com/zaxxer/hikari/HikariConfig.getScheduledExecutor:()Ljava/util/concurrent/ScheduledExecutorService;
       7: ifnonnull     86
      10: aload_0
      11: getfield      #123                // Field config:Lcom/zaxxer/hikari/HikariConfig;
      14: invokevirtual #45                 // Method com/zaxxer/hikari/HikariConfig.getThreadFactory:()Ljava/util/concurrent/ThreadFactory;
      17: invokestatic  #222                // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      20: new           #223                // class com/zaxxer/hikari/util/UtilityElf$DefaultThreadFactory
      23: dup
      24: new           #51                 // class java/lang/StringBuilder
      27: dup
      28: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
      31: aload_0
      32: getfield      #53                 // Field poolName:Ljava/lang/String;
      35: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: ldc           #224                // String  housekeeper
      40: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: iconst_1
      47: invokespecial #225                // Method com/zaxxer/hikari/util/UtilityElf$DefaultThreadFactory."<init>":(Ljava/lang/String;Z)V
      50: invokevirtual #226                // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      53: checkcast     #227                // class java/util/concurrent/ThreadFactory
      56: astore_1
      57: new           #228                // class java/util/concurrent/ScheduledThreadPoolExecutor
      60: dup
      61: iconst_1
      62: aload_1
      63: new           #57                 // class java/util/concurrent/ThreadPoolExecutor$DiscardPolicy
      66: dup
      67: invokespecial #58                 // Method java/util/concurrent/ThreadPoolExecutor$DiscardPolicy."<init>":()V
      70: invokespecial #229                // Method java/util/concurrent/ScheduledThreadPoolExecutor."<init>":(ILjava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V
      73: astore_2
      74: aload_2
      75: iconst_0
      76: invokevirtual #230                // Method java/util/concurrent/ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy:(Z)V
      79: aload_2
      80: iconst_1
      81: invokevirtual #231                // Method java/util/concurrent/ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy:(Z)V
      84: aload_2
      85: areturn
      86: aload_0
      87: getfield      #123                // Field config:Lcom/zaxxer/hikari/HikariConfig;
      90: invokevirtual #221                // Method com/zaxxer/hikari/HikariConfig.getScheduledExecutor:()Ljava/util/concurrent/ScheduledExecutorService;
      93: areturn

  private void destroyHouseKeepingExecutorService();
    Code:
       0: aload_0
       1: getfield      #123                // Field config:Lcom/zaxxer/hikari/HikariConfig;
       4: invokevirtual #221                // Method com/zaxxer/hikari/HikariConfig.getScheduledExecutor:()Ljava/util/concurrent/ScheduledExecutorService;
       7: ifnonnull     20
      10: aload_0
      11: getfield      #36                 // Field houseKeepingExecutorService:Ljava/util/concurrent/ScheduledExecutorService;
      14: invokeinterface #232,  1          // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdownNow:()Ljava/util/List;
      19: pop
      20: return

  private com.zaxxer.hikari.metrics.PoolStats getPoolStats();
    Code:
       0: new           #233                // class com/zaxxer/hikari/pool/HikariPool$1
       3: dup
       4: aload_0
       5: getstatic     #20                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
       8: lconst_1
       9: invokevirtual #15                 // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      12: invokespecial #234                // Method com/zaxxer/hikari/pool/HikariPool$1."<init>":(Lcom/zaxxer/hikari/pool/HikariPool;J)V
      15: areturn

  private java.sql.SQLException createTimeoutException(long);
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #110                // class java/lang/String
       5: dup
       6: iconst_0
       7: ldc           #235                // String Timeout failure
       9: aastore
      10: invokevirtual #112                // Method logPoolState:([Ljava/lang/String;)V
      13: aload_0
      14: getfield      #96                 // Field metricsTracker:Lcom/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate;
      17: invokeinterface #236,  1          // InterfaceMethod com/zaxxer/hikari/pool/PoolBase$IMetricsTrackerDelegate.recordConnectionTimeout:()V
      22: aconst_null
      23: astore_3
      24: aload_0
      25: invokevirtual #212                // Method getLastConnectionFailure:()Ljava/lang/Throwable;
      28: astore        4
      30: aload         4
      32: instanceof    #106                // class java/sql/SQLException
      35: ifeq          47
      38: aload         4
      40: checkcast     #106                // class java/sql/SQLException
      43: invokevirtual #237                // Method java/sql/SQLException.getSQLState:()Ljava/lang/String;
      46: astore_3
      47: new           #238                // class java/sql/SQLTransientConnectionException
      50: dup
      51: new           #51                 // class java/lang/StringBuilder
      54: dup
      55: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
      58: aload_0
      59: getfield      #53                 // Field poolName:Ljava/lang/String;
      62: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      65: ldc           #239                // String  - Connection is not available, request timed out after
      67: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: lload_1
      71: invokestatic  #79                 // InterfaceMethod com/zaxxer/hikari/util/ClockSource.elapsedMillis:(J)J
      74: invokevirtual #240                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      77: ldc           #241                // String ms.
      79: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      85: aload_3
      86: aload         4
      88: invokespecial #242                // Method java/sql/SQLTransientConnectionException."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
      91: astore        5
      93: aload         4
      95: instanceof    #106                // class java/sql/SQLException
      98: ifeq          111
     101: aload         5
     103: aload         4
     105: checkcast     #106                // class java/sql/SQLException
     108: invokevirtual #243                // Method java/sql/SQLException.setNextException:(Ljava/sql/SQLException;)V
     111: aload         5
     113: areturn

  public javax.sql.DataSource getUnwrappedDataSource();
    Code:
       0: aload_0
       1: invokespecial #244                // Method com/zaxxer/hikari/pool/PoolBase.getUnwrappedDataSource:()Ljavax/sql/DataSource;
       4: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokespecial #245                // Method com/zaxxer/hikari/pool/PoolBase.toString:()Ljava/lang/String;
       4: areturn

  private void lambda$createPoolEntry$2(com.zaxxer.hikari.pool.PoolEntry);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #246                // String (connection has passed maxLifetime)
       4: iconst_0
       5: invokespecial #136                // Method softEvictConnection:(Lcom/zaxxer/hikari/pool/PoolEntry;Ljava/lang/String;Z)Z
       8: ifeq          22
      11: aload_0
      12: aload_0
      13: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
      16: invokevirtual #159                // Method com/zaxxer/hikari/util/ConcurrentBag.getWaitingThreadCount:()I
      19: invokevirtual #247                // Method addBagItem:(I)V
      22: return

  private void lambda$closeConnection$1(java.sql.Connection, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #208                // Method quietlyCloseConnection:(Ljava/sql/Connection;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #109                // Field poolState:I
      10: ifne          17
      13: aload_0
      14: invokespecial #2                  // Method fillPool:()V
      17: return

  private void lambda$softEvictConnections$0(com.zaxxer.hikari.pool.PoolEntry);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #248                // String (connection evicted)
       4: iconst_0
       5: invokespecial #136                // Method softEvictConnection:(Lcom/zaxxer/hikari/pool/PoolEntry;Ljava/lang/String;Z)Z
       8: pop
       9: return

  static com.zaxxer.hikari.pool.PoolEntry access$100(com.zaxxer.hikari.pool.HikariPool);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method createPoolEntry:()Lcom/zaxxer/hikari/pool/PoolEntry;
       4: areturn

  static com.zaxxer.hikari.util.ConcurrentBag access$200(com.zaxxer.hikari.pool.HikariPool);
    Code:
       0: aload_0
       1: getfield      #6                  // Field connectionBag:Lcom/zaxxer/hikari/util/ConcurrentBag;
       4: areturn

  static org.slf4j.Logger access$300(com.zaxxer.hikari.pool.HikariPool);
    Code:
       0: aload_0
       1: getfield      #5                  // Field LOGGER:Lorg/slf4j/Logger;
       4: areturn

  static long access$400(com.zaxxer.hikari.pool.HikariPool);
    Code:
       0: aload_0
       1: getfield      #4                  // Field HOUSEKEEPING_PERIOD_MS:J
       4: lreturn

  static com.zaxxer.hikari.pool.ProxyLeakTaskFactory access$500(com.zaxxer.hikari.pool.HikariPool);
    Code:
       0: aload_0
       1: getfield      #3                  // Field leakTaskFactory:Lcom/zaxxer/hikari/pool/ProxyLeakTaskFactory;
       4: areturn

  static void access$600(com.zaxxer.hikari.pool.HikariPool);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method fillPool:()V
       4: return
}
