Compiled from "PoolEntry.java"
final class com.zaxxer.hikari.pool.PoolEntry implements com.zaxxer.hikari.util.ConcurrentBag$IConcurrentBagEntry {
  private static final org.slf4j.Logger LOGGER;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<com.zaxxer.hikari.pool.PoolEntry> stateUpdater;

  java.sql.Connection connection;

  long lastAccessed;

  long lastBorrowed;

  private volatile int state;

  private volatile boolean evict;

  private volatile java.util.concurrent.ScheduledFuture<?> endOfLife;

  private final com.zaxxer.hikari.util.FastList<java.sql.Statement> openStatements;

  private final com.zaxxer.hikari.pool.HikariPool hikariPool;

  private final boolean isReadOnly;

  private final boolean isAutoCommit;

  com.zaxxer.hikari.pool.PoolEntry(java.sql.Connection, com.zaxxer.hikari.pool.PoolBase, boolean, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field state:I
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field connection:Ljava/sql/Connection;
      14: aload_0
      15: aload_2
      16: checkcast     #4                  // class com/zaxxer/hikari/pool/HikariPool
      19: putfield      #5                  // Field hikariPool:Lcom/zaxxer/hikari/pool/HikariPool;
      22: aload_0
      23: iload_3
      24: putfield      #6                  // Field isReadOnly:Z
      27: aload_0
      28: iload         4
      30: putfield      #7                  // Field isAutoCommit:Z
      33: aload_0
      34: invokestatic  #8                  // InterfaceMethod com/zaxxer/hikari/util/ClockSource.currentTime:()J
      37: putfield      #9                  // Field lastAccessed:J
      40: aload_0
      41: new           #10                 // class com/zaxxer/hikari/util/FastList
      44: dup
      45: ldc           #11                 // class java/sql/Statement
      47: bipush        16
      49: invokespecial #12                 // Method com/zaxxer/hikari/util/FastList."<init>":(Ljava/lang/Class;I)V
      52: putfield      #13                 // Field openStatements:Lcom/zaxxer/hikari/util/FastList;
      55: return

  void recycle(long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field connection:Ljava/sql/Connection;
       4: ifnull        20
       7: aload_0
       8: lload_1
       9: putfield      #9                  // Field lastAccessed:J
      12: aload_0
      13: getfield      #5                  // Field hikariPool:Lcom/zaxxer/hikari/pool/HikariPool;
      16: aload_0
      17: invokevirtual #14                 // Method com/zaxxer/hikari/pool/HikariPool.recycle:(Lcom/zaxxer/hikari/pool/PoolEntry;)V
      20: return

  void setFutureEol(java.util.concurrent.ScheduledFuture<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field endOfLife:Ljava/util/concurrent/ScheduledFuture;
       5: return

  java.sql.Connection createProxyConnection(com.zaxxer.hikari.pool.ProxyLeakTask, long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field connection:Ljava/sql/Connection;
       5: aload_0
       6: getfield      #13                 // Field openStatements:Lcom/zaxxer/hikari/util/FastList;
       9: aload_1
      10: lload_2
      11: aload_0
      12: getfield      #6                  // Field isReadOnly:Z
      15: aload_0
      16: getfield      #7                  // Field isAutoCommit:Z
      19: invokestatic  #16                 // Method com/zaxxer/hikari/pool/ProxyFactory.getProxyConnection:(Lcom/zaxxer/hikari/pool/PoolEntry;Ljava/sql/Connection;Lcom/zaxxer/hikari/util/FastList;Lcom/zaxxer/hikari/pool/ProxyLeakTask;JZZ)Lcom/zaxxer/hikari/pool/ProxyConnection;
      22: areturn

  void resetConnectionState(com.zaxxer.hikari.pool.ProxyConnection, int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field hikariPool:Lcom/zaxxer/hikari/pool/HikariPool;
       4: aload_0
       5: getfield      #3                  // Field connection:Ljava/sql/Connection;
       8: aload_1
       9: iload_2
      10: invokevirtual #17                 // Method com/zaxxer/hikari/pool/HikariPool.resetConnectionState:(Ljava/sql/Connection;Lcom/zaxxer/hikari/pool/ProxyConnection;I)V
      13: return

  java.lang.String getPoolName();
    Code:
       0: aload_0
       1: getfield      #5                  // Field hikariPool:Lcom/zaxxer/hikari/pool/HikariPool;
       4: invokevirtual #18                 // Method com/zaxxer/hikari/pool/HikariPool.toString:()Ljava/lang/String;
       7: areturn

  boolean isMarkedEvicted();
    Code:
       0: aload_0
       1: getfield      #19                 // Field evict:Z
       4: ireturn

  void markEvicted();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #19                 // Field evict:Z
       5: return

  void evict(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field hikariPool:Lcom/zaxxer/hikari/pool/HikariPool;
       4: aload_0
       5: aload_1
       6: invokevirtual #20                 // Method com/zaxxer/hikari/pool/HikariPool.closeConnection:(Lcom/zaxxer/hikari/pool/PoolEntry;Ljava/lang/String;)V
       9: return

  long getMillisSinceBorrowed();
    Code:
       0: aload_0
       1: getfield      #21                 // Field lastBorrowed:J
       4: invokestatic  #22                 // InterfaceMethod com/zaxxer/hikari/util/ClockSource.elapsedMillis:(J)J
       7: lreturn

  public java.lang.String toString();
    Code:
       0: invokestatic  #8                  // InterfaceMethod com/zaxxer/hikari/util/ClockSource.currentTime:()J
       3: lstore_1
       4: new           #23                 // class java/lang/StringBuilder
       7: dup
       8: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
      11: aload_0
      12: getfield      #3                  // Field connection:Ljava/sql/Connection;
      15: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      18: ldc           #26                 // String , accessed
      20: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload_0
      24: getfield      #9                  // Field lastAccessed:J
      27: lload_1
      28: invokestatic  #28                 // InterfaceMethod com/zaxxer/hikari/util/ClockSource.elapsedDisplayString:(JJ)Ljava/lang/String;
      31: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: ldc           #29                 // String  ago,
      36: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_0
      40: invokespecial #30                 // Method stateToString:()Ljava/lang/String;
      43: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: areturn

  public int getState();
    Code:
       0: getstatic     #32                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
       7: ireturn

  public boolean compareAndSet(int, int);
    Code:
       0: getstatic     #32                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iload_1
       5: iload_2
       6: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ireturn

  public void setState(int);
    Code:
       0: getstatic     #32                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iload_1
       5: invokevirtual #35                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.set:(Ljava/lang/Object;I)V
       8: return

  java.sql.Connection close();
    Code:
       0: aload_0
       1: getfield      #15                 // Field endOfLife:Ljava/util/concurrent/ScheduledFuture;
       4: astore_1
       5: aload_1
       6: ifnull        46
       9: aload_1
      10: invokeinterface #36,  1           // InterfaceMethod java/util/concurrent/ScheduledFuture.isDone:()Z
      15: ifne          46
      18: aload_1
      19: iconst_0
      20: invokeinterface #37,  2           // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      25: ifne          46
      28: getstatic     #38                 // Field LOGGER:Lorg/slf4j/Logger;
      31: ldc           #39                 // String {} - maxLifeTime expiration task cancellation unexpectedly returned false for connection {}
      33: aload_0
      34: invokevirtual #40                 // Method getPoolName:()Ljava/lang/String;
      37: aload_0
      38: getfield      #3                  // Field connection:Ljava/sql/Connection;
      41: invokeinterface #41,  4           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      46: aload_0
      47: getfield      #3                  // Field connection:Ljava/sql/Connection;
      50: astore_2
      51: aload_0
      52: aconst_null
      53: putfield      #3                  // Field connection:Ljava/sql/Connection;
      56: aload_0
      57: aconst_null
      58: putfield      #15                 // Field endOfLife:Ljava/util/concurrent/ScheduledFuture;
      61: aload_2
      62: areturn

  private java.lang.String stateToString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:I
       4: tableswitch   { // -2 to 1
                    -2: 45
                    -1: 42
                     0: 39
                     1: 36
               default: 48
          }
      36: ldc           #42                 // String IN_USE
      38: areturn
      39: ldc           #43                 // String NOT_IN_USE
      41: areturn
      42: ldc           #44                 // String REMOVED
      44: areturn
      45: ldc           #45                 // String RESERVED
      47: areturn
      48: ldc           #46                 // String Invalid
      50: areturn

  static {};
    Code:
       0: ldc           #47                 // class com/zaxxer/hikari/pool/PoolEntry
       2: invokestatic  #48                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #38                 // Field LOGGER:Lorg/slf4j/Logger;
       8: ldc           #47                 // class com/zaxxer/hikari/pool/PoolEntry
      10: ldc           #49                 // String state
      12: invokestatic  #50                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      15: putstatic     #32                 // Field stateUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      18: return
}
