Compiled from "SuspendResumeLock.java"
public class com.zaxxer.hikari.util.SuspendResumeLock {
  public static final com.zaxxer.hikari.util.SuspendResumeLock FAUX_LOCK;

  private static final int MAX_PERMITS;

  private final java.util.concurrent.Semaphore acquisitionSemaphore;

  public com.zaxxer.hikari.util.SuspendResumeLock();
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #1                  // Method "<init>":(Z)V
       5: return

  private com.zaxxer.hikari.util.SuspendResumeLock(boolean);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: ifeq          23
       9: new           #3                  // class java/util/concurrent/Semaphore
      12: dup
      13: sipush        10000
      16: iconst_1
      17: invokespecial #5                  // Method java/util/concurrent/Semaphore."<init>":(IZ)V
      20: goto          24
      23: aconst_null
      24: putfield      #6                  // Field acquisitionSemaphore:Ljava/util/concurrent/Semaphore;
      27: return

  public void acquire() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field acquisitionSemaphore:Ljava/util/concurrent/Semaphore;
       4: invokevirtual #7                  // Method java/util/concurrent/Semaphore.tryAcquire:()Z
       7: ifeq          11
      10: return
      11: ldc           #8                  // String com.zaxxer.hikari.throwIfSuspended
      13: invokestatic  #9                  // Method java/lang/Boolean.getBoolean:(Ljava/lang/String;)Z
      16: ifeq          29
      19: new           #10                 // class java/sql/SQLTransientException
      22: dup
      23: ldc           #11                 // String The pool is currently suspended and configured to throw exceptions upon acquisition
      25: invokespecial #12                 // Method java/sql/SQLTransientException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: aload_0
      30: getfield      #6                  // Field acquisitionSemaphore:Ljava/util/concurrent/Semaphore;
      33: invokevirtual #13                 // Method java/util/concurrent/Semaphore.acquireUninterruptibly:()V
      36: return

  public void release();
    Code:
       0: aload_0
       1: getfield      #6                  // Field acquisitionSemaphore:Ljava/util/concurrent/Semaphore;
       4: invokevirtual #14                 // Method java/util/concurrent/Semaphore.release:()V
       7: return

  public void suspend();
    Code:
       0: aload_0
       1: getfield      #6                  // Field acquisitionSemaphore:Ljava/util/concurrent/Semaphore;
       4: sipush        10000
       7: invokevirtual #15                 // Method java/util/concurrent/Semaphore.acquireUninterruptibly:(I)V
      10: return

  public void resume();
    Code:
       0: aload_0
       1: getfield      #6                  // Field acquisitionSemaphore:Ljava/util/concurrent/Semaphore;
       4: sipush        10000
       7: invokevirtual #16                 // Method java/util/concurrent/Semaphore.release:(I)V
      10: return

  com.zaxxer.hikari.util.SuspendResumeLock(boolean, com.zaxxer.hikari.util.SuspendResumeLock$1);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #1                  // Method "<init>":(Z)V
       5: return

  static {};
    Code:
       0: new           #17                 // class com/zaxxer/hikari/util/SuspendResumeLock$1
       3: dup
       4: iconst_0
       5: invokespecial #18                 // Method com/zaxxer/hikari/util/SuspendResumeLock$1."<init>":(Z)V
       8: putstatic     #19                 // Field FAUX_LOCK:Lcom/zaxxer/hikari/util/SuspendResumeLock;
      11: return
}
