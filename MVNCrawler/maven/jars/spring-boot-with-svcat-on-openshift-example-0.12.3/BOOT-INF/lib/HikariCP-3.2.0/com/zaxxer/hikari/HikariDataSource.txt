Compiled from "HikariDataSource.java"
public class com.zaxxer.hikari.HikariDataSource extends com.zaxxer.hikari.HikariConfig implements javax.sql.DataSource,java.io.Closeable {
  private static final org.slf4j.Logger LOGGER;

  private final java.util.concurrent.atomic.AtomicBoolean isShutdown;

  private final com.zaxxer.hikari.pool.HikariPool fastPathPool;

  private volatile com.zaxxer.hikari.pool.HikariPool pool;

  public com.zaxxer.hikari.HikariDataSource();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method com/zaxxer/hikari/HikariConfig."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      12: putfield      #5                  // Field isShutdown:Ljava/util/concurrent/atomic/AtomicBoolean;
      15: aload_0
      16: aconst_null
      17: putfield      #6                  // Field fastPathPool:Lcom/zaxxer/hikari/pool/HikariPool;
      20: return

  public com.zaxxer.hikari.HikariDataSource(com.zaxxer.hikari.HikariConfig);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method com/zaxxer/hikari/HikariConfig."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      12: putfield      #5                  // Field isShutdown:Ljava/util/concurrent/atomic/AtomicBoolean;
      15: aload_1
      16: invokevirtual #7                  // Method com/zaxxer/hikari/HikariConfig.validate:()V
      19: aload_1
      20: aload_0
      21: invokevirtual #8                  // Method com/zaxxer/hikari/HikariConfig.copyStateTo:(Lcom/zaxxer/hikari/HikariConfig;)V
      24: getstatic     #9                  // Field LOGGER:Lorg/slf4j/Logger;
      27: ldc           #10                 // String {} - Starting...
      29: aload_1
      30: invokevirtual #11                 // Method com/zaxxer/hikari/HikariConfig.getPoolName:()Ljava/lang/String;
      33: invokeinterface #12,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
      38: aload_0
      39: aload_0
      40: new           #1                  // class com/zaxxer/hikari/pool/HikariPool
      43: dup
      44: aload_0
      45: invokespecial #13                 // Method com/zaxxer/hikari/pool/HikariPool."<init>":(Lcom/zaxxer/hikari/HikariConfig;)V
      48: dup_x1
      49: putfield      #6                  // Field fastPathPool:Lcom/zaxxer/hikari/pool/HikariPool;
      52: putfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
      55: getstatic     #9                  // Field LOGGER:Lorg/slf4j/Logger;
      58: ldc           #15                 // String {} - Start completed.
      60: aload_1
      61: invokevirtual #11                 // Method com/zaxxer/hikari/HikariConfig.getPoolName:()Ljava/lang/String;
      64: invokeinterface #12,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
      69: aload_0
      70: invokevirtual #16                 // Method seal:()V
      73: return

  public java.sql.Connection getConnection() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method isClosed:()Z
       4: ifeq          39
       7: new           #18                 // class java/sql/SQLException
      10: dup
      11: new           #19                 // class java/lang/StringBuilder
      14: dup
      15: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      18: ldc           #21                 // String HikariDataSource
      20: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload_0
      24: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      27: ldc           #24                 // String  has been closed.
      29: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokespecial #26                 // Method java/sql/SQLException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_0
      40: getfield      #6                  // Field fastPathPool:Lcom/zaxxer/hikari/pool/HikariPool;
      43: ifnull        54
      46: aload_0
      47: getfield      #6                  // Field fastPathPool:Lcom/zaxxer/hikari/pool/HikariPool;
      50: invokevirtual #27                 // Method com/zaxxer/hikari/pool/HikariPool.getConnection:()Ljava/sql/Connection;
      53: areturn
      54: aload_0
      55: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
      58: astore_1
      59: aload_1
      60: ifnonnull     162
      63: aload_0
      64: dup
      65: astore_2
      66: monitorenter
      67: aload_0
      68: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
      71: astore_1
      72: aload_1
      73: ifnonnull     150
      76: aload_0
      77: invokevirtual #28                 // Method validate:()V
      80: getstatic     #9                  // Field LOGGER:Lorg/slf4j/Logger;
      83: ldc           #10                 // String {} - Starting...
      85: aload_0
      86: invokevirtual #29                 // Method getPoolName:()Ljava/lang/String;
      89: invokeinterface #12,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
      94: aload_0
      95: new           #1                  // class com/zaxxer/hikari/pool/HikariPool
      98: dup
      99: aload_0
     100: invokespecial #13                 // Method com/zaxxer/hikari/pool/HikariPool."<init>":(Lcom/zaxxer/hikari/HikariConfig;)V
     103: dup
     104: astore_1
     105: putfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
     108: aload_0
     109: invokevirtual #16                 // Method seal:()V
     112: goto          136
     115: astore_3
     116: aload_3
     117: invokevirtual #31                 // Method com/zaxxer/hikari/pool/HikariPool$PoolInitializationException.getCause:()Ljava/lang/Throwable;
     120: instanceof    #18                 // class java/sql/SQLException
     123: ifeq          134
     126: aload_3
     127: invokevirtual #31                 // Method com/zaxxer/hikari/pool/HikariPool$PoolInitializationException.getCause:()Ljava/lang/Throwable;
     130: checkcast     #18                 // class java/sql/SQLException
     133: athrow
     134: aload_3
     135: athrow
     136: getstatic     #9                  // Field LOGGER:Lorg/slf4j/Logger;
     139: ldc           #15                 // String {} - Start completed.
     141: aload_0
     142: invokevirtual #29                 // Method getPoolName:()Ljava/lang/String;
     145: invokeinterface #12,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
     150: aload_2
     151: monitorexit
     152: goto          162
     155: astore        4
     157: aload_2
     158: monitorexit
     159: aload         4
     161: athrow
     162: aload_1
     163: invokevirtual #27                 // Method com/zaxxer/hikari/pool/HikariPool.getConnection:()Ljava/sql/Connection;
     166: areturn
    Exception table:
       from    to  target type
          94   112   115   Class com/zaxxer/hikari/pool/HikariPool$PoolInitializationException
          67   152   155   any
         155   159   155   any

  public java.sql.Connection getConnection(java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: new           #32                 // class java/sql/SQLFeatureNotSupportedException
       3: dup
       4: invokespecial #33                 // Method java/sql/SQLFeatureNotSupportedException."<init>":()V
       7: athrow

  public java.io.PrintWriter getLogWriter() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
       4: astore_1
       5: aload_1
       6: ifnull        21
       9: aload_1
      10: invokevirtual #34                 // Method com/zaxxer/hikari/pool/HikariPool.getUnwrappedDataSource:()Ljavax/sql/DataSource;
      13: invokeinterface #35,  1           // InterfaceMethod javax/sql/DataSource.getLogWriter:()Ljava/io/PrintWriter;
      18: goto          22
      21: aconst_null
      22: areturn

  public void setLogWriter(java.io.PrintWriter) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
       4: astore_2
       5: aload_2
       6: ifnull        19
       9: aload_2
      10: invokevirtual #34                 // Method com/zaxxer/hikari/pool/HikariPool.getUnwrappedDataSource:()Ljavax/sql/DataSource;
      13: aload_1
      14: invokeinterface #36,  2           // InterfaceMethod javax/sql/DataSource.setLogWriter:(Ljava/io/PrintWriter;)V
      19: return

  public void setLoginTimeout(int) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
       4: astore_2
       5: aload_2
       6: ifnull        19
       9: aload_2
      10: invokevirtual #34                 // Method com/zaxxer/hikari/pool/HikariPool.getUnwrappedDataSource:()Ljavax/sql/DataSource;
      13: iload_1
      14: invokeinterface #37,  2           // InterfaceMethod javax/sql/DataSource.setLoginTimeout:(I)V
      19: return

  public int getLoginTimeout() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
       4: astore_1
       5: aload_1
       6: ifnull        21
       9: aload_1
      10: invokevirtual #34                 // Method com/zaxxer/hikari/pool/HikariPool.getUnwrappedDataSource:()Ljavax/sql/DataSource;
      13: invokeinterface #38,  1           // InterfaceMethod javax/sql/DataSource.getLoginTimeout:()I
      18: goto          22
      21: iconst_0
      22: ireturn

  public java.util.logging.Logger getParentLogger() throws java.sql.SQLFeatureNotSupportedException;
    Code:
       0: new           #32                 // class java/sql/SQLFeatureNotSupportedException
       3: dup
       4: invokespecial #33                 // Method java/sql/SQLFeatureNotSupportedException."<init>":()V
       7: athrow

  public <T> T unwrap(java.lang.Class<T>) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #39                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
       5: ifeq          10
       8: aload_0
       9: areturn
      10: aload_0
      11: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
      14: astore_2
      15: aload_2
      16: ifnull        46
      19: aload_2
      20: invokevirtual #34                 // Method com/zaxxer/hikari/pool/HikariPool.getUnwrappedDataSource:()Ljavax/sql/DataSource;
      23: astore_3
      24: aload_1
      25: aload_3
      26: invokevirtual #39                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      29: ifeq          34
      32: aload_3
      33: areturn
      34: aload_3
      35: ifnull        46
      38: aload_3
      39: aload_1
      40: invokeinterface #40,  2           // InterfaceMethod javax/sql/DataSource.unwrap:(Ljava/lang/Class;)Ljava/lang/Object;
      45: areturn
      46: new           #18                 // class java/sql/SQLException
      49: dup
      50: new           #19                 // class java/lang/StringBuilder
      53: dup
      54: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      57: ldc           #41                 // String Wrapped DataSource is not an instance of
      59: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: aload_1
      63: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      66: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      69: invokespecial #26                 // Method java/sql/SQLException."<init>":(Ljava/lang/String;)V
      72: athrow

  public boolean isWrapperFor(java.lang.Class<?>) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #39                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
       5: ifeq          10
       8: iconst_1
       9: ireturn
      10: aload_0
      11: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
      14: astore_2
      15: aload_2
      16: ifnull        46
      19: aload_2
      20: invokevirtual #34                 // Method com/zaxxer/hikari/pool/HikariPool.getUnwrappedDataSource:()Ljavax/sql/DataSource;
      23: astore_3
      24: aload_1
      25: aload_3
      26: invokevirtual #39                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      29: ifeq          34
      32: iconst_1
      33: ireturn
      34: aload_3
      35: ifnull        46
      38: aload_3
      39: aload_1
      40: invokeinterface #42,  2           // InterfaceMethod javax/sql/DataSource.isWrapperFor:(Ljava/lang/Class;)Z
      45: ireturn
      46: iconst_0
      47: ireturn

  public void setMetricRegistry(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #43                 // Method getMetricRegistry:()Ljava/lang/Object;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: istore_2
      13: aload_0
      14: aload_1
      15: invokespecial #44                 // Method com/zaxxer/hikari/HikariConfig.setMetricRegistry:(Ljava/lang/Object;)V
      18: aload_0
      19: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
      22: astore_3
      23: aload_3
      24: ifnull        49
      27: iload_2
      28: ifeq          41
      31: new           #45                 // class java/lang/IllegalStateException
      34: dup
      35: ldc           #46                 // String MetricRegistry can only be set one time
      37: invokespecial #47                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_3
      42: aload_0
      43: invokespecial #48                 // Method com/zaxxer/hikari/HikariConfig.getMetricRegistry:()Ljava/lang/Object;
      46: invokevirtual #49                 // Method com/zaxxer/hikari/pool/HikariPool.setMetricRegistry:(Ljava/lang/Object;)V
      49: return

  public void setMetricsTrackerFactory(com.zaxxer.hikari.metrics.MetricsTrackerFactory);
    Code:
       0: aload_0
       1: invokevirtual #50                 // Method getMetricsTrackerFactory:()Lcom/zaxxer/hikari/metrics/MetricsTrackerFactory;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: istore_2
      13: aload_0
      14: aload_1
      15: invokespecial #51                 // Method com/zaxxer/hikari/HikariConfig.setMetricsTrackerFactory:(Lcom/zaxxer/hikari/metrics/MetricsTrackerFactory;)V
      18: aload_0
      19: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
      22: astore_3
      23: aload_3
      24: ifnull        49
      27: iload_2
      28: ifeq          41
      31: new           #45                 // class java/lang/IllegalStateException
      34: dup
      35: ldc           #52                 // String MetricsTrackerFactory can only be set one time
      37: invokespecial #47                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_3
      42: aload_0
      43: invokespecial #53                 // Method com/zaxxer/hikari/HikariConfig.getMetricsTrackerFactory:()Lcom/zaxxer/hikari/metrics/MetricsTrackerFactory;
      46: invokevirtual #54                 // Method com/zaxxer/hikari/pool/HikariPool.setMetricsTrackerFactory:(Lcom/zaxxer/hikari/metrics/MetricsTrackerFactory;)V
      49: return

  public void setHealthCheckRegistry(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #55                 // Method getHealthCheckRegistry:()Ljava/lang/Object;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: istore_2
      13: aload_0
      14: aload_1
      15: invokespecial #56                 // Method com/zaxxer/hikari/HikariConfig.setHealthCheckRegistry:(Ljava/lang/Object;)V
      18: aload_0
      19: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
      22: astore_3
      23: aload_3
      24: ifnull        49
      27: iload_2
      28: ifeq          41
      31: new           #45                 // class java/lang/IllegalStateException
      34: dup
      35: ldc           #57                 // String HealthCheckRegistry can only be set one time
      37: invokespecial #47                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_3
      42: aload_0
      43: invokespecial #58                 // Method com/zaxxer/hikari/HikariConfig.getHealthCheckRegistry:()Ljava/lang/Object;
      46: invokevirtual #59                 // Method com/zaxxer/hikari/pool/HikariPool.setHealthCheckRegistry:(Ljava/lang/Object;)V
      49: return

  public boolean isRunning();
    Code:
       0: aload_0
       1: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
       4: ifnull        22
       7: aload_0
       8: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
      11: getfield      #60                 // Field com/zaxxer/hikari/pool/HikariPool.poolState:I
      14: iconst_2
      15: if_icmpeq     22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public com.zaxxer.hikari.HikariPoolMXBean getHikariPoolMXBean();
    Code:
       0: aload_0
       1: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
       4: areturn

  public com.zaxxer.hikari.HikariConfigMXBean getHikariConfigMXBean();
    Code:
       0: aload_0
       1: areturn

  public void evictConnection(java.sql.Connection);
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method isClosed:()Z
       4: ifne          36
       7: aload_0
       8: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
      11: dup
      12: astore_2
      13: ifnull        36
      16: aload_1
      17: invokevirtual #61                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      20: invokevirtual #62                 // Method java/lang/Class.getName:()Ljava/lang/String;
      23: ldc           #63                 // String com.zaxxer.hikari
      25: invokevirtual #64                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      28: ifeq          36
      31: aload_2
      32: aload_1
      33: invokevirtual #65                 // Method com/zaxxer/hikari/pool/HikariPool.evictConnection:(Ljava/sql/Connection;)V
      36: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #5                  // Field isShutdown:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: invokevirtual #66                 // Method java/util/concurrent/atomic/AtomicBoolean.getAndSet:(Z)Z
       8: ifeq          12
      11: return
      12: aload_0
      13: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
      16: astore_1
      17: aload_1
      18: ifnull        78
      21: getstatic     #9                  // Field LOGGER:Lorg/slf4j/Logger;
      24: ldc           #67                 // String {} - Shutdown initiated...
      26: aload_0
      27: invokevirtual #29                 // Method getPoolName:()Ljava/lang/String;
      30: invokeinterface #12,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
      35: aload_1
      36: invokevirtual #68                 // Method com/zaxxer/hikari/pool/HikariPool.shutdown:()V
      39: getstatic     #9                  // Field LOGGER:Lorg/slf4j/Logger;
      42: ldc           #69                 // String {} - Shutdown completed.
      44: aload_0
      45: invokevirtual #29                 // Method getPoolName:()Ljava/lang/String;
      48: invokeinterface #12,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
      53: goto          78
      56: astore_2
      57: getstatic     #9                  // Field LOGGER:Lorg/slf4j/Logger;
      60: ldc           #71                 // String {} - Interrupted during closing
      62: aload_0
      63: invokevirtual #29                 // Method getPoolName:()Ljava/lang/String;
      66: aload_2
      67: invokeinterface #72,  4           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      72: invokestatic  #73                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      75: invokevirtual #74                 // Method java/lang/Thread.interrupt:()V
      78: return
    Exception table:
       from    to  target type
          21    53    56   Class java/lang/InterruptedException

  public boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #5                  // Field isShutdown:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #75                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  public java.lang.String toString();
    Code:
       0: new           #19                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #76                 // String HikariDataSource (
       9: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #14                 // Field pool:Lcom/zaxxer/hikari/pool/HikariPool;
      16: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #77                 // String )
      21: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn

  static {};
    Code:
       0: ldc           #78                 // class com/zaxxer/hikari/HikariDataSource
       2: invokestatic  #79                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #9                  // Field LOGGER:Lorg/slf4j/Logger;
       8: return
}
