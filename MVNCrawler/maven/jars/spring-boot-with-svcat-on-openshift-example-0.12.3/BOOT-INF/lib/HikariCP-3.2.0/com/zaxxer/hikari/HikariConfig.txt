Compiled from "HikariConfig.java"
public class com.zaxxer.hikari.HikariConfig implements com.zaxxer.hikari.HikariConfigMXBean {
  private static final org.slf4j.Logger LOGGER;

  private static final char[] ID_CHARACTERS;

  private static final long CONNECTION_TIMEOUT;

  private static final long VALIDATION_TIMEOUT;

  private static final long IDLE_TIMEOUT;

  private static final long MAX_LIFETIME;

  private static final int DEFAULT_POOL_SIZE;

  private static boolean unitTest;

  private volatile java.lang.String catalog;

  private volatile long connectionTimeout;

  private volatile long validationTimeout;

  private volatile long idleTimeout;

  private volatile long leakDetectionThreshold;

  private volatile long maxLifetime;

  private volatile int maxPoolSize;

  private volatile int minIdle;

  private volatile java.lang.String username;

  private volatile java.lang.String password;

  private long initializationFailTimeout;

  private java.lang.String connectionInitSql;

  private java.lang.String connectionTestQuery;

  private java.lang.String dataSourceClassName;

  private java.lang.String dataSourceJndiName;

  private java.lang.String driverClassName;

  private java.lang.String jdbcUrl;

  private java.lang.String poolName;

  private java.lang.String schema;

  private java.lang.String transactionIsolationName;

  private boolean isAutoCommit;

  private boolean isReadOnly;

  private boolean isIsolateInternalQueries;

  private boolean isRegisterMbeans;

  private boolean isAllowPoolSuspension;

  private javax.sql.DataSource dataSource;

  private java.util.Properties dataSourceProperties;

  private java.util.concurrent.ThreadFactory threadFactory;

  private java.util.concurrent.ScheduledExecutorService scheduledExecutor;

  private com.zaxxer.hikari.metrics.MetricsTrackerFactory metricsTrackerFactory;

  private java.lang.Object metricRegistry;

  private java.lang.Object healthCheckRegistry;

  private java.util.Properties healthCheckProperties;

  private volatile boolean sealed;

  public com.zaxxer.hikari.HikariConfig();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/Properties
       8: dup
       9: invokespecial #3                  // Method java/util/Properties."<init>":()V
      12: putfield      #4                  // Field dataSourceProperties:Ljava/util/Properties;
      15: aload_0
      16: new           #2                  // class java/util/Properties
      19: dup
      20: invokespecial #3                  // Method java/util/Properties."<init>":()V
      23: putfield      #5                  // Field healthCheckProperties:Ljava/util/Properties;
      26: aload_0
      27: iconst_m1
      28: putfield      #6                  // Field minIdle:I
      31: aload_0
      32: iconst_m1
      33: putfield      #7                  // Field maxPoolSize:I
      36: aload_0
      37: getstatic     #8                  // Field MAX_LIFETIME:J
      40: putfield      #9                  // Field maxLifetime:J
      43: aload_0
      44: getstatic     #10                 // Field CONNECTION_TIMEOUT:J
      47: putfield      #11                 // Field connectionTimeout:J
      50: aload_0
      51: getstatic     #12                 // Field VALIDATION_TIMEOUT:J
      54: putfield      #13                 // Field validationTimeout:J
      57: aload_0
      58: getstatic     #14                 // Field IDLE_TIMEOUT:J
      61: putfield      #15                 // Field idleTimeout:J
      64: aload_0
      65: lconst_1
      66: putfield      #16                 // Field initializationFailTimeout:J
      69: aload_0
      70: iconst_1
      71: putfield      #17                 // Field isAutoCommit:Z
      74: ldc           #18                 // String hikaricp.configurationFile
      76: invokestatic  #19                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      79: astore_1
      80: aload_1
      81: ifnull        89
      84: aload_0
      85: aload_1
      86: invokespecial #20                 // Method loadProperties:(Ljava/lang/String;)V
      89: return

  public com.zaxxer.hikari.HikariConfig(java.util.Properties);
    Code:
       0: aload_0
       1: invokespecial #21                 // Method "<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #22                 // Method com/zaxxer/hikari/util/PropertyElf.setTargetFromProperties:(Ljava/lang/Object;Ljava/util/Properties;)V
       9: return

  public com.zaxxer.hikari.HikariConfig(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #21                 // Method "<init>":()V
       4: aload_0
       5: aload_1
       6: invokespecial #20                 // Method loadProperties:(Ljava/lang/String;)V
       9: return

  public java.lang.String getCatalog();
    Code:
       0: aload_0
       1: getfield      #23                 // Field catalog:Ljava/lang/String;
       4: areturn

  public void setCatalog(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field catalog:Ljava/lang/String;
       5: return

  public long getConnectionTimeout();
    Code:
       0: aload_0
       1: getfield      #11                 // Field connectionTimeout:J
       4: lreturn

  public void setConnectionTimeout(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifne          16
       6: aload_0
       7: ldc2_w        #25                 // long 2147483647l
      10: putfield      #11                 // Field connectionTimeout:J
      13: goto          39
      16: lload_1
      17: ldc2_w        #27                 // long 250l
      20: lcmp
      21: ifge          34
      24: new           #29                 // class java/lang/IllegalArgumentException
      27: dup
      28: ldc           #30                 // String connectionTimeout cannot be less than 250ms
      30: invokespecial #31                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: lload_1
      36: putfield      #11                 // Field connectionTimeout:J
      39: return

  public long getIdleTimeout();
    Code:
       0: aload_0
       1: getfield      #15                 // Field idleTimeout:J
       4: lreturn

  public void setIdleTimeout(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          16
       6: new           #29                 // class java/lang/IllegalArgumentException
       9: dup
      10: ldc           #32                 // String idleTimeout cannot be negative
      12: invokespecial #31                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: aload_0
      17: lload_1
      18: putfield      #15                 // Field idleTimeout:J
      21: return

  public long getLeakDetectionThreshold();
    Code:
       0: aload_0
       1: getfield      #33                 // Field leakDetectionThreshold:J
       4: lreturn

  public void setLeakDetectionThreshold(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #33                 // Field leakDetectionThreshold:J
       5: return

  public long getMaxLifetime();
    Code:
       0: aload_0
       1: getfield      #9                  // Field maxLifetime:J
       4: lreturn

  public void setMaxLifetime(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #9                  // Field maxLifetime:J
       5: return

  public int getMaximumPoolSize();
    Code:
       0: aload_0
       1: getfield      #7                  // Field maxPoolSize:I
       4: ireturn

  public void setMaximumPoolSize(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmpge     15
       5: new           #29                 // class java/lang/IllegalArgumentException
       8: dup
       9: ldc           #34                 // String maxPoolSize cannot be less than 1
      11: invokespecial #31                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      14: athrow
      15: aload_0
      16: iload_1
      17: putfield      #7                  // Field maxPoolSize:I
      20: return

  public int getMinimumIdle();
    Code:
       0: aload_0
       1: getfield      #6                  // Field minIdle:I
       4: ireturn

  public void setMinimumIdle(int);
    Code:
       0: iload_1
       1: ifge          14
       4: new           #29                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #35                 // String minimumIdle cannot be negative
      10: invokespecial #31                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: iload_1
      16: putfield      #6                  // Field minIdle:I
      19: return

  public java.lang.String getPassword();
    Code:
       0: aload_0
       1: getfield      #36                 // Field password:Ljava/lang/String;
       4: areturn

  public void setPassword(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #36                 // Field password:Ljava/lang/String;
       5: return

  public java.lang.String getUsername();
    Code:
       0: aload_0
       1: getfield      #37                 // Field username:Ljava/lang/String;
       4: areturn

  public void setUsername(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #37                 // Field username:Ljava/lang/String;
       5: return

  public long getValidationTimeout();
    Code:
       0: aload_0
       1: getfield      #13                 // Field validationTimeout:J
       4: lreturn

  public void setValidationTimeout(long);
    Code:
       0: lload_1
       1: ldc2_w        #27                 // long 250l
       4: lcmp
       5: ifge          18
       8: new           #29                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #38                 // String validationTimeout cannot be less than 250ms
      14: invokespecial #31                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: lload_1
      20: putfield      #13                 // Field validationTimeout:J
      23: return

  public java.lang.String getConnectionTestQuery();
    Code:
       0: aload_0
       1: getfield      #39                 // Field connectionTestQuery:Ljava/lang/String;
       4: areturn

  public void setConnectionTestQuery(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: aload_1
       6: putfield      #39                 // Field connectionTestQuery:Ljava/lang/String;
       9: return

  public java.lang.String getConnectionInitSql();
    Code:
       0: aload_0
       1: getfield      #41                 // Field connectionInitSql:Ljava/lang/String;
       4: areturn

  public void setConnectionInitSql(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: aload_1
       6: putfield      #41                 // Field connectionInitSql:Ljava/lang/String;
       9: return

  public javax.sql.DataSource getDataSource();
    Code:
       0: aload_0
       1: getfield      #42                 // Field dataSource:Ljavax/sql/DataSource;
       4: areturn

  public void setDataSource(javax.sql.DataSource);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: aload_1
       6: putfield      #42                 // Field dataSource:Ljavax/sql/DataSource;
       9: return

  public java.lang.String getDataSourceClassName();
    Code:
       0: aload_0
       1: getfield      #43                 // Field dataSourceClassName:Ljava/lang/String;
       4: areturn

  public void setDataSourceClassName(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: aload_1
       6: putfield      #43                 // Field dataSourceClassName:Ljava/lang/String;
       9: return

  public void addDataSourceProperty(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: getfield      #4                  // Field dataSourceProperties:Ljava/util/Properties;
       8: aload_1
       9: aload_2
      10: invokevirtual #44                 // Method java/util/Properties.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: return

  public java.lang.String getDataSourceJNDI();
    Code:
       0: aload_0
       1: getfield      #45                 // Field dataSourceJndiName:Ljava/lang/String;
       4: areturn

  public void setDataSourceJNDI(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: aload_1
       6: putfield      #45                 // Field dataSourceJndiName:Ljava/lang/String;
       9: return

  public java.util.Properties getDataSourceProperties();
    Code:
       0: aload_0
       1: getfield      #4                  // Field dataSourceProperties:Ljava/util/Properties;
       4: areturn

  public void setDataSourceProperties(java.util.Properties);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: getfield      #4                  // Field dataSourceProperties:Ljava/util/Properties;
       8: aload_1
       9: invokevirtual #46                 // Method java/util/Properties.putAll:(Ljava/util/Map;)V
      12: return

  public java.lang.String getDriverClassName();
    Code:
       0: aload_0
       1: getfield      #47                 // Field driverClassName:Ljava/lang/String;
       4: areturn

  public void setDriverClassName(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aconst_null
       5: astore_2
       6: invokestatic  #48                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       9: invokevirtual #49                 // Method java/lang/Thread.getContextClassLoader:()Ljava/lang/ClassLoader;
      12: astore_3
      13: aload_3
      14: ifnull        72
      17: aload_3
      18: aload_1
      19: invokevirtual #50                 // Method java/lang/ClassLoader.loadClass:(Ljava/lang/String;)Ljava/lang/Class;
      22: astore_2
      23: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
      26: ldc           #52                 // String Driver class {} found in Thread context class loader {}
      28: aload_1
      29: aload_3
      30: invokeinterface #53,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      35: goto          72
      38: astore        4
      40: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
      43: ldc           #55                 // String Driver class {} not found in Thread context class loader {}, trying classloader {}
      45: iconst_3
      46: anewarray     #56                 // class java/lang/Object
      49: dup
      50: iconst_0
      51: aload_1
      52: aastore
      53: dup
      54: iconst_1
      55: aload_3
      56: aastore
      57: dup
      58: iconst_2
      59: aload_0
      60: invokevirtual #57                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      63: invokevirtual #58                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
      66: aastore
      67: invokeinterface #59,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;[Ljava/lang/Object;)V
      72: aload_2
      73: ifnonnull     106
      76: aload_0
      77: invokevirtual #57                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      80: invokevirtual #58                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
      83: aload_1
      84: invokevirtual #50                 // Method java/lang/ClassLoader.loadClass:(Ljava/lang/String;)Ljava/lang/Class;
      87: astore_2
      88: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
      91: ldc           #60                 // String Driver class {} found in the HikariConfig class classloader {}
      93: aload_1
      94: aload_0
      95: invokevirtual #57                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      98: invokevirtual #58                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
     101: invokeinterface #53,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     106: goto          129
     109: astore        4
     111: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
     114: ldc           #61                 // String Failed to load driver class {} from HikariConfig class classloader {}
     116: aload_1
     117: aload_0
     118: invokevirtual #57                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     121: invokevirtual #58                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
     124: invokeinterface #62,  4           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     129: aload_2
     130: ifnonnull     165
     133: new           #63                 // class java/lang/RuntimeException
     136: dup
     137: new           #64                 // class java/lang/StringBuilder
     140: dup
     141: invokespecial #65                 // Method java/lang/StringBuilder."<init>":()V
     144: ldc           #66                 // String Failed to load driver class
     146: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     149: aload_1
     150: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     153: ldc           #68                 // String  in either of HikariConfig class loader or Thread context classloader
     155: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     158: invokevirtual #69                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     161: invokespecial #70                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
     164: athrow
     165: aload_2
     166: invokevirtual #71                 // Method java/lang/Class.newInstance:()Ljava/lang/Object;
     169: pop
     170: aload_0
     171: aload_1
     172: putfield      #47                 // Field driverClassName:Ljava/lang/String;
     175: goto          209
     178: astore        4
     180: new           #63                 // class java/lang/RuntimeException
     183: dup
     184: new           #64                 // class java/lang/StringBuilder
     187: dup
     188: invokespecial #65                 // Method java/lang/StringBuilder."<init>":()V
     191: ldc           #73                 // String Failed to instantiate class
     193: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     196: aload_1
     197: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     200: invokevirtual #69                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     203: aload         4
     205: invokespecial #74                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     208: athrow
     209: return
    Exception table:
       from    to  target type
          17    35    38   Class java/lang/ClassNotFoundException
          13   106   109   Class java/lang/ClassNotFoundException
         165   175   178   Class java/lang/Exception

  public java.lang.String getJdbcUrl();
    Code:
       0: aload_0
       1: getfield      #75                 // Field jdbcUrl:Ljava/lang/String;
       4: areturn

  public void setJdbcUrl(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: aload_1
       6: putfield      #75                 // Field jdbcUrl:Ljava/lang/String;
       9: return

  public boolean isAutoCommit();
    Code:
       0: aload_0
       1: getfield      #17                 // Field isAutoCommit:Z
       4: ireturn

  public void setAutoCommit(boolean);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: iload_1
       6: putfield      #17                 // Field isAutoCommit:Z
       9: return

  public boolean isAllowPoolSuspension();
    Code:
       0: aload_0
       1: getfield      #76                 // Field isAllowPoolSuspension:Z
       4: ireturn

  public void setAllowPoolSuspension(boolean);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: iload_1
       6: putfield      #76                 // Field isAllowPoolSuspension:Z
       9: return

  public long getInitializationFailTimeout();
    Code:
       0: aload_0
       1: getfield      #16                 // Field initializationFailTimeout:J
       4: lreturn

  public void setInitializationFailTimeout(long);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: lload_1
       6: putfield      #16                 // Field initializationFailTimeout:J
       9: return

  public boolean isIsolateInternalQueries();
    Code:
       0: aload_0
       1: getfield      #77                 // Field isIsolateInternalQueries:Z
       4: ireturn

  public void setIsolateInternalQueries(boolean);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: iload_1
       6: putfield      #77                 // Field isIsolateInternalQueries:Z
       9: return

  public com.zaxxer.hikari.metrics.MetricsTrackerFactory getMetricsTrackerFactory();
    Code:
       0: aload_0
       1: getfield      #78                 // Field metricsTrackerFactory:Lcom/zaxxer/hikari/metrics/MetricsTrackerFactory;
       4: areturn

  public void setMetricsTrackerFactory(com.zaxxer.hikari.metrics.MetricsTrackerFactory);
    Code:
       0: aload_0
       1: getfield      #79                 // Field metricRegistry:Ljava/lang/Object;
       4: ifnull        17
       7: new           #80                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #81                 // String cannot use setMetricsTrackerFactory() and setMetricRegistry() together
      13: invokespecial #82                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: putfield      #78                 // Field metricsTrackerFactory:Lcom/zaxxer/hikari/metrics/MetricsTrackerFactory;
      22: return

  public java.lang.Object getMetricRegistry();
    Code:
       0: aload_0
       1: getfield      #79                 // Field metricRegistry:Ljava/lang/Object;
       4: areturn

  public void setMetricRegistry(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #78                 // Field metricsTrackerFactory:Lcom/zaxxer/hikari/metrics/MetricsTrackerFactory;
       4: ifnull        17
       7: new           #80                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #83                 // String cannot use setMetricRegistry() and setMetricsTrackerFactory() together
      13: invokespecial #82                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_1
      18: ifnull        55
      21: aload_0
      22: aload_1
      23: invokespecial #84                 // Method getObjectOrPerformJndiLookup:(Ljava/lang/Object;)Ljava/lang/Object;
      26: astore_1
      27: aload_1
      28: ldc           #85                 // String com.codahale.metrics.MetricRegistry
      30: invokestatic  #86                 // Method com/zaxxer/hikari/util/UtilityElf.safeIsAssignableFrom:(Ljava/lang/Object;Ljava/lang/String;)Z
      33: ifne          55
      36: aload_1
      37: ldc           #87                 // String io.micrometer.core.instrument.MeterRegistry
      39: invokestatic  #86                 // Method com/zaxxer/hikari/util/UtilityElf.safeIsAssignableFrom:(Ljava/lang/Object;Ljava/lang/String;)Z
      42: ifne          55
      45: new           #29                 // class java/lang/IllegalArgumentException
      48: dup
      49: ldc           #88                 // String Class must be instance of com.codahale.metrics.MetricRegistry or io.micrometer.core.instrument.MeterRegistry
      51: invokespecial #31                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      54: athrow
      55: aload_0
      56: aload_1
      57: putfield      #79                 // Field metricRegistry:Ljava/lang/Object;
      60: return

  public java.lang.Object getHealthCheckRegistry();
    Code:
       0: aload_0
       1: getfield      #89                 // Field healthCheckRegistry:Ljava/lang/Object;
       4: areturn

  public void setHealthCheckRegistry(java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_1
       5: ifnull        31
       8: aload_0
       9: aload_1
      10: invokespecial #84                 // Method getObjectOrPerformJndiLookup:(Ljava/lang/Object;)Ljava/lang/Object;
      13: astore_1
      14: aload_1
      15: instanceof    #90                 // class com/codahale/metrics/health/HealthCheckRegistry
      18: ifne          31
      21: new           #29                 // class java/lang/IllegalArgumentException
      24: dup
      25: ldc           #91                 // String Class must be an instance of com.codahale.metrics.health.HealthCheckRegistry
      27: invokespecial #31                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: aload_0
      32: aload_1
      33: putfield      #89                 // Field healthCheckRegistry:Ljava/lang/Object;
      36: return

  public java.util.Properties getHealthCheckProperties();
    Code:
       0: aload_0
       1: getfield      #5                  // Field healthCheckProperties:Ljava/util/Properties;
       4: areturn

  public void setHealthCheckProperties(java.util.Properties);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: getfield      #5                  // Field healthCheckProperties:Ljava/util/Properties;
       8: aload_1
       9: invokevirtual #46                 // Method java/util/Properties.putAll:(Ljava/util/Map;)V
      12: return

  public void addHealthCheckProperty(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: getfield      #5                  // Field healthCheckProperties:Ljava/util/Properties;
       8: aload_1
       9: aload_2
      10: invokevirtual #92                 // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: return

  public boolean isReadOnly();
    Code:
       0: aload_0
       1: getfield      #93                 // Field isReadOnly:Z
       4: ireturn

  public void setReadOnly(boolean);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: iload_1
       6: putfield      #93                 // Field isReadOnly:Z
       9: return

  public boolean isRegisterMbeans();
    Code:
       0: aload_0
       1: getfield      #94                 // Field isRegisterMbeans:Z
       4: ireturn

  public void setRegisterMbeans(boolean);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: iload_1
       6: putfield      #94                 // Field isRegisterMbeans:Z
       9: return

  public java.lang.String getPoolName();
    Code:
       0: aload_0
       1: getfield      #95                 // Field poolName:Ljava/lang/String;
       4: areturn

  public void setPoolName(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: aload_1
       6: putfield      #95                 // Field poolName:Ljava/lang/String;
       9: return

  public java.util.concurrent.ScheduledExecutorService getScheduledExecutor();
    Code:
       0: aload_0
       1: getfield      #96                 // Field scheduledExecutor:Ljava/util/concurrent/ScheduledExecutorService;
       4: areturn

  public void setScheduledExecutor(java.util.concurrent.ScheduledExecutorService);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: aload_1
       6: putfield      #96                 // Field scheduledExecutor:Ljava/util/concurrent/ScheduledExecutorService;
       9: return

  public java.lang.String getTransactionIsolation();
    Code:
       0: aload_0
       1: getfield      #97                 // Field transactionIsolationName:Ljava/lang/String;
       4: areturn

  public java.lang.String getSchema();
    Code:
       0: aload_0
       1: getfield      #98                 // Field schema:Ljava/lang/String;
       4: areturn

  public void setSchema(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: aload_1
       6: putfield      #98                 // Field schema:Ljava/lang/String;
       9: return

  public void setTransactionIsolation(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: aload_1
       6: putfield      #97                 // Field transactionIsolationName:Ljava/lang/String;
       9: return

  public java.util.concurrent.ThreadFactory getThreadFactory();
    Code:
       0: aload_0
       1: getfield      #99                 // Field threadFactory:Ljava/util/concurrent/ThreadFactory;
       4: areturn

  public void setThreadFactory(java.util.concurrent.ThreadFactory);
    Code:
       0: aload_0
       1: invokespecial #40                 // Method checkIfSealed:()V
       4: aload_0
       5: aload_1
       6: putfield      #99                 // Field threadFactory:Ljava/util/concurrent/ThreadFactory;
       9: return

  void seal();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #100                // Field sealed:Z
       5: return

  public void copyStateTo(com.zaxxer.hikari.HikariConfig);
    Code:
       0: ldc           #101                // class com/zaxxer/hikari/HikariConfig
       2: invokevirtual #102                // Method java/lang/Class.getDeclaredFields:()[Ljava/lang/reflect/Field;
       5: astore_2
       6: aload_2
       7: arraylength
       8: istore_3
       9: iconst_0
      10: istore        4
      12: iload         4
      14: iload_3
      15: if_icmpge     97
      18: aload_2
      19: iload         4
      21: aaload
      22: astore        5
      24: aload         5
      26: invokevirtual #103                // Method java/lang/reflect/Field.getModifiers:()I
      29: invokestatic  #104                // Method java/lang/reflect/Modifier.isFinal:(I)Z
      32: ifne          91
      35: aload         5
      37: iconst_1
      38: invokevirtual #105                // Method java/lang/reflect/Field.setAccessible:(Z)V
      41: aload         5
      43: aload_1
      44: aload         5
      46: aload_0
      47: invokevirtual #106                // Method java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;
      50: invokevirtual #107                // Method java/lang/reflect/Field.set:(Ljava/lang/Object;Ljava/lang/Object;)V
      53: goto          91
      56: astore        6
      58: new           #63                 // class java/lang/RuntimeException
      61: dup
      62: new           #64                 // class java/lang/StringBuilder
      65: dup
      66: invokespecial #65                 // Method java/lang/StringBuilder."<init>":()V
      69: ldc           #108                // String Failed to copy HikariConfig state:
      71: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: aload         6
      76: invokevirtual #109                // Method java/lang/Exception.getMessage:()Ljava/lang/String;
      79: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: invokevirtual #69                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      85: aload         6
      87: invokespecial #74                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      90: athrow
      91: iinc          4, 1
      94: goto          12
      97: aload_1
      98: iconst_0
      99: putfield      #100                // Field sealed:Z
     102: return
    Exception table:
       from    to  target type
          41    53    56   Class java/lang/Exception

  public void validate();
    Code:
       0: aload_0
       1: getfield      #95                 // Field poolName:Ljava/lang/String;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: invokespecial #110                // Method generatePoolName:()Ljava/lang/String;
      12: putfield      #95                 // Field poolName:Ljava/lang/String;
      15: goto          47
      18: aload_0
      19: getfield      #94                 // Field isRegisterMbeans:Z
      22: ifeq          47
      25: aload_0
      26: getfield      #95                 // Field poolName:Ljava/lang/String;
      29: ldc           #111                // String :
      31: invokevirtual #112                // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      34: ifeq          47
      37: new           #29                 // class java/lang/IllegalArgumentException
      40: dup
      41: ldc           #113                // String poolName cannot contain \':\' when used with JMX
      43: invokespecial #31                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      46: athrow
      47: aload_0
      48: aload_0
      49: getfield      #23                 // Field catalog:Ljava/lang/String;
      52: invokestatic  #114                // Method com/zaxxer/hikari/util/UtilityElf.getNullIfEmpty:(Ljava/lang/String;)Ljava/lang/String;
      55: putfield      #23                 // Field catalog:Ljava/lang/String;
      58: aload_0
      59: aload_0
      60: getfield      #41                 // Field connectionInitSql:Ljava/lang/String;
      63: invokestatic  #114                // Method com/zaxxer/hikari/util/UtilityElf.getNullIfEmpty:(Ljava/lang/String;)Ljava/lang/String;
      66: putfield      #41                 // Field connectionInitSql:Ljava/lang/String;
      69: aload_0
      70: aload_0
      71: getfield      #39                 // Field connectionTestQuery:Ljava/lang/String;
      74: invokestatic  #114                // Method com/zaxxer/hikari/util/UtilityElf.getNullIfEmpty:(Ljava/lang/String;)Ljava/lang/String;
      77: putfield      #39                 // Field connectionTestQuery:Ljava/lang/String;
      80: aload_0
      81: aload_0
      82: getfield      #97                 // Field transactionIsolationName:Ljava/lang/String;
      85: invokestatic  #114                // Method com/zaxxer/hikari/util/UtilityElf.getNullIfEmpty:(Ljava/lang/String;)Ljava/lang/String;
      88: putfield      #97                 // Field transactionIsolationName:Ljava/lang/String;
      91: aload_0
      92: aload_0
      93: getfield      #43                 // Field dataSourceClassName:Ljava/lang/String;
      96: invokestatic  #114                // Method com/zaxxer/hikari/util/UtilityElf.getNullIfEmpty:(Ljava/lang/String;)Ljava/lang/String;
      99: putfield      #43                 // Field dataSourceClassName:Ljava/lang/String;
     102: aload_0
     103: aload_0
     104: getfield      #45                 // Field dataSourceJndiName:Ljava/lang/String;
     107: invokestatic  #114                // Method com/zaxxer/hikari/util/UtilityElf.getNullIfEmpty:(Ljava/lang/String;)Ljava/lang/String;
     110: putfield      #45                 // Field dataSourceJndiName:Ljava/lang/String;
     113: aload_0
     114: aload_0
     115: getfield      #47                 // Field driverClassName:Ljava/lang/String;
     118: invokestatic  #114                // Method com/zaxxer/hikari/util/UtilityElf.getNullIfEmpty:(Ljava/lang/String;)Ljava/lang/String;
     121: putfield      #47                 // Field driverClassName:Ljava/lang/String;
     124: aload_0
     125: aload_0
     126: getfield      #75                 // Field jdbcUrl:Ljava/lang/String;
     129: invokestatic  #114                // Method com/zaxxer/hikari/util/UtilityElf.getNullIfEmpty:(Ljava/lang/String;)Ljava/lang/String;
     132: putfield      #75                 // Field jdbcUrl:Ljava/lang/String;
     135: aload_0
     136: getfield      #42                 // Field dataSource:Ljavax/sql/DataSource;
     139: ifnull        166
     142: aload_0
     143: getfield      #43                 // Field dataSourceClassName:Ljava/lang/String;
     146: ifnull        300
     149: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
     152: ldc           #115                // String {} - using dataSource and ignoring dataSourceClassName.
     154: aload_0
     155: getfield      #95                 // Field poolName:Ljava/lang/String;
     158: invokeinterface #116,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
     163: goto          300
     166: aload_0
     167: getfield      #43                 // Field dataSourceClassName:Ljava/lang/String;
     170: ifnull        228
     173: aload_0
     174: getfield      #47                 // Field driverClassName:Ljava/lang/String;
     177: ifnull        204
     180: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
     183: ldc           #117                // String {} - cannot use driverClassName and dataSourceClassName together.
     185: aload_0
     186: getfield      #95                 // Field poolName:Ljava/lang/String;
     189: invokeinterface #118,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;)V
     194: new           #80                 // class java/lang/IllegalStateException
     197: dup
     198: ldc           #119                // String cannot use driverClassName and dataSourceClassName together.
     200: invokespecial #82                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     203: athrow
     204: aload_0
     205: getfield      #75                 // Field jdbcUrl:Ljava/lang/String;
     208: ifnull        300
     211: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
     214: ldc           #120                // String {} - using dataSourceClassName and ignoring jdbcUrl.
     216: aload_0
     217: getfield      #95                 // Field poolName:Ljava/lang/String;
     220: invokeinterface #116,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
     225: goto          300
     228: aload_0
     229: getfield      #75                 // Field jdbcUrl:Ljava/lang/String;
     232: ifnonnull     300
     235: aload_0
     236: getfield      #45                 // Field dataSourceJndiName:Ljava/lang/String;
     239: ifnull        245
     242: goto          300
     245: aload_0
     246: getfield      #47                 // Field driverClassName:Ljava/lang/String;
     249: ifnull        276
     252: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
     255: ldc           #121                // String {} - jdbcUrl is required with driverClassName.
     257: aload_0
     258: getfield      #95                 // Field poolName:Ljava/lang/String;
     261: invokeinterface #118,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;)V
     266: new           #29                 // class java/lang/IllegalArgumentException
     269: dup
     270: ldc           #122                // String jdbcUrl is required with driverClassName.
     272: invokespecial #31                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     275: athrow
     276: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
     279: ldc           #123                // String {} - dataSource or dataSourceClassName or jdbcUrl is required.
     281: aload_0
     282: getfield      #95                 // Field poolName:Ljava/lang/String;
     285: invokeinterface #118,  3          // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;)V
     290: new           #29                 // class java/lang/IllegalArgumentException
     293: dup
     294: ldc           #124                // String dataSource or dataSourceClassName or jdbcUrl is required.
     296: invokespecial #31                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     299: athrow
     300: aload_0
     301: invokespecial #125                // Method validateNumerics:()V
     304: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
     307: invokeinterface #126,  1          // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
     312: ifne          321
     315: getstatic     #127                // Field unitTest:Z
     318: ifeq          325
     321: aload_0
     322: invokespecial #128                // Method logConfiguration:()V
     325: return

  private void validateNumerics();
    Code:
       0: aload_0
       1: getfield      #9                  // Field maxLifetime:J
       4: lconst_0
       5: lcmp
       6: ifeq          53
       9: aload_0
      10: getfield      #9                  // Field maxLifetime:J
      13: getstatic     #129                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      16: ldc2_w        #130                // long 30l
      19: invokevirtual #132                // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      22: lcmp
      23: ifge          53
      26: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
      29: ldc           #133                // String {} - maxLifetime is less than 30000ms, setting to default {}ms.
      31: aload_0
      32: getfield      #95                 // Field poolName:Ljava/lang/String;
      35: getstatic     #8                  // Field MAX_LIFETIME:J
      38: invokestatic  #134                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      41: invokeinterface #135,  4          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      46: aload_0
      47: getstatic     #8                  // Field MAX_LIFETIME:J
      50: putfield      #9                  // Field maxLifetime:J
      53: aload_0
      54: getfield      #15                 // Field idleTimeout:J
      57: getstatic     #129                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      60: lconst_1
      61: invokevirtual #132                // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      64: ladd
      65: aload_0
      66: getfield      #9                  // Field maxLifetime:J
      69: lcmp
      70: ifle          101
      73: aload_0
      74: getfield      #9                  // Field maxLifetime:J
      77: lconst_0
      78: lcmp
      79: ifle          101
      82: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
      85: ldc           #136                // String {} - idleTimeout is close to or more than maxLifetime, disabling it.
      87: aload_0
      88: getfield      #95                 // Field poolName:Ljava/lang/String;
      91: invokeinterface #116,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      96: aload_0
      97: lconst_0
      98: putfield      #15                 // Field idleTimeout:J
     101: aload_0
     102: getfield      #15                 // Field idleTimeout:J
     105: lconst_0
     106: lcmp
     107: ifeq          154
     110: aload_0
     111: getfield      #15                 // Field idleTimeout:J
     114: getstatic     #129                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
     117: ldc2_w        #137                // long 10l
     120: invokevirtual #132                // Method java/util/concurrent/TimeUnit.toMillis:(J)J
     123: lcmp
     124: ifge          154
     127: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
     130: ldc           #139                // String {} - idleTimeout is less than 10000ms, setting to default {}ms.
     132: aload_0
     133: getfield      #95                 // Field poolName:Ljava/lang/String;
     136: getstatic     #14                 // Field IDLE_TIMEOUT:J
     139: invokestatic  #134                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     142: invokeinterface #135,  4          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     147: aload_0
     148: getstatic     #14                 // Field IDLE_TIMEOUT:J
     151: putfield      #15                 // Field idleTimeout:J
     154: aload_0
     155: getfield      #33                 // Field leakDetectionThreshold:J
     158: lconst_0
     159: lcmp
     160: ifle          226
     163: getstatic     #127                // Field unitTest:Z
     166: ifne          226
     169: aload_0
     170: getfield      #33                 // Field leakDetectionThreshold:J
     173: getstatic     #129                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
     176: ldc2_w        #140                // long 2l
     179: invokevirtual #132                // Method java/util/concurrent/TimeUnit.toMillis:(J)J
     182: lcmp
     183: iflt          207
     186: aload_0
     187: getfield      #33                 // Field leakDetectionThreshold:J
     190: aload_0
     191: getfield      #9                  // Field maxLifetime:J
     194: lcmp
     195: ifle          226
     198: aload_0
     199: getfield      #9                  // Field maxLifetime:J
     202: lconst_0
     203: lcmp
     204: ifle          226
     207: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
     210: ldc           #142                // String {} - leakDetectionThreshold is less than 2000ms or more than maxLifetime, disabling it.
     212: aload_0
     213: getfield      #95                 // Field poolName:Ljava/lang/String;
     216: invokeinterface #116,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
     221: aload_0
     222: lconst_0
     223: putfield      #33                 // Field leakDetectionThreshold:J
     226: aload_0
     227: getfield      #11                 // Field connectionTimeout:J
     230: ldc2_w        #27                 // long 250l
     233: lcmp
     234: ifge          264
     237: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
     240: ldc           #143                // String {} - connectionTimeout is less than 250ms, setting to {}ms.
     242: aload_0
     243: getfield      #95                 // Field poolName:Ljava/lang/String;
     246: getstatic     #10                 // Field CONNECTION_TIMEOUT:J
     249: invokestatic  #134                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     252: invokeinterface #135,  4          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     257: aload_0
     258: getstatic     #10                 // Field CONNECTION_TIMEOUT:J
     261: putfield      #11                 // Field connectionTimeout:J
     264: aload_0
     265: getfield      #13                 // Field validationTimeout:J
     268: ldc2_w        #27                 // long 250l
     271: lcmp
     272: ifge          302
     275: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
     278: ldc           #144                // String {} - validationTimeout is less than 250ms, setting to {}ms.
     280: aload_0
     281: getfield      #95                 // Field poolName:Ljava/lang/String;
     284: getstatic     #12                 // Field VALIDATION_TIMEOUT:J
     287: invokestatic  #134                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     290: invokeinterface #135,  4          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     295: aload_0
     296: getstatic     #12                 // Field VALIDATION_TIMEOUT:J
     299: putfield      #13                 // Field validationTimeout:J
     302: aload_0
     303: getfield      #7                  // Field maxPoolSize:I
     306: iconst_1
     307: if_icmpge     330
     310: aload_0
     311: aload_0
     312: getfield      #6                  // Field minIdle:I
     315: ifgt          323
     318: bipush        10
     320: goto          327
     323: aload_0
     324: getfield      #6                  // Field minIdle:I
     327: putfield      #7                  // Field maxPoolSize:I
     330: aload_0
     331: getfield      #6                  // Field minIdle:I
     334: iflt          348
     337: aload_0
     338: getfield      #6                  // Field minIdle:I
     341: aload_0
     342: getfield      #7                  // Field maxPoolSize:I
     345: if_icmple     356
     348: aload_0
     349: aload_0
     350: getfield      #7                  // Field maxPoolSize:I
     353: putfield      #6                  // Field minIdle:I
     356: aload_0
     357: getfield      #15                 // Field idleTimeout:J
     360: getstatic     #14                 // Field IDLE_TIMEOUT:J
     363: lcmp
     364: ifeq          397
     367: aload_0
     368: getfield      #15                 // Field idleTimeout:J
     371: lconst_0
     372: lcmp
     373: ifeq          397
     376: aload_0
     377: getfield      #6                  // Field minIdle:I
     380: aload_0
     381: getfield      #7                  // Field maxPoolSize:I
     384: if_icmpne     397
     387: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
     390: ldc           #145                // String {} - idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
     392: invokeinterface #146,  2          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
     397: return

  private void checkIfSealed();
    Code:
       0: aload_0
       1: getfield      #100                // Field sealed:Z
       4: ifeq          17
       7: new           #80                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #147                // String The configuration of the pool is sealed once started. Use HikariConfigMXBean for runtime changes.
      13: invokespecial #82                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return

  private void logConfiguration();
    Code:
       0: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
       3: ldc           #148                // String {} - configuration:
       5: aload_0
       6: getfield      #95                 // Field poolName:Ljava/lang/String;
       9: invokeinterface #149,  3          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      14: new           #150                // class java/util/TreeSet
      17: dup
      18: ldc           #101                // class com/zaxxer/hikari/HikariConfig
      20: invokestatic  #151                // Method com/zaxxer/hikari/util/PropertyElf.getPropertyNames:(Ljava/lang/Class;)Ljava/util/Set;
      23: invokespecial #152                // Method java/util/TreeSet."<init>":(Ljava/util/Collection;)V
      26: astore_1
      27: aload_1
      28: invokeinterface #153,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      33: astore_2
      34: aload_2
      35: invokeinterface #154,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      40: ifeq          319
      43: aload_2
      44: invokeinterface #155,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      49: checkcast     #156                // class java/lang/String
      52: astore_3
      53: aload_3
      54: aload_0
      55: invokestatic  #157                // Method com/zaxxer/hikari/util/PropertyElf.getProperty:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
      58: astore        4
      60: ldc           #158                // String dataSourceProperties
      62: aload_3
      63: invokevirtual #159                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      66: ifeq          92
      69: aload_0
      70: getfield      #4                  // Field dataSourceProperties:Ljava/util/Properties;
      73: invokestatic  #160                // Method com/zaxxer/hikari/util/PropertyElf.copyProperties:(Ljava/util/Properties;)Ljava/util/Properties;
      76: astore        5
      78: aload         5
      80: ldc           #161                // String password
      82: ldc           #162                // String <masked>
      84: invokevirtual #92                 // Method java/util/Properties.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
      87: pop
      88: aload         5
      90: astore        4
      92: ldc           #163                // String initializationFailTimeout
      94: aload_3
      95: invokevirtual #159                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      98: ifeq          119
     101: aload_0
     102: getfield      #16                 // Field initializationFailTimeout:J
     105: ldc2_w        #165                // long 9223372036854775807l
     108: lcmp
     109: ifne          119
     112: ldc           #167                // String infinite
     114: astore        4
     116: goto          260
     119: ldc           #168                // String transactionIsolation
     121: aload_3
     122: invokevirtual #159                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     125: ifeq          142
     128: aload_0
     129: getfield      #97                 // Field transactionIsolationName:Ljava/lang/String;
     132: ifnonnull     142
     135: ldc           #169                // String default
     137: astore        4
     139: goto          260
     142: aload_3
     143: ldc           #170                // String scheduledExecutorService|threadFactory
     145: invokevirtual #171                // Method java/lang/String.matches:(Ljava/lang/String;)Z
     148: ifeq          163
     151: aload         4
     153: ifnonnull     163
     156: ldc           #172                // String internal
     158: astore        4
     160: goto          260
     163: aload_3
     164: ldc           #173                // String jdbcUrl
     166: invokevirtual #112                // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     169: ifeq          197
     172: aload         4
     174: instanceof    #156                // class java/lang/String
     177: ifeq          197
     180: aload         4
     182: checkcast     #156                // class java/lang/String
     185: ldc           #174                // String ([?&;]password=)[^&#;]*(.*)
     187: ldc           #175                // String $1<masked>$2
     189: invokevirtual #176                // Method java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     192: astore        4
     194: goto          260
     197: aload_3
     198: ldc           #161                // String password
     200: invokevirtual #112                // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     203: ifeq          213
     206: ldc           #162                // String <masked>
     208: astore        4
     210: goto          260
     213: aload         4
     215: instanceof    #156                // class java/lang/String
     218: ifeq          251
     221: new           #64                 // class java/lang/StringBuilder
     224: dup
     225: invokespecial #65                 // Method java/lang/StringBuilder."<init>":()V
     228: ldc           #177                // String \"
     230: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     233: aload         4
     235: invokevirtual #178                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     238: ldc           #177                // String \"
     240: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     243: invokevirtual #69                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     246: astore        4
     248: goto          260
     251: aload         4
     253: ifnonnull     260
     256: ldc           #179                // String none
     258: astore        4
     260: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
     263: new           #64                 // class java/lang/StringBuilder
     266: dup
     267: invokespecial #65                 // Method java/lang/StringBuilder."<init>":()V
     270: new           #64                 // class java/lang/StringBuilder
     273: dup
     274: invokespecial #65                 // Method java/lang/StringBuilder."<init>":()V
     277: aload_3
     278: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     281: ldc           #180                // String ................................................
     283: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     286: invokevirtual #69                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     289: iconst_0
     290: bipush        32
     292: invokevirtual #181                // Method java/lang/String.substring:(II)Ljava/lang/String;
     295: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     298: aload         4
     300: invokevirtual #178                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     303: invokevirtual #69                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     306: invokeinterface #182,  2          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     311: goto          316
     314: astore        4
     316: goto          34
     319: return
    Exception table:
       from    to  target type
          53   311   314   Class java/lang/Exception

  private void loadProperties(java.lang.String);
    Code:
       0: new           #183                // class java/io/File
       3: dup
       4: aload_1
       5: invokespecial #184                // Method java/io/File."<init>":(Ljava/lang/String;)V
       8: astore_2
       9: aload_2
      10: invokevirtual #185                // Method java/io/File.isFile:()Z
      13: ifeq          27
      16: new           #186                // class java/io/FileInputStream
      19: dup
      20: aload_2
      21: invokespecial #187                // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
      24: goto          35
      27: aload_0
      28: invokevirtual #57                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      31: aload_1
      32: invokevirtual #188                // Method java/lang/Class.getResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;
      35: astore_3
      36: aconst_null
      37: astore        4
      39: aload_3
      40: ifnull        67
      43: new           #2                  // class java/util/Properties
      46: dup
      47: invokespecial #3                  // Method java/util/Properties."<init>":()V
      50: astore        5
      52: aload         5
      54: aload_3
      55: invokevirtual #189                // Method java/util/Properties.load:(Ljava/io/InputStream;)V
      58: aload_0
      59: aload         5
      61: invokestatic  #22                 // Method com/zaxxer/hikari/util/PropertyElf.setTargetFromProperties:(Ljava/lang/Object;Ljava/util/Properties;)V
      64: goto          94
      67: new           #29                 // class java/lang/IllegalArgumentException
      70: dup
      71: new           #64                 // class java/lang/StringBuilder
      74: dup
      75: invokespecial #65                 // Method java/lang/StringBuilder."<init>":()V
      78: ldc           #190                // String Cannot find property file:
      80: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: aload_1
      84: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: invokevirtual #69                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      90: invokespecial #31                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      93: athrow
      94: aload_3
      95: ifnull        175
      98: aload         4
     100: ifnull        122
     103: aload_3
     104: invokevirtual #191                // Method java/io/InputStream.close:()V
     107: goto          175
     110: astore        5
     112: aload         4
     114: aload         5
     116: invokevirtual #193                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     119: goto          175
     122: aload_3
     123: invokevirtual #191                // Method java/io/InputStream.close:()V
     126: goto          175
     129: astore        5
     131: aload         5
     133: astore        4
     135: aload         5
     137: athrow
     138: astore        6
     140: aload_3
     141: ifnull        172
     144: aload         4
     146: ifnull        168
     149: aload_3
     150: invokevirtual #191                // Method java/io/InputStream.close:()V
     153: goto          172
     156: astore        7
     158: aload         4
     160: aload         7
     162: invokevirtual #193                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     165: goto          172
     168: aload_3
     169: invokevirtual #191                // Method java/io/InputStream.close:()V
     172: aload         6
     174: athrow
     175: goto          190
     178: astore_3
     179: new           #63                 // class java/lang/RuntimeException
     182: dup
     183: ldc           #195                // String Failed to read property file
     185: aload_3
     186: invokespecial #74                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     189: athrow
     190: return
    Exception table:
       from    to  target type
         103   107   110   Class java/lang/Throwable
          39    94   129   Class java/lang/Throwable
          39    94   138   any
         149   153   156   Class java/lang/Throwable
         129   140   138   any
           9   175   178   Class java/io/IOException

  private java.lang.String generatePoolName();
    Code:
       0: ldc           #196                // String HikariPool-
       2: astore_1
       3: invokestatic  #197                // Method java/lang/System.getProperties:()Ljava/util/Properties;
       6: dup
       7: astore_2
       8: monitorenter
       9: ldc           #198                // String com.zaxxer.hikari.pool_number
      11: iconst_0
      12: invokestatic  #199                // Method java/lang/Integer.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;
      15: invokevirtual #200                // Method java/lang/Integer.intValue:()I
      18: iconst_1
      19: iadd
      20: invokestatic  #201                // Method java/lang/String.valueOf:(I)Ljava/lang/String;
      23: astore_3
      24: ldc           #198                // String com.zaxxer.hikari.pool_number
      26: aload_3
      27: invokestatic  #202                // Method java/lang/System.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      30: pop
      31: new           #64                 // class java/lang/StringBuilder
      34: dup
      35: invokespecial #65                 // Method java/lang/StringBuilder."<init>":()V
      38: ldc           #196                // String HikariPool-
      40: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: aload_3
      44: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: invokevirtual #69                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: aload_2
      51: monitorexit
      52: areturn
      53: astore        4
      55: aload_2
      56: monitorexit
      57: aload         4
      59: athrow
      60: astore_2
      61: invokestatic  #204                // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
      64: astore_3
      65: new           #64                 // class java/lang/StringBuilder
      68: dup
      69: ldc           #196                // String HikariPool-
      71: invokespecial #205                // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      74: astore        4
      76: iconst_0
      77: istore        5
      79: iload         5
      81: iconst_4
      82: if_icmpge     107
      85: aload         4
      87: getstatic     #206                // Field ID_CHARACTERS:[C
      90: aload_3
      91: bipush        62
      93: invokevirtual #207                // Method java/util/concurrent/ThreadLocalRandom.nextInt:(I)I
      96: caload
      97: invokevirtual #208                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     100: pop
     101: iinc          5, 1
     104: goto          79
     107: getstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
     110: ldc           #209                // String assigned random pool name \'{}\' (security manager prevented access to system properties)
     112: aload         4
     114: invokeinterface #210,  3          // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
     119: aload         4
     121: invokevirtual #69                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     124: areturn
    Exception table:
       from    to  target type
           9    52    53   any
          53    57    53   any
           3    52    60   Class java/security/AccessControlException
          53    60    60   Class java/security/AccessControlException

  private java.lang.Object getObjectOrPerformJndiLookup(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #156                // class java/lang/String
       4: ifeq          34
       7: new           #211                // class javax/naming/InitialContext
      10: dup
      11: invokespecial #212                // Method javax/naming/InitialContext."<init>":()V
      14: astore_2
      15: aload_2
      16: aload_1
      17: checkcast     #156                // class java/lang/String
      20: invokevirtual #213                // Method javax/naming/InitialContext.lookup:(Ljava/lang/String;)Ljava/lang/Object;
      23: areturn
      24: astore_2
      25: new           #29                 // class java/lang/IllegalArgumentException
      28: dup
      29: aload_2
      30: invokespecial #215                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/Throwable;)V
      33: athrow
      34: aload_1
      35: areturn
    Exception table:
       from    to  target type
           7    23    24   Class javax/naming/NamingException

  static {};
    Code:
       0: ldc           #101                // class com/zaxxer/hikari/HikariConfig
       2: invokestatic  #216                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #51                 // Field LOGGER:Lorg/slf4j/Logger;
       8: ldc           #217                // String 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
      10: invokevirtual #218                // Method java/lang/String.toCharArray:()[C
      13: putstatic     #206                // Field ID_CHARACTERS:[C
      16: getstatic     #129                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      19: ldc2_w        #130                // long 30l
      22: invokevirtual #132                // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      25: putstatic     #10                 // Field CONNECTION_TIMEOUT:J
      28: getstatic     #129                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      31: ldc2_w        #219                // long 5l
      34: invokevirtual #132                // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      37: putstatic     #12                 // Field VALIDATION_TIMEOUT:J
      40: getstatic     #221                // Field java/util/concurrent/TimeUnit.MINUTES:Ljava/util/concurrent/TimeUnit;
      43: ldc2_w        #137                // long 10l
      46: invokevirtual #132                // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      49: putstatic     #14                 // Field IDLE_TIMEOUT:J
      52: getstatic     #221                // Field java/util/concurrent/TimeUnit.MINUTES:Ljava/util/concurrent/TimeUnit;
      55: ldc2_w        #130                // long 30l
      58: invokevirtual #132                // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      61: putstatic     #8                  // Field MAX_LIFETIME:J
      64: iconst_0
      65: putstatic     #127                // Field unitTest:Z
      68: return
}
