Compiled from "AbstractNestablePropertyAccessor.java"
public abstract class org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler {
  private final java.lang.Class<?> propertyType;

  private final boolean readable;

  private final boolean writable;

  public org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler(java.lang.Class<?>, boolean, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field propertyType:Ljava/lang/Class;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field readable:Z
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field writable:Z
      19: return

  public java.lang.Class<?> getPropertyType();
    Code:
       0: aload_0
       1: getfield      #2                  // Field propertyType:Ljava/lang/Class;
       4: areturn

  public boolean isReadable();
    Code:
       0: aload_0
       1: getfield      #3                  // Field readable:Z
       4: ireturn

  public boolean isWritable();
    Code:
       0: aload_0
       1: getfield      #4                  // Field writable:Z
       4: ireturn

  public abstract org.springframework.core.convert.TypeDescriptor toTypeDescriptor();

  public abstract org.springframework.core.ResolvableType getResolvableType();

  public java.lang.Class<?> getMapKeyType(int);
    Code:
       0: aload_0
       1: invokevirtual #5                  // Method getResolvableType:()Lorg/springframework/core/ResolvableType;
       4: iload_1
       5: invokevirtual #6                  // Method org/springframework/core/ResolvableType.getNested:(I)Lorg/springframework/core/ResolvableType;
       8: invokevirtual #7                  // Method org/springframework/core/ResolvableType.asMap:()Lorg/springframework/core/ResolvableType;
      11: iconst_1
      12: newarray       int
      14: dup
      15: iconst_0
      16: iconst_0
      17: iastore
      18: invokevirtual #8                  // Method org/springframework/core/ResolvableType.resolveGeneric:([I)Ljava/lang/Class;
      21: areturn

  public java.lang.Class<?> getMapValueType(int);
    Code:
       0: aload_0
       1: invokevirtual #5                  // Method getResolvableType:()Lorg/springframework/core/ResolvableType;
       4: iload_1
       5: invokevirtual #6                  // Method org/springframework/core/ResolvableType.getNested:(I)Lorg/springframework/core/ResolvableType;
       8: invokevirtual #7                  // Method org/springframework/core/ResolvableType.asMap:()Lorg/springframework/core/ResolvableType;
      11: iconst_1
      12: newarray       int
      14: dup
      15: iconst_0
      16: iconst_1
      17: iastore
      18: invokevirtual #8                  // Method org/springframework/core/ResolvableType.resolveGeneric:([I)Ljava/lang/Class;
      21: areturn

  public java.lang.Class<?> getCollectionType(int);
    Code:
       0: aload_0
       1: invokevirtual #5                  // Method getResolvableType:()Lorg/springframework/core/ResolvableType;
       4: iload_1
       5: invokevirtual #6                  // Method org/springframework/core/ResolvableType.getNested:(I)Lorg/springframework/core/ResolvableType;
       8: invokevirtual #9                  // Method org/springframework/core/ResolvableType.asCollection:()Lorg/springframework/core/ResolvableType;
      11: iconst_0
      12: newarray       int
      14: invokevirtual #8                  // Method org/springframework/core/ResolvableType.resolveGeneric:([I)Ljava/lang/Class;
      17: areturn

  public abstract org.springframework.core.convert.TypeDescriptor nested(int);

  public abstract java.lang.Object getValue() throws java.lang.Exception;

  public abstract void setValue(java.lang.Object) throws java.lang.Exception;
}
