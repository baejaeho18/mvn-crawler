Compiled from "Property.java"
public class org.hibernate.mapping.Property implements java.io.Serializable,org.hibernate.mapping.MetaAttributable {
  private java.lang.String name;

  private org.hibernate.mapping.Value value;

  private java.lang.String cascade;

  private boolean updateable;

  private boolean insertable;

  private boolean selectable;

  private boolean optimisticLocked;

  private org.hibernate.tuple.ValueGeneration valueGenerationStrategy;

  private java.lang.String propertyAccessorName;

  private boolean lazy;

  private java.lang.String lazyGroup;

  private boolean optional;

  private java.util.Map metaAttributes;

  private org.hibernate.mapping.PersistentClass persistentClass;

  private boolean naturalIdentifier;

  private boolean lob;

  public org.hibernate.mapping.Property();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field updateable:Z
       9: aload_0
      10: iconst_1
      11: putfield      #3                  // Field insertable:Z
      14: aload_0
      15: iconst_1
      16: putfield      #4                  // Field selectable:Z
      19: aload_0
      20: iconst_1
      21: putfield      #5                  // Field optimisticLocked:Z
      24: return

  public boolean isBackRef();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSynthetic();
    Code:
       0: iconst_0
       1: ireturn

  public org.hibernate.type.Type getType() throws org.hibernate.MappingException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field value:Lorg/hibernate/mapping/Value;
       4: invokeinterface #7,  1            // InterfaceMethod org/hibernate/mapping/Value.getType:()Lorg/hibernate/type/Type;
       9: areturn

  public int getColumnSpan();
    Code:
       0: aload_0
       1: getfield      #6                  // Field value:Lorg/hibernate/mapping/Value;
       4: invokeinterface #8,  1            // InterfaceMethod org/hibernate/mapping/Value.getColumnSpan:()I
       9: ireturn

  public java.util.Iterator getColumnIterator();
    Code:
       0: aload_0
       1: getfield      #6                  // Field value:Lorg/hibernate/mapping/Value;
       4: invokeinterface #9,  1            // InterfaceMethod org/hibernate/mapping/Value.getColumnIterator:()Ljava/util/Iterator;
       9: areturn

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #10                 // Field name:Ljava/lang/String;
       4: areturn

  public boolean isComposite();
    Code:
       0: aload_0
       1: getfield      #6                  // Field value:Lorg/hibernate/mapping/Value;
       4: instanceof    #11                 // class org/hibernate/mapping/Component
       7: ireturn

  public org.hibernate.mapping.Value getValue();
    Code:
       0: aload_0
       1: getfield      #6                  // Field value:Lorg/hibernate/mapping/Value;
       4: areturn

  public boolean isPrimitive(java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #12                 // Method getGetter:(Ljava/lang/Class;)Lorg/hibernate/property/access/spi/Getter;
       5: invokeinterface #13,  1           // InterfaceMethod org/hibernate/property/access/spi/Getter.getReturnType:()Ljava/lang/Class;
      10: invokevirtual #14                 // Method java/lang/Class.isPrimitive:()Z
      13: ireturn

  public org.hibernate.engine.spi.CascadeStyle getCascadeStyle() throws org.hibernate.MappingException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field value:Lorg/hibernate/mapping/Value;
       4: invokeinterface #7,  1            // InterfaceMethod org/hibernate/mapping/Value.getType:()Lorg/hibernate/type/Type;
       9: astore_1
      10: aload_1
      11: invokeinterface #15,  1           // InterfaceMethod org/hibernate/type/Type.isComponentType:()Z
      16: ifeq          31
      19: aload_1
      20: checkcast     #16                 // class org/hibernate/type/CompositeType
      23: aload_0
      24: getfield      #17                 // Field cascade:Ljava/lang/String;
      27: invokestatic  #18                 // Method getCompositeCascadeStyle:(Lorg/hibernate/type/CompositeType;Ljava/lang/String;)Lorg/hibernate/engine/spi/CascadeStyle;
      30: areturn
      31: aload_1
      32: invokeinterface #19,  1           // InterfaceMethod org/hibernate/type/Type.isCollectionType:()Z
      37: ifeq          63
      40: aload_0
      41: getfield      #6                  // Field value:Lorg/hibernate/mapping/Value;
      44: checkcast     #20                 // class org/hibernate/mapping/Collection
      47: invokevirtual #21                 // Method org/hibernate/mapping/Collection.getElement:()Lorg/hibernate/mapping/Value;
      50: invokeinterface #7,  1            // InterfaceMethod org/hibernate/mapping/Value.getType:()Lorg/hibernate/type/Type;
      55: aload_0
      56: getfield      #17                 // Field cascade:Ljava/lang/String;
      59: invokestatic  #22                 // Method getCollectionCascadeStyle:(Lorg/hibernate/type/Type;Ljava/lang/String;)Lorg/hibernate/engine/spi/CascadeStyle;
      62: areturn
      63: aload_0
      64: getfield      #17                 // Field cascade:Ljava/lang/String;
      67: invokestatic  #23                 // Method getCascadeStyle:(Ljava/lang/String;)Lorg/hibernate/engine/spi/CascadeStyle;
      70: areturn

  private static org.hibernate.engine.spi.CascadeStyle getCompositeCascadeStyle(org.hibernate.type.CompositeType, java.lang.String);
    Code:
       0: aload_0
       1: invokeinterface #24,  1           // InterfaceMethod org/hibernate/type/CompositeType.isAnyType:()Z
       6: ifeq          14
       9: aload_1
      10: invokestatic  #23                 // Method getCascadeStyle:(Ljava/lang/String;)Lorg/hibernate/engine/spi/CascadeStyle;
      13: areturn
      14: aload_0
      15: invokeinterface #25,  1           // InterfaceMethod org/hibernate/type/CompositeType.getSubtypes:()[Lorg/hibernate/type/Type;
      20: arraylength
      21: istore_2
      22: iconst_0
      23: istore_3
      24: iload_3
      25: iload_2
      26: if_icmpge     52
      29: aload_0
      30: iload_3
      31: invokeinterface #26,  2           // InterfaceMethod org/hibernate/type/CompositeType.getCascadeStyle:(I)Lorg/hibernate/engine/spi/CascadeStyle;
      36: getstatic     #27                 // Field org/hibernate/engine/spi/CascadeStyles.NONE:Lorg/hibernate/engine/spi/CascadeStyle;
      39: if_acmpeq     46
      42: getstatic     #28                 // Field org/hibernate/engine/spi/CascadeStyles.ALL:Lorg/hibernate/engine/spi/CascadeStyle;
      45: areturn
      46: iinc          3, 1
      49: goto          24
      52: aload_1
      53: invokestatic  #23                 // Method getCascadeStyle:(Ljava/lang/String;)Lorg/hibernate/engine/spi/CascadeStyle;
      56: areturn

  private static org.hibernate.engine.spi.CascadeStyle getCollectionCascadeStyle(org.hibernate.type.Type, java.lang.String);
    Code:
       0: aload_0
       1: invokeinterface #15,  1           // InterfaceMethod org/hibernate/type/Type.isComponentType:()Z
       6: ifeq          18
       9: aload_0
      10: checkcast     #16                 // class org/hibernate/type/CompositeType
      13: aload_1
      14: invokestatic  #18                 // Method getCompositeCascadeStyle:(Lorg/hibernate/type/CompositeType;Ljava/lang/String;)Lorg/hibernate/engine/spi/CascadeStyle;
      17: areturn
      18: aload_1
      19: invokestatic  #23                 // Method getCascadeStyle:(Ljava/lang/String;)Lorg/hibernate/engine/spi/CascadeStyle;
      22: areturn

  private static org.hibernate.engine.spi.CascadeStyle getCascadeStyle(java.lang.String);
    Code:
       0: aload_0
       1: ifnull        13
       4: aload_0
       5: ldc           #29                 // String none
       7: invokevirtual #30                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      10: ifeq          17
      13: getstatic     #27                 // Field org/hibernate/engine/spi/CascadeStyles.NONE:Lorg/hibernate/engine/spi/CascadeStyle;
      16: areturn
      17: new           #31                 // class java/util/StringTokenizer
      20: dup
      21: aload_0
      22: ldc           #32                 // String ,
      24: invokespecial #33                 // Method java/util/StringTokenizer."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      27: astore_1
      28: aload_1
      29: invokevirtual #34                 // Method java/util/StringTokenizer.countTokens:()I
      32: anewarray     #35                 // class org/hibernate/engine/spi/CascadeStyle
      35: astore_2
      36: iconst_0
      37: istore_3
      38: aload_1
      39: invokevirtual #36                 // Method java/util/StringTokenizer.hasMoreTokens:()Z
      42: ifeq          61
      45: aload_2
      46: iload_3
      47: iinc          3, 1
      50: aload_1
      51: invokevirtual #37                 // Method java/util/StringTokenizer.nextToken:()Ljava/lang/String;
      54: invokestatic  #38                 // Method org/hibernate/engine/spi/CascadeStyles.getCascadeStyle:(Ljava/lang/String;)Lorg/hibernate/engine/spi/CascadeStyle;
      57: aastore
      58: goto          38
      61: new           #39                 // class org/hibernate/engine/spi/CascadeStyles$MultipleCascadeStyle
      64: dup
      65: aload_2
      66: invokespecial #40                 // Method org/hibernate/engine/spi/CascadeStyles$MultipleCascadeStyle."<init>":([Lorg/hibernate/engine/spi/CascadeStyle;)V
      69: areturn

  public java.lang.String getCascade();
    Code:
       0: aload_0
       1: getfield      #17                 // Field cascade:Ljava/lang/String;
       4: areturn

  public void setCascade(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field cascade:Ljava/lang/String;
       5: return

  public void setName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: ifnonnull     9
       5: aconst_null
       6: goto          13
       9: aload_1
      10: invokevirtual #41                 // Method java/lang/String.intern:()Ljava/lang/String;
      13: putfield      #10                 // Field name:Ljava/lang/String;
      16: return

  public void setValue(org.hibernate.mapping.Value);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field value:Lorg/hibernate/mapping/Value;
       5: return

  public boolean isUpdateable();
    Code:
       0: aload_0
       1: getfield      #2                  // Field updateable:Z
       4: ifeq          26
       7: aload_0
       8: getfield      #6                  // Field value:Lorg/hibernate/mapping/Value;
      11: invokeinterface #42,  1           // InterfaceMethod org/hibernate/mapping/Value.getColumnUpdateability:()[Z
      16: invokestatic  #43                 // Method org/hibernate/internal/util/collections/ArrayHelper.isAllFalse:([Z)Z
      19: ifne          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  public boolean isInsertable();
    Code:
       0: aload_0
       1: getfield      #6                  // Field value:Lorg/hibernate/mapping/Value;
       4: invokeinterface #44,  1           // InterfaceMethod org/hibernate/mapping/Value.getColumnInsertability:()[Z
       9: astore_1
      10: aload_0
      11: getfield      #3                  // Field insertable:Z
      14: ifeq          33
      17: aload_1
      18: arraylength
      19: ifeq          29
      22: aload_1
      23: invokestatic  #43                 // Method org/hibernate/internal/util/collections/ArrayHelper.isAllFalse:([Z)Z
      26: ifne          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn

  public org.hibernate.tuple.ValueGeneration getValueGenerationStrategy();
    Code:
       0: aload_0
       1: getfield      #45                 // Field valueGenerationStrategy:Lorg/hibernate/tuple/ValueGeneration;
       4: areturn

  public void setValueGenerationStrategy(org.hibernate.tuple.ValueGeneration);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #45                 // Field valueGenerationStrategy:Lorg/hibernate/tuple/ValueGeneration;
       5: return

  public void setUpdateable(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field updateable:Z
       5: return

  public void setInsertable(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field insertable:Z
       5: return

  public java.lang.String getPropertyAccessorName();
    Code:
       0: aload_0
       1: getfield      #46                 // Field propertyAccessorName:Ljava/lang/String;
       4: areturn

  public void setPropertyAccessorName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #46                 // Field propertyAccessorName:Ljava/lang/String;
       5: return

  boolean isNullable();
    Code:
       0: aload_0
       1: getfield      #6                  // Field value:Lorg/hibernate/mapping/Value;
       4: ifnull        19
       7: aload_0
       8: getfield      #6                  // Field value:Lorg/hibernate/mapping/Value;
      11: invokeinterface #47,  1           // InterfaceMethod org/hibernate/mapping/Value.isNullable:()Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public boolean isBasicPropertyAccessor();
    Code:
       0: aload_0
       1: getfield      #46                 // Field propertyAccessorName:Ljava/lang/String;
       4: ifnull        19
       7: ldc           #48                 // String property
       9: aload_0
      10: getfield      #46                 // Field propertyAccessorName:Ljava/lang/String;
      13: invokevirtual #30                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public java.util.Map getMetaAttributes();
    Code:
       0: aload_0
       1: getfield      #49                 // Field metaAttributes:Ljava/util/Map;
       4: areturn

  public org.hibernate.mapping.MetaAttribute getMetaAttribute(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #49                 // Field metaAttributes:Ljava/util/Map;
       4: ifnonnull     11
       7: aconst_null
       8: goto          24
      11: aload_0
      12: getfield      #49                 // Field metaAttributes:Ljava/util/Map;
      15: aload_1
      16: invokeinterface #50,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      21: checkcast     #51                 // class org/hibernate/mapping/MetaAttribute
      24: areturn

  public void setMetaAttributes(java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #49                 // Field metaAttributes:Ljava/util/Map;
       5: return

  public boolean isValid(org.hibernate.engine.spi.Mapping) throws org.hibernate.MappingException;
    Code:
       0: aload_0
       1: invokevirtual #52                 // Method getValue:()Lorg/hibernate/mapping/Value;
       4: aload_1
       5: invokeinterface #53,  2           // InterfaceMethod org/hibernate/mapping/Value.isValid:(Lorg/hibernate/engine/spi/Mapping;)Z
      10: ireturn

  public java.lang.String toString();
    Code:
       0: new           #54                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #55                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #56                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: invokevirtual #57                 // Method java/lang/Class.getName:()Ljava/lang/String;
      14: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: bipush        40
      19: invokevirtual #59                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      22: aload_0
      23: getfield      #10                 // Field name:Ljava/lang/String;
      26: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: bipush        41
      31: invokevirtual #59                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      34: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: areturn

  public void setLazy(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #61                 // Field lazy:Z
       5: return

  public boolean isLazy();
    Code:
       0: aload_0
       1: getfield      #6                  // Field value:Lorg/hibernate/mapping/Value;
       4: instanceof    #62                 // class org/hibernate/mapping/ToOne
       7: ifeq          12
      10: iconst_0
      11: ireturn
      12: aload_0
      13: getfield      #61                 // Field lazy:Z
      16: ireturn

  public java.lang.String getLazyGroup();
    Code:
       0: aload_0
       1: getfield      #63                 // Field lazyGroup:Ljava/lang/String;
       4: areturn

  public void setLazyGroup(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #63                 // Field lazyGroup:Ljava/lang/String;
       5: return

  public boolean isOptimisticLocked();
    Code:
       0: aload_0
       1: getfield      #5                  // Field optimisticLocked:Z
       4: ireturn

  public void setOptimisticLocked(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field optimisticLocked:Z
       5: return

  public boolean isOptional();
    Code:
       0: aload_0
       1: getfield      #64                 // Field optional:Z
       4: ifne          14
       7: aload_0
       8: invokevirtual #65                 // Method isNullable:()Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public void setOptional(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #64                 // Field optional:Z
       5: return

  public org.hibernate.mapping.PersistentClass getPersistentClass();
    Code:
       0: aload_0
       1: getfield      #66                 // Field persistentClass:Lorg/hibernate/mapping/PersistentClass;
       4: areturn

  public void setPersistentClass(org.hibernate.mapping.PersistentClass);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #66                 // Field persistentClass:Lorg/hibernate/mapping/PersistentClass;
       5: return

  public boolean isSelectable();
    Code:
       0: aload_0
       1: getfield      #4                  // Field selectable:Z
       4: ireturn

  public void setSelectable(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field selectable:Z
       5: return

  public java.lang.String getAccessorPropertyName(org.hibernate.EntityMode);
    Code:
       0: aload_0
       1: invokevirtual #67                 // Method getName:()Ljava/lang/String;
       4: areturn

  public org.hibernate.property.access.spi.Getter getGetter(java.lang.Class) throws org.hibernate.PropertyNotFoundException, org.hibernate.MappingException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #68                 // Method getPropertyAccessStrategy:(Ljava/lang/Class;)Lorg/hibernate/property/access/spi/PropertyAccessStrategy;
       5: aload_1
       6: aload_0
       7: getfield      #10                 // Field name:Ljava/lang/String;
      10: invokeinterface #69,  3           // InterfaceMethod org/hibernate/property/access/spi/PropertyAccessStrategy.buildPropertyAccess:(Ljava/lang/Class;Ljava/lang/String;)Lorg/hibernate/property/access/spi/PropertyAccess;
      15: invokeinterface #70,  1           // InterfaceMethod org/hibernate/property/access/spi/PropertyAccess.getGetter:()Lorg/hibernate/property/access/spi/Getter;
      20: areturn

  public org.hibernate.property.access.spi.Setter getSetter(java.lang.Class) throws org.hibernate.PropertyNotFoundException, org.hibernate.MappingException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #68                 // Method getPropertyAccessStrategy:(Ljava/lang/Class;)Lorg/hibernate/property/access/spi/PropertyAccessStrategy;
       5: aload_1
       6: aload_0
       7: getfield      #10                 // Field name:Ljava/lang/String;
      10: invokeinterface #69,  3           // InterfaceMethod org/hibernate/property/access/spi/PropertyAccessStrategy.buildPropertyAccess:(Ljava/lang/Class;Ljava/lang/String;)Lorg/hibernate/property/access/spi/PropertyAccess;
      15: invokeinterface #71,  1           // InterfaceMethod org/hibernate/property/access/spi/PropertyAccess.getSetter:()Lorg/hibernate/property/access/spi/Setter;
      20: areturn

  public org.hibernate.property.access.spi.PropertyAccessStrategy getPropertyAccessStrategy(java.lang.Class) throws org.hibernate.MappingException;
    Code:
       0: aload_0
       1: invokevirtual #72                 // Method getPropertyAccessorName:()Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: ifnonnull     31
       9: aload_1
      10: ifnull        22
      13: ldc           #73                 // class java/util/Map
      15: aload_1
      16: invokevirtual #74                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      19: ifeq          28
      22: ldc           #75                 // String map
      24: astore_2
      25: goto          31
      28: ldc           #48                 // String property
      30: astore_2
      31: aload_1
      32: ifnull        44
      35: ldc           #73                 // class java/util/Map
      37: aload_1
      38: invokevirtual #74                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      41: ifeq          50
      44: getstatic     #76                 // Field org/hibernate/EntityMode.MAP:Lorg/hibernate/EntityMode;
      47: goto          53
      50: getstatic     #77                 // Field org/hibernate/EntityMode.POJO:Lorg/hibernate/EntityMode;
      53: astore_3
      54: aload_0
      55: invokevirtual #78                 // Method resolveServiceRegistry:()Lorg/hibernate/service/ServiceRegistry;
      58: ldc           #79                 // class org/hibernate/property/access/spi/PropertyAccessStrategyResolver
      60: invokeinterface #80,  2           // InterfaceMethod org/hibernate/service/ServiceRegistry.getService:(Ljava/lang/Class;)Lorg/hibernate/service/Service;
      65: checkcast     #79                 // class org/hibernate/property/access/spi/PropertyAccessStrategyResolver
      68: aload_1
      69: aload_2
      70: aload_3
      71: invokeinterface #81,  4           // InterfaceMethod org/hibernate/property/access/spi/PropertyAccessStrategyResolver.resolvePropertyAccessStrategy:(Ljava/lang/Class;Ljava/lang/String;Lorg/hibernate/EntityMode;)Lorg/hibernate/property/access/spi/PropertyAccessStrategy;
      76: areturn

  protected org.hibernate.service.ServiceRegistry resolveServiceRegistry();
    Code:
       0: aload_0
       1: invokevirtual #82                 // Method getPersistentClass:()Lorg/hibernate/mapping/PersistentClass;
       4: ifnull        15
       7: aload_0
       8: invokevirtual #82                 // Method getPersistentClass:()Lorg/hibernate/mapping/PersistentClass;
      11: invokevirtual #83                 // Method org/hibernate/mapping/PersistentClass.getServiceRegistry:()Lorg/hibernate/service/ServiceRegistry;
      14: areturn
      15: aload_0
      16: invokevirtual #52                 // Method getValue:()Lorg/hibernate/mapping/Value;
      19: ifnull        32
      22: aload_0
      23: invokevirtual #52                 // Method getValue:()Lorg/hibernate/mapping/Value;
      26: invokeinterface #84,  1           // InterfaceMethod org/hibernate/mapping/Value.getServiceRegistry:()Lorg/hibernate/service/ServiceRegistry;
      31: areturn
      32: new           #85                 // class org/hibernate/HibernateException
      35: dup
      36: ldc           #86                 // String Could not resolve ServiceRegistry
      38: invokespecial #87                 // Method org/hibernate/HibernateException."<init>":(Ljava/lang/String;)V
      41: athrow

  public boolean isNaturalIdentifier();
    Code:
       0: aload_0
       1: getfield      #88                 // Field naturalIdentifier:Z
       4: ireturn

  public void setNaturalIdentifier(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #88                 // Field naturalIdentifier:Z
       5: return

  public boolean isLob();
    Code:
       0: aload_0
       1: getfield      #89                 // Field lob:Z
       4: ireturn

  public void setLob(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #89                 // Field lob:Z
       5: return
}
