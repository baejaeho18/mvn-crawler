Compiled from "TypeResolver.java"
public class org.hibernate.type.TypeResolver implements java.io.Serializable {
  private final org.hibernate.type.TypeFactory typeFactory;

  private final org.hibernate.type.spi.TypeConfiguration typeConfiguration;

  public org.hibernate.type.TypeResolver(org.hibernate.type.spi.TypeConfiguration, org.hibernate.type.TypeFactory);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field typeConfiguration:Lorg/hibernate/type/spi/TypeConfiguration;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field typeFactory:Lorg/hibernate/type/TypeFactory;
      14: return

  public void registerTypeOverride(org.hibernate.type.BasicType);
    Code:
       0: aload_0
       1: getfield      #2                  // Field typeConfiguration:Lorg/hibernate/type/spi/TypeConfiguration;
       4: invokevirtual #4                  // Method org/hibernate/type/spi/TypeConfiguration.getBasicTypeRegistry:()Lorg/hibernate/type/BasicTypeRegistry;
       7: aload_1
       8: invokevirtual #5                  // Method org/hibernate/type/BasicTypeRegistry.register:(Lorg/hibernate/type/BasicType;)V
      11: return

  public void registerTypeOverride(org.hibernate.usertype.UserType, java.lang.String[]);
    Code:
       0: aload_0
       1: getfield      #2                  // Field typeConfiguration:Lorg/hibernate/type/spi/TypeConfiguration;
       4: invokevirtual #4                  // Method org/hibernate/type/spi/TypeConfiguration.getBasicTypeRegistry:()Lorg/hibernate/type/BasicTypeRegistry;
       7: aload_1
       8: aload_2
       9: invokevirtual #6                  // Method org/hibernate/type/BasicTypeRegistry.register:(Lorg/hibernate/usertype/UserType;[Ljava/lang/String;)V
      12: return

  public void registerTypeOverride(org.hibernate.usertype.CompositeUserType, java.lang.String[]);
    Code:
       0: aload_0
       1: getfield      #2                  // Field typeConfiguration:Lorg/hibernate/type/spi/TypeConfiguration;
       4: invokevirtual #4                  // Method org/hibernate/type/spi/TypeConfiguration.getBasicTypeRegistry:()Lorg/hibernate/type/BasicTypeRegistry;
       7: aload_1
       8: aload_2
       9: invokevirtual #7                  // Method org/hibernate/type/BasicTypeRegistry.register:(Lorg/hibernate/usertype/CompositeUserType;[Ljava/lang/String;)V
      12: return

  public org.hibernate.type.TypeFactory getTypeFactory();
    Code:
       0: aload_0
       1: getfield      #3                  // Field typeFactory:Lorg/hibernate/type/TypeFactory;
       4: areturn

  public org.hibernate.type.BasicType basic(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field typeConfiguration:Lorg/hibernate/type/spi/TypeConfiguration;
       4: invokevirtual #4                  // Method org/hibernate/type/spi/TypeConfiguration.getBasicTypeRegistry:()Lorg/hibernate/type/BasicTypeRegistry;
       7: aload_1
       8: invokevirtual #8                  // Method org/hibernate/type/BasicTypeRegistry.getRegisteredType:(Ljava/lang/String;)Lorg/hibernate/type/BasicType;
      11: areturn

  public org.hibernate.type.Type heuristicType(java.lang.String) throws org.hibernate.MappingException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #9                  // Method heuristicType:(Ljava/lang/String;Ljava/util/Properties;)Lorg/hibernate/type/Type;
       6: areturn

  public org.hibernate.type.Type heuristicType(java.lang.String, java.util.Properties) throws org.hibernate.MappingException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method basic:(Ljava/lang/String;)Lorg/hibernate/type/BasicType;
       5: astore_3
       6: aload_3
       7: ifnull        12
      10: aload_3
      11: areturn
      12: aload_0
      13: getfield      #2                  // Field typeConfiguration:Lorg/hibernate/type/spi/TypeConfiguration;
      16: invokevirtual #11                 // Method org/hibernate/type/spi/TypeConfiguration.getServiceRegistry:()Lorg/hibernate/service/ServiceRegistry;
      19: ldc           #12                 // class org/hibernate/boot/registry/classloading/spi/ClassLoaderService
      21: invokeinterface #13,  2           // InterfaceMethod org/hibernate/service/ServiceRegistry.getService:(Ljava/lang/Class;)Lorg/hibernate/service/Service;
      26: checkcast     #12                 // class org/hibernate/boot/registry/classloading/spi/ClassLoaderService
      29: astore        4
      31: aload         4
      33: aload_1
      34: invokeinterface #14,  2           // InterfaceMethod org/hibernate/boot/registry/classloading/spi/ClassLoaderService.classForName:(Ljava/lang/String;)Ljava/lang/Class;
      39: astore        5
      41: aload         5
      43: ifnull        57
      46: aload_0
      47: getfield      #3                  // Field typeFactory:Lorg/hibernate/type/TypeFactory;
      50: aload         5
      52: aload_2
      53: invokevirtual #15                 // Method org/hibernate/type/TypeFactory.byClass:(Ljava/lang/Class;Ljava/util/Properties;)Lorg/hibernate/type/Type;
      56: areturn
      57: goto          62
      60: astore        4
      62: aconst_null
      63: areturn
    Exception table:
       from    to  target type
          12    56    60   Class org/hibernate/boot/registry/classloading/spi/ClassLoadingException
}
