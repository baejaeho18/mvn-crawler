Compiled from "AbstractCompositeReference.java"
public abstract class org.hibernate.loader.plan.build.internal.returns.AbstractCompositeReference extends org.hibernate.loader.plan.build.internal.returns.AbstractExpandingFetchSource {
  private final boolean allowCollectionFetches;

  protected org.hibernate.loader.plan.build.internal.returns.AbstractCompositeReference(org.hibernate.loader.plan.build.spi.ExpandingCompositeQuerySpace, boolean, org.hibernate.loader.PropertyPath);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: invokespecial #1                  // Method org/hibernate/loader/plan/build/internal/returns/AbstractExpandingFetchSource."<init>":(Lorg/hibernate/loader/plan/build/spi/ExpandingQuerySpace;Lorg/hibernate/loader/PropertyPath;)V
       6: aload_0
       7: iload_2
       8: putfield      #2                  // Field allowCollectionFetches:Z
      11: return

  public void validateFetchPlan(org.hibernate.engine.FetchStrategy, org.hibernate.persister.walking.spi.AttributeDefinition);
    Code:
       0: return

  protected org.hibernate.loader.plan.spi.CompositeAttributeFetch createCompositeAttributeFetch(org.hibernate.persister.walking.spi.AttributeDefinition, org.hibernate.loader.plan.build.spi.ExpandingCompositeQuerySpace);
    Code:
       0: new           #3                  // class org/hibernate/loader/plan/build/internal/returns/NestedCompositeAttributeFetchImpl
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_0
       8: getfield      #2                  // Field allowCollectionFetches:Z
      11: invokespecial #4                  // Method org/hibernate/loader/plan/build/internal/returns/NestedCompositeAttributeFetchImpl."<init>":(Lorg/hibernate/loader/plan/spi/FetchSource;Lorg/hibernate/persister/walking/spi/AttributeDefinition;Lorg/hibernate/loader/plan/build/spi/ExpandingCompositeQuerySpace;Z)V
      14: areturn

  public org.hibernate.loader.plan.spi.CollectionAttributeFetch buildCollectionAttributeFetch(org.hibernate.persister.walking.spi.AssociationAttributeDefinition, org.hibernate.engine.FetchStrategy);
    Code:
       0: aload_0
       1: getfield      #2                  // Field allowCollectionFetches:Z
       4: ifne          34
       7: new           #5                  // class org/hibernate/persister/walking/spi/WalkingException
      10: dup
      11: ldc           #6                  // String This composite path [%s] does not allow collection fetches (composite id or composite collection index/element
      13: iconst_1
      14: anewarray     #7                  // class java/lang/Object
      17: dup
      18: iconst_0
      19: aload_0
      20: invokevirtual #8                  // Method getPropertyPath:()Lorg/hibernate/loader/PropertyPath;
      23: invokevirtual #9                  // Method org/hibernate/loader/PropertyPath.getFullPath:()Ljava/lang/String;
      26: aastore
      27: invokestatic  #10                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      30: invokespecial #11                 // Method org/hibernate/persister/walking/spi/WalkingException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: aload_1
      36: aload_2
      37: invokespecial #12                 // Method org/hibernate/loader/plan/build/internal/returns/AbstractExpandingFetchSource.buildCollectionAttributeFetch:(Lorg/hibernate/persister/walking/spi/AssociationAttributeDefinition;Lorg/hibernate/engine/FetchStrategy;)Lorg/hibernate/loader/plan/spi/CollectionAttributeFetch;
      40: areturn
}
