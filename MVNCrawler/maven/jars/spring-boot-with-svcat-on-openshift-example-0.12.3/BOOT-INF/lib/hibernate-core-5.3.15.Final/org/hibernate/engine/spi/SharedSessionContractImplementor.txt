Compiled from "SharedSessionContractImplementor.java"
public interface org.hibernate.engine.spi.SharedSessionContractImplementor extends org.hibernate.SharedSessionContract,org.hibernate.resource.jdbc.spi.JdbcSessionOwner,org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder$Options,org.hibernate.engine.jdbc.LobCreationContext,org.hibernate.type.descriptor.WrapperOptions,org.hibernate.query.spi.QueryProducerImplementor {
  public abstract org.hibernate.engine.spi.SessionFactoryImplementor getFactory();

  public abstract org.hibernate.engine.spi.SessionEventListenerManager getEventListenerManager();

  public abstract org.hibernate.engine.spi.PersistenceContext getPersistenceContext();

  public abstract org.hibernate.engine.jdbc.spi.JdbcCoordinator getJdbcCoordinator();

  public abstract org.hibernate.engine.jdbc.spi.JdbcServices getJdbcServices();

  public abstract java.lang.String getTenantIdentifier();

  public abstract java.util.UUID getSessionIdentifier();

  public abstract boolean isClosed();

  public default boolean isOpenOrWaitingForAutoClose();
    Code:
       0: aload_0
       1: invokeinterface #1,  1            // InterfaceMethod isClosed:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public default void checkOpen();
    Code:
       0: aload_0
       1: iconst_1
       2: invokeinterface #2,  2            // InterfaceMethod checkOpen:(Z)V
       7: return

  public abstract void checkOpen(boolean);

  public abstract void markForRollbackOnly();

  public abstract long getTransactionStartTimestamp();

  public default long getTimestamp();
    Code:
       0: aload_0
       1: invokeinterface #3,  1            // InterfaceMethod getTransactionStartTimestamp:()J
       6: lreturn

  public abstract org.hibernate.cache.spi.CacheTransactionSynchronization getCacheTransactionSynchronization();

  public abstract boolean isTransactionInProgress();

  public default void checkTransactionNeededForUpdateOperation(java.lang.String);
    Code:
       0: aload_0
       1: invokeinterface #4,  1            // InterfaceMethod isTransactionInProgress:()Z
       6: ifne          18
       9: new           #5                  // class javax/persistence/TransactionRequiredException
      12: dup
      13: aload_1
      14: invokespecial #6                  // Method javax/persistence/TransactionRequiredException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: return

  public abstract org.hibernate.Transaction accessTransaction();

  public abstract org.hibernate.engine.spi.EntityKey generateEntityKey(java.io.Serializable, org.hibernate.persister.entity.EntityPersister);

  public abstract org.hibernate.Interceptor getInterceptor();

  public abstract void setAutoClear(boolean);

  public abstract void initializeCollection(org.hibernate.collection.spi.PersistentCollection, boolean) throws org.hibernate.HibernateException;

  public abstract java.lang.Object internalLoad(java.lang.String, java.io.Serializable, boolean, boolean) throws org.hibernate.HibernateException;

  public abstract java.lang.Object immediateLoad(java.lang.String, java.io.Serializable) throws org.hibernate.HibernateException;

  public abstract java.util.List list(java.lang.String, org.hibernate.engine.spi.QueryParameters) throws org.hibernate.HibernateException;

  public abstract java.util.Iterator iterate(java.lang.String, org.hibernate.engine.spi.QueryParameters) throws org.hibernate.HibernateException;

  public abstract org.hibernate.query.spi.ScrollableResultsImplementor scroll(java.lang.String, org.hibernate.engine.spi.QueryParameters) throws org.hibernate.HibernateException;

  public abstract org.hibernate.query.spi.ScrollableResultsImplementor scroll(org.hibernate.Criteria, org.hibernate.ScrollMode);

  public abstract java.util.List list(org.hibernate.Criteria);

  public abstract java.util.List listFilter(java.lang.Object, java.lang.String, org.hibernate.engine.spi.QueryParameters) throws org.hibernate.HibernateException;

  public abstract java.util.Iterator iterateFilter(java.lang.Object, java.lang.String, org.hibernate.engine.spi.QueryParameters) throws org.hibernate.HibernateException;

  public abstract org.hibernate.persister.entity.EntityPersister getEntityPersister(java.lang.String, java.lang.Object) throws org.hibernate.HibernateException;

  public abstract java.lang.Object getEntityUsingInterceptor(org.hibernate.engine.spi.EntityKey) throws org.hibernate.HibernateException;

  public abstract java.io.Serializable getContextEntityIdentifier(java.lang.Object);

  public abstract java.lang.String bestGuessEntityName(java.lang.Object);

  public abstract java.lang.String guessEntityName(java.lang.Object) throws org.hibernate.HibernateException;

  public abstract java.lang.Object instantiate(java.lang.String, java.io.Serializable) throws org.hibernate.HibernateException;

  public abstract java.util.List listCustomQuery(org.hibernate.loader.custom.CustomQuery, org.hibernate.engine.spi.QueryParameters) throws org.hibernate.HibernateException;

  public abstract org.hibernate.query.spi.ScrollableResultsImplementor scrollCustomQuery(org.hibernate.loader.custom.CustomQuery, org.hibernate.engine.spi.QueryParameters) throws org.hibernate.HibernateException;

  public abstract java.util.List list(org.hibernate.engine.query.spi.sql.NativeSQLQuerySpecification, org.hibernate.engine.spi.QueryParameters) throws org.hibernate.HibernateException;

  public abstract org.hibernate.query.spi.ScrollableResultsImplementor scroll(org.hibernate.engine.query.spi.sql.NativeSQLQuerySpecification, org.hibernate.engine.spi.QueryParameters);

  public abstract int getDontFlushFromFind();

  public abstract int executeUpdate(java.lang.String, org.hibernate.engine.spi.QueryParameters) throws org.hibernate.HibernateException;

  public abstract int executeNativeUpdate(org.hibernate.engine.query.spi.sql.NativeSQLQuerySpecification, org.hibernate.engine.spi.QueryParameters) throws org.hibernate.HibernateException;

  public abstract org.hibernate.CacheMode getCacheMode();

  public abstract void setCacheMode(org.hibernate.CacheMode);

  public abstract void setFlushMode(org.hibernate.FlushMode);

  public abstract javax.persistence.FlushModeType getFlushMode();

  public abstract void setHibernateFlushMode(org.hibernate.FlushMode);

  public abstract org.hibernate.FlushMode getHibernateFlushMode();

  public abstract java.sql.Connection connection();

  public abstract void flush();

  public abstract boolean isEventSource();

  public abstract void afterScrollOperation();

  public abstract boolean shouldAutoClose();

  public abstract boolean isAutoCloseSessionEnabled();

  public default boolean isQueryParametersValidationEnabled();
    Code:
       0: aload_0
       1: invokeinterface #7,  1            // InterfaceMethod getFactory:()Lorg/hibernate/engine/spi/SessionFactoryImplementor;
       6: invokeinterface #8,  1            // InterfaceMethod org/hibernate/engine/spi/SessionFactoryImplementor.getSessionFactoryOptions:()Lorg/hibernate/boot/spi/SessionFactoryOptions;
      11: invokeinterface #9,  1            // InterfaceMethod org/hibernate/boot/spi/SessionFactoryOptions.isQueryParametersValidationEnabled:()Z
      16: ireturn

  public abstract org.hibernate.engine.spi.LoadQueryInfluencers getLoadQueryInfluencers();

  public abstract org.hibernate.engine.spi.ExceptionConverter getExceptionConverter();

  public default java.lang.Integer getConfiguredJdbcBatchSize();
    Code:
       0: aload_0
       1: invokeinterface #10,  1           // InterfaceMethod getJdbcBatchSize:()Ljava/lang/Integer;
       6: astore_1
       7: aload_1
       8: ifnonnull     31
      11: ldc           #12                 // String hibernate.jdbc.batch_size
      13: aload_0
      14: invokeinterface #7,  1            // InterfaceMethod getFactory:()Lorg/hibernate/engine/spi/SessionFactoryImplementor;
      19: invokeinterface #13,  1           // InterfaceMethod org/hibernate/engine/spi/SessionFactoryImplementor.getProperties:()Ljava/util/Map;
      24: iconst_1
      25: invokestatic  #14                 // Method org/hibernate/internal/util/config/ConfigurationHelper.getInt:(Ljava/lang/String;Ljava/util/Map;I)I
      28: goto          35
      31: aload_1
      32: invokevirtual #15                 // Method java/lang/Integer.intValue:()I
      35: invokestatic  #16                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      38: areturn
}
