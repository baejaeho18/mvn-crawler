Compiled from "SecondLevelCacheLogger_$logger.java"
public class org.hibernate.cache.spi.SecondLevelCacheLogger_$logger extends org.jboss.logging.DelegatingBasicLogger implements org.hibernate.cache.spi.SecondLevelCacheLogger,org.jboss.logging.BasicLogger,java.io.Serializable {
  private static final long serialVersionUID;

  private static final java.lang.String FQCN;

  private static final java.util.Locale LOCALE;

  private static final java.lang.String attemptToStartAlreadyStartedCacheProvider;

  private static final java.lang.String attemptToStopAlreadyStoppedCacheProvider;

  private static final java.lang.String readOnlyCachingMutableEntity;

  private static final java.lang.String readOnlyCachingMutableNaturalId;

  private static final java.lang.String softLockedCacheExpired;

  private static final java.lang.String missingCacheCreated;

  private static final java.lang.String usingLegacyCacheName;

  private static final java.lang.String nonStandardSupportForAccessType;

  public org.hibernate.cache.spi.SecondLevelCacheLogger_$logger(org.jboss.logging.Logger);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/jboss/logging/DelegatingBasicLogger."<init>":(Lorg/jboss/logging/Logger;)V
       5: return

  protected java.util.Locale getLoggingLocale();
    Code:
       0: getstatic     #2                  // Field LOCALE:Ljava/util/Locale;
       3: areturn

  public final void attemptToStartAlreadyStartedCacheProvider();
    Code:
       0: aload_0
       1: getfield      #3                  // Field org/jboss/logging/DelegatingBasicLogger.log:Lorg/jboss/logging/Logger;
       4: getstatic     #4                  // Field FQCN:Ljava/lang/String;
       7: getstatic     #5                  // Field org/jboss/logging/Logger$Level.WARN:Lorg/jboss/logging/Logger$Level;
      10: aconst_null
      11: aload_0
      12: invokevirtual #6                  // Method attemptToStartAlreadyStartedCacheProvider$str:()Ljava/lang/String;
      15: iconst_0
      16: anewarray     #7                  // class java/lang/Object
      19: invokevirtual #8                  // Method org/jboss/logging/Logger.logf:(Ljava/lang/String;Lorg/jboss/logging/Logger$Level;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V
      22: return

  protected java.lang.String attemptToStartAlreadyStartedCacheProvider$str();
    Code:
       0: ldc           #10                 // String HHH90001001: Attempt to restart an already started RegionFactory.  Use sessionFactory.close() between repeated calls to buildSessionFactory. Using previously created RegionFactory.
       2: areturn

  public final void attemptToStopAlreadyStoppedCacheProvider();
    Code:
       0: aload_0
       1: getfield      #3                  // Field org/jboss/logging/DelegatingBasicLogger.log:Lorg/jboss/logging/Logger;
       4: getstatic     #4                  // Field FQCN:Ljava/lang/String;
       7: getstatic     #5                  // Field org/jboss/logging/Logger$Level.WARN:Lorg/jboss/logging/Logger$Level;
      10: aconst_null
      11: aload_0
      12: invokevirtual #11                 // Method attemptToStopAlreadyStoppedCacheProvider$str:()Ljava/lang/String;
      15: iconst_0
      16: anewarray     #7                  // class java/lang/Object
      19: invokevirtual #8                  // Method org/jboss/logging/Logger.logf:(Ljava/lang/String;Lorg/jboss/logging/Logger$Level;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V
      22: return

  protected java.lang.String attemptToStopAlreadyStoppedCacheProvider$str();
    Code:
       0: ldc           #12                 // String HHH90001002: Attempt to restop an already stopped JCacheRegionFactory.
       2: areturn

  public final void readOnlyCachingMutableEntity(org.hibernate.metamodel.model.domain.NavigableRole);
    Code:
       0: aload_0
       1: getfield      #3                  // Field org/jboss/logging/DelegatingBasicLogger.log:Lorg/jboss/logging/Logger;
       4: getstatic     #4                  // Field FQCN:Ljava/lang/String;
       7: getstatic     #5                  // Field org/jboss/logging/Logger$Level.WARN:Lorg/jboss/logging/Logger$Level;
      10: aconst_null
      11: aload_0
      12: invokevirtual #13                 // Method readOnlyCachingMutableEntity$str:()Ljava/lang/String;
      15: aload_1
      16: invokevirtual #14                 // Method org/jboss/logging/Logger.logf:(Ljava/lang/String;Lorg/jboss/logging/Logger$Level;Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;)V
      19: return

  protected java.lang.String readOnlyCachingMutableEntity$str();
    Code:
       0: ldc           #15                 // String HHH90001003: Read-only caching was requested for mutable entity [%s]
       2: areturn

  public final void readOnlyCachingMutableNaturalId(org.hibernate.metamodel.model.domain.NavigableRole);
    Code:
       0: aload_0
       1: getfield      #3                  // Field org/jboss/logging/DelegatingBasicLogger.log:Lorg/jboss/logging/Logger;
       4: getstatic     #4                  // Field FQCN:Ljava/lang/String;
       7: getstatic     #5                  // Field org/jboss/logging/Logger$Level.WARN:Lorg/jboss/logging/Logger$Level;
      10: aconst_null
      11: aload_0
      12: invokevirtual #16                 // Method readOnlyCachingMutableNaturalId$str:()Ljava/lang/String;
      15: aload_1
      16: invokevirtual #14                 // Method org/jboss/logging/Logger.logf:(Ljava/lang/String;Lorg/jboss/logging/Logger$Level;Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;)V
      19: return

  protected java.lang.String readOnlyCachingMutableNaturalId$str();
    Code:
       0: ldc           #17                 // String HHH90001004: Read-only caching was requested for mutable natural-id for entity [%s]
       2: areturn

  public final void softLockedCacheExpired(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #3                  // Field org/jboss/logging/DelegatingBasicLogger.log:Lorg/jboss/logging/Logger;
       4: getstatic     #4                  // Field FQCN:Ljava/lang/String;
       7: getstatic     #18                 // Field org/jboss/logging/Logger$Level.INFO:Lorg/jboss/logging/Logger$Level;
      10: aconst_null
      11: aload_0
      12: invokevirtual #19                 // Method softLockedCacheExpired$str:()Ljava/lang/String;
      15: aload_1
      16: aload_2
      17: invokevirtual #20                 // Method org/jboss/logging/Logger.logf:(Ljava/lang/String;Lorg/jboss/logging/Logger$Level;Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      20: return

  protected java.lang.String softLockedCacheExpired$str();
    Code:
       0: ldc           #21                 // String HHH90001005: Cache[%s] Key[%s]\nA soft-locked cache entry was expired by the underlying cache. If this happens regularly you should consider increasing the cache timeouts and/or capacity limits
       2: areturn

  public final void missingCacheCreated(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #3                  // Field org/jboss/logging/DelegatingBasicLogger.log:Lorg/jboss/logging/Logger;
       4: getstatic     #4                  // Field FQCN:Ljava/lang/String;
       7: getstatic     #5                  // Field org/jboss/logging/Logger$Level.WARN:Lorg/jboss/logging/Logger$Level;
      10: aconst_null
      11: aload_0
      12: invokevirtual #22                 // Method missingCacheCreated$str:()Ljava/lang/String;
      15: aload_1
      16: aload_2
      17: aload_3
      18: invokevirtual #23                 // Method org/jboss/logging/Logger.logf:(Ljava/lang/String;Lorg/jboss/logging/Logger$Level;Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
      21: return

  protected java.lang.String missingCacheCreated$str();
    Code:
       0: ldc           #24                 // String HHH90001006: Missing cache[%1$s] was created on-the-fly. The created cache will use a provider-specific default configuration: make sure you defined one. You can disable this warning by setting \'%2$s\' to \'%3$s\'.
       2: areturn

  public final void usingLegacyCacheName(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #3                  // Field org/jboss/logging/DelegatingBasicLogger.log:Lorg/jboss/logging/Logger;
       4: getstatic     #4                  // Field FQCN:Ljava/lang/String;
       7: getstatic     #5                  // Field org/jboss/logging/Logger$Level.WARN:Lorg/jboss/logging/Logger$Level;
      10: aconst_null
      11: aload_0
      12: invokevirtual #25                 // Method usingLegacyCacheName$str:()Ljava/lang/String;
      15: aload_1
      16: aload_2
      17: invokevirtual #20                 // Method org/jboss/logging/Logger.logf:(Ljava/lang/String;Lorg/jboss/logging/Logger$Level;Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      20: return

  protected java.lang.String usingLegacyCacheName$str();
    Code:
       0: ldc           #26                 // String HHH90001007: Using legacy cache name [%2$s] because configuration could not be found for cache [%1$s]. Update your configuration to rename cache [%2$s] to [%1$s].
       2: areturn

  public final void nonStandardSupportForAccessType(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #3                  // Field org/jboss/logging/DelegatingBasicLogger.log:Lorg/jboss/logging/Logger;
       4: getstatic     #4                  // Field FQCN:Ljava/lang/String;
       7: getstatic     #5                  // Field org/jboss/logging/Logger$Level.WARN:Lorg/jboss/logging/Logger$Level;
      10: aconst_null
      11: aload_0
      12: invokevirtual #27                 // Method nonStandardSupportForAccessType$str:()Ljava/lang/String;
      15: aload_1
      16: aload_2
      17: aload_3
      18: invokevirtual #23                 // Method org/jboss/logging/Logger.logf:(Ljava/lang/String;Lorg/jboss/logging/Logger$Level;Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
      21: return

  protected java.lang.String nonStandardSupportForAccessType$str();
    Code:
       0: ldc           #28                 // String HHH90001008: Cache [%1$s] uses the [%2$s] access type, but [%3$s] does not support it natively. Make sure your cache implementation supports JTA transactions.
       2: areturn

  static {};
    Code:
       0: ldc           #9                  // class org/hibernate/cache/spi/SecondLevelCacheLogger_$logger
       2: invokevirtual #29                 // Method java/lang/Class.getName:()Ljava/lang/String;
       5: putstatic     #4                  // Field FQCN:Ljava/lang/String;
       8: getstatic     #30                 // Field java/util/Locale.ROOT:Ljava/util/Locale;
      11: putstatic     #2                  // Field LOCALE:Ljava/util/Locale;
      14: return
}
