Compiled from "Join.java"
public class org.hibernate.mapping.Join implements org.hibernate.mapping.AttributeContainer,java.io.Serializable {
  private static final org.hibernate.sql.Alias PK_ALIAS;

  private java.util.ArrayList properties;

  private java.util.ArrayList declaredProperties;

  private org.hibernate.mapping.Table table;

  private org.hibernate.mapping.KeyValue key;

  private org.hibernate.mapping.PersistentClass persistentClass;

  private boolean sequentialSelect;

  private boolean inverse;

  private boolean optional;

  private java.lang.String customSQLInsert;

  private boolean customInsertCallable;

  private org.hibernate.engine.spi.ExecuteUpdateResultCheckStyle insertCheckStyle;

  private java.lang.String customSQLUpdate;

  private boolean customUpdateCallable;

  private org.hibernate.engine.spi.ExecuteUpdateResultCheckStyle updateCheckStyle;

  private java.lang.String customSQLDelete;

  private boolean customDeleteCallable;

  private org.hibernate.engine.spi.ExecuteUpdateResultCheckStyle deleteCheckStyle;

  public org.hibernate.mapping.Join();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #4                  // Field properties:Ljava/util/ArrayList;
      15: aload_0
      16: new           #2                  // class java/util/ArrayList
      19: dup
      20: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      23: putfield      #5                  // Field declaredProperties:Ljava/util/ArrayList;
      26: return

  public void addProperty(org.hibernate.mapping.Property);
    Code:
       0: aload_0
       1: getfield      #4                  // Field properties:Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #6                  // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
       8: pop
       9: aload_0
      10: getfield      #5                  // Field declaredProperties:Ljava/util/ArrayList;
      13: aload_1
      14: invokevirtual #6                  // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      17: pop
      18: aload_1
      19: aload_0
      20: invokevirtual #7                  // Method getPersistentClass:()Lorg/hibernate/mapping/PersistentClass;
      23: invokevirtual #8                  // Method org/hibernate/mapping/Property.setPersistentClass:(Lorg/hibernate/mapping/PersistentClass;)V
      26: return

  public void addMappedsuperclassProperty(org.hibernate.mapping.Property);
    Code:
       0: aload_0
       1: getfield      #4                  // Field properties:Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #6                  // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
       8: pop
       9: aload_1
      10: aload_0
      11: invokevirtual #7                  // Method getPersistentClass:()Lorg/hibernate/mapping/PersistentClass;
      14: invokevirtual #8                  // Method org/hibernate/mapping/Property.setPersistentClass:(Lorg/hibernate/mapping/PersistentClass;)V
      17: return

  public java.util.Iterator getDeclaredPropertyIterator();
    Code:
       0: aload_0
       1: getfield      #5                  // Field declaredProperties:Ljava/util/ArrayList;
       4: invokevirtual #9                  // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
       7: areturn

  public boolean containsProperty(org.hibernate.mapping.Property);
    Code:
       0: aload_0
       1: getfield      #4                  // Field properties:Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #10                 // Method java/util/ArrayList.contains:(Ljava/lang/Object;)Z
       8: ireturn

  public java.util.Iterator getPropertyIterator();
    Code:
       0: aload_0
       1: getfield      #4                  // Field properties:Ljava/util/ArrayList;
       4: invokevirtual #9                  // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
       7: areturn

  public org.hibernate.mapping.Table getTable();
    Code:
       0: aload_0
       1: getfield      #11                 // Field table:Lorg/hibernate/mapping/Table;
       4: areturn

  public void setTable(org.hibernate.mapping.Table);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field table:Lorg/hibernate/mapping/Table;
       5: return

  public org.hibernate.mapping.KeyValue getKey();
    Code:
       0: aload_0
       1: getfield      #12                 // Field key:Lorg/hibernate/mapping/KeyValue;
       4: areturn

  public void setKey(org.hibernate.mapping.KeyValue);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field key:Lorg/hibernate/mapping/KeyValue;
       5: return

  public org.hibernate.mapping.PersistentClass getPersistentClass();
    Code:
       0: aload_0
       1: getfield      #13                 // Field persistentClass:Lorg/hibernate/mapping/PersistentClass;
       4: areturn

  public void setPersistentClass(org.hibernate.mapping.PersistentClass);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field persistentClass:Lorg/hibernate/mapping/PersistentClass;
       5: return

  public void createForeignKey();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method getKey:()Lorg/hibernate/mapping/KeyValue;
       4: aload_0
       5: getfield      #13                 // Field persistentClass:Lorg/hibernate/mapping/PersistentClass;
       8: invokevirtual #15                 // Method org/hibernate/mapping/PersistentClass.getEntityName:()Ljava/lang/String;
      11: invokeinterface #16,  2           // InterfaceMethod org/hibernate/mapping/KeyValue.createForeignKeyOfEntity:(Ljava/lang/String;)V
      16: return

  public void createPrimaryKey();
    Code:
       0: new           #17                 // class org/hibernate/mapping/PrimaryKey
       3: dup
       4: aload_0
       5: getfield      #11                 // Field table:Lorg/hibernate/mapping/Table;
       8: invokespecial #18                 // Method org/hibernate/mapping/PrimaryKey."<init>":(Lorg/hibernate/mapping/Table;)V
      11: astore_1
      12: aload_1
      13: getstatic     #19                 // Field PK_ALIAS:Lorg/hibernate/sql/Alias;
      16: aload_0
      17: getfield      #11                 // Field table:Lorg/hibernate/mapping/Table;
      20: invokevirtual #20                 // Method org/hibernate/mapping/Table.getName:()Ljava/lang/String;
      23: invokevirtual #21                 // Method org/hibernate/sql/Alias.toAliasString:(Ljava/lang/String;)Ljava/lang/String;
      26: invokevirtual #22                 // Method org/hibernate/mapping/PrimaryKey.setName:(Ljava/lang/String;)V
      29: aload_0
      30: getfield      #11                 // Field table:Lorg/hibernate/mapping/Table;
      33: aload_1
      34: invokevirtual #23                 // Method org/hibernate/mapping/Table.setPrimaryKey:(Lorg/hibernate/mapping/PrimaryKey;)V
      37: aload_1
      38: aload_0
      39: invokevirtual #14                 // Method getKey:()Lorg/hibernate/mapping/KeyValue;
      42: invokeinterface #24,  1           // InterfaceMethod org/hibernate/mapping/KeyValue.getColumnIterator:()Ljava/util/Iterator;
      47: invokevirtual #25                 // Method org/hibernate/mapping/PrimaryKey.addColumns:(Ljava/util/Iterator;)V
      50: return

  public int getPropertySpan();
    Code:
       0: aload_0
       1: getfield      #4                  // Field properties:Ljava/util/ArrayList;
       4: invokevirtual #26                 // Method java/util/ArrayList.size:()I
       7: ireturn

  public void setCustomSQLInsert(java.lang.String, boolean, org.hibernate.engine.spi.ExecuteUpdateResultCheckStyle);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #27                 // Field customSQLInsert:Ljava/lang/String;
       5: aload_0
       6: iload_2
       7: putfield      #28                 // Field customInsertCallable:Z
      10: aload_0
      11: aload_3
      12: putfield      #29                 // Field insertCheckStyle:Lorg/hibernate/engine/spi/ExecuteUpdateResultCheckStyle;
      15: return

  public java.lang.String getCustomSQLInsert();
    Code:
       0: aload_0
       1: getfield      #27                 // Field customSQLInsert:Ljava/lang/String;
       4: areturn

  public boolean isCustomInsertCallable();
    Code:
       0: aload_0
       1: getfield      #28                 // Field customInsertCallable:Z
       4: ireturn

  public org.hibernate.engine.spi.ExecuteUpdateResultCheckStyle getCustomSQLInsertCheckStyle();
    Code:
       0: aload_0
       1: getfield      #29                 // Field insertCheckStyle:Lorg/hibernate/engine/spi/ExecuteUpdateResultCheckStyle;
       4: areturn

  public void setCustomSQLUpdate(java.lang.String, boolean, org.hibernate.engine.spi.ExecuteUpdateResultCheckStyle);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field customSQLUpdate:Ljava/lang/String;
       5: aload_0
       6: iload_2
       7: putfield      #31                 // Field customUpdateCallable:Z
      10: aload_0
      11: aload_3
      12: putfield      #32                 // Field updateCheckStyle:Lorg/hibernate/engine/spi/ExecuteUpdateResultCheckStyle;
      15: return

  public java.lang.String getCustomSQLUpdate();
    Code:
       0: aload_0
       1: getfield      #30                 // Field customSQLUpdate:Ljava/lang/String;
       4: areturn

  public boolean isCustomUpdateCallable();
    Code:
       0: aload_0
       1: getfield      #31                 // Field customUpdateCallable:Z
       4: ireturn

  public org.hibernate.engine.spi.ExecuteUpdateResultCheckStyle getCustomSQLUpdateCheckStyle();
    Code:
       0: aload_0
       1: getfield      #32                 // Field updateCheckStyle:Lorg/hibernate/engine/spi/ExecuteUpdateResultCheckStyle;
       4: areturn

  public void setCustomSQLDelete(java.lang.String, boolean, org.hibernate.engine.spi.ExecuteUpdateResultCheckStyle);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #33                 // Field customSQLDelete:Ljava/lang/String;
       5: aload_0
       6: iload_2
       7: putfield      #34                 // Field customDeleteCallable:Z
      10: aload_0
      11: aload_3
      12: putfield      #35                 // Field deleteCheckStyle:Lorg/hibernate/engine/spi/ExecuteUpdateResultCheckStyle;
      15: return

  public java.lang.String getCustomSQLDelete();
    Code:
       0: aload_0
       1: getfield      #33                 // Field customSQLDelete:Ljava/lang/String;
       4: areturn

  public boolean isCustomDeleteCallable();
    Code:
       0: aload_0
       1: getfield      #34                 // Field customDeleteCallable:Z
       4: ireturn

  public org.hibernate.engine.spi.ExecuteUpdateResultCheckStyle getCustomSQLDeleteCheckStyle();
    Code:
       0: aload_0
       1: getfield      #35                 // Field deleteCheckStyle:Lorg/hibernate/engine/spi/ExecuteUpdateResultCheckStyle;
       4: areturn

  public boolean isSequentialSelect();
    Code:
       0: aload_0
       1: getfield      #36                 // Field sequentialSelect:Z
       4: ireturn

  public void setSequentialSelect(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #36                 // Field sequentialSelect:Z
       5: return

  public boolean isInverse();
    Code:
       0: aload_0
       1: getfield      #37                 // Field inverse:Z
       4: ireturn

  public void setInverse(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #37                 // Field inverse:Z
       5: return

  public java.lang.String toString();
    Code:
       0: new           #38                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #39                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #40                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: invokevirtual #41                 // Method java/lang/Class.getName:()Ljava/lang/String;
      14: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: bipush        40
      19: invokevirtual #43                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      22: aload_0
      23: getfield      #11                 // Field table:Lorg/hibernate/mapping/Table;
      26: invokevirtual #44                 // Method org/hibernate/mapping/Table.toString:()Ljava/lang/String;
      29: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: bipush        41
      34: invokevirtual #43                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      37: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      40: areturn

  public boolean isLazy();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getPropertyIterator:()Ljava/util/Iterator;
       4: astore_1
       5: aload_1
       6: invokeinterface #47,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      11: ifeq          36
      14: aload_1
      15: invokeinterface #48,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      20: checkcast     #49                 // class org/hibernate/mapping/Property
      23: astore_2
      24: aload_2
      25: invokevirtual #50                 // Method org/hibernate/mapping/Property.isLazy:()Z
      28: ifne          33
      31: iconst_0
      32: ireturn
      33: goto          5
      36: iconst_1
      37: ireturn

  public boolean isOptional();
    Code:
       0: aload_0
       1: getfield      #51                 // Field optional:Z
       4: ireturn

  public void setOptional(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #51                 // Field optional:Z
       5: return

  static {};
    Code:
       0: new           #52                 // class org/hibernate/sql/Alias
       3: dup
       4: bipush        15
       6: ldc           #53                 // String PK
       8: invokespecial #54                 // Method org/hibernate/sql/Alias."<init>":(ILjava/lang/String;)V
      11: putstatic     #19                 // Field PK_ALIAS:Lorg/hibernate/sql/Alias;
      14: return
}
