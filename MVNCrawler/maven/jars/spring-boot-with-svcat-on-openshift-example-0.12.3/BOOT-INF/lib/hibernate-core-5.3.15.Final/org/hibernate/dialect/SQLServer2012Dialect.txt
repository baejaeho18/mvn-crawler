Compiled from "SQLServer2012Dialect.java"
public class org.hibernate.dialect.SQLServer2012Dialect extends org.hibernate.dialect.SQLServer2008Dialect {
  public org.hibernate.dialect.SQLServer2012Dialect();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/hibernate/dialect/SQLServer2008Dialect."<init>":()V
       4: return

  public boolean supportsSequences();
    Code:
       0: iconst_1
       1: ireturn

  public boolean supportsPooledSequences();
    Code:
       0: iconst_1
       1: ireturn

  public java.lang.String getCreateSequenceString(java.lang.String);
    Code:
       0: new           #2                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #4                  // String create sequence
       9: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_1
      13: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: invokevirtual #6                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      19: areturn

  public java.lang.String getDropSequenceString(java.lang.String);
    Code:
       0: new           #2                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #7                  // String drop sequence
       9: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_1
      13: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: invokevirtual #6                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      19: areturn

  public java.lang.String getSelectSequenceNextValString(java.lang.String);
    Code:
       0: new           #2                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #8                  // String next value for
       9: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_1
      13: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: invokevirtual #6                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      19: areturn

  public java.lang.String getSequenceNextValString(java.lang.String);
    Code:
       0: new           #2                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #9                  // String select
       9: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: aload_1
      14: invokevirtual #10                 // Method getSelectSequenceNextValString:(Ljava/lang/String;)Ljava/lang/String;
      17: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: invokevirtual #6                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      23: areturn

  public java.lang.String getQuerySequencesString();
    Code:
       0: ldc           #11                 // String select name from sys.sequences
       2: areturn

  public java.lang.String getQueryHintString(java.lang.String, java.lang.String);
    Code:
       0: new           #2                  // class java/lang/StringBuilder
       3: dup
       4: aload_1
       5: invokevirtual #12                 // Method java/lang/String.length:()I
       8: aload_2
       9: invokevirtual #12                 // Method java/lang/String.length:()I
      12: iadd
      13: bipush        12
      15: iadd
      16: invokespecial #13                 // Method java/lang/StringBuilder."<init>":(I)V
      19: astore_3
      20: aload_1
      21: ldc           #14                 // String ;
      23: invokevirtual #15                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      26: istore        4
      28: iload         4
      30: iconst_m1
      31: if_icmple     49
      34: aload_3
      35: aload_1
      36: iconst_0
      37: iload         4
      39: invokevirtual #16                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      42: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: pop
      46: goto          55
      49: aload_3
      50: aload_1
      51: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: pop
      55: aload_3
      56: ldc           #17                 // String  OPTION (
      58: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: aload_2
      62: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      65: ldc           #18                 // String )
      67: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: pop
      71: iload         4
      73: iconst_m1
      74: if_icmple     84
      77: aload_3
      78: ldc           #14                 // String ;
      80: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: pop
      84: aload_3
      85: invokevirtual #6                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      88: astore_1
      89: aload_1
      90: areturn

  public boolean supportsLimitOffset();
    Code:
       0: iconst_1
       1: ireturn

  protected org.hibernate.dialect.pagination.LimitHandler getDefaultLimitHandler();
    Code:
       0: new           #19                 // class org/hibernate/dialect/pagination/SQLServer2012LimitHandler
       3: dup
       4: invokespecial #20                 // Method org/hibernate/dialect/pagination/SQLServer2012LimitHandler."<init>":()V
       7: areturn
}
