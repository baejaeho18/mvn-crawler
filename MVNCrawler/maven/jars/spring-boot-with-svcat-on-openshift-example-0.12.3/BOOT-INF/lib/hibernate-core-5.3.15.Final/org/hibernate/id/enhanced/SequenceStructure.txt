Compiled from "SequenceStructure.java"
public class org.hibernate.id.enhanced.SequenceStructure implements org.hibernate.id.enhanced.DatabaseStructure {
  private static final org.hibernate.internal.CoreMessageLogger LOG;

  private final org.hibernate.boot.model.relational.QualifiedName logicalQualifiedSequenceName;

  private final int initialValue;

  private final int incrementSize;

  private final java.lang.Class numberType;

  private java.lang.String sql;

  private boolean applyIncrementSizeToSourceValues;

  private int accessCounter;

  protected java.lang.String sequenceName;

  public org.hibernate.id.enhanced.SequenceStructure(org.hibernate.engine.jdbc.env.spi.JdbcEnvironment, org.hibernate.boot.model.relational.QualifiedName, int, int, java.lang.Class);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_2
       6: putfield      #6                  // Field logicalQualifiedSequenceName:Lorg/hibernate/boot/model/relational/QualifiedName;
       9: aload_0
      10: iload_3
      11: putfield      #7                  // Field initialValue:I
      14: aload_0
      15: iload         4
      17: putfield      #8                  // Field incrementSize:I
      20: aload_0
      21: aload         5
      23: putfield      #2                  // Field numberType:Ljava/lang/Class;
      26: return

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #9                  // Field sequenceName:Ljava/lang/String;
       4: areturn

  public int getIncrementSize();
    Code:
       0: aload_0
       1: getfield      #8                  // Field incrementSize:I
       4: ireturn

  public int getTimesAccessed();
    Code:
       0: aload_0
       1: getfield      #4                  // Field accessCounter:I
       4: ireturn

  public int getInitialValue();
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialValue:I
       4: ireturn

  public org.hibernate.id.enhanced.AccessCallback buildCallback(org.hibernate.engine.spi.SharedSessionContractImplementor);
    Code:
       0: aload_0
       1: getfield      #3                  // Field sql:Ljava/lang/String;
       4: ifnonnull     17
       7: new           #10                 // class org/hibernate/AssertionFailure
      10: dup
      11: ldc           #11                 // String SequenceStyleGenerator\'s SequenceStructure was not properly initialized
      13: invokespecial #12                 // Method org/hibernate/AssertionFailure."<init>":(Ljava/lang/String;)V
      16: athrow
      17: new           #13                 // class org/hibernate/id/enhanced/SequenceStructure$1
      20: dup
      21: aload_0
      22: aload_1
      23: invokespecial #14                 // Method org/hibernate/id/enhanced/SequenceStructure$1."<init>":(Lorg/hibernate/id/enhanced/SequenceStructure;Lorg/hibernate/engine/spi/SharedSessionContractImplementor;)V
      26: areturn

  public void prepare(org.hibernate.id.enhanced.Optimizer);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #15,  1           // InterfaceMethod org/hibernate/id/enhanced/Optimizer.applyIncrementSizeToSourceValues:()Z
       7: putfield      #16                 // Field applyIncrementSizeToSourceValues:Z
      10: return

  public void registerExportables(org.hibernate.boot.model.relational.Database);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #17                 // Method buildSequence:(Lorg/hibernate/boot/model/relational/Database;)V
       5: aload_0
       6: aload_1
       7: invokevirtual #18                 // Method org/hibernate/boot/model/relational/Database.getJdbcEnvironment:()Lorg/hibernate/engine/jdbc/env/spi/JdbcEnvironment;
      10: invokeinterface #19,  1           // InterfaceMethod org/hibernate/engine/jdbc/env/spi/JdbcEnvironment.getDialect:()Lorg/hibernate/dialect/Dialect;
      15: aload_0
      16: getfield      #9                  // Field sequenceName:Ljava/lang/String;
      19: invokevirtual #20                 // Method org/hibernate/dialect/Dialect.getSequenceNextValString:(Ljava/lang/String;)Ljava/lang/String;
      22: putfield      #3                  // Field sql:Ljava/lang/String;
      25: return

  public java.lang.String[] sqlCreateStrings(org.hibernate.dialect.Dialect) throws org.hibernate.HibernateException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #9                  // Field sequenceName:Ljava/lang/String;
       5: aload_0
       6: getfield      #7                  // Field initialValue:I
       9: aload_0
      10: invokevirtual #21                 // Method getSourceIncrementSize:()I
      13: invokevirtual #22                 // Method org/hibernate/dialect/Dialect.getCreateSequenceStrings:(Ljava/lang/String;II)[Ljava/lang/String;
      16: areturn

  public java.lang.String[] sqlDropStrings(org.hibernate.dialect.Dialect) throws org.hibernate.HibernateException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #9                  // Field sequenceName:Ljava/lang/String;
       5: invokevirtual #23                 // Method org/hibernate/dialect/Dialect.getDropSequenceStrings:(Ljava/lang/String;)[Ljava/lang/String;
       8: areturn

  public boolean isPhysicalSequence();
    Code:
       0: iconst_1
       1: ireturn

  protected final int getSourceIncrementSize();
    Code:
       0: aload_0
       1: getfield      #16                 // Field applyIncrementSizeToSourceValues:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #8                  // Field incrementSize:I
      11: goto          15
      14: iconst_1
      15: ireturn

  protected org.hibernate.boot.model.relational.QualifiedName getQualifiedName();
    Code:
       0: aload_0
       1: getfield      #6                  // Field logicalQualifiedSequenceName:Lorg/hibernate/boot/model/relational/QualifiedName;
       4: areturn

  protected void buildSequence(org.hibernate.boot.model.relational.Database);
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method getSourceIncrementSize:()I
       4: istore_2
       5: aload_1
       6: aload_0
       7: getfield      #6                  // Field logicalQualifiedSequenceName:Lorg/hibernate/boot/model/relational/QualifiedName;
      10: invokeinterface #24,  1           // InterfaceMethod org/hibernate/boot/model/relational/QualifiedName.getCatalogName:()Lorg/hibernate/boot/model/naming/Identifier;
      15: aload_0
      16: getfield      #6                  // Field logicalQualifiedSequenceName:Lorg/hibernate/boot/model/relational/QualifiedName;
      19: invokeinterface #25,  1           // InterfaceMethod org/hibernate/boot/model/relational/QualifiedName.getSchemaName:()Lorg/hibernate/boot/model/naming/Identifier;
      24: invokevirtual #26                 // Method org/hibernate/boot/model/relational/Database.locateNamespace:(Lorg/hibernate/boot/model/naming/Identifier;Lorg/hibernate/boot/model/naming/Identifier;)Lorg/hibernate/boot/model/relational/Namespace;
      27: astore_3
      28: aload_3
      29: aload_0
      30: getfield      #6                  // Field logicalQualifiedSequenceName:Lorg/hibernate/boot/model/relational/QualifiedName;
      33: invokeinterface #27,  1           // InterfaceMethod org/hibernate/boot/model/relational/QualifiedName.getObjectName:()Lorg/hibernate/boot/model/naming/Identifier;
      38: invokevirtual #28                 // Method org/hibernate/boot/model/relational/Namespace.locateSequence:(Lorg/hibernate/boot/model/naming/Identifier;)Lorg/hibernate/boot/model/relational/Sequence;
      41: astore        4
      43: aload         4
      45: ifnull        61
      48: aload         4
      50: aload_0
      51: getfield      #7                  // Field initialValue:I
      54: iload_2
      55: invokevirtual #29                 // Method org/hibernate/boot/model/relational/Sequence.validate:(II)V
      58: goto          81
      61: aload_3
      62: aload_0
      63: getfield      #6                  // Field logicalQualifiedSequenceName:Lorg/hibernate/boot/model/relational/QualifiedName;
      66: invokeinterface #27,  1           // InterfaceMethod org/hibernate/boot/model/relational/QualifiedName.getObjectName:()Lorg/hibernate/boot/model/naming/Identifier;
      71: aload_0
      72: getfield      #7                  // Field initialValue:I
      75: iload_2
      76: invokevirtual #30                 // Method org/hibernate/boot/model/relational/Namespace.createSequence:(Lorg/hibernate/boot/model/naming/Identifier;II)Lorg/hibernate/boot/model/relational/Sequence;
      79: astore        4
      81: aload_0
      82: aload_1
      83: invokevirtual #18                 // Method org/hibernate/boot/model/relational/Database.getJdbcEnvironment:()Lorg/hibernate/engine/jdbc/env/spi/JdbcEnvironment;
      86: invokeinterface #31,  1           // InterfaceMethod org/hibernate/engine/jdbc/env/spi/JdbcEnvironment.getQualifiedObjectNameFormatter:()Lorg/hibernate/engine/jdbc/env/spi/QualifiedObjectNameFormatter;
      91: aload         4
      93: invokevirtual #32                 // Method org/hibernate/boot/model/relational/Sequence.getName:()Lorg/hibernate/boot/model/relational/QualifiedSequenceName;
      96: aload_1
      97: invokevirtual #18                 // Method org/hibernate/boot/model/relational/Database.getJdbcEnvironment:()Lorg/hibernate/engine/jdbc/env/spi/JdbcEnvironment;
     100: invokeinterface #19,  1           // InterfaceMethod org/hibernate/engine/jdbc/env/spi/JdbcEnvironment.getDialect:()Lorg/hibernate/dialect/Dialect;
     105: invokeinterface #33,  3           // InterfaceMethod org/hibernate/engine/jdbc/env/spi/QualifiedObjectNameFormatter.format:(Lorg/hibernate/boot/model/relational/QualifiedSequenceName;Lorg/hibernate/dialect/Dialect;)Ljava/lang/String;
     110: putfield      #9                  // Field sequenceName:Ljava/lang/String;
     113: return

  static int access$008(org.hibernate.id.enhanced.SequenceStructure);
    Code:
       0: aload_0
       1: dup
       2: getfield      #4                  // Field accessCounter:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #4                  // Field accessCounter:I
      11: ireturn

  static java.lang.String access$100(org.hibernate.id.enhanced.SequenceStructure);
    Code:
       0: aload_0
       1: getfield      #3                  // Field sql:Ljava/lang/String;
       4: areturn

  static java.lang.Class access$200(org.hibernate.id.enhanced.SequenceStructure);
    Code:
       0: aload_0
       1: getfield      #2                  // Field numberType:Ljava/lang/Class;
       4: areturn

  static org.hibernate.internal.CoreMessageLogger access$300();
    Code:
       0: getstatic     #1                  // Field LOG:Lorg/hibernate/internal/CoreMessageLogger;
       3: areturn

  static {};
    Code:
       0: ldc           #34                 // class org/hibernate/internal/CoreMessageLogger
       2: ldc           #35                 // class org/hibernate/id/enhanced/SequenceStructure
       4: invokevirtual #36                 // Method java/lang/Class.getName:()Ljava/lang/String;
       7: invokestatic  #37                 // Method org/jboss/logging/Logger.getMessageLogger:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;
      10: checkcast     #34                 // class org/hibernate/internal/CoreMessageLogger
      13: putstatic     #1                  // Field LOG:Lorg/hibernate/internal/CoreMessageLogger;
      16: return
}
