Compiled from "TaskRunStatusFluent.java"
public interface io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent<A extends io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToCloudEvents(int, io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery);

  public abstract A setToCloudEvents(int, io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery);

  public abstract A addToCloudEvents(io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery...);

  public abstract A addAllToCloudEvents(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery>);

  public abstract A removeFromCloudEvents(io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery...);

  public abstract A removeAllFromCloudEvents(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery>);

  public abstract A removeMatchingFromCloudEvents(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDeliveryBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery> getCloudEvents();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery> buildCloudEvents();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery buildCloudEvent(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery buildFirstCloudEvent();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery buildLastCloudEvent();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery buildMatchingCloudEvent(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDeliveryBuilder>);

  public abstract java.lang.Boolean hasMatchingCloudEvent(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDeliveryBuilder>);

  public abstract A withCloudEvents(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery>);

  public abstract A withCloudEvents(io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery...);

  public abstract java.lang.Boolean hasCloudEvents();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$CloudEventsNested<A> addNewCloudEvent();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$CloudEventsNested<A> addNewCloudEventLike(io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$CloudEventsNested<A> setNewCloudEventLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDelivery);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$CloudEventsNested<A> editCloudEvent(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$CloudEventsNested<A> editFirstCloudEvent();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$CloudEventsNested<A> editLastCloudEvent();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$CloudEventsNested<A> editMatchingCloudEvent(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.CloudEventDeliveryBuilder>);

  public abstract java.lang.String getCompletionTime();

  public abstract A withCompletionTime(java.lang.String);

  public abstract java.lang.Boolean hasCompletionTime();

  public abstract A withNewCompletionTime(java.lang.String);

  public abstract A withNewCompletionTime(java.lang.StringBuilder);

  public abstract A withNewCompletionTime(java.lang.StringBuffer);

  public abstract A addToConditions(int, io.dekorate.deps.knative.v1.Condition);

  public abstract A setToConditions(int, io.dekorate.deps.knative.v1.Condition);

  public abstract A addToConditions(io.dekorate.deps.knative.v1.Condition...);

  public abstract A addAllToConditions(java.util.Collection<io.dekorate.deps.knative.v1.Condition>);

  public abstract A removeFromConditions(io.dekorate.deps.knative.v1.Condition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.dekorate.deps.knative.v1.Condition>);

  public abstract java.util.List<io.dekorate.deps.knative.v1.Condition> getConditions();

  public abstract io.dekorate.deps.knative.v1.Condition getCondition(int);

  public abstract io.dekorate.deps.knative.v1.Condition getFirstCondition();

  public abstract io.dekorate.deps.knative.v1.Condition getLastCondition();

  public abstract io.dekorate.deps.knative.v1.Condition getMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.v1.Condition>);

  public abstract java.lang.Boolean hasMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.v1.Condition>);

  public abstract A withConditions(java.util.List<io.dekorate.deps.knative.v1.Condition>);

  public abstract A withConditions(io.dekorate.deps.knative.v1.Condition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract java.lang.Long getObservedGeneration();

  public abstract A withObservedGeneration(java.lang.Long);

  public abstract java.lang.Boolean hasObservedGeneration();

  public abstract java.lang.String getPodName();

  public abstract A withPodName(java.lang.String);

  public abstract java.lang.Boolean hasPodName();

  public abstract A withNewPodName(java.lang.String);

  public abstract A withNewPodName(java.lang.StringBuilder);

  public abstract A withNewPodName(java.lang.StringBuffer);

  public abstract A addToResourcesResult(int, io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult);

  public abstract A setToResourcesResult(int, io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult);

  public abstract A addToResourcesResult(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult...);

  public abstract A addAllToResourcesResult(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult>);

  public abstract A removeFromResourcesResult(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult...);

  public abstract A removeAllFromResourcesResult(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult>);

  public abstract A removeMatchingFromResourcesResult(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResultBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult> getResourcesResult();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult> buildResourcesResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult buildResourcesResult(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult buildFirstResourcesResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult buildLastResourcesResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult buildMatchingResourcesResult(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResultBuilder>);

  public abstract java.lang.Boolean hasMatchingResourcesResult(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResultBuilder>);

  public abstract A withResourcesResult(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult>);

  public abstract A withResourcesResult(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult...);

  public abstract java.lang.Boolean hasResourcesResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$ResourcesResultNested<A> addNewResourcesResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$ResourcesResultNested<A> addNewResourcesResultLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$ResourcesResultNested<A> setNewResourcesResultLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResult);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$ResourcesResultNested<A> editResourcesResult(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$ResourcesResultNested<A> editFirstResourcesResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$ResourcesResultNested<A> editLastResourcesResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$ResourcesResultNested<A> editMatchingResourcesResult(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResultBuilder>);

  public abstract A addToRetriesStatus(int, io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus);

  public abstract A setToRetriesStatus(int, io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus);

  public abstract A addToRetriesStatus(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus...);

  public abstract A addAllToRetriesStatus(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus>);

  public abstract A removeFromRetriesStatus(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus...);

  public abstract A removeAllFromRetriesStatus(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus>);

  public abstract A removeMatchingFromRetriesStatus(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus> getRetriesStatus();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus> buildRetriesStatus();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus buildRetriesStatus(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus buildFirstRetriesStatus();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus buildLastRetriesStatus();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus buildMatchingRetriesStatus(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusBuilder>);

  public abstract java.lang.Boolean hasMatchingRetriesStatus(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusBuilder>);

  public abstract A withRetriesStatus(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus>);

  public abstract A withRetriesStatus(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus...);

  public abstract java.lang.Boolean hasRetriesStatus();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$RetriesStatusNested<A> addNewRetriesStatus();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$RetriesStatusNested<A> addNewRetriesStatusLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$RetriesStatusNested<A> setNewRetriesStatusLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatus);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$RetriesStatusNested<A> editRetriesStatus(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$RetriesStatusNested<A> editFirstRetriesStatus();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$RetriesStatusNested<A> editLastRetriesStatus();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$RetriesStatusNested<A> editMatchingRetriesStatus(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusBuilder>);

  public abstract A addToSidecars(int, io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState);

  public abstract A setToSidecars(int, io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState);

  public abstract A addToSidecars(io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState...);

  public abstract A addAllToSidecars(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState>);

  public abstract A removeFromSidecars(io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState...);

  public abstract A removeAllFromSidecars(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState>);

  public abstract A removeMatchingFromSidecars(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.SidecarStateBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState> getSidecars();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState> buildSidecars();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState buildSidecar(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState buildFirstSidecar();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState buildLastSidecar();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState buildMatchingSidecar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.SidecarStateBuilder>);

  public abstract java.lang.Boolean hasMatchingSidecar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.SidecarStateBuilder>);

  public abstract A withSidecars(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState>);

  public abstract A withSidecars(io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState...);

  public abstract java.lang.Boolean hasSidecars();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$SidecarsNested<A> addNewSidecar();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$SidecarsNested<A> addNewSidecarLike(io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$SidecarsNested<A> setNewSidecarLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$SidecarsNested<A> editSidecar(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$SidecarsNested<A> editFirstSidecar();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$SidecarsNested<A> editLastSidecar();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$SidecarsNested<A> editMatchingSidecar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.SidecarStateBuilder>);

  public abstract java.lang.String getStartTime();

  public abstract A withStartTime(java.lang.String);

  public abstract java.lang.Boolean hasStartTime();

  public abstract A withNewStartTime(java.lang.String);

  public abstract A withNewStartTime(java.lang.StringBuilder);

  public abstract A withNewStartTime(java.lang.StringBuffer);

  public abstract A addToSteps(int, io.dekorate.deps.tekton.pipeline.v1beta1.StepState);

  public abstract A setToSteps(int, io.dekorate.deps.tekton.pipeline.v1beta1.StepState);

  public abstract A addToSteps(io.dekorate.deps.tekton.pipeline.v1beta1.StepState...);

  public abstract A addAllToSteps(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.StepState>);

  public abstract A removeFromSteps(io.dekorate.deps.tekton.pipeline.v1beta1.StepState...);

  public abstract A removeAllFromSteps(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.StepState>);

  public abstract A removeMatchingFromSteps(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.StepStateBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.StepState> getSteps();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.StepState> buildSteps();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.StepState buildStep(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.StepState buildFirstStep();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.StepState buildLastStep();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.StepState buildMatchingStep(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.StepStateBuilder>);

  public abstract java.lang.Boolean hasMatchingStep(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.StepStateBuilder>);

  public abstract A withSteps(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.StepState>);

  public abstract A withSteps(io.dekorate.deps.tekton.pipeline.v1beta1.StepState...);

  public abstract java.lang.Boolean hasSteps();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$StepsNested<A> addNewStep();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$StepsNested<A> addNewStepLike(io.dekorate.deps.tekton.pipeline.v1beta1.StepState);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$StepsNested<A> setNewStepLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.StepState);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$StepsNested<A> editStep(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$StepsNested<A> editFirstStep();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$StepsNested<A> editLastStep();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$StepsNested<A> editMatchingStep(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.StepStateBuilder>);

  public abstract A addToTaskResults(int, io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult);

  public abstract A setToTaskResults(int, io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult);

  public abstract A addToTaskResults(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult...);

  public abstract A addAllToTaskResults(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult>);

  public abstract A removeFromTaskResults(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult...);

  public abstract A removeAllFromTaskResults(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult>);

  public abstract A removeMatchingFromTaskResults(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResultBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult> getTaskResults();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult> buildTaskResults();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult buildTaskResult(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult buildFirstTaskResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult buildLastTaskResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult buildMatchingTaskResult(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResultBuilder>);

  public abstract java.lang.Boolean hasMatchingTaskResult(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResultBuilder>);

  public abstract A withTaskResults(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult>);

  public abstract A withTaskResults(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult...);

  public abstract java.lang.Boolean hasTaskResults();

  public abstract A addNewTaskResult(java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$TaskResultsNested<A> addNewTaskResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$TaskResultsNested<A> addNewTaskResultLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$TaskResultsNested<A> setNewTaskResultLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResult);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$TaskResultsNested<A> editTaskResult(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$TaskResultsNested<A> editFirstTaskResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$TaskResultsNested<A> editLastTaskResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunStatusFluent$TaskResultsNested<A> editMatchingTaskResult(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResultBuilder>);
}
