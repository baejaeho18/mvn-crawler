Compiled from "PipelineTaskFluent.java"
public interface io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent<A extends io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToConditions(int, io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition);

  public abstract A setToConditions(int, io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition);

  public abstract A addToConditions(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition...);

  public abstract A addAllToConditions(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition>);

  public abstract A removeFromConditions(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition>);

  public abstract A removeMatchingFromConditions(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskConditionBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition> getConditions();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition> buildConditions();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition buildCondition(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition buildFirstCondition();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition buildLastCondition();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition buildMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskConditionBuilder>);

  public abstract java.lang.Boolean hasMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskConditionBuilder>);

  public abstract A withConditions(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition>);

  public abstract A withConditions(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ConditionsNested<A> addNewCondition();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ConditionsNested<A> addNewConditionLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ConditionsNested<A> setNewConditionLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskCondition);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ConditionsNested<A> editCondition(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ConditionsNested<A> editFirstCondition();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ConditionsNested<A> editLastCondition();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ConditionsNested<A> editMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskConditionBuilder>);

  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();

  public abstract A withNewName(java.lang.String);

  public abstract A withNewName(java.lang.StringBuilder);

  public abstract A withNewName(java.lang.StringBuffer);

  public abstract A addToParams(int, io.dekorate.deps.tekton.pipeline.v1beta1.Param);

  public abstract A setToParams(int, io.dekorate.deps.tekton.pipeline.v1beta1.Param);

  public abstract A addToParams(io.dekorate.deps.tekton.pipeline.v1beta1.Param...);

  public abstract A addAllToParams(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.Param>);

  public abstract A removeFromParams(io.dekorate.deps.tekton.pipeline.v1beta1.Param...);

  public abstract A removeAllFromParams(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.Param>);

  public abstract A removeMatchingFromParams(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Param> getParams();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Param> buildParams();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Param buildParam(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Param buildFirstParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Param buildLastParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Param buildMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamBuilder>);

  public abstract java.lang.Boolean hasMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamBuilder>);

  public abstract A withParams(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Param>);

  public abstract A withParams(io.dekorate.deps.tekton.pipeline.v1beta1.Param...);

  public abstract java.lang.Boolean hasParams();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ParamsNested<A> addNewParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ParamsNested<A> addNewParamLike(io.dekorate.deps.tekton.pipeline.v1beta1.Param);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ParamsNested<A> setNewParamLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.Param);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ParamsNested<A> editParam(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ParamsNested<A> editFirstParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ParamsNested<A> editLastParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ParamsNested<A> editMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamBuilder>);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskResources getResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskResources buildResources();

  public abstract A withResources(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskResources);

  public abstract java.lang.Boolean hasResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ResourcesNested<A> withNewResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ResourcesNested<A> withNewResourcesLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskResources);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ResourcesNested<A> editResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ResourcesNested<A> editOrNewResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$ResourcesNested<A> editOrNewResourcesLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskResources);

  public abstract java.lang.Integer getRetries();

  public abstract A withRetries(java.lang.Integer);

  public abstract java.lang.Boolean hasRetries();

  public abstract A addToRunAfter(int, java.lang.String);

  public abstract A setToRunAfter(int, java.lang.String);

  public abstract A addToRunAfter(java.lang.String...);

  public abstract A addAllToRunAfter(java.util.Collection<java.lang.String>);

  public abstract A removeFromRunAfter(java.lang.String...);

  public abstract A removeAllFromRunAfter(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getRunAfter();

  public abstract java.lang.String getRunAfter(int);

  public abstract java.lang.String getFirstRunAfter();

  public abstract java.lang.String getLastRunAfter();

  public abstract java.lang.String getMatchingRunAfter(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingRunAfter(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withRunAfter(java.util.List<java.lang.String>);

  public abstract A withRunAfter(java.lang.String...);

  public abstract java.lang.Boolean hasRunAfter();

  public abstract A addNewRunAfter(java.lang.String);

  public abstract A addNewRunAfter(java.lang.StringBuilder);

  public abstract A addNewRunAfter(java.lang.StringBuffer);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef getTaskRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef buildTaskRef();

  public abstract A withTaskRef(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef);

  public abstract java.lang.Boolean hasTaskRef();

  public abstract A withNewTaskRef(java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$TaskRefNested<A> withNewTaskRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$TaskRefNested<A> withNewTaskRefLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$TaskRefNested<A> editTaskRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$TaskRefNested<A> editOrNewTaskRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$TaskRefNested<A> editOrNewTaskRefLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpec getTaskSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpec buildTaskSpec();

  public abstract A withTaskSpec(io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpec);

  public abstract java.lang.Boolean hasTaskSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$TaskSpecNested<A> withNewTaskSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$TaskSpecNested<A> withNewTaskSpecLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpec);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$TaskSpecNested<A> editTaskSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$TaskSpecNested<A> editOrNewTaskSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$TaskSpecNested<A> editOrNewTaskSpecLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpec);

  public abstract java.lang.String getTimeout();

  public abstract A withTimeout(java.lang.String);

  public abstract java.lang.Boolean hasTimeout();

  public abstract A withNewTimeout(java.lang.String);

  public abstract A withNewTimeout(java.lang.StringBuilder);

  public abstract A withNewTimeout(java.lang.StringBuffer);

  public abstract A addToWorkspaces(int, io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding);

  public abstract A setToWorkspaces(int, io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding);

  public abstract A addToWorkspaces(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding...);

  public abstract A addAllToWorkspaces(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding>);

  public abstract A removeFromWorkspaces(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding...);

  public abstract A removeAllFromWorkspaces(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding>);

  public abstract A removeMatchingFromWorkspaces(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBindingBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding> getWorkspaces();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding> buildWorkspaces();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding buildWorkspace(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding buildFirstWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding buildLastWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding buildMatchingWorkspace(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBindingBuilder>);

  public abstract java.lang.Boolean hasMatchingWorkspace(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBindingBuilder>);

  public abstract A withWorkspaces(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding>);

  public abstract A withWorkspaces(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding...);

  public abstract java.lang.Boolean hasWorkspaces();

  public abstract A addNewWorkspace(java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$WorkspacesNested<A> addNewWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$WorkspacesNested<A> addNewWorkspaceLike(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$WorkspacesNested<A> setNewWorkspaceLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBinding);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$WorkspacesNested<A> editWorkspace(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$WorkspacesNested<A> editFirstWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$WorkspacesNested<A> editLastWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskFluent$WorkspacesNested<A> editMatchingWorkspace(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspacePipelineTaskBindingBuilder>);
}
