Compiled from "SubscriptionSpecFluent.java"
public interface io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent<A extends io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.kubernetes.api.model.ObjectReference getChannel();

  public abstract A withChannel(io.dekorate.deps.kubernetes.api.model.ObjectReference);

  public abstract java.lang.Boolean hasChannel();

  public abstract io.dekorate.deps.knative.dev.duck.v1beta1.DeliverySpec getDelivery();

  public abstract io.dekorate.deps.knative.dev.duck.v1beta1.DeliverySpec buildDelivery();

  public abstract A withDelivery(io.dekorate.deps.knative.dev.duck.v1beta1.DeliverySpec);

  public abstract java.lang.Boolean hasDelivery();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$DeliveryNested<A> withNewDelivery();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$DeliveryNested<A> withNewDeliveryLike(io.dekorate.deps.knative.dev.duck.v1beta1.DeliverySpec);

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$DeliveryNested<A> editDelivery();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$DeliveryNested<A> editOrNewDelivery();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$DeliveryNested<A> editOrNewDeliveryLike(io.dekorate.deps.knative.dev.duck.v1beta1.DeliverySpec);

  public abstract java.lang.Long getGeneration();

  public abstract A withGeneration(java.lang.Long);

  public abstract java.lang.Boolean hasGeneration();

  public abstract io.dekorate.deps.knative.duck.v1.Destination getReply();

  public abstract io.dekorate.deps.knative.duck.v1.Destination buildReply();

  public abstract A withReply(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract java.lang.Boolean hasReply();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$ReplyNested<A> withNewReply();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$ReplyNested<A> withNewReplyLike(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$ReplyNested<A> editReply();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$ReplyNested<A> editOrNewReply();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$ReplyNested<A> editOrNewReplyLike(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract io.dekorate.deps.knative.duck.v1.Destination getSubscriber();

  public abstract io.dekorate.deps.knative.duck.v1.Destination buildSubscriber();

  public abstract A withSubscriber(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract java.lang.Boolean hasSubscriber();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$SubscriberNested<A> withNewSubscriber();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$SubscriberNested<A> withNewSubscriberLike(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$SubscriberNested<A> editSubscriber();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$SubscriberNested<A> editOrNewSubscriber();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionSpecFluent$SubscriberNested<A> editOrNewSubscriberLike(io.dekorate.deps.knative.duck.v1.Destination);
}
