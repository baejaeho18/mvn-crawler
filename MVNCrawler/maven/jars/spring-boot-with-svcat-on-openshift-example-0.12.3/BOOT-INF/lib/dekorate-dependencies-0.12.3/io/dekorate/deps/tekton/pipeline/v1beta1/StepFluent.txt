Compiled from "StepFluent.java"
public interface io.dekorate.deps.tekton.pipeline.v1beta1.StepFluent<A extends io.dekorate.deps.tekton.pipeline.v1beta1.StepFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToArgs(int, java.lang.String);

  public abstract A setToArgs(int, java.lang.String);

  public abstract A addToArgs(java.lang.String...);

  public abstract A addAllToArgs(java.util.Collection<java.lang.String>);

  public abstract A removeFromArgs(java.lang.String...);

  public abstract A removeAllFromArgs(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getArgs();

  public abstract java.lang.String getArg(int);

  public abstract java.lang.String getFirstArg();

  public abstract java.lang.String getLastArg();

  public abstract java.lang.String getMatchingArg(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingArg(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withArgs(java.util.List<java.lang.String>);

  public abstract A withArgs(java.lang.String...);

  public abstract java.lang.Boolean hasArgs();

  public abstract A addNewArg(java.lang.String);

  public abstract A addNewArg(java.lang.StringBuilder);

  public abstract A addNewArg(java.lang.StringBuffer);

  public abstract A addToCommand(int, java.lang.String);

  public abstract A setToCommand(int, java.lang.String);

  public abstract A addToCommand(java.lang.String...);

  public abstract A addAllToCommand(java.util.Collection<java.lang.String>);

  public abstract A removeFromCommand(java.lang.String...);

  public abstract A removeAllFromCommand(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getCommand();

  public abstract java.lang.String getCommand(int);

  public abstract java.lang.String getFirstCommand();

  public abstract java.lang.String getLastCommand();

  public abstract java.lang.String getMatchingCommand(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingCommand(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withCommand(java.util.List<java.lang.String>);

  public abstract A withCommand(java.lang.String...);

  public abstract java.lang.Boolean hasCommand();

  public abstract A addNewCommand(java.lang.String);

  public abstract A addNewCommand(java.lang.StringBuilder);

  public abstract A addNewCommand(java.lang.StringBuffer);

  public abstract A addToEnv(int, io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract A setToEnv(int, io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract A addToEnv(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract A addAllToEnv(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A removeFromEnv(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract A removeAllFromEnv(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EnvVar> getEnv();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar getEnv(int);

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar getFirstEnv();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar getLastEnv();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar getMatchingEnv(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract java.lang.Boolean hasMatchingEnv(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(java.util.List<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract java.lang.Boolean hasEnv();

  public abstract A addToEnvFrom(int, io.dekorate.deps.kubernetes.api.model.EnvFromSource);

  public abstract A setToEnvFrom(int, io.dekorate.deps.kubernetes.api.model.EnvFromSource);

  public abstract A addToEnvFrom(io.dekorate.deps.kubernetes.api.model.EnvFromSource...);

  public abstract A addAllToEnvFrom(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EnvFromSource>);

  public abstract A removeFromEnvFrom(io.dekorate.deps.kubernetes.api.model.EnvFromSource...);

  public abstract A removeAllFromEnvFrom(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EnvFromSource>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EnvFromSource> getEnvFrom();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvFromSource getEnvFrom(int);

  public abstract io.dekorate.deps.kubernetes.api.model.EnvFromSource getFirstEnvFrom();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvFromSource getLastEnvFrom();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvFromSource getMatchingEnvFrom(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvFromSource>);

  public abstract java.lang.Boolean hasMatchingEnvFrom(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvFromSource>);

  public abstract A withEnvFrom(java.util.List<io.dekorate.deps.kubernetes.api.model.EnvFromSource>);

  public abstract A withEnvFrom(io.dekorate.deps.kubernetes.api.model.EnvFromSource...);

  public abstract java.lang.Boolean hasEnvFrom();

  public abstract java.lang.String getImage();

  public abstract A withImage(java.lang.String);

  public abstract java.lang.Boolean hasImage();

  public abstract A withNewImage(java.lang.String);

  public abstract A withNewImage(java.lang.StringBuilder);

  public abstract A withNewImage(java.lang.StringBuffer);

  public abstract java.lang.String getImagePullPolicy();

  public abstract A withImagePullPolicy(java.lang.String);

  public abstract java.lang.Boolean hasImagePullPolicy();

  public abstract A withNewImagePullPolicy(java.lang.String);

  public abstract A withNewImagePullPolicy(java.lang.StringBuilder);

  public abstract A withNewImagePullPolicy(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.Lifecycle getLifecycle();

  public abstract A withLifecycle(io.dekorate.deps.kubernetes.api.model.Lifecycle);

  public abstract java.lang.Boolean hasLifecycle();

  public abstract io.dekorate.deps.kubernetes.api.model.Probe getLivenessProbe();

  public abstract A withLivenessProbe(io.dekorate.deps.kubernetes.api.model.Probe);

  public abstract java.lang.Boolean hasLivenessProbe();

  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();

  public abstract A withNewName(java.lang.String);

  public abstract A withNewName(java.lang.StringBuilder);

  public abstract A withNewName(java.lang.StringBuffer);

  public abstract A addToPorts(int, io.dekorate.deps.kubernetes.api.model.ContainerPort);

  public abstract A setToPorts(int, io.dekorate.deps.kubernetes.api.model.ContainerPort);

  public abstract A addToPorts(io.dekorate.deps.kubernetes.api.model.ContainerPort...);

  public abstract A addAllToPorts(java.util.Collection<io.dekorate.deps.kubernetes.api.model.ContainerPort>);

  public abstract A removeFromPorts(io.dekorate.deps.kubernetes.api.model.ContainerPort...);

  public abstract A removeAllFromPorts(java.util.Collection<io.dekorate.deps.kubernetes.api.model.ContainerPort>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.ContainerPort> getPorts();

  public abstract io.dekorate.deps.kubernetes.api.model.ContainerPort getPort(int);

  public abstract io.dekorate.deps.kubernetes.api.model.ContainerPort getFirstPort();

  public abstract io.dekorate.deps.kubernetes.api.model.ContainerPort getLastPort();

  public abstract io.dekorate.deps.kubernetes.api.model.ContainerPort getMatchingPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.ContainerPort>);

  public abstract java.lang.Boolean hasMatchingPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.ContainerPort>);

  public abstract A withPorts(java.util.List<io.dekorate.deps.kubernetes.api.model.ContainerPort>);

  public abstract A withPorts(io.dekorate.deps.kubernetes.api.model.ContainerPort...);

  public abstract java.lang.Boolean hasPorts();

  public abstract A addNewPort(java.lang.Integer, java.lang.String, java.lang.Integer, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.Probe getReadinessProbe();

  public abstract A withReadinessProbe(io.dekorate.deps.kubernetes.api.model.Probe);

  public abstract java.lang.Boolean hasReadinessProbe();

  public abstract io.dekorate.deps.kubernetes.api.model.ResourceRequirements getResources();

  public abstract A withResources(io.dekorate.deps.kubernetes.api.model.ResourceRequirements);

  public abstract java.lang.Boolean hasResources();

  public abstract java.lang.String getScript();

  public abstract A withScript(java.lang.String);

  public abstract java.lang.Boolean hasScript();

  public abstract A withNewScript(java.lang.String);

  public abstract A withNewScript(java.lang.StringBuilder);

  public abstract A withNewScript(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.SecurityContext getSecurityContext();

  public abstract A withSecurityContext(io.dekorate.deps.kubernetes.api.model.SecurityContext);

  public abstract java.lang.Boolean hasSecurityContext();

  public abstract io.dekorate.deps.kubernetes.api.model.Probe getStartupProbe();

  public abstract A withStartupProbe(io.dekorate.deps.kubernetes.api.model.Probe);

  public abstract java.lang.Boolean hasStartupProbe();

  public abstract java.lang.Boolean isStdin();

  public abstract A withStdin(java.lang.Boolean);

  public abstract java.lang.Boolean hasStdin();

  public abstract A withNewStdin(java.lang.String);

  public abstract A withNewStdin(boolean);

  public abstract java.lang.Boolean isStdinOnce();

  public abstract A withStdinOnce(java.lang.Boolean);

  public abstract java.lang.Boolean hasStdinOnce();

  public abstract A withNewStdinOnce(java.lang.String);

  public abstract A withNewStdinOnce(boolean);

  public abstract java.lang.String getTerminationMessagePath();

  public abstract A withTerminationMessagePath(java.lang.String);

  public abstract java.lang.Boolean hasTerminationMessagePath();

  public abstract A withNewTerminationMessagePath(java.lang.String);

  public abstract A withNewTerminationMessagePath(java.lang.StringBuilder);

  public abstract A withNewTerminationMessagePath(java.lang.StringBuffer);

  public abstract java.lang.String getTerminationMessagePolicy();

  public abstract A withTerminationMessagePolicy(java.lang.String);

  public abstract java.lang.Boolean hasTerminationMessagePolicy();

  public abstract A withNewTerminationMessagePolicy(java.lang.String);

  public abstract A withNewTerminationMessagePolicy(java.lang.StringBuilder);

  public abstract A withNewTerminationMessagePolicy(java.lang.StringBuffer);

  public abstract java.lang.Boolean isTty();

  public abstract A withTty(java.lang.Boolean);

  public abstract java.lang.Boolean hasTty();

  public abstract A withNewTty(java.lang.String);

  public abstract A withNewTty(boolean);

  public abstract A addToVolumeDevices(int, io.dekorate.deps.kubernetes.api.model.VolumeDevice);

  public abstract A setToVolumeDevices(int, io.dekorate.deps.kubernetes.api.model.VolumeDevice);

  public abstract A addToVolumeDevices(io.dekorate.deps.kubernetes.api.model.VolumeDevice...);

  public abstract A addAllToVolumeDevices(java.util.Collection<io.dekorate.deps.kubernetes.api.model.VolumeDevice>);

  public abstract A removeFromVolumeDevices(io.dekorate.deps.kubernetes.api.model.VolumeDevice...);

  public abstract A removeAllFromVolumeDevices(java.util.Collection<io.dekorate.deps.kubernetes.api.model.VolumeDevice>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.VolumeDevice> getVolumeDevices();

  public abstract io.dekorate.deps.kubernetes.api.model.VolumeDevice getVolumeDevice(int);

  public abstract io.dekorate.deps.kubernetes.api.model.VolumeDevice getFirstVolumeDevice();

  public abstract io.dekorate.deps.kubernetes.api.model.VolumeDevice getLastVolumeDevice();

  public abstract io.dekorate.deps.kubernetes.api.model.VolumeDevice getMatchingVolumeDevice(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.VolumeDevice>);

  public abstract java.lang.Boolean hasMatchingVolumeDevice(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.VolumeDevice>);

  public abstract A withVolumeDevices(java.util.List<io.dekorate.deps.kubernetes.api.model.VolumeDevice>);

  public abstract A withVolumeDevices(io.dekorate.deps.kubernetes.api.model.VolumeDevice...);

  public abstract java.lang.Boolean hasVolumeDevices();

  public abstract A addNewVolumeDevice(java.lang.String, java.lang.String);

  public abstract A addToVolumeMounts(int, io.dekorate.deps.kubernetes.api.model.VolumeMount);

  public abstract A setToVolumeMounts(int, io.dekorate.deps.kubernetes.api.model.VolumeMount);

  public abstract A addToVolumeMounts(io.dekorate.deps.kubernetes.api.model.VolumeMount...);

  public abstract A addAllToVolumeMounts(java.util.Collection<io.dekorate.deps.kubernetes.api.model.VolumeMount>);

  public abstract A removeFromVolumeMounts(io.dekorate.deps.kubernetes.api.model.VolumeMount...);

  public abstract A removeAllFromVolumeMounts(java.util.Collection<io.dekorate.deps.kubernetes.api.model.VolumeMount>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.VolumeMount> getVolumeMounts();

  public abstract io.dekorate.deps.kubernetes.api.model.VolumeMount getVolumeMount(int);

  public abstract io.dekorate.deps.kubernetes.api.model.VolumeMount getFirstVolumeMount();

  public abstract io.dekorate.deps.kubernetes.api.model.VolumeMount getLastVolumeMount();

  public abstract io.dekorate.deps.kubernetes.api.model.VolumeMount getMatchingVolumeMount(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.VolumeMount>);

  public abstract java.lang.Boolean hasMatchingVolumeMount(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.VolumeMount>);

  public abstract A withVolumeMounts(java.util.List<io.dekorate.deps.kubernetes.api.model.VolumeMount>);

  public abstract A withVolumeMounts(io.dekorate.deps.kubernetes.api.model.VolumeMount...);

  public abstract java.lang.Boolean hasVolumeMounts();

  public abstract java.lang.String getWorkingDir();

  public abstract A withWorkingDir(java.lang.String);

  public abstract java.lang.Boolean hasWorkingDir();

  public abstract A withNewWorkingDir(java.lang.String);

  public abstract A withNewWorkingDir(java.lang.StringBuilder);

  public abstract A withNewWorkingDir(java.lang.StringBuffer);
}
