Compiled from "RequestConfigFluent.java"
public interface io.dekorate.deps.kubernetes.client.RequestConfigFluent<A extends io.dekorate.deps.kubernetes.client.RequestConfigFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getUsername();

  public abstract A withUsername(java.lang.String);

  public abstract java.lang.Boolean hasUsername();

  public abstract A withNewUsername(java.lang.String);

  public abstract A withNewUsername(java.lang.StringBuilder);

  public abstract A withNewUsername(java.lang.StringBuffer);

  public abstract java.lang.String getPassword();

  public abstract A withPassword(java.lang.String);

  public abstract java.lang.Boolean hasPassword();

  public abstract A withNewPassword(java.lang.String);

  public abstract A withNewPassword(java.lang.StringBuilder);

  public abstract A withNewPassword(java.lang.StringBuffer);

  public abstract java.lang.String getOauthToken();

  public abstract A withOauthToken(java.lang.String);

  public abstract java.lang.Boolean hasOauthToken();

  public abstract A withNewOauthToken(java.lang.String);

  public abstract A withNewOauthToken(java.lang.StringBuilder);

  public abstract A withNewOauthToken(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.client.OAuthTokenProvider getOauthTokenProvider();

  public abstract A withOauthTokenProvider(io.dekorate.deps.kubernetes.client.OAuthTokenProvider);

  public abstract java.lang.Boolean hasOauthTokenProvider();

  public abstract java.lang.String getImpersonateUsername();

  public abstract A withImpersonateUsername(java.lang.String);

  public abstract java.lang.Boolean hasImpersonateUsername();

  public abstract A withNewImpersonateUsername(java.lang.String);

  public abstract A withNewImpersonateUsername(java.lang.StringBuilder);

  public abstract A withNewImpersonateUsername(java.lang.StringBuffer);

  public abstract A withImpersonateGroups(java.lang.String...);

  public abstract java.lang.String[] getImpersonateGroups();

  public abstract A addToImpersonateGroups(int, java.lang.String);

  public abstract A setToImpersonateGroups(int, java.lang.String);

  public abstract A addToImpersonateGroups(java.lang.String...);

  public abstract A addAllToImpersonateGroups(java.util.Collection<java.lang.String>);

  public abstract A removeFromImpersonateGroups(java.lang.String...);

  public abstract A removeAllFromImpersonateGroups(java.util.Collection<java.lang.String>);

  public abstract java.lang.Boolean hasImpersonateGroups();

  public abstract A addNewImpersonateGroup(java.lang.String);

  public abstract A addNewImpersonateGroup(java.lang.StringBuilder);

  public abstract A addNewImpersonateGroup(java.lang.StringBuffer);

  public abstract A addToImpersonateExtras(java.lang.String, java.util.List<java.lang.String>);

  public abstract A addToImpersonateExtras(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);

  public abstract A removeFromImpersonateExtras(java.lang.String);

  public abstract A removeFromImpersonateExtras(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);

  public abstract java.util.Map<java.lang.String, java.util.List<java.lang.String>> getImpersonateExtras();

  public abstract A withImpersonateExtras(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);

  public abstract java.lang.Boolean hasImpersonateExtras();

  public abstract int getWatchReconnectInterval();

  public abstract A withWatchReconnectInterval(int);

  public abstract java.lang.Boolean hasWatchReconnectInterval();

  public abstract int getWatchReconnectLimit();

  public abstract A withWatchReconnectLimit(int);

  public abstract java.lang.Boolean hasWatchReconnectLimit();

  public abstract int getConnectionTimeout();

  public abstract A withConnectionTimeout(int);

  public abstract java.lang.Boolean hasConnectionTimeout();

  public abstract int getRequestTimeout();

  public abstract A withRequestTimeout(int);

  public abstract java.lang.Boolean hasRequestTimeout();

  public abstract long getRollingTimeout();

  public abstract A withRollingTimeout(long);

  public abstract java.lang.Boolean hasRollingTimeout();

  public abstract long getScaleTimeout();

  public abstract A withScaleTimeout(long);

  public abstract java.lang.Boolean hasScaleTimeout();

  public abstract int getLoggingInterval();

  public abstract A withLoggingInterval(int);

  public abstract java.lang.Boolean hasLoggingInterval();

  public abstract long getWebsocketTimeout();

  public abstract A withWebsocketTimeout(long);

  public abstract java.lang.Boolean hasWebsocketTimeout();

  public abstract long getWebsocketPingInterval();

  public abstract A withWebsocketPingInterval(long);

  public abstract java.lang.Boolean hasWebsocketPingInterval();

  public abstract int getMaxConcurrentRequests();

  public abstract A withMaxConcurrentRequests(int);

  public abstract java.lang.Boolean hasMaxConcurrentRequests();

  public abstract int getMaxConcurrentRequestsPerHost();

  public abstract A withMaxConcurrentRequestsPerHost(int);

  public abstract java.lang.Boolean hasMaxConcurrentRequestsPerHost();
}
