Compiled from "DockerBuildStrategyFluent.java"
public interface io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent<A extends io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToBuildArgs(int, io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract A setToBuildArgs(int, io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract A addToBuildArgs(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract A addAllToBuildArgs(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A removeFromBuildArgs(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract A removeAllFromBuildArgs(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A removeMatchingFromBuildArgs(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVarBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EnvVar> getBuildArgs();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EnvVar> buildBuildArgs();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar buildBuildArg(int);

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar buildFirstBuildArg();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar buildLastBuildArg();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar buildMatchingBuildArg(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVarBuilder>);

  public abstract java.lang.Boolean hasMatchingBuildArg(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVarBuilder>);

  public abstract A withBuildArgs(java.util.List<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A withBuildArgs(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract java.lang.Boolean hasBuildArgs();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$BuildArgsNested<A> addNewBuildArg();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$BuildArgsNested<A> addNewBuildArgLike(io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$BuildArgsNested<A> setNewBuildArgLike(int, io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$BuildArgsNested<A> editBuildArg(int);

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$BuildArgsNested<A> editFirstBuildArg();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$BuildArgsNested<A> editLastBuildArg();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$BuildArgsNested<A> editMatchingBuildArg(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVarBuilder>);

  public abstract java.lang.String getDockerfilePath();

  public abstract A withDockerfilePath(java.lang.String);

  public abstract java.lang.Boolean hasDockerfilePath();

  public abstract A withNewDockerfilePath(java.lang.String);

  public abstract A withNewDockerfilePath(java.lang.StringBuilder);

  public abstract A withNewDockerfilePath(java.lang.StringBuffer);

  public abstract A addToEnv(int, io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract A setToEnv(int, io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract A addToEnv(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract A addAllToEnv(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A removeFromEnv(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract A removeAllFromEnv(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A removeMatchingFromEnv(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVarBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EnvVar> getEnv();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EnvVar> buildEnv();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar buildEnv(int);

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar buildFirstEnv();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar buildLastEnv();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar buildMatchingEnv(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVarBuilder>);

  public abstract java.lang.Boolean hasMatchingEnv(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVarBuilder>);

  public abstract A withEnv(java.util.List<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract java.lang.Boolean hasEnv();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$EnvNested<A> addNewEnv();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$EnvNested<A> addNewEnvLike(io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$EnvNested<A> setNewEnvLike(int, io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$EnvNested<A> editEnv(int);

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$EnvNested<A> editFirstEnv();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$EnvNested<A> editLastEnv();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$EnvNested<A> editMatchingEnv(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVarBuilder>);

  public abstract java.lang.Boolean isForcePull();

  public abstract A withForcePull(java.lang.Boolean);

  public abstract java.lang.Boolean hasForcePull();

  public abstract A withNewForcePull(java.lang.String);

  public abstract A withNewForcePull(boolean);

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectReference getFrom();

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectReference buildFrom();

  public abstract A withFrom(io.dekorate.deps.kubernetes.api.model.ObjectReference);

  public abstract java.lang.Boolean hasFrom();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$FromNested<A> withNewFrom();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$FromNested<A> withNewFromLike(io.dekorate.deps.kubernetes.api.model.ObjectReference);

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$FromNested<A> editFrom();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$FromNested<A> editOrNewFrom();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$FromNested<A> editOrNewFromLike(io.dekorate.deps.kubernetes.api.model.ObjectReference);

  public abstract java.lang.String getImageOptimizationPolicy();

  public abstract A withImageOptimizationPolicy(java.lang.String);

  public abstract java.lang.Boolean hasImageOptimizationPolicy();

  public abstract A withNewImageOptimizationPolicy(java.lang.String);

  public abstract A withNewImageOptimizationPolicy(java.lang.StringBuilder);

  public abstract A withNewImageOptimizationPolicy(java.lang.StringBuffer);

  public abstract java.lang.Boolean isNoCache();

  public abstract A withNoCache(java.lang.Boolean);

  public abstract java.lang.Boolean hasNoCache();

  public abstract A withNewNoCache(java.lang.String);

  public abstract A withNewNoCache(boolean);

  public abstract io.dekorate.deps.kubernetes.api.model.LocalObjectReference getPullSecret();

  public abstract io.dekorate.deps.kubernetes.api.model.LocalObjectReference buildPullSecret();

  public abstract A withPullSecret(io.dekorate.deps.kubernetes.api.model.LocalObjectReference);

  public abstract java.lang.Boolean hasPullSecret();

  public abstract A withNewPullSecret(java.lang.String);

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$PullSecretNested<A> withNewPullSecret();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$PullSecretNested<A> withNewPullSecretLike(io.dekorate.deps.kubernetes.api.model.LocalObjectReference);

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$PullSecretNested<A> editPullSecret();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$PullSecretNested<A> editOrNewPullSecret();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategyFluent$PullSecretNested<A> editOrNewPullSecretLike(io.dekorate.deps.kubernetes.api.model.LocalObjectReference);
}
