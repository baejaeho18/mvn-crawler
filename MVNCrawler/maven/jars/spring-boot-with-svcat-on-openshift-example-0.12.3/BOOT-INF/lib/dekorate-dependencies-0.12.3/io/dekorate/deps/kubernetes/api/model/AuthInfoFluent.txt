Compiled from "AuthInfoFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.AuthInfoFluent<A extends io.dekorate.deps.kubernetes.api.model.AuthInfoFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getAs();

  public abstract A withAs(java.lang.String);

  public abstract java.lang.Boolean hasAs();

  public abstract A withNewAs(java.lang.String);

  public abstract A withNewAs(java.lang.StringBuilder);

  public abstract A withNewAs(java.lang.StringBuffer);

  public abstract A addToAsGroups(int, java.lang.String);

  public abstract A setToAsGroups(int, java.lang.String);

  public abstract A addToAsGroups(java.lang.String...);

  public abstract A addAllToAsGroups(java.util.Collection<java.lang.String>);

  public abstract A removeFromAsGroups(java.lang.String...);

  public abstract A removeAllFromAsGroups(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getAsGroups();

  public abstract java.lang.String getAsGroup(int);

  public abstract java.lang.String getFirstAsGroup();

  public abstract java.lang.String getLastAsGroup();

  public abstract java.lang.String getMatchingAsGroup(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingAsGroup(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withAsGroups(java.util.List<java.lang.String>);

  public abstract A withAsGroups(java.lang.String...);

  public abstract java.lang.Boolean hasAsGroups();

  public abstract A addNewAsGroup(java.lang.String);

  public abstract A addNewAsGroup(java.lang.StringBuilder);

  public abstract A addNewAsGroup(java.lang.StringBuffer);

  public abstract A addToAsUserExtra(java.lang.String, java.util.ArrayList<java.lang.String>);

  public abstract A addToAsUserExtra(java.util.Map<java.lang.String, java.util.ArrayList<java.lang.String>>);

  public abstract A removeFromAsUserExtra(java.lang.String);

  public abstract A removeFromAsUserExtra(java.util.Map<java.lang.String, java.util.ArrayList<java.lang.String>>);

  public abstract java.util.Map<java.lang.String, java.util.ArrayList<java.lang.String>> getAsUserExtra();

  public abstract A withAsUserExtra(java.util.Map<java.lang.String, java.util.ArrayList<java.lang.String>>);

  public abstract java.lang.Boolean hasAsUserExtra();

  public abstract io.dekorate.deps.kubernetes.api.model.AuthProviderConfig getAuthProvider();

  public abstract io.dekorate.deps.kubernetes.api.model.AuthProviderConfig buildAuthProvider();

  public abstract A withAuthProvider(io.dekorate.deps.kubernetes.api.model.AuthProviderConfig);

  public abstract java.lang.Boolean hasAuthProvider();

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$AuthProviderNested<A> withNewAuthProvider();

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$AuthProviderNested<A> withNewAuthProviderLike(io.dekorate.deps.kubernetes.api.model.AuthProviderConfig);

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$AuthProviderNested<A> editAuthProvider();

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$AuthProviderNested<A> editOrNewAuthProvider();

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$AuthProviderNested<A> editOrNewAuthProviderLike(io.dekorate.deps.kubernetes.api.model.AuthProviderConfig);

  public abstract java.lang.String getClientCertificate();

  public abstract A withClientCertificate(java.lang.String);

  public abstract java.lang.Boolean hasClientCertificate();

  public abstract A withNewClientCertificate(java.lang.String);

  public abstract A withNewClientCertificate(java.lang.StringBuilder);

  public abstract A withNewClientCertificate(java.lang.StringBuffer);

  public abstract java.lang.String getClientCertificateData();

  public abstract A withClientCertificateData(java.lang.String);

  public abstract java.lang.Boolean hasClientCertificateData();

  public abstract A withNewClientCertificateData(java.lang.String);

  public abstract A withNewClientCertificateData(java.lang.StringBuilder);

  public abstract A withNewClientCertificateData(java.lang.StringBuffer);

  public abstract java.lang.String getClientKey();

  public abstract A withClientKey(java.lang.String);

  public abstract java.lang.Boolean hasClientKey();

  public abstract A withNewClientKey(java.lang.String);

  public abstract A withNewClientKey(java.lang.StringBuilder);

  public abstract A withNewClientKey(java.lang.StringBuffer);

  public abstract java.lang.String getClientKeyData();

  public abstract A withClientKeyData(java.lang.String);

  public abstract java.lang.Boolean hasClientKeyData();

  public abstract A withNewClientKeyData(java.lang.String);

  public abstract A withNewClientKeyData(java.lang.StringBuilder);

  public abstract A withNewClientKeyData(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.ExecConfig getExec();

  public abstract io.dekorate.deps.kubernetes.api.model.ExecConfig buildExec();

  public abstract A withExec(io.dekorate.deps.kubernetes.api.model.ExecConfig);

  public abstract java.lang.Boolean hasExec();

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$ExecNested<A> withNewExec();

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$ExecNested<A> withNewExecLike(io.dekorate.deps.kubernetes.api.model.ExecConfig);

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$ExecNested<A> editExec();

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$ExecNested<A> editOrNewExec();

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$ExecNested<A> editOrNewExecLike(io.dekorate.deps.kubernetes.api.model.ExecConfig);

  public abstract A addToExtensions(int, io.dekorate.deps.kubernetes.api.model.NamedExtension);

  public abstract A setToExtensions(int, io.dekorate.deps.kubernetes.api.model.NamedExtension);

  public abstract A addToExtensions(io.dekorate.deps.kubernetes.api.model.NamedExtension...);

  public abstract A addAllToExtensions(java.util.Collection<io.dekorate.deps.kubernetes.api.model.NamedExtension>);

  public abstract A removeFromExtensions(io.dekorate.deps.kubernetes.api.model.NamedExtension...);

  public abstract A removeAllFromExtensions(java.util.Collection<io.dekorate.deps.kubernetes.api.model.NamedExtension>);

  public abstract A removeMatchingFromExtensions(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.NamedExtensionBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.NamedExtension> getExtensions();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.NamedExtension> buildExtensions();

  public abstract io.dekorate.deps.kubernetes.api.model.NamedExtension buildExtension(int);

  public abstract io.dekorate.deps.kubernetes.api.model.NamedExtension buildFirstExtension();

  public abstract io.dekorate.deps.kubernetes.api.model.NamedExtension buildLastExtension();

  public abstract io.dekorate.deps.kubernetes.api.model.NamedExtension buildMatchingExtension(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.NamedExtensionBuilder>);

  public abstract java.lang.Boolean hasMatchingExtension(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.NamedExtensionBuilder>);

  public abstract A withExtensions(java.util.List<io.dekorate.deps.kubernetes.api.model.NamedExtension>);

  public abstract A withExtensions(io.dekorate.deps.kubernetes.api.model.NamedExtension...);

  public abstract java.lang.Boolean hasExtensions();

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$ExtensionsNested<A> addNewExtension();

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$ExtensionsNested<A> addNewExtensionLike(io.dekorate.deps.kubernetes.api.model.NamedExtension);

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$ExtensionsNested<A> setNewExtensionLike(int, io.dekorate.deps.kubernetes.api.model.NamedExtension);

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$ExtensionsNested<A> editExtension(int);

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$ExtensionsNested<A> editFirstExtension();

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$ExtensionsNested<A> editLastExtension();

  public abstract io.dekorate.deps.kubernetes.api.model.AuthInfoFluent$ExtensionsNested<A> editMatchingExtension(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.NamedExtensionBuilder>);

  public abstract java.lang.String getPassword();

  public abstract A withPassword(java.lang.String);

  public abstract java.lang.Boolean hasPassword();

  public abstract A withNewPassword(java.lang.String);

  public abstract A withNewPassword(java.lang.StringBuilder);

  public abstract A withNewPassword(java.lang.StringBuffer);

  public abstract java.lang.String getToken();

  public abstract A withToken(java.lang.String);

  public abstract java.lang.Boolean hasToken();

  public abstract A withNewToken(java.lang.String);

  public abstract A withNewToken(java.lang.StringBuilder);

  public abstract A withNewToken(java.lang.StringBuffer);

  public abstract java.lang.String getTokenFile();

  public abstract A withTokenFile(java.lang.String);

  public abstract java.lang.Boolean hasTokenFile();

  public abstract A withNewTokenFile(java.lang.String);

  public abstract A withNewTokenFile(java.lang.StringBuilder);

  public abstract A withNewTokenFile(java.lang.StringBuffer);

  public abstract java.lang.String getUsername();

  public abstract A withUsername(java.lang.String);

  public abstract java.lang.Boolean hasUsername();

  public abstract A withNewUsername(java.lang.String);

  public abstract A withNewUsername(java.lang.StringBuilder);

  public abstract A withNewUsername(java.lang.StringBuffer);
}
