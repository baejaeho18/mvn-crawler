Compiled from "ParallelBranchFluent.java"
public interface io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent<A extends io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.knative.duck.v1.Destination getFilter();

  public abstract io.dekorate.deps.knative.duck.v1.Destination buildFilter();

  public abstract A withFilter(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract java.lang.Boolean hasFilter();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$FilterNested<A> withNewFilter();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$FilterNested<A> withNewFilterLike(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$FilterNested<A> editFilter();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$FilterNested<A> editOrNewFilter();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$FilterNested<A> editOrNewFilterLike(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract io.dekorate.deps.knative.duck.v1.Destination getReply();

  public abstract io.dekorate.deps.knative.duck.v1.Destination buildReply();

  public abstract A withReply(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract java.lang.Boolean hasReply();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$ReplyNested<A> withNewReply();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$ReplyNested<A> withNewReplyLike(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$ReplyNested<A> editReply();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$ReplyNested<A> editOrNewReply();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$ReplyNested<A> editOrNewReplyLike(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract io.dekorate.deps.knative.duck.v1.Destination getSubscriber();

  public abstract io.dekorate.deps.knative.duck.v1.Destination buildSubscriber();

  public abstract A withSubscriber(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract java.lang.Boolean hasSubscriber();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$SubscriberNested<A> withNewSubscriber();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$SubscriberNested<A> withNewSubscriberLike(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$SubscriberNested<A> editSubscriber();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$SubscriberNested<A> editOrNewSubscriber();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchFluent$SubscriberNested<A> editOrNewSubscriberLike(io.dekorate.deps.knative.duck.v1.Destination);
}
