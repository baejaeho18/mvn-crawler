Compiled from "StorageClassFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.storage.StorageClassFluent<A extends io.dekorate.deps.kubernetes.api.model.storage.StorageClassFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Boolean isAllowVolumeExpansion();

  public abstract A withAllowVolumeExpansion(java.lang.Boolean);

  public abstract java.lang.Boolean hasAllowVolumeExpansion();

  public abstract A withNewAllowVolumeExpansion(java.lang.String);

  public abstract A withNewAllowVolumeExpansion(boolean);

  public abstract A addToAllowedTopologies(int, io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm);

  public abstract A setToAllowedTopologies(int, io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm);

  public abstract A addToAllowedTopologies(io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm...);

  public abstract A addAllToAllowedTopologies(java.util.Collection<io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm>);

  public abstract A removeFromAllowedTopologies(io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm...);

  public abstract A removeAllFromAllowedTopologies(java.util.Collection<io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm>);

  public abstract A removeMatchingFromAllowedTopologies(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.TopologySelectorTermBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm> getAllowedTopologies();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm> buildAllowedTopologies();

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm buildAllowedTopology(int);

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm buildFirstAllowedTopology();

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm buildLastAllowedTopology();

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm buildMatchingAllowedTopology(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.TopologySelectorTermBuilder>);

  public abstract java.lang.Boolean hasMatchingAllowedTopology(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.TopologySelectorTermBuilder>);

  public abstract A withAllowedTopologies(java.util.List<io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm>);

  public abstract A withAllowedTopologies(io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm...);

  public abstract java.lang.Boolean hasAllowedTopologies();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClassFluent$AllowedTopologiesNested<A> addNewAllowedTopology();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClassFluent$AllowedTopologiesNested<A> addNewAllowedTopologyLike(io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm);

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClassFluent$AllowedTopologiesNested<A> setNewAllowedTopologyLike(int, io.dekorate.deps.kubernetes.api.model.TopologySelectorTerm);

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClassFluent$AllowedTopologiesNested<A> editAllowedTopology(int);

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClassFluent$AllowedTopologiesNested<A> editFirstAllowedTopology();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClassFluent$AllowedTopologiesNested<A> editLastAllowedTopology();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClassFluent$AllowedTopologiesNested<A> editMatchingAllowedTopology(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.TopologySelectorTermBuilder>);

  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectMeta getMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectMeta buildMetadata();

  public abstract A withMetadata(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Boolean hasMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClassFluent$MetadataNested<A> withNewMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClassFluent$MetadataNested<A> withNewMetadataLike(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClassFluent$MetadataNested<A> editMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClassFluent$MetadataNested<A> editOrNewMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClassFluent$MetadataNested<A> editOrNewMetadataLike(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract A addToMountOptions(int, java.lang.String);

  public abstract A setToMountOptions(int, java.lang.String);

  public abstract A addToMountOptions(java.lang.String...);

  public abstract A addAllToMountOptions(java.util.Collection<java.lang.String>);

  public abstract A removeFromMountOptions(java.lang.String...);

  public abstract A removeAllFromMountOptions(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getMountOptions();

  public abstract java.lang.String getMountOption(int);

  public abstract java.lang.String getFirstMountOption();

  public abstract java.lang.String getLastMountOption();

  public abstract java.lang.String getMatchingMountOption(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingMountOption(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withMountOptions(java.util.List<java.lang.String>);

  public abstract A withMountOptions(java.lang.String...);

  public abstract java.lang.Boolean hasMountOptions();

  public abstract A addNewMountOption(java.lang.String);

  public abstract A addNewMountOption(java.lang.StringBuilder);

  public abstract A addNewMountOption(java.lang.StringBuffer);

  public abstract A addToParameters(java.lang.String, java.lang.String);

  public abstract A addToParameters(java.util.Map<java.lang.String, java.lang.String>);

  public abstract A removeFromParameters(java.lang.String);

  public abstract A removeFromParameters(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.Map<java.lang.String, java.lang.String> getParameters();

  public abstract A withParameters(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.Boolean hasParameters();

  public abstract java.lang.String getProvisioner();

  public abstract A withProvisioner(java.lang.String);

  public abstract java.lang.Boolean hasProvisioner();

  public abstract A withNewProvisioner(java.lang.String);

  public abstract A withNewProvisioner(java.lang.StringBuilder);

  public abstract A withNewProvisioner(java.lang.StringBuffer);

  public abstract java.lang.String getReclaimPolicy();

  public abstract A withReclaimPolicy(java.lang.String);

  public abstract java.lang.Boolean hasReclaimPolicy();

  public abstract A withNewReclaimPolicy(java.lang.String);

  public abstract A withNewReclaimPolicy(java.lang.StringBuilder);

  public abstract A withNewReclaimPolicy(java.lang.StringBuffer);

  public abstract java.lang.String getVolumeBindingMode();

  public abstract A withVolumeBindingMode(java.lang.String);

  public abstract java.lang.Boolean hasVolumeBindingMode();

  public abstract A withNewVolumeBindingMode(java.lang.String);

  public abstract A withNewVolumeBindingMode(java.lang.StringBuilder);

  public abstract A withNewVolumeBindingMode(java.lang.StringBuffer);
}
