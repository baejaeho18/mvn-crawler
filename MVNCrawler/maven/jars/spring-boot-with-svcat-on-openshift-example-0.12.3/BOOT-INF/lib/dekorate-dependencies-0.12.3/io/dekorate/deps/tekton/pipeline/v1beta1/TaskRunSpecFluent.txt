Compiled from "TaskRunSpecFluent.java"
public interface io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent<A extends io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToParams(int, io.dekorate.deps.tekton.pipeline.v1beta1.Param);

  public abstract A setToParams(int, io.dekorate.deps.tekton.pipeline.v1beta1.Param);

  public abstract A addToParams(io.dekorate.deps.tekton.pipeline.v1beta1.Param...);

  public abstract A addAllToParams(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.Param>);

  public abstract A removeFromParams(io.dekorate.deps.tekton.pipeline.v1beta1.Param...);

  public abstract A removeAllFromParams(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.Param>);

  public abstract A removeMatchingFromParams(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Param> getParams();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Param> buildParams();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Param buildParam(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Param buildFirstParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Param buildLastParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Param buildMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamBuilder>);

  public abstract java.lang.Boolean hasMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamBuilder>);

  public abstract A withParams(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Param>);

  public abstract A withParams(io.dekorate.deps.tekton.pipeline.v1beta1.Param...);

  public abstract java.lang.Boolean hasParams();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$ParamsNested<A> addNewParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$ParamsNested<A> addNewParamLike(io.dekorate.deps.tekton.pipeline.v1beta1.Param);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$ParamsNested<A> setNewParamLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.Param);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$ParamsNested<A> editParam(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$ParamsNested<A> editFirstParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$ParamsNested<A> editLastParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$ParamsNested<A> editMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamBuilder>);

  public abstract io.dekorate.deps.tekton.pipeline.pod.Template getPodTemplate();

  public abstract io.dekorate.deps.tekton.pipeline.pod.Template buildPodTemplate();

  public abstract A withPodTemplate(io.dekorate.deps.tekton.pipeline.pod.Template);

  public abstract java.lang.Boolean hasPodTemplate();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$PodTemplateNested<A> withNewPodTemplate();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$PodTemplateNested<A> withNewPodTemplateLike(io.dekorate.deps.tekton.pipeline.pod.Template);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$PodTemplateNested<A> editPodTemplate();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$PodTemplateNested<A> editOrNewPodTemplate();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$PodTemplateNested<A> editOrNewPodTemplateLike(io.dekorate.deps.tekton.pipeline.pod.Template);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResources getResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResources buildResources();

  public abstract A withResources(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResources);

  public abstract java.lang.Boolean hasResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$ResourcesNested<A> withNewResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$ResourcesNested<A> withNewResourcesLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResources);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$ResourcesNested<A> editResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$ResourcesNested<A> editOrNewResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$ResourcesNested<A> editOrNewResourcesLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunResources);

  public abstract java.lang.String getServiceAccountName();

  public abstract A withServiceAccountName(java.lang.String);

  public abstract java.lang.Boolean hasServiceAccountName();

  public abstract A withNewServiceAccountName(java.lang.String);

  public abstract A withNewServiceAccountName(java.lang.StringBuilder);

  public abstract A withNewServiceAccountName(java.lang.StringBuffer);

  public abstract java.lang.String getStatus();

  public abstract A withStatus(java.lang.String);

  public abstract java.lang.Boolean hasStatus();

  public abstract A withNewStatus(java.lang.String);

  public abstract A withNewStatus(java.lang.StringBuilder);

  public abstract A withNewStatus(java.lang.StringBuffer);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef getTaskRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef buildTaskRef();

  public abstract A withTaskRef(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef);

  public abstract java.lang.Boolean hasTaskRef();

  public abstract A withNewTaskRef(java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$TaskRefNested<A> withNewTaskRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$TaskRefNested<A> withNewTaskRefLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$TaskRefNested<A> editTaskRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$TaskRefNested<A> editOrNewTaskRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$TaskRefNested<A> editOrNewTaskRefLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpec getTaskSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpec buildTaskSpec();

  public abstract A withTaskSpec(io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpec);

  public abstract java.lang.Boolean hasTaskSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$TaskSpecNested<A> withNewTaskSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$TaskSpecNested<A> withNewTaskSpecLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpec);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$TaskSpecNested<A> editTaskSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$TaskSpecNested<A> editOrNewTaskSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$TaskSpecNested<A> editOrNewTaskSpecLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpec);

  public abstract java.lang.String getTimeout();

  public abstract A withTimeout(java.lang.String);

  public abstract java.lang.Boolean hasTimeout();

  public abstract A withNewTimeout(java.lang.String);

  public abstract A withNewTimeout(java.lang.StringBuilder);

  public abstract A withNewTimeout(java.lang.StringBuffer);

  public abstract A addToWorkspaces(int, io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding);

  public abstract A setToWorkspaces(int, io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding);

  public abstract A addToWorkspaces(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding...);

  public abstract A addAllToWorkspaces(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding>);

  public abstract A removeFromWorkspaces(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding...);

  public abstract A removeAllFromWorkspaces(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding>);

  public abstract A removeMatchingFromWorkspaces(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBindingBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding> getWorkspaces();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding> buildWorkspaces();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding buildWorkspace(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding buildFirstWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding buildLastWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding buildMatchingWorkspace(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBindingBuilder>);

  public abstract java.lang.Boolean hasMatchingWorkspace(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBindingBuilder>);

  public abstract A withWorkspaces(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding>);

  public abstract A withWorkspaces(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding...);

  public abstract java.lang.Boolean hasWorkspaces();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$WorkspacesNested<A> addNewWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$WorkspacesNested<A> addNewWorkspaceLike(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$WorkspacesNested<A> setNewWorkspaceLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$WorkspacesNested<A> editWorkspace(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$WorkspacesNested<A> editFirstWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$WorkspacesNested<A> editLastWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunSpecFluent$WorkspacesNested<A> editMatchingWorkspace(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBindingBuilder>);
}
