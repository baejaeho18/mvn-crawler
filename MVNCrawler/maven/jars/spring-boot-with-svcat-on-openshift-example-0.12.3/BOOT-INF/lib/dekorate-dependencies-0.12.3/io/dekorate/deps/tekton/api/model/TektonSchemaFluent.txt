Compiled from "TektonSchemaFluent.java"
public interface io.dekorate.deps.tekton.api.model.TektonSchemaFluent<A extends io.dekorate.deps.tekton.api.model.TektonSchemaFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.tekton.resource.v1alpha1.PipelineResource getPipelineResource();

  public abstract io.dekorate.deps.tekton.resource.v1alpha1.PipelineResource buildPipelineResource();

  public abstract A withPipelineResource(io.dekorate.deps.tekton.resource.v1alpha1.PipelineResource);

  public abstract java.lang.Boolean hasPipelineResource();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$PipelineResourceNested<A> withNewPipelineResource();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$PipelineResourceNested<A> withNewPipelineResourceLike(io.dekorate.deps.tekton.resource.v1alpha1.PipelineResource);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$PipelineResourceNested<A> editPipelineResource();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$PipelineResourceNested<A> editOrNewPipelineResource();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$PipelineResourceNested<A> editOrNewPipelineResourceLike(io.dekorate.deps.tekton.resource.v1alpha1.PipelineResource);

  public abstract io.dekorate.deps.tekton.resource.v1alpha1.PipelineResourceList getPipelineResourceList();

  public abstract io.dekorate.deps.tekton.resource.v1alpha1.PipelineResourceList buildPipelineResourceList();

  public abstract A withPipelineResourceList(io.dekorate.deps.tekton.resource.v1alpha1.PipelineResourceList);

  public abstract java.lang.Boolean hasPipelineResourceList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$PipelineResourceListNested<A> withNewPipelineResourceList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$PipelineResourceListNested<A> withNewPipelineResourceListLike(io.dekorate.deps.tekton.resource.v1alpha1.PipelineResourceList);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$PipelineResourceListNested<A> editPipelineResourceList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$PipelineResourceListNested<A> editOrNewPipelineResourceList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$PipelineResourceListNested<A> editOrNewPipelineResourceListLike(io.dekorate.deps.tekton.resource.v1alpha1.PipelineResourceList);

  public abstract io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration getResourceDeclaration();

  public abstract io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration buildResourceDeclaration();

  public abstract A withResourceDeclaration(io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration);

  public abstract java.lang.Boolean hasResourceDeclaration();

  public abstract A withNewResourceDeclaration(java.lang.String, java.lang.String, java.lang.Boolean, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$ResourceDeclarationNested<A> withNewResourceDeclaration();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$ResourceDeclarationNested<A> withNewResourceDeclarationLike(io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$ResourceDeclarationNested<A> editResourceDeclaration();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$ResourceDeclarationNested<A> editOrNewResourceDeclaration();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$ResourceDeclarationNested<A> editOrNewResourceDeclarationLike(io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration);

  public abstract io.dekorate.deps.tekton.pipeline.pod.Template getTemplate();

  public abstract io.dekorate.deps.tekton.pipeline.pod.Template buildTemplate();

  public abstract A withTemplate(io.dekorate.deps.tekton.pipeline.pod.Template);

  public abstract java.lang.Boolean hasTemplate();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$TemplateNested<A> withNewTemplate();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$TemplateNested<A> withNewTemplateLike(io.dekorate.deps.tekton.pipeline.pod.Template);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$TemplateNested<A> editTemplate();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$TemplateNested<A> editOrNewTemplate();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$TemplateNested<A> editOrNewTemplateLike(io.dekorate.deps.tekton.pipeline.pod.Template);

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.Condition getV1alpha1Condition();

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.Condition buildV1alpha1Condition();

  public abstract A withV1alpha1Condition(io.dekorate.deps.tekton.pipeline.v1alpha1.Condition);

  public abstract java.lang.Boolean hasV1alpha1Condition();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1V1alpha1ConditionNested<A> withNewV1alpha1V1alpha1Condition();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1V1alpha1ConditionNested<A> withNewV1alpha1ConditionLike(io.dekorate.deps.tekton.pipeline.v1alpha1.Condition);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1V1alpha1ConditionNested<A> editV1alpha1V1alpha1Condition();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1V1alpha1ConditionNested<A> editOrNewV1alpha1Condition();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1V1alpha1ConditionNested<A> editOrNewV1alpha1ConditionLike(io.dekorate.deps.tekton.pipeline.v1alpha1.Condition);

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionList getV1alpha1ConditionList();

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionList buildV1alpha1ConditionList();

  public abstract A withV1alpha1ConditionList(io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionList);

  public abstract java.lang.Boolean hasV1alpha1ConditionList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1ConditionListNested<A> withNewV1alpha1ConditionList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1ConditionListNested<A> withNewV1alpha1ConditionListLike(io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionList);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1ConditionListNested<A> editV1alpha1ConditionList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1ConditionListNested<A> editOrNewV1alpha1ConditionList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1ConditionListNested<A> editOrNewV1alpha1ConditionListLike(io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionList);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunConditionCheckStatus getV1alpha1PipelineRunConditionCheckStatus();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunConditionCheckStatus buildV1alpha1PipelineRunConditionCheckStatus();

  public abstract A withV1alpha1PipelineRunConditionCheckStatus(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunConditionCheckStatus);

  public abstract java.lang.Boolean hasV1alpha1PipelineRunConditionCheckStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1PipelineRunConditionCheckStatusNested<A> withNewV1alpha1PipelineRunConditionCheckStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1PipelineRunConditionCheckStatusNested<A> withNewV1alpha1PipelineRunConditionCheckStatusLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunConditionCheckStatus);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1PipelineRunConditionCheckStatusNested<A> editV1alpha1PipelineRunConditionCheckStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1PipelineRunConditionCheckStatusNested<A> editOrNewV1alpha1PipelineRunConditionCheckStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1PipelineRunConditionCheckStatusNested<A> editOrNewV1alpha1PipelineRunConditionCheckStatusLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunConditionCheckStatus);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunTaskRunStatus getV1alpha1PipelineRunTaskRunStatus();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunTaskRunStatus buildV1alpha1PipelineRunTaskRunStatus();

  public abstract A withV1alpha1PipelineRunTaskRunStatus(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunTaskRunStatus);

  public abstract java.lang.Boolean hasV1alpha1PipelineRunTaskRunStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1PipelineRunTaskRunStatusNested<A> withNewV1alpha1PipelineRunTaskRunStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1PipelineRunTaskRunStatusNested<A> withNewV1alpha1PipelineRunTaskRunStatusLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunTaskRunStatus);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1PipelineRunTaskRunStatusNested<A> editV1alpha1PipelineRunTaskRunStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1PipelineRunTaskRunStatusNested<A> editOrNewV1alpha1PipelineRunTaskRunStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1alpha1PipelineRunTaskRunStatusNested<A> editOrNewV1alpha1PipelineRunTaskRunStatusLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunTaskRunStatus);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ClusterTask getV1beta1ClusterTask();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ClusterTask buildV1beta1ClusterTask();

  public abstract A withV1beta1ClusterTask(io.dekorate.deps.tekton.pipeline.v1beta1.ClusterTask);

  public abstract java.lang.Boolean hasV1beta1ClusterTask();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ClusterTaskNested<A> withNewV1beta1ClusterTask();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ClusterTaskNested<A> withNewV1beta1ClusterTaskLike(io.dekorate.deps.tekton.pipeline.v1beta1.ClusterTask);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ClusterTaskNested<A> editV1beta1ClusterTask();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ClusterTaskNested<A> editOrNewV1beta1ClusterTask();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ClusterTaskNested<A> editOrNewV1beta1ClusterTaskLike(io.dekorate.deps.tekton.pipeline.v1beta1.ClusterTask);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ClusterTaskList getV1beta1ClusterTaskList();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ClusterTaskList buildV1beta1ClusterTaskList();

  public abstract A withV1beta1ClusterTaskList(io.dekorate.deps.tekton.pipeline.v1beta1.ClusterTaskList);

  public abstract java.lang.Boolean hasV1beta1ClusterTaskList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ClusterTaskListNested<A> withNewV1beta1ClusterTaskList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ClusterTaskListNested<A> withNewV1beta1ClusterTaskListLike(io.dekorate.deps.tekton.pipeline.v1beta1.ClusterTaskList);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ClusterTaskListNested<A> editV1beta1ClusterTaskList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ClusterTaskListNested<A> editOrNewV1beta1ClusterTaskList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ClusterTaskListNested<A> editOrNewV1beta1ClusterTaskListLike(io.dekorate.deps.tekton.pipeline.v1beta1.ClusterTaskList);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Pipeline getV1beta1Pipeline();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Pipeline buildV1beta1Pipeline();

  public abstract A withV1beta1Pipeline(io.dekorate.deps.tekton.pipeline.v1beta1.Pipeline);

  public abstract java.lang.Boolean hasV1beta1Pipeline();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineNested<A> withNewV1beta1Pipeline();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineNested<A> withNewV1beta1PipelineLike(io.dekorate.deps.tekton.pipeline.v1beta1.Pipeline);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineNested<A> editV1beta1Pipeline();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineNested<A> editOrNewV1beta1Pipeline();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineNested<A> editOrNewV1beta1PipelineLike(io.dekorate.deps.tekton.pipeline.v1beta1.Pipeline);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineList getV1beta1PipelineList();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineList buildV1beta1PipelineList();

  public abstract A withV1beta1PipelineList(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineList);

  public abstract java.lang.Boolean hasV1beta1PipelineList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineListNested<A> withNewV1beta1PipelineList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineListNested<A> withNewV1beta1PipelineListLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineList);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineListNested<A> editV1beta1PipelineList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineListNested<A> editOrNewV1beta1PipelineList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineListNested<A> editOrNewV1beta1PipelineListLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineList);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRun getV1beta1PipelineRun();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRun buildV1beta1PipelineRun();

  public abstract A withV1beta1PipelineRun(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRun);

  public abstract java.lang.Boolean hasV1beta1PipelineRun();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunNested<A> withNewV1beta1PipelineRun();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunNested<A> withNewV1beta1PipelineRunLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRun);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunNested<A> editV1beta1PipelineRun();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunNested<A> editOrNewV1beta1PipelineRun();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunNested<A> editOrNewV1beta1PipelineRunLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRun);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunConditionCheckStatus getV1beta1PipelineRunConditionCheckStatus();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunConditionCheckStatus buildV1beta1PipelineRunConditionCheckStatus();

  public abstract A withV1beta1PipelineRunConditionCheckStatus(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunConditionCheckStatus);

  public abstract java.lang.Boolean hasV1beta1PipelineRunConditionCheckStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunConditionCheckStatusNested<A> withNewV1beta1PipelineRunConditionCheckStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunConditionCheckStatusNested<A> withNewV1beta1PipelineRunConditionCheckStatusLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunConditionCheckStatus);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunConditionCheckStatusNested<A> editV1beta1PipelineRunConditionCheckStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunConditionCheckStatusNested<A> editOrNewV1beta1PipelineRunConditionCheckStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunConditionCheckStatusNested<A> editOrNewV1beta1PipelineRunConditionCheckStatusLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunConditionCheckStatus);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunList getV1beta1PipelineRunList();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunList buildV1beta1PipelineRunList();

  public abstract A withV1beta1PipelineRunList(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunList);

  public abstract java.lang.Boolean hasV1beta1PipelineRunList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunListNested<A> withNewV1beta1PipelineRunList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunListNested<A> withNewV1beta1PipelineRunListLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunList);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunListNested<A> editV1beta1PipelineRunList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunListNested<A> editOrNewV1beta1PipelineRunList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunListNested<A> editOrNewV1beta1PipelineRunListLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunList);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunTaskRunStatus getV1beta1PipelineRunTaskRunStatus();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunTaskRunStatus buildV1beta1PipelineRunTaskRunStatus();

  public abstract A withV1beta1PipelineRunTaskRunStatus(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunTaskRunStatus);

  public abstract java.lang.Boolean hasV1beta1PipelineRunTaskRunStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunTaskRunStatusNested<A> withNewV1beta1PipelineRunTaskRunStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunTaskRunStatusNested<A> withNewV1beta1PipelineRunTaskRunStatusLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunTaskRunStatus);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunTaskRunStatusNested<A> editV1beta1PipelineRunTaskRunStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunTaskRunStatusNested<A> editOrNewV1beta1PipelineRunTaskRunStatus();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineRunTaskRunStatusNested<A> editOrNewV1beta1PipelineRunTaskRunStatusLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunTaskRunStatus);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTask getV1beta1PipelineTask();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTask buildV1beta1PipelineTask();

  public abstract A withV1beta1PipelineTask(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTask);

  public abstract java.lang.Boolean hasV1beta1PipelineTask();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineTaskNested<A> withNewV1beta1PipelineTask();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineTaskNested<A> withNewV1beta1PipelineTaskLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTask);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineTaskNested<A> editV1beta1PipelineTask();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineTaskNested<A> editOrNewV1beta1PipelineTask();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineTaskNested<A> editOrNewV1beta1PipelineTaskLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTask);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskResources getV1beta1PipelineTaskResource();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskResources buildV1beta1PipelineTaskResource();

  public abstract A withV1beta1PipelineTaskResource(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskResources);

  public abstract java.lang.Boolean hasV1beta1PipelineTaskResource();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineTaskResourceNested<A> withNewV1beta1PipelineTaskResource();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineTaskResourceNested<A> withNewV1beta1PipelineTaskResourceLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskResources);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineTaskResourceNested<A> editV1beta1PipelineTaskResource();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineTaskResourceNested<A> editOrNewV1beta1PipelineTaskResource();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PipelineTaskResourceNested<A> editOrNewV1beta1PipelineTaskResourceLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskResources);

  public abstract io.dekorate.deps.tekton.pipeline.pod.Template getV1beta1PodTemplate();

  public abstract io.dekorate.deps.tekton.pipeline.pod.Template buildV1beta1PodTemplate();

  public abstract A withV1beta1PodTemplate(io.dekorate.deps.tekton.pipeline.pod.Template);

  public abstract java.lang.Boolean hasV1beta1PodTemplate();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PodTemplateNested<A> withNewV1beta1PodTemplate();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PodTemplateNested<A> withNewV1beta1PodTemplateLike(io.dekorate.deps.tekton.pipeline.pod.Template);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PodTemplateNested<A> editV1beta1PodTemplate();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PodTemplateNested<A> editOrNewV1beta1PodTemplate();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1PodTemplateNested<A> editOrNewV1beta1PodTemplateLike(io.dekorate.deps.tekton.pipeline.pod.Template);

  public abstract io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration getV1beta1ResourceDeclaration();

  public abstract io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration buildV1beta1ResourceDeclaration();

  public abstract A withV1beta1ResourceDeclaration(io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration);

  public abstract java.lang.Boolean hasV1beta1ResourceDeclaration();

  public abstract A withNewV1beta1ResourceDeclaration(java.lang.String, java.lang.String, java.lang.Boolean, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ResourceDeclarationNested<A> withNewV1beta1ResourceDeclaration();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ResourceDeclarationNested<A> withNewV1beta1ResourceDeclarationLike(io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ResourceDeclarationNested<A> editV1beta1ResourceDeclaration();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ResourceDeclarationNested<A> editOrNewV1beta1ResourceDeclaration();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1ResourceDeclarationNested<A> editOrNewV1beta1ResourceDeclarationLike(io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Step getV1beta1Sidecar();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Step buildV1beta1Sidecar();

  public abstract A withV1beta1Sidecar(io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract java.lang.Boolean hasV1beta1Sidecar();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1SidecarNested<A> withNewV1beta1Sidecar();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1SidecarNested<A> withNewV1beta1SidecarLike(io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1SidecarNested<A> editV1beta1Sidecar();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1SidecarNested<A> editOrNewV1beta1Sidecar();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1SidecarNested<A> editOrNewV1beta1SidecarLike(io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState getV1beta1SidecarState();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState buildV1beta1SidecarState();

  public abstract A withV1beta1SidecarState(io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState);

  public abstract java.lang.Boolean hasV1beta1SidecarState();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1SidecarStateNested<A> withNewV1beta1SidecarState();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1SidecarStateNested<A> withNewV1beta1SidecarStateLike(io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1SidecarStateNested<A> editV1beta1SidecarState();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1SidecarStateNested<A> editOrNewV1beta1SidecarState();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1SidecarStateNested<A> editOrNewV1beta1SidecarStateLike(io.dekorate.deps.tekton.pipeline.v1beta1.SidecarState);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Step getV1beta1Step();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Step buildV1beta1Step();

  public abstract A withV1beta1Step(io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract java.lang.Boolean hasV1beta1Step();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1StepNested<A> withNewV1beta1Step();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1StepNested<A> withNewV1beta1StepLike(io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1StepNested<A> editV1beta1Step();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1StepNested<A> editOrNewV1beta1Step();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1StepNested<A> editOrNewV1beta1StepLike(io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Task getV1beta1Task();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Task buildV1beta1Task();

  public abstract A withV1beta1Task(io.dekorate.deps.tekton.pipeline.v1beta1.Task);

  public abstract java.lang.Boolean hasV1beta1Task();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskNested<A> withNewV1beta1Task();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskNested<A> withNewV1beta1TaskLike(io.dekorate.deps.tekton.pipeline.v1beta1.Task);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskNested<A> editV1beta1Task();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskNested<A> editOrNewV1beta1Task();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskNested<A> editOrNewV1beta1TaskLike(io.dekorate.deps.tekton.pipeline.v1beta1.Task);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskList getV1beta1TaskList();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskList buildV1beta1TaskList();

  public abstract A withV1beta1TaskList(io.dekorate.deps.tekton.pipeline.v1beta1.TaskList);

  public abstract java.lang.Boolean hasV1beta1TaskList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskListNested<A> withNewV1beta1TaskList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskListNested<A> withNewV1beta1TaskListLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskList);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskListNested<A> editV1beta1TaskList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskListNested<A> editOrNewV1beta1TaskList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskListNested<A> editOrNewV1beta1TaskListLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskList);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef getV1beta1TaskRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef buildV1beta1TaskRef();

  public abstract A withV1beta1TaskRef(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef);

  public abstract java.lang.Boolean hasV1beta1TaskRef();

  public abstract A withNewV1beta1TaskRef(java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRefNested<A> withNewV1beta1TaskRef();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRefNested<A> withNewV1beta1TaskRefLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRefNested<A> editV1beta1TaskRef();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRefNested<A> editOrNewV1beta1TaskRef();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRefNested<A> editOrNewV1beta1TaskRefLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRef);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskResource getV1beta1TaskResource();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskResource buildV1beta1TaskResource();

  public abstract A withV1beta1TaskResource(io.dekorate.deps.tekton.pipeline.v1beta1.TaskResource);

  public abstract java.lang.Boolean hasV1beta1TaskResource();

  public abstract A withNewV1beta1TaskResource(java.lang.String, java.lang.String, java.lang.Boolean, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskResourceNested<A> withNewV1beta1TaskResource();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskResourceNested<A> withNewV1beta1TaskResourceLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskResource);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskResourceNested<A> editV1beta1TaskResource();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskResourceNested<A> editOrNewV1beta1TaskResource();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskResourceNested<A> editOrNewV1beta1TaskResourceLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskResource);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskResourceBinding getV1beta1TaskResourceBinding();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskResourceBinding buildV1beta1TaskResourceBinding();

  public abstract A withV1beta1TaskResourceBinding(io.dekorate.deps.tekton.pipeline.v1beta1.TaskResourceBinding);

  public abstract java.lang.Boolean hasV1beta1TaskResourceBinding();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskResourceBindingNested<A> withNewV1beta1TaskResourceBinding();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskResourceBindingNested<A> withNewV1beta1TaskResourceBindingLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskResourceBinding);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskResourceBindingNested<A> editV1beta1TaskResourceBinding();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskResourceBindingNested<A> editOrNewV1beta1TaskResourceBinding();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskResourceBindingNested<A> editOrNewV1beta1TaskResourceBindingLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskResourceBinding);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRun getV1beta1TaskRun();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRun buildV1beta1TaskRun();

  public abstract A withV1beta1TaskRun(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRun);

  public abstract java.lang.Boolean hasV1beta1TaskRun();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRunNested<A> withNewV1beta1TaskRun();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRunNested<A> withNewV1beta1TaskRunLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRun);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRunNested<A> editV1beta1TaskRun();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRunNested<A> editOrNewV1beta1TaskRun();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRunNested<A> editOrNewV1beta1TaskRunLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRun);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunList getV1beta1TaskRunList();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunList buildV1beta1TaskRunList();

  public abstract A withV1beta1TaskRunList(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunList);

  public abstract java.lang.Boolean hasV1beta1TaskRunList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRunListNested<A> withNewV1beta1TaskRunList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRunListNested<A> withNewV1beta1TaskRunListLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunList);

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRunListNested<A> editV1beta1TaskRunList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRunListNested<A> editOrNewV1beta1TaskRunList();

  public abstract io.dekorate.deps.tekton.api.model.TektonSchemaFluent$V1beta1TaskRunListNested<A> editOrNewV1beta1TaskRunListLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskRunList);
}
