Compiled from "AnsiConsole.java"
final class io.dekorate.deps.jansi.AnsiConsole$JansiOutputType extends java.lang.Enum<io.dekorate.deps.jansi.AnsiConsole$JansiOutputType> {
  public static final io.dekorate.deps.jansi.AnsiConsole$JansiOutputType PASSTHROUGH;

  public static final io.dekorate.deps.jansi.AnsiConsole$JansiOutputType RESET_ANSI_AT_CLOSE;

  public static final io.dekorate.deps.jansi.AnsiConsole$JansiOutputType STRIP_ANSI;

  public static final io.dekorate.deps.jansi.AnsiConsole$JansiOutputType WINDOWS;

  private final java.lang.String description;

  private static final io.dekorate.deps.jansi.AnsiConsole$JansiOutputType[] $VALUES;

  public static io.dekorate.deps.jansi.AnsiConsole$JansiOutputType[] values();
    Code:
       0: getstatic     #22                 // Field $VALUES:[Lio/dekorate/deps/jansi/AnsiConsole$JansiOutputType;
       3: invokevirtual #27                 // Method "[Lio/dekorate/deps/jansi/AnsiConsole$JansiOutputType;".clone:()Ljava/lang/Object;
       6: checkcast     #23                 // class "[Lio/dekorate/deps/jansi/AnsiConsole$JansiOutputType;"
       9: areturn

  public static io.dekorate.deps.jansi.AnsiConsole$JansiOutputType valueOf(java.lang.String);
    Code:
       0: ldc           #2                  // class io/dekorate/deps/jansi/AnsiConsole$JansiOutputType
       2: aload_0
       3: invokestatic  #32                 // Method java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
       6: checkcast     #2                  // class io/dekorate/deps/jansi/AnsiConsole$JansiOutputType
       9: areturn

  private io.dekorate.deps.jansi.AnsiConsole$JansiOutputType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #39                 // Method java/lang/Enum."<init>":(Ljava/lang/String;I)V
       6: aload_0
       7: aload_3
       8: putfield      #41                 // Field description:Ljava/lang/String;
      11: return

  java.lang.String getDescription();
    Code:
       0: aload_0
       1: getfield      #41                 // Field description:Ljava/lang/String;
       4: areturn

  static {};
    Code:
       0: new           #2                  // class io/dekorate/deps/jansi/AnsiConsole$JansiOutputType
       3: dup
       4: ldc           #47                 // String PASSTHROUGH
       6: iconst_0
       7: ldc           #49                 // String just pass through, ANSI escape codes are supposed to be supported by terminal
       9: invokespecial #51                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;)V
      12: putstatic     #53                 // Field PASSTHROUGH:Lio/dekorate/deps/jansi/AnsiConsole$JansiOutputType;
      15: new           #2                  // class io/dekorate/deps/jansi/AnsiConsole$JansiOutputType
      18: dup
      19: ldc           #54                 // String RESET_ANSI_AT_CLOSE
      21: iconst_1
      22: ldc           #56                 // String like pass through but reset ANSI attributes when closing the stream
      24: invokespecial #51                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;)V
      27: putstatic     #58                 // Field RESET_ANSI_AT_CLOSE:Lio/dekorate/deps/jansi/AnsiConsole$JansiOutputType;
      30: new           #2                  // class io/dekorate/deps/jansi/AnsiConsole$JansiOutputType
      33: dup
      34: ldc           #59                 // String STRIP_ANSI
      36: iconst_2
      37: ldc           #61                 // String strip ANSI escape codes, for example when output is not a terminal
      39: invokespecial #51                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;)V
      42: putstatic     #63                 // Field STRIP_ANSI:Lio/dekorate/deps/jansi/AnsiConsole$JansiOutputType;
      45: new           #2                  // class io/dekorate/deps/jansi/AnsiConsole$JansiOutputType
      48: dup
      49: ldc           #64                 // String WINDOWS
      51: iconst_3
      52: ldc           #66                 // String detect ANSI escape codes and transform Jansi-supported ones into a Windows API to get desired effect (since ANSI escape codes are not natively supported by Windows terminals like cmd.exe or PowerShell)
      54: invokespecial #51                 // Method "<init>":(Ljava/lang/String;ILjava/lang/String;)V
      57: putstatic     #68                 // Field WINDOWS:Lio/dekorate/deps/jansi/AnsiConsole$JansiOutputType;
      60: iconst_4
      61: anewarray     #2                  // class io/dekorate/deps/jansi/AnsiConsole$JansiOutputType
      64: dup
      65: iconst_0
      66: getstatic     #53                 // Field PASSTHROUGH:Lio/dekorate/deps/jansi/AnsiConsole$JansiOutputType;
      69: aastore
      70: dup
      71: iconst_1
      72: getstatic     #58                 // Field RESET_ANSI_AT_CLOSE:Lio/dekorate/deps/jansi/AnsiConsole$JansiOutputType;
      75: aastore
      76: dup
      77: iconst_2
      78: getstatic     #63                 // Field STRIP_ANSI:Lio/dekorate/deps/jansi/AnsiConsole$JansiOutputType;
      81: aastore
      82: dup
      83: iconst_3
      84: getstatic     #68                 // Field WINDOWS:Lio/dekorate/deps/jansi/AnsiConsole$JansiOutputType;
      87: aastore
      88: putstatic     #22                 // Field $VALUES:[Lio/dekorate/deps/jansi/AnsiConsole$JansiOutputType;
      91: return
}
