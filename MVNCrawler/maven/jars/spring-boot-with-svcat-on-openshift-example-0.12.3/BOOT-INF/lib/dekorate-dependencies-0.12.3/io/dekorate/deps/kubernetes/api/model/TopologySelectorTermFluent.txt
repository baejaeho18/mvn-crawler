Compiled from "TopologySelectorTermFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.TopologySelectorTermFluent<A extends io.dekorate.deps.kubernetes.api.model.TopologySelectorTermFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToMatchLabelExpressions(int, io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement);

  public abstract A setToMatchLabelExpressions(int, io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement);

  public abstract A addToMatchLabelExpressions(io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement...);

  public abstract A addAllToMatchLabelExpressions(java.util.Collection<io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement>);

  public abstract A removeFromMatchLabelExpressions(io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement...);

  public abstract A removeAllFromMatchLabelExpressions(java.util.Collection<io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement>);

  public abstract A removeMatchingFromMatchLabelExpressions(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirementBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement> getMatchLabelExpressions();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement> buildMatchLabelExpressions();

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement buildMatchLabelExpression(int);

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement buildFirstMatchLabelExpression();

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement buildLastMatchLabelExpression();

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement buildMatchingMatchLabelExpression(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirementBuilder>);

  public abstract java.lang.Boolean hasMatchingMatchLabelExpression(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirementBuilder>);

  public abstract A withMatchLabelExpressions(java.util.List<io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement>);

  public abstract A withMatchLabelExpressions(io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement...);

  public abstract java.lang.Boolean hasMatchLabelExpressions();

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorTermFluent$MatchLabelExpressionsNested<A> addNewMatchLabelExpression();

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorTermFluent$MatchLabelExpressionsNested<A> addNewMatchLabelExpressionLike(io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement);

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorTermFluent$MatchLabelExpressionsNested<A> setNewMatchLabelExpressionLike(int, io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirement);

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorTermFluent$MatchLabelExpressionsNested<A> editMatchLabelExpression(int);

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorTermFluent$MatchLabelExpressionsNested<A> editFirstMatchLabelExpression();

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorTermFluent$MatchLabelExpressionsNested<A> editLastMatchLabelExpression();

  public abstract io.dekorate.deps.kubernetes.api.model.TopologySelectorTermFluent$MatchLabelExpressionsNested<A> editMatchingMatchLabelExpression(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.TopologySelectorLabelRequirementBuilder>);
}
