Compiled from "BuildConfigSpecFluent.java"
public interface io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent<A extends io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Long getCompletionDeadlineSeconds();

  public abstract A withCompletionDeadlineSeconds(java.lang.Long);

  public abstract java.lang.Boolean hasCompletionDeadlineSeconds();

  public abstract java.lang.Integer getFailedBuildsHistoryLimit();

  public abstract A withFailedBuildsHistoryLimit(java.lang.Integer);

  public abstract java.lang.Boolean hasFailedBuildsHistoryLimit();

  public abstract A addToNodeSelector(java.lang.String, java.lang.String);

  public abstract A addToNodeSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract A removeFromNodeSelector(java.lang.String);

  public abstract A removeFromNodeSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.Map<java.lang.String, java.lang.String> getNodeSelector();

  public abstract A withNodeSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.Boolean hasNodeSelector();

  public abstract io.dekorate.deps.openshift.api.model.BuildOutput getOutput();

  public abstract io.dekorate.deps.openshift.api.model.BuildOutput buildOutput();

  public abstract A withOutput(io.dekorate.deps.openshift.api.model.BuildOutput);

  public abstract java.lang.Boolean hasOutput();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$OutputNested<A> withNewOutput();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$OutputNested<A> withNewOutputLike(io.dekorate.deps.openshift.api.model.BuildOutput);

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$OutputNested<A> editOutput();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$OutputNested<A> editOrNewOutput();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$OutputNested<A> editOrNewOutputLike(io.dekorate.deps.openshift.api.model.BuildOutput);

  public abstract io.dekorate.deps.openshift.api.model.BuildPostCommitSpec getPostCommit();

  public abstract io.dekorate.deps.openshift.api.model.BuildPostCommitSpec buildPostCommit();

  public abstract A withPostCommit(io.dekorate.deps.openshift.api.model.BuildPostCommitSpec);

  public abstract java.lang.Boolean hasPostCommit();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$PostCommitNested<A> withNewPostCommit();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$PostCommitNested<A> withNewPostCommitLike(io.dekorate.deps.openshift.api.model.BuildPostCommitSpec);

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$PostCommitNested<A> editPostCommit();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$PostCommitNested<A> editOrNewPostCommit();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$PostCommitNested<A> editOrNewPostCommitLike(io.dekorate.deps.openshift.api.model.BuildPostCommitSpec);

  public abstract io.dekorate.deps.kubernetes.api.model.ResourceRequirements getResources();

  public abstract io.dekorate.deps.kubernetes.api.model.ResourceRequirements buildResources();

  public abstract A withResources(io.dekorate.deps.kubernetes.api.model.ResourceRequirements);

  public abstract java.lang.Boolean hasResources();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$ResourcesNested<A> withNewResources();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$ResourcesNested<A> withNewResourcesLike(io.dekorate.deps.kubernetes.api.model.ResourceRequirements);

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$ResourcesNested<A> editResources();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$ResourcesNested<A> editOrNewResources();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$ResourcesNested<A> editOrNewResourcesLike(io.dekorate.deps.kubernetes.api.model.ResourceRequirements);

  public abstract io.dekorate.deps.openshift.api.model.SourceRevision getRevision();

  public abstract io.dekorate.deps.openshift.api.model.SourceRevision buildRevision();

  public abstract A withRevision(io.dekorate.deps.openshift.api.model.SourceRevision);

  public abstract java.lang.Boolean hasRevision();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$RevisionNested<A> withNewRevision();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$RevisionNested<A> withNewRevisionLike(io.dekorate.deps.openshift.api.model.SourceRevision);

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$RevisionNested<A> editRevision();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$RevisionNested<A> editOrNewRevision();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$RevisionNested<A> editOrNewRevisionLike(io.dekorate.deps.openshift.api.model.SourceRevision);

  public abstract java.lang.String getRunPolicy();

  public abstract A withRunPolicy(java.lang.String);

  public abstract java.lang.Boolean hasRunPolicy();

  public abstract A withNewRunPolicy(java.lang.String);

  public abstract A withNewRunPolicy(java.lang.StringBuilder);

  public abstract A withNewRunPolicy(java.lang.StringBuffer);

  public abstract java.lang.String getServiceAccount();

  public abstract A withServiceAccount(java.lang.String);

  public abstract java.lang.Boolean hasServiceAccount();

  public abstract A withNewServiceAccount(java.lang.String);

  public abstract A withNewServiceAccount(java.lang.StringBuilder);

  public abstract A withNewServiceAccount(java.lang.StringBuffer);

  public abstract io.dekorate.deps.openshift.api.model.BuildSource getSource();

  public abstract io.dekorate.deps.openshift.api.model.BuildSource buildSource();

  public abstract A withSource(io.dekorate.deps.openshift.api.model.BuildSource);

  public abstract java.lang.Boolean hasSource();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$SourceNested<A> withNewSource();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$SourceNested<A> withNewSourceLike(io.dekorate.deps.openshift.api.model.BuildSource);

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$SourceNested<A> editSource();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$SourceNested<A> editOrNewSource();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$SourceNested<A> editOrNewSourceLike(io.dekorate.deps.openshift.api.model.BuildSource);

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategy getStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategy buildStrategy();

  public abstract A withStrategy(io.dekorate.deps.openshift.api.model.BuildStrategy);

  public abstract java.lang.Boolean hasStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$StrategyNested<A> withNewStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$StrategyNested<A> withNewStrategyLike(io.dekorate.deps.openshift.api.model.BuildStrategy);

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$StrategyNested<A> editStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$StrategyNested<A> editOrNewStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$StrategyNested<A> editOrNewStrategyLike(io.dekorate.deps.openshift.api.model.BuildStrategy);

  public abstract java.lang.Integer getSuccessfulBuildsHistoryLimit();

  public abstract A withSuccessfulBuildsHistoryLimit(java.lang.Integer);

  public abstract java.lang.Boolean hasSuccessfulBuildsHistoryLimit();

  public abstract A addToTriggers(int, io.dekorate.deps.openshift.api.model.BuildTriggerPolicy);

  public abstract A setToTriggers(int, io.dekorate.deps.openshift.api.model.BuildTriggerPolicy);

  public abstract A addToTriggers(io.dekorate.deps.openshift.api.model.BuildTriggerPolicy...);

  public abstract A addAllToTriggers(java.util.Collection<io.dekorate.deps.openshift.api.model.BuildTriggerPolicy>);

  public abstract A removeFromTriggers(io.dekorate.deps.openshift.api.model.BuildTriggerPolicy...);

  public abstract A removeAllFromTriggers(java.util.Collection<io.dekorate.deps.openshift.api.model.BuildTriggerPolicy>);

  public abstract A removeMatchingFromTriggers(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.BuildTriggerPolicyBuilder>);

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.BuildTriggerPolicy> getTriggers();

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.BuildTriggerPolicy> buildTriggers();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerPolicy buildTrigger(int);

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerPolicy buildFirstTrigger();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerPolicy buildLastTrigger();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerPolicy buildMatchingTrigger(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.BuildTriggerPolicyBuilder>);

  public abstract java.lang.Boolean hasMatchingTrigger(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.BuildTriggerPolicyBuilder>);

  public abstract A withTriggers(java.util.List<io.dekorate.deps.openshift.api.model.BuildTriggerPolicy>);

  public abstract A withTriggers(io.dekorate.deps.openshift.api.model.BuildTriggerPolicy...);

  public abstract java.lang.Boolean hasTriggers();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$TriggersNested<A> addNewTrigger();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$TriggersNested<A> addNewTriggerLike(io.dekorate.deps.openshift.api.model.BuildTriggerPolicy);

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$TriggersNested<A> setNewTriggerLike(int, io.dekorate.deps.openshift.api.model.BuildTriggerPolicy);

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$TriggersNested<A> editTrigger(int);

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$TriggersNested<A> editFirstTrigger();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$TriggersNested<A> editLastTrigger();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigSpecFluent$TriggersNested<A> editMatchingTrigger(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.BuildTriggerPolicyBuilder>);
}
