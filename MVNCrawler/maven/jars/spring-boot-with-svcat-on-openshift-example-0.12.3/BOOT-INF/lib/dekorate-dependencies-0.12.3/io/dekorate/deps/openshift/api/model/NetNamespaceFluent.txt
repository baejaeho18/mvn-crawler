Compiled from "NetNamespaceFluent.java"
public interface io.dekorate.deps.openshift.api.model.NetNamespaceFluent<A extends io.dekorate.deps.openshift.api.model.NetNamespaceFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract A addToEgressIPs(int, java.lang.String);

  public abstract A setToEgressIPs(int, java.lang.String);

  public abstract A addToEgressIPs(java.lang.String...);

  public abstract A addAllToEgressIPs(java.util.Collection<java.lang.String>);

  public abstract A removeFromEgressIPs(java.lang.String...);

  public abstract A removeAllFromEgressIPs(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getEgressIPs();

  public abstract java.lang.String getEgressIP(int);

  public abstract java.lang.String getFirstEgressIP();

  public abstract java.lang.String getLastEgressIP();

  public abstract java.lang.String getMatchingEgressIP(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingEgressIP(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withEgressIPs(java.util.List<java.lang.String>);

  public abstract A withEgressIPs(java.lang.String...);

  public abstract java.lang.Boolean hasEgressIPs();

  public abstract A addNewEgressIP(java.lang.String);

  public abstract A addNewEgressIP(java.lang.StringBuilder);

  public abstract A addNewEgressIP(java.lang.StringBuffer);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectMeta getMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectMeta buildMetadata();

  public abstract A withMetadata(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Boolean hasMetadata();

  public abstract io.dekorate.deps.openshift.api.model.NetNamespaceFluent$MetadataNested<A> withNewMetadata();

  public abstract io.dekorate.deps.openshift.api.model.NetNamespaceFluent$MetadataNested<A> withNewMetadataLike(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract io.dekorate.deps.openshift.api.model.NetNamespaceFluent$MetadataNested<A> editMetadata();

  public abstract io.dekorate.deps.openshift.api.model.NetNamespaceFluent$MetadataNested<A> editOrNewMetadata();

  public abstract io.dekorate.deps.openshift.api.model.NetNamespaceFluent$MetadataNested<A> editOrNewMetadataLike(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Integer getNetid();

  public abstract A withNetid(java.lang.Integer);

  public abstract java.lang.Boolean hasNetid();

  public abstract java.lang.String getNetname();

  public abstract A withNetname(java.lang.String);

  public abstract java.lang.Boolean hasNetname();

  public abstract A withNewNetname(java.lang.String);

  public abstract A withNewNetname(java.lang.StringBuilder);

  public abstract A withNewNetname(java.lang.StringBuffer);
}
