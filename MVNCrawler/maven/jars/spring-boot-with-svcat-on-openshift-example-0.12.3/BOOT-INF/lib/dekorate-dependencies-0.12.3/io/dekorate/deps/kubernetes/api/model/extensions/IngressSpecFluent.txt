Compiled from "IngressSpecFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent<A extends io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressBackend getBackend();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressBackend buildBackend();

  public abstract A withBackend(io.dekorate.deps.kubernetes.api.model.extensions.IngressBackend);

  public abstract java.lang.Boolean hasBackend();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$BackendNested<A> withNewBackend();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$BackendNested<A> withNewBackendLike(io.dekorate.deps.kubernetes.api.model.extensions.IngressBackend);

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$BackendNested<A> editBackend();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$BackendNested<A> editOrNewBackend();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$BackendNested<A> editOrNewBackendLike(io.dekorate.deps.kubernetes.api.model.extensions.IngressBackend);

  public abstract java.lang.String getIngressClassName();

  public abstract A withIngressClassName(java.lang.String);

  public abstract java.lang.Boolean hasIngressClassName();

  public abstract A withNewIngressClassName(java.lang.String);

  public abstract A withNewIngressClassName(java.lang.StringBuilder);

  public abstract A withNewIngressClassName(java.lang.StringBuffer);

  public abstract A addToRules(int, io.dekorate.deps.kubernetes.api.model.extensions.IngressRule);

  public abstract A setToRules(int, io.dekorate.deps.kubernetes.api.model.extensions.IngressRule);

  public abstract A addToRules(io.dekorate.deps.kubernetes.api.model.extensions.IngressRule...);

  public abstract A addAllToRules(java.util.Collection<io.dekorate.deps.kubernetes.api.model.extensions.IngressRule>);

  public abstract A removeFromRules(io.dekorate.deps.kubernetes.api.model.extensions.IngressRule...);

  public abstract A removeAllFromRules(java.util.Collection<io.dekorate.deps.kubernetes.api.model.extensions.IngressRule>);

  public abstract A removeMatchingFromRules(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.extensions.IngressRuleBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.extensions.IngressRule> getRules();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.extensions.IngressRule> buildRules();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressRule buildRule(int);

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressRule buildFirstRule();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressRule buildLastRule();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressRule buildMatchingRule(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.extensions.IngressRuleBuilder>);

  public abstract java.lang.Boolean hasMatchingRule(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.extensions.IngressRuleBuilder>);

  public abstract A withRules(java.util.List<io.dekorate.deps.kubernetes.api.model.extensions.IngressRule>);

  public abstract A withRules(io.dekorate.deps.kubernetes.api.model.extensions.IngressRule...);

  public abstract java.lang.Boolean hasRules();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$RulesNested<A> addNewRule();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$RulesNested<A> addNewRuleLike(io.dekorate.deps.kubernetes.api.model.extensions.IngressRule);

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$RulesNested<A> setNewRuleLike(int, io.dekorate.deps.kubernetes.api.model.extensions.IngressRule);

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$RulesNested<A> editRule(int);

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$RulesNested<A> editFirstRule();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$RulesNested<A> editLastRule();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$RulesNested<A> editMatchingRule(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.extensions.IngressRuleBuilder>);

  public abstract A addToTls(int, io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS);

  public abstract A setToTls(int, io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS);

  public abstract A addToTls(io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS...);

  public abstract A addAllToTls(java.util.Collection<io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS>);

  public abstract A removeFromTls(io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS...);

  public abstract A removeAllFromTls(java.util.Collection<io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS>);

  public abstract A removeMatchingFromTls(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.extensions.IngressTLSBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS> getTls();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS> buildTls();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS buildTl(int);

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS buildFirstTl();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS buildLastTl();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS buildMatchingTl(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.extensions.IngressTLSBuilder>);

  public abstract java.lang.Boolean hasMatchingTl(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.extensions.IngressTLSBuilder>);

  public abstract A withTls(java.util.List<io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS>);

  public abstract A withTls(io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS...);

  public abstract java.lang.Boolean hasTls();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$TlsNested<A> addNewTl();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$TlsNested<A> addNewTlLike(io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS);

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$TlsNested<A> setNewTlLike(int, io.dekorate.deps.kubernetes.api.model.extensions.IngressTLS);

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$TlsNested<A> editTl(int);

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$TlsNested<A> editFirstTl();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$TlsNested<A> editLastTl();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressSpecFluent$TlsNested<A> editMatchingTl(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.extensions.IngressTLSBuilder>);
}
