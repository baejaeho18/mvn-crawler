Compiled from "PipelineTaskInputResourceFluent.java"
public interface io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskInputResourceFluent<A extends io.dekorate.deps.tekton.pipeline.v1beta1.PipelineTaskInputResourceFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToFrom(int, java.lang.String);

  public abstract A setToFrom(int, java.lang.String);

  public abstract A addToFrom(java.lang.String...);

  public abstract A addAllToFrom(java.util.Collection<java.lang.String>);

  public abstract A removeFromFrom(java.lang.String...);

  public abstract A removeAllFromFrom(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getFrom();

  public abstract java.lang.String getFrom(int);

  public abstract java.lang.String getFirstFrom();

  public abstract java.lang.String getLastFrom();

  public abstract java.lang.String getMatchingFrom(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingFrom(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withFrom(java.util.List<java.lang.String>);

  public abstract A withFrom(java.lang.String...);

  public abstract java.lang.Boolean hasFrom();

  public abstract A addNewFrom(java.lang.String);

  public abstract A addNewFrom(java.lang.StringBuilder);

  public abstract A addNewFrom(java.lang.StringBuffer);

  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();

  public abstract A withNewName(java.lang.String);

  public abstract A withNewName(java.lang.StringBuilder);

  public abstract A withNewName(java.lang.StringBuffer);

  public abstract java.lang.String getResource();

  public abstract A withResource(java.lang.String);

  public abstract java.lang.Boolean hasResource();

  public abstract A withNewResource(java.lang.String);

  public abstract A withNewResource(java.lang.StringBuilder);

  public abstract A withNewResource(java.lang.StringBuffer);
}
