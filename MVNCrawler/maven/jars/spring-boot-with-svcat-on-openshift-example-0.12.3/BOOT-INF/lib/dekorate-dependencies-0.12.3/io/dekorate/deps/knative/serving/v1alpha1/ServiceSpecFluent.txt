Compiled from "ServiceSpecFluent.java"
public interface io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent<A extends io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToBuild(java.lang.String, java.lang.Object);

  public abstract A addToBuild(java.util.Map<java.lang.String, java.lang.Object>);

  public abstract A removeFromBuild(java.lang.String);

  public abstract A removeFromBuild(java.util.Map<java.lang.String, java.lang.Object>);

  public abstract java.util.Map<java.lang.String, java.lang.Object> getBuild();

  public abstract A withBuild(java.util.Map<java.lang.String, java.lang.Object>);

  public abstract java.lang.Boolean hasBuild();

  public abstract java.lang.Long getGeneration();

  public abstract A withGeneration(java.lang.Long);

  public abstract java.lang.Boolean hasGeneration();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ManualType getManual();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ManualType buildManual();

  public abstract A withManual(io.dekorate.deps.knative.serving.v1alpha1.ManualType);

  public abstract java.lang.Boolean hasManual();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$ManualNested<A> withNewManual();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$ManualNested<A> withNewManualLike(io.dekorate.deps.knative.serving.v1alpha1.ManualType);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$ManualNested<A> editManual();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$ManualNested<A> editOrNewManual();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$ManualNested<A> editOrNewManualLike(io.dekorate.deps.knative.serving.v1alpha1.ManualType);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.PinnedType getPinned();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.PinnedType buildPinned();

  public abstract A withPinned(io.dekorate.deps.knative.serving.v1alpha1.PinnedType);

  public abstract java.lang.Boolean hasPinned();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$PinnedNested<A> withNewPinned();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$PinnedNested<A> withNewPinnedLike(io.dekorate.deps.knative.serving.v1alpha1.PinnedType);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$PinnedNested<A> editPinned();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$PinnedNested<A> editOrNewPinned();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$PinnedNested<A> editOrNewPinnedLike(io.dekorate.deps.knative.serving.v1alpha1.PinnedType);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ReleaseType getRelease();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ReleaseType buildRelease();

  public abstract A withRelease(io.dekorate.deps.knative.serving.v1alpha1.ReleaseType);

  public abstract java.lang.Boolean hasRelease();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$ReleaseNested<A> withNewRelease();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$ReleaseNested<A> withNewReleaseLike(io.dekorate.deps.knative.serving.v1alpha1.ReleaseType);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$ReleaseNested<A> editRelease();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$ReleaseNested<A> editOrNewRelease();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$ReleaseNested<A> editOrNewReleaseLike(io.dekorate.deps.knative.serving.v1alpha1.ReleaseType);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RevisionTemplateSpec getRevisionTemplate();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RevisionTemplateSpec buildRevisionTemplate();

  public abstract A withRevisionTemplate(io.dekorate.deps.knative.serving.v1alpha1.RevisionTemplateSpec);

  public abstract java.lang.Boolean hasRevisionTemplate();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$RevisionTemplateNested<A> withNewRevisionTemplate();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$RevisionTemplateNested<A> withNewRevisionTemplateLike(io.dekorate.deps.knative.serving.v1alpha1.RevisionTemplateSpec);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$RevisionTemplateNested<A> editRevisionTemplate();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$RevisionTemplateNested<A> editOrNewRevisionTemplate();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$RevisionTemplateNested<A> editOrNewRevisionTemplateLike(io.dekorate.deps.knative.serving.v1alpha1.RevisionTemplateSpec);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RunLatestType getRunLatest();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RunLatestType buildRunLatest();

  public abstract A withRunLatest(io.dekorate.deps.knative.serving.v1alpha1.RunLatestType);

  public abstract java.lang.Boolean hasRunLatest();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$RunLatestNested<A> withNewRunLatest();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$RunLatestNested<A> withNewRunLatestLike(io.dekorate.deps.knative.serving.v1alpha1.RunLatestType);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$RunLatestNested<A> editRunLatest();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$RunLatestNested<A> editOrNewRunLatest();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$RunLatestNested<A> editOrNewRunLatestLike(io.dekorate.deps.knative.serving.v1alpha1.RunLatestType);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RevisionTemplateSpec getTemplate();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RevisionTemplateSpec buildTemplate();

  public abstract A withTemplate(io.dekorate.deps.knative.serving.v1alpha1.RevisionTemplateSpec);

  public abstract java.lang.Boolean hasTemplate();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$TemplateNested<A> withNewTemplate();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$TemplateNested<A> withNewTemplateLike(io.dekorate.deps.knative.serving.v1alpha1.RevisionTemplateSpec);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$TemplateNested<A> editTemplate();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$TemplateNested<A> editOrNewTemplate();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$TemplateNested<A> editOrNewTemplateLike(io.dekorate.deps.knative.serving.v1alpha1.RevisionTemplateSpec);

  public abstract A addToTraffic(int, io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget);

  public abstract A setToTraffic(int, io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget);

  public abstract A addToTraffic(io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget...);

  public abstract A addAllToTraffic(java.util.Collection<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget>);

  public abstract A removeFromTraffic(io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget...);

  public abstract A removeAllFromTraffic(java.util.Collection<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget>);

  public abstract A removeMatchingFromTraffic(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.serving.v1alpha1.TrafficTargetBuilder>);

  public abstract java.util.List<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget> getTraffic();

  public abstract java.util.List<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget> buildTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget buildTraffic(int);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget buildFirstTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget buildLastTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget buildMatchingTraffic(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.serving.v1alpha1.TrafficTargetBuilder>);

  public abstract java.lang.Boolean hasMatchingTraffic(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.serving.v1alpha1.TrafficTargetBuilder>);

  public abstract A withTraffic(java.util.List<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget>);

  public abstract A withTraffic(io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget...);

  public abstract java.lang.Boolean hasTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$TrafficNested<A> addNewTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$TrafficNested<A> addNewTrafficLike(io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$TrafficNested<A> setNewTrafficLike(int, io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$TrafficNested<A> editTraffic(int);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$TrafficNested<A> editFirstTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$TrafficNested<A> editLastTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceSpecFluent$TrafficNested<A> editMatchingTraffic(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.serving.v1alpha1.TrafficTargetBuilder>);
}
