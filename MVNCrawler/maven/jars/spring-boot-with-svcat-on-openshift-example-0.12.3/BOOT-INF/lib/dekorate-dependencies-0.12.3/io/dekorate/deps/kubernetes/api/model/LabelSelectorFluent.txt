Compiled from "LabelSelectorFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.LabelSelectorFluent<A extends io.dekorate.deps.kubernetes.api.model.LabelSelectorFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToMatchExpressions(int, io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement);

  public abstract A setToMatchExpressions(int, io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement);

  public abstract A addToMatchExpressions(io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement...);

  public abstract A addAllToMatchExpressions(java.util.Collection<io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement>);

  public abstract A removeFromMatchExpressions(io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement...);

  public abstract A removeAllFromMatchExpressions(java.util.Collection<io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement>);

  public abstract A removeMatchingFromMatchExpressions(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirementBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement> getMatchExpressions();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement> buildMatchExpressions();

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement buildMatchExpression(int);

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement buildFirstMatchExpression();

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement buildLastMatchExpression();

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement buildMatchingMatchExpression(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirementBuilder>);

  public abstract java.lang.Boolean hasMatchingMatchExpression(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirementBuilder>);

  public abstract A withMatchExpressions(java.util.List<io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement>);

  public abstract A withMatchExpressions(io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement...);

  public abstract java.lang.Boolean hasMatchExpressions();

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelectorFluent$MatchExpressionsNested<A> addNewMatchExpression();

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelectorFluent$MatchExpressionsNested<A> addNewMatchExpressionLike(io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement);

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelectorFluent$MatchExpressionsNested<A> setNewMatchExpressionLike(int, io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirement);

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelectorFluent$MatchExpressionsNested<A> editMatchExpression(int);

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelectorFluent$MatchExpressionsNested<A> editFirstMatchExpression();

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelectorFluent$MatchExpressionsNested<A> editLastMatchExpression();

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelectorFluent$MatchExpressionsNested<A> editMatchingMatchExpression(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.LabelSelectorRequirementBuilder>);

  public abstract A addToMatchLabels(java.lang.String, java.lang.String);

  public abstract A addToMatchLabels(java.util.Map<java.lang.String, java.lang.String>);

  public abstract A removeFromMatchLabels(java.lang.String);

  public abstract A removeFromMatchLabels(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.Map<java.lang.String, java.lang.String> getMatchLabels();

  public abstract A withMatchLabels(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.Boolean hasMatchLabels();
}
