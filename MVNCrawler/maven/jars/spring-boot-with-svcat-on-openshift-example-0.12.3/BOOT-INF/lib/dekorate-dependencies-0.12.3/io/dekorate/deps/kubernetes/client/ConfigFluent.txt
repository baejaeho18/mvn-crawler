Compiled from "ConfigFluent.java"
public interface io.dekorate.deps.kubernetes.client.ConfigFluent<A extends io.dekorate.deps.kubernetes.client.ConfigFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract boolean isTrustCerts();

  public abstract A withTrustCerts(boolean);

  public abstract java.lang.Boolean hasTrustCerts();

  public abstract boolean isDisableHostnameVerification();

  public abstract A withDisableHostnameVerification(boolean);

  public abstract java.lang.Boolean hasDisableHostnameVerification();

  public abstract java.lang.String getMasterUrl();

  public abstract A withMasterUrl(java.lang.String);

  public abstract java.lang.Boolean hasMasterUrl();

  public abstract A withNewMasterUrl(java.lang.String);

  public abstract A withNewMasterUrl(java.lang.StringBuilder);

  public abstract A withNewMasterUrl(java.lang.StringBuffer);

  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract java.lang.String getNamespace();

  public abstract A withNamespace(java.lang.String);

  public abstract java.lang.Boolean hasNamespace();

  public abstract A withNewNamespace(java.lang.String);

  public abstract A withNewNamespace(java.lang.StringBuilder);

  public abstract A withNewNamespace(java.lang.StringBuffer);

  public abstract java.lang.String getCaCertFile();

  public abstract A withCaCertFile(java.lang.String);

  public abstract java.lang.Boolean hasCaCertFile();

  public abstract A withNewCaCertFile(java.lang.String);

  public abstract A withNewCaCertFile(java.lang.StringBuilder);

  public abstract A withNewCaCertFile(java.lang.StringBuffer);

  public abstract java.lang.String getCaCertData();

  public abstract A withCaCertData(java.lang.String);

  public abstract java.lang.Boolean hasCaCertData();

  public abstract A withNewCaCertData(java.lang.String);

  public abstract A withNewCaCertData(java.lang.StringBuilder);

  public abstract A withNewCaCertData(java.lang.StringBuffer);

  public abstract java.lang.String getClientCertFile();

  public abstract A withClientCertFile(java.lang.String);

  public abstract java.lang.Boolean hasClientCertFile();

  public abstract A withNewClientCertFile(java.lang.String);

  public abstract A withNewClientCertFile(java.lang.StringBuilder);

  public abstract A withNewClientCertFile(java.lang.StringBuffer);

  public abstract java.lang.String getClientCertData();

  public abstract A withClientCertData(java.lang.String);

  public abstract java.lang.Boolean hasClientCertData();

  public abstract A withNewClientCertData(java.lang.String);

  public abstract A withNewClientCertData(java.lang.StringBuilder);

  public abstract A withNewClientCertData(java.lang.StringBuffer);

  public abstract java.lang.String getClientKeyFile();

  public abstract A withClientKeyFile(java.lang.String);

  public abstract java.lang.Boolean hasClientKeyFile();

  public abstract A withNewClientKeyFile(java.lang.String);

  public abstract A withNewClientKeyFile(java.lang.StringBuilder);

  public abstract A withNewClientKeyFile(java.lang.StringBuffer);

  public abstract java.lang.String getClientKeyData();

  public abstract A withClientKeyData(java.lang.String);

  public abstract java.lang.Boolean hasClientKeyData();

  public abstract A withNewClientKeyData(java.lang.String);

  public abstract A withNewClientKeyData(java.lang.StringBuilder);

  public abstract A withNewClientKeyData(java.lang.StringBuffer);

  public abstract java.lang.String getClientKeyAlgo();

  public abstract A withClientKeyAlgo(java.lang.String);

  public abstract java.lang.Boolean hasClientKeyAlgo();

  public abstract A withNewClientKeyAlgo(java.lang.String);

  public abstract A withNewClientKeyAlgo(java.lang.StringBuilder);

  public abstract A withNewClientKeyAlgo(java.lang.StringBuffer);

  public abstract java.lang.String getClientKeyPassphrase();

  public abstract A withClientKeyPassphrase(java.lang.String);

  public abstract java.lang.Boolean hasClientKeyPassphrase();

  public abstract A withNewClientKeyPassphrase(java.lang.String);

  public abstract A withNewClientKeyPassphrase(java.lang.StringBuilder);

  public abstract A withNewClientKeyPassphrase(java.lang.StringBuffer);

  public abstract java.lang.String getTrustStoreFile();

  public abstract A withTrustStoreFile(java.lang.String);

  public abstract java.lang.Boolean hasTrustStoreFile();

  public abstract A withNewTrustStoreFile(java.lang.String);

  public abstract A withNewTrustStoreFile(java.lang.StringBuilder);

  public abstract A withNewTrustStoreFile(java.lang.StringBuffer);

  public abstract java.lang.String getTrustStorePassphrase();

  public abstract A withTrustStorePassphrase(java.lang.String);

  public abstract java.lang.Boolean hasTrustStorePassphrase();

  public abstract A withNewTrustStorePassphrase(java.lang.String);

  public abstract A withNewTrustStorePassphrase(java.lang.StringBuilder);

  public abstract A withNewTrustStorePassphrase(java.lang.StringBuffer);

  public abstract java.lang.String getKeyStoreFile();

  public abstract A withKeyStoreFile(java.lang.String);

  public abstract java.lang.Boolean hasKeyStoreFile();

  public abstract A withNewKeyStoreFile(java.lang.String);

  public abstract A withNewKeyStoreFile(java.lang.StringBuilder);

  public abstract A withNewKeyStoreFile(java.lang.StringBuffer);

  public abstract java.lang.String getKeyStorePassphrase();

  public abstract A withKeyStorePassphrase(java.lang.String);

  public abstract java.lang.Boolean hasKeyStorePassphrase();

  public abstract A withNewKeyStorePassphrase(java.lang.String);

  public abstract A withNewKeyStorePassphrase(java.lang.StringBuilder);

  public abstract A withNewKeyStorePassphrase(java.lang.StringBuffer);

  public abstract java.lang.String getUsername();

  public abstract A withUsername(java.lang.String);

  public abstract java.lang.Boolean hasUsername();

  public abstract A withNewUsername(java.lang.String);

  public abstract A withNewUsername(java.lang.StringBuilder);

  public abstract A withNewUsername(java.lang.StringBuffer);

  public abstract java.lang.String getPassword();

  public abstract A withPassword(java.lang.String);

  public abstract java.lang.Boolean hasPassword();

  public abstract A withNewPassword(java.lang.String);

  public abstract A withNewPassword(java.lang.StringBuilder);

  public abstract A withNewPassword(java.lang.StringBuffer);

  public abstract java.lang.String getOauthToken();

  public abstract A withOauthToken(java.lang.String);

  public abstract java.lang.Boolean hasOauthToken();

  public abstract A withNewOauthToken(java.lang.String);

  public abstract A withNewOauthToken(java.lang.StringBuilder);

  public abstract A withNewOauthToken(java.lang.StringBuffer);

  public abstract int getWatchReconnectInterval();

  public abstract A withWatchReconnectInterval(int);

  public abstract java.lang.Boolean hasWatchReconnectInterval();

  public abstract int getWatchReconnectLimit();

  public abstract A withWatchReconnectLimit(int);

  public abstract java.lang.Boolean hasWatchReconnectLimit();

  public abstract int getConnectionTimeout();

  public abstract A withConnectionTimeout(int);

  public abstract java.lang.Boolean hasConnectionTimeout();

  public abstract int getRequestTimeout();

  public abstract A withRequestTimeout(int);

  public abstract java.lang.Boolean hasRequestTimeout();

  public abstract long getRollingTimeout();

  public abstract A withRollingTimeout(long);

  public abstract java.lang.Boolean hasRollingTimeout();

  public abstract long getScaleTimeout();

  public abstract A withScaleTimeout(long);

  public abstract java.lang.Boolean hasScaleTimeout();

  public abstract int getLoggingInterval();

  public abstract A withLoggingInterval(int);

  public abstract java.lang.Boolean hasLoggingInterval();

  public abstract long getWebsocketTimeout();

  public abstract A withWebsocketTimeout(long);

  public abstract java.lang.Boolean hasWebsocketTimeout();

  public abstract long getWebsocketPingInterval();

  public abstract A withWebsocketPingInterval(long);

  public abstract java.lang.Boolean hasWebsocketPingInterval();

  public abstract int getMaxConcurrentRequests();

  public abstract A withMaxConcurrentRequests(int);

  public abstract java.lang.Boolean hasMaxConcurrentRequests();

  public abstract int getMaxConcurrentRequestsPerHost();

  public abstract A withMaxConcurrentRequestsPerHost(int);

  public abstract java.lang.Boolean hasMaxConcurrentRequestsPerHost();

  public abstract java.lang.String getImpersonateUsername();

  public abstract A withImpersonateUsername(java.lang.String);

  public abstract java.lang.Boolean hasImpersonateUsername();

  public abstract A withNewImpersonateUsername(java.lang.String);

  public abstract A withNewImpersonateUsername(java.lang.StringBuilder);

  public abstract A withNewImpersonateUsername(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.client.OAuthTokenProvider getOauthTokenProvider();

  public abstract A withOauthTokenProvider(io.dekorate.deps.kubernetes.client.OAuthTokenProvider);

  public abstract java.lang.Boolean hasOauthTokenProvider();

  public abstract java.lang.String getImpersonateGroup();

  public abstract A withImpersonateGroup(java.lang.String);

  public abstract java.lang.Boolean hasImpersonateGroup();

  public abstract A withNewImpersonateGroup(java.lang.String);

  public abstract A withNewImpersonateGroup(java.lang.StringBuilder);

  public abstract A withNewImpersonateGroup(java.lang.StringBuffer);

  public abstract A withImpersonateGroups(java.lang.String...);

  public abstract java.lang.String[] getImpersonateGroups();

  public abstract A addToImpersonateGroups(int, java.lang.String);

  public abstract A setToImpersonateGroups(int, java.lang.String);

  public abstract A addToImpersonateGroups(java.lang.String...);

  public abstract A addAllToImpersonateGroups(java.util.Collection<java.lang.String>);

  public abstract A removeFromImpersonateGroups(java.lang.String...);

  public abstract A removeAllFromImpersonateGroups(java.util.Collection<java.lang.String>);

  public abstract java.lang.Boolean hasImpersonateGroups();

  public abstract A addNewImpersonateGroup(java.lang.String);

  public abstract A addNewImpersonateGroup(java.lang.StringBuilder);

  public abstract A addNewImpersonateGroup(java.lang.StringBuffer);

  public abstract A addToImpersonateExtras(java.lang.String, java.util.List<java.lang.String>);

  public abstract A addToImpersonateExtras(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);

  public abstract A removeFromImpersonateExtras(java.lang.String);

  public abstract A removeFromImpersonateExtras(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);

  public abstract java.util.Map<java.lang.String, java.util.List<java.lang.String>> getImpersonateExtras();

  public abstract A withImpersonateExtras(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);

  public abstract java.lang.Boolean hasImpersonateExtras();

  public abstract boolean isHttp2Disable();

  public abstract A withHttp2Disable(boolean);

  public abstract java.lang.Boolean hasHttp2Disable();

  public abstract java.lang.String getHttpProxy();

  public abstract A withHttpProxy(java.lang.String);

  public abstract java.lang.Boolean hasHttpProxy();

  public abstract A withNewHttpProxy(java.lang.String);

  public abstract A withNewHttpProxy(java.lang.StringBuilder);

  public abstract A withNewHttpProxy(java.lang.StringBuffer);

  public abstract java.lang.String getHttpsProxy();

  public abstract A withHttpsProxy(java.lang.String);

  public abstract java.lang.Boolean hasHttpsProxy();

  public abstract A withNewHttpsProxy(java.lang.String);

  public abstract A withNewHttpsProxy(java.lang.StringBuilder);

  public abstract A withNewHttpsProxy(java.lang.StringBuffer);

  public abstract java.lang.String getProxyUsername();

  public abstract A withProxyUsername(java.lang.String);

  public abstract java.lang.Boolean hasProxyUsername();

  public abstract A withNewProxyUsername(java.lang.String);

  public abstract A withNewProxyUsername(java.lang.StringBuilder);

  public abstract A withNewProxyUsername(java.lang.StringBuffer);

  public abstract java.lang.String getProxyPassword();

  public abstract A withProxyPassword(java.lang.String);

  public abstract java.lang.Boolean hasProxyPassword();

  public abstract A withNewProxyPassword(java.lang.String);

  public abstract A withNewProxyPassword(java.lang.StringBuilder);

  public abstract A withNewProxyPassword(java.lang.StringBuffer);

  public abstract A withNoProxy(java.lang.String...);

  public abstract java.lang.String[] getNoProxy();

  public abstract A addToNoProxy(int, java.lang.String);

  public abstract A setToNoProxy(int, java.lang.String);

  public abstract A addToNoProxy(java.lang.String...);

  public abstract A addAllToNoProxy(java.util.Collection<java.lang.String>);

  public abstract A removeFromNoProxy(java.lang.String...);

  public abstract A removeAllFromNoProxy(java.util.Collection<java.lang.String>);

  public abstract java.lang.Boolean hasNoProxy();

  public abstract A addNewNoProxy(java.lang.String);

  public abstract A addNewNoProxy(java.lang.StringBuilder);

  public abstract A addNewNoProxy(java.lang.StringBuffer);

  public abstract java.lang.String getUserAgent();

  public abstract A withUserAgent(java.lang.String);

  public abstract java.lang.Boolean hasUserAgent();

  public abstract A withNewUserAgent(java.lang.String);

  public abstract A withNewUserAgent(java.lang.StringBuilder);

  public abstract A withNewUserAgent(java.lang.StringBuffer);

  public abstract A withTlsVersions(io.dekorate.deps.okhttp3.TlsVersion...);

  public abstract io.dekorate.deps.okhttp3.TlsVersion[] getTlsVersions();

  public abstract A addToTlsVersions(int, io.dekorate.deps.okhttp3.TlsVersion);

  public abstract A setToTlsVersions(int, io.dekorate.deps.okhttp3.TlsVersion);

  public abstract A addToTlsVersions(io.dekorate.deps.okhttp3.TlsVersion...);

  public abstract A addAllToTlsVersions(java.util.Collection<io.dekorate.deps.okhttp3.TlsVersion>);

  public abstract A removeFromTlsVersions(io.dekorate.deps.okhttp3.TlsVersion...);

  public abstract A removeAllFromTlsVersions(java.util.Collection<io.dekorate.deps.okhttp3.TlsVersion>);

  public abstract java.lang.Boolean hasTlsVersions();

  public abstract A addToErrorMessages(java.lang.Integer, java.lang.String);

  public abstract A addToErrorMessages(java.util.Map<java.lang.Integer, java.lang.String>);

  public abstract A removeFromErrorMessages(java.lang.Integer);

  public abstract A removeFromErrorMessages(java.util.Map<java.lang.Integer, java.lang.String>);

  public abstract java.util.Map<java.lang.Integer, java.lang.String> getErrorMessages();

  public abstract A withErrorMessages(java.util.Map<java.lang.Integer, java.lang.String>);

  public abstract java.lang.Boolean hasErrorMessages();

  public abstract A addToCustomHeaders(java.lang.String, java.lang.String);

  public abstract A addToCustomHeaders(java.util.Map<java.lang.String, java.lang.String>);

  public abstract A removeFromCustomHeaders(java.lang.String);

  public abstract A removeFromCustomHeaders(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.Map<java.lang.String, java.lang.String> getCustomHeaders();

  public abstract A withCustomHeaders(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.Boolean hasCustomHeaders();
}
