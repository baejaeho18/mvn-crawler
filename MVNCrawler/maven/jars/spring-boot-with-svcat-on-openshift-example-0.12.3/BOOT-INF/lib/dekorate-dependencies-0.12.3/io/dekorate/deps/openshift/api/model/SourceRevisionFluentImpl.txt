Compiled from "SourceRevisionFluentImpl.java"
public class io.dekorate.deps.openshift.api.model.SourceRevisionFluentImpl<A extends io.dekorate.deps.openshift.api.model.SourceRevisionFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.BaseFluent<A> implements io.dekorate.deps.openshift.api.model.SourceRevisionFluent<A> {
  private io.dekorate.deps.openshift.api.model.GitSourceRevisionBuilder git;

  private java.lang.String type;

  public io.dekorate.deps.openshift.api.model.SourceRevisionFluentImpl();
    Code:
       0: aload_0
       1: invokespecial #22                 // Method io/dekorate/deps/kubernetes/api/builder/BaseFluent."<init>":()V
       4: return

  public io.dekorate.deps.openshift.api.model.SourceRevisionFluentImpl(io.dekorate.deps.openshift.api.model.SourceRevision);
    Code:
       0: aload_0
       1: invokespecial #22                 // Method io/dekorate/deps/kubernetes/api/builder/BaseFluent."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #32                 // Method io/dekorate/deps/openshift/api/model/SourceRevision.getGit:()Lio/dekorate/deps/openshift/api/model/GitSourceRevision;
       9: invokevirtual #36                 // Method withGit:(Lio/dekorate/deps/openshift/api/model/GitSourceRevision;)Lio/dekorate/deps/openshift/api/model/SourceRevisionFluent;
      12: pop
      13: aload_0
      14: aload_1
      15: invokevirtual #40                 // Method io/dekorate/deps/openshift/api/model/SourceRevision.getType:()Ljava/lang/String;
      18: invokevirtual #44                 // Method withType:(Ljava/lang/String;)Lio/dekorate/deps/openshift/api/model/SourceRevisionFluent;
      21: pop
      22: return

  public io.dekorate.deps.openshift.api.model.GitSourceRevision getGit();
    Code:
       0: aload_0
       1: getfield      #49                 // Field git:Lio/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder;
       4: ifnull        17
       7: aload_0
       8: getfield      #49                 // Field git:Lio/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder;
      11: invokevirtual #54                 // Method io/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder.build:()Lio/dekorate/deps/openshift/api/model/GitSourceRevision;
      14: goto          18
      17: aconst_null
      18: areturn

  public io.dekorate.deps.openshift.api.model.GitSourceRevision buildGit();
    Code:
       0: aload_0
       1: getfield      #49                 // Field git:Lio/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder;
       4: ifnull        17
       7: aload_0
       8: getfield      #49                 // Field git:Lio/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder;
      11: invokevirtual #54                 // Method io/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder.build:()Lio/dekorate/deps/openshift/api/model/GitSourceRevision;
      14: goto          18
      17: aconst_null
      18: areturn

  public A withGit(io.dekorate.deps.openshift.api.model.GitSourceRevision);
    Code:
       0: aload_0
       1: getfield      #62                 // Field _visitables:Lio/dekorate/deps/kubernetes/api/builder/VisitableMap;
       4: ldc           #63                 // String git
       6: invokevirtual #69                 // Method io/dekorate/deps/kubernetes/api/builder/VisitableMap.get:(Ljava/lang/Object;)Ljava/util/List;
       9: aload_0
      10: getfield      #49                 // Field git:Lio/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder;
      13: invokeinterface #75,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      18: pop
      19: aload_1
      20: ifnull        54
      23: aload_0
      24: new           #51                 // class io/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder
      27: dup
      28: aload_1
      29: invokespecial #78                 // Method io/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder."<init>":(Lio/dekorate/deps/openshift/api/model/GitSourceRevision;)V
      32: putfield      #49                 // Field git:Lio/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder;
      35: aload_0
      36: getfield      #62                 // Field _visitables:Lio/dekorate/deps/kubernetes/api/builder/VisitableMap;
      39: ldc           #63                 // String git
      41: invokevirtual #69                 // Method io/dekorate/deps/kubernetes/api/builder/VisitableMap.get:(Ljava/lang/Object;)Ljava/util/List;
      44: aload_0
      45: getfield      #49                 // Field git:Lio/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder;
      48: invokeinterface #81,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      53: pop
      54: aload_0
      55: areturn

  public java.lang.Boolean hasGit();
    Code:
       0: aload_0
       1: getfield      #49                 // Field git:Lio/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #90                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      15: areturn

  public io.dekorate.deps.openshift.api.model.SourceRevisionFluent$GitNested<A> withNewGit();
    Code:
       0: new           #10                 // class io/dekorate/deps/openshift/api/model/SourceRevisionFluentImpl$GitNestedImpl
       3: dup
       4: aload_0
       5: invokespecial #96                 // Method io/dekorate/deps/openshift/api/model/SourceRevisionFluentImpl$GitNestedImpl."<init>":(Lio/dekorate/deps/openshift/api/model/SourceRevisionFluentImpl;)V
       8: areturn

  public io.dekorate.deps.openshift.api.model.SourceRevisionFluent$GitNested<A> withNewGitLike(io.dekorate.deps.openshift.api.model.GitSourceRevision);
    Code:
       0: new           #10                 // class io/dekorate/deps/openshift/api/model/SourceRevisionFluentImpl$GitNestedImpl
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #102                // Method io/dekorate/deps/openshift/api/model/SourceRevisionFluentImpl$GitNestedImpl."<init>":(Lio/dekorate/deps/openshift/api/model/SourceRevisionFluentImpl;Lio/dekorate/deps/openshift/api/model/GitSourceRevision;)V
       9: areturn

  public io.dekorate.deps.openshift.api.model.SourceRevisionFluent$GitNested<A> editGit();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #105                // Method getGit:()Lio/dekorate/deps/openshift/api/model/GitSourceRevision;
       5: invokevirtual #107                // Method withNewGitLike:(Lio/dekorate/deps/openshift/api/model/GitSourceRevision;)Lio/dekorate/deps/openshift/api/model/SourceRevisionFluent$GitNested;
       8: areturn

  public io.dekorate.deps.openshift.api.model.SourceRevisionFluent$GitNested<A> editOrNewGit();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #105                // Method getGit:()Lio/dekorate/deps/openshift/api/model/GitSourceRevision;
       5: ifnull        15
       8: aload_0
       9: invokevirtual #105                // Method getGit:()Lio/dekorate/deps/openshift/api/model/GitSourceRevision;
      12: goto          25
      15: new           #51                 // class io/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder
      18: dup
      19: invokespecial #109                // Method io/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder."<init>":()V
      22: invokevirtual #54                 // Method io/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder.build:()Lio/dekorate/deps/openshift/api/model/GitSourceRevision;
      25: invokevirtual #107                // Method withNewGitLike:(Lio/dekorate/deps/openshift/api/model/GitSourceRevision;)Lio/dekorate/deps/openshift/api/model/SourceRevisionFluent$GitNested;
      28: areturn

  public io.dekorate.deps.openshift.api.model.SourceRevisionFluent$GitNested<A> editOrNewGitLike(io.dekorate.deps.openshift.api.model.GitSourceRevision);
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #105                // Method getGit:()Lio/dekorate/deps/openshift/api/model/GitSourceRevision;
       5: ifnull        15
       8: aload_0
       9: invokevirtual #105                // Method getGit:()Lio/dekorate/deps/openshift/api/model/GitSourceRevision;
      12: goto          16
      15: aload_1
      16: invokevirtual #107                // Method withNewGitLike:(Lio/dekorate/deps/openshift/api/model/GitSourceRevision;)Lio/dekorate/deps/openshift/api/model/SourceRevisionFluent$GitNested;
      19: areturn

  public java.lang.String getType();
    Code:
       0: aload_0
       1: getfield      #112                // Field type:Ljava/lang/String;
       4: areturn

  public A withType(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #112                // Field type:Ljava/lang/String;
       5: aload_0
       6: areturn

  public java.lang.Boolean hasType();
    Code:
       0: aload_0
       1: getfield      #112                // Field type:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #90                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      15: areturn

  public A withNewType(java.lang.String);
    Code:
       0: aload_0
       1: new           #117                // class java/lang/String
       4: dup
       5: aload_1
       6: invokespecial #120                // Method java/lang/String."<init>":(Ljava/lang/String;)V
       9: invokevirtual #44                 // Method withType:(Ljava/lang/String;)Lio/dekorate/deps/openshift/api/model/SourceRevisionFluent;
      12: areturn

  public A withNewType(java.lang.StringBuilder);
    Code:
       0: aload_0
       1: new           #117                // class java/lang/String
       4: dup
       5: aload_1
       6: invokespecial #126                // Method java/lang/String."<init>":(Ljava/lang/StringBuilder;)V
       9: invokevirtual #44                 // Method withType:(Ljava/lang/String;)Lio/dekorate/deps/openshift/api/model/SourceRevisionFluent;
      12: areturn

  public A withNewType(java.lang.StringBuffer);
    Code:
       0: aload_0
       1: new           #117                // class java/lang/String
       4: dup
       5: aload_1
       6: invokespecial #132                // Method java/lang/String."<init>":(Ljava/lang/StringBuffer;)V
       9: invokevirtual #44                 // Method withType:(Ljava/lang/String;)Lio/dekorate/deps/openshift/api/model/SourceRevisionFluent;
      12: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #140                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #140                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #2                  // class io/dekorate/deps/openshift/api/model/SourceRevisionFluentImpl
      28: astore_2
      29: aload_0
      30: getfield      #49                 // Field git:Lio/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder;
      33: ifnull        53
      36: aload_0
      37: getfield      #49                 // Field git:Lio/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder;
      40: aload_2
      41: getfield      #49                 // Field git:Lio/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder;
      44: invokevirtual #142                // Method io/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder.equals:(Ljava/lang/Object;)Z
      47: ifne          62
      50: goto          60
      53: aload_2
      54: getfield      #49                 // Field git:Lio/dekorate/deps/openshift/api/model/GitSourceRevisionBuilder;
      57: ifnull        62
      60: iconst_0
      61: ireturn
      62: aload_0
      63: getfield      #112                // Field type:Ljava/lang/String;
      66: ifnull        86
      69: aload_0
      70: getfield      #112                // Field type:Ljava/lang/String;
      73: aload_2
      74: getfield      #112                // Field type:Ljava/lang/String;
      77: invokevirtual #143                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      80: ifne          95
      83: goto          93
      86: aload_2
      87: getfield      #112                // Field type:Ljava/lang/String;
      90: ifnull        95
      93: iconst_0
      94: ireturn
      95: iconst_1
      96: ireturn
}
