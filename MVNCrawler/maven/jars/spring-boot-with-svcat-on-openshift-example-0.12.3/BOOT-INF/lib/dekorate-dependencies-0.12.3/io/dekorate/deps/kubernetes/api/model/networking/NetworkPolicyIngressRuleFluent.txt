Compiled from "NetworkPolicyIngressRuleFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent<A extends io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToFrom(int, io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer);

  public abstract A setToFrom(int, io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer);

  public abstract A addToFrom(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer...);

  public abstract A addAllToFrom(java.util.Collection<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer>);

  public abstract A removeFromFrom(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer...);

  public abstract A removeAllFromFrom(java.util.Collection<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer>);

  public abstract A removeMatchingFromFrom(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer> getFrom();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer> buildFrom();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer buildFrom(int);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer buildFirstFrom();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer buildLastFrom();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer buildMatchingFrom(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerBuilder>);

  public abstract java.lang.Boolean hasMatchingFrom(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerBuilder>);

  public abstract A withFrom(java.util.List<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer>);

  public abstract A withFrom(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer...);

  public abstract java.lang.Boolean hasFrom();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent$FromNested<A> addNewFrom();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent$FromNested<A> addNewFromLike(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent$FromNested<A> setNewFromLike(int, io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeer);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent$FromNested<A> editFrom(int);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent$FromNested<A> editFirstFrom();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent$FromNested<A> editLastFrom();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent$FromNested<A> editMatchingFrom(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerBuilder>);

  public abstract A addToPorts(int, io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort);

  public abstract A setToPorts(int, io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort);

  public abstract A addToPorts(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort...);

  public abstract A addAllToPorts(java.util.Collection<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort>);

  public abstract A removeFromPorts(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort...);

  public abstract A removeAllFromPorts(java.util.Collection<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort>);

  public abstract A removeMatchingFromPorts(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPortBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort> getPorts();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort> buildPorts();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort buildPort(int);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort buildFirstPort();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort buildLastPort();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort buildMatchingPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPortBuilder>);

  public abstract java.lang.Boolean hasMatchingPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPortBuilder>);

  public abstract A withPorts(java.util.List<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort>);

  public abstract A withPorts(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort...);

  public abstract java.lang.Boolean hasPorts();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent$PortsNested<A> addNewPort();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent$PortsNested<A> addNewPortLike(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent$PortsNested<A> setNewPortLike(int, io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPort);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent$PortsNested<A> editPort(int);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent$PortsNested<A> editFirstPort();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent$PortsNested<A> editLastPort();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleFluent$PortsNested<A> editMatchingPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPortBuilder>);
}
