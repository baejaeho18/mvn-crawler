Compiled from "PodSecurityContextFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent<A extends io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Long getFsGroup();

  public abstract A withFsGroup(java.lang.Long);

  public abstract java.lang.Boolean hasFsGroup();

  public abstract java.lang.String getFsGroupChangePolicy();

  public abstract A withFsGroupChangePolicy(java.lang.String);

  public abstract java.lang.Boolean hasFsGroupChangePolicy();

  public abstract A withNewFsGroupChangePolicy(java.lang.String);

  public abstract A withNewFsGroupChangePolicy(java.lang.StringBuilder);

  public abstract A withNewFsGroupChangePolicy(java.lang.StringBuffer);

  public abstract java.lang.Long getRunAsGroup();

  public abstract A withRunAsGroup(java.lang.Long);

  public abstract java.lang.Boolean hasRunAsGroup();

  public abstract java.lang.Boolean isRunAsNonRoot();

  public abstract A withRunAsNonRoot(java.lang.Boolean);

  public abstract java.lang.Boolean hasRunAsNonRoot();

  public abstract A withNewRunAsNonRoot(java.lang.String);

  public abstract A withNewRunAsNonRoot(boolean);

  public abstract java.lang.Long getRunAsUser();

  public abstract A withRunAsUser(java.lang.Long);

  public abstract java.lang.Boolean hasRunAsUser();

  public abstract io.dekorate.deps.kubernetes.api.model.SELinuxOptions getSeLinuxOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.SELinuxOptions buildSeLinuxOptions();

  public abstract A withSeLinuxOptions(io.dekorate.deps.kubernetes.api.model.SELinuxOptions);

  public abstract java.lang.Boolean hasSeLinuxOptions();

  public abstract A withNewSeLinuxOptions(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$SeLinuxOptionsNested<A> withNewSeLinuxOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$SeLinuxOptionsNested<A> withNewSeLinuxOptionsLike(io.dekorate.deps.kubernetes.api.model.SELinuxOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$SeLinuxOptionsNested<A> editSeLinuxOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$SeLinuxOptionsNested<A> editOrNewSeLinuxOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$SeLinuxOptionsNested<A> editOrNewSeLinuxOptionsLike(io.dekorate.deps.kubernetes.api.model.SELinuxOptions);

  public abstract A addToSupplementalGroups(int, java.lang.Long);

  public abstract A setToSupplementalGroups(int, java.lang.Long);

  public abstract A addToSupplementalGroups(java.lang.Long...);

  public abstract A addAllToSupplementalGroups(java.util.Collection<java.lang.Long>);

  public abstract A removeFromSupplementalGroups(java.lang.Long...);

  public abstract A removeAllFromSupplementalGroups(java.util.Collection<java.lang.Long>);

  public abstract java.util.List<java.lang.Long> getSupplementalGroups();

  public abstract java.lang.Long getSupplementalGroup(int);

  public abstract java.lang.Long getFirstSupplementalGroup();

  public abstract java.lang.Long getLastSupplementalGroup();

  public abstract java.lang.Long getMatchingSupplementalGroup(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.Long>);

  public abstract java.lang.Boolean hasMatchingSupplementalGroup(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.Long>);

  public abstract A withSupplementalGroups(java.util.List<java.lang.Long>);

  public abstract A withSupplementalGroups(java.lang.Long...);

  public abstract java.lang.Boolean hasSupplementalGroups();

  public abstract A addToSysctls(int, io.dekorate.deps.kubernetes.api.model.Sysctl);

  public abstract A setToSysctls(int, io.dekorate.deps.kubernetes.api.model.Sysctl);

  public abstract A addToSysctls(io.dekorate.deps.kubernetes.api.model.Sysctl...);

  public abstract A addAllToSysctls(java.util.Collection<io.dekorate.deps.kubernetes.api.model.Sysctl>);

  public abstract A removeFromSysctls(io.dekorate.deps.kubernetes.api.model.Sysctl...);

  public abstract A removeAllFromSysctls(java.util.Collection<io.dekorate.deps.kubernetes.api.model.Sysctl>);

  public abstract A removeMatchingFromSysctls(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.SysctlBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.Sysctl> getSysctls();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.Sysctl> buildSysctls();

  public abstract io.dekorate.deps.kubernetes.api.model.Sysctl buildSysctl(int);

  public abstract io.dekorate.deps.kubernetes.api.model.Sysctl buildFirstSysctl();

  public abstract io.dekorate.deps.kubernetes.api.model.Sysctl buildLastSysctl();

  public abstract io.dekorate.deps.kubernetes.api.model.Sysctl buildMatchingSysctl(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.SysctlBuilder>);

  public abstract java.lang.Boolean hasMatchingSysctl(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.SysctlBuilder>);

  public abstract A withSysctls(java.util.List<io.dekorate.deps.kubernetes.api.model.Sysctl>);

  public abstract A withSysctls(io.dekorate.deps.kubernetes.api.model.Sysctl...);

  public abstract java.lang.Boolean hasSysctls();

  public abstract A addNewSysctl(java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$SysctlsNested<A> addNewSysctl();

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$SysctlsNested<A> addNewSysctlLike(io.dekorate.deps.kubernetes.api.model.Sysctl);

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$SysctlsNested<A> setNewSysctlLike(int, io.dekorate.deps.kubernetes.api.model.Sysctl);

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$SysctlsNested<A> editSysctl(int);

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$SysctlsNested<A> editFirstSysctl();

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$SysctlsNested<A> editLastSysctl();

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$SysctlsNested<A> editMatchingSysctl(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.SysctlBuilder>);

  public abstract io.dekorate.deps.kubernetes.api.model.WindowsSecurityContextOptions getWindowsOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.WindowsSecurityContextOptions buildWindowsOptions();

  public abstract A withWindowsOptions(io.dekorate.deps.kubernetes.api.model.WindowsSecurityContextOptions);

  public abstract java.lang.Boolean hasWindowsOptions();

  public abstract A withNewWindowsOptions(java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$WindowsOptionsNested<A> withNewWindowsOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$WindowsOptionsNested<A> withNewWindowsOptionsLike(io.dekorate.deps.kubernetes.api.model.WindowsSecurityContextOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$WindowsOptionsNested<A> editWindowsOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$WindowsOptionsNested<A> editOrNewWindowsOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContextFluent$WindowsOptionsNested<A> editOrNewWindowsOptionsLike(io.dekorate.deps.kubernetes.api.model.WindowsSecurityContextOptions);
}
