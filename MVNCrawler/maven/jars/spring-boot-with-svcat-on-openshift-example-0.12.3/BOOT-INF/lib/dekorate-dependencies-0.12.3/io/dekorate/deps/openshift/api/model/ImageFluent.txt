Compiled from "ImageFluent.java"
public interface io.dekorate.deps.openshift.api.model.ImageFluent<A extends io.dekorate.deps.openshift.api.model.ImageFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract java.lang.String getDockerImageConfig();

  public abstract A withDockerImageConfig(java.lang.String);

  public abstract java.lang.Boolean hasDockerImageConfig();

  public abstract A withNewDockerImageConfig(java.lang.String);

  public abstract A withNewDockerImageConfig(java.lang.StringBuilder);

  public abstract A withNewDockerImageConfig(java.lang.StringBuffer);

  public abstract A addToDockerImageLayers(int, io.dekorate.deps.openshift.api.model.ImageLayer);

  public abstract A setToDockerImageLayers(int, io.dekorate.deps.openshift.api.model.ImageLayer);

  public abstract A addToDockerImageLayers(io.dekorate.deps.openshift.api.model.ImageLayer...);

  public abstract A addAllToDockerImageLayers(java.util.Collection<io.dekorate.deps.openshift.api.model.ImageLayer>);

  public abstract A removeFromDockerImageLayers(io.dekorate.deps.openshift.api.model.ImageLayer...);

  public abstract A removeAllFromDockerImageLayers(java.util.Collection<io.dekorate.deps.openshift.api.model.ImageLayer>);

  public abstract A removeMatchingFromDockerImageLayers(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageLayerBuilder>);

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ImageLayer> getDockerImageLayers();

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ImageLayer> buildDockerImageLayers();

  public abstract io.dekorate.deps.openshift.api.model.ImageLayer buildDockerImageLayer(int);

  public abstract io.dekorate.deps.openshift.api.model.ImageLayer buildFirstDockerImageLayer();

  public abstract io.dekorate.deps.openshift.api.model.ImageLayer buildLastDockerImageLayer();

  public abstract io.dekorate.deps.openshift.api.model.ImageLayer buildMatchingDockerImageLayer(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageLayerBuilder>);

  public abstract java.lang.Boolean hasMatchingDockerImageLayer(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageLayerBuilder>);

  public abstract A withDockerImageLayers(java.util.List<io.dekorate.deps.openshift.api.model.ImageLayer>);

  public abstract A withDockerImageLayers(io.dekorate.deps.openshift.api.model.ImageLayer...);

  public abstract java.lang.Boolean hasDockerImageLayers();

  public abstract A addNewDockerImageLayer(java.lang.String, java.lang.String, java.lang.Long);

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$DockerImageLayersNested<A> addNewDockerImageLayer();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$DockerImageLayersNested<A> addNewDockerImageLayerLike(io.dekorate.deps.openshift.api.model.ImageLayer);

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$DockerImageLayersNested<A> setNewDockerImageLayerLike(int, io.dekorate.deps.openshift.api.model.ImageLayer);

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$DockerImageLayersNested<A> editDockerImageLayer(int);

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$DockerImageLayersNested<A> editFirstDockerImageLayer();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$DockerImageLayersNested<A> editLastDockerImageLayer();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$DockerImageLayersNested<A> editMatchingDockerImageLayer(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageLayerBuilder>);

  public abstract java.lang.String getDockerImageManifest();

  public abstract A withDockerImageManifest(java.lang.String);

  public abstract java.lang.Boolean hasDockerImageManifest();

  public abstract A withNewDockerImageManifest(java.lang.String);

  public abstract A withNewDockerImageManifest(java.lang.StringBuilder);

  public abstract A withNewDockerImageManifest(java.lang.StringBuffer);

  public abstract java.lang.String getDockerImageManifestMediaType();

  public abstract A withDockerImageManifestMediaType(java.lang.String);

  public abstract java.lang.Boolean hasDockerImageManifestMediaType();

  public abstract A withNewDockerImageManifestMediaType(java.lang.String);

  public abstract A withNewDockerImageManifestMediaType(java.lang.StringBuilder);

  public abstract A withNewDockerImageManifestMediaType(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.runtime.RawExtension getDockerImageMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.runtime.RawExtension buildDockerImageMetadata();

  public abstract A withDockerImageMetadata(io.dekorate.deps.kubernetes.api.model.runtime.RawExtension);

  public abstract java.lang.Boolean hasDockerImageMetadata();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$DockerImageMetadataNested<A> withNewDockerImageMetadata();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$DockerImageMetadataNested<A> withNewDockerImageMetadataLike(io.dekorate.deps.kubernetes.api.model.runtime.RawExtension);

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$DockerImageMetadataNested<A> editDockerImageMetadata();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$DockerImageMetadataNested<A> editOrNewDockerImageMetadata();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$DockerImageMetadataNested<A> editOrNewDockerImageMetadataLike(io.dekorate.deps.kubernetes.api.model.runtime.RawExtension);

  public abstract java.lang.String getDockerImageMetadataVersion();

  public abstract A withDockerImageMetadataVersion(java.lang.String);

  public abstract java.lang.Boolean hasDockerImageMetadataVersion();

  public abstract A withNewDockerImageMetadataVersion(java.lang.String);

  public abstract A withNewDockerImageMetadataVersion(java.lang.StringBuilder);

  public abstract A withNewDockerImageMetadataVersion(java.lang.StringBuffer);

  public abstract java.lang.String getDockerImageReference();

  public abstract A withDockerImageReference(java.lang.String);

  public abstract java.lang.Boolean hasDockerImageReference();

  public abstract A withNewDockerImageReference(java.lang.String);

  public abstract A withNewDockerImageReference(java.lang.StringBuilder);

  public abstract A withNewDockerImageReference(java.lang.StringBuffer);

  public abstract A addToDockerImageSignatures(int, java.lang.String);

  public abstract A setToDockerImageSignatures(int, java.lang.String);

  public abstract A addToDockerImageSignatures(java.lang.String...);

  public abstract A addAllToDockerImageSignatures(java.util.Collection<java.lang.String>);

  public abstract A removeFromDockerImageSignatures(java.lang.String...);

  public abstract A removeAllFromDockerImageSignatures(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getDockerImageSignatures();

  public abstract java.lang.String getDockerImageSignature(int);

  public abstract java.lang.String getFirstDockerImageSignature();

  public abstract java.lang.String getLastDockerImageSignature();

  public abstract java.lang.String getMatchingDockerImageSignature(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingDockerImageSignature(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withDockerImageSignatures(java.util.List<java.lang.String>);

  public abstract A withDockerImageSignatures(java.lang.String...);

  public abstract java.lang.Boolean hasDockerImageSignatures();

  public abstract A addNewDockerImageSignature(java.lang.String);

  public abstract A addNewDockerImageSignature(java.lang.StringBuilder);

  public abstract A addNewDockerImageSignature(java.lang.StringBuffer);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectMeta getMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectMeta buildMetadata();

  public abstract A withMetadata(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Boolean hasMetadata();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$MetadataNested<A> withNewMetadata();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$MetadataNested<A> withNewMetadataLike(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$MetadataNested<A> editMetadata();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$MetadataNested<A> editOrNewMetadata();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$MetadataNested<A> editOrNewMetadataLike(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract A addToSignatures(int, io.dekorate.deps.openshift.api.model.ImageSignature);

  public abstract A setToSignatures(int, io.dekorate.deps.openshift.api.model.ImageSignature);

  public abstract A addToSignatures(io.dekorate.deps.openshift.api.model.ImageSignature...);

  public abstract A addAllToSignatures(java.util.Collection<io.dekorate.deps.openshift.api.model.ImageSignature>);

  public abstract A removeFromSignatures(io.dekorate.deps.openshift.api.model.ImageSignature...);

  public abstract A removeAllFromSignatures(java.util.Collection<io.dekorate.deps.openshift.api.model.ImageSignature>);

  public abstract A removeMatchingFromSignatures(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageSignatureBuilder>);

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ImageSignature> getSignatures();

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ImageSignature> buildSignatures();

  public abstract io.dekorate.deps.openshift.api.model.ImageSignature buildSignature(int);

  public abstract io.dekorate.deps.openshift.api.model.ImageSignature buildFirstSignature();

  public abstract io.dekorate.deps.openshift.api.model.ImageSignature buildLastSignature();

  public abstract io.dekorate.deps.openshift.api.model.ImageSignature buildMatchingSignature(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageSignatureBuilder>);

  public abstract java.lang.Boolean hasMatchingSignature(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageSignatureBuilder>);

  public abstract A withSignatures(java.util.List<io.dekorate.deps.openshift.api.model.ImageSignature>);

  public abstract A withSignatures(io.dekorate.deps.openshift.api.model.ImageSignature...);

  public abstract java.lang.Boolean hasSignatures();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$SignaturesNested<A> addNewSignature();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$SignaturesNested<A> addNewSignatureLike(io.dekorate.deps.openshift.api.model.ImageSignature);

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$SignaturesNested<A> setNewSignatureLike(int, io.dekorate.deps.openshift.api.model.ImageSignature);

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$SignaturesNested<A> editSignature(int);

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$SignaturesNested<A> editFirstSignature();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$SignaturesNested<A> editLastSignature();

  public abstract io.dekorate.deps.openshift.api.model.ImageFluent$SignaturesNested<A> editMatchingSignature(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageSignatureBuilder>);
}
