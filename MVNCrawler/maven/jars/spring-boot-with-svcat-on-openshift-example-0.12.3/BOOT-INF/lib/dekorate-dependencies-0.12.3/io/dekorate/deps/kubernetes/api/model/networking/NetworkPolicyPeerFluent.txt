Compiled from "NetworkPolicyPeerFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent<A extends io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.kubernetes.api.model.networking.IPBlock getIpBlock();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.IPBlock buildIpBlock();

  public abstract A withIpBlock(io.dekorate.deps.kubernetes.api.model.networking.IPBlock);

  public abstract java.lang.Boolean hasIpBlock();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$IpBlockNested<A> withNewIpBlock();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$IpBlockNested<A> withNewIpBlockLike(io.dekorate.deps.kubernetes.api.model.networking.IPBlock);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$IpBlockNested<A> editIpBlock();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$IpBlockNested<A> editOrNewIpBlock();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$IpBlockNested<A> editOrNewIpBlockLike(io.dekorate.deps.kubernetes.api.model.networking.IPBlock);

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelector getNamespaceSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelector buildNamespaceSelector();

  public abstract A withNamespaceSelector(io.dekorate.deps.kubernetes.api.model.LabelSelector);

  public abstract java.lang.Boolean hasNamespaceSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$NamespaceSelectorNested<A> withNewNamespaceSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$NamespaceSelectorNested<A> withNewNamespaceSelectorLike(io.dekorate.deps.kubernetes.api.model.LabelSelector);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$NamespaceSelectorNested<A> editNamespaceSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$NamespaceSelectorNested<A> editOrNewNamespaceSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$NamespaceSelectorNested<A> editOrNewNamespaceSelectorLike(io.dekorate.deps.kubernetes.api.model.LabelSelector);

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelector getPodSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelector buildPodSelector();

  public abstract A withPodSelector(io.dekorate.deps.kubernetes.api.model.LabelSelector);

  public abstract java.lang.Boolean hasPodSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$PodSelectorNested<A> withNewPodSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$PodSelectorNested<A> withNewPodSelectorLike(io.dekorate.deps.kubernetes.api.model.LabelSelector);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$PodSelectorNested<A> editPodSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$PodSelectorNested<A> editOrNewPodSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyPeerFluent$PodSelectorNested<A> editOrNewPodSelectorLike(io.dekorate.deps.kubernetes.api.model.LabelSelector);
}
