Compiled from "ReplicationControllerStatusFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.ReplicationControllerStatusFluent<A extends io.dekorate.deps.kubernetes.api.model.ReplicationControllerStatusFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Integer getAvailableReplicas();

  public abstract A withAvailableReplicas(java.lang.Integer);

  public abstract java.lang.Boolean hasAvailableReplicas();

  public abstract A addToConditions(int, io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition);

  public abstract A setToConditions(int, io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition);

  public abstract A addToConditions(io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition...);

  public abstract A addAllToConditions(java.util.Collection<io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition>);

  public abstract A removeFromConditions(io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition>);

  public abstract A removeMatchingFromConditions(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.ReplicationControllerConditionBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition> getConditions();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition> buildConditions();

  public abstract io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition buildCondition(int);

  public abstract io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition buildFirstCondition();

  public abstract io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition buildLastCondition();

  public abstract io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition buildMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.ReplicationControllerConditionBuilder>);

  public abstract java.lang.Boolean hasMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.ReplicationControllerConditionBuilder>);

  public abstract A withConditions(java.util.List<io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition>);

  public abstract A withConditions(io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract A addNewCondition(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.ReplicationControllerStatusFluent$ConditionsNested<A> addNewCondition();

  public abstract io.dekorate.deps.kubernetes.api.model.ReplicationControllerStatusFluent$ConditionsNested<A> addNewConditionLike(io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition);

  public abstract io.dekorate.deps.kubernetes.api.model.ReplicationControllerStatusFluent$ConditionsNested<A> setNewConditionLike(int, io.dekorate.deps.kubernetes.api.model.ReplicationControllerCondition);

  public abstract io.dekorate.deps.kubernetes.api.model.ReplicationControllerStatusFluent$ConditionsNested<A> editCondition(int);

  public abstract io.dekorate.deps.kubernetes.api.model.ReplicationControllerStatusFluent$ConditionsNested<A> editFirstCondition();

  public abstract io.dekorate.deps.kubernetes.api.model.ReplicationControllerStatusFluent$ConditionsNested<A> editLastCondition();

  public abstract io.dekorate.deps.kubernetes.api.model.ReplicationControllerStatusFluent$ConditionsNested<A> editMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.ReplicationControllerConditionBuilder>);

  public abstract java.lang.Integer getFullyLabeledReplicas();

  public abstract A withFullyLabeledReplicas(java.lang.Integer);

  public abstract java.lang.Boolean hasFullyLabeledReplicas();

  public abstract java.lang.Long getObservedGeneration();

  public abstract A withObservedGeneration(java.lang.Long);

  public abstract java.lang.Boolean hasObservedGeneration();

  public abstract java.lang.Integer getReadyReplicas();

  public abstract A withReadyReplicas(java.lang.Integer);

  public abstract java.lang.Boolean hasReadyReplicas();

  public abstract java.lang.Integer getReplicas();

  public abstract A withReplicas(java.lang.Integer);

  public abstract java.lang.Boolean hasReplicas();
}
