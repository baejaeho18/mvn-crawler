Compiled from "PodSecurityPolicySpecFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent<A extends io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Boolean isAllowPrivilegeEscalation();

  public abstract A withAllowPrivilegeEscalation(java.lang.Boolean);

  public abstract java.lang.Boolean hasAllowPrivilegeEscalation();

  public abstract A withNewAllowPrivilegeEscalation(java.lang.String);

  public abstract A withNewAllowPrivilegeEscalation(boolean);

  public abstract A addToAllowedCSIDrivers(int, io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver);

  public abstract A setToAllowedCSIDrivers(int, io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver);

  public abstract A addToAllowedCSIDrivers(io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver...);

  public abstract A addAllToAllowedCSIDrivers(java.util.Collection<io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver>);

  public abstract A removeFromAllowedCSIDrivers(io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver...);

  public abstract A removeAllFromAllowedCSIDrivers(java.util.Collection<io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver>);

  public abstract A removeMatchingFromAllowedCSIDrivers(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriverBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver> getAllowedCSIDrivers();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver> buildAllowedCSIDrivers();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver buildAllowedCSIDriver(int);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver buildFirstAllowedCSIDriver();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver buildLastAllowedCSIDriver();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver buildMatchingAllowedCSIDriver(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriverBuilder>);

  public abstract java.lang.Boolean hasMatchingAllowedCSIDriver(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriverBuilder>);

  public abstract A withAllowedCSIDrivers(java.util.List<io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver>);

  public abstract A withAllowedCSIDrivers(io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver...);

  public abstract java.lang.Boolean hasAllowedCSIDrivers();

  public abstract A addNewAllowedCSIDriver(java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedCSIDriversNested<A> addNewAllowedCSIDriver();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedCSIDriversNested<A> addNewAllowedCSIDriverLike(io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedCSIDriversNested<A> setNewAllowedCSIDriverLike(int, io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriver);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedCSIDriversNested<A> editAllowedCSIDriver(int);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedCSIDriversNested<A> editFirstAllowedCSIDriver();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedCSIDriversNested<A> editLastAllowedCSIDriver();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedCSIDriversNested<A> editMatchingAllowedCSIDriver(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.AllowedCSIDriverBuilder>);

  public abstract A addToAllowedCapabilities(int, java.lang.String);

  public abstract A setToAllowedCapabilities(int, java.lang.String);

  public abstract A addToAllowedCapabilities(java.lang.String...);

  public abstract A addAllToAllowedCapabilities(java.util.Collection<java.lang.String>);

  public abstract A removeFromAllowedCapabilities(java.lang.String...);

  public abstract A removeAllFromAllowedCapabilities(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getAllowedCapabilities();

  public abstract java.lang.String getAllowedCapability(int);

  public abstract java.lang.String getFirstAllowedCapability();

  public abstract java.lang.String getLastAllowedCapability();

  public abstract java.lang.String getMatchingAllowedCapability(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingAllowedCapability(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withAllowedCapabilities(java.util.List<java.lang.String>);

  public abstract A withAllowedCapabilities(java.lang.String...);

  public abstract java.lang.Boolean hasAllowedCapabilities();

  public abstract A addNewAllowedCapability(java.lang.String);

  public abstract A addNewAllowedCapability(java.lang.StringBuilder);

  public abstract A addNewAllowedCapability(java.lang.StringBuffer);

  public abstract A addToAllowedFlexVolumes(int, io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume);

  public abstract A setToAllowedFlexVolumes(int, io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume);

  public abstract A addToAllowedFlexVolumes(io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume...);

  public abstract A addAllToAllowedFlexVolumes(java.util.Collection<io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume>);

  public abstract A removeFromAllowedFlexVolumes(io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume...);

  public abstract A removeAllFromAllowedFlexVolumes(java.util.Collection<io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume>);

  public abstract A removeMatchingFromAllowedFlexVolumes(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolumeBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume> getAllowedFlexVolumes();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume> buildAllowedFlexVolumes();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume buildAllowedFlexVolume(int);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume buildFirstAllowedFlexVolume();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume buildLastAllowedFlexVolume();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume buildMatchingAllowedFlexVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolumeBuilder>);

  public abstract java.lang.Boolean hasMatchingAllowedFlexVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolumeBuilder>);

  public abstract A withAllowedFlexVolumes(java.util.List<io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume>);

  public abstract A withAllowedFlexVolumes(io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume...);

  public abstract java.lang.Boolean hasAllowedFlexVolumes();

  public abstract A addNewAllowedFlexVolume(java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedFlexVolumesNested<A> addNewAllowedFlexVolume();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedFlexVolumesNested<A> addNewAllowedFlexVolumeLike(io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedFlexVolumesNested<A> setNewAllowedFlexVolumeLike(int, io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolume);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedFlexVolumesNested<A> editAllowedFlexVolume(int);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedFlexVolumesNested<A> editFirstAllowedFlexVolume();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedFlexVolumesNested<A> editLastAllowedFlexVolume();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedFlexVolumesNested<A> editMatchingAllowedFlexVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.AllowedFlexVolumeBuilder>);

  public abstract A addToAllowedHostPaths(int, io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath);

  public abstract A setToAllowedHostPaths(int, io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath);

  public abstract A addToAllowedHostPaths(io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath...);

  public abstract A addAllToAllowedHostPaths(java.util.Collection<io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath>);

  public abstract A removeFromAllowedHostPaths(io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath...);

  public abstract A removeAllFromAllowedHostPaths(java.util.Collection<io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath>);

  public abstract A removeMatchingFromAllowedHostPaths(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPathBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath> getAllowedHostPaths();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath> buildAllowedHostPaths();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath buildAllowedHostPath(int);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath buildFirstAllowedHostPath();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath buildLastAllowedHostPath();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath buildMatchingAllowedHostPath(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPathBuilder>);

  public abstract java.lang.Boolean hasMatchingAllowedHostPath(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPathBuilder>);

  public abstract A withAllowedHostPaths(java.util.List<io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath>);

  public abstract A withAllowedHostPaths(io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath...);

  public abstract java.lang.Boolean hasAllowedHostPaths();

  public abstract A addNewAllowedHostPath(java.lang.String, java.lang.Boolean);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedHostPathsNested<A> addNewAllowedHostPath();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedHostPathsNested<A> addNewAllowedHostPathLike(io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedHostPathsNested<A> setNewAllowedHostPathLike(int, io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPath);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedHostPathsNested<A> editAllowedHostPath(int);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedHostPathsNested<A> editFirstAllowedHostPath();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedHostPathsNested<A> editLastAllowedHostPath();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$AllowedHostPathsNested<A> editMatchingAllowedHostPath(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.AllowedHostPathBuilder>);

  public abstract A addToAllowedProcMountTypes(int, java.lang.String);

  public abstract A setToAllowedProcMountTypes(int, java.lang.String);

  public abstract A addToAllowedProcMountTypes(java.lang.String...);

  public abstract A addAllToAllowedProcMountTypes(java.util.Collection<java.lang.String>);

  public abstract A removeFromAllowedProcMountTypes(java.lang.String...);

  public abstract A removeAllFromAllowedProcMountTypes(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getAllowedProcMountTypes();

  public abstract java.lang.String getAllowedProcMountType(int);

  public abstract java.lang.String getFirstAllowedProcMountType();

  public abstract java.lang.String getLastAllowedProcMountType();

  public abstract java.lang.String getMatchingAllowedProcMountType(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingAllowedProcMountType(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withAllowedProcMountTypes(java.util.List<java.lang.String>);

  public abstract A withAllowedProcMountTypes(java.lang.String...);

  public abstract java.lang.Boolean hasAllowedProcMountTypes();

  public abstract A addNewAllowedProcMountType(java.lang.String);

  public abstract A addNewAllowedProcMountType(java.lang.StringBuilder);

  public abstract A addNewAllowedProcMountType(java.lang.StringBuffer);

  public abstract A addToAllowedUnsafeSysctls(int, java.lang.String);

  public abstract A setToAllowedUnsafeSysctls(int, java.lang.String);

  public abstract A addToAllowedUnsafeSysctls(java.lang.String...);

  public abstract A addAllToAllowedUnsafeSysctls(java.util.Collection<java.lang.String>);

  public abstract A removeFromAllowedUnsafeSysctls(java.lang.String...);

  public abstract A removeAllFromAllowedUnsafeSysctls(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getAllowedUnsafeSysctls();

  public abstract java.lang.String getAllowedUnsafeSysctl(int);

  public abstract java.lang.String getFirstAllowedUnsafeSysctl();

  public abstract java.lang.String getLastAllowedUnsafeSysctl();

  public abstract java.lang.String getMatchingAllowedUnsafeSysctl(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingAllowedUnsafeSysctl(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withAllowedUnsafeSysctls(java.util.List<java.lang.String>);

  public abstract A withAllowedUnsafeSysctls(java.lang.String...);

  public abstract java.lang.Boolean hasAllowedUnsafeSysctls();

  public abstract A addNewAllowedUnsafeSysctl(java.lang.String);

  public abstract A addNewAllowedUnsafeSysctl(java.lang.StringBuilder);

  public abstract A addNewAllowedUnsafeSysctl(java.lang.StringBuffer);

  public abstract A addToDefaultAddCapabilities(int, java.lang.String);

  public abstract A setToDefaultAddCapabilities(int, java.lang.String);

  public abstract A addToDefaultAddCapabilities(java.lang.String...);

  public abstract A addAllToDefaultAddCapabilities(java.util.Collection<java.lang.String>);

  public abstract A removeFromDefaultAddCapabilities(java.lang.String...);

  public abstract A removeAllFromDefaultAddCapabilities(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getDefaultAddCapabilities();

  public abstract java.lang.String getDefaultAddCapability(int);

  public abstract java.lang.String getFirstDefaultAddCapability();

  public abstract java.lang.String getLastDefaultAddCapability();

  public abstract java.lang.String getMatchingDefaultAddCapability(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingDefaultAddCapability(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withDefaultAddCapabilities(java.util.List<java.lang.String>);

  public abstract A withDefaultAddCapabilities(java.lang.String...);

  public abstract java.lang.Boolean hasDefaultAddCapabilities();

  public abstract A addNewDefaultAddCapability(java.lang.String);

  public abstract A addNewDefaultAddCapability(java.lang.StringBuilder);

  public abstract A addNewDefaultAddCapability(java.lang.StringBuffer);

  public abstract java.lang.Boolean isDefaultAllowPrivilegeEscalation();

  public abstract A withDefaultAllowPrivilegeEscalation(java.lang.Boolean);

  public abstract java.lang.Boolean hasDefaultAllowPrivilegeEscalation();

  public abstract A withNewDefaultAllowPrivilegeEscalation(java.lang.String);

  public abstract A withNewDefaultAllowPrivilegeEscalation(boolean);

  public abstract A addToForbiddenSysctls(int, java.lang.String);

  public abstract A setToForbiddenSysctls(int, java.lang.String);

  public abstract A addToForbiddenSysctls(java.lang.String...);

  public abstract A addAllToForbiddenSysctls(java.util.Collection<java.lang.String>);

  public abstract A removeFromForbiddenSysctls(java.lang.String...);

  public abstract A removeAllFromForbiddenSysctls(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getForbiddenSysctls();

  public abstract java.lang.String getForbiddenSysctl(int);

  public abstract java.lang.String getFirstForbiddenSysctl();

  public abstract java.lang.String getLastForbiddenSysctl();

  public abstract java.lang.String getMatchingForbiddenSysctl(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingForbiddenSysctl(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withForbiddenSysctls(java.util.List<java.lang.String>);

  public abstract A withForbiddenSysctls(java.lang.String...);

  public abstract java.lang.Boolean hasForbiddenSysctls();

  public abstract A addNewForbiddenSysctl(java.lang.String);

  public abstract A addNewForbiddenSysctl(java.lang.StringBuilder);

  public abstract A addNewForbiddenSysctl(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.FSGroupStrategyOptions getFsGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.FSGroupStrategyOptions buildFsGroup();

  public abstract A withFsGroup(io.dekorate.deps.kubernetes.api.model.policy.FSGroupStrategyOptions);

  public abstract java.lang.Boolean hasFsGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$FsGroupNested<A> withNewFsGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$FsGroupNested<A> withNewFsGroupLike(io.dekorate.deps.kubernetes.api.model.policy.FSGroupStrategyOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$FsGroupNested<A> editFsGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$FsGroupNested<A> editOrNewFsGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$FsGroupNested<A> editOrNewFsGroupLike(io.dekorate.deps.kubernetes.api.model.policy.FSGroupStrategyOptions);

  public abstract java.lang.Boolean isHostIPC();

  public abstract A withHostIPC(java.lang.Boolean);

  public abstract java.lang.Boolean hasHostIPC();

  public abstract A withNewHostIPC(java.lang.String);

  public abstract A withNewHostIPC(boolean);

  public abstract java.lang.Boolean isHostNetwork();

  public abstract A withHostNetwork(java.lang.Boolean);

  public abstract java.lang.Boolean hasHostNetwork();

  public abstract A withNewHostNetwork(java.lang.String);

  public abstract A withNewHostNetwork(boolean);

  public abstract java.lang.Boolean isHostPID();

  public abstract A withHostPID(java.lang.Boolean);

  public abstract java.lang.Boolean hasHostPID();

  public abstract A withNewHostPID(java.lang.String);

  public abstract A withNewHostPID(boolean);

  public abstract A addToHostPorts(int, io.dekorate.deps.kubernetes.api.model.policy.HostPortRange);

  public abstract A setToHostPorts(int, io.dekorate.deps.kubernetes.api.model.policy.HostPortRange);

  public abstract A addToHostPorts(io.dekorate.deps.kubernetes.api.model.policy.HostPortRange...);

  public abstract A addAllToHostPorts(java.util.Collection<io.dekorate.deps.kubernetes.api.model.policy.HostPortRange>);

  public abstract A removeFromHostPorts(io.dekorate.deps.kubernetes.api.model.policy.HostPortRange...);

  public abstract A removeAllFromHostPorts(java.util.Collection<io.dekorate.deps.kubernetes.api.model.policy.HostPortRange>);

  public abstract A removeMatchingFromHostPorts(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.HostPortRangeBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.policy.HostPortRange> getHostPorts();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.policy.HostPortRange> buildHostPorts();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.HostPortRange buildHostPort(int);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.HostPortRange buildFirstHostPort();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.HostPortRange buildLastHostPort();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.HostPortRange buildMatchingHostPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.HostPortRangeBuilder>);

  public abstract java.lang.Boolean hasMatchingHostPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.HostPortRangeBuilder>);

  public abstract A withHostPorts(java.util.List<io.dekorate.deps.kubernetes.api.model.policy.HostPortRange>);

  public abstract A withHostPorts(io.dekorate.deps.kubernetes.api.model.policy.HostPortRange...);

  public abstract java.lang.Boolean hasHostPorts();

  public abstract A addNewHostPort(java.lang.Integer, java.lang.Integer);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$HostPortsNested<A> addNewHostPort();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$HostPortsNested<A> addNewHostPortLike(io.dekorate.deps.kubernetes.api.model.policy.HostPortRange);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$HostPortsNested<A> setNewHostPortLike(int, io.dekorate.deps.kubernetes.api.model.policy.HostPortRange);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$HostPortsNested<A> editHostPort(int);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$HostPortsNested<A> editFirstHostPort();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$HostPortsNested<A> editLastHostPort();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$HostPortsNested<A> editMatchingHostPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.policy.HostPortRangeBuilder>);

  public abstract java.lang.Boolean isPrivileged();

  public abstract A withPrivileged(java.lang.Boolean);

  public abstract java.lang.Boolean hasPrivileged();

  public abstract A withNewPrivileged(java.lang.String);

  public abstract A withNewPrivileged(boolean);

  public abstract java.lang.Boolean isReadOnlyRootFilesystem();

  public abstract A withReadOnlyRootFilesystem(java.lang.Boolean);

  public abstract java.lang.Boolean hasReadOnlyRootFilesystem();

  public abstract A withNewReadOnlyRootFilesystem(java.lang.String);

  public abstract A withNewReadOnlyRootFilesystem(boolean);

  public abstract A addToRequiredDropCapabilities(int, java.lang.String);

  public abstract A setToRequiredDropCapabilities(int, java.lang.String);

  public abstract A addToRequiredDropCapabilities(java.lang.String...);

  public abstract A addAllToRequiredDropCapabilities(java.util.Collection<java.lang.String>);

  public abstract A removeFromRequiredDropCapabilities(java.lang.String...);

  public abstract A removeAllFromRequiredDropCapabilities(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getRequiredDropCapabilities();

  public abstract java.lang.String getRequiredDropCapability(int);

  public abstract java.lang.String getFirstRequiredDropCapability();

  public abstract java.lang.String getLastRequiredDropCapability();

  public abstract java.lang.String getMatchingRequiredDropCapability(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingRequiredDropCapability(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withRequiredDropCapabilities(java.util.List<java.lang.String>);

  public abstract A withRequiredDropCapabilities(java.lang.String...);

  public abstract java.lang.Boolean hasRequiredDropCapabilities();

  public abstract A addNewRequiredDropCapability(java.lang.String);

  public abstract A addNewRequiredDropCapability(java.lang.StringBuilder);

  public abstract A addNewRequiredDropCapability(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.RunAsGroupStrategyOptions getRunAsGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.RunAsGroupStrategyOptions buildRunAsGroup();

  public abstract A withRunAsGroup(io.dekorate.deps.kubernetes.api.model.policy.RunAsGroupStrategyOptions);

  public abstract java.lang.Boolean hasRunAsGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RunAsGroupNested<A> withNewRunAsGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RunAsGroupNested<A> withNewRunAsGroupLike(io.dekorate.deps.kubernetes.api.model.policy.RunAsGroupStrategyOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RunAsGroupNested<A> editRunAsGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RunAsGroupNested<A> editOrNewRunAsGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RunAsGroupNested<A> editOrNewRunAsGroupLike(io.dekorate.deps.kubernetes.api.model.policy.RunAsGroupStrategyOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.KubernetesRunAsUserStrategyOptions getRunAsUser();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.KubernetesRunAsUserStrategyOptions buildRunAsUser();

  public abstract A withRunAsUser(io.dekorate.deps.kubernetes.api.model.policy.KubernetesRunAsUserStrategyOptions);

  public abstract java.lang.Boolean hasRunAsUser();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RunAsUserNested<A> withNewRunAsUser();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RunAsUserNested<A> withNewRunAsUserLike(io.dekorate.deps.kubernetes.api.model.policy.KubernetesRunAsUserStrategyOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RunAsUserNested<A> editRunAsUser();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RunAsUserNested<A> editOrNewRunAsUser();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RunAsUserNested<A> editOrNewRunAsUserLike(io.dekorate.deps.kubernetes.api.model.policy.KubernetesRunAsUserStrategyOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.RuntimeClassStrategyOptions getRuntimeClass();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.RuntimeClassStrategyOptions buildRuntimeClass();

  public abstract A withRuntimeClass(io.dekorate.deps.kubernetes.api.model.policy.RuntimeClassStrategyOptions);

  public abstract java.lang.Boolean hasRuntimeClass();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RuntimeClassNested<A> withNewRuntimeClass();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RuntimeClassNested<A> withNewRuntimeClassLike(io.dekorate.deps.kubernetes.api.model.policy.RuntimeClassStrategyOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RuntimeClassNested<A> editRuntimeClass();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RuntimeClassNested<A> editOrNewRuntimeClass();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$RuntimeClassNested<A> editOrNewRuntimeClassLike(io.dekorate.deps.kubernetes.api.model.policy.RuntimeClassStrategyOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.SELinuxStrategyOptions getSeLinux();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.SELinuxStrategyOptions buildSeLinux();

  public abstract A withSeLinux(io.dekorate.deps.kubernetes.api.model.policy.SELinuxStrategyOptions);

  public abstract java.lang.Boolean hasSeLinux();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$SeLinuxNested<A> withNewSeLinux();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$SeLinuxNested<A> withNewSeLinuxLike(io.dekorate.deps.kubernetes.api.model.policy.SELinuxStrategyOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$SeLinuxNested<A> editSeLinux();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$SeLinuxNested<A> editOrNewSeLinux();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$SeLinuxNested<A> editOrNewSeLinuxLike(io.dekorate.deps.kubernetes.api.model.policy.SELinuxStrategyOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.SupplementalGroupsStrategyOptions getSupplementalGroups();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.SupplementalGroupsStrategyOptions buildSupplementalGroups();

  public abstract A withSupplementalGroups(io.dekorate.deps.kubernetes.api.model.policy.SupplementalGroupsStrategyOptions);

  public abstract java.lang.Boolean hasSupplementalGroups();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$SupplementalGroupsNested<A> withNewSupplementalGroups();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$SupplementalGroupsNested<A> withNewSupplementalGroupsLike(io.dekorate.deps.kubernetes.api.model.policy.SupplementalGroupsStrategyOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$SupplementalGroupsNested<A> editSupplementalGroups();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$SupplementalGroupsNested<A> editOrNewSupplementalGroups();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicySpecFluent$SupplementalGroupsNested<A> editOrNewSupplementalGroupsLike(io.dekorate.deps.kubernetes.api.model.policy.SupplementalGroupsStrategyOptions);

  public abstract A addToVolumes(int, java.lang.String);

  public abstract A setToVolumes(int, java.lang.String);

  public abstract A addToVolumes(java.lang.String...);

  public abstract A addAllToVolumes(java.util.Collection<java.lang.String>);

  public abstract A removeFromVolumes(java.lang.String...);

  public abstract A removeAllFromVolumes(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getVolumes();

  public abstract java.lang.String getVolume(int);

  public abstract java.lang.String getFirstVolume();

  public abstract java.lang.String getLastVolume();

  public abstract java.lang.String getMatchingVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withVolumes(java.util.List<java.lang.String>);

  public abstract A withVolumes(java.lang.String...);

  public abstract java.lang.Boolean hasVolumes();

  public abstract A addNewVolume(java.lang.String);

  public abstract A addNewVolume(java.lang.StringBuilder);

  public abstract A addNewVolume(java.lang.StringBuffer);
}
