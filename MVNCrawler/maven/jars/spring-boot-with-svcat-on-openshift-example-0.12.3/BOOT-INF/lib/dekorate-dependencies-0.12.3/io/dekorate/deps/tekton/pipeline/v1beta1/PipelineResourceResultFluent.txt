Compiled from "PipelineResourceResultFluent.java"
public interface io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResultFluent<A extends io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResultFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getKey();

  public abstract A withKey(java.lang.String);

  public abstract java.lang.Boolean hasKey();

  public abstract A withNewKey(java.lang.String);

  public abstract A withNewKey(java.lang.StringBuilder);

  public abstract A withNewKey(java.lang.StringBuffer);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceRef getResourceRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceRef buildResourceRef();

  public abstract A withResourceRef(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceRef);

  public abstract java.lang.Boolean hasResourceRef();

  public abstract A withNewResourceRef(java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResultFluent$ResourceRefNested<A> withNewResourceRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResultFluent$ResourceRefNested<A> withNewResourceRefLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceRef);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResultFluent$ResourceRefNested<A> editResourceRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResultFluent$ResourceRefNested<A> editOrNewResourceRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceResultFluent$ResourceRefNested<A> editOrNewResourceRefLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceRef);

  public abstract java.lang.String getType();

  public abstract A withType(java.lang.String);

  public abstract java.lang.Boolean hasType();

  public abstract A withNewType(java.lang.String);

  public abstract A withNewType(java.lang.StringBuilder);

  public abstract A withNewType(java.lang.StringBuffer);

  public abstract java.lang.String getValue();

  public abstract A withValue(java.lang.String);

  public abstract java.lang.Boolean hasValue();

  public abstract A withNewValue(java.lang.String);

  public abstract A withNewValue(java.lang.StringBuilder);

  public abstract A withNewValue(java.lang.StringBuffer);
}
