Compiled from "DeliverySpecFluent.java"
public interface io.dekorate.deps.knative.dev.duck.v1beta1.DeliverySpecFluent<A extends io.dekorate.deps.knative.dev.duck.v1beta1.DeliverySpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getBackoffDelay();

  public abstract A withBackoffDelay(java.lang.String);

  public abstract java.lang.Boolean hasBackoffDelay();

  public abstract A withNewBackoffDelay(java.lang.String);

  public abstract A withNewBackoffDelay(java.lang.StringBuilder);

  public abstract A withNewBackoffDelay(java.lang.StringBuffer);

  public abstract java.lang.String getBackoffPolicy();

  public abstract A withBackoffPolicy(java.lang.String);

  public abstract java.lang.Boolean hasBackoffPolicy();

  public abstract A withNewBackoffPolicy(java.lang.String);

  public abstract A withNewBackoffPolicy(java.lang.StringBuilder);

  public abstract A withNewBackoffPolicy(java.lang.StringBuffer);

  public abstract io.dekorate.deps.knative.duck.v1.Destination getDeadLetterSink();

  public abstract io.dekorate.deps.knative.duck.v1.Destination buildDeadLetterSink();

  public abstract A withDeadLetterSink(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract java.lang.Boolean hasDeadLetterSink();

  public abstract io.dekorate.deps.knative.dev.duck.v1beta1.DeliverySpecFluent$DeadLetterSinkNested<A> withNewDeadLetterSink();

  public abstract io.dekorate.deps.knative.dev.duck.v1beta1.DeliverySpecFluent$DeadLetterSinkNested<A> withNewDeadLetterSinkLike(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract io.dekorate.deps.knative.dev.duck.v1beta1.DeliverySpecFluent$DeadLetterSinkNested<A> editDeadLetterSink();

  public abstract io.dekorate.deps.knative.dev.duck.v1beta1.DeliverySpecFluent$DeadLetterSinkNested<A> editOrNewDeadLetterSink();

  public abstract io.dekorate.deps.knative.dev.duck.v1beta1.DeliverySpecFluent$DeadLetterSinkNested<A> editOrNewDeadLetterSinkLike(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract java.lang.Integer getRetry();

  public abstract A withRetry(java.lang.Integer);

  public abstract java.lang.Boolean hasRetry();
}
