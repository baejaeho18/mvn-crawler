Compiled from "OAuthClientFluent.java"
public interface io.dekorate.deps.openshift.api.model.OAuthClientFluent<A extends io.dekorate.deps.openshift.api.model.OAuthClientFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Integer getAccessTokenInactivityTimeoutSeconds();

  public abstract A withAccessTokenInactivityTimeoutSeconds(java.lang.Integer);

  public abstract java.lang.Boolean hasAccessTokenInactivityTimeoutSeconds();

  public abstract java.lang.Integer getAccessTokenMaxAgeSeconds();

  public abstract A withAccessTokenMaxAgeSeconds(java.lang.Integer);

  public abstract java.lang.Boolean hasAccessTokenMaxAgeSeconds();

  public abstract A addToAdditionalSecrets(int, java.lang.String);

  public abstract A setToAdditionalSecrets(int, java.lang.String);

  public abstract A addToAdditionalSecrets(java.lang.String...);

  public abstract A addAllToAdditionalSecrets(java.util.Collection<java.lang.String>);

  public abstract A removeFromAdditionalSecrets(java.lang.String...);

  public abstract A removeAllFromAdditionalSecrets(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getAdditionalSecrets();

  public abstract java.lang.String getAdditionalSecret(int);

  public abstract java.lang.String getFirstAdditionalSecret();

  public abstract java.lang.String getLastAdditionalSecret();

  public abstract java.lang.String getMatchingAdditionalSecret(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingAdditionalSecret(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withAdditionalSecrets(java.util.List<java.lang.String>);

  public abstract A withAdditionalSecrets(java.lang.String...);

  public abstract java.lang.Boolean hasAdditionalSecrets();

  public abstract A addNewAdditionalSecret(java.lang.String);

  public abstract A addNewAdditionalSecret(java.lang.StringBuilder);

  public abstract A addNewAdditionalSecret(java.lang.StringBuffer);

  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract java.lang.String getGrantMethod();

  public abstract A withGrantMethod(java.lang.String);

  public abstract java.lang.Boolean hasGrantMethod();

  public abstract A withNewGrantMethod(java.lang.String);

  public abstract A withNewGrantMethod(java.lang.StringBuilder);

  public abstract A withNewGrantMethod(java.lang.StringBuffer);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectMeta getMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectMeta buildMetadata();

  public abstract A withMetadata(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Boolean hasMetadata();

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientFluent$MetadataNested<A> withNewMetadata();

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientFluent$MetadataNested<A> withNewMetadataLike(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientFluent$MetadataNested<A> editMetadata();

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientFluent$MetadataNested<A> editOrNewMetadata();

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientFluent$MetadataNested<A> editOrNewMetadataLike(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract A addToRedirectURIs(int, java.lang.String);

  public abstract A setToRedirectURIs(int, java.lang.String);

  public abstract A addToRedirectURIs(java.lang.String...);

  public abstract A addAllToRedirectURIs(java.util.Collection<java.lang.String>);

  public abstract A removeFromRedirectURIs(java.lang.String...);

  public abstract A removeAllFromRedirectURIs(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getRedirectURIs();

  public abstract java.lang.String getRedirectURI(int);

  public abstract java.lang.String getFirstRedirectURI();

  public abstract java.lang.String getLastRedirectURI();

  public abstract java.lang.String getMatchingRedirectURI(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingRedirectURI(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withRedirectURIs(java.util.List<java.lang.String>);

  public abstract A withRedirectURIs(java.lang.String...);

  public abstract java.lang.Boolean hasRedirectURIs();

  public abstract A addNewRedirectURI(java.lang.String);

  public abstract A addNewRedirectURI(java.lang.StringBuilder);

  public abstract A addNewRedirectURI(java.lang.StringBuffer);

  public abstract java.lang.Boolean isRespondWithChallenges();

  public abstract A withRespondWithChallenges(java.lang.Boolean);

  public abstract java.lang.Boolean hasRespondWithChallenges();

  public abstract A withNewRespondWithChallenges(java.lang.String);

  public abstract A withNewRespondWithChallenges(boolean);

  public abstract A addToScopeRestrictions(int, io.dekorate.deps.openshift.api.model.ScopeRestriction);

  public abstract A setToScopeRestrictions(int, io.dekorate.deps.openshift.api.model.ScopeRestriction);

  public abstract A addToScopeRestrictions(io.dekorate.deps.openshift.api.model.ScopeRestriction...);

  public abstract A addAllToScopeRestrictions(java.util.Collection<io.dekorate.deps.openshift.api.model.ScopeRestriction>);

  public abstract A removeFromScopeRestrictions(io.dekorate.deps.openshift.api.model.ScopeRestriction...);

  public abstract A removeAllFromScopeRestrictions(java.util.Collection<io.dekorate.deps.openshift.api.model.ScopeRestriction>);

  public abstract A removeMatchingFromScopeRestrictions(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ScopeRestrictionBuilder>);

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ScopeRestriction> getScopeRestrictions();

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ScopeRestriction> buildScopeRestrictions();

  public abstract io.dekorate.deps.openshift.api.model.ScopeRestriction buildScopeRestriction(int);

  public abstract io.dekorate.deps.openshift.api.model.ScopeRestriction buildFirstScopeRestriction();

  public abstract io.dekorate.deps.openshift.api.model.ScopeRestriction buildLastScopeRestriction();

  public abstract io.dekorate.deps.openshift.api.model.ScopeRestriction buildMatchingScopeRestriction(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ScopeRestrictionBuilder>);

  public abstract java.lang.Boolean hasMatchingScopeRestriction(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ScopeRestrictionBuilder>);

  public abstract A withScopeRestrictions(java.util.List<io.dekorate.deps.openshift.api.model.ScopeRestriction>);

  public abstract A withScopeRestrictions(io.dekorate.deps.openshift.api.model.ScopeRestriction...);

  public abstract java.lang.Boolean hasScopeRestrictions();

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientFluent$ScopeRestrictionsNested<A> addNewScopeRestriction();

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientFluent$ScopeRestrictionsNested<A> addNewScopeRestrictionLike(io.dekorate.deps.openshift.api.model.ScopeRestriction);

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientFluent$ScopeRestrictionsNested<A> setNewScopeRestrictionLike(int, io.dekorate.deps.openshift.api.model.ScopeRestriction);

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientFluent$ScopeRestrictionsNested<A> editScopeRestriction(int);

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientFluent$ScopeRestrictionsNested<A> editFirstScopeRestriction();

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientFluent$ScopeRestrictionsNested<A> editLastScopeRestriction();

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientFluent$ScopeRestrictionsNested<A> editMatchingScopeRestriction(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ScopeRestrictionBuilder>);

  public abstract java.lang.String getSecret();

  public abstract A withSecret(java.lang.String);

  public abstract java.lang.Boolean hasSecret();

  public abstract A withNewSecret(java.lang.String);

  public abstract A withNewSecret(java.lang.StringBuilder);

  public abstract A withNewSecret(java.lang.StringBuffer);
}
