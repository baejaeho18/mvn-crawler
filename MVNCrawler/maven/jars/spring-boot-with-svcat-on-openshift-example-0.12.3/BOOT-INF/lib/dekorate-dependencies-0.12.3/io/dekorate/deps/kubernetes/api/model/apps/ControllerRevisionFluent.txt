Compiled from "ControllerRevisionFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent<A extends io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.HasMetadata getData();

  public abstract io.dekorate.deps.kubernetes.api.model.HasMetadata buildData();

  public abstract A withData(io.dekorate.deps.kubernetes.api.model.HasMetadata);

  public abstract java.lang.Boolean hasData();

  public abstract A withValidatingWebhookConfigurationData(io.dekorate.deps.kubernetes.api.model.admissionregistration.ValidatingWebhookConfiguration);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ValidatingWebhookConfigurationDataNested<A> withNewValidatingWebhookConfigurationData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ValidatingWebhookConfigurationDataNested<A> withNewValidatingWebhookConfigurationDataLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.ValidatingWebhookConfiguration);

  public abstract A withStorageClassData(io.dekorate.deps.kubernetes.api.model.storage.StorageClass);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$StorageClassDataNested<A> withNewStorageClassData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$StorageClassDataNested<A> withNewStorageClassDataLike(io.dekorate.deps.kubernetes.api.model.storage.StorageClass);

  public abstract A withClusterRoleBindingData(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleBinding);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ClusterRoleBindingDataNested<A> withNewClusterRoleBindingData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ClusterRoleBindingDataNested<A> withNewClusterRoleBindingDataLike(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleBinding);

  public abstract A withCSINodeData(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSINode);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$CSINodeDataNested<A> withNewCSINodeData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$CSINodeDataNested<A> withNewCSINodeDataLike(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSINode);

  public abstract A withOpenshiftRoleBindingData(io.dekorate.deps.openshift.api.model.OpenshiftRoleBinding);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OpenshiftRoleBindingDataNested<A> withNewOpenshiftRoleBindingData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OpenshiftRoleBindingDataNested<A> withNewOpenshiftRoleBindingDataLike(io.dekorate.deps.openshift.api.model.OpenshiftRoleBinding);

  public abstract A withPodDisruptionBudgetData(io.dekorate.deps.kubernetes.api.model.policy.PodDisruptionBudget);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PodDisruptionBudgetDataNested<A> withNewPodDisruptionBudgetData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PodDisruptionBudgetDataNested<A> withNewPodDisruptionBudgetDataLike(io.dekorate.deps.kubernetes.api.model.policy.PodDisruptionBudget);

  public abstract A withOpenshiftClusterRoleBindingData(io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleBinding);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OpenshiftClusterRoleBindingDataNested<A> withNewOpenshiftClusterRoleBindingData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OpenshiftClusterRoleBindingDataNested<A> withNewOpenshiftClusterRoleBindingDataLike(io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleBinding);

  public abstract A withNetworkPolicyData(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicy);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$NetworkPolicyDataNested<A> withNewNetworkPolicyData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$NetworkPolicyDataNested<A> withNewNetworkPolicyDataLike(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicy);

  public abstract A withRouteData(io.dekorate.deps.openshift.api.model.Route);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$RouteDataNested<A> withNewRouteData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$RouteDataNested<A> withNewRouteDataLike(io.dekorate.deps.openshift.api.model.Route);

  public abstract A withNamespaceData(io.dekorate.deps.kubernetes.api.model.Namespace);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$NamespaceDataNested<A> withNewNamespaceData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$NamespaceDataNested<A> withNewNamespaceDataLike(io.dekorate.deps.kubernetes.api.model.Namespace);

  public abstract A withLocalSubjectAccessReviewData(io.dekorate.deps.kubernetes.api.model.authorization.LocalSubjectAccessReview);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$LocalSubjectAccessReviewDataNested<A> withNewLocalSubjectAccessReviewData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$LocalSubjectAccessReviewDataNested<A> withNewLocalSubjectAccessReviewDataLike(io.dekorate.deps.kubernetes.api.model.authorization.LocalSubjectAccessReview);

  public abstract A withLeaseData(io.dekorate.deps.kubernetes.api.model.coordination.v1.Lease);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$LeaseDataNested<A> withNewLeaseData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$LeaseDataNested<A> withNewLeaseDataLike(io.dekorate.deps.kubernetes.api.model.coordination.v1.Lease);

  public abstract A withServiceData(io.dekorate.deps.kubernetes.api.model.Service);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ServiceDataNested<A> withNewServiceData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ServiceDataNested<A> withNewServiceDataLike(io.dekorate.deps.kubernetes.api.model.Service);

  public abstract A withReplicationControllerData(io.dekorate.deps.kubernetes.api.model.ReplicationController);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ReplicationControllerDataNested<A> withNewReplicationControllerData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ReplicationControllerDataNested<A> withNewReplicationControllerDataLike(io.dekorate.deps.kubernetes.api.model.ReplicationController);

  public abstract A withSubjectAccessReviewData(io.dekorate.deps.kubernetes.api.model.authorization.SubjectAccessReview);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$SubjectAccessReviewDataNested<A> withNewSubjectAccessReviewData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$SubjectAccessReviewDataNested<A> withNewSubjectAccessReviewDataLike(io.dekorate.deps.kubernetes.api.model.authorization.SubjectAccessReview);

  public abstract A withMutatingWebhookConfigurationData(io.dekorate.deps.kubernetes.api.model.admissionregistration.MutatingWebhookConfiguration);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$MutatingWebhookConfigurationDataNested<A> withNewMutatingWebhookConfigurationData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$MutatingWebhookConfigurationDataNested<A> withNewMutatingWebhookConfigurationDataLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.MutatingWebhookConfiguration);

  public abstract A withPodMetricsData(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.PodMetrics);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PodMetricsDataNested<A> withNewPodMetricsData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PodMetricsDataNested<A> withNewPodMetricsDataLike(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.PodMetrics);

  public abstract A withHorizontalPodAutoscalerData(io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscaler);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$HorizontalPodAutoscalerDataNested<A> withNewHorizontalPodAutoscalerData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$HorizontalPodAutoscalerDataNested<A> withNewHorizontalPodAutoscalerDataLike(io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscaler);

  public abstract A withImageData(io.dekorate.deps.openshift.api.model.Image);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ImageDataNested<A> withNewImageData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ImageDataNested<A> withNewImageDataLike(io.dekorate.deps.openshift.api.model.Image);

  public abstract A withReplicaSetData(io.dekorate.deps.kubernetes.api.model.apps.ReplicaSet);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ReplicaSetDataNested<A> withNewReplicaSetData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ReplicaSetDataNested<A> withNewReplicaSetDataLike(io.dekorate.deps.kubernetes.api.model.apps.ReplicaSet);

  public abstract A withEndpointSliceData(io.dekorate.deps.kubernetes.api.model.discovery.EndpointSlice);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$EndpointSliceDataNested<A> withNewEndpointSliceData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$EndpointSliceDataNested<A> withNewEndpointSliceDataLike(io.dekorate.deps.kubernetes.api.model.discovery.EndpointSlice);

  public abstract A withCronJobData(io.dekorate.deps.kubernetes.api.model.batch.CronJob);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$CronJobDataNested<A> withNewCronJobData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$CronJobDataNested<A> withNewCronJobDataLike(io.dekorate.deps.kubernetes.api.model.batch.CronJob);

  public abstract A withEndpointsData(io.dekorate.deps.kubernetes.api.model.Endpoints);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$EndpointsDataNested<A> withNewEndpointsData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$EndpointsDataNested<A> withNewEndpointsDataLike(io.dekorate.deps.kubernetes.api.model.Endpoints);

  public abstract A withPodData(io.dekorate.deps.kubernetes.api.model.Pod);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PodDataNested<A> withNewPodData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PodDataNested<A> withNewPodDataLike(io.dekorate.deps.kubernetes.api.model.Pod);

  public abstract A withConfigMapData(io.dekorate.deps.kubernetes.api.model.ConfigMap);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ConfigMapDataNested<A> withNewConfigMapData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ConfigMapDataNested<A> withNewConfigMapDataLike(io.dekorate.deps.kubernetes.api.model.ConfigMap);

  public abstract A withCustomResourceDefinitionData(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinition);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$CustomResourceDefinitionDataNested<A> withNewCustomResourceDefinitionData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$CustomResourceDefinitionDataNested<A> withNewCustomResourceDefinitionDataLike(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinition);

  public abstract A withBuildData(io.dekorate.deps.openshift.api.model.Build);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$BuildDataNested<A> withNewBuildData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$BuildDataNested<A> withNewBuildDataLike(io.dekorate.deps.openshift.api.model.Build);

  public abstract A withImageStreamTagData(io.dekorate.deps.openshift.api.model.ImageStreamTag);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ImageStreamTagDataNested<A> withNewImageStreamTagData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ImageStreamTagDataNested<A> withNewImageStreamTagDataLike(io.dekorate.deps.openshift.api.model.ImageStreamTag);

  public abstract A withGroupData(io.dekorate.deps.openshift.api.model.Group);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$GroupDataNested<A> withNewGroupData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$GroupDataNested<A> withNewGroupDataLike(io.dekorate.deps.openshift.api.model.Group);

  public abstract A withImageSignatureData(io.dekorate.deps.openshift.api.model.ImageSignature);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ImageSignatureDataNested<A> withNewImageSignatureData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ImageSignatureDataNested<A> withNewImageSignatureDataLike(io.dekorate.deps.openshift.api.model.ImageSignature);

  public abstract A withScaleData(io.dekorate.deps.kubernetes.api.model.v1.Scale);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ScaleDataNested<A> withNewScaleData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ScaleDataNested<A> withNewScaleDataLike(io.dekorate.deps.kubernetes.api.model.v1.Scale);

  public abstract A withResourceQuotaData(io.dekorate.deps.kubernetes.api.model.ResourceQuota);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ResourceQuotaDataNested<A> withNewResourceQuotaData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ResourceQuotaDataNested<A> withNewResourceQuotaDataLike(io.dekorate.deps.kubernetes.api.model.ResourceQuota);

  public abstract A withBuildRequestData(io.dekorate.deps.openshift.api.model.BuildRequest);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$BuildRequestDataNested<A> withNewBuildRequestData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$BuildRequestDataNested<A> withNewBuildRequestDataLike(io.dekorate.deps.openshift.api.model.BuildRequest);

  public abstract A withDaemonSetData(io.dekorate.deps.kubernetes.api.model.apps.DaemonSet);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$DaemonSetDataNested<A> withNewDaemonSetData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$DaemonSetDataNested<A> withNewDaemonSetDataLike(io.dekorate.deps.kubernetes.api.model.apps.DaemonSet);

  public abstract A withImageStreamData(io.dekorate.deps.openshift.api.model.ImageStream);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ImageStreamDataNested<A> withNewImageStreamData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ImageStreamDataNested<A> withNewImageStreamDataLike(io.dekorate.deps.openshift.api.model.ImageStream);

  public abstract A withOpenshiftRoleData(io.dekorate.deps.openshift.api.model.OpenshiftRole);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OpenshiftRoleDataNested<A> withNewOpenshiftRoleData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OpenshiftRoleDataNested<A> withNewOpenshiftRoleDataLike(io.dekorate.deps.openshift.api.model.OpenshiftRole);

  public abstract A withOAuthClientData(io.dekorate.deps.openshift.api.model.OAuthClient);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OAuthClientDataNested<A> withNewOAuthClientData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OAuthClientDataNested<A> withNewOAuthClientDataLike(io.dekorate.deps.openshift.api.model.OAuthClient);

  public abstract A withIdentityData(io.dekorate.deps.openshift.api.model.Identity);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$IdentityDataNested<A> withNewIdentityData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$IdentityDataNested<A> withNewIdentityDataLike(io.dekorate.deps.openshift.api.model.Identity);

  public abstract A withLimitRangeData(io.dekorate.deps.kubernetes.api.model.LimitRange);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$LimitRangeDataNested<A> withNewLimitRangeData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$LimitRangeDataNested<A> withNewLimitRangeDataLike(io.dekorate.deps.kubernetes.api.model.LimitRange);

  public abstract A withClusterVersionData(io.dekorate.deps.openshift.api.model.ClusterVersion);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ClusterVersionDataNested<A> withNewClusterVersionData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ClusterVersionDataNested<A> withNewClusterVersionDataLike(io.dekorate.deps.openshift.api.model.ClusterVersion);

  public abstract A withCSIDriverData(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSIDriver);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$CSIDriverDataNested<A> withNewCSIDriverData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$CSIDriverDataNested<A> withNewCSIDriverDataLike(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSIDriver);

  public abstract A withImageStreamImportData(io.dekorate.deps.openshift.api.model.ImageStreamImport);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ImageStreamImportDataNested<A> withNewImageStreamImportData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ImageStreamImportDataNested<A> withNewImageStreamImportDataLike(io.dekorate.deps.openshift.api.model.ImageStreamImport);

  public abstract A withControllerRevisionData(io.dekorate.deps.kubernetes.api.model.apps.ControllerRevision);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ControllerRevisionDataNested<A> withNewControllerRevisionData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ControllerRevisionDataNested<A> withNewControllerRevisionDataLike(io.dekorate.deps.kubernetes.api.model.apps.ControllerRevision);

  public abstract A withOpenshiftRoleBindingRestrictionData(io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingRestriction);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OpenshiftRoleBindingRestrictionDataNested<A> withNewOpenshiftRoleBindingRestrictionData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OpenshiftRoleBindingRestrictionDataNested<A> withNewOpenshiftRoleBindingRestrictionDataLike(io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingRestriction);

  public abstract A withRoleBindingData(io.dekorate.deps.kubernetes.api.model.rbac.RoleBinding);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$RoleBindingDataNested<A> withNewRoleBindingData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$RoleBindingDataNested<A> withNewRoleBindingDataLike(io.dekorate.deps.kubernetes.api.model.rbac.RoleBinding);

  public abstract A withPodPresetData(io.dekorate.deps.kubernetes.api.model.settings.PodPreset);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PodPresetDataNested<A> withNewPodPresetData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PodPresetDataNested<A> withNewPodPresetDataLike(io.dekorate.deps.kubernetes.api.model.settings.PodPreset);

  public abstract A withProjectData(io.dekorate.deps.openshift.api.model.Project);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ProjectDataNested<A> withNewProjectData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ProjectDataNested<A> withNewProjectDataLike(io.dekorate.deps.openshift.api.model.Project);

  public abstract A withNodeMetricsData(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.NodeMetrics);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$NodeMetricsDataNested<A> withNewNodeMetricsData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$NodeMetricsDataNested<A> withNewNodeMetricsDataLike(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.NodeMetrics);

  public abstract A withBuildConfigData(io.dekorate.deps.openshift.api.model.BuildConfig);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$BuildConfigDataNested<A> withNewBuildConfigData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$BuildConfigDataNested<A> withNewBuildConfigDataLike(io.dekorate.deps.openshift.api.model.BuildConfig);

  public abstract A withClusterRoleData(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRole);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ClusterRoleDataNested<A> withNewClusterRoleData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ClusterRoleDataNested<A> withNewClusterRoleDataLike(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRole);

  public abstract A withVolumeAttachmentData(io.dekorate.deps.kubernetes.api.model.storage.VolumeAttachment);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$VolumeAttachmentDataNested<A> withNewVolumeAttachmentData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$VolumeAttachmentDataNested<A> withNewVolumeAttachmentDataLike(io.dekorate.deps.kubernetes.api.model.storage.VolumeAttachment);

  public abstract A withOAuthAuthorizeTokenData(io.dekorate.deps.openshift.api.model.OAuthAuthorizeToken);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OAuthAuthorizeTokenDataNested<A> withNewOAuthAuthorizeTokenData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OAuthAuthorizeTokenDataNested<A> withNewOAuthAuthorizeTokenDataLike(io.dekorate.deps.openshift.api.model.OAuthAuthorizeToken);

  public abstract A withSelfSubjectAccessReviewData(io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectAccessReview);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$SelfSubjectAccessReviewDataNested<A> withNewSelfSubjectAccessReviewData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$SelfSubjectAccessReviewDataNested<A> withNewSelfSubjectAccessReviewDataLike(io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectAccessReview);

  public abstract A withProjectRequestData(io.dekorate.deps.openshift.api.model.ProjectRequest);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ProjectRequestDataNested<A> withNewProjectRequestData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ProjectRequestDataNested<A> withNewProjectRequestDataLike(io.dekorate.deps.openshift.api.model.ProjectRequest);

  public abstract A withTemplateData(io.dekorate.deps.openshift.api.model.Template);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$TemplateDataNested<A> withNewTemplateData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$TemplateDataNested<A> withNewTemplateDataLike(io.dekorate.deps.openshift.api.model.Template);

  public abstract A withPriorityClassData(io.dekorate.deps.kubernetes.api.model.scheduling.PriorityClass);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PriorityClassDataNested<A> withNewPriorityClassData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PriorityClassDataNested<A> withNewPriorityClassDataLike(io.dekorate.deps.kubernetes.api.model.scheduling.PriorityClass);

  public abstract A withOAuthClientAuthorizationData(io.dekorate.deps.openshift.api.model.OAuthClientAuthorization);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OAuthClientAuthorizationDataNested<A> withNewOAuthClientAuthorizationData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OAuthClientAuthorizationDataNested<A> withNewOAuthClientAuthorizationDataLike(io.dekorate.deps.openshift.api.model.OAuthClientAuthorization);

  public abstract A withDeploymentData(io.dekorate.deps.kubernetes.api.model.apps.Deployment);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$DeploymentDataNested<A> withNewDeploymentData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$DeploymentDataNested<A> withNewDeploymentDataLike(io.dekorate.deps.kubernetes.api.model.apps.Deployment);

  public abstract A withPodTemplateData(io.dekorate.deps.kubernetes.api.model.PodTemplate);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PodTemplateDataNested<A> withNewPodTemplateData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PodTemplateDataNested<A> withNewPodTemplateDataLike(io.dekorate.deps.kubernetes.api.model.PodTemplate);

  public abstract A withEventData(io.dekorate.deps.kubernetes.api.model.Event);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$EventDataNested<A> withNewEventData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$EventDataNested<A> withNewEventDataLike(io.dekorate.deps.kubernetes.api.model.Event);

  public abstract A withIngressData(io.dekorate.deps.kubernetes.api.model.extensions.Ingress);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$IngressDataNested<A> withNewIngressData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$IngressDataNested<A> withNewIngressDataLike(io.dekorate.deps.kubernetes.api.model.extensions.Ingress);

  public abstract A withDeploymentConfigData(io.dekorate.deps.openshift.api.model.DeploymentConfig);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$DeploymentConfigDataNested<A> withNewDeploymentConfigData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$DeploymentConfigDataNested<A> withNewDeploymentConfigDataLike(io.dekorate.deps.openshift.api.model.DeploymentConfig);

  public abstract A withOAuthAccessTokenData(io.dekorate.deps.openshift.api.model.OAuthAccessToken);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OAuthAccessTokenDataNested<A> withNewOAuthAccessTokenData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OAuthAccessTokenDataNested<A> withNewOAuthAccessTokenDataLike(io.dekorate.deps.openshift.api.model.OAuthAccessToken);

  public abstract A withPersistentVolumeData(io.dekorate.deps.kubernetes.api.model.PersistentVolume);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PersistentVolumeDataNested<A> withNewPersistentVolumeData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PersistentVolumeDataNested<A> withNewPersistentVolumeDataLike(io.dekorate.deps.kubernetes.api.model.PersistentVolume);

  public abstract A withPersistentVolumeClaimData(io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PersistentVolumeClaimDataNested<A> withNewPersistentVolumeClaimData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PersistentVolumeClaimDataNested<A> withNewPersistentVolumeClaimDataLike(io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim);

  public abstract A withPodSecurityPolicyData(io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicy);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PodSecurityPolicyDataNested<A> withNewPodSecurityPolicyData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$PodSecurityPolicyDataNested<A> withNewPodSecurityPolicyDataLike(io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicy);

  public abstract A withEventData(io.dekorate.deps.kubernetes.api.model.events.Event);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$EventsEventDataNested<A> withNewEventsEventData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$EventsEventDataNested<A> withNewEventDataLike(io.dekorate.deps.kubernetes.api.model.events.Event);

  public abstract A withStatefulSetData(io.dekorate.deps.kubernetes.api.model.apps.StatefulSet);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$StatefulSetDataNested<A> withNewStatefulSetData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$StatefulSetDataNested<A> withNewStatefulSetDataLike(io.dekorate.deps.kubernetes.api.model.apps.StatefulSet);

  public abstract A withOpenshiftClusterRoleData(io.dekorate.deps.openshift.api.model.OpenshiftClusterRole);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OpenshiftClusterRoleDataNested<A> withNewOpenshiftClusterRoleData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$OpenshiftClusterRoleDataNested<A> withNewOpenshiftClusterRoleDataLike(io.dekorate.deps.openshift.api.model.OpenshiftClusterRole);

  public abstract A withSelfSubjectRulesReviewData(io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectRulesReview);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$SelfSubjectRulesReviewDataNested<A> withNewSelfSubjectRulesReviewData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$SelfSubjectRulesReviewDataNested<A> withNewSelfSubjectRulesReviewDataLike(io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectRulesReview);

  public abstract A withRoleData(io.dekorate.deps.kubernetes.api.model.rbac.Role);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$RoleDataNested<A> withNewRoleData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$RoleDataNested<A> withNewRoleDataLike(io.dekorate.deps.kubernetes.api.model.rbac.Role);

  public abstract A withUserData(io.dekorate.deps.openshift.api.model.User);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$UserDataNested<A> withNewUserData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$UserDataNested<A> withNewUserDataLike(io.dekorate.deps.openshift.api.model.User);

  public abstract A withComponentStatusData(io.dekorate.deps.kubernetes.api.model.ComponentStatus);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ComponentStatusDataNested<A> withNewComponentStatusData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ComponentStatusDataNested<A> withNewComponentStatusDataLike(io.dekorate.deps.kubernetes.api.model.ComponentStatus);

  public abstract A withTokenReviewData(io.dekorate.deps.kubernetes.api.model.authentication.TokenReview);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$TokenReviewDataNested<A> withNewTokenReviewData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$TokenReviewDataNested<A> withNewTokenReviewDataLike(io.dekorate.deps.kubernetes.api.model.authentication.TokenReview);

  public abstract A withBindingData(io.dekorate.deps.kubernetes.api.model.Binding);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$BindingDataNested<A> withNewBindingData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$BindingDataNested<A> withNewBindingDataLike(io.dekorate.deps.kubernetes.api.model.Binding);

  public abstract A withSecretData(io.dekorate.deps.kubernetes.api.model.Secret);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$SecretDataNested<A> withNewSecretData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$SecretDataNested<A> withNewSecretDataLike(io.dekorate.deps.kubernetes.api.model.Secret);

  public abstract A withSecurityContextConstraintsData(io.dekorate.deps.openshift.api.model.SecurityContextConstraints);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$SecurityContextConstraintsDataNested<A> withNewSecurityContextConstraintsData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$SecurityContextConstraintsDataNested<A> withNewSecurityContextConstraintsDataLike(io.dekorate.deps.openshift.api.model.SecurityContextConstraints);

  public abstract A withNetNamespaceData(io.dekorate.deps.openshift.api.model.NetNamespace);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$NetNamespaceDataNested<A> withNewNetNamespaceData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$NetNamespaceDataNested<A> withNewNetNamespaceDataLike(io.dekorate.deps.openshift.api.model.NetNamespace);

  public abstract A withNodeData(io.dekorate.deps.kubernetes.api.model.Node);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$NodeDataNested<A> withNewNodeData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$NodeDataNested<A> withNewNodeDataLike(io.dekorate.deps.kubernetes.api.model.Node);

  public abstract A withJobData(io.dekorate.deps.kubernetes.api.model.batch.Job);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$JobDataNested<A> withNewJobData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$JobDataNested<A> withNewJobDataLike(io.dekorate.deps.kubernetes.api.model.batch.Job);

  public abstract A withCertificateSigningRequestData(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequest);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$CertificateSigningRequestDataNested<A> withNewCertificateSigningRequestData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$CertificateSigningRequestDataNested<A> withNewCertificateSigningRequestDataLike(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequest);

  public abstract A withServiceAccountData(io.dekorate.deps.kubernetes.api.model.ServiceAccount);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ServiceAccountDataNested<A> withNewServiceAccountData();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$ServiceAccountDataNested<A> withNewServiceAccountDataLike(io.dekorate.deps.kubernetes.api.model.ServiceAccount);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectMeta getMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectMeta buildMetadata();

  public abstract A withMetadata(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Boolean hasMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$MetadataNested<A> withNewMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$MetadataNested<A> withNewMetadataLike(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$MetadataNested<A> editMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$MetadataNested<A> editOrNewMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionFluent$MetadataNested<A> editOrNewMetadataLike(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Long getRevision();

  public abstract A withRevision(java.lang.Long);

  public abstract java.lang.Boolean hasRevision();
}
