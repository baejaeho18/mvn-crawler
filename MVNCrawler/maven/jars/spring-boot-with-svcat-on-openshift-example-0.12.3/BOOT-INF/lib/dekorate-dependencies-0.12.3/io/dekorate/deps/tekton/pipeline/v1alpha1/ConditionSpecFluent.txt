Compiled from "ConditionSpecFluent.java"
public interface io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent<A extends io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Step getCheck();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Step buildCheck();

  public abstract A withCheck(io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract java.lang.Boolean hasCheck();

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$CheckNested<A> withNewCheck();

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$CheckNested<A> withNewCheckLike(io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$CheckNested<A> editCheck();

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$CheckNested<A> editOrNewCheck();

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$CheckNested<A> editOrNewCheckLike(io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract java.lang.String getDescription();

  public abstract A withDescription(java.lang.String);

  public abstract java.lang.Boolean hasDescription();

  public abstract A withNewDescription(java.lang.String);

  public abstract A withNewDescription(java.lang.StringBuilder);

  public abstract A withNewDescription(java.lang.StringBuffer);

  public abstract A addToParams(int, io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec);

  public abstract A setToParams(int, io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec);

  public abstract A addToParams(io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec...);

  public abstract A addAllToParams(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec>);

  public abstract A removeFromParams(io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec...);

  public abstract A removeAllFromParams(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec>);

  public abstract A removeMatchingFromParams(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec> getParams();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec> buildParams();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec buildParam(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec buildFirstParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec buildLastParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec buildMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecBuilder>);

  public abstract java.lang.Boolean hasMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecBuilder>);

  public abstract A withParams(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec>);

  public abstract A withParams(io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec...);

  public abstract java.lang.Boolean hasParams();

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$ParamsNested<A> addNewParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$ParamsNested<A> addNewParamLike(io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec);

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$ParamsNested<A> setNewParamLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec);

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$ParamsNested<A> editParam(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$ParamsNested<A> editFirstParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$ParamsNested<A> editLastParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$ParamsNested<A> editMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecBuilder>);

  public abstract A addToResources(int, io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration);

  public abstract A setToResources(int, io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration);

  public abstract A addToResources(io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration...);

  public abstract A addAllToResources(java.util.Collection<io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration>);

  public abstract A removeFromResources(io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration...);

  public abstract A removeAllFromResources(java.util.Collection<io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration>);

  public abstract A removeMatchingFromResources(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclarationBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration> getResources();

  public abstract java.util.List<io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration> buildResources();

  public abstract io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration buildResource(int);

  public abstract io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration buildFirstResource();

  public abstract io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration buildLastResource();

  public abstract io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration buildMatchingResource(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclarationBuilder>);

  public abstract java.lang.Boolean hasMatchingResource(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclarationBuilder>);

  public abstract A withResources(java.util.List<io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration>);

  public abstract A withResources(io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration...);

  public abstract java.lang.Boolean hasResources();

  public abstract A addNewResource(java.lang.String, java.lang.String, java.lang.Boolean, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$ResourcesNested<A> addNewResource();

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$ResourcesNested<A> addNewResourceLike(io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration);

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$ResourcesNested<A> setNewResourceLike(int, io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclaration);

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$ResourcesNested<A> editResource(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$ResourcesNested<A> editFirstResource();

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$ResourcesNested<A> editLastResource();

  public abstract io.dekorate.deps.tekton.pipeline.v1alpha1.ConditionSpecFluent$ResourcesNested<A> editMatchingResource(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.resource.v1alpha1.ResourceDeclarationBuilder>);
}
