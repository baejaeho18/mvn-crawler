Compiled from "TaskSpecFluent.java"
public interface io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent<A extends io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getDescription();

  public abstract A withDescription(java.lang.String);

  public abstract java.lang.Boolean hasDescription();

  public abstract A withNewDescription(java.lang.String);

  public abstract A withNewDescription(java.lang.StringBuilder);

  public abstract A withNewDescription(java.lang.StringBuffer);

  public abstract A addToParams(int, io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec);

  public abstract A setToParams(int, io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec);

  public abstract A addToParams(io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec...);

  public abstract A addAllToParams(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec>);

  public abstract A removeFromParams(io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec...);

  public abstract A removeAllFromParams(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec>);

  public abstract A removeMatchingFromParams(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec> getParams();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec> buildParams();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec buildParam(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec buildFirstParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec buildLastParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec buildMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecBuilder>);

  public abstract java.lang.Boolean hasMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecBuilder>);

  public abstract A withParams(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec>);

  public abstract A withParams(io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec...);

  public abstract java.lang.Boolean hasParams();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ParamsNested<A> addNewParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ParamsNested<A> addNewParamLike(io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ParamsNested<A> setNewParamLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpec);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ParamsNested<A> editParam(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ParamsNested<A> editFirstParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ParamsNested<A> editLastParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ParamsNested<A> editMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecBuilder>);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskResources getResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskResources buildResources();

  public abstract A withResources(io.dekorate.deps.tekton.pipeline.v1beta1.TaskResources);

  public abstract java.lang.Boolean hasResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ResourcesNested<A> withNewResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ResourcesNested<A> withNewResourcesLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskResources);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ResourcesNested<A> editResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ResourcesNested<A> editOrNewResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ResourcesNested<A> editOrNewResourcesLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskResources);

  public abstract A addToResults(int, io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult);

  public abstract A setToResults(int, io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult);

  public abstract A addToResults(io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult...);

  public abstract A addAllToResults(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult>);

  public abstract A removeFromResults(io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult...);

  public abstract A removeAllFromResults(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult>);

  public abstract A removeMatchingFromResults(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.TaskResultBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult> getResults();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult> buildResults();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult buildResult(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult buildFirstResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult buildLastResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult buildMatchingResult(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.TaskResultBuilder>);

  public abstract java.lang.Boolean hasMatchingResult(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.TaskResultBuilder>);

  public abstract A withResults(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult>);

  public abstract A withResults(io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult...);

  public abstract java.lang.Boolean hasResults();

  public abstract A addNewResult(java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ResultsNested<A> addNewResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ResultsNested<A> addNewResultLike(io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ResultsNested<A> setNewResultLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.TaskResult);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ResultsNested<A> editResult(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ResultsNested<A> editFirstResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ResultsNested<A> editLastResult();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$ResultsNested<A> editMatchingResult(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.TaskResultBuilder>);

  public abstract A addToSidecars(int, io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract A setToSidecars(int, io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract A addToSidecars(io.dekorate.deps.tekton.pipeline.v1beta1.Step...);

  public abstract A addAllToSidecars(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.Step>);

  public abstract A removeFromSidecars(io.dekorate.deps.tekton.pipeline.v1beta1.Step...);

  public abstract A removeAllFromSidecars(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.Step>);

  public abstract A removeMatchingFromSidecars(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.StepBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Step> getSidecars();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Step> buildSidecars();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Step buildSidecar(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Step buildFirstSidecar();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Step buildLastSidecar();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Step buildMatchingSidecar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.StepBuilder>);

  public abstract java.lang.Boolean hasMatchingSidecar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.StepBuilder>);

  public abstract A withSidecars(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Step>);

  public abstract A withSidecars(io.dekorate.deps.tekton.pipeline.v1beta1.Step...);

  public abstract java.lang.Boolean hasSidecars();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$SidecarsNested<A> addNewSidecar();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$SidecarsNested<A> addNewSidecarLike(io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$SidecarsNested<A> setNewSidecarLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$SidecarsNested<A> editSidecar(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$SidecarsNested<A> editFirstSidecar();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$SidecarsNested<A> editLastSidecar();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$SidecarsNested<A> editMatchingSidecar(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.StepBuilder>);

  public abstract io.dekorate.deps.kubernetes.api.model.Container getStepTemplate();

  public abstract A withStepTemplate(io.dekorate.deps.kubernetes.api.model.Container);

  public abstract java.lang.Boolean hasStepTemplate();

  public abstract A addToSteps(int, io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract A setToSteps(int, io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract A addToSteps(io.dekorate.deps.tekton.pipeline.v1beta1.Step...);

  public abstract A addAllToSteps(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.Step>);

  public abstract A removeFromSteps(io.dekorate.deps.tekton.pipeline.v1beta1.Step...);

  public abstract A removeAllFromSteps(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.Step>);

  public abstract A removeMatchingFromSteps(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.StepBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Step> getSteps();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Step> buildSteps();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Step buildStep(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Step buildFirstStep();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Step buildLastStep();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Step buildMatchingStep(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.StepBuilder>);

  public abstract java.lang.Boolean hasMatchingStep(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.StepBuilder>);

  public abstract A withSteps(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Step>);

  public abstract A withSteps(io.dekorate.deps.tekton.pipeline.v1beta1.Step...);

  public abstract java.lang.Boolean hasSteps();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$StepsNested<A> addNewStep();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$StepsNested<A> addNewStepLike(io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$StepsNested<A> setNewStepLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.Step);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$StepsNested<A> editStep(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$StepsNested<A> editFirstStep();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$StepsNested<A> editLastStep();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$StepsNested<A> editMatchingStep(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.StepBuilder>);

  public abstract A addToVolumes(int, io.dekorate.deps.kubernetes.api.model.Volume);

  public abstract A setToVolumes(int, io.dekorate.deps.kubernetes.api.model.Volume);

  public abstract A addToVolumes(io.dekorate.deps.kubernetes.api.model.Volume...);

  public abstract A addAllToVolumes(java.util.Collection<io.dekorate.deps.kubernetes.api.model.Volume>);

  public abstract A removeFromVolumes(io.dekorate.deps.kubernetes.api.model.Volume...);

  public abstract A removeAllFromVolumes(java.util.Collection<io.dekorate.deps.kubernetes.api.model.Volume>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.Volume> getVolumes();

  public abstract io.dekorate.deps.kubernetes.api.model.Volume getVolume(int);

  public abstract io.dekorate.deps.kubernetes.api.model.Volume getFirstVolume();

  public abstract io.dekorate.deps.kubernetes.api.model.Volume getLastVolume();

  public abstract io.dekorate.deps.kubernetes.api.model.Volume getMatchingVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.Volume>);

  public abstract java.lang.Boolean hasMatchingVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.Volume>);

  public abstract A withVolumes(java.util.List<io.dekorate.deps.kubernetes.api.model.Volume>);

  public abstract A withVolumes(io.dekorate.deps.kubernetes.api.model.Volume...);

  public abstract java.lang.Boolean hasVolumes();

  public abstract A addToWorkspaces(int, io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration);

  public abstract A setToWorkspaces(int, io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration);

  public abstract A addToWorkspaces(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration...);

  public abstract A addAllToWorkspaces(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration>);

  public abstract A removeFromWorkspaces(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration...);

  public abstract A removeAllFromWorkspaces(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration>);

  public abstract A removeMatchingFromWorkspaces(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclarationBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration> getWorkspaces();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration> buildWorkspaces();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration buildWorkspace(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration buildFirstWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration buildLastWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration buildMatchingWorkspace(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclarationBuilder>);

  public abstract java.lang.Boolean hasMatchingWorkspace(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclarationBuilder>);

  public abstract A withWorkspaces(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration>);

  public abstract A withWorkspaces(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration...);

  public abstract java.lang.Boolean hasWorkspaces();

  public abstract A addNewWorkspace(java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$WorkspacesNested<A> addNewWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$WorkspacesNested<A> addNewWorkspaceLike(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$WorkspacesNested<A> setNewWorkspaceLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclaration);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$WorkspacesNested<A> editWorkspace(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$WorkspacesNested<A> editFirstWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$WorkspacesNested<A> editLastWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.TaskSpecFluent$WorkspacesNested<A> editMatchingWorkspace(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceDeclarationBuilder>);
}
