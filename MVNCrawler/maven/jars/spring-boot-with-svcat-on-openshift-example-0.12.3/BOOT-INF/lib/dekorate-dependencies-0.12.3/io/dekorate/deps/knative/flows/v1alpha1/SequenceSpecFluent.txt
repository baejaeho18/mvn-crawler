Compiled from "SequenceSpecFluent.java"
public interface io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent<A extends io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.knative.dev.messaging.v1beta1.ChannelTemplateSpec getChannelTemplate();

  public abstract io.dekorate.deps.knative.dev.messaging.v1beta1.ChannelTemplateSpec buildChannelTemplate();

  public abstract A withChannelTemplate(io.dekorate.deps.knative.dev.messaging.v1beta1.ChannelTemplateSpec);

  public abstract java.lang.Boolean hasChannelTemplate();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$ChannelTemplateNested<A> withNewChannelTemplate();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$ChannelTemplateNested<A> withNewChannelTemplateLike(io.dekorate.deps.knative.dev.messaging.v1beta1.ChannelTemplateSpec);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$ChannelTemplateNested<A> editChannelTemplate();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$ChannelTemplateNested<A> editOrNewChannelTemplate();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$ChannelTemplateNested<A> editOrNewChannelTemplateLike(io.dekorate.deps.knative.dev.messaging.v1beta1.ChannelTemplateSpec);

  public abstract io.dekorate.deps.knative.duck.v1.Destination getReply();

  public abstract io.dekorate.deps.knative.duck.v1.Destination buildReply();

  public abstract A withReply(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract java.lang.Boolean hasReply();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$ReplyNested<A> withNewReply();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$ReplyNested<A> withNewReplyLike(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$ReplyNested<A> editReply();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$ReplyNested<A> editOrNewReply();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$ReplyNested<A> editOrNewReplyLike(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract A addToSteps(int, io.dekorate.deps.knative.flows.v1alpha1.SequenceStep);

  public abstract A setToSteps(int, io.dekorate.deps.knative.flows.v1alpha1.SequenceStep);

  public abstract A addToSteps(io.dekorate.deps.knative.flows.v1alpha1.SequenceStep...);

  public abstract A addAllToSteps(java.util.Collection<io.dekorate.deps.knative.flows.v1alpha1.SequenceStep>);

  public abstract A removeFromSteps(io.dekorate.deps.knative.flows.v1alpha1.SequenceStep...);

  public abstract A removeAllFromSteps(java.util.Collection<io.dekorate.deps.knative.flows.v1alpha1.SequenceStep>);

  public abstract A removeMatchingFromSteps(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.flows.v1alpha1.SequenceStepBuilder>);

  public abstract java.util.List<io.dekorate.deps.knative.flows.v1alpha1.SequenceStep> getSteps();

  public abstract java.util.List<io.dekorate.deps.knative.flows.v1alpha1.SequenceStep> buildSteps();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceStep buildStep(int);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceStep buildFirstStep();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceStep buildLastStep();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceStep buildMatchingStep(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.flows.v1alpha1.SequenceStepBuilder>);

  public abstract java.lang.Boolean hasMatchingStep(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.flows.v1alpha1.SequenceStepBuilder>);

  public abstract A withSteps(java.util.List<io.dekorate.deps.knative.flows.v1alpha1.SequenceStep>);

  public abstract A withSteps(io.dekorate.deps.knative.flows.v1alpha1.SequenceStep...);

  public abstract java.lang.Boolean hasSteps();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$StepsNested<A> addNewStep();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$StepsNested<A> addNewStepLike(io.dekorate.deps.knative.flows.v1alpha1.SequenceStep);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$StepsNested<A> setNewStepLike(int, io.dekorate.deps.knative.flows.v1alpha1.SequenceStep);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$StepsNested<A> editStep(int);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$StepsNested<A> editFirstStep();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$StepsNested<A> editLastStep();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceSpecFluent$StepsNested<A> editMatchingStep(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.flows.v1alpha1.SequenceStepBuilder>);
}
