Compiled from "ServiceStatusFluent.java"
public interface io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent<A extends io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.knative.duck.v1alpha1.Addressable getAddress();

  public abstract io.dekorate.deps.knative.duck.v1alpha1.Addressable buildAddress();

  public abstract A withAddress(io.dekorate.deps.knative.duck.v1alpha1.Addressable);

  public abstract java.lang.Boolean hasAddress();

  public abstract A withNewV1alpha1Address(java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$V1alpha1AddressNested<A> withNewV1alpha1Address();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$V1alpha1AddressNested<A> withNewAddressLike(io.dekorate.deps.knative.duck.v1alpha1.Addressable);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$V1alpha1AddressNested<A> editV1alpha1Address();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$V1alpha1AddressNested<A> editOrNewAddress();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$V1alpha1AddressNested<A> editOrNewAddressLike(io.dekorate.deps.knative.duck.v1alpha1.Addressable);

  public abstract A addToConditions(int, io.dekorate.deps.knative.v1.Condition);

  public abstract A setToConditions(int, io.dekorate.deps.knative.v1.Condition);

  public abstract A addToConditions(io.dekorate.deps.knative.v1.Condition...);

  public abstract A addAllToConditions(java.util.Collection<io.dekorate.deps.knative.v1.Condition>);

  public abstract A removeFromConditions(io.dekorate.deps.knative.v1.Condition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.dekorate.deps.knative.v1.Condition>);

  public abstract A removeMatchingFromConditions(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.v1.ConditionBuilder>);

  public abstract java.util.List<io.dekorate.deps.knative.v1.Condition> getConditions();

  public abstract java.util.List<io.dekorate.deps.knative.v1.Condition> buildConditions();

  public abstract io.dekorate.deps.knative.v1.Condition buildCondition(int);

  public abstract io.dekorate.deps.knative.v1.Condition buildFirstCondition();

  public abstract io.dekorate.deps.knative.v1.Condition buildLastCondition();

  public abstract io.dekorate.deps.knative.v1.Condition buildMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.v1.ConditionBuilder>);

  public abstract java.lang.Boolean hasMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.v1.ConditionBuilder>);

  public abstract A withConditions(java.util.List<io.dekorate.deps.knative.v1.Condition>);

  public abstract A withConditions(io.dekorate.deps.knative.v1.Condition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$ConditionsNested<A> addNewCondition();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$ConditionsNested<A> addNewConditionLike(io.dekorate.deps.knative.v1.Condition);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$ConditionsNested<A> setNewConditionLike(int, io.dekorate.deps.knative.v1.Condition);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$ConditionsNested<A> editCondition(int);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$ConditionsNested<A> editFirstCondition();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$ConditionsNested<A> editLastCondition();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$ConditionsNested<A> editMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.v1.ConditionBuilder>);

  public abstract java.lang.String getDomain();

  public abstract A withDomain(java.lang.String);

  public abstract java.lang.Boolean hasDomain();

  public abstract A withNewDomain(java.lang.String);

  public abstract A withNewDomain(java.lang.StringBuilder);

  public abstract A withNewDomain(java.lang.StringBuffer);

  public abstract java.lang.String getDomainInternal();

  public abstract A withDomainInternal(java.lang.String);

  public abstract java.lang.Boolean hasDomainInternal();

  public abstract A withNewDomainInternal(java.lang.String);

  public abstract A withNewDomainInternal(java.lang.StringBuilder);

  public abstract A withNewDomainInternal(java.lang.StringBuffer);

  public abstract java.lang.String getLatestCreatedRevisionName();

  public abstract A withLatestCreatedRevisionName(java.lang.String);

  public abstract java.lang.Boolean hasLatestCreatedRevisionName();

  public abstract A withNewLatestCreatedRevisionName(java.lang.String);

  public abstract A withNewLatestCreatedRevisionName(java.lang.StringBuilder);

  public abstract A withNewLatestCreatedRevisionName(java.lang.StringBuffer);

  public abstract java.lang.String getLatestReadyRevisionName();

  public abstract A withLatestReadyRevisionName(java.lang.String);

  public abstract java.lang.Boolean hasLatestReadyRevisionName();

  public abstract A withNewLatestReadyRevisionName(java.lang.String);

  public abstract A withNewLatestReadyRevisionName(java.lang.StringBuilder);

  public abstract A withNewLatestReadyRevisionName(java.lang.StringBuffer);

  public abstract java.lang.Long getObservedGeneration();

  public abstract A withObservedGeneration(java.lang.Long);

  public abstract java.lang.Boolean hasObservedGeneration();

  public abstract A addToTraffic(int, io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget);

  public abstract A setToTraffic(int, io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget);

  public abstract A addToTraffic(io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget...);

  public abstract A addAllToTraffic(java.util.Collection<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget>);

  public abstract A removeFromTraffic(io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget...);

  public abstract A removeAllFromTraffic(java.util.Collection<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget>);

  public abstract A removeMatchingFromTraffic(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.serving.v1alpha1.TrafficTargetBuilder>);

  public abstract java.util.List<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget> getTraffic();

  public abstract java.util.List<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget> buildTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget buildTraffic(int);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget buildFirstTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget buildLastTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget buildMatchingTraffic(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.serving.v1alpha1.TrafficTargetBuilder>);

  public abstract java.lang.Boolean hasMatchingTraffic(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.serving.v1alpha1.TrafficTargetBuilder>);

  public abstract A withTraffic(java.util.List<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget>);

  public abstract A withTraffic(io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget...);

  public abstract java.lang.Boolean hasTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$TrafficNested<A> addNewTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$TrafficNested<A> addNewTrafficLike(io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$TrafficNested<A> setNewTrafficLike(int, io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$TrafficNested<A> editTraffic(int);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$TrafficNested<A> editFirstTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$TrafficNested<A> editLastTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceStatusFluent$TrafficNested<A> editMatchingTraffic(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.serving.v1alpha1.TrafficTargetBuilder>);

  public abstract java.lang.String getUrl();

  public abstract A withUrl(java.lang.String);

  public abstract java.lang.Boolean hasUrl();

  public abstract A withNewUrl(java.lang.String);

  public abstract A withNewUrl(java.lang.StringBuilder);

  public abstract A withNewUrl(java.lang.StringBuffer);
}
