Compiled from "ImageStreamTagFluent.java"
public interface io.dekorate.deps.openshift.api.model.ImageStreamTagFluent<A extends io.dekorate.deps.openshift.api.model.ImageStreamTagFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract A addToConditions(int, io.dekorate.deps.openshift.api.model.TagEventCondition);

  public abstract A setToConditions(int, io.dekorate.deps.openshift.api.model.TagEventCondition);

  public abstract A addToConditions(io.dekorate.deps.openshift.api.model.TagEventCondition...);

  public abstract A addAllToConditions(java.util.Collection<io.dekorate.deps.openshift.api.model.TagEventCondition>);

  public abstract A removeFromConditions(io.dekorate.deps.openshift.api.model.TagEventCondition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.dekorate.deps.openshift.api.model.TagEventCondition>);

  public abstract A removeMatchingFromConditions(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.TagEventConditionBuilder>);

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.TagEventCondition> getConditions();

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.TagEventCondition> buildConditions();

  public abstract io.dekorate.deps.openshift.api.model.TagEventCondition buildCondition(int);

  public abstract io.dekorate.deps.openshift.api.model.TagEventCondition buildFirstCondition();

  public abstract io.dekorate.deps.openshift.api.model.TagEventCondition buildLastCondition();

  public abstract io.dekorate.deps.openshift.api.model.TagEventCondition buildMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.TagEventConditionBuilder>);

  public abstract java.lang.Boolean hasMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.TagEventConditionBuilder>);

  public abstract A withConditions(java.util.List<io.dekorate.deps.openshift.api.model.TagEventCondition>);

  public abstract A withConditions(io.dekorate.deps.openshift.api.model.TagEventCondition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$ConditionsNested<A> addNewCondition();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$ConditionsNested<A> addNewConditionLike(io.dekorate.deps.openshift.api.model.TagEventCondition);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$ConditionsNested<A> setNewConditionLike(int, io.dekorate.deps.openshift.api.model.TagEventCondition);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$ConditionsNested<A> editCondition(int);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$ConditionsNested<A> editFirstCondition();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$ConditionsNested<A> editLastCondition();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$ConditionsNested<A> editMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.TagEventConditionBuilder>);

  public abstract java.lang.Long getGeneration();

  public abstract A withGeneration(java.lang.Long);

  public abstract java.lang.Boolean hasGeneration();

  public abstract io.dekorate.deps.openshift.api.model.Image getImage();

  public abstract io.dekorate.deps.openshift.api.model.Image buildImage();

  public abstract A withImage(io.dekorate.deps.openshift.api.model.Image);

  public abstract java.lang.Boolean hasImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$ImageNested<A> withNewImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$ImageNested<A> withNewImageLike(io.dekorate.deps.openshift.api.model.Image);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$ImageNested<A> editImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$ImageNested<A> editOrNewImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$ImageNested<A> editOrNewImageLike(io.dekorate.deps.openshift.api.model.Image);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract io.dekorate.deps.openshift.api.model.ImageLookupPolicy getLookupPolicy();

  public abstract io.dekorate.deps.openshift.api.model.ImageLookupPolicy buildLookupPolicy();

  public abstract A withLookupPolicy(io.dekorate.deps.openshift.api.model.ImageLookupPolicy);

  public abstract java.lang.Boolean hasLookupPolicy();

  public abstract A withNewLookupPolicy(java.lang.Boolean);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$LookupPolicyNested<A> withNewLookupPolicy();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$LookupPolicyNested<A> withNewLookupPolicyLike(io.dekorate.deps.openshift.api.model.ImageLookupPolicy);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$LookupPolicyNested<A> editLookupPolicy();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$LookupPolicyNested<A> editOrNewLookupPolicy();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$LookupPolicyNested<A> editOrNewLookupPolicyLike(io.dekorate.deps.openshift.api.model.ImageLookupPolicy);

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectMeta getMetadata();

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectMeta buildMetadata();

  public abstract A withMetadata(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Boolean hasMetadata();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$MetadataNested<A> withNewMetadata();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$MetadataNested<A> withNewMetadataLike(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$MetadataNested<A> editMetadata();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$MetadataNested<A> editOrNewMetadata();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$MetadataNested<A> editOrNewMetadataLike(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract io.dekorate.deps.openshift.api.model.TagReference getTag();

  public abstract io.dekorate.deps.openshift.api.model.TagReference buildTag();

  public abstract A withTag(io.dekorate.deps.openshift.api.model.TagReference);

  public abstract java.lang.Boolean hasTag();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$TagNested<A> withNewTag();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$TagNested<A> withNewTagLike(io.dekorate.deps.openshift.api.model.TagReference);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$TagNested<A> editTag();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$TagNested<A> editOrNewTag();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagFluent$TagNested<A> editOrNewTagLike(io.dekorate.deps.openshift.api.model.TagReference);
}
