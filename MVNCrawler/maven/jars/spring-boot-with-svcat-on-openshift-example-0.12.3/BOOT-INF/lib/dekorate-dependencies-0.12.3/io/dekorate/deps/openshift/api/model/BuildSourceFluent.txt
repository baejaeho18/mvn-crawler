Compiled from "BuildSourceFluent.java"
public interface io.dekorate.deps.openshift.api.model.BuildSourceFluent<A extends io.dekorate.deps.openshift.api.model.BuildSourceFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.openshift.api.model.BinaryBuildSource getBinary();

  public abstract io.dekorate.deps.openshift.api.model.BinaryBuildSource buildBinary();

  public abstract A withBinary(io.dekorate.deps.openshift.api.model.BinaryBuildSource);

  public abstract java.lang.Boolean hasBinary();

  public abstract A withNewBinary(java.lang.String);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$BinaryNested<A> withNewBinary();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$BinaryNested<A> withNewBinaryLike(io.dekorate.deps.openshift.api.model.BinaryBuildSource);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$BinaryNested<A> editBinary();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$BinaryNested<A> editOrNewBinary();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$BinaryNested<A> editOrNewBinaryLike(io.dekorate.deps.openshift.api.model.BinaryBuildSource);

  public abstract A addToConfigMaps(int, io.dekorate.deps.openshift.api.model.ConfigMapBuildSource);

  public abstract A setToConfigMaps(int, io.dekorate.deps.openshift.api.model.ConfigMapBuildSource);

  public abstract A addToConfigMaps(io.dekorate.deps.openshift.api.model.ConfigMapBuildSource...);

  public abstract A addAllToConfigMaps(java.util.Collection<io.dekorate.deps.openshift.api.model.ConfigMapBuildSource>);

  public abstract A removeFromConfigMaps(io.dekorate.deps.openshift.api.model.ConfigMapBuildSource...);

  public abstract A removeAllFromConfigMaps(java.util.Collection<io.dekorate.deps.openshift.api.model.ConfigMapBuildSource>);

  public abstract A removeMatchingFromConfigMaps(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ConfigMapBuildSourceBuilder>);

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ConfigMapBuildSource> getConfigMaps();

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ConfigMapBuildSource> buildConfigMaps();

  public abstract io.dekorate.deps.openshift.api.model.ConfigMapBuildSource buildConfigMap(int);

  public abstract io.dekorate.deps.openshift.api.model.ConfigMapBuildSource buildFirstConfigMap();

  public abstract io.dekorate.deps.openshift.api.model.ConfigMapBuildSource buildLastConfigMap();

  public abstract io.dekorate.deps.openshift.api.model.ConfigMapBuildSource buildMatchingConfigMap(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ConfigMapBuildSourceBuilder>);

  public abstract java.lang.Boolean hasMatchingConfigMap(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ConfigMapBuildSourceBuilder>);

  public abstract A withConfigMaps(java.util.List<io.dekorate.deps.openshift.api.model.ConfigMapBuildSource>);

  public abstract A withConfigMaps(io.dekorate.deps.openshift.api.model.ConfigMapBuildSource...);

  public abstract java.lang.Boolean hasConfigMaps();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$ConfigMapsNested<A> addNewConfigMap();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$ConfigMapsNested<A> addNewConfigMapLike(io.dekorate.deps.openshift.api.model.ConfigMapBuildSource);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$ConfigMapsNested<A> setNewConfigMapLike(int, io.dekorate.deps.openshift.api.model.ConfigMapBuildSource);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$ConfigMapsNested<A> editConfigMap(int);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$ConfigMapsNested<A> editFirstConfigMap();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$ConfigMapsNested<A> editLastConfigMap();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$ConfigMapsNested<A> editMatchingConfigMap(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ConfigMapBuildSourceBuilder>);

  public abstract java.lang.String getContextDir();

  public abstract A withContextDir(java.lang.String);

  public abstract java.lang.Boolean hasContextDir();

  public abstract A withNewContextDir(java.lang.String);

  public abstract A withNewContextDir(java.lang.StringBuilder);

  public abstract A withNewContextDir(java.lang.StringBuffer);

  public abstract java.lang.String getDockerfile();

  public abstract A withDockerfile(java.lang.String);

  public abstract java.lang.Boolean hasDockerfile();

  public abstract A withNewDockerfile(java.lang.String);

  public abstract A withNewDockerfile(java.lang.StringBuilder);

  public abstract A withNewDockerfile(java.lang.StringBuffer);

  public abstract io.dekorate.deps.openshift.api.model.GitBuildSource getGit();

  public abstract io.dekorate.deps.openshift.api.model.GitBuildSource buildGit();

  public abstract A withGit(io.dekorate.deps.openshift.api.model.GitBuildSource);

  public abstract java.lang.Boolean hasGit();

  public abstract A withNewGit(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$GitNested<A> withNewGit();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$GitNested<A> withNewGitLike(io.dekorate.deps.openshift.api.model.GitBuildSource);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$GitNested<A> editGit();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$GitNested<A> editOrNewGit();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$GitNested<A> editOrNewGitLike(io.dekorate.deps.openshift.api.model.GitBuildSource);

  public abstract A addToImages(int, io.dekorate.deps.openshift.api.model.ImageSource);

  public abstract A setToImages(int, io.dekorate.deps.openshift.api.model.ImageSource);

  public abstract A addToImages(io.dekorate.deps.openshift.api.model.ImageSource...);

  public abstract A addAllToImages(java.util.Collection<io.dekorate.deps.openshift.api.model.ImageSource>);

  public abstract A removeFromImages(io.dekorate.deps.openshift.api.model.ImageSource...);

  public abstract A removeAllFromImages(java.util.Collection<io.dekorate.deps.openshift.api.model.ImageSource>);

  public abstract A removeMatchingFromImages(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageSourceBuilder>);

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ImageSource> getImages();

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ImageSource> buildImages();

  public abstract io.dekorate.deps.openshift.api.model.ImageSource buildImage(int);

  public abstract io.dekorate.deps.openshift.api.model.ImageSource buildFirstImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageSource buildLastImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageSource buildMatchingImage(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageSourceBuilder>);

  public abstract java.lang.Boolean hasMatchingImage(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageSourceBuilder>);

  public abstract A withImages(java.util.List<io.dekorate.deps.openshift.api.model.ImageSource>);

  public abstract A withImages(io.dekorate.deps.openshift.api.model.ImageSource...);

  public abstract java.lang.Boolean hasImages();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$ImagesNested<A> addNewImage();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$ImagesNested<A> addNewImageLike(io.dekorate.deps.openshift.api.model.ImageSource);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$ImagesNested<A> setNewImageLike(int, io.dekorate.deps.openshift.api.model.ImageSource);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$ImagesNested<A> editImage(int);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$ImagesNested<A> editFirstImage();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$ImagesNested<A> editLastImage();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$ImagesNested<A> editMatchingImage(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageSourceBuilder>);

  public abstract A addToSecrets(int, io.dekorate.deps.openshift.api.model.SecretBuildSource);

  public abstract A setToSecrets(int, io.dekorate.deps.openshift.api.model.SecretBuildSource);

  public abstract A addToSecrets(io.dekorate.deps.openshift.api.model.SecretBuildSource...);

  public abstract A addAllToSecrets(java.util.Collection<io.dekorate.deps.openshift.api.model.SecretBuildSource>);

  public abstract A removeFromSecrets(io.dekorate.deps.openshift.api.model.SecretBuildSource...);

  public abstract A removeAllFromSecrets(java.util.Collection<io.dekorate.deps.openshift.api.model.SecretBuildSource>);

  public abstract A removeMatchingFromSecrets(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.SecretBuildSourceBuilder>);

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.SecretBuildSource> getSecrets();

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.SecretBuildSource> buildSecrets();

  public abstract io.dekorate.deps.openshift.api.model.SecretBuildSource buildSecret(int);

  public abstract io.dekorate.deps.openshift.api.model.SecretBuildSource buildFirstSecret();

  public abstract io.dekorate.deps.openshift.api.model.SecretBuildSource buildLastSecret();

  public abstract io.dekorate.deps.openshift.api.model.SecretBuildSource buildMatchingSecret(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.SecretBuildSourceBuilder>);

  public abstract java.lang.Boolean hasMatchingSecret(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.SecretBuildSourceBuilder>);

  public abstract A withSecrets(java.util.List<io.dekorate.deps.openshift.api.model.SecretBuildSource>);

  public abstract A withSecrets(io.dekorate.deps.openshift.api.model.SecretBuildSource...);

  public abstract java.lang.Boolean hasSecrets();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$SecretsNested<A> addNewSecret();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$SecretsNested<A> addNewSecretLike(io.dekorate.deps.openshift.api.model.SecretBuildSource);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$SecretsNested<A> setNewSecretLike(int, io.dekorate.deps.openshift.api.model.SecretBuildSource);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$SecretsNested<A> editSecret(int);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$SecretsNested<A> editFirstSecret();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$SecretsNested<A> editLastSecret();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$SecretsNested<A> editMatchingSecret(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.SecretBuildSourceBuilder>);

  public abstract io.dekorate.deps.kubernetes.api.model.LocalObjectReference getSourceSecret();

  public abstract io.dekorate.deps.kubernetes.api.model.LocalObjectReference buildSourceSecret();

  public abstract A withSourceSecret(io.dekorate.deps.kubernetes.api.model.LocalObjectReference);

  public abstract java.lang.Boolean hasSourceSecret();

  public abstract A withNewSourceSecret(java.lang.String);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$SourceSecretNested<A> withNewSourceSecret();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$SourceSecretNested<A> withNewSourceSecretLike(io.dekorate.deps.kubernetes.api.model.LocalObjectReference);

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$SourceSecretNested<A> editSourceSecret();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$SourceSecretNested<A> editOrNewSourceSecret();

  public abstract io.dekorate.deps.openshift.api.model.BuildSourceFluent$SourceSecretNested<A> editOrNewSourceSecretLike(io.dekorate.deps.kubernetes.api.model.LocalObjectReference);

  public abstract java.lang.String getType();

  public abstract A withType(java.lang.String);

  public abstract java.lang.Boolean hasType();

  public abstract A withNewType(java.lang.String);

  public abstract A withNewType(java.lang.StringBuilder);

  public abstract A withNewType(java.lang.StringBuffer);
}
