Compiled from "BuildStrategyFluent.java"
public interface io.dekorate.deps.openshift.api.model.BuildStrategyFluent<A extends io.dekorate.deps.openshift.api.model.BuildStrategyFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.openshift.api.model.CustomBuildStrategy getCustomStrategy();

  public abstract io.dekorate.deps.openshift.api.model.CustomBuildStrategy buildCustomStrategy();

  public abstract A withCustomStrategy(io.dekorate.deps.openshift.api.model.CustomBuildStrategy);

  public abstract java.lang.Boolean hasCustomStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$CustomStrategyNested<A> withNewCustomStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$CustomStrategyNested<A> withNewCustomStrategyLike(io.dekorate.deps.openshift.api.model.CustomBuildStrategy);

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$CustomStrategyNested<A> editCustomStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$CustomStrategyNested<A> editOrNewCustomStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$CustomStrategyNested<A> editOrNewCustomStrategyLike(io.dekorate.deps.openshift.api.model.CustomBuildStrategy);

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategy getDockerStrategy();

  public abstract io.dekorate.deps.openshift.api.model.DockerBuildStrategy buildDockerStrategy();

  public abstract A withDockerStrategy(io.dekorate.deps.openshift.api.model.DockerBuildStrategy);

  public abstract java.lang.Boolean hasDockerStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$DockerStrategyNested<A> withNewDockerStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$DockerStrategyNested<A> withNewDockerStrategyLike(io.dekorate.deps.openshift.api.model.DockerBuildStrategy);

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$DockerStrategyNested<A> editDockerStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$DockerStrategyNested<A> editOrNewDockerStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$DockerStrategyNested<A> editOrNewDockerStrategyLike(io.dekorate.deps.openshift.api.model.DockerBuildStrategy);

  public abstract io.dekorate.deps.openshift.api.model.JenkinsPipelineBuildStrategy getJenkinsPipelineStrategy();

  public abstract io.dekorate.deps.openshift.api.model.JenkinsPipelineBuildStrategy buildJenkinsPipelineStrategy();

  public abstract A withJenkinsPipelineStrategy(io.dekorate.deps.openshift.api.model.JenkinsPipelineBuildStrategy);

  public abstract java.lang.Boolean hasJenkinsPipelineStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$JenkinsPipelineStrategyNested<A> withNewJenkinsPipelineStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$JenkinsPipelineStrategyNested<A> withNewJenkinsPipelineStrategyLike(io.dekorate.deps.openshift.api.model.JenkinsPipelineBuildStrategy);

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$JenkinsPipelineStrategyNested<A> editJenkinsPipelineStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$JenkinsPipelineStrategyNested<A> editOrNewJenkinsPipelineStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$JenkinsPipelineStrategyNested<A> editOrNewJenkinsPipelineStrategyLike(io.dekorate.deps.openshift.api.model.JenkinsPipelineBuildStrategy);

  public abstract io.dekorate.deps.openshift.api.model.SourceBuildStrategy getSourceStrategy();

  public abstract io.dekorate.deps.openshift.api.model.SourceBuildStrategy buildSourceStrategy();

  public abstract A withSourceStrategy(io.dekorate.deps.openshift.api.model.SourceBuildStrategy);

  public abstract java.lang.Boolean hasSourceStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$SourceStrategyNested<A> withNewSourceStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$SourceStrategyNested<A> withNewSourceStrategyLike(io.dekorate.deps.openshift.api.model.SourceBuildStrategy);

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$SourceStrategyNested<A> editSourceStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$SourceStrategyNested<A> editOrNewSourceStrategy();

  public abstract io.dekorate.deps.openshift.api.model.BuildStrategyFluent$SourceStrategyNested<A> editOrNewSourceStrategyLike(io.dekorate.deps.openshift.api.model.SourceBuildStrategy);

  public abstract java.lang.String getType();

  public abstract A withType(java.lang.String);

  public abstract java.lang.Boolean hasType();

  public abstract A withNewType(java.lang.String);

  public abstract A withNewType(java.lang.StringBuilder);

  public abstract A withNewType(java.lang.StringBuffer);
}
