Compiled from "RouteSpecFluent.java"
public interface io.dekorate.deps.knative.serving.v1alpha1.RouteSpecFluent<A extends io.dekorate.deps.knative.serving.v1alpha1.RouteSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Long getGeneration();

  public abstract A withGeneration(java.lang.Long);

  public abstract java.lang.Boolean hasGeneration();

  public abstract A addToTraffic(int, io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget);

  public abstract A setToTraffic(int, io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget);

  public abstract A addToTraffic(io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget...);

  public abstract A addAllToTraffic(java.util.Collection<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget>);

  public abstract A removeFromTraffic(io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget...);

  public abstract A removeAllFromTraffic(java.util.Collection<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget>);

  public abstract A removeMatchingFromTraffic(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.serving.v1alpha1.TrafficTargetBuilder>);

  public abstract java.util.List<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget> getTraffic();

  public abstract java.util.List<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget> buildTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget buildTraffic(int);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget buildFirstTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget buildLastTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget buildMatchingTraffic(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.serving.v1alpha1.TrafficTargetBuilder>);

  public abstract java.lang.Boolean hasMatchingTraffic(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.serving.v1alpha1.TrafficTargetBuilder>);

  public abstract A withTraffic(java.util.List<io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget>);

  public abstract A withTraffic(io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget...);

  public abstract java.lang.Boolean hasTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RouteSpecFluent$TrafficNested<A> addNewTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RouteSpecFluent$TrafficNested<A> addNewTrafficLike(io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RouteSpecFluent$TrafficNested<A> setNewTrafficLike(int, io.dekorate.deps.knative.serving.v1alpha1.TrafficTarget);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RouteSpecFluent$TrafficNested<A> editTraffic(int);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RouteSpecFluent$TrafficNested<A> editFirstTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RouteSpecFluent$TrafficNested<A> editLastTraffic();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RouteSpecFluent$TrafficNested<A> editMatchingTraffic(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.serving.v1alpha1.TrafficTargetBuilder>);
}
