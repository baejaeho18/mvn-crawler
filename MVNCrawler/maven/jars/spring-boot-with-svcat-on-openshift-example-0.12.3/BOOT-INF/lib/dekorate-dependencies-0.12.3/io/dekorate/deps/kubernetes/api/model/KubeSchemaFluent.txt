Compiled from "KubeSchemaFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent<A extends io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.kubernetes.api.model.APIGroup getAPIGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.APIGroup buildAPIGroup();

  public abstract A withAPIGroup(io.dekorate.deps.kubernetes.api.model.APIGroup);

  public abstract java.lang.Boolean hasAPIGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$APIGroupNested<A> withNewAPIGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$APIGroupNested<A> withNewAPIGroupLike(io.dekorate.deps.kubernetes.api.model.APIGroup);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$APIGroupNested<A> editAPIGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$APIGroupNested<A> editOrNewAPIGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$APIGroupNested<A> editOrNewAPIGroupLike(io.dekorate.deps.kubernetes.api.model.APIGroup);

  public abstract io.dekorate.deps.kubernetes.api.model.APIGroupList getAPIGroupList();

  public abstract io.dekorate.deps.kubernetes.api.model.APIGroupList buildAPIGroupList();

  public abstract A withAPIGroupList(io.dekorate.deps.kubernetes.api.model.APIGroupList);

  public abstract java.lang.Boolean hasAPIGroupList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$APIGroupListNested<A> withNewAPIGroupList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$APIGroupListNested<A> withNewAPIGroupListLike(io.dekorate.deps.kubernetes.api.model.APIGroupList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$APIGroupListNested<A> editAPIGroupList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$APIGroupListNested<A> editOrNewAPIGroupList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$APIGroupListNested<A> editOrNewAPIGroupListLike(io.dekorate.deps.kubernetes.api.model.APIGroupList);

  public abstract io.dekorate.deps.kubernetes.api.model.admission.AdmissionRequest getAdmissionRequest();

  public abstract A withAdmissionRequest(io.dekorate.deps.kubernetes.api.model.admission.AdmissionRequest);

  public abstract java.lang.Boolean hasAdmissionRequest();

  public abstract io.dekorate.deps.kubernetes.api.model.admission.AdmissionResponse getAdmissionResponse();

  public abstract io.dekorate.deps.kubernetes.api.model.admission.AdmissionResponse buildAdmissionResponse();

  public abstract A withAdmissionResponse(io.dekorate.deps.kubernetes.api.model.admission.AdmissionResponse);

  public abstract java.lang.Boolean hasAdmissionResponse();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AdmissionResponseNested<A> withNewAdmissionResponse();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AdmissionResponseNested<A> withNewAdmissionResponseLike(io.dekorate.deps.kubernetes.api.model.admission.AdmissionResponse);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AdmissionResponseNested<A> editAdmissionResponse();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AdmissionResponseNested<A> editOrNewAdmissionResponse();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AdmissionResponseNested<A> editOrNewAdmissionResponseLike(io.dekorate.deps.kubernetes.api.model.admission.AdmissionResponse);

  public abstract io.dekorate.deps.kubernetes.api.model.admission.AdmissionReview getAdmissionReview();

  public abstract io.dekorate.deps.kubernetes.api.model.admission.AdmissionReview buildAdmissionReview();

  public abstract A withAdmissionReview(io.dekorate.deps.kubernetes.api.model.admission.AdmissionReview);

  public abstract java.lang.Boolean hasAdmissionReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AdmissionReviewNested<A> withNewAdmissionReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AdmissionReviewNested<A> withNewAdmissionReviewLike(io.dekorate.deps.kubernetes.api.model.admission.AdmissionReview);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AdmissionReviewNested<A> editAdmissionReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AdmissionReviewNested<A> editOrNewAdmissionReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AdmissionReviewNested<A> editOrNewAdmissionReviewLike(io.dekorate.deps.kubernetes.api.model.admission.AdmissionReview);

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.AggregationRule getAggregationRule();

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.AggregationRule buildAggregationRule();

  public abstract A withAggregationRule(io.dekorate.deps.kubernetes.api.model.rbac.AggregationRule);

  public abstract java.lang.Boolean hasAggregationRule();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AggregationRuleNested<A> withNewAggregationRule();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AggregationRuleNested<A> withNewAggregationRuleLike(io.dekorate.deps.kubernetes.api.model.rbac.AggregationRule);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AggregationRuleNested<A> editAggregationRule();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AggregationRuleNested<A> editOrNewAggregationRule();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$AggregationRuleNested<A> editOrNewAggregationRuleLike(io.dekorate.deps.kubernetes.api.model.rbac.AggregationRule);

  public abstract io.dekorate.deps.kubernetes.api.model.BaseKubernetesList getBaseKubernetesList();

  public abstract io.dekorate.deps.kubernetes.api.model.BaseKubernetesList buildBaseKubernetesList();

  public abstract A withBaseKubernetesList(io.dekorate.deps.kubernetes.api.model.BaseKubernetesList);

  public abstract java.lang.Boolean hasBaseKubernetesList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BaseKubernetesListNested<A> withNewBaseKubernetesList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BaseKubernetesListNested<A> withNewBaseKubernetesListLike(io.dekorate.deps.kubernetes.api.model.BaseKubernetesList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BaseKubernetesListNested<A> editBaseKubernetesList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BaseKubernetesListNested<A> editOrNewBaseKubernetesList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BaseKubernetesListNested<A> editOrNewBaseKubernetesListLike(io.dekorate.deps.kubernetes.api.model.BaseKubernetesList);

  public abstract io.dekorate.deps.kubernetes.api.model.Binding getBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.Binding buildBinding();

  public abstract A withBinding(io.dekorate.deps.kubernetes.api.model.Binding);

  public abstract java.lang.Boolean hasBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BindingNested<A> withNewBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BindingNested<A> withNewBindingLike(io.dekorate.deps.kubernetes.api.model.Binding);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BindingNested<A> editBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BindingNested<A> editOrNewBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BindingNested<A> editOrNewBindingLike(io.dekorate.deps.kubernetes.api.model.Binding);

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigList getBuildConfigList();

  public abstract io.dekorate.deps.openshift.api.model.BuildConfigList buildBuildConfigList();

  public abstract A withBuildConfigList(io.dekorate.deps.openshift.api.model.BuildConfigList);

  public abstract java.lang.Boolean hasBuildConfigList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildConfigListNested<A> withNewBuildConfigList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildConfigListNested<A> withNewBuildConfigListLike(io.dekorate.deps.openshift.api.model.BuildConfigList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildConfigListNested<A> editBuildConfigList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildConfigListNested<A> editOrNewBuildConfigList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildConfigListNested<A> editOrNewBuildConfigListLike(io.dekorate.deps.openshift.api.model.BuildConfigList);

  public abstract io.dekorate.deps.openshift.api.model.BuildList getBuildList();

  public abstract io.dekorate.deps.openshift.api.model.BuildList buildBuildList();

  public abstract A withBuildList(io.dekorate.deps.openshift.api.model.BuildList);

  public abstract java.lang.Boolean hasBuildList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildListNested<A> withNewBuildList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildListNested<A> withNewBuildListLike(io.dekorate.deps.openshift.api.model.BuildList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildListNested<A> editBuildList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildListNested<A> editOrNewBuildList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildListNested<A> editOrNewBuildListLike(io.dekorate.deps.openshift.api.model.BuildList);

  public abstract io.dekorate.deps.openshift.api.model.BuildRequest getBuildRequest();

  public abstract io.dekorate.deps.openshift.api.model.BuildRequest buildBuildRequest();

  public abstract A withBuildRequest(io.dekorate.deps.openshift.api.model.BuildRequest);

  public abstract java.lang.Boolean hasBuildRequest();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildRequestNested<A> withNewBuildRequest();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildRequestNested<A> withNewBuildRequestLike(io.dekorate.deps.openshift.api.model.BuildRequest);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildRequestNested<A> editBuildRequest();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildRequestNested<A> editOrNewBuildRequest();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$BuildRequestNested<A> editOrNewBuildRequestLike(io.dekorate.deps.openshift.api.model.BuildRequest);

  public abstract io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSIDriver getCSIDriver();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSIDriver buildCSIDriver();

  public abstract A withCSIDriver(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSIDriver);

  public abstract java.lang.Boolean hasCSIDriver();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSIDriverNested<A> withNewCSIDriver();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSIDriverNested<A> withNewCSIDriverLike(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSIDriver);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSIDriverNested<A> editCSIDriver();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSIDriverNested<A> editOrNewCSIDriver();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSIDriverNested<A> editOrNewCSIDriverLike(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSIDriver);

  public abstract io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSIDriverList getCSIDriverList();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSIDriverList buildCSIDriverList();

  public abstract A withCSIDriverList(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSIDriverList);

  public abstract java.lang.Boolean hasCSIDriverList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSIDriverListNested<A> withNewCSIDriverList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSIDriverListNested<A> withNewCSIDriverListLike(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSIDriverList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSIDriverListNested<A> editCSIDriverList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSIDriverListNested<A> editOrNewCSIDriverList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSIDriverListNested<A> editOrNewCSIDriverListLike(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSIDriverList);

  public abstract io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSINode getCSINode();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSINode buildCSINode();

  public abstract A withCSINode(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSINode);

  public abstract java.lang.Boolean hasCSINode();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSINodeNested<A> withNewCSINode();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSINodeNested<A> withNewCSINodeLike(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSINode);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSINodeNested<A> editCSINode();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSINodeNested<A> editOrNewCSINode();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSINodeNested<A> editOrNewCSINodeLike(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSINode);

  public abstract io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSINodeList getCSINodeList();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSINodeList buildCSINodeList();

  public abstract A withCSINodeList(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSINodeList);

  public abstract java.lang.Boolean hasCSINodeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSINodeListNested<A> withNewCSINodeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSINodeListNested<A> withNewCSINodeListLike(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSINodeList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSINodeListNested<A> editCSINodeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSINodeListNested<A> editOrNewCSINodeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CSINodeListNested<A> editOrNewCSINodeListLike(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSINodeList);

  public abstract io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequest getCertificateSigningRequest();

  public abstract io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequest buildCertificateSigningRequest();

  public abstract A withCertificateSigningRequest(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequest);

  public abstract java.lang.Boolean hasCertificateSigningRequest();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestNested<A> withNewCertificateSigningRequest();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestNested<A> withNewCertificateSigningRequestLike(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequest);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestNested<A> editCertificateSigningRequest();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestNested<A> editOrNewCertificateSigningRequest();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestNested<A> editOrNewCertificateSigningRequestLike(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequest);

  public abstract io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestCondition getCertificateSigningRequestCondition();

  public abstract io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestCondition buildCertificateSigningRequestCondition();

  public abstract A withCertificateSigningRequestCondition(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestCondition);

  public abstract java.lang.Boolean hasCertificateSigningRequestCondition();

  public abstract A withNewCertificateSigningRequestCondition(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestConditionNested<A> withNewCertificateSigningRequestCondition();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestConditionNested<A> withNewCertificateSigningRequestConditionLike(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestCondition);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestConditionNested<A> editCertificateSigningRequestCondition();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestConditionNested<A> editOrNewCertificateSigningRequestCondition();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestConditionNested<A> editOrNewCertificateSigningRequestConditionLike(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestCondition);

  public abstract io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestList getCertificateSigningRequestList();

  public abstract io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestList buildCertificateSigningRequestList();

  public abstract A withCertificateSigningRequestList(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestList);

  public abstract java.lang.Boolean hasCertificateSigningRequestList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestListNested<A> withNewCertificateSigningRequestList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestListNested<A> withNewCertificateSigningRequestListLike(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestListNested<A> editCertificateSigningRequestList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestListNested<A> editOrNewCertificateSigningRequestList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestListNested<A> editOrNewCertificateSigningRequestListLike(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestList);

  public abstract io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestSpec getCertificateSigningRequestSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestSpec buildCertificateSigningRequestSpec();

  public abstract A withCertificateSigningRequestSpec(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestSpec);

  public abstract java.lang.Boolean hasCertificateSigningRequestSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestSpecNested<A> withNewCertificateSigningRequestSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestSpecNested<A> withNewCertificateSigningRequestSpecLike(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestSpec);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestSpecNested<A> editCertificateSigningRequestSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestSpecNested<A> editOrNewCertificateSigningRequestSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestSpecNested<A> editOrNewCertificateSigningRequestSpecLike(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestSpec);

  public abstract io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestStatus getCertificateSigningRequestStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestStatus buildCertificateSigningRequestStatus();

  public abstract A withCertificateSigningRequestStatus(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestStatus);

  public abstract java.lang.Boolean hasCertificateSigningRequestStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestStatusNested<A> withNewCertificateSigningRequestStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestStatusNested<A> withNewCertificateSigningRequestStatusLike(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestStatus);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestStatusNested<A> editCertificateSigningRequestStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestStatusNested<A> editOrNewCertificateSigningRequestStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CertificateSigningRequestStatusNested<A> editOrNewCertificateSigningRequestStatusLike(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequestStatus);

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.ClusterRole getClusterRole();

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.ClusterRole buildClusterRole();

  public abstract A withClusterRole(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRole);

  public abstract java.lang.Boolean hasClusterRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleNested<A> withNewClusterRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleNested<A> withNewClusterRoleLike(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRole);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleNested<A> editClusterRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleNested<A> editOrNewClusterRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleNested<A> editOrNewClusterRoleLike(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRole);

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleBinding getClusterRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleBinding buildClusterRoleBinding();

  public abstract A withClusterRoleBinding(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleBinding);

  public abstract java.lang.Boolean hasClusterRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleBindingNested<A> withNewClusterRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleBindingNested<A> withNewClusterRoleBindingLike(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleBinding);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleBindingNested<A> editClusterRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleBindingNested<A> editOrNewClusterRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleBindingNested<A> editOrNewClusterRoleBindingLike(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleBinding);

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleBindingList getClusterRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleBindingList buildClusterRoleBindingList();

  public abstract A withClusterRoleBindingList(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleBindingList);

  public abstract java.lang.Boolean hasClusterRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleBindingListNested<A> withNewClusterRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleBindingListNested<A> withNewClusterRoleBindingListLike(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleBindingList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleBindingListNested<A> editClusterRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleBindingListNested<A> editOrNewClusterRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleBindingListNested<A> editOrNewClusterRoleBindingListLike(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleBindingList);

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleList getClusterRoleList();

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleList buildClusterRoleList();

  public abstract A withClusterRoleList(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleList);

  public abstract java.lang.Boolean hasClusterRoleList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleListNested<A> withNewClusterRoleList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleListNested<A> withNewClusterRoleListLike(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleListNested<A> editClusterRoleList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleListNested<A> editOrNewClusterRoleList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterRoleListNested<A> editOrNewClusterRoleListLike(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleList);

  public abstract io.dekorate.deps.openshift.api.model.ClusterVersion getClusterVersion();

  public abstract io.dekorate.deps.openshift.api.model.ClusterVersion buildClusterVersion();

  public abstract A withClusterVersion(io.dekorate.deps.openshift.api.model.ClusterVersion);

  public abstract java.lang.Boolean hasClusterVersion();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterVersionNested<A> withNewClusterVersion();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterVersionNested<A> withNewClusterVersionLike(io.dekorate.deps.openshift.api.model.ClusterVersion);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterVersionNested<A> editClusterVersion();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterVersionNested<A> editOrNewClusterVersion();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterVersionNested<A> editOrNewClusterVersionLike(io.dekorate.deps.openshift.api.model.ClusterVersion);

  public abstract io.dekorate.deps.openshift.api.model.ClusterVersionList getClusterVersionList();

  public abstract io.dekorate.deps.openshift.api.model.ClusterVersionList buildClusterVersionList();

  public abstract A withClusterVersionList(io.dekorate.deps.openshift.api.model.ClusterVersionList);

  public abstract java.lang.Boolean hasClusterVersionList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterVersionListNested<A> withNewClusterVersionList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterVersionListNested<A> withNewClusterVersionListLike(io.dekorate.deps.openshift.api.model.ClusterVersionList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterVersionListNested<A> editClusterVersionList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterVersionListNested<A> editOrNewClusterVersionList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ClusterVersionListNested<A> editOrNewClusterVersionListLike(io.dekorate.deps.openshift.api.model.ClusterVersionList);

  public abstract io.dekorate.deps.kubernetes.api.model.ComponentStatusList getComponentStatusList();

  public abstract io.dekorate.deps.kubernetes.api.model.ComponentStatusList buildComponentStatusList();

  public abstract A withComponentStatusList(io.dekorate.deps.kubernetes.api.model.ComponentStatusList);

  public abstract java.lang.Boolean hasComponentStatusList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ComponentStatusListNested<A> withNewComponentStatusList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ComponentStatusListNested<A> withNewComponentStatusListLike(io.dekorate.deps.kubernetes.api.model.ComponentStatusList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ComponentStatusListNested<A> editComponentStatusList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ComponentStatusListNested<A> editOrNewComponentStatusList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ComponentStatusListNested<A> editOrNewComponentStatusListLike(io.dekorate.deps.kubernetes.api.model.ComponentStatusList);

  public abstract io.dekorate.deps.kubernetes.api.model.Config getConfig();

  public abstract io.dekorate.deps.kubernetes.api.model.Config buildConfig();

  public abstract A withConfig(io.dekorate.deps.kubernetes.api.model.Config);

  public abstract java.lang.Boolean hasConfig();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigNested<A> withNewConfig();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigNested<A> withNewConfigLike(io.dekorate.deps.kubernetes.api.model.Config);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigNested<A> editConfig();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigNested<A> editOrNewConfig();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigNested<A> editOrNewConfigLike(io.dekorate.deps.kubernetes.api.model.Config);

  public abstract io.dekorate.deps.kubernetes.api.model.ConfigMap getConfigMap();

  public abstract io.dekorate.deps.kubernetes.api.model.ConfigMap buildConfigMap();

  public abstract A withConfigMap(io.dekorate.deps.kubernetes.api.model.ConfigMap);

  public abstract java.lang.Boolean hasConfigMap();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigMapNested<A> withNewConfigMap();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigMapNested<A> withNewConfigMapLike(io.dekorate.deps.kubernetes.api.model.ConfigMap);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigMapNested<A> editConfigMap();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigMapNested<A> editOrNewConfigMap();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigMapNested<A> editOrNewConfigMapLike(io.dekorate.deps.kubernetes.api.model.ConfigMap);

  public abstract io.dekorate.deps.kubernetes.api.model.ConfigMapList getConfigMapList();

  public abstract io.dekorate.deps.kubernetes.api.model.ConfigMapList buildConfigMapList();

  public abstract A withConfigMapList(io.dekorate.deps.kubernetes.api.model.ConfigMapList);

  public abstract java.lang.Boolean hasConfigMapList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigMapListNested<A> withNewConfigMapList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigMapListNested<A> withNewConfigMapListLike(io.dekorate.deps.kubernetes.api.model.ConfigMapList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigMapListNested<A> editConfigMapList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigMapListNested<A> editOrNewConfigMapList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ConfigMapListNested<A> editOrNewConfigMapListLike(io.dekorate.deps.kubernetes.api.model.ConfigMapList);

  public abstract io.dekorate.deps.kubernetes.api.model.ContainerStatus getContainerStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.ContainerStatus buildContainerStatus();

  public abstract A withContainerStatus(io.dekorate.deps.kubernetes.api.model.ContainerStatus);

  public abstract java.lang.Boolean hasContainerStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ContainerStatusNested<A> withNewContainerStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ContainerStatusNested<A> withNewContainerStatusLike(io.dekorate.deps.kubernetes.api.model.ContainerStatus);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ContainerStatusNested<A> editContainerStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ContainerStatusNested<A> editOrNewContainerStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ContainerStatusNested<A> editOrNewContainerStatusLike(io.dekorate.deps.kubernetes.api.model.ContainerStatus);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevision getControllerRevision();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevision buildControllerRevision();

  public abstract A withControllerRevision(io.dekorate.deps.kubernetes.api.model.apps.ControllerRevision);

  public abstract java.lang.Boolean hasControllerRevision();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ControllerRevisionNested<A> withNewControllerRevision();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ControllerRevisionNested<A> withNewControllerRevisionLike(io.dekorate.deps.kubernetes.api.model.apps.ControllerRevision);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ControllerRevisionNested<A> editControllerRevision();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ControllerRevisionNested<A> editOrNewControllerRevision();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ControllerRevisionNested<A> editOrNewControllerRevisionLike(io.dekorate.deps.kubernetes.api.model.apps.ControllerRevision);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionList getControllerRevisionList();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionList buildControllerRevisionList();

  public abstract A withControllerRevisionList(io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionList);

  public abstract java.lang.Boolean hasControllerRevisionList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ControllerRevisionListNested<A> withNewControllerRevisionList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ControllerRevisionListNested<A> withNewControllerRevisionListLike(io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ControllerRevisionListNested<A> editControllerRevisionList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ControllerRevisionListNested<A> editOrNewControllerRevisionList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ControllerRevisionListNested<A> editOrNewControllerRevisionListLike(io.dekorate.deps.kubernetes.api.model.apps.ControllerRevisionList);

  public abstract io.dekorate.deps.kubernetes.api.model.CreateOptions getCreateOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.CreateOptions buildCreateOptions();

  public abstract A withCreateOptions(io.dekorate.deps.kubernetes.api.model.CreateOptions);

  public abstract java.lang.Boolean hasCreateOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CreateOptionsNested<A> withNewCreateOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CreateOptionsNested<A> withNewCreateOptionsLike(io.dekorate.deps.kubernetes.api.model.CreateOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CreateOptionsNested<A> editCreateOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CreateOptionsNested<A> editOrNewCreateOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CreateOptionsNested<A> editOrNewCreateOptionsLike(io.dekorate.deps.kubernetes.api.model.CreateOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.batch.CronJob getCronJob();

  public abstract io.dekorate.deps.kubernetes.api.model.batch.CronJob buildCronJob();

  public abstract A withCronJob(io.dekorate.deps.kubernetes.api.model.batch.CronJob);

  public abstract java.lang.Boolean hasCronJob();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CronJobNested<A> withNewCronJob();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CronJobNested<A> withNewCronJobLike(io.dekorate.deps.kubernetes.api.model.batch.CronJob);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CronJobNested<A> editCronJob();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CronJobNested<A> editOrNewCronJob();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CronJobNested<A> editOrNewCronJobLike(io.dekorate.deps.kubernetes.api.model.batch.CronJob);

  public abstract io.dekorate.deps.kubernetes.api.model.batch.CronJobList getCronJobList();

  public abstract io.dekorate.deps.kubernetes.api.model.batch.CronJobList buildCronJobList();

  public abstract A withCronJobList(io.dekorate.deps.kubernetes.api.model.batch.CronJobList);

  public abstract java.lang.Boolean hasCronJobList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CronJobListNested<A> withNewCronJobList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CronJobListNested<A> withNewCronJobListLike(io.dekorate.deps.kubernetes.api.model.batch.CronJobList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CronJobListNested<A> editCronJobList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CronJobListNested<A> editOrNewCronJobList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CronJobListNested<A> editOrNewCronJobListLike(io.dekorate.deps.kubernetes.api.model.batch.CronJobList);

  public abstract io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinition getCustomResourceDefinition();

  public abstract io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinition buildCustomResourceDefinition();

  public abstract A withCustomResourceDefinition(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinition);

  public abstract java.lang.Boolean hasCustomResourceDefinition();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionNested<A> withNewCustomResourceDefinition();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionNested<A> withNewCustomResourceDefinitionLike(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinition);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionNested<A> editCustomResourceDefinition();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionNested<A> editOrNewCustomResourceDefinition();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionNested<A> editOrNewCustomResourceDefinitionLike(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinition);

  public abstract io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionCondition getCustomResourceDefinitionCondition();

  public abstract io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionCondition buildCustomResourceDefinitionCondition();

  public abstract A withCustomResourceDefinitionCondition(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionCondition);

  public abstract java.lang.Boolean hasCustomResourceDefinitionCondition();

  public abstract A withNewCustomResourceDefinitionCondition(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionConditionNested<A> withNewCustomResourceDefinitionCondition();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionConditionNested<A> withNewCustomResourceDefinitionConditionLike(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionCondition);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionConditionNested<A> editCustomResourceDefinitionCondition();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionConditionNested<A> editOrNewCustomResourceDefinitionCondition();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionConditionNested<A> editOrNewCustomResourceDefinitionConditionLike(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionCondition);

  public abstract io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionList getCustomResourceDefinitionList();

  public abstract io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionList buildCustomResourceDefinitionList();

  public abstract A withCustomResourceDefinitionList(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionList);

  public abstract java.lang.Boolean hasCustomResourceDefinitionList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionListNested<A> withNewCustomResourceDefinitionList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionListNested<A> withNewCustomResourceDefinitionListLike(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionListNested<A> editCustomResourceDefinitionList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionListNested<A> editOrNewCustomResourceDefinitionList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionListNested<A> editOrNewCustomResourceDefinitionListLike(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionList);

  public abstract io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionNames getCustomResourceDefinitionNames();

  public abstract io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionNames buildCustomResourceDefinitionNames();

  public abstract A withCustomResourceDefinitionNames(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionNames);

  public abstract java.lang.Boolean hasCustomResourceDefinitionNames();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionNamesNested<A> withNewCustomResourceDefinitionNames();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionNamesNested<A> withNewCustomResourceDefinitionNamesLike(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionNames);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionNamesNested<A> editCustomResourceDefinitionNames();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionNamesNested<A> editOrNewCustomResourceDefinitionNames();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionNamesNested<A> editOrNewCustomResourceDefinitionNamesLike(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionNames);

  public abstract io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionSpec getCustomResourceDefinitionSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionSpec buildCustomResourceDefinitionSpec();

  public abstract A withCustomResourceDefinitionSpec(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionSpec);

  public abstract java.lang.Boolean hasCustomResourceDefinitionSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionSpecNested<A> withNewCustomResourceDefinitionSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionSpecNested<A> withNewCustomResourceDefinitionSpecLike(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionSpec);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionSpecNested<A> editCustomResourceDefinitionSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionSpecNested<A> editOrNewCustomResourceDefinitionSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionSpecNested<A> editOrNewCustomResourceDefinitionSpecLike(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionSpec);

  public abstract io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionStatus getCustomResourceDefinitionStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionStatus buildCustomResourceDefinitionStatus();

  public abstract A withCustomResourceDefinitionStatus(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionStatus);

  public abstract java.lang.Boolean hasCustomResourceDefinitionStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionStatusNested<A> withNewCustomResourceDefinitionStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionStatusNested<A> withNewCustomResourceDefinitionStatusLike(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionStatus);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionStatusNested<A> editCustomResourceDefinitionStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionStatusNested<A> editOrNewCustomResourceDefinitionStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$CustomResourceDefinitionStatusNested<A> editOrNewCustomResourceDefinitionStatusLike(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionStatus);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.DaemonSet getDaemonSet();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.DaemonSet buildDaemonSet();

  public abstract A withDaemonSet(io.dekorate.deps.kubernetes.api.model.apps.DaemonSet);

  public abstract java.lang.Boolean hasDaemonSet();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DaemonSetNested<A> withNewDaemonSet();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DaemonSetNested<A> withNewDaemonSetLike(io.dekorate.deps.kubernetes.api.model.apps.DaemonSet);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DaemonSetNested<A> editDaemonSet();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DaemonSetNested<A> editOrNewDaemonSet();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DaemonSetNested<A> editOrNewDaemonSetLike(io.dekorate.deps.kubernetes.api.model.apps.DaemonSet);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.DaemonSetList getDaemonSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.DaemonSetList buildDaemonSetList();

  public abstract A withDaemonSetList(io.dekorate.deps.kubernetes.api.model.apps.DaemonSetList);

  public abstract java.lang.Boolean hasDaemonSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DaemonSetListNested<A> withNewDaemonSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DaemonSetListNested<A> withNewDaemonSetListLike(io.dekorate.deps.kubernetes.api.model.apps.DaemonSetList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DaemonSetListNested<A> editDaemonSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DaemonSetListNested<A> editOrNewDaemonSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DaemonSetListNested<A> editOrNewDaemonSetListLike(io.dekorate.deps.kubernetes.api.model.apps.DaemonSetList);

  public abstract io.dekorate.deps.kubernetes.api.model.DeleteOptions getDeleteOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.DeleteOptions buildDeleteOptions();

  public abstract A withDeleteOptions(io.dekorate.deps.kubernetes.api.model.DeleteOptions);

  public abstract java.lang.Boolean hasDeleteOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeleteOptionsNested<A> withNewDeleteOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeleteOptionsNested<A> withNewDeleteOptionsLike(io.dekorate.deps.kubernetes.api.model.DeleteOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeleteOptionsNested<A> editDeleteOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeleteOptionsNested<A> editOrNewDeleteOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeleteOptionsNested<A> editOrNewDeleteOptionsLike(io.dekorate.deps.kubernetes.api.model.DeleteOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.Deployment getDeployment();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.Deployment buildDeployment();

  public abstract A withDeployment(io.dekorate.deps.kubernetes.api.model.apps.Deployment);

  public abstract java.lang.Boolean hasDeployment();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentNested<A> withNewDeployment();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentNested<A> withNewDeploymentLike(io.dekorate.deps.kubernetes.api.model.apps.Deployment);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentNested<A> editDeployment();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentNested<A> editOrNewDeployment();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentNested<A> editOrNewDeploymentLike(io.dekorate.deps.kubernetes.api.model.apps.Deployment);

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfig getDeploymentConfig();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfig buildDeploymentConfig();

  public abstract A withDeploymentConfig(io.dekorate.deps.openshift.api.model.DeploymentConfig);

  public abstract java.lang.Boolean hasDeploymentConfig();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentConfigNested<A> withNewDeploymentConfig();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentConfigNested<A> withNewDeploymentConfigLike(io.dekorate.deps.openshift.api.model.DeploymentConfig);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentConfigNested<A> editDeploymentConfig();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentConfigNested<A> editOrNewDeploymentConfig();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentConfigNested<A> editOrNewDeploymentConfigLike(io.dekorate.deps.openshift.api.model.DeploymentConfig);

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigList getDeploymentConfigList();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigList buildDeploymentConfigList();

  public abstract A withDeploymentConfigList(io.dekorate.deps.openshift.api.model.DeploymentConfigList);

  public abstract java.lang.Boolean hasDeploymentConfigList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentConfigListNested<A> withNewDeploymentConfigList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentConfigListNested<A> withNewDeploymentConfigListLike(io.dekorate.deps.openshift.api.model.DeploymentConfigList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentConfigListNested<A> editDeploymentConfigList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentConfigListNested<A> editOrNewDeploymentConfigList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentConfigListNested<A> editOrNewDeploymentConfigListLike(io.dekorate.deps.openshift.api.model.DeploymentConfigList);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.DeploymentList getDeploymentList();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.DeploymentList buildDeploymentList();

  public abstract A withDeploymentList(io.dekorate.deps.kubernetes.api.model.apps.DeploymentList);

  public abstract java.lang.Boolean hasDeploymentList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentListNested<A> withNewDeploymentList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentListNested<A> withNewDeploymentListLike(io.dekorate.deps.kubernetes.api.model.apps.DeploymentList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentListNested<A> editDeploymentList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentListNested<A> editOrNewDeploymentList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentListNested<A> editOrNewDeploymentListLike(io.dekorate.deps.kubernetes.api.model.apps.DeploymentList);

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.DeploymentRollback getDeploymentRollback();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.DeploymentRollback buildDeploymentRollback();

  public abstract A withDeploymentRollback(io.dekorate.deps.kubernetes.api.model.extensions.DeploymentRollback);

  public abstract java.lang.Boolean hasDeploymentRollback();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentRollbackNested<A> withNewDeploymentRollback();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentRollbackNested<A> withNewDeploymentRollbackLike(io.dekorate.deps.kubernetes.api.model.extensions.DeploymentRollback);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentRollbackNested<A> editDeploymentRollback();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentRollbackNested<A> editOrNewDeploymentRollback();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DeploymentRollbackNested<A> editOrNewDeploymentRollbackLike(io.dekorate.deps.kubernetes.api.model.extensions.DeploymentRollback);

  public abstract io.dekorate.deps.kubernetes.api.model.discovery.DiscoveryEndpointPort getDiscoveryEndpointPort();

  public abstract io.dekorate.deps.kubernetes.api.model.discovery.DiscoveryEndpointPort buildDiscoveryEndpointPort();

  public abstract A withDiscoveryEndpointPort(io.dekorate.deps.kubernetes.api.model.discovery.DiscoveryEndpointPort);

  public abstract java.lang.Boolean hasDiscoveryEndpointPort();

  public abstract A withNewDiscoveryEndpointPort(java.lang.String, java.lang.String, java.lang.Integer, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DiscoveryEndpointPortNested<A> withNewDiscoveryEndpointPort();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DiscoveryEndpointPortNested<A> withNewDiscoveryEndpointPortLike(io.dekorate.deps.kubernetes.api.model.discovery.DiscoveryEndpointPort);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DiscoveryEndpointPortNested<A> editDiscoveryEndpointPort();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DiscoveryEndpointPortNested<A> editOrNewDiscoveryEndpointPort();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$DiscoveryEndpointPortNested<A> editOrNewDiscoveryEndpointPortLike(io.dekorate.deps.kubernetes.api.model.discovery.DiscoveryEndpointPort);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointPort getEndpointPort();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointPort buildEndpointPort();

  public abstract A withEndpointPort(io.dekorate.deps.kubernetes.api.model.EndpointPort);

  public abstract java.lang.Boolean hasEndpointPort();

  public abstract A withNewEndpointPort(java.lang.String, java.lang.String, java.lang.Integer, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointPortNested<A> withNewEndpointPort();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointPortNested<A> withNewEndpointPortLike(io.dekorate.deps.kubernetes.api.model.EndpointPort);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointPortNested<A> editEndpointPort();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointPortNested<A> editOrNewEndpointPort();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointPortNested<A> editOrNewEndpointPortLike(io.dekorate.deps.kubernetes.api.model.EndpointPort);

  public abstract io.dekorate.deps.kubernetes.api.model.discovery.EndpointSlice getEndpointSlice();

  public abstract io.dekorate.deps.kubernetes.api.model.discovery.EndpointSlice buildEndpointSlice();

  public abstract A withEndpointSlice(io.dekorate.deps.kubernetes.api.model.discovery.EndpointSlice);

  public abstract java.lang.Boolean hasEndpointSlice();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointSliceNested<A> withNewEndpointSlice();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointSliceNested<A> withNewEndpointSliceLike(io.dekorate.deps.kubernetes.api.model.discovery.EndpointSlice);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointSliceNested<A> editEndpointSlice();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointSliceNested<A> editOrNewEndpointSlice();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointSliceNested<A> editOrNewEndpointSliceLike(io.dekorate.deps.kubernetes.api.model.discovery.EndpointSlice);

  public abstract io.dekorate.deps.kubernetes.api.model.discovery.EndpointSliceList getEndpointSliceList();

  public abstract io.dekorate.deps.kubernetes.api.model.discovery.EndpointSliceList buildEndpointSliceList();

  public abstract A withEndpointSliceList(io.dekorate.deps.kubernetes.api.model.discovery.EndpointSliceList);

  public abstract java.lang.Boolean hasEndpointSliceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointSliceListNested<A> withNewEndpointSliceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointSliceListNested<A> withNewEndpointSliceListLike(io.dekorate.deps.kubernetes.api.model.discovery.EndpointSliceList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointSliceListNested<A> editEndpointSliceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointSliceListNested<A> editOrNewEndpointSliceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointSliceListNested<A> editOrNewEndpointSliceListLike(io.dekorate.deps.kubernetes.api.model.discovery.EndpointSliceList);

  public abstract io.dekorate.deps.kubernetes.api.model.Endpoints getEndpoints();

  public abstract io.dekorate.deps.kubernetes.api.model.Endpoints buildEndpoints();

  public abstract A withEndpoints(io.dekorate.deps.kubernetes.api.model.Endpoints);

  public abstract java.lang.Boolean hasEndpoints();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointsNested<A> withNewEndpoints();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointsNested<A> withNewEndpointsLike(io.dekorate.deps.kubernetes.api.model.Endpoints);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointsNested<A> editEndpoints();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointsNested<A> editOrNewEndpoints();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointsNested<A> editOrNewEndpointsLike(io.dekorate.deps.kubernetes.api.model.Endpoints);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointsList getEndpointsList();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointsList buildEndpointsList();

  public abstract A withEndpointsList(io.dekorate.deps.kubernetes.api.model.EndpointsList);

  public abstract java.lang.Boolean hasEndpointsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointsListNested<A> withNewEndpointsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointsListNested<A> withNewEndpointsListLike(io.dekorate.deps.kubernetes.api.model.EndpointsList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointsListNested<A> editEndpointsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointsListNested<A> editOrNewEndpointsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EndpointsListNested<A> editOrNewEndpointsListLike(io.dekorate.deps.kubernetes.api.model.EndpointsList);

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar getEnvVar();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar buildEnvVar();

  public abstract A withEnvVar(io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract java.lang.Boolean hasEnvVar();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EnvVarNested<A> withNewEnvVar();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EnvVarNested<A> withNewEnvVarLike(io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EnvVarNested<A> editEnvVar();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EnvVarNested<A> editOrNewEnvVar();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EnvVarNested<A> editOrNewEnvVarLike(io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract io.dekorate.deps.kubernetes.api.model.events.Event getEvent();

  public abstract io.dekorate.deps.kubernetes.api.model.events.Event buildEvent();

  public abstract A withEvent(io.dekorate.deps.kubernetes.api.model.events.Event);

  public abstract java.lang.Boolean hasEvent();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventsEventNested<A> withNewEventsEvent();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventsEventNested<A> withNewEventLike(io.dekorate.deps.kubernetes.api.model.events.Event);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventsEventNested<A> editEventsEvent();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventsEventNested<A> editOrNewEvent();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventsEventNested<A> editOrNewEventLike(io.dekorate.deps.kubernetes.api.model.events.Event);

  public abstract io.dekorate.deps.kubernetes.api.model.EventList getEventList();

  public abstract io.dekorate.deps.kubernetes.api.model.EventList buildEventList();

  public abstract A withEventList(io.dekorate.deps.kubernetes.api.model.EventList);

  public abstract java.lang.Boolean hasEventList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventListNested<A> withNewEventList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventListNested<A> withNewEventListLike(io.dekorate.deps.kubernetes.api.model.EventList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventListNested<A> editEventList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventListNested<A> editOrNewEventList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventListNested<A> editOrNewEventListLike(io.dekorate.deps.kubernetes.api.model.EventList);

  public abstract io.dekorate.deps.kubernetes.api.model.events.EventSeries getEventSeries();

  public abstract io.dekorate.deps.kubernetes.api.model.events.EventSeries buildEventSeries();

  public abstract A withEventSeries(io.dekorate.deps.kubernetes.api.model.events.EventSeries);

  public abstract java.lang.Boolean hasEventSeries();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventsEventSeriesNested<A> withNewEventsEventSeries();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventsEventSeriesNested<A> withNewEventSeriesLike(io.dekorate.deps.kubernetes.api.model.events.EventSeries);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventsEventSeriesNested<A> editEventsEventSeries();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventsEventSeriesNested<A> editOrNewEventSeries();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$EventsEventSeriesNested<A> editOrNewEventSeriesLike(io.dekorate.deps.kubernetes.api.model.events.EventSeries);

  public abstract java.lang.String getEventSeriesState();

  public abstract A withEventSeriesState(java.lang.String);

  public abstract java.lang.Boolean hasEventSeriesState();

  public abstract A withNewEventSeriesState(java.lang.String);

  public abstract A withNewEventSeriesState(java.lang.StringBuilder);

  public abstract A withNewEventSeriesState(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.GetOptions getGetOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.GetOptions buildGetOptions();

  public abstract A withGetOptions(io.dekorate.deps.kubernetes.api.model.GetOptions);

  public abstract java.lang.Boolean hasGetOptions();

  public abstract A withNewGetOptions(java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GetOptionsNested<A> withNewGetOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GetOptionsNested<A> withNewGetOptionsLike(io.dekorate.deps.kubernetes.api.model.GetOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GetOptionsNested<A> editGetOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GetOptionsNested<A> editOrNewGetOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GetOptionsNested<A> editOrNewGetOptionsLike(io.dekorate.deps.kubernetes.api.model.GetOptions);

  public abstract io.dekorate.deps.openshift.api.model.Group getGroup();

  public abstract io.dekorate.deps.openshift.api.model.Group buildGroup();

  public abstract A withGroup(io.dekorate.deps.openshift.api.model.Group);

  public abstract java.lang.Boolean hasGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GroupNested<A> withNewGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GroupNested<A> withNewGroupLike(io.dekorate.deps.openshift.api.model.Group);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GroupNested<A> editGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GroupNested<A> editOrNewGroup();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GroupNested<A> editOrNewGroupLike(io.dekorate.deps.openshift.api.model.Group);

  public abstract io.dekorate.deps.openshift.api.model.GroupList getGroupList();

  public abstract io.dekorate.deps.openshift.api.model.GroupList buildGroupList();

  public abstract A withGroupList(io.dekorate.deps.openshift.api.model.GroupList);

  public abstract java.lang.Boolean hasGroupList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GroupListNested<A> withNewGroupList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GroupListNested<A> withNewGroupListLike(io.dekorate.deps.openshift.api.model.GroupList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GroupListNested<A> editGroupList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GroupListNested<A> editOrNewGroupList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$GroupListNested<A> editOrNewGroupListLike(io.dekorate.deps.openshift.api.model.GroupList);

  public abstract io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscaler getHorizontalPodAutoscaler();

  public abstract io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscaler buildHorizontalPodAutoscaler();

  public abstract A withHorizontalPodAutoscaler(io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscaler);

  public abstract java.lang.Boolean hasHorizontalPodAutoscaler();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerNested<A> withNewHorizontalPodAutoscaler();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerNested<A> withNewHorizontalPodAutoscalerLike(io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscaler);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerNested<A> editHorizontalPodAutoscaler();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerNested<A> editOrNewHorizontalPodAutoscaler();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerNested<A> editOrNewHorizontalPodAutoscalerLike(io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscaler);

  public abstract io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscalerList getHorizontalPodAutoscalerList();

  public abstract io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscalerList buildHorizontalPodAutoscalerList();

  public abstract A withHorizontalPodAutoscalerList(io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscalerList);

  public abstract java.lang.Boolean hasHorizontalPodAutoscalerList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerListNested<A> withNewHorizontalPodAutoscalerList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerListNested<A> withNewHorizontalPodAutoscalerListLike(io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscalerList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerListNested<A> editHorizontalPodAutoscalerList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerListNested<A> editOrNewHorizontalPodAutoscalerList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerListNested<A> editOrNewHorizontalPodAutoscalerListLike(io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscalerList);

  public abstract io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscalerSpec getHorizontalPodAutoscalerSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscalerSpec buildHorizontalPodAutoscalerSpec();

  public abstract A withHorizontalPodAutoscalerSpec(io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscalerSpec);

  public abstract java.lang.Boolean hasHorizontalPodAutoscalerSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerSpecNested<A> withNewHorizontalPodAutoscalerSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerSpecNested<A> withNewHorizontalPodAutoscalerSpecLike(io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscalerSpec);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerSpecNested<A> editHorizontalPodAutoscalerSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerSpecNested<A> editOrNewHorizontalPodAutoscalerSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$HorizontalPodAutoscalerSpecNested<A> editOrNewHorizontalPodAutoscalerSpecLike(io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscalerSpec);

  public abstract io.dekorate.deps.openshift.api.model.Identity getIdentity();

  public abstract io.dekorate.deps.openshift.api.model.Identity buildIdentity();

  public abstract A withIdentity(io.dekorate.deps.openshift.api.model.Identity);

  public abstract java.lang.Boolean hasIdentity();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IdentityNested<A> withNewIdentity();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IdentityNested<A> withNewIdentityLike(io.dekorate.deps.openshift.api.model.Identity);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IdentityNested<A> editIdentity();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IdentityNested<A> editOrNewIdentity();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IdentityNested<A> editOrNewIdentityLike(io.dekorate.deps.openshift.api.model.Identity);

  public abstract io.dekorate.deps.openshift.api.model.IdentityList getIdentityList();

  public abstract io.dekorate.deps.openshift.api.model.IdentityList buildIdentityList();

  public abstract A withIdentityList(io.dekorate.deps.openshift.api.model.IdentityList);

  public abstract java.lang.Boolean hasIdentityList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IdentityListNested<A> withNewIdentityList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IdentityListNested<A> withNewIdentityListLike(io.dekorate.deps.openshift.api.model.IdentityList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IdentityListNested<A> editIdentityList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IdentityListNested<A> editOrNewIdentityList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IdentityListNested<A> editOrNewIdentityListLike(io.dekorate.deps.openshift.api.model.IdentityList);

  public abstract io.dekorate.deps.openshift.api.model.ImageList getImageList();

  public abstract io.dekorate.deps.openshift.api.model.ImageList buildImageList();

  public abstract A withImageList(io.dekorate.deps.openshift.api.model.ImageList);

  public abstract java.lang.Boolean hasImageList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageListNested<A> withNewImageList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageListNested<A> withNewImageListLike(io.dekorate.deps.openshift.api.model.ImageList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageListNested<A> editImageList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageListNested<A> editOrNewImageList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageListNested<A> editOrNewImageListLike(io.dekorate.deps.openshift.api.model.ImageList);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImport getImageStreamImport();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImport buildImageStreamImport();

  public abstract A withImageStreamImport(io.dekorate.deps.openshift.api.model.ImageStreamImport);

  public abstract java.lang.Boolean hasImageStreamImport();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamImportNested<A> withNewImageStreamImport();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamImportNested<A> withNewImageStreamImportLike(io.dekorate.deps.openshift.api.model.ImageStreamImport);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamImportNested<A> editImageStreamImport();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamImportNested<A> editOrNewImageStreamImport();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamImportNested<A> editOrNewImageStreamImportLike(io.dekorate.deps.openshift.api.model.ImageStreamImport);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamList getImageStreamList();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamList buildImageStreamList();

  public abstract A withImageStreamList(io.dekorate.deps.openshift.api.model.ImageStreamList);

  public abstract java.lang.Boolean hasImageStreamList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamListNested<A> withNewImageStreamList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamListNested<A> withNewImageStreamListLike(io.dekorate.deps.openshift.api.model.ImageStreamList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamListNested<A> editImageStreamList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamListNested<A> editOrNewImageStreamList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamListNested<A> editOrNewImageStreamListLike(io.dekorate.deps.openshift.api.model.ImageStreamList);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagList getImageStreamTagList();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamTagList buildImageStreamTagList();

  public abstract A withImageStreamTagList(io.dekorate.deps.openshift.api.model.ImageStreamTagList);

  public abstract java.lang.Boolean hasImageStreamTagList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamTagListNested<A> withNewImageStreamTagList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamTagListNested<A> withNewImageStreamTagListLike(io.dekorate.deps.openshift.api.model.ImageStreamTagList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamTagListNested<A> editImageStreamTagList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamTagListNested<A> editOrNewImageStreamTagList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ImageStreamTagListNested<A> editOrNewImageStreamTagListLike(io.dekorate.deps.openshift.api.model.ImageStreamTagList);

  public abstract io.dekorate.deps.kubernetes.api.model.version.Info getInfo();

  public abstract io.dekorate.deps.kubernetes.api.model.version.Info buildInfo();

  public abstract A withInfo(io.dekorate.deps.kubernetes.api.model.version.Info);

  public abstract java.lang.Boolean hasInfo();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$InfoNested<A> withNewInfo();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$InfoNested<A> withNewInfoLike(io.dekorate.deps.kubernetes.api.model.version.Info);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$InfoNested<A> editInfo();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$InfoNested<A> editOrNewInfo();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$InfoNested<A> editOrNewInfoLike(io.dekorate.deps.kubernetes.api.model.version.Info);

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.Ingress getIngress();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.Ingress buildIngress();

  public abstract A withIngress(io.dekorate.deps.kubernetes.api.model.extensions.Ingress);

  public abstract java.lang.Boolean hasIngress();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IngressNested<A> withNewIngress();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IngressNested<A> withNewIngressLike(io.dekorate.deps.kubernetes.api.model.extensions.Ingress);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IngressNested<A> editIngress();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IngressNested<A> editOrNewIngress();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IngressNested<A> editOrNewIngressLike(io.dekorate.deps.kubernetes.api.model.extensions.Ingress);

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressList getIngressList();

  public abstract io.dekorate.deps.kubernetes.api.model.extensions.IngressList buildIngressList();

  public abstract A withIngressList(io.dekorate.deps.kubernetes.api.model.extensions.IngressList);

  public abstract java.lang.Boolean hasIngressList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IngressListNested<A> withNewIngressList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IngressListNested<A> withNewIngressListLike(io.dekorate.deps.kubernetes.api.model.extensions.IngressList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IngressListNested<A> editIngressList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IngressListNested<A> editOrNewIngressList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$IngressListNested<A> editOrNewIngressListLike(io.dekorate.deps.kubernetes.api.model.extensions.IngressList);

  public abstract io.dekorate.deps.kubernetes.api.model.apiextensions.JSONSchemaPropsOrStringArray getJSONSchemaPropsorStringArray();

  public abstract io.dekorate.deps.kubernetes.api.model.apiextensions.JSONSchemaPropsOrStringArray buildJSONSchemaPropsorStringArray();

  public abstract A withJSONSchemaPropsorStringArray(io.dekorate.deps.kubernetes.api.model.apiextensions.JSONSchemaPropsOrStringArray);

  public abstract java.lang.Boolean hasJSONSchemaPropsorStringArray();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JSONSchemaPropsorStringArrayNested<A> withNewJSONSchemaPropsorStringArray();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JSONSchemaPropsorStringArrayNested<A> withNewJSONSchemaPropsorStringArrayLike(io.dekorate.deps.kubernetes.api.model.apiextensions.JSONSchemaPropsOrStringArray);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JSONSchemaPropsorStringArrayNested<A> editJSONSchemaPropsorStringArray();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JSONSchemaPropsorStringArrayNested<A> editOrNewJSONSchemaPropsorStringArray();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JSONSchemaPropsorStringArrayNested<A> editOrNewJSONSchemaPropsorStringArrayLike(io.dekorate.deps.kubernetes.api.model.apiextensions.JSONSchemaPropsOrStringArray);

  public abstract io.dekorate.deps.kubernetes.api.model.batch.Job getJob();

  public abstract io.dekorate.deps.kubernetes.api.model.batch.Job buildJob();

  public abstract A withJob(io.dekorate.deps.kubernetes.api.model.batch.Job);

  public abstract java.lang.Boolean hasJob();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JobNested<A> withNewJob();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JobNested<A> withNewJobLike(io.dekorate.deps.kubernetes.api.model.batch.Job);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JobNested<A> editJob();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JobNested<A> editOrNewJob();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JobNested<A> editOrNewJobLike(io.dekorate.deps.kubernetes.api.model.batch.Job);

  public abstract io.dekorate.deps.kubernetes.api.model.batch.JobList getJobList();

  public abstract io.dekorate.deps.kubernetes.api.model.batch.JobList buildJobList();

  public abstract A withJobList(io.dekorate.deps.kubernetes.api.model.batch.JobList);

  public abstract java.lang.Boolean hasJobList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JobListNested<A> withNewJobList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JobListNested<A> withNewJobListLike(io.dekorate.deps.kubernetes.api.model.batch.JobList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JobListNested<A> editJobList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JobListNested<A> editOrNewJobList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$JobListNested<A> editOrNewJobListLike(io.dekorate.deps.kubernetes.api.model.batch.JobList);

  public abstract io.dekorate.deps.kubernetes.api.model.authorization.LocalSubjectAccessReview getK8sLocalSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.authorization.LocalSubjectAccessReview buildK8sLocalSubjectAccessReview();

  public abstract A withK8sLocalSubjectAccessReview(io.dekorate.deps.kubernetes.api.model.authorization.LocalSubjectAccessReview);

  public abstract java.lang.Boolean hasK8sLocalSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$K8sLocalSubjectAccessReviewNested<A> withNewK8sLocalSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$K8sLocalSubjectAccessReviewNested<A> withNewK8sLocalSubjectAccessReviewLike(io.dekorate.deps.kubernetes.api.model.authorization.LocalSubjectAccessReview);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$K8sLocalSubjectAccessReviewNested<A> editK8sLocalSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$K8sLocalSubjectAccessReviewNested<A> editOrNewK8sLocalSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$K8sLocalSubjectAccessReviewNested<A> editOrNewK8sLocalSubjectAccessReviewLike(io.dekorate.deps.kubernetes.api.model.authorization.LocalSubjectAccessReview);

  public abstract io.dekorate.deps.kubernetes.api.model.authorization.SubjectAccessReview getK8sSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.authorization.SubjectAccessReview buildK8sSubjectAccessReview();

  public abstract A withK8sSubjectAccessReview(io.dekorate.deps.kubernetes.api.model.authorization.SubjectAccessReview);

  public abstract java.lang.Boolean hasK8sSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$K8sSubjectAccessReviewNested<A> withNewK8sSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$K8sSubjectAccessReviewNested<A> withNewK8sSubjectAccessReviewLike(io.dekorate.deps.kubernetes.api.model.authorization.SubjectAccessReview);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$K8sSubjectAccessReviewNested<A> editK8sSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$K8sSubjectAccessReviewNested<A> editOrNewK8sSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$K8sSubjectAccessReviewNested<A> editOrNewK8sSubjectAccessReviewLike(io.dekorate.deps.kubernetes.api.model.authorization.SubjectAccessReview);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.KubernetesRunAsUserStrategyOptions getKubernetesRunAsUserStrategyOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.KubernetesRunAsUserStrategyOptions buildKubernetesRunAsUserStrategyOptions();

  public abstract A withKubernetesRunAsUserStrategyOptions(io.dekorate.deps.kubernetes.api.model.policy.KubernetesRunAsUserStrategyOptions);

  public abstract java.lang.Boolean hasKubernetesRunAsUserStrategyOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$KubernetesRunAsUserStrategyOptionsNested<A> withNewKubernetesRunAsUserStrategyOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$KubernetesRunAsUserStrategyOptionsNested<A> withNewKubernetesRunAsUserStrategyOptionsLike(io.dekorate.deps.kubernetes.api.model.policy.KubernetesRunAsUserStrategyOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$KubernetesRunAsUserStrategyOptionsNested<A> editKubernetesRunAsUserStrategyOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$KubernetesRunAsUserStrategyOptionsNested<A> editOrNewKubernetesRunAsUserStrategyOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$KubernetesRunAsUserStrategyOptionsNested<A> editOrNewKubernetesRunAsUserStrategyOptionsLike(io.dekorate.deps.kubernetes.api.model.policy.KubernetesRunAsUserStrategyOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.coordination.v1.Lease getLease();

  public abstract io.dekorate.deps.kubernetes.api.model.coordination.v1.Lease buildLease();

  public abstract A withLease(io.dekorate.deps.kubernetes.api.model.coordination.v1.Lease);

  public abstract java.lang.Boolean hasLease();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LeaseNested<A> withNewLease();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LeaseNested<A> withNewLeaseLike(io.dekorate.deps.kubernetes.api.model.coordination.v1.Lease);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LeaseNested<A> editLease();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LeaseNested<A> editOrNewLease();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LeaseNested<A> editOrNewLeaseLike(io.dekorate.deps.kubernetes.api.model.coordination.v1.Lease);

  public abstract io.dekorate.deps.kubernetes.api.model.coordination.v1.LeaseList getLeaseList();

  public abstract io.dekorate.deps.kubernetes.api.model.coordination.v1.LeaseList buildLeaseList();

  public abstract A withLeaseList(io.dekorate.deps.kubernetes.api.model.coordination.v1.LeaseList);

  public abstract java.lang.Boolean hasLeaseList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LeaseListNested<A> withNewLeaseList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LeaseListNested<A> withNewLeaseListLike(io.dekorate.deps.kubernetes.api.model.coordination.v1.LeaseList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LeaseListNested<A> editLeaseList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LeaseListNested<A> editOrNewLeaseList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LeaseListNested<A> editOrNewLeaseListLike(io.dekorate.deps.kubernetes.api.model.coordination.v1.LeaseList);

  public abstract io.dekorate.deps.kubernetes.api.model.LimitRangeList getLimitRangeList();

  public abstract io.dekorate.deps.kubernetes.api.model.LimitRangeList buildLimitRangeList();

  public abstract A withLimitRangeList(io.dekorate.deps.kubernetes.api.model.LimitRangeList);

  public abstract java.lang.Boolean hasLimitRangeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LimitRangeListNested<A> withNewLimitRangeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LimitRangeListNested<A> withNewLimitRangeListLike(io.dekorate.deps.kubernetes.api.model.LimitRangeList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LimitRangeListNested<A> editLimitRangeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LimitRangeListNested<A> editOrNewLimitRangeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$LimitRangeListNested<A> editOrNewLimitRangeListLike(io.dekorate.deps.kubernetes.api.model.LimitRangeList);

  public abstract io.dekorate.deps.kubernetes.api.model.ListOptions getListOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.ListOptions buildListOptions();

  public abstract A withListOptions(io.dekorate.deps.kubernetes.api.model.ListOptions);

  public abstract java.lang.Boolean hasListOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ListOptionsNested<A> withNewListOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ListOptionsNested<A> withNewListOptionsLike(io.dekorate.deps.kubernetes.api.model.ListOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ListOptionsNested<A> editListOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ListOptionsNested<A> editOrNewListOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ListOptionsNested<A> editOrNewListOptionsLike(io.dekorate.deps.kubernetes.api.model.ListOptions);

  public abstract io.dekorate.deps.openshift.api.model.LocalSubjectAccessReview getLocalSubjectAccessReview();

  public abstract io.dekorate.deps.openshift.api.model.LocalSubjectAccessReview buildLocalSubjectAccessReview();

  public abstract A withLocalSubjectAccessReview(io.dekorate.deps.openshift.api.model.LocalSubjectAccessReview);

  public abstract java.lang.Boolean hasLocalSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ModelLocalSubjectAccessReviewNested<A> withNewModelLocalSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ModelLocalSubjectAccessReviewNested<A> withNewLocalSubjectAccessReviewLike(io.dekorate.deps.openshift.api.model.LocalSubjectAccessReview);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ModelLocalSubjectAccessReviewNested<A> editModelLocalSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ModelLocalSubjectAccessReviewNested<A> editOrNewLocalSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ModelLocalSubjectAccessReviewNested<A> editOrNewLocalSubjectAccessReviewLike(io.dekorate.deps.openshift.api.model.LocalSubjectAccessReview);

  public abstract io.dekorate.deps.kubernetes.api.model.admissionregistration.MutatingWebhookConfiguration getMutatingWebhookConfiguration();

  public abstract io.dekorate.deps.kubernetes.api.model.admissionregistration.MutatingWebhookConfiguration buildMutatingWebhookConfiguration();

  public abstract A withMutatingWebhookConfiguration(io.dekorate.deps.kubernetes.api.model.admissionregistration.MutatingWebhookConfiguration);

  public abstract java.lang.Boolean hasMutatingWebhookConfiguration();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$MutatingWebhookConfigurationNested<A> withNewMutatingWebhookConfiguration();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$MutatingWebhookConfigurationNested<A> withNewMutatingWebhookConfigurationLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.MutatingWebhookConfiguration);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$MutatingWebhookConfigurationNested<A> editMutatingWebhookConfiguration();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$MutatingWebhookConfigurationNested<A> editOrNewMutatingWebhookConfiguration();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$MutatingWebhookConfigurationNested<A> editOrNewMutatingWebhookConfigurationLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.MutatingWebhookConfiguration);

  public abstract io.dekorate.deps.kubernetes.api.model.admissionregistration.MutatingWebhookConfigurationList getMutatingWebhookConfigurationList();

  public abstract io.dekorate.deps.kubernetes.api.model.admissionregistration.MutatingWebhookConfigurationList buildMutatingWebhookConfigurationList();

  public abstract A withMutatingWebhookConfigurationList(io.dekorate.deps.kubernetes.api.model.admissionregistration.MutatingWebhookConfigurationList);

  public abstract java.lang.Boolean hasMutatingWebhookConfigurationList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$MutatingWebhookConfigurationListNested<A> withNewMutatingWebhookConfigurationList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$MutatingWebhookConfigurationListNested<A> withNewMutatingWebhookConfigurationListLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.MutatingWebhookConfigurationList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$MutatingWebhookConfigurationListNested<A> editMutatingWebhookConfigurationList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$MutatingWebhookConfigurationListNested<A> editOrNewMutatingWebhookConfigurationList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$MutatingWebhookConfigurationListNested<A> editOrNewMutatingWebhookConfigurationListLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.MutatingWebhookConfigurationList);

  public abstract io.dekorate.deps.kubernetes.api.model.Namespace getNamespace();

  public abstract io.dekorate.deps.kubernetes.api.model.Namespace buildNamespace();

  public abstract A withNamespace(io.dekorate.deps.kubernetes.api.model.Namespace);

  public abstract java.lang.Boolean hasNamespace();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NamespaceNested<A> withNewNamespace();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NamespaceNested<A> withNewNamespaceLike(io.dekorate.deps.kubernetes.api.model.Namespace);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NamespaceNested<A> editNamespace();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NamespaceNested<A> editOrNewNamespace();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NamespaceNested<A> editOrNewNamespaceLike(io.dekorate.deps.kubernetes.api.model.Namespace);

  public abstract io.dekorate.deps.kubernetes.api.model.NamespaceList getNamespaceList();

  public abstract io.dekorate.deps.kubernetes.api.model.NamespaceList buildNamespaceList();

  public abstract A withNamespaceList(io.dekorate.deps.kubernetes.api.model.NamespaceList);

  public abstract java.lang.Boolean hasNamespaceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NamespaceListNested<A> withNewNamespaceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NamespaceListNested<A> withNewNamespaceListLike(io.dekorate.deps.kubernetes.api.model.NamespaceList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NamespaceListNested<A> editNamespaceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NamespaceListNested<A> editOrNewNamespaceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NamespaceListNested<A> editOrNewNamespaceListLike(io.dekorate.deps.kubernetes.api.model.NamespaceList);

  public abstract io.dekorate.deps.openshift.api.model.NetNamespace getNetNamespace();

  public abstract io.dekorate.deps.openshift.api.model.NetNamespace buildNetNamespace();

  public abstract A withNetNamespace(io.dekorate.deps.openshift.api.model.NetNamespace);

  public abstract java.lang.Boolean hasNetNamespace();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetNamespaceNested<A> withNewNetNamespace();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetNamespaceNested<A> withNewNetNamespaceLike(io.dekorate.deps.openshift.api.model.NetNamespace);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetNamespaceNested<A> editNetNamespace();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetNamespaceNested<A> editOrNewNetNamespace();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetNamespaceNested<A> editOrNewNetNamespaceLike(io.dekorate.deps.openshift.api.model.NetNamespace);

  public abstract io.dekorate.deps.openshift.api.model.NetNamespaceList getNetNamespaceList();

  public abstract io.dekorate.deps.openshift.api.model.NetNamespaceList buildNetNamespaceList();

  public abstract A withNetNamespaceList(io.dekorate.deps.openshift.api.model.NetNamespaceList);

  public abstract java.lang.Boolean hasNetNamespaceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetNamespaceListNested<A> withNewNetNamespaceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetNamespaceListNested<A> withNewNetNamespaceListLike(io.dekorate.deps.openshift.api.model.NetNamespaceList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetNamespaceListNested<A> editNetNamespaceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetNamespaceListNested<A> editOrNewNetNamespaceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetNamespaceListNested<A> editOrNewNetNamespaceListLike(io.dekorate.deps.openshift.api.model.NetNamespaceList);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicy getNetworkPolicy();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicy buildNetworkPolicy();

  public abstract A withNetworkPolicy(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicy);

  public abstract java.lang.Boolean hasNetworkPolicy();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetworkPolicyNested<A> withNewNetworkPolicy();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetworkPolicyNested<A> withNewNetworkPolicyLike(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicy);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetworkPolicyNested<A> editNetworkPolicy();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetworkPolicyNested<A> editOrNewNetworkPolicy();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetworkPolicyNested<A> editOrNewNetworkPolicyLike(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicy);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyList getNetworkPolicyList();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyList buildNetworkPolicyList();

  public abstract A withNetworkPolicyList(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyList);

  public abstract java.lang.Boolean hasNetworkPolicyList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetworkPolicyListNested<A> withNewNetworkPolicyList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetworkPolicyListNested<A> withNewNetworkPolicyListLike(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetworkPolicyListNested<A> editNetworkPolicyList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetworkPolicyListNested<A> editOrNewNetworkPolicyList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NetworkPolicyListNested<A> editOrNewNetworkPolicyListLike(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyList);

  public abstract io.dekorate.deps.kubernetes.api.model.Node getNode();

  public abstract io.dekorate.deps.kubernetes.api.model.Node buildNode();

  public abstract A withNode(io.dekorate.deps.kubernetes.api.model.Node);

  public abstract java.lang.Boolean hasNode();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeNested<A> withNewNode();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeNested<A> withNewNodeLike(io.dekorate.deps.kubernetes.api.model.Node);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeNested<A> editNode();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeNested<A> editOrNewNode();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeNested<A> editOrNewNodeLike(io.dekorate.deps.kubernetes.api.model.Node);

  public abstract io.dekorate.deps.kubernetes.api.model.NodeList getNodeList();

  public abstract io.dekorate.deps.kubernetes.api.model.NodeList buildNodeList();

  public abstract A withNodeList(io.dekorate.deps.kubernetes.api.model.NodeList);

  public abstract java.lang.Boolean hasNodeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeListNested<A> withNewNodeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeListNested<A> withNewNodeListLike(io.dekorate.deps.kubernetes.api.model.NodeList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeListNested<A> editNodeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeListNested<A> editOrNewNodeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeListNested<A> editOrNewNodeListLike(io.dekorate.deps.kubernetes.api.model.NodeList);

  public abstract io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.NodeMetrics getNodeMetrics();

  public abstract io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.NodeMetrics buildNodeMetrics();

  public abstract A withNodeMetrics(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.NodeMetrics);

  public abstract java.lang.Boolean hasNodeMetrics();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeMetricsNested<A> withNewNodeMetrics();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeMetricsNested<A> withNewNodeMetricsLike(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.NodeMetrics);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeMetricsNested<A> editNodeMetrics();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeMetricsNested<A> editOrNewNodeMetrics();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeMetricsNested<A> editOrNewNodeMetricsLike(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.NodeMetrics);

  public abstract io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.NodeMetricsList getNodeMetricsList();

  public abstract io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.NodeMetricsList buildNodeMetricsList();

  public abstract A withNodeMetricsList(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.NodeMetricsList);

  public abstract java.lang.Boolean hasNodeMetricsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeMetricsListNested<A> withNewNodeMetricsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeMetricsListNested<A> withNewNodeMetricsListLike(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.NodeMetricsList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeMetricsListNested<A> editNodeMetricsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeMetricsListNested<A> editOrNewNodeMetricsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$NodeMetricsListNested<A> editOrNewNodeMetricsListLike(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.NodeMetricsList);

  public abstract io.dekorate.deps.openshift.api.model.OAuthAccessToken getOAuthAccessToken();

  public abstract io.dekorate.deps.openshift.api.model.OAuthAccessToken buildOAuthAccessToken();

  public abstract A withOAuthAccessToken(io.dekorate.deps.openshift.api.model.OAuthAccessToken);

  public abstract java.lang.Boolean hasOAuthAccessToken();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAccessTokenNested<A> withNewOAuthAccessToken();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAccessTokenNested<A> withNewOAuthAccessTokenLike(io.dekorate.deps.openshift.api.model.OAuthAccessToken);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAccessTokenNested<A> editOAuthAccessToken();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAccessTokenNested<A> editOrNewOAuthAccessToken();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAccessTokenNested<A> editOrNewOAuthAccessTokenLike(io.dekorate.deps.openshift.api.model.OAuthAccessToken);

  public abstract io.dekorate.deps.openshift.api.model.OAuthAccessTokenList getOAuthAccessTokenList();

  public abstract io.dekorate.deps.openshift.api.model.OAuthAccessTokenList buildOAuthAccessTokenList();

  public abstract A withOAuthAccessTokenList(io.dekorate.deps.openshift.api.model.OAuthAccessTokenList);

  public abstract java.lang.Boolean hasOAuthAccessTokenList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAccessTokenListNested<A> withNewOAuthAccessTokenList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAccessTokenListNested<A> withNewOAuthAccessTokenListLike(io.dekorate.deps.openshift.api.model.OAuthAccessTokenList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAccessTokenListNested<A> editOAuthAccessTokenList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAccessTokenListNested<A> editOrNewOAuthAccessTokenList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAccessTokenListNested<A> editOrNewOAuthAccessTokenListLike(io.dekorate.deps.openshift.api.model.OAuthAccessTokenList);

  public abstract io.dekorate.deps.openshift.api.model.OAuthAuthorizeToken getOAuthAuthorizeToken();

  public abstract io.dekorate.deps.openshift.api.model.OAuthAuthorizeToken buildOAuthAuthorizeToken();

  public abstract A withOAuthAuthorizeToken(io.dekorate.deps.openshift.api.model.OAuthAuthorizeToken);

  public abstract java.lang.Boolean hasOAuthAuthorizeToken();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAuthorizeTokenNested<A> withNewOAuthAuthorizeToken();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAuthorizeTokenNested<A> withNewOAuthAuthorizeTokenLike(io.dekorate.deps.openshift.api.model.OAuthAuthorizeToken);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAuthorizeTokenNested<A> editOAuthAuthorizeToken();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAuthorizeTokenNested<A> editOrNewOAuthAuthorizeToken();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAuthorizeTokenNested<A> editOrNewOAuthAuthorizeTokenLike(io.dekorate.deps.openshift.api.model.OAuthAuthorizeToken);

  public abstract io.dekorate.deps.openshift.api.model.OAuthAuthorizeTokenList getOAuthAuthorizeTokenList();

  public abstract io.dekorate.deps.openshift.api.model.OAuthAuthorizeTokenList buildOAuthAuthorizeTokenList();

  public abstract A withOAuthAuthorizeTokenList(io.dekorate.deps.openshift.api.model.OAuthAuthorizeTokenList);

  public abstract java.lang.Boolean hasOAuthAuthorizeTokenList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAuthorizeTokenListNested<A> withNewOAuthAuthorizeTokenList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAuthorizeTokenListNested<A> withNewOAuthAuthorizeTokenListLike(io.dekorate.deps.openshift.api.model.OAuthAuthorizeTokenList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAuthorizeTokenListNested<A> editOAuthAuthorizeTokenList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAuthorizeTokenListNested<A> editOrNewOAuthAuthorizeTokenList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthAuthorizeTokenListNested<A> editOrNewOAuthAuthorizeTokenListLike(io.dekorate.deps.openshift.api.model.OAuthAuthorizeTokenList);

  public abstract io.dekorate.deps.openshift.api.model.OAuthClient getOAuthClient();

  public abstract io.dekorate.deps.openshift.api.model.OAuthClient buildOAuthClient();

  public abstract A withOAuthClient(io.dekorate.deps.openshift.api.model.OAuthClient);

  public abstract java.lang.Boolean hasOAuthClient();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientNested<A> withNewOAuthClient();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientNested<A> withNewOAuthClientLike(io.dekorate.deps.openshift.api.model.OAuthClient);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientNested<A> editOAuthClient();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientNested<A> editOrNewOAuthClient();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientNested<A> editOrNewOAuthClientLike(io.dekorate.deps.openshift.api.model.OAuthClient);

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientAuthorization getOAuthClientAuthorization();

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientAuthorization buildOAuthClientAuthorization();

  public abstract A withOAuthClientAuthorization(io.dekorate.deps.openshift.api.model.OAuthClientAuthorization);

  public abstract java.lang.Boolean hasOAuthClientAuthorization();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientAuthorizationNested<A> withNewOAuthClientAuthorization();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientAuthorizationNested<A> withNewOAuthClientAuthorizationLike(io.dekorate.deps.openshift.api.model.OAuthClientAuthorization);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientAuthorizationNested<A> editOAuthClientAuthorization();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientAuthorizationNested<A> editOrNewOAuthClientAuthorization();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientAuthorizationNested<A> editOrNewOAuthClientAuthorizationLike(io.dekorate.deps.openshift.api.model.OAuthClientAuthorization);

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientAuthorizationList getOAuthClientAuthorizationList();

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientAuthorizationList buildOAuthClientAuthorizationList();

  public abstract A withOAuthClientAuthorizationList(io.dekorate.deps.openshift.api.model.OAuthClientAuthorizationList);

  public abstract java.lang.Boolean hasOAuthClientAuthorizationList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientAuthorizationListNested<A> withNewOAuthClientAuthorizationList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientAuthorizationListNested<A> withNewOAuthClientAuthorizationListLike(io.dekorate.deps.openshift.api.model.OAuthClientAuthorizationList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientAuthorizationListNested<A> editOAuthClientAuthorizationList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientAuthorizationListNested<A> editOrNewOAuthClientAuthorizationList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientAuthorizationListNested<A> editOrNewOAuthClientAuthorizationListLike(io.dekorate.deps.openshift.api.model.OAuthClientAuthorizationList);

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientList getOAuthClientList();

  public abstract io.dekorate.deps.openshift.api.model.OAuthClientList buildOAuthClientList();

  public abstract A withOAuthClientList(io.dekorate.deps.openshift.api.model.OAuthClientList);

  public abstract java.lang.Boolean hasOAuthClientList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientListNested<A> withNewOAuthClientList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientListNested<A> withNewOAuthClientListLike(io.dekorate.deps.openshift.api.model.OAuthClientList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientListNested<A> editOAuthClientList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientListNested<A> editOrNewOAuthClientList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OAuthClientListNested<A> editOrNewOAuthClientListLike(io.dekorate.deps.openshift.api.model.OAuthClientList);

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectMeta getObjectMeta();

  public abstract io.dekorate.deps.kubernetes.api.model.ObjectMeta buildObjectMeta();

  public abstract A withObjectMeta(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract java.lang.Boolean hasObjectMeta();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ObjectMetaNested<A> withNewObjectMeta();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ObjectMetaNested<A> withNewObjectMetaLike(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ObjectMetaNested<A> editObjectMeta();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ObjectMetaNested<A> editOrNewObjectMeta();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ObjectMetaNested<A> editOrNewObjectMetaLike(io.dekorate.deps.kubernetes.api.model.ObjectMeta);

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftClusterRole getOpenshiftClusterRole();

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftClusterRole buildOpenshiftClusterRole();

  public abstract A withOpenshiftClusterRole(io.dekorate.deps.openshift.api.model.OpenshiftClusterRole);

  public abstract java.lang.Boolean hasOpenshiftClusterRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleNested<A> withNewOpenshiftClusterRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleNested<A> withNewOpenshiftClusterRoleLike(io.dekorate.deps.openshift.api.model.OpenshiftClusterRole);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleNested<A> editOpenshiftClusterRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleNested<A> editOrNewOpenshiftClusterRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleNested<A> editOrNewOpenshiftClusterRoleLike(io.dekorate.deps.openshift.api.model.OpenshiftClusterRole);

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleBinding getOpenshiftClusterRoleBinding();

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleBinding buildOpenshiftClusterRoleBinding();

  public abstract A withOpenshiftClusterRoleBinding(io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleBinding);

  public abstract java.lang.Boolean hasOpenshiftClusterRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleBindingNested<A> withNewOpenshiftClusterRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleBindingNested<A> withNewOpenshiftClusterRoleBindingLike(io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleBinding);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleBindingNested<A> editOpenshiftClusterRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleBindingNested<A> editOrNewOpenshiftClusterRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleBindingNested<A> editOrNewOpenshiftClusterRoleBindingLike(io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleBinding);

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleBindingList getOpenshiftClusterRoleBindingList();

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleBindingList buildOpenshiftClusterRoleBindingList();

  public abstract A withOpenshiftClusterRoleBindingList(io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleBindingList);

  public abstract java.lang.Boolean hasOpenshiftClusterRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleBindingListNested<A> withNewOpenshiftClusterRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleBindingListNested<A> withNewOpenshiftClusterRoleBindingListLike(io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleBindingList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleBindingListNested<A> editOpenshiftClusterRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleBindingListNested<A> editOrNewOpenshiftClusterRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleBindingListNested<A> editOrNewOpenshiftClusterRoleBindingListLike(io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleBindingList);

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleScopeRestriction getOpenshiftClusterRoleScopeRestriction();

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleScopeRestriction buildOpenshiftClusterRoleScopeRestriction();

  public abstract A withOpenshiftClusterRoleScopeRestriction(io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleScopeRestriction);

  public abstract java.lang.Boolean hasOpenshiftClusterRoleScopeRestriction();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleScopeRestrictionNested<A> withNewOpenshiftClusterRoleScopeRestriction();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleScopeRestrictionNested<A> withNewOpenshiftClusterRoleScopeRestrictionLike(io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleScopeRestriction);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleScopeRestrictionNested<A> editOpenshiftClusterRoleScopeRestriction();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleScopeRestrictionNested<A> editOrNewOpenshiftClusterRoleScopeRestriction();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftClusterRoleScopeRestrictionNested<A> editOrNewOpenshiftClusterRoleScopeRestrictionLike(io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleScopeRestriction);

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftRole getOpenshiftRole();

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftRole buildOpenshiftRole();

  public abstract A withOpenshiftRole(io.dekorate.deps.openshift.api.model.OpenshiftRole);

  public abstract java.lang.Boolean hasOpenshiftRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleNested<A> withNewOpenshiftRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleNested<A> withNewOpenshiftRoleLike(io.dekorate.deps.openshift.api.model.OpenshiftRole);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleNested<A> editOpenshiftRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleNested<A> editOrNewOpenshiftRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleNested<A> editOrNewOpenshiftRoleLike(io.dekorate.deps.openshift.api.model.OpenshiftRole);

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftRoleBinding getOpenshiftRoleBinding();

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftRoleBinding buildOpenshiftRoleBinding();

  public abstract A withOpenshiftRoleBinding(io.dekorate.deps.openshift.api.model.OpenshiftRoleBinding);

  public abstract java.lang.Boolean hasOpenshiftRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingNested<A> withNewOpenshiftRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingNested<A> withNewOpenshiftRoleBindingLike(io.dekorate.deps.openshift.api.model.OpenshiftRoleBinding);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingNested<A> editOpenshiftRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingNested<A> editOrNewOpenshiftRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingNested<A> editOrNewOpenshiftRoleBindingLike(io.dekorate.deps.openshift.api.model.OpenshiftRoleBinding);

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingList getOpenshiftRoleBindingList();

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingList buildOpenshiftRoleBindingList();

  public abstract A withOpenshiftRoleBindingList(io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingList);

  public abstract java.lang.Boolean hasOpenshiftRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingListNested<A> withNewOpenshiftRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingListNested<A> withNewOpenshiftRoleBindingListLike(io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingListNested<A> editOpenshiftRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingListNested<A> editOrNewOpenshiftRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingListNested<A> editOrNewOpenshiftRoleBindingListLike(io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingList);

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingRestriction getOpenshiftRoleBindingRestriction();

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingRestriction buildOpenshiftRoleBindingRestriction();

  public abstract A withOpenshiftRoleBindingRestriction(io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingRestriction);

  public abstract java.lang.Boolean hasOpenshiftRoleBindingRestriction();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingRestrictionNested<A> withNewOpenshiftRoleBindingRestriction();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingRestrictionNested<A> withNewOpenshiftRoleBindingRestrictionLike(io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingRestriction);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingRestrictionNested<A> editOpenshiftRoleBindingRestriction();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingRestrictionNested<A> editOrNewOpenshiftRoleBindingRestriction();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingRestrictionNested<A> editOrNewOpenshiftRoleBindingRestrictionLike(io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingRestriction);

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingRestrictionSpec getOpenshiftRoleBindingRestrictionSpec();

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingRestrictionSpec buildOpenshiftRoleBindingRestrictionSpec();

  public abstract A withOpenshiftRoleBindingRestrictionSpec(io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingRestrictionSpec);

  public abstract java.lang.Boolean hasOpenshiftRoleBindingRestrictionSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingRestrictionSpecNested<A> withNewOpenshiftRoleBindingRestrictionSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingRestrictionSpecNested<A> withNewOpenshiftRoleBindingRestrictionSpecLike(io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingRestrictionSpec);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingRestrictionSpecNested<A> editOpenshiftRoleBindingRestrictionSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingRestrictionSpecNested<A> editOrNewOpenshiftRoleBindingRestrictionSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleBindingRestrictionSpecNested<A> editOrNewOpenshiftRoleBindingRestrictionSpecLike(io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingRestrictionSpec);

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftRoleList getOpenshiftRoleList();

  public abstract io.dekorate.deps.openshift.api.model.OpenshiftRoleList buildOpenshiftRoleList();

  public abstract A withOpenshiftRoleList(io.dekorate.deps.openshift.api.model.OpenshiftRoleList);

  public abstract java.lang.Boolean hasOpenshiftRoleList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleListNested<A> withNewOpenshiftRoleList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleListNested<A> withNewOpenshiftRoleListLike(io.dekorate.deps.openshift.api.model.OpenshiftRoleList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleListNested<A> editOpenshiftRoleList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleListNested<A> editOrNewOpenshiftRoleList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$OpenshiftRoleListNested<A> editOrNewOpenshiftRoleListLike(io.dekorate.deps.openshift.api.model.OpenshiftRoleList);

  public abstract java.lang.String getOperation();

  public abstract A withOperation(java.lang.String);

  public abstract java.lang.Boolean hasOperation();

  public abstract A withNewOperation(java.lang.String);

  public abstract A withNewOperation(java.lang.StringBuilder);

  public abstract A withNewOperation(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.Patch getPatch();

  public abstract io.dekorate.deps.kubernetes.api.model.Patch buildPatch();

  public abstract A withPatch(io.dekorate.deps.kubernetes.api.model.Patch);

  public abstract java.lang.Boolean hasPatch();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PatchNested<A> withNewPatch();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PatchNested<A> withNewPatchLike(io.dekorate.deps.kubernetes.api.model.Patch);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PatchNested<A> editPatch();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PatchNested<A> editOrNewPatch();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PatchNested<A> editOrNewPatchLike(io.dekorate.deps.kubernetes.api.model.Patch);

  public abstract io.dekorate.deps.kubernetes.api.model.PatchOptions getPatchOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.PatchOptions buildPatchOptions();

  public abstract A withPatchOptions(io.dekorate.deps.kubernetes.api.model.PatchOptions);

  public abstract java.lang.Boolean hasPatchOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PatchOptionsNested<A> withNewPatchOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PatchOptionsNested<A> withNewPatchOptionsLike(io.dekorate.deps.kubernetes.api.model.PatchOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PatchOptionsNested<A> editPatchOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PatchOptionsNested<A> editOrNewPatchOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PatchOptionsNested<A> editOrNewPatchOptionsLike(io.dekorate.deps.kubernetes.api.model.PatchOptions);

  public abstract java.lang.String getPatchType();

  public abstract A withPatchType(java.lang.String);

  public abstract java.lang.Boolean hasPatchType();

  public abstract A withNewPatchType(java.lang.String);

  public abstract A withNewPatchType(java.lang.StringBuilder);

  public abstract A withNewPatchType(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.PersistentVolume getPersistentVolume();

  public abstract io.dekorate.deps.kubernetes.api.model.PersistentVolume buildPersistentVolume();

  public abstract A withPersistentVolume(io.dekorate.deps.kubernetes.api.model.PersistentVolume);

  public abstract java.lang.Boolean hasPersistentVolume();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeNested<A> withNewPersistentVolume();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeNested<A> withNewPersistentVolumeLike(io.dekorate.deps.kubernetes.api.model.PersistentVolume);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeNested<A> editPersistentVolume();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeNested<A> editOrNewPersistentVolume();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeNested<A> editOrNewPersistentVolumeLike(io.dekorate.deps.kubernetes.api.model.PersistentVolume);

  public abstract io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim getPersistentVolumeClaim();

  public abstract io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim buildPersistentVolumeClaim();

  public abstract A withPersistentVolumeClaim(io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim);

  public abstract java.lang.Boolean hasPersistentVolumeClaim();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimNested<A> withNewPersistentVolumeClaim();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimNested<A> withNewPersistentVolumeClaimLike(io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimNested<A> editPersistentVolumeClaim();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimNested<A> editOrNewPersistentVolumeClaim();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimNested<A> editOrNewPersistentVolumeClaimLike(io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim);

  public abstract io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaimList getPersistentVolumeClaimList();

  public abstract io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaimList buildPersistentVolumeClaimList();

  public abstract A withPersistentVolumeClaimList(io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaimList);

  public abstract java.lang.Boolean hasPersistentVolumeClaimList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimListNested<A> withNewPersistentVolumeClaimList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimListNested<A> withNewPersistentVolumeClaimListLike(io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaimList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimListNested<A> editPersistentVolumeClaimList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimListNested<A> editOrNewPersistentVolumeClaimList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeClaimListNested<A> editOrNewPersistentVolumeClaimListLike(io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaimList);

  public abstract io.dekorate.deps.kubernetes.api.model.PersistentVolumeList getPersistentVolumeList();

  public abstract io.dekorate.deps.kubernetes.api.model.PersistentVolumeList buildPersistentVolumeList();

  public abstract A withPersistentVolumeList(io.dekorate.deps.kubernetes.api.model.PersistentVolumeList);

  public abstract java.lang.Boolean hasPersistentVolumeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeListNested<A> withNewPersistentVolumeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeListNested<A> withNewPersistentVolumeListLike(io.dekorate.deps.kubernetes.api.model.PersistentVolumeList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeListNested<A> editPersistentVolumeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeListNested<A> editOrNewPersistentVolumeList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PersistentVolumeListNested<A> editOrNewPersistentVolumeListLike(io.dekorate.deps.kubernetes.api.model.PersistentVolumeList);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodDisruptionBudget getPodDisruptionBudget();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodDisruptionBudget buildPodDisruptionBudget();

  public abstract A withPodDisruptionBudget(io.dekorate.deps.kubernetes.api.model.policy.PodDisruptionBudget);

  public abstract java.lang.Boolean hasPodDisruptionBudget();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodDisruptionBudgetNested<A> withNewPodDisruptionBudget();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodDisruptionBudgetNested<A> withNewPodDisruptionBudgetLike(io.dekorate.deps.kubernetes.api.model.policy.PodDisruptionBudget);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodDisruptionBudgetNested<A> editPodDisruptionBudget();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodDisruptionBudgetNested<A> editOrNewPodDisruptionBudget();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodDisruptionBudgetNested<A> editOrNewPodDisruptionBudgetLike(io.dekorate.deps.kubernetes.api.model.policy.PodDisruptionBudget);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodDisruptionBudgetList getPodDisruptionBudgetList();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodDisruptionBudgetList buildPodDisruptionBudgetList();

  public abstract A withPodDisruptionBudgetList(io.dekorate.deps.kubernetes.api.model.policy.PodDisruptionBudgetList);

  public abstract java.lang.Boolean hasPodDisruptionBudgetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodDisruptionBudgetListNested<A> withNewPodDisruptionBudgetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodDisruptionBudgetListNested<A> withNewPodDisruptionBudgetListLike(io.dekorate.deps.kubernetes.api.model.policy.PodDisruptionBudgetList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodDisruptionBudgetListNested<A> editPodDisruptionBudgetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodDisruptionBudgetListNested<A> editOrNewPodDisruptionBudgetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodDisruptionBudgetListNested<A> editOrNewPodDisruptionBudgetListLike(io.dekorate.deps.kubernetes.api.model.policy.PodDisruptionBudgetList);

  public abstract io.dekorate.deps.kubernetes.api.model.PodList getPodList();

  public abstract io.dekorate.deps.kubernetes.api.model.PodList buildPodList();

  public abstract A withPodList(io.dekorate.deps.kubernetes.api.model.PodList);

  public abstract java.lang.Boolean hasPodList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodListNested<A> withNewPodList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodListNested<A> withNewPodListLike(io.dekorate.deps.kubernetes.api.model.PodList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodListNested<A> editPodList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodListNested<A> editOrNewPodList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodListNested<A> editOrNewPodListLike(io.dekorate.deps.kubernetes.api.model.PodList);

  public abstract io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.PodMetrics getPodMetrics();

  public abstract io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.PodMetrics buildPodMetrics();

  public abstract A withPodMetrics(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.PodMetrics);

  public abstract java.lang.Boolean hasPodMetrics();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodMetricsNested<A> withNewPodMetrics();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodMetricsNested<A> withNewPodMetricsLike(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.PodMetrics);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodMetricsNested<A> editPodMetrics();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodMetricsNested<A> editOrNewPodMetrics();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodMetricsNested<A> editOrNewPodMetricsLike(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.PodMetrics);

  public abstract io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.PodMetricsList getPodMetricsList();

  public abstract io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.PodMetricsList buildPodMetricsList();

  public abstract A withPodMetricsList(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.PodMetricsList);

  public abstract java.lang.Boolean hasPodMetricsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodMetricsListNested<A> withNewPodMetricsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodMetricsListNested<A> withNewPodMetricsListLike(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.PodMetricsList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodMetricsListNested<A> editPodMetricsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodMetricsListNested<A> editOrNewPodMetricsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodMetricsListNested<A> editOrNewPodMetricsListLike(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.PodMetricsList);

  public abstract io.dekorate.deps.kubernetes.api.model.settings.PodPreset getPodPreset();

  public abstract io.dekorate.deps.kubernetes.api.model.settings.PodPreset buildPodPreset();

  public abstract A withPodPreset(io.dekorate.deps.kubernetes.api.model.settings.PodPreset);

  public abstract java.lang.Boolean hasPodPreset();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetNested<A> withNewPodPreset();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetNested<A> withNewPodPresetLike(io.dekorate.deps.kubernetes.api.model.settings.PodPreset);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetNested<A> editPodPreset();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetNested<A> editOrNewPodPreset();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetNested<A> editOrNewPodPresetLike(io.dekorate.deps.kubernetes.api.model.settings.PodPreset);

  public abstract io.dekorate.deps.kubernetes.api.model.settings.PodPresetList getPodPresetList();

  public abstract io.dekorate.deps.kubernetes.api.model.settings.PodPresetList buildPodPresetList();

  public abstract A withPodPresetList(io.dekorate.deps.kubernetes.api.model.settings.PodPresetList);

  public abstract java.lang.Boolean hasPodPresetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetListNested<A> withNewPodPresetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetListNested<A> withNewPodPresetListLike(io.dekorate.deps.kubernetes.api.model.settings.PodPresetList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetListNested<A> editPodPresetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetListNested<A> editOrNewPodPresetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetListNested<A> editOrNewPodPresetListLike(io.dekorate.deps.kubernetes.api.model.settings.PodPresetList);

  public abstract io.dekorate.deps.kubernetes.api.model.settings.PodPresetSpec getPodPresetSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.settings.PodPresetSpec buildPodPresetSpec();

  public abstract A withPodPresetSpec(io.dekorate.deps.kubernetes.api.model.settings.PodPresetSpec);

  public abstract java.lang.Boolean hasPodPresetSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetSpecNested<A> withNewPodPresetSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetSpecNested<A> withNewPodPresetSpecLike(io.dekorate.deps.kubernetes.api.model.settings.PodPresetSpec);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetSpecNested<A> editPodPresetSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetSpecNested<A> editOrNewPodPresetSpec();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodPresetSpecNested<A> editOrNewPodPresetSpecLike(io.dekorate.deps.kubernetes.api.model.settings.PodPresetSpec);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicy getPodSecurityPolicy();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicy buildPodSecurityPolicy();

  public abstract A withPodSecurityPolicy(io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicy);

  public abstract java.lang.Boolean hasPodSecurityPolicy();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodSecurityPolicyNested<A> withNewPodSecurityPolicy();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodSecurityPolicyNested<A> withNewPodSecurityPolicyLike(io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicy);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodSecurityPolicyNested<A> editPodSecurityPolicy();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodSecurityPolicyNested<A> editOrNewPodSecurityPolicy();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodSecurityPolicyNested<A> editOrNewPodSecurityPolicyLike(io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicy);

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicyList getPodSecurityPolicyList();

  public abstract io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicyList buildPodSecurityPolicyList();

  public abstract A withPodSecurityPolicyList(io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicyList);

  public abstract java.lang.Boolean hasPodSecurityPolicyList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodSecurityPolicyListNested<A> withNewPodSecurityPolicyList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodSecurityPolicyListNested<A> withNewPodSecurityPolicyListLike(io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicyList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodSecurityPolicyListNested<A> editPodSecurityPolicyList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodSecurityPolicyListNested<A> editOrNewPodSecurityPolicyList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodSecurityPolicyListNested<A> editOrNewPodSecurityPolicyListLike(io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicyList);

  public abstract io.dekorate.deps.kubernetes.api.model.PodTemplateList getPodTemplateList();

  public abstract io.dekorate.deps.kubernetes.api.model.PodTemplateList buildPodTemplateList();

  public abstract A withPodTemplateList(io.dekorate.deps.kubernetes.api.model.PodTemplateList);

  public abstract java.lang.Boolean hasPodTemplateList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodTemplateListNested<A> withNewPodTemplateList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodTemplateListNested<A> withNewPodTemplateListLike(io.dekorate.deps.kubernetes.api.model.PodTemplateList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodTemplateListNested<A> editPodTemplateList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodTemplateListNested<A> editOrNewPodTemplateList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PodTemplateListNested<A> editOrNewPodTemplateListLike(io.dekorate.deps.kubernetes.api.model.PodTemplateList);

  public abstract io.dekorate.deps.kubernetes.api.model.scheduling.PriorityClass getPriorityClass();

  public abstract io.dekorate.deps.kubernetes.api.model.scheduling.PriorityClass buildPriorityClass();

  public abstract A withPriorityClass(io.dekorate.deps.kubernetes.api.model.scheduling.PriorityClass);

  public abstract java.lang.Boolean hasPriorityClass();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PriorityClassNested<A> withNewPriorityClass();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PriorityClassNested<A> withNewPriorityClassLike(io.dekorate.deps.kubernetes.api.model.scheduling.PriorityClass);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PriorityClassNested<A> editPriorityClass();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PriorityClassNested<A> editOrNewPriorityClass();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PriorityClassNested<A> editOrNewPriorityClassLike(io.dekorate.deps.kubernetes.api.model.scheduling.PriorityClass);

  public abstract io.dekorate.deps.kubernetes.api.model.scheduling.PriorityClassList getPriorityClassList();

  public abstract io.dekorate.deps.kubernetes.api.model.scheduling.PriorityClassList buildPriorityClassList();

  public abstract A withPriorityClassList(io.dekorate.deps.kubernetes.api.model.scheduling.PriorityClassList);

  public abstract java.lang.Boolean hasPriorityClassList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PriorityClassListNested<A> withNewPriorityClassList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PriorityClassListNested<A> withNewPriorityClassListLike(io.dekorate.deps.kubernetes.api.model.scheduling.PriorityClassList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PriorityClassListNested<A> editPriorityClassList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PriorityClassListNested<A> editOrNewPriorityClassList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$PriorityClassListNested<A> editOrNewPriorityClassListLike(io.dekorate.deps.kubernetes.api.model.scheduling.PriorityClassList);

  public abstract io.dekorate.deps.openshift.api.model.Project getProject();

  public abstract io.dekorate.deps.openshift.api.model.Project buildProject();

  public abstract A withProject(io.dekorate.deps.openshift.api.model.Project);

  public abstract java.lang.Boolean hasProject();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectNested<A> withNewProject();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectNested<A> withNewProjectLike(io.dekorate.deps.openshift.api.model.Project);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectNested<A> editProject();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectNested<A> editOrNewProject();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectNested<A> editOrNewProjectLike(io.dekorate.deps.openshift.api.model.Project);

  public abstract io.dekorate.deps.openshift.api.model.ProjectList getProjectList();

  public abstract io.dekorate.deps.openshift.api.model.ProjectList buildProjectList();

  public abstract A withProjectList(io.dekorate.deps.openshift.api.model.ProjectList);

  public abstract java.lang.Boolean hasProjectList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectListNested<A> withNewProjectList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectListNested<A> withNewProjectListLike(io.dekorate.deps.openshift.api.model.ProjectList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectListNested<A> editProjectList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectListNested<A> editOrNewProjectList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectListNested<A> editOrNewProjectListLike(io.dekorate.deps.openshift.api.model.ProjectList);

  public abstract io.dekorate.deps.openshift.api.model.ProjectRequest getProjectRequest();

  public abstract io.dekorate.deps.openshift.api.model.ProjectRequest buildProjectRequest();

  public abstract A withProjectRequest(io.dekorate.deps.openshift.api.model.ProjectRequest);

  public abstract java.lang.Boolean hasProjectRequest();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectRequestNested<A> withNewProjectRequest();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectRequestNested<A> withNewProjectRequestLike(io.dekorate.deps.openshift.api.model.ProjectRequest);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectRequestNested<A> editProjectRequest();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectRequestNested<A> editOrNewProjectRequest();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ProjectRequestNested<A> editOrNewProjectRequestLike(io.dekorate.deps.openshift.api.model.ProjectRequest);

  public abstract io.dekorate.deps.kubernetes.api.model.Quantity getQuantity();

  public abstract io.dekorate.deps.kubernetes.api.model.Quantity buildQuantity();

  public abstract A withQuantity(io.dekorate.deps.kubernetes.api.model.Quantity);

  public abstract java.lang.Boolean hasQuantity();

  public abstract A withNewQuantity(java.lang.String, java.lang.String);

  public abstract A withNewQuantity(java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$QuantityNested<A> withNewQuantity();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$QuantityNested<A> withNewQuantityLike(io.dekorate.deps.kubernetes.api.model.Quantity);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$QuantityNested<A> editQuantity();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$QuantityNested<A> editOrNewQuantity();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$QuantityNested<A> editOrNewQuantityLike(io.dekorate.deps.kubernetes.api.model.Quantity);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ReplicaSet getReplicaSet();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ReplicaSet buildReplicaSet();

  public abstract A withReplicaSet(io.dekorate.deps.kubernetes.api.model.apps.ReplicaSet);

  public abstract java.lang.Boolean hasReplicaSet();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicaSetNested<A> withNewReplicaSet();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicaSetNested<A> withNewReplicaSetLike(io.dekorate.deps.kubernetes.api.model.apps.ReplicaSet);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicaSetNested<A> editReplicaSet();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicaSetNested<A> editOrNewReplicaSet();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicaSetNested<A> editOrNewReplicaSetLike(io.dekorate.deps.kubernetes.api.model.apps.ReplicaSet);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ReplicaSetList getReplicaSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.ReplicaSetList buildReplicaSetList();

  public abstract A withReplicaSetList(io.dekorate.deps.kubernetes.api.model.apps.ReplicaSetList);

  public abstract java.lang.Boolean hasReplicaSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicaSetListNested<A> withNewReplicaSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicaSetListNested<A> withNewReplicaSetListLike(io.dekorate.deps.kubernetes.api.model.apps.ReplicaSetList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicaSetListNested<A> editReplicaSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicaSetListNested<A> editOrNewReplicaSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicaSetListNested<A> editOrNewReplicaSetListLike(io.dekorate.deps.kubernetes.api.model.apps.ReplicaSetList);

  public abstract io.dekorate.deps.kubernetes.api.model.ReplicationControllerList getReplicationControllerList();

  public abstract io.dekorate.deps.kubernetes.api.model.ReplicationControllerList buildReplicationControllerList();

  public abstract A withReplicationControllerList(io.dekorate.deps.kubernetes.api.model.ReplicationControllerList);

  public abstract java.lang.Boolean hasReplicationControllerList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicationControllerListNested<A> withNewReplicationControllerList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicationControllerListNested<A> withNewReplicationControllerListLike(io.dekorate.deps.kubernetes.api.model.ReplicationControllerList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicationControllerListNested<A> editReplicationControllerList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicationControllerListNested<A> editOrNewReplicationControllerList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ReplicationControllerListNested<A> editOrNewReplicationControllerListLike(io.dekorate.deps.kubernetes.api.model.ReplicationControllerList);

  public abstract io.dekorate.deps.kubernetes.api.model.ResourceQuota getResourceQuota();

  public abstract io.dekorate.deps.kubernetes.api.model.ResourceQuota buildResourceQuota();

  public abstract A withResourceQuota(io.dekorate.deps.kubernetes.api.model.ResourceQuota);

  public abstract java.lang.Boolean hasResourceQuota();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaNested<A> withNewResourceQuota();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaNested<A> withNewResourceQuotaLike(io.dekorate.deps.kubernetes.api.model.ResourceQuota);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaNested<A> editResourceQuota();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaNested<A> editOrNewResourceQuota();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaNested<A> editOrNewResourceQuotaLike(io.dekorate.deps.kubernetes.api.model.ResourceQuota);

  public abstract io.dekorate.deps.kubernetes.api.model.ResourceQuotaList getResourceQuotaList();

  public abstract io.dekorate.deps.kubernetes.api.model.ResourceQuotaList buildResourceQuotaList();

  public abstract A withResourceQuotaList(io.dekorate.deps.kubernetes.api.model.ResourceQuotaList);

  public abstract java.lang.Boolean hasResourceQuotaList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaListNested<A> withNewResourceQuotaList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaListNested<A> withNewResourceQuotaListLike(io.dekorate.deps.kubernetes.api.model.ResourceQuotaList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaListNested<A> editResourceQuotaList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaListNested<A> editOrNewResourceQuotaList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ResourceQuotaListNested<A> editOrNewResourceQuotaListLike(io.dekorate.deps.kubernetes.api.model.ResourceQuotaList);

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.Role getRole();

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.Role buildRole();

  public abstract A withRole(io.dekorate.deps.kubernetes.api.model.rbac.Role);

  public abstract java.lang.Boolean hasRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleNested<A> withNewRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleNested<A> withNewRoleLike(io.dekorate.deps.kubernetes.api.model.rbac.Role);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleNested<A> editRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleNested<A> editOrNewRole();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleNested<A> editOrNewRoleLike(io.dekorate.deps.kubernetes.api.model.rbac.Role);

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.RoleBinding getRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.RoleBinding buildRoleBinding();

  public abstract A withRoleBinding(io.dekorate.deps.kubernetes.api.model.rbac.RoleBinding);

  public abstract java.lang.Boolean hasRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleBindingNested<A> withNewRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleBindingNested<A> withNewRoleBindingLike(io.dekorate.deps.kubernetes.api.model.rbac.RoleBinding);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleBindingNested<A> editRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleBindingNested<A> editOrNewRoleBinding();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleBindingNested<A> editOrNewRoleBindingLike(io.dekorate.deps.kubernetes.api.model.rbac.RoleBinding);

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.RoleBindingList getRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.RoleBindingList buildRoleBindingList();

  public abstract A withRoleBindingList(io.dekorate.deps.kubernetes.api.model.rbac.RoleBindingList);

  public abstract java.lang.Boolean hasRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleBindingListNested<A> withNewRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleBindingListNested<A> withNewRoleBindingListLike(io.dekorate.deps.kubernetes.api.model.rbac.RoleBindingList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleBindingListNested<A> editRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleBindingListNested<A> editOrNewRoleBindingList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleBindingListNested<A> editOrNewRoleBindingListLike(io.dekorate.deps.kubernetes.api.model.rbac.RoleBindingList);

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.RoleList getRoleList();

  public abstract io.dekorate.deps.kubernetes.api.model.rbac.RoleList buildRoleList();

  public abstract A withRoleList(io.dekorate.deps.kubernetes.api.model.rbac.RoleList);

  public abstract java.lang.Boolean hasRoleList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleListNested<A> withNewRoleList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleListNested<A> withNewRoleListLike(io.dekorate.deps.kubernetes.api.model.rbac.RoleList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleListNested<A> editRoleList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleListNested<A> editOrNewRoleList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RoleListNested<A> editOrNewRoleListLike(io.dekorate.deps.kubernetes.api.model.rbac.RoleList);

  public abstract io.dekorate.deps.kubernetes.api.model.RootPaths getRootPaths();

  public abstract io.dekorate.deps.kubernetes.api.model.RootPaths buildRootPaths();

  public abstract A withRootPaths(io.dekorate.deps.kubernetes.api.model.RootPaths);

  public abstract java.lang.Boolean hasRootPaths();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RootPathsNested<A> withNewRootPaths();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RootPathsNested<A> withNewRootPathsLike(io.dekorate.deps.kubernetes.api.model.RootPaths);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RootPathsNested<A> editRootPaths();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RootPathsNested<A> editOrNewRootPaths();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RootPathsNested<A> editOrNewRootPathsLike(io.dekorate.deps.kubernetes.api.model.RootPaths);

  public abstract io.dekorate.deps.openshift.api.model.Route getRoute();

  public abstract io.dekorate.deps.openshift.api.model.Route buildRoute();

  public abstract A withRoute(io.dekorate.deps.openshift.api.model.Route);

  public abstract java.lang.Boolean hasRoute();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RouteNested<A> withNewRoute();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RouteNested<A> withNewRouteLike(io.dekorate.deps.openshift.api.model.Route);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RouteNested<A> editRoute();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RouteNested<A> editOrNewRoute();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RouteNested<A> editOrNewRouteLike(io.dekorate.deps.openshift.api.model.Route);

  public abstract io.dekorate.deps.openshift.api.model.RouteList getRouteList();

  public abstract io.dekorate.deps.openshift.api.model.RouteList buildRouteList();

  public abstract A withRouteList(io.dekorate.deps.openshift.api.model.RouteList);

  public abstract java.lang.Boolean hasRouteList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RouteListNested<A> withNewRouteList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RouteListNested<A> withNewRouteListLike(io.dekorate.deps.openshift.api.model.RouteList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RouteListNested<A> editRouteList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RouteListNested<A> editOrNewRouteList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RouteListNested<A> editOrNewRouteListLike(io.dekorate.deps.openshift.api.model.RouteList);

  public abstract io.dekorate.deps.kubernetes.api.model.admissionregistration.Rule getRule();

  public abstract io.dekorate.deps.kubernetes.api.model.admissionregistration.Rule buildRule();

  public abstract A withRule(io.dekorate.deps.kubernetes.api.model.admissionregistration.Rule);

  public abstract java.lang.Boolean hasRule();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RuleNested<A> withNewRule();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RuleNested<A> withNewRuleLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.Rule);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RuleNested<A> editRule();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RuleNested<A> editOrNewRule();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RuleNested<A> editOrNewRuleLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.Rule);

  public abstract io.dekorate.deps.kubernetes.api.model.admissionregistration.RuleWithOperations getRuleWithOperations();

  public abstract io.dekorate.deps.kubernetes.api.model.admissionregistration.RuleWithOperations buildRuleWithOperations();

  public abstract A withRuleWithOperations(io.dekorate.deps.kubernetes.api.model.admissionregistration.RuleWithOperations);

  public abstract java.lang.Boolean hasRuleWithOperations();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RuleWithOperationsNested<A> withNewRuleWithOperations();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RuleWithOperationsNested<A> withNewRuleWithOperationsLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.RuleWithOperations);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RuleWithOperationsNested<A> editRuleWithOperations();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RuleWithOperationsNested<A> editOrNewRuleWithOperations();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$RuleWithOperationsNested<A> editOrNewRuleWithOperationsLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.RuleWithOperations);

  public abstract io.dekorate.deps.kubernetes.api.model.v1.Scale getScale();

  public abstract io.dekorate.deps.kubernetes.api.model.v1.Scale buildScale();

  public abstract A withScale(io.dekorate.deps.kubernetes.api.model.v1.Scale);

  public abstract java.lang.Boolean hasScale();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ScaleNested<A> withNewScale();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ScaleNested<A> withNewScaleLike(io.dekorate.deps.kubernetes.api.model.v1.Scale);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ScaleNested<A> editScale();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ScaleNested<A> editOrNewScale();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ScaleNested<A> editOrNewScaleLike(io.dekorate.deps.kubernetes.api.model.v1.Scale);

  public abstract io.dekorate.deps.kubernetes.api.model.Secret getSecret();

  public abstract io.dekorate.deps.kubernetes.api.model.Secret buildSecret();

  public abstract A withSecret(io.dekorate.deps.kubernetes.api.model.Secret);

  public abstract java.lang.Boolean hasSecret();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecretNested<A> withNewSecret();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecretNested<A> withNewSecretLike(io.dekorate.deps.kubernetes.api.model.Secret);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecretNested<A> editSecret();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecretNested<A> editOrNewSecret();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecretNested<A> editOrNewSecretLike(io.dekorate.deps.kubernetes.api.model.Secret);

  public abstract io.dekorate.deps.kubernetes.api.model.SecretList getSecretList();

  public abstract io.dekorate.deps.kubernetes.api.model.SecretList buildSecretList();

  public abstract A withSecretList(io.dekorate.deps.kubernetes.api.model.SecretList);

  public abstract java.lang.Boolean hasSecretList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecretListNested<A> withNewSecretList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecretListNested<A> withNewSecretListLike(io.dekorate.deps.kubernetes.api.model.SecretList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecretListNested<A> editSecretList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecretListNested<A> editOrNewSecretList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecretListNested<A> editOrNewSecretListLike(io.dekorate.deps.kubernetes.api.model.SecretList);

  public abstract io.dekorate.deps.openshift.api.model.SecurityContextConstraints getSecurityContextConstraints();

  public abstract io.dekorate.deps.openshift.api.model.SecurityContextConstraints buildSecurityContextConstraints();

  public abstract A withSecurityContextConstraints(io.dekorate.deps.openshift.api.model.SecurityContextConstraints);

  public abstract java.lang.Boolean hasSecurityContextConstraints();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecurityContextConstraintsNested<A> withNewSecurityContextConstraints();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecurityContextConstraintsNested<A> withNewSecurityContextConstraintsLike(io.dekorate.deps.openshift.api.model.SecurityContextConstraints);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecurityContextConstraintsNested<A> editSecurityContextConstraints();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecurityContextConstraintsNested<A> editOrNewSecurityContextConstraints();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecurityContextConstraintsNested<A> editOrNewSecurityContextConstraintsLike(io.dekorate.deps.openshift.api.model.SecurityContextConstraints);

  public abstract io.dekorate.deps.openshift.api.model.SecurityContextConstraintsList getSecurityContextConstraintsList();

  public abstract io.dekorate.deps.openshift.api.model.SecurityContextConstraintsList buildSecurityContextConstraintsList();

  public abstract A withSecurityContextConstraintsList(io.dekorate.deps.openshift.api.model.SecurityContextConstraintsList);

  public abstract java.lang.Boolean hasSecurityContextConstraintsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecurityContextConstraintsListNested<A> withNewSecurityContextConstraintsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecurityContextConstraintsListNested<A> withNewSecurityContextConstraintsListLike(io.dekorate.deps.openshift.api.model.SecurityContextConstraintsList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecurityContextConstraintsListNested<A> editSecurityContextConstraintsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecurityContextConstraintsListNested<A> editOrNewSecurityContextConstraintsList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SecurityContextConstraintsListNested<A> editOrNewSecurityContextConstraintsListLike(io.dekorate.deps.openshift.api.model.SecurityContextConstraintsList);

  public abstract io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectAccessReview getSelfSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectAccessReview buildSelfSubjectAccessReview();

  public abstract A withSelfSubjectAccessReview(io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectAccessReview);

  public abstract java.lang.Boolean hasSelfSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SelfSubjectAccessReviewNested<A> withNewSelfSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SelfSubjectAccessReviewNested<A> withNewSelfSubjectAccessReviewLike(io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectAccessReview);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SelfSubjectAccessReviewNested<A> editSelfSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SelfSubjectAccessReviewNested<A> editOrNewSelfSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SelfSubjectAccessReviewNested<A> editOrNewSelfSubjectAccessReviewLike(io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectAccessReview);

  public abstract io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectRulesReview getSelfSubjectRulesReview();

  public abstract io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectRulesReview buildSelfSubjectRulesReview();

  public abstract A withSelfSubjectRulesReview(io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectRulesReview);

  public abstract java.lang.Boolean hasSelfSubjectRulesReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SelfSubjectRulesReviewNested<A> withNewSelfSubjectRulesReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SelfSubjectRulesReviewNested<A> withNewSelfSubjectRulesReviewLike(io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectRulesReview);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SelfSubjectRulesReviewNested<A> editSelfSubjectRulesReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SelfSubjectRulesReviewNested<A> editOrNewSelfSubjectRulesReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SelfSubjectRulesReviewNested<A> editOrNewSelfSubjectRulesReviewLike(io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectRulesReview);

  public abstract io.dekorate.deps.kubernetes.api.model.ServiceAccount getServiceAccount();

  public abstract io.dekorate.deps.kubernetes.api.model.ServiceAccount buildServiceAccount();

  public abstract A withServiceAccount(io.dekorate.deps.kubernetes.api.model.ServiceAccount);

  public abstract java.lang.Boolean hasServiceAccount();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceAccountNested<A> withNewServiceAccount();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceAccountNested<A> withNewServiceAccountLike(io.dekorate.deps.kubernetes.api.model.ServiceAccount);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceAccountNested<A> editServiceAccount();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceAccountNested<A> editOrNewServiceAccount();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceAccountNested<A> editOrNewServiceAccountLike(io.dekorate.deps.kubernetes.api.model.ServiceAccount);

  public abstract io.dekorate.deps.kubernetes.api.model.ServiceAccountList getServiceAccountList();

  public abstract io.dekorate.deps.kubernetes.api.model.ServiceAccountList buildServiceAccountList();

  public abstract A withServiceAccountList(io.dekorate.deps.kubernetes.api.model.ServiceAccountList);

  public abstract java.lang.Boolean hasServiceAccountList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceAccountListNested<A> withNewServiceAccountList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceAccountListNested<A> withNewServiceAccountListLike(io.dekorate.deps.kubernetes.api.model.ServiceAccountList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceAccountListNested<A> editServiceAccountList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceAccountListNested<A> editOrNewServiceAccountList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceAccountListNested<A> editOrNewServiceAccountListLike(io.dekorate.deps.kubernetes.api.model.ServiceAccountList);

  public abstract io.dekorate.deps.kubernetes.api.model.ServiceList getServiceList();

  public abstract io.dekorate.deps.kubernetes.api.model.ServiceList buildServiceList();

  public abstract A withServiceList(io.dekorate.deps.kubernetes.api.model.ServiceList);

  public abstract java.lang.Boolean hasServiceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceListNested<A> withNewServiceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceListNested<A> withNewServiceListLike(io.dekorate.deps.kubernetes.api.model.ServiceList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceListNested<A> editServiceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceListNested<A> editOrNewServiceList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceListNested<A> editOrNewServiceListLike(io.dekorate.deps.kubernetes.api.model.ServiceList);

  public abstract io.dekorate.deps.kubernetes.api.model.admissionregistration.ServiceReference getServiceReference();

  public abstract io.dekorate.deps.kubernetes.api.model.admissionregistration.ServiceReference buildServiceReference();

  public abstract A withServiceReference(io.dekorate.deps.kubernetes.api.model.admissionregistration.ServiceReference);

  public abstract java.lang.Boolean hasServiceReference();

  public abstract A withNewServiceReference(java.lang.String, java.lang.String, java.lang.String, java.lang.Integer);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceReferenceNested<A> withNewServiceReference();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceReferenceNested<A> withNewServiceReferenceLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.ServiceReference);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceReferenceNested<A> editServiceReference();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceReferenceNested<A> editOrNewServiceReference();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ServiceReferenceNested<A> editOrNewServiceReferenceLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.ServiceReference);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSet getStatefulSet();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSet buildStatefulSet();

  public abstract A withStatefulSet(io.dekorate.deps.kubernetes.api.model.apps.StatefulSet);

  public abstract java.lang.Boolean hasStatefulSet();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatefulSetNested<A> withNewStatefulSet();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatefulSetNested<A> withNewStatefulSetLike(io.dekorate.deps.kubernetes.api.model.apps.StatefulSet);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatefulSetNested<A> editStatefulSet();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatefulSetNested<A> editOrNewStatefulSet();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatefulSetNested<A> editOrNewStatefulSetLike(io.dekorate.deps.kubernetes.api.model.apps.StatefulSet);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetList getStatefulSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetList buildStatefulSetList();

  public abstract A withStatefulSetList(io.dekorate.deps.kubernetes.api.model.apps.StatefulSetList);

  public abstract java.lang.Boolean hasStatefulSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatefulSetListNested<A> withNewStatefulSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatefulSetListNested<A> withNewStatefulSetListLike(io.dekorate.deps.kubernetes.api.model.apps.StatefulSetList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatefulSetListNested<A> editStatefulSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatefulSetListNested<A> editOrNewStatefulSetList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatefulSetListNested<A> editOrNewStatefulSetListLike(io.dekorate.deps.kubernetes.api.model.apps.StatefulSetList);

  public abstract io.dekorate.deps.kubernetes.api.model.Status getStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.Status buildStatus();

  public abstract A withStatus(io.dekorate.deps.kubernetes.api.model.Status);

  public abstract java.lang.Boolean hasStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatusNested<A> withNewStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatusNested<A> withNewStatusLike(io.dekorate.deps.kubernetes.api.model.Status);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatusNested<A> editStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatusNested<A> editOrNewStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StatusNested<A> editOrNewStatusLike(io.dekorate.deps.kubernetes.api.model.Status);

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClass getStorageClass();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClass buildStorageClass();

  public abstract A withStorageClass(io.dekorate.deps.kubernetes.api.model.storage.StorageClass);

  public abstract java.lang.Boolean hasStorageClass();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StorageClassNested<A> withNewStorageClass();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StorageClassNested<A> withNewStorageClassLike(io.dekorate.deps.kubernetes.api.model.storage.StorageClass);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StorageClassNested<A> editStorageClass();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StorageClassNested<A> editOrNewStorageClass();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StorageClassNested<A> editOrNewStorageClassLike(io.dekorate.deps.kubernetes.api.model.storage.StorageClass);

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClassList getStorageClassList();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.StorageClassList buildStorageClassList();

  public abstract A withStorageClassList(io.dekorate.deps.kubernetes.api.model.storage.StorageClassList);

  public abstract java.lang.Boolean hasStorageClassList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StorageClassListNested<A> withNewStorageClassList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StorageClassListNested<A> withNewStorageClassListLike(io.dekorate.deps.kubernetes.api.model.storage.StorageClassList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StorageClassListNested<A> editStorageClassList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StorageClassListNested<A> editOrNewStorageClassList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$StorageClassListNested<A> editOrNewStorageClassListLike(io.dekorate.deps.kubernetes.api.model.storage.StorageClassList);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReview getSubjectAccessReview();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReview buildSubjectAccessReview();

  public abstract A withSubjectAccessReview(io.dekorate.deps.openshift.api.model.SubjectAccessReview);

  public abstract java.lang.Boolean hasSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ModelSubjectAccessReviewNested<A> withNewModelSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ModelSubjectAccessReviewNested<A> withNewSubjectAccessReviewLike(io.dekorate.deps.openshift.api.model.SubjectAccessReview);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ModelSubjectAccessReviewNested<A> editModelSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ModelSubjectAccessReviewNested<A> editOrNewSubjectAccessReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ModelSubjectAccessReviewNested<A> editOrNewSubjectAccessReviewLike(io.dekorate.deps.openshift.api.model.SubjectAccessReview);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewResponse getSubjectAccessReviewResponse();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewResponse buildSubjectAccessReviewResponse();

  public abstract A withSubjectAccessReviewResponse(io.dekorate.deps.openshift.api.model.SubjectAccessReviewResponse);

  public abstract java.lang.Boolean hasSubjectAccessReviewResponse();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SubjectAccessReviewResponseNested<A> withNewSubjectAccessReviewResponse();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SubjectAccessReviewResponseNested<A> withNewSubjectAccessReviewResponseLike(io.dekorate.deps.openshift.api.model.SubjectAccessReviewResponse);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SubjectAccessReviewResponseNested<A> editSubjectAccessReviewResponse();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SubjectAccessReviewResponseNested<A> editOrNewSubjectAccessReviewResponse();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$SubjectAccessReviewResponseNested<A> editOrNewSubjectAccessReviewResponseLike(io.dekorate.deps.openshift.api.model.SubjectAccessReviewResponse);

  public abstract io.dekorate.deps.openshift.api.model.TagEvent getTagEvent();

  public abstract io.dekorate.deps.openshift.api.model.TagEvent buildTagEvent();

  public abstract A withTagEvent(io.dekorate.deps.openshift.api.model.TagEvent);

  public abstract java.lang.Boolean hasTagEvent();

  public abstract A withNewTagEvent(java.lang.String, java.lang.String, java.lang.Long, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TagEventNested<A> withNewTagEvent();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TagEventNested<A> withNewTagEventLike(io.dekorate.deps.openshift.api.model.TagEvent);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TagEventNested<A> editTagEvent();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TagEventNested<A> editOrNewTagEvent();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TagEventNested<A> editOrNewTagEventLike(io.dekorate.deps.openshift.api.model.TagEvent);

  public abstract io.dekorate.deps.openshift.api.model.Template getTemplate();

  public abstract io.dekorate.deps.openshift.api.model.Template buildTemplate();

  public abstract A withTemplate(io.dekorate.deps.openshift.api.model.Template);

  public abstract java.lang.Boolean hasTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TemplateNested<A> withNewTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TemplateNested<A> withNewTemplateLike(io.dekorate.deps.openshift.api.model.Template);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TemplateNested<A> editTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TemplateNested<A> editOrNewTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TemplateNested<A> editOrNewTemplateLike(io.dekorate.deps.openshift.api.model.Template);

  public abstract io.dekorate.deps.openshift.api.model.TemplateList getTemplateList();

  public abstract io.dekorate.deps.openshift.api.model.TemplateList buildTemplateList();

  public abstract A withTemplateList(io.dekorate.deps.openshift.api.model.TemplateList);

  public abstract java.lang.Boolean hasTemplateList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TemplateListNested<A> withNewTemplateList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TemplateListNested<A> withNewTemplateListLike(io.dekorate.deps.openshift.api.model.TemplateList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TemplateListNested<A> editTemplateList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TemplateListNested<A> editOrNewTemplateList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TemplateListNested<A> editOrNewTemplateListLike(io.dekorate.deps.openshift.api.model.TemplateList);

  public abstract java.lang.String getTime();

  public abstract A withTime(java.lang.String);

  public abstract java.lang.Boolean hasTime();

  public abstract A withNewTime(java.lang.String);

  public abstract A withNewTime(java.lang.StringBuilder);

  public abstract A withNewTime(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.authentication.TokenReview getTokenReview();

  public abstract io.dekorate.deps.kubernetes.api.model.authentication.TokenReview buildTokenReview();

  public abstract A withTokenReview(io.dekorate.deps.kubernetes.api.model.authentication.TokenReview);

  public abstract java.lang.Boolean hasTokenReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TokenReviewNested<A> withNewTokenReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TokenReviewNested<A> withNewTokenReviewLike(io.dekorate.deps.kubernetes.api.model.authentication.TokenReview);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TokenReviewNested<A> editTokenReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TokenReviewNested<A> editOrNewTokenReview();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TokenReviewNested<A> editOrNewTokenReviewLike(io.dekorate.deps.kubernetes.api.model.authentication.TokenReview);

  public abstract io.dekorate.deps.kubernetes.api.model.Toleration getToleration();

  public abstract io.dekorate.deps.kubernetes.api.model.Toleration buildToleration();

  public abstract A withToleration(io.dekorate.deps.kubernetes.api.model.Toleration);

  public abstract java.lang.Boolean hasToleration();

  public abstract A withNewToleration(java.lang.String, java.lang.String, java.lang.String, java.lang.Long, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TolerationNested<A> withNewToleration();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TolerationNested<A> withNewTolerationLike(io.dekorate.deps.kubernetes.api.model.Toleration);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TolerationNested<A> editToleration();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TolerationNested<A> editOrNewToleration();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TolerationNested<A> editOrNewTolerationLike(io.dekorate.deps.kubernetes.api.model.Toleration);

  public abstract io.dekorate.deps.kubernetes.api.model.TypeMeta getTypeMeta();

  public abstract io.dekorate.deps.kubernetes.api.model.TypeMeta buildTypeMeta();

  public abstract A withTypeMeta(io.dekorate.deps.kubernetes.api.model.TypeMeta);

  public abstract java.lang.Boolean hasTypeMeta();

  public abstract A withNewTypeMeta(java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TypeMetaNested<A> withNewTypeMeta();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TypeMetaNested<A> withNewTypeMetaLike(io.dekorate.deps.kubernetes.api.model.TypeMeta);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TypeMetaNested<A> editTypeMeta();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TypeMetaNested<A> editOrNewTypeMeta();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$TypeMetaNested<A> editOrNewTypeMetaLike(io.dekorate.deps.kubernetes.api.model.TypeMeta);

  public abstract io.dekorate.deps.kubernetes.api.model.UpdateOptions getUpdateOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.UpdateOptions buildUpdateOptions();

  public abstract A withUpdateOptions(io.dekorate.deps.kubernetes.api.model.UpdateOptions);

  public abstract java.lang.Boolean hasUpdateOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UpdateOptionsNested<A> withNewUpdateOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UpdateOptionsNested<A> withNewUpdateOptionsLike(io.dekorate.deps.kubernetes.api.model.UpdateOptions);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UpdateOptionsNested<A> editUpdateOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UpdateOptionsNested<A> editOrNewUpdateOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UpdateOptionsNested<A> editOrNewUpdateOptionsLike(io.dekorate.deps.kubernetes.api.model.UpdateOptions);

  public abstract io.dekorate.deps.openshift.api.model.User getUser();

  public abstract io.dekorate.deps.openshift.api.model.User buildUser();

  public abstract A withUser(io.dekorate.deps.openshift.api.model.User);

  public abstract java.lang.Boolean hasUser();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UserNested<A> withNewUser();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UserNested<A> withNewUserLike(io.dekorate.deps.openshift.api.model.User);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UserNested<A> editUser();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UserNested<A> editOrNewUser();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UserNested<A> editOrNewUserLike(io.dekorate.deps.openshift.api.model.User);

  public abstract io.dekorate.deps.openshift.api.model.UserList getUserList();

  public abstract io.dekorate.deps.openshift.api.model.UserList buildUserList();

  public abstract A withUserList(io.dekorate.deps.openshift.api.model.UserList);

  public abstract java.lang.Boolean hasUserList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UserListNested<A> withNewUserList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UserListNested<A> withNewUserListLike(io.dekorate.deps.openshift.api.model.UserList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UserListNested<A> editUserList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UserListNested<A> editOrNewUserList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$UserListNested<A> editOrNewUserListLike(io.dekorate.deps.openshift.api.model.UserList);

  public abstract io.dekorate.deps.kubernetes.api.model.admissionregistration.ValidatingWebhookConfiguration getValidatingWebhookConfiguration();

  public abstract io.dekorate.deps.kubernetes.api.model.admissionregistration.ValidatingWebhookConfiguration buildValidatingWebhookConfiguration();

  public abstract A withValidatingWebhookConfiguration(io.dekorate.deps.kubernetes.api.model.admissionregistration.ValidatingWebhookConfiguration);

  public abstract java.lang.Boolean hasValidatingWebhookConfiguration();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ValidatingWebhookConfigurationNested<A> withNewValidatingWebhookConfiguration();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ValidatingWebhookConfigurationNested<A> withNewValidatingWebhookConfigurationLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.ValidatingWebhookConfiguration);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ValidatingWebhookConfigurationNested<A> editValidatingWebhookConfiguration();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ValidatingWebhookConfigurationNested<A> editOrNewValidatingWebhookConfiguration();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ValidatingWebhookConfigurationNested<A> editOrNewValidatingWebhookConfigurationLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.ValidatingWebhookConfiguration);

  public abstract io.dekorate.deps.kubernetes.api.model.admissionregistration.ValidatingWebhookConfigurationList getValidatingWebhookConfigurationList();

  public abstract io.dekorate.deps.kubernetes.api.model.admissionregistration.ValidatingWebhookConfigurationList buildValidatingWebhookConfigurationList();

  public abstract A withValidatingWebhookConfigurationList(io.dekorate.deps.kubernetes.api.model.admissionregistration.ValidatingWebhookConfigurationList);

  public abstract java.lang.Boolean hasValidatingWebhookConfigurationList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ValidatingWebhookConfigurationListNested<A> withNewValidatingWebhookConfigurationList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ValidatingWebhookConfigurationListNested<A> withNewValidatingWebhookConfigurationListLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.ValidatingWebhookConfigurationList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ValidatingWebhookConfigurationListNested<A> editValidatingWebhookConfigurationList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ValidatingWebhookConfigurationListNested<A> editOrNewValidatingWebhookConfigurationList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$ValidatingWebhookConfigurationListNested<A> editOrNewValidatingWebhookConfigurationListLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.ValidatingWebhookConfigurationList);

  public abstract io.dekorate.deps.kubernetes.api.model.storage.VolumeAttachment getVolumeAttachment();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.VolumeAttachment buildVolumeAttachment();

  public abstract A withVolumeAttachment(io.dekorate.deps.kubernetes.api.model.storage.VolumeAttachment);

  public abstract java.lang.Boolean hasVolumeAttachment();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$VolumeAttachmentNested<A> withNewVolumeAttachment();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$VolumeAttachmentNested<A> withNewVolumeAttachmentLike(io.dekorate.deps.kubernetes.api.model.storage.VolumeAttachment);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$VolumeAttachmentNested<A> editVolumeAttachment();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$VolumeAttachmentNested<A> editOrNewVolumeAttachment();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$VolumeAttachmentNested<A> editOrNewVolumeAttachmentLike(io.dekorate.deps.kubernetes.api.model.storage.VolumeAttachment);

  public abstract io.dekorate.deps.kubernetes.api.model.storage.VolumeAttachmentList getVolumeAttachmentList();

  public abstract io.dekorate.deps.kubernetes.api.model.storage.VolumeAttachmentList buildVolumeAttachmentList();

  public abstract A withVolumeAttachmentList(io.dekorate.deps.kubernetes.api.model.storage.VolumeAttachmentList);

  public abstract java.lang.Boolean hasVolumeAttachmentList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$VolumeAttachmentListNested<A> withNewVolumeAttachmentList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$VolumeAttachmentListNested<A> withNewVolumeAttachmentListLike(io.dekorate.deps.kubernetes.api.model.storage.VolumeAttachmentList);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$VolumeAttachmentListNested<A> editVolumeAttachmentList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$VolumeAttachmentListNested<A> editOrNewVolumeAttachmentList();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$VolumeAttachmentListNested<A> editOrNewVolumeAttachmentListLike(io.dekorate.deps.kubernetes.api.model.storage.VolumeAttachmentList);

  public abstract io.dekorate.deps.kubernetes.api.model.WatchEvent getWatchEvent();

  public abstract io.dekorate.deps.kubernetes.api.model.WatchEvent buildWatchEvent();

  public abstract A withWatchEvent(io.dekorate.deps.kubernetes.api.model.WatchEvent);

  public abstract java.lang.Boolean hasWatchEvent();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$WatchEventNested<A> withNewWatchEvent();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$WatchEventNested<A> withNewWatchEventLike(io.dekorate.deps.kubernetes.api.model.WatchEvent);

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$WatchEventNested<A> editWatchEvent();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$WatchEventNested<A> editOrNewWatchEvent();

  public abstract io.dekorate.deps.kubernetes.api.model.KubeSchemaFluent$WatchEventNested<A> editOrNewWatchEventLike(io.dekorate.deps.kubernetes.api.model.WatchEvent);
}
