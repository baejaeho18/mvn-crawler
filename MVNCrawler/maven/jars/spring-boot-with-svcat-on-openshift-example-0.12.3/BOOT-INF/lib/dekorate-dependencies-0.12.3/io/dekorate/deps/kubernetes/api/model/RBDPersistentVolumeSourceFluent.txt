Compiled from "RBDPersistentVolumeSourceFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.RBDPersistentVolumeSourceFluent<A extends io.dekorate.deps.kubernetes.api.model.RBDPersistentVolumeSourceFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getFsType();

  public abstract A withFsType(java.lang.String);

  public abstract java.lang.Boolean hasFsType();

  public abstract A withNewFsType(java.lang.String);

  public abstract A withNewFsType(java.lang.StringBuilder);

  public abstract A withNewFsType(java.lang.StringBuffer);

  public abstract java.lang.String getImage();

  public abstract A withImage(java.lang.String);

  public abstract java.lang.Boolean hasImage();

  public abstract A withNewImage(java.lang.String);

  public abstract A withNewImage(java.lang.StringBuilder);

  public abstract A withNewImage(java.lang.StringBuffer);

  public abstract java.lang.String getKeyring();

  public abstract A withKeyring(java.lang.String);

  public abstract java.lang.Boolean hasKeyring();

  public abstract A withNewKeyring(java.lang.String);

  public abstract A withNewKeyring(java.lang.StringBuilder);

  public abstract A withNewKeyring(java.lang.StringBuffer);

  public abstract A addToMonitors(int, java.lang.String);

  public abstract A setToMonitors(int, java.lang.String);

  public abstract A addToMonitors(java.lang.String...);

  public abstract A addAllToMonitors(java.util.Collection<java.lang.String>);

  public abstract A removeFromMonitors(java.lang.String...);

  public abstract A removeAllFromMonitors(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getMonitors();

  public abstract java.lang.String getMonitor(int);

  public abstract java.lang.String getFirstMonitor();

  public abstract java.lang.String getLastMonitor();

  public abstract java.lang.String getMatchingMonitor(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingMonitor(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withMonitors(java.util.List<java.lang.String>);

  public abstract A withMonitors(java.lang.String...);

  public abstract java.lang.Boolean hasMonitors();

  public abstract A addNewMonitor(java.lang.String);

  public abstract A addNewMonitor(java.lang.StringBuilder);

  public abstract A addNewMonitor(java.lang.StringBuffer);

  public abstract java.lang.String getPool();

  public abstract A withPool(java.lang.String);

  public abstract java.lang.Boolean hasPool();

  public abstract A withNewPool(java.lang.String);

  public abstract A withNewPool(java.lang.StringBuilder);

  public abstract A withNewPool(java.lang.StringBuffer);

  public abstract java.lang.Boolean isReadOnly();

  public abstract A withReadOnly(java.lang.Boolean);

  public abstract java.lang.Boolean hasReadOnly();

  public abstract A withNewReadOnly(java.lang.String);

  public abstract A withNewReadOnly(boolean);

  public abstract io.dekorate.deps.kubernetes.api.model.SecretReference getSecretRef();

  public abstract io.dekorate.deps.kubernetes.api.model.SecretReference buildSecretRef();

  public abstract A withSecretRef(io.dekorate.deps.kubernetes.api.model.SecretReference);

  public abstract java.lang.Boolean hasSecretRef();

  public abstract A withNewSecretRef(java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.RBDPersistentVolumeSourceFluent$SecretRefNested<A> withNewSecretRef();

  public abstract io.dekorate.deps.kubernetes.api.model.RBDPersistentVolumeSourceFluent$SecretRefNested<A> withNewSecretRefLike(io.dekorate.deps.kubernetes.api.model.SecretReference);

  public abstract io.dekorate.deps.kubernetes.api.model.RBDPersistentVolumeSourceFluent$SecretRefNested<A> editSecretRef();

  public abstract io.dekorate.deps.kubernetes.api.model.RBDPersistentVolumeSourceFluent$SecretRefNested<A> editOrNewSecretRef();

  public abstract io.dekorate.deps.kubernetes.api.model.RBDPersistentVolumeSourceFluent$SecretRefNested<A> editOrNewSecretRefLike(io.dekorate.deps.kubernetes.api.model.SecretReference);

  public abstract java.lang.String getUser();

  public abstract A withUser(java.lang.String);

  public abstract java.lang.Boolean hasUser();

  public abstract A withNewUser(java.lang.String);

  public abstract A withNewUser(java.lang.StringBuilder);

  public abstract A withNewUser(java.lang.StringBuffer);
}
