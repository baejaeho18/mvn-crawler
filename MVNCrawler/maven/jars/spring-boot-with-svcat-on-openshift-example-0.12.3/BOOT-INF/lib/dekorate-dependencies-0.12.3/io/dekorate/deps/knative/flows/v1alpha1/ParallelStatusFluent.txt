Compiled from "ParallelStatusFluent.java"
public interface io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent<A extends io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.knative.duck.v1.Addressable getAddress();

  public abstract io.dekorate.deps.knative.duck.v1.Addressable buildAddress();

  public abstract A withAddress(io.dekorate.deps.knative.duck.v1.Addressable);

  public abstract java.lang.Boolean hasAddress();

  public abstract A withNewAddress(java.lang.String);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$AddressNested<A> withNewAddress();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$AddressNested<A> withNewAddressLike(io.dekorate.deps.knative.duck.v1.Addressable);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$AddressNested<A> editAddress();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$AddressNested<A> editOrNewAddress();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$AddressNested<A> editOrNewAddressLike(io.dekorate.deps.knative.duck.v1.Addressable);

  public abstract A addToBranchStatuses(int, io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus);

  public abstract A setToBranchStatuses(int, io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus);

  public abstract A addToBranchStatuses(io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus...);

  public abstract A addAllToBranchStatuses(java.util.Collection<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus>);

  public abstract A removeFromBranchStatuses(io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus...);

  public abstract A removeAllFromBranchStatuses(java.util.Collection<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus>);

  public abstract A removeMatchingFromBranchStatuses(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatusBuilder>);

  public abstract java.util.List<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus> getBranchStatuses();

  public abstract java.util.List<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus> buildBranchStatuses();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus buildBranchStatus(int);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus buildFirstBranchStatus();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus buildLastBranchStatus();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus buildMatchingBranchStatus(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatusBuilder>);

  public abstract java.lang.Boolean hasMatchingBranchStatus(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatusBuilder>);

  public abstract A withBranchStatuses(java.util.List<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus>);

  public abstract A withBranchStatuses(io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus...);

  public abstract java.lang.Boolean hasBranchStatuses();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$BranchStatusesNested<A> addNewBranchStatus();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$BranchStatusesNested<A> addNewBranchStatusLike(io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$BranchStatusesNested<A> setNewBranchStatusLike(int, io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$BranchStatusesNested<A> editBranchStatus(int);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$BranchStatusesNested<A> editFirstBranchStatus();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$BranchStatusesNested<A> editLastBranchStatus();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$BranchStatusesNested<A> editMatchingBranchStatus(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatusBuilder>);

  public abstract A addToConditions(int, io.dekorate.deps.knative.v1.Condition);

  public abstract A setToConditions(int, io.dekorate.deps.knative.v1.Condition);

  public abstract A addToConditions(io.dekorate.deps.knative.v1.Condition...);

  public abstract A addAllToConditions(java.util.Collection<io.dekorate.deps.knative.v1.Condition>);

  public abstract A removeFromConditions(io.dekorate.deps.knative.v1.Condition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.dekorate.deps.knative.v1.Condition>);

  public abstract A removeMatchingFromConditions(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.v1.ConditionBuilder>);

  public abstract java.util.List<io.dekorate.deps.knative.v1.Condition> getConditions();

  public abstract java.util.List<io.dekorate.deps.knative.v1.Condition> buildConditions();

  public abstract io.dekorate.deps.knative.v1.Condition buildCondition(int);

  public abstract io.dekorate.deps.knative.v1.Condition buildFirstCondition();

  public abstract io.dekorate.deps.knative.v1.Condition buildLastCondition();

  public abstract io.dekorate.deps.knative.v1.Condition buildMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.v1.ConditionBuilder>);

  public abstract java.lang.Boolean hasMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.v1.ConditionBuilder>);

  public abstract A withConditions(java.util.List<io.dekorate.deps.knative.v1.Condition>);

  public abstract A withConditions(io.dekorate.deps.knative.v1.Condition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$ConditionsNested<A> addNewCondition();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$ConditionsNested<A> addNewConditionLike(io.dekorate.deps.knative.v1.Condition);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$ConditionsNested<A> setNewConditionLike(int, io.dekorate.deps.knative.v1.Condition);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$ConditionsNested<A> editCondition(int);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$ConditionsNested<A> editFirstCondition();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$ConditionsNested<A> editLastCondition();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$ConditionsNested<A> editMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.v1.ConditionBuilder>);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelChannelStatus getIngressChannelStatus();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelChannelStatus buildIngressChannelStatus();

  public abstract A withIngressChannelStatus(io.dekorate.deps.knative.flows.v1alpha1.ParallelChannelStatus);

  public abstract java.lang.Boolean hasIngressChannelStatus();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$IngressChannelStatusNested<A> withNewIngressChannelStatus();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$IngressChannelStatusNested<A> withNewIngressChannelStatusLike(io.dekorate.deps.knative.flows.v1alpha1.ParallelChannelStatus);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$IngressChannelStatusNested<A> editIngressChannelStatus();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$IngressChannelStatusNested<A> editOrNewIngressChannelStatus();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelStatusFluent$IngressChannelStatusNested<A> editOrNewIngressChannelStatusLike(io.dekorate.deps.knative.flows.v1alpha1.ParallelChannelStatus);

  public abstract java.lang.Long getObservedGeneration();

  public abstract A withObservedGeneration(java.lang.Long);

  public abstract java.lang.Boolean hasObservedGeneration();
}
