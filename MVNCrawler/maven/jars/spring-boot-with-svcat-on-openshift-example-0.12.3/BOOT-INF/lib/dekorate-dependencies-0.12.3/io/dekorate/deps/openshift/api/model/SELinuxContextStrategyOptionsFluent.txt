Compiled from "SELinuxContextStrategyOptionsFluent.java"
public interface io.dekorate.deps.openshift.api.model.SELinuxContextStrategyOptionsFluent<A extends io.dekorate.deps.openshift.api.model.SELinuxContextStrategyOptionsFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.kubernetes.api.model.SELinuxOptions getSeLinuxOptions();

  public abstract io.dekorate.deps.kubernetes.api.model.SELinuxOptions buildSeLinuxOptions();

  public abstract A withSeLinuxOptions(io.dekorate.deps.kubernetes.api.model.SELinuxOptions);

  public abstract java.lang.Boolean hasSeLinuxOptions();

  public abstract A withNewSeLinuxOptions(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.openshift.api.model.SELinuxContextStrategyOptionsFluent$SeLinuxOptionsNested<A> withNewSeLinuxOptions();

  public abstract io.dekorate.deps.openshift.api.model.SELinuxContextStrategyOptionsFluent$SeLinuxOptionsNested<A> withNewSeLinuxOptionsLike(io.dekorate.deps.kubernetes.api.model.SELinuxOptions);

  public abstract io.dekorate.deps.openshift.api.model.SELinuxContextStrategyOptionsFluent$SeLinuxOptionsNested<A> editSeLinuxOptions();

  public abstract io.dekorate.deps.openshift.api.model.SELinuxContextStrategyOptionsFluent$SeLinuxOptionsNested<A> editOrNewSeLinuxOptions();

  public abstract io.dekorate.deps.openshift.api.model.SELinuxContextStrategyOptionsFluent$SeLinuxOptionsNested<A> editOrNewSeLinuxOptionsLike(io.dekorate.deps.kubernetes.api.model.SELinuxOptions);

  public abstract java.lang.String getType();

  public abstract A withType(java.lang.String);

  public abstract java.lang.Boolean hasType();

  public abstract A withNewType(java.lang.String);

  public abstract A withNewType(java.lang.StringBuilder);

  public abstract A withNewType(java.lang.StringBuffer);
}
