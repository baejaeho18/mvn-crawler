Compiled from "RepositoryImportStatusFluent.java"
public interface io.dekorate.deps.openshift.api.model.RepositoryImportStatusFluent<A extends io.dekorate.deps.openshift.api.model.RepositoryImportStatusFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToAdditionalTags(int, java.lang.String);

  public abstract A setToAdditionalTags(int, java.lang.String);

  public abstract A addToAdditionalTags(java.lang.String...);

  public abstract A addAllToAdditionalTags(java.util.Collection<java.lang.String>);

  public abstract A removeFromAdditionalTags(java.lang.String...);

  public abstract A removeAllFromAdditionalTags(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getAdditionalTags();

  public abstract java.lang.String getAdditionalTag(int);

  public abstract java.lang.String getFirstAdditionalTag();

  public abstract java.lang.String getLastAdditionalTag();

  public abstract java.lang.String getMatchingAdditionalTag(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingAdditionalTag(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withAdditionalTags(java.util.List<java.lang.String>);

  public abstract A withAdditionalTags(java.lang.String...);

  public abstract java.lang.Boolean hasAdditionalTags();

  public abstract A addNewAdditionalTag(java.lang.String);

  public abstract A addNewAdditionalTag(java.lang.StringBuilder);

  public abstract A addNewAdditionalTag(java.lang.StringBuffer);

  public abstract A addToImages(int, io.dekorate.deps.openshift.api.model.ImageImportStatus);

  public abstract A setToImages(int, io.dekorate.deps.openshift.api.model.ImageImportStatus);

  public abstract A addToImages(io.dekorate.deps.openshift.api.model.ImageImportStatus...);

  public abstract A addAllToImages(java.util.Collection<io.dekorate.deps.openshift.api.model.ImageImportStatus>);

  public abstract A removeFromImages(io.dekorate.deps.openshift.api.model.ImageImportStatus...);

  public abstract A removeAllFromImages(java.util.Collection<io.dekorate.deps.openshift.api.model.ImageImportStatus>);

  public abstract A removeMatchingFromImages(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageImportStatusBuilder>);

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ImageImportStatus> getImages();

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ImageImportStatus> buildImages();

  public abstract io.dekorate.deps.openshift.api.model.ImageImportStatus buildImage(int);

  public abstract io.dekorate.deps.openshift.api.model.ImageImportStatus buildFirstImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageImportStatus buildLastImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageImportStatus buildMatchingImage(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageImportStatusBuilder>);

  public abstract java.lang.Boolean hasMatchingImage(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageImportStatusBuilder>);

  public abstract A withImages(java.util.List<io.dekorate.deps.openshift.api.model.ImageImportStatus>);

  public abstract A withImages(io.dekorate.deps.openshift.api.model.ImageImportStatus...);

  public abstract java.lang.Boolean hasImages();

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportStatusFluent$ImagesNested<A> addNewImage();

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportStatusFluent$ImagesNested<A> addNewImageLike(io.dekorate.deps.openshift.api.model.ImageImportStatus);

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportStatusFluent$ImagesNested<A> setNewImageLike(int, io.dekorate.deps.openshift.api.model.ImageImportStatus);

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportStatusFluent$ImagesNested<A> editImage(int);

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportStatusFluent$ImagesNested<A> editFirstImage();

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportStatusFluent$ImagesNested<A> editLastImage();

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportStatusFluent$ImagesNested<A> editMatchingImage(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageImportStatusBuilder>);

  public abstract io.dekorate.deps.kubernetes.api.model.Status getStatus();

  public abstract io.dekorate.deps.kubernetes.api.model.Status buildStatus();

  public abstract A withStatus(io.dekorate.deps.kubernetes.api.model.Status);

  public abstract java.lang.Boolean hasStatus();

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportStatusFluent$StatusNested<A> withNewStatus();

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportStatusFluent$StatusNested<A> withNewStatusLike(io.dekorate.deps.kubernetes.api.model.Status);

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportStatusFluent$StatusNested<A> editStatus();

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportStatusFluent$StatusNested<A> editOrNewStatus();

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportStatusFluent$StatusNested<A> editOrNewStatusLike(io.dekorate.deps.kubernetes.api.model.Status);
}
