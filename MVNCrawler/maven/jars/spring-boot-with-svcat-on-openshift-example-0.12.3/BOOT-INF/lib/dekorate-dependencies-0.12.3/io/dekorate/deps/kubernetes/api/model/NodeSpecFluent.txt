Compiled from "NodeSpecFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.NodeSpecFluent<A extends io.dekorate.deps.kubernetes.api.model.NodeSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.kubernetes.api.model.NodeConfigSource getConfigSource();

  public abstract io.dekorate.deps.kubernetes.api.model.NodeConfigSource buildConfigSource();

  public abstract A withConfigSource(io.dekorate.deps.kubernetes.api.model.NodeConfigSource);

  public abstract java.lang.Boolean hasConfigSource();

  public abstract io.dekorate.deps.kubernetes.api.model.NodeSpecFluent$ConfigSourceNested<A> withNewConfigSource();

  public abstract io.dekorate.deps.kubernetes.api.model.NodeSpecFluent$ConfigSourceNested<A> withNewConfigSourceLike(io.dekorate.deps.kubernetes.api.model.NodeConfigSource);

  public abstract io.dekorate.deps.kubernetes.api.model.NodeSpecFluent$ConfigSourceNested<A> editConfigSource();

  public abstract io.dekorate.deps.kubernetes.api.model.NodeSpecFluent$ConfigSourceNested<A> editOrNewConfigSource();

  public abstract io.dekorate.deps.kubernetes.api.model.NodeSpecFluent$ConfigSourceNested<A> editOrNewConfigSourceLike(io.dekorate.deps.kubernetes.api.model.NodeConfigSource);

  public abstract java.lang.String getExternalID();

  public abstract A withExternalID(java.lang.String);

  public abstract java.lang.Boolean hasExternalID();

  public abstract A withNewExternalID(java.lang.String);

  public abstract A withNewExternalID(java.lang.StringBuilder);

  public abstract A withNewExternalID(java.lang.StringBuffer);

  public abstract java.lang.String getPodCIDR();

  public abstract A withPodCIDR(java.lang.String);

  public abstract java.lang.Boolean hasPodCIDR();

  public abstract A withNewPodCIDR(java.lang.String);

  public abstract A withNewPodCIDR(java.lang.StringBuilder);

  public abstract A withNewPodCIDR(java.lang.StringBuffer);

  public abstract A addToPodCIDRs(int, java.lang.String);

  public abstract A setToPodCIDRs(int, java.lang.String);

  public abstract A addToPodCIDRs(java.lang.String...);

  public abstract A addAllToPodCIDRs(java.util.Collection<java.lang.String>);

  public abstract A removeFromPodCIDRs(java.lang.String...);

  public abstract A removeAllFromPodCIDRs(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getPodCIDRs();

  public abstract java.lang.String getPodCIDR(int);

  public abstract java.lang.String getFirstPodCIDR();

  public abstract java.lang.String getLastPodCIDR();

  public abstract java.lang.String getMatchingPodCIDR(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingPodCIDR(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withPodCIDRs(java.util.List<java.lang.String>);

  public abstract A withPodCIDRs(java.lang.String...);

  public abstract java.lang.Boolean hasPodCIDRs();

  public abstract A addNewPodCIDR(java.lang.String);

  public abstract A addNewPodCIDR(java.lang.StringBuilder);

  public abstract A addNewPodCIDR(java.lang.StringBuffer);

  public abstract java.lang.String getProviderID();

  public abstract A withProviderID(java.lang.String);

  public abstract java.lang.Boolean hasProviderID();

  public abstract A withNewProviderID(java.lang.String);

  public abstract A withNewProviderID(java.lang.StringBuilder);

  public abstract A withNewProviderID(java.lang.StringBuffer);

  public abstract A addToTaints(int, io.dekorate.deps.kubernetes.api.model.Taint);

  public abstract A setToTaints(int, io.dekorate.deps.kubernetes.api.model.Taint);

  public abstract A addToTaints(io.dekorate.deps.kubernetes.api.model.Taint...);

  public abstract A addAllToTaints(java.util.Collection<io.dekorate.deps.kubernetes.api.model.Taint>);

  public abstract A removeFromTaints(io.dekorate.deps.kubernetes.api.model.Taint...);

  public abstract A removeAllFromTaints(java.util.Collection<io.dekorate.deps.kubernetes.api.model.Taint>);

  public abstract A removeMatchingFromTaints(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.TaintBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.Taint> getTaints();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.Taint> buildTaints();

  public abstract io.dekorate.deps.kubernetes.api.model.Taint buildTaint(int);

  public abstract io.dekorate.deps.kubernetes.api.model.Taint buildFirstTaint();

  public abstract io.dekorate.deps.kubernetes.api.model.Taint buildLastTaint();

  public abstract io.dekorate.deps.kubernetes.api.model.Taint buildMatchingTaint(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.TaintBuilder>);

  public abstract java.lang.Boolean hasMatchingTaint(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.TaintBuilder>);

  public abstract A withTaints(java.util.List<io.dekorate.deps.kubernetes.api.model.Taint>);

  public abstract A withTaints(io.dekorate.deps.kubernetes.api.model.Taint...);

  public abstract java.lang.Boolean hasTaints();

  public abstract A addNewTaint(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.NodeSpecFluent$TaintsNested<A> addNewTaint();

  public abstract io.dekorate.deps.kubernetes.api.model.NodeSpecFluent$TaintsNested<A> addNewTaintLike(io.dekorate.deps.kubernetes.api.model.Taint);

  public abstract io.dekorate.deps.kubernetes.api.model.NodeSpecFluent$TaintsNested<A> setNewTaintLike(int, io.dekorate.deps.kubernetes.api.model.Taint);

  public abstract io.dekorate.deps.kubernetes.api.model.NodeSpecFluent$TaintsNested<A> editTaint(int);

  public abstract io.dekorate.deps.kubernetes.api.model.NodeSpecFluent$TaintsNested<A> editFirstTaint();

  public abstract io.dekorate.deps.kubernetes.api.model.NodeSpecFluent$TaintsNested<A> editLastTaint();

  public abstract io.dekorate.deps.kubernetes.api.model.NodeSpecFluent$TaintsNested<A> editMatchingTaint(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.TaintBuilder>);

  public abstract java.lang.Boolean isUnschedulable();

  public abstract A withUnschedulable(java.lang.Boolean);

  public abstract java.lang.Boolean hasUnschedulable();

  public abstract A withNewUnschedulable(java.lang.String);

  public abstract A withNewUnschedulable(boolean);
}
