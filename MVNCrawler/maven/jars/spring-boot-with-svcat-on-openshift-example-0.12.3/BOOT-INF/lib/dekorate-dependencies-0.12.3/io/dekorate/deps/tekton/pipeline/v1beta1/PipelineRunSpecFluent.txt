Compiled from "PipelineRunSpecFluent.java"
public interface io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent<A extends io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToParams(int, io.dekorate.deps.tekton.pipeline.v1beta1.Param);

  public abstract A setToParams(int, io.dekorate.deps.tekton.pipeline.v1beta1.Param);

  public abstract A addToParams(io.dekorate.deps.tekton.pipeline.v1beta1.Param...);

  public abstract A addAllToParams(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.Param>);

  public abstract A removeFromParams(io.dekorate.deps.tekton.pipeline.v1beta1.Param...);

  public abstract A removeAllFromParams(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.Param>);

  public abstract A removeMatchingFromParams(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Param> getParams();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Param> buildParams();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Param buildParam(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Param buildFirstParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Param buildLastParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.Param buildMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamBuilder>);

  public abstract java.lang.Boolean hasMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamBuilder>);

  public abstract A withParams(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.Param>);

  public abstract A withParams(io.dekorate.deps.tekton.pipeline.v1beta1.Param...);

  public abstract java.lang.Boolean hasParams();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ParamsNested<A> addNewParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ParamsNested<A> addNewParamLike(io.dekorate.deps.tekton.pipeline.v1beta1.Param);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ParamsNested<A> setNewParamLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.Param);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ParamsNested<A> editParam(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ParamsNested<A> editFirstParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ParamsNested<A> editLastParam();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ParamsNested<A> editMatchingParam(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.ParamBuilder>);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRef getPipelineRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRef buildPipelineRef();

  public abstract A withPipelineRef(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRef);

  public abstract java.lang.Boolean hasPipelineRef();

  public abstract A withNewPipelineRef(java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PipelineRefNested<A> withNewPipelineRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PipelineRefNested<A> withNewPipelineRefLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRef);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PipelineRefNested<A> editPipelineRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PipelineRefNested<A> editOrNewPipelineRef();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PipelineRefNested<A> editOrNewPipelineRefLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRef);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineSpec getPipelineSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineSpec buildPipelineSpec();

  public abstract A withPipelineSpec(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineSpec);

  public abstract java.lang.Boolean hasPipelineSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PipelineSpecNested<A> withNewPipelineSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PipelineSpecNested<A> withNewPipelineSpecLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineSpec);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PipelineSpecNested<A> editPipelineSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PipelineSpecNested<A> editOrNewPipelineSpec();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PipelineSpecNested<A> editOrNewPipelineSpecLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineSpec);

  public abstract io.dekorate.deps.tekton.pipeline.pod.Template getPodTemplate();

  public abstract io.dekorate.deps.tekton.pipeline.pod.Template buildPodTemplate();

  public abstract A withPodTemplate(io.dekorate.deps.tekton.pipeline.pod.Template);

  public abstract java.lang.Boolean hasPodTemplate();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PodTemplateNested<A> withNewPodTemplate();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PodTemplateNested<A> withNewPodTemplateLike(io.dekorate.deps.tekton.pipeline.pod.Template);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PodTemplateNested<A> editPodTemplate();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PodTemplateNested<A> editOrNewPodTemplate();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$PodTemplateNested<A> editOrNewPodTemplateLike(io.dekorate.deps.tekton.pipeline.pod.Template);

  public abstract A addToResources(int, io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding);

  public abstract A setToResources(int, io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding);

  public abstract A addToResources(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding...);

  public abstract A addAllToResources(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding>);

  public abstract A removeFromResources(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding...);

  public abstract A removeAllFromResources(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding>);

  public abstract A removeMatchingFromResources(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBindingBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding> getResources();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding> buildResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding buildResource(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding buildFirstResource();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding buildLastResource();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding buildMatchingResource(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBindingBuilder>);

  public abstract java.lang.Boolean hasMatchingResource(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBindingBuilder>);

  public abstract A withResources(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding>);

  public abstract A withResources(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding...);

  public abstract java.lang.Boolean hasResources();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ResourcesNested<A> addNewResource();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ResourcesNested<A> addNewResourceLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ResourcesNested<A> setNewResourceLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBinding);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ResourcesNested<A> editResource(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ResourcesNested<A> editFirstResource();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ResourcesNested<A> editLastResource();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ResourcesNested<A> editMatchingResource(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineResourceBindingBuilder>);

  public abstract java.lang.String getServiceAccountName();

  public abstract A withServiceAccountName(java.lang.String);

  public abstract java.lang.Boolean hasServiceAccountName();

  public abstract A withNewServiceAccountName(java.lang.String);

  public abstract A withNewServiceAccountName(java.lang.StringBuilder);

  public abstract A withNewServiceAccountName(java.lang.StringBuffer);

  public abstract A addToServiceAccountNames(int, io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName);

  public abstract A setToServiceAccountNames(int, io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName);

  public abstract A addToServiceAccountNames(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName...);

  public abstract A addAllToServiceAccountNames(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName>);

  public abstract A removeFromServiceAccountNames(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName...);

  public abstract A removeAllFromServiceAccountNames(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName>);

  public abstract A removeMatchingFromServiceAccountNames(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountNameBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName> getServiceAccountNames();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName> buildServiceAccountNames();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName buildServiceAccountName(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName buildFirstServiceAccountName();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName buildLastServiceAccountName();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName buildMatchingServiceAccountName(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountNameBuilder>);

  public abstract java.lang.Boolean hasMatchingServiceAccountName(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountNameBuilder>);

  public abstract A withServiceAccountNames(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName>);

  public abstract A withServiceAccountNames(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName...);

  public abstract java.lang.Boolean hasServiceAccountNames();

  public abstract A addNewServiceAccountName(java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ServiceAccountNamesNested<A> addNewServiceAccountName();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ServiceAccountNamesNested<A> addNewServiceAccountNameLike(io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ServiceAccountNamesNested<A> setNewServiceAccountNameLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountName);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ServiceAccountNamesNested<A> editServiceAccountName(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ServiceAccountNamesNested<A> editFirstServiceAccountName();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ServiceAccountNamesNested<A> editLastServiceAccountName();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$ServiceAccountNamesNested<A> editMatchingServiceAccountName(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecServiceAccountNameBuilder>);

  public abstract java.lang.String getStatus();

  public abstract A withStatus(java.lang.String);

  public abstract java.lang.Boolean hasStatus();

  public abstract A withNewStatus(java.lang.String);

  public abstract A withNewStatus(java.lang.StringBuilder);

  public abstract A withNewStatus(java.lang.StringBuffer);

  public abstract java.lang.String getTimeout();

  public abstract A withTimeout(java.lang.String);

  public abstract java.lang.Boolean hasTimeout();

  public abstract A withNewTimeout(java.lang.String);

  public abstract A withNewTimeout(java.lang.StringBuilder);

  public abstract A withNewTimeout(java.lang.StringBuffer);

  public abstract A addToWorkspaces(int, io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding);

  public abstract A setToWorkspaces(int, io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding);

  public abstract A addToWorkspaces(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding...);

  public abstract A addAllToWorkspaces(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding>);

  public abstract A removeFromWorkspaces(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding...);

  public abstract A removeAllFromWorkspaces(java.util.Collection<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding>);

  public abstract A removeMatchingFromWorkspaces(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBindingBuilder>);

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding> getWorkspaces();

  public abstract java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding> buildWorkspaces();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding buildWorkspace(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding buildFirstWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding buildLastWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding buildMatchingWorkspace(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBindingBuilder>);

  public abstract java.lang.Boolean hasMatchingWorkspace(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBindingBuilder>);

  public abstract A withWorkspaces(java.util.List<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding>);

  public abstract A withWorkspaces(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding...);

  public abstract java.lang.Boolean hasWorkspaces();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$WorkspacesNested<A> addNewWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$WorkspacesNested<A> addNewWorkspaceLike(io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$WorkspacesNested<A> setNewWorkspaceLike(int, io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBinding);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$WorkspacesNested<A> editWorkspace(int);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$WorkspacesNested<A> editFirstWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$WorkspacesNested<A> editLastWorkspace();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.PipelineRunSpecFluent$WorkspacesNested<A> editMatchingWorkspace(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.tekton.pipeline.v1beta1.WorkspaceBindingBuilder>);
}
