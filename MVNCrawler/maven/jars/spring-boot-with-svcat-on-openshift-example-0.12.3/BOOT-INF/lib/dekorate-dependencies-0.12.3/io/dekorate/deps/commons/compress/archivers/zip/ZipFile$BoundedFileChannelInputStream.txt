Compiled from "ZipFile.java"
class io.dekorate.deps.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream extends io.dekorate.deps.commons.compress.archivers.zip.ZipFile$BoundedInputStream {
  private final java.nio.channels.FileChannel archive;

  final io.dekorate.deps.commons.compress.archivers.zip.ZipFile this$0;

  io.dekorate.deps.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream(io.dekorate.deps.commons.compress.archivers.zip.ZipFile, long, long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field this$0:Lio/dekorate/deps/commons/compress/archivers/zip/ZipFile;
       5: aload_0
       6: aload_1
       7: lload_2
       8: lload         4
      10: invokespecial #19                 // Method io/dekorate/deps/commons/compress/archivers/zip/ZipFile$BoundedInputStream."<init>":(Lio/dekorate/deps/commons/compress/archivers/zip/ZipFile;JJ)V
      13: aload_0
      14: aload_1
      15: invokestatic  #23                 // Method io/dekorate/deps/commons/compress/archivers/zip/ZipFile.access$300:(Lio/dekorate/deps/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;
      18: checkcast     #25                 // class java/nio/channels/FileChannel
      21: putfield      #27                 // Field archive:Ljava/nio/channels/FileChannel;
      24: return

  protected int read(long, java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #27                 // Field archive:Ljava/nio/channels/FileChannel;
       4: aload_3
       5: lload_1
       6: invokevirtual #39                 // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;J)I
       9: istore        4
      11: aload_3
      12: invokevirtual #45                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      15: pop
      16: iload         4
      18: ireturn
}
