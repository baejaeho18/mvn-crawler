Compiled from "DeploymentConfigSpecFluent.java"
public interface io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent<A extends io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Integer getMinReadySeconds();

  public abstract A withMinReadySeconds(java.lang.Integer);

  public abstract java.lang.Boolean hasMinReadySeconds();

  public abstract java.lang.Boolean isPaused();

  public abstract A withPaused(java.lang.Boolean);

  public abstract java.lang.Boolean hasPaused();

  public abstract A withNewPaused(java.lang.String);

  public abstract A withNewPaused(boolean);

  public abstract java.lang.Integer getReplicas();

  public abstract A withReplicas(java.lang.Integer);

  public abstract java.lang.Boolean hasReplicas();

  public abstract java.lang.Integer getRevisionHistoryLimit();

  public abstract A withRevisionHistoryLimit(java.lang.Integer);

  public abstract java.lang.Boolean hasRevisionHistoryLimit();

  public abstract A addToSelector(java.lang.String, java.lang.String);

  public abstract A addToSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract A removeFromSelector(java.lang.String);

  public abstract A removeFromSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.Map<java.lang.String, java.lang.String> getSelector();

  public abstract A withSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.Boolean hasSelector();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentStrategy getStrategy();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentStrategy buildStrategy();

  public abstract A withStrategy(io.dekorate.deps.openshift.api.model.DeploymentStrategy);

  public abstract java.lang.Boolean hasStrategy();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$StrategyNested<A> withNewStrategy();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$StrategyNested<A> withNewStrategyLike(io.dekorate.deps.openshift.api.model.DeploymentStrategy);

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$StrategyNested<A> editStrategy();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$StrategyNested<A> editOrNewStrategy();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$StrategyNested<A> editOrNewStrategyLike(io.dekorate.deps.openshift.api.model.DeploymentStrategy);

  public abstract io.dekorate.deps.kubernetes.api.model.PodTemplateSpec getTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.PodTemplateSpec buildTemplate();

  public abstract A withTemplate(io.dekorate.deps.kubernetes.api.model.PodTemplateSpec);

  public abstract java.lang.Boolean hasTemplate();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$TemplateNested<A> withNewTemplate();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$TemplateNested<A> withNewTemplateLike(io.dekorate.deps.kubernetes.api.model.PodTemplateSpec);

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$TemplateNested<A> editTemplate();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$TemplateNested<A> editOrNewTemplate();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$TemplateNested<A> editOrNewTemplateLike(io.dekorate.deps.kubernetes.api.model.PodTemplateSpec);

  public abstract java.lang.Boolean isTest();

  public abstract A withTest(java.lang.Boolean);

  public abstract java.lang.Boolean hasTest();

  public abstract A withNewTest(java.lang.String);

  public abstract A withNewTest(boolean);

  public abstract A addToTriggers(int, io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy);

  public abstract A setToTriggers(int, io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy);

  public abstract A addToTriggers(io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy...);

  public abstract A addAllToTriggers(java.util.Collection<io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy>);

  public abstract A removeFromTriggers(io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy...);

  public abstract A removeAllFromTriggers(java.util.Collection<io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy>);

  public abstract A removeMatchingFromTriggers(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicyBuilder>);

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy> getTriggers();

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy> buildTriggers();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy buildTrigger(int);

  public abstract io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy buildFirstTrigger();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy buildLastTrigger();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy buildMatchingTrigger(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicyBuilder>);

  public abstract java.lang.Boolean hasMatchingTrigger(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicyBuilder>);

  public abstract A withTriggers(java.util.List<io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy>);

  public abstract A withTriggers(io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy...);

  public abstract java.lang.Boolean hasTriggers();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$TriggersNested<A> addNewTrigger();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$TriggersNested<A> addNewTriggerLike(io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy);

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$TriggersNested<A> setNewTriggerLike(int, io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicy);

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$TriggersNested<A> editTrigger(int);

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$TriggersNested<A> editFirstTrigger();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$TriggersNested<A> editLastTrigger();

  public abstract io.dekorate.deps.openshift.api.model.DeploymentConfigSpecFluent$TriggersNested<A> editMatchingTrigger(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.DeploymentTriggerPolicyBuilder>);
}
