Compiled from "TemplateFluent.java"
public interface io.dekorate.deps.tekton.pipeline.pod.TemplateFluent<A extends io.dekorate.deps.tekton.pipeline.pod.TemplateFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.kubernetes.api.model.Affinity getAffinity();

  public abstract A withAffinity(io.dekorate.deps.kubernetes.api.model.Affinity);

  public abstract java.lang.Boolean hasAffinity();

  public abstract java.lang.Boolean isAutomountServiceAccountToken();

  public abstract A withAutomountServiceAccountToken(java.lang.Boolean);

  public abstract java.lang.Boolean hasAutomountServiceAccountToken();

  public abstract A withNewAutomountServiceAccountToken(java.lang.String);

  public abstract A withNewAutomountServiceAccountToken(boolean);

  public abstract io.dekorate.deps.kubernetes.api.model.PodDNSConfig getDnsConfig();

  public abstract A withDnsConfig(io.dekorate.deps.kubernetes.api.model.PodDNSConfig);

  public abstract java.lang.Boolean hasDnsConfig();

  public abstract java.lang.String getDnsPolicy();

  public abstract A withDnsPolicy(java.lang.String);

  public abstract java.lang.Boolean hasDnsPolicy();

  public abstract A withNewDnsPolicy(java.lang.String);

  public abstract A withNewDnsPolicy(java.lang.StringBuilder);

  public abstract A withNewDnsPolicy(java.lang.StringBuffer);

  public abstract java.lang.Boolean isEnableServiceLinks();

  public abstract A withEnableServiceLinks(java.lang.Boolean);

  public abstract java.lang.Boolean hasEnableServiceLinks();

  public abstract A withNewEnableServiceLinks(java.lang.String);

  public abstract A withNewEnableServiceLinks(boolean);

  public abstract A addToNodeSelector(java.lang.String, java.lang.String);

  public abstract A addToNodeSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract A removeFromNodeSelector(java.lang.String);

  public abstract A removeFromNodeSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.Map<java.lang.String, java.lang.String> getNodeSelector();

  public abstract A withNodeSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.Boolean hasNodeSelector();

  public abstract java.lang.String getPriorityClassName();

  public abstract A withPriorityClassName(java.lang.String);

  public abstract java.lang.Boolean hasPriorityClassName();

  public abstract A withNewPriorityClassName(java.lang.String);

  public abstract A withNewPriorityClassName(java.lang.StringBuilder);

  public abstract A withNewPriorityClassName(java.lang.StringBuffer);

  public abstract java.lang.String getRuntimeClassName();

  public abstract A withRuntimeClassName(java.lang.String);

  public abstract java.lang.Boolean hasRuntimeClassName();

  public abstract A withNewRuntimeClassName(java.lang.String);

  public abstract A withNewRuntimeClassName(java.lang.StringBuilder);

  public abstract A withNewRuntimeClassName(java.lang.StringBuffer);

  public abstract java.lang.String getSchedulerName();

  public abstract A withSchedulerName(java.lang.String);

  public abstract java.lang.Boolean hasSchedulerName();

  public abstract A withNewSchedulerName(java.lang.String);

  public abstract A withNewSchedulerName(java.lang.StringBuilder);

  public abstract A withNewSchedulerName(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.PodSecurityContext getSecurityContext();

  public abstract A withSecurityContext(io.dekorate.deps.kubernetes.api.model.PodSecurityContext);

  public abstract java.lang.Boolean hasSecurityContext();

  public abstract A addToTolerations(int, io.dekorate.deps.kubernetes.api.model.Toleration);

  public abstract A setToTolerations(int, io.dekorate.deps.kubernetes.api.model.Toleration);

  public abstract A addToTolerations(io.dekorate.deps.kubernetes.api.model.Toleration...);

  public abstract A addAllToTolerations(java.util.Collection<io.dekorate.deps.kubernetes.api.model.Toleration>);

  public abstract A removeFromTolerations(io.dekorate.deps.kubernetes.api.model.Toleration...);

  public abstract A removeAllFromTolerations(java.util.Collection<io.dekorate.deps.kubernetes.api.model.Toleration>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.Toleration> getTolerations();

  public abstract io.dekorate.deps.kubernetes.api.model.Toleration getToleration(int);

  public abstract io.dekorate.deps.kubernetes.api.model.Toleration getFirstToleration();

  public abstract io.dekorate.deps.kubernetes.api.model.Toleration getLastToleration();

  public abstract io.dekorate.deps.kubernetes.api.model.Toleration getMatchingToleration(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.Toleration>);

  public abstract java.lang.Boolean hasMatchingToleration(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.Toleration>);

  public abstract A withTolerations(java.util.List<io.dekorate.deps.kubernetes.api.model.Toleration>);

  public abstract A withTolerations(io.dekorate.deps.kubernetes.api.model.Toleration...);

  public abstract java.lang.Boolean hasTolerations();

  public abstract A addNewToleration(java.lang.String, java.lang.String, java.lang.String, java.lang.Long, java.lang.String);

  public abstract A addToVolumes(int, io.dekorate.deps.kubernetes.api.model.Volume);

  public abstract A setToVolumes(int, io.dekorate.deps.kubernetes.api.model.Volume);

  public abstract A addToVolumes(io.dekorate.deps.kubernetes.api.model.Volume...);

  public abstract A addAllToVolumes(java.util.Collection<io.dekorate.deps.kubernetes.api.model.Volume>);

  public abstract A removeFromVolumes(io.dekorate.deps.kubernetes.api.model.Volume...);

  public abstract A removeAllFromVolumes(java.util.Collection<io.dekorate.deps.kubernetes.api.model.Volume>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.Volume> getVolumes();

  public abstract io.dekorate.deps.kubernetes.api.model.Volume getVolume(int);

  public abstract io.dekorate.deps.kubernetes.api.model.Volume getFirstVolume();

  public abstract io.dekorate.deps.kubernetes.api.model.Volume getLastVolume();

  public abstract io.dekorate.deps.kubernetes.api.model.Volume getMatchingVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.Volume>);

  public abstract java.lang.Boolean hasMatchingVolume(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.Volume>);

  public abstract A withVolumes(java.util.List<io.dekorate.deps.kubernetes.api.model.Volume>);

  public abstract A withVolumes(io.dekorate.deps.kubernetes.api.model.Volume...);

  public abstract java.lang.Boolean hasVolumes();
}
