Compiled from "StatefulSetSpecFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent<A extends io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getPodManagementPolicy();

  public abstract A withPodManagementPolicy(java.lang.String);

  public abstract java.lang.Boolean hasPodManagementPolicy();

  public abstract A withNewPodManagementPolicy(java.lang.String);

  public abstract A withNewPodManagementPolicy(java.lang.StringBuilder);

  public abstract A withNewPodManagementPolicy(java.lang.StringBuffer);

  public abstract java.lang.Integer getReplicas();

  public abstract A withReplicas(java.lang.Integer);

  public abstract java.lang.Boolean hasReplicas();

  public abstract java.lang.Integer getRevisionHistoryLimit();

  public abstract A withRevisionHistoryLimit(java.lang.Integer);

  public abstract java.lang.Boolean hasRevisionHistoryLimit();

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelector getSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelector buildSelector();

  public abstract A withSelector(io.dekorate.deps.kubernetes.api.model.LabelSelector);

  public abstract java.lang.Boolean hasSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$SelectorNested<A> withNewSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$SelectorNested<A> withNewSelectorLike(io.dekorate.deps.kubernetes.api.model.LabelSelector);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$SelectorNested<A> editSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$SelectorNested<A> editOrNewSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$SelectorNested<A> editOrNewSelectorLike(io.dekorate.deps.kubernetes.api.model.LabelSelector);

  public abstract java.lang.String getServiceName();

  public abstract A withServiceName(java.lang.String);

  public abstract java.lang.Boolean hasServiceName();

  public abstract A withNewServiceName(java.lang.String);

  public abstract A withNewServiceName(java.lang.StringBuilder);

  public abstract A withNewServiceName(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.PodTemplateSpec getTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.PodTemplateSpec buildTemplate();

  public abstract A withTemplate(io.dekorate.deps.kubernetes.api.model.PodTemplateSpec);

  public abstract java.lang.Boolean hasTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$TemplateNested<A> withNewTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$TemplateNested<A> withNewTemplateLike(io.dekorate.deps.kubernetes.api.model.PodTemplateSpec);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$TemplateNested<A> editTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$TemplateNested<A> editOrNewTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$TemplateNested<A> editOrNewTemplateLike(io.dekorate.deps.kubernetes.api.model.PodTemplateSpec);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetUpdateStrategy getUpdateStrategy();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetUpdateStrategy buildUpdateStrategy();

  public abstract A withUpdateStrategy(io.dekorate.deps.kubernetes.api.model.apps.StatefulSetUpdateStrategy);

  public abstract java.lang.Boolean hasUpdateStrategy();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$UpdateStrategyNested<A> withNewUpdateStrategy();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$UpdateStrategyNested<A> withNewUpdateStrategyLike(io.dekorate.deps.kubernetes.api.model.apps.StatefulSetUpdateStrategy);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$UpdateStrategyNested<A> editUpdateStrategy();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$UpdateStrategyNested<A> editOrNewUpdateStrategy();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$UpdateStrategyNested<A> editOrNewUpdateStrategyLike(io.dekorate.deps.kubernetes.api.model.apps.StatefulSetUpdateStrategy);

  public abstract A addToVolumeClaimTemplates(int, io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim);

  public abstract A setToVolumeClaimTemplates(int, io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim);

  public abstract A addToVolumeClaimTemplates(io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim...);

  public abstract A addAllToVolumeClaimTemplates(java.util.Collection<io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim>);

  public abstract A removeFromVolumeClaimTemplates(io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim...);

  public abstract A removeAllFromVolumeClaimTemplates(java.util.Collection<io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim>);

  public abstract A removeMatchingFromVolumeClaimTemplates(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaimBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim> getVolumeClaimTemplates();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim> buildVolumeClaimTemplates();

  public abstract io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim buildVolumeClaimTemplate(int);

  public abstract io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim buildFirstVolumeClaimTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim buildLastVolumeClaimTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim buildMatchingVolumeClaimTemplate(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaimBuilder>);

  public abstract java.lang.Boolean hasMatchingVolumeClaimTemplate(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaimBuilder>);

  public abstract A withVolumeClaimTemplates(java.util.List<io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim>);

  public abstract A withVolumeClaimTemplates(io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim...);

  public abstract java.lang.Boolean hasVolumeClaimTemplates();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$VolumeClaimTemplatesNested<A> addNewVolumeClaimTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$VolumeClaimTemplatesNested<A> addNewVolumeClaimTemplateLike(io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$VolumeClaimTemplatesNested<A> setNewVolumeClaimTemplateLike(int, io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$VolumeClaimTemplatesNested<A> editVolumeClaimTemplate(int);

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$VolumeClaimTemplatesNested<A> editFirstVolumeClaimTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$VolumeClaimTemplatesNested<A> editLastVolumeClaimTemplate();

  public abstract io.dekorate.deps.kubernetes.api.model.apps.StatefulSetSpecFluent$VolumeClaimTemplatesNested<A> editMatchingVolumeClaimTemplate(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaimBuilder>);
}
