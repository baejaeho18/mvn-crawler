Compiled from "ParallelSpecFluent.java"
public interface io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent<A extends io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToBranches(int, io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch);

  public abstract A setToBranches(int, io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch);

  public abstract A addToBranches(io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch...);

  public abstract A addAllToBranches(java.util.Collection<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch>);

  public abstract A removeFromBranches(io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch...);

  public abstract A removeAllFromBranches(java.util.Collection<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch>);

  public abstract A removeMatchingFromBranches(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchBuilder>);

  public abstract java.util.List<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch> getBranches();

  public abstract java.util.List<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch> buildBranches();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch buildBranch(int);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch buildFirstBranch();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch buildLastBranch();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch buildMatchingBranch(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchBuilder>);

  public abstract java.lang.Boolean hasMatchingBranch(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchBuilder>);

  public abstract A withBranches(java.util.List<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch>);

  public abstract A withBranches(io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch...);

  public abstract java.lang.Boolean hasBranches();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$BranchesNested<A> addNewBranch();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$BranchesNested<A> addNewBranchLike(io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$BranchesNested<A> setNewBranchLike(int, io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$BranchesNested<A> editBranch(int);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$BranchesNested<A> editFirstBranch();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$BranchesNested<A> editLastBranch();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$BranchesNested<A> editMatchingBranch(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchBuilder>);

  public abstract io.dekorate.deps.knative.dev.messaging.v1beta1.ChannelTemplateSpec getChannelTemplate();

  public abstract io.dekorate.deps.knative.dev.messaging.v1beta1.ChannelTemplateSpec buildChannelTemplate();

  public abstract A withChannelTemplate(io.dekorate.deps.knative.dev.messaging.v1beta1.ChannelTemplateSpec);

  public abstract java.lang.Boolean hasChannelTemplate();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$ChannelTemplateNested<A> withNewChannelTemplate();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$ChannelTemplateNested<A> withNewChannelTemplateLike(io.dekorate.deps.knative.dev.messaging.v1beta1.ChannelTemplateSpec);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$ChannelTemplateNested<A> editChannelTemplate();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$ChannelTemplateNested<A> editOrNewChannelTemplate();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$ChannelTemplateNested<A> editOrNewChannelTemplateLike(io.dekorate.deps.knative.dev.messaging.v1beta1.ChannelTemplateSpec);

  public abstract io.dekorate.deps.knative.duck.v1.Destination getReply();

  public abstract io.dekorate.deps.knative.duck.v1.Destination buildReply();

  public abstract A withReply(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract java.lang.Boolean hasReply();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$ReplyNested<A> withNewReply();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$ReplyNested<A> withNewReplyLike(io.dekorate.deps.knative.duck.v1.Destination);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$ReplyNested<A> editReply();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$ReplyNested<A> editOrNewReply();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSpecFluent$ReplyNested<A> editOrNewReplyLike(io.dekorate.deps.knative.duck.v1.Destination);
}
