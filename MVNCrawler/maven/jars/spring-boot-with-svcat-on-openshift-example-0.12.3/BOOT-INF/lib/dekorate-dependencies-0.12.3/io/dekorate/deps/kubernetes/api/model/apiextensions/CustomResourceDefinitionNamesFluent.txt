Compiled from "CustomResourceDefinitionNamesFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionNamesFluent<A extends io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinitionNamesFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToCategories(int, java.lang.String);

  public abstract A setToCategories(int, java.lang.String);

  public abstract A addToCategories(java.lang.String...);

  public abstract A addAllToCategories(java.util.Collection<java.lang.String>);

  public abstract A removeFromCategories(java.lang.String...);

  public abstract A removeAllFromCategories(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getCategories();

  public abstract java.lang.String getCategory(int);

  public abstract java.lang.String getFirstCategory();

  public abstract java.lang.String getLastCategory();

  public abstract java.lang.String getMatchingCategory(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingCategory(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withCategories(java.util.List<java.lang.String>);

  public abstract A withCategories(java.lang.String...);

  public abstract java.lang.Boolean hasCategories();

  public abstract A addNewCategory(java.lang.String);

  public abstract A addNewCategory(java.lang.StringBuilder);

  public abstract A addNewCategory(java.lang.StringBuffer);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract java.lang.String getListKind();

  public abstract A withListKind(java.lang.String);

  public abstract java.lang.Boolean hasListKind();

  public abstract A withNewListKind(java.lang.String);

  public abstract A withNewListKind(java.lang.StringBuilder);

  public abstract A withNewListKind(java.lang.StringBuffer);

  public abstract java.lang.String getPlural();

  public abstract A withPlural(java.lang.String);

  public abstract java.lang.Boolean hasPlural();

  public abstract A withNewPlural(java.lang.String);

  public abstract A withNewPlural(java.lang.StringBuilder);

  public abstract A withNewPlural(java.lang.StringBuffer);

  public abstract A addToShortNames(int, java.lang.String);

  public abstract A setToShortNames(int, java.lang.String);

  public abstract A addToShortNames(java.lang.String...);

  public abstract A addAllToShortNames(java.util.Collection<java.lang.String>);

  public abstract A removeFromShortNames(java.lang.String...);

  public abstract A removeAllFromShortNames(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getShortNames();

  public abstract java.lang.String getShortName(int);

  public abstract java.lang.String getFirstShortName();

  public abstract java.lang.String getLastShortName();

  public abstract java.lang.String getMatchingShortName(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingShortName(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withShortNames(java.util.List<java.lang.String>);

  public abstract A withShortNames(java.lang.String...);

  public abstract java.lang.Boolean hasShortNames();

  public abstract A addNewShortName(java.lang.String);

  public abstract A addNewShortName(java.lang.StringBuilder);

  public abstract A addNewShortName(java.lang.StringBuffer);

  public abstract java.lang.String getSingular();

  public abstract A withSingular(java.lang.String);

  public abstract java.lang.Boolean hasSingular();

  public abstract A withNewSingular(java.lang.String);

  public abstract A withNewSingular(java.lang.StringBuilder);

  public abstract A withNewSingular(java.lang.StringBuffer);
}
