Compiled from "ImageStreamImportStatusFluent.java"
public interface io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent<A extends io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToImages(int, io.dekorate.deps.openshift.api.model.ImageImportStatus);

  public abstract A setToImages(int, io.dekorate.deps.openshift.api.model.ImageImportStatus);

  public abstract A addToImages(io.dekorate.deps.openshift.api.model.ImageImportStatus...);

  public abstract A addAllToImages(java.util.Collection<io.dekorate.deps.openshift.api.model.ImageImportStatus>);

  public abstract A removeFromImages(io.dekorate.deps.openshift.api.model.ImageImportStatus...);

  public abstract A removeAllFromImages(java.util.Collection<io.dekorate.deps.openshift.api.model.ImageImportStatus>);

  public abstract A removeMatchingFromImages(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageImportStatusBuilder>);

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ImageImportStatus> getImages();

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ImageImportStatus> buildImages();

  public abstract io.dekorate.deps.openshift.api.model.ImageImportStatus buildImage(int);

  public abstract io.dekorate.deps.openshift.api.model.ImageImportStatus buildFirstImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageImportStatus buildLastImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageImportStatus buildMatchingImage(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageImportStatusBuilder>);

  public abstract java.lang.Boolean hasMatchingImage(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageImportStatusBuilder>);

  public abstract A withImages(java.util.List<io.dekorate.deps.openshift.api.model.ImageImportStatus>);

  public abstract A withImages(io.dekorate.deps.openshift.api.model.ImageImportStatus...);

  public abstract java.lang.Boolean hasImages();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$ImagesNested<A> addNewImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$ImagesNested<A> addNewImageLike(io.dekorate.deps.openshift.api.model.ImageImportStatus);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$ImagesNested<A> setNewImageLike(int, io.dekorate.deps.openshift.api.model.ImageImportStatus);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$ImagesNested<A> editImage(int);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$ImagesNested<A> editFirstImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$ImagesNested<A> editLastImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$ImagesNested<A> editMatchingImage(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageImportStatusBuilder>);

  public abstract io.dekorate.deps.openshift.api.model.ImageStream getImport();

  public abstract io.dekorate.deps.openshift.api.model.ImageStream buildImport();

  public abstract A withImport(io.dekorate.deps.openshift.api.model.ImageStream);

  public abstract java.lang.Boolean hasImport();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$ImportNested<A> withNewImport();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$ImportNested<A> withNewImportLike(io.dekorate.deps.openshift.api.model.ImageStream);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$ImportNested<A> editImport();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$ImportNested<A> editOrNewImport();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$ImportNested<A> editOrNewImportLike(io.dekorate.deps.openshift.api.model.ImageStream);

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportStatus getRepository();

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportStatus buildRepository();

  public abstract A withRepository(io.dekorate.deps.openshift.api.model.RepositoryImportStatus);

  public abstract java.lang.Boolean hasRepository();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$RepositoryNested<A> withNewRepository();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$RepositoryNested<A> withNewRepositoryLike(io.dekorate.deps.openshift.api.model.RepositoryImportStatus);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$RepositoryNested<A> editRepository();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$RepositoryNested<A> editOrNewRepository();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportStatusFluent$RepositoryNested<A> editOrNewRepositoryLike(io.dekorate.deps.openshift.api.model.RepositoryImportStatus);
}
