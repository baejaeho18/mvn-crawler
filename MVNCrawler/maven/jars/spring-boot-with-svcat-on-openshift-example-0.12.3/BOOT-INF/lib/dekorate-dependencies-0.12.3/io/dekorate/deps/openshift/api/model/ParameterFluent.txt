Compiled from "ParameterFluent.java"
public interface io.dekorate.deps.openshift.api.model.ParameterFluent<A extends io.dekorate.deps.openshift.api.model.ParameterFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getDescription();

  public abstract A withDescription(java.lang.String);

  public abstract java.lang.Boolean hasDescription();

  public abstract A withNewDescription(java.lang.String);

  public abstract A withNewDescription(java.lang.StringBuilder);

  public abstract A withNewDescription(java.lang.StringBuffer);

  public abstract java.lang.String getDisplayName();

  public abstract A withDisplayName(java.lang.String);

  public abstract java.lang.Boolean hasDisplayName();

  public abstract A withNewDisplayName(java.lang.String);

  public abstract A withNewDisplayName(java.lang.StringBuilder);

  public abstract A withNewDisplayName(java.lang.StringBuffer);

  public abstract java.lang.String getFrom();

  public abstract A withFrom(java.lang.String);

  public abstract java.lang.Boolean hasFrom();

  public abstract A withNewFrom(java.lang.String);

  public abstract A withNewFrom(java.lang.StringBuilder);

  public abstract A withNewFrom(java.lang.StringBuffer);

  public abstract java.lang.String getGenerate();

  public abstract A withGenerate(java.lang.String);

  public abstract java.lang.Boolean hasGenerate();

  public abstract A withNewGenerate(java.lang.String);

  public abstract A withNewGenerate(java.lang.StringBuilder);

  public abstract A withNewGenerate(java.lang.StringBuffer);

  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();

  public abstract A withNewName(java.lang.String);

  public abstract A withNewName(java.lang.StringBuilder);

  public abstract A withNewName(java.lang.StringBuffer);

  public abstract java.lang.Boolean isRequired();

  public abstract A withRequired(java.lang.Boolean);

  public abstract java.lang.Boolean hasRequired();

  public abstract A withNewRequired(java.lang.String);

  public abstract A withNewRequired(boolean);

  public abstract java.lang.String getValue();

  public abstract A withValue(java.lang.String);

  public abstract java.lang.Boolean hasValue();

  public abstract A withNewValue(java.lang.String);

  public abstract A withNewValue(java.lang.StringBuilder);

  public abstract A withNewValue(java.lang.StringBuffer);
}
