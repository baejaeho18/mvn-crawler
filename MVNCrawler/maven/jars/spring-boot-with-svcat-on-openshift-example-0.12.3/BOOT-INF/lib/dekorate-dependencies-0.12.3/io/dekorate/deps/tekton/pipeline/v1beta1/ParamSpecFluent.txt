Compiled from "ParamSpecFluent.java"
public interface io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecFluent<A extends io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ArrayOrString getDefault();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ArrayOrString buildDefault();

  public abstract A withDefault(io.dekorate.deps.tekton.pipeline.v1beta1.ArrayOrString);

  public abstract java.lang.Boolean hasDefault();

  public abstract A withNewDefault(java.lang.String);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecFluent$DefaultNested<A> withNewDefault();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecFluent$DefaultNested<A> withNewDefaultLike(io.dekorate.deps.tekton.pipeline.v1beta1.ArrayOrString);

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecFluent$DefaultNested<A> editDefault();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecFluent$DefaultNested<A> editOrNewDefault();

  public abstract io.dekorate.deps.tekton.pipeline.v1beta1.ParamSpecFluent$DefaultNested<A> editOrNewDefaultLike(io.dekorate.deps.tekton.pipeline.v1beta1.ArrayOrString);

  public abstract java.lang.String getDescription();

  public abstract A withDescription(java.lang.String);

  public abstract java.lang.Boolean hasDescription();

  public abstract A withNewDescription(java.lang.String);

  public abstract A withNewDescription(java.lang.StringBuilder);

  public abstract A withNewDescription(java.lang.StringBuffer);

  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();

  public abstract A withNewName(java.lang.String);

  public abstract A withNewName(java.lang.StringBuilder);

  public abstract A withNewName(java.lang.StringBuffer);

  public abstract java.lang.String getType();

  public abstract A withType(java.lang.String);

  public abstract java.lang.Boolean hasType();

  public abstract A withNewType(java.lang.String);

  public abstract A withNewType(java.lang.StringBuilder);

  public abstract A withNewType(java.lang.StringBuffer);
}
