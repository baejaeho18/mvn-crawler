Compiled from "RouteIngressFluent.java"
public interface io.dekorate.deps.openshift.api.model.RouteIngressFluent<A extends io.dekorate.deps.openshift.api.model.RouteIngressFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToConditions(int, io.dekorate.deps.openshift.api.model.RouteIngressCondition);

  public abstract A setToConditions(int, io.dekorate.deps.openshift.api.model.RouteIngressCondition);

  public abstract A addToConditions(io.dekorate.deps.openshift.api.model.RouteIngressCondition...);

  public abstract A addAllToConditions(java.util.Collection<io.dekorate.deps.openshift.api.model.RouteIngressCondition>);

  public abstract A removeFromConditions(io.dekorate.deps.openshift.api.model.RouteIngressCondition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.dekorate.deps.openshift.api.model.RouteIngressCondition>);

  public abstract A removeMatchingFromConditions(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.RouteIngressConditionBuilder>);

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.RouteIngressCondition> getConditions();

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.RouteIngressCondition> buildConditions();

  public abstract io.dekorate.deps.openshift.api.model.RouteIngressCondition buildCondition(int);

  public abstract io.dekorate.deps.openshift.api.model.RouteIngressCondition buildFirstCondition();

  public abstract io.dekorate.deps.openshift.api.model.RouteIngressCondition buildLastCondition();

  public abstract io.dekorate.deps.openshift.api.model.RouteIngressCondition buildMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.RouteIngressConditionBuilder>);

  public abstract java.lang.Boolean hasMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.RouteIngressConditionBuilder>);

  public abstract A withConditions(java.util.List<io.dekorate.deps.openshift.api.model.RouteIngressCondition>);

  public abstract A withConditions(io.dekorate.deps.openshift.api.model.RouteIngressCondition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract A addNewCondition(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.openshift.api.model.RouteIngressFluent$ConditionsNested<A> addNewCondition();

  public abstract io.dekorate.deps.openshift.api.model.RouteIngressFluent$ConditionsNested<A> addNewConditionLike(io.dekorate.deps.openshift.api.model.RouteIngressCondition);

  public abstract io.dekorate.deps.openshift.api.model.RouteIngressFluent$ConditionsNested<A> setNewConditionLike(int, io.dekorate.deps.openshift.api.model.RouteIngressCondition);

  public abstract io.dekorate.deps.openshift.api.model.RouteIngressFluent$ConditionsNested<A> editCondition(int);

  public abstract io.dekorate.deps.openshift.api.model.RouteIngressFluent$ConditionsNested<A> editFirstCondition();

  public abstract io.dekorate.deps.openshift.api.model.RouteIngressFluent$ConditionsNested<A> editLastCondition();

  public abstract io.dekorate.deps.openshift.api.model.RouteIngressFluent$ConditionsNested<A> editMatchingCondition(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.RouteIngressConditionBuilder>);

  public abstract java.lang.String getHost();

  public abstract A withHost(java.lang.String);

  public abstract java.lang.Boolean hasHost();

  public abstract A withNewHost(java.lang.String);

  public abstract A withNewHost(java.lang.StringBuilder);

  public abstract A withNewHost(java.lang.StringBuffer);

  public abstract java.lang.String getRouterCanonicalHostname();

  public abstract A withRouterCanonicalHostname(java.lang.String);

  public abstract java.lang.Boolean hasRouterCanonicalHostname();

  public abstract A withNewRouterCanonicalHostname(java.lang.String);

  public abstract A withNewRouterCanonicalHostname(java.lang.StringBuilder);

  public abstract A withNewRouterCanonicalHostname(java.lang.StringBuffer);

  public abstract java.lang.String getRouterName();

  public abstract A withRouterName(java.lang.String);

  public abstract java.lang.Boolean hasRouterName();

  public abstract A withNewRouterName(java.lang.String);

  public abstract A withNewRouterName(java.lang.StringBuilder);

  public abstract A withNewRouterName(java.lang.StringBuffer);

  public abstract java.lang.String getWildcardPolicy();

  public abstract A withWildcardPolicy(java.lang.String);

  public abstract java.lang.Boolean hasWildcardPolicy();

  public abstract A withNewWildcardPolicy(java.lang.String);

  public abstract A withNewWildcardPolicy(java.lang.StringBuilder);

  public abstract A withNewWildcardPolicy(java.lang.StringBuffer);
}
