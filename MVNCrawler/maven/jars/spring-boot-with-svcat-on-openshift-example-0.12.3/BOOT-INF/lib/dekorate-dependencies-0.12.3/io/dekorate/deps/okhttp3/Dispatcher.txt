Compiled from "Dispatcher.java"
public final class io.dekorate.deps.okhttp3.Dispatcher {
  private int maxRequests;

  private int maxRequestsPerHost;

  private java.lang.Runnable idleCallback;

  private java.util.concurrent.ExecutorService executorService;

  private final java.util.Deque<io.dekorate.deps.okhttp3.RealCall$AsyncCall> readyAsyncCalls;

  private final java.util.Deque<io.dekorate.deps.okhttp3.RealCall$AsyncCall> runningAsyncCalls;

  private final java.util.Deque<io.dekorate.deps.okhttp3.RealCall> runningSyncCalls;

  static final boolean $assertionsDisabled;

  public io.dekorate.deps.okhttp3.Dispatcher(java.util.concurrent.ExecutorService);
    Code:
       0: aload_0
       1: invokespecial #31                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        64
       7: putfield      #33                 // Field maxRequests:I
      10: aload_0
      11: iconst_5
      12: putfield      #35                 // Field maxRequestsPerHost:I
      15: aload_0
      16: new           #37                 // class java/util/ArrayDeque
      19: dup
      20: invokespecial #38                 // Method java/util/ArrayDeque."<init>":()V
      23: putfield      #40                 // Field readyAsyncCalls:Ljava/util/Deque;
      26: aload_0
      27: new           #37                 // class java/util/ArrayDeque
      30: dup
      31: invokespecial #38                 // Method java/util/ArrayDeque."<init>":()V
      34: putfield      #42                 // Field runningAsyncCalls:Ljava/util/Deque;
      37: aload_0
      38: new           #37                 // class java/util/ArrayDeque
      41: dup
      42: invokespecial #38                 // Method java/util/ArrayDeque."<init>":()V
      45: putfield      #44                 // Field runningSyncCalls:Ljava/util/Deque;
      48: aload_0
      49: aload_1
      50: putfield      #46                 // Field executorService:Ljava/util/concurrent/ExecutorService;
      53: return

  public io.dekorate.deps.okhttp3.Dispatcher();
    Code:
       0: aload_0
       1: invokespecial #31                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        64
       7: putfield      #33                 // Field maxRequests:I
      10: aload_0
      11: iconst_5
      12: putfield      #35                 // Field maxRequestsPerHost:I
      15: aload_0
      16: new           #37                 // class java/util/ArrayDeque
      19: dup
      20: invokespecial #38                 // Method java/util/ArrayDeque."<init>":()V
      23: putfield      #40                 // Field readyAsyncCalls:Ljava/util/Deque;
      26: aload_0
      27: new           #37                 // class java/util/ArrayDeque
      30: dup
      31: invokespecial #38                 // Method java/util/ArrayDeque."<init>":()V
      34: putfield      #42                 // Field runningAsyncCalls:Ljava/util/Deque;
      37: aload_0
      38: new           #37                 // class java/util/ArrayDeque
      41: dup
      42: invokespecial #38                 // Method java/util/ArrayDeque."<init>":()V
      45: putfield      #44                 // Field runningSyncCalls:Ljava/util/Deque;
      48: return

  public synchronized java.util.concurrent.ExecutorService executorService();
    Code:
       0: aload_0
       1: getfield      #46                 // Field executorService:Ljava/util/concurrent/ExecutorService;
       4: ifnonnull     40
       7: aload_0
       8: new           #51                 // class java/util/concurrent/ThreadPoolExecutor
      11: dup
      12: iconst_0
      13: ldc           #52                 // int 2147483647
      15: ldc2_w        #53                 // long 60l
      18: getstatic     #60                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      21: new           #62                 // class java/util/concurrent/SynchronousQueue
      24: dup
      25: invokespecial #63                 // Method java/util/concurrent/SynchronousQueue."<init>":()V
      28: ldc           #65                 // String OkHttp Dispatcher
      30: iconst_0
      31: invokestatic  #71                 // Method io/dekorate/deps/okhttp3/internal/Util.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;
      34: invokespecial #74                 // Method java/util/concurrent/ThreadPoolExecutor."<init>":(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V
      37: putfield      #46                 // Field executorService:Ljava/util/concurrent/ExecutorService;
      40: aload_0
      41: getfield      #46                 // Field executorService:Ljava/util/concurrent/ExecutorService;
      44: areturn

  public void setMaxRequests(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmpge     32
       5: new           #78                 // class java/lang/IllegalArgumentException
       8: dup
       9: new           #80                 // class java/lang/StringBuilder
      12: dup
      13: invokespecial #81                 // Method java/lang/StringBuilder."<init>":()V
      16: ldc           #83                 // String max < 1:
      18: invokevirtual #87                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: iload_1
      22: invokevirtual #90                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      25: invokevirtual #94                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      28: invokespecial #97                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: dup
      34: astore_2
      35: monitorenter
      36: aload_0
      37: iload_1
      38: putfield      #33                 // Field maxRequests:I
      41: aload_2
      42: monitorexit
      43: goto          51
      46: astore_3
      47: aload_2
      48: monitorexit
      49: aload_3
      50: athrow
      51: aload_0
      52: invokespecial #103                // Method promoteAndExecute:()Z
      55: pop
      56: return
    Exception table:
       from    to  target type
          36    43    46   any
          46    49    46   any

  public synchronized int getMaxRequests();
    Code:
       0: aload_0
       1: getfield      #33                 // Field maxRequests:I
       4: ireturn

  public void setMaxRequestsPerHost(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmpge     32
       5: new           #78                 // class java/lang/IllegalArgumentException
       8: dup
       9: new           #80                 // class java/lang/StringBuilder
      12: dup
      13: invokespecial #81                 // Method java/lang/StringBuilder."<init>":()V
      16: ldc           #83                 // String max < 1:
      18: invokevirtual #87                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: iload_1
      22: invokevirtual #90                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      25: invokevirtual #94                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      28: invokespecial #97                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: dup
      34: astore_2
      35: monitorenter
      36: aload_0
      37: iload_1
      38: putfield      #35                 // Field maxRequestsPerHost:I
      41: aload_2
      42: monitorexit
      43: goto          51
      46: astore_3
      47: aload_2
      48: monitorexit
      49: aload_3
      50: athrow
      51: aload_0
      52: invokespecial #103                // Method promoteAndExecute:()Z
      55: pop
      56: return
    Exception table:
       from    to  target type
          36    43    46   any
          46    49    46   any

  public synchronized int getMaxRequestsPerHost();
    Code:
       0: aload_0
       1: getfield      #35                 // Field maxRequestsPerHost:I
       4: ireturn

  public synchronized void setIdleCallback(java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #111                // Field idleCallback:Ljava/lang/Runnable;
       5: return

  void enqueue(io.dekorate.deps.okhttp3.RealCall$AsyncCall);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: getfield      #40                 // Field readyAsyncCalls:Ljava/util/Deque;
       8: aload_1
       9: invokeinterface #119,  2          // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      14: pop
      15: aload_2
      16: monitorexit
      17: goto          25
      20: astore_3
      21: aload_2
      22: monitorexit
      23: aload_3
      24: athrow
      25: aload_0
      26: invokespecial #103                // Method promoteAndExecute:()Z
      29: pop
      30: return
    Exception table:
       from    to  target type
           4    17    20   any
          20    23    20   any

  public synchronized void cancelAll();
    Code:
       0: aload_0
       1: getfield      #40                 // Field readyAsyncCalls:Ljava/util/Deque;
       4: invokeinterface #126,  1          // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
       9: astore_1
      10: aload_1
      11: invokeinterface #131,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          39
      19: aload_1
      20: invokeinterface #135,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #7                  // class io/dekorate/deps/okhttp3/RealCall$AsyncCall
      28: astore_2
      29: aload_2
      30: invokevirtual #139                // Method io/dekorate/deps/okhttp3/RealCall$AsyncCall.get:()Lio/dekorate/deps/okhttp3/RealCall;
      33: invokevirtual #142                // Method io/dekorate/deps/okhttp3/RealCall.cancel:()V
      36: goto          10
      39: aload_0
      40: getfield      #42                 // Field runningAsyncCalls:Ljava/util/Deque;
      43: invokeinterface #126,  1          // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      48: astore_1
      49: aload_1
      50: invokeinterface #131,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      55: ifeq          78
      58: aload_1
      59: invokeinterface #135,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      64: checkcast     #7                  // class io/dekorate/deps/okhttp3/RealCall$AsyncCall
      67: astore_2
      68: aload_2
      69: invokevirtual #139                // Method io/dekorate/deps/okhttp3/RealCall$AsyncCall.get:()Lio/dekorate/deps/okhttp3/RealCall;
      72: invokevirtual #142                // Method io/dekorate/deps/okhttp3/RealCall.cancel:()V
      75: goto          49
      78: aload_0
      79: getfield      #44                 // Field runningSyncCalls:Ljava/util/Deque;
      82: invokeinterface #126,  1          // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      87: astore_1
      88: aload_1
      89: invokeinterface #131,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      94: ifeq          114
      97: aload_1
      98: invokeinterface #135,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     103: checkcast     #9                  // class io/dekorate/deps/okhttp3/RealCall
     106: astore_2
     107: aload_2
     108: invokevirtual #142                // Method io/dekorate/deps/okhttp3/RealCall.cancel:()V
     111: goto          88
     114: return

  private boolean promoteAndExecute();
    Code:
       0: getstatic     #145                // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokestatic  #150                // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #152                // class java/lang/AssertionError
      16: dup
      17: invokespecial #153                // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: new           #155                // class java/util/ArrayList
      24: dup
      25: invokespecial #156                // Method java/util/ArrayList."<init>":()V
      28: astore_1
      29: aload_0
      30: dup
      31: astore_3
      32: monitorenter
      33: aload_0
      34: getfield      #40                 // Field readyAsyncCalls:Ljava/util/Deque;
      37: invokeinterface #126,  1          // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      42: astore        4
      44: aload         4
      46: invokeinterface #131,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      51: ifeq          132
      54: aload         4
      56: invokeinterface #135,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      61: checkcast     #7                  // class io/dekorate/deps/okhttp3/RealCall$AsyncCall
      64: astore        5
      66: aload_0
      67: getfield      #42                 // Field runningAsyncCalls:Ljava/util/Deque;
      70: invokeinterface #161,  1          // InterfaceMethod java/util/Deque.size:()I
      75: aload_0
      76: getfield      #33                 // Field maxRequests:I
      79: if_icmplt     85
      82: goto          132
      85: aload_0
      86: aload         5
      88: invokespecial #165                // Method runningCallsForHost:(Lio/dekorate/deps/okhttp3/RealCall$AsyncCall;)I
      91: aload_0
      92: getfield      #35                 // Field maxRequestsPerHost:I
      95: if_icmplt     101
      98: goto          44
     101: aload         4
     103: invokeinterface #168,  1          // InterfaceMethod java/util/Iterator.remove:()V
     108: aload_1
     109: aload         5
     111: invokeinterface #169,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     116: pop
     117: aload_0
     118: getfield      #42                 // Field runningAsyncCalls:Ljava/util/Deque;
     121: aload         5
     123: invokeinterface #119,  2          // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
     128: pop
     129: goto          44
     132: aload_0
     133: invokevirtual #172                // Method runningCallsCount:()I
     136: ifle          143
     139: iconst_1
     140: goto          144
     143: iconst_0
     144: istore_2
     145: aload_3
     146: monitorexit
     147: goto          157
     150: astore        6
     152: aload_3
     153: monitorexit
     154: aload         6
     156: athrow
     157: iconst_0
     158: istore_3
     159: aload_1
     160: invokeinterface #173,  1          // InterfaceMethod java/util/List.size:()I
     165: istore        4
     167: iload_3
     168: iload         4
     170: if_icmpge     200
     173: aload_1
     174: iload_3
     175: invokeinterface #176,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     180: checkcast     #7                  // class io/dekorate/deps/okhttp3/RealCall$AsyncCall
     183: astore        5
     185: aload         5
     187: aload_0
     188: invokevirtual #178                // Method executorService:()Ljava/util/concurrent/ExecutorService;
     191: invokevirtual #181                // Method io/dekorate/deps/okhttp3/RealCall$AsyncCall.executeOn:(Ljava/util/concurrent/ExecutorService;)V
     194: iinc          3, 1
     197: goto          167
     200: iload_2
     201: ireturn
    Exception table:
       from    to  target type
          33   147   150   any
         150   154   150   any

  private int runningCallsForHost(io.dekorate.deps.okhttp3.RealCall$AsyncCall);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #42                 // Field runningAsyncCalls:Ljava/util/Deque;
       6: invokeinterface #126,  1          // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      11: astore_3
      12: aload_3
      13: invokeinterface #131,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          67
      21: aload_3
      22: invokeinterface #135,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #7                  // class io/dekorate/deps/okhttp3/RealCall$AsyncCall
      30: astore        4
      32: aload         4
      34: invokevirtual #139                // Method io/dekorate/deps/okhttp3/RealCall$AsyncCall.get:()Lio/dekorate/deps/okhttp3/RealCall;
      37: getfield      #192                // Field io/dekorate/deps/okhttp3/RealCall.forWebSocket:Z
      40: ifeq          46
      43: goto          12
      46: aload         4
      48: invokevirtual #195                // Method io/dekorate/deps/okhttp3/RealCall$AsyncCall.host:()Ljava/lang/String;
      51: aload_1
      52: invokevirtual #195                // Method io/dekorate/deps/okhttp3/RealCall$AsyncCall.host:()Ljava/lang/String;
      55: invokevirtual #200                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      58: ifeq          64
      61: iinc          2, 1
      64: goto          12
      67: iload_2
      68: ireturn

  synchronized void executed(io.dekorate.deps.okhttp3.RealCall);
    Code:
       0: aload_0
       1: getfield      #44                 // Field runningSyncCalls:Ljava/util/Deque;
       4: aload_1
       5: invokeinterface #119,  2          // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  void finished(io.dekorate.deps.okhttp3.RealCall$AsyncCall);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #42                 // Field runningAsyncCalls:Ljava/util/Deque;
       5: aload_1
       6: invokespecial #208                // Method finished:(Ljava/util/Deque;Ljava/lang/Object;)V
       9: return

  void finished(io.dekorate.deps.okhttp3.RealCall);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #44                 // Field runningSyncCalls:Ljava/util/Deque;
       5: aload_1
       6: invokespecial #208                // Method finished:(Ljava/util/Deque;Ljava/lang/Object;)V
       9: return

  private <T> void finished(java.util.Deque<T>, T);
    Code:
       0: aload_0
       1: dup
       2: astore        4
       4: monitorenter
       5: aload_1
       6: aload_2
       7: invokeinterface #211,  2          // InterfaceMethod java/util/Deque.remove:(Ljava/lang/Object;)Z
      12: ifne          25
      15: new           #152                // class java/lang/AssertionError
      18: dup
      19: ldc           #213                // String Call wasn\'t in-flight!
      21: invokespecial #216                // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      24: athrow
      25: aload_0
      26: getfield      #111                // Field idleCallback:Ljava/lang/Runnable;
      29: astore_3
      30: aload         4
      32: monitorexit
      33: goto          44
      36: astore        5
      38: aload         4
      40: monitorexit
      41: aload         5
      43: athrow
      44: aload_0
      45: invokespecial #103                // Method promoteAndExecute:()Z
      48: istore        4
      50: iload         4
      52: ifne          65
      55: aload_3
      56: ifnull        65
      59: aload_3
      60: invokeinterface #221,  1          // InterfaceMethod java/lang/Runnable.run:()V
      65: return
    Exception table:
       from    to  target type
           5    33    36   any
          36    41    36   any

  public synchronized java.util.List<io.dekorate.deps.okhttp3.Call> queuedCalls();
    Code:
       0: new           #155                // class java/util/ArrayList
       3: dup
       4: invokespecial #156                // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #40                 // Field readyAsyncCalls:Ljava/util/Deque;
      12: invokeinterface #126,  1          // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      17: astore_2
      18: aload_2
      19: invokeinterface #131,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          51
      27: aload_2
      28: invokeinterface #135,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #7                  // class io/dekorate/deps/okhttp3/RealCall$AsyncCall
      36: astore_3
      37: aload_1
      38: aload_3
      39: invokevirtual #139                // Method io/dekorate/deps/okhttp3/RealCall$AsyncCall.get:()Lio/dekorate/deps/okhttp3/RealCall;
      42: invokeinterface #169,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      47: pop
      48: goto          18
      51: aload_1
      52: invokestatic  #234                // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      55: areturn

  public synchronized java.util.List<io.dekorate.deps.okhttp3.Call> runningCalls();
    Code:
       0: new           #155                // class java/util/ArrayList
       3: dup
       4: invokespecial #156                // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #44                 // Field runningSyncCalls:Ljava/util/Deque;
      13: invokeinterface #240,  2          // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      18: pop
      19: aload_0
      20: getfield      #42                 // Field runningAsyncCalls:Ljava/util/Deque;
      23: invokeinterface #126,  1          // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      28: astore_2
      29: aload_2
      30: invokeinterface #131,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      35: ifeq          62
      38: aload_2
      39: invokeinterface #135,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      44: checkcast     #7                  // class io/dekorate/deps/okhttp3/RealCall$AsyncCall
      47: astore_3
      48: aload_1
      49: aload_3
      50: invokevirtual #139                // Method io/dekorate/deps/okhttp3/RealCall$AsyncCall.get:()Lio/dekorate/deps/okhttp3/RealCall;
      53: invokeinterface #169,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      58: pop
      59: goto          29
      62: aload_1
      63: invokestatic  #234                // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      66: areturn

  public synchronized int queuedCallsCount();
    Code:
       0: aload_0
       1: getfield      #40                 // Field readyAsyncCalls:Ljava/util/Deque;
       4: invokeinterface #161,  1          // InterfaceMethod java/util/Deque.size:()I
       9: ireturn

  public synchronized int runningCallsCount();
    Code:
       0: aload_0
       1: getfield      #42                 // Field runningAsyncCalls:Ljava/util/Deque;
       4: invokeinterface #161,  1          // InterfaceMethod java/util/Deque.size:()I
       9: aload_0
      10: getfield      #44                 // Field runningSyncCalls:Ljava/util/Deque;
      13: invokeinterface #161,  1          // InterfaceMethod java/util/Deque.size:()I
      18: iadd
      19: ireturn

  static {};
    Code:
       0: ldc           #2                  // class io/dekorate/deps/okhttp3/Dispatcher
       2: invokevirtual #247                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #145                // Field $assertionsDisabled:Z
      16: return
}
