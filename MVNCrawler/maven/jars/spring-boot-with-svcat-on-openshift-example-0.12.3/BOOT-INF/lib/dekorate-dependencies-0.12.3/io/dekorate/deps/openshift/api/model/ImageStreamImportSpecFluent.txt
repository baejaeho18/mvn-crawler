Compiled from "ImageStreamImportSpecFluent.java"
public interface io.dekorate.deps.openshift.api.model.ImageStreamImportSpecFluent<A extends io.dekorate.deps.openshift.api.model.ImageStreamImportSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToImages(int, io.dekorate.deps.openshift.api.model.ImageImportSpec);

  public abstract A setToImages(int, io.dekorate.deps.openshift.api.model.ImageImportSpec);

  public abstract A addToImages(io.dekorate.deps.openshift.api.model.ImageImportSpec...);

  public abstract A addAllToImages(java.util.Collection<io.dekorate.deps.openshift.api.model.ImageImportSpec>);

  public abstract A removeFromImages(io.dekorate.deps.openshift.api.model.ImageImportSpec...);

  public abstract A removeAllFromImages(java.util.Collection<io.dekorate.deps.openshift.api.model.ImageImportSpec>);

  public abstract A removeMatchingFromImages(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageImportSpecBuilder>);

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ImageImportSpec> getImages();

  public abstract java.util.List<io.dekorate.deps.openshift.api.model.ImageImportSpec> buildImages();

  public abstract io.dekorate.deps.openshift.api.model.ImageImportSpec buildImage(int);

  public abstract io.dekorate.deps.openshift.api.model.ImageImportSpec buildFirstImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageImportSpec buildLastImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageImportSpec buildMatchingImage(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageImportSpecBuilder>);

  public abstract java.lang.Boolean hasMatchingImage(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageImportSpecBuilder>);

  public abstract A withImages(java.util.List<io.dekorate.deps.openshift.api.model.ImageImportSpec>);

  public abstract A withImages(io.dekorate.deps.openshift.api.model.ImageImportSpec...);

  public abstract java.lang.Boolean hasImages();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportSpecFluent$ImagesNested<A> addNewImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportSpecFluent$ImagesNested<A> addNewImageLike(io.dekorate.deps.openshift.api.model.ImageImportSpec);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportSpecFluent$ImagesNested<A> setNewImageLike(int, io.dekorate.deps.openshift.api.model.ImageImportSpec);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportSpecFluent$ImagesNested<A> editImage(int);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportSpecFluent$ImagesNested<A> editFirstImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportSpecFluent$ImagesNested<A> editLastImage();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportSpecFluent$ImagesNested<A> editMatchingImage(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.openshift.api.model.ImageImportSpecBuilder>);

  public abstract java.lang.Boolean isImport();

  public abstract A withImport(java.lang.Boolean);

  public abstract java.lang.Boolean hasImport();

  public abstract A withNewImport(java.lang.String);

  public abstract A withNewImport(boolean);

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportSpec getRepository();

  public abstract io.dekorate.deps.openshift.api.model.RepositoryImportSpec buildRepository();

  public abstract A withRepository(io.dekorate.deps.openshift.api.model.RepositoryImportSpec);

  public abstract java.lang.Boolean hasRepository();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportSpecFluent$RepositoryNested<A> withNewRepository();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportSpecFluent$RepositoryNested<A> withNewRepositoryLike(io.dekorate.deps.openshift.api.model.RepositoryImportSpec);

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportSpecFluent$RepositoryNested<A> editRepository();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportSpecFluent$RepositoryNested<A> editOrNewRepository();

  public abstract io.dekorate.deps.openshift.api.model.ImageStreamImportSpecFluent$RepositoryNested<A> editOrNewRepositoryLike(io.dekorate.deps.openshift.api.model.RepositoryImportSpec);
}
