Compiled from "BuildTriggerCauseFluent.java"
public interface io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent<A extends io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.openshift.api.model.BitbucketWebHookCause getBitbucketWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BitbucketWebHookCause buildBitbucketWebHook();

  public abstract A withBitbucketWebHook(io.dekorate.deps.openshift.api.model.BitbucketWebHookCause);

  public abstract java.lang.Boolean hasBitbucketWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$BitbucketWebHookNested<A> withNewBitbucketWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$BitbucketWebHookNested<A> withNewBitbucketWebHookLike(io.dekorate.deps.openshift.api.model.BitbucketWebHookCause);

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$BitbucketWebHookNested<A> editBitbucketWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$BitbucketWebHookNested<A> editOrNewBitbucketWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$BitbucketWebHookNested<A> editOrNewBitbucketWebHookLike(io.dekorate.deps.openshift.api.model.BitbucketWebHookCause);

  public abstract io.dekorate.deps.openshift.api.model.GenericWebHookCause getGenericWebHook();

  public abstract io.dekorate.deps.openshift.api.model.GenericWebHookCause buildGenericWebHook();

  public abstract A withGenericWebHook(io.dekorate.deps.openshift.api.model.GenericWebHookCause);

  public abstract java.lang.Boolean hasGenericWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GenericWebHookNested<A> withNewGenericWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GenericWebHookNested<A> withNewGenericWebHookLike(io.dekorate.deps.openshift.api.model.GenericWebHookCause);

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GenericWebHookNested<A> editGenericWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GenericWebHookNested<A> editOrNewGenericWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GenericWebHookNested<A> editOrNewGenericWebHookLike(io.dekorate.deps.openshift.api.model.GenericWebHookCause);

  public abstract io.dekorate.deps.openshift.api.model.GitHubWebHookCause getGithubWebHook();

  public abstract io.dekorate.deps.openshift.api.model.GitHubWebHookCause buildGithubWebHook();

  public abstract A withGithubWebHook(io.dekorate.deps.openshift.api.model.GitHubWebHookCause);

  public abstract java.lang.Boolean hasGithubWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GithubWebHookNested<A> withNewGithubWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GithubWebHookNested<A> withNewGithubWebHookLike(io.dekorate.deps.openshift.api.model.GitHubWebHookCause);

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GithubWebHookNested<A> editGithubWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GithubWebHookNested<A> editOrNewGithubWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GithubWebHookNested<A> editOrNewGithubWebHookLike(io.dekorate.deps.openshift.api.model.GitHubWebHookCause);

  public abstract io.dekorate.deps.openshift.api.model.GitLabWebHookCause getGitlabWebHook();

  public abstract io.dekorate.deps.openshift.api.model.GitLabWebHookCause buildGitlabWebHook();

  public abstract A withGitlabWebHook(io.dekorate.deps.openshift.api.model.GitLabWebHookCause);

  public abstract java.lang.Boolean hasGitlabWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GitlabWebHookNested<A> withNewGitlabWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GitlabWebHookNested<A> withNewGitlabWebHookLike(io.dekorate.deps.openshift.api.model.GitLabWebHookCause);

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GitlabWebHookNested<A> editGitlabWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GitlabWebHookNested<A> editOrNewGitlabWebHook();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$GitlabWebHookNested<A> editOrNewGitlabWebHookLike(io.dekorate.deps.openshift.api.model.GitLabWebHookCause);

  public abstract io.dekorate.deps.openshift.api.model.ImageChangeCause getImageChangeBuild();

  public abstract io.dekorate.deps.openshift.api.model.ImageChangeCause buildImageChangeBuild();

  public abstract A withImageChangeBuild(io.dekorate.deps.openshift.api.model.ImageChangeCause);

  public abstract java.lang.Boolean hasImageChangeBuild();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$ImageChangeBuildNested<A> withNewImageChangeBuild();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$ImageChangeBuildNested<A> withNewImageChangeBuildLike(io.dekorate.deps.openshift.api.model.ImageChangeCause);

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$ImageChangeBuildNested<A> editImageChangeBuild();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$ImageChangeBuildNested<A> editOrNewImageChangeBuild();

  public abstract io.dekorate.deps.openshift.api.model.BuildTriggerCauseFluent$ImageChangeBuildNested<A> editOrNewImageChangeBuildLike(io.dekorate.deps.openshift.api.model.ImageChangeCause);

  public abstract java.lang.String getMessage();

  public abstract A withMessage(java.lang.String);

  public abstract java.lang.Boolean hasMessage();

  public abstract A withNewMessage(java.lang.String);

  public abstract A withNewMessage(java.lang.StringBuilder);

  public abstract A withNewMessage(java.lang.StringBuffer);
}
