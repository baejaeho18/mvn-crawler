Compiled from "SubjectAccessReviewResponseFluent.java"
public interface io.dekorate.deps.openshift.api.model.SubjectAccessReviewResponseFluent<A extends io.dekorate.deps.openshift.api.model.SubjectAccessReviewResponseFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.Boolean isAllowed();

  public abstract A withAllowed(java.lang.Boolean);

  public abstract java.lang.Boolean hasAllowed();

  public abstract A withNewAllowed(java.lang.String);

  public abstract A withNewAllowed(boolean);

  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract java.lang.String getEvaluationError();

  public abstract A withEvaluationError(java.lang.String);

  public abstract java.lang.Boolean hasEvaluationError();

  public abstract A withNewEvaluationError(java.lang.String);

  public abstract A withNewEvaluationError(java.lang.StringBuilder);

  public abstract A withNewEvaluationError(java.lang.StringBuffer);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract java.lang.String getNamespace();

  public abstract A withNamespace(java.lang.String);

  public abstract java.lang.Boolean hasNamespace();

  public abstract A withNewNamespace(java.lang.String);

  public abstract A withNewNamespace(java.lang.StringBuilder);

  public abstract A withNewNamespace(java.lang.StringBuffer);

  public abstract java.lang.String getReason();

  public abstract A withReason(java.lang.String);

  public abstract java.lang.Boolean hasReason();

  public abstract A withNewReason(java.lang.String);

  public abstract A withNewReason(java.lang.StringBuilder);

  public abstract A withNewReason(java.lang.StringBuffer);
}
