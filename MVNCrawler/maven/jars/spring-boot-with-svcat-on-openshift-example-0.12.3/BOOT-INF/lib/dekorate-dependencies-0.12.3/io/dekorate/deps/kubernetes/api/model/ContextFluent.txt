Compiled from "ContextFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.ContextFluent<A extends io.dekorate.deps.kubernetes.api.model.ContextFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getCluster();

  public abstract A withCluster(java.lang.String);

  public abstract java.lang.Boolean hasCluster();

  public abstract A withNewCluster(java.lang.String);

  public abstract A withNewCluster(java.lang.StringBuilder);

  public abstract A withNewCluster(java.lang.StringBuffer);

  public abstract A addToExtensions(int, io.dekorate.deps.kubernetes.api.model.NamedExtension);

  public abstract A setToExtensions(int, io.dekorate.deps.kubernetes.api.model.NamedExtension);

  public abstract A addToExtensions(io.dekorate.deps.kubernetes.api.model.NamedExtension...);

  public abstract A addAllToExtensions(java.util.Collection<io.dekorate.deps.kubernetes.api.model.NamedExtension>);

  public abstract A removeFromExtensions(io.dekorate.deps.kubernetes.api.model.NamedExtension...);

  public abstract A removeAllFromExtensions(java.util.Collection<io.dekorate.deps.kubernetes.api.model.NamedExtension>);

  public abstract A removeMatchingFromExtensions(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.NamedExtensionBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.NamedExtension> getExtensions();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.NamedExtension> buildExtensions();

  public abstract io.dekorate.deps.kubernetes.api.model.NamedExtension buildExtension(int);

  public abstract io.dekorate.deps.kubernetes.api.model.NamedExtension buildFirstExtension();

  public abstract io.dekorate.deps.kubernetes.api.model.NamedExtension buildLastExtension();

  public abstract io.dekorate.deps.kubernetes.api.model.NamedExtension buildMatchingExtension(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.NamedExtensionBuilder>);

  public abstract java.lang.Boolean hasMatchingExtension(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.NamedExtensionBuilder>);

  public abstract A withExtensions(java.util.List<io.dekorate.deps.kubernetes.api.model.NamedExtension>);

  public abstract A withExtensions(io.dekorate.deps.kubernetes.api.model.NamedExtension...);

  public abstract java.lang.Boolean hasExtensions();

  public abstract io.dekorate.deps.kubernetes.api.model.ContextFluent$ExtensionsNested<A> addNewExtension();

  public abstract io.dekorate.deps.kubernetes.api.model.ContextFluent$ExtensionsNested<A> addNewExtensionLike(io.dekorate.deps.kubernetes.api.model.NamedExtension);

  public abstract io.dekorate.deps.kubernetes.api.model.ContextFluent$ExtensionsNested<A> setNewExtensionLike(int, io.dekorate.deps.kubernetes.api.model.NamedExtension);

  public abstract io.dekorate.deps.kubernetes.api.model.ContextFluent$ExtensionsNested<A> editExtension(int);

  public abstract io.dekorate.deps.kubernetes.api.model.ContextFluent$ExtensionsNested<A> editFirstExtension();

  public abstract io.dekorate.deps.kubernetes.api.model.ContextFluent$ExtensionsNested<A> editLastExtension();

  public abstract io.dekorate.deps.kubernetes.api.model.ContextFluent$ExtensionsNested<A> editMatchingExtension(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.NamedExtensionBuilder>);

  public abstract java.lang.String getNamespace();

  public abstract A withNamespace(java.lang.String);

  public abstract java.lang.Boolean hasNamespace();

  public abstract A withNewNamespace(java.lang.String);

  public abstract A withNewNamespace(java.lang.StringBuilder);

  public abstract A withNewNamespace(java.lang.StringBuffer);

  public abstract java.lang.String getUser();

  public abstract A withUser(java.lang.String);

  public abstract java.lang.Boolean hasUser();

  public abstract A withNewUser(java.lang.String);

  public abstract A withNewUser(java.lang.StringBuilder);

  public abstract A withNewUser(java.lang.StringBuffer);
}
