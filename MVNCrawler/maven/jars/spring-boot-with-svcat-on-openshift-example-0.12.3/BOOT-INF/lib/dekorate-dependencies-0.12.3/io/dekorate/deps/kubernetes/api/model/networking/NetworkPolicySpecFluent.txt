Compiled from "NetworkPolicySpecFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent<A extends io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToEgress(int, io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule);

  public abstract A setToEgress(int, io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule);

  public abstract A addToEgress(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule...);

  public abstract A addAllToEgress(java.util.Collection<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule>);

  public abstract A removeFromEgress(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule...);

  public abstract A removeAllFromEgress(java.util.Collection<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule>);

  public abstract A removeMatchingFromEgress(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRuleBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule> getEgress();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule> buildEgress();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule buildEgress(int);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule buildFirstEgress();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule buildLastEgress();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule buildMatchingEgress(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRuleBuilder>);

  public abstract java.lang.Boolean hasMatchingEgress(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRuleBuilder>);

  public abstract A withEgress(java.util.List<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule>);

  public abstract A withEgress(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule...);

  public abstract java.lang.Boolean hasEgress();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$EgressNested<A> addNewEgress();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$EgressNested<A> addNewEgressLike(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$EgressNested<A> setNewEgressLike(int, io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRule);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$EgressNested<A> editEgress(int);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$EgressNested<A> editFirstEgress();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$EgressNested<A> editLastEgress();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$EgressNested<A> editMatchingEgress(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyEgressRuleBuilder>);

  public abstract A addToIngress(int, io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule);

  public abstract A setToIngress(int, io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule);

  public abstract A addToIngress(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule...);

  public abstract A addAllToIngress(java.util.Collection<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule>);

  public abstract A removeFromIngress(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule...);

  public abstract A removeAllFromIngress(java.util.Collection<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule>);

  public abstract A removeMatchingFromIngress(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule> getIngress();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule> buildIngress();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule buildIngress(int);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule buildFirstIngress();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule buildLastIngress();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule buildMatchingIngress(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleBuilder>);

  public abstract java.lang.Boolean hasMatchingIngress(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleBuilder>);

  public abstract A withIngress(java.util.List<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule>);

  public abstract A withIngress(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule...);

  public abstract java.lang.Boolean hasIngress();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$IngressNested<A> addNewIngress();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$IngressNested<A> addNewIngressLike(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$IngressNested<A> setNewIngressLike(int, io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRule);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$IngressNested<A> editIngress(int);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$IngressNested<A> editFirstIngress();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$IngressNested<A> editLastIngress();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$IngressNested<A> editMatchingIngress(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicyIngressRuleBuilder>);

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelector getPodSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelector buildPodSelector();

  public abstract A withPodSelector(io.dekorate.deps.kubernetes.api.model.LabelSelector);

  public abstract java.lang.Boolean hasPodSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$PodSelectorNested<A> withNewPodSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$PodSelectorNested<A> withNewPodSelectorLike(io.dekorate.deps.kubernetes.api.model.LabelSelector);

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$PodSelectorNested<A> editPodSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$PodSelectorNested<A> editOrNewPodSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicySpecFluent$PodSelectorNested<A> editOrNewPodSelectorLike(io.dekorate.deps.kubernetes.api.model.LabelSelector);

  public abstract A addToPolicyTypes(int, java.lang.String);

  public abstract A setToPolicyTypes(int, java.lang.String);

  public abstract A addToPolicyTypes(java.lang.String...);

  public abstract A addAllToPolicyTypes(java.util.Collection<java.lang.String>);

  public abstract A removeFromPolicyTypes(java.lang.String...);

  public abstract A removeAllFromPolicyTypes(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getPolicyTypes();

  public abstract java.lang.String getPolicyType(int);

  public abstract java.lang.String getFirstPolicyType();

  public abstract java.lang.String getLastPolicyType();

  public abstract java.lang.String getMatchingPolicyType(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingPolicyType(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withPolicyTypes(java.util.List<java.lang.String>);

  public abstract A withPolicyTypes(java.lang.String...);

  public abstract java.lang.Boolean hasPolicyTypes();

  public abstract A addNewPolicyType(java.lang.String);

  public abstract A addNewPolicyType(java.lang.StringBuilder);

  public abstract A addNewPolicyType(java.lang.StringBuffer);
}
