Compiled from "ContainerSourceSpecFluent.java"
public interface io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSourceSpecFluent<A extends io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSourceSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToArgs(int, java.lang.String);

  public abstract A setToArgs(int, java.lang.String);

  public abstract A addToArgs(java.lang.String...);

  public abstract A addAllToArgs(java.util.Collection<java.lang.String>);

  public abstract A removeFromArgs(java.lang.String...);

  public abstract A removeAllFromArgs(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getArgs();

  public abstract java.lang.String getArg(int);

  public abstract java.lang.String getFirstArg();

  public abstract java.lang.String getLastArg();

  public abstract java.lang.String getMatchingArg(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingArg(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withArgs(java.util.List<java.lang.String>);

  public abstract A withArgs(java.lang.String...);

  public abstract java.lang.Boolean hasArgs();

  public abstract A addNewArg(java.lang.String);

  public abstract A addNewArg(java.lang.StringBuilder);

  public abstract A addNewArg(java.lang.StringBuffer);

  public abstract A addToEnv(int, io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract A setToEnv(int, io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract A addToEnv(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract A addAllToEnv(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A removeFromEnv(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract A removeAllFromEnv(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EnvVar> getEnv();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar getEnv(int);

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar getFirstEnv();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar getLastEnv();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar getMatchingEnv(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract java.lang.Boolean hasMatchingEnv(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(java.util.List<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract java.lang.Boolean hasEnv();

  public abstract java.lang.String getImage();

  public abstract A withImage(java.lang.String);

  public abstract java.lang.Boolean hasImage();

  public abstract A withNewImage(java.lang.String);

  public abstract A withNewImage(java.lang.StringBuilder);

  public abstract A withNewImage(java.lang.StringBuffer);

  public abstract java.lang.String getServiceAccountName();

  public abstract A withServiceAccountName(java.lang.String);

  public abstract java.lang.Boolean hasServiceAccountName();

  public abstract A withNewServiceAccountName(java.lang.String);

  public abstract A withNewServiceAccountName(java.lang.StringBuilder);

  public abstract A withNewServiceAccountName(java.lang.StringBuffer);

  public abstract io.dekorate.deps.knative.duck.v1beta1.Destination getSink();

  public abstract io.dekorate.deps.knative.duck.v1beta1.Destination buildSink();

  public abstract A withSink(io.dekorate.deps.knative.duck.v1beta1.Destination);

  public abstract java.lang.Boolean hasSink();

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSourceSpecFluent$V1beta1SinkNested<A> withNewV1beta1Sink();

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSourceSpecFluent$V1beta1SinkNested<A> withNewSinkLike(io.dekorate.deps.knative.duck.v1beta1.Destination);

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSourceSpecFluent$V1beta1SinkNested<A> editV1beta1Sink();

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSourceSpecFluent$V1beta1SinkNested<A> editOrNewSink();

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSourceSpecFluent$V1beta1SinkNested<A> editOrNewSinkLike(io.dekorate.deps.knative.duck.v1beta1.Destination);

  public abstract io.dekorate.deps.kubernetes.api.model.PodTemplateSpec getTemplate();

  public abstract A withTemplate(io.dekorate.deps.kubernetes.api.model.PodTemplateSpec);

  public abstract java.lang.Boolean hasTemplate();
}
