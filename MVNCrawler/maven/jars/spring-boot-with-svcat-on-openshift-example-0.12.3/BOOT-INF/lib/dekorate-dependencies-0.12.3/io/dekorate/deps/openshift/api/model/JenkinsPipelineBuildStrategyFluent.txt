Compiled from "JenkinsPipelineBuildStrategyFluent.java"
public interface io.dekorate.deps.openshift.api.model.JenkinsPipelineBuildStrategyFluent<A extends io.dekorate.deps.openshift.api.model.JenkinsPipelineBuildStrategyFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToEnv(int, io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract A setToEnv(int, io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract A addToEnv(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract A addAllToEnv(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A removeFromEnv(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract A removeAllFromEnv(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A removeMatchingFromEnv(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVarBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EnvVar> getEnv();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EnvVar> buildEnv();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar buildEnv(int);

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar buildFirstEnv();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar buildLastEnv();

  public abstract io.dekorate.deps.kubernetes.api.model.EnvVar buildMatchingEnv(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVarBuilder>);

  public abstract java.lang.Boolean hasMatchingEnv(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVarBuilder>);

  public abstract A withEnv(java.util.List<io.dekorate.deps.kubernetes.api.model.EnvVar>);

  public abstract A withEnv(io.dekorate.deps.kubernetes.api.model.EnvVar...);

  public abstract java.lang.Boolean hasEnv();

  public abstract io.dekorate.deps.openshift.api.model.JenkinsPipelineBuildStrategyFluent$EnvNested<A> addNewEnv();

  public abstract io.dekorate.deps.openshift.api.model.JenkinsPipelineBuildStrategyFluent$EnvNested<A> addNewEnvLike(io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract io.dekorate.deps.openshift.api.model.JenkinsPipelineBuildStrategyFluent$EnvNested<A> setNewEnvLike(int, io.dekorate.deps.kubernetes.api.model.EnvVar);

  public abstract io.dekorate.deps.openshift.api.model.JenkinsPipelineBuildStrategyFluent$EnvNested<A> editEnv(int);

  public abstract io.dekorate.deps.openshift.api.model.JenkinsPipelineBuildStrategyFluent$EnvNested<A> editFirstEnv();

  public abstract io.dekorate.deps.openshift.api.model.JenkinsPipelineBuildStrategyFluent$EnvNested<A> editLastEnv();

  public abstract io.dekorate.deps.openshift.api.model.JenkinsPipelineBuildStrategyFluent$EnvNested<A> editMatchingEnv(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EnvVarBuilder>);

  public abstract java.lang.String getJenkinsfile();

  public abstract A withJenkinsfile(java.lang.String);

  public abstract java.lang.Boolean hasJenkinsfile();

  public abstract A withNewJenkinsfile(java.lang.String);

  public abstract A withNewJenkinsfile(java.lang.StringBuilder);

  public abstract A withNewJenkinsfile(java.lang.StringBuffer);

  public abstract java.lang.String getJenkinsfilePath();

  public abstract A withJenkinsfilePath(java.lang.String);

  public abstract java.lang.Boolean hasJenkinsfilePath();

  public abstract A withNewJenkinsfilePath(java.lang.String);

  public abstract A withNewJenkinsfilePath(java.lang.StringBuilder);

  public abstract A withNewJenkinsfilePath(java.lang.StringBuffer);
}
