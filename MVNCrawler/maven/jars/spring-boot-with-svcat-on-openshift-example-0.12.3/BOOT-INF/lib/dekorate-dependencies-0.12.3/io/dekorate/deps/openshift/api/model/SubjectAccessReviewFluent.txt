Compiled from "SubjectAccessReviewFluent.java"
public interface io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent<A extends io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract java.lang.String getApiVersion();

  public abstract A withApiVersion(java.lang.String);

  public abstract java.lang.Boolean hasApiVersion();

  public abstract A withNewApiVersion(java.lang.String);

  public abstract A withNewApiVersion(java.lang.StringBuilder);

  public abstract A withNewApiVersion(java.lang.StringBuffer);

  public abstract io.dekorate.deps.kubernetes.api.model.HasMetadata getContent();

  public abstract io.dekorate.deps.kubernetes.api.model.HasMetadata buildContent();

  public abstract A withContent(io.dekorate.deps.kubernetes.api.model.HasMetadata);

  public abstract java.lang.Boolean hasContent();

  public abstract A withValidatingWebhookConfigurationContent(io.dekorate.deps.kubernetes.api.model.admissionregistration.ValidatingWebhookConfiguration);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ValidatingWebhookConfigurationContentNested<A> withNewValidatingWebhookConfigurationContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ValidatingWebhookConfigurationContentNested<A> withNewValidatingWebhookConfigurationContentLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.ValidatingWebhookConfiguration);

  public abstract A withStorageClassContent(io.dekorate.deps.kubernetes.api.model.storage.StorageClass);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$StorageClassContentNested<A> withNewStorageClassContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$StorageClassContentNested<A> withNewStorageClassContentLike(io.dekorate.deps.kubernetes.api.model.storage.StorageClass);

  public abstract A withClusterRoleBindingContent(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleBinding);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ClusterRoleBindingContentNested<A> withNewClusterRoleBindingContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ClusterRoleBindingContentNested<A> withNewClusterRoleBindingContentLike(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRoleBinding);

  public abstract A withCSINodeContent(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSINode);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$CSINodeContentNested<A> withNewCSINodeContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$CSINodeContentNested<A> withNewCSINodeContentLike(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSINode);

  public abstract A withOpenshiftRoleBindingContent(io.dekorate.deps.openshift.api.model.OpenshiftRoleBinding);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OpenshiftRoleBindingContentNested<A> withNewOpenshiftRoleBindingContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OpenshiftRoleBindingContentNested<A> withNewOpenshiftRoleBindingContentLike(io.dekorate.deps.openshift.api.model.OpenshiftRoleBinding);

  public abstract A withPodDisruptionBudgetContent(io.dekorate.deps.kubernetes.api.model.policy.PodDisruptionBudget);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PodDisruptionBudgetContentNested<A> withNewPodDisruptionBudgetContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PodDisruptionBudgetContentNested<A> withNewPodDisruptionBudgetContentLike(io.dekorate.deps.kubernetes.api.model.policy.PodDisruptionBudget);

  public abstract A withOpenshiftClusterRoleBindingContent(io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleBinding);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OpenshiftClusterRoleBindingContentNested<A> withNewOpenshiftClusterRoleBindingContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OpenshiftClusterRoleBindingContentNested<A> withNewOpenshiftClusterRoleBindingContentLike(io.dekorate.deps.openshift.api.model.OpenshiftClusterRoleBinding);

  public abstract A withNetworkPolicyContent(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicy);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$NetworkPolicyContentNested<A> withNewNetworkPolicyContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$NetworkPolicyContentNested<A> withNewNetworkPolicyContentLike(io.dekorate.deps.kubernetes.api.model.networking.NetworkPolicy);

  public abstract A withRouteContent(io.dekorate.deps.openshift.api.model.Route);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$RouteContentNested<A> withNewRouteContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$RouteContentNested<A> withNewRouteContentLike(io.dekorate.deps.openshift.api.model.Route);

  public abstract A withNamespaceContent(io.dekorate.deps.kubernetes.api.model.Namespace);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$NamespaceContentNested<A> withNewNamespaceContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$NamespaceContentNested<A> withNewNamespaceContentLike(io.dekorate.deps.kubernetes.api.model.Namespace);

  public abstract A withLocalSubjectAccessReviewContent(io.dekorate.deps.kubernetes.api.model.authorization.LocalSubjectAccessReview);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$LocalSubjectAccessReviewContentNested<A> withNewLocalSubjectAccessReviewContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$LocalSubjectAccessReviewContentNested<A> withNewLocalSubjectAccessReviewContentLike(io.dekorate.deps.kubernetes.api.model.authorization.LocalSubjectAccessReview);

  public abstract A withLeaseContent(io.dekorate.deps.kubernetes.api.model.coordination.v1.Lease);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$LeaseContentNested<A> withNewLeaseContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$LeaseContentNested<A> withNewLeaseContentLike(io.dekorate.deps.kubernetes.api.model.coordination.v1.Lease);

  public abstract A withServiceContent(io.dekorate.deps.kubernetes.api.model.Service);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ServiceContentNested<A> withNewServiceContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ServiceContentNested<A> withNewServiceContentLike(io.dekorate.deps.kubernetes.api.model.Service);

  public abstract A withReplicationControllerContent(io.dekorate.deps.kubernetes.api.model.ReplicationController);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ReplicationControllerContentNested<A> withNewReplicationControllerContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ReplicationControllerContentNested<A> withNewReplicationControllerContentLike(io.dekorate.deps.kubernetes.api.model.ReplicationController);

  public abstract A withMutatingWebhookConfigurationContent(io.dekorate.deps.kubernetes.api.model.admissionregistration.MutatingWebhookConfiguration);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$MutatingWebhookConfigurationContentNested<A> withNewMutatingWebhookConfigurationContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$MutatingWebhookConfigurationContentNested<A> withNewMutatingWebhookConfigurationContentLike(io.dekorate.deps.kubernetes.api.model.admissionregistration.MutatingWebhookConfiguration);

  public abstract A withPodMetricsContent(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.PodMetrics);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PodMetricsContentNested<A> withNewPodMetricsContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PodMetricsContentNested<A> withNewPodMetricsContentLike(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.PodMetrics);

  public abstract A withHorizontalPodAutoscalerContent(io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscaler);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$HorizontalPodAutoscalerContentNested<A> withNewHorizontalPodAutoscalerContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$HorizontalPodAutoscalerContentNested<A> withNewHorizontalPodAutoscalerContentLike(io.dekorate.deps.kubernetes.api.model.HorizontalPodAutoscaler);

  public abstract A withImageContent(io.dekorate.deps.openshift.api.model.Image);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ImageContentNested<A> withNewImageContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ImageContentNested<A> withNewImageContentLike(io.dekorate.deps.openshift.api.model.Image);

  public abstract A withReplicaSetContent(io.dekorate.deps.kubernetes.api.model.apps.ReplicaSet);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ReplicaSetContentNested<A> withNewReplicaSetContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ReplicaSetContentNested<A> withNewReplicaSetContentLike(io.dekorate.deps.kubernetes.api.model.apps.ReplicaSet);

  public abstract A withEndpointSliceContent(io.dekorate.deps.kubernetes.api.model.discovery.EndpointSlice);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$EndpointSliceContentNested<A> withNewEndpointSliceContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$EndpointSliceContentNested<A> withNewEndpointSliceContentLike(io.dekorate.deps.kubernetes.api.model.discovery.EndpointSlice);

  public abstract A withCronJobContent(io.dekorate.deps.kubernetes.api.model.batch.CronJob);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$CronJobContentNested<A> withNewCronJobContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$CronJobContentNested<A> withNewCronJobContentLike(io.dekorate.deps.kubernetes.api.model.batch.CronJob);

  public abstract A withEndpointsContent(io.dekorate.deps.kubernetes.api.model.Endpoints);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$EndpointsContentNested<A> withNewEndpointsContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$EndpointsContentNested<A> withNewEndpointsContentLike(io.dekorate.deps.kubernetes.api.model.Endpoints);

  public abstract A withPodContent(io.dekorate.deps.kubernetes.api.model.Pod);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PodContentNested<A> withNewPodContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PodContentNested<A> withNewPodContentLike(io.dekorate.deps.kubernetes.api.model.Pod);

  public abstract A withConfigMapContent(io.dekorate.deps.kubernetes.api.model.ConfigMap);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ConfigMapContentNested<A> withNewConfigMapContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ConfigMapContentNested<A> withNewConfigMapContentLike(io.dekorate.deps.kubernetes.api.model.ConfigMap);

  public abstract A withCustomResourceDefinitionContent(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinition);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$CustomResourceDefinitionContentNested<A> withNewCustomResourceDefinitionContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$CustomResourceDefinitionContentNested<A> withNewCustomResourceDefinitionContentLike(io.dekorate.deps.kubernetes.api.model.apiextensions.CustomResourceDefinition);

  public abstract A withBuildContent(io.dekorate.deps.openshift.api.model.Build);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$BuildContentNested<A> withNewBuildContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$BuildContentNested<A> withNewBuildContentLike(io.dekorate.deps.openshift.api.model.Build);

  public abstract A withImageStreamTagContent(io.dekorate.deps.openshift.api.model.ImageStreamTag);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ImageStreamTagContentNested<A> withNewImageStreamTagContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ImageStreamTagContentNested<A> withNewImageStreamTagContentLike(io.dekorate.deps.openshift.api.model.ImageStreamTag);

  public abstract A withGroupContent(io.dekorate.deps.openshift.api.model.Group);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$GroupContentNested<A> withNewGroupContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$GroupContentNested<A> withNewGroupContentLike(io.dekorate.deps.openshift.api.model.Group);

  public abstract A withImageSignatureContent(io.dekorate.deps.openshift.api.model.ImageSignature);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ImageSignatureContentNested<A> withNewImageSignatureContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ImageSignatureContentNested<A> withNewImageSignatureContentLike(io.dekorate.deps.openshift.api.model.ImageSignature);

  public abstract A withScaleContent(io.dekorate.deps.kubernetes.api.model.v1.Scale);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ScaleContentNested<A> withNewScaleContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ScaleContentNested<A> withNewScaleContentLike(io.dekorate.deps.kubernetes.api.model.v1.Scale);

  public abstract A withResourceQuotaContent(io.dekorate.deps.kubernetes.api.model.ResourceQuota);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ResourceQuotaContentNested<A> withNewResourceQuotaContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ResourceQuotaContentNested<A> withNewResourceQuotaContentLike(io.dekorate.deps.kubernetes.api.model.ResourceQuota);

  public abstract A withBuildRequestContent(io.dekorate.deps.openshift.api.model.BuildRequest);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$BuildRequestContentNested<A> withNewBuildRequestContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$BuildRequestContentNested<A> withNewBuildRequestContentLike(io.dekorate.deps.openshift.api.model.BuildRequest);

  public abstract A withDaemonSetContent(io.dekorate.deps.kubernetes.api.model.apps.DaemonSet);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$DaemonSetContentNested<A> withNewDaemonSetContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$DaemonSetContentNested<A> withNewDaemonSetContentLike(io.dekorate.deps.kubernetes.api.model.apps.DaemonSet);

  public abstract A withImageStreamContent(io.dekorate.deps.openshift.api.model.ImageStream);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ImageStreamContentNested<A> withNewImageStreamContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ImageStreamContentNested<A> withNewImageStreamContentLike(io.dekorate.deps.openshift.api.model.ImageStream);

  public abstract A withOpenshiftRoleContent(io.dekorate.deps.openshift.api.model.OpenshiftRole);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OpenshiftRoleContentNested<A> withNewOpenshiftRoleContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OpenshiftRoleContentNested<A> withNewOpenshiftRoleContentLike(io.dekorate.deps.openshift.api.model.OpenshiftRole);

  public abstract A withOAuthClientContent(io.dekorate.deps.openshift.api.model.OAuthClient);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OAuthClientContentNested<A> withNewOAuthClientContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OAuthClientContentNested<A> withNewOAuthClientContentLike(io.dekorate.deps.openshift.api.model.OAuthClient);

  public abstract A withIdentityContent(io.dekorate.deps.openshift.api.model.Identity);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$IdentityContentNested<A> withNewIdentityContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$IdentityContentNested<A> withNewIdentityContentLike(io.dekorate.deps.openshift.api.model.Identity);

  public abstract A withLimitRangeContent(io.dekorate.deps.kubernetes.api.model.LimitRange);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$LimitRangeContentNested<A> withNewLimitRangeContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$LimitRangeContentNested<A> withNewLimitRangeContentLike(io.dekorate.deps.kubernetes.api.model.LimitRange);

  public abstract A withClusterVersionContent(io.dekorate.deps.openshift.api.model.ClusterVersion);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ClusterVersionContentNested<A> withNewClusterVersionContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ClusterVersionContentNested<A> withNewClusterVersionContentLike(io.dekorate.deps.openshift.api.model.ClusterVersion);

  public abstract A withCSIDriverContent(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSIDriver);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$CSIDriverContentNested<A> withNewCSIDriverContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$CSIDriverContentNested<A> withNewCSIDriverContentLike(io.dekorate.deps.kubernetes.api.model.storage.v1beta1.CSIDriver);

  public abstract A withImageStreamImportContent(io.dekorate.deps.openshift.api.model.ImageStreamImport);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ImageStreamImportContentNested<A> withNewImageStreamImportContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ImageStreamImportContentNested<A> withNewImageStreamImportContentLike(io.dekorate.deps.openshift.api.model.ImageStreamImport);

  public abstract A withControllerRevisionContent(io.dekorate.deps.kubernetes.api.model.apps.ControllerRevision);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ControllerRevisionContentNested<A> withNewControllerRevisionContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ControllerRevisionContentNested<A> withNewControllerRevisionContentLike(io.dekorate.deps.kubernetes.api.model.apps.ControllerRevision);

  public abstract A withOpenshiftRoleBindingRestrictionContent(io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingRestriction);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OpenshiftRoleBindingRestrictionContentNested<A> withNewOpenshiftRoleBindingRestrictionContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OpenshiftRoleBindingRestrictionContentNested<A> withNewOpenshiftRoleBindingRestrictionContentLike(io.dekorate.deps.openshift.api.model.OpenshiftRoleBindingRestriction);

  public abstract A withRoleBindingContent(io.dekorate.deps.kubernetes.api.model.rbac.RoleBinding);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$RoleBindingContentNested<A> withNewRoleBindingContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$RoleBindingContentNested<A> withNewRoleBindingContentLike(io.dekorate.deps.kubernetes.api.model.rbac.RoleBinding);

  public abstract A withPodPresetContent(io.dekorate.deps.kubernetes.api.model.settings.PodPreset);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PodPresetContentNested<A> withNewPodPresetContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PodPresetContentNested<A> withNewPodPresetContentLike(io.dekorate.deps.kubernetes.api.model.settings.PodPreset);

  public abstract A withProjectContent(io.dekorate.deps.openshift.api.model.Project);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ProjectContentNested<A> withNewProjectContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ProjectContentNested<A> withNewProjectContentLike(io.dekorate.deps.openshift.api.model.Project);

  public abstract A withNodeMetricsContent(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.NodeMetrics);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$NodeMetricsContentNested<A> withNewNodeMetricsContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$NodeMetricsContentNested<A> withNewNodeMetricsContentLike(io.dekorate.deps.kubernetes.api.model.metrics.v1beta1.NodeMetrics);

  public abstract A withBuildConfigContent(io.dekorate.deps.openshift.api.model.BuildConfig);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$BuildConfigContentNested<A> withNewBuildConfigContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$BuildConfigContentNested<A> withNewBuildConfigContentLike(io.dekorate.deps.openshift.api.model.BuildConfig);

  public abstract A withClusterRoleContent(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRole);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ClusterRoleContentNested<A> withNewClusterRoleContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ClusterRoleContentNested<A> withNewClusterRoleContentLike(io.dekorate.deps.kubernetes.api.model.rbac.ClusterRole);

  public abstract A withVolumeAttachmentContent(io.dekorate.deps.kubernetes.api.model.storage.VolumeAttachment);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$VolumeAttachmentContentNested<A> withNewVolumeAttachmentContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$VolumeAttachmentContentNested<A> withNewVolumeAttachmentContentLike(io.dekorate.deps.kubernetes.api.model.storage.VolumeAttachment);

  public abstract A withOAuthAuthorizeTokenContent(io.dekorate.deps.openshift.api.model.OAuthAuthorizeToken);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OAuthAuthorizeTokenContentNested<A> withNewOAuthAuthorizeTokenContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OAuthAuthorizeTokenContentNested<A> withNewOAuthAuthorizeTokenContentLike(io.dekorate.deps.openshift.api.model.OAuthAuthorizeToken);

  public abstract A withSelfSubjectAccessReviewContent(io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectAccessReview);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$SelfSubjectAccessReviewContentNested<A> withNewSelfSubjectAccessReviewContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$SelfSubjectAccessReviewContentNested<A> withNewSelfSubjectAccessReviewContentLike(io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectAccessReview);

  public abstract A withProjectRequestContent(io.dekorate.deps.openshift.api.model.ProjectRequest);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ProjectRequestContentNested<A> withNewProjectRequestContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ProjectRequestContentNested<A> withNewProjectRequestContentLike(io.dekorate.deps.openshift.api.model.ProjectRequest);

  public abstract A withTemplateContent(io.dekorate.deps.openshift.api.model.Template);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$TemplateContentNested<A> withNewTemplateContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$TemplateContentNested<A> withNewTemplateContentLike(io.dekorate.deps.openshift.api.model.Template);

  public abstract A withPriorityClassContent(io.dekorate.deps.kubernetes.api.model.scheduling.PriorityClass);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PriorityClassContentNested<A> withNewPriorityClassContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PriorityClassContentNested<A> withNewPriorityClassContentLike(io.dekorate.deps.kubernetes.api.model.scheduling.PriorityClass);

  public abstract A withOAuthClientAuthorizationContent(io.dekorate.deps.openshift.api.model.OAuthClientAuthorization);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OAuthClientAuthorizationContentNested<A> withNewOAuthClientAuthorizationContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OAuthClientAuthorizationContentNested<A> withNewOAuthClientAuthorizationContentLike(io.dekorate.deps.openshift.api.model.OAuthClientAuthorization);

  public abstract A withDeploymentContent(io.dekorate.deps.kubernetes.api.model.apps.Deployment);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$DeploymentContentNested<A> withNewDeploymentContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$DeploymentContentNested<A> withNewDeploymentContentLike(io.dekorate.deps.kubernetes.api.model.apps.Deployment);

  public abstract A withPodTemplateContent(io.dekorate.deps.kubernetes.api.model.PodTemplate);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PodTemplateContentNested<A> withNewPodTemplateContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PodTemplateContentNested<A> withNewPodTemplateContentLike(io.dekorate.deps.kubernetes.api.model.PodTemplate);

  public abstract A withEventContent(io.dekorate.deps.kubernetes.api.model.Event);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$EventContentNested<A> withNewEventContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$EventContentNested<A> withNewEventContentLike(io.dekorate.deps.kubernetes.api.model.Event);

  public abstract A withIngressContent(io.dekorate.deps.kubernetes.api.model.extensions.Ingress);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$IngressContentNested<A> withNewIngressContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$IngressContentNested<A> withNewIngressContentLike(io.dekorate.deps.kubernetes.api.model.extensions.Ingress);

  public abstract A withDeploymentConfigContent(io.dekorate.deps.openshift.api.model.DeploymentConfig);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$DeploymentConfigContentNested<A> withNewDeploymentConfigContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$DeploymentConfigContentNested<A> withNewDeploymentConfigContentLike(io.dekorate.deps.openshift.api.model.DeploymentConfig);

  public abstract A withOAuthAccessTokenContent(io.dekorate.deps.openshift.api.model.OAuthAccessToken);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OAuthAccessTokenContentNested<A> withNewOAuthAccessTokenContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OAuthAccessTokenContentNested<A> withNewOAuthAccessTokenContentLike(io.dekorate.deps.openshift.api.model.OAuthAccessToken);

  public abstract A withPersistentVolumeContent(io.dekorate.deps.kubernetes.api.model.PersistentVolume);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PersistentVolumeContentNested<A> withNewPersistentVolumeContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PersistentVolumeContentNested<A> withNewPersistentVolumeContentLike(io.dekorate.deps.kubernetes.api.model.PersistentVolume);

  public abstract A withPersistentVolumeClaimContent(io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PersistentVolumeClaimContentNested<A> withNewPersistentVolumeClaimContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PersistentVolumeClaimContentNested<A> withNewPersistentVolumeClaimContentLike(io.dekorate.deps.kubernetes.api.model.PersistentVolumeClaim);

  public abstract A withPodSecurityPolicyContent(io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicy);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PodSecurityPolicyContentNested<A> withNewPodSecurityPolicyContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$PodSecurityPolicyContentNested<A> withNewPodSecurityPolicyContentLike(io.dekorate.deps.kubernetes.api.model.policy.PodSecurityPolicy);

  public abstract A withEventContent(io.dekorate.deps.kubernetes.api.model.events.Event);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$EventsEventContentNested<A> withNewEventsEventContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$EventsEventContentNested<A> withNewEventContentLike(io.dekorate.deps.kubernetes.api.model.events.Event);

  public abstract A withStatefulSetContent(io.dekorate.deps.kubernetes.api.model.apps.StatefulSet);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$StatefulSetContentNested<A> withNewStatefulSetContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$StatefulSetContentNested<A> withNewStatefulSetContentLike(io.dekorate.deps.kubernetes.api.model.apps.StatefulSet);

  public abstract A withOpenshiftClusterRoleContent(io.dekorate.deps.openshift.api.model.OpenshiftClusterRole);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OpenshiftClusterRoleContentNested<A> withNewOpenshiftClusterRoleContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$OpenshiftClusterRoleContentNested<A> withNewOpenshiftClusterRoleContentLike(io.dekorate.deps.openshift.api.model.OpenshiftClusterRole);

  public abstract A withSelfSubjectRulesReviewContent(io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectRulesReview);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$SelfSubjectRulesReviewContentNested<A> withNewSelfSubjectRulesReviewContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$SelfSubjectRulesReviewContentNested<A> withNewSelfSubjectRulesReviewContentLike(io.dekorate.deps.kubernetes.api.model.authorization.SelfSubjectRulesReview);

  public abstract A withRoleContent(io.dekorate.deps.kubernetes.api.model.rbac.Role);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$RoleContentNested<A> withNewRoleContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$RoleContentNested<A> withNewRoleContentLike(io.dekorate.deps.kubernetes.api.model.rbac.Role);

  public abstract A withUserContent(io.dekorate.deps.openshift.api.model.User);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$UserContentNested<A> withNewUserContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$UserContentNested<A> withNewUserContentLike(io.dekorate.deps.openshift.api.model.User);

  public abstract A withComponentStatusContent(io.dekorate.deps.kubernetes.api.model.ComponentStatus);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ComponentStatusContentNested<A> withNewComponentStatusContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ComponentStatusContentNested<A> withNewComponentStatusContentLike(io.dekorate.deps.kubernetes.api.model.ComponentStatus);

  public abstract A withTokenReviewContent(io.dekorate.deps.kubernetes.api.model.authentication.TokenReview);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$TokenReviewContentNested<A> withNewTokenReviewContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$TokenReviewContentNested<A> withNewTokenReviewContentLike(io.dekorate.deps.kubernetes.api.model.authentication.TokenReview);

  public abstract A withBindingContent(io.dekorate.deps.kubernetes.api.model.Binding);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$BindingContentNested<A> withNewBindingContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$BindingContentNested<A> withNewBindingContentLike(io.dekorate.deps.kubernetes.api.model.Binding);

  public abstract A withSecretContent(io.dekorate.deps.kubernetes.api.model.Secret);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$SecretContentNested<A> withNewSecretContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$SecretContentNested<A> withNewSecretContentLike(io.dekorate.deps.kubernetes.api.model.Secret);

  public abstract A withSecurityContextConstraintsContent(io.dekorate.deps.openshift.api.model.SecurityContextConstraints);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$SecurityContextConstraintsContentNested<A> withNewSecurityContextConstraintsContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$SecurityContextConstraintsContentNested<A> withNewSecurityContextConstraintsContentLike(io.dekorate.deps.openshift.api.model.SecurityContextConstraints);

  public abstract A withNetNamespaceContent(io.dekorate.deps.openshift.api.model.NetNamespace);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$NetNamespaceContentNested<A> withNewNetNamespaceContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$NetNamespaceContentNested<A> withNewNetNamespaceContentLike(io.dekorate.deps.openshift.api.model.NetNamespace);

  public abstract A withNodeContent(io.dekorate.deps.kubernetes.api.model.Node);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$NodeContentNested<A> withNewNodeContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$NodeContentNested<A> withNewNodeContentLike(io.dekorate.deps.kubernetes.api.model.Node);

  public abstract A withJobContent(io.dekorate.deps.kubernetes.api.model.batch.Job);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$JobContentNested<A> withNewJobContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$JobContentNested<A> withNewJobContentLike(io.dekorate.deps.kubernetes.api.model.batch.Job);

  public abstract A withCertificateSigningRequestContent(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequest);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$CertificateSigningRequestContentNested<A> withNewCertificateSigningRequestContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$CertificateSigningRequestContentNested<A> withNewCertificateSigningRequestContentLike(io.dekorate.deps.kubernetes.api.model.certificates.CertificateSigningRequest);

  public abstract A withServiceAccountContent(io.dekorate.deps.kubernetes.api.model.ServiceAccount);

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ServiceAccountContentNested<A> withNewServiceAccountContent();

  public abstract io.dekorate.deps.openshift.api.model.SubjectAccessReviewFluent$ServiceAccountContentNested<A> withNewServiceAccountContentLike(io.dekorate.deps.kubernetes.api.model.ServiceAccount);

  public abstract A addToGroups(int, java.lang.String);

  public abstract A setToGroups(int, java.lang.String);

  public abstract A addToGroups(java.lang.String...);

  public abstract A addAllToGroups(java.util.Collection<java.lang.String>);

  public abstract A removeFromGroups(java.lang.String...);

  public abstract A removeAllFromGroups(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getGroups();

  public abstract java.lang.String getGroup(int);

  public abstract java.lang.String getFirstGroup();

  public abstract java.lang.String getLastGroup();

  public abstract java.lang.String getMatchingGroup(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingGroup(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withGroups(java.util.List<java.lang.String>);

  public abstract A withGroups(java.lang.String...);

  public abstract java.lang.Boolean hasGroups();

  public abstract A addNewGroup(java.lang.String);

  public abstract A addNewGroup(java.lang.StringBuilder);

  public abstract A addNewGroup(java.lang.StringBuffer);

  public abstract java.lang.Boolean isIsNonResourceURL();

  public abstract A withIsNonResourceURL(java.lang.Boolean);

  public abstract java.lang.Boolean hasIsNonResourceURL();

  public abstract A withNewIsNonResourceURL(java.lang.String);

  public abstract A withNewIsNonResourceURL(boolean);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract java.lang.String getNamespace();

  public abstract A withNamespace(java.lang.String);

  public abstract java.lang.Boolean hasNamespace();

  public abstract A withNewNamespace(java.lang.String);

  public abstract A withNewNamespace(java.lang.StringBuilder);

  public abstract A withNewNamespace(java.lang.StringBuffer);

  public abstract java.lang.String getPath();

  public abstract A withPath(java.lang.String);

  public abstract java.lang.Boolean hasPath();

  public abstract A withNewPath(java.lang.String);

  public abstract A withNewPath(java.lang.StringBuilder);

  public abstract A withNewPath(java.lang.StringBuffer);

  public abstract java.lang.String getResource();

  public abstract A withResource(java.lang.String);

  public abstract java.lang.Boolean hasResource();

  public abstract A withNewResource(java.lang.String);

  public abstract A withNewResource(java.lang.StringBuilder);

  public abstract A withNewResource(java.lang.StringBuffer);

  public abstract java.lang.String getResourceAPIGroup();

  public abstract A withResourceAPIGroup(java.lang.String);

  public abstract java.lang.Boolean hasResourceAPIGroup();

  public abstract A withNewResourceAPIGroup(java.lang.String);

  public abstract A withNewResourceAPIGroup(java.lang.StringBuilder);

  public abstract A withNewResourceAPIGroup(java.lang.StringBuffer);

  public abstract java.lang.String getResourceAPIVersion();

  public abstract A withResourceAPIVersion(java.lang.String);

  public abstract java.lang.Boolean hasResourceAPIVersion();

  public abstract A withNewResourceAPIVersion(java.lang.String);

  public abstract A withNewResourceAPIVersion(java.lang.StringBuilder);

  public abstract A withNewResourceAPIVersion(java.lang.StringBuffer);

  public abstract java.lang.String getResourceName();

  public abstract A withResourceName(java.lang.String);

  public abstract java.lang.Boolean hasResourceName();

  public abstract A withNewResourceName(java.lang.String);

  public abstract A withNewResourceName(java.lang.StringBuilder);

  public abstract A withNewResourceName(java.lang.StringBuffer);

  public abstract A addToScopes(int, java.lang.String);

  public abstract A setToScopes(int, java.lang.String);

  public abstract A addToScopes(java.lang.String...);

  public abstract A addAllToScopes(java.util.Collection<java.lang.String>);

  public abstract A removeFromScopes(java.lang.String...);

  public abstract A removeAllFromScopes(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getScopes();

  public abstract java.lang.String getScope(int);

  public abstract java.lang.String getFirstScope();

  public abstract java.lang.String getLastScope();

  public abstract java.lang.String getMatchingScope(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingScope(io.dekorate.deps.kubernetes.api.builder.Predicate<java.lang.String>);

  public abstract A withScopes(java.util.List<java.lang.String>);

  public abstract A withScopes(java.lang.String...);

  public abstract java.lang.Boolean hasScopes();

  public abstract A addNewScope(java.lang.String);

  public abstract A addNewScope(java.lang.StringBuilder);

  public abstract A addNewScope(java.lang.StringBuffer);

  public abstract java.lang.String getUser();

  public abstract A withUser(java.lang.String);

  public abstract java.lang.Boolean hasUser();

  public abstract A withNewUser(java.lang.String);

  public abstract A withNewUser(java.lang.StringBuilder);

  public abstract A withNewUser(java.lang.StringBuffer);

  public abstract java.lang.String getVerb();

  public abstract A withVerb(java.lang.String);

  public abstract java.lang.Boolean hasVerb();

  public abstract A withNewVerb(java.lang.String);

  public abstract A withNewVerb(java.lang.StringBuilder);

  public abstract A withNewVerb(java.lang.StringBuffer);
}
