Compiled from "EndpointSubsetFluent.java"
public interface io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent<A extends io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract A addToAddresses(int, io.dekorate.deps.kubernetes.api.model.EndpointAddress);

  public abstract A setToAddresses(int, io.dekorate.deps.kubernetes.api.model.EndpointAddress);

  public abstract A addToAddresses(io.dekorate.deps.kubernetes.api.model.EndpointAddress...);

  public abstract A addAllToAddresses(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EndpointAddress>);

  public abstract A removeFromAddresses(io.dekorate.deps.kubernetes.api.model.EndpointAddress...);

  public abstract A removeAllFromAddresses(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EndpointAddress>);

  public abstract A removeMatchingFromAddresses(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EndpointAddressBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EndpointAddress> getAddresses();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EndpointAddress> buildAddresses();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointAddress buildAddress(int);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointAddress buildFirstAddress();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointAddress buildLastAddress();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointAddress buildMatchingAddress(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EndpointAddressBuilder>);

  public abstract java.lang.Boolean hasMatchingAddress(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EndpointAddressBuilder>);

  public abstract A withAddresses(java.util.List<io.dekorate.deps.kubernetes.api.model.EndpointAddress>);

  public abstract A withAddresses(io.dekorate.deps.kubernetes.api.model.EndpointAddress...);

  public abstract java.lang.Boolean hasAddresses();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$AddressesNested<A> addNewAddress();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$AddressesNested<A> addNewAddressLike(io.dekorate.deps.kubernetes.api.model.EndpointAddress);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$AddressesNested<A> setNewAddressLike(int, io.dekorate.deps.kubernetes.api.model.EndpointAddress);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$AddressesNested<A> editAddress(int);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$AddressesNested<A> editFirstAddress();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$AddressesNested<A> editLastAddress();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$AddressesNested<A> editMatchingAddress(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EndpointAddressBuilder>);

  public abstract A addToNotReadyAddresses(int, io.dekorate.deps.kubernetes.api.model.EndpointAddress);

  public abstract A setToNotReadyAddresses(int, io.dekorate.deps.kubernetes.api.model.EndpointAddress);

  public abstract A addToNotReadyAddresses(io.dekorate.deps.kubernetes.api.model.EndpointAddress...);

  public abstract A addAllToNotReadyAddresses(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EndpointAddress>);

  public abstract A removeFromNotReadyAddresses(io.dekorate.deps.kubernetes.api.model.EndpointAddress...);

  public abstract A removeAllFromNotReadyAddresses(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EndpointAddress>);

  public abstract A removeMatchingFromNotReadyAddresses(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EndpointAddressBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EndpointAddress> getNotReadyAddresses();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EndpointAddress> buildNotReadyAddresses();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointAddress buildNotReadyAddress(int);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointAddress buildFirstNotReadyAddress();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointAddress buildLastNotReadyAddress();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointAddress buildMatchingNotReadyAddress(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EndpointAddressBuilder>);

  public abstract java.lang.Boolean hasMatchingNotReadyAddress(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EndpointAddressBuilder>);

  public abstract A withNotReadyAddresses(java.util.List<io.dekorate.deps.kubernetes.api.model.EndpointAddress>);

  public abstract A withNotReadyAddresses(io.dekorate.deps.kubernetes.api.model.EndpointAddress...);

  public abstract java.lang.Boolean hasNotReadyAddresses();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$NotReadyAddressesNested<A> addNewNotReadyAddress();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$NotReadyAddressesNested<A> addNewNotReadyAddressLike(io.dekorate.deps.kubernetes.api.model.EndpointAddress);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$NotReadyAddressesNested<A> setNewNotReadyAddressLike(int, io.dekorate.deps.kubernetes.api.model.EndpointAddress);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$NotReadyAddressesNested<A> editNotReadyAddress(int);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$NotReadyAddressesNested<A> editFirstNotReadyAddress();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$NotReadyAddressesNested<A> editLastNotReadyAddress();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$NotReadyAddressesNested<A> editMatchingNotReadyAddress(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EndpointAddressBuilder>);

  public abstract A addToPorts(int, io.dekorate.deps.kubernetes.api.model.EndpointPort);

  public abstract A setToPorts(int, io.dekorate.deps.kubernetes.api.model.EndpointPort);

  public abstract A addToPorts(io.dekorate.deps.kubernetes.api.model.EndpointPort...);

  public abstract A addAllToPorts(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EndpointPort>);

  public abstract A removeFromPorts(io.dekorate.deps.kubernetes.api.model.EndpointPort...);

  public abstract A removeAllFromPorts(java.util.Collection<io.dekorate.deps.kubernetes.api.model.EndpointPort>);

  public abstract A removeMatchingFromPorts(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EndpointPortBuilder>);

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EndpointPort> getPorts();

  public abstract java.util.List<io.dekorate.deps.kubernetes.api.model.EndpointPort> buildPorts();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointPort buildPort(int);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointPort buildFirstPort();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointPort buildLastPort();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointPort buildMatchingPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EndpointPortBuilder>);

  public abstract java.lang.Boolean hasMatchingPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EndpointPortBuilder>);

  public abstract A withPorts(java.util.List<io.dekorate.deps.kubernetes.api.model.EndpointPort>);

  public abstract A withPorts(io.dekorate.deps.kubernetes.api.model.EndpointPort...);

  public abstract java.lang.Boolean hasPorts();

  public abstract A addNewPort(java.lang.String, java.lang.String, java.lang.Integer, java.lang.String);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$PortsNested<A> addNewPort();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$PortsNested<A> addNewPortLike(io.dekorate.deps.kubernetes.api.model.EndpointPort);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$PortsNested<A> setNewPortLike(int, io.dekorate.deps.kubernetes.api.model.EndpointPort);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$PortsNested<A> editPort(int);

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$PortsNested<A> editFirstPort();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$PortsNested<A> editLastPort();

  public abstract io.dekorate.deps.kubernetes.api.model.EndpointSubsetFluent$PortsNested<A> editMatchingPort(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.deps.kubernetes.api.model.EndpointPortBuilder>);
}
