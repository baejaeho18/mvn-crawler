Compiled from "KnativeSchemaFluent.java"
public interface io.dekorate.deps.knative.api.model.KnativeSchemaFluent<A extends io.dekorate.deps.knative.api.model.KnativeSchemaFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerResource getApiServerResource();

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerResource buildApiServerResource();

  public abstract A withApiServerResource(io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerResource);

  public abstract java.lang.Boolean hasApiServerResource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerResourceNested<A> withNewApiServerResource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerResourceNested<A> withNewApiServerResourceLike(io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerResource);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerResourceNested<A> editApiServerResource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerResourceNested<A> editOrNewApiServerResource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerResourceNested<A> editOrNewApiServerResourceLike(io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerResource);

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerSource getApiServerSource();

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerSource buildApiServerSource();

  public abstract A withApiServerSource(io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerSource);

  public abstract java.lang.Boolean hasApiServerSource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerSourceNested<A> withNewApiServerSource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerSourceNested<A> withNewApiServerSourceLike(io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerSource);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerSourceNested<A> editApiServerSource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerSourceNested<A> editOrNewApiServerSource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerSourceNested<A> editOrNewApiServerSourceLike(io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerSource);

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerSourceList getApiServerSourceList();

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerSourceList buildApiServerSourceList();

  public abstract A withApiServerSourceList(io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerSourceList);

  public abstract java.lang.Boolean hasApiServerSourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerSourceListNested<A> withNewApiServerSourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerSourceListNested<A> withNewApiServerSourceListLike(io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerSourceList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerSourceListNested<A> editApiServerSourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerSourceListNested<A> editOrNewApiServerSourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ApiServerSourceListNested<A> editOrNewApiServerSourceListLike(io.dekorate.deps.knative.legacysources.v1alpha1.ApiServerSourceList);

  public abstract io.dekorate.deps.knative.eventing.v1alpha1.Broker getBroker();

  public abstract io.dekorate.deps.knative.eventing.v1alpha1.Broker buildBroker();

  public abstract A withBroker(io.dekorate.deps.knative.eventing.v1alpha1.Broker);

  public abstract java.lang.Boolean hasBroker();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$BrokerNested<A> withNewBroker();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$BrokerNested<A> withNewBrokerLike(io.dekorate.deps.knative.eventing.v1alpha1.Broker);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$BrokerNested<A> editBroker();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$BrokerNested<A> editOrNewBroker();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$BrokerNested<A> editOrNewBrokerLike(io.dekorate.deps.knative.eventing.v1alpha1.Broker);

  public abstract io.dekorate.deps.knative.eventing.v1alpha1.BrokerList getBrokerList();

  public abstract io.dekorate.deps.knative.eventing.v1alpha1.BrokerList buildBrokerList();

  public abstract A withBrokerList(io.dekorate.deps.knative.eventing.v1alpha1.BrokerList);

  public abstract java.lang.Boolean hasBrokerList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$BrokerListNested<A> withNewBrokerList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$BrokerListNested<A> withNewBrokerListLike(io.dekorate.deps.knative.eventing.v1alpha1.BrokerList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$BrokerListNested<A> editBrokerList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$BrokerListNested<A> editOrNewBrokerList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$BrokerListNested<A> editOrNewBrokerListLike(io.dekorate.deps.knative.eventing.v1alpha1.BrokerList);

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.Channel getChannel();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.Channel buildChannel();

  public abstract A withChannel(io.dekorate.deps.knative.messaging.v1alpha1.Channel);

  public abstract java.lang.Boolean hasChannel();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ChannelNested<A> withNewChannel();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ChannelNested<A> withNewChannelLike(io.dekorate.deps.knative.messaging.v1alpha1.Channel);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ChannelNested<A> editChannel();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ChannelNested<A> editOrNewChannel();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ChannelNested<A> editOrNewChannelLike(io.dekorate.deps.knative.messaging.v1alpha1.Channel);

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.ChannelList getChannelList();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.ChannelList buildChannelList();

  public abstract A withChannelList(io.dekorate.deps.knative.messaging.v1alpha1.ChannelList);

  public abstract java.lang.Boolean hasChannelList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ChannelListNested<A> withNewChannelList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ChannelListNested<A> withNewChannelListLike(io.dekorate.deps.knative.messaging.v1alpha1.ChannelList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ChannelListNested<A> editChannelList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ChannelListNested<A> editOrNewChannelList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ChannelListNested<A> editOrNewChannelListLike(io.dekorate.deps.knative.messaging.v1alpha1.ChannelList);

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSource getContainerSource();

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSource buildContainerSource();

  public abstract A withContainerSource(io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSource);

  public abstract java.lang.Boolean hasContainerSource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ContainerSourceNested<A> withNewContainerSource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ContainerSourceNested<A> withNewContainerSourceLike(io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSource);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ContainerSourceNested<A> editContainerSource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ContainerSourceNested<A> editOrNewContainerSource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ContainerSourceNested<A> editOrNewContainerSourceLike(io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSource);

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSourceList getContainerSourceList();

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSourceList buildContainerSourceList();

  public abstract A withContainerSourceList(io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSourceList);

  public abstract java.lang.Boolean hasContainerSourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ContainerSourceListNested<A> withNewContainerSourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ContainerSourceListNested<A> withNewContainerSourceListLike(io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSourceList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ContainerSourceListNested<A> editContainerSourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ContainerSourceListNested<A> editOrNewContainerSourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ContainerSourceListNested<A> editOrNewContainerSourceListLike(io.dekorate.deps.knative.legacysources.v1alpha1.ContainerSourceList);

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.CronJobSource getCronJobSource();

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.CronJobSource buildCronJobSource();

  public abstract A withCronJobSource(io.dekorate.deps.knative.legacysources.v1alpha1.CronJobSource);

  public abstract java.lang.Boolean hasCronJobSource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$CronJobSourceNested<A> withNewCronJobSource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$CronJobSourceNested<A> withNewCronJobSourceLike(io.dekorate.deps.knative.legacysources.v1alpha1.CronJobSource);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$CronJobSourceNested<A> editCronJobSource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$CronJobSourceNested<A> editOrNewCronJobSource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$CronJobSourceNested<A> editOrNewCronJobSourceLike(io.dekorate.deps.knative.legacysources.v1alpha1.CronJobSource);

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.CronJobSourceList getCronJobSourceList();

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.CronJobSourceList buildCronJobSourceList();

  public abstract A withCronJobSourceList(io.dekorate.deps.knative.legacysources.v1alpha1.CronJobSourceList);

  public abstract java.lang.Boolean hasCronJobSourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$CronJobSourceListNested<A> withNewCronJobSourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$CronJobSourceListNested<A> withNewCronJobSourceListLike(io.dekorate.deps.knative.legacysources.v1alpha1.CronJobSourceList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$CronJobSourceListNested<A> editCronJobSourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$CronJobSourceListNested<A> editOrNewCronJobSourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$CronJobSourceListNested<A> editOrNewCronJobSourceListLike(io.dekorate.deps.knative.legacysources.v1alpha1.CronJobSourceList);

  public abstract io.dekorate.deps.knative.eventing.v1alpha1.EventType getEventType();

  public abstract io.dekorate.deps.knative.eventing.v1alpha1.EventType buildEventType();

  public abstract A withEventType(io.dekorate.deps.knative.eventing.v1alpha1.EventType);

  public abstract java.lang.Boolean hasEventType();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$EventTypeNested<A> withNewEventType();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$EventTypeNested<A> withNewEventTypeLike(io.dekorate.deps.knative.eventing.v1alpha1.EventType);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$EventTypeNested<A> editEventType();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$EventTypeNested<A> editOrNewEventType();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$EventTypeNested<A> editOrNewEventTypeLike(io.dekorate.deps.knative.eventing.v1alpha1.EventType);

  public abstract io.dekorate.deps.knative.eventing.v1alpha1.EventTypeList getEventTypeList();

  public abstract io.dekorate.deps.knative.eventing.v1alpha1.EventTypeList buildEventTypeList();

  public abstract A withEventTypeList(io.dekorate.deps.knative.eventing.v1alpha1.EventTypeList);

  public abstract java.lang.Boolean hasEventTypeList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$EventTypeListNested<A> withNewEventTypeList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$EventTypeListNested<A> withNewEventTypeListLike(io.dekorate.deps.knative.eventing.v1alpha1.EventTypeList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$EventTypeListNested<A> editEventTypeList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$EventTypeListNested<A> editOrNewEventTypeList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$EventTypeListNested<A> editOrNewEventTypeListLike(io.dekorate.deps.knative.eventing.v1alpha1.EventTypeList);

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.InMemoryChannel getInMemoryChannel();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.InMemoryChannel buildInMemoryChannel();

  public abstract A withInMemoryChannel(io.dekorate.deps.knative.messaging.v1alpha1.InMemoryChannel);

  public abstract java.lang.Boolean hasInMemoryChannel();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$InMemoryChannelNested<A> withNewInMemoryChannel();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$InMemoryChannelNested<A> withNewInMemoryChannelLike(io.dekorate.deps.knative.messaging.v1alpha1.InMemoryChannel);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$InMemoryChannelNested<A> editInMemoryChannel();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$InMemoryChannelNested<A> editOrNewInMemoryChannel();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$InMemoryChannelNested<A> editOrNewInMemoryChannelLike(io.dekorate.deps.knative.messaging.v1alpha1.InMemoryChannel);

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.InMemoryChannelList getInMemoryChannelList();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.InMemoryChannelList buildInMemoryChannelList();

  public abstract A withInMemoryChannelList(io.dekorate.deps.knative.messaging.v1alpha1.InMemoryChannelList);

  public abstract java.lang.Boolean hasInMemoryChannelList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$InMemoryChannelListNested<A> withNewInMemoryChannelList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$InMemoryChannelListNested<A> withNewInMemoryChannelListLike(io.dekorate.deps.knative.messaging.v1alpha1.InMemoryChannelList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$InMemoryChannelListNested<A> editInMemoryChannelList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$InMemoryChannelListNested<A> editOrNewInMemoryChannelList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$InMemoryChannelListNested<A> editOrNewInMemoryChannelListLike(io.dekorate.deps.knative.messaging.v1alpha1.InMemoryChannelList);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.Parallel getParallel();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.Parallel buildParallel();

  public abstract A withParallel(io.dekorate.deps.knative.flows.v1alpha1.Parallel);

  public abstract java.lang.Boolean hasParallel();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelNested<A> withNewParallel();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelNested<A> withNewParallelLike(io.dekorate.deps.knative.flows.v1alpha1.Parallel);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelNested<A> editParallel();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelNested<A> editOrNewParallel();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelNested<A> editOrNewParallelLike(io.dekorate.deps.knative.flows.v1alpha1.Parallel);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch getParallelBranch();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch buildParallelBranch();

  public abstract A withParallelBranch(io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch);

  public abstract java.lang.Boolean hasParallelBranch();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelBranchNested<A> withNewParallelBranch();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelBranchNested<A> withNewParallelBranchLike(io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelBranchNested<A> editParallelBranch();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelBranchNested<A> editOrNewParallelBranch();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelBranchNested<A> editOrNewParallelBranchLike(io.dekorate.deps.knative.flows.v1alpha1.ParallelBranch);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus getParallelBranchStatus();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus buildParallelBranchStatus();

  public abstract A withParallelBranchStatus(io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus);

  public abstract java.lang.Boolean hasParallelBranchStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelBranchStatusNested<A> withNewParallelBranchStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelBranchStatusNested<A> withNewParallelBranchStatusLike(io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelBranchStatusNested<A> editParallelBranchStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelBranchStatusNested<A> editOrNewParallelBranchStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelBranchStatusNested<A> editOrNewParallelBranchStatusLike(io.dekorate.deps.knative.flows.v1alpha1.ParallelBranchStatus);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelChannelStatus getParallelChannelStatus();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelChannelStatus buildParallelChannelStatus();

  public abstract A withParallelChannelStatus(io.dekorate.deps.knative.flows.v1alpha1.ParallelChannelStatus);

  public abstract java.lang.Boolean hasParallelChannelStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelChannelStatusNested<A> withNewParallelChannelStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelChannelStatusNested<A> withNewParallelChannelStatusLike(io.dekorate.deps.knative.flows.v1alpha1.ParallelChannelStatus);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelChannelStatusNested<A> editParallelChannelStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelChannelStatusNested<A> editOrNewParallelChannelStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelChannelStatusNested<A> editOrNewParallelChannelStatusLike(io.dekorate.deps.knative.flows.v1alpha1.ParallelChannelStatus);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelList getParallelList();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelList buildParallelList();

  public abstract A withParallelList(io.dekorate.deps.knative.flows.v1alpha1.ParallelList);

  public abstract java.lang.Boolean hasParallelList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelListNested<A> withNewParallelList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelListNested<A> withNewParallelListLike(io.dekorate.deps.knative.flows.v1alpha1.ParallelList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelListNested<A> editParallelList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelListNested<A> editOrNewParallelList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelListNested<A> editOrNewParallelListLike(io.dekorate.deps.knative.flows.v1alpha1.ParallelList);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSubscriptionStatus getParallelSubscriptionStatus();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.ParallelSubscriptionStatus buildParallelSubscriptionStatus();

  public abstract A withParallelSubscriptionStatus(io.dekorate.deps.knative.flows.v1alpha1.ParallelSubscriptionStatus);

  public abstract java.lang.Boolean hasParallelSubscriptionStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelSubscriptionStatusNested<A> withNewParallelSubscriptionStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelSubscriptionStatusNested<A> withNewParallelSubscriptionStatusLike(io.dekorate.deps.knative.flows.v1alpha1.ParallelSubscriptionStatus);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelSubscriptionStatusNested<A> editParallelSubscriptionStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelSubscriptionStatusNested<A> editOrNewParallelSubscriptionStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$ParallelSubscriptionStatusNested<A> editOrNewParallelSubscriptionStatusLike(io.dekorate.deps.knative.flows.v1alpha1.ParallelSubscriptionStatus);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.Sequence getSequence();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.Sequence buildSequence();

  public abstract A withSequence(io.dekorate.deps.knative.flows.v1alpha1.Sequence);

  public abstract java.lang.Boolean hasSequence();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SequenceNested<A> withNewSequence();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SequenceNested<A> withNewSequenceLike(io.dekorate.deps.knative.flows.v1alpha1.Sequence);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SequenceNested<A> editSequence();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SequenceNested<A> editOrNewSequence();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SequenceNested<A> editOrNewSequenceLike(io.dekorate.deps.knative.flows.v1alpha1.Sequence);

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceList getSequenceList();

  public abstract io.dekorate.deps.knative.flows.v1alpha1.SequenceList buildSequenceList();

  public abstract A withSequenceList(io.dekorate.deps.knative.flows.v1alpha1.SequenceList);

  public abstract java.lang.Boolean hasSequenceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SequenceListNested<A> withNewSequenceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SequenceListNested<A> withNewSequenceListLike(io.dekorate.deps.knative.flows.v1alpha1.SequenceList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SequenceListNested<A> editSequenceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SequenceListNested<A> editOrNewSequenceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SequenceListNested<A> editOrNewSequenceListLike(io.dekorate.deps.knative.flows.v1alpha1.SequenceList);

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.SinkBinding getSinkBinding();

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.SinkBinding buildSinkBinding();

  public abstract A withSinkBinding(io.dekorate.deps.knative.legacysources.v1alpha1.SinkBinding);

  public abstract java.lang.Boolean hasSinkBinding();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SinkBindingNested<A> withNewSinkBinding();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SinkBindingNested<A> withNewSinkBindingLike(io.dekorate.deps.knative.legacysources.v1alpha1.SinkBinding);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SinkBindingNested<A> editSinkBinding();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SinkBindingNested<A> editOrNewSinkBinding();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SinkBindingNested<A> editOrNewSinkBindingLike(io.dekorate.deps.knative.legacysources.v1alpha1.SinkBinding);

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.SinkBindingList getSinkBindingList();

  public abstract io.dekorate.deps.knative.legacysources.v1alpha1.SinkBindingList buildSinkBindingList();

  public abstract A withSinkBindingList(io.dekorate.deps.knative.legacysources.v1alpha1.SinkBindingList);

  public abstract java.lang.Boolean hasSinkBindingList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SinkBindingListNested<A> withNewSinkBindingList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SinkBindingListNested<A> withNewSinkBindingListLike(io.dekorate.deps.knative.legacysources.v1alpha1.SinkBindingList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SinkBindingListNested<A> editSinkBindingList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SinkBindingListNested<A> editOrNewSinkBindingList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SinkBindingListNested<A> editOrNewSinkBindingListLike(io.dekorate.deps.knative.legacysources.v1alpha1.SinkBindingList);

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.Subscription getSubscription();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.Subscription buildSubscription();

  public abstract A withSubscription(io.dekorate.deps.knative.messaging.v1alpha1.Subscription);

  public abstract java.lang.Boolean hasSubscription();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SubscriptionNested<A> withNewSubscription();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SubscriptionNested<A> withNewSubscriptionLike(io.dekorate.deps.knative.messaging.v1alpha1.Subscription);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SubscriptionNested<A> editSubscription();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SubscriptionNested<A> editOrNewSubscription();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SubscriptionNested<A> editOrNewSubscriptionLike(io.dekorate.deps.knative.messaging.v1alpha1.Subscription);

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionList getSubscriptionList();

  public abstract io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionList buildSubscriptionList();

  public abstract A withSubscriptionList(io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionList);

  public abstract java.lang.Boolean hasSubscriptionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SubscriptionListNested<A> withNewSubscriptionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SubscriptionListNested<A> withNewSubscriptionListLike(io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SubscriptionListNested<A> editSubscriptionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SubscriptionListNested<A> editOrNewSubscriptionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$SubscriptionListNested<A> editOrNewSubscriptionListLike(io.dekorate.deps.knative.messaging.v1alpha1.SubscriptionList);

  public abstract io.dekorate.deps.knative.eventing.v1alpha1.Trigger getTrigger();

  public abstract io.dekorate.deps.knative.eventing.v1alpha1.Trigger buildTrigger();

  public abstract A withTrigger(io.dekorate.deps.knative.eventing.v1alpha1.Trigger);

  public abstract java.lang.Boolean hasTrigger();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$TriggerNested<A> withNewTrigger();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$TriggerNested<A> withNewTriggerLike(io.dekorate.deps.knative.eventing.v1alpha1.Trigger);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$TriggerNested<A> editTrigger();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$TriggerNested<A> editOrNewTrigger();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$TriggerNested<A> editOrNewTriggerLike(io.dekorate.deps.knative.eventing.v1alpha1.Trigger);

  public abstract io.dekorate.deps.knative.eventing.v1alpha1.TriggerList getTriggerList();

  public abstract io.dekorate.deps.knative.eventing.v1alpha1.TriggerList buildTriggerList();

  public abstract A withTriggerList(io.dekorate.deps.knative.eventing.v1alpha1.TriggerList);

  public abstract java.lang.Boolean hasTriggerList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$TriggerListNested<A> withNewTriggerList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$TriggerListNested<A> withNewTriggerListLike(io.dekorate.deps.knative.eventing.v1alpha1.TriggerList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$TriggerListNested<A> editTriggerList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$TriggerListNested<A> editOrNewTriggerList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$TriggerListNested<A> editOrNewTriggerListLike(io.dekorate.deps.knative.eventing.v1alpha1.TriggerList);

  public abstract io.dekorate.deps.knative.serving.v1.Configuration getV1Configuration();

  public abstract io.dekorate.deps.knative.serving.v1.Configuration buildV1Configuration();

  public abstract A withV1Configuration(io.dekorate.deps.knative.serving.v1.Configuration);

  public abstract java.lang.Boolean hasV1Configuration();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ConfigurationNested<A> withNewV1Configuration();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ConfigurationNested<A> withNewV1ConfigurationLike(io.dekorate.deps.knative.serving.v1.Configuration);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ConfigurationNested<A> editV1Configuration();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ConfigurationNested<A> editOrNewV1Configuration();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ConfigurationNested<A> editOrNewV1ConfigurationLike(io.dekorate.deps.knative.serving.v1.Configuration);

  public abstract io.dekorate.deps.knative.serving.v1.ConfigurationList getV1ConfigurationList();

  public abstract io.dekorate.deps.knative.serving.v1.ConfigurationList buildV1ConfigurationList();

  public abstract A withV1ConfigurationList(io.dekorate.deps.knative.serving.v1.ConfigurationList);

  public abstract java.lang.Boolean hasV1ConfigurationList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ConfigurationListNested<A> withNewV1ConfigurationList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ConfigurationListNested<A> withNewV1ConfigurationListLike(io.dekorate.deps.knative.serving.v1.ConfigurationList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ConfigurationListNested<A> editV1ConfigurationList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ConfigurationListNested<A> editOrNewV1ConfigurationList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ConfigurationListNested<A> editOrNewV1ConfigurationListLike(io.dekorate.deps.knative.serving.v1.ConfigurationList);

  public abstract io.dekorate.deps.knative.serving.v1.Revision getV1Revision();

  public abstract io.dekorate.deps.knative.serving.v1.Revision buildV1Revision();

  public abstract A withV1Revision(io.dekorate.deps.knative.serving.v1.Revision);

  public abstract java.lang.Boolean hasV1Revision();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RevisionNested<A> withNewV1Revision();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RevisionNested<A> withNewV1RevisionLike(io.dekorate.deps.knative.serving.v1.Revision);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RevisionNested<A> editV1Revision();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RevisionNested<A> editOrNewV1Revision();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RevisionNested<A> editOrNewV1RevisionLike(io.dekorate.deps.knative.serving.v1.Revision);

  public abstract io.dekorate.deps.knative.serving.v1.RevisionList getV1RevisionList();

  public abstract io.dekorate.deps.knative.serving.v1.RevisionList buildV1RevisionList();

  public abstract A withV1RevisionList(io.dekorate.deps.knative.serving.v1.RevisionList);

  public abstract java.lang.Boolean hasV1RevisionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RevisionListNested<A> withNewV1RevisionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RevisionListNested<A> withNewV1RevisionListLike(io.dekorate.deps.knative.serving.v1.RevisionList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RevisionListNested<A> editV1RevisionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RevisionListNested<A> editOrNewV1RevisionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RevisionListNested<A> editOrNewV1RevisionListLike(io.dekorate.deps.knative.serving.v1.RevisionList);

  public abstract io.dekorate.deps.knative.serving.v1.Route getV1Route();

  public abstract io.dekorate.deps.knative.serving.v1.Route buildV1Route();

  public abstract A withV1Route(io.dekorate.deps.knative.serving.v1.Route);

  public abstract java.lang.Boolean hasV1Route();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RouteNested<A> withNewV1Route();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RouteNested<A> withNewV1RouteLike(io.dekorate.deps.knative.serving.v1.Route);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RouteNested<A> editV1Route();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RouteNested<A> editOrNewV1Route();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RouteNested<A> editOrNewV1RouteLike(io.dekorate.deps.knative.serving.v1.Route);

  public abstract io.dekorate.deps.knative.serving.v1.RouteList getV1RouteList();

  public abstract io.dekorate.deps.knative.serving.v1.RouteList buildV1RouteList();

  public abstract A withV1RouteList(io.dekorate.deps.knative.serving.v1.RouteList);

  public abstract java.lang.Boolean hasV1RouteList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RouteListNested<A> withNewV1RouteList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RouteListNested<A> withNewV1RouteListLike(io.dekorate.deps.knative.serving.v1.RouteList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RouteListNested<A> editV1RouteList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RouteListNested<A> editOrNewV1RouteList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1RouteListNested<A> editOrNewV1RouteListLike(io.dekorate.deps.knative.serving.v1.RouteList);

  public abstract io.dekorate.deps.knative.serving.v1.Service getV1Service();

  public abstract io.dekorate.deps.knative.serving.v1.Service buildV1Service();

  public abstract A withV1Service(io.dekorate.deps.knative.serving.v1.Service);

  public abstract java.lang.Boolean hasV1Service();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ServiceNested<A> withNewV1Service();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ServiceNested<A> withNewV1ServiceLike(io.dekorate.deps.knative.serving.v1.Service);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ServiceNested<A> editV1Service();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ServiceNested<A> editOrNewV1Service();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ServiceNested<A> editOrNewV1ServiceLike(io.dekorate.deps.knative.serving.v1.Service);

  public abstract io.dekorate.deps.knative.serving.v1.ServiceList getV1ServiceList();

  public abstract io.dekorate.deps.knative.serving.v1.ServiceList buildV1ServiceList();

  public abstract A withV1ServiceList(io.dekorate.deps.knative.serving.v1.ServiceList);

  public abstract java.lang.Boolean hasV1ServiceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ServiceListNested<A> withNewV1ServiceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ServiceListNested<A> withNewV1ServiceListLike(io.dekorate.deps.knative.serving.v1.ServiceList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ServiceListNested<A> editV1ServiceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ServiceListNested<A> editOrNewV1ServiceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1ServiceListNested<A> editOrNewV1ServiceListLike(io.dekorate.deps.knative.serving.v1.ServiceList);

  public abstract io.dekorate.deps.knative.duck.v1alpha1.ChannelableList getV1alpha1ChanalableList();

  public abstract io.dekorate.deps.knative.duck.v1alpha1.ChannelableList buildV1alpha1ChanalableList();

  public abstract A withV1alpha1ChanalableList(io.dekorate.deps.knative.duck.v1alpha1.ChannelableList);

  public abstract java.lang.Boolean hasV1alpha1ChanalableList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ChanalableListNested<A> withNewV1alpha1ChanalableList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ChanalableListNested<A> withNewV1alpha1ChanalableListLike(io.dekorate.deps.knative.duck.v1alpha1.ChannelableList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ChanalableListNested<A> editV1alpha1ChanalableList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ChanalableListNested<A> editOrNewV1alpha1ChanalableList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ChanalableListNested<A> editOrNewV1alpha1ChanalableListLike(io.dekorate.deps.knative.duck.v1alpha1.ChannelableList);

  public abstract io.dekorate.deps.knative.duck.v1alpha1.Channelable getV1alpha1Channelable();

  public abstract io.dekorate.deps.knative.duck.v1alpha1.Channelable buildV1alpha1Channelable();

  public abstract A withV1alpha1Channelable(io.dekorate.deps.knative.duck.v1alpha1.Channelable);

  public abstract java.lang.Boolean hasV1alpha1Channelable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ChannelableNested<A> withNewV1alpha1Channelable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ChannelableNested<A> withNewV1alpha1ChannelableLike(io.dekorate.deps.knative.duck.v1alpha1.Channelable);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ChannelableNested<A> editV1alpha1Channelable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ChannelableNested<A> editOrNewV1alpha1Channelable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ChannelableNested<A> editOrNewV1alpha1ChannelableLike(io.dekorate.deps.knative.duck.v1alpha1.Channelable);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.Configuration getV1alpha1Configuration();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.Configuration buildV1alpha1Configuration();

  public abstract A withV1alpha1Configuration(io.dekorate.deps.knative.serving.v1alpha1.Configuration);

  public abstract java.lang.Boolean hasV1alpha1Configuration();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ConfigurationNested<A> withNewV1alpha1V1alpha1Configuration();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ConfigurationNested<A> withNewV1alpha1ConfigurationLike(io.dekorate.deps.knative.serving.v1alpha1.Configuration);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ConfigurationNested<A> editV1alpha1V1alpha1Configuration();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ConfigurationNested<A> editOrNewV1alpha1Configuration();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ConfigurationNested<A> editOrNewV1alpha1ConfigurationLike(io.dekorate.deps.knative.serving.v1alpha1.Configuration);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ConfigurationList getV1alpha1ConfigurationList();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ConfigurationList buildV1alpha1ConfigurationList();

  public abstract A withV1alpha1ConfigurationList(io.dekorate.deps.knative.serving.v1alpha1.ConfigurationList);

  public abstract java.lang.Boolean hasV1alpha1ConfigurationList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ConfigurationListNested<A> withNewV1alpha1V1alpha1ConfigurationList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ConfigurationListNested<A> withNewV1alpha1ConfigurationListLike(io.dekorate.deps.knative.serving.v1alpha1.ConfigurationList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ConfigurationListNested<A> editV1alpha1V1alpha1ConfigurationList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ConfigurationListNested<A> editOrNewV1alpha1ConfigurationList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ConfigurationListNested<A> editOrNewV1alpha1ConfigurationListLike(io.dekorate.deps.knative.serving.v1alpha1.ConfigurationList);

  public abstract io.dekorate.deps.knative.duck.v1alpha1.Resource getV1alpha1Resource();

  public abstract io.dekorate.deps.knative.duck.v1alpha1.Resource buildV1alpha1Resource();

  public abstract A withV1alpha1Resource(io.dekorate.deps.knative.duck.v1alpha1.Resource);

  public abstract java.lang.Boolean hasV1alpha1Resource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ResourceNested<A> withNewV1alpha1Resource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ResourceNested<A> withNewV1alpha1ResourceLike(io.dekorate.deps.knative.duck.v1alpha1.Resource);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ResourceNested<A> editV1alpha1Resource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ResourceNested<A> editOrNewV1alpha1Resource();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ResourceNested<A> editOrNewV1alpha1ResourceLike(io.dekorate.deps.knative.duck.v1alpha1.Resource);

  public abstract io.dekorate.deps.knative.duck.v1alpha1.ResourceList getV1alpha1ResourceList();

  public abstract io.dekorate.deps.knative.duck.v1alpha1.ResourceList buildV1alpha1ResourceList();

  public abstract A withV1alpha1ResourceList(io.dekorate.deps.knative.duck.v1alpha1.ResourceList);

  public abstract java.lang.Boolean hasV1alpha1ResourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ResourceListNested<A> withNewV1alpha1ResourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ResourceListNested<A> withNewV1alpha1ResourceListLike(io.dekorate.deps.knative.duck.v1alpha1.ResourceList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ResourceListNested<A> editV1alpha1ResourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ResourceListNested<A> editOrNewV1alpha1ResourceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1ResourceListNested<A> editOrNewV1alpha1ResourceListLike(io.dekorate.deps.knative.duck.v1alpha1.ResourceList);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.Revision getV1alpha1Revision();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.Revision buildV1alpha1Revision();

  public abstract A withV1alpha1Revision(io.dekorate.deps.knative.serving.v1alpha1.Revision);

  public abstract java.lang.Boolean hasV1alpha1Revision();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RevisionNested<A> withNewV1alpha1V1alpha1Revision();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RevisionNested<A> withNewV1alpha1RevisionLike(io.dekorate.deps.knative.serving.v1alpha1.Revision);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RevisionNested<A> editV1alpha1V1alpha1Revision();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RevisionNested<A> editOrNewV1alpha1Revision();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RevisionNested<A> editOrNewV1alpha1RevisionLike(io.dekorate.deps.knative.serving.v1alpha1.Revision);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RevisionList getV1alpha1RevisionList();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RevisionList buildV1alpha1RevisionList();

  public abstract A withV1alpha1RevisionList(io.dekorate.deps.knative.serving.v1alpha1.RevisionList);

  public abstract java.lang.Boolean hasV1alpha1RevisionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RevisionListNested<A> withNewV1alpha1V1alpha1RevisionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RevisionListNested<A> withNewV1alpha1RevisionListLike(io.dekorate.deps.knative.serving.v1alpha1.RevisionList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RevisionListNested<A> editV1alpha1V1alpha1RevisionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RevisionListNested<A> editOrNewV1alpha1RevisionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RevisionListNested<A> editOrNewV1alpha1RevisionListLike(io.dekorate.deps.knative.serving.v1alpha1.RevisionList);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.Route getV1alpha1Route();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.Route buildV1alpha1Route();

  public abstract A withV1alpha1Route(io.dekorate.deps.knative.serving.v1alpha1.Route);

  public abstract java.lang.Boolean hasV1alpha1Route();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RouteNested<A> withNewV1alpha1V1alpha1Route();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RouteNested<A> withNewV1alpha1RouteLike(io.dekorate.deps.knative.serving.v1alpha1.Route);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RouteNested<A> editV1alpha1V1alpha1Route();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RouteNested<A> editOrNewV1alpha1Route();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RouteNested<A> editOrNewV1alpha1RouteLike(io.dekorate.deps.knative.serving.v1alpha1.Route);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RouteList getV1alpha1RouteList();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.RouteList buildV1alpha1RouteList();

  public abstract A withV1alpha1RouteList(io.dekorate.deps.knative.serving.v1alpha1.RouteList);

  public abstract java.lang.Boolean hasV1alpha1RouteList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RouteListNested<A> withNewV1alpha1V1alpha1RouteList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RouteListNested<A> withNewV1alpha1RouteListLike(io.dekorate.deps.knative.serving.v1alpha1.RouteList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RouteListNested<A> editV1alpha1V1alpha1RouteList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RouteListNested<A> editOrNewV1alpha1RouteList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1RouteListNested<A> editOrNewV1alpha1RouteListLike(io.dekorate.deps.knative.serving.v1alpha1.RouteList);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.Service getV1alpha1Service();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.Service buildV1alpha1Service();

  public abstract A withV1alpha1Service(io.dekorate.deps.knative.serving.v1alpha1.Service);

  public abstract java.lang.Boolean hasV1alpha1Service();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ServiceNested<A> withNewV1alpha1V1alpha1Service();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ServiceNested<A> withNewV1alpha1ServiceLike(io.dekorate.deps.knative.serving.v1alpha1.Service);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ServiceNested<A> editV1alpha1V1alpha1Service();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ServiceNested<A> editOrNewV1alpha1Service();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ServiceNested<A> editOrNewV1alpha1ServiceLike(io.dekorate.deps.knative.serving.v1alpha1.Service);

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceList getV1alpha1ServiceList();

  public abstract io.dekorate.deps.knative.serving.v1alpha1.ServiceList buildV1alpha1ServiceList();

  public abstract A withV1alpha1ServiceList(io.dekorate.deps.knative.serving.v1alpha1.ServiceList);

  public abstract java.lang.Boolean hasV1alpha1ServiceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ServiceListNested<A> withNewV1alpha1V1alpha1ServiceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ServiceListNested<A> withNewV1alpha1ServiceListLike(io.dekorate.deps.knative.serving.v1alpha1.ServiceList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ServiceListNested<A> editV1alpha1V1alpha1ServiceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ServiceListNested<A> editOrNewV1alpha1ServiceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1V1alpha1ServiceListNested<A> editOrNewV1alpha1ServiceListLike(io.dekorate.deps.knative.serving.v1alpha1.ServiceList);

  public abstract io.dekorate.deps.knative.duck.v1alpha1.Subscribable getV1alpha1Subscribable();

  public abstract io.dekorate.deps.knative.duck.v1alpha1.Subscribable buildV1alpha1Subscribable();

  public abstract A withV1alpha1Subscribable(io.dekorate.deps.knative.duck.v1alpha1.Subscribable);

  public abstract java.lang.Boolean hasV1alpha1Subscribable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$KnativeV1alpha1SubscribableNested<A> withNewKnativeV1alpha1Subscribable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$KnativeV1alpha1SubscribableNested<A> withNewV1alpha1SubscribableLike(io.dekorate.deps.knative.duck.v1alpha1.Subscribable);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$KnativeV1alpha1SubscribableNested<A> editKnativeV1alpha1Subscribable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$KnativeV1alpha1SubscribableNested<A> editOrNewV1alpha1Subscribable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$KnativeV1alpha1SubscribableNested<A> editOrNewV1alpha1SubscribableLike(io.dekorate.deps.knative.duck.v1alpha1.Subscribable);

  public abstract io.dekorate.deps.knative.duck.v1alpha1.SubscribableType getV1alpha1SubscribableType();

  public abstract io.dekorate.deps.knative.duck.v1alpha1.SubscribableType buildV1alpha1SubscribableType();

  public abstract A withV1alpha1SubscribableType(io.dekorate.deps.knative.duck.v1alpha1.SubscribableType);

  public abstract java.lang.Boolean hasV1alpha1SubscribableType();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1SubscribableTypeNested<A> withNewV1alpha1SubscribableType();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1SubscribableTypeNested<A> withNewV1alpha1SubscribableTypeLike(io.dekorate.deps.knative.duck.v1alpha1.SubscribableType);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1SubscribableTypeNested<A> editV1alpha1SubscribableType();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1SubscribableTypeNested<A> editOrNewV1alpha1SubscribableType();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1SubscribableTypeNested<A> editOrNewV1alpha1SubscribableTypeLike(io.dekorate.deps.knative.duck.v1alpha1.SubscribableType);

  public abstract io.dekorate.deps.knative.duck.v1alpha1.SubscribableTypeList getV1alpha1SubscribableTypeList();

  public abstract io.dekorate.deps.knative.duck.v1alpha1.SubscribableTypeList buildV1alpha1SubscribableTypeList();

  public abstract A withV1alpha1SubscribableTypeList(io.dekorate.deps.knative.duck.v1alpha1.SubscribableTypeList);

  public abstract java.lang.Boolean hasV1alpha1SubscribableTypeList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1SubscribableTypeListNested<A> withNewV1alpha1SubscribableTypeList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1SubscribableTypeListNested<A> withNewV1alpha1SubscribableTypeListLike(io.dekorate.deps.knative.duck.v1alpha1.SubscribableTypeList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1SubscribableTypeListNested<A> editV1alpha1SubscribableTypeList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1SubscribableTypeListNested<A> editOrNewV1alpha1SubscribableTypeList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1alpha1SubscribableTypeListNested<A> editOrNewV1alpha1SubscribableTypeListLike(io.dekorate.deps.knative.duck.v1alpha1.SubscribableTypeList);

  public abstract java.lang.String getV1beta1BackoffPolicyType();

  public abstract A withV1beta1BackoffPolicyType(java.lang.String);

  public abstract java.lang.Boolean hasV1beta1BackoffPolicyType();

  public abstract A withNewV1beta1BackoffPolicyType(java.lang.String);

  public abstract A withNewV1beta1BackoffPolicyType(java.lang.StringBuilder);

  public abstract A withNewV1beta1BackoffPolicyType(java.lang.StringBuffer);

  public abstract io.dekorate.deps.knative.duck.v1beta1.ChannelableList getV1beta1ChanalableList();

  public abstract io.dekorate.deps.knative.duck.v1beta1.ChannelableList buildV1beta1ChanalableList();

  public abstract A withV1beta1ChanalableList(io.dekorate.deps.knative.duck.v1beta1.ChannelableList);

  public abstract java.lang.Boolean hasV1beta1ChanalableList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ChanalableListNested<A> withNewV1beta1V1beta1ChanalableList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ChanalableListNested<A> withNewV1beta1ChanalableListLike(io.dekorate.deps.knative.duck.v1beta1.ChannelableList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ChanalableListNested<A> editV1beta1V1beta1ChanalableList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ChanalableListNested<A> editOrNewV1beta1ChanalableList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ChanalableListNested<A> editOrNewV1beta1ChanalableListLike(io.dekorate.deps.knative.duck.v1beta1.ChannelableList);

  public abstract io.dekorate.deps.knative.duck.v1beta1.Channelable getV1beta1Channelable();

  public abstract io.dekorate.deps.knative.duck.v1beta1.Channelable buildV1beta1Channelable();

  public abstract A withV1beta1Channelable(io.dekorate.deps.knative.duck.v1beta1.Channelable);

  public abstract java.lang.Boolean hasV1beta1Channelable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ChannelableNested<A> withNewV1beta1V1beta1Channelable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ChannelableNested<A> withNewV1beta1ChannelableLike(io.dekorate.deps.knative.duck.v1beta1.Channelable);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ChannelableNested<A> editV1beta1V1beta1Channelable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ChannelableNested<A> editOrNewV1beta1Channelable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ChannelableNested<A> editOrNewV1beta1ChannelableLike(io.dekorate.deps.knative.duck.v1beta1.Channelable);

  public abstract io.dekorate.deps.knative.serving.v1beta1.Configuration getV1beta1Configuration();

  public abstract io.dekorate.deps.knative.serving.v1beta1.Configuration buildV1beta1Configuration();

  public abstract A withV1beta1Configuration(io.dekorate.deps.knative.serving.v1beta1.Configuration);

  public abstract java.lang.Boolean hasV1beta1Configuration();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ConfigurationNested<A> withNewV1beta1V1beta1Configuration();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ConfigurationNested<A> withNewV1beta1ConfigurationLike(io.dekorate.deps.knative.serving.v1beta1.Configuration);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ConfigurationNested<A> editV1beta1V1beta1Configuration();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ConfigurationNested<A> editOrNewV1beta1Configuration();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ConfigurationNested<A> editOrNewV1beta1ConfigurationLike(io.dekorate.deps.knative.serving.v1beta1.Configuration);

  public abstract io.dekorate.deps.knative.serving.v1beta1.ConfigurationList getV1beta1ConfigurationList();

  public abstract io.dekorate.deps.knative.serving.v1beta1.ConfigurationList buildV1beta1ConfigurationList();

  public abstract A withV1beta1ConfigurationList(io.dekorate.deps.knative.serving.v1beta1.ConfigurationList);

  public abstract java.lang.Boolean hasV1beta1ConfigurationList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ConfigurationListNested<A> withNewV1beta1V1beta1ConfigurationList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ConfigurationListNested<A> withNewV1beta1ConfigurationListLike(io.dekorate.deps.knative.serving.v1beta1.ConfigurationList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ConfigurationListNested<A> editV1beta1V1beta1ConfigurationList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ConfigurationListNested<A> editOrNewV1beta1ConfigurationList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ConfigurationListNested<A> editOrNewV1beta1ConfigurationListLike(io.dekorate.deps.knative.serving.v1beta1.ConfigurationList);

  public abstract io.dekorate.deps.knative.duck.v1beta1.DeliverySpec getV1beta1DeliverySpec();

  public abstract io.dekorate.deps.knative.duck.v1beta1.DeliverySpec buildV1beta1DeliverySpec();

  public abstract A withV1beta1DeliverySpec(io.dekorate.deps.knative.duck.v1beta1.DeliverySpec);

  public abstract java.lang.Boolean hasV1beta1DeliverySpec();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$KnativeV1beta1DeliverySpecNested<A> withNewKnativeV1beta1DeliverySpec();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$KnativeV1beta1DeliverySpecNested<A> withNewV1beta1DeliverySpecLike(io.dekorate.deps.knative.duck.v1beta1.DeliverySpec);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$KnativeV1beta1DeliverySpecNested<A> editKnativeV1beta1DeliverySpec();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$KnativeV1beta1DeliverySpecNested<A> editOrNewV1beta1DeliverySpec();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$KnativeV1beta1DeliverySpecNested<A> editOrNewV1beta1DeliverySpecLike(io.dekorate.deps.knative.duck.v1beta1.DeliverySpec);

  public abstract io.dekorate.deps.knative.serving.v1beta1.Revision getV1beta1Revision();

  public abstract io.dekorate.deps.knative.serving.v1beta1.Revision buildV1beta1Revision();

  public abstract A withV1beta1Revision(io.dekorate.deps.knative.serving.v1beta1.Revision);

  public abstract java.lang.Boolean hasV1beta1Revision();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RevisionNested<A> withNewV1beta1V1beta1Revision();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RevisionNested<A> withNewV1beta1RevisionLike(io.dekorate.deps.knative.serving.v1beta1.Revision);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RevisionNested<A> editV1beta1V1beta1Revision();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RevisionNested<A> editOrNewV1beta1Revision();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RevisionNested<A> editOrNewV1beta1RevisionLike(io.dekorate.deps.knative.serving.v1beta1.Revision);

  public abstract io.dekorate.deps.knative.serving.v1beta1.RevisionList getV1beta1RevisionList();

  public abstract io.dekorate.deps.knative.serving.v1beta1.RevisionList buildV1beta1RevisionList();

  public abstract A withV1beta1RevisionList(io.dekorate.deps.knative.serving.v1beta1.RevisionList);

  public abstract java.lang.Boolean hasV1beta1RevisionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RevisionListNested<A> withNewV1beta1V1beta1RevisionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RevisionListNested<A> withNewV1beta1RevisionListLike(io.dekorate.deps.knative.serving.v1beta1.RevisionList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RevisionListNested<A> editV1beta1V1beta1RevisionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RevisionListNested<A> editOrNewV1beta1RevisionList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RevisionListNested<A> editOrNewV1beta1RevisionListLike(io.dekorate.deps.knative.serving.v1beta1.RevisionList);

  public abstract io.dekorate.deps.knative.serving.v1beta1.Route getV1beta1Route();

  public abstract io.dekorate.deps.knative.serving.v1beta1.Route buildV1beta1Route();

  public abstract A withV1beta1Route(io.dekorate.deps.knative.serving.v1beta1.Route);

  public abstract java.lang.Boolean hasV1beta1Route();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RouteNested<A> withNewV1beta1V1beta1Route();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RouteNested<A> withNewV1beta1RouteLike(io.dekorate.deps.knative.serving.v1beta1.Route);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RouteNested<A> editV1beta1V1beta1Route();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RouteNested<A> editOrNewV1beta1Route();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RouteNested<A> editOrNewV1beta1RouteLike(io.dekorate.deps.knative.serving.v1beta1.Route);

  public abstract io.dekorate.deps.knative.serving.v1beta1.RouteList getV1beta1RouteList();

  public abstract io.dekorate.deps.knative.serving.v1beta1.RouteList buildV1beta1RouteList();

  public abstract A withV1beta1RouteList(io.dekorate.deps.knative.serving.v1beta1.RouteList);

  public abstract java.lang.Boolean hasV1beta1RouteList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RouteListNested<A> withNewV1beta1V1beta1RouteList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RouteListNested<A> withNewV1beta1RouteListLike(io.dekorate.deps.knative.serving.v1beta1.RouteList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RouteListNested<A> editV1beta1V1beta1RouteList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RouteListNested<A> editOrNewV1beta1RouteList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1RouteListNested<A> editOrNewV1beta1RouteListLike(io.dekorate.deps.knative.serving.v1beta1.RouteList);

  public abstract io.dekorate.deps.knative.serving.v1beta1.Service getV1beta1Service();

  public abstract io.dekorate.deps.knative.serving.v1beta1.Service buildV1beta1Service();

  public abstract A withV1beta1Service(io.dekorate.deps.knative.serving.v1beta1.Service);

  public abstract java.lang.Boolean hasV1beta1Service();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ServiceNested<A> withNewV1beta1V1beta1Service();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ServiceNested<A> withNewV1beta1ServiceLike(io.dekorate.deps.knative.serving.v1beta1.Service);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ServiceNested<A> editV1beta1V1beta1Service();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ServiceNested<A> editOrNewV1beta1Service();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ServiceNested<A> editOrNewV1beta1ServiceLike(io.dekorate.deps.knative.serving.v1beta1.Service);

  public abstract io.dekorate.deps.knative.serving.v1beta1.ServiceList getV1beta1ServiceList();

  public abstract io.dekorate.deps.knative.serving.v1beta1.ServiceList buildV1beta1ServiceList();

  public abstract A withV1beta1ServiceList(io.dekorate.deps.knative.serving.v1beta1.ServiceList);

  public abstract java.lang.Boolean hasV1beta1ServiceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ServiceListNested<A> withNewV1beta1V1beta1ServiceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ServiceListNested<A> withNewV1beta1ServiceListLike(io.dekorate.deps.knative.serving.v1beta1.ServiceList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ServiceListNested<A> editV1beta1V1beta1ServiceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ServiceListNested<A> editOrNewV1beta1ServiceList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1ServiceListNested<A> editOrNewV1beta1ServiceListLike(io.dekorate.deps.knative.serving.v1beta1.ServiceList);

  public abstract io.dekorate.deps.knative.duck.v1beta1.Subscribable getV1beta1Subscribable();

  public abstract io.dekorate.deps.knative.duck.v1beta1.Subscribable buildV1beta1Subscribable();

  public abstract A withV1beta1Subscribable(io.dekorate.deps.knative.duck.v1beta1.Subscribable);

  public abstract java.lang.Boolean hasV1beta1Subscribable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscribableNested<A> withNewV1beta1V1beta1Subscribable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscribableNested<A> withNewV1beta1SubscribableLike(io.dekorate.deps.knative.duck.v1beta1.Subscribable);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscribableNested<A> editV1beta1V1beta1Subscribable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscribableNested<A> editOrNewV1beta1Subscribable();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscribableNested<A> editOrNewV1beta1SubscribableLike(io.dekorate.deps.knative.duck.v1beta1.Subscribable);

  public abstract io.dekorate.deps.knative.duck.v1beta1.SubscribableList getV1beta1SubscribableList();

  public abstract io.dekorate.deps.knative.duck.v1beta1.SubscribableList buildV1beta1SubscribableList();

  public abstract A withV1beta1SubscribableList(io.dekorate.deps.knative.duck.v1beta1.SubscribableList);

  public abstract java.lang.Boolean hasV1beta1SubscribableList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1SubscribableListNested<A> withNewV1beta1SubscribableList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1SubscribableListNested<A> withNewV1beta1SubscribableListLike(io.dekorate.deps.knative.duck.v1beta1.SubscribableList);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1SubscribableListNested<A> editV1beta1SubscribableList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1SubscribableListNested<A> editOrNewV1beta1SubscribableList();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1SubscribableListNested<A> editOrNewV1beta1SubscribableListLike(io.dekorate.deps.knative.duck.v1beta1.SubscribableList);

  public abstract io.dekorate.deps.knative.duck.v1beta1.SubscribableStatus getV1beta1SubscribableStatus();

  public abstract io.dekorate.deps.knative.duck.v1beta1.SubscribableStatus buildV1beta1SubscribableStatus();

  public abstract A withV1beta1SubscribableStatus(io.dekorate.deps.knative.duck.v1beta1.SubscribableStatus);

  public abstract java.lang.Boolean hasV1beta1SubscribableStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscribableStatusNested<A> withNewV1beta1V1beta1SubscribableStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscribableStatusNested<A> withNewV1beta1SubscribableStatusLike(io.dekorate.deps.knative.duck.v1beta1.SubscribableStatus);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscribableStatusNested<A> editV1beta1V1beta1SubscribableStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscribableStatusNested<A> editOrNewV1beta1SubscribableStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscribableStatusNested<A> editOrNewV1beta1SubscribableStatusLike(io.dekorate.deps.knative.duck.v1beta1.SubscribableStatus);

  public abstract io.dekorate.deps.knative.duck.v1beta1.SubscriberStatus getV1beta1SubscriberStatus();

  public abstract io.dekorate.deps.knative.duck.v1beta1.SubscriberStatus buildV1beta1SubscriberStatus();

  public abstract A withV1beta1SubscriberStatus(io.dekorate.deps.knative.duck.v1beta1.SubscriberStatus);

  public abstract java.lang.Boolean hasV1beta1SubscriberStatus();

  public abstract A withNewV1beta1V1beta1SubscriberStatus(java.lang.String, java.lang.Long, java.lang.String, java.lang.String);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscriberStatusNested<A> withNewV1beta1V1beta1SubscriberStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscriberStatusNested<A> withNewV1beta1SubscriberStatusLike(io.dekorate.deps.knative.duck.v1beta1.SubscriberStatus);

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscriberStatusNested<A> editV1beta1V1beta1SubscriberStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscriberStatusNested<A> editOrNewV1beta1SubscriberStatus();

  public abstract io.dekorate.deps.knative.api.model.KnativeSchemaFluent$V1beta1V1beta1SubscriberStatusNested<A> editOrNewV1beta1SubscriberStatusLike(io.dekorate.deps.knative.duck.v1beta1.SubscriberStatus);
}
