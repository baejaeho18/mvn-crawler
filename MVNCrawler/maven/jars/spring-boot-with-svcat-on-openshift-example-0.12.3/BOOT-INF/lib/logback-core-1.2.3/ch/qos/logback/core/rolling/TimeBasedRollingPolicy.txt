Compiled from "TimeBasedRollingPolicy.java"
public class ch.qos.logback.core.rolling.TimeBasedRollingPolicy<E> extends ch.qos.logback.core.rolling.RollingPolicyBase implements ch.qos.logback.core.rolling.TriggeringPolicy<E> {
  static final java.lang.String FNP_NOT_SET;

  ch.qos.logback.core.rolling.helper.FileNamePattern fileNamePatternWithoutCompSuffix;

  private ch.qos.logback.core.rolling.helper.Compressor compressor;

  private ch.qos.logback.core.rolling.helper.RenameUtil renameUtil;

  java.util.concurrent.Future<?> compressionFuture;

  java.util.concurrent.Future<?> cleanUpFuture;

  private int maxHistory;

  protected ch.qos.logback.core.util.FileSize totalSizeCap;

  private ch.qos.logback.core.rolling.helper.ArchiveRemover archiveRemover;

  ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy<E> timeBasedFileNamingAndTriggeringPolicy;

  boolean cleanHistoryOnStart;

  public ch.qos.logback.core.rolling.TimeBasedRollingPolicy();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method ch/qos/logback/core/rolling/RollingPolicyBase."<init>":()V
       4: aload_0
       5: new           #2                  // class ch/qos/logback/core/rolling/helper/RenameUtil
       8: dup
       9: invokespecial #3                  // Method ch/qos/logback/core/rolling/helper/RenameUtil."<init>":()V
      12: putfield      #4                  // Field renameUtil:Lch/qos/logback/core/rolling/helper/RenameUtil;
      15: aload_0
      16: iconst_0
      17: putfield      #5                  // Field maxHistory:I
      20: aload_0
      21: new           #6                  // class ch/qos/logback/core/util/FileSize
      24: dup
      25: lconst_0
      26: invokespecial #7                  // Method ch/qos/logback/core/util/FileSize."<init>":(J)V
      29: putfield      #8                  // Field totalSizeCap:Lch/qos/logback/core/util/FileSize;
      32: aload_0
      33: iconst_0
      34: putfield      #9                  // Field cleanHistoryOnStart:Z
      37: return

  public void start();
    Code:
       0: aload_0
       1: getfield      #4                  // Field renameUtil:Lch/qos/logback/core/rolling/helper/RenameUtil;
       4: aload_0
       5: getfield      #10                 // Field context:Lch/qos/logback/core/Context;
       8: invokevirtual #11                 // Method ch/qos/logback/core/rolling/helper/RenameUtil.setContext:(Lch/qos/logback/core/Context;)V
      11: aload_0
      12: getfield      #12                 // Field fileNamePatternStr:Ljava/lang/String;
      15: ifnull        44
      18: aload_0
      19: new           #13                 // class ch/qos/logback/core/rolling/helper/FileNamePattern
      22: dup
      23: aload_0
      24: getfield      #12                 // Field fileNamePatternStr:Ljava/lang/String;
      27: aload_0
      28: getfield      #10                 // Field context:Lch/qos/logback/core/Context;
      31: invokespecial #14                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern."<init>":(Ljava/lang/String;Lch/qos/logback/core/Context;)V
      34: putfield      #15                 // Field fileNamePattern:Lch/qos/logback/core/rolling/helper/FileNamePattern;
      37: aload_0
      38: invokevirtual #16                 // Method determineCompressionMode:()V
      41: goto          66
      44: aload_0
      45: ldc           #17                 // String The FileNamePattern option must be set before using TimeBasedRollingPolicy.
      47: invokevirtual #18                 // Method addWarn:(Ljava/lang/String;)V
      50: aload_0
      51: ldc           #19                 // String See also http://logback.qos.ch/codes.html#tbr_fnp_not_set
      53: invokevirtual #18                 // Method addWarn:(Ljava/lang/String;)V
      56: new           #20                 // class java/lang/IllegalStateException
      59: dup
      60: ldc           #21                 // String The FileNamePattern option must be set before using TimeBasedRollingPolicy. See also http://logback.qos.ch/codes.html#tbr_fnp_not_set
      62: invokespecial #22                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      65: athrow
      66: aload_0
      67: new           #23                 // class ch/qos/logback/core/rolling/helper/Compressor
      70: dup
      71: aload_0
      72: getfield      #24                 // Field compressionMode:Lch/qos/logback/core/rolling/helper/CompressionMode;
      75: invokespecial #25                 // Method ch/qos/logback/core/rolling/helper/Compressor."<init>":(Lch/qos/logback/core/rolling/helper/CompressionMode;)V
      78: putfield      #26                 // Field compressor:Lch/qos/logback/core/rolling/helper/Compressor;
      81: aload_0
      82: getfield      #26                 // Field compressor:Lch/qos/logback/core/rolling/helper/Compressor;
      85: aload_0
      86: getfield      #10                 // Field context:Lch/qos/logback/core/Context;
      89: invokevirtual #27                 // Method ch/qos/logback/core/rolling/helper/Compressor.setContext:(Lch/qos/logback/core/Context;)V
      92: aload_0
      93: new           #13                 // class ch/qos/logback/core/rolling/helper/FileNamePattern
      96: dup
      97: aload_0
      98: getfield      #12                 // Field fileNamePatternStr:Ljava/lang/String;
     101: aload_0
     102: getfield      #24                 // Field compressionMode:Lch/qos/logback/core/rolling/helper/CompressionMode;
     105: invokestatic  #28                 // Method ch/qos/logback/core/rolling/helper/Compressor.computeFileNameStrWithoutCompSuffix:(Ljava/lang/String;Lch/qos/logback/core/rolling/helper/CompressionMode;)Ljava/lang/String;
     108: aload_0
     109: getfield      #10                 // Field context:Lch/qos/logback/core/Context;
     112: invokespecial #14                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern."<init>":(Ljava/lang/String;Lch/qos/logback/core/Context;)V
     115: putfield      #29                 // Field fileNamePatternWithoutCompSuffix:Lch/qos/logback/core/rolling/helper/FileNamePattern;
     118: aload_0
     119: new           #30                 // class java/lang/StringBuilder
     122: dup
     123: invokespecial #31                 // Method java/lang/StringBuilder."<init>":()V
     126: ldc           #32                 // String Will use the pattern
     128: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: aload_0
     132: getfield      #29                 // Field fileNamePatternWithoutCompSuffix:Lch/qos/logback/core/rolling/helper/FileNamePattern;
     135: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     138: ldc           #35                 // String  for the active file
     140: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     143: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     146: invokevirtual #37                 // Method addInfo:(Ljava/lang/String;)V
     149: aload_0
     150: getfield      #24                 // Field compressionMode:Lch/qos/logback/core/rolling/helper/CompressionMode;
     153: getstatic     #38                 // Field ch/qos/logback/core/rolling/helper/CompressionMode.ZIP:Lch/qos/logback/core/rolling/helper/CompressionMode;
     156: if_acmpne     184
     159: aload_0
     160: aload_0
     161: getfield      #12                 // Field fileNamePatternStr:Ljava/lang/String;
     164: invokespecial #39                 // Method transformFileNamePattern2ZipEntry:(Ljava/lang/String;)Ljava/lang/String;
     167: astore_1
     168: aload_0
     169: new           #13                 // class ch/qos/logback/core/rolling/helper/FileNamePattern
     172: dup
     173: aload_1
     174: aload_0
     175: getfield      #10                 // Field context:Lch/qos/logback/core/Context;
     178: invokespecial #14                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern."<init>":(Ljava/lang/String;Lch/qos/logback/core/Context;)V
     181: putfield      #40                 // Field zipEntryFileNamePattern:Lch/qos/logback/core/rolling/helper/FileNamePattern;
     184: aload_0
     185: getfield      #41                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     188: ifnonnull     202
     191: aload_0
     192: new           #42                 // class ch/qos/logback/core/rolling/DefaultTimeBasedFileNamingAndTriggeringPolicy
     195: dup
     196: invokespecial #43                 // Method ch/qos/logback/core/rolling/DefaultTimeBasedFileNamingAndTriggeringPolicy."<init>":()V
     199: putfield      #41                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     202: aload_0
     203: getfield      #41                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     206: aload_0
     207: getfield      #10                 // Field context:Lch/qos/logback/core/Context;
     210: invokeinterface #44,  2           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.setContext:(Lch/qos/logback/core/Context;)V
     215: aload_0
     216: getfield      #41                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     219: aload_0
     220: invokeinterface #45,  2           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.setTimeBasedRollingPolicy:(Lch/qos/logback/core/rolling/TimeBasedRollingPolicy;)V
     225: aload_0
     226: getfield      #41                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     229: invokeinterface #46,  1           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.start:()V
     234: aload_0
     235: getfield      #41                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     238: invokeinterface #47,  1           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.isStarted:()Z
     243: ifne          253
     246: aload_0
     247: ldc           #48                 // String Subcomponent did not start. TimeBasedRollingPolicy will not start.
     249: invokevirtual #18                 // Method addWarn:(Ljava/lang/String;)V
     252: return
     253: aload_0
     254: getfield      #5                  // Field maxHistory:I
     257: ifeq          349
     260: aload_0
     261: aload_0
     262: getfield      #41                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     265: invokeinterface #49,  1           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getArchiveRemover:()Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     270: putfield      #50                 // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     273: aload_0
     274: getfield      #50                 // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     277: aload_0
     278: getfield      #5                  // Field maxHistory:I
     281: invokeinterface #51,  2           // InterfaceMethod ch/qos/logback/core/rolling/helper/ArchiveRemover.setMaxHistory:(I)V
     286: aload_0
     287: getfield      #50                 // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     290: aload_0
     291: getfield      #8                  // Field totalSizeCap:Lch/qos/logback/core/util/FileSize;
     294: invokevirtual #52                 // Method ch/qos/logback/core/util/FileSize.getSize:()J
     297: invokeinterface #53,  3           // InterfaceMethod ch/qos/logback/core/rolling/helper/ArchiveRemover.setTotalSizeCap:(J)V
     302: aload_0
     303: getfield      #9                  // Field cleanHistoryOnStart:Z
     306: ifeq          387
     309: aload_0
     310: ldc           #54                 // String Cleaning on start up
     312: invokevirtual #37                 // Method addInfo:(Ljava/lang/String;)V
     315: new           #55                 // class java/util/Date
     318: dup
     319: aload_0
     320: getfield      #41                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     323: invokeinterface #56,  1           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getCurrentTime:()J
     328: invokespecial #57                 // Method java/util/Date."<init>":(J)V
     331: astore_1
     332: aload_0
     333: aload_0
     334: getfield      #50                 // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     337: aload_1
     338: invokeinterface #58,  2           // InterfaceMethod ch/qos/logback/core/rolling/helper/ArchiveRemover.cleanAsynchronously:(Ljava/util/Date;)Ljava/util/concurrent/Future;
     343: putfield      #59                 // Field cleanUpFuture:Ljava/util/concurrent/Future;
     346: goto          387
     349: aload_0
     350: invokevirtual #60                 // Method isUnboundedTotalSizeCap:()Z
     353: ifne          387
     356: aload_0
     357: new           #30                 // class java/lang/StringBuilder
     360: dup
     361: invokespecial #31                 // Method java/lang/StringBuilder."<init>":()V
     364: ldc           #61                 // String \'maxHistory\' is not set, ignoring \'totalSizeCap\' option with value [
     366: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     369: aload_0
     370: getfield      #8                  // Field totalSizeCap:Lch/qos/logback/core/util/FileSize;
     373: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     376: ldc           #62                 // String ]
     378: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     381: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     384: invokevirtual #18                 // Method addWarn:(Ljava/lang/String;)V
     387: aload_0
     388: invokespecial #63                 // Method ch/qos/logback/core/rolling/RollingPolicyBase.start:()V
     391: return

  protected boolean isUnboundedTotalSizeCap();
    Code:
       0: aload_0
       1: getfield      #8                  // Field totalSizeCap:Lch/qos/logback/core/util/FileSize;
       4: invokevirtual #52                 // Method ch/qos/logback/core/util/FileSize.getSize:()J
       7: lconst_0
       8: lcmp
       9: ifne          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public void stop();
    Code:
       0: aload_0
       1: invokevirtual #64                 // Method isStarted:()Z
       4: ifne          8
       7: return
       8: aload_0
       9: aload_0
      10: getfield      #65                 // Field compressionFuture:Ljava/util/concurrent/Future;
      13: ldc           #66                 // String compression
      15: invokespecial #67                 // Method waitForAsynchronousJobToStop:(Ljava/util/concurrent/Future;Ljava/lang/String;)V
      18: aload_0
      19: aload_0
      20: getfield      #59                 // Field cleanUpFuture:Ljava/util/concurrent/Future;
      23: ldc           #68                 // String clean-up
      25: invokespecial #67                 // Method waitForAsynchronousJobToStop:(Ljava/util/concurrent/Future;Ljava/lang/String;)V
      28: aload_0
      29: invokespecial #69                 // Method ch/qos/logback/core/rolling/RollingPolicyBase.stop:()V
      32: return

  private void waitForAsynchronousJobToStop(java.util.concurrent.Future<?>, java.lang.String);
    Code:
       0: aload_1
       1: ifnull        83
       4: aload_1
       5: ldc2_w        #70                 // long 30l
       8: getstatic     #72                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      11: invokeinterface #73,  4           // InterfaceMethod java/util/concurrent/Future.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;
      16: pop
      17: goto          83
      20: astore_3
      21: aload_0
      22: new           #30                 // class java/lang/StringBuilder
      25: dup
      26: invokespecial #31                 // Method java/lang/StringBuilder."<init>":()V
      29: ldc           #75                 // String Timeout while waiting for
      31: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: aload_2
      35: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: ldc           #76                 // String  job to finish
      40: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: aload_3
      47: invokevirtual #77                 // Method addError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      50: goto          83
      53: astore_3
      54: aload_0
      55: new           #30                 // class java/lang/StringBuilder
      58: dup
      59: invokespecial #31                 // Method java/lang/StringBuilder."<init>":()V
      62: ldc           #79                 // String Unexpected exception while waiting for
      64: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: aload_2
      68: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: ldc           #76                 // String  job to finish
      73: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      76: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      79: aload_3
      80: invokevirtual #77                 // Method addError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      83: return
    Exception table:
       from    to  target type
           4    17    20   Class java/util/concurrent/TimeoutException
           4    17    53   Class java/lang/Exception

  private java.lang.String transformFileNamePattern2ZipEntry(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #80                 // Method ch/qos/logback/core/rolling/helper/FileFilterUtil.slashify:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: invokestatic  #81                 // Method ch/qos/logback/core/rolling/helper/FileFilterUtil.afterLastSlash:(Ljava/lang/String;)Ljava/lang/String;
       9: areturn

  public void setTimeBasedFileNamingAndTriggeringPolicy(ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy<E>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #41                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
       5: return

  public ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy<E> getTimeBasedFileNamingAndTriggeringPolicy();
    Code:
       0: aload_0
       1: getfield      #41                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
       4: areturn

  public void rollover() throws ch.qos.logback.core.rolling.RolloverFailure;
    Code:
       0: aload_0
       1: getfield      #41                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
       4: invokeinterface #82,  1           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getElapsedPeriodsFileName:()Ljava/lang/String;
       9: astore_1
      10: aload_1
      11: invokestatic  #81                 // Method ch/qos/logback/core/rolling/helper/FileFilterUtil.afterLastSlash:(Ljava/lang/String;)Ljava/lang/String;
      14: astore_2
      15: aload_0
      16: getfield      #24                 // Field compressionMode:Lch/qos/logback/core/rolling/helper/CompressionMode;
      19: getstatic     #83                 // Field ch/qos/logback/core/rolling/helper/CompressionMode.NONE:Lch/qos/logback/core/rolling/helper/CompressionMode;
      22: if_acmpne     47
      25: aload_0
      26: invokevirtual #84                 // Method getParentsRawFileProperty:()Ljava/lang/String;
      29: ifnull        81
      32: aload_0
      33: getfield      #4                  // Field renameUtil:Lch/qos/logback/core/rolling/helper/RenameUtil;
      36: aload_0
      37: invokevirtual #84                 // Method getParentsRawFileProperty:()Ljava/lang/String;
      40: aload_1
      41: invokevirtual #85                 // Method ch/qos/logback/core/rolling/helper/RenameUtil.rename:(Ljava/lang/String;Ljava/lang/String;)V
      44: goto          81
      47: aload_0
      48: invokevirtual #84                 // Method getParentsRawFileProperty:()Ljava/lang/String;
      51: ifnonnull     71
      54: aload_0
      55: aload_0
      56: getfield      #26                 // Field compressor:Lch/qos/logback/core/rolling/helper/Compressor;
      59: aload_1
      60: aload_1
      61: aload_2
      62: invokevirtual #86                 // Method ch/qos/logback/core/rolling/helper/Compressor.asyncCompress:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/concurrent/Future;
      65: putfield      #65                 // Field compressionFuture:Ljava/util/concurrent/Future;
      68: goto          81
      71: aload_0
      72: aload_0
      73: aload_1
      74: aload_2
      75: invokevirtual #87                 // Method renameRawAndAsyncCompress:(Ljava/lang/String;Ljava/lang/String;)Ljava/util/concurrent/Future;
      78: putfield      #65                 // Field compressionFuture:Ljava/util/concurrent/Future;
      81: aload_0
      82: getfield      #50                 // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
      85: ifnull        119
      88: new           #55                 // class java/util/Date
      91: dup
      92: aload_0
      93: getfield      #41                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
      96: invokeinterface #56,  1           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getCurrentTime:()J
     101: invokespecial #57                 // Method java/util/Date."<init>":(J)V
     104: astore_3
     105: aload_0
     106: aload_0
     107: getfield      #50                 // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     110: aload_3
     111: invokeinterface #58,  2           // InterfaceMethod ch/qos/logback/core/rolling/helper/ArchiveRemover.cleanAsynchronously:(Ljava/util/Date;)Ljava/util/concurrent/Future;
     116: putfield      #59                 // Field cleanUpFuture:Ljava/util/concurrent/Future;
     119: return

  java.util.concurrent.Future<?> renameRawAndAsyncCompress(java.lang.String, java.lang.String) throws ch.qos.logback.core.rolling.RolloverFailure;
    Code:
       0: aload_0
       1: invokevirtual #84                 // Method getParentsRawFileProperty:()Ljava/lang/String;
       4: astore_3
       5: new           #30                 // class java/lang/StringBuilder
       8: dup
       9: invokespecial #31                 // Method java/lang/StringBuilder."<init>":()V
      12: aload_1
      13: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: invokestatic  #88                 // Method java/lang/System.nanoTime:()J
      19: invokevirtual #89                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      22: ldc           #90                 // String .tmp
      24: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      30: astore        4
      32: aload_0
      33: getfield      #4                  // Field renameUtil:Lch/qos/logback/core/rolling/helper/RenameUtil;
      36: aload_3
      37: aload         4
      39: invokevirtual #85                 // Method ch/qos/logback/core/rolling/helper/RenameUtil.rename:(Ljava/lang/String;Ljava/lang/String;)V
      42: aload_0
      43: getfield      #26                 // Field compressor:Lch/qos/logback/core/rolling/helper/Compressor;
      46: aload         4
      48: aload_1
      49: aload_2
      50: invokevirtual #86                 // Method ch/qos/logback/core/rolling/helper/Compressor.asyncCompress:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/concurrent/Future;
      53: areturn

  public java.lang.String getActiveFileName();
    Code:
       0: aload_0
       1: invokevirtual #84                 // Method getParentsRawFileProperty:()Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: ifnull        11
       9: aload_1
      10: areturn
      11: aload_0
      12: getfield      #41                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
      15: invokeinterface #91,  1           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getCurrentPeriodsFileNameWithoutCompressionSuffix:()Ljava/lang/String;
      20: areturn

  public boolean isTriggeringEvent(java.io.File, E);
    Code:
       0: aload_0
       1: getfield      #41                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
       4: aload_1
       5: aload_2
       6: invokeinterface #92,  3           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.isTriggeringEvent:(Ljava/io/File;Ljava/lang/Object;)Z
      11: ireturn

  public int getMaxHistory();
    Code:
       0: aload_0
       1: getfield      #5                  // Field maxHistory:I
       4: ireturn

  public void setMaxHistory(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field maxHistory:I
       5: return

  public boolean isCleanHistoryOnStart();
    Code:
       0: aload_0
       1: getfield      #9                  // Field cleanHistoryOnStart:Z
       4: ireturn

  public void setCleanHistoryOnStart(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field cleanHistoryOnStart:Z
       5: return

  public java.lang.String toString();
    Code:
       0: new           #30                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #31                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #93                 // String c.q.l.core.rolling.TimeBasedRollingPolicy@
       9: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokevirtual #94                 // Method java/lang/Object.hashCode:()I
      16: invokevirtual #95                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      19: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      22: areturn

  public void setTotalSizeCap(ch.qos.logback.core.util.FileSize);
    Code:
       0: aload_0
       1: new           #30                 // class java/lang/StringBuilder
       4: dup
       5: invokespecial #31                 // Method java/lang/StringBuilder."<init>":()V
       8: ldc           #96                 // String setting totalSizeCap to
      10: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      13: aload_1
      14: invokevirtual #97                 // Method ch/qos/logback/core/util/FileSize.toString:()Ljava/lang/String;
      17: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      23: invokevirtual #37                 // Method addInfo:(Ljava/lang/String;)V
      26: aload_0
      27: aload_1
      28: putfield      #8                  // Field totalSizeCap:Lch/qos/logback/core/util/FileSize;
      31: return
}
