Compiled from "SizeAndTimeBasedRollingPolicy.java"
public class ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy<E> extends ch.qos.logback.core.rolling.TimeBasedRollingPolicy<E> {
  ch.qos.logback.core.util.FileSize maxFileSize;

  public ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method ch/qos/logback/core/rolling/TimeBasedRollingPolicy."<init>":()V
       4: return

  public void start();
    Code:
       0: new           #2                  // class ch/qos/logback/core/rolling/SizeAndTimeBasedFNATP
       3: dup
       4: getstatic     #3                  // Field ch/qos/logback/core/rolling/SizeAndTimeBasedFNATP$Usage.EMBEDDED:Lch/qos/logback/core/rolling/SizeAndTimeBasedFNATP$Usage;
       7: invokespecial #4                  // Method ch/qos/logback/core/rolling/SizeAndTimeBasedFNATP."<init>":(Lch/qos/logback/core/rolling/SizeAndTimeBasedFNATP$Usage;)V
      10: astore_1
      11: aload_0
      12: getfield      #5                  // Field maxFileSize:Lch/qos/logback/core/util/FileSize;
      15: ifnonnull     25
      18: aload_0
      19: ldc           #6                  // String maxFileSize property is mandatory.
      21: invokevirtual #7                  // Method addError:(Ljava/lang/String;)V
      24: return
      25: aload_0
      26: new           #8                  // class java/lang/StringBuilder
      29: dup
      30: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
      33: ldc           #10                 // String Archive files will be limited to [
      35: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: aload_0
      39: getfield      #5                  // Field maxFileSize:Lch/qos/logback/core/util/FileSize;
      42: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      45: ldc           #13                 // String ] each.
      47: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      53: invokevirtual #15                 // Method addInfo:(Ljava/lang/String;)V
      56: aload_1
      57: aload_0
      58: getfield      #5                  // Field maxFileSize:Lch/qos/logback/core/util/FileSize;
      61: invokevirtual #16                 // Method ch/qos/logback/core/rolling/SizeAndTimeBasedFNATP.setMaxFileSize:(Lch/qos/logback/core/util/FileSize;)V
      64: aload_0
      65: aload_1
      66: putfield      #17                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
      69: aload_0
      70: invokevirtual #18                 // Method isUnboundedTotalSizeCap:()Z
      73: ifne          138
      76: aload_0
      77: getfield      #19                 // Field totalSizeCap:Lch/qos/logback/core/util/FileSize;
      80: invokevirtual #20                 // Method ch/qos/logback/core/util/FileSize.getSize:()J
      83: aload_0
      84: getfield      #5                  // Field maxFileSize:Lch/qos/logback/core/util/FileSize;
      87: invokevirtual #20                 // Method ch/qos/logback/core/util/FileSize.getSize:()J
      90: lcmp
      91: ifge          138
      94: aload_0
      95: new           #8                  // class java/lang/StringBuilder
      98: dup
      99: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
     102: ldc           #21                 // String totalSizeCap of [
     104: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     107: aload_0
     108: getfield      #19                 // Field totalSizeCap:Lch/qos/logback/core/util/FileSize;
     111: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     114: ldc           #22                 // String ] is smaller than maxFileSize [
     116: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     119: aload_0
     120: getfield      #5                  // Field maxFileSize:Lch/qos/logback/core/util/FileSize;
     123: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     126: ldc           #23                 // String ] which is non-sensical
     128: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     134: invokevirtual #7                  // Method addError:(Ljava/lang/String;)V
     137: return
     138: aload_0
     139: invokespecial #24                 // Method ch/qos/logback/core/rolling/TimeBasedRollingPolicy.start:()V
     142: return

  public void setMaxFileSize(ch.qos.logback.core.util.FileSize);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field maxFileSize:Lch/qos/logback/core/util/FileSize;
       5: return

  public java.lang.String toString();
    Code:
       0: new           #8                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #25                 // String c.q.l.core.rolling.SizeAndTimeBasedRollingPolicy@
       9: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokevirtual #26                 // Method java/lang/Object.hashCode:()I
      16: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      19: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      22: areturn
}
