Compiled from "SimpleResourceDescription.java"
public class org.springframework.data.rest.core.mapping.SimpleResourceDescription extends org.springframework.data.rest.core.mapping.ResolvableResourceDescriptionSupport {
  public static final java.lang.String DEFAULT_KEY_PREFIX;

  protected static final org.springframework.http.MediaType DEFAULT_MEDIA_TYPE;

  private final java.lang.String message;

  private final org.springframework.http.MediaType mediaType;

  protected org.springframework.data.rest.core.mapping.SimpleResourceDescription(java.lang.String, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/data/rest/core/mapping/ResolvableResourceDescriptionSupport."<init>":()V
       4: aload_1
       5: ldc           #2                  // String Message must not be null or empty!
       7: invokestatic  #3                  // Method org/springframework/util/Assert.hasText:(Ljava/lang/String;Ljava/lang/String;)V
      10: aload_2
      11: ldc           #4                  // String MediaType must not be null!
      13: invokestatic  #5                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      16: aload_0
      17: aload_1
      18: putfield      #6                  // Field message:Ljava/lang/String;
      21: aload_0
      22: aload_2
      23: putfield      #7                  // Field mediaType:Lorg/springframework/http/MediaType;
      26: return

  public static org.springframework.data.rest.core.mapping.ResourceDescription defaultFor(java.lang.String);
    Code:
       0: new           #8                  // class org/springframework/data/rest/core/mapping/SimpleResourceDescription
       3: dup
       4: ldc           #9                  // String %s.%s
       6: iconst_2
       7: anewarray     #10                 // class java/lang/Object
      10: dup
      11: iconst_0
      12: ldc           #11                 // String rest.description
      14: aastore
      15: dup
      16: iconst_1
      17: aload_0
      18: aastore
      19: invokestatic  #12                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      22: getstatic     #13                 // Field DEFAULT_MEDIA_TYPE:Lorg/springframework/http/MediaType;
      25: invokespecial #14                 // Method "<init>":(Ljava/lang/String;Lorg/springframework/http/MediaType;)V
      28: areturn

  public java.lang.String getMessage();
    Code:
       0: aload_0
       1: getfield      #6                  // Field message:Ljava/lang/String;
       4: areturn

  public org.springframework.http.MediaType getType();
    Code:
       0: aload_0
       1: getfield      #7                  // Field mediaType:Lorg/springframework/http/MediaType;
       4: areturn

  public boolean isDefault();
    Code:
       0: aload_0
       1: getfield      #6                  // Field message:Ljava/lang/String;
       4: invokestatic  #15                 // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
       7: ifeq          26
      10: aload_0
      11: getfield      #6                  // Field message:Ljava/lang/String;
      14: ldc           #11                 // String rest.description
      16: invokevirtual #16                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      19: ifeq          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  public java.lang.String[] getCodes();
    Code:
       0: iconst_1
       1: anewarray     #17                 // class java/lang/String
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #6                  // Field message:Ljava/lang/String;
      10: aastore
      11: areturn

  static {};
    Code:
       0: getstatic     #18                 // Field org/springframework/http/MediaType.TEXT_PLAIN:Lorg/springframework/http/MediaType;
       3: putstatic     #13                 // Field DEFAULT_MEDIA_TYPE:Lorg/springframework/http/MediaType;
       6: return
}
