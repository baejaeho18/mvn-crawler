Compiled from "LatencyStats.java"
public class org.LatencyUtils.LatencyStats {
  private static org.LatencyUtils.LatencyStats$Builder defaultBuilder;

  private static final org.LatencyUtils.TimeServices$ScheduledExecutor latencyStatsScheduledExecutor;

  private static org.LatencyUtils.PauseDetector defaultPauseDetector;

  private final long lowestTrackableLatency;

  private final long highestTrackableLatency;

  private final int numberOfSignificantValueDigits;

  private volatile org.HdrHistogram.AtomicHistogram activeRecordingHistogram;

  private org.HdrHistogram.Histogram activePauseCorrectionsHistogram;

  private org.HdrHistogram.AtomicHistogram inactiveRawDataHistogram;

  private org.HdrHistogram.Histogram inactivePauseCorrectionsHistogram;

  private final org.HdrHistogram.WriterReaderPhaser recordingPhaser;

  private final org.LatencyUtils.LatencyStats$PauseTracker pauseTracker;

  private final org.LatencyUtils.IntervalEstimator intervalEstimator;

  private final org.LatencyUtils.PauseDetector pauseDetector;

  public static void setDefaultPauseDetector(org.LatencyUtils.PauseDetector);
    Code:
       0: aload_0
       1: putstatic     #2                  // Field defaultPauseDetector:Lorg/LatencyUtils/PauseDetector;
       4: return

  public static org.LatencyUtils.PauseDetector getDefaultPauseDetector();
    Code:
       0: getstatic     #2                  // Field defaultPauseDetector:Lorg/LatencyUtils/PauseDetector;
       3: areturn

  public org.LatencyUtils.LatencyStats();
    Code:
       0: aload_0
       1: getstatic     #3                  // Field defaultBuilder:Lorg/LatencyUtils/LatencyStats$Builder;
       4: invokestatic  #4                  // Method org/LatencyUtils/LatencyStats$Builder.access$000:(Lorg/LatencyUtils/LatencyStats$Builder;)J
       7: getstatic     #3                  // Field defaultBuilder:Lorg/LatencyUtils/LatencyStats$Builder;
      10: invokestatic  #5                  // Method org/LatencyUtils/LatencyStats$Builder.access$100:(Lorg/LatencyUtils/LatencyStats$Builder;)J
      13: getstatic     #3                  // Field defaultBuilder:Lorg/LatencyUtils/LatencyStats$Builder;
      16: invokestatic  #6                  // Method org/LatencyUtils/LatencyStats$Builder.access$200:(Lorg/LatencyUtils/LatencyStats$Builder;)I
      19: getstatic     #3                  // Field defaultBuilder:Lorg/LatencyUtils/LatencyStats$Builder;
      22: invokestatic  #7                  // Method org/LatencyUtils/LatencyStats$Builder.access$300:(Lorg/LatencyUtils/LatencyStats$Builder;)I
      25: getstatic     #3                  // Field defaultBuilder:Lorg/LatencyUtils/LatencyStats$Builder;
      28: invokestatic  #8                  // Method org/LatencyUtils/LatencyStats$Builder.access$400:(Lorg/LatencyUtils/LatencyStats$Builder;)J
      31: getstatic     #3                  // Field defaultBuilder:Lorg/LatencyUtils/LatencyStats$Builder;
      34: invokestatic  #9                  // Method org/LatencyUtils/LatencyStats$Builder.access$500:(Lorg/LatencyUtils/LatencyStats$Builder;)Lorg/LatencyUtils/PauseDetector;
      37: invokespecial #10                 // Method "<init>":(JJIIJLorg/LatencyUtils/PauseDetector;)V
      40: return

  public org.LatencyUtils.LatencyStats(long, long, int, int, long, org.LatencyUtils.PauseDetector);
    Code:
       0: aload_0
       1: invokespecial #11                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #12                 // class org/HdrHistogram/WriterReaderPhaser
       8: dup
       9: invokespecial #13                 // Method org/HdrHistogram/WriterReaderPhaser."<init>":()V
      12: putfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      15: aload         9
      17: ifnonnull     72
      20: getstatic     #2                  // Field defaultPauseDetector:Lorg/LatencyUtils/PauseDetector;
      23: ifnonnull     62
      26: ldc           #15                 // class org/LatencyUtils/LatencyStats
      28: dup
      29: astore        10
      31: monitorenter
      32: getstatic     #2                  // Field defaultPauseDetector:Lorg/LatencyUtils/PauseDetector;
      35: ifnonnull     48
      38: new           #16                 // class org/LatencyUtils/SimplePauseDetector
      41: dup
      42: invokespecial #17                 // Method org/LatencyUtils/SimplePauseDetector."<init>":()V
      45: putstatic     #2                  // Field defaultPauseDetector:Lorg/LatencyUtils/PauseDetector;
      48: aload         10
      50: monitorexit
      51: goto          62
      54: astore        11
      56: aload         10
      58: monitorexit
      59: aload         11
      61: athrow
      62: aload_0
      63: getstatic     #2                  // Field defaultPauseDetector:Lorg/LatencyUtils/PauseDetector;
      66: putfield      #18                 // Field pauseDetector:Lorg/LatencyUtils/PauseDetector;
      69: goto          78
      72: aload_0
      73: aload         9
      75: putfield      #18                 // Field pauseDetector:Lorg/LatencyUtils/PauseDetector;
      78: aload_0
      79: lload_1
      80: putfield      #19                 // Field lowestTrackableLatency:J
      83: aload_0
      84: lload_3
      85: putfield      #20                 // Field highestTrackableLatency:J
      88: aload_0
      89: iload         5
      91: putfield      #21                 // Field numberOfSignificantValueDigits:I
      94: aload_0
      95: new           #22                 // class org/HdrHistogram/AtomicHistogram
      98: dup
      99: lload_1
     100: lload_3
     101: iload         5
     103: invokespecial #23                 // Method org/HdrHistogram/AtomicHistogram."<init>":(JJI)V
     106: putfield      #24                 // Field activeRecordingHistogram:Lorg/HdrHistogram/AtomicHistogram;
     109: aload_0
     110: new           #22                 // class org/HdrHistogram/AtomicHistogram
     113: dup
     114: lload_1
     115: lload_3
     116: iload         5
     118: invokespecial #23                 // Method org/HdrHistogram/AtomicHistogram."<init>":(JJI)V
     121: putfield      #25                 // Field inactiveRawDataHistogram:Lorg/HdrHistogram/AtomicHistogram;
     124: aload_0
     125: new           #26                 // class org/HdrHistogram/Histogram
     128: dup
     129: lload_1
     130: lload_3
     131: iload         5
     133: invokespecial #27                 // Method org/HdrHistogram/Histogram."<init>":(JJI)V
     136: putfield      #28                 // Field activePauseCorrectionsHistogram:Lorg/HdrHistogram/Histogram;
     139: aload_0
     140: new           #26                 // class org/HdrHistogram/Histogram
     143: dup
     144: lload_1
     145: lload_3
     146: iload         5
     148: invokespecial #27                 // Method org/HdrHistogram/Histogram."<init>":(JJI)V
     151: putfield      #29                 // Field inactivePauseCorrectionsHistogram:Lorg/HdrHistogram/Histogram;
     154: aload_0
     155: new           #30                 // class org/LatencyUtils/TimeCappedMovingAverageIntervalEstimator
     158: dup
     159: iload         6
     161: lload         7
     163: aload_0
     164: getfield      #18                 // Field pauseDetector:Lorg/LatencyUtils/PauseDetector;
     167: invokespecial #31                 // Method org/LatencyUtils/TimeCappedMovingAverageIntervalEstimator."<init>":(IJLorg/LatencyUtils/PauseDetector;)V
     170: putfield      #32                 // Field intervalEstimator:Lorg/LatencyUtils/IntervalEstimator;
     173: aload_0
     174: new           #33                 // class org/LatencyUtils/LatencyStats$PauseTracker
     177: dup
     178: aload_0
     179: getfield      #18                 // Field pauseDetector:Lorg/LatencyUtils/PauseDetector;
     182: aload_0
     183: invokespecial #34                 // Method org/LatencyUtils/LatencyStats$PauseTracker."<init>":(Lorg/LatencyUtils/PauseDetector;Lorg/LatencyUtils/LatencyStats;)V
     186: putfield      #35                 // Field pauseTracker:Lorg/LatencyUtils/LatencyStats$PauseTracker;
     189: invokestatic  #36                 // Method java/lang/System.currentTimeMillis:()J
     192: lstore        10
     194: aload_0
     195: getfield      #24                 // Field activeRecordingHistogram:Lorg/HdrHistogram/AtomicHistogram;
     198: lload         10
     200: invokevirtual #37                 // Method org/HdrHistogram/AtomicHistogram.setStartTimeStamp:(J)V
     203: aload_0
     204: getfield      #28                 // Field activePauseCorrectionsHistogram:Lorg/HdrHistogram/Histogram;
     207: lload         10
     209: invokevirtual #38                 // Method org/HdrHistogram/Histogram.setStartTimeStamp:(J)V
     212: return
    Exception table:
       from    to  target type
          32    51    54   any
          54    59    54   any

  public void recordLatency(long);
    Code:
       0: aload_0
       1: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #39                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionEnter:()J
       7: lstore_3
       8: aload_0
       9: invokespecial #40                 // Method trackRecordingInterval:()V
      12: aload_0
      13: getfield      #24                 // Field activeRecordingHistogram:Lorg/HdrHistogram/AtomicHistogram;
      16: lload_1
      17: invokevirtual #41                 // Method org/HdrHistogram/AtomicHistogram.recordValue:(J)V
      20: aload_0
      21: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      24: lload_3
      25: invokevirtual #42                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      28: goto          44
      31: astore        5
      33: aload_0
      34: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      37: lload_3
      38: invokevirtual #42                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      41: aload         5
      43: athrow
      44: return
    Exception table:
       from    to  target type
           8    20    31   any
          31    33    31   any

  public synchronized org.HdrHistogram.Histogram getIntervalHistogram();
    Code:
       0: new           #26                 // class org/HdrHistogram/Histogram
       3: dup
       4: aload_0
       5: getfield      #19                 // Field lowestTrackableLatency:J
       8: aload_0
       9: getfield      #20                 // Field highestTrackableLatency:J
      12: aload_0
      13: getfield      #21                 // Field numberOfSignificantValueDigits:I
      16: invokespecial #27                 // Method org/HdrHistogram/Histogram."<init>":(JJI)V
      19: astore_1
      20: aload_0
      21: aload_1
      22: invokevirtual #43                 // Method getIntervalHistogramInto:(Lorg/HdrHistogram/Histogram;)V
      25: aload_1
      26: areturn

  public synchronized void getIntervalHistogramInto(org.HdrHistogram.Histogram);
    Code:
       0: aload_0
       1: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #44                 // Method org/HdrHistogram/WriterReaderPhaser.readerLock:()V
       7: aload_0
       8: invokespecial #45                 // Method updateHistograms:()V
      11: aload_0
      12: getfield      #25                 // Field inactiveRawDataHistogram:Lorg/HdrHistogram/AtomicHistogram;
      15: aload_1
      16: invokevirtual #46                 // Method org/HdrHistogram/AtomicHistogram.copyInto:(Lorg/HdrHistogram/AbstractHistogram;)V
      19: aload_1
      20: aload_0
      21: getfield      #29                 // Field inactivePauseCorrectionsHistogram:Lorg/HdrHistogram/Histogram;
      24: invokevirtual #47                 // Method org/HdrHistogram/Histogram.add:(Lorg/HdrHistogram/AbstractHistogram;)V
      27: aload_0
      28: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      31: invokevirtual #48                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
      34: goto          47
      37: astore_2
      38: aload_0
      39: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      42: invokevirtual #48                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
      45: aload_2
      46: athrow
      47: return
    Exception table:
       from    to  target type
           0    27    37   any

  public synchronized void addIntervalHistogramTo(org.HdrHistogram.Histogram);
    Code:
       0: aload_0
       1: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #44                 // Method org/HdrHistogram/WriterReaderPhaser.readerLock:()V
       7: aload_0
       8: invokespecial #45                 // Method updateHistograms:()V
      11: aload_1
      12: aload_0
      13: getfield      #25                 // Field inactiveRawDataHistogram:Lorg/HdrHistogram/AtomicHistogram;
      16: invokevirtual #47                 // Method org/HdrHistogram/Histogram.add:(Lorg/HdrHistogram/AbstractHistogram;)V
      19: aload_1
      20: aload_0
      21: getfield      #29                 // Field inactivePauseCorrectionsHistogram:Lorg/HdrHistogram/Histogram;
      24: invokevirtual #47                 // Method org/HdrHistogram/Histogram.add:(Lorg/HdrHistogram/AbstractHistogram;)V
      27: aload_0
      28: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      31: invokevirtual #48                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
      34: goto          47
      37: astore_2
      38: aload_0
      39: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      42: invokevirtual #48                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
      45: aload_2
      46: athrow
      47: return
    Exception table:
       from    to  target type
           0    27    37   any

  public synchronized org.HdrHistogram.Histogram getLatestUncorrectedIntervalHistogram();
    Code:
       0: aload_0
       1: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #44                 // Method org/HdrHistogram/WriterReaderPhaser.readerLock:()V
       7: new           #26                 // class org/HdrHistogram/Histogram
      10: dup
      11: aload_0
      12: getfield      #19                 // Field lowestTrackableLatency:J
      15: aload_0
      16: getfield      #20                 // Field highestTrackableLatency:J
      19: aload_0
      20: getfield      #21                 // Field numberOfSignificantValueDigits:I
      23: invokespecial #27                 // Method org/HdrHistogram/Histogram."<init>":(JJI)V
      26: astore_1
      27: aload_0
      28: aload_1
      29: invokevirtual #49                 // Method getLatestUncorrectedIntervalHistogramInto:(Lorg/HdrHistogram/Histogram;)V
      32: aload_1
      33: astore_2
      34: aload_0
      35: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      38: invokevirtual #48                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
      41: aload_2
      42: areturn
      43: astore_3
      44: aload_0
      45: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      48: invokevirtual #48                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
      51: aload_3
      52: athrow
    Exception table:
       from    to  target type
           0    34    43   any

  public synchronized void getLatestUncorrectedIntervalHistogramInto(org.HdrHistogram.Histogram);
    Code:
       0: aload_0
       1: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #44                 // Method org/HdrHistogram/WriterReaderPhaser.readerLock:()V
       7: aload_0
       8: getfield      #25                 // Field inactiveRawDataHistogram:Lorg/HdrHistogram/AtomicHistogram;
      11: aload_1
      12: invokevirtual #46                 // Method org/HdrHistogram/AtomicHistogram.copyInto:(Lorg/HdrHistogram/AbstractHistogram;)V
      15: aload_0
      16: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      19: invokevirtual #48                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
      22: goto          35
      25: astore_2
      26: aload_0
      27: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      30: invokevirtual #48                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
      33: aload_2
      34: athrow
      35: return
    Exception table:
       from    to  target type
           0    15    25   any

  public synchronized void stop();
    Code:
       0: aload_0
       1: getfield      #35                 // Field pauseTracker:Lorg/LatencyUtils/LatencyStats$PauseTracker;
       4: invokevirtual #50                 // Method org/LatencyUtils/LatencyStats$PauseTracker.stop:()V
       7: getstatic     #51                 // Field latencyStatsScheduledExecutor:Lorg/LatencyUtils/TimeServices$ScheduledExecutor;
      10: invokevirtual #52                 // Method org/LatencyUtils/TimeServices$ScheduledExecutor.shutdown:()V
      13: return

  public org.LatencyUtils.IntervalEstimator getIntervalEstimator();
    Code:
       0: aload_0
       1: getfield      #32                 // Field intervalEstimator:Lorg/LatencyUtils/IntervalEstimator;
       4: areturn

  public org.LatencyUtils.PauseDetector getPauseDetector();
    Code:
       0: aload_0
       1: getfield      #18                 // Field pauseDetector:Lorg/LatencyUtils/PauseDetector;
       4: areturn

  private synchronized void recordDetectedPause(long, long);
    Code:
       0: aload_0
       1: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #39                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionEnter:()J
       7: lstore        5
       9: aload_0
      10: getfield      #32                 // Field intervalEstimator:Lorg/LatencyUtils/IntervalEstimator;
      13: lload_3
      14: invokevirtual #53                 // Method org/LatencyUtils/IntervalEstimator.getEstimatedInterval:(J)J
      17: lstore        7
      19: lload_1
      20: lload         7
      22: lsub
      23: lstore        9
      25: lload         9
      27: lload         7
      29: lcmp
      30: iflt          44
      33: aload_0
      34: getfield      #28                 // Field activePauseCorrectionsHistogram:Lorg/HdrHistogram/Histogram;
      37: lload         9
      39: lload         7
      41: invokevirtual #54                 // Method org/HdrHistogram/Histogram.recordValueWithExpectedInterval:(JJ)V
      44: aload_0
      45: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      48: lload         5
      50: invokevirtual #42                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      53: goto          70
      56: astore        11
      58: aload_0
      59: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      62: lload         5
      64: invokevirtual #42                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      67: aload         11
      69: athrow
      70: return
    Exception table:
       from    to  target type
           9    44    56   any
          56    58    56   any

  private void trackRecordingInterval();
    Code:
       0: invokestatic  #55                 // Method org/LatencyUtils/TimeServices.nanoTime:()J
       3: lstore_1
       4: aload_0
       5: getfield      #32                 // Field intervalEstimator:Lorg/LatencyUtils/IntervalEstimator;
       8: lload_1
       9: invokevirtual #56                 // Method org/LatencyUtils/IntervalEstimator.recordInterval:(J)V
      12: return

  private void swapRecordingHistograms();
    Code:
       0: aload_0
       1: getfield      #25                 // Field inactiveRawDataHistogram:Lorg/HdrHistogram/AtomicHistogram;
       4: astore_1
       5: aload_0
       6: aload_0
       7: getfield      #24                 // Field activeRecordingHistogram:Lorg/HdrHistogram/AtomicHistogram;
      10: putfield      #25                 // Field inactiveRawDataHistogram:Lorg/HdrHistogram/AtomicHistogram;
      13: aload_0
      14: aload_1
      15: putfield      #24                 // Field activeRecordingHistogram:Lorg/HdrHistogram/AtomicHistogram;
      18: return

  private void swapPauseCorrectionHistograms();
    Code:
       0: aload_0
       1: getfield      #29                 // Field inactivePauseCorrectionsHistogram:Lorg/HdrHistogram/Histogram;
       4: astore_1
       5: aload_0
       6: aload_0
       7: getfield      #28                 // Field activePauseCorrectionsHistogram:Lorg/HdrHistogram/Histogram;
      10: putfield      #29                 // Field inactivePauseCorrectionsHistogram:Lorg/HdrHistogram/Histogram;
      13: aload_0
      14: aload_1
      15: putfield      #28                 // Field activePauseCorrectionsHistogram:Lorg/HdrHistogram/Histogram;
      18: return

  private synchronized void swapHistograms();
    Code:
       0: aload_0
       1: invokespecial #57                 // Method swapRecordingHistograms:()V
       4: aload_0
       5: invokespecial #58                 // Method swapPauseCorrectionHistograms:()V
       8: return

  private synchronized void updateHistograms();
    Code:
       0: aload_0
       1: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #44                 // Method org/HdrHistogram/WriterReaderPhaser.readerLock:()V
       7: aload_0
       8: getfield      #25                 // Field inactiveRawDataHistogram:Lorg/HdrHistogram/AtomicHistogram;
      11: invokevirtual #59                 // Method org/HdrHistogram/AtomicHistogram.reset:()V
      14: aload_0
      15: getfield      #29                 // Field inactivePauseCorrectionsHistogram:Lorg/HdrHistogram/Histogram;
      18: invokevirtual #60                 // Method org/HdrHistogram/Histogram.reset:()V
      21: aload_0
      22: invokespecial #61                 // Method swapHistograms:()V
      25: invokestatic  #36                 // Method java/lang/System.currentTimeMillis:()J
      28: lstore_1
      29: aload_0
      30: getfield      #24                 // Field activeRecordingHistogram:Lorg/HdrHistogram/AtomicHistogram;
      33: lload_1
      34: invokevirtual #37                 // Method org/HdrHistogram/AtomicHistogram.setStartTimeStamp:(J)V
      37: aload_0
      38: getfield      #28                 // Field activePauseCorrectionsHistogram:Lorg/HdrHistogram/Histogram;
      41: lload_1
      42: invokevirtual #38                 // Method org/HdrHistogram/Histogram.setStartTimeStamp:(J)V
      45: aload_0
      46: getfield      #25                 // Field inactiveRawDataHistogram:Lorg/HdrHistogram/AtomicHistogram;
      49: lload_1
      50: invokevirtual #62                 // Method org/HdrHistogram/AtomicHistogram.setEndTimeStamp:(J)V
      53: aload_0
      54: getfield      #29                 // Field inactivePauseCorrectionsHistogram:Lorg/HdrHistogram/Histogram;
      57: lload_1
      58: invokevirtual #63                 // Method org/HdrHistogram/Histogram.setEndTimeStamp:(J)V
      61: aload_0
      62: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      65: invokevirtual #64                 // Method org/HdrHistogram/WriterReaderPhaser.flipPhase:()V
      68: aload_0
      69: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      72: invokevirtual #48                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
      75: goto          88
      78: astore_3
      79: aload_0
      80: getfield      #14                 // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      83: invokevirtual #48                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
      86: aload_3
      87: athrow
      88: return
    Exception table:
       from    to  target type
           0    68    78   any

  static void access$600(org.LatencyUtils.LatencyStats, long, long);
    Code:
       0: aload_0
       1: lload_1
       2: lload_3
       3: invokespecial #1                  // Method recordDetectedPause:(JJ)V
       6: return

  static {};
    Code:
       0: new           #65                 // class org/LatencyUtils/LatencyStats$Builder
       3: dup
       4: invokespecial #66                 // Method org/LatencyUtils/LatencyStats$Builder."<init>":()V
       7: putstatic     #3                  // Field defaultBuilder:Lorg/LatencyUtils/LatencyStats$Builder;
      10: new           #67                 // class org/LatencyUtils/TimeServices$ScheduledExecutor
      13: dup
      14: invokespecial #68                 // Method org/LatencyUtils/TimeServices$ScheduledExecutor."<init>":()V
      17: putstatic     #51                 // Field latencyStatsScheduledExecutor:Lorg/LatencyUtils/TimeServices$ScheduledExecutor;
      20: return
}
