Compiled from "SimplePauseDetector.java"
public class org.LatencyUtils.SimplePauseDetector extends org.LatencyUtils.PauseDetector {
  private static final long DEFAULT_SleepInterval;

  private static final long DEFAULT_PauseNotificationThreshold;

  private static final int DEFAULT_NumberOfDetectorThreads;

  private static final boolean DEFAULT_Verbose;

  private final long sleepInterval;

  private final long pauseNotificationThreshold;

  final java.util.concurrent.atomic.AtomicLong consensusLatestTime;

  private volatile long stallThreadMask;

  private volatile long stopThreadMask;

  private final org.LatencyUtils.SimplePauseDetector$SimplePauseDetectorThread[] detectors;

  private boolean verbose;

  public org.LatencyUtils.SimplePauseDetector(long, long, int);
    Code:
       0: aload_0
       1: lload_1
       2: lload_3
       3: iload         5
       5: iconst_0
       6: invokespecial #6                  // Method "<init>":(JJIZ)V
       9: return

  public org.LatencyUtils.SimplePauseDetector(long, long, int, boolean);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method org/LatencyUtils/PauseDetector."<init>":()V
       4: aload_0
       5: new           #8                  // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: invokespecial #9                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      12: putfield      #10                 // Field consensusLatestTime:Ljava/util/concurrent/atomic/AtomicLong;
      15: aload_0
      16: lconst_0
      17: putfield      #3                  // Field stallThreadMask:J
      20: aload_0
      21: lconst_0
      22: putfield      #5                  // Field stopThreadMask:J
      25: aload_0
      26: lload_1
      27: putfield      #4                  // Field sleepInterval:J
      30: aload_0
      31: lload_3
      32: putfield      #2                  // Field pauseNotificationThreshold:J
      35: aload_0
      36: iload         6
      38: putfield      #1                  // Field verbose:Z
      41: aload_0
      42: iload         5
      44: anewarray     #11                 // class org/LatencyUtils/SimplePauseDetector$SimplePauseDetectorThread
      47: putfield      #12                 // Field detectors:[Lorg/LatencyUtils/SimplePauseDetector$SimplePauseDetectorThread;
      50: iconst_0
      51: istore        7
      53: iload         7
      55: iload         5
      57: if_icmpge     93
      60: aload_0
      61: getfield      #12                 // Field detectors:[Lorg/LatencyUtils/SimplePauseDetector$SimplePauseDetectorThread;
      64: iload         7
      66: new           #11                 // class org/LatencyUtils/SimplePauseDetector$SimplePauseDetectorThread
      69: dup
      70: aload_0
      71: iload         7
      73: invokespecial #13                 // Method org/LatencyUtils/SimplePauseDetector$SimplePauseDetectorThread."<init>":(Lorg/LatencyUtils/SimplePauseDetector;I)V
      76: aastore
      77: aload_0
      78: getfield      #12                 // Field detectors:[Lorg/LatencyUtils/SimplePauseDetector$SimplePauseDetectorThread;
      81: iload         7
      83: aaload
      84: invokevirtual #14                 // Method org/LatencyUtils/SimplePauseDetector$SimplePauseDetectorThread.start:()V
      87: iinc          7, 1
      90: goto          53
      93: return

  public org.LatencyUtils.SimplePauseDetector();
    Code:
       0: aload_0
       1: ldc2_w        #16                 // long 1000000l
       4: ldc2_w        #16                 // long 1000000l
       7: iconst_3
       8: iconst_0
       9: invokespecial #6                  // Method "<init>":(JJIZ)V
      12: return

  public void setVerbose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #1                  // Field verbose:Z
       5: return

  public void shutdown();
    Code:
       0: aload_0
       1: ldc2_w        #18                 // long -1l
       4: putfield      #5                  // Field stopThreadMask:J
       7: aload_0
       8: getfield      #12                 // Field detectors:[Lorg/LatencyUtils/SimplePauseDetector$SimplePauseDetectorThread;
      11: astore_1
      12: aload_1
      13: arraylength
      14: istore_2
      15: iconst_0
      16: istore_3
      17: iload_3
      18: iload_2
      19: if_icmpge     38
      22: aload_1
      23: iload_3
      24: aaload
      25: astore        4
      27: aload         4
      29: invokevirtual #20                 // Method org/LatencyUtils/SimplePauseDetector$SimplePauseDetectorThread.interrupt:()V
      32: iinc          3, 1
      35: goto          17
      38: aload_0
      39: invokespecial #21                 // Method org/LatencyUtils/PauseDetector.shutdown:()V
      42: return

  public void stallDetectorThreads(long, long) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field stallThreadMask:J
       4: lstore        5
       6: aload_0
       7: lload_1
       8: putfield      #3                  // Field stallThreadMask:J
      11: invokestatic  #22                 // Method org/LatencyUtils/TimeServices.nanoTime:()J
      14: lstore        7
      16: lload         7
      18: lload_3
      19: ladd
      20: lstore        9
      22: lload_3
      23: lstore        11
      25: lload         11
      27: lconst_0
      28: lcmp
      29: ifle          72
      32: lload         11
      34: aload_0
      35: getfield      #2                  // Field pauseNotificationThreshold:J
      38: ldc2_w        #23                 // long 2l
      41: ldiv
      42: invokestatic  #25                 // Method java/lang/Math.min:(JJ)J
      45: lstore        13
      47: lload         13
      49: invokestatic  #26                 // Method org/LatencyUtils/TimeServices.moveTimeForward:(J)V
      52: getstatic     #27                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      55: ldc2_w        #28                 // long 50000l
      58: invokevirtual #30                 // Method java/util/concurrent/TimeUnit.sleep:(J)V
      61: lload         9
      63: invokestatic  #22                 // Method org/LatencyUtils/TimeServices.nanoTime:()J
      66: lsub
      67: lstore        11
      69: goto          25
      72: aload_0
      73: lload         5
      75: putfield      #3                  // Field stallThreadMask:J
      78: return

  public void skipConsensusTimeTo(long);
    Code:
       0: aload_0
       1: getfield      #10                 // Field consensusLatestTime:Ljava/util/concurrent/atomic/AtomicLong;
       4: lload_1
       5: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
       8: return

  static long access$000(org.LatencyUtils.SimplePauseDetector);
    Code:
       0: aload_0
       1: getfield      #5                  // Field stopThreadMask:J
       4: lreturn

  static long access$100(org.LatencyUtils.SimplePauseDetector);
    Code:
       0: aload_0
       1: getfield      #4                  // Field sleepInterval:J
       4: lreturn

  static long access$200(org.LatencyUtils.SimplePauseDetector);
    Code:
       0: aload_0
       1: getfield      #3                  // Field stallThreadMask:J
       4: lreturn

  static long access$300(org.LatencyUtils.SimplePauseDetector);
    Code:
       0: aload_0
       1: getfield      #2                  // Field pauseNotificationThreshold:J
       4: lreturn

  static boolean access$400(org.LatencyUtils.SimplePauseDetector);
    Code:
       0: aload_0
       1: getfield      #1                  // Field verbose:Z
       4: ireturn
}
