Compiled from "HibernateOperations.java"
public interface org.springframework.orm.hibernate5.HibernateOperations {
  public abstract <T> T execute(org.springframework.orm.hibernate5.HibernateCallback<T>) throws org.springframework.dao.DataAccessException;

  public abstract <T> T get(java.lang.Class<T>, java.io.Serializable) throws org.springframework.dao.DataAccessException;

  public abstract <T> T get(java.lang.Class<T>, java.io.Serializable, org.hibernate.LockMode) throws org.springframework.dao.DataAccessException;

  public abstract java.lang.Object get(java.lang.String, java.io.Serializable) throws org.springframework.dao.DataAccessException;

  public abstract java.lang.Object get(java.lang.String, java.io.Serializable, org.hibernate.LockMode) throws org.springframework.dao.DataAccessException;

  public abstract <T> T load(java.lang.Class<T>, java.io.Serializable) throws org.springframework.dao.DataAccessException;

  public abstract <T> T load(java.lang.Class<T>, java.io.Serializable, org.hibernate.LockMode) throws org.springframework.dao.DataAccessException;

  public abstract java.lang.Object load(java.lang.String, java.io.Serializable) throws org.springframework.dao.DataAccessException;

  public abstract java.lang.Object load(java.lang.String, java.io.Serializable, org.hibernate.LockMode) throws org.springframework.dao.DataAccessException;

  public abstract <T> java.util.List<T> loadAll(java.lang.Class<T>) throws org.springframework.dao.DataAccessException;

  public abstract void load(java.lang.Object, java.io.Serializable) throws org.springframework.dao.DataAccessException;

  public abstract void refresh(java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract void refresh(java.lang.Object, org.hibernate.LockMode) throws org.springframework.dao.DataAccessException;

  public abstract boolean contains(java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract void evict(java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract void initialize(java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract org.hibernate.Filter enableFilter(java.lang.String) throws java.lang.IllegalStateException;

  public abstract void lock(java.lang.Object, org.hibernate.LockMode) throws org.springframework.dao.DataAccessException;

  public abstract void lock(java.lang.String, java.lang.Object, org.hibernate.LockMode) throws org.springframework.dao.DataAccessException;

  public abstract java.io.Serializable save(java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract java.io.Serializable save(java.lang.String, java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract void update(java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract void update(java.lang.Object, org.hibernate.LockMode) throws org.springframework.dao.DataAccessException;

  public abstract void update(java.lang.String, java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract void update(java.lang.String, java.lang.Object, org.hibernate.LockMode) throws org.springframework.dao.DataAccessException;

  public abstract void saveOrUpdate(java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract void saveOrUpdate(java.lang.String, java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract void replicate(java.lang.Object, org.hibernate.ReplicationMode) throws org.springframework.dao.DataAccessException;

  public abstract void replicate(java.lang.String, java.lang.Object, org.hibernate.ReplicationMode) throws org.springframework.dao.DataAccessException;

  public abstract void persist(java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract void persist(java.lang.String, java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract <T> T merge(T) throws org.springframework.dao.DataAccessException;

  public abstract <T> T merge(java.lang.String, T) throws org.springframework.dao.DataAccessException;

  public abstract void delete(java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract void delete(java.lang.Object, org.hibernate.LockMode) throws org.springframework.dao.DataAccessException;

  public abstract void delete(java.lang.String, java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract void delete(java.lang.String, java.lang.Object, org.hibernate.LockMode) throws org.springframework.dao.DataAccessException;

  public abstract void deleteAll(java.util.Collection<?>) throws org.springframework.dao.DataAccessException;

  public abstract void flush() throws org.springframework.dao.DataAccessException;

  public abstract void clear() throws org.springframework.dao.DataAccessException;

  public abstract java.util.List<?> findByCriteria(org.hibernate.criterion.DetachedCriteria) throws org.springframework.dao.DataAccessException;

  public abstract java.util.List<?> findByCriteria(org.hibernate.criterion.DetachedCriteria, int, int) throws org.springframework.dao.DataAccessException;

  public abstract <T> java.util.List<T> findByExample(T) throws org.springframework.dao.DataAccessException;

  public abstract <T> java.util.List<T> findByExample(java.lang.String, T) throws org.springframework.dao.DataAccessException;

  public abstract <T> java.util.List<T> findByExample(T, int, int) throws org.springframework.dao.DataAccessException;

  public abstract <T> java.util.List<T> findByExample(java.lang.String, T, int, int) throws org.springframework.dao.DataAccessException;

  public abstract java.util.List<?> find(java.lang.String, java.lang.Object...) throws org.springframework.dao.DataAccessException;

  public abstract java.util.List<?> findByNamedParam(java.lang.String, java.lang.String, java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract java.util.List<?> findByNamedParam(java.lang.String, java.lang.String[], java.lang.Object[]) throws org.springframework.dao.DataAccessException;

  public abstract java.util.List<?> findByValueBean(java.lang.String, java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract java.util.List<?> findByNamedQuery(java.lang.String, java.lang.Object...) throws org.springframework.dao.DataAccessException;

  public abstract java.util.List<?> findByNamedQueryAndNamedParam(java.lang.String, java.lang.String, java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract java.util.List<?> findByNamedQueryAndNamedParam(java.lang.String, java.lang.String[], java.lang.Object[]) throws org.springframework.dao.DataAccessException;

  public abstract java.util.List<?> findByNamedQueryAndValueBean(java.lang.String, java.lang.Object) throws org.springframework.dao.DataAccessException;

  public abstract java.util.Iterator<?> iterate(java.lang.String, java.lang.Object...) throws org.springframework.dao.DataAccessException;

  public abstract void closeIterator(java.util.Iterator<?>) throws org.springframework.dao.DataAccessException;

  public abstract int bulkUpdate(java.lang.String, java.lang.Object...) throws org.springframework.dao.DataAccessException;
}
