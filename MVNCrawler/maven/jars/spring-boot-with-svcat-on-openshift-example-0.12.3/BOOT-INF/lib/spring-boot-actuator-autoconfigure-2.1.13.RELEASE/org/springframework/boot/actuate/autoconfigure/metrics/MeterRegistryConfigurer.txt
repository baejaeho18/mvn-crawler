Compiled from "MeterRegistryConfigurer.java"
class org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryConfigurer {
  private final org.springframework.beans.factory.ObjectProvider<org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryCustomizer<?>> customizers;

  private final org.springframework.beans.factory.ObjectProvider<io.micrometer.core.instrument.config.MeterFilter> filters;

  private final org.springframework.beans.factory.ObjectProvider<io.micrometer.core.instrument.binder.MeterBinder> binders;

  private final boolean addToGlobalRegistry;

  private final boolean hasCompositeMeterRegistry;

  org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryConfigurer(org.springframework.beans.factory.ObjectProvider<org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryCustomizer<?>>, org.springframework.beans.factory.ObjectProvider<io.micrometer.core.instrument.config.MeterFilter>, org.springframework.beans.factory.ObjectProvider<io.micrometer.core.instrument.binder.MeterBinder>, boolean, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field customizers:Lorg/springframework/beans/factory/ObjectProvider;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field filters:Lorg/springframework/beans/factory/ObjectProvider;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field binders:Lorg/springframework/beans/factory/ObjectProvider;
      19: aload_0
      20: iload         4
      22: putfield      #5                  // Field addToGlobalRegistry:Z
      25: aload_0
      26: iload         5
      28: putfield      #6                  // Field hasCompositeMeterRegistry:Z
      31: return

  void configure(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method customize:(Lio/micrometer/core/instrument/MeterRegistry;)V
       5: aload_0
       6: aload_1
       7: invokespecial #8                  // Method addFilters:(Lio/micrometer/core/instrument/MeterRegistry;)V
      10: aload_0
      11: getfield      #6                  // Field hasCompositeMeterRegistry:Z
      14: ifeq          24
      17: aload_1
      18: instanceof    #9                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
      21: ifeq          29
      24: aload_0
      25: aload_1
      26: invokespecial #10                 // Method addBinders:(Lio/micrometer/core/instrument/MeterRegistry;)V
      29: aload_0
      30: getfield      #5                  // Field addToGlobalRegistry:Z
      33: ifeq          47
      36: aload_1
      37: getstatic     #11                 // Field io/micrometer/core/instrument/Metrics.globalRegistry:Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;
      40: if_acmpeq     47
      43: aload_1
      44: invokestatic  #12                 // Method io/micrometer/core/instrument/Metrics.addRegistry:(Lio/micrometer/core/instrument/MeterRegistry;)V
      47: return

  private void customize(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: ldc           #13                 // class org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryCustomizer
       2: aload_0
       3: aload_0
       4: getfield      #2                  // Field customizers:Lorg/springframework/beans/factory/ObjectProvider;
       7: invokespecial #14                 // Method asOrderedList:(Lorg/springframework/beans/factory/ObjectProvider;)Ljava/util/List;
      10: aload_1
      11: iconst_0
      12: anewarray     #15                 // class java/lang/Object
      15: invokestatic  #16                 // Method org/springframework/boot/util/LambdaSafe.callbacks:(Ljava/lang/Class;Ljava/util/Collection;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/springframework/boot/util/LambdaSafe$Callbacks;
      18: ldc           #17                 // class org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurer
      20: invokevirtual #18                 // Method org/springframework/boot/util/LambdaSafe$Callbacks.withLogger:(Ljava/lang/Class;)Lorg/springframework/boot/util/LambdaSafe$LambdaSafeCallback;
      23: checkcast     #19                 // class org/springframework/boot/util/LambdaSafe$Callbacks
      26: aload_1
      27: invokedynamic #20,  0             // InvokeDynamic #0:accept:(Lio/micrometer/core/instrument/MeterRegistry;)Ljava/util/function/Consumer;
      32: invokevirtual #21                 // Method org/springframework/boot/util/LambdaSafe$Callbacks.invoke:(Ljava/util/function/Consumer;)V
      35: return

  private void addFilters(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: getfield      #3                  // Field filters:Lorg/springframework/beans/factory/ObjectProvider;
       4: invokeinterface #22,  1           // InterfaceMethod org/springframework/beans/factory/ObjectProvider.orderedStream:()Ljava/util/stream/Stream;
       9: aload_1
      10: invokevirtual #23                 // Method io/micrometer/core/instrument/MeterRegistry.config:()Lio/micrometer/core/instrument/MeterRegistry$Config;
      13: dup
      14: invokevirtual #24                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      17: pop
      18: invokedynamic #25,  0             // InvokeDynamic #1:accept:(Lio/micrometer/core/instrument/MeterRegistry$Config;)Ljava/util/function/Consumer;
      23: invokeinterface #26,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      28: return

  private void addBinders(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: getfield      #4                  // Field binders:Lorg/springframework/beans/factory/ObjectProvider;
       4: invokeinterface #22,  1           // InterfaceMethod org/springframework/beans/factory/ObjectProvider.orderedStream:()Ljava/util/stream/Stream;
       9: aload_1
      10: invokedynamic #27,  0             // InvokeDynamic #2:accept:(Lio/micrometer/core/instrument/MeterRegistry;)Ljava/util/function/Consumer;
      15: invokeinterface #26,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      20: return

  private <T> java.util.List<T> asOrderedList(org.springframework.beans.factory.ObjectProvider<T>);
    Code:
       0: aload_1
       1: invokeinterface #22,  1           // InterfaceMethod org/springframework/beans/factory/ObjectProvider.orderedStream:()Ljava/util/stream/Stream;
       6: invokestatic  #28                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
       9: invokeinterface #29,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      14: checkcast     #30                 // class java/util/List
      17: areturn

  private static void lambda$addBinders$1(io.micrometer.core.instrument.MeterRegistry, io.micrometer.core.instrument.binder.MeterBinder);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #31,  2           // InterfaceMethod io/micrometer/core/instrument/binder/MeterBinder.bindTo:(Lio/micrometer/core/instrument/MeterRegistry;)V
       7: return

  private static void lambda$customize$0(io.micrometer.core.instrument.MeterRegistry, org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryCustomizer);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #32,  2           // InterfaceMethod org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryCustomizer.customize:(Lio/micrometer/core/instrument/MeterRegistry;)V
       7: return
}
