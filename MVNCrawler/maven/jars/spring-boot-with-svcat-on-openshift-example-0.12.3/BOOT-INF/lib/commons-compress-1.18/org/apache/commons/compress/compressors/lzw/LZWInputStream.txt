Compiled from "LZWInputStream.java"
public abstract class org.apache.commons.compress.compressors.lzw.LZWInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics {
  protected static final int DEFAULT_CODE_SIZE;

  protected static final int UNUSED_PREFIX;

  private final byte[] oneByte;

  protected final org.apache.commons.compress.utils.BitInputStream in;

  private int clearCode;

  private int codeSize;

  private byte previousCodeFirstChar;

  private int previousCode;

  private int tableSize;

  private int[] prefixes;

  private byte[] characters;

  private byte[] outputStack;

  private int outputStackLocation;

  protected org.apache.commons.compress.compressors.lzw.LZWInputStream(java.io.InputStream, java.nio.ByteOrder);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorInputStream."<init>":()V
       4: aload_0
       5: iconst_1
       6: newarray       byte
       8: putfield      #2                  // Field oneByte:[B
      11: aload_0
      12: iconst_m1
      13: putfield      #3                  // Field clearCode:I
      16: aload_0
      17: bipush        9
      19: putfield      #5                  // Field codeSize:I
      22: aload_0
      23: iconst_m1
      24: putfield      #6                  // Field previousCode:I
      27: aload_0
      28: new           #7                  // class org/apache/commons/compress/utils/BitInputStream
      31: dup
      32: aload_1
      33: aload_2
      34: invokespecial #8                  // Method org/apache/commons/compress/utils/BitInputStream."<init>":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V
      37: putfield      #9                  // Field in:Lorg/apache/commons/compress/utils/BitInputStream;
      40: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field in:Lorg/apache/commons/compress/utils/BitInputStream;
       4: invokevirtual #10                 // Method org/apache/commons/compress/utils/BitInputStream.close:()V
       7: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field oneByte:[B
       5: invokevirtual #11                 // Method read:([B)I
       8: istore_1
       9: iload_1
      10: ifge          15
      13: iload_1
      14: ireturn
      15: sipush        255
      18: aload_0
      19: getfield      #2                  // Field oneByte:[B
      22: iconst_0
      23: baload
      24: iand
      25: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokespecial #12                 // Method readFromStack:([BII)I
       7: istore        4
       9: iload_3
      10: iload         4
      12: isub
      13: ifle          65
      16: aload_0
      17: invokevirtual #13                 // Method decompressNextSymbol:()I
      20: istore        5
      22: iload         5
      24: ifge          44
      27: iload         4
      29: ifle          41
      32: aload_0
      33: iload         4
      35: invokevirtual #14                 // Method count:(I)V
      38: iload         4
      40: ireturn
      41: iload         5
      43: ireturn
      44: iload         4
      46: aload_0
      47: aload_1
      48: iload_2
      49: iload         4
      51: iadd
      52: iload_3
      53: iload         4
      55: isub
      56: invokespecial #12                 // Method readFromStack:([BII)I
      59: iadd
      60: istore        4
      62: goto          9
      65: aload_0
      66: iload         4
      68: invokevirtual #14                 // Method count:(I)V
      71: iload         4
      73: ireturn

  public long getCompressedCount();
    Code:
       0: aload_0
       1: getfield      #9                  // Field in:Lorg/apache/commons/compress/utils/BitInputStream;
       4: invokevirtual #15                 // Method org/apache/commons/compress/utils/BitInputStream.getBytesRead:()J
       7: lreturn

  protected abstract int decompressNextSymbol() throws java.io.IOException;

  protected abstract int addEntry(int, byte) throws java.io.IOException;

  protected void setClearCode(int);
    Code:
       0: aload_0
       1: iconst_1
       2: iload_1
       3: iconst_1
       4: isub
       5: ishl
       6: putfield      #3                  // Field clearCode:I
       9: return

  protected void initializeTables(int, int) throws org.apache.commons.compress.MemoryLimitException;
    Code:
       0: iload_2
       1: iconst_m1
       2: if_icmple     43
       5: iconst_1
       6: iload_1
       7: ishl
       8: istore_3
       9: iload_3
      10: i2l
      11: ldc2_w        #16                 // long 6l
      14: lmul
      15: lstore        4
      17: lload         4
      19: bipush        10
      21: lshr
      22: lstore        6
      24: lload         6
      26: iload_2
      27: i2l
      28: lcmp
      29: ifle          43
      32: new           #18                 // class org/apache/commons/compress/MemoryLimitException
      35: dup
      36: lload         6
      38: iload_2
      39: invokespecial #19                 // Method org/apache/commons/compress/MemoryLimitException."<init>":(JI)V
      42: athrow
      43: aload_0
      44: iload_1
      45: invokevirtual #20                 // Method initializeTables:(I)V
      48: return

  protected void initializeTables(int);
    Code:
       0: iconst_1
       1: iload_1
       2: ishl
       3: istore_2
       4: aload_0
       5: iload_2
       6: newarray       int
       8: putfield      #21                 // Field prefixes:[I
      11: aload_0
      12: iload_2
      13: newarray       byte
      15: putfield      #22                 // Field characters:[B
      18: aload_0
      19: iload_2
      20: newarray       byte
      22: putfield      #23                 // Field outputStack:[B
      25: aload_0
      26: iload_2
      27: putfield      #24                 // Field outputStackLocation:I
      30: sipush        256
      33: istore_3
      34: iconst_0
      35: istore        4
      37: iload         4
      39: sipush        256
      42: if_icmpge     69
      45: aload_0
      46: getfield      #21                 // Field prefixes:[I
      49: iload         4
      51: iconst_m1
      52: iastore
      53: aload_0
      54: getfield      #22                 // Field characters:[B
      57: iload         4
      59: iload         4
      61: i2b
      62: bastore
      63: iinc          4, 1
      66: goto          37
      69: return

  protected int readNextCode() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field codeSize:I
       4: bipush        31
       6: if_icmple     19
       9: new           #25                 // class java/lang/IllegalArgumentException
      12: dup
      13: ldc           #26                 // String code size must not be bigger than 31
      15: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_0
      20: getfield      #9                  // Field in:Lorg/apache/commons/compress/utils/BitInputStream;
      23: aload_0
      24: getfield      #5                  // Field codeSize:I
      27: invokevirtual #28                 // Method org/apache/commons/compress/utils/BitInputStream.readBits:(I)J
      30: l2i
      31: ireturn

  protected int addEntry(int, byte, int);
    Code:
       0: aload_0
       1: getfield      #29                 // Field tableSize:I
       4: iload_3
       5: if_icmpge     40
       8: aload_0
       9: getfield      #21                 // Field prefixes:[I
      12: aload_0
      13: getfield      #29                 // Field tableSize:I
      16: iload_1
      17: iastore
      18: aload_0
      19: getfield      #22                 // Field characters:[B
      22: aload_0
      23: getfield      #29                 // Field tableSize:I
      26: iload_2
      27: bastore
      28: aload_0
      29: dup
      30: getfield      #29                 // Field tableSize:I
      33: dup_x1
      34: iconst_1
      35: iadd
      36: putfield      #29                 // Field tableSize:I
      39: ireturn
      40: iconst_m1
      41: ireturn

  protected int addRepeatOfPreviousCode() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field previousCode:I
       4: iconst_m1
       5: if_icmpne     18
       8: new           #30                 // class java/io/IOException
      11: dup
      12: ldc           #31                 // String The first code can\'t be a reference to its preceding code
      14: invokespecial #32                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: aload_0
      20: getfield      #6                  // Field previousCode:I
      23: aload_0
      24: getfield      #33                 // Field previousCodeFirstChar:B
      27: invokevirtual #34                 // Method addEntry:(IB)I
      30: ireturn

  protected int expandCodeToOutputStack(int, boolean) throws java.io.IOException;
    Code:
       0: iload_1
       1: istore_3
       2: iload_3
       3: iflt          38
       6: aload_0
       7: getfield      #23                 // Field outputStack:[B
      10: aload_0
      11: dup
      12: getfield      #24                 // Field outputStackLocation:I
      15: iconst_1
      16: isub
      17: dup_x1
      18: putfield      #24                 // Field outputStackLocation:I
      21: aload_0
      22: getfield      #22                 // Field characters:[B
      25: iload_3
      26: baload
      27: bastore
      28: aload_0
      29: getfield      #21                 // Field prefixes:[I
      32: iload_3
      33: iaload
      34: istore_3
      35: goto          2
      38: aload_0
      39: getfield      #6                  // Field previousCode:I
      42: iconst_m1
      43: if_icmpeq     68
      46: iload_2
      47: ifne          68
      50: aload_0
      51: aload_0
      52: getfield      #6                  // Field previousCode:I
      55: aload_0
      56: getfield      #23                 // Field outputStack:[B
      59: aload_0
      60: getfield      #24                 // Field outputStackLocation:I
      63: baload
      64: invokevirtual #34                 // Method addEntry:(IB)I
      67: pop
      68: aload_0
      69: iload_1
      70: putfield      #6                  // Field previousCode:I
      73: aload_0
      74: aload_0
      75: getfield      #23                 // Field outputStack:[B
      78: aload_0
      79: getfield      #24                 // Field outputStackLocation:I
      82: baload
      83: putfield      #33                 // Field previousCodeFirstChar:B
      86: aload_0
      87: getfield      #24                 // Field outputStackLocation:I
      90: ireturn

  private int readFromStack(byte[], int, int);
    Code:
       0: aload_0
       1: getfield      #23                 // Field outputStack:[B
       4: arraylength
       5: aload_0
       6: getfield      #24                 // Field outputStackLocation:I
       9: isub
      10: istore        4
      12: iload         4
      14: ifle          54
      17: iload         4
      19: iload_3
      20: invokestatic  #35                 // Method java/lang/Math.min:(II)I
      23: istore        5
      25: aload_0
      26: getfield      #23                 // Field outputStack:[B
      29: aload_0
      30: getfield      #24                 // Field outputStackLocation:I
      33: aload_1
      34: iload_2
      35: iload         5
      37: invokestatic  #36                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      40: aload_0
      41: dup
      42: getfield      #24                 // Field outputStackLocation:I
      45: iload         5
      47: iadd
      48: putfield      #24                 // Field outputStackLocation:I
      51: iload         5
      53: ireturn
      54: iconst_0
      55: ireturn

  protected int getCodeSize();
    Code:
       0: aload_0
       1: getfield      #5                  // Field codeSize:I
       4: ireturn

  protected void resetCodeSize();
    Code:
       0: aload_0
       1: bipush        9
       3: invokevirtual #37                 // Method setCodeSize:(I)V
       6: return

  protected void setCodeSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field codeSize:I
       5: return

  protected void incrementCodeSize();
    Code:
       0: aload_0
       1: dup
       2: getfield      #5                  // Field codeSize:I
       5: iconst_1
       6: iadd
       7: putfield      #5                  // Field codeSize:I
      10: return

  protected void resetPreviousCode();
    Code:
       0: aload_0
       1: iconst_m1
       2: putfield      #6                  // Field previousCode:I
       5: return

  protected int getPrefix(int);
    Code:
       0: aload_0
       1: getfield      #21                 // Field prefixes:[I
       4: iload_1
       5: iaload
       6: ireturn

  protected void setPrefix(int, int);
    Code:
       0: aload_0
       1: getfield      #21                 // Field prefixes:[I
       4: iload_1
       5: iload_2
       6: iastore
       7: return

  protected int getPrefixesLength();
    Code:
       0: aload_0
       1: getfield      #21                 // Field prefixes:[I
       4: arraylength
       5: ireturn

  protected int getClearCode();
    Code:
       0: aload_0
       1: getfield      #3                  // Field clearCode:I
       4: ireturn

  protected int getTableSize();
    Code:
       0: aload_0
       1: getfield      #29                 // Field tableSize:I
       4: ireturn

  protected void setTableSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #29                 // Field tableSize:I
       5: return
}
