Compiled from "InflaterInputStreamWithStatistics.java"
class org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics extends java.util.zip.InflaterInputStream implements org.apache.commons.compress.utils.InputStreamStatistics {
  private long compressedCount;

  private long uncompressedCount;

  public org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics(java.io.InputStream);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method java/util/zip/InflaterInputStream."<init>":(Ljava/io/InputStream;)V
       5: aload_0
       6: lconst_0
       7: putfield      #2                  // Field compressedCount:J
      10: aload_0
      11: lconst_0
      12: putfield      #3                  // Field uncompressedCount:J
      15: return

  public org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics(java.io.InputStream, java.util.zip.Inflater);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #4                  // Method java/util/zip/InflaterInputStream."<init>":(Ljava/io/InputStream;Ljava/util/zip/Inflater;)V
       6: aload_0
       7: lconst_0
       8: putfield      #2                  // Field compressedCount:J
      11: aload_0
      12: lconst_0
      13: putfield      #3                  // Field uncompressedCount:J
      16: return

  public org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics(java.io.InputStream, java.util.zip.Inflater, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokespecial #5                  // Method java/util/zip/InflaterInputStream."<init>":(Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V
       7: aload_0
       8: lconst_0
       9: putfield      #2                  // Field compressedCount:J
      12: aload_0
      13: lconst_0
      14: putfield      #3                  // Field uncompressedCount:J
      17: return

  protected void fill() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/util/zip/InflaterInputStream.fill:()V
       4: aload_0
       5: dup
       6: getfield      #2                  // Field compressedCount:J
       9: aload_0
      10: getfield      #7                  // Field inf:Ljava/util/zip/Inflater;
      13: invokevirtual #8                  // Method java/util/zip/Inflater.getRemaining:()I
      16: i2l
      17: ladd
      18: putfield      #2                  // Field compressedCount:J
      21: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #9                  // Method java/util/zip/InflaterInputStream.read:()I
       4: istore_1
       5: iload_1
       6: iconst_m1
       7: if_icmple     20
      10: aload_0
      11: dup
      12: getfield      #3                  // Field uncompressedCount:J
      15: lconst_1
      16: ladd
      17: putfield      #3                  // Field uncompressedCount:J
      20: iload_1
      21: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokespecial #10                 // Method java/util/zip/InflaterInputStream.read:([BII)I
       7: istore        4
       9: iload         4
      11: iconst_m1
      12: if_icmple     27
      15: aload_0
      16: dup
      17: getfield      #3                  // Field uncompressedCount:J
      20: iload         4
      22: i2l
      23: ladd
      24: putfield      #3                  // Field uncompressedCount:J
      27: iload         4
      29: ireturn

  public long getCompressedCount();
    Code:
       0: aload_0
       1: getfield      #2                  // Field compressedCount:J
       4: lreturn

  public long getUncompressedCount();
    Code:
       0: aload_0
       1: getfield      #3                  // Field uncompressedCount:J
       4: lreturn
}
