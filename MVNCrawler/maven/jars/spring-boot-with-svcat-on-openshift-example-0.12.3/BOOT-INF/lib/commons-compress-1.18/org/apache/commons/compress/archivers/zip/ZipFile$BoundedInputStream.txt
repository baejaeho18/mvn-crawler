Compiled from "ZipFile.java"
class org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream extends java.io.InputStream {
  private java.nio.ByteBuffer singleByteBuffer;

  private final long end;

  private long loc;

  final org.apache.commons.compress.archivers.zip.ZipFile this$0;

  org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream(org.apache.commons.compress.archivers.zip.ZipFile, long, long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/apache/commons/compress/archivers/zip/ZipFile;
       5: aload_0
       6: invokespecial #2                  // Method java/io/InputStream."<init>":()V
       9: aload_0
      10: lload_2
      11: lload         4
      13: ladd
      14: putfield      #3                  // Field end:J
      17: aload_0
      18: getfield      #3                  // Field end:J
      21: lload_2
      22: lcmp
      23: ifge          63
      26: new           #4                  // class java/lang/IllegalArgumentException
      29: dup
      30: new           #5                  // class java/lang/StringBuilder
      33: dup
      34: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V
      37: ldc           #7                  // String Invalid length of stream at offset=
      39: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: lload_2
      43: invokevirtual #9                  // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      46: ldc           #10                 // String , length=
      48: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: lload         4
      53: invokevirtual #9                  // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      56: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      62: athrow
      63: aload_0
      64: lload_2
      65: putfield      #13                 // Field loc:J
      68: return

  public synchronized int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field loc:J
       4: aload_0
       5: getfield      #3                  // Field end:J
       8: lcmp
       9: iflt          14
      12: iconst_m1
      13: ireturn
      14: aload_0
      15: getfield      #14                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;
      18: ifnonnull     32
      21: aload_0
      22: iconst_1
      23: invokestatic  #15                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      26: putfield      #14                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;
      29: goto          40
      32: aload_0
      33: getfield      #14                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;
      36: invokevirtual #16                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      39: pop
      40: aload_0
      41: aload_0
      42: getfield      #13                 // Field loc:J
      45: aload_0
      46: getfield      #14                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;
      49: invokevirtual #17                 // Method read:(JLjava/nio/ByteBuffer;)I
      52: istore_1
      53: iload_1
      54: ifge          59
      57: iload_1
      58: ireturn
      59: aload_0
      60: dup
      61: getfield      #13                 // Field loc:J
      64: lconst_1
      65: ladd
      66: putfield      #13                 // Field loc:J
      69: aload_0
      70: getfield      #14                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;
      73: invokevirtual #18                 // Method java/nio/ByteBuffer.get:()B
      76: sipush        255
      79: iand
      80: ireturn

  public synchronized int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_3
       1: ifgt          6
       4: iconst_0
       5: ireturn
       6: iload_3
       7: i2l
       8: aload_0
       9: getfield      #3                  // Field end:J
      12: aload_0
      13: getfield      #13                 // Field loc:J
      16: lsub
      17: lcmp
      18: ifle          46
      21: aload_0
      22: getfield      #13                 // Field loc:J
      25: aload_0
      26: getfield      #3                  // Field end:J
      29: lcmp
      30: iflt          35
      33: iconst_m1
      34: ireturn
      35: aload_0
      36: getfield      #3                  // Field end:J
      39: aload_0
      40: getfield      #13                 // Field loc:J
      43: lsub
      44: l2i
      45: istore_3
      46: aload_1
      47: iload_2
      48: iload_3
      49: invokestatic  #19                 // Method java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;
      52: astore        4
      54: aload_0
      55: aload_0
      56: getfield      #13                 // Field loc:J
      59: aload         4
      61: invokevirtual #17                 // Method read:(JLjava/nio/ByteBuffer;)I
      64: istore        5
      66: iload         5
      68: ifle          86
      71: aload_0
      72: dup
      73: getfield      #13                 // Field loc:J
      76: iload         5
      78: i2l
      79: ladd
      80: putfield      #13                 // Field loc:J
      83: iload         5
      85: ireturn
      86: iload         5
      88: ireturn

  protected int read(long, java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lorg/apache/commons/compress/archivers/zip/ZipFile;
       4: invokestatic  #20                 // Method org/apache/commons/compress/archivers/zip/ZipFile.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;
       7: dup
       8: astore        5
      10: monitorenter
      11: aload_0
      12: getfield      #1                  // Field this$0:Lorg/apache/commons/compress/archivers/zip/ZipFile;
      15: invokestatic  #20                 // Method org/apache/commons/compress/archivers/zip/ZipFile.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;
      18: lload_1
      19: invokeinterface #21,  3           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;
      24: pop
      25: aload_0
      26: getfield      #1                  // Field this$0:Lorg/apache/commons/compress/archivers/zip/ZipFile;
      29: invokestatic  #20                 // Method org/apache/commons/compress/archivers/zip/ZipFile.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;
      32: aload_3
      33: invokeinterface #22,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I
      38: istore        4
      40: aload         5
      42: monitorexit
      43: goto          54
      46: astore        6
      48: aload         5
      50: monitorexit
      51: aload         6
      53: athrow
      54: aload_3
      55: invokevirtual #23                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      58: pop
      59: iload         4
      61: ireturn
    Exception table:
       from    to  target type
          11    43    46   any
          46    51    46   any
}
