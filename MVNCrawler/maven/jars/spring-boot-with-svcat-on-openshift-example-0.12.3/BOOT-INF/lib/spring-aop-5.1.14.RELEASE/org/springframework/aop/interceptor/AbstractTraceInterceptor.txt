Compiled from "AbstractTraceInterceptor.java"
public abstract class org.springframework.aop.interceptor.AbstractTraceInterceptor implements org.aopalliance.intercept.MethodInterceptor,java.io.Serializable {
  protected transient org.apache.commons.logging.Log defaultLogger;

  private boolean hideProxyClassNames;

  private boolean logExceptionStackTrace;

  public org.springframework.aop.interceptor.AbstractTraceInterceptor();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #4                  // Field defaultLogger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: iconst_0
      17: putfield      #5                  // Field hideProxyClassNames:Z
      20: aload_0
      21: iconst_1
      22: putfield      #6                  // Field logExceptionStackTrace:Z
      25: return

  public void setUseDynamicLogger(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: ifeq          9
       5: aconst_null
       6: goto          16
       9: aload_0
      10: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      13: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      16: putfield      #4                  // Field defaultLogger:Lorg/apache/commons/logging/Log;
      19: return

  public void setLoggerName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #7                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/String;)Lorg/apache/commons/logging/Log;
       5: putfield      #4                  // Field defaultLogger:Lorg/apache/commons/logging/Log;
       8: return

  public void setHideProxyClassNames(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field hideProxyClassNames:Z
       5: return

  public void setLogExceptionStackTrace(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field logExceptionStackTrace:Z
       5: return

  public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #8                  // Method getLoggerForInvocation:(Lorg/aopalliance/intercept/MethodInvocation;)Lorg/apache/commons/logging/Log;
       5: astore_2
       6: aload_0
       7: aload_1
       8: aload_2
       9: invokevirtual #9                  // Method isInterceptorEnabled:(Lorg/aopalliance/intercept/MethodInvocation;Lorg/apache/commons/logging/Log;)Z
      12: ifeq          22
      15: aload_0
      16: aload_1
      17: aload_2
      18: invokevirtual #10                 // Method invokeUnderTrace:(Lorg/aopalliance/intercept/MethodInvocation;Lorg/apache/commons/logging/Log;)Ljava/lang/Object;
      21: areturn
      22: aload_1
      23: invokeinterface #11,  1           // InterfaceMethod org/aopalliance/intercept/MethodInvocation.proceed:()Ljava/lang/Object;
      28: areturn

  protected org.apache.commons.logging.Log getLoggerForInvocation(org.aopalliance.intercept.MethodInvocation);
    Code:
       0: aload_0
       1: getfield      #4                  // Field defaultLogger:Lorg/apache/commons/logging/Log;
       4: ifnull        12
       7: aload_0
       8: getfield      #4                  // Field defaultLogger:Lorg/apache/commons/logging/Log;
      11: areturn
      12: aload_1
      13: invokeinterface #12,  1           // InterfaceMethod org/aopalliance/intercept/MethodInvocation.getThis:()Ljava/lang/Object;
      18: astore_2
      19: aload_0
      20: aload_2
      21: invokevirtual #13                 // Method getClassForLogging:(Ljava/lang/Object;)Ljava/lang/Class;
      24: invokestatic  #3                  // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      27: areturn

  protected java.lang.Class<?> getClassForLogging(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field hideProxyClassNames:Z
       4: ifeq          14
       7: aload_1
       8: invokestatic  #14                 // Method org/springframework/aop/support/AopUtils.getTargetClass:(Ljava/lang/Object;)Ljava/lang/Class;
      11: goto          18
      14: aload_1
      15: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      18: areturn

  protected boolean isInterceptorEnabled(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #15                 // Method isLogEnabled:(Lorg/apache/commons/logging/Log;)Z
       5: ireturn

  protected boolean isLogEnabled(org.apache.commons.logging.Log);
    Code:
       0: aload_1
       1: invokeinterface #16,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       6: ireturn

  protected void writeToLog(org.apache.commons.logging.Log, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: invokevirtual #17                 // Method writeToLog:(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/Throwable;)V
       7: return

  protected void writeToLog(org.apache.commons.logging.Log, java.lang.String, java.lang.Throwable);
    Code:
       0: aload_3
       1: ifnull        22
       4: aload_0
       5: getfield      #6                  // Field logExceptionStackTrace:Z
       8: ifeq          22
      11: aload_1
      12: aload_2
      13: aload_3
      14: invokeinterface #18,  3           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;Ljava/lang/Throwable;)V
      19: goto          29
      22: aload_1
      23: aload_2
      24: invokeinterface #19,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      29: return

  protected abstract java.lang.Object invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log) throws java.lang.Throwable;
}
