Compiled from "DefaultExcerptProjector.java"
public class org.springframework.data.rest.webmvc.support.DefaultExcerptProjector implements org.springframework.data.rest.webmvc.support.ExcerptProjector {
  private final org.springframework.data.projection.ProjectionFactory factory;

  private final org.springframework.data.rest.core.mapping.ResourceMappings mappings;

  public java.lang.Object projectExcerpt(java.lang.Object);
    Code:
       0: aload_1
       1: ldc           #1                  // String Projection source must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #3                  // Field mappings:Lorg/springframework/data/rest/core/mapping/ResourceMappings;
      10: aload_1
      11: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      14: invokeinterface #5,  2            // InterfaceMethod org/springframework/data/rest/core/mapping/ResourceMappings.getMetadataFor:(Ljava/lang/Class;)Lorg/springframework/data/rest/core/mapping/ResourceMetadata;
      19: astore_2
      20: aload_2
      21: ifnonnull     28
      24: aconst_null
      25: goto          34
      28: aload_2
      29: invokeinterface #6,  1            // InterfaceMethod org/springframework/data/rest/core/mapping/ResourceMetadata.getExcerptProjection:()Ljava/lang/Class;
      34: astore_3
      35: aload_3
      36: ifnull        50
      39: aload_3
      40: aload_1
      41: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      44: invokevirtual #7                  // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      47: ifeq          54
      50: aload_1
      51: goto          65
      54: aload_0
      55: getfield      #8                  // Field factory:Lorg/springframework/data/projection/ProjectionFactory;
      58: aload_3
      59: aload_1
      60: invokeinterface #9,  3            // InterfaceMethod org/springframework/data/projection/ProjectionFactory.createProjection:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;
      65: areturn

  public boolean hasExcerptProjection(java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field mappings:Lorg/springframework/data/rest/core/mapping/ResourceMappings;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod org/springframework/data/rest/core/mapping/ResourceMappings.getMetadataFor:(Ljava/lang/Class;)Lorg/springframework/data/rest/core/mapping/ResourceMetadata;
      10: astore_2
      11: aload_2
      12: ifnonnull     19
      15: iconst_0
      16: goto          33
      19: aload_2
      20: invokeinterface #6,  1            // InterfaceMethod org/springframework/data/rest/core/mapping/ResourceMetadata.getExcerptProjection:()Ljava/lang/Class;
      25: ifnull        32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public org.springframework.data.rest.webmvc.support.DefaultExcerptProjector(org.springframework.data.projection.ProjectionFactory, org.springframework.data.rest.core.mapping.ResourceMappings);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #8                  // Field factory:Lorg/springframework/data/projection/ProjectionFactory;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field mappings:Lorg/springframework/data/rest/core/mapping/ResourceMappings;
      14: return
}
