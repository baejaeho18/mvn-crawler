Compiled from "BasePathAwareHandlerMapping.java"
class org.springframework.data.rest.webmvc.BasePathAwareHandlerMapping$CustomAcceptHeaderHttpServletRequest extends javax.servlet.http.HttpServletRequestWrapper {
  private final java.util.List<org.springframework.http.MediaType> acceptMediaTypes;

  private final java.util.List<java.lang.String> acceptMediaTypeStrings;

  public org.springframework.data.rest.webmvc.BasePathAwareHandlerMapping$CustomAcceptHeaderHttpServletRequest(javax.servlet.http.HttpServletRequest, java.util.List<org.springframework.http.MediaType>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method javax/servlet/http/HttpServletRequestWrapper."<init>":(Ljavax/servlet/http/HttpServletRequest;)V
       5: aload_2
       6: ldc           #2                  // String MediaTypes must not be empty!
       8: invokestatic  #3                  // Method org/springframework/util/Assert.notEmpty:(Ljava/util/Collection;Ljava/lang/String;)V
      11: aload_0
      12: aload_2
      13: putfield      #4                  // Field acceptMediaTypes:Ljava/util/List;
      16: new           #5                  // class java/util/ArrayList
      19: dup
      20: aload_2
      21: invokeinterface #6,  1            // InterfaceMethod java/util/List.size:()I
      26: invokespecial #7                  // Method java/util/ArrayList."<init>":(I)V
      29: astore_3
      30: aload_2
      31: invokeinterface #8,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      36: astore        4
      38: aload         4
      40: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      45: ifeq          75
      48: aload         4
      50: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      55: checkcast     #11                 // class org/springframework/http/MediaType
      58: astore        5
      60: aload_3
      61: aload         5
      63: invokevirtual #12                 // Method org/springframework/http/MediaType.toString:()Ljava/lang/String;
      66: invokeinterface #13,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      71: pop
      72: goto          38
      75: aload_0
      76: aload_3
      77: putfield      #14                 // Field acceptMediaTypeStrings:Ljava/util/List;
      80: return

  public java.lang.String getHeader(java.lang.String);
    Code:
       0: ldc           #16                 // String Accept
       2: aload_1
       3: invokevirtual #17                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifeq          24
       9: aload_0
      10: getfield      #4                  // Field acceptMediaTypes:Ljava/util/List;
      13: ifnull        24
      16: aload_0
      17: getfield      #4                  // Field acceptMediaTypes:Ljava/util/List;
      20: invokestatic  #18                 // Method org/springframework/util/StringUtils.collectionToCommaDelimitedString:(Ljava/util/Collection;)Ljava/lang/String;
      23: areturn
      24: aload_0
      25: aload_1
      26: invokespecial #19                 // Method javax/servlet/http/HttpServletRequestWrapper.getHeader:(Ljava/lang/String;)Ljava/lang/String;
      29: areturn

  public java.util.Enumeration<java.lang.String> getHeaders(java.lang.String);
    Code:
       0: ldc           #16                 // String Accept
       2: aload_1
       3: invokevirtual #17                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifeq          24
       9: aload_0
      10: getfield      #4                  // Field acceptMediaTypes:Ljava/util/List;
      13: ifnull        24
      16: aload_0
      17: getfield      #14                 // Field acceptMediaTypeStrings:Ljava/util/List;
      20: invokestatic  #20                 // Method java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;
      23: areturn
      24: aload_0
      25: aload_1
      26: invokespecial #21                 // Method javax/servlet/http/HttpServletRequestWrapper.getHeaders:(Ljava/lang/String;)Ljava/util/Enumeration;
      29: areturn
}
