Compiled from "Associations.java"
public class org.springframework.data.rest.webmvc.mapping.Associations {
  private final org.springframework.data.rest.core.mapping.ResourceMappings mappings;

  private final org.springframework.data.rest.core.config.RepositoryRestConfiguration config;

  public java.util.List<org.springframework.hateoas.Link> getLinksFor(org.springframework.data.mapping.Association<? extends org.springframework.data.mapping.PersistentProperty<?>>, org.springframework.data.rest.core.Path);
    Code:
       0: aload_1
       1: ldc           #1                  // String Association must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_2
       7: ldc           #3                  // String Base path must not be null!
       9: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: aload_1
      14: invokevirtual #4                  // Method isLinkableAssociation:(Lorg/springframework/data/mapping/Association;)Z
      17: ifeq          109
      20: aload_1
      21: invokevirtual #5                  // Method org/springframework/data/mapping/Association.getInverse:()Lorg/springframework/data/mapping/PersistentProperty;
      24: astore_3
      25: aload_0
      26: getfield      #6                  // Field mappings:Lorg/springframework/data/rest/core/mapping/ResourceMappings;
      29: aload_3
      30: invokeinterface #7,  1            // InterfaceMethod org/springframework/data/mapping/PersistentProperty.getOwner:()Lorg/springframework/data/mapping/PersistentEntity;
      35: invokeinterface #8,  1            // InterfaceMethod org/springframework/data/mapping/PersistentEntity.getType:()Ljava/lang/Class;
      40: invokeinterface #9,  2            // InterfaceMethod org/springframework/data/rest/core/mapping/ResourceMappings.getMetadataFor:(Ljava/lang/Class;)Lorg/springframework/data/rest/core/mapping/ResourceMetadata;
      45: astore        4
      47: aload         4
      49: aload_3
      50: invokeinterface #10,  2           // InterfaceMethod org/springframework/data/rest/core/mapping/ResourceMetadata.getMappingFor:(Lorg/springframework/data/mapping/PersistentProperty;)Lorg/springframework/data/rest/core/mapping/ResourceMapping;
      55: astore        5
      57: aload_2
      58: aload         5
      60: invokeinterface #11,  1           // InterfaceMethod org/springframework/data/rest/core/mapping/ResourceMapping.getPath:()Lorg/springframework/data/rest/core/Path;
      65: invokevirtual #12                 // Method org/springframework/data/rest/core/Path.slash:(Lorg/springframework/data/rest/core/Path;)Lorg/springframework/data/rest/core/Path;
      68: invokevirtual #13                 // Method org/springframework/data/rest/core/Path.toString:()Ljava/lang/String;
      71: astore        6
      73: new           #14                 // class org/springframework/hateoas/UriTemplate
      76: dup
      77: aload         6
      79: aload_0
      80: aload_3
      81: invokespecial #15                 // Method getProjectionVariable:(Lorg/springframework/data/mapping/PersistentProperty;)Lorg/springframework/hateoas/TemplateVariables;
      84: invokespecial #16                 // Method org/springframework/hateoas/UriTemplate."<init>":(Ljava/lang/String;Lorg/springframework/hateoas/TemplateVariables;)V
      87: astore        7
      89: new           #17                 // class org/springframework/hateoas/Link
      92: dup
      93: aload         7
      95: aload         5
      97: invokeinterface #18,  1           // InterfaceMethod org/springframework/data/rest/core/mapping/ResourceMapping.getRel:()Ljava/lang/String;
     102: invokespecial #19                 // Method org/springframework/hateoas/Link."<init>":(Lorg/springframework/hateoas/UriTemplate;Ljava/lang/String;)V
     105: invokestatic  #20                 // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
     108: areturn
     109: invokestatic  #21                 // Method java/util/Collections.emptyList:()Ljava/util/List;
     112: areturn

  public org.springframework.data.rest.core.mapping.ResourceMetadata getMetadataFor(java.lang.Class<?>);
    Code:
       0: aload_1
       1: ldc           #22                 // String Type must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #6                  // Field mappings:Lorg/springframework/data/rest/core/mapping/ResourceMappings;
      10: aload_1
      11: invokeinterface #9,  2            // InterfaceMethod org/springframework/data/rest/core/mapping/ResourceMappings.getMetadataFor:(Ljava/lang/Class;)Lorg/springframework/data/rest/core/mapping/ResourceMetadata;
      16: areturn

  public boolean isLookupType(org.springframework.data.mapping.PersistentProperty<?>);
    Code:
       0: aload_1
       1: ldc           #23                 // String Persistent property must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #24                 // Field config:Lorg/springframework/data/rest/core/config/RepositoryRestConfiguration;
      10: aload_1
      11: invokeinterface #25,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.getActualType:()Ljava/lang/Class;
      16: invokevirtual #26                 // Method org/springframework/data/rest/core/config/RepositoryRestConfiguration.isLookupType:(Ljava/lang/Class;)Z
      19: ireturn

  public boolean isIdExposed(org.springframework.data.mapping.PersistentEntity<?, ?>);
    Code:
       0: aload_0
       1: getfield      #24                 // Field config:Lorg/springframework/data/rest/core/config/RepositoryRestConfiguration;
       4: aload_1
       5: invokeinterface #8,  1            // InterfaceMethod org/springframework/data/mapping/PersistentEntity.getType:()Ljava/lang/Class;
      10: invokevirtual #27                 // Method org/springframework/data/rest/core/config/RepositoryRestConfiguration.isIdExposedFor:(Ljava/lang/Class;)Z
      13: ireturn

  public boolean isLinkableAssociation(org.springframework.data.mapping.Association<? extends org.springframework.data.mapping.PersistentProperty<?>>);
    Code:
       0: aload_1
       1: ldc           #1                  // String Association must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokevirtual #5                  // Method org/springframework/data/mapping/Association.getInverse:()Lorg/springframework/data/mapping/PersistentProperty;
      11: invokevirtual #28                 // Method isLinkableAssociation:(Lorg/springframework/data/mapping/PersistentProperty;)Z
      14: ireturn

  public boolean isLinkableAssociation(org.springframework.data.mapping.PersistentProperty<?>);
    Code:
       0: aload_1
       1: ldc           #29                 // String PersistentProperty must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: invokeinterface #30,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.isAssociation:()Z
      12: ifeq          31
      15: aload_0
      16: getfield      #24                 // Field config:Lorg/springframework/data/rest/core/config/RepositoryRestConfiguration;
      19: aload_1
      20: invokeinterface #25,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.getActualType:()Ljava/lang/Class;
      25: invokevirtual #26                 // Method org/springframework/data/rest/core/config/RepositoryRestConfiguration.isLookupType:(Ljava/lang/Class;)Z
      28: ifeq          33
      31: iconst_0
      32: ireturn
      33: aload_0
      34: getfield      #6                  // Field mappings:Lorg/springframework/data/rest/core/mapping/ResourceMappings;
      37: aload_1
      38: invokeinterface #7,  1            // InterfaceMethod org/springframework/data/mapping/PersistentProperty.getOwner:()Lorg/springframework/data/mapping/PersistentEntity;
      43: invokeinterface #8,  1            // InterfaceMethod org/springframework/data/mapping/PersistentEntity.getType:()Ljava/lang/Class;
      48: invokeinterface #9,  2            // InterfaceMethod org/springframework/data/rest/core/mapping/ResourceMappings.getMetadataFor:(Ljava/lang/Class;)Lorg/springframework/data/rest/core/mapping/ResourceMetadata;
      53: astore_2
      54: aload_2
      55: ifnull        70
      58: aload_2
      59: aload_1
      60: invokeinterface #31,  2           // InterfaceMethod org/springframework/data/rest/core/mapping/ResourceMetadata.isExported:(Lorg/springframework/data/mapping/PersistentProperty;)Z
      65: ifne          70
      68: iconst_0
      69: ireturn
      70: aload_0
      71: getfield      #6                  // Field mappings:Lorg/springframework/data/rest/core/mapping/ResourceMappings;
      74: aload_1
      75: invokeinterface #25,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.getActualType:()Ljava/lang/Class;
      80: invokeinterface #9,  2            // InterfaceMethod org/springframework/data/rest/core/mapping/ResourceMappings.getMetadataFor:(Ljava/lang/Class;)Lorg/springframework/data/rest/core/mapping/ResourceMetadata;
      85: astore_2
      86: aload_2
      87: ifnonnull     94
      90: iconst_0
      91: goto          100
      94: aload_2
      95: invokeinterface #32,  1           // InterfaceMethod org/springframework/data/rest/core/mapping/ResourceMetadata.isExported:()Z
     100: ireturn

  private org.springframework.hateoas.TemplateVariables getProjectionVariable(org.springframework.data.mapping.PersistentProperty<?>);
    Code:
       0: aload_0
       1: getfield      #24                 // Field config:Lorg/springframework/data/rest/core/config/RepositoryRestConfiguration;
       4: invokevirtual #33                 // Method org/springframework/data/rest/core/config/RepositoryRestConfiguration.getProjectionConfiguration:()Lorg/springframework/data/rest/core/config/ProjectionDefinitionConfiguration;
       7: astore_2
       8: aload_2
       9: aload_1
      10: invokeinterface #25,  1           // InterfaceMethod org/springframework/data/mapping/PersistentProperty.getActualType:()Ljava/lang/Class;
      15: invokevirtual #34                 // Method org/springframework/data/rest/core/config/ProjectionDefinitionConfiguration.hasProjectionFor:(Ljava/lang/Class;)Z
      18: ifeq          52
      21: new           #35                 // class org/springframework/hateoas/TemplateVariables
      24: dup
      25: iconst_1
      26: anewarray     #36                 // class org/springframework/hateoas/TemplateVariable
      29: dup
      30: iconst_0
      31: new           #36                 // class org/springframework/hateoas/TemplateVariable
      34: dup
      35: aload_2
      36: invokevirtual #37                 // Method org/springframework/data/rest/core/config/ProjectionDefinitionConfiguration.getParameterName:()Ljava/lang/String;
      39: getstatic     #38                 // Field org/springframework/hateoas/TemplateVariable$VariableType.REQUEST_PARAM:Lorg/springframework/hateoas/TemplateVariable$VariableType;
      42: invokespecial #39                 // Method org/springframework/hateoas/TemplateVariable."<init>":(Ljava/lang/String;Lorg/springframework/hateoas/TemplateVariable$VariableType;)V
      45: aastore
      46: invokespecial #40                 // Method org/springframework/hateoas/TemplateVariables."<init>":([Lorg/springframework/hateoas/TemplateVariable;)V
      49: goto          55
      52: getstatic     #41                 // Field org/springframework/hateoas/TemplateVariables.NONE:Lorg/springframework/hateoas/TemplateVariables;
      55: areturn

  public org.springframework.data.rest.webmvc.mapping.Associations(org.springframework.data.rest.core.mapping.ResourceMappings, org.springframework.data.rest.core.config.RepositoryRestConfiguration);
    Code:
       0: aload_0
       1: invokespecial #42                 // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #43                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #44                 // String mappings is marked non-null but is null
      14: invokespecial #45                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_2
      19: ifnonnull     32
      22: new           #43                 // class java/lang/IllegalArgumentException
      25: dup
      26: ldc           #46                 // String config is marked non-null but is null
      28: invokespecial #45                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: aload_1
      34: putfield      #6                  // Field mappings:Lorg/springframework/data/rest/core/mapping/ResourceMappings;
      37: aload_0
      38: aload_2
      39: putfield      #24                 // Field config:Lorg/springframework/data/rest/core/config/RepositoryRestConfiguration;
      42: return

  public org.springframework.data.rest.core.mapping.ResourceMappings getMappings();
    Code:
       0: aload_0
       1: getfield      #6                  // Field mappings:Lorg/springframework/data/rest/core/mapping/ResourceMappings;
       4: areturn
}
