Compiled from "InstrumentedType.java"
public interface net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName extends net.bytebuddy.dynamic.scaffold.InstrumentedType {
  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withField(net.bytebuddy.description.field.FieldDescription$Token);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withMethod(net.bytebuddy.description.method.MethodDescription$Token);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withModifiers(int);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withInterfaces(net.bytebuddy.description.type.TypeList$Generic);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withNestHost(net.bytebuddy.description.type.TypeDescription);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withNestMembers(net.bytebuddy.description.type.TypeList);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withEnclosingType(net.bytebuddy.description.type.TypeDescription);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withEnclosingMethod(net.bytebuddy.description.method.MethodDescription$InDefinedShape);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withDeclaringType(net.bytebuddy.description.type.TypeDescription);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withDeclaredTypes(net.bytebuddy.description.type.TypeList);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withLocalClass(boolean);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withAnonymousClass(boolean);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withTypeVariable(net.bytebuddy.description.type.TypeVariableToken);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withAnnotations(java.util.List<? extends net.bytebuddy.description.annotation.AnnotationDescription>);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withInitializer(net.bytebuddy.implementation.LoadedTypeInitializer);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withInitializer(net.bytebuddy.implementation.bytecode.ByteCodeAppender);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withName(java.lang.String);

  public abstract net.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withTypeVariables(net.bytebuddy.matcher.ElementMatcher<? super net.bytebuddy.description.type.TypeDescription$Generic>, net.bytebuddy.dynamic.Transformer<net.bytebuddy.description.type.TypeVariableToken>);
}
