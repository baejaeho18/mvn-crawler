Compiled from "Advice.java"
public abstract class net.bytebuddy.asm.Advice$Dispatcher$Inlining$Resolved extends net.bytebuddy.asm.Advice$Dispatcher$Resolved$AbstractBase {
  protected final net.bytebuddy.jar.asm.ClassReader classReader;

  protected net.bytebuddy.asm.Advice$Dispatcher$Inlining$Resolved(net.bytebuddy.description.method.MethodDescription$InDefinedShape, java.util.List<? extends net.bytebuddy.asm.Advice$OffsetMapping$Factory<?>>, net.bytebuddy.description.type.TypeDescription, net.bytebuddy.description.type.TypeDescription, net.bytebuddy.jar.asm.ClassReader);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: getstatic     #81                 // Field net/bytebuddy/asm/Advice$OffsetMapping$Factory$AdviceType.INLINING:Lnet/bytebuddy/asm/Advice$OffsetMapping$Factory$AdviceType;
       9: invokespecial #84                 // Method net/bytebuddy/asm/Advice$Dispatcher$Resolved$AbstractBase."<init>":(Lnet/bytebuddy/description/method/MethodDescription$InDefinedShape;Ljava/util/List;Lnet/bytebuddy/description/type/TypeDescription;Lnet/bytebuddy/description/type/TypeDescription;Lnet/bytebuddy/asm/Advice$OffsetMapping$Factory$AdviceType;)V
      12: aload_0
      13: aload         5
      15: putfield      #86                 // Field classReader:Lnet/bytebuddy/jar/asm/ClassReader;
      18: return

  protected abstract java.util.Map<java.lang.Integer, net.bytebuddy.description.type.TypeDefinition> resolveInitializationTypes(net.bytebuddy.asm.Advice$ArgumentHandler);

  protected abstract net.bytebuddy.jar.asm.MethodVisitor apply(net.bytebuddy.jar.asm.MethodVisitor, net.bytebuddy.implementation.Implementation$Context, net.bytebuddy.implementation.bytecode.assign.Assigner, net.bytebuddy.asm.Advice$ArgumentHandler$ForInstrumentedMethod, net.bytebuddy.asm.Advice$MethodSizeHandler$ForInstrumentedMethod, net.bytebuddy.asm.Advice$StackMapFrameHandler$ForInstrumentedMethod, net.bytebuddy.description.type.TypeDescription, net.bytebuddy.description.method.MethodDescription, net.bytebuddy.asm.Advice$Dispatcher$SuppressionHandler$Bound, net.bytebuddy.asm.Advice$Dispatcher$RelocationHandler$Bound);
}
