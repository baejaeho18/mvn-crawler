Compiled from "FilterableList.java"
public abstract class net.bytebuddy.matcher.FilterableList$AbstractBase<T, S extends net.bytebuddy.matcher.FilterableList<T, S>> extends java.util.AbstractList<T> implements net.bytebuddy.matcher.FilterableList<T, S> {
  private static final int ONLY;

  public net.bytebuddy.matcher.FilterableList$AbstractBase();
    Code:
       0: aload_0
       1: invokespecial #16                 // Method java/util/AbstractList."<init>":()V
       4: return

  public S filter(net.bytebuddy.matcher.ElementMatcher<? super T>);
    Code:
       0: new           #24                 // class java/util/ArrayList
       3: dup
       4: aload_0
       5: invokevirtual #28                 // Method size:()I
       8: invokespecial #31                 // Method java/util/ArrayList."<init>":(I)V
      11: astore_2
      12: aload_0
      13: invokevirtual #35                 // Method iterator:()Ljava/util/Iterator;
      16: astore_3
      17: aload_3
      18: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          57
      26: aload_3
      27: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: astore        4
      34: aload_1
      35: aload         4
      37: invokeinterface #51,  2           // InterfaceMethod net/bytebuddy/matcher/ElementMatcher.matches:(Ljava/lang/Object;)Z
      42: ifeq          54
      45: aload_2
      46: aload         4
      48: invokeinterface #56,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      53: pop
      54: goto          17
      57: aload_2
      58: invokeinterface #57,  1           // InterfaceMethod java/util/List.size:()I
      63: aload_0
      64: invokevirtual #28                 // Method size:()I
      67: if_icmpne     74
      70: aload_0
      71: goto          79
      74: aload_0
      75: aload_2
      76: invokevirtual #61                 // Method wrap:(Ljava/util/List;)Lnet/bytebuddy/matcher/FilterableList;
      79: areturn

  public T getOnly();
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method size:()I
       4: iconst_1
       5: if_icmpeq     38
       8: new           #74                 // class java/lang/IllegalStateException
      11: dup
      12: new           #76                 // class java/lang/StringBuilder
      15: dup
      16: invokespecial #77                 // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #79                 // String size =
      21: invokevirtual #83                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: invokevirtual #28                 // Method size:()I
      28: invokevirtual #86                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #93                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: aload_0
      39: iconst_0
      40: invokevirtual #97                 // Method get:(I)Ljava/lang/Object;
      43: areturn

  public S subList(int, int);
    Code:
       0: aload_0
       1: aload_0
       2: iload_1
       3: iload_2
       4: invokespecial #103                // Method java/util/AbstractList.subList:(II)Ljava/util/List;
       7: invokevirtual #61                 // Method wrap:(Ljava/util/List;)Lnet/bytebuddy/matcher/FilterableList;
      10: areturn

  protected abstract S wrap(java.util.List<T>);

  public java.util.List subList(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #108                // Method subList:(II)Lnet/bytebuddy/matcher/FilterableList;
       6: areturn
}
