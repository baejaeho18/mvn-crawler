Compiled from "DynamicType.java"
public interface net.bytebuddy.dynamic.DynamicType$Builder<T> {
  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> visit(net.bytebuddy.asm.AsmVisitorWrapper);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> name(java.lang.String);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> modifiers(net.bytebuddy.description.modifier.ModifierContributor$ForType...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> modifiers(java.util.Collection<? extends net.bytebuddy.description.modifier.ModifierContributor$ForType>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> modifiers(int);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> merge(net.bytebuddy.description.modifier.ModifierContributor$ForType...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> merge(java.util.Collection<? extends net.bytebuddy.description.modifier.ModifierContributor$ForType>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> topLevelType();

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$InnerTypeDefinition$ForType<T> innerTypeOf(java.lang.Class<?>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$InnerTypeDefinition$ForType<T> innerTypeOf(net.bytebuddy.description.type.TypeDescription);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$InnerTypeDefinition<T> innerTypeOf(java.lang.reflect.Method);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$InnerTypeDefinition<T> innerTypeOf(java.lang.reflect.Constructor<?>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$InnerTypeDefinition<T> innerTypeOf(net.bytebuddy.description.method.MethodDescription$InDefinedShape);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> declaredTypes(java.lang.Class<?>...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> declaredTypes(net.bytebuddy.description.type.TypeDescription...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> declaredTypes(java.util.List<? extends java.lang.Class<?>>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> declaredTypes(java.util.Collection<? extends net.bytebuddy.description.type.TypeDescription>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> noNestMate();

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> nestHost(java.lang.Class<?>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> nestHost(net.bytebuddy.description.type.TypeDescription);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> nestMembers(java.lang.Class<?>...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> nestMembers(net.bytebuddy.description.type.TypeDescription...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> nestMembers(java.util.List<? extends java.lang.Class<?>>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> nestMembers(java.util.Collection<? extends net.bytebuddy.description.type.TypeDescription>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> attribute(net.bytebuddy.implementation.attribute.TypeAttributeAppender);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> annotateType(java.lang.annotation.Annotation...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> annotateType(java.util.List<? extends java.lang.annotation.Annotation>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> annotateType(net.bytebuddy.description.annotation.AnnotationDescription...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> annotateType(java.util.Collection<? extends net.bytebuddy.description.annotation.AnnotationDescription>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition$Optional<T> implement(java.lang.reflect.Type...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition$Optional<T> implement(java.util.List<? extends java.lang.reflect.Type>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition$Optional<T> implement(net.bytebuddy.description.type.TypeDefinition...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition$Optional<T> implement(java.util.Collection<? extends net.bytebuddy.description.type.TypeDefinition>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> initializer(net.bytebuddy.implementation.bytecode.ByteCodeAppender);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> initializer(net.bytebuddy.implementation.LoadedTypeInitializer);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> require(net.bytebuddy.description.type.TypeDescription, byte[]);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> require(net.bytebuddy.description.type.TypeDescription, byte[], net.bytebuddy.implementation.LoadedTypeInitializer);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> require(net.bytebuddy.dynamic.DynamicType...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> require(java.util.Collection<net.bytebuddy.dynamic.DynamicType>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$TypeVariableDefinition<T> typeVariable(java.lang.String);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$TypeVariableDefinition<T> typeVariable(java.lang.String, java.lang.reflect.Type...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$TypeVariableDefinition<T> typeVariable(java.lang.String, java.util.List<? extends java.lang.reflect.Type>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$TypeVariableDefinition<T> typeVariable(java.lang.String, net.bytebuddy.description.type.TypeDefinition...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$TypeVariableDefinition<T> typeVariable(java.lang.String, java.util.Collection<? extends net.bytebuddy.description.type.TypeDefinition>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> transform(net.bytebuddy.matcher.ElementMatcher<? super net.bytebuddy.description.type.TypeDescription$Generic>, net.bytebuddy.dynamic.Transformer<net.bytebuddy.description.type.TypeVariableToken>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> defineField(java.lang.String, java.lang.reflect.Type, net.bytebuddy.description.modifier.ModifierContributor$ForField...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> defineField(java.lang.String, java.lang.reflect.Type, java.util.Collection<? extends net.bytebuddy.description.modifier.ModifierContributor$ForField>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> defineField(java.lang.String, java.lang.reflect.Type, int);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> defineField(java.lang.String, net.bytebuddy.description.type.TypeDefinition, net.bytebuddy.description.modifier.ModifierContributor$ForField...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> defineField(java.lang.String, net.bytebuddy.description.type.TypeDefinition, java.util.Collection<? extends net.bytebuddy.description.modifier.ModifierContributor$ForField>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> defineField(java.lang.String, net.bytebuddy.description.type.TypeDefinition, int);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> define(java.lang.reflect.Field);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional$Valuable<T> define(net.bytebuddy.description.field.FieldDescription);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional<T> serialVersionUid(long);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Valuable<T> field(net.bytebuddy.matcher.ElementMatcher<? super net.bytebuddy.description.field.FieldDescription>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Valuable<T> field(net.bytebuddy.matcher.LatentMatcher<? super net.bytebuddy.description.field.FieldDescription>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> ignoreAlso(net.bytebuddy.matcher.ElementMatcher<? super net.bytebuddy.description.method.MethodDescription>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> ignoreAlso(net.bytebuddy.matcher.LatentMatcher<? super net.bytebuddy.description.method.MethodDescription>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineMethod(java.lang.String, java.lang.reflect.Type, net.bytebuddy.description.modifier.ModifierContributor$ForMethod...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineMethod(java.lang.String, java.lang.reflect.Type, java.util.Collection<? extends net.bytebuddy.description.modifier.ModifierContributor$ForMethod>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineMethod(java.lang.String, java.lang.reflect.Type, int);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineMethod(java.lang.String, net.bytebuddy.description.type.TypeDefinition, net.bytebuddy.description.modifier.ModifierContributor$ForMethod...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineMethod(java.lang.String, net.bytebuddy.description.type.TypeDefinition, java.util.Collection<? extends net.bytebuddy.description.modifier.ModifierContributor$ForMethod>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineMethod(java.lang.String, net.bytebuddy.description.type.TypeDefinition, int);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineConstructor(net.bytebuddy.description.modifier.ModifierContributor$ForMethod...);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineConstructor(java.util.Collection<? extends net.bytebuddy.description.modifier.ModifierContributor$ForMethod>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ParameterDefinition$Initial<T> defineConstructor(int);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition<T> define(java.lang.reflect.Method);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition<T> define(java.lang.reflect.Constructor<?>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition<T> define(net.bytebuddy.description.method.MethodDescription);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional<T> defineProperty(java.lang.String, java.lang.reflect.Type);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional<T> defineProperty(java.lang.String, java.lang.reflect.Type, boolean);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional<T> defineProperty(java.lang.String, net.bytebuddy.description.type.TypeDefinition);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$FieldDefinition$Optional<T> defineProperty(java.lang.String, net.bytebuddy.description.type.TypeDefinition, boolean);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition<T> method(net.bytebuddy.matcher.ElementMatcher<? super net.bytebuddy.description.method.MethodDescription>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition<T> constructor(net.bytebuddy.matcher.ElementMatcher<? super net.bytebuddy.description.method.MethodDescription>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition<T> invokable(net.bytebuddy.matcher.ElementMatcher<? super net.bytebuddy.description.method.MethodDescription>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder$MethodDefinition$ImplementationDefinition<T> invokable(net.bytebuddy.matcher.LatentMatcher<? super net.bytebuddy.description.method.MethodDescription>);

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> withHashCodeEquals();

  public abstract net.bytebuddy.dynamic.DynamicType$Builder<T> withToString();

  public abstract net.bytebuddy.dynamic.DynamicType$Unloaded<T> make();

  public abstract net.bytebuddy.dynamic.DynamicType$Unloaded<T> make(net.bytebuddy.dynamic.TypeResolutionStrategy);

  public abstract net.bytebuddy.dynamic.DynamicType$Unloaded<T> make(net.bytebuddy.pool.TypePool);

  public abstract net.bytebuddy.dynamic.DynamicType$Unloaded<T> make(net.bytebuddy.dynamic.TypeResolutionStrategy, net.bytebuddy.pool.TypePool);
}
