Compiled from "Advice.java"
public final class net.bytebuddy.asm.Advice$Dispatcher$Inactive extends java.lang.Enum<net.bytebuddy.asm.Advice$Dispatcher$Inactive> implements net.bytebuddy.asm.Advice$Dispatcher$Unresolved, net.bytebuddy.asm.Advice$Dispatcher$Resolved$ForMethodEnter, net.bytebuddy.asm.Advice$Dispatcher$Resolved$ForMethodExit, net.bytebuddy.asm.Advice$Dispatcher$Bound {
  public static final net.bytebuddy.asm.Advice$Dispatcher$Inactive INSTANCE;

  private static final net.bytebuddy.asm.Advice$Dispatcher$Inactive[] $VALUES;

  public static net.bytebuddy.asm.Advice$Dispatcher$Inactive[] values();
    Code:
       0: getstatic     #73                 // Field $VALUES:[Lnet/bytebuddy/asm/Advice$Dispatcher$Inactive;
       3: invokevirtual #78                 // Method "[Lnet/bytebuddy/asm/Advice$Dispatcher$Inactive;".clone:()Ljava/lang/Object;
       6: checkcast     #74                 // class "[Lnet/bytebuddy/asm/Advice$Dispatcher$Inactive;"
       9: areturn

  public static net.bytebuddy.asm.Advice$Dispatcher$Inactive valueOf(java.lang.String);
    Code:
       0: ldc           #2                  // class net/bytebuddy/asm/Advice$Dispatcher$Inactive
       2: aload_0
       3: invokestatic  #83                 // Method java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
       6: checkcast     #2                  // class net/bytebuddy/asm/Advice$Dispatcher$Inactive
       9: areturn

  private net.bytebuddy.asm.Advice$Dispatcher$Inactive();
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #90                 // Method java/lang/Enum."<init>":(Ljava/lang/String;I)V
       6: return

  public boolean isAlive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isBinary();
    Code:
       0: iconst_0
       1: ireturn

  public net.bytebuddy.description.type.TypeDescription getAdviceType();
    Code:
       0: getstatic     #102                // Field net/bytebuddy/description/type/TypeDescription.VOID:Lnet/bytebuddy/description/type/TypeDescription;
       3: areturn

  public boolean isPrependLineNumber();
    Code:
       0: iconst_0
       1: ireturn

  public java.util.Map<java.lang.String, net.bytebuddy.description.type.TypeDefinition> getNamedTypes();
    Code:
       0: invokestatic  #111                // Method java/util/Collections.emptyMap:()Ljava/util/Map;
       3: areturn

  public net.bytebuddy.description.type.TypeDescription getThrowable();
    Code:
       0: invokestatic  #115                // Method net/bytebuddy/asm/Advice$NoExceptionHandler.access$1600:()Lnet/bytebuddy/description/type/TypeDescription;
       3: areturn

  public net.bytebuddy.asm.Advice$ArgumentHandler$Factory getArgumentHandlerFactory();
    Code:
       0: getstatic     #121                // Field net/bytebuddy/asm/Advice$ArgumentHandler$Factory.SIMPLE:Lnet/bytebuddy/asm/Advice$ArgumentHandler$Factory;
       3: areturn

  public net.bytebuddy.asm.Advice$Dispatcher$Resolved$ForMethodEnter asMethodEnter(java.util.List<? extends net.bytebuddy.asm.Advice$OffsetMapping$Factory<?>>, net.bytebuddy.jar.asm.ClassReader, net.bytebuddy.asm.Advice$Dispatcher$Unresolved);
    Code:
       0: aload_0
       1: areturn

  public net.bytebuddy.asm.Advice$Dispatcher$Resolved$ForMethodExit asMethodExit(java.util.List<? extends net.bytebuddy.asm.Advice$OffsetMapping$Factory<?>>, net.bytebuddy.jar.asm.ClassReader, net.bytebuddy.asm.Advice$Dispatcher$Unresolved);
    Code:
       0: aload_0
       1: areturn

  public void prepare();
    Code:
       0: return

  public void initialize();
    Code:
       0: return

  public void apply();
    Code:
       0: return

  public net.bytebuddy.asm.Advice$Dispatcher$Bound bind(net.bytebuddy.description.type.TypeDescription, net.bytebuddy.description.method.MethodDescription, net.bytebuddy.jar.asm.MethodVisitor, net.bytebuddy.implementation.Implementation$Context, net.bytebuddy.implementation.bytecode.assign.Assigner, net.bytebuddy.asm.Advice$ArgumentHandler$ForInstrumentedMethod, net.bytebuddy.asm.Advice$MethodSizeHandler$ForInstrumentedMethod, net.bytebuddy.asm.Advice$StackMapFrameHandler$ForInstrumentedMethod, net.bytebuddy.implementation.bytecode.StackManipulation, net.bytebuddy.asm.Advice$Dispatcher$RelocationHandler$Relocation);
    Code:
       0: aload_0
       1: areturn

  public net.bytebuddy.description.type.TypeDefinition getAdviceType();
    Code:
       0: aload_0
       1: invokevirtual #162                // Method getAdviceType:()Lnet/bytebuddy/description/type/TypeDescription;
       4: areturn

  static {};
    Code:
       0: new           #2                  // class net/bytebuddy/asm/Advice$Dispatcher$Inactive
       3: dup
       4: ldc           #164                // String INSTANCE
       6: iconst_0
       7: invokespecial #165                // Method "<init>":(Ljava/lang/String;I)V
      10: putstatic     #167                // Field INSTANCE:Lnet/bytebuddy/asm/Advice$Dispatcher$Inactive;
      13: iconst_1
      14: anewarray     #2                  // class net/bytebuddy/asm/Advice$Dispatcher$Inactive
      17: dup
      18: iconst_0
      19: getstatic     #167                // Field INSTANCE:Lnet/bytebuddy/asm/Advice$Dispatcher$Inactive;
      22: aastore
      23: putstatic     #73                 // Field $VALUES:[Lnet/bytebuddy/asm/Advice$Dispatcher$Inactive;
      26: return
}
