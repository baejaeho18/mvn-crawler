Compiled from "ServiceMonitorSpecFluent.java"
public interface io.dekorate.prometheus.model.ServiceMonitorSpecFluent<A extends io.dekorate.prometheus.model.ServiceMonitorSpecFluent<A>> extends io.dekorate.deps.kubernetes.api.builder.Fluent<A> {
  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelector getSelector();

  public abstract io.dekorate.deps.kubernetes.api.model.LabelSelector buildSelector();

  public abstract A withSelector(io.dekorate.deps.kubernetes.api.model.LabelSelector);

  public abstract java.lang.Boolean hasSelector();

  public abstract io.dekorate.prometheus.model.ServiceMonitorSpecFluent$SelectorNested<A> withNewSelector();

  public abstract io.dekorate.prometheus.model.ServiceMonitorSpecFluent$SelectorNested<A> withNewSelectorLike(io.dekorate.deps.kubernetes.api.model.LabelSelector);

  public abstract io.dekorate.prometheus.model.ServiceMonitorSpecFluent$SelectorNested<A> editSelector();

  public abstract io.dekorate.prometheus.model.ServiceMonitorSpecFluent$SelectorNested<A> editOrNewSelector();

  public abstract io.dekorate.prometheus.model.ServiceMonitorSpecFluent$SelectorNested<A> editOrNewSelectorLike(io.dekorate.deps.kubernetes.api.model.LabelSelector);

  public abstract A addToEndpoints(int, io.dekorate.prometheus.model.Endpoint);

  public abstract A setToEndpoints(int, io.dekorate.prometheus.model.Endpoint);

  public abstract A addToEndpoints(io.dekorate.prometheus.model.Endpoint...);

  public abstract A addAllToEndpoints(java.util.Collection<io.dekorate.prometheus.model.Endpoint>);

  public abstract A removeFromEndpoints(io.dekorate.prometheus.model.Endpoint...);

  public abstract A removeAllFromEndpoints(java.util.Collection<io.dekorate.prometheus.model.Endpoint>);

  public abstract A removeMatchingFromEndpoints(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.prometheus.model.EndpointBuilder>);

  public abstract java.util.List<io.dekorate.prometheus.model.Endpoint> getEndpoints();

  public abstract java.util.List<io.dekorate.prometheus.model.Endpoint> buildEndpoints();

  public abstract io.dekorate.prometheus.model.Endpoint buildEndpoint(int);

  public abstract io.dekorate.prometheus.model.Endpoint buildFirstEndpoint();

  public abstract io.dekorate.prometheus.model.Endpoint buildLastEndpoint();

  public abstract io.dekorate.prometheus.model.Endpoint buildMatchingEndpoint(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.prometheus.model.EndpointBuilder>);

  public abstract java.lang.Boolean hasMatchingEndpoint(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.prometheus.model.EndpointBuilder>);

  public abstract A withEndpoints(java.util.List<io.dekorate.prometheus.model.Endpoint>);

  public abstract A withEndpoints(io.dekorate.prometheus.model.Endpoint...);

  public abstract java.lang.Boolean hasEndpoints();

  public abstract A addNewEndpoint(java.lang.String, java.lang.String, java.lang.String, boolean);

  public abstract io.dekorate.prometheus.model.ServiceMonitorSpecFluent$EndpointsNested<A> addNewEndpoint();

  public abstract io.dekorate.prometheus.model.ServiceMonitorSpecFluent$EndpointsNested<A> addNewEndpointLike(io.dekorate.prometheus.model.Endpoint);

  public abstract io.dekorate.prometheus.model.ServiceMonitorSpecFluent$EndpointsNested<A> setNewEndpointLike(int, io.dekorate.prometheus.model.Endpoint);

  public abstract io.dekorate.prometheus.model.ServiceMonitorSpecFluent$EndpointsNested<A> editEndpoint(int);

  public abstract io.dekorate.prometheus.model.ServiceMonitorSpecFluent$EndpointsNested<A> editFirstEndpoint();

  public abstract io.dekorate.prometheus.model.ServiceMonitorSpecFluent$EndpointsNested<A> editLastEndpoint();

  public abstract io.dekorate.prometheus.model.ServiceMonitorSpecFluent$EndpointsNested<A> editMatchingEndpoint(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.prometheus.model.EndpointBuilder>);
}
