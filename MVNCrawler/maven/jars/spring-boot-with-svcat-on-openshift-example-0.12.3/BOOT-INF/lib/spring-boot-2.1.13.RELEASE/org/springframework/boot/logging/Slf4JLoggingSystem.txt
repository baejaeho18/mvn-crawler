Compiled from "Slf4JLoggingSystem.java"
public abstract class org.springframework.boot.logging.Slf4JLoggingSystem extends org.springframework.boot.logging.AbstractLoggingSystem {
  private static final java.lang.String BRIDGE_HANDLER;

  public org.springframework.boot.logging.Slf4JLoggingSystem(java.lang.ClassLoader);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/springframework/boot/logging/AbstractLoggingSystem."<init>":(Ljava/lang/ClassLoader;)V
       5: return

  public void beforeInitialize();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method org/springframework/boot/logging/AbstractLoggingSystem.beforeInitialize:()V
       4: aload_0
       5: invokespecial #3                  // Method configureJdkLoggingBridgeHandler:()V
       8: return

  public void cleanUp();
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method isBridgeHandlerAvailable:()Z
       4: ifeq          11
       7: aload_0
       8: invokespecial #5                  // Method removeJdkLoggingBridgeHandler:()V
      11: return

  protected void loadConfiguration(org.springframework.boot.logging.LoggingInitializationContext, java.lang.String, org.springframework.boot.logging.LogFile);
    Code:
       0: aload_2
       1: ldc           #6                  // String Location must not be null
       3: invokestatic  #7                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ifnull        19
      10: aload_0
      11: aload_1
      12: invokevirtual #8                  // Method org/springframework/boot/logging/LoggingInitializationContext.getEnvironment:()Lorg/springframework/core/env/Environment;
      15: aload_3
      16: invokevirtual #9                  // Method applySystemProperties:(Lorg/springframework/core/env/Environment;Lorg/springframework/boot/logging/LogFile;)V
      19: return

  private void configureJdkLoggingBridgeHandler();
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method isBridgeJulIntoSlf4j:()Z
       4: ifeq          14
       7: aload_0
       8: invokespecial #5                  // Method removeJdkLoggingBridgeHandler:()V
      11: invokestatic  #11                 // Method org/slf4j/bridge/SLF4JBridgeHandler.install:()V
      14: goto          18
      17: astore_1
      18: return
    Exception table:
       from    to  target type
           0    14    17   Class java/lang/Throwable

  protected final boolean isBridgeJulIntoSlf4j();
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method isBridgeHandlerAvailable:()Z
       4: ifeq          18
       7: aload_0
       8: invokespecial #13                 // Method isJulUsingASingleConsoleHandlerAtMost:()Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  protected final boolean isBridgeHandlerAvailable();
    Code:
       0: ldc           #15                 // String org.slf4j.bridge.SLF4JBridgeHandler
       2: aload_0
       3: invokevirtual #16                 // Method getClassLoader:()Ljava/lang/ClassLoader;
       6: invokestatic  #17                 // Method org/springframework/util/ClassUtils.isPresent:(Ljava/lang/String;Ljava/lang/ClassLoader;)Z
       9: ireturn

  private boolean isJulUsingASingleConsoleHandlerAtMost();
    Code:
       0: invokestatic  #18                 // Method java/util/logging/LogManager.getLogManager:()Ljava/util/logging/LogManager;
       3: ldc           #19                 // String
       5: invokevirtual #20                 // Method java/util/logging/LogManager.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       8: astore_1
       9: aload_1
      10: invokevirtual #21                 // Method java/util/logging/Logger.getHandlers:()[Ljava/util/logging/Handler;
      13: astore_2
      14: aload_2
      15: arraylength
      16: ifeq          34
      19: aload_2
      20: arraylength
      21: iconst_1
      22: if_icmpne     38
      25: aload_2
      26: iconst_0
      27: aaload
      28: instanceof    #22                 // class java/util/logging/ConsoleHandler
      31: ifeq          38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: ireturn

  private void removeJdkLoggingBridgeHandler();
    Code:
       0: aload_0
       1: invokespecial #23                 // Method removeDefaultRootHandler:()V
       4: invokestatic  #24                 // Method org/slf4j/bridge/SLF4JBridgeHandler.uninstall:()V
       7: goto          11
      10: astore_1
      11: return
    Exception table:
       from    to  target type
           0     7    10   Class java/lang/Throwable

  private void removeDefaultRootHandler();
    Code:
       0: invokestatic  #18                 // Method java/util/logging/LogManager.getLogManager:()Ljava/util/logging/LogManager;
       3: ldc           #19                 // String
       5: invokevirtual #20                 // Method java/util/logging/LogManager.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       8: astore_1
       9: aload_1
      10: invokevirtual #21                 // Method java/util/logging/Logger.getHandlers:()[Ljava/util/logging/Handler;
      13: astore_2
      14: aload_2
      15: arraylength
      16: iconst_1
      17: if_icmpne     36
      20: aload_2
      21: iconst_0
      22: aaload
      23: instanceof    #22                 // class java/util/logging/ConsoleHandler
      26: ifeq          36
      29: aload_1
      30: aload_2
      31: iconst_0
      32: aaload
      33: invokevirtual #25                 // Method java/util/logging/Logger.removeHandler:(Ljava/util/logging/Handler;)V
      36: goto          40
      39: astore_1
      40: return
    Exception table:
       from    to  target type
           0    36    39   Class java/lang/Throwable
}
