Compiled from "MapBinder.java"
class org.springframework.boot.context.properties.bind.MapBinder extends org.springframework.boot.context.properties.bind.AggregateBinder<java.util.Map<java.lang.Object, java.lang.Object>> {
  private static final org.springframework.boot.context.properties.bind.Bindable<java.util.Map<java.lang.String, java.lang.String>> STRING_STRING_MAP;

  org.springframework.boot.context.properties.bind.MapBinder(org.springframework.boot.context.properties.bind.Binder$Context);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/springframework/boot/context/properties/bind/AggregateBinder."<init>":(Lorg/springframework/boot/context/properties/bind/Binder$Context;)V
       5: return

  protected boolean isAllowRecursiveBinding(org.springframework.boot.context.properties.source.ConfigurationPropertySource);
    Code:
       0: iconst_1
       1: ireturn

  protected java.lang.Object bindAggregate(org.springframework.boot.context.properties.source.ConfigurationPropertyName, org.springframework.boot.context.properties.bind.Bindable<?>, org.springframework.boot.context.properties.bind.AggregateElementBinder);
    Code:
       0: aload_2
       1: invokevirtual #2                  // Method org/springframework/boot/context/properties/bind/Bindable.getValue:()Ljava/util/function/Supplier;
       4: ifnull        12
       7: ldc           #3                  // class java/util/Map
       9: goto          21
      12: aload_2
      13: invokevirtual #4                  // Method org/springframework/boot/context/properties/bind/Bindable.getType:()Lorg/springframework/core/ResolvableType;
      16: ldc           #5                  // class java/lang/Object
      18: invokevirtual #6                  // Method org/springframework/core/ResolvableType.resolve:(Ljava/lang/Class;)Ljava/lang/Class;
      21: iconst_0
      22: invokestatic  #7                  // Method org/springframework/core/CollectionFactory.createMap:(Ljava/lang/Class;I)Ljava/util/Map;
      25: astore        4
      27: aload_0
      28: aload_2
      29: invokespecial #8                  // Method resolveTarget:(Lorg/springframework/boot/context/properties/bind/Bindable;)Lorg/springframework/boot/context/properties/bind/Bindable;
      32: astore        5
      34: aload_0
      35: aload_1
      36: invokespecial #9                  // Method hasDescendants:(Lorg/springframework/boot/context/properties/source/ConfigurationPropertyName;)Z
      39: istore        6
      41: aload_0
      42: invokevirtual #10                 // Method getContext:()Lorg/springframework/boot/context/properties/bind/Binder$Context;
      45: invokevirtual #11                 // Method org/springframework/boot/context/properties/bind/Binder$Context.getSources:()Ljava/lang/Iterable;
      48: invokeinterface #12,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      53: astore        7
      55: aload         7
      57: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      62: ifeq          166
      65: aload         7
      67: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      72: checkcast     #15                 // class org/springframework/boot/context/properties/source/ConfigurationPropertySource
      75: astore        8
      77: getstatic     #16                 // Field org/springframework/boot/context/properties/source/ConfigurationPropertyName.EMPTY:Lorg/springframework/boot/context/properties/source/ConfigurationPropertyName;
      80: aload_1
      81: invokevirtual #17                 // Method org/springframework/boot/context/properties/source/ConfigurationPropertyName.equals:(Ljava/lang/Object;)Z
      84: ifne          144
      87: aload         8
      89: aload_1
      90: invokeinterface #18,  2           // InterfaceMethod org/springframework/boot/context/properties/source/ConfigurationPropertySource.getConfigurationProperty:(Lorg/springframework/boot/context/properties/source/ConfigurationPropertyName;)Lorg/springframework/boot/context/properties/source/ConfigurationProperty;
      95: astore        9
      97: aload         9
      99: ifnull        124
     102: iload         6
     104: ifne          124
     107: aload_0
     108: invokevirtual #10                 // Method getContext:()Lorg/springframework/boot/context/properties/bind/Binder$Context;
     111: invokevirtual #19                 // Method org/springframework/boot/context/properties/bind/Binder$Context.getConverter:()Lorg/springframework/boot/context/properties/bind/BindConverter;
     114: aload         9
     116: invokevirtual #20                 // Method org/springframework/boot/context/properties/source/ConfigurationProperty.getValue:()Ljava/lang/Object;
     119: aload_2
     120: invokevirtual #21                 // Method org/springframework/boot/context/properties/bind/BindConverter.convert:(Ljava/lang/Object;Lorg/springframework/boot/context/properties/bind/Bindable;)Ljava/lang/Object;
     123: areturn
     124: aload         8
     126: aload_1
     127: dup
     128: invokevirtual #22                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     131: pop
     132: invokedynamic #23,  0             // InvokeDynamic #0:test:(Lorg/springframework/boot/context/properties/source/ConfigurationPropertyName;)Ljava/util/function/Predicate;
     137: invokeinterface #24,  2           // InterfaceMethod org/springframework/boot/context/properties/source/ConfigurationPropertySource.filter:(Ljava/util/function/Predicate;)Lorg/springframework/boot/context/properties/source/ConfigurationPropertySource;
     142: astore        8
     144: new           #25                 // class org/springframework/boot/context/properties/bind/MapBinder$EntryBinder
     147: dup
     148: aload_0
     149: aload_1
     150: aload         5
     152: aload_3
     153: invokespecial #26                 // Method org/springframework/boot/context/properties/bind/MapBinder$EntryBinder."<init>":(Lorg/springframework/boot/context/properties/bind/MapBinder;Lorg/springframework/boot/context/properties/source/ConfigurationPropertyName;Lorg/springframework/boot/context/properties/bind/Bindable;Lorg/springframework/boot/context/properties/bind/AggregateElementBinder;)V
     156: aload         8
     158: aload         4
     160: invokevirtual #27                 // Method org/springframework/boot/context/properties/bind/MapBinder$EntryBinder.bindEntries:(Lorg/springframework/boot/context/properties/source/ConfigurationPropertySource;Ljava/util/Map;)V
     163: goto          55
     166: aload         4
     168: invokeinterface #28,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
     173: ifeq          180
     176: aconst_null
     177: goto          182
     180: aload         4
     182: areturn

  private boolean hasDescendants(org.springframework.boot.context.properties.source.ConfigurationPropertyName);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method getContext:()Lorg/springframework/boot/context/properties/bind/Binder$Context;
       4: invokevirtual #11                 // Method org/springframework/boot/context/properties/bind/Binder$Context.getSources:()Ljava/lang/Iterable;
       7: invokeinterface #12,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      12: astore_2
      13: aload_2
      14: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      19: ifeq          50
      22: aload_2
      23: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      28: checkcast     #15                 // class org/springframework/boot/context/properties/source/ConfigurationPropertySource
      31: astore_3
      32: aload_3
      33: aload_1
      34: invokeinterface #29,  2           // InterfaceMethod org/springframework/boot/context/properties/source/ConfigurationPropertySource.containsDescendantOf:(Lorg/springframework/boot/context/properties/source/ConfigurationPropertyName;)Lorg/springframework/boot/context/properties/source/ConfigurationPropertyState;
      39: getstatic     #30                 // Field org/springframework/boot/context/properties/source/ConfigurationPropertyState.PRESENT:Lorg/springframework/boot/context/properties/source/ConfigurationPropertyState;
      42: if_acmpne     47
      45: iconst_1
      46: ireturn
      47: goto          13
      50: iconst_0
      51: ireturn

  private org.springframework.boot.context.properties.bind.Bindable<?> resolveTarget(org.springframework.boot.context.properties.bind.Bindable<?>);
    Code:
       0: aload_1
       1: invokevirtual #4                  // Method org/springframework/boot/context/properties/bind/Bindable.getType:()Lorg/springframework/core/ResolvableType;
       4: ldc           #5                  // class java/lang/Object
       6: invokevirtual #6                  // Method org/springframework/core/ResolvableType.resolve:(Ljava/lang/Class;)Ljava/lang/Class;
       9: astore_2
      10: ldc           #31                 // class java/util/Properties
      12: aload_2
      13: invokevirtual #32                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      16: ifeq          23
      19: getstatic     #33                 // Field STRING_STRING_MAP:Lorg/springframework/boot/context/properties/bind/Bindable;
      22: areturn
      23: aload_1
      24: areturn

  protected java.util.Map<java.lang.Object, java.lang.Object> merge(java.util.function.Supplier<java.util.Map<java.lang.Object, java.lang.Object>>, java.util.Map<java.lang.Object, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #34                 // Method getExistingIfPossible:(Ljava/util/function/Supplier;)Ljava/util/Map;
       5: astore_3
       6: aload_3
       7: ifnonnull     12
      10: aload_2
      11: areturn
      12: aload_3
      13: aload_2
      14: invokeinterface #35,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      19: aload_0
      20: aload_3
      21: invokespecial #36                 // Method copyIfPossible:(Ljava/util/Map;)Ljava/util/Map;
      24: areturn
      25: astore        4
      27: aload_0
      28: aload_2
      29: invokevirtual #22                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      32: aload_3
      33: invokespecial #38                 // Method createNewMap:(Ljava/lang/Class;Ljava/util/Map;)Ljava/util/Map;
      36: astore        5
      38: aload         5
      40: aload_2
      41: invokeinterface #35,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      46: aload         5
      48: areturn
    Exception table:
       from    to  target type
          12    24    25   Class java/lang/UnsupportedOperationException

  private java.util.Map<java.lang.Object, java.lang.Object> getExistingIfPossible(java.util.function.Supplier<java.util.Map<java.lang.Object, java.lang.Object>>);
    Code:
       0: aload_1
       1: invokeinterface #39,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       6: checkcast     #3                  // class java/util/Map
       9: areturn
      10: astore_2
      11: aconst_null
      12: areturn
    Exception table:
       from    to  target type
           0     9    10   Class java/lang/Exception

  private java.util.Map<java.lang.Object, java.lang.Object> copyIfPossible(java.util.Map<java.lang.Object, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #22                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       5: aload_1
       6: invokespecial #38                 // Method createNewMap:(Ljava/lang/Class;Ljava/util/Map;)Ljava/util/Map;
       9: areturn
      10: astore_2
      11: aload_1
      12: areturn
    Exception table:
       from    to  target type
           0     9    10   Class java/lang/Exception

  private java.util.Map<java.lang.Object, java.lang.Object> createNewMap(java.lang.Class<?>, java.util.Map<java.lang.Object, java.lang.Object>);
    Code:
       0: aload_1
       1: aload_2
       2: invokeinterface #41,  1           // InterfaceMethod java/util/Map.size:()I
       7: invokestatic  #7                  // Method org/springframework/core/CollectionFactory.createMap:(Ljava/lang/Class;I)Ljava/util/Map;
      10: astore_3
      11: aload_3
      12: aload_2
      13: invokeinterface #35,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      18: aload_3
      19: areturn

  protected java.lang.Object merge(java.util.function.Supplier, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #3                  // class java/util/Map
       6: invokevirtual #42                 // Method merge:(Ljava/util/function/Supplier;Ljava/util/Map;)Ljava/util/Map;
       9: areturn

  static {};
    Code:
       0: ldc           #43                 // class java/lang/String
       2: ldc           #43                 // class java/lang/String
       4: invokestatic  #44                 // Method org/springframework/boot/context/properties/bind/Bindable.mapOf:(Ljava/lang/Class;Ljava/lang/Class;)Lorg/springframework/boot/context/properties/bind/Bindable;
       7: putstatic     #33                 // Field STRING_STRING_MAP:Lorg/springframework/boot/context/properties/bind/Bindable;
      10: return
}
