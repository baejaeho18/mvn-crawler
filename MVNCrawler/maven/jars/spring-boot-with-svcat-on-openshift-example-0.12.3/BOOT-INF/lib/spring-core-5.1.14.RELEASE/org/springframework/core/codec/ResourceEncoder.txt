Compiled from "ResourceEncoder.java"
public class org.springframework.core.codec.ResourceEncoder extends org.springframework.core.codec.AbstractSingleValueEncoder<org.springframework.core.io.Resource> {
  public static final int DEFAULT_BUFFER_SIZE;

  private final int bufferSize;

  public org.springframework.core.codec.ResourceEncoder();
    Code:
       0: aload_0
       1: sipush        4096
       4: invokespecial #3                  // Method "<init>":(I)V
       7: return

  public org.springframework.core.codec.ResourceEncoder(int);
    Code:
       0: aload_0
       1: iconst_2
       2: anewarray     #4                  // class org/springframework/util/MimeType
       5: dup
       6: iconst_0
       7: getstatic     #5                  // Field org/springframework/util/MimeTypeUtils.APPLICATION_OCTET_STREAM:Lorg/springframework/util/MimeType;
      10: aastore
      11: dup
      12: iconst_1
      13: getstatic     #6                  // Field org/springframework/util/MimeTypeUtils.ALL:Lorg/springframework/util/MimeType;
      16: aastore
      17: invokespecial #7                  // Method org/springframework/core/codec/AbstractSingleValueEncoder."<init>":([Lorg/springframework/util/MimeType;)V
      20: iload_1
      21: ifle          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ldc           #8                  // String \'bufferSize\' must be larger than 0
      31: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      34: aload_0
      35: iload_1
      36: putfield      #10                 // Field bufferSize:I
      39: return

  public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType);
    Code:
       0: aload_1
       1: invokevirtual #11                 // Method org/springframework/core/ResolvableType.toClass:()Ljava/lang/Class;
       4: astore_3
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokespecial #12                 // Method org/springframework/core/codec/AbstractSingleValueEncoder.canEncode:(Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;)Z
      11: ifeq          27
      14: ldc           #13                 // class org/springframework/core/io/Resource
      16: aload_3
      17: invokevirtual #14                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      20: ifeq          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ireturn

  protected reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.springframework.core.io.Resource, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #15                 // Field logger:Lorg/apache/commons/logging/Log;
       4: invokeinterface #16,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
       9: ifeq          65
      12: aload         5
      14: invokestatic  #17                 // Method org/springframework/core/codec/Hints.isLoggingSuppressed:(Ljava/util/Map;)Z
      17: ifne          65
      20: aload         5
      22: invokestatic  #18                 // Method org/springframework/core/codec/Hints.getLogPrefix:(Ljava/util/Map;)Ljava/lang/String;
      25: astore        6
      27: aload_0
      28: getfield      #15                 // Field logger:Lorg/apache/commons/logging/Log;
      31: new           #19                 // class java/lang/StringBuilder
      34: dup
      35: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      38: aload         6
      40: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: ldc           #22                 // String Writing [
      45: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_1
      49: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      52: ldc           #24                 // String ]
      54: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      60: invokeinterface #26,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      65: aload_1
      66: aload_2
      67: aload_0
      68: getfield      #10                 // Field bufferSize:I
      71: invokestatic  #27                 // Method org/springframework/core/io/buffer/DataBufferUtils.read:(Lorg/springframework/core/io/Resource;Lorg/springframework/core/io/buffer/DataBufferFactory;I)Lreactor/core/publisher/Flux;
      74: areturn

  protected reactor.core.publisher.Flux encode(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #13                 // class org/springframework/core/io/Resource
       5: aload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: invokevirtual #28                 // Method encode:(Lorg/springframework/core/io/Resource;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      14: areturn
}
