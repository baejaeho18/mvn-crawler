Compiled from "DataBufferUtils.java"
class org.springframework.core.io.buffer.DataBufferUtils$WritableByteChannelSubscriber extends reactor.core.publisher.BaseSubscriber<org.springframework.core.io.buffer.DataBuffer> {
  private final reactor.core.publisher.FluxSink<org.springframework.core.io.buffer.DataBuffer> sink;

  private final java.nio.channels.WritableByteChannel channel;

  public org.springframework.core.io.buffer.DataBufferUtils$WritableByteChannelSubscriber(reactor.core.publisher.FluxSink<org.springframework.core.io.buffer.DataBuffer>, java.nio.channels.WritableByteChannel);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/BaseSubscriber."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field sink:Lreactor/core/publisher/FluxSink;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field channel:Ljava/nio/channels/WritableByteChannel;
      14: return

  protected void hookOnSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: lconst_1
       2: invokevirtual #4                  // Method request:(J)V
       5: return

  protected void hookOnNext(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_1
       1: invokeinterface #5,  1            // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asByteBuffer:()Ljava/nio/ByteBuffer;
       6: astore_2
       7: aload_2
       8: invokevirtual #6                  // Method java/nio/ByteBuffer.hasRemaining:()Z
      11: ifeq          28
      14: aload_0
      15: getfield      #3                  // Field channel:Ljava/nio/channels/WritableByteChannel;
      18: aload_2
      19: invokeinterface #7,  2            // InterfaceMethod java/nio/channels/WritableByteChannel.write:(Ljava/nio/ByteBuffer;)I
      24: pop
      25: goto          7
      28: aload_0
      29: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxSink;
      32: aload_1
      33: invokeinterface #8,  2            // InterfaceMethod reactor/core/publisher/FluxSink.next:(Ljava/lang/Object;)Lreactor/core/publisher/FluxSink;
      38: pop
      39: aload_0
      40: lconst_1
      41: invokevirtual #4                  // Method request:(J)V
      44: goto          69
      47: astore_2
      48: aload_0
      49: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxSink;
      52: aload_1
      53: invokeinterface #8,  2            // InterfaceMethod reactor/core/publisher/FluxSink.next:(Ljava/lang/Object;)Lreactor/core/publisher/FluxSink;
      58: pop
      59: aload_0
      60: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxSink;
      63: aload_2
      64: invokeinterface #10,  2           // InterfaceMethod reactor/core/publisher/FluxSink.error:(Ljava/lang/Throwable;)V
      69: return
    Exception table:
       from    to  target type
           0    44    47   Class java/io/IOException

  protected void hookOnError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxSink;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod reactor/core/publisher/FluxSink.error:(Ljava/lang/Throwable;)V
      10: return

  protected void hookOnComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field sink:Lreactor/core/publisher/FluxSink;
       4: invokeinterface #11,  1           // InterfaceMethod reactor/core/publisher/FluxSink.complete:()V
       9: return

  protected void hookOnNext(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #12                 // class org/springframework/core/io/buffer/DataBuffer
       5: invokevirtual #13                 // Method hookOnNext:(Lorg/springframework/core/io/buffer/DataBuffer;)V
       8: return
}
