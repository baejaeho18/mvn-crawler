Compiled from "AbstractSingleValueEncoder.java"
public abstract class org.springframework.core.codec.AbstractSingleValueEncoder<T> extends org.springframework.core.codec.AbstractEncoder<T> {
  public org.springframework.core.codec.AbstractSingleValueEncoder(org.springframework.util.MimeType...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/springframework/core/codec/AbstractEncoder."<init>":([Lorg/springframework/util/MimeType;)V
       5: return

  public final reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<? extends T>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: invokestatic  #2                  // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       4: lconst_1
       5: invokevirtual #3                  // Method reactor/core/publisher/Flux.take:(J)Lreactor/core/publisher/Flux;
       8: aload_0
       9: aload_2
      10: aload_3
      11: aload         4
      13: aload         5
      15: invokedynamic #4,  0              // InvokeDynamic #0:apply:(Lorg/springframework/core/codec/AbstractSingleValueEncoder;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Ljava/util/function/Function;
      20: invokevirtual #5                  // Method reactor/core/publisher/Flux.concatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      23: ldc           #6                  // class org/springframework/core/io/buffer/PooledDataBuffer
      25: invokedynamic #7,  0              // InvokeDynamic #1:accept:()Ljava/util/function/Consumer;
      30: invokevirtual #8                  // Method reactor/core/publisher/Flux.doOnDiscard:(Ljava/lang/Class;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      33: areturn

  protected abstract reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(T, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);

  private org.reactivestreams.Publisher lambda$encode$0(org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map, java.lang.Object);
    Code:
       0: aload_0
       1: aload         5
       3: aload_1
       4: aload_2
       5: aload_3
       6: aload         4
       8: invokevirtual #9                  // Method encode:(Ljava/lang/Object;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      11: areturn
}
