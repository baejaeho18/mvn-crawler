Compiled from "AtomicHistogram.java"
public class org.HdrHistogram.AtomicHistogram extends org.HdrHistogram.Histogram {
  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<org.HdrHistogram.AtomicHistogram> totalCountUpdater;

  volatile long totalCount;

  volatile java.util.concurrent.atomic.AtomicLongArray counts;

  long getCountAtIndex(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field counts:Ljava/util/concurrent/atomic/AtomicLongArray;
       4: iload_1
       5: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicLongArray.get:(I)J
       8: lreturn

  long getCountAtNormalizedIndex(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field counts:Ljava/util/concurrent/atomic/AtomicLongArray;
       4: iload_1
       5: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicLongArray.get:(I)J
       8: lreturn

  void incrementCountAtIndex(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field counts:Ljava/util/concurrent/atomic/AtomicLongArray;
       4: iload_1
       5: invokevirtual #3                  // Method java/util/concurrent/atomic/AtomicLongArray.getAndIncrement:(I)J
       8: pop2
       9: return

  void addToCountAtIndex(int, long);
    Code:
       0: aload_0
       1: getfield      #1                  // Field counts:Ljava/util/concurrent/atomic/AtomicLongArray;
       4: iload_1
       5: lload_2
       6: invokevirtual #4                  // Method java/util/concurrent/atomic/AtomicLongArray.getAndAdd:(IJ)J
       9: pop2
      10: return

  void setCountAtIndex(int, long);
    Code:
       0: aload_0
       1: getfield      #1                  // Field counts:Ljava/util/concurrent/atomic/AtomicLongArray;
       4: iload_1
       5: lload_2
       6: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicLongArray.lazySet:(IJ)V
       9: return

  void setCountAtNormalizedIndex(int, long);
    Code:
       0: aload_0
       1: getfield      #1                  // Field counts:Ljava/util/concurrent/atomic/AtomicLongArray;
       4: iload_1
       5: lload_2
       6: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicLongArray.lazySet:(IJ)V
       9: return

  int getNormalizingIndexOffset();
    Code:
       0: iconst_0
       1: ireturn

  void setNormalizingIndexOffset(int);
    Code:
       0: iload_1
       1: ifeq          14
       4: new           #6                  // class java/lang/IllegalStateException
       7: dup
       8: ldc           #7                  // String AtomicHistogram does not support non-zero normalizing index settings. Use ConcurrentHistogram Instead.
      10: invokespecial #8                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: return

  void shiftNormalizingIndexByOffset(int, boolean);
    Code:
       0: new           #6                  // class java/lang/IllegalStateException
       3: dup
       4: ldc           #9                  // String AtomicHistogram does not support Shifting operations. Use ConcurrentHistogram Instead.
       6: invokespecial #8                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: athrow

  void resize(long);
    Code:
       0: new           #6                  // class java/lang/IllegalStateException
       3: dup
       4: ldc           #10                 // String AtomicHistogram does not support resizing operations. Use ConcurrentHistogram Instead.
       6: invokespecial #8                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: athrow

  public void setAutoResize(boolean);
    Code:
       0: new           #6                  // class java/lang/IllegalStateException
       3: dup
       4: ldc           #11                 // String AtomicHistogram does not support AutoResize operation. Use ConcurrentHistogram Instead.
       6: invokespecial #8                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: athrow

  void clearCounts();
    Code:
       0: iconst_0
       1: istore_1
       2: iload_1
       3: aload_0
       4: getfield      #1                  // Field counts:Ljava/util/concurrent/atomic/AtomicLongArray;
       7: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicLongArray.length:()I
      10: if_icmpge     28
      13: aload_0
      14: getfield      #1                  // Field counts:Ljava/util/concurrent/atomic/AtomicLongArray;
      17: iload_1
      18: lconst_0
      19: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicLongArray.lazySet:(IJ)V
      22: iinc          1, 1
      25: goto          2
      28: getstatic     #13                 // Field totalCountUpdater:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      31: aload_0
      32: lconst_0
      33: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.set:(Ljava/lang/Object;J)V
      36: return

  public org.HdrHistogram.AtomicHistogram copy();
    Code:
       0: new           #15                 // class org/HdrHistogram/AtomicHistogram
       3: dup
       4: aload_0
       5: invokespecial #16                 // Method "<init>":(Lorg/HdrHistogram/AbstractHistogram;)V
       8: astore_1
       9: aload_1
      10: aload_0
      11: invokevirtual #17                 // Method add:(Lorg/HdrHistogram/AbstractHistogram;)V
      14: aload_1
      15: areturn

  public org.HdrHistogram.AtomicHistogram copyCorrectedForCoordinatedOmission(long);
    Code:
       0: new           #15                 // class org/HdrHistogram/AtomicHistogram
       3: dup
       4: aload_0
       5: invokespecial #16                 // Method "<init>":(Lorg/HdrHistogram/AbstractHistogram;)V
       8: astore_3
       9: aload_3
      10: aload_0
      11: lload_1
      12: invokevirtual #18                 // Method addWhileCorrectingForCoordinatedOmission:(Lorg/HdrHistogram/AbstractHistogram;J)V
      15: aload_3
      16: areturn

  public long getTotalCount();
    Code:
       0: getstatic     #13                 // Field totalCountUpdater:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.get:(Ljava/lang/Object;)J
       7: lreturn

  void setTotalCount(long);
    Code:
       0: getstatic     #13                 // Field totalCountUpdater:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: lload_1
       5: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.set:(Ljava/lang/Object;J)V
       8: return

  void incrementTotalCount();
    Code:
       0: getstatic     #13                 // Field totalCountUpdater:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.incrementAndGet:(Ljava/lang/Object;)J
       7: pop2
       8: return

  void addToTotalCount(long);
    Code:
       0: getstatic     #13                 // Field totalCountUpdater:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: lload_1
       5: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
       8: pop2
       9: return

  int _getEstimatedFootprintInBytes();
    Code:
       0: sipush        512
       3: bipush        8
       5: aload_0
       6: getfield      #1                  // Field counts:Ljava/util/concurrent/atomic/AtomicLongArray;
       9: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicLongArray.length:()I
      12: imul
      13: iadd
      14: ireturn

  public org.HdrHistogram.AtomicHistogram(long, int);
    Code:
       0: aload_0
       1: lconst_1
       2: lload_1
       3: iload_3
       4: invokespecial #22                 // Method "<init>":(JJI)V
       7: return

  public org.HdrHistogram.AtomicHistogram(long, long, int);
    Code:
       0: aload_0
       1: lload_1
       2: lload_3
       3: iload         5
       5: iconst_0
       6: invokespecial #23                 // Method org/HdrHistogram/Histogram."<init>":(JJIZ)V
       9: aload_0
      10: new           #24                 // class java/util/concurrent/atomic/AtomicLongArray
      13: dup
      14: aload_0
      15: getfield      #25                 // Field countsArrayLength:I
      18: invokespecial #26                 // Method java/util/concurrent/atomic/AtomicLongArray."<init>":(I)V
      21: putfield      #1                  // Field counts:Ljava/util/concurrent/atomic/AtomicLongArray;
      24: aload_0
      25: bipush        8
      27: putfield      #27                 // Field wordSizeInBytes:I
      30: return

  public org.HdrHistogram.AtomicHistogram(org.HdrHistogram.AbstractHistogram);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokespecial #28                 // Method org/HdrHistogram/Histogram."<init>":(Lorg/HdrHistogram/AbstractHistogram;Z)V
       6: aload_0
       7: new           #24                 // class java/util/concurrent/atomic/AtomicLongArray
      10: dup
      11: aload_0
      12: getfield      #25                 // Field countsArrayLength:I
      15: invokespecial #26                 // Method java/util/concurrent/atomic/AtomicLongArray."<init>":(I)V
      18: putfield      #1                  // Field counts:Ljava/util/concurrent/atomic/AtomicLongArray;
      21: aload_0
      22: bipush        8
      24: putfield      #27                 // Field wordSizeInBytes:I
      27: return

  public static org.HdrHistogram.AtomicHistogram decodeFromByteBuffer(java.nio.ByteBuffer, long);
    Code:
       0: aload_0
       1: ldc           #15                 // class org/HdrHistogram/AtomicHistogram
       3: lload_1
       4: invokestatic  #29                 // Method decodeFromByteBuffer:(Ljava/nio/ByteBuffer;Ljava/lang/Class;J)Lorg/HdrHistogram/AbstractHistogram;
       7: checkcast     #15                 // class org/HdrHistogram/AtomicHistogram
      10: areturn

  public static org.HdrHistogram.AtomicHistogram decodeFromCompressedByteBuffer(java.nio.ByteBuffer, long) throws java.util.zip.DataFormatException;
    Code:
       0: aload_0
       1: ldc           #15                 // class org/HdrHistogram/AtomicHistogram
       3: lload_1
       4: invokestatic  #30                 // Method decodeFromCompressedByteBuffer:(Ljava/nio/ByteBuffer;Ljava/lang/Class;J)Lorg/HdrHistogram/AbstractHistogram;
       7: checkcast     #15                 // class org/HdrHistogram/AtomicHistogram
      10: areturn

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #31                 // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: return

  synchronized void fillCountsArrayFromBuffer(java.nio.ByteBuffer, int);
    Code:
       0: aload_1
       1: invokevirtual #32                 // Method java/nio/ByteBuffer.asLongBuffer:()Ljava/nio/LongBuffer;
       4: astore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_2
      11: if_icmpge     33
      14: aload_0
      15: getfield      #1                  // Field counts:Ljava/util/concurrent/atomic/AtomicLongArray;
      18: iload         4
      20: aload_3
      21: invokevirtual #33                 // Method java/nio/LongBuffer.get:()J
      24: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicLongArray.lazySet:(IJ)V
      27: iinc          4, 1
      30: goto          8
      33: return

  public org.HdrHistogram.Histogram copyCorrectedForCoordinatedOmission(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #34                 // Method copyCorrectedForCoordinatedOmission:(J)Lorg/HdrHistogram/AtomicHistogram;
       5: areturn

  public org.HdrHistogram.Histogram copy();
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method copy:()Lorg/HdrHistogram/AtomicHistogram;
       4: areturn

  public org.HdrHistogram.AbstractHistogram copyCorrectedForCoordinatedOmission(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #34                 // Method copyCorrectedForCoordinatedOmission:(J)Lorg/HdrHistogram/AtomicHistogram;
       5: areturn

  public org.HdrHistogram.AbstractHistogram copy();
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method copy:()Lorg/HdrHistogram/AtomicHistogram;
       4: areturn

  static {};
    Code:
       0: ldc           #15                 // class org/HdrHistogram/AtomicHistogram
       2: ldc           #36                 // String totalCount
       4: invokestatic  #37                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       7: putstatic     #13                 // Field totalCountUpdater:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: return
}
