Compiled from "Recorder.java"
public class org.HdrHistogram.Recorder {
  private static java.util.concurrent.atomic.AtomicLong instanceIdSequencer;

  private final long instanceId;

  private final org.HdrHistogram.WriterReaderPhaser recordingPhaser;

  private volatile org.HdrHistogram.Histogram activeHistogram;

  private org.HdrHistogram.Histogram inactiveHistogram;

  public org.HdrHistogram.Recorder(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field instanceIdSequencer:Ljava/util/concurrent/atomic/AtomicLong;
       8: invokevirtual #3                  // Method java/util/concurrent/atomic/AtomicLong.getAndIncrement:()J
      11: putfield      #4                  // Field instanceId:J
      14: aload_0
      15: new           #5                  // class org/HdrHistogram/WriterReaderPhaser
      18: dup
      19: invokespecial #6                  // Method org/HdrHistogram/WriterReaderPhaser."<init>":()V
      22: putfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      25: aload_0
      26: new           #8                  // class org/HdrHistogram/Recorder$InternalConcurrentHistogram
      29: dup
      30: aload_0
      31: aload_0
      32: getfield      #4                  // Field instanceId:J
      35: iload_1
      36: aconst_null
      37: invokespecial #9                  // Method org/HdrHistogram/Recorder$InternalConcurrentHistogram."<init>":(Lorg/HdrHistogram/Recorder;JILorg/HdrHistogram/Recorder$1;)V
      40: putfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      43: aload_0
      44: new           #8                  // class org/HdrHistogram/Recorder$InternalConcurrentHistogram
      47: dup
      48: aload_0
      49: aload_0
      50: getfield      #4                  // Field instanceId:J
      53: iload_1
      54: aconst_null
      55: invokespecial #9                  // Method org/HdrHistogram/Recorder$InternalConcurrentHistogram."<init>":(Lorg/HdrHistogram/Recorder;JILorg/HdrHistogram/Recorder$1;)V
      58: putfield      #11                 // Field inactiveHistogram:Lorg/HdrHistogram/Histogram;
      61: aload_0
      62: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      65: invokestatic  #12                 // Method java/lang/System.currentTimeMillis:()J
      68: invokevirtual #13                 // Method org/HdrHistogram/Histogram.setStartTimeStamp:(J)V
      71: return

  public org.HdrHistogram.Recorder(long, int);
    Code:
       0: aload_0
       1: lconst_1
       2: lload_1
       3: iload_3
       4: invokespecial #14                 // Method "<init>":(JJI)V
       7: return

  public org.HdrHistogram.Recorder(long, long, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field instanceIdSequencer:Ljava/util/concurrent/atomic/AtomicLong;
       8: invokevirtual #3                  // Method java/util/concurrent/atomic/AtomicLong.getAndIncrement:()J
      11: putfield      #4                  // Field instanceId:J
      14: aload_0
      15: new           #5                  // class org/HdrHistogram/WriterReaderPhaser
      18: dup
      19: invokespecial #6                  // Method org/HdrHistogram/WriterReaderPhaser."<init>":()V
      22: putfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      25: aload_0
      26: new           #15                 // class org/HdrHistogram/Recorder$InternalAtomicHistogram
      29: dup
      30: aload_0
      31: aload_0
      32: getfield      #4                  // Field instanceId:J
      35: lload_1
      36: lload_3
      37: iload         5
      39: aconst_null
      40: invokespecial #16                 // Method org/HdrHistogram/Recorder$InternalAtomicHistogram."<init>":(Lorg/HdrHistogram/Recorder;JJJILorg/HdrHistogram/Recorder$1;)V
      43: putfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      46: aload_0
      47: new           #15                 // class org/HdrHistogram/Recorder$InternalAtomicHistogram
      50: dup
      51: aload_0
      52: aload_0
      53: getfield      #4                  // Field instanceId:J
      56: lload_1
      57: lload_3
      58: iload         5
      60: aconst_null
      61: invokespecial #16                 // Method org/HdrHistogram/Recorder$InternalAtomicHistogram."<init>":(Lorg/HdrHistogram/Recorder;JJJILorg/HdrHistogram/Recorder$1;)V
      64: putfield      #11                 // Field inactiveHistogram:Lorg/HdrHistogram/Histogram;
      67: aload_0
      68: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      71: invokestatic  #12                 // Method java/lang/System.currentTimeMillis:()J
      74: invokevirtual #13                 // Method org/HdrHistogram/Histogram.setStartTimeStamp:(J)V
      77: return

  public void recordValue(long) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #17                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionEnter:()J
       7: lstore_3
       8: aload_0
       9: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      12: lload_1
      13: invokevirtual #18                 // Method org/HdrHistogram/Histogram.recordValue:(J)V
      16: aload_0
      17: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      20: lload_3
      21: invokevirtual #19                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      24: goto          40
      27: astore        5
      29: aload_0
      30: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      33: lload_3
      34: invokevirtual #19                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      37: aload         5
      39: athrow
      40: return
    Exception table:
       from    to  target type
           8    16    27   any
          27    29    27   any

  public void recordValueWithCount(long, long) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #17                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionEnter:()J
       7: lstore        5
       9: aload_0
      10: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      13: lload_1
      14: lload_3
      15: invokevirtual #20                 // Method org/HdrHistogram/Histogram.recordValueWithCount:(JJ)V
      18: aload_0
      19: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      22: lload         5
      24: invokevirtual #19                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      27: goto          44
      30: astore        7
      32: aload_0
      33: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      36: lload         5
      38: invokevirtual #19                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      41: aload         7
      43: athrow
      44: return
    Exception table:
       from    to  target type
           9    18    30   any
          30    32    30   any

  public void recordValueWithExpectedInterval(long, long) throws java.lang.ArrayIndexOutOfBoundsException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #17                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionEnter:()J
       7: lstore        5
       9: aload_0
      10: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      13: lload_1
      14: lload_3
      15: invokevirtual #21                 // Method org/HdrHistogram/Histogram.recordValueWithExpectedInterval:(JJ)V
      18: aload_0
      19: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      22: lload         5
      24: invokevirtual #19                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      27: goto          44
      30: astore        7
      32: aload_0
      33: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
      36: lload         5
      38: invokevirtual #19                 // Method org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit:(J)V
      41: aload         7
      43: athrow
      44: return
    Exception table:
       from    to  target type
           9    18    30   any
          30    32    30   any

  public synchronized org.HdrHistogram.Histogram getIntervalHistogram();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #22                 // Method getIntervalHistogram:(Lorg/HdrHistogram/Histogram;)Lorg/HdrHistogram/Histogram;
       5: areturn

  public synchronized org.HdrHistogram.Histogram getIntervalHistogram(org.HdrHistogram.Histogram);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #23                 // Method validateFitAsReplacementHistogram:(Lorg/HdrHistogram/Histogram;)V
       5: aload_0
       6: aload_1
       7: putfield      #11                 // Field inactiveHistogram:Lorg/HdrHistogram/Histogram;
      10: aload_0
      11: invokespecial #24                 // Method performIntervalSample:()V
      14: aload_0
      15: getfield      #11                 // Field inactiveHistogram:Lorg/HdrHistogram/Histogram;
      18: astore_2
      19: aload_0
      20: aconst_null
      21: putfield      #11                 // Field inactiveHistogram:Lorg/HdrHistogram/Histogram;
      24: aload_2
      25: areturn

  public synchronized void getIntervalHistogramInto(org.HdrHistogram.Histogram);
    Code:
       0: aload_0
       1: invokespecial #24                 // Method performIntervalSample:()V
       4: aload_0
       5: getfield      #11                 // Field inactiveHistogram:Lorg/HdrHistogram/Histogram;
       8: aload_1
       9: invokevirtual #25                 // Method org/HdrHistogram/Histogram.copyInto:(Lorg/HdrHistogram/AbstractHistogram;)V
      12: return

  public synchronized void reset();
    Code:
       0: aload_0
       1: invokespecial #24                 // Method performIntervalSample:()V
       4: aload_0
       5: invokespecial #24                 // Method performIntervalSample:()V
       8: return

  private void performIntervalSample();
    Code:
       0: aload_0
       1: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
       4: invokevirtual #26                 // Method org/HdrHistogram/WriterReaderPhaser.readerLock:()V
       7: aload_0
       8: getfield      #11                 // Field inactiveHistogram:Lorg/HdrHistogram/Histogram;
      11: ifnonnull     89
      14: aload_0
      15: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      18: instanceof    #15                 // class org/HdrHistogram/Recorder$InternalAtomicHistogram
      21: ifeq          65
      24: aload_0
      25: new           #15                 // class org/HdrHistogram/Recorder$InternalAtomicHistogram
      28: dup
      29: aload_0
      30: aload_0
      31: getfield      #4                  // Field instanceId:J
      34: aload_0
      35: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      38: invokevirtual #27                 // Method org/HdrHistogram/Histogram.getLowestDiscernibleValue:()J
      41: aload_0
      42: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      45: invokevirtual #28                 // Method org/HdrHistogram/Histogram.getHighestTrackableValue:()J
      48: aload_0
      49: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      52: invokevirtual #29                 // Method org/HdrHistogram/Histogram.getNumberOfSignificantValueDigits:()I
      55: aconst_null
      56: invokespecial #16                 // Method org/HdrHistogram/Recorder$InternalAtomicHistogram."<init>":(Lorg/HdrHistogram/Recorder;JJJILorg/HdrHistogram/Recorder$1;)V
      59: putfield      #11                 // Field inactiveHistogram:Lorg/HdrHistogram/Histogram;
      62: goto          89
      65: aload_0
      66: new           #8                  // class org/HdrHistogram/Recorder$InternalConcurrentHistogram
      69: dup
      70: aload_0
      71: aload_0
      72: getfield      #4                  // Field instanceId:J
      75: aload_0
      76: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      79: invokevirtual #29                 // Method org/HdrHistogram/Histogram.getNumberOfSignificantValueDigits:()I
      82: aconst_null
      83: invokespecial #9                  // Method org/HdrHistogram/Recorder$InternalConcurrentHistogram."<init>":(Lorg/HdrHistogram/Recorder;JILorg/HdrHistogram/Recorder$1;)V
      86: putfield      #11                 // Field inactiveHistogram:Lorg/HdrHistogram/Histogram;
      89: aload_0
      90: getfield      #11                 // Field inactiveHistogram:Lorg/HdrHistogram/Histogram;
      93: invokevirtual #30                 // Method org/HdrHistogram/Histogram.reset:()V
      96: aload_0
      97: getfield      #11                 // Field inactiveHistogram:Lorg/HdrHistogram/Histogram;
     100: astore_1
     101: aload_0
     102: aload_0
     103: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
     106: putfield      #11                 // Field inactiveHistogram:Lorg/HdrHistogram/Histogram;
     109: aload_0
     110: aload_1
     111: putfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
     114: invokestatic  #12                 // Method java/lang/System.currentTimeMillis:()J
     117: lstore_2
     118: aload_0
     119: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
     122: lload_2
     123: invokevirtual #13                 // Method org/HdrHistogram/Histogram.setStartTimeStamp:(J)V
     126: aload_0
     127: getfield      #11                 // Field inactiveHistogram:Lorg/HdrHistogram/Histogram;
     130: lload_2
     131: invokevirtual #31                 // Method org/HdrHistogram/Histogram.setEndTimeStamp:(J)V
     134: aload_0
     135: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
     138: ldc2_w        #32                 // long 500000l
     141: invokevirtual #34                 // Method org/HdrHistogram/WriterReaderPhaser.flipPhase:(J)V
     144: aload_0
     145: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
     148: invokevirtual #35                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
     151: goto          166
     154: astore        4
     156: aload_0
     157: getfield      #7                  // Field recordingPhaser:Lorg/HdrHistogram/WriterReaderPhaser;
     160: invokevirtual #35                 // Method org/HdrHistogram/WriterReaderPhaser.readerUnlock:()V
     163: aload         4
     165: athrow
     166: return
    Exception table:
       from    to  target type
           0   144   154   any
         154   156   154   any

  void validateFitAsReplacementHistogram(org.HdrHistogram.Histogram);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_1
       3: ifnonnull     11
       6: iconst_0
       7: istore_2
       8: goto          94
      11: aload_1
      12: instanceof    #15                 // class org/HdrHistogram/Recorder$InternalAtomicHistogram
      15: ifeq          54
      18: aload_0
      19: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      22: instanceof    #15                 // class org/HdrHistogram/Recorder$InternalAtomicHistogram
      25: ifeq          94
      28: aload_1
      29: checkcast     #15                 // class org/HdrHistogram/Recorder$InternalAtomicHistogram
      32: invokestatic  #36                 // Method org/HdrHistogram/Recorder$InternalAtomicHistogram.access$200:(Lorg/HdrHistogram/Recorder$InternalAtomicHistogram;)J
      35: aload_0
      36: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      39: checkcast     #15                 // class org/HdrHistogram/Recorder$InternalAtomicHistogram
      42: invokestatic  #36                 // Method org/HdrHistogram/Recorder$InternalAtomicHistogram.access$200:(Lorg/HdrHistogram/Recorder$InternalAtomicHistogram;)J
      45: lcmp
      46: ifne          94
      49: iconst_0
      50: istore_2
      51: goto          94
      54: aload_1
      55: instanceof    #8                  // class org/HdrHistogram/Recorder$InternalConcurrentHistogram
      58: ifeq          94
      61: aload_0
      62: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      65: instanceof    #8                  // class org/HdrHistogram/Recorder$InternalConcurrentHistogram
      68: ifeq          94
      71: aload_1
      72: checkcast     #8                  // class org/HdrHistogram/Recorder$InternalConcurrentHistogram
      75: invokestatic  #37                 // Method org/HdrHistogram/Recorder$InternalConcurrentHistogram.access$300:(Lorg/HdrHistogram/Recorder$InternalConcurrentHistogram;)J
      78: aload_0
      79: getfield      #10                 // Field activeHistogram:Lorg/HdrHistogram/Histogram;
      82: checkcast     #8                  // class org/HdrHistogram/Recorder$InternalConcurrentHistogram
      85: invokestatic  #37                 // Method org/HdrHistogram/Recorder$InternalConcurrentHistogram.access$300:(Lorg/HdrHistogram/Recorder$InternalConcurrentHistogram;)J
      88: lcmp
      89: ifne          94
      92: iconst_0
      93: istore_2
      94: iload_2
      95: ifeq          136
      98: new           #38                 // class java/lang/IllegalArgumentException
     101: dup
     102: new           #39                 // class java/lang/StringBuilder
     105: dup
     106: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
     109: ldc           #41                 // String replacement histogram must have been obtained via a previous getIntervalHistogram() call from this
     111: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     114: aload_0
     115: invokevirtual #43                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     118: invokevirtual #44                 // Method java/lang/Class.getName:()Ljava/lang/String;
     121: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     124: ldc           #45                 // String  instance
     126: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     129: invokevirtual #46                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     132: invokespecial #47                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     135: athrow
     136: return

  static {};
    Code:
       0: new           #48                 // class java/util/concurrent/atomic/AtomicLong
       3: dup
       4: lconst_1
       5: invokespecial #49                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
       8: putstatic     #2                  // Field instanceIdSequencer:Ljava/util/concurrent/atomic/AtomicLong;
      11: return
}
