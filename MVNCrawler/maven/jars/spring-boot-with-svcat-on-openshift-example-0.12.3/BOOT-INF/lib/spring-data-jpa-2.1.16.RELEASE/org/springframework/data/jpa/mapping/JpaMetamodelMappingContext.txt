Compiled from "JpaMetamodelMappingContext.java"
public class org.springframework.data.jpa.mapping.JpaMetamodelMappingContext extends org.springframework.data.mapping.context.AbstractMappingContext<org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?>, org.springframework.data.jpa.mapping.JpaPersistentProperty> {
  private final org.springframework.data.jpa.mapping.JpaMetamodelMappingContext$Metamodels models;

  private final org.springframework.data.jpa.provider.PersistenceProvider persistenceProvider;

  public org.springframework.data.jpa.mapping.JpaMetamodelMappingContext(java.util.Set<javax.persistence.metamodel.Metamodel>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/data/mapping/context/AbstractMappingContext."<init>":()V
       4: aload_1
       5: ldc           #2                  // String JPA metamodel must not be null!
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_1
      11: ldc           #4                  // String JPA metamodel must not be empty!
      13: invokestatic  #5                  // Method org/springframework/util/Assert.notEmpty:(Ljava/util/Collection;Ljava/lang/String;)V
      16: aload_0
      17: new           #6                  // class org/springframework/data/jpa/mapping/JpaMetamodelMappingContext$Metamodels
      20: dup
      21: aload_1
      22: aconst_null
      23: invokespecial #7                  // Method org/springframework/data/jpa/mapping/JpaMetamodelMappingContext$Metamodels."<init>":(Ljava/util/Set;Lorg/springframework/data/jpa/mapping/JpaMetamodelMappingContext$1;)V
      26: putfield      #8                  // Field models:Lorg/springframework/data/jpa/mapping/JpaMetamodelMappingContext$Metamodels;
      29: aload_0
      30: aload_1
      31: invokeinterface #9,  1            // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      36: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      41: checkcast     #11                 // class javax/persistence/metamodel/Metamodel
      44: invokestatic  #12                 // Method org/springframework/data/jpa/provider/PersistenceProvider.fromMetamodel:(Ljavax/persistence/metamodel/Metamodel;)Lorg/springframework/data/jpa/provider/PersistenceProvider;
      47: putfield      #13                 // Field persistenceProvider:Lorg/springframework/data/jpa/provider/PersistenceProvider;
      50: return

  protected <T> org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?> createPersistentEntity(org.springframework.data.util.TypeInformation<T>);
    Code:
       0: new           #14                 // class org/springframework/data/jpa/mapping/JpaPersistentEntityImpl
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #13                 // Field persistenceProvider:Lorg/springframework/data/jpa/provider/PersistenceProvider;
       9: aload_0
      10: getfield      #8                  // Field models:Lorg/springframework/data/jpa/mapping/JpaMetamodelMappingContext$Metamodels;
      13: aload_1
      14: invokevirtual #15                 // Method org/springframework/data/jpa/mapping/JpaMetamodelMappingContext$Metamodels.getMetamodel:(Lorg/springframework/data/util/TypeInformation;)Lorg/springframework/data/jpa/util/JpaMetamodel;
      17: invokespecial #16                 // Method org/springframework/data/jpa/mapping/JpaPersistentEntityImpl."<init>":(Lorg/springframework/data/util/TypeInformation;Lorg/springframework/data/jpa/provider/ProxyIdAccessor;Lorg/springframework/data/jpa/util/JpaMetamodel;)V
      20: areturn

  protected org.springframework.data.jpa.mapping.JpaPersistentProperty createPersistentProperty(org.springframework.data.mapping.model.Property, org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?>, org.springframework.data.mapping.model.SimpleTypeHolder);
    Code:
       0: new           #17                 // class org/springframework/data/jpa/mapping/JpaPersistentPropertyImpl
       3: dup
       4: aload_2
       5: invokevirtual #18                 // Method org/springframework/data/jpa/mapping/JpaPersistentEntityImpl.getMetamodel:()Lorg/springframework/data/jpa/util/JpaMetamodel;
       8: aload_1
       9: aload_2
      10: aload_3
      11: invokespecial #19                 // Method org/springframework/data/jpa/mapping/JpaPersistentPropertyImpl."<init>":(Lorg/springframework/data/jpa/util/JpaMetamodel;Lorg/springframework/data/mapping/model/Property;Lorg/springframework/data/mapping/PersistentEntity;Lorg/springframework/data/mapping/model/SimpleTypeHolder;)V
      14: areturn

  protected boolean shouldCreatePersistentEntityFor(org.springframework.data.util.TypeInformation<?>);
    Code:
       0: aload_0
       1: getfield      #8                  // Field models:Lorg/springframework/data/jpa/mapping/JpaMetamodelMappingContext$Metamodels;
       4: aload_1
       5: invokevirtual #20                 // Method org/springframework/data/jpa/mapping/JpaMetamodelMappingContext$Metamodels.isMetamodelManagedType:(Lorg/springframework/data/util/TypeInformation;)Z
       8: ireturn

  public <T> org.springframework.data.mapping.PersistentPropertyPaths<T, org.springframework.data.jpa.mapping.JpaPersistentProperty> findPersistentPropertyPaths(java.lang.Class<T>, java.util.function.Predicate<? super org.springframework.data.jpa.mapping.JpaPersistentProperty>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #21,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
       8: invokevirtual #22                 // Method doFindPersistentPropertyPaths:(Ljava/lang/Class;Ljava/util/function/Predicate;Ljava/util/function/Predicate;)Lorg/springframework/data/mapping/PersistentPropertyPaths;
      11: areturn

  public boolean hasPersistentEntityFor(java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #23                 // Method org/springframework/data/mapping/context/AbstractMappingContext.hasPersistentEntityFor:(Ljava/lang/Class;)Z
       5: ifne          19
       8: aload_0
       9: getfield      #8                  // Field models:Lorg/springframework/data/jpa/mapping/JpaMetamodelMappingContext$Metamodels;
      12: aload_1
      13: invokevirtual #24                 // Method org/springframework/data/jpa/mapping/JpaMetamodelMappingContext$Metamodels.isMetamodelManagedType:(Ljava/lang/Class;)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  protected org.springframework.data.mapping.PersistentProperty createPersistentProperty(org.springframework.data.mapping.model.Property, org.springframework.data.mapping.model.MutablePersistentEntity, org.springframework.data.mapping.model.SimpleTypeHolder);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #14                 // class org/springframework/data/jpa/mapping/JpaPersistentEntityImpl
       6: aload_3
       7: invokevirtual #25                 // Method createPersistentProperty:(Lorg/springframework/data/mapping/model/Property;Lorg/springframework/data/jpa/mapping/JpaPersistentEntityImpl;Lorg/springframework/data/mapping/model/SimpleTypeHolder;)Lorg/springframework/data/jpa/mapping/JpaPersistentProperty;
      10: areturn

  protected org.springframework.data.mapping.model.MutablePersistentEntity createPersistentEntity(org.springframework.data.util.TypeInformation);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #26                 // Method createPersistentEntity:(Lorg/springframework/data/util/TypeInformation;)Lorg/springframework/data/jpa/mapping/JpaPersistentEntityImpl;
       5: areturn

  private static boolean lambda$findPersistentPropertyPaths$0(org.springframework.data.jpa.mapping.JpaPersistentProperty);
    Code:
       0: aload_0
       1: invokeinterface #27,  1           // InterfaceMethod org/springframework/data/jpa/mapping/JpaPersistentProperty.isEmbeddable:()Z
       6: ireturn
}
