Compiled from "TypeReferences.java"
abstract class org.springframework.hateoas.mvc.TypeReferences$SyntheticParameterizedTypeReference<T> extends org.springframework.core.ParameterizedTypeReference<T> {
  private final java.lang.reflect.Type type;

  protected org.springframework.hateoas.mvc.TypeReferences$SyntheticParameterizedTypeReference();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/core/ParameterizedTypeReference."<init>":()V
       4: aload_0
       5: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       8: astore_1
       9: aload_1
      10: invokevirtual #3                  // Method java/lang/Class.getGenericSuperclass:()Ljava/lang/reflect/Type;
      13: astore_2
      14: aload_2
      15: checkcast     #4                  // class java/lang/reflect/ParameterizedType
      18: astore_3
      19: aload_3
      20: invokeinterface #5,  1            // InterfaceMethod java/lang/reflect/ParameterizedType.getActualTypeArguments:()[Ljava/lang/reflect/Type;
      25: iconst_0
      26: aaload
      27: astore        4
      29: aload_0
      30: invokevirtual #2                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      33: invokestatic  #6                  // Method findParameterizedTypeReferenceSubclass:(Ljava/lang/Class;)Ljava/lang/Class;
      36: astore        5
      38: aload         5
      40: invokevirtual #3                  // Method java/lang/Class.getGenericSuperclass:()Ljava/lang/reflect/Type;
      43: astore        6
      45: ldc           #4                  // class java/lang/reflect/ParameterizedType
      47: aload         6
      49: invokestatic  #7                  // Method org/springframework/util/Assert.isInstanceOf:(Ljava/lang/Class;Ljava/lang/Object;)V
      52: aload         6
      54: checkcast     #4                  // class java/lang/reflect/ParameterizedType
      57: astore        7
      59: aload         7
      61: invokeinterface #5,  1            // InterfaceMethod java/lang/reflect/ParameterizedType.getActualTypeArguments:()[Ljava/lang/reflect/Type;
      66: arraylength
      67: iconst_1
      68: if_icmpne     75
      71: iconst_1
      72: goto          76
      75: iconst_0
      76: ldc           #8                  // String Type must have exactly one generic type argument but has %s.
      78: iconst_1
      79: anewarray     #9                  // class java/lang/Object
      82: dup
      83: iconst_0
      84: aload         7
      86: invokeinterface #5,  1            // InterfaceMethod java/lang/reflect/ParameterizedType.getActualTypeArguments:()[Ljava/lang/reflect/Type;
      91: arraylength
      92: invokestatic  #10                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      95: aastore
      96: invokestatic  #11                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      99: invokestatic  #12                 // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
     102: aload         7
     104: invokeinterface #5,  1            // InterfaceMethod java/lang/reflect/ParameterizedType.getActualTypeArguments:()[Ljava/lang/reflect/Type;
     109: iconst_0
     110: aaload
     111: new           #13                 // class java/util/HashMap
     114: dup
     115: invokespecial #14                 // Method java/util/HashMap."<init>":()V
     118: invokestatic  #15                 // Method org/springframework/core/GenericTypeResolver.resolveType:(Ljava/lang/reflect/Type;Ljava/util/Map;)Ljava/lang/Class;
     121: astore        8
     123: aload_0
     124: new           #16                 // class org/springframework/hateoas/mvc/TypeReferences$SyntheticParameterizedType
     127: dup
     128: aload         8
     130: iconst_1
     131: anewarray     #17                 // class java/lang/reflect/Type
     134: dup
     135: iconst_0
     136: aload         4
     138: aastore
     139: invokespecial #18                 // Method org/springframework/hateoas/mvc/TypeReferences$SyntheticParameterizedType."<init>":(Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V
     142: putfield      #19                 // Field type:Ljava/lang/reflect/Type;
     145: return

  public java.lang.reflect.Type getType();
    Code:
       0: aload_0
       1: getfield      #19                 // Field type:Ljava/lang/reflect/Type;
       4: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     29
       5: aload_1
       6: instanceof    #20                 // class org/springframework/hateoas/mvc/TypeReferences$SyntheticParameterizedTypeReference
       9: ifeq          33
      12: aload_0
      13: getfield      #19                 // Field type:Ljava/lang/reflect/Type;
      16: aload_1
      17: checkcast     #20                 // class org/springframework/hateoas/mvc/TypeReferences$SyntheticParameterizedTypeReference
      20: getfield      #19                 // Field type:Ljava/lang/reflect/Type;
      23: invokevirtual #21                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      26: ifeq          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #19                 // Field type:Ljava/lang/reflect/Type;
       4: invokevirtual #22                 // Method java/lang/Object.hashCode:()I
       7: ireturn

  public java.lang.String toString();
    Code:
       0: new           #23                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #25                 // String SyntheticParameterizedTypeReference<
       9: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #19                 // Field type:Ljava/lang/reflect/Type;
      16: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #28                 // String >
      21: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn

  private static java.lang.Class<?> findParameterizedTypeReferenceSubclass(java.lang.Class<?>);
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method java/lang/Class.getSuperclass:()Ljava/lang/Class;
       4: astore_1
       5: ldc           #9                  // class java/lang/Object
       7: aload_1
       8: invokevirtual #21                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      11: ifeq          24
      14: new           #31                 // class java/lang/IllegalStateException
      17: dup
      18: ldc           #32                 // String Expected SyntheticParameterizedTypeReference superclass
      20: invokespecial #33                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: ldc           #20                 // class org/springframework/hateoas/mvc/TypeReferences$SyntheticParameterizedTypeReference
      26: aload_1
      27: invokevirtual #21                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      30: ifeq          35
      33: aload_0
      34: areturn
      35: aload_1
      36: invokestatic  #6                  // Method findParameterizedTypeReferenceSubclass:(Ljava/lang/Class;)Ljava/lang/Class;
      39: areturn
}
