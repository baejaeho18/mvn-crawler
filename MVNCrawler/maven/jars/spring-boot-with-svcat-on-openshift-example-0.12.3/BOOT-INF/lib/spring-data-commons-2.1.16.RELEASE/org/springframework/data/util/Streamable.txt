Compiled from "Streamable.java"
public interface org.springframework.data.util.Streamable<T> extends java.lang.Iterable<T>, java.util.function.Supplier<java.util.stream.Stream<T>> {
  public static <T> org.springframework.data.util.Streamable<T> empty();
    Code:
       0: invokedynamic #1,  0              // InvokeDynamic #0:iterator:()Lorg/springframework/data/util/Streamable;
       5: areturn

  public static <T> org.springframework.data.util.Streamable<T> of(T...);
    Code:
       0: aload_0
       1: invokedynamic #2,  0              // InvokeDynamic #1:iterator:([Ljava/lang/Object;)Lorg/springframework/data/util/Streamable;
       6: areturn

  public static <T> org.springframework.data.util.Streamable<T> of(java.lang.Iterable<T>);
    Code:
       0: aload_0
       1: ldc           #3                  // String Iterable must not be null!
       3: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: dup
       8: invokevirtual #5                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: pop
      12: invokedynamic #6,  0              // InvokeDynamic #2:iterator:(Ljava/lang/Iterable;)Lorg/springframework/data/util/Streamable;
      17: areturn

  public static <T> org.springframework.data.util.Streamable<T> of(java.util.function.Supplier<? extends java.util.stream.Stream<T>>);
    Code:
       0: aload_0
       1: invokestatic  #7                  // Method org/springframework/data/util/LazyStreamable.of:(Ljava/util/function/Supplier;)Lorg/springframework/data/util/LazyStreamable;
       4: areturn

  public default java.util.stream.Stream<T> stream();
    Code:
       0: aload_0
       1: invokeinterface #8,  1            // InterfaceMethod spliterator:()Ljava/util/Spliterator;
       6: iconst_0
       7: invokestatic  #9                  // Method java/util/stream/StreamSupport.stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;
      10: areturn

  public default <R> org.springframework.data.util.Streamable<R> map(java.util.function.Function<? super T, ? extends R>);
    Code:
       0: aload_1
       1: ldc           #10                 // String Mapping function must not be null!
       3: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokedynamic #11,  0             // InvokeDynamic #3:get:(Lorg/springframework/data/util/Streamable;Ljava/util/function/Function;)Ljava/util/function/Supplier;
      13: invokestatic  #12                 // InterfaceMethod of:(Ljava/util/function/Supplier;)Lorg/springframework/data/util/Streamable;
      16: areturn

  public default <R> org.springframework.data.util.Streamable<R> flatMap(java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>);
    Code:
       0: aload_1
       1: ldc           #10                 // String Mapping function must not be null!
       3: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokedynamic #13,  0             // InvokeDynamic #4:get:(Lorg/springframework/data/util/Streamable;Ljava/util/function/Function;)Ljava/util/function/Supplier;
      13: invokestatic  #12                 // InterfaceMethod of:(Ljava/util/function/Supplier;)Lorg/springframework/data/util/Streamable;
      16: areturn

  public default org.springframework.data.util.Streamable<T> filter(java.util.function.Predicate<? super T>);
    Code:
       0: aload_1
       1: ldc           #14                 // String Filter predicate must not be null!
       3: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokedynamic #15,  0             // InvokeDynamic #5:get:(Lorg/springframework/data/util/Streamable;Ljava/util/function/Predicate;)Ljava/util/function/Supplier;
      13: invokestatic  #12                 // InterfaceMethod of:(Ljava/util/function/Supplier;)Lorg/springframework/data/util/Streamable;
      16: areturn

  public default boolean isEmpty();
    Code:
       0: aload_0
       1: invokeinterface #16,  1           // InterfaceMethod iterator:()Ljava/util/Iterator;
       6: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      11: ifne          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public default org.springframework.data.util.Streamable<T> and(java.util.function.Supplier<? extends java.util.stream.Stream<? extends T>>);
    Code:
       0: aload_1
       1: ldc           #18                 // String Stream must not be null!
       3: invokestatic  #4                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokedynamic #19,  0             // InvokeDynamic #6:get:(Lorg/springframework/data/util/Streamable;Ljava/util/function/Supplier;)Ljava/util/function/Supplier;
      13: invokestatic  #12                 // InterfaceMethod of:(Ljava/util/function/Supplier;)Lorg/springframework/data/util/Streamable;
      16: areturn

  public default java.util.stream.Stream<T> get();
    Code:
       0: aload_0
       1: invokeinterface #20,  1           // InterfaceMethod stream:()Ljava/util/stream/Stream;
       6: areturn

  public default java.lang.Object get();
    Code:
       0: aload_0
       1: invokeinterface #21,  1           // InterfaceMethod get:()Ljava/util/stream/Stream;
       6: areturn

  private java.util.stream.Stream lambda$and$4(java.util.function.Supplier);
    Code:
       0: aload_0
       1: invokeinterface #20,  1           // InterfaceMethod stream:()Ljava/util/stream/Stream;
       6: aload_1
       7: invokeinterface #22,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      12: checkcast     #23                 // class java/util/stream/Stream
      15: invokestatic  #24                 // InterfaceMethod java/util/stream/Stream.concat:(Ljava/util/stream/Stream;Ljava/util/stream/Stream;)Ljava/util/stream/Stream;
      18: areturn

  private java.util.stream.Stream lambda$filter$3(java.util.function.Predicate);
    Code:
       0: aload_0
       1: invokeinterface #20,  1           // InterfaceMethod stream:()Ljava/util/stream/Stream;
       6: aload_1
       7: invokeinterface #25,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      12: areturn

  private java.util.stream.Stream lambda$flatMap$2(java.util.function.Function);
    Code:
       0: aload_0
       1: invokeinterface #20,  1           // InterfaceMethod stream:()Ljava/util/stream/Stream;
       6: aload_1
       7: invokeinterface #26,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      12: areturn

  private java.util.stream.Stream lambda$map$1(java.util.function.Function);
    Code:
       0: aload_0
       1: invokeinterface #20,  1           // InterfaceMethod stream:()Ljava/util/stream/Stream;
       6: aload_1
       7: invokeinterface #27,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      12: areturn

  private static java.util.Iterator lambda$of$0(java.lang.Object[]);
    Code:
       0: aload_0
       1: invokestatic  #28                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       4: invokeinterface #29,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: areturn
}
