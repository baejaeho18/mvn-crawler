Compiled from "DefaultConverterBuilder.java"
class org.springframework.data.convert.DefaultConverterBuilder<S, T> implements org.springframework.data.convert.ConverterBuilder$ConverterAware, org.springframework.data.convert.ConverterBuilder$ReadingConverterBuilder<T, S>, org.springframework.data.convert.ConverterBuilder$WritingConverterBuilder<S, T> {
  private final org.springframework.core.convert.converter.GenericConverter$ConvertiblePair convertiblePair;

  private final java.util.Optional<java.util.function.Function<? super S, ? extends T>> writing;

  private final java.util.Optional<java.util.function.Function<? super T, ? extends S>> reading;

  public org.springframework.data.convert.ConverterBuilder$ConverterAware andReading(java.util.function.Function<? super T, ? extends S>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1                  // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
       5: invokevirtual #2                  // Method withReading:(Ljava/util/Optional;)Lorg/springframework/data/convert/DefaultConverterBuilder;
       8: areturn

  public org.springframework.data.convert.ConverterBuilder$ConverterAware andWriting(java.util.function.Function<? super S, ? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1                  // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
       5: invokevirtual #3                  // Method withWriting:(Ljava/util/Optional;)Lorg/springframework/data/convert/DefaultConverterBuilder;
       8: areturn

  public org.springframework.core.convert.converter.GenericConverter getReadingConverter();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method getOptionalReadingConverter:()Ljava/util/Optional;
       4: invokedynamic #5,  0              // InvokeDynamic #0:get:()Ljava/util/function/Supplier;
       9: invokevirtual #6                  // Method java/util/Optional.orElseThrow:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      12: checkcast     #7                  // class org/springframework/core/convert/converter/GenericConverter
      15: areturn

  public org.springframework.core.convert.converter.GenericConverter getWritingConverter();
    Code:
       0: aload_0
       1: invokespecial #8                  // Method getOptionalWritingConverter:()Ljava/util/Optional;
       4: invokedynamic #9,  0              // InvokeDynamic #1:get:()Ljava/util/function/Supplier;
       9: invokevirtual #6                  // Method java/util/Optional.orElseThrow:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      12: checkcast     #7                  // class org/springframework/core/convert/converter/GenericConverter
      15: areturn

  public java.util.Set<org.springframework.core.convert.converter.GenericConverter> getConverters();
    Code:
       0: iconst_2
       1: anewarray     #10                 // class java/util/Optional
       4: dup
       5: iconst_0
       6: aload_0
       7: invokespecial #4                  // Method getOptionalReadingConverter:()Ljava/util/Optional;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: invokespecial #8                  // Method getOptionalWritingConverter:()Ljava/util/Optional;
      17: aastore
      18: invokestatic  #11                 // InterfaceMethod org/springframework/data/util/Optionals.toStream:([Ljava/util/Optional;)Ljava/util/stream/Stream;
      21: invokestatic  #12                 // Method java/util/stream/Collectors.toSet:()Ljava/util/stream/Collector;
      24: invokeinterface #13,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      29: checkcast     #14                 // class java/util/Set
      32: areturn

  private java.util.Optional<org.springframework.core.convert.converter.GenericConverter> getOptionalReadingConverter();
    Code:
       0: aload_0
       1: getfield      #15                 // Field reading:Ljava/util/Optional;
       4: aload_0
       5: invokedynamic #16,  0             // InvokeDynamic #2:apply:(Lorg/springframework/data/convert/DefaultConverterBuilder;)Ljava/util/function/Function;
      10: invokevirtual #17                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      13: areturn

  private java.util.Optional<org.springframework.core.convert.converter.GenericConverter> getOptionalWritingConverter();
    Code:
       0: aload_0
       1: getfield      #18                 // Field writing:Ljava/util/Optional;
       4: aload_0
       5: invokedynamic #19,  0             // InvokeDynamic #3:apply:(Lorg/springframework/data/convert/DefaultConverterBuilder;)Ljava/util/function/Function;
      10: invokevirtual #17                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      13: areturn

  private org.springframework.core.convert.converter.GenericConverter$ConvertiblePair invertedPair();
    Code:
       0: new           #20                 // class org/springframework/core/convert/converter/GenericConverter$ConvertiblePair
       3: dup
       4: aload_0
       5: getfield      #21                 // Field convertiblePair:Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;
       8: invokevirtual #22                 // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair.getTargetType:()Ljava/lang/Class;
      11: aload_0
      12: getfield      #21                 // Field convertiblePair:Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;
      15: invokevirtual #23                 // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair.getSourceType:()Ljava/lang/Class;
      18: invokespecial #24                 // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair."<init>":(Ljava/lang/Class;Ljava/lang/Class;)V
      21: areturn

  org.springframework.data.convert.DefaultConverterBuilder<S, T> withConvertiblePair(org.springframework.core.convert.converter.GenericConverter$ConvertiblePair);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #25                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #26                 // String convertiblePair is marked non-null but is null
      10: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #21                 // Field convertiblePair:Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;
      18: aload_1
      19: if_acmpne     26
      22: aload_0
      23: goto          42
      26: new           #28                 // class org/springframework/data/convert/DefaultConverterBuilder
      29: dup
      30: aload_1
      31: aload_0
      32: getfield      #18                 // Field writing:Ljava/util/Optional;
      35: aload_0
      36: getfield      #15                 // Field reading:Ljava/util/Optional;
      39: invokespecial #29                 // Method "<init>":(Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;Ljava/util/Optional;Ljava/util/Optional;)V
      42: areturn

  org.springframework.data.convert.DefaultConverterBuilder<S, T> withWriting(java.util.Optional<java.util.function.Function<? super S, ? extends T>>);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #25                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #30                 // String writing is marked non-null but is null
      10: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #18                 // Field writing:Ljava/util/Optional;
      18: aload_1
      19: if_acmpne     26
      22: aload_0
      23: goto          42
      26: new           #28                 // class org/springframework/data/convert/DefaultConverterBuilder
      29: dup
      30: aload_0
      31: getfield      #21                 // Field convertiblePair:Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;
      34: aload_1
      35: aload_0
      36: getfield      #15                 // Field reading:Ljava/util/Optional;
      39: invokespecial #29                 // Method "<init>":(Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;Ljava/util/Optional;Ljava/util/Optional;)V
      42: areturn

  org.springframework.data.convert.DefaultConverterBuilder<S, T> withReading(java.util.Optional<java.util.function.Function<? super T, ? extends S>>);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #25                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #31                 // String reading is marked non-null but is null
      10: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #15                 // Field reading:Ljava/util/Optional;
      18: aload_1
      19: if_acmpne     26
      22: aload_0
      23: goto          42
      26: new           #28                 // class org/springframework/data/convert/DefaultConverterBuilder
      29: dup
      30: aload_0
      31: getfield      #21                 // Field convertiblePair:Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;
      34: aload_0
      35: getfield      #18                 // Field writing:Ljava/util/Optional;
      38: aload_1
      39: invokespecial #29                 // Method "<init>":(Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;Ljava/util/Optional;Ljava/util/Optional;)V
      42: areturn

  org.springframework.data.convert.DefaultConverterBuilder(org.springframework.core.convert.converter.GenericConverter$ConvertiblePair, java.util.Optional<java.util.function.Function<? super S, ? extends T>>, java.util.Optional<java.util.function.Function<? super T, ? extends S>>);
    Code:
       0: aload_0
       1: invokespecial #32                 // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #25                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #26                 // String convertiblePair is marked non-null but is null
      14: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_2
      19: ifnonnull     32
      22: new           #25                 // class java/lang/IllegalArgumentException
      25: dup
      26: ldc           #30                 // String writing is marked non-null but is null
      28: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_3
      33: ifnonnull     46
      36: new           #25                 // class java/lang/IllegalArgumentException
      39: dup
      40: ldc           #31                 // String reading is marked non-null but is null
      42: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: aload_0
      47: aload_1
      48: putfield      #21                 // Field convertiblePair:Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;
      51: aload_0
      52: aload_2
      53: putfield      #18                 // Field writing:Ljava/util/Optional;
      56: aload_0
      57: aload_3
      58: putfield      #15                 // Field reading:Ljava/util/Optional;
      61: return

  private org.springframework.core.convert.converter.GenericConverter lambda$getOptionalWritingConverter$3(java.util.function.Function);
    Code:
       0: new           #33                 // class org/springframework/data/convert/DefaultConverterBuilder$ConfigurableGenericConverter$Writing
       3: dup
       4: aload_0
       5: invokespecial #34                 // Method invertedPair:()Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;
       8: aload_1
       9: invokespecial #35                 // Method org/springframework/data/convert/DefaultConverterBuilder$ConfigurableGenericConverter$Writing."<init>":(Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;Ljava/util/function/Function;)V
      12: areturn

  private org.springframework.core.convert.converter.GenericConverter lambda$getOptionalReadingConverter$2(java.util.function.Function);
    Code:
       0: new           #36                 // class org/springframework/data/convert/DefaultConverterBuilder$ConfigurableGenericConverter$Reading
       3: dup
       4: aload_0
       5: getfield      #21                 // Field convertiblePair:Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;
       8: aload_1
       9: invokespecial #37                 // Method org/springframework/data/convert/DefaultConverterBuilder$ConfigurableGenericConverter$Reading."<init>":(Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;Ljava/util/function/Function;)V
      12: areturn

  private static java.lang.IllegalStateException lambda$getWritingConverter$1();
    Code:
       0: new           #38                 // class java/lang/IllegalStateException
       3: dup
       4: ldc           #39                 // String No writing converter specified!
       6: invokespecial #40                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: areturn

  private static java.lang.IllegalStateException lambda$getReadingConverter$0();
    Code:
       0: new           #38                 // class java/lang/IllegalStateException
       3: dup
       4: ldc           #41                 // String No reading converter specified!
       6: invokespecial #40                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       9: areturn
}
