Compiled from "PersistentProperty.java"
public interface org.springframework.data.mapping.PersistentProperty<P extends org.springframework.data.mapping.PersistentProperty<P>> {
  public abstract org.springframework.data.mapping.PersistentEntity<?, P> getOwner();

  public abstract java.lang.String getName();

  public abstract java.lang.Class<?> getType();

  public abstract org.springframework.data.util.TypeInformation<?> getTypeInformation();

  public abstract java.lang.Iterable<? extends org.springframework.data.util.TypeInformation<?>> getPersistentEntityTypes();

  public abstract java.lang.reflect.Method getGetter();

  public default java.lang.reflect.Method getRequiredGetter();
    Code:
       0: aload_0
       1: invokeinterface #1,  1            // InterfaceMethod getGetter:()Ljava/lang/reflect/Method;
       6: astore_1
       7: aload_1
       8: ifnonnull     32
      11: new           #2                  // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #3                  // String No getter available for persistent property %s!
      17: iconst_1
      18: anewarray     #4                  // class java/lang/Object
      21: dup
      22: iconst_0
      23: aload_0
      24: aastore
      25: invokestatic  #5                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      28: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_1
      33: areturn

  public abstract java.lang.reflect.Method getSetter();

  public default java.lang.reflect.Method getRequiredSetter();
    Code:
       0: aload_0
       1: invokeinterface #7,  1            // InterfaceMethod getSetter:()Ljava/lang/reflect/Method;
       6: astore_1
       7: aload_1
       8: ifnonnull     32
      11: new           #2                  // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #8                  // String No setter available for persistent property %s!
      17: iconst_1
      18: anewarray     #4                  // class java/lang/Object
      21: dup
      22: iconst_0
      23: aload_0
      24: aastore
      25: invokestatic  #5                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      28: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_1
      33: areturn

  public abstract java.lang.reflect.Method getWither();

  public default java.lang.reflect.Method getRequiredWither();
    Code:
       0: aload_0
       1: invokeinterface #9,  1            // InterfaceMethod getWither:()Ljava/lang/reflect/Method;
       6: astore_1
       7: aload_1
       8: ifnonnull     32
      11: new           #2                  // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #10                 // String No wither available for persistent property %s!
      17: iconst_1
      18: anewarray     #4                  // class java/lang/Object
      21: dup
      22: iconst_0
      23: aload_0
      24: aastore
      25: invokestatic  #5                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      28: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_1
      33: areturn

  public abstract java.lang.reflect.Field getField();

  public default java.lang.reflect.Field getRequiredField();
    Code:
       0: aload_0
       1: invokeinterface #11,  1           // InterfaceMethod getField:()Ljava/lang/reflect/Field;
       6: astore_1
       7: aload_1
       8: ifnonnull     32
      11: new           #2                  // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #12                 // String No field backing persistent property %s!
      17: iconst_1
      18: anewarray     #4                  // class java/lang/Object
      21: dup
      22: iconst_0
      23: aload_0
      24: aastore
      25: invokestatic  #5                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      28: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_1
      33: areturn

  public abstract java.lang.String getSpelExpression();

  public abstract org.springframework.data.mapping.Association<P> getAssociation();

  public default org.springframework.data.mapping.Association<P> getRequiredAssociation();
    Code:
       0: aload_0
       1: invokeinterface #13,  1           // InterfaceMethod getAssociation:()Lorg/springframework/data/mapping/Association;
       6: astore_1
       7: aload_1
       8: ifnull        13
      11: aload_1
      12: areturn
      13: new           #14                 // class java/lang/IllegalStateException
      16: dup
      17: ldc           #15                 // String No association found!
      19: invokespecial #16                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      22: athrow

  public abstract boolean isEntity();

  public abstract boolean isIdProperty();

  public abstract boolean isVersionProperty();

  public abstract boolean isCollectionLike();

  public abstract boolean isMap();

  public abstract boolean isArray();

  public abstract boolean isTransient();

  public abstract boolean isWritable();

  public abstract boolean isImmutable();

  public abstract boolean isAssociation();

  public abstract java.lang.Class<?> getComponentType();

  public abstract java.lang.Class<?> getRawType();

  public abstract java.lang.Class<?> getMapValueType();

  public abstract java.lang.Class<?> getActualType();

  public abstract <A extends java.lang.annotation.Annotation> A findAnnotation(java.lang.Class<A>);

  public default <A extends java.lang.annotation.Annotation> A getRequiredAnnotation(java.lang.Class<A>) throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #17,  2           // InterfaceMethod findAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;
       7: astore_2
       8: aload_2
       9: ifnull        14
      12: aload_2
      13: areturn
      14: new           #14                 // class java/lang/IllegalStateException
      17: dup
      18: ldc           #18                 // String Required annotation %s not found for %s!
      20: iconst_2
      21: anewarray     #4                  // class java/lang/Object
      24: dup
      25: iconst_0
      26: aload_1
      27: aastore
      28: dup
      29: iconst_1
      30: aload_0
      31: invokeinterface #19,  1           // InterfaceMethod getName:()Ljava/lang/String;
      36: aastore
      37: invokestatic  #5                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      40: invokespecial #16                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      43: athrow

  public abstract <A extends java.lang.annotation.Annotation> A findPropertyOrOwnerAnnotation(java.lang.Class<A>);

  public abstract boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>);

  public abstract boolean usePropertyAccess();

  public default boolean hasActualTypeAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>);
    Code:
       0: aload_1
       1: ldc           #20                 // String Annotation type must not be null!
       3: invokestatic  #21                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokeinterface #22,  1           // InterfaceMethod getActualType:()Ljava/lang/Class;
      12: aload_1
      13: invokestatic  #23                 // Method org/springframework/core/annotation/AnnotatedElementUtils.hasAnnotation:(Ljava/lang/reflect/AnnotatedElement;Ljava/lang/Class;)Z
      16: ireturn

  public abstract java.lang.Class<?> getAssociationTargetType();
}
