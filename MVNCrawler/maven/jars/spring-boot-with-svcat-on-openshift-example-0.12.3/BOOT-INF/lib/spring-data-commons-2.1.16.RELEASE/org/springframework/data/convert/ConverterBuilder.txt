Compiled from "ConverterBuilder.java"
public interface org.springframework.data.convert.ConverterBuilder {
  public static <S, T> org.springframework.data.convert.ConverterBuilder$ReadingConverterBuilder<S, T> reading(java.lang.Class<S>, java.lang.Class<T>, java.util.function.Function<? super S, ? extends T>);
    Code:
       0: aload_0
       1: ldc           #1                  // String Source type must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #3                  // String Target type must not be null!
       9: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_2
      13: ldc           #4                  // String Conversion function must not be null!
      15: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      18: new           #5                  // class org/springframework/data/convert/DefaultConverterBuilder
      21: dup
      22: new           #6                  // class org/springframework/core/convert/converter/GenericConverter$ConvertiblePair
      25: dup
      26: aload_0
      27: aload_1
      28: invokespecial #7                  // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair."<init>":(Ljava/lang/Class;Ljava/lang/Class;)V
      31: invokestatic  #8                  // Method java/util/Optional.empty:()Ljava/util/Optional;
      34: aload_2
      35: invokestatic  #9                  // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      38: invokespecial #10                 // Method org/springframework/data/convert/DefaultConverterBuilder."<init>":(Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;Ljava/util/Optional;Ljava/util/Optional;)V
      41: areturn

  public static <S, T> org.springframework.data.convert.ConverterBuilder$WritingConverterBuilder<S, T> writing(java.lang.Class<S>, java.lang.Class<T>, java.util.function.Function<? super S, ? extends T>);
    Code:
       0: aload_0
       1: ldc           #1                  // String Source type must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #3                  // String Target type must not be null!
       9: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_2
      13: ldc           #4                  // String Conversion function must not be null!
      15: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      18: new           #5                  // class org/springframework/data/convert/DefaultConverterBuilder
      21: dup
      22: new           #6                  // class org/springframework/core/convert/converter/GenericConverter$ConvertiblePair
      25: dup
      26: aload_1
      27: aload_0
      28: invokespecial #7                  // Method org/springframework/core/convert/converter/GenericConverter$ConvertiblePair."<init>":(Ljava/lang/Class;Ljava/lang/Class;)V
      31: aload_2
      32: invokestatic  #9                  // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      35: invokestatic  #8                  // Method java/util/Optional.empty:()Ljava/util/Optional;
      38: invokespecial #10                 // Method org/springframework/data/convert/DefaultConverterBuilder."<init>":(Lorg/springframework/core/convert/converter/GenericConverter$ConvertiblePair;Ljava/util/Optional;Ljava/util/Optional;)V
      41: areturn

  public abstract java.util.Set<org.springframework.core.convert.converter.GenericConverter> getConverters();
}
