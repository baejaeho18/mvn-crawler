Compiled from "DefaultTypeMapper.java"
public class org.springframework.data.convert.DefaultTypeMapper<S> implements org.springframework.data.convert.TypeMapper<S> {
  private final org.springframework.data.convert.TypeAliasAccessor<S> accessor;

  private final java.util.List<? extends org.springframework.data.convert.TypeInformationMapper> mappers;

  private final java.util.Map<org.springframework.data.mapping.Alias, java.util.Optional<org.springframework.data.util.TypeInformation<?>>> typeCache;

  private final java.util.function.Function<org.springframework.data.mapping.Alias, java.util.Optional<org.springframework.data.util.TypeInformation<?>>> getAlias;

  public org.springframework.data.convert.DefaultTypeMapper(org.springframework.data.convert.TypeAliasAccessor<S>);
    Code:
       0: aload_0
       1: aload_1
       2: new           #1                  // class org/springframework/data/convert/SimpleTypeInformationMapper
       5: dup
       6: invokespecial #2                  // Method org/springframework/data/convert/SimpleTypeInformationMapper."<init>":()V
       9: invokestatic  #3                  // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      12: invokespecial #4                  // Method "<init>":(Lorg/springframework/data/convert/TypeAliasAccessor;Ljava/util/List;)V
      15: return

  public org.springframework.data.convert.DefaultTypeMapper(org.springframework.data.convert.TypeAliasAccessor<S>, java.util.List<? extends org.springframework.data.convert.TypeInformationMapper>);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aload_2
       4: invokespecial #5                  // Method "<init>":(Lorg/springframework/data/convert/TypeAliasAccessor;Lorg/springframework/data/mapping/context/MappingContext;Ljava/util/List;)V
       7: return

  public org.springframework.data.convert.DefaultTypeMapper(org.springframework.data.convert.TypeAliasAccessor<S>, org.springframework.data.mapping.context.MappingContext<? extends org.springframework.data.mapping.PersistentEntity<?, ?>, ?>, java.util.List<? extends org.springframework.data.convert.TypeInformationMapper>);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #7                  // String Accessor must not be null!
       7: invokestatic  #8                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_3
      11: ldc           #9                  // String AdditionalMappers must not be null!
      13: invokestatic  #8                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      16: new           #10                 // class java/util/ArrayList
      19: dup
      20: aload_3
      21: invokeinterface #11,  1           // InterfaceMethod java/util/List.size:()I
      26: iconst_1
      27: iadd
      28: invokespecial #12                 // Method java/util/ArrayList."<init>":(I)V
      31: astore        4
      33: aload_2
      34: ifnull        53
      37: aload         4
      39: new           #13                 // class org/springframework/data/convert/MappingContextTypeInformationMapper
      42: dup
      43: aload_2
      44: invokespecial #14                 // Method org/springframework/data/convert/MappingContextTypeInformationMapper."<init>":(Lorg/springframework/data/mapping/context/MappingContext;)V
      47: invokeinterface #15,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      52: pop
      53: aload         4
      55: aload_3
      56: invokeinterface #16,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      61: pop
      62: aload_0
      63: aload         4
      65: invokestatic  #17                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      68: putfield      #18                 // Field mappers:Ljava/util/List;
      71: aload_0
      72: aload_1
      73: putfield      #19                 // Field accessor:Lorg/springframework/data/convert/TypeAliasAccessor;
      76: aload_0
      77: new           #20                 // class java/util/concurrent/ConcurrentHashMap
      80: dup
      81: invokespecial #21                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      84: putfield      #22                 // Field typeCache:Ljava/util/Map;
      87: aload_0
      88: aload         4
      90: invokedynamic #23,  0             // InvokeDynamic #0:apply:(Ljava/util/List;)Ljava/util/function/Function;
      95: putfield      #24                 // Field getAlias:Ljava/util/function/Function;
      98: return

  public org.springframework.data.util.TypeInformation<?> readType(S);
    Code:
       0: aload_1
       1: ldc           #25                 // String Source object must not be null!
       3: invokestatic  #8                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_0
       8: getfield      #19                 // Field accessor:Lorg/springframework/data/convert/TypeAliasAccessor;
      11: aload_1
      12: invokeinterface #26,  2           // InterfaceMethod org/springframework/data/convert/TypeAliasAccessor.readAliasFrom:(Ljava/lang/Object;)Lorg/springframework/data/mapping/Alias;
      17: invokespecial #27                 // Method getFromCacheOrCreate:(Lorg/springframework/data/mapping/Alias;)Lorg/springframework/data/util/TypeInformation;
      20: areturn

  private org.springframework.data.util.TypeInformation<?> getFromCacheOrCreate(org.springframework.data.mapping.Alias);
    Code:
       0: aload_0
       1: getfield      #22                 // Field typeCache:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #28,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #29                 // class java/util/Optional
      13: astore_2
      14: aload_2
      15: ifnonnull     36
      18: aload_0
      19: getfield      #22                 // Field typeCache:Ljava/util/Map;
      22: aload_1
      23: aload_0
      24: getfield      #24                 // Field getAlias:Ljava/util/function/Function;
      27: invokeinterface #30,  3           // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      32: checkcast     #29                 // class java/util/Optional
      35: astore_2
      36: aload_2
      37: aconst_null
      38: invokevirtual #31                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      41: checkcast     #32                 // class org/springframework/data/util/TypeInformation
      44: areturn

  public <T> org.springframework.data.util.TypeInformation<? extends T> readType(S, org.springframework.data.util.TypeInformation<T>);
    Code:
       0: aload_1
       1: ldc           #33                 // String Source must not be null!
       3: invokestatic  #8                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_2
       7: ldc           #34                 // String Basic type must not be null!
       9: invokestatic  #8                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: aload_1
      14: invokespecial #35                 // Method getDefaultedTypeToBeUsed:(Ljava/lang/Object;)Ljava/lang/Class;
      17: astore_3
      18: aload_3
      19: ifnonnull     24
      22: aload_2
      23: areturn
      24: aload_2
      25: invokeinterface #36,  1           // InterfaceMethod org/springframework/data/util/TypeInformation.getType:()Ljava/lang/Class;
      30: astore        4
      32: aload         4
      34: ifnull        55
      37: aload         4
      39: aload_3
      40: invokevirtual #37                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      43: ifeq          59
      46: aload         4
      48: aload_3
      49: invokevirtual #38                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      52: ifne          59
      55: iconst_1
      56: goto          60
      59: iconst_0
      60: istore        5
      62: iload         5
      64: ifne          69
      67: aload_2
      68: areturn
      69: aload_3
      70: invokestatic  #39                 // Method org/springframework/data/util/ClassTypeInformation.from:(Ljava/lang/Class;)Lorg/springframework/data/util/ClassTypeInformation;
      73: astore        6
      75: aload_2
      76: aload         6
      78: invokeinterface #40,  2           // InterfaceMethod org/springframework/data/util/TypeInformation.specialize:(Lorg/springframework/data/util/ClassTypeInformation;)Lorg/springframework/data/util/TypeInformation;
      83: areturn

  private java.lang.Class<?> getDefaultedTypeToBeUsed(S);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #41                 // Method readType:(Ljava/lang/Object;)Lorg/springframework/data/util/TypeInformation;
       5: astore_2
       6: aload_2
       7: ifnonnull     18
      10: aload_0
      11: aload_1
      12: invokevirtual #42                 // Method getFallbackTypeFor:(Ljava/lang/Object;)Lorg/springframework/data/util/TypeInformation;
      15: goto          19
      18: aload_2
      19: astore_2
      20: aload_2
      21: ifnonnull     28
      24: aconst_null
      25: goto          34
      28: aload_2
      29: invokeinterface #36,  1           // InterfaceMethod org/springframework/data/util/TypeInformation.getType:()Ljava/lang/Class;
      34: areturn

  protected org.springframework.data.util.TypeInformation<?> getFallbackTypeFor(S);
    Code:
       0: aconst_null
       1: areturn

  public void writeType(java.lang.Class<?>, S);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #39                 // Method org/springframework/data/util/ClassTypeInformation.from:(Ljava/lang/Class;)Lorg/springframework/data/util/ClassTypeInformation;
       5: aload_2
       6: invokevirtual #43                 // Method writeType:(Lorg/springframework/data/util/TypeInformation;Ljava/lang/Object;)V
       9: return

  public void writeType(org.springframework.data.util.TypeInformation<?>, S);
    Code:
       0: aload_1
       1: ldc           #44                 // String TypeInformation must not be null!
       3: invokestatic  #8                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokevirtual #45                 // Method getAliasFor:(Lorg/springframework/data/util/TypeInformation;)Lorg/springframework/data/mapping/Alias;
      11: astore_3
      12: aload_3
      13: invokevirtual #46                 // Method org/springframework/data/mapping/Alias.isPresent:()Z
      16: ifeq          33
      19: aload_0
      20: getfield      #19                 // Field accessor:Lorg/springframework/data/convert/TypeAliasAccessor;
      23: aload_2
      24: aload_3
      25: invokevirtual #47                 // Method org/springframework/data/mapping/Alias.getValue:()Ljava/lang/Object;
      28: invokeinterface #48,  3           // InterfaceMethod org/springframework/data/convert/TypeAliasAccessor.writeTypeTo:(Ljava/lang/Object;Ljava/lang/Object;)V
      33: return

  protected final org.springframework.data.mapping.Alias getAliasFor(org.springframework.data.util.TypeInformation<?>);
    Code:
       0: aload_1
       1: ldc           #44                 // String TypeInformation must not be null!
       3: invokestatic  #8                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #18                 // Field mappers:Ljava/util/List;
      10: invokeinterface #49,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #50,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          58
      25: aload_2
      26: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #52                 // class org/springframework/data/convert/TypeInformationMapper
      34: astore_3
      35: aload_3
      36: aload_1
      37: invokeinterface #53,  2           // InterfaceMethod org/springframework/data/convert/TypeInformationMapper.createAliasFor:(Lorg/springframework/data/util/TypeInformation;)Lorg/springframework/data/mapping/Alias;
      42: astore        4
      44: aload         4
      46: invokevirtual #46                 // Method org/springframework/data/mapping/Alias.isPresent:()Z
      49: ifeq          55
      52: aload         4
      54: areturn
      55: goto          16
      58: getstatic     #54                 // Field org/springframework/data/mapping/Alias.NONE:Lorg/springframework/data/mapping/Alias;
      61: areturn

  private static java.util.Optional lambda$new$0(java.util.List, org.springframework.data.mapping.Alias);
    Code:
       0: aload_0
       1: invokeinterface #49,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #50,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          49
      16: aload_2
      17: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #52                 // class org/springframework/data/convert/TypeInformationMapper
      25: astore_3
      26: aload_3
      27: aload_1
      28: invokeinterface #55,  2           // InterfaceMethod org/springframework/data/convert/TypeInformationMapper.resolveTypeFrom:(Lorg/springframework/data/mapping/Alias;)Lorg/springframework/data/util/TypeInformation;
      33: astore        4
      35: aload         4
      37: ifnull        46
      40: aload         4
      42: invokestatic  #56                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      45: areturn
      46: goto          7
      49: invokestatic  #57                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      52: areturn
}
