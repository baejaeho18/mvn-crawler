Compiled from "Optionals.java"
public interface org.springframework.data.util.Optionals {
  public static boolean isAnyPresent(java.util.Optional<?>...);
    Code:
       0: aload_0
       1: ldc           #1                  // String Optionals must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokestatic  #3                  // Method java/util/Arrays.stream:([Ljava/lang/Object;)Ljava/util/stream/Stream;
      10: invokedynamic #4,  0              // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      15: invokeinterface #5,  2            // InterfaceMethod java/util/stream/Stream.anyMatch:(Ljava/util/function/Predicate;)Z
      20: ireturn

  public static <T> java.util.stream.Stream<T> toStream(java.util.Optional<? extends T>...);
    Code:
       0: aload_0
       1: ldc           #6                  // String Optional must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokestatic  #7                  // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      10: invokeinterface #8,  1            // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      15: invokedynamic #9,  0              // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      20: invokeinterface #10,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      25: areturn

  public static <S, T> java.util.Optional<T> firstNonEmpty(java.lang.Iterable<S>, java.util.function.Function<S, java.util.Optional<T>>);
    Code:
       0: aload_0
       1: ldc           #11                 // String Source must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #12                 // String Function must not be null!
       9: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: invokestatic  #13                 // InterfaceMethod org/springframework/data/util/Streamable.of:(Ljava/lang/Iterable;)Lorg/springframework/data/util/Streamable;
      16: invokeinterface #14,  1           // InterfaceMethod org/springframework/data/util/Streamable.stream:()Ljava/util/stream/Stream;
      21: aload_1
      22: dup
      23: invokevirtual #15                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      26: pop
      27: invokedynamic #16,  0             // InvokeDynamic #2:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
      32: invokeinterface #17,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      37: invokedynamic #4,  0              // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      42: invokeinterface #18,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      47: invokeinterface #19,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      52: invokedynamic #20,  0             // InvokeDynamic #3:get:()Ljava/util/function/Supplier;
      57: invokevirtual #21                 // Method java/util/Optional.orElseGet:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      60: checkcast     #22                 // class java/util/Optional
      63: areturn

  public static <S, T> T firstNonEmpty(java.lang.Iterable<S>, java.util.function.Function<S, T>, T);
    Code:
       0: aload_0
       1: ldc           #11                 // String Source must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #12                 // String Function must not be null!
       9: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: invokestatic  #13                 // InterfaceMethod org/springframework/data/util/Streamable.of:(Ljava/lang/Iterable;)Lorg/springframework/data/util/Streamable;
      16: invokeinterface #14,  1           // InterfaceMethod org/springframework/data/util/Streamable.stream:()Ljava/util/stream/Stream;
      21: aload_1
      22: dup
      23: invokevirtual #15                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      26: pop
      27: invokedynamic #23,  0             // InvokeDynamic #4:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
      32: invokeinterface #17,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      37: aload_2
      38: invokedynamic #24,  0             // InvokeDynamic #5:test:(Ljava/lang/Object;)Ljava/util/function/Predicate;
      43: invokeinterface #18,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      48: invokeinterface #19,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      53: aload_2
      54: invokevirtual #25                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      57: areturn

  public static <T> java.util.Optional<T> firstNonEmpty(java.util.function.Supplier<java.util.Optional<T>>...);
    Code:
       0: aload_0
       1: ldc           #26                 // String Suppliers must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokestatic  #27                 // InterfaceMethod org/springframework/data/util/Streamable.of:([Ljava/lang/Object;)Lorg/springframework/data/util/Streamable;
      10: invokestatic  #28                 // InterfaceMethod firstNonEmpty:(Ljava/lang/Iterable;)Ljava/util/Optional;
      13: areturn

  public static <T> java.util.Optional<T> firstNonEmpty(java.lang.Iterable<java.util.function.Supplier<java.util.Optional<T>>>);
    Code:
       0: aload_0
       1: ldc           #26                 // String Suppliers must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokestatic  #13                 // InterfaceMethod org/springframework/data/util/Streamable.of:(Ljava/lang/Iterable;)Lorg/springframework/data/util/Streamable;
      10: invokeinterface #14,  1           // InterfaceMethod org/springframework/data/util/Streamable.stream:()Ljava/util/stream/Stream;
      15: invokedynamic #29,  0             // InvokeDynamic #6:apply:()Ljava/util/function/Function;
      20: invokeinterface #17,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      25: invokedynamic #4,  0              // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      30: invokeinterface #18,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      35: invokeinterface #19,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      40: invokestatic  #30                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      43: invokevirtual #25                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      46: checkcast     #22                 // class java/util/Optional
      49: areturn

  public static <T> java.util.Optional<T> next(java.util.Iterator<T>);
    Code:
       0: aload_0
       1: ldc           #31                 // String Iterator must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      12: ifeq          27
      15: aload_0
      16: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      21: invokestatic  #34                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      24: goto          30
      27: invokestatic  #30                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      30: areturn

  public static <T, S> java.util.Optional<org.springframework.data.util.Pair<T, S>> withBoth(java.util.Optional<T>, java.util.Optional<S>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #35,  0             // InvokeDynamic #7:apply:(Ljava/util/Optional;)Ljava/util/function/Function;
       7: invokevirtual #36                 // Method java/util/Optional.flatMap:(Ljava/util/function/Function;)Ljava/util/Optional;
      10: areturn

  public static <T, S> void ifAllPresent(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiConsumer<T, S>);
    Code:
       0: aload_0
       1: ldc           #6                  // String Optional must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #6                  // String Optional must not be null!
       9: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_2
      13: ldc           #37                 // String Consumer must not be null!
      15: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      18: aload_0
      19: aload_1
      20: aload_2
      21: invokedynamic #38,  0             // InvokeDynamic #8:apply:(Ljava/util/function/BiConsumer;)Ljava/util/function/BiFunction;
      26: invokestatic  #39                 // InterfaceMethod mapIfAllPresent:(Ljava/util/Optional;Ljava/util/Optional;Ljava/util/function/BiFunction;)Ljava/util/Optional;
      29: pop
      30: return

  public static <T, S, R> java.util.Optional<R> mapIfAllPresent(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>);
    Code:
       0: aload_0
       1: ldc           #6                  // String Optional must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #6                  // String Optional must not be null!
       9: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_2
      13: ldc           #40                 // String BiFunctionmust not be null!
      15: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      18: aload_0
      19: aload_1
      20: aload_2
      21: invokedynamic #41,  0             // InvokeDynamic #9:apply:(Ljava/util/Optional;Ljava/util/function/BiFunction;)Ljava/util/function/Function;
      26: invokevirtual #36                 // Method java/util/Optional.flatMap:(Ljava/util/function/Function;)Ljava/util/Optional;
      29: areturn

  public static <T> void ifPresentOrElse(java.util.Optional<T>, java.util.function.Consumer<? super T>, java.lang.Runnable);
    Code:
       0: aload_0
       1: ldc           #6                  // String Optional must not be null!
       3: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: ldc           #37                 // String Consumer must not be null!
       9: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_2
      13: ldc           #42                 // String Runnable must not be null!
      15: invokestatic  #2                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      18: aload_0
      19: invokevirtual #43                 // Method java/util/Optional.isPresent:()Z
      22: ifeq          33
      25: aload_0
      26: aload_1
      27: invokevirtual #44                 // Method java/util/Optional.ifPresent:(Ljava/util/function/Consumer;)V
      30: goto          39
      33: aload_2
      34: invokeinterface #45,  1           // InterfaceMethod java/lang/Runnable.run:()V
      39: return

  private static java.util.Optional lambda$mapIfAllPresent$6(java.util.Optional, java.util.function.BiFunction, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #46,  0             // InvokeDynamic #10:apply:(Ljava/util/function/BiFunction;Ljava/lang/Object;)Ljava/util/function/Function;
       8: invokevirtual #47                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      11: areturn

  private static java.lang.Object lambda$null$5(java.util.function.BiFunction, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #48,  3           // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  private static java.lang.Object lambda$ifAllPresent$4(java.util.function.BiConsumer, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokeinterface #49,  3           // InterfaceMethod java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
       8: aconst_null
       9: areturn

  private static java.util.Optional lambda$withBoth$3(java.util.Optional, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #50,  0             // InvokeDynamic #11:apply:(Ljava/lang/Object;)Ljava/util/function/Function;
       7: invokevirtual #47                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      10: areturn

  private static org.springframework.data.util.Pair lambda$null$2(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #51                 // Method org/springframework/data/util/Pair.of:(Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/data/util/Pair;
       5: areturn

  private static boolean lambda$firstNonEmpty$1(java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #52                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  private static java.util.stream.Stream lambda$toStream$0(java.util.Optional);
    Code:
       0: aload_0
       1: invokedynamic #53,  0             // InvokeDynamic #12:apply:()Ljava/util/function/Function;
       6: invokevirtual #47                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
       9: invokedynamic #54,  0             // InvokeDynamic #13:get:()Ljava/util/function/Supplier;
      14: invokevirtual #21                 // Method java/util/Optional.orElseGet:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      17: checkcast     #55                 // class java/util/stream/Stream
      20: areturn
}
