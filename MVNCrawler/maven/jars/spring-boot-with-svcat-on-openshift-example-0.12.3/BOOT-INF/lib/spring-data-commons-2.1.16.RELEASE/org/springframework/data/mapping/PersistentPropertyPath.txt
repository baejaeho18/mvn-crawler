Compiled from "PersistentPropertyPath.java"
public interface org.springframework.data.mapping.PersistentPropertyPath<P extends org.springframework.data.mapping.PersistentProperty<P>> extends org.springframework.data.util.Streamable<P> {
  public abstract java.lang.String toDotPath();

  public abstract java.lang.String toDotPath(org.springframework.core.convert.converter.Converter<? super P, java.lang.String>);

  public abstract java.lang.String toPath(java.lang.String);

  public abstract java.lang.String toPath(java.lang.String, org.springframework.core.convert.converter.Converter<? super P, java.lang.String>);

  public abstract P getLeafProperty();

  public default P getRequiredLeafProperty();
    Code:
       0: aload_0
       1: invokeinterface #1,  1            // InterfaceMethod getLeafProperty:()Lorg/springframework/data/mapping/PersistentProperty;
       6: astore_1
       7: aload_1
       8: ifnonnull     21
      11: new           #2                  // class java/lang/IllegalStateException
      14: dup
      15: ldc           #3                  // String No leaf property found!
      17: invokespecial #4                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_1
      22: areturn

  public abstract P getBaseProperty();

  public abstract boolean isBasePathOf(org.springframework.data.mapping.PersistentPropertyPath<P>);

  public abstract org.springframework.data.mapping.PersistentPropertyPath<P> getExtensionForBaseOf(org.springframework.data.mapping.PersistentPropertyPath<P>);

  public abstract org.springframework.data.mapping.PersistentPropertyPath<P> getParentPath();

  public abstract int getLength();
}
