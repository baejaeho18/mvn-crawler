Compiled from "LimitedInputStream.java"
public abstract class org.apache.tomcat.util.http.fileupload.util.LimitedInputStream extends java.io.FilterInputStream implements org.apache.tomcat.util.http.fileupload.util.Closeable {
  private final long sizeMax;

  private long count;

  private boolean closed;

  public org.apache.tomcat.util.http.fileupload.util.LimitedInputStream(java.io.InputStream, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method java/io/FilterInputStream."<init>":(Ljava/io/InputStream;)V
       5: aload_0
       6: lload_2
       7: putfield      #2                  // Field sizeMax:J
      10: return

  protected abstract void raiseError(long, long) throws java.io.IOException;

  private void checkLimit() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field count:J
       4: aload_0
       5: getfield      #2                  // Field sizeMax:J
       8: lcmp
       9: ifle          24
      12: aload_0
      13: aload_0
      14: getfield      #2                  // Field sizeMax:J
      17: aload_0
      18: getfield      #3                  // Field count:J
      21: invokevirtual #4                  // Method raiseError:(JJ)V
      24: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/io/FilterInputStream.read:()I
       4: istore_1
       5: iload_1
       6: iconst_m1
       7: if_icmpeq     24
      10: aload_0
      11: dup
      12: getfield      #3                  // Field count:J
      15: lconst_1
      16: ladd
      17: putfield      #3                  // Field count:J
      20: aload_0
      21: invokespecial #6                  // Method checkLimit:()V
      24: iload_1
      25: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokespecial #7                  // Method java/io/FilterInputStream.read:([BII)I
       7: istore        4
       9: iload         4
      11: ifle          30
      14: aload_0
      15: dup
      16: getfield      #3                  // Field count:J
      19: iload         4
      21: i2l
      22: ladd
      23: putfield      #3                  // Field count:J
      26: aload_0
      27: invokespecial #6                  // Method checkLimit:()V
      30: iload         4
      32: ireturn

  public boolean isClosed() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field closed:Z
       4: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #8                  // Field closed:Z
       5: aload_0
       6: invokespecial #9                  // Method java/io/FilterInputStream.close:()V
       9: return
}
