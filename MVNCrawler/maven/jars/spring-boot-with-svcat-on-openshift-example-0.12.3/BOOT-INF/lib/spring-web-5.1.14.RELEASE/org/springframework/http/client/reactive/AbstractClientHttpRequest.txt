Compiled from "AbstractClientHttpRequest.java"
public abstract class org.springframework.http.client.reactive.AbstractClientHttpRequest implements org.springframework.http.client.reactive.ClientHttpRequest {
  private final org.springframework.http.HttpHeaders headers;

  private final org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> cookies;

  private final java.util.concurrent.atomic.AtomicReference<org.springframework.http.client.reactive.AbstractClientHttpRequest$State> state;

  private final java.util.List<java.util.function.Supplier<? extends org.reactivestreams.Publisher<java.lang.Void>>> commitActions;

  public org.springframework.http.client.reactive.AbstractClientHttpRequest();
    Code:
       0: aload_0
       1: new           #1                  // class org/springframework/http/HttpHeaders
       4: dup
       5: invokespecial #2                  // Method org/springframework/http/HttpHeaders."<init>":()V
       8: invokespecial #3                  // Method "<init>":(Lorg/springframework/http/HttpHeaders;)V
      11: return

  public org.springframework.http.client.reactive.AbstractClientHttpRequest(org.springframework.http.HttpHeaders);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #5                  // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: getstatic     #6                  // Field org/springframework/http/client/reactive/AbstractClientHttpRequest$State.NEW:Lorg/springframework/http/client/reactive/AbstractClientHttpRequest$State;
      12: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      15: putfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      18: aload_0
      19: new           #9                  // class java/util/ArrayList
      22: dup
      23: iconst_4
      24: invokespecial #10                 // Method java/util/ArrayList."<init>":(I)V
      27: putfield      #11                 // Field commitActions:Ljava/util/List;
      30: aload_1
      31: ldc           #12                 // String HttpHeaders must not be null
      33: invokestatic  #13                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      36: aload_0
      37: aload_1
      38: putfield      #14                 // Field headers:Lorg/springframework/http/HttpHeaders;
      41: aload_0
      42: new           #15                 // class org/springframework/util/LinkedMultiValueMap
      45: dup
      46: invokespecial #16                 // Method org/springframework/util/LinkedMultiValueMap."<init>":()V
      49: putfield      #17                 // Field cookies:Lorg/springframework/util/MultiValueMap;
      52: return

  public org.springframework.http.HttpHeaders getHeaders();
    Code:
       0: getstatic     #18                 // Field org/springframework/http/client/reactive/AbstractClientHttpRequest$State.COMMITTED:Lorg/springframework/http/client/reactive/AbstractClientHttpRequest$State;
       3: aload_0
       4: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       7: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      10: invokevirtual #20                 // Method org/springframework/http/client/reactive/AbstractClientHttpRequest$State.equals:(Ljava/lang/Object;)Z
      13: ifeq          24
      16: aload_0
      17: getfield      #14                 // Field headers:Lorg/springframework/http/HttpHeaders;
      20: invokestatic  #21                 // Method org/springframework/http/HttpHeaders.readOnlyHttpHeaders:(Lorg/springframework/http/HttpHeaders;)Lorg/springframework/http/HttpHeaders;
      23: areturn
      24: aload_0
      25: getfield      #14                 // Field headers:Lorg/springframework/http/HttpHeaders;
      28: areturn

  public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> getCookies();
    Code:
       0: getstatic     #18                 // Field org/springframework/http/client/reactive/AbstractClientHttpRequest$State.COMMITTED:Lorg/springframework/http/client/reactive/AbstractClientHttpRequest$State;
       3: aload_0
       4: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       7: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      10: invokevirtual #20                 // Method org/springframework/http/client/reactive/AbstractClientHttpRequest$State.equals:(Ljava/lang/Object;)Z
      13: ifeq          24
      16: aload_0
      17: getfield      #17                 // Field cookies:Lorg/springframework/util/MultiValueMap;
      20: invokestatic  #22                 // Method org/springframework/util/CollectionUtils.unmodifiableMultiValueMap:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/util/MultiValueMap;
      23: areturn
      24: aload_0
      25: getfield      #17                 // Field cookies:Lorg/springframework/util/MultiValueMap;
      28: areturn

  public void beforeCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>);
    Code:
       0: aload_1
       1: ldc           #23                 // String Action must not be null
       3: invokestatic  #13                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #11                 // Field commitActions:Ljava/util/List;
      10: aload_1
      11: invokeinterface #24,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      16: pop
      17: return

  public boolean isCommitted();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: getstatic     #6                  // Field org/springframework/http/client/reactive/AbstractClientHttpRequest$State.NEW:Lorg/springframework/http/client/reactive/AbstractClientHttpRequest$State;
      10: if_acmpeq     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  protected reactor.core.publisher.Mono<java.lang.Void> doCommit();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #25                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
       5: areturn

  protected reactor.core.publisher.Mono<java.lang.Void> doCommit(java.util.function.Supplier<? extends org.reactivestreams.Publisher<java.lang.Void>>);
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: getstatic     #6                  // Field org/springframework/http/client/reactive/AbstractClientHttpRequest$State.NEW:Lorg/springframework/http/client/reactive/AbstractClientHttpRequest$State;
       7: getstatic     #26                 // Field org/springframework/http/client/reactive/AbstractClientHttpRequest$State.COMMITTING:Lorg/springframework/http/client/reactive/AbstractClientHttpRequest$State;
      10: invokevirtual #27                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      13: ifne          20
      16: invokestatic  #28                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      19: areturn
      20: aload_0
      21: getfield      #11                 // Field commitActions:Ljava/util/List;
      24: aload_0
      25: invokedynamic #29,  0             // InvokeDynamic #0:get:(Lorg/springframework/http/client/reactive/AbstractClientHttpRequest;)Ljava/util/function/Supplier;
      30: invokeinterface #24,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      35: pop
      36: aload_1
      37: ifnull        51
      40: aload_0
      41: getfield      #11                 // Field commitActions:Ljava/util/List;
      44: aload_1
      45: invokeinterface #24,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      50: pop
      51: aload_0
      52: getfield      #11                 // Field commitActions:Ljava/util/List;
      55: invokeinterface #30,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      60: invokedynamic #31,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      65: invokeinterface #32,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      70: invokestatic  #33                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      73: invokeinterface #34,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      78: checkcast     #35                 // class java/util/List
      81: astore_2
      82: aload_2
      83: invokestatic  #36                 // Method reactor/core/publisher/Flux.concat:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      86: invokevirtual #37                 // Method reactor/core/publisher/Flux.then:()Lreactor/core/publisher/Mono;
      89: areturn

  protected abstract void applyHeaders();

  protected abstract void applyCookies();

  private org.reactivestreams.Publisher lambda$doCommit$1();
    Code:
       0: aload_0
       1: invokedynamic #38,  0             // InvokeDynamic #2:run:(Lorg/springframework/http/client/reactive/AbstractClientHttpRequest;)Ljava/lang/Runnable;
       6: invokestatic  #39                 // Method reactor/core/publisher/Mono.fromRunnable:(Ljava/lang/Runnable;)Lreactor/core/publisher/Mono;
       9: areturn

  private void lambda$null$0();
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method applyHeaders:()V
       4: aload_0
       5: invokevirtual #41                 // Method applyCookies:()V
       8: aload_0
       9: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      12: getstatic     #18                 // Field org/springframework/http/client/reactive/AbstractClientHttpRequest$State.COMMITTED:Lorg/springframework/http/client/reactive/AbstractClientHttpRequest$State;
      15: invokevirtual #42                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      18: return
}
