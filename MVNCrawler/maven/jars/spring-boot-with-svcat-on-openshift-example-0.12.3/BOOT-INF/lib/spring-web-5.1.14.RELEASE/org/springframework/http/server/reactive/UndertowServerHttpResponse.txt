Compiled from "UndertowServerHttpResponse.java"
class org.springframework.http.server.reactive.UndertowServerHttpResponse extends org.springframework.http.server.reactive.AbstractListenerServerHttpResponse implements org.springframework.http.ZeroCopyHttpOutputMessage {
  private final io.undertow.server.HttpServerExchange exchange;

  private final org.springframework.http.server.reactive.UndertowServerHttpRequest request;

  private org.xnio.channels.StreamSinkChannel responseChannel;

  org.springframework.http.server.reactive.UndertowServerHttpResponse(io.undertow.server.HttpServerExchange, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.http.server.reactive.UndertowServerHttpRequest);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokestatic  #4                  // Method createHeaders:(Lio/undertow/server/HttpServerExchange;)Lorg/springframework/http/HttpHeaders;
       6: invokespecial #5                  // Method org/springframework/http/server/reactive/AbstractListenerServerHttpResponse."<init>":(Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/http/HttpHeaders;)V
       9: aload_1
      10: ldc           #6                  // String HttpServerExchange must not be null
      12: invokestatic  #7                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      15: aload_0
      16: aload_1
      17: putfield      #8                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      20: aload_0
      21: aload_3
      22: putfield      #3                  // Field request:Lorg/springframework/http/server/reactive/UndertowServerHttpRequest;
      25: return

  private static org.springframework.http.HttpHeaders createHeaders(io.undertow.server.HttpServerExchange);
    Code:
       0: new           #9                  // class org/springframework/http/server/reactive/UndertowHeadersAdapter
       3: dup
       4: aload_0
       5: invokevirtual #10                 // Method io/undertow/server/HttpServerExchange.getResponseHeaders:()Lio/undertow/util/HeaderMap;
       8: invokespecial #11                 // Method org/springframework/http/server/reactive/UndertowHeadersAdapter."<init>":(Lio/undertow/util/HeaderMap;)V
      11: astore_1
      12: new           #12                 // class org/springframework/http/HttpHeaders
      15: dup
      16: aload_1
      17: invokespecial #13                 // Method org/springframework/http/HttpHeaders."<init>":(Lorg/springframework/util/MultiValueMap;)V
      20: areturn

  public <T> T getNativeResponse();
    Code:
       0: aload_0
       1: getfield      #8                  // Field exchange:Lio/undertow/server/HttpServerExchange;
       4: areturn

  public org.springframework.http.HttpStatus getStatusCode();
    Code:
       0: aload_0
       1: invokespecial #14                 // Method org/springframework/http/server/reactive/AbstractListenerServerHttpResponse.getStatusCode:()Lorg/springframework/http/HttpStatus;
       4: astore_1
       5: aload_1
       6: ifnull        13
       9: aload_1
      10: goto          23
      13: aload_0
      14: getfield      #8                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      17: invokevirtual #15                 // Method io/undertow/server/HttpServerExchange.getStatusCode:()I
      20: invokestatic  #16                 // Method org/springframework/http/HttpStatus.resolve:(I)Lorg/springframework/http/HttpStatus;
      23: areturn

  protected void applyStatusCode();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method getStatusCodeValue:()Ljava/lang/Integer;
       4: astore_1
       5: aload_1
       6: ifnull        21
       9: aload_0
      10: getfield      #8                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      13: aload_1
      14: invokevirtual #18                 // Method java/lang/Integer.intValue:()I
      17: invokevirtual #19                 // Method io/undertow/server/HttpServerExchange.setStatusCode:(I)Lio/undertow/server/HttpServerExchange;
      20: pop
      21: return

  protected void applyHeaders();
    Code:
       0: return

  protected void applyCookies();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getCookies:()Lorg/springframework/util/MultiValueMap;
       4: invokeinterface #21,  1           // InterfaceMethod org/springframework/util/MultiValueMap.keySet:()Ljava/util/Set;
       9: invokeinterface #22,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          222
      24: aload_1
      25: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #25                 // class java/lang/String
      33: astore_2
      34: aload_0
      35: invokevirtual #20                 // Method getCookies:()Lorg/springframework/util/MultiValueMap;
      38: aload_2
      39: invokeinterface #26,  2           // InterfaceMethod org/springframework/util/MultiValueMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      44: checkcast     #27                 // class java/util/List
      47: invokeinterface #28,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      52: astore_3
      53: aload_3
      54: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      59: ifeq          219
      62: aload_3
      63: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      68: checkcast     #29                 // class org/springframework/http/ResponseCookie
      71: astore        4
      73: new           #30                 // class io/undertow/server/handlers/CookieImpl
      76: dup
      77: aload_2
      78: aload         4
      80: invokevirtual #31                 // Method org/springframework/http/ResponseCookie.getValue:()Ljava/lang/String;
      83: invokespecial #32                 // Method io/undertow/server/handlers/CookieImpl."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      86: astore        5
      88: aload         4
      90: invokevirtual #33                 // Method org/springframework/http/ResponseCookie.getMaxAge:()Ljava/time/Duration;
      93: invokevirtual #34                 // Method java/time/Duration.isNegative:()Z
      96: ifne          119
      99: aload         5
     101: aload         4
     103: invokevirtual #33                 // Method org/springframework/http/ResponseCookie.getMaxAge:()Ljava/time/Duration;
     106: invokevirtual #35                 // Method java/time/Duration.getSeconds:()J
     109: l2i
     110: invokestatic  #36                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     113: invokeinterface #37,  2           // InterfaceMethod io/undertow/server/handlers/Cookie.setMaxAge:(Ljava/lang/Integer;)Lio/undertow/server/handlers/Cookie;
     118: pop
     119: aload         4
     121: invokevirtual #38                 // Method org/springframework/http/ResponseCookie.getDomain:()Ljava/lang/String;
     124: ifnull        140
     127: aload         5
     129: aload         4
     131: invokevirtual #38                 // Method org/springframework/http/ResponseCookie.getDomain:()Ljava/lang/String;
     134: invokeinterface #39,  2           // InterfaceMethod io/undertow/server/handlers/Cookie.setDomain:(Ljava/lang/String;)Lio/undertow/server/handlers/Cookie;
     139: pop
     140: aload         4
     142: invokevirtual #40                 // Method org/springframework/http/ResponseCookie.getPath:()Ljava/lang/String;
     145: ifnull        161
     148: aload         5
     150: aload         4
     152: invokevirtual #40                 // Method org/springframework/http/ResponseCookie.getPath:()Ljava/lang/String;
     155: invokeinterface #41,  2           // InterfaceMethod io/undertow/server/handlers/Cookie.setPath:(Ljava/lang/String;)Lio/undertow/server/handlers/Cookie;
     160: pop
     161: aload         5
     163: aload         4
     165: invokevirtual #42                 // Method org/springframework/http/ResponseCookie.isSecure:()Z
     168: invokeinterface #43,  2           // InterfaceMethod io/undertow/server/handlers/Cookie.setSecure:(Z)Lio/undertow/server/handlers/Cookie;
     173: pop
     174: aload         5
     176: aload         4
     178: invokevirtual #44                 // Method org/springframework/http/ResponseCookie.isHttpOnly:()Z
     181: invokeinterface #45,  2           // InterfaceMethod io/undertow/server/handlers/Cookie.setHttpOnly:(Z)Lio/undertow/server/handlers/Cookie;
     186: pop
     187: aload         5
     189: aload         4
     191: invokevirtual #46                 // Method org/springframework/http/ResponseCookie.getSameSite:()Ljava/lang/String;
     194: invokeinterface #47,  2           // InterfaceMethod io/undertow/server/handlers/Cookie.setSameSiteMode:(Ljava/lang/String;)Lio/undertow/server/handlers/Cookie;
     199: pop
     200: aload_0
     201: getfield      #8                  // Field exchange:Lio/undertow/server/HttpServerExchange;
     204: invokevirtual #48                 // Method io/undertow/server/HttpServerExchange.getResponseCookies:()Ljava/util/Map;
     207: aload_2
     208: aload         5
     210: invokeinterface #49,  3           // InterfaceMethod java/util/Map.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     215: pop
     216: goto          53
     219: goto          15
     222: return

  public reactor.core.publisher.Mono<java.lang.Void> writeWith(java.nio.file.Path, long, long);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: lload_2
       4: lload         4
       6: invokedynamic #50,  0             // InvokeDynamic #0:get:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;Ljava/nio/file/Path;JJ)Ljava/util/function/Supplier;
      11: invokevirtual #51                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      14: areturn

  protected org.reactivestreams.Processor<? super org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, java.lang.Void> createBodyFlushProcessor();
    Code:
       0: new           #52                 // class org/springframework/http/server/reactive/UndertowServerHttpResponse$ResponseBodyFlushProcessor
       3: dup
       4: aload_0
       5: invokespecial #53                 // Method org/springframework/http/server/reactive/UndertowServerHttpResponse$ResponseBodyFlushProcessor."<init>":(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;)V
       8: areturn

  private org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor createBodyProcessor();
    Code:
       0: aload_0
       1: getfield      #1                  // Field responseChannel:Lorg/xnio/channels/StreamSinkChannel;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: getfield      #8                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      12: invokevirtual #54                 // Method io/undertow/server/HttpServerExchange.getResponseChannel:()Lorg/xnio/channels/StreamSinkChannel;
      15: putfield      #1                  // Field responseChannel:Lorg/xnio/channels/StreamSinkChannel;
      18: new           #55                 // class org/springframework/http/server/reactive/UndertowServerHttpResponse$ResponseBodyProcessor
      21: dup
      22: aload_0
      23: aload_0
      24: getfield      #1                  // Field responseChannel:Lorg/xnio/channels/StreamSinkChannel;
      27: invokespecial #56                 // Method org/springframework/http/server/reactive/UndertowServerHttpResponse$ResponseBodyProcessor."<init>":(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;Lorg/xnio/channels/StreamSinkChannel;)V
      30: areturn

  private reactor.core.publisher.Mono lambda$writeWith$1(java.nio.file.Path, long, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: lload         4
       5: invokedynamic #57,  0             // InvokeDynamic #1:accept:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;Ljava/nio/file/Path;JJ)Ljava/util/function/Consumer;
      10: invokestatic  #58                 // Method reactor/core/publisher/Mono.create:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      13: areturn

  private void lambda$null$0(java.nio.file.Path, long, long, reactor.core.publisher.MonoSink);
    Code:
       0: aload_1
       1: iconst_1
       2: anewarray     #59                 // class java/nio/file/OpenOption
       5: dup
       6: iconst_0
       7: getstatic     #60                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;
      10: aastore
      11: invokestatic  #61                 // Method java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;
      14: astore        7
      16: new           #62                 // class org/springframework/http/server/reactive/UndertowServerHttpResponse$TransferBodyListener
      19: dup
      20: aload         7
      22: lload_2
      23: lload         4
      25: aload         6
      27: invokespecial #63                 // Method org/springframework/http/server/reactive/UndertowServerHttpResponse$TransferBodyListener."<init>":(Ljava/nio/channels/FileChannel;JJLreactor/core/publisher/MonoSink;)V
      30: astore        8
      32: aload         6
      34: aload         8
      36: dup
      37: invokevirtual #64                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      40: pop
      41: invokedynamic #65,  0             // InvokeDynamic #2:dispose:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse$TransferBodyListener;)Lreactor/core/Disposable;
      46: invokeinterface #66,  2           // InterfaceMethod reactor/core/publisher/MonoSink.onDispose:(Lreactor/core/Disposable;)Lreactor/core/publisher/MonoSink;
      51: pop
      52: aload_0
      53: getfield      #8                  // Field exchange:Lio/undertow/server/HttpServerExchange;
      56: invokevirtual #54                 // Method io/undertow/server/HttpServerExchange.getResponseChannel:()Lorg/xnio/channels/StreamSinkChannel;
      59: astore        9
      61: aload         9
      63: invokeinterface #67,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
      68: aload         8
      70: dup
      71: invokevirtual #64                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      74: pop
      75: invokedynamic #68,  0             // InvokeDynamic #3:handleEvent:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse$TransferBodyListener;)Lorg/xnio/ChannelListener;
      80: invokeinterface #69,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      85: aload         8
      87: aload         9
      89: invokevirtual #70                 // Method org/springframework/http/server/reactive/UndertowServerHttpResponse$TransferBodyListener.transfer:(Lorg/xnio/channels/StreamSinkChannel;)V
      92: goto          106
      95: astore        7
      97: aload         6
      99: aload         7
     101: invokeinterface #72,  2           // InterfaceMethod reactor/core/publisher/MonoSink.error:(Ljava/lang/Throwable;)V
     106: return
    Exception table:
       from    to  target type
           0    92    95   Class java/io/IOException

  static org.springframework.http.server.reactive.UndertowServerHttpRequest access$000(org.springframework.http.server.reactive.UndertowServerHttpResponse);
    Code:
       0: aload_0
       1: getfield      #3                  // Field request:Lorg/springframework/http/server/reactive/UndertowServerHttpRequest;
       4: areturn

  static org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor access$100(org.springframework.http.server.reactive.UndertowServerHttpResponse);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method createBodyProcessor:()Lorg/springframework/http/server/reactive/UndertowServerHttpResponse$ResponseBodyProcessor;
       4: areturn

  static org.xnio.channels.StreamSinkChannel access$200(org.springframework.http.server.reactive.UndertowServerHttpResponse);
    Code:
       0: aload_0
       1: getfield      #1                  // Field responseChannel:Lorg/xnio/channels/StreamSinkChannel;
       4: areturn
}
