Compiled from "JettyClientHttpResponse.java"
class org.springframework.http.client.reactive.JettyClientHttpResponse implements org.springframework.http.client.reactive.ClientHttpResponse {
  private final org.eclipse.jetty.reactive.client.ReactiveResponse reactiveResponse;

  private final reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> content;

  public org.springframework.http.client.reactive.JettyClientHttpResponse(org.eclipse.jetty.reactive.client.ReactiveResponse, org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field reactiveResponse:Lorg/eclipse/jetty/reactive/client/ReactiveResponse;
       9: aload_0
      10: aload_2
      11: invokestatic  #3                  // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      14: putfield      #4                  // Field content:Lreactor/core/publisher/Flux;
      17: return

  public org.springframework.http.HttpStatus getStatusCode();
    Code:
       0: aload_0
       1: invokevirtual #5                  // Method getRawStatusCode:()I
       4: invokestatic  #6                  // Method org/springframework/http/HttpStatus.valueOf:(I)Lorg/springframework/http/HttpStatus;
       7: areturn

  public int getRawStatusCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field reactiveResponse:Lorg/eclipse/jetty/reactive/client/ReactiveResponse;
       4: invokevirtual #7                  // Method org/eclipse/jetty/reactive/client/ReactiveResponse.getStatus:()I
       7: ireturn

  public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> getCookies();
    Code:
       0: new           #8                  // class org/springframework/util/LinkedMultiValueMap
       3: dup
       4: invokespecial #9                  // Method org/springframework/util/LinkedMultiValueMap."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #10                 // Method getHeaders:()Lorg/springframework/http/HttpHeaders;
      12: ldc           #12                 // String Set-Cookie
      14: invokevirtual #13                 // Method org/springframework/http/HttpHeaders.get:(Ljava/lang/Object;)Ljava/util/List;
      17: astore_2
      18: aload_2
      19: ifnull        34
      22: aload_2
      23: aload_1
      24: invokedynamic #14,  0             // InvokeDynamic #0:accept:(Lorg/springframework/util/MultiValueMap;)Ljava/util/function/Consumer;
      29: invokeinterface #15,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      34: aload_1
      35: invokestatic  #16                 // Method org/springframework/util/CollectionUtils.unmodifiableMultiValueMap:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/util/MultiValueMap;
      38: areturn

  public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody();
    Code:
       0: aload_0
       1: getfield      #4                  // Field content:Lreactor/core/publisher/Flux;
       4: areturn

  public org.springframework.http.HttpHeaders getHeaders();
    Code:
       0: new           #11                 // class org/springframework/http/HttpHeaders
       3: dup
       4: invokespecial #17                 // Method org/springframework/http/HttpHeaders."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #2                  // Field reactiveResponse:Lorg/eclipse/jetty/reactive/client/ReactiveResponse;
      12: invokevirtual #18                 // Method org/eclipse/jetty/reactive/client/ReactiveResponse.getHeaders:()Lorg/eclipse/jetty/http/HttpFields;
      15: invokevirtual #19                 // Method org/eclipse/jetty/http/HttpFields.stream:()Ljava/util/stream/Stream;
      18: aload_1
      19: invokedynamic #20,  0             // InvokeDynamic #1:accept:(Lorg/springframework/http/HttpHeaders;)Ljava/util/function/Consumer;
      24: invokeinterface #21,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      29: aload_1
      30: areturn

  private static void lambda$getHeaders$2(org.springframework.http.HttpHeaders, org.eclipse.jetty.http.HttpField);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #22                 // Method org/eclipse/jetty/http/HttpField.getName:()Ljava/lang/String;
       5: aload_1
       6: invokevirtual #23                 // Method org/eclipse/jetty/http/HttpField.getValue:()Ljava/lang/String;
       9: invokevirtual #24                 // Method org/springframework/http/HttpHeaders.add:(Ljava/lang/String;Ljava/lang/String;)V
      12: return

  private static void lambda$getCookies$1(org.springframework.util.MultiValueMap, java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #25                 // Method java/net/HttpCookie.parse:(Ljava/lang/String;)Ljava/util/List;
       4: aload_0
       5: invokedynamic #26,  0             // InvokeDynamic #2:accept:(Lorg/springframework/util/MultiValueMap;)Ljava/util/function/Consumer;
      10: invokeinterface #15,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      15: return

  private static void lambda$null$0(org.springframework.util.MultiValueMap, java.net.HttpCookie);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #27                 // Method java/net/HttpCookie.getName:()Ljava/lang/String;
       5: aload_1
       6: invokevirtual #27                 // Method java/net/HttpCookie.getName:()Ljava/lang/String;
       9: aload_1
      10: invokevirtual #28                 // Method java/net/HttpCookie.getValue:()Ljava/lang/String;
      13: invokestatic  #29                 // Method org/springframework/http/ResponseCookie.from:(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/http/ResponseCookie$ResponseCookieBuilder;
      16: aload_1
      17: invokevirtual #30                 // Method java/net/HttpCookie.getDomain:()Ljava/lang/String;
      20: invokeinterface #31,  2           // InterfaceMethod org/springframework/http/ResponseCookie$ResponseCookieBuilder.domain:(Ljava/lang/String;)Lorg/springframework/http/ResponseCookie$ResponseCookieBuilder;
      25: aload_1
      26: invokevirtual #32                 // Method java/net/HttpCookie.getPath:()Ljava/lang/String;
      29: invokeinterface #33,  2           // InterfaceMethod org/springframework/http/ResponseCookie$ResponseCookieBuilder.path:(Ljava/lang/String;)Lorg/springframework/http/ResponseCookie$ResponseCookieBuilder;
      34: aload_1
      35: invokevirtual #34                 // Method java/net/HttpCookie.getMaxAge:()J
      38: invokeinterface #35,  3           // InterfaceMethod org/springframework/http/ResponseCookie$ResponseCookieBuilder.maxAge:(J)Lorg/springframework/http/ResponseCookie$ResponseCookieBuilder;
      43: aload_1
      44: invokevirtual #36                 // Method java/net/HttpCookie.getSecure:()Z
      47: invokeinterface #37,  2           // InterfaceMethod org/springframework/http/ResponseCookie$ResponseCookieBuilder.secure:(Z)Lorg/springframework/http/ResponseCookie$ResponseCookieBuilder;
      52: aload_1
      53: invokevirtual #38                 // Method java/net/HttpCookie.isHttpOnly:()Z
      56: invokeinterface #39,  2           // InterfaceMethod org/springframework/http/ResponseCookie$ResponseCookieBuilder.httpOnly:(Z)Lorg/springframework/http/ResponseCookie$ResponseCookieBuilder;
      61: invokeinterface #40,  1           // InterfaceMethod org/springframework/http/ResponseCookie$ResponseCookieBuilder.build:()Lorg/springframework/http/ResponseCookie;
      66: invokeinterface #41,  3           // InterfaceMethod org/springframework/util/MultiValueMap.add:(Ljava/lang/Object;Ljava/lang/Object;)V
      71: return
}
