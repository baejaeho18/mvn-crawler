Compiled from "MultipartHttpMessageReader.java"
public class org.springframework.http.codec.multipart.MultipartHttpMessageReader extends org.springframework.http.codec.LoggingCodecSupport implements org.springframework.http.codec.HttpMessageReader<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> {
  private static final org.springframework.core.ResolvableType MULTIPART_VALUE_TYPE;

  private final org.springframework.http.codec.HttpMessageReader<org.springframework.http.codec.multipart.Part> partReader;

  public org.springframework.http.codec.multipart.MultipartHttpMessageReader(org.springframework.http.codec.HttpMessageReader<org.springframework.http.codec.multipart.Part>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/http/codec/LoggingCodecSupport."<init>":()V
       4: aload_1
       5: ldc           #2                  // String \'partReader\' is required
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: putfield      #4                  // Field partReader:Lorg/springframework/http/codec/HttpMessageReader;
      15: return

  public org.springframework.http.codec.HttpMessageReader<org.springframework.http.codec.multipart.Part> getPartReader();
    Code:
       0: aload_0
       1: getfield      #4                  // Field partReader:Lorg/springframework/http/codec/HttpMessageReader;
       4: areturn

  public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes();
    Code:
       0: getstatic     #5                  // Field org/springframework/http/MediaType.MULTIPART_FORM_DATA:Lorg/springframework/http/MediaType;
       3: invokestatic  #6                  // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
       6: areturn

  public boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: getstatic     #7                  // Field MULTIPART_VALUE_TYPE:Lorg/springframework/core/ResolvableType;
       3: aload_1
       4: invokevirtual #8                  // Method org/springframework/core/ResolvableType.isAssignableFrom:(Lorg/springframework/core/ResolvableType;)Z
       7: ifeq          28
      10: aload_2
      11: ifnull        24
      14: getstatic     #5                  // Field org/springframework/http/MediaType.MULTIPART_FORM_DATA:Lorg/springframework/http/MediaType;
      17: aload_2
      18: invokevirtual #9                  // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  public reactor.core.publisher.Flux<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #10                 // Method readMono:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/ReactiveHttpInputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
       7: invokestatic  #11                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      10: areturn

  public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_3
       1: getstatic     #12                 // Field org/springframework/core/codec/Hints.SUPPRESS_LOGGING_HINT:Ljava/lang/String;
       4: iconst_1
       5: invokestatic  #13                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       8: invokestatic  #14                 // Method org/springframework/core/codec/Hints.merge:(Ljava/util/Map;Ljava/lang/String;Ljava/lang/Object;)Ljava/util/Map;
      11: astore        4
      13: aload_0
      14: getfield      #4                  // Field partReader:Lorg/springframework/http/codec/HttpMessageReader;
      17: aload_1
      18: aload_2
      19: aload         4
      21: invokeinterface #15,  4           // InterfaceMethod org/springframework/http/codec/HttpMessageReader.read:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/ReactiveHttpInputMessage;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      26: invokedynamic #16,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      31: invokevirtual #17                 // Method reactor/core/publisher/Flux.collectMultimap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      34: aload_0
      35: aload_3
      36: invokedynamic #18,  0             // InvokeDynamic #1:accept:(Lorg/springframework/http/codec/multipart/MultipartHttpMessageReader;Ljava/util/Map;)Ljava/util/function/Consumer;
      41: invokevirtual #19                 // Method reactor/core/publisher/Mono.doOnNext:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      44: aload_0
      45: invokedynamic #20,  0             // InvokeDynamic #2:apply:(Lorg/springframework/http/codec/multipart/MultipartHttpMessageReader;)Ljava/util/function/Function;
      50: invokevirtual #21                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      53: areturn

  private org.springframework.util.LinkedMultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part> toMultiValueMap(java.util.Map<java.lang.String, java.util.Collection<org.springframework.http.codec.multipart.Part>>);
    Code:
       0: new           #22                 // class org/springframework/util/LinkedMultiValueMap
       3: dup
       4: aload_1
       5: invokeinterface #23,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      10: invokeinterface #24,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      15: invokedynamic #25,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      20: aload_0
      21: invokedynamic #26,  0             // InvokeDynamic #4:apply:(Lorg/springframework/http/codec/multipart/MultipartHttpMessageReader;)Ljava/util/function/Function;
      26: invokestatic  #27                 // Method java/util/stream/Collectors.toMap:(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/stream/Collector;
      29: invokeinterface #28,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      34: checkcast     #29                 // class java/util/Map
      37: invokespecial #30                 // Method org/springframework/util/LinkedMultiValueMap."<init>":(Ljava/util/Map;)V
      40: areturn

  private java.util.List<org.springframework.http.codec.multipart.Part> toList(java.util.Collection<org.springframework.http.codec.multipart.Part>);
    Code:
       0: aload_1
       1: instanceof    #31                 // class java/util/List
       4: ifeq          14
       7: aload_1
       8: checkcast     #31                 // class java/util/List
      11: goto          22
      14: new           #32                 // class java/util/ArrayList
      17: dup
      18: aload_1
      19: invokespecial #33                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      22: areturn

  private java.util.List lambda$toMultiValueMap$2(java.util.Map$Entry);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #34,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
       7: checkcast     #35                 // class java/util/Collection
      10: invokespecial #36                 // Method toList:(Ljava/util/Collection;)Ljava/util/List;
      13: areturn

  private void lambda$readMono$1(java.util.Map, java.util.Map);
    Code:
       0: aload_0
       1: getfield      #37                 // Field logger:Lorg/apache/commons/logging/Log;
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokedynamic #38,  0             // InvokeDynamic #5:apply:(Lorg/springframework/http/codec/multipart/MultipartHttpMessageReader;Ljava/util/Map;Ljava/util/Map;)Ljava/util/function/Function;
      12: invokestatic  #39                 // Method org/springframework/core/log/LogFormatUtils.traceDebug:(Lorg/apache/commons/logging/Log;Ljava/util/function/Function;)V
      15: return

  private java.lang.String lambda$null$0(java.util.Map, java.util.Map, java.lang.Boolean);
    Code:
       0: new           #40                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #41                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_1
       8: invokestatic  #42                 // Method org/springframework/core/codec/Hints.getLogPrefix:(Ljava/util/Map;)Ljava/lang/String;
      11: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: ldc           #44                 // String Parsed
      16: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: aload_0
      20: invokevirtual #45                 // Method isEnableLoggingRequestDetails:()Z
      23: ifeq          45
      26: aload_2
      27: aload_3
      28: invokevirtual #46                 // Method java/lang/Boolean.booleanValue:()Z
      31: ifne          38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: invokestatic  #47                 // Method org/springframework/core/log/LogFormatUtils.formatValue:(Ljava/lang/Object;Z)Ljava/lang/String;
      42: goto          74
      45: new           #40                 // class java/lang/StringBuilder
      48: dup
      49: invokespecial #41                 // Method java/lang/StringBuilder."<init>":()V
      52: ldc           #48                 // String parts
      54: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: aload_2
      58: invokeinterface #49,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      63: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      66: ldc           #51                 // String  (content masked)
      68: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      74: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      80: areturn

  static {};
    Code:
       0: ldc           #53                 // class org/springframework/util/MultiValueMap
       2: iconst_2
       3: anewarray     #54                 // class java/lang/Class
       6: dup
       7: iconst_0
       8: ldc           #55                 // class java/lang/String
      10: aastore
      11: dup
      12: iconst_1
      13: ldc           #56                 // class org/springframework/http/codec/multipart/Part
      15: aastore
      16: invokestatic  #57                 // Method org/springframework/core/ResolvableType.forClassWithGenerics:(Ljava/lang/Class;[Ljava/lang/Class;)Lorg/springframework/core/ResolvableType;
      19: putstatic     #7                  // Field MULTIPART_VALUE_TYPE:Lorg/springframework/core/ResolvableType;
      22: return
}
