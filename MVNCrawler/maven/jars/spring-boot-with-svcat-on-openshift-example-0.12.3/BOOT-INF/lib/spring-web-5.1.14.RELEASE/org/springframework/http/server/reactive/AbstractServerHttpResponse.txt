Compiled from "AbstractServerHttpResponse.java"
public abstract class org.springframework.http.server.reactive.AbstractServerHttpResponse implements org.springframework.http.server.reactive.ServerHttpResponse {
  protected final org.apache.commons.logging.Log logger;

  private final org.springframework.core.io.buffer.DataBufferFactory dataBufferFactory;

  private java.lang.Integer statusCode;

  private final org.springframework.http.HttpHeaders headers;

  private final org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> cookies;

  private final java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractServerHttpResponse$State> state;

  private final java.util.List<java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>> commitActions;

  public org.springframework.http.server.reactive.AbstractServerHttpResponse(org.springframework.core.io.buffer.DataBufferFactory);
    Code:
       0: aload_0
       1: aload_1
       2: new           #1                  // class org/springframework/http/HttpHeaders
       5: dup
       6: invokespecial #2                  // Method org/springframework/http/HttpHeaders."<init>":()V
       9: invokespecial #3                  // Method "<init>":(Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/http/HttpHeaders;)V
      12: return

  public org.springframework.http.server.reactive.AbstractServerHttpResponse(org.springframework.core.io.buffer.DataBufferFactory, org.springframework.http.HttpHeaders);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #5                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: invokestatic  #6                  // Method org/springframework/http/HttpLogging.forLogName:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
      12: putfield      #7                  // Field logger:Lorg/apache/commons/logging/Log;
      15: aload_0
      16: new           #8                  // class java/util/concurrent/atomic/AtomicReference
      19: dup
      20: getstatic     #9                  // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.NEW:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      23: invokespecial #10                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      26: putfield      #11                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      29: aload_0
      30: new           #12                 // class java/util/ArrayList
      33: dup
      34: iconst_4
      35: invokespecial #13                 // Method java/util/ArrayList."<init>":(I)V
      38: putfield      #14                 // Field commitActions:Ljava/util/List;
      41: aload_1
      42: ldc           #15                 // String DataBufferFactory must not be null
      44: invokestatic  #16                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      47: aload_2
      48: ldc           #17                 // String HttpHeaders must not be null
      50: invokestatic  #16                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      53: aload_0
      54: aload_1
      55: putfield      #18                 // Field dataBufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
      58: aload_0
      59: aload_2
      60: putfield      #19                 // Field headers:Lorg/springframework/http/HttpHeaders;
      63: aload_0
      64: new           #20                 // class org/springframework/util/LinkedMultiValueMap
      67: dup
      68: invokespecial #21                 // Method org/springframework/util/LinkedMultiValueMap."<init>":()V
      71: putfield      #22                 // Field cookies:Lorg/springframework/util/MultiValueMap;
      74: return

  public final org.springframework.core.io.buffer.DataBufferFactory bufferFactory();
    Code:
       0: aload_0
       1: getfield      #18                 // Field dataBufferFactory:Lorg/springframework/core/io/buffer/DataBufferFactory;
       4: areturn

  public boolean setStatusCode(org.springframework.http.HttpStatus);
    Code:
       0: aload_0
       1: getfield      #11                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: getstatic     #24                 // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.COMMITTED:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      10: if_acmpne     15
      13: iconst_0
      14: ireturn
      15: aload_0
      16: aload_1
      17: ifnull        30
      20: aload_1
      21: invokevirtual #25                 // Method org/springframework/http/HttpStatus.value:()I
      24: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      27: goto          31
      30: aconst_null
      31: putfield      #27                 // Field statusCode:Ljava/lang/Integer;
      34: iconst_1
      35: ireturn

  public org.springframework.http.HttpStatus getStatusCode();
    Code:
       0: aload_0
       1: getfield      #27                 // Field statusCode:Ljava/lang/Integer;
       4: ifnull        20
       7: aload_0
       8: getfield      #27                 // Field statusCode:Ljava/lang/Integer;
      11: invokevirtual #28                 // Method java/lang/Integer.intValue:()I
      14: invokestatic  #29                 // Method org/springframework/http/HttpStatus.resolve:(I)Lorg/springframework/http/HttpStatus;
      17: goto          21
      20: aconst_null
      21: areturn

  public void setStatusCodeValue(java.lang.Integer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #27                 // Field statusCode:Ljava/lang/Integer;
       5: return

  public java.lang.Integer getStatusCodeValue();
    Code:
       0: aload_0
       1: getfield      #27                 // Field statusCode:Ljava/lang/Integer;
       4: areturn

  public org.springframework.http.HttpHeaders getHeaders();
    Code:
       0: aload_0
       1: getfield      #11                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: getstatic     #24                 // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.COMMITTED:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      10: if_acmpne     23
      13: aload_0
      14: getfield      #19                 // Field headers:Lorg/springframework/http/HttpHeaders;
      17: invokestatic  #30                 // Method org/springframework/http/HttpHeaders.readOnlyHttpHeaders:(Lorg/springframework/http/HttpHeaders;)Lorg/springframework/http/HttpHeaders;
      20: goto          27
      23: aload_0
      24: getfield      #19                 // Field headers:Lorg/springframework/http/HttpHeaders;
      27: areturn

  public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> getCookies();
    Code:
       0: aload_0
       1: getfield      #11                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: getstatic     #24                 // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.COMMITTED:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      10: if_acmpne     23
      13: aload_0
      14: getfield      #22                 // Field cookies:Lorg/springframework/util/MultiValueMap;
      17: invokestatic  #31                 // Method org/springframework/util/CollectionUtils.unmodifiableMultiValueMap:(Lorg/springframework/util/MultiValueMap;)Lorg/springframework/util/MultiValueMap;
      20: goto          27
      23: aload_0
      24: getfield      #22                 // Field cookies:Lorg/springframework/util/MultiValueMap;
      27: areturn

  public void addCookie(org.springframework.http.ResponseCookie);
    Code:
       0: aload_1
       1: ldc           #32                 // String ResponseCookie must not be null
       3: invokestatic  #16                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #11                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      10: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      13: getstatic     #24                 // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.COMMITTED:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      16: if_acmpne     51
      19: new           #33                 // class java/lang/IllegalStateException
      22: dup
      23: new           #34                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      30: ldc           #36                 // String Can\'t add the cookie
      32: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: aload_1
      36: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      39: ldc           #39                 // String because the HTTP response has already been committed
      41: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: invokevirtual #40                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokespecial #41                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      50: athrow
      51: aload_0
      52: invokevirtual #42                 // Method getCookies:()Lorg/springframework/util/MultiValueMap;
      55: aload_1
      56: invokevirtual #43                 // Method org/springframework/http/ResponseCookie.getName:()Ljava/lang/String;
      59: aload_1
      60: invokeinterface #44,  3           // InterfaceMethod org/springframework/util/MultiValueMap.add:(Ljava/lang/Object;Ljava/lang/Object;)V
      65: return

  public abstract <T> T getNativeResponse();

  public void beforeCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>);
    Code:
       0: aload_0
       1: getfield      #14                 // Field commitActions:Ljava/util/List;
       4: aload_1
       5: invokeinterface #45,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  public boolean isCommitted();
    Code:
       0: aload_0
       1: getfield      #11                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: getstatic     #9                  // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.NEW:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      10: if_acmpeq     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public final reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_1
       1: instanceof    #46                 // class reactor/core/publisher/Mono
       4: ifeq          21
       7: aload_1
       8: checkcast     #46                 // class reactor/core/publisher/Mono
      11: aload_0
      12: invokedynamic #47,  0             // InvokeDynamic #0:apply:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;)Ljava/util/function/Function;
      17: invokevirtual #48                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      20: areturn
      21: new           #49                 // class org/springframework/http/server/reactive/ChannelSendOperator
      24: dup
      25: aload_1
      26: aload_0
      27: invokedynamic #50,  0             // InvokeDynamic #1:apply:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;)Ljava/util/function/Function;
      32: invokespecial #51                 // Method org/springframework/http/server/reactive/ChannelSendOperator."<init>":(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;)V
      35: aload_0
      36: invokedynamic #52,  0             // InvokeDynamic #2:accept:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;)Ljava/util/function/Consumer;
      41: invokevirtual #53                 // Method org/springframework/http/server/reactive/ChannelSendOperator.doOnError:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      44: areturn

  public final reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>);
    Code:
       0: new           #49                 // class org/springframework/http/server/reactive/ChannelSendOperator
       3: dup
       4: aload_1
       5: aload_0
       6: invokedynamic #54,  0             // InvokeDynamic #3:apply:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;)Ljava/util/function/Function;
      11: invokespecial #51                 // Method org/springframework/http/server/reactive/ChannelSendOperator."<init>":(Lorg/reactivestreams/Publisher;Ljava/util/function/Function;)V
      14: aload_0
      15: invokedynamic #55,  0             // InvokeDynamic #4:accept:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;)Ljava/util/function/Consumer;
      20: invokevirtual #53                 // Method org/springframework/http/server/reactive/ChannelSendOperator.doOnError:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      23: areturn

  private void removeContentLength();
    Code:
       0: aload_0
       1: invokevirtual #56                 // Method isCommitted:()Z
       4: ifne          17
       7: aload_0
       8: invokevirtual #57                 // Method getHeaders:()Lorg/springframework/http/HttpHeaders;
      11: ldc           #58                 // String Content-Length
      13: invokevirtual #59                 // Method org/springframework/http/HttpHeaders.remove:(Ljava/lang/Object;)Ljava/util/List;
      16: pop
      17: return

  public reactor.core.publisher.Mono<java.lang.Void> setComplete();
    Code:
       0: aload_0
       1: invokevirtual #56                 // Method isCommitted:()Z
       4: ifne          15
       7: aload_0
       8: aconst_null
       9: invokevirtual #60                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      12: goto          18
      15: invokestatic  #61                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      18: areturn

  protected reactor.core.publisher.Mono<java.lang.Void> doCommit();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #60                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
       5: areturn

  protected reactor.core.publisher.Mono<java.lang.Void> doCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>);
    Code:
       0: aload_0
       1: getfield      #11                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: getstatic     #9                  // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.NEW:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
       7: getstatic     #62                 // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.COMMITTING:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      10: invokevirtual #63                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      13: ifne          20
      16: invokestatic  #61                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      19: areturn
      20: aload_0
      21: getfield      #14                 // Field commitActions:Ljava/util/List;
      24: aload_0
      25: invokedynamic #64,  0             // InvokeDynamic #5:get:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;)Ljava/util/function/Supplier;
      30: invokeinterface #45,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      35: pop
      36: aload_1
      37: ifnull        51
      40: aload_0
      41: getfield      #14                 // Field commitActions:Ljava/util/List;
      44: aload_1
      45: invokeinterface #45,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      50: pop
      51: aload_0
      52: getfield      #14                 // Field commitActions:Ljava/util/List;
      55: invokeinterface #65,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      60: invokedynamic #66,  0             // InvokeDynamic #6:apply:()Ljava/util/function/Function;
      65: invokeinterface #67,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      70: invokestatic  #68                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      73: invokeinterface #69,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      78: checkcast     #70                 // class java/util/List
      81: astore_2
      82: aload_2
      83: invokestatic  #71                 // Method reactor/core/publisher/Flux.concat:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      86: invokevirtual #72                 // Method reactor/core/publisher/Flux.then:()Lreactor/core/publisher/Mono;
      89: areturn

  protected abstract reactor.core.publisher.Mono<java.lang.Void> writeWithInternal(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);

  protected abstract reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWithInternal(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>);

  protected abstract void applyStatusCode();

  protected abstract void applyHeaders();

  protected abstract void applyCookies();

  private reactor.core.publisher.Mono lambda$doCommit$9();
    Code:
       0: aload_0
       1: invokedynamic #73,  0             // InvokeDynamic #7:run:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;)Ljava/lang/Runnable;
       6: invokestatic  #74                 // Method reactor/core/publisher/Mono.fromRunnable:(Ljava/lang/Runnable;)Lreactor/core/publisher/Mono;
       9: areturn

  private void lambda$null$8();
    Code:
       0: aload_0
       1: invokevirtual #75                 // Method applyStatusCode:()V
       4: aload_0
       5: invokevirtual #76                 // Method applyHeaders:()V
       8: aload_0
       9: invokevirtual #77                 // Method applyCookies:()V
      12: aload_0
      13: getfield      #11                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      16: getstatic     #24                 // Field org/springframework/http/server/reactive/AbstractServerHttpResponse$State.COMMITTED:Lorg/springframework/http/server/reactive/AbstractServerHttpResponse$State;
      19: invokevirtual #78                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      22: return

  private void lambda$writeAndFlushWith$7(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokespecial #79                 // Method removeContentLength:()V
       4: return

  private org.reactivestreams.Publisher lambda$writeAndFlushWith$6(org.reactivestreams.Publisher);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokedynamic #80,  0             // InvokeDynamic #8:get:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;Lorg/reactivestreams/Publisher;)Ljava/util/function/Supplier;
       8: invokevirtual #60                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      11: areturn

  private reactor.core.publisher.Mono lambda$null$5(org.reactivestreams.Publisher);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #81                 // Method writeAndFlushWithInternal:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       5: areturn

  private void lambda$writeWith$4(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokespecial #79                 // Method removeContentLength:()V
       4: return

  private org.reactivestreams.Publisher lambda$writeWith$3(org.reactivestreams.Publisher);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokedynamic #82,  0             // InvokeDynamic #9:get:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;Lorg/reactivestreams/Publisher;)Ljava/util/function/Supplier;
       8: invokevirtual #60                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      11: areturn

  private reactor.core.publisher.Mono lambda$null$2(org.reactivestreams.Publisher);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #83                 // Method writeWithInternal:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       5: areturn

  private reactor.core.publisher.Mono lambda$writeWith$1(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokedynamic #84,  0             // InvokeDynamic #10:get:(Lorg/springframework/http/server/reactive/AbstractServerHttpResponse;Lorg/springframework/core/io/buffer/DataBuffer;)Ljava/util/function/Supplier;
       8: invokevirtual #60                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      11: ldc           #85                 // class org/springframework/core/io/buffer/PooledDataBuffer
      13: invokedynamic #86,  0             // InvokeDynamic #11:accept:()Ljava/util/function/Consumer;
      18: invokevirtual #87                 // Method reactor/core/publisher/Mono.doOnDiscard:(Ljava/lang/Class;Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      21: areturn

  private reactor.core.publisher.Mono lambda$null$0(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #88                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       5: invokevirtual #83                 // Method writeWithInternal:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
       8: areturn
}
