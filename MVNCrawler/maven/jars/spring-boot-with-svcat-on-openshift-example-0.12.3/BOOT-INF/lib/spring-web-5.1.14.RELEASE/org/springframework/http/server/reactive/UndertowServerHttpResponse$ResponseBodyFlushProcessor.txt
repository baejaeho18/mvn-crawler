Compiled from "UndertowServerHttpResponse.java"
class org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyFlushProcessor extends org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<org.springframework.core.io.buffer.DataBuffer> {
  final org.springframework.http.server.reactive.UndertowServerHttpResponse this$0;

  public org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyFlushProcessor(org.springframework.http.server.reactive.UndertowServerHttpResponse);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;
       5: aload_0
       6: aload_1
       7: invokestatic  #2                  // Method org/springframework/http/server/reactive/UndertowServerHttpResponse.access$000:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;)Lorg/springframework/http/server/reactive/UndertowServerHttpRequest;
      10: invokevirtual #3                  // Method org/springframework/http/server/reactive/UndertowServerHttpRequest.getLogPrefix:()Ljava/lang/String;
      13: invokespecial #4                  // Method org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor."<init>":(Ljava/lang/String;)V
      16: return

  protected org.reactivestreams.Processor<? super org.springframework.core.io.buffer.DataBuffer, java.lang.Void> createWriteProcessor();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;
       4: invokestatic  #5                  // Method org/springframework/http/server/reactive/UndertowServerHttpResponse.access$100:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;)Lorg/springframework/http/server/reactive/UndertowServerHttpResponse$ResponseBodyProcessor;
       7: areturn

  protected void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;
       4: invokestatic  #6                  // Method org/springframework/http/server/reactive/UndertowServerHttpResponse.access$200:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;)Lorg/xnio/channels/StreamSinkChannel;
       7: astore_1
       8: aload_1
       9: ifnull        60
      12: getstatic     #7                  // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
      15: invokeinterface #8,  1            // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      20: ifeq          53
      23: getstatic     #7                  // Field rsWriteFlushLogger:Lorg/apache/commons/logging/Log;
      26: new           #9                  // class java/lang/StringBuilder
      29: dup
      30: invokespecial #10                 // Method java/lang/StringBuilder."<init>":()V
      33: aload_0
      34: invokevirtual #11                 // Method getLogPrefix:()Ljava/lang/String;
      37: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: ldc           #13                 // String flush
      42: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: invokeinterface #15,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      53: aload_1
      54: invokeinterface #16,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.flush:()Z
      59: pop
      60: return

  protected void flushingFailed(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method cancel:()V
       4: aload_0
       5: aload_1
       6: invokevirtual #18                 // Method onError:(Ljava/lang/Throwable;)V
       9: return

  protected boolean isWritePossible();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;
       4: invokestatic  #6                  // Method org/springframework/http/server/reactive/UndertowServerHttpResponse.access$200:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;)Lorg/xnio/channels/StreamSinkChannel;
       7: astore_1
       8: aload_1
       9: ifnull        20
      12: aload_1
      13: invokeinterface #19,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.resumeWrites:()V
      18: iconst_1
      19: ireturn
      20: iconst_0
      21: ireturn

  protected boolean isFlushPending();
    Code:
       0: iconst_0
       1: ireturn
}
