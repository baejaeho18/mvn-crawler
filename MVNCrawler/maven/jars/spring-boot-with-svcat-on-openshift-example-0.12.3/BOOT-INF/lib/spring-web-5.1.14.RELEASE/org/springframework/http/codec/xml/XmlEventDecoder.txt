Compiled from "XmlEventDecoder.java"
public class org.springframework.http.codec.xml.XmlEventDecoder extends org.springframework.core.codec.AbstractDecoder<javax.xml.stream.events.XMLEvent> {
  private static final javax.xml.stream.XMLInputFactory inputFactory;

  private static final boolean aaltoPresent;

  boolean useAalto;

  private int maxInMemorySize;

  public org.springframework.http.codec.xml.XmlEventDecoder();
    Code:
       0: aload_0
       1: iconst_2
       2: anewarray     #1                  // class org/springframework/util/MimeType
       5: dup
       6: iconst_0
       7: getstatic     #2                  // Field org/springframework/util/MimeTypeUtils.APPLICATION_XML:Lorg/springframework/util/MimeType;
      10: aastore
      11: dup
      12: iconst_1
      13: getstatic     #3                  // Field org/springframework/util/MimeTypeUtils.TEXT_XML:Lorg/springframework/util/MimeType;
      16: aastore
      17: invokespecial #4                  // Method org/springframework/core/codec/AbstractDecoder."<init>":([Lorg/springframework/util/MimeType;)V
      20: aload_0
      21: getstatic     #5                  // Field aaltoPresent:Z
      24: putfield      #6                  // Field useAalto:Z
      27: aload_0
      28: iconst_m1
      29: putfield      #7                  // Field maxInMemorySize:I
      32: return

  public void setMaxInMemorySize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field maxInMemorySize:I
       5: return

  public int getMaxInMemorySize();
    Code:
       0: aload_0
       1: getfield      #7                  // Field maxInMemorySize:I
       4: ireturn

  public reactor.core.publisher.Flux<javax.xml.stream.events.XMLEvent> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field useAalto:Z
       4: ifeq          40
       7: new           #8                  // class org/springframework/http/codec/xml/XmlEventDecoder$AaltoDataBufferToXmlEvent
      10: dup
      11: aload_0
      12: getfield      #7                  // Field maxInMemorySize:I
      15: invokespecial #9                  // Method org/springframework/http/codec/xml/XmlEventDecoder$AaltoDataBufferToXmlEvent."<init>":(I)V
      18: astore        5
      20: aload_1
      21: invokestatic  #10                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      24: aload         5
      26: invokevirtual #11                 // Method reactor/core/publisher/Flux.flatMapIterable:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      29: aload         5
      31: invokedynamic #12,  0             // InvokeDynamic #0:accept:(Lorg/springframework/http/codec/xml/XmlEventDecoder$AaltoDataBufferToXmlEvent;)Ljava/util/function/Consumer;
      36: invokevirtual #13                 // Method reactor/core/publisher/Flux.doFinally:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
      39: areturn
      40: aload_1
      41: aload_0
      42: invokevirtual #14                 // Method getMaxInMemorySize:()I
      45: invokestatic  #15                 // Method org/springframework/core/io/buffer/DataBufferUtils.join:(Lorg/reactivestreams/Publisher;I)Lreactor/core/publisher/Mono;
      48: invokedynamic #16,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      53: invokevirtual #17                 // Method reactor/core/publisher/Mono.flatMapIterable:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      56: areturn

  private static java.lang.Iterable lambda$decode$2(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: invokeinterface #18,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asInputStream:()Ljava/io/InputStream;
       6: astore_1
       7: getstatic     #19                 // Field inputFactory:Ljavax/xml/stream/XMLInputFactory;
      10: aload_1
      11: invokevirtual #20                 // Method javax/xml/stream/XMLInputFactory.createXMLEventReader:(Ljava/io/InputStream;)Ljavax/xml/stream/XMLEventReader;
      14: astore_2
      15: new           #21                 // class java/util/ArrayList
      18: dup
      19: invokespecial #22                 // Method java/util/ArrayList."<init>":()V
      22: astore_3
      23: aload_2
      24: aload_3
      25: invokedynamic #23,  0             // InvokeDynamic #2:accept:(Ljava/util/List;)Ljava/util/function/Consumer;
      30: invokeinterface #24,  2           // InterfaceMethod java/util/Iterator.forEachRemaining:(Ljava/util/function/Consumer;)V
      35: aload_3
      36: astore        4
      38: aload_0
      39: invokestatic  #25                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
      42: pop
      43: aload         4
      45: areturn
      46: astore_1
      47: aload_1
      48: invokestatic  #27                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      51: athrow
      52: astore        5
      54: aload_0
      55: invokestatic  #25                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
      58: pop
      59: aload         5
      61: athrow
    Exception table:
       from    to  target type
           0    38    46   Class javax/xml/stream/XMLStreamException
           0    38    52   any
          46    54    52   any

  private static void lambda$null$1(java.util.List, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #28                 // class javax/xml/stream/events/XMLEvent
       5: invokeinterface #29,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  private static void lambda$decode$0(org.springframework.http.codec.xml.XmlEventDecoder$AaltoDataBufferToXmlEvent, reactor.core.publisher.SignalType);
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method org/springframework/http/codec/xml/XmlEventDecoder$AaltoDataBufferToXmlEvent.endOfInput:()V
       4: return

  static {};
    Code:
       0: invokestatic  #31                 // Method org/springframework/util/xml/StaxUtils.createDefensiveInputFactory:()Ljavax/xml/stream/XMLInputFactory;
       3: putstatic     #19                 // Field inputFactory:Ljavax/xml/stream/XMLInputFactory;
       6: ldc           #32                 // String com.fasterxml.aalto.AsyncXMLStreamReader
       8: ldc           #33                 // class org/springframework/http/codec/xml/XmlEventDecoder
      10: invokevirtual #34                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
      13: invokestatic  #35                 // Method org/springframework/util/ClassUtils.isPresent:(Ljava/lang/String;Ljava/lang/ClassLoader;)Z
      16: putstatic     #5                  // Field aaltoPresent:Z
      19: return
}
